void sub_191529890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v26;

  MEMORY[0x19401CD90](v20, 0x10B1C40EA042734);
  operator delete(v21);
  if (STACK[0x260])
    operator delete((void *)STACK[0x260]);
  if (STACK[0x278])
    operator delete((void *)STACK[0x278]);
  if (STACK[0x290])
    operator delete((void *)STACK[0x290]);
  if (STACK[0x320])
    operator delete((void *)STACK[0x320]);
  if (STACK[0x350])
    operator delete((void *)STACK[0x350]);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    operator delete(v26);
    if (!v23)
      goto LABEL_15;
  }
  else if (!v23)
  {
LABEL_15:
    if (!v22)
    {
LABEL_19:
      operator delete(a18);
      operator delete(a20);
      _Unwind_Resume(a1);
    }
LABEL_18:
    operator delete(v22);
    goto LABEL_19;
  }
  operator delete(v23);
  if (!v22)
    goto LABEL_19;
  goto LABEL_18;
}

void SentenceRecognizer::init<signed char>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  unint64_t v92;
  uint64_t *v93;
  void **v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  char **v130;
  unint64_t v131;
  char ***v132;
  _QWORD *v133;
  uint64_t v134;
  int v135;
  int v136;
  unint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  char v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  _QWORD *v227;
  _DWORD *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  void *v232;
  char **v233;
  unint64_t v234;
  char ***v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char ***v243;
  char *v244;
  char *v245;
  char **v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  unint64_t v263;
  uint64_t *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  _QWORD *v273;
  uint64_t v274;
  int v275;
  int v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  _QWORD *v285;
  uint64_t v286;
  int v287;
  int v288;
  unint64_t v289;
  uint64_t *v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t *v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t *v298;
  _QWORD *v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t *v310;
  _QWORD *v311;
  uint64_t v312;
  int v313;
  int v314;
  unint64_t v315;
  uint64_t *v316;
  _QWORD *v317;
  uint64_t v318;
  int v319;
  int v320;
  int v321;
  unint64_t v322;
  uint64_t *v323;
  _QWORD *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t *v327;
  _QWORD *v328;
  uint64_t v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  int v335;
  int v336;
  int v337;
  unint64_t v338;
  uint64_t *v339;
  _QWORD *v340;
  uint64_t *v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t *v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  unint64_t v358;
  char *v359;
  char *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  char **v371;
  unint64_t v372;
  char ***v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  char ***v381;
  unint64_t v382;
  char *v383;
  char *v384;
  char **v385;
  _QWORD *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t *v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  unint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  unint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  _QWORD *v424;
  _QWORD *v425;
  _QWORD *v426;
  char **v427;
  unint64_t v428;
  char ***v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  char ***v437;
  unint64_t v438;
  char *v439;
  char *v440;
  char **v441;
  _QWORD *v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t *v452;
  unint64_t v453;
  _QWORD *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  void **v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  void **v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  int v666;
  _QWORD *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t *v682;
  uint64_t v683;
  uint64_t v684;
  _QWORD *v685;
  _QWORD *v686;
  _QWORD *v687;
  char **v688;
  unint64_t v689;
  char ***v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  _QWORD *v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  uint64_t v718;
  _QWORD *v719;
  _QWORD *v720;
  _QWORD *v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  _QWORD *v735;
  _QWORD *v736;
  _QWORD *v737;
  char **v738;
  unint64_t v739;
  char ***v740;
  _QWORD *v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t *v748;
  unint64_t v749;
  char *v750;
  char *v751;
  uint64_t v752;
  _QWORD *v753;
  uint64_t *v754;
  unint64_t v755;
  _QWORD *v756;
  char *v757;
  char *v758;
  uint64_t v759;
  uint64_t *v760;
  unint64_t v761;
  char *v762;
  char *v763;
  uint64_t v764;
  _QWORD *v765;
  uint64_t *v766;
  unint64_t v767;
  char *v768;
  char *v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  unint64_t v774;
  uint64_t *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t *v781;
  unint64_t v782;
  char *v783;
  char *v784;
  uint64_t v785;
  _QWORD *v786;
  char *v787;
  uint64_t v788;
  uint64_t *v789;
  unint64_t v790;
  char *v791;
  char *v792;
  uint64_t v793;
  _QWORD *v794;
  uint64_t *v795;
  unint64_t v796;
  char *v797;
  char *v798;
  uint64_t v799;
  _QWORD *v800;
  uint64_t *v801;
  unint64_t v802;
  char *v803;
  char *v804;
  uint64_t v805;
  _QWORD *v806;
  uint64_t *v807;
  unint64_t v808;
  char *v809;
  char *v810;
  uint64_t v811;
  _QWORD *v812;
  uint64_t *v813;
  unint64_t v814;
  char *v815;
  char *v816;
  uint64_t v817;
  _QWORD *v818;
  uint64_t *v819;
  unint64_t v820;
  char *v821;
  char *v822;
  uint64_t v823;
  _QWORD *v824;
  uint64_t *v825;
  unint64_t v826;
  char *v827;
  char *v828;
  uint64_t v829;
  _QWORD *v830;
  uint64_t *v831;
  unint64_t v832;
  char *v833;
  char *v834;
  uint64_t v835;
  _QWORD *v836;
  uint64_t *v837;
  unint64_t v838;
  char *v839;
  char *v840;
  uint64_t v841;
  _QWORD *v842;
  uint64_t v843;
  int v844;
  unint64_t v845;
  uint64_t *v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  int v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  unint64_t v864;
  uint64_t *v865;
  _QWORD *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  unint64_t v875;
  uint64_t *v876;
  _QWORD *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t v884;
  int v885;
  unint64_t v886;
  uint64_t *v887;
  _QWORD *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  int v896;
  unint64_t v897;
  uint64_t *v898;
  _QWORD *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  int v907;
  unint64_t v908;
  uint64_t *v909;
  _QWORD *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  int v919;
  _QWORD *v920;
  uint64_t v921;
  uint64_t v922;
  _QWORD *v923;
  uint64_t v924;
  _QWORD *v925;
  uint64_t v926;
  unint64_t v927;
  uint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t *v931;
  _QWORD *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  unint64_t v941;
  uint64_t *v942;
  _QWORD *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  int v950;
  uint64_t v951;
  _QWORD *v952;
  uint64_t v953;
  uint64_t v954;
  _QWORD *v955;
  uint64_t v956;
  _QWORD *v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  int v962;
  unint64_t v963;
  uint64_t *v964;
  _QWORD *v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unint64_t v970;
  uint64_t v971;
  uint64_t *v972;
  unint64_t v973;
  char *v974;
  char *v975;
  uint64_t v976;
  _QWORD *v977;
  uint64_t *v978;
  unint64_t v979;
  char *v980;
  char *v981;
  uint64_t v982;
  _QWORD *v983;
  uint64_t *v984;
  unint64_t v985;
  char *v986;
  char *v987;
  uint64_t v988;
  _QWORD *v989;
  uint64_t *v990;
  unint64_t v991;
  char *v992;
  char *v993;
  uint64_t v994;
  _QWORD *v995;
  uint64_t *v996;
  unint64_t v997;
  char *v998;
  char *v999;
  uint64_t v1000;
  _QWORD *v1001;
  uint64_t *v1002;
  unint64_t v1003;
  char *v1004;
  char *v1005;
  uint64_t v1006;
  _QWORD *v1007;
  uint64_t *v1008;
  unint64_t v1009;
  char *v1010;
  char *v1011;
  uint64_t v1012;
  _QWORD *v1013;
  uint64_t *v1014;
  unint64_t v1015;
  char *v1016;
  char *v1017;
  uint64_t v1018;
  _DWORD *v1019;
  void **v1020;
  uint64_t *v1021;
  unint64_t v1022;
  char *v1023;
  char *v1024;
  uint64_t v1025;
  _QWORD *v1026;
  uint64_t *v1027;
  unint64_t v1028;
  char *v1029;
  char *v1030;
  uint64_t v1031;
  _QWORD *v1032;
  uint64_t *v1033;
  unint64_t v1034;
  char *v1035;
  char *v1036;
  uint64_t v1037;
  uint64_t *v1038;
  unint64_t v1039;
  char *v1040;
  char *v1041;
  uint64_t v1042;
  _QWORD *v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t *v1046;
  _QWORD *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  uint64_t *v1056;
  _QWORD *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  int v1065;
  unint64_t v1066;
  uint64_t *v1067;
  _QWORD *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  int v1076;
  unint64_t v1077;
  uint64_t *v1078;
  _QWORD *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  unint64_t v1088;
  uint64_t *v1089;
  _QWORD *v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  unint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  int v1098;
  unint64_t v1099;
  uint64_t *v1100;
  _QWORD *v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  int v1109;
  int v1110;
  unint64_t v1111;
  uint64_t *v1112;
  _QWORD *v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  int v1121;
  unint64_t v1122;
  uint64_t *v1123;
  _QWORD *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  int v1132;
  int v1133;
  unint64_t v1134;
  uint64_t *v1135;
  _QWORD *v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  int v1144;
  int v1145;
  unint64_t v1146;
  uint64_t *v1147;
  _QWORD *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  uint64_t *v1155;
  unint64_t v1156;
  char *v1157;
  char *v1158;
  uint64_t v1159;
  _QWORD *v1160;
  char ***v1161;
  unint64_t v1162;
  char *v1163;
  char *v1164;
  char **v1165;
  _QWORD *v1166;
  uint64_t v1167;
  int v1168;
  int v1169;
  unint64_t v1170;
  uint64_t *v1171;
  _QWORD *v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t *v1179;
  unint64_t v1180;
  char *v1181;
  char *v1182;
  uint64_t v1183;
  _QWORD *v1184;
  uint64_t *v1185;
  unint64_t v1186;
  char *v1187;
  char *v1188;
  uint64_t v1189;
  _QWORD *v1190;
  uint64_t *v1191;
  unint64_t v1192;
  char *v1193;
  char *v1194;
  uint64_t v1195;
  _QWORD *v1196;
  char *v1197;
  uint64_t v1198;
  _QWORD *v1199;
  uint64_t *v1200;
  unint64_t v1201;
  char *v1202;
  char *v1203;
  uint64_t v1204;
  _QWORD *v1205;
  uint64_t *v1206;
  unint64_t v1207;
  char *v1208;
  char *v1209;
  uint64_t v1210;
  _QWORD *v1211;
  uint64_t *v1212;
  unint64_t v1213;
  char *v1214;
  char *v1215;
  uint64_t v1216;
  _QWORD *v1217;
  uint64_t *v1218;
  unint64_t v1219;
  char *v1220;
  char *v1221;
  uint64_t v1222;
  _QWORD *v1223;
  uint64_t *v1224;
  unint64_t v1225;
  char *v1226;
  char *v1227;
  uint64_t v1228;
  _QWORD *v1229;
  uint64_t *v1230;
  unint64_t v1231;
  char *v1232;
  char *v1233;
  uint64_t v1234;
  _QWORD *v1235;
  uint64_t *v1236;
  unint64_t v1237;
  char *v1238;
  char *v1239;
  uint64_t v1240;
  _QWORD *v1241;
  uint64_t v1242;
  uint64_t *v1243;
  uint64_t v1244;
  int v1245;
  uint64_t v1246;
  uint64_t v1247;
  unint64_t v1248;
  unint64_t v1249;
  uint64_t *v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  int v1257;
  uint64_t *v1258;
  uint64_t *v1259;
  uint64_t v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  int v1264;
  uint64_t v1265;
  uint64_t v1266;
  int v1267;
  _QWORD *v1268;
  _QWORD *v1269;
  _QWORD *v1270;
  char **v1271;
  unint64_t v1272;
  char ***v1273;
  _QWORD *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  unint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  int v1282;
  unint64_t v1283;
  uint64_t *v1284;
  _QWORD *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int v1293;
  int v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  int v1298;
  _QWORD *v1299;
  _QWORD *v1300;
  _QWORD *v1301;
  char **v1302;
  unint64_t v1303;
  char ***v1304;
  _QWORD *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  int v1314;
  unint64_t v1315;
  uint64_t *v1316;
  _QWORD *v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  uint64_t *v1324;
  uint64_t v1325;
  int v1326;
  unint64_t v1327;
  uint64_t *v1328;
  _QWORD *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  int v1337;
  unint64_t v1338;
  uint64_t *v1339;
  _QWORD *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  int v1348;
  unint64_t v1349;
  uint64_t *v1350;
  _QWORD *v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  unint64_t v1356;
  uint64_t v1357;
  uint64_t *v1358;
  unint64_t v1359;
  char *v1360;
  char *v1361;
  uint64_t v1362;
  _QWORD *v1363;
  uint64_t *v1364;
  unint64_t v1365;
  char *v1366;
  char *v1367;
  uint64_t v1368;
  _QWORD *v1369;
  uint64_t *v1370;
  unint64_t v1371;
  char *v1372;
  char *v1373;
  uint64_t v1374;
  uint64_t *v1375;
  unint64_t v1376;
  char *v1377;
  char *v1378;
  uint64_t v1379;
  _QWORD *v1380;
  uint64_t *v1381;
  unint64_t v1382;
  char *v1383;
  char *v1384;
  uint64_t v1385;
  _QWORD *v1386;
  uint64_t *v1387;
  unint64_t v1388;
  char *v1389;
  char *v1390;
  uint64_t v1391;
  _QWORD *v1392;
  uint64_t *v1393;
  unint64_t v1394;
  char *v1395;
  char *v1396;
  uint64_t v1397;
  _QWORD *v1398;
  uint64_t *v1399;
  unint64_t v1400;
  char *v1401;
  char *v1402;
  uint64_t v1403;
  _QWORD *v1404;
  uint64_t *v1405;
  unint64_t v1406;
  char *v1407;
  char *v1408;
  uint64_t v1409;
  _QWORD *v1410;
  uint64_t v1411;
  unint64_t v1412;
  unint64_t v1413;
  void *v1414;
  char **v1415;
  unint64_t v1416;
  char ***v1417;
  _QWORD *v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  int v1426;
  unint64_t v1427;
  uint64_t *v1428;
  _QWORD *v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  int v1437;
  unint64_t v1438;
  uint64_t *v1439;
  _QWORD *v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  unint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  int v1448;
  unint64_t v1449;
  uint64_t *v1450;
  _QWORD *v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  int v1459;
  unint64_t v1460;
  uint64_t *v1461;
  _QWORD *v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  unint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  int v1470;
  unint64_t v1471;
  uint64_t *v1472;
  _QWORD *v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  int v1481;
  unint64_t v1482;
  uint64_t *v1483;
  _QWORD *v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t *v1491;
  unint64_t v1492;
  char *v1493;
  char *v1494;
  uint64_t v1495;
  _QWORD *v1496;
  uint64_t v1497;
  unint64_t v1498;
  unint64_t v1499;
  void *v1500;
  char **v1501;
  unint64_t v1502;
  char ***v1503;
  _QWORD *v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  void *v1514;
  char **v1515;
  char *v1516;
  char ***v1517;
  uint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  unint64_t v1522;
  unint64_t v1523;
  void *v1524;
  char **v1525;
  unint64_t v1526;
  char ***v1527;
  _QWORD *v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  unint64_t v1533;
  uint64_t v1534;
  uint64_t *v1535;
  unint64_t v1536;
  char *v1537;
  char *v1538;
  uint64_t v1539;
  _QWORD *v1540;
  uint64_t *v1541;
  unint64_t v1542;
  char *v1543;
  char *v1544;
  uint64_t v1545;
  _QWORD *v1546;
  uint64_t *v1547;
  unint64_t v1548;
  char *v1549;
  char *v1550;
  uint64_t v1551;
  _QWORD *v1552;
  uint64_t *v1553;
  unint64_t v1554;
  char *v1555;
  char *v1556;
  uint64_t v1557;
  _QWORD *v1558;
  char ***v1559;
  unint64_t v1560;
  char *v1561;
  char *v1562;
  char **v1563;
  _QWORD *v1564;
  uint64_t v1565;
  unint64_t v1566;
  unint64_t v1567;
  void *v1568;
  char **v1569;
  unint64_t v1570;
  char ***v1571;
  _QWORD *v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  unint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  int v1580;
  unint64_t v1581;
  uint64_t *v1582;
  _QWORD *v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  unint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  int v1591;
  unint64_t v1592;
  uint64_t *v1593;
  _QWORD *v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  int v1602;
  unint64_t v1603;
  uint64_t *v1604;
  _QWORD *v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  uint64_t v1611;
  uint64_t *v1612;
  unint64_t v1613;
  char *v1614;
  char *v1615;
  uint64_t v1616;
  _QWORD *v1617;
  uint64_t *v1618;
  unint64_t v1619;
  char *v1620;
  char *v1621;
  uint64_t v1622;
  _QWORD *v1623;
  uint64_t *v1624;
  unint64_t v1625;
  char *v1626;
  char *v1627;
  uint64_t v1628;
  _QWORD *v1629;
  uint64_t *v1630;
  unint64_t v1631;
  char *v1632;
  char *v1633;
  uint64_t v1634;
  _QWORD *v1635;
  uint64_t *v1636;
  unint64_t v1637;
  char *v1638;
  char *v1639;
  uint64_t v1640;
  _QWORD *v1641;
  uint64_t *v1642;
  unint64_t v1643;
  char *v1644;
  char *v1645;
  uint64_t v1646;
  _QWORD *v1647;
  uint64_t *v1648;
  unint64_t v1649;
  char *v1650;
  char *v1651;
  uint64_t v1652;
  _QWORD *v1653;
  uint64_t v1654;
  int v1655;
  unint64_t v1656;
  uint64_t *v1657;
  _QWORD *v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  unint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  int v1666;
  unint64_t v1667;
  uint64_t *v1668;
  _QWORD *v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  int v1677;
  unint64_t v1678;
  uint64_t *v1679;
  _QWORD *v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  unint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  int v1688;
  unint64_t v1689;
  uint64_t *v1690;
  _QWORD *v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  unint64_t v1696;
  uint64_t v1697;
  char ***v1698;
  unint64_t v1699;
  char *v1700;
  char *v1701;
  char **v1702;
  _QWORD *v1703;
  uint64_t v1704;
  uint64_t *v1705;
  int v1706;
  uint64_t v1707;
  _QWORD *v1708;
  uint64_t v1709;
  uint64_t v1710;
  char *v1711;
  uint64_t v1712;
  _QWORD *v1713;
  uint64_t v1714;
  unint64_t v1715;
  uint64_t v1716;
  char ***v1717;
  unint64_t v1718;
  char *v1719;
  char *v1720;
  char **v1721;
  _QWORD *v1722;
  int v1723;
  uint64_t v1724;
  _QWORD *v1725;
  uint64_t v1726;
  uint64_t v1727;
  char *v1728;
  uint64_t v1729;
  _QWORD *v1730;
  uint64_t v1731;
  unint64_t v1732;
  uint64_t v1733;
  char ***v1734;
  unint64_t v1735;
  char *v1736;
  char *v1737;
  char **v1738;
  _QWORD *v1739;
  int v1740;
  uint64_t v1741;
  int v1742;
  _QWORD *v1743;
  uint64_t v1744;
  uint64_t v1745;
  char *v1746;
  uint64_t v1747;
  _QWORD *v1748;
  uint64_t v1749;
  unint64_t v1750;
  uint64_t v1751;
  uint64_t *v1752;
  unint64_t v1753;
  char *v1754;
  char *v1755;
  uint64_t v1756;
  _QWORD *v1757;
  uint64_t *v1758;
  unint64_t v1759;
  char *v1760;
  char *v1761;
  uint64_t v1762;
  _QWORD *v1763;
  uint64_t *v1764;
  unint64_t v1765;
  char *v1766;
  char *v1767;
  uint64_t v1768;
  _QWORD *v1769;
  uint64_t v1770;
  int v1771;
  unint64_t v1772;
  uint64_t *v1773;
  _QWORD *v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  unint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  int v1782;
  unint64_t v1783;
  uint64_t *v1784;
  _QWORD *v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  uint64_t *v1792;
  unint64_t v1793;
  char *v1794;
  char *v1795;
  uint64_t v1796;
  _QWORD *v1797;
  uint64_t *v1798;
  unint64_t v1799;
  char *v1800;
  char *v1801;
  uint64_t v1802;
  _QWORD *v1803;
  uint64_t *v1804;
  unint64_t v1805;
  char *v1806;
  char *v1807;
  uint64_t v1808;
  _QWORD *v1809;
  uint64_t *v1810;
  unint64_t v1811;
  char *v1812;
  char *v1813;
  uint64_t v1814;
  _QWORD *v1815;
  uint64_t v1816;
  int v1817;
  unint64_t v1818;
  uint64_t *v1819;
  _QWORD *v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  unint64_t v1825;
  uint64_t v1826;
  uint64_t *v1827;
  unint64_t v1828;
  char *v1829;
  char *v1830;
  uint64_t v1831;
  _QWORD *v1832;
  uint64_t *v1833;
  unint64_t v1834;
  char *v1835;
  char *v1836;
  uint64_t v1837;
  _QWORD *v1838;
  uint64_t *v1839;
  unint64_t v1840;
  char *v1841;
  char *v1842;
  uint64_t v1843;
  _QWORD *v1844;
  uint64_t v1845;
  unint64_t v1846;
  unint64_t v1847;
  void *v1848;
  char **v1849;
  unint64_t v1850;
  char ***v1851;
  _QWORD *v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  unint64_t v1857;
  uint64_t v1858;
  char ***v1859;
  unint64_t v1860;
  char *v1861;
  char *v1862;
  char **v1863;
  _QWORD *v1864;
  char ***v1865;
  unint64_t v1866;
  char *v1867;
  char *v1868;
  char **v1869;
  _QWORD *v1870;
  uint64_t v1871;
  unint64_t v1872;
  unint64_t v1873;
  void *v1874;
  char **v1875;
  char ***v1876;
  uint64_t v1877;
  unint64_t v1878;
  unint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  unint64_t v1882;
  uint64_t *v1883;
  _QWORD *v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  unint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  unint64_t v1892;
  uint64_t *v1893;
  _QWORD *v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  unint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t *v1902;
  uint64_t v1903;
  int v1904;
  uint64_t v1905;
  uint64_t v1906;
  unint64_t v1907;
  unint64_t v1908;
  uint64_t *v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  _QWORD *v1913;
  _QWORD *v1914;
  _QWORD *v1915;
  unint64_t v1916;
  _QWORD *v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  unint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  unint64_t v1925;
  unint64_t v1926;
  void *v1927;
  char **v1928;
  unint64_t v1929;
  char ***v1930;
  _QWORD *v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  unint64_t v1936;
  uint64_t v1937;
  char ***v1938;
  unint64_t v1939;
  char *v1940;
  char *v1941;
  char **v1942;
  _QWORD *v1943;
  uint64_t *v1944;
  unint64_t v1945;
  char *v1946;
  char *v1947;
  uint64_t v1948;
  _QWORD *v1949;
  uint64_t *v1950;
  unint64_t v1951;
  char *v1952;
  char *v1953;
  uint64_t v1954;
  _QWORD *v1955;
  char ***v1956;
  char **v1957;
  int v1958;
  uint64_t v1959;
  _QWORD *v1960;
  uint64_t v1961;
  uint64_t v1962;
  char *v1963;
  uint64_t v1964;
  _QWORD *v1965;
  uint64_t v1966;
  unint64_t v1967;
  uint64_t v1968;
  int v1969;
  uint64_t v1970;
  _QWORD *v1971;
  uint64_t v1972;
  uint64_t v1973;
  char *v1974;
  uint64_t v1975;
  _QWORD *v1976;
  uint64_t v1977;
  unint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  unint64_t v1981;
  uint64_t *v1982;
  _QWORD *v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  unint64_t v1988;
  uint64_t v1989;
  char ***v1990;
  unint64_t v1991;
  char *v1992;
  char *v1993;
  char **v1994;
  _QWORD *v1995;
  int v1996;
  uint64_t v1997;
  int v1998;
  _QWORD *v1999;
  uint64_t v2000;
  uint64_t v2001;
  char *v2002;
  uint64_t v2003;
  _QWORD *v2004;
  uint64_t v2005;
  unint64_t v2006;
  uint64_t v2007;
  uint64_t *v2008;
  unint64_t v2009;
  char *v2010;
  char *v2011;
  uint64_t v2012;
  _QWORD *v2013;
  uint64_t v2014;
  int v2015;
  uint64_t v2016;
  uint64_t v2017;
  int v2018;
  _QWORD *v2019;
  _QWORD *v2020;
  _QWORD *v2021;
  char **v2022;
  unint64_t v2023;
  char ***v2024;
  _QWORD *v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  unint64_t v2030;
  uint64_t v2031;
  char ***v2032;
  unint64_t v2033;
  char *v2034;
  char *v2035;
  char **v2036;
  char *v2037;
  char **v2038;
  char *v2039;
  char **v2040;
  char ***v2041;
  unint64_t v2042;
  char *v2043;
  char *v2044;
  char **v2045;
  _QWORD *v2046;
  uint64_t v2047;
  unint64_t v2048;
  unint64_t v2049;
  void *v2050;
  char **v2051;
  unint64_t v2052;
  char ***v2053;
  _QWORD *v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  unint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  unint64_t v2062;
  unint64_t v2063;
  void *v2064;
  char **v2065;
  uint64_t *v2066;
  uint64_t v2067;
  unint64_t v2068;
  unint64_t v2069;
  uint64_t v2070;
  void *v2071;
  char ***v2072;
  unint64_t v2073;
  char *v2074;
  char *v2075;
  char **v2076;
  _QWORD *v2077;
  char ***v2078;
  char **v2079;
  int v2080;
  uint64_t v2081;
  int v2082;
  uint64_t v2083;
  uint64_t v2084;
  unint64_t v2085;
  unint64_t v2086;
  uint64_t *v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  char ***v2091;
  uint64_t v2092;
  uint64_t v2093;
  int v2094;
  uint64_t v2095;
  _QWORD *v2096;
  uint64_t v2097;
  uint64_t v2098;
  char *v2099;
  uint64_t v2100;
  _QWORD *v2101;
  uint64_t v2102;
  unint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  unint64_t v2106;
  unint64_t v2107;
  void *v2108;
  char **v2109;
  unint64_t v2110;
  char ***v2111;
  _QWORD *v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  unint64_t v2117;
  uint64_t v2118;
  int v2119;
  uint64_t v2120;
  int v2121;
  unint64_t v2122;
  uint64_t *v2123;
  _QWORD *v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  unint64_t v2129;
  uint64_t v2130;
  char *v2131;
  char **v2132;
  _QWORD *v2133;
  char ***v2134;
  unint64_t v2135;
  char *v2136;
  char *v2137;
  char **v2138;
  _QWORD *v2139;
  int v2140;
  uint64_t v2141;
  int v2142;
  unint64_t v2143;
  uint64_t *v2144;
  _QWORD *v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  unint64_t v2150;
  uint64_t v2151;
  uint64_t *v2152;
  unint64_t v2153;
  char *v2154;
  char *v2155;
  uint64_t v2156;
  _QWORD *v2157;
  _DWORD *v2158;
  char ***v2159;
  unint64_t v2160;
  char *v2161;
  char *v2162;
  char **v2163;
  _QWORD *v2164;
  unint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  unint64_t v2170;
  uint64_t v2171;
  uint64_t *v2172;
  unint64_t v2173;
  char *v2174;
  char *v2175;
  uint64_t v2176;
  _QWORD *v2177;
  char *v2178;
  uint64_t v2179;
  _QWORD *v2180;
  uint64_t v2181;
  int v2182;
  int v2183;
  uint64_t v2184;
  char *v2185;
  uint64_t v2186;
  char *v2187;
  uint64_t v2188;
  uint64_t v2189;
  char *v2190;
  char *v2191;
  uint64_t v2192;
  char v2193;
  int v2194;
  uint64_t v2195;
  uint64_t v2196;
  unint64_t v2197;
  unint64_t v2198;
  uint64_t v2199;
  uint64_t *v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  void **v2204;
  uint64_t v2205;
  unint64_t v2206;
  void **v2207;
  int v2208;
  int v2209;
  unint64_t v2210;
  char *v2211;
  _DWORD *v2212;
  char *v2213;
  uint64_t v2214;
  unint64_t v2215;
  uint64_t v2216;
  unint64_t v2217;
  uint64_t v2218;
  _DWORD *v2219;
  int v2220;
  unint64_t v2221;
  char *v2222;
  _DWORD *v2223;
  char *v2224;
  uint64_t v2225;
  unint64_t v2226;
  uint64_t v2227;
  unint64_t v2228;
  uint64_t v2229;
  _DWORD *v2230;
  int v2231;
  unint64_t v2232;
  uint64_t *v2233;
  _QWORD *v2234;
  int v2235;
  uint64_t v2236;
  unint64_t v2237;
  uint64_t *v2238;
  _QWORD *v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  unint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  unint64_t v2250;
  uint64_t v2251;
  uint64_t *v2252;
  unint64_t v2253;
  char *v2254;
  char *v2255;
  uint64_t v2256;
  _QWORD *v2257;
  uint64_t *v2258;
  unint64_t v2259;
  char *v2260;
  char *v2261;
  uint64_t v2262;
  _QWORD *v2263;
  uint64_t v2264;
  unint64_t v2265;
  unint64_t v2266;
  void *v2267;
  char **v2268;
  char *v2269;
  char ***v2270;
  uint64_t v2271;
  unint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  char ***v2275;
  int v2276;
  uint64_t v2277;
  _QWORD *v2278;
  uint64_t v2279;
  uint64_t v2280;
  char *v2281;
  uint64_t v2282;
  _QWORD *v2283;
  uint64_t v2284;
  unint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  unint64_t v2288;
  unint64_t v2289;
  void *v2290;
  char **v2291;
  char ***v2292;
  uint64_t v2293;
  unint64_t v2294;
  unint64_t v2295;
  uint64_t v2296;
  char ***v2297;
  char **v2298;
  int v2299;
  uint64_t v2300;
  _QWORD *v2301;
  uint64_t v2302;
  uint64_t v2303;
  char *v2304;
  uint64_t v2305;
  _QWORD *v2306;
  uint64_t v2307;
  unint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  unint64_t v2311;
  unint64_t v2312;
  void *v2313;
  char **v2314;
  uint64_t *v2315;
  uint64_t v2316;
  unint64_t v2317;
  unint64_t v2318;
  uint64_t v2319;
  char ***v2320;
  char **v2321;
  int v2322;
  uint64_t v2323;
  int v2324;
  uint64_t v2325;
  uint64_t v2326;
  unint64_t v2327;
  unint64_t v2328;
  uint64_t *v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  _QWORD *v2333;
  _QWORD *v2334;
  void *v2335;
  char **v2336;
  unint64_t v2337;
  char ***v2338;
  _QWORD *v2339;
  uint64_t v2340;
  uint64_t v2341;
  uint64_t v2342;
  uint64_t v2343;
  unint64_t v2344;
  uint64_t v2345;
  char ***v2346;
  unint64_t v2347;
  char *v2348;
  char *v2349;
  char **v2350;
  _QWORD *v2351;
  _QWORD *v2352;
  int v2353;
  uint64_t v2354;
  int v2355;
  std::vector<int> *v2356;
  int v2357;
  int v2358;
  int v2359;
  void *v2360;
  std::vector<int> *v2361;
  _DWORD *v2362;
  int v2365;
  uint64_t v2366;
  void *v2367[3];
  void *v2368;
  void *v2369;
  uint64_t v2370;
  void *v2371;
  void *v2372;
  uint64_t v2373;
  void *v2374;
  void *v2375;
  uint64_t v2376;
  void *v2377;
  void *v2378;
  uint64_t v2379;
  void *v2380;
  void *v2381;
  uint64_t v2382;
  void *v2383;
  void *v2384;
  uint64_t v2385;
  void *v2386;
  void *v2387;
  uint64_t v2388;
  void *v2389;
  void *v2390;
  uint64_t v2391;
  void *v2392;
  void *v2393;
  uint64_t v2394;
  void *v2395;
  void *v2396;
  uint64_t v2397;
  void *v2398;
  void *v2399;
  uint64_t v2400;
  void *v2401;
  void *v2402;
  uint64_t v2403;
  void *v2404;
  void *v2405;
  uint64_t v2406;
  void *v2407;
  void *v2408;
  uint64_t v2409;
  void *v2410;
  void *v2411;
  uint64_t v2412;
  void *__p;
  void *v2414;
  uint64_t v2415;
  void *v2416[3];
  void *v2417;
  void *v2418;
  uint64_t v2419;
  void *v2420;
  void *v2421;
  uint64_t v2422;
  void *v2423;
  _QWORD *v2424;
  char *v2425;
  void *v2426;
  _QWORD *v2427;
  char *v2428;
  void *v2429;
  _QWORD *v2430;
  char *v2431;
  void *v2432;
  void *v2433;
  uint64_t v2434;
  void *v2435;
  void *v2436;
  uint64_t v2437;
  _DWORD *v2438;
  _DWORD *v2439;
  uint64_t v2440;
  void *v2441;
  void *v2442;
  uint64_t v2443;
  void *v2444;
  void *v2445;
  uint64_t v2446;
  void *v2447;
  _QWORD *v2448;
  char *v2449;
  void *v2450;
  void *v2451;
  uint64_t v2452;
  void *v2453;
  _QWORD *v2454;
  char *v2455;
  void *v2456;
  void *v2457;
  uint64_t v2458;
  uint64_t *v2459;
  uint64_t *v2460;
  uint64_t v2461;
  void *v2462;
  void *v2463;
  uint64_t v2464;
  void *v2465;
  void *v2466;
  uint64_t v2467;
  void *v2468;
  void *v2469;
  uint64_t v2470;
  void *v2471;
  void *v2472;
  uint64_t v2473;
  void *v2474;
  void *v2475;
  uint64_t v2476;
  void *v2477;
  void *v2478;
  uint64_t v2479;
  void *v2480;
  void *v2481;
  uint64_t v2482;
  void *v2483;
  void *v2484;
  uint64_t v2485;
  void *v2486;
  void *v2487;
  uint64_t v2488;
  uint64_t *v2489;
  uint64_t *v2490;
  uint64_t v2491;
  _DWORD *v2492[3];
  uint64_t *v2493;
  uint64_t *v2494;
  uint64_t v2495;
  void *v2496;
  void *v2497;
  uint64_t v2498;
  void *v2499;
  void *v2500;
  uint64_t v2501;
  void *v2502;
  void *v2503;
  uint64_t v2504;
  uint64_t *v2505;
  uint64_t *v2506;
  uint64_t v2507;
  void *v2508;
  void *v2509;
  uint64_t v2510;
  void *v2511;
  void *v2512;
  uint64_t v2513;
  void *v2514;
  void *v2515;
  uint64_t v2516;
  uint64_t *v2517;
  uint64_t *v2518;
  uint64_t v2519;
  void *v2520;
  void *v2521;
  uint64_t v2522;
  void *v2523;
  void *v2524;
  uint64_t v2525;
  uint64_t *v2526;
  uint64_t *v2527;
  uint64_t v2528;
  void *v2529;
  void *v2530;
  uint64_t v2531;
  void *v2532;
  void *v2533;
  uint64_t v2534;
  void *v2535;
  void *v2536;
  uint64_t v2537;
  uint64_t *v2538;
  uint64_t *v2539;
  uint64_t v2540;
  void *v2541;
  void *v2542;
  uint64_t v2543;
  void *v2544;
  void *v2545;
  uint64_t v2546;
  uint64_t *v2547;
  uint64_t *v2548;
  uint64_t v2549;
  void *v2550;
  void *v2551;
  uint64_t v2552;
  uint64_t *v2553;
  uint64_t *v2554;
  uint64_t v2555;
  void *v2556;
  void *v2557;
  uint64_t v2558;
  void *v2559;
  void *v2560;
  uint64_t v2561;
  void *v2562;
  void *v2563;
  uint64_t v2564;
  void *v2565;
  void *v2566;
  uint64_t v2567;
  uint64_t *v2568;
  uint64_t *v2569;
  uint64_t v2570;
  void *v2571;
  void *v2572;
  uint64_t v2573;
  void *v2574;
  void *v2575;
  uint64_t v2576;
  void *v2577;
  void *v2578;
  uint64_t v2579;
  uint64_t *v2580;
  uint64_t *v2581;
  uint64_t v2582;
  void *v2583;
  void *v2584;
  uint64_t v2585;
  void *v2586;
  void *v2587;
  uint64_t v2588;
  uint64_t *v2589;
  uint64_t *v2590;
  uint64_t v2591;
  void *v2592;
  void *v2593;
  uint64_t v2594;
  uint64_t *v2595;
  uint64_t *v2596;
  uint64_t v2597;
  void *v2598;
  void *v2599;
  uint64_t v2600;
  void *v2601;
  void *v2602;
  uint64_t v2603;
  _DWORD *v2604;
  _DWORD *v2605;
  uint64_t v2606;
  _DWORD *v2607;
  _DWORD *v2608;
  uint64_t v2609;
  void *v2610;
  void *v2611;
  uint64_t v2612;
  void *v2613[3];
  void *v2614;
  void *v2615;
  uint64_t v2616;
  void *v2617;
  void *v2618;
  uint64_t v2619;
  void *v2620;
  void *v2621;
  uint64_t v2622;
  void *v2623;
  void *v2624;
  uint64_t v2625;
  void *v2626;
  void *v2627;
  uint64_t v2628;
  void *v2629;
  void *v2630;
  uint64_t v2631;
  uint64_t *v2632;
  uint64_t *v2633;
  uint64_t v2634;
  void *v2635;
  void *v2636;
  uint64_t v2637;
  void *v2638;
  void *v2639;
  uint64_t v2640;
  void *v2641;
  void *v2642;
  uint64_t v2643;
  void *v2644;
  void *v2645;
  uint64_t v2646;
  void *v2647;
  void *v2648;
  uint64_t v2649;
  uint64_t *v2650;
  uint64_t *v2651;
  uint64_t v2652;
  uint64_t *v2653;
  uint64_t *v2654;
  uint64_t v2655;
  void *v2656;
  void *v2657;
  uint64_t v2658;
  void *v2659;
  void *v2660;
  uint64_t v2661;
  void *v2662;
  void *v2663;
  uint64_t v2664;
  void *v2665;
  void *v2666;
  uint64_t v2667;
  _DWORD *v2668;
  _DWORD *v2669;
  uint64_t v2670;
  _DWORD *v2671;
  _DWORD *v2672;
  uint64_t v2673;
  _DWORD *v2674;
  _DWORD *v2675;
  uint64_t v2676;
  _DWORD *v2677;
  _DWORD *v2678;
  uint64_t v2679;
  _DWORD *v2680[3];
  void *v2681;
  _QWORD *v2682;
  _QWORD *v2683;

  if ((*(_BYTE *)(a2 + 48) & 7) != 0)
    exitFramework(345);
  v2359 = *(unsigned __int8 *)(a2 + 44);
  v2355 = *(unsigned __int8 *)(a2 + 46);
  v4 = *(unsigned __int8 *)(a2 + 45);
  v5 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 4);
  v2353 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 8);
  v2365 = *(_QWORD *)(a2 + 36);
  *(int32x2_t *)(a1 + 20) = vrev64_s32(*(int32x2_t *)(a2 + 36));
  *(_QWORD *)(a1 + 96) = 0;
  v6 = operator new(0xCuLL);
  *(_QWORD *)v6 = 0x300000001;
  v2362 = v6;
  v6[2] = 3;
  v7 = operator new(0xCuLL);
  *(_QWORD *)v7 = 0x100000001;
  v7[2] = 3;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_DWORD *)(a3 + 8);
  if (v4)
    v9 = 4;
  else
    v9 = 1;
  *(_BYTE *)(a1 + 16) = v8 != 0;
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  v2357 = v10;
  v2358 = v4;
  *(_DWORD *)(a1 + 64) = 3;
  *(_DWORD *)(a1 + 68) = v5;
  *(_QWORD *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 80) = v2365;
  v2366 = a1;
  *(_QWORD *)(a1 + 84) = 0x2000000001;
  v11 = 5;
  v2360 = v7;
  v2361 = (std::vector<int> *)(v2362 + 3);
  v12 = (uint64_t)(v7 + 3);
  v13 = 300;
  switch(v5)
  {
    case 2:
      v286 = operator new();
      v287 = *(_DWORD *)a1;
      v288 = *(_DWORD *)(a1 + 4);
      memset(v2680, 0, sizeof(v2680));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2680, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v286, v287, v288, v2680, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v290 = *(uint64_t **)(a1 + 112);
      v289 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v290 >= v289)
      {
        v578 = (void **)(v2366 + 104);
        v577 = *(_QWORD *)(v2366 + 104);
        v579 = ((uint64_t)v290 - v577) >> 3;
        if ((unint64_t)(v579 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v580 = v289 - v577;
        v581 = v580 >> 2;
        if (v580 >> 2 <= (unint64_t)(v579 + 1))
          v581 = v579 + 1;
        if ((unint64_t)v580 >= 0x7FFFFFFFFFFFFFF8)
          v582 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v582 = v581;
        if (v582)
          v582 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v582);
        else
          v583 = 0;
        v1014 = (uint64_t *)(v582 + 8 * v579);
        v1015 = v582 + 8 * v583;
        *v1014 = v286;
        v291 = v1014 + 1;
        v1016 = (char *)*v94;
        v1017 = (char *)*v578;
        if (*v94 != *v578)
        {
          do
          {
            v1018 = *((_QWORD *)v1016 - 1);
            v1016 -= 8;
            *--v1014 = v1018;
          }
          while (v1016 != v1017);
          v1016 = (char *)*v578;
        }
        *(_QWORD *)(v2366 + 104) = v1014;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1015;
        if (v1016)
          operator delete(v1016);
      }
      else
      {
        *v290 = v286;
        v291 = v290 + 1;
      }
      *v94 = v291;
      v1019 = v2680[0];
      if (!v2680[0])
        goto LABEL_1450;
      v1020 = (void **)v2680;
      goto LABEL_1449;
    case 3:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v274 = operator new();
      v275 = *(_DWORD *)a1;
      v276 = *(_DWORD *)(a1 + 4);
      v2678 = 0;
      v2679 = 0;
      v2677 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2677, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v274, v275, v276, &v2677, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v277 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v279 = v278;
      v280 = &v277[v278];
      *v277 = v274;
      v2682 = v277 + 1;
      v2683 = v280;
      v2681 = v277;
      if (v2677)
      {
        v2678 = v2677;
        operator delete(v2677);
      }
      v281 = operator new();
      v282 = operator new();
      v283 = *(_DWORD *)v2366;
      v284 = *(_DWORD *)(v2366 + 4);
      v2675 = 0;
      v2676 = 0;
      v2674 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2674, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v282, v283, v284, &v2674, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      Reverse::Reverse(v281, v282, *(_DWORD *)(v2366 + 20));
      if (v279 < 2)
      {
        v676 = 2;
        if ((unint64_t)(((char *)v280 - (char *)v277) >> 2) > 2)
          v676 = ((char *)v280 - (char *)v277) >> 2;
        if ((unint64_t)((char *)v280 - (char *)v277) >= 0x7FFFFFFFFFFFFFF8)
          v677 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v677 = v676;
        if (v677)
          v677 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v677);
        else
          v678 = 0;
        v1521 = 0;
        v1522 = v677 + 8;
        v1523 = v677 + 8 * v678;
        *(_QWORD *)(v677 + 8) = v281;
        v285 = (_QWORD *)(v677 + 16);
        do
        {
          *(_QWORD *)(v677 + v1521 * 8) = v277[v1521];
          --v1521;
        }
        while (v1521 != -1);
        v1524 = v2681;
        v2681 = (void *)(v1522 - 8);
        v2683 = (_QWORD *)v1523;
        if (v1524)
          operator delete(v1524);
      }
      else
      {
        v277[1] = v281;
        v285 = v277 + 2;
      }
      v2682 = v285;
      if (v2674)
      {
        v2675 = v2674;
        operator delete(v2674);
      }
      v1525 = (char **)operator new();
      Parallel::Parallel(v1525, (uint64_t)&v2681);
      v1527 = *(char ****)(v2366 + 112);
      v1526 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1527 >= v1526)
      {
        v1529 = *(_QWORD *)(v2366 + 104);
        v1530 = ((uint64_t)v1527 - v1529) >> 3;
        if ((unint64_t)(v1530 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1531 = v1526 - v1529;
        v1532 = v1531 >> 2;
        if (v1531 >> 2 <= (unint64_t)(v1530 + 1))
          v1532 = v1530 + 1;
        if ((unint64_t)v1531 >= 0x7FFFFFFFFFFFFFF8)
          v1533 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1533 = v1532;
        if (v1533)
          v1533 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1533);
        else
          v1534 = 0;
        v1717 = (char ***)(v1533 + 8 * v1530);
        v1718 = v1533 + 8 * v1534;
        *v1717 = v1525;
        v1528 = v1717 + 1;
        v1720 = *(char **)(v2366 + 104);
        v1719 = *(char **)(v2366 + 112);
        if (v1719 == v1720)
        {
          v1722 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1721 = (char **)*((_QWORD *)v1719 - 1);
            v1719 -= 8;
            *--v1717 = v1721;
          }
          while (v1719 != v1720);
          v1722 = (_QWORD *)v2366;
          v1719 = *(char **)(v2366 + 104);
        }
        v1722[13] = v1717;
        v1722[14] = v1528;
        v1722[15] = v1718;
        if (v1719)
          operator delete(v1719);
      }
      else
      {
        *v1527 = v1525;
        v1528 = v1527 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1528;
      (*(void (**)(_QWORD))(*(_QWORD *)*(v1528 - 1) + 8))(*(v1528 - 1));
      goto LABEL_2408;
    case 4:
      v140 = operator new();
      FullLayer<signed char>::FullLayer(v140, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v142 = *(uint64_t **)(a1 + 112);
      v141 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v142 >= v141)
      {
        v481 = *(_QWORD *)(a1 + 104);
        v482 = ((uint64_t)v142 - v481) >> 3;
        if ((unint64_t)(v482 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v483 = v141 - v481;
        v484 = v483 >> 2;
        if (v483 >> 2 <= (unint64_t)(v482 + 1))
          v484 = v482 + 1;
        if ((unint64_t)v483 >= 0x7FFFFFFFFFFFFFF8)
          v485 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v485 = v484;
        if (v485)
          v485 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v485);
        else
          v486 = 0;
        v789 = (uint64_t *)(v485 + 8 * v482);
        v790 = v485 + 8 * v486;
        *v789 = v140;
        v143 = v789 + 1;
        v792 = *(char **)(a1 + 104);
        v791 = *(char **)(a1 + 112);
        if (v791 == v792)
        {
          v794 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v793 = *((_QWORD *)v791 - 1);
            v791 -= 8;
            *--v789 = v793;
          }
          while (v791 != v792);
          v794 = (_QWORD *)a1;
          v791 = *(char **)(a1 + 104);
        }
        v794[13] = v789;
        v794[14] = v143;
        v794[15] = v790;
        if (v791)
          operator delete(v791);
      }
      else
      {
        *v142 = v140;
        v143 = v142 + 1;
      }
      *(_QWORD *)(a1 + 112) = v143;
      v873 = operator new();
      v874 = *(_DWORD *)(a1 + 4);
      v2655 = 0;
      v2653 = 0;
      v2654 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2653, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v873, v874, v874, (_DWORD **)&v2653, 0, a2, 1, 0, 0);
      v876 = *(uint64_t **)(a1 + 112);
      v875 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v876 >= v875)
      {
        v878 = *(_QWORD *)(a1 + 104);
        v879 = ((uint64_t)v876 - v878) >> 3;
        if ((unint64_t)(v879 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v880 = v875 - v878;
        v881 = v880 >> 2;
        if (v880 >> 2 <= (unint64_t)(v879 + 1))
          v881 = v879 + 1;
        if ((unint64_t)v880 >= 0x7FFFFFFFFFFFFFF8)
          v882 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v882 = v881;
        if (v882)
          v882 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v882);
        else
          v883 = 0;
        v1206 = (uint64_t *)(v882 + 8 * v879);
        v1207 = v882 + 8 * v883;
        *v1206 = v873;
        v877 = v1206 + 1;
        v1209 = *(char **)(a1 + 104);
        v1208 = *(char **)(a1 + 112);
        if (v1208 == v1209)
        {
          v1211 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1210 = *((_QWORD *)v1208 - 1);
            v1208 -= 8;
            *--v1206 = v1210;
          }
          while (v1208 != v1209);
          v1211 = (_QWORD *)a1;
          v1208 = *(char **)(a1 + 104);
        }
        v1211[13] = v1206;
        v1211[14] = v877;
        v1211[15] = v1207;
        if (v1208)
          operator delete(v1208);
      }
      else
      {
        *v876 = v873;
        v877 = v876 + 1;
      }
      *(_QWORD *)(a1 + 112) = v877;
      v1324 = v2653;
      if (!v2653)
        goto LABEL_2421;
      v2654 = v2653;
      goto LABEL_2420;
    case 5:
      v116 = operator new();
      FullLayer<signed char>::FullLayer(v116, *(_DWORD *)a1, 2 * *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v118 = *(uint64_t **)(a1 + 112);
      v117 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v118 >= v117)
      {
        v475 = *(_QWORD *)(a1 + 104);
        v476 = ((uint64_t)v118 - v475) >> 3;
        if ((unint64_t)(v476 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v477 = v117 - v475;
        v478 = v477 >> 2;
        if (v477 >> 2 <= (unint64_t)(v476 + 1))
          v478 = v476 + 1;
        if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8)
          v479 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v479 = v478;
        if (v479)
          v479 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v479);
        else
          v480 = 0;
        v781 = (uint64_t *)(v479 + 8 * v476);
        v782 = v479 + 8 * v480;
        *v781 = v116;
        v119 = v781 + 1;
        v784 = *(char **)(a1 + 104);
        v783 = *(char **)(a1 + 112);
        if (v783 == v784)
        {
          v786 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v785 = *((_QWORD *)v783 - 1);
            v783 -= 8;
            *--v781 = v785;
          }
          while (v783 != v784);
          v786 = (_QWORD *)a1;
          v783 = *(char **)(a1 + 104);
        }
        v786[13] = v781;
        v786[14] = v119;
        v786[15] = v782;
        if (v783)
          operator delete(v783);
      }
      else
      {
        *v118 = v116;
        v119 = v118 + 1;
      }
      *(_QWORD *)(a1 + 112) = v119;
      v862 = operator new();
      v863 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      FullLayer<signed char>::FullLayer(v862, v863, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v865 = *(uint64_t **)(a1 + 112);
      v864 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v865 >= v864)
      {
        v867 = *(_QWORD *)(a1 + 104);
        v868 = ((uint64_t)v865 - v867) >> 3;
        if ((unint64_t)(v868 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v869 = v864 - v867;
        v870 = v869 >> 2;
        if (v869 >> 2 <= (unint64_t)(v868 + 1))
          v870 = v868 + 1;
        if ((unint64_t)v869 >= 0x7FFFFFFFFFFFFFF8)
          v871 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v871 = v870;
        if (v871)
          v871 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v871);
        else
          v872 = 0;
        v1200 = (uint64_t *)(v871 + 8 * v868);
        v1201 = v871 + 8 * v872;
        *v1200 = v862;
        v866 = v1200 + 1;
        v1203 = *(char **)(a1 + 104);
        v1202 = *(char **)(a1 + 112);
        if (v1202 == v1203)
        {
          v1205 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1204 = *((_QWORD *)v1202 - 1);
            v1202 -= 8;
            *--v1200 = v1204;
          }
          while (v1202 != v1203);
          v1205 = (_QWORD *)a1;
          v1202 = *(char **)(a1 + 104);
        }
        v1205[13] = v1200;
        v1205[14] = v866;
        v1205[15] = v1201;
        if (v1202)
          operator delete(v1202);
      }
      else
      {
        *v865 = v862;
        v866 = v865 + 1;
      }
      *(_QWORD *)(a1 + 112) = v866;
      v1312 = operator new();
      v1313 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      v1314 = *(_DWORD *)(a1 + 4);
      v2652 = 0;
      v2650 = 0;
      v2651 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2650, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1312, v1313, v1314, (_DWORD **)&v2650, 0, a2, 1, 0, 0);
      v1316 = *(uint64_t **)(a1 + 112);
      v1315 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1316 >= v1315)
      {
        v1318 = *(_QWORD *)(a1 + 104);
        v1319 = ((uint64_t)v1316 - v1318) >> 3;
        if ((unint64_t)(v1319 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1320 = v1315 - v1318;
        v1321 = v1320 >> 2;
        if (v1320 >> 2 <= (unint64_t)(v1319 + 1))
          v1321 = v1319 + 1;
        if ((unint64_t)v1320 >= 0x7FFFFFFFFFFFFFF8)
          v1322 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1322 = v1321;
        if (v1322)
          v1322 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1322);
        else
          v1323 = 0;
        v1624 = (uint64_t *)(v1322 + 8 * v1319);
        v1625 = v1322 + 8 * v1323;
        *v1624 = v1312;
        v1317 = v1624 + 1;
        v1627 = *(char **)(a1 + 104);
        v1626 = *(char **)(a1 + 112);
        if (v1626 == v1627)
        {
          v1629 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1628 = *((_QWORD *)v1626 - 1);
            v1626 -= 8;
            *--v1624 = v1628;
          }
          while (v1626 != v1627);
          v1629 = (_QWORD *)a1;
          v1626 = *(char **)(a1 + 104);
        }
        v1629[13] = v1624;
        v1629[14] = v1317;
        v1629[15] = v1625;
        if (v1626)
          operator delete(v1626);
      }
      else
      {
        *v1316 = v1312;
        v1317 = v1316 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1317;
      v1324 = v2650;
      if (!v2650)
        goto LABEL_2421;
      v2651 = v2650;
      goto LABEL_2420;
    case 6:
      v96 = operator new();
      FullLayer<signed char>::FullLayer(v96, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v98 = v97;
      *v40 = v96;
      v99 = operator new();
      v100 = *(_DWORD *)(a1 + 4);
      v2649 = 0;
      v2647 = 0;
      v2648 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2647, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v99, v100, v100, (_DWORD **)&v2647, 0, a2, 1, 0, 0);
      if (v98 < 2)
      {
        v615 = 2;
        if ((unint64_t)((8 * v98) >> 2) > 2)
          v615 = (8 * v98) >> 2;
        if ((unint64_t)(8 * v98) >= 0x7FFFFFFFFFFFFFF8)
          v616 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v616 = v615;
        if (v616)
          v616 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v616);
        v617 = 0;
        *(_QWORD *)(v616 + 8) = v99;
        v101 = v616 + 16;
        do
        {
          *(_QWORD *)(v616 + v617 * 8) = v40[v617];
          --v617;
        }
        while (v617 != -1);
        v618 = (uint64_t *)v616;
        operator delete(v40);
        v40 = v618;
      }
      else
      {
        v40[1] = v99;
        v101 = (uint64_t)(v40 + 2);
      }
      if (v2647)
      {
        v2648 = v2647;
        operator delete(v2647);
      }
      v619 = operator new();
      v2645 = 0;
      v2644 = 0;
      v2646 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2644, v40, v101, (v101 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v619, (uint64_t)&v2644);
      if (v2644)
      {
        v2645 = v2644;
        operator delete(v2644);
      }
      v620 = operator new();
      FullLayer<signed char>::FullLayer(v620, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v623 = v622;
      *v621 = v620;
      v624 = operator new();
      v625 = *(_DWORD *)(a1 + 4);
      v2643 = 0;
      v2641 = 0;
      v2642 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2641, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v624, v625, v625, (_DWORD **)&v2641, 0, a2, 1, 0, 0);
      if (v623 < 2)
      {
        v679 = 2;
        if ((unint64_t)((8 * v623) >> 2) > 2)
          v679 = (8 * v623) >> 2;
        if ((unint64_t)(8 * v623) >= 0x7FFFFFFFFFFFFFF8)
          v680 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v680 = v679;
        if (v680)
          v680 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v680);
        v681 = 0;
        *(_QWORD *)(v680 + 8) = v624;
        v626 = v680 + 16;
        do
        {
          *(_QWORD *)(v680 + v681 * 8) = v621[v681];
          --v681;
        }
        while (v681 != -1);
        v682 = (uint64_t *)v680;
        operator delete(v621);
        v621 = v682;
      }
      else
      {
        v621[1] = v624;
        v626 = (uint64_t)(v621 + 2);
      }
      if (v2641)
      {
        v2642 = v2641;
        operator delete(v2641);
      }
      v683 = operator new();
      v684 = operator new();
      v2639 = 0;
      v2638 = 0;
      v2640 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2638, v621, v626, (v626 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v684, (uint64_t)&v2638);
      Reverse::Reverse(v683, v684, *(_DWORD *)(a1 + 20));
      if (v2638)
      {
        v2639 = v2638;
        operator delete(v2638);
      }
      v685 = operator new(8uLL);
      *v685 = v619;
      v686 = operator new(0x10uLL);
      v687 = v686 + 2;
      *v686 = *v685;
      v686[1] = v683;
      v2681 = v686;
      v2683 = v686 + 2;
      operator delete(v685);
      v2682 = v687;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v689 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v689)
        goto LABEL_2104;
      v691 = *(_QWORD *)(v2366 + 104);
      v692 = ((uint64_t)v690 - v691) >> 3;
      if ((unint64_t)(v692 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v693 = v689 - v691;
      v694 = v693 >> 2;
      if (v693 >> 2 <= (unint64_t)(v692 + 1))
        v694 = v692 + 1;
      if ((unint64_t)v693 >= 0x7FFFFFFFFFFFFFF8)
        v695 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v695 = v694;
      if (v695)
        v695 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v695);
      else
        v696 = 0;
      v2032 = (char ***)(v695 + 8 * v692);
      v2033 = v695 + 8 * v696;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2035 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2035)
        goto LABEL_2344;
      do
      {
        v2036 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2036;
      }
      while (v2034 != v2035);
      goto LABEL_2343;
    case 7:
      v60 = operator new();
      RecurrentLayer<signed char>::RecurrentLayer(v60, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v61 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 < v61)
        goto LABEL_855;
      v63 = *(_QWORD *)(a1 + 104);
      v64 = ((uint64_t)v62 - v63) >> 3;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v65 = v61 - v63;
      v66 = v65 >> 2;
      if (v65 >> 2 <= (unint64_t)(v64 + 1))
        v66 = v64 + 1;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
        v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
      else
        v68 = 0;
      v754 = (uint64_t *)(v67 + 8 * v64);
      v755 = v67 + 8 * v68;
      *v754 = v60;
      v756 = v754 + 1;
      v758 = *(char **)(a1 + 104);
      v757 = *(char **)(a1 + 112);
      if (v757 == v758)
        goto LABEL_1246;
      do
      {
        v759 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v754 = v759;
      }
      while (v757 != v758);
      goto LABEL_1245;
    case 8:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v108 = operator new();
      RecurrentLayer<signed char>::RecurrentLayer(v108, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      v109 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v111 = v110;
      *v109 = v108;
      v112 = &v109[v110];
      v2682 = v109 + 1;
      v2683 = v112;
      v2681 = v109;
      v113 = operator new();
      v114 = operator new();
      RecurrentLayer<signed char>::RecurrentLayer(v114, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      Reverse::Reverse(v113, v114, 0);
      if (v111 < 2)
      {
        v656 = 2;
        if ((unint64_t)(((char *)v112 - (char *)v109) >> 2) > 2)
          v656 = ((char *)v112 - (char *)v109) >> 2;
        if ((unint64_t)((char *)v112 - (char *)v109) >= 0x7FFFFFFFFFFFFFF8)
          v657 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v657 = v656;
        if (v657)
          v657 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v657);
        else
          v658 = 0;
        v1411 = 0;
        v1412 = v657 + 8;
        v1413 = v657 + 8 * v658;
        *(_QWORD *)(v657 + 8) = v113;
        v115 = (_QWORD *)(v657 + 16);
        do
        {
          *(_QWORD *)(v657 + v1411 * 8) = v109[v1411];
          --v1411;
        }
        while (v1411 != -1);
        v1414 = v2681;
        v2681 = (void *)(v1412 - 8);
        v2683 = (_QWORD *)v1413;
        if (v1414)
          operator delete(v1414);
      }
      else
      {
        v109[1] = v113;
        v115 = v109 + 2;
      }
      v2682 = v115;
      v1415 = (char **)operator new();
      Parallel::Parallel(v1415, (uint64_t)&v2681);
      v1417 = *(char ****)(v2366 + 112);
      v1416 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1417 >= v1416)
      {
        v1419 = *(_QWORD *)(v2366 + 104);
        v1420 = ((uint64_t)v1417 - v1419) >> 3;
        if ((unint64_t)(v1420 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1421 = v1416 - v1419;
        v1422 = v1421 >> 2;
        if (v1421 >> 2 <= (unint64_t)(v1420 + 1))
          v1422 = v1420 + 1;
        if ((unint64_t)v1421 >= 0x7FFFFFFFFFFFFFF8)
          v1423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1423 = v1422;
        if (v1423)
          v1423 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1423);
        else
          v1424 = 0;
        v1559 = (char ***)(v1423 + 8 * v1420);
        v1560 = v1423 + 8 * v1424;
        *v1559 = v1415;
        v1418 = v1559 + 1;
        v1562 = *(char **)(v2366 + 104);
        v1561 = *(char **)(v2366 + 112);
        if (v1561 == v1562)
        {
          v1564 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1563 = (char **)*((_QWORD *)v1561 - 1);
            v1561 -= 8;
            *--v1559 = v1563;
          }
          while (v1561 != v1562);
          v1564 = (_QWORD *)v2366;
          v1561 = *(char **)(v2366 + 104);
        }
        v1564[13] = v1559;
        v1564[14] = v1418;
        v1564[15] = v1560;
        if (v1561)
          operator delete(v1561);
      }
      else
      {
        *v1417 = v1415;
        v1418 = v1417 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1418;
      goto LABEL_2408;
    case 9:
      v292 = operator new();
      FullLayer<signed char>::FullLayer(v292, *(_DWORD *)a1, 2 * v2353, 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v294 = *(uint64_t **)(a1 + 112);
      v293 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v294 >= v293)
      {
        v511 = *(_QWORD *)(v2366 + 104);
        v512 = ((uint64_t)v294 - v511) >> 3;
        if ((unint64_t)(v512 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v513 = v293 - v511;
        v514 = v513 >> 2;
        if (v513 >> 2 <= (unint64_t)(v512 + 1))
          v514 = v512 + 1;
        if ((unint64_t)v513 >= 0x7FFFFFFFFFFFFFF8)
          v515 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v515 = v514;
        if (v515)
          v515 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v515);
        else
          v516 = 0;
        v819 = (uint64_t *)(v515 + 8 * v512);
        v820 = v515 + 8 * v516;
        *v819 = v292;
        v295 = v819 + 1;
        v822 = *(char **)(v2366 + 104);
        v821 = *(char **)(v2366 + 112);
        if (v821 == v822)
        {
          v824 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v823 = *((_QWORD *)v821 - 1);
            v821 -= 8;
            *--v819 = v823;
          }
          while (v821 != v822);
          v824 = (_QWORD *)v2366;
          v821 = *(char **)(v2366 + 104);
        }
        v824[13] = v819;
        v824[14] = v295;
        v824[15] = v820;
        if (v821)
          operator delete(v821);
      }
      else
      {
        *v294 = v292;
        v295 = v294 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v295;
      v929 = operator new();
      RecurrentLayer<signed char>::RecurrentLayer(v929, v2353, v2353, 3, v4 != 0, v2355 != 0, 1, 0);
      v931 = *(uint64_t **)(v2366 + 112);
      v930 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v931 >= v930)
      {
        v933 = *(_QWORD *)(v2366 + 104);
        v934 = ((uint64_t)v931 - v933) >> 3;
        if ((unint64_t)(v934 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v935 = v930 - v933;
        v936 = v935 >> 2;
        if (v935 >> 2 <= (unint64_t)(v934 + 1))
          v936 = v934 + 1;
        if ((unint64_t)v935 >= 0x7FFFFFFFFFFFFFF8)
          v937 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v937 = v936;
        if (v937)
          v937 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v937);
        else
          v938 = 0;
        v1155 = (uint64_t *)(v937 + 8 * v934);
        v1156 = v937 + 8 * v938;
        *v1155 = v929;
        v932 = v1155 + 1;
        v1158 = *(char **)(v2366 + 104);
        v1157 = *(char **)(v2366 + 112);
        if (v1157 == v1158)
        {
          v1160 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1159 = *((_QWORD *)v1157 - 1);
            v1157 -= 8;
            *--v1155 = v1159;
          }
          while (v1157 != v1158);
          v1160 = (_QWORD *)v2366;
          v1157 = *(char **)(v2366 + 104);
        }
        v1160[13] = v1155;
        v1160[14] = v932;
        v1160[15] = v1156;
        if (v1157)
          operator delete(v1157);
      }
      else
      {
        *v931 = v929;
        v932 = v931 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v932;
      goto LABEL_2421;
    case 10:
      v60 = operator new();
      FullLayer<signed char>::FullLayer(v60, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v120 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 < v120)
        goto LABEL_855;
      v121 = *(_QWORD *)(a1 + 104);
      v122 = ((uint64_t)v62 - v121) >> 3;
      if ((unint64_t)(v122 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v123 = v120 - v121;
      v124 = v123 >> 2;
      if (v123 >> 2 <= (unint64_t)(v122 + 1))
        v124 = v122 + 1;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
        v125 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v125 = v124;
      if (v125)
        v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v125);
      else
        v126 = 0;
      v754 = (uint64_t *)(v125 + 8 * v122);
      v755 = v125 + 8 * v126;
      *v754 = v60;
      v756 = v754 + 1;
      v787 = *(char **)(a1 + 104);
      v757 = *(char **)(a1 + 112);
      if (v757 == v787)
        goto LABEL_1246;
      do
      {
        v788 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v754 = v788;
      }
      while (v757 != v787);
      goto LABEL_1245;
    case 11:
      v69 = operator new();
      FullLayer<signed char>::FullLayer(v69, *(_DWORD *)a1, 2 * *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v71 = *(uint64_t **)(a1 + 112);
      v70 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v71 >= v70)
      {
        v464 = *(_QWORD *)(a1 + 104);
        v465 = ((uint64_t)v71 - v464) >> 3;
        if ((unint64_t)(v465 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v466 = v70 - v464;
        v467 = v466 >> 2;
        if (v466 >> 2 <= (unint64_t)(v465 + 1))
          v467 = v465 + 1;
        if ((unint64_t)v466 >= 0x7FFFFFFFFFFFFFF8)
          v468 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v468 = v467;
        if (v468)
          v468 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v468);
        else
          v469 = 0;
        v760 = (uint64_t *)(v468 + 8 * v465);
        v761 = v468 + 8 * v469;
        *v760 = v69;
        v72 = v760 + 1;
        v763 = *(char **)(a1 + 104);
        v762 = *(char **)(a1 + 112);
        if (v762 == v763)
        {
          v765 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v764 = *((_QWORD *)v762 - 1);
            v762 -= 8;
            *--v760 = v764;
          }
          while (v762 != v763);
          v765 = (_QWORD *)a1;
          v762 = *(char **)(a1 + 104);
        }
        v765[13] = v760;
        v765[14] = v72;
        v765[15] = v761;
        if (v762)
          operator delete(v762);
      }
      else
      {
        *v71 = v69;
        v72 = v71 + 1;
      }
      *(_QWORD *)(a1 + 112) = v72;
      v60 = operator new();
      v854 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      FullLayer<signed char>::FullLayer(v60, v854, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v855 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 >= v855)
      {
        v856 = *(_QWORD *)(a1 + 104);
        v857 = ((uint64_t)v62 - v856) >> 3;
        if ((unint64_t)(v857 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v858 = v855 - v856;
        v859 = v858 >> 2;
        if (v858 >> 2 <= (unint64_t)(v857 + 1))
          v859 = v857 + 1;
        if ((unint64_t)v858 >= 0x7FFFFFFFFFFFFFF8)
          v860 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v860 = v859;
        if (v860)
          v860 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v860);
        else
          v861 = 0;
        v754 = (uint64_t *)(v860 + 8 * v857);
        v755 = v860 + 8 * v861;
        *v754 = v60;
        v756 = v754 + 1;
        v1197 = *(char **)(a1 + 104);
        v757 = *(char **)(a1 + 112);
        if (v757 == v1197)
        {
LABEL_1246:
          v1199 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1198 = *((_QWORD *)v757 - 1);
            v757 -= 8;
            *--v754 = v1198;
          }
          while (v757 != v1197);
LABEL_1245:
          v1199 = (_QWORD *)a1;
          v757 = *(char **)(a1 + 104);
        }
        v1199[13] = v754;
        v1199[14] = v756;
        v1199[15] = v755;
        if (v757)
          operator delete(v757);
      }
      else
      {
LABEL_855:
        *v62 = v60;
        v756 = v62 + 1;
      }
      *(_QWORD *)(a1 + 112) = v756;
      goto LABEL_2421;
    case 12:
      v102 = operator new();
      v103 = *(_DWORD *)a1;
      v104 = *(_DWORD *)(a1 + 4);
      v2637 = 0;
      v2635 = 0;
      v2636 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2635, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v102, v103, v104, (_DWORD **)&v2635, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v106 = *(uint64_t **)(a1 + 112);
      v105 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v106 >= v105)
      {
        v559 = *(_QWORD *)(a1 + 104);
        v560 = ((uint64_t)v106 - v559) >> 3;
        if ((unint64_t)(v560 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v561 = v105 - v559;
        v562 = v561 >> 2;
        if (v561 >> 2 <= (unint64_t)(v560 + 1))
          v562 = v560 + 1;
        if ((unint64_t)v561 >= 0x7FFFFFFFFFFFFFF8)
          v563 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v563 = v562;
        if (v563)
          v563 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v563);
        else
          v564 = 0;
        v996 = (uint64_t *)(v563 + 8 * v560);
        v997 = v563 + 8 * v564;
        *v996 = v102;
        v107 = v996 + 1;
        v999 = *(char **)(a1 + 104);
        v998 = *(char **)(a1 + 112);
        if (v998 == v999)
        {
          v1001 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1000 = *((_QWORD *)v998 - 1);
            v998 -= 8;
            *--v996 = v1000;
          }
          while (v998 != v999);
          v1001 = (_QWORD *)a1;
          v998 = *(char **)(a1 + 104);
        }
        v1001[13] = v996;
        v1001[14] = v107;
        v1001[15] = v997;
        if (v998)
          operator delete(v998);
      }
      else
      {
        *v106 = v102;
        v107 = v106 + 1;
      }
      *(_QWORD *)(a1 + 112) = v107;
      if (v2635)
      {
        v2636 = v2635;
        operator delete(v2635);
      }
      v1086 = operator new();
      v1087 = *(_DWORD *)(a1 + 4);
      v2634 = 0;
      v2632 = 0;
      v2633 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2632, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1086, v1087, v1087, (_DWORD **)&v2632, 0, a2, 1, 0, 0);
      v1089 = *(uint64_t **)(a1 + 112);
      v1088 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1089 >= v1088)
      {
        v1091 = *(_QWORD *)(a1 + 104);
        v1092 = ((uint64_t)v1089 - v1091) >> 3;
        if ((unint64_t)(v1092 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1093 = v1088 - v1091;
        v1094 = v1093 >> 2;
        if (v1093 >> 2 <= (unint64_t)(v1092 + 1))
          v1094 = v1092 + 1;
        if ((unint64_t)v1093 >= 0x7FFFFFFFFFFFFFF8)
          v1095 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1095 = v1094;
        if (v1095)
          v1095 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1095);
        else
          v1096 = 0;
        v1375 = (uint64_t *)(v1095 + 8 * v1092);
        v1376 = v1095 + 8 * v1096;
        *v1375 = v1086;
        v1090 = v1375 + 1;
        v1378 = *(char **)(a1 + 104);
        v1377 = *(char **)(a1 + 112);
        if (v1377 == v1378)
        {
          v1380 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1379 = *((_QWORD *)v1377 - 1);
            v1377 -= 8;
            *--v1375 = v1379;
          }
          while (v1377 != v1378);
          v1380 = (_QWORD *)a1;
          v1377 = *(char **)(a1 + 104);
        }
        v1380[13] = v1375;
        v1380[14] = v1090;
        v1380[15] = v1376;
        if (v1377)
          operator delete(v1377);
      }
      else
      {
        *v1089 = v1086;
        v1090 = v1089 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1090;
      v1324 = v2632;
      if (!v2632)
        goto LABEL_2421;
      v2633 = v2632;
      goto LABEL_2420;
    case 13:
      v46 = operator new();
      v47 = *(_DWORD *)a1;
      v48 = *(_DWORD *)(a1 + 4);
      v2631 = 0;
      v2629 = 0;
      v2630 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2629, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v46, v47, v48, (_DWORD **)&v2629, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v50 = v49;
      *v40 = v46;
      if (v2629)
      {
        v2630 = v2629;
        operator delete(v2629);
      }
      v51 = operator new();
      v52 = *(_DWORD *)(a1 + 4);
      v2628 = 0;
      v2626 = 0;
      v2627 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2626, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v51, v52, v52, (_DWORD **)&v2626, 0, a2, 1, 0, 0);
      if (v50 < 2)
      {
        v643 = 2;
        if ((unint64_t)((8 * v50) >> 2) > 2)
          v643 = (8 * v50) >> 2;
        if ((unint64_t)(8 * v50) >= 0x7FFFFFFFFFFFFFF8)
          v644 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v644 = v643;
        if (v644)
          v644 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v644);
        v645 = 0;
        *(_QWORD *)(v644 + 8) = v51;
        v53 = v644 + 16;
        do
        {
          *(_QWORD *)(v644 + v645 * 8) = v40[v645];
          --v645;
        }
        while (v645 != -1);
        v646 = (uint64_t *)v644;
        operator delete(v40);
        v40 = v646;
      }
      else
      {
        v40[1] = v51;
        v53 = (uint64_t)(v40 + 2);
      }
      if (v2626)
      {
        v2627 = v2626;
        operator delete(v2626);
      }
      v647 = operator new();
      v2624 = 0;
      v2623 = 0;
      v2625 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2623, v40, v53, (v53 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v647, (uint64_t)&v2623);
      if (v2623)
      {
        v2624 = v2623;
        operator delete(v2623);
      }
      v648 = operator new();
      v649 = *(_DWORD *)a1;
      v650 = *(_DWORD *)(a1 + 4);
      v2622 = 0;
      v2620 = 0;
      v2621 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2620, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v648, v649, v650, (_DWORD **)&v2620, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v652 = v651;
      *v621 = v648;
      if (v2620)
      {
        v2621 = v2620;
        operator delete(v2620);
      }
      v653 = operator new();
      v654 = *(_DWORD *)(a1 + 4);
      v2619 = 0;
      v2617 = 0;
      v2618 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2617, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v653, v654, v654, (_DWORD **)&v2617, 0, a2, 1, 0, 0);
      if (v652 < 2)
      {
        v713 = 2;
        if ((unint64_t)((8 * v652) >> 2) > 2)
          v713 = (8 * v652) >> 2;
        if ((unint64_t)(8 * v652) >= 0x7FFFFFFFFFFFFFF8)
          v714 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v714 = v713;
        if (v714)
          v714 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v714);
        v715 = 0;
        *(_QWORD *)(v714 + 8) = v653;
        v655 = v714 + 16;
        do
        {
          *(_QWORD *)(v714 + v715 * 8) = v621[v715];
          --v715;
        }
        while (v715 != -1);
        v716 = (uint64_t *)v714;
        operator delete(v621);
        v621 = v716;
      }
      else
      {
        v621[1] = v653;
        v655 = (uint64_t)(v621 + 2);
      }
      if (v2617)
      {
        v2618 = v2617;
        operator delete(v2617);
      }
      v717 = operator new();
      v718 = operator new();
      v2615 = 0;
      v2614 = 0;
      v2616 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2614, v621, v655, (v655 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v718, (uint64_t)&v2614);
      Reverse::Reverse(v717, v718, *(_DWORD *)(a1 + 20));
      if (v2614)
      {
        v2615 = v2614;
        operator delete(v2614);
      }
      v719 = operator new(8uLL);
      *v719 = v647;
      v720 = operator new(0x10uLL);
      v721 = v720 + 2;
      *v720 = *v719;
      v720[1] = v717;
      v2681 = v720;
      v2683 = v720 + 2;
      operator delete(v719);
      v2682 = v721;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v722 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v722)
        goto LABEL_2104;
      v723 = *(_QWORD *)(v2366 + 104);
      v724 = ((uint64_t)v690 - v723) >> 3;
      if ((unint64_t)(v724 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v725 = v722 - v723;
      v726 = v725 >> 2;
      if (v725 >> 2 <= (unint64_t)(v724 + 1))
        v726 = v724 + 1;
      if ((unint64_t)v725 >= 0x7FFFFFFFFFFFFFF8)
        v727 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v727 = v726;
      if (v727)
        v727 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v727);
      else
        v728 = 0;
      v2032 = (char ***)(v727 + 8 * v724);
      v2033 = v727 + 8 * v728;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2039 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2039)
        goto LABEL_2344;
      do
      {
        v2040 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2040;
      }
      while (v2034 != v2039);
      goto LABEL_2343;
    case 14:
      v90 = operator new();
      Direct::Direct(v90, *(_DWORD *)a1, *(_DWORD *)a1, *(_DWORD *)(a1 + 20));
      v91 = (void **)(a1 + 104);
      v93 = *(uint64_t **)(a1 + 112);
      v92 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v93 >= v92)
      {
        v470 = ((char *)v93 - (_BYTE *)*v91) >> 3;
        if ((unint64_t)(v470 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v471 = v92 - (_QWORD)*v91;
        v472 = v471 >> 2;
        if (v471 >> 2 <= (unint64_t)(v470 + 1))
          v472 = v470 + 1;
        if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF8)
          v473 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v473 = v472;
        if (v473)
          v473 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v473);
        else
          v474 = 0;
        v766 = (uint64_t *)(v473 + 8 * v470);
        v767 = v473 + 8 * v474;
        *v766 = v90;
        v95 = v766 + 1;
        v768 = (char *)*v94;
        v769 = (char *)*v91;
        if (*v94 != *v91)
        {
          do
          {
            v770 = *((_QWORD *)v768 - 1);
            v768 -= 8;
            *--v766 = v770;
          }
          while (v768 != v769);
          v768 = (char *)*v91;
        }
        *(_QWORD *)(v2366 + 104) = v766;
        *(_QWORD *)(v2366 + 112) = v95;
        *(_QWORD *)(v2366 + 120) = v767;
        if (v768)
          operator delete(v768);
      }
      else
      {
        *v93 = v90;
        v95 = v93 + 1;
      }
      *v94 = v95;
      (*(void (**)(_QWORD))(*(_QWORD *)*(v95 - 1) + 8))(*(v95 - 1));
      v771 = operator new();
      v772 = *(_DWORD *)v2366;
      v773 = *(_DWORD *)(v2366 + 4);
      memset(v2613, 0, sizeof(v2613));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2613, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v771, v772, v773, (_DWORD **)v2613, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v775 = *(uint64_t **)(v2366 + 112);
      v774 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v775 >= v774)
      {
        v776 = ((char *)v775 - (_BYTE *)*v91) >> 3;
        if ((unint64_t)(v776 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v777 = v774 - (_QWORD)*v91;
        v778 = v777 >> 2;
        if (v777 >> 2 <= (unint64_t)(v776 + 1))
          v778 = v776 + 1;
        if ((unint64_t)v777 >= 0x7FFFFFFFFFFFFFF8)
          v779 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v779 = v778;
        if (v779)
          v779 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v779);
        else
          v780 = 0;
        v1370 = (uint64_t *)(v779 + 8 * v776);
        v1371 = v779 + 8 * v780;
        *v1370 = v771;
        v291 = v1370 + 1;
        v1372 = (char *)*v94;
        v1373 = (char *)*v91;
        if (*v94 != *v91)
        {
          do
          {
            v1374 = *((_QWORD *)v1372 - 1);
            v1372 -= 8;
            *--v1370 = v1374;
          }
          while (v1372 != v1373);
          v1372 = (char *)*v91;
        }
        *(_QWORD *)(v2366 + 104) = v1370;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1371;
        if (v1372)
          operator delete(v1372);
      }
      else
      {
        *v775 = v771;
        v291 = v775 + 1;
      }
      *v94 = v291;
      v1019 = v2613[0];
      if (!v2613[0])
        goto LABEL_1450;
      v1020 = v2613;
      goto LABEL_1449;
    case 15:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v127 = operator new();
      Direct::Direct(v127, *(_DWORD *)a1, *(_DWORD *)a1, *(_DWORD *)(a1 + 20));
      v128 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      *v128 = v127;
      v2682 = v128 + 1;
      v2683 = &v128[v129];
      v2681 = v128;
      v130 = (char **)operator new();
      Parallel::Parallel(v130, (uint64_t)&v2681);
      v132 = *(char ****)(a1 + 112);
      v131 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v132 >= v131)
      {
        v609 = *(_QWORD *)(a1 + 104);
        v610 = ((uint64_t)v132 - v609) >> 3;
        if ((unint64_t)(v610 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v611 = v131 - v609;
        v612 = v611 >> 2;
        if (v611 >> 2 <= (unint64_t)(v610 + 1))
          v612 = v610 + 1;
        if ((unint64_t)v611 >= 0x7FFFFFFFFFFFFFF8)
          v613 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v613 = v612;
        if (v613)
          v613 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v613);
        else
          v614 = 0;
        v1161 = (char ***)(v613 + 8 * v610);
        v1162 = v613 + 8 * v614;
        *v1161 = v130;
        v133 = v1161 + 1;
        v1164 = *(char **)(a1 + 104);
        v1163 = *(char **)(a1 + 112);
        if (v1163 == v1164)
        {
          v1166 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1165 = (char **)*((_QWORD *)v1163 - 1);
            v1163 -= 8;
            *--v1161 = v1165;
          }
          while (v1163 != v1164);
          v1166 = (_QWORD *)a1;
          v1163 = *(char **)(a1 + 104);
        }
        v1166[13] = v1161;
        v1166[14] = v133;
        v1166[15] = v1162;
        if (v1163)
          operator delete(v1163);
      }
      else
      {
        *v132 = v130;
        v133 = v132 + 1;
      }
      *(_QWORD *)(a1 + 112) = v133;
      v1167 = operator new();
      v1168 = *(_DWORD *)a1;
      v1169 = *(_DWORD *)(a1 + 4);
      v2612 = 0;
      v2610 = 0;
      v2611 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2610, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1167, v1168, v1169, (_DWORD **)&v2610, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v1171 = *(uint64_t **)(a1 + 112);
      v1170 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1171 >= v1170)
      {
        v1173 = *(_QWORD *)(a1 + 104);
        v1174 = ((uint64_t)v1171 - v1173) >> 3;
        if ((unint64_t)(v1174 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1175 = v1170 - v1173;
        v1176 = v1175 >> 2;
        if (v1175 >> 2 <= (unint64_t)(v1174 + 1))
          v1176 = v1174 + 1;
        if ((unint64_t)v1175 >= 0x7FFFFFFFFFFFFFF8)
          v1177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1177 = v1176;
        if (v1177)
          v1177 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1177);
        else
          v1178 = 0;
        v1491 = (uint64_t *)(v1177 + 8 * v1174);
        v1492 = v1177 + 8 * v1178;
        *v1491 = v1167;
        v1172 = v1491 + 1;
        v1494 = *(char **)(a1 + 104);
        v1493 = *(char **)(a1 + 112);
        if (v1493 == v1494)
        {
          v1496 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1495 = *((_QWORD *)v1493 - 1);
            v1493 -= 8;
            *--v1491 = v1495;
          }
          while (v1493 != v1494);
          v1496 = (_QWORD *)a1;
          v1493 = *(char **)(a1 + 104);
        }
        v1496[13] = v1491;
        v1496[14] = v1172;
        v1496[15] = v1492;
        if (v1493)
          operator delete(v1493);
      }
      else
      {
        *v1171 = v1167;
        v1172 = v1171 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1172;
      if (v2610)
      {
        v2611 = v2610;
        operator delete(v2610);
        v1172 = *(_QWORD **)(a1 + 112);
      }
      (*(void (**)(_QWORD))(*(_QWORD *)*(v1172 - 1) + 8))(*(v1172 - 1));
      goto LABEL_2408;
    case 16:
      if (*(int *)(a2 + 64) >= 1)
      {
        v148 = 0;
        while (2)
        {
          v149 = *(_QWORD *)(a2 + 56);
          v150 = v149 + 632 * v148;
          if (*(_BYTE *)(v150 + 20))
            v151 = *(_DWORD *)(v2366 + 20);
          else
            v151 = 0;
          v152 = v149 + 632 * v148;
          v153 = *(unsigned __int8 *)(v152 + 512);
          v154 = *(_BYTE *)(v152 + 512) != 0;
          v156 = *(_DWORD *)(v150 + 12);
          v155 = *(_DWORD *)(v150 + 16);
          switch(*(_DWORD *)(v152 + 8))
          {
            case 0:
              v157 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v157 + 576);
              v2362[2] = *(_DWORD *)(v157 + 584);
              v158 = operator new();
              v2608 = 0;
              v2607 = 0;
              v2609 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2607, v2362, (uint64_t)v2361);
              LSTM<signed char>::LSTM(v158, v156, v155, &v2607, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 0);
              v160 = *(uint64_t **)(v2366 + 112);
              v159 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v160 >= v159)
              {
                v200 = *(_QWORD *)(v2366 + 104);
                v201 = ((uint64_t)v160 - v200) >> 3;
                if ((unint64_t)(v201 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v202 = v159 - v200;
                v203 = v202 >> 2;
                if (v202 >> 2 <= (unint64_t)(v201 + 1))
                  v203 = v201 + 1;
                if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
                  v204 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v204 = v203;
                if (v204)
                  v204 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v204);
                else
                  v205 = 0;
                v223 = (uint64_t *)(v204 + 8 * v201);
                *v223 = v158;
                v161 = v223 + 1;
                v225 = *(char **)(v2366 + 104);
                v224 = *(char **)(v2366 + 112);
                if (v224 == v225)
                {
                  v227 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v226 = *((_QWORD *)v224 - 1);
                    v224 -= 8;
                    *--v223 = v226;
                  }
                  while (v224 != v225);
                  v227 = (_QWORD *)v2366;
                  v224 = *(char **)(v2366 + 104);
                }
                v227[13] = v223;
                v227[14] = v161;
                v227[15] = v204 + 8 * v205;
                if (v224)
                  operator delete(v224);
              }
              else
              {
                *v160 = v158;
                v161 = v160 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v161;
              v228 = v2607;
              if (!v2607)
                goto LABEL_205;
              v2608 = v2607;
              goto LABEL_204;
            case 1:
              v167 = operator new();
              RecurrentLayer<signed char>::RecurrentLayer(v167, v156, v155, *(_DWORD *)(v149 + 632 * v148 + 576), v2358 != 0, v2355 != 0, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v168 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 < v168)
                goto LABEL_113;
              v170 = *(_QWORD *)(v2366 + 104);
              v171 = ((uint64_t)v169 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v172 = v168 - v170;
              v173 = v172 >> 2;
              if (v172 >> 2 <= (unint64_t)(v171 + 1))
                v173 = v171 + 1;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
                v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
              else
                v175 = 0;
              v209 = (uint64_t *)(v174 + 8 * v171);
              *v209 = v167;
              v189 = v209 + 1;
              v211 = *(char **)(v2366 + 104);
              v210 = *(char **)(v2366 + 112);
              if (v210 == v211)
                goto LABEL_157;
              do
              {
                v212 = *((_QWORD *)v210 - 1);
                v210 -= 8;
                *--v209 = v212;
              }
              while (v210 != v211);
              goto LABEL_156;
            case 3:
              v167 = operator new();
              FullLayer<signed char>::FullLayer(v167, v156, v155, *(_DWORD *)(v149 + 632 * v148 + 576), v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v183 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 < v183)
                goto LABEL_113;
              v184 = *(_QWORD *)(v2366 + 104);
              v185 = ((uint64_t)v169 - v184) >> 3;
              if ((unint64_t)(v185 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v186 = v183 - v184;
              v187 = v186 >> 2;
              if (v186 >> 2 <= (unint64_t)(v185 + 1))
                v187 = v185 + 1;
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v187;
              if (v174)
                v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
              else
                v175 = 0;
              v209 = (uint64_t *)(v174 + 8 * v185);
              *v209 = v167;
              v189 = v209 + 1;
              v213 = *(char **)(v2366 + 104);
              v210 = *(char **)(v2366 + 112);
              if (v210 == v213)
                goto LABEL_157;
              do
              {
                v214 = *((_QWORD *)v210 - 1);
                v210 -= 8;
                *--v209 = v214;
              }
              while (v210 != v213);
              goto LABEL_156;
            case 4:
              v167 = operator new();
              SoftMax<signed char>::SoftMax(v167, v156, v155, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v188 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 >= v188)
              {
                v190 = *(_QWORD *)(v2366 + 104);
                v191 = ((uint64_t)v169 - v190) >> 3;
                if ((unint64_t)(v191 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v192 = v188 - v190;
                v193 = v192 >> 2;
                if (v192 >> 2 <= (unint64_t)(v191 + 1))
                  v193 = v191 + 1;
                if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
                  v174 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v174 = v193;
                if (v174)
                  v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
                else
                  v175 = 0;
                v209 = (uint64_t *)(v174 + 8 * v191);
                *v209 = v167;
                v189 = v209 + 1;
                v215 = *(char **)(v2366 + 104);
                v210 = *(char **)(v2366 + 112);
                if (v210 == v215)
                {
LABEL_157:
                  v217 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v216 = *((_QWORD *)v210 - 1);
                    v210 -= 8;
                    *--v209 = v216;
                  }
                  while (v210 != v215);
LABEL_156:
                  v217 = (_QWORD *)v2366;
                  v210 = *(char **)(v2366 + 104);
                }
                v217[13] = v209;
                v217[14] = v189;
                v217[15] = v174 + 8 * v175;
                if (v210)
                  operator delete(v210);
              }
              else
              {
LABEL_113:
                *v169 = v167;
                v189 = v169 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v189;
LABEL_205:
              if (++v148 >= *(int *)(a2 + 64))
                goto LABEL_2422;
              continue;
            case 5:
              v162 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v162 + 576);
              v2362[2] = *(_DWORD *)(v162 + 584);
              v163 = operator new();
              v2605 = 0;
              v2604 = 0;
              v2606 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2604, v2362, (uint64_t)v2361);
              GRU<signed char>::GRU(v163, v156, v155, &v2604, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v165 = *(uint64_t **)(v2366 + 112);
              v164 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v165 >= v164)
              {
                v194 = *(_QWORD *)(v2366 + 104);
                v195 = ((uint64_t)v165 - v194) >> 3;
                if ((unint64_t)(v195 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v196 = v164 - v194;
                v197 = v196 >> 2;
                if (v196 >> 2 <= (unint64_t)(v195 + 1))
                  v197 = v195 + 1;
                if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
                  v198 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v198 = v197;
                if (v198)
                  v198 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v198);
                else
                  v199 = 0;
                v218 = (uint64_t *)(v198 + 8 * v195);
                *v218 = v163;
                v166 = v218 + 1;
                v220 = *(char **)(v2366 + 104);
                v219 = *(char **)(v2366 + 112);
                if (v219 == v220)
                {
                  v222 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v221 = *((_QWORD *)v219 - 1);
                    v219 -= 8;
                    *--v218 = v221;
                  }
                  while (v219 != v220);
                  v222 = (_QWORD *)v2366;
                  v219 = *(char **)(v2366 + 104);
                }
                v222[13] = v218;
                v222[14] = v166;
                v222[15] = v198 + 8 * v199;
                if (v219)
                  operator delete(v219);
              }
              else
              {
                *v165 = v163;
                v166 = v165 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v166;
              v228 = v2604;
              if (!v2604)
                goto LABEL_205;
              v2605 = v2604;
LABEL_204:
              operator delete(v228);
              goto LABEL_205;
            case 7:
              v176 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v176 + 576);
              v2362[2] = *(_DWORD *)(v176 + 584);
              v2681 = 0;
              v2682 = 0;
              v2683 = 0;
              v177 = operator new();
              v2602 = 0;
              v2601 = 0;
              v2603 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2601, v2362, (uint64_t)v2361);
              LSTM<signed char>::LSTM(v177, v156, v155, (_DWORD **)&v2601, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 0);
              v178 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
              v180 = v179;
              *v178 = v177;
              v2352 = &v178[v179];
              v2682 = v178 + 1;
              v2683 = v2352;
              v2681 = v178;
              if (v2601)
              {
                v2602 = v2601;
                operator delete(v2601);
              }
              v2354 = operator new();
              v181 = operator new();
              v2599 = 0;
              v2598 = 0;
              v2600 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2598, v2362, (uint64_t)v2361);
              LSTM<signed char>::LSTM(v181, v156, v155, (_DWORD **)&v2598, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 1);
              Reverse::Reverse(v2354, v181, v151);
              if (v180 < 2)
              {
                v206 = 2;
                if ((unint64_t)(((char *)v2352 - (char *)v178) >> 2) > 2)
                  v206 = ((char *)v2352 - (char *)v178) >> 2;
                if ((unint64_t)((char *)v2352 - (char *)v178) >= 0x7FFFFFFFFFFFFFF8)
                  v207 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v207 = v206;
                if (v207)
                  v207 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v207);
                else
                  v208 = 0;
                v229 = 0;
                v230 = v207 + 8;
                v231 = v207 + 8 * v208;
                *(_QWORD *)(v207 + 8) = v2354;
                v182 = (_QWORD *)(v207 + 16);
                do
                {
                  *(_QWORD *)(v207 + v229 * 8) = v178[v229];
                  --v229;
                }
                while (v229 != -1);
                v232 = v2681;
                v2681 = (void *)(v230 - 8);
                v2683 = (_QWORD *)v231;
                if (v232)
                  operator delete(v232);
              }
              else
              {
                v178[1] = v2354;
                v182 = v178 + 2;
              }
              v2682 = v182;
              if (v2598)
              {
                v2599 = v2598;
                operator delete(v2598);
              }
              v233 = (char **)operator new();
              Parallel::Parallel(v233, (uint64_t)&v2681);
              v235 = *(char ****)(v2366 + 112);
              v234 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v235 >= v234)
              {
                v237 = *(_QWORD *)(v2366 + 104);
                v238 = ((uint64_t)v235 - v237) >> 3;
                if ((unint64_t)(v238 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v239 = v234 - v237;
                v240 = v239 >> 2;
                if (v239 >> 2 <= (unint64_t)(v238 + 1))
                  v240 = v238 + 1;
                if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
                  v241 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v241 = v240;
                if (v241)
                  v241 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v241);
                else
                  v242 = 0;
                v243 = (char ***)(v241 + 8 * v238);
                *v243 = v233;
                v236 = v243 + 1;
                v245 = *(char **)(v2366 + 104);
                v244 = *(char **)(v2366 + 112);
                if (v244 == v245)
                {
                  v247 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v246 = (char **)*((_QWORD *)v244 - 1);
                    v244 -= 8;
                    *--v243 = v246;
                  }
                  while (v244 != v245);
                  v247 = (_QWORD *)v2366;
                  v244 = *(char **)(v2366 + 104);
                }
                v247[13] = v243;
                v247[14] = v236;
                v247[15] = v241 + 8 * v242;
                if (v244)
                  operator delete(v244);
              }
              else
              {
                *v235 = v233;
                v236 = v235 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v236;
              v228 = v2681;
              if (v2681)
                goto LABEL_204;
              goto LABEL_205;
            default:
              exitFramework(89);
          }
        }
      }
      goto LABEL_2421;
    case 17:
      v252 = operator new();
      FullLayer<signed char>::FullLayer(v252, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v254 = v253;
      *v40 = v252;
      v255 = operator new();
      v256 = *(_DWORD *)(a1 + 4);
      v2672 = 0;
      v2673 = 0;
      v2671 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2671, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v255, v256, v256, &v2671, 0, a2, 1, 0, 0);
      v257 = &v40[v254];
      if (v254 < 2)
      {
        v627 = 2;
        if ((unint64_t)((8 * v254) >> 2) > 2)
          v627 = (8 * v254) >> 2;
        if ((unint64_t)(8 * v254) >= 0x7FFFFFFFFFFFFFF8)
          v628 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v628 = v627;
        if (v628)
          v628 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v628);
        else
          v629 = 0;
        v1242 = 0;
        v257 = (uint64_t *)(v628 + 8 * v629);
        *(_QWORD *)(v628 + 8) = v255;
        v258 = (uint64_t *)(v628 + 16);
        do
        {
          *(_QWORD *)(v628 + v1242 * 8) = v40[v1242];
          --v1242;
        }
        while (v1242 != -1);
        v1243 = (uint64_t *)v628;
        operator delete(v40);
        v40 = v1243;
      }
      else
      {
        v40[1] = v255;
        v258 = v40 + 2;
      }
      if (v2671)
      {
        v2672 = v2671;
        operator delete(v2671);
      }
      v1244 = operator new();
      v1245 = *(_DWORD *)(v2366 + 4);
      v2669 = 0;
      v2670 = 0;
      v2668 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2668, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1244, v1245, v1245, &v2668, 0, a2, 1, 0, 0);
      if (v258 >= v257)
      {
        v1247 = v258 - v40;
        v1248 = v1247 + 1;
        if ((unint64_t)(v1247 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (((char *)v257 - (char *)v40) >> 2 > v1248)
          v1248 = ((char *)v257 - (char *)v40) >> 2;
        if ((unint64_t)((char *)v257 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v1249 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1249 = v1248;
        if (v1249)
          v1249 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1249);
        v1250 = (uint64_t *)(v1249 + 8 * v1247);
        *v1250 = v1244;
        v1246 = (uint64_t)(v1250 + 1);
        while (v258 != v40)
        {
          v1251 = *--v258;
          *--v1250 = v1251;
        }
        operator delete(v40);
        v40 = v1250;
      }
      else
      {
        *v258 = v1244;
        v1246 = (uint64_t)(v258 + 1);
      }
      if (v2668)
      {
        v2669 = v2668;
        operator delete(v2668);
      }
      v1252 = operator new();
      v2665 = 0;
      v2666 = 0;
      v2667 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2665, v40, v1246, (v1246 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v1252, (uint64_t)&v2665);
      if (v2665)
      {
        v2666 = v2665;
        operator delete(v2665);
      }
      v1253 = operator new();
      FullLayer<signed char>::FullLayer(v1253, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1255 = v1254;
      *v621 = v1253;
      v1256 = operator new();
      v1257 = *(_DWORD *)(v2366 + 4);
      v2664 = 0;
      v2662 = 0;
      v2663 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2662, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1256, v1257, v1257, (_DWORD **)&v2662, 0, a2, 1, 0, 0);
      v1258 = &v621[v1255];
      if (v1255 < 2)
      {
        v1260 = 2;
        if ((unint64_t)((8 * v1255) >> 2) > 2)
          v1260 = (8 * v1255) >> 2;
        if ((unint64_t)(8 * v1255) >= 0x7FFFFFFFFFFFFFF8)
          v1261 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1261 = v1260;
        if (v1261)
          v1261 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1261);
        else
          v1262 = 0;
        v1901 = 0;
        v1258 = (uint64_t *)(v1261 + 8 * v1262);
        *(_QWORD *)(v1261 + 8) = v1256;
        v1259 = (uint64_t *)(v1261 + 16);
        do
        {
          *(_QWORD *)(v1261 + v1901 * 8) = v621[v1901];
          --v1901;
        }
        while (v1901 != -1);
        v1902 = (uint64_t *)v1261;
        operator delete(v621);
        v621 = v1902;
      }
      else
      {
        v621[1] = v1256;
        v1259 = v621 + 2;
      }
      if (v2662)
      {
        v2663 = v2662;
        operator delete(v2662);
      }
      v1903 = operator new();
      v1904 = *(_DWORD *)(v2366 + 4);
      v2661 = 0;
      v2659 = 0;
      v2660 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2659, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1903, v1904, v1904, (_DWORD **)&v2659, 0, a2, 1, 0, 0);
      if (v1259 >= v1258)
      {
        v1906 = v1259 - v621;
        v1907 = v1906 + 1;
        if ((unint64_t)(v1906 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (((char *)v1258 - (char *)v621) >> 2 > v1907)
          v1907 = ((char *)v1258 - (char *)v621) >> 2;
        if ((unint64_t)((char *)v1258 - (char *)v621) >= 0x7FFFFFFFFFFFFFF8)
          v1908 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1908 = v1907;
        if (v1908)
          v1908 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1908);
        v1909 = (uint64_t *)(v1908 + 8 * v1906);
        *v1909 = v1903;
        v1905 = (uint64_t)(v1909 + 1);
        while (v1259 != v621)
        {
          v1910 = *--v1259;
          *--v1909 = v1910;
        }
        operator delete(v621);
        v621 = v1909;
      }
      else
      {
        *v1259 = v1903;
        v1905 = (uint64_t)(v1259 + 1);
      }
      if (v2659)
      {
        v2660 = v2659;
        operator delete(v2659);
      }
      v1911 = operator new();
      v1912 = operator new();
      v2657 = 0;
      v2656 = 0;
      v2658 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2656, v621, v1905, (v1905 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v1912, (uint64_t)&v2656);
      Reverse::Reverse(v1911, v1912, *(_DWORD *)(v2366 + 20));
      if (v2656)
      {
        v2657 = v2656;
        operator delete(v2656);
      }
      v1913 = operator new(8uLL);
      *v1913 = v1252;
      v1914 = operator new(0x10uLL);
      v1915 = v1914 + 2;
      *v1914 = *v1913;
      v1914[1] = v1911;
      v2681 = v1914;
      v2683 = v1914 + 2;
      operator delete(v1913);
      v2682 = v1915;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v1916 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v1916)
        goto LABEL_2104;
      v1918 = *(_QWORD *)(v2366 + 104);
      v1919 = ((uint64_t)v690 - v1918) >> 3;
      if ((unint64_t)(v1919 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v1920 = v1916 - v1918;
      v1921 = v1920 >> 2;
      if (v1920 >> 2 <= (unint64_t)(v1919 + 1))
        v1921 = v1919 + 1;
      if ((unint64_t)v1920 >= 0x7FFFFFFFFFFFFFF8)
        v1922 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1922 = v1921;
      if (v1922)
        v1922 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1922);
      else
        v1923 = 0;
      v2032 = (char ***)(v1922 + 8 * v1919);
      v2033 = v1922 + 8 * v1923;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2131 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2131)
        goto LABEL_2344;
      do
      {
        v2132 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2132;
      }
      while (v2034 != v2131);
      goto LABEL_2343;
    case 19:
      v248 = operator new();
      FullLayer<signed char>::FullLayer(v248, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v250 = *(uint64_t **)(a1 + 112);
      v249 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v250 >= v249)
      {
        v493 = *(_QWORD *)(a1 + 104);
        v494 = ((uint64_t)v250 - v493) >> 3;
        if ((unint64_t)(v494 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v495 = v249 - v493;
        v496 = v495 >> 2;
        if (v495 >> 2 <= (unint64_t)(v494 + 1))
          v496 = v494 + 1;
        if ((unint64_t)v495 >= 0x7FFFFFFFFFFFFFF8)
          v497 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v497 = v496;
        if (v497)
          v497 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v497);
        else
          v498 = 0;
        v801 = (uint64_t *)(v497 + 8 * v494);
        v802 = v497 + 8 * v498;
        *v801 = v248;
        v251 = v801 + 1;
        v804 = *(char **)(a1 + 104);
        v803 = *(char **)(a1 + 112);
        if (v803 == v804)
        {
          v806 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v805 = *((_QWORD *)v803 - 1);
            v803 -= 8;
            *--v801 = v805;
          }
          while (v803 != v804);
          v806 = (_QWORD *)a1;
          v803 = *(char **)(a1 + 104);
        }
        v806[13] = v801;
        v806[14] = v251;
        v806[15] = v802;
        if (v803)
          operator delete(v803);
      }
      else
      {
        *v250 = v248;
        v251 = v250 + 1;
      }
      *(_QWORD *)(a1 + 112) = v251;
      v895 = operator new();
      v896 = *(_DWORD *)(a1 + 4);
      v2597 = 0;
      v2595 = 0;
      v2596 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2595, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v895, v896, v896, (_DWORD **)&v2595, 0, a2, 1, 0, 0);
      v898 = *(uint64_t **)(a1 + 112);
      v897 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v898 >= v897)
      {
        v900 = *(_QWORD *)(a1 + 104);
        v901 = ((uint64_t)v898 - v900) >> 3;
        if ((unint64_t)(v901 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v902 = v897 - v900;
        v903 = v902 >> 2;
        if (v902 >> 2 <= (unint64_t)(v901 + 1))
          v903 = v901 + 1;
        if ((unint64_t)v902 >= 0x7FFFFFFFFFFFFFF8)
          v904 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v904 = v903;
        if (v904)
          v904 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v904);
        else
          v905 = 0;
        v1218 = (uint64_t *)(v904 + 8 * v901);
        v1219 = v904 + 8 * v905;
        *v1218 = v895;
        v899 = v1218 + 1;
        v1221 = *(char **)(a1 + 104);
        v1220 = *(char **)(a1 + 112);
        if (v1220 == v1221)
        {
          v1223 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1222 = *((_QWORD *)v1220 - 1);
            v1220 -= 8;
            *--v1218 = v1222;
          }
          while (v1220 != v1221);
          v1223 = (_QWORD *)a1;
          v1220 = *(char **)(a1 + 104);
        }
        v1223[13] = v1218;
        v1223[14] = v899;
        v1223[15] = v1219;
        if (v1220)
          operator delete(v1220);
      }
      else
      {
        *v898 = v895;
        v899 = v898 + 1;
      }
      *(_QWORD *)(a1 + 112) = v899;
      v1324 = v2595;
      if (!v2595)
        goto LABEL_2421;
      v2596 = v2595;
      goto LABEL_2420;
    case 20:
      v134 = operator new();
      v135 = *(_DWORD *)a1;
      v136 = *(_DWORD *)(a1 + 4);
      v2594 = 0;
      v2592 = 0;
      v2593 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2592, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v134, v135, v136, (_DWORD **)&v2592, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v138 = *(uint64_t **)(a1 + 112);
      v137 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v138 >= v137)
      {
        v565 = *(_QWORD *)(a1 + 104);
        v566 = ((uint64_t)v138 - v565) >> 3;
        if ((unint64_t)(v566 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v567 = v137 - v565;
        v568 = v567 >> 2;
        if (v567 >> 2 <= (unint64_t)(v566 + 1))
          v568 = v566 + 1;
        if ((unint64_t)v567 >= 0x7FFFFFFFFFFFFFF8)
          v569 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v569 = v568;
        if (v569)
          v569 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v569);
        else
          v570 = 0;
        v1002 = (uint64_t *)(v569 + 8 * v566);
        v1003 = v569 + 8 * v570;
        *v1002 = v134;
        v139 = v1002 + 1;
        v1005 = *(char **)(a1 + 104);
        v1004 = *(char **)(a1 + 112);
        if (v1004 == v1005)
        {
          v1007 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1006 = *((_QWORD *)v1004 - 1);
            v1004 -= 8;
            *--v1002 = v1006;
          }
          while (v1004 != v1005);
          v1007 = (_QWORD *)a1;
          v1004 = *(char **)(a1 + 104);
        }
        v1007[13] = v1002;
        v1007[14] = v139;
        v1007[15] = v1003;
        if (v1004)
          operator delete(v1004);
      }
      else
      {
        *v138 = v134;
        v139 = v138 + 1;
      }
      *(_QWORD *)(a1 + 112) = v139;
      if (v2592)
      {
        v2593 = v2592;
        operator delete(v2592);
      }
      v1097 = operator new();
      v1098 = *(_DWORD *)(a1 + 4);
      v2591 = 0;
      v2589 = 0;
      v2590 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2589, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1097, v1098, v1098, (_DWORD **)&v2589, 0, a2, 1, 0, 0);
      v1100 = *(uint64_t **)(a1 + 112);
      v1099 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1100 >= v1099)
      {
        v1102 = *(_QWORD *)(a1 + 104);
        v1103 = ((uint64_t)v1100 - v1102) >> 3;
        if ((unint64_t)(v1103 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1104 = v1099 - v1102;
        v1105 = v1104 >> 2;
        if (v1104 >> 2 <= (unint64_t)(v1103 + 1))
          v1105 = v1103 + 1;
        if ((unint64_t)v1104 >= 0x7FFFFFFFFFFFFFF8)
          v1106 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1106 = v1105;
        if (v1106)
          v1106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1106);
        else
          v1107 = 0;
        v1381 = (uint64_t *)(v1106 + 8 * v1103);
        v1382 = v1106 + 8 * v1107;
        *v1381 = v1097;
        v1101 = v1381 + 1;
        v1384 = *(char **)(a1 + 104);
        v1383 = *(char **)(a1 + 112);
        if (v1383 == v1384)
        {
          v1386 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1385 = *((_QWORD *)v1383 - 1);
            v1383 -= 8;
            *--v1381 = v1385;
          }
          while (v1383 != v1384);
          v1386 = (_QWORD *)a1;
          v1383 = *(char **)(a1 + 104);
        }
        v1386[13] = v1381;
        v1386[14] = v1101;
        v1386[15] = v1382;
        if (v1383)
          operator delete(v1383);
      }
      else
      {
        *v1100 = v1097;
        v1101 = v1100 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1101;
      v1324 = v2589;
      if (!v2589)
        goto LABEL_2421;
      v2590 = v2589;
      goto LABEL_2420;
    case 21:
      v312 = operator new();
      v313 = *(_DWORD *)a1;
      v314 = *(_DWORD *)(a1 + 4);
      v2588 = 0;
      v2586 = 0;
      v2587 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2586, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v312, v313, v314, (_DWORD **)&v2586, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v316 = *(uint64_t **)(a1 + 112);
      v315 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v316 >= v315)
      {
        v584 = *(_QWORD *)(a1 + 104);
        v585 = ((uint64_t)v316 - v584) >> 3;
        if ((unint64_t)(v585 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v586 = v315 - v584;
        v587 = v586 >> 2;
        if (v586 >> 2 <= (unint64_t)(v585 + 1))
          v587 = v585 + 1;
        if ((unint64_t)v586 >= 0x7FFFFFFFFFFFFFF8)
          v588 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v588 = v587;
        if (v588)
          v588 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v588);
        else
          v589 = 0;
        v1021 = (uint64_t *)(v588 + 8 * v585);
        v1022 = v588 + 8 * v589;
        *v1021 = v312;
        v317 = v1021 + 1;
        v1024 = *(char **)(a1 + 104);
        v1023 = *(char **)(a1 + 112);
        if (v1023 == v1024)
        {
          v1026 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1025 = *((_QWORD *)v1023 - 1);
            v1023 -= 8;
            *--v1021 = v1025;
          }
          while (v1023 != v1024);
          v1026 = (_QWORD *)a1;
          v1023 = *(char **)(a1 + 104);
        }
        v1026[13] = v1021;
        v1026[14] = v317;
        v1026[15] = v1022;
        if (v1023)
          operator delete(v1023);
      }
      else
      {
        *v316 = v312;
        v317 = v316 + 1;
      }
      *(_QWORD *)(a1 + 112) = v317;
      if (v2586)
      {
        v2587 = v2586;
        operator delete(v2586);
      }
      v1120 = operator new();
      v1121 = *(_DWORD *)(a1 + 4);
      v2585 = 0;
      v2583 = 0;
      v2584 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2583, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1120, v1121, v1121, (_DWORD **)&v2583, 0, a2, 1, 0, 0);
      v1123 = *(uint64_t **)(a1 + 112);
      v1122 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1123 >= v1122)
      {
        v1125 = *(_QWORD *)(a1 + 104);
        v1126 = ((uint64_t)v1123 - v1125) >> 3;
        if ((unint64_t)(v1126 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1127 = v1122 - v1125;
        v1128 = v1127 >> 2;
        if (v1127 >> 2 <= (unint64_t)(v1126 + 1))
          v1128 = v1126 + 1;
        if ((unint64_t)v1127 >= 0x7FFFFFFFFFFFFFF8)
          v1129 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1129 = v1128;
        if (v1129)
          v1129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1129);
        else
          v1130 = 0;
        v1393 = (uint64_t *)(v1129 + 8 * v1126);
        v1394 = v1129 + 8 * v1130;
        *v1393 = v1120;
        v1124 = v1393 + 1;
        v1396 = *(char **)(a1 + 104);
        v1395 = *(char **)(a1 + 112);
        if (v1395 == v1396)
        {
          v1398 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1397 = *((_QWORD *)v1395 - 1);
            v1395 -= 8;
            *--v1393 = v1397;
          }
          while (v1395 != v1396);
          v1398 = (_QWORD *)a1;
          v1395 = *(char **)(a1 + 104);
        }
        v1398[13] = v1393;
        v1398[14] = v1124;
        v1398[15] = v1394;
        if (v1395)
          operator delete(v1395);
      }
      else
      {
        *v1123 = v1120;
        v1124 = v1123 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1124;
      if (v2583)
      {
        v2584 = v2583;
        operator delete(v2583);
      }
      v1458 = operator new();
      v1459 = *(_DWORD *)(a1 + 4);
      v2582 = 0;
      v2580 = 0;
      v2581 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2580, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1458, v1459, v1459, (_DWORD **)&v2580, 0, a2, 1, 0, 0);
      v1461 = *(uint64_t **)(a1 + 112);
      v1460 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1461 >= v1460)
      {
        v1463 = *(_QWORD *)(a1 + 104);
        v1464 = ((uint64_t)v1461 - v1463) >> 3;
        if ((unint64_t)(v1464 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1465 = v1460 - v1463;
        v1466 = v1465 >> 2;
        if (v1465 >> 2 <= (unint64_t)(v1464 + 1))
          v1466 = v1464 + 1;
        if ((unint64_t)v1465 >= 0x7FFFFFFFFFFFFFF8)
          v1467 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1467 = v1466;
        if (v1467)
          v1467 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1467);
        else
          v1468 = 0;
        v1636 = (uint64_t *)(v1467 + 8 * v1464);
        v1637 = v1467 + 8 * v1468;
        *v1636 = v1458;
        v1462 = v1636 + 1;
        v1639 = *(char **)(a1 + 104);
        v1638 = *(char **)(a1 + 112);
        if (v1638 == v1639)
        {
          v1641 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1640 = *((_QWORD *)v1638 - 1);
            v1638 -= 8;
            *--v1636 = v1640;
          }
          while (v1638 != v1639);
          v1641 = (_QWORD *)a1;
          v1638 = *(char **)(a1 + 104);
        }
        v1641[13] = v1636;
        v1641[14] = v1462;
        v1641[15] = v1637;
        if (v1638)
          operator delete(v1638);
      }
      else
      {
        *v1461 = v1458;
        v1462 = v1461 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1462;
      v1324 = v2580;
      if (!v2580)
        goto LABEL_2421;
      v2581 = v2580;
      goto LABEL_2420;
    case 22:
      v84 = operator new();
      v85 = *(_DWORD *)a1;
      v86 = *(_DWORD *)(a1 + 4);
      v2579 = 0;
      v2577 = 0;
      v2578 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2577, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v84, v85, v86, (_DWORD **)&v2577, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v88 = *(uint64_t **)(a1 + 112);
      v87 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v88 >= v87)
      {
        v553 = *(_QWORD *)(a1 + 104);
        v554 = ((uint64_t)v88 - v553) >> 3;
        if ((unint64_t)(v554 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v555 = v87 - v553;
        v556 = v555 >> 2;
        if (v555 >> 2 <= (unint64_t)(v554 + 1))
          v556 = v554 + 1;
        if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFF8)
          v557 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v557 = v556;
        if (v557)
          v557 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v557);
        else
          v558 = 0;
        v990 = (uint64_t *)(v557 + 8 * v554);
        v991 = v557 + 8 * v558;
        *v990 = v84;
        v89 = v990 + 1;
        v993 = *(char **)(a1 + 104);
        v992 = *(char **)(a1 + 112);
        if (v992 == v993)
        {
          v995 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v994 = *((_QWORD *)v992 - 1);
            v992 -= 8;
            *--v990 = v994;
          }
          while (v992 != v993);
          v995 = (_QWORD *)a1;
          v992 = *(char **)(a1 + 104);
        }
        v995[13] = v990;
        v995[14] = v89;
        v995[15] = v991;
        if (v992)
          operator delete(v992);
      }
      else
      {
        *v88 = v84;
        v89 = v88 + 1;
      }
      *(_QWORD *)(a1 + 112) = v89;
      if (v2577)
      {
        v2578 = v2577;
        operator delete(v2577);
      }
      v1075 = operator new();
      v1076 = *(_DWORD *)(a1 + 4);
      v2576 = 0;
      v2574 = 0;
      v2575 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2574, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1075, v1076, v1076, (_DWORD **)&v2574, 0, a2, 1, 0, 0);
      v1078 = *(uint64_t **)(a1 + 112);
      v1077 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1078 >= v1077)
      {
        v1080 = *(_QWORD *)(a1 + 104);
        v1081 = ((uint64_t)v1078 - v1080) >> 3;
        if ((unint64_t)(v1081 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1082 = v1077 - v1080;
        v1083 = v1082 >> 2;
        if (v1082 >> 2 <= (unint64_t)(v1081 + 1))
          v1083 = v1081 + 1;
        if ((unint64_t)v1082 >= 0x7FFFFFFFFFFFFFF8)
          v1084 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1084 = v1083;
        if (v1084)
          v1084 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1084);
        else
          v1085 = 0;
        v1364 = (uint64_t *)(v1084 + 8 * v1081);
        v1365 = v1084 + 8 * v1085;
        *v1364 = v1075;
        v1079 = v1364 + 1;
        v1367 = *(char **)(a1 + 104);
        v1366 = *(char **)(a1 + 112);
        if (v1366 == v1367)
        {
          v1369 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1368 = *((_QWORD *)v1366 - 1);
            v1366 -= 8;
            *--v1364 = v1368;
          }
          while (v1366 != v1367);
          v1369 = (_QWORD *)a1;
          v1366 = *(char **)(a1 + 104);
        }
        v1369[13] = v1364;
        v1369[14] = v1079;
        v1369[15] = v1365;
        if (v1366)
          operator delete(v1366);
      }
      else
      {
        *v1078 = v1075;
        v1079 = v1078 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1079;
      if (v2574)
      {
        v2575 = v2574;
        operator delete(v2574);
      }
      v1436 = operator new();
      v1437 = *(_DWORD *)(a1 + 4);
      v2573 = 0;
      v2571 = 0;
      v2572 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2571, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1436, v1437, v1437, (_DWORD **)&v2571, 0, a2, 1, 0, 0);
      v1439 = *(uint64_t **)(a1 + 112);
      v1438 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1439 >= v1438)
      {
        v1441 = *(_QWORD *)(a1 + 104);
        v1442 = ((uint64_t)v1439 - v1441) >> 3;
        if ((unint64_t)(v1442 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1443 = v1438 - v1441;
        v1444 = v1443 >> 2;
        if (v1443 >> 2 <= (unint64_t)(v1442 + 1))
          v1444 = v1442 + 1;
        if ((unint64_t)v1443 >= 0x7FFFFFFFFFFFFFF8)
          v1445 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1445 = v1444;
        if (v1445)
          v1445 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1445);
        else
          v1446 = 0;
        v1618 = (uint64_t *)(v1445 + 8 * v1442);
        v1619 = v1445 + 8 * v1446;
        *v1618 = v1436;
        v1440 = v1618 + 1;
        v1621 = *(char **)(a1 + 104);
        v1620 = *(char **)(a1 + 112);
        if (v1620 == v1621)
        {
          v1623 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1622 = *((_QWORD *)v1620 - 1);
            v1620 -= 8;
            *--v1618 = v1622;
          }
          while (v1620 != v1621);
          v1623 = (_QWORD *)a1;
          v1620 = *(char **)(a1 + 104);
        }
        v1623[13] = v1618;
        v1623[14] = v1440;
        v1623[15] = v1619;
        if (v1620)
          operator delete(v1620);
      }
      else
      {
        *v1439 = v1436;
        v1440 = v1439 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1440;
      if (v2571)
      {
        v2572 = v2571;
        operator delete(v2571);
      }
      v1665 = operator new();
      v1666 = *(_DWORD *)(a1 + 4);
      v2570 = 0;
      v2568 = 0;
      v2569 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2568, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1665, v1666, v1666, (_DWORD **)&v2568, 0, a2, 1, 0, 0);
      v1668 = *(uint64_t **)(a1 + 112);
      v1667 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1668 >= v1667)
      {
        v1670 = *(_QWORD *)(a1 + 104);
        v1671 = ((uint64_t)v1668 - v1670) >> 3;
        if ((unint64_t)(v1671 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1672 = v1667 - v1670;
        v1673 = v1672 >> 2;
        if (v1672 >> 2 <= (unint64_t)(v1671 + 1))
          v1673 = v1671 + 1;
        if ((unint64_t)v1672 >= 0x7FFFFFFFFFFFFFF8)
          v1674 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1674 = v1673;
        if (v1674)
          v1674 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1674);
        else
          v1675 = 0;
        v1798 = (uint64_t *)(v1674 + 8 * v1671);
        v1799 = v1674 + 8 * v1675;
        *v1798 = v1665;
        v1669 = v1798 + 1;
        v1801 = *(char **)(a1 + 104);
        v1800 = *(char **)(a1 + 112);
        if (v1800 == v1801)
        {
          v1803 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1802 = *((_QWORD *)v1800 - 1);
            v1800 -= 8;
            *--v1798 = v1802;
          }
          while (v1800 != v1801);
          v1803 = (_QWORD *)a1;
          v1800 = *(char **)(a1 + 104);
        }
        v1803[13] = v1798;
        v1803[14] = v1669;
        v1803[15] = v1799;
        if (v1800)
          operator delete(v1800);
      }
      else
      {
        *v1668 = v1665;
        v1669 = v1668 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1669;
      v1324 = v2568;
      if (!v2568)
        goto LABEL_2421;
      v2569 = v2568;
      goto LABEL_2420;
    case 23:
      v54 = operator new();
      v55 = *(_DWORD *)a1;
      v56 = *(_DWORD *)(a1 + 4);
      v2567 = 0;
      v2565 = 0;
      v2566 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2565, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v54, v55, v56, (_DWORD **)&v2565, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v58 = *(uint64_t **)(a1 + 112);
      v57 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v58 >= v57)
      {
        v547 = *(_QWORD *)(a1 + 104);
        v548 = ((uint64_t)v58 - v547) >> 3;
        if ((unint64_t)(v548 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v549 = v57 - v547;
        v550 = v549 >> 2;
        if (v549 >> 2 <= (unint64_t)(v548 + 1))
          v550 = v548 + 1;
        if ((unint64_t)v549 >= 0x7FFFFFFFFFFFFFF8)
          v551 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v551 = v550;
        if (v551)
          v551 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v551);
        else
          v552 = 0;
        v984 = (uint64_t *)(v551 + 8 * v548);
        v985 = v551 + 8 * v552;
        *v984 = v54;
        v59 = v984 + 1;
        v987 = *(char **)(a1 + 104);
        v986 = *(char **)(a1 + 112);
        if (v986 == v987)
        {
          v989 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v988 = *((_QWORD *)v986 - 1);
            v986 -= 8;
            *--v984 = v988;
          }
          while (v986 != v987);
          v989 = (_QWORD *)a1;
          v986 = *(char **)(a1 + 104);
        }
        v989[13] = v984;
        v989[14] = v59;
        v989[15] = v985;
        if (v986)
          operator delete(v986);
      }
      else
      {
        *v58 = v54;
        v59 = v58 + 1;
      }
      *(_QWORD *)(a1 + 112) = v59;
      if (v2565)
      {
        v2566 = v2565;
        operator delete(v2565);
      }
      v1064 = operator new();
      v1065 = *(_DWORD *)(a1 + 4);
      v2564 = 0;
      v2562 = 0;
      v2563 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2562, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1064, v1065, v1065, (_DWORD **)&v2562, 0, a2, 1, 0, 0);
      v1067 = *(uint64_t **)(a1 + 112);
      v1066 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1067 >= v1066)
      {
        v1069 = *(_QWORD *)(a1 + 104);
        v1070 = ((uint64_t)v1067 - v1069) >> 3;
        if ((unint64_t)(v1070 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1071 = v1066 - v1069;
        v1072 = v1071 >> 2;
        if (v1071 >> 2 <= (unint64_t)(v1070 + 1))
          v1072 = v1070 + 1;
        if ((unint64_t)v1071 >= 0x7FFFFFFFFFFFFFF8)
          v1073 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1073 = v1072;
        if (v1073)
          v1073 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1073);
        else
          v1074 = 0;
        v1358 = (uint64_t *)(v1073 + 8 * v1070);
        v1359 = v1073 + 8 * v1074;
        *v1358 = v1064;
        v1068 = v1358 + 1;
        v1361 = *(char **)(a1 + 104);
        v1360 = *(char **)(a1 + 112);
        if (v1360 == v1361)
        {
          v1363 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1362 = *((_QWORD *)v1360 - 1);
            v1360 -= 8;
            *--v1358 = v1362;
          }
          while (v1360 != v1361);
          v1363 = (_QWORD *)a1;
          v1360 = *(char **)(a1 + 104);
        }
        v1363[13] = v1358;
        v1363[14] = v1068;
        v1363[15] = v1359;
        if (v1360)
          operator delete(v1360);
      }
      else
      {
        *v1067 = v1064;
        v1068 = v1067 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1068;
      if (v2562)
      {
        v2563 = v2562;
        operator delete(v2562);
      }
      v1425 = operator new();
      v1426 = *(_DWORD *)(a1 + 4);
      v2561 = 0;
      v2559 = 0;
      v2560 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2559, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1425, v1426, v1426, (_DWORD **)&v2559, 0, a2, 1, 0, 0);
      v1428 = *(uint64_t **)(a1 + 112);
      v1427 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1428 >= v1427)
      {
        v1430 = *(_QWORD *)(a1 + 104);
        v1431 = ((uint64_t)v1428 - v1430) >> 3;
        if ((unint64_t)(v1431 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1432 = v1427 - v1430;
        v1433 = v1432 >> 2;
        if (v1432 >> 2 <= (unint64_t)(v1431 + 1))
          v1433 = v1431 + 1;
        if ((unint64_t)v1432 >= 0x7FFFFFFFFFFFFFF8)
          v1434 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1434 = v1433;
        if (v1434)
          v1434 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1434);
        else
          v1435 = 0;
        v1612 = (uint64_t *)(v1434 + 8 * v1431);
        v1613 = v1434 + 8 * v1435;
        *v1612 = v1425;
        v1429 = v1612 + 1;
        v1615 = *(char **)(a1 + 104);
        v1614 = *(char **)(a1 + 112);
        if (v1614 == v1615)
        {
          v1617 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1616 = *((_QWORD *)v1614 - 1);
            v1614 -= 8;
            *--v1612 = v1616;
          }
          while (v1614 != v1615);
          v1617 = (_QWORD *)a1;
          v1614 = *(char **)(a1 + 104);
        }
        v1617[13] = v1612;
        v1617[14] = v1429;
        v1617[15] = v1613;
        if (v1614)
          operator delete(v1614);
      }
      else
      {
        *v1428 = v1425;
        v1429 = v1428 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1429;
      if (v2559)
      {
        v2560 = v2559;
        operator delete(v2559);
      }
      v1654 = operator new();
      v1655 = *(_DWORD *)(a1 + 4);
      v2558 = 0;
      v2556 = 0;
      v2557 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2556, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1654, v1655, v1655, (_DWORD **)&v2556, 0, a2, 1, 0, 0);
      v1657 = *(uint64_t **)(a1 + 112);
      v1656 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1657 >= v1656)
      {
        v1659 = *(_QWORD *)(a1 + 104);
        v1660 = ((uint64_t)v1657 - v1659) >> 3;
        if ((unint64_t)(v1660 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1661 = v1656 - v1659;
        v1662 = v1661 >> 2;
        if (v1661 >> 2 <= (unint64_t)(v1660 + 1))
          v1662 = v1660 + 1;
        if ((unint64_t)v1661 >= 0x7FFFFFFFFFFFFFF8)
          v1663 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1663 = v1662;
        if (v1663)
          v1663 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1663);
        else
          v1664 = 0;
        v1792 = (uint64_t *)(v1663 + 8 * v1660);
        v1793 = v1663 + 8 * v1664;
        *v1792 = v1654;
        v1658 = v1792 + 1;
        v1795 = *(char **)(a1 + 104);
        v1794 = *(char **)(a1 + 112);
        if (v1794 == v1795)
        {
          v1797 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1796 = *((_QWORD *)v1794 - 1);
            v1794 -= 8;
            *--v1792 = v1796;
          }
          while (v1794 != v1795);
          v1797 = (_QWORD *)a1;
          v1794 = *(char **)(a1 + 104);
        }
        v1797[13] = v1792;
        v1797[14] = v1658;
        v1797[15] = v1793;
        if (v1794)
          operator delete(v1794);
      }
      else
      {
        *v1657 = v1654;
        v1658 = v1657 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1658;
      if (v2556)
      {
        v2557 = v2556;
        operator delete(v2556);
      }
      v1816 = operator new();
      v1817 = *(_DWORD *)(a1 + 4);
      v2555 = 0;
      v2553 = 0;
      v2554 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2553, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1816, v1817, v1817, (_DWORD **)&v2553, 0, a2, 1, 0, 0);
      v1819 = *(uint64_t **)(a1 + 112);
      v1818 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1819 >= v1818)
      {
        v1821 = *(_QWORD *)(a1 + 104);
        v1822 = ((uint64_t)v1819 - v1821) >> 3;
        if ((unint64_t)(v1822 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1823 = v1818 - v1821;
        v1824 = v1823 >> 2;
        if (v1823 >> 2 <= (unint64_t)(v1822 + 1))
          v1824 = v1822 + 1;
        if ((unint64_t)v1823 >= 0x7FFFFFFFFFFFFFF8)
          v1825 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1825 = v1824;
        if (v1825)
          v1825 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1825);
        else
          v1826 = 0;
        v1839 = (uint64_t *)(v1825 + 8 * v1822);
        v1840 = v1825 + 8 * v1826;
        *v1839 = v1816;
        v1820 = v1839 + 1;
        v1842 = *(char **)(a1 + 104);
        v1841 = *(char **)(a1 + 112);
        if (v1841 == v1842)
        {
          v1844 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1843 = *((_QWORD *)v1841 - 1);
            v1841 -= 8;
            *--v1839 = v1843;
          }
          while (v1841 != v1842);
          v1844 = (_QWORD *)a1;
          v1841 = *(char **)(a1 + 104);
        }
        v1844[13] = v1839;
        v1844[14] = v1820;
        v1844[15] = v1840;
        if (v1841)
          operator delete(v1841);
      }
      else
      {
        *v1819 = v1816;
        v1820 = v1819 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1820;
      v1324 = v2553;
      if (!v2553)
        goto LABEL_2421;
      v2554 = v2553;
      goto LABEL_2420;
    case 24:
      v144 = operator new();
      FullLayer<signed char>::FullLayer(v144, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v146 = *(uint64_t **)(a1 + 112);
      v145 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v146 >= v145)
      {
        v487 = *(_QWORD *)(a1 + 104);
        v488 = ((uint64_t)v146 - v487) >> 3;
        if ((unint64_t)(v488 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v489 = v145 - v487;
        v490 = v489 >> 2;
        if (v489 >> 2 <= (unint64_t)(v488 + 1))
          v490 = v488 + 1;
        if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFF8)
          v491 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v491 = v490;
        if (v491)
          v491 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v491);
        else
          v492 = 0;
        v795 = (uint64_t *)(v491 + 8 * v488);
        v796 = v491 + 8 * v492;
        *v795 = v144;
        v147 = v795 + 1;
        v798 = *(char **)(a1 + 104);
        v797 = *(char **)(a1 + 112);
        if (v797 == v798)
        {
          v800 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v799 = *((_QWORD *)v797 - 1);
            v797 -= 8;
            *--v795 = v799;
          }
          while (v797 != v798);
          v800 = (_QWORD *)a1;
          v797 = *(char **)(a1 + 104);
        }
        v800[13] = v795;
        v800[14] = v147;
        v800[15] = v796;
        if (v797)
          operator delete(v797);
      }
      else
      {
        *v146 = v144;
        v147 = v146 + 1;
      }
      *(_QWORD *)(a1 + 112) = v147;
      v884 = operator new();
      v885 = *(_DWORD *)(a1 + 4);
      v2552 = 0;
      v2550 = 0;
      v2551 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2550, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v884, v885, v885, (_DWORD **)&v2550, 0, a2, 1, 0, 0);
      v887 = *(uint64_t **)(a1 + 112);
      v886 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v887 >= v886)
      {
        v889 = *(_QWORD *)(a1 + 104);
        v890 = ((uint64_t)v887 - v889) >> 3;
        if ((unint64_t)(v890 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v891 = v886 - v889;
        v892 = v891 >> 2;
        if (v891 >> 2 <= (unint64_t)(v890 + 1))
          v892 = v890 + 1;
        if ((unint64_t)v891 >= 0x7FFFFFFFFFFFFFF8)
          v893 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v893 = v892;
        if (v893)
          v893 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v893);
        else
          v894 = 0;
        v1212 = (uint64_t *)(v893 + 8 * v890);
        v1213 = v893 + 8 * v894;
        *v1212 = v884;
        v888 = v1212 + 1;
        v1215 = *(char **)(a1 + 104);
        v1214 = *(char **)(a1 + 112);
        if (v1214 == v1215)
        {
          v1217 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1216 = *((_QWORD *)v1214 - 1);
            v1214 -= 8;
            *--v1212 = v1216;
          }
          while (v1214 != v1215);
          v1217 = (_QWORD *)a1;
          v1214 = *(char **)(a1 + 104);
        }
        v1217[13] = v1212;
        v1217[14] = v888;
        v1217[15] = v1213;
        if (v1214)
          operator delete(v1214);
      }
      else
      {
        *v887 = v884;
        v888 = v887 + 1;
      }
      *(_QWORD *)(a1 + 112) = v888;
      if (v2550)
      {
        v2551 = v2550;
        operator delete(v2550);
      }
      v1325 = operator new();
      v1326 = *(_DWORD *)(a1 + 4);
      v2549 = 0;
      v2547 = 0;
      v2548 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2547, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1325, v1326, v1326, (_DWORD **)&v2547, 0, a2, 1, 0, 0);
      v1328 = *(uint64_t **)(a1 + 112);
      v1327 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1328 >= v1327)
      {
        v1330 = *(_QWORD *)(a1 + 104);
        v1331 = ((uint64_t)v1328 - v1330) >> 3;
        if ((unint64_t)(v1331 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1332 = v1327 - v1330;
        v1333 = v1332 >> 2;
        if (v1332 >> 2 <= (unint64_t)(v1331 + 1))
          v1333 = v1331 + 1;
        if ((unint64_t)v1332 >= 0x7FFFFFFFFFFFFFF8)
          v1334 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1334 = v1333;
        if (v1334)
          v1334 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1334);
        else
          v1335 = 0;
        v1541 = (uint64_t *)(v1334 + 8 * v1331);
        v1542 = v1334 + 8 * v1335;
        *v1541 = v1325;
        v1329 = v1541 + 1;
        v1544 = *(char **)(a1 + 104);
        v1543 = *(char **)(a1 + 112);
        if (v1543 == v1544)
        {
          v1546 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1545 = *((_QWORD *)v1543 - 1);
            v1543 -= 8;
            *--v1541 = v1545;
          }
          while (v1543 != v1544);
          v1546 = (_QWORD *)a1;
          v1543 = *(char **)(a1 + 104);
        }
        v1546[13] = v1541;
        v1546[14] = v1329;
        v1546[15] = v1542;
        if (v1543)
          operator delete(v1543);
      }
      else
      {
        *v1328 = v1325;
        v1329 = v1328 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1329;
      v1324 = v2547;
      if (!v2547)
        goto LABEL_2421;
      v2548 = v2547;
      goto LABEL_2420;
    case 25:
      v325 = operator new();
      FullLayer<signed char>::FullLayer(v325, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 4, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v327 = *(uint64_t **)(a1 + 112);
      v326 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v327 >= v326)
      {
        v529 = *(_QWORD *)(a1 + 104);
        v530 = ((uint64_t)v327 - v529) >> 3;
        if ((unint64_t)(v530 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v531 = v326 - v529;
        v532 = v531 >> 2;
        if (v531 >> 2 <= (unint64_t)(v530 + 1))
          v532 = v530 + 1;
        if ((unint64_t)v531 >= 0x7FFFFFFFFFFFFFF8)
          v533 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v533 = v532;
        if (v533)
          v533 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v533);
        else
          v534 = 0;
        v837 = (uint64_t *)(v533 + 8 * v530);
        v838 = v533 + 8 * v534;
        *v837 = v325;
        v328 = v837 + 1;
        v840 = *(char **)(a1 + 104);
        v839 = *(char **)(a1 + 112);
        if (v839 == v840)
        {
          v842 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v841 = *((_QWORD *)v839 - 1);
            v839 -= 8;
            *--v837 = v841;
          }
          while (v839 != v840);
          v842 = (_QWORD *)a1;
          v839 = *(char **)(a1 + 104);
        }
        v842[13] = v837;
        v842[14] = v328;
        v842[15] = v838;
        if (v839)
          operator delete(v839);
      }
      else
      {
        *v327 = v325;
        v328 = v327 + 1;
      }
      *(_QWORD *)(a1 + 112) = v328;
      v961 = operator new();
      v962 = *(_DWORD *)(a1 + 4);
      v2546 = 0;
      v2544 = 0;
      v2545 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2544, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v961, v962, v962, (_DWORD **)&v2544, 0, a2, 1, 0, 0);
      v964 = *(uint64_t **)(a1 + 112);
      v963 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v964 >= v963)
      {
        v966 = *(_QWORD *)(a1 + 104);
        v967 = ((uint64_t)v964 - v966) >> 3;
        if ((unint64_t)(v967 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v968 = v963 - v966;
        v969 = v968 >> 2;
        if (v968 >> 2 <= (unint64_t)(v967 + 1))
          v969 = v967 + 1;
        if ((unint64_t)v968 >= 0x7FFFFFFFFFFFFFF8)
          v970 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v970 = v969;
        if (v970)
          v970 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v970);
        else
          v971 = 0;
        v1236 = (uint64_t *)(v970 + 8 * v967);
        v1237 = v970 + 8 * v971;
        *v1236 = v961;
        v965 = v1236 + 1;
        v1239 = *(char **)(a1 + 104);
        v1238 = *(char **)(a1 + 112);
        if (v1238 == v1239)
        {
          v1241 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1240 = *((_QWORD *)v1238 - 1);
            v1238 -= 8;
            *--v1236 = v1240;
          }
          while (v1238 != v1239);
          v1241 = (_QWORD *)a1;
          v1238 = *(char **)(a1 + 104);
        }
        v1241[13] = v1236;
        v1241[14] = v965;
        v1241[15] = v1237;
        if (v1238)
          operator delete(v1238);
      }
      else
      {
        *v964 = v961;
        v965 = v964 + 1;
      }
      *(_QWORD *)(a1 + 112) = v965;
      if (v2544)
      {
        v2545 = v2544;
        operator delete(v2544);
      }
      v1347 = operator new();
      v1348 = *(_DWORD *)(a1 + 4);
      v2543 = 0;
      v2541 = 0;
      v2542 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2541, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1347, v1348, v1348, (_DWORD **)&v2541, 0, a2, 1, 0, 0);
      v1350 = *(uint64_t **)(a1 + 112);
      v1349 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1350 >= v1349)
      {
        v1352 = *(_QWORD *)(a1 + 104);
        v1353 = ((uint64_t)v1350 - v1352) >> 3;
        if ((unint64_t)(v1353 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1354 = v1349 - v1352;
        v1355 = v1354 >> 2;
        if (v1354 >> 2 <= (unint64_t)(v1353 + 1))
          v1355 = v1353 + 1;
        if ((unint64_t)v1354 >= 0x7FFFFFFFFFFFFFF8)
          v1356 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1356 = v1355;
        if (v1356)
          v1356 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1356);
        else
          v1357 = 0;
        v1553 = (uint64_t *)(v1356 + 8 * v1353);
        v1554 = v1356 + 8 * v1357;
        *v1553 = v1347;
        v1351 = v1553 + 1;
        v1556 = *(char **)(a1 + 104);
        v1555 = *(char **)(a1 + 112);
        if (v1555 == v1556)
        {
          v1558 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1557 = *((_QWORD *)v1555 - 1);
            v1555 -= 8;
            *--v1553 = v1557;
          }
          while (v1555 != v1556);
          v1558 = (_QWORD *)a1;
          v1555 = *(char **)(a1 + 104);
        }
        v1558[13] = v1553;
        v1558[14] = v1351;
        v1558[15] = v1554;
        if (v1555)
          operator delete(v1555);
      }
      else
      {
        *v1350 = v1347;
        v1351 = v1350 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1351;
      if (v2541)
      {
        v2542 = v2541;
        operator delete(v2541);
      }
      v1601 = operator new();
      v1602 = *(_DWORD *)(a1 + 4);
      v2540 = 0;
      v2538 = 0;
      v2539 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2538, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1601, v1602, v1602, (_DWORD **)&v2538, 0, a2, 1, 0, 0);
      v1604 = *(uint64_t **)(a1 + 112);
      v1603 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1604 >= v1603)
      {
        v1606 = *(_QWORD *)(a1 + 104);
        v1607 = ((uint64_t)v1604 - v1606) >> 3;
        if ((unint64_t)(v1607 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1608 = v1603 - v1606;
        v1609 = v1608 >> 2;
        if (v1608 >> 2 <= (unint64_t)(v1607 + 1))
          v1609 = v1607 + 1;
        if ((unint64_t)v1608 >= 0x7FFFFFFFFFFFFFF8)
          v1610 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1610 = v1609;
        if (v1610)
          v1610 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1610);
        else
          v1611 = 0;
        v1764 = (uint64_t *)(v1610 + 8 * v1607);
        v1765 = v1610 + 8 * v1611;
        *v1764 = v1601;
        v1605 = v1764 + 1;
        v1767 = *(char **)(a1 + 104);
        v1766 = *(char **)(a1 + 112);
        if (v1766 == v1767)
        {
          v1769 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1768 = *((_QWORD *)v1766 - 1);
            v1766 -= 8;
            *--v1764 = v1768;
          }
          while (v1766 != v1767);
          v1769 = (_QWORD *)a1;
          v1766 = *(char **)(a1 + 104);
        }
        v1769[13] = v1764;
        v1769[14] = v1605;
        v1769[15] = v1765;
        if (v1766)
          operator delete(v1766);
      }
      else
      {
        *v1604 = v1601;
        v1605 = v1604 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1605;
      v1324 = v2538;
      if (!v2538)
        goto LABEL_2421;
      v2539 = v2538;
      goto LABEL_2420;
    case 26:
      v29 = operator new();
      FullLayer<signed char>::FullLayer(v29, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v31 = *(uint64_t **)(a1 + 112);
      v30 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v31 >= v30)
      {
        v458 = *(_QWORD *)(a1 + 104);
        v459 = ((uint64_t)v31 - v458) >> 3;
        if ((unint64_t)(v459 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v460 = v30 - v458;
        v461 = v460 >> 2;
        if (v460 >> 2 <= (unint64_t)(v459 + 1))
          v461 = v459 + 1;
        if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8)
          v462 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v462 = v461;
        if (v462)
          v462 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v462);
        else
          v463 = 0;
        v748 = (uint64_t *)(v462 + 8 * v459);
        v749 = v462 + 8 * v463;
        *v748 = v29;
        v32 = v748 + 1;
        v751 = *(char **)(a1 + 104);
        v750 = *(char **)(a1 + 112);
        if (v750 == v751)
        {
          v753 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v752 = *((_QWORD *)v750 - 1);
            v750 -= 8;
            *--v748 = v752;
          }
          while (v750 != v751);
          v753 = (_QWORD *)a1;
          v750 = *(char **)(a1 + 104);
        }
        v753[13] = v748;
        v753[14] = v32;
        v753[15] = v749;
        if (v750)
          operator delete(v750);
      }
      else
      {
        *v31 = v29;
        v32 = v31 + 1;
      }
      *(_QWORD *)(a1 + 112) = v32;
      v843 = operator new();
      v844 = *(_DWORD *)(a1 + 4);
      v2537 = 0;
      v2535 = 0;
      v2536 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2535, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v843, v844, v844, (_DWORD **)&v2535, 0, a2, 1, 0, 0);
      v846 = *(uint64_t **)(a1 + 112);
      v845 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v846 >= v845)
      {
        v848 = *(_QWORD *)(a1 + 104);
        v849 = ((uint64_t)v846 - v848) >> 3;
        if ((unint64_t)(v849 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v850 = v845 - v848;
        v851 = v850 >> 2;
        if (v850 >> 2 <= (unint64_t)(v849 + 1))
          v851 = v849 + 1;
        if ((unint64_t)v850 >= 0x7FFFFFFFFFFFFFF8)
          v852 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v852 = v851;
        if (v852)
          v852 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v852);
        else
          v853 = 0;
        v1185 = (uint64_t *)(v852 + 8 * v849);
        v1186 = v852 + 8 * v853;
        *v1185 = v843;
        v847 = v1185 + 1;
        v1188 = *(char **)(a1 + 104);
        v1187 = *(char **)(a1 + 112);
        if (v1187 == v1188)
        {
          v1190 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1189 = *((_QWORD *)v1187 - 1);
            v1187 -= 8;
            *--v1185 = v1189;
          }
          while (v1187 != v1188);
          v1190 = (_QWORD *)a1;
          v1187 = *(char **)(a1 + 104);
        }
        v1190[13] = v1185;
        v1190[14] = v847;
        v1190[15] = v1186;
        if (v1187)
          operator delete(v1187);
      }
      else
      {
        *v846 = v843;
        v847 = v846 + 1;
      }
      *(_QWORD *)(a1 + 112) = v847;
      if (v2535)
      {
        v2536 = v2535;
        operator delete(v2535);
      }
      v1281 = operator new();
      v1282 = *(_DWORD *)(a1 + 4);
      v2534 = 0;
      v2532 = 0;
      v2533 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2532, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1281, v1282, v1282, (_DWORD **)&v2532, 0, a2, 1, 0, 0);
      v1284 = *(uint64_t **)(a1 + 112);
      v1283 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1284 >= v1283)
      {
        v1286 = *(_QWORD *)(a1 + 104);
        v1287 = ((uint64_t)v1284 - v1286) >> 3;
        if ((unint64_t)(v1287 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1288 = v1283 - v1286;
        v1289 = v1288 >> 2;
        if (v1288 >> 2 <= (unint64_t)(v1287 + 1))
          v1289 = v1287 + 1;
        if ((unint64_t)v1288 >= 0x7FFFFFFFFFFFFFF8)
          v1290 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1290 = v1289;
        if (v1290)
          v1290 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1290);
        else
          v1291 = 0;
        v1535 = (uint64_t *)(v1290 + 8 * v1287);
        v1536 = v1290 + 8 * v1291;
        *v1535 = v1281;
        v1285 = v1535 + 1;
        v1538 = *(char **)(a1 + 104);
        v1537 = *(char **)(a1 + 112);
        if (v1537 == v1538)
        {
          v1540 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1539 = *((_QWORD *)v1537 - 1);
            v1537 -= 8;
            *--v1535 = v1539;
          }
          while (v1537 != v1538);
          v1540 = (_QWORD *)a1;
          v1537 = *(char **)(a1 + 104);
        }
        v1540[13] = v1535;
        v1540[14] = v1285;
        v1540[15] = v1536;
        if (v1537)
          operator delete(v1537);
      }
      else
      {
        *v1284 = v1281;
        v1285 = v1284 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1285;
      if (v2532)
      {
        v2533 = v2532;
        operator delete(v2532);
      }
      v1579 = operator new();
      v1580 = *(_DWORD *)(a1 + 4);
      v2531 = 0;
      v2529 = 0;
      v2530 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2529, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1579, v1580, v1580, (_DWORD **)&v2529, 0, a2, 1, 0, 0);
      v1582 = *(uint64_t **)(a1 + 112);
      v1581 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1582 >= v1581)
      {
        v1584 = *(_QWORD *)(a1 + 104);
        v1585 = ((uint64_t)v1582 - v1584) >> 3;
        if ((unint64_t)(v1585 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1586 = v1581 - v1584;
        v1587 = v1586 >> 2;
        if (v1586 >> 2 <= (unint64_t)(v1585 + 1))
          v1587 = v1585 + 1;
        if ((unint64_t)v1586 >= 0x7FFFFFFFFFFFFFF8)
          v1588 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1588 = v1587;
        if (v1588)
          v1588 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1588);
        else
          v1589 = 0;
        v1752 = (uint64_t *)(v1588 + 8 * v1585);
        v1753 = v1588 + 8 * v1589;
        *v1752 = v1579;
        v1583 = v1752 + 1;
        v1755 = *(char **)(a1 + 104);
        v1754 = *(char **)(a1 + 112);
        if (v1754 == v1755)
        {
          v1757 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1756 = *((_QWORD *)v1754 - 1);
            v1754 -= 8;
            *--v1752 = v1756;
          }
          while (v1754 != v1755);
          v1757 = (_QWORD *)a1;
          v1754 = *(char **)(a1 + 104);
        }
        v1757[13] = v1752;
        v1757[14] = v1583;
        v1757[15] = v1753;
        if (v1754)
          operator delete(v1754);
      }
      else
      {
        *v1582 = v1579;
        v1583 = v1582 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1583;
      if (v2529)
      {
        v2530 = v2529;
        operator delete(v2529);
      }
      v1770 = operator new();
      v1771 = *(_DWORD *)(a1 + 4);
      v2528 = 0;
      v2526 = 0;
      v2527 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2526, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1770, v1771, v1771, (_DWORD **)&v2526, 0, a2, 1, 0, 0);
      v1773 = *(uint64_t **)(a1 + 112);
      v1772 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1773 >= v1772)
      {
        v1775 = *(_QWORD *)(a1 + 104);
        v1776 = ((uint64_t)v1773 - v1775) >> 3;
        if ((unint64_t)(v1776 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1777 = v1772 - v1775;
        v1778 = v1777 >> 2;
        if (v1777 >> 2 <= (unint64_t)(v1776 + 1))
          v1778 = v1776 + 1;
        if ((unint64_t)v1777 >= 0x7FFFFFFFFFFFFFF8)
          v1779 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1779 = v1778;
        if (v1779)
          v1779 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1779);
        else
          v1780 = 0;
        v1827 = (uint64_t *)(v1779 + 8 * v1776);
        v1828 = v1779 + 8 * v1780;
        *v1827 = v1770;
        v1774 = v1827 + 1;
        v1830 = *(char **)(a1 + 104);
        v1829 = *(char **)(a1 + 112);
        if (v1829 == v1830)
        {
          v1832 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1831 = *((_QWORD *)v1829 - 1);
            v1829 -= 8;
            *--v1827 = v1831;
          }
          while (v1829 != v1830);
          v1832 = (_QWORD *)a1;
          v1829 = *(char **)(a1 + 104);
        }
        v1832[13] = v1827;
        v1832[14] = v1774;
        v1832[15] = v1828;
        if (v1829)
          operator delete(v1829);
      }
      else
      {
        *v1773 = v1770;
        v1774 = v1773 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1774;
      v1324 = v2526;
      if (!v2526)
        goto LABEL_2421;
      v2527 = v2526;
      goto LABEL_2420;
    case 27:
      v318 = operator new();
      v319 = *(_DWORD *)a1;
      v320 = *(_DWORD *)(a1 + 4);
      v2525 = 0;
      v2523 = 0;
      v2524 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2523, v2362, (uint64_t)v2361);
      if (v320 >= 0)
        v321 = v320;
      else
        v321 = v320 + 1;
      LSTM<signed char>::LSTM(v318, v319, v321 >> 1, (_DWORD **)&v2523, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v323 = *(uint64_t **)(v2366 + 112);
      v322 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v323 >= v322)
      {
        v590 = *(_QWORD *)(v2366 + 104);
        v591 = ((uint64_t)v323 - v590) >> 3;
        if ((unint64_t)(v591 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v592 = v322 - v590;
        v593 = v592 >> 2;
        if (v592 >> 2 <= (unint64_t)(v591 + 1))
          v593 = v591 + 1;
        if ((unint64_t)v592 >= 0x7FFFFFFFFFFFFFF8)
          v594 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v594 = v593;
        if (v594)
          v594 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v594);
        else
          v595 = 0;
        v1027 = (uint64_t *)(v594 + 8 * v591);
        v1028 = v594 + 8 * v595;
        *v1027 = v318;
        v324 = v1027 + 1;
        v1030 = *(char **)(v2366 + 104);
        v1029 = *(char **)(v2366 + 112);
        if (v1029 == v1030)
        {
          v1032 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1031 = *((_QWORD *)v1029 - 1);
            v1029 -= 8;
            *--v1027 = v1031;
          }
          while (v1029 != v1030);
          v1032 = (_QWORD *)v2366;
          v1029 = *(char **)(v2366 + 104);
        }
        v1032[13] = v1027;
        v1032[14] = v324;
        v1032[15] = v1028;
        if (v1029)
          operator delete(v1029);
      }
      else
      {
        *v323 = v318;
        v324 = v323 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v324;
      if (v2523)
      {
        v2524 = v2523;
        operator delete(v2523);
      }
      v1131 = operator new();
      v1132 = *(_DWORD *)(v2366 + 4);
      v2522 = 0;
      v2520 = 0;
      v2521 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2520, v2362, (uint64_t)v2361);
      if (v1132 >= 0)
        v1133 = v1132;
      else
        v1133 = v1132 + 1;
      LSTM<signed char>::LSTM(v1131, v1133 >> 1, v1132, (_DWORD **)&v2520, 0, a2, 1, 0, 0);
      v1135 = *(uint64_t **)(v2366 + 112);
      v1134 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1135 >= v1134)
      {
        v1137 = *(_QWORD *)(v2366 + 104);
        v1138 = ((uint64_t)v1135 - v1137) >> 3;
        if ((unint64_t)(v1138 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1139 = v1134 - v1137;
        v1140 = v1139 >> 2;
        if (v1139 >> 2 <= (unint64_t)(v1138 + 1))
          v1140 = v1138 + 1;
        if ((unint64_t)v1139 >= 0x7FFFFFFFFFFFFFF8)
          v1141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1141 = v1140;
        if (v1141)
          v1141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1141);
        else
          v1142 = 0;
        v1399 = (uint64_t *)(v1141 + 8 * v1138);
        v1400 = v1141 + 8 * v1142;
        *v1399 = v1131;
        v1136 = v1399 + 1;
        v1402 = *(char **)(v2366 + 104);
        v1401 = *(char **)(v2366 + 112);
        if (v1401 == v1402)
        {
          v1404 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1403 = *((_QWORD *)v1401 - 1);
            v1401 -= 8;
            *--v1399 = v1403;
          }
          while (v1401 != v1402);
          v1404 = (_QWORD *)v2366;
          v1401 = *(char **)(v2366 + 104);
        }
        v1404[13] = v1399;
        v1404[14] = v1136;
        v1404[15] = v1400;
        if (v1401)
          operator delete(v1401);
      }
      else
      {
        *v1135 = v1131;
        v1136 = v1135 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1136;
      if (v2520)
      {
        v2521 = v2520;
        operator delete(v2520);
      }
      v1469 = operator new();
      v1470 = *(_DWORD *)(v2366 + 4);
      v2519 = 0;
      v2517 = 0;
      v2518 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2517, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1469, v1470, v1470, (_DWORD **)&v2517, 0, a2, 1, 0, 0);
      v1472 = *(uint64_t **)(v2366 + 112);
      v1471 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1472 >= v1471)
      {
        v1474 = *(_QWORD *)(v2366 + 104);
        v1475 = ((uint64_t)v1472 - v1474) >> 3;
        if ((unint64_t)(v1475 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1476 = v1471 - v1474;
        v1477 = v1476 >> 2;
        if (v1476 >> 2 <= (unint64_t)(v1475 + 1))
          v1477 = v1475 + 1;
        if ((unint64_t)v1476 >= 0x7FFFFFFFFFFFFFF8)
          v1478 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1478 = v1477;
        if (v1478)
          v1478 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1478);
        else
          v1479 = 0;
        v1642 = (uint64_t *)(v1478 + 8 * v1475);
        v1643 = v1478 + 8 * v1479;
        *v1642 = v1469;
        v1473 = v1642 + 1;
        v1645 = *(char **)(v2366 + 104);
        v1644 = *(char **)(v2366 + 112);
        if (v1644 == v1645)
        {
          v1647 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1646 = *((_QWORD *)v1644 - 1);
            v1644 -= 8;
            *--v1642 = v1646;
          }
          while (v1644 != v1645);
          v1647 = (_QWORD *)v2366;
          v1644 = *(char **)(v2366 + 104);
        }
        v1647[13] = v1642;
        v1647[14] = v1473;
        v1647[15] = v1643;
        if (v1644)
          operator delete(v1644);
      }
      else
      {
        *v1472 = v1469;
        v1473 = v1472 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1473;
      v1324 = v2517;
      if (!v2517)
        goto LABEL_2421;
      v2518 = v2517;
      goto LABEL_2420;
    case 28:
      v334 = operator new();
      v335 = *(_DWORD *)a1;
      v336 = *(_DWORD *)(a1 + 4);
      v2516 = 0;
      v2514 = 0;
      v2515 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2514, v2362, (uint64_t)v2361);
      if (v336 >= 0)
        v337 = v336;
      else
        v337 = v336 + 1;
      LSTM<signed char>::LSTM(v334, v335, v337 >> 1, (_DWORD **)&v2514, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v339 = *(uint64_t **)(v2366 + 112);
      v338 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v339 >= v338)
      {
        v603 = *(_QWORD *)(v2366 + 104);
        v604 = ((uint64_t)v339 - v603) >> 3;
        if ((unint64_t)(v604 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v605 = v338 - v603;
        v606 = v605 >> 2;
        if (v605 >> 2 <= (unint64_t)(v604 + 1))
          v606 = v604 + 1;
        if ((unint64_t)v605 >= 0x7FFFFFFFFFFFFFF8)
          v607 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v607 = v606;
        if (v607)
          v607 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v607);
        else
          v608 = 0;
        v1038 = (uint64_t *)(v607 + 8 * v604);
        v1039 = v607 + 8 * v608;
        *v1038 = v334;
        v340 = v1038 + 1;
        v1041 = *(char **)(v2366 + 104);
        v1040 = *(char **)(v2366 + 112);
        if (v1040 == v1041)
        {
          v1043 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1042 = *((_QWORD *)v1040 - 1);
            v1040 -= 8;
            *--v1038 = v1042;
          }
          while (v1040 != v1041);
          v1043 = (_QWORD *)v2366;
          v1040 = *(char **)(v2366 + 104);
        }
        v1043[13] = v1038;
        v1043[14] = v340;
        v1043[15] = v1039;
        if (v1040)
          operator delete(v1040);
      }
      else
      {
        *v339 = v334;
        v340 = v339 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v340;
      if (v2514)
      {
        v2515 = v2514;
        operator delete(v2514);
      }
      v1143 = operator new();
      v1144 = *(_DWORD *)(v2366 + 4);
      v2513 = 0;
      v2511 = 0;
      v2512 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2511, v2362, (uint64_t)v2361);
      if (v1144 >= 0)
        v1145 = v1144;
      else
        v1145 = v1144 + 1;
      LSTM<signed char>::LSTM(v1143, v1145 >> 1, v1144, (_DWORD **)&v2511, 0, a2, 1, 0, 0);
      v1147 = *(uint64_t **)(v2366 + 112);
      v1146 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1147 >= v1146)
      {
        v1149 = *(_QWORD *)(v2366 + 104);
        v1150 = ((uint64_t)v1147 - v1149) >> 3;
        if ((unint64_t)(v1150 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1151 = v1146 - v1149;
        v1152 = v1151 >> 2;
        if (v1151 >> 2 <= (unint64_t)(v1150 + 1))
          v1152 = v1150 + 1;
        if ((unint64_t)v1151 >= 0x7FFFFFFFFFFFFFF8)
          v1153 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1153 = v1152;
        if (v1153)
          v1153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1153);
        else
          v1154 = 0;
        v1405 = (uint64_t *)(v1153 + 8 * v1150);
        v1406 = v1153 + 8 * v1154;
        *v1405 = v1143;
        v1148 = v1405 + 1;
        v1408 = *(char **)(v2366 + 104);
        v1407 = *(char **)(v2366 + 112);
        if (v1407 == v1408)
        {
          v1410 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1409 = *((_QWORD *)v1407 - 1);
            v1407 -= 8;
            *--v1405 = v1409;
          }
          while (v1407 != v1408);
          v1410 = (_QWORD *)v2366;
          v1407 = *(char **)(v2366 + 104);
        }
        v1410[13] = v1405;
        v1410[14] = v1148;
        v1410[15] = v1406;
        if (v1407)
          operator delete(v1407);
      }
      else
      {
        *v1147 = v1143;
        v1148 = v1147 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1148;
      if (v2511)
      {
        v2512 = v2511;
        operator delete(v2511);
      }
      v1480 = operator new();
      v1481 = *(_DWORD *)(v2366 + 4);
      v2510 = 0;
      v2508 = 0;
      v2509 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2508, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1480, v1481, v1481, (_DWORD **)&v2508, 0, a2, 1, 0, 0);
      v1483 = *(uint64_t **)(v2366 + 112);
      v1482 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1483 >= v1482)
      {
        v1485 = *(_QWORD *)(v2366 + 104);
        v1486 = ((uint64_t)v1483 - v1485) >> 3;
        if ((unint64_t)(v1486 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1487 = v1482 - v1485;
        v1488 = v1487 >> 2;
        if (v1487 >> 2 <= (unint64_t)(v1486 + 1))
          v1488 = v1486 + 1;
        if ((unint64_t)v1487 >= 0x7FFFFFFFFFFFFFF8)
          v1489 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1489 = v1488;
        if (v1489)
          v1489 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1489);
        else
          v1490 = 0;
        v1648 = (uint64_t *)(v1489 + 8 * v1486);
        v1649 = v1489 + 8 * v1490;
        *v1648 = v1480;
        v1484 = v1648 + 1;
        v1651 = *(char **)(v2366 + 104);
        v1650 = *(char **)(v2366 + 112);
        if (v1650 == v1651)
        {
          v1653 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1652 = *((_QWORD *)v1650 - 1);
            v1650 -= 8;
            *--v1648 = v1652;
          }
          while (v1650 != v1651);
          v1653 = (_QWORD *)v2366;
          v1650 = *(char **)(v2366 + 104);
        }
        v1653[13] = v1648;
        v1653[14] = v1484;
        v1653[15] = v1649;
        if (v1650)
          operator delete(v1650);
      }
      else
      {
        *v1483 = v1480;
        v1484 = v1483 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1484;
      if (v2508)
      {
        v2509 = v2508;
        operator delete(v2508);
      }
      v1687 = operator new();
      v1688 = *(_DWORD *)(v2366 + 4);
      v2507 = 0;
      v2505 = 0;
      v2506 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2505, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1687, v1688, v1688, (_DWORD **)&v2505, 0, a2, 1, 0, 0);
      v1690 = *(uint64_t **)(v2366 + 112);
      v1689 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1690 >= v1689)
      {
        v1692 = *(_QWORD *)(v2366 + 104);
        v1693 = ((uint64_t)v1690 - v1692) >> 3;
        if ((unint64_t)(v1693 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1694 = v1689 - v1692;
        v1695 = v1694 >> 2;
        if (v1694 >> 2 <= (unint64_t)(v1693 + 1))
          v1695 = v1693 + 1;
        if ((unint64_t)v1694 >= 0x7FFFFFFFFFFFFFF8)
          v1696 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1696 = v1695;
        if (v1696)
          v1696 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1696);
        else
          v1697 = 0;
        v1810 = (uint64_t *)(v1696 + 8 * v1693);
        v1811 = v1696 + 8 * v1697;
        *v1810 = v1687;
        v1691 = v1810 + 1;
        v1813 = *(char **)(v2366 + 104);
        v1812 = *(char **)(v2366 + 112);
        if (v1812 == v1813)
        {
          v1815 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1814 = *((_QWORD *)v1812 - 1);
            v1812 -= 8;
            *--v1810 = v1814;
          }
          while (v1812 != v1813);
          v1815 = (_QWORD *)v2366;
          v1812 = *(char **)(v2366 + 104);
        }
        v1815[13] = v1810;
        v1815[14] = v1691;
        v1815[15] = v1811;
        if (v1812)
          operator delete(v1812);
      }
      else
      {
        *v1690 = v1687;
        v1691 = v1690 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1691;
      v1324 = v2505;
      if (!v2505)
        goto LABEL_2421;
      v2506 = v2505;
      goto LABEL_2420;
    case 29:
      v259 = operator new();
      v260 = *(_DWORD *)a1;
      v261 = *(_DWORD *)(a1 + 4);
      v2504 = 0;
      v2502 = 0;
      v2503 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2502, v2360, v12);
      if (v261 >= 0)
        v262 = v261;
      else
        v262 = v261 + 1;
      GRU<signed char>::GRU(v259, v260, v262 >> 1, (_DWORD **)&v2502, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v264 = *(uint64_t **)(v2366 + 112);
      v263 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v264 >= v263)
      {
        v571 = *(_QWORD *)(v2366 + 104);
        v572 = ((uint64_t)v264 - v571) >> 3;
        if ((unint64_t)(v572 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v573 = v263 - v571;
        v574 = v573 >> 2;
        if (v573 >> 2 <= (unint64_t)(v572 + 1))
          v574 = v572 + 1;
        if ((unint64_t)v573 >= 0x7FFFFFFFFFFFFFF8)
          v575 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v575 = v574;
        if (v575)
          v575 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v575);
        else
          v576 = 0;
        v1008 = (uint64_t *)(v575 + 8 * v572);
        v1009 = v575 + 8 * v576;
        *v1008 = v259;
        v265 = v1008 + 1;
        v1011 = *(char **)(v2366 + 104);
        v1010 = *(char **)(v2366 + 112);
        if (v1010 == v1011)
        {
          v1013 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1012 = *((_QWORD *)v1010 - 1);
            v1010 -= 8;
            *--v1008 = v1012;
          }
          while (v1010 != v1011);
          v1013 = (_QWORD *)v2366;
          v1010 = *(char **)(v2366 + 104);
        }
        v1013[13] = v1008;
        v1013[14] = v265;
        v1013[15] = v1009;
        if (v1010)
          operator delete(v1010);
      }
      else
      {
        *v264 = v259;
        v265 = v264 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v265;
      if (v2502)
      {
        v2503 = v2502;
        operator delete(v2502);
      }
      v1108 = operator new();
      v1109 = *(_DWORD *)(v2366 + 4);
      v2501 = 0;
      v2499 = 0;
      v2500 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2499, v2360, v12);
      if (v1109 >= 0)
        v1110 = v1109;
      else
        v1110 = v1109 + 1;
      GRU<signed char>::GRU(v1108, v1110 >> 1, v1109, (_DWORD **)&v2499, 0, a2, 1, 0);
      v1112 = *(uint64_t **)(v2366 + 112);
      v1111 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1112 >= v1111)
      {
        v1114 = *(_QWORD *)(v2366 + 104);
        v1115 = ((uint64_t)v1112 - v1114) >> 3;
        if ((unint64_t)(v1115 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1116 = v1111 - v1114;
        v1117 = v1116 >> 2;
        if (v1116 >> 2 <= (unint64_t)(v1115 + 1))
          v1117 = v1115 + 1;
        if ((unint64_t)v1116 >= 0x7FFFFFFFFFFFFFF8)
          v1118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1118 = v1117;
        if (v1118)
          v1118 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1118);
        else
          v1119 = 0;
        v1387 = (uint64_t *)(v1118 + 8 * v1115);
        v1388 = v1118 + 8 * v1119;
        *v1387 = v1108;
        v1113 = v1387 + 1;
        v1390 = *(char **)(v2366 + 104);
        v1389 = *(char **)(v2366 + 112);
        if (v1389 == v1390)
        {
          v1392 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1391 = *((_QWORD *)v1389 - 1);
            v1389 -= 8;
            *--v1387 = v1391;
          }
          while (v1389 != v1390);
          v1392 = (_QWORD *)v2366;
          v1389 = *(char **)(v2366 + 104);
        }
        v1392[13] = v1387;
        v1392[14] = v1113;
        v1392[15] = v1388;
        if (v1389)
          operator delete(v1389);
      }
      else
      {
        *v1112 = v1108;
        v1113 = v1112 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1113;
      if (v2499)
      {
        v2500 = v2499;
        operator delete(v2499);
      }
      v1447 = operator new();
      v1448 = *(_DWORD *)(v2366 + 4);
      v2498 = 0;
      v2496 = 0;
      v2497 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2496, v2360, v12);
      GRU<signed char>::GRU(v1447, v1448, v1448, (_DWORD **)&v2496, 0, a2, 1, 0);
      v1450 = *(uint64_t **)(v2366 + 112);
      v1449 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1450 >= v1449)
      {
        v1452 = *(_QWORD *)(v2366 + 104);
        v1453 = ((uint64_t)v1450 - v1452) >> 3;
        if ((unint64_t)(v1453 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1454 = v1449 - v1452;
        v1455 = v1454 >> 2;
        if (v1454 >> 2 <= (unint64_t)(v1453 + 1))
          v1455 = v1453 + 1;
        if ((unint64_t)v1454 >= 0x7FFFFFFFFFFFFFF8)
          v1456 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1456 = v1455;
        if (v1456)
          v1456 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1456);
        else
          v1457 = 0;
        v1630 = (uint64_t *)(v1456 + 8 * v1453);
        v1631 = v1456 + 8 * v1457;
        *v1630 = v1447;
        v1451 = v1630 + 1;
        v1633 = *(char **)(v2366 + 104);
        v1632 = *(char **)(v2366 + 112);
        if (v1632 == v1633)
        {
          v1635 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1634 = *((_QWORD *)v1632 - 1);
            v1632 -= 8;
            *--v1630 = v1634;
          }
          while (v1632 != v1633);
          v1635 = (_QWORD *)v2366;
          v1632 = *(char **)(v2366 + 104);
        }
        v1635[13] = v1630;
        v1635[14] = v1451;
        v1635[15] = v1631;
        if (v1632)
          operator delete(v1632);
      }
      else
      {
        *v1450 = v1447;
        v1451 = v1450 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1451;
      if (v2496)
      {
        v2497 = v2496;
        operator delete(v2496);
      }
      v1676 = operator new();
      v1677 = *(_DWORD *)(v2366 + 4);
      v2495 = 0;
      v2493 = 0;
      v2494 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2493, v2360, v12);
      GRU<signed char>::GRU(v1676, v1677, v1677, (_DWORD **)&v2493, 0, a2, 1, 0);
      v1679 = *(uint64_t **)(v2366 + 112);
      v1678 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1679 >= v1678)
      {
        v1681 = *(_QWORD *)(v2366 + 104);
        v1682 = ((uint64_t)v1679 - v1681) >> 3;
        if ((unint64_t)(v1682 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1683 = v1678 - v1681;
        v1684 = v1683 >> 2;
        if (v1683 >> 2 <= (unint64_t)(v1682 + 1))
          v1684 = v1682 + 1;
        if ((unint64_t)v1683 >= 0x7FFFFFFFFFFFFFF8)
          v1685 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1685 = v1684;
        if (v1685)
          v1685 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1685);
        else
          v1686 = 0;
        v1804 = (uint64_t *)(v1685 + 8 * v1682);
        v1805 = v1685 + 8 * v1686;
        *v1804 = v1676;
        v1680 = v1804 + 1;
        v1807 = *(char **)(v2366 + 104);
        v1806 = *(char **)(v2366 + 112);
        if (v1806 == v1807)
        {
          v1809 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1808 = *((_QWORD *)v1806 - 1);
            v1806 -= 8;
            *--v1804 = v1808;
          }
          while (v1806 != v1807);
          v1809 = (_QWORD *)v2366;
          v1806 = *(char **)(v2366 + 104);
        }
        v1809[13] = v1804;
        v1809[14] = v1680;
        v1809[15] = v1805;
        if (v1806)
          operator delete(v1806);
      }
      else
      {
        *v1679 = v1676;
        v1680 = v1679 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1680;
      v1324 = v2493;
      if (!v2493)
        goto LABEL_2421;
      v2494 = v2493;
      goto LABEL_2420;
    case 30:
      v329 = operator new();
      v330 = *(_DWORD *)a1;
      v331 = *(_DWORD *)(a1 + 4);
      memset(v2492, 0, sizeof(v2492));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2492, v2360, v12);
      GRU<signed char>::GRU(v329, v330, v331, v2492, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v333 = *(uint64_t **)(a1 + 112);
      v332 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v333 >= v332)
      {
        v597 = (void **)(v2366 + 104);
        v596 = *(_QWORD *)(v2366 + 104);
        v598 = ((uint64_t)v333 - v596) >> 3;
        if ((unint64_t)(v598 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v599 = v332 - v596;
        v600 = v599 >> 2;
        if (v599 >> 2 <= (unint64_t)(v598 + 1))
          v600 = v598 + 1;
        if ((unint64_t)v599 >= 0x7FFFFFFFFFFFFFF8)
          v601 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v601 = v600;
        if (v601)
          v601 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v601);
        else
          v602 = 0;
        v1033 = (uint64_t *)(v601 + 8 * v598);
        v1034 = v601 + 8 * v602;
        *v1033 = v329;
        v291 = v1033 + 1;
        v1035 = (char *)*v94;
        v1036 = (char *)*v597;
        if (*v94 != *v597)
        {
          do
          {
            v1037 = *((_QWORD *)v1035 - 1);
            v1035 -= 8;
            *--v1033 = v1037;
          }
          while (v1035 != v1036);
          v1035 = (char *)*v597;
        }
        *(_QWORD *)(v2366 + 104) = v1033;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1034;
        if (v1035)
          operator delete(v1035);
      }
      else
      {
        *v333 = v329;
        v291 = v333 + 1;
      }
      *v94 = v291;
      v1019 = v2492[0];
      if (!v2492[0])
        goto LABEL_1450;
      v1020 = (void **)v2492;
LABEL_1449:
      v1020[1] = v1019;
      operator delete(v1019);
      v291 = *v94;
LABEL_1450:
      (*(void (**)(_QWORD))(*(_QWORD *)*(v291 - 1) + 8))(*(v291 - 1));
      goto LABEL_2421;
    case 31:
      v296 = operator new();
      FullLayer<signed char>::FullLayer(v296, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v298 = *(uint64_t **)(a1 + 112);
      v297 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v298 >= v297)
      {
        v517 = *(_QWORD *)(a1 + 104);
        v518 = ((uint64_t)v298 - v517) >> 3;
        if ((unint64_t)(v518 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v519 = v297 - v517;
        v520 = v519 >> 2;
        if (v519 >> 2 <= (unint64_t)(v518 + 1))
          v520 = v518 + 1;
        if ((unint64_t)v519 >= 0x7FFFFFFFFFFFFFF8)
          v521 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v521 = v520;
        if (v521)
          v521 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v521);
        else
          v522 = 0;
        v825 = (uint64_t *)(v521 + 8 * v518);
        v826 = v521 + 8 * v522;
        *v825 = v296;
        v299 = v825 + 1;
        v828 = *(char **)(a1 + 104);
        v827 = *(char **)(a1 + 112);
        if (v827 == v828)
        {
          v830 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v829 = *((_QWORD *)v827 - 1);
            v827 -= 8;
            *--v825 = v829;
          }
          while (v827 != v828);
          v830 = (_QWORD *)a1;
          v827 = *(char **)(a1 + 104);
        }
        v830[13] = v825;
        v830[14] = v299;
        v830[15] = v826;
        if (v827)
          operator delete(v827);
      }
      else
      {
        *v298 = v296;
        v299 = v298 + 1;
      }
      *(_QWORD *)(a1 + 112) = v299;
      v939 = operator new();
      v940 = *(_DWORD *)(a1 + 4);
      v2491 = 0;
      v2489 = 0;
      v2490 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2489, v2360, v12);
      GRU<signed char>::GRU(v939, v940, v940, (_DWORD **)&v2489, 0, a2, 1, 0);
      v942 = *(uint64_t **)(a1 + 112);
      v941 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v942 >= v941)
      {
        v944 = *(_QWORD *)(a1 + 104);
        v945 = ((uint64_t)v942 - v944) >> 3;
        if ((unint64_t)(v945 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v946 = v941 - v944;
        v947 = v946 >> 2;
        if (v946 >> 2 <= (unint64_t)(v945 + 1))
          v947 = v945 + 1;
        if ((unint64_t)v946 >= 0x7FFFFFFFFFFFFFF8)
          v948 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v948 = v947;
        if (v948)
          v948 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v948);
        else
          v949 = 0;
        v1230 = (uint64_t *)(v948 + 8 * v945);
        v1231 = v948 + 8 * v949;
        *v1230 = v939;
        v943 = v1230 + 1;
        v1233 = *(char **)(a1 + 104);
        v1232 = *(char **)(a1 + 112);
        if (v1232 == v1233)
        {
          v1235 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1234 = *((_QWORD *)v1232 - 1);
            v1232 -= 8;
            *--v1230 = v1234;
          }
          while (v1232 != v1233);
          v1235 = (_QWORD *)a1;
          v1232 = *(char **)(a1 + 104);
        }
        v1235[13] = v1230;
        v1235[14] = v943;
        v1235[15] = v1231;
        if (v1232)
          operator delete(v1232);
      }
      else
      {
        *v942 = v939;
        v943 = v942 + 1;
      }
      *(_QWORD *)(a1 + 112) = v943;
      v1324 = v2489;
      if (!v2489)
        goto LABEL_2421;
      v2490 = v2489;
      goto LABEL_2420;
    case 32:
      v300 = operator new();
      v301 = *(_DWORD *)a1;
      v302 = *(_DWORD *)(a1 + 4);
      v2488 = 0;
      v2486 = 0;
      v2487 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2486, v2360, v12);
      GRU<signed char>::GRU(v300, v301, v302, (_DWORD **)&v2486, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v304 = v303;
      *v14 = v300;
      if (v2486)
      {
        v2487 = v2486;
        operator delete(v2486);
      }
      v305 = operator new();
      v306 = *(_DWORD *)(a1 + 4);
      v2485 = 0;
      v2483 = 0;
      v2484 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2483, v2360, v12);
      GRU<signed char>::GRU(v305, v306, v306, (_DWORD **)&v2483, 0, a2, 1, 0);
      if (v304 < 2)
      {
        v659 = 2;
        if ((unint64_t)((8 * v304) >> 2) > 2)
          v659 = (8 * v304) >> 2;
        if ((unint64_t)(8 * v304) >= 0x7FFFFFFFFFFFFFF8)
          v660 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v660 = v659;
        if (v660)
          v660 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v660);
        v661 = 0;
        *(_QWORD *)(v660 + 8) = v305;
        v307 = v660 + 16;
        do
        {
          *(_QWORD *)(v660 + v661 * 8) = v14[v661];
          --v661;
        }
        while (v661 != -1);
        v662 = (_QWORD *)v660;
        operator delete(v14);
        v14 = v662;
      }
      else
      {
        v14[1] = v305;
        v307 = (uint64_t)(v14 + 2);
      }
      if (v2483)
      {
        v2484 = v2483;
        operator delete(v2483);
      }
      v663 = operator new();
      v2481 = 0;
      v2480 = 0;
      v2482 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2480, v14, v307, (v307 - (uint64_t)v14) >> 3);
      Stacked::Stacked(v663, (uint64_t)&v2480);
      if (v2480)
      {
        v2481 = v2480;
        operator delete(v2480);
      }
      v664 = operator new();
      v665 = *(_DWORD *)a1;
      v666 = *(_DWORD *)(a1 + 4);
      v2479 = 0;
      v2477 = 0;
      v2478 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2477, v2360, v12);
      GRU<signed char>::GRU(v664, v665, v666, (_DWORD **)&v2477, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v667 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v669 = v668;
      *v667 = v664;
      if (v2477)
      {
        v2478 = v2477;
        operator delete(v2477);
      }
      v670 = operator new();
      v671 = *(_DWORD *)(a1 + 4);
      v2476 = 0;
      v2474 = 0;
      v2475 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2474, v2360, v12);
      GRU<signed char>::GRU(v670, v671, v671, (_DWORD **)&v2474, 0, a2, 1, 0);
      if (v669 < 2)
      {
        v729 = 2;
        if ((unint64_t)((8 * v669) >> 2) > 2)
          v729 = (8 * v669) >> 2;
        if ((unint64_t)(8 * v669) >= 0x7FFFFFFFFFFFFFF8)
          v730 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v730 = v729;
        if (v730)
          v730 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v730);
        v731 = 0;
        *(_QWORD *)(v730 + 8) = v670;
        v672 = v730 + 16;
        do
        {
          *(_QWORD *)(v730 + v731 * 8) = v667[v731];
          --v731;
        }
        while (v731 != -1);
        v732 = (_QWORD *)v730;
        operator delete(v667);
        v667 = v732;
      }
      else
      {
        v667[1] = v670;
        v672 = (uint64_t)(v667 + 2);
      }
      if (v2474)
      {
        v2475 = v2474;
        operator delete(v2474);
      }
      v733 = operator new();
      v734 = operator new();
      v2472 = 0;
      v2471 = 0;
      v2473 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2471, v667, v672, (v672 - (uint64_t)v667) >> 3);
      Stacked::Stacked(v734, (uint64_t)&v2471);
      Reverse::Reverse(v733, v734, *(_DWORD *)(a1 + 20));
      if (v2471)
      {
        v2472 = v2471;
        operator delete(v2471);
      }
      v735 = operator new(8uLL);
      *v735 = v663;
      v736 = operator new(0x10uLL);
      v737 = v736 + 2;
      *v736 = *v735;
      v736[1] = v733;
      v2681 = v736;
      v2683 = v736 + 2;
      operator delete(v735);
      v2682 = v737;
      v738 = (char **)operator new();
      Parallel::Parallel(v738, (uint64_t)&v2681);
      v740 = *(char ****)(v2366 + 112);
      v739 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v740 >= v739)
      {
        v742 = *(_QWORD *)(v2366 + 104);
        v743 = ((uint64_t)v740 - v742) >> 3;
        if ((unint64_t)(v743 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v744 = v739 - v742;
        v745 = v744 >> 2;
        if (v744 >> 2 <= (unint64_t)(v743 + 1))
          v745 = v743 + 1;
        if ((unint64_t)v744 >= 0x7FFFFFFFFFFFFFF8)
          v746 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v746 = v745;
        if (v746)
          v746 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v746);
        else
          v747 = 0;
        v2041 = (char ***)(v746 + 8 * v743);
        v2042 = v746 + 8 * v747;
        *v2041 = v738;
        v741 = v2041 + 1;
        v2044 = *(char **)(v2366 + 104);
        v2043 = *(char **)(v2366 + 112);
        if (v2043 == v2044)
        {
          v2046 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2045 = (char **)*((_QWORD *)v2043 - 1);
            v2043 -= 8;
            *--v2041 = v2045;
          }
          while (v2043 != v2044);
          v2046 = (_QWORD *)v2366;
          v2043 = *(char **)(v2366 + 104);
        }
        v2046[13] = v2041;
        v2046[14] = v741;
        v2046[15] = v2042;
        if (v2043)
          operator delete(v2043);
      }
      else
      {
        *v740 = v738;
        v741 = v740 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v741;
      if (v2681)
        operator delete(v2681);
      v2071 = v667;
      goto LABEL_2418;
    case 33:
      v266 = operator new();
      FullLayer<signed char>::FullLayer(v266, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v268 = *(uint64_t **)(a1 + 112);
      v267 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v268 >= v267)
      {
        v499 = *(_QWORD *)(a1 + 104);
        v500 = ((uint64_t)v268 - v499) >> 3;
        if ((unint64_t)(v500 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v501 = v267 - v499;
        v502 = v501 >> 2;
        if (v501 >> 2 <= (unint64_t)(v500 + 1))
          v502 = v500 + 1;
        if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF8)
          v503 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v503 = v502;
        if (v503)
          v503 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v503);
        else
          v504 = 0;
        v807 = (uint64_t *)(v503 + 8 * v500);
        v808 = v503 + 8 * v504;
        *v807 = v266;
        v269 = v807 + 1;
        v810 = *(char **)(a1 + 104);
        v809 = *(char **)(a1 + 112);
        if (v809 == v810)
        {
          v812 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v811 = *((_QWORD *)v809 - 1);
            v809 -= 8;
            *--v807 = v811;
          }
          while (v809 != v810);
          v812 = (_QWORD *)a1;
          v809 = *(char **)(a1 + 104);
        }
        v812[13] = v807;
        v812[14] = v269;
        v812[15] = v808;
        if (v809)
          operator delete(v809);
      }
      else
      {
        *v268 = v266;
        v269 = v268 + 1;
      }
      *(_QWORD *)(a1 + 112) = v269;
      v906 = operator new();
      v907 = *(_DWORD *)(a1 + 4);
      v2470 = 0;
      v2468 = 0;
      v2469 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2468, v2360, v12);
      GRU<signed char>::GRU(v906, v907, v907, (_DWORD **)&v2468, 0, a2, 1, 0);
      v909 = *(uint64_t **)(a1 + 112);
      v908 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v909 >= v908)
      {
        v911 = *(_QWORD *)(a1 + 104);
        v912 = ((uint64_t)v909 - v911) >> 3;
        if ((unint64_t)(v912 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v913 = v908 - v911;
        v914 = v913 >> 2;
        if (v913 >> 2 <= (unint64_t)(v912 + 1))
          v914 = v912 + 1;
        if ((unint64_t)v913 >= 0x7FFFFFFFFFFFFFF8)
          v915 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v915 = v914;
        if (v915)
          v915 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v915);
        else
          v916 = 0;
        v1224 = (uint64_t *)(v915 + 8 * v912);
        v1225 = v915 + 8 * v916;
        *v1224 = v906;
        v910 = v1224 + 1;
        v1227 = *(char **)(a1 + 104);
        v1226 = *(char **)(a1 + 112);
        if (v1226 == v1227)
        {
          v1229 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1228 = *((_QWORD *)v1226 - 1);
            v1226 -= 8;
            *--v1224 = v1228;
          }
          while (v1226 != v1227);
          v1229 = (_QWORD *)a1;
          v1226 = *(char **)(a1 + 104);
        }
        v1229[13] = v1224;
        v1229[14] = v910;
        v1229[15] = v1225;
        if (v1226)
          operator delete(v1226);
      }
      else
      {
        *v909 = v906;
        v910 = v909 + 1;
      }
      *(_QWORD *)(a1 + 112) = v910;
      if (v2468)
      {
        v2469 = v2468;
        operator delete(v2468);
      }
      v1336 = operator new();
      v1337 = *(_DWORD *)(a1 + 4);
      v2467 = 0;
      v2465 = 0;
      v2466 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2465, v2360, v12);
      GRU<signed char>::GRU(v1336, v1337, v1337, (_DWORD **)&v2465, 0, a2, 1, 0);
      v1339 = *(uint64_t **)(a1 + 112);
      v1338 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1339 >= v1338)
      {
        v1341 = *(_QWORD *)(a1 + 104);
        v1342 = ((uint64_t)v1339 - v1341) >> 3;
        if ((unint64_t)(v1342 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1343 = v1338 - v1341;
        v1344 = v1343 >> 2;
        if (v1343 >> 2 <= (unint64_t)(v1342 + 1))
          v1344 = v1342 + 1;
        if ((unint64_t)v1343 >= 0x7FFFFFFFFFFFFFF8)
          v1345 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1345 = v1344;
        if (v1345)
          v1345 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1345);
        else
          v1346 = 0;
        v1547 = (uint64_t *)(v1345 + 8 * v1342);
        v1548 = v1345 + 8 * v1346;
        *v1547 = v1336;
        v1340 = v1547 + 1;
        v1550 = *(char **)(a1 + 104);
        v1549 = *(char **)(a1 + 112);
        if (v1549 == v1550)
        {
          v1552 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1551 = *((_QWORD *)v1549 - 1);
            v1549 -= 8;
            *--v1547 = v1551;
          }
          while (v1549 != v1550);
          v1552 = (_QWORD *)a1;
          v1549 = *(char **)(a1 + 104);
        }
        v1552[13] = v1547;
        v1552[14] = v1340;
        v1552[15] = v1548;
        if (v1549)
          operator delete(v1549);
      }
      else
      {
        *v1339 = v1336;
        v1340 = v1339 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1340;
      if (v2465)
      {
        v2466 = v2465;
        operator delete(v2465);
      }
      v1590 = operator new();
      v1591 = *(_DWORD *)(a1 + 4);
      v2464 = 0;
      v2462 = 0;
      v2463 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2462, v2360, v12);
      GRU<signed char>::GRU(v1590, v1591, v1591, (_DWORD **)&v2462, 0, a2, 1, 0);
      v1593 = *(uint64_t **)(a1 + 112);
      v1592 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1593 >= v1592)
      {
        v1595 = *(_QWORD *)(a1 + 104);
        v1596 = ((uint64_t)v1593 - v1595) >> 3;
        if ((unint64_t)(v1596 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1597 = v1592 - v1595;
        v1598 = v1597 >> 2;
        if (v1597 >> 2 <= (unint64_t)(v1596 + 1))
          v1598 = v1596 + 1;
        if ((unint64_t)v1597 >= 0x7FFFFFFFFFFFFFF8)
          v1599 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1599 = v1598;
        if (v1599)
          v1599 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1599);
        else
          v1600 = 0;
        v1758 = (uint64_t *)(v1599 + 8 * v1596);
        v1759 = v1599 + 8 * v1600;
        *v1758 = v1590;
        v1594 = v1758 + 1;
        v1761 = *(char **)(a1 + 104);
        v1760 = *(char **)(a1 + 112);
        if (v1760 == v1761)
        {
          v1763 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1762 = *((_QWORD *)v1760 - 1);
            v1760 -= 8;
            *--v1758 = v1762;
          }
          while (v1760 != v1761);
          v1763 = (_QWORD *)a1;
          v1760 = *(char **)(a1 + 104);
        }
        v1763[13] = v1758;
        v1763[14] = v1594;
        v1763[15] = v1759;
        if (v1760)
          operator delete(v1760);
      }
      else
      {
        *v1593 = v1590;
        v1594 = v1593 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1594;
      if (v2462)
      {
        v2463 = v2462;
        operator delete(v2462);
      }
      v1781 = operator new();
      v1782 = *(_DWORD *)(a1 + 4);
      v2461 = 0;
      v2459 = 0;
      v2460 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2459, v2360, v12);
      GRU<signed char>::GRU(v1781, v1782, v1782, (_DWORD **)&v2459, 0, a2, 1, 0);
      v1784 = *(uint64_t **)(a1 + 112);
      v1783 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1784 >= v1783)
      {
        v1786 = *(_QWORD *)(a1 + 104);
        v1787 = ((uint64_t)v1784 - v1786) >> 3;
        if ((unint64_t)(v1787 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1788 = v1783 - v1786;
        v1789 = v1788 >> 2;
        if (v1788 >> 2 <= (unint64_t)(v1787 + 1))
          v1789 = v1787 + 1;
        if ((unint64_t)v1788 >= 0x7FFFFFFFFFFFFFF8)
          v1790 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1790 = v1789;
        if (v1790)
          v1790 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1790);
        else
          v1791 = 0;
        v1833 = (uint64_t *)(v1790 + 8 * v1787);
        v1834 = v1790 + 8 * v1791;
        *v1833 = v1781;
        v1785 = v1833 + 1;
        v1836 = *(char **)(a1 + 104);
        v1835 = *(char **)(a1 + 112);
        if (v1835 == v1836)
        {
          v1838 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1837 = *((_QWORD *)v1835 - 1);
            v1835 -= 8;
            *--v1833 = v1837;
          }
          while (v1835 != v1836);
          v1838 = (_QWORD *)a1;
          v1835 = *(char **)(a1 + 104);
        }
        v1838[13] = v1833;
        v1838[14] = v1785;
        v1838[15] = v1834;
        if (v1835)
          operator delete(v1835);
      }
      else
      {
        *v1784 = v1781;
        v1785 = v1784 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1785;
      v1324 = v2459;
      if (!v2459)
        goto LABEL_2421;
      v2460 = v2459;
      goto LABEL_2420;
    case 39:
      v270 = operator new();
      FullLayer<signed char>::FullLayer(v270, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v272 = *(uint64_t **)(a1 + 112);
      v271 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v272 >= v271)
      {
        v505 = *(_QWORD *)(a1 + 104);
        v506 = ((uint64_t)v272 - v505) >> 3;
        if ((unint64_t)(v506 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v507 = v271 - v505;
        v508 = v507 >> 2;
        if (v507 >> 2 <= (unint64_t)(v506 + 1))
          v508 = v506 + 1;
        if ((unint64_t)v507 >= 0x7FFFFFFFFFFFFFF8)
          v509 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v509 = v508;
        if (v509)
          v509 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v509);
        else
          v510 = 0;
        v813 = (uint64_t *)(v509 + 8 * v506);
        v814 = v509 + 8 * v510;
        *v813 = v270;
        v273 = v813 + 1;
        v816 = *(char **)(a1 + 104);
        v815 = *(char **)(a1 + 112);
        if (v815 == v816)
        {
          v818 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v817 = *((_QWORD *)v815 - 1);
            v815 -= 8;
            *--v813 = v817;
          }
          while (v815 != v816);
          v818 = (_QWORD *)a1;
          v815 = *(char **)(a1 + 104);
        }
        v818[13] = v813;
        v818[14] = v273;
        v818[15] = v814;
        if (v815)
          operator delete(v815);
      }
      else
      {
        *v272 = v270;
        v273 = v272 + 1;
      }
      *(_QWORD *)(a1 + 112) = v273;
      v917 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v273 - 1) + 272))(*(v273 - 1));
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v918 = operator new();
      v919 = *(_DWORD *)(a1 + 4);
      v2458 = 0;
      v2456 = 0;
      v2457 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2456, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v918, v917, v919, (_DWORD **)&v2456, 0, a2, 1, 0, 0);
      v920 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v922 = v921;
      v923 = &v920[v921];
      *v920 = v918;
      v2682 = v920 + 1;
      v2683 = v923;
      v2681 = v920;
      if (v2456)
      {
        v2457 = v2456;
        operator delete(v2456);
      }
      v924 = operator new();
      Direct::Direct(v924, v917, v917, 0);
      if (v922 < 2)
      {
        v926 = 2;
        if ((unint64_t)(((char *)v923 - (char *)v920) >> 2) > 2)
          v926 = ((char *)v923 - (char *)v920) >> 2;
        if ((unint64_t)((char *)v923 - (char *)v920) >= 0x7FFFFFFFFFFFFFF8)
          v927 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v927 = v926;
        if (v927)
          v927 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v927);
        else
          v928 = 0;
        v1565 = 0;
        v1566 = v927 + 8;
        v1567 = v927 + 8 * v928;
        *(_QWORD *)(v927 + 8) = v924;
        v925 = (_QWORD *)(v927 + 16);
        do
        {
          *(_QWORD *)(v927 + v1565 * 8) = v920[v1565];
          --v1565;
        }
        while (v1565 != -1);
        v1568 = v2681;
        v2681 = (void *)(v1566 - 8);
        v2683 = (_QWORD *)v1567;
        if (v1568)
          operator delete(v1568);
      }
      else
      {
        v920[1] = v924;
        v925 = v920 + 2;
      }
      v2682 = v925;
      v1569 = (char **)operator new();
      Parallel::Parallel(v1569, (uint64_t)&v2681);
      v1571 = *(char ****)(v2366 + 112);
      v1570 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1571 >= v1570)
      {
        v1573 = *(_QWORD *)(v2366 + 104);
        v1574 = ((uint64_t)v1571 - v1573) >> 3;
        if ((unint64_t)(v1574 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1575 = v1570 - v1573;
        v1576 = v1575 >> 2;
        if (v1575 >> 2 <= (unint64_t)(v1574 + 1))
          v1576 = v1574 + 1;
        if ((unint64_t)v1575 >= 0x7FFFFFFFFFFFFFF8)
          v1577 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1577 = v1576;
        if (v1577)
          v1577 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1577);
        else
          v1578 = 0;
        v1734 = (char ***)(v1577 + 8 * v1574);
        v1735 = v1577 + 8 * v1578;
        *v1734 = v1569;
        v1572 = v1734 + 1;
        v1737 = *(char **)(v2366 + 104);
        v1736 = *(char **)(v2366 + 112);
        if (v1736 == v1737)
        {
          v1739 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1738 = (char **)*((_QWORD *)v1736 - 1);
            v1736 -= 8;
            *--v1734 = v1738;
          }
          while (v1736 != v1737);
          v1739 = (_QWORD *)v2366;
          v1736 = *(char **)(v2366 + 104);
        }
        v1739[13] = v1734;
        v1739[14] = v1572;
        v1739[15] = v1735;
        if (v1736)
          operator delete(v1736);
      }
      else
      {
        *v1571 = v1569;
        v1572 = v1571 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1572;
      v1740 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1572 - 1) + 272))(*(v1572 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1741 = operator new();
      v1742 = *(_DWORD *)(v2366 + 4);
      v2452 = 0;
      v2450 = 0;
      v2451 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2450, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1741, v1740, v1742, (_DWORD **)&v2450, 0, a2, 1, 0, 0);
      v1743 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1745 = v1744;
      v1746 = (char *)&v1743[v1744];
      *v1743 = v1741;
      v2455 = v1746;
      v2453 = v1743;
      v2454 = v1743 + 1;
      if (v2450)
      {
        v2451 = v2450;
        operator delete(v2450);
      }
      v1747 = operator new();
      Direct::Direct(v1747, v1740, v1740, 0);
      if (v1745 < 2)
      {
        v1749 = 2;
        if ((unint64_t)((v1746 - (char *)v1743) >> 2) > 2)
          v1749 = (v1746 - (char *)v1743) >> 2;
        if ((unint64_t)(v1746 - (char *)v1743) >= 0x7FFFFFFFFFFFFFF8)
          v1750 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1750 = v1749;
        if (v1750)
          v1750 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1750);
        else
          v1751 = 0;
        v1924 = 0;
        v1925 = v1750 + 8;
        v1926 = v1750 + 8 * v1751;
        *(_QWORD *)(v1750 + 8) = v1747;
        v1748 = (_QWORD *)(v1750 + 16);
        do
        {
          *(_QWORD *)(v1750 + v1924 * 8) = v1743[v1924];
          --v1924;
        }
        while (v1924 != -1);
        v1927 = v2453;
        v2453 = (void *)(v1925 - 8);
        v2455 = (char *)v1926;
        if (v1927)
          operator delete(v1927);
      }
      else
      {
        v1743[1] = v1747;
        v1748 = v1743 + 2;
      }
      v2454 = v1748;
      v1928 = (char **)operator new();
      Parallel::Parallel(v1928, (uint64_t)&v2453);
      v1930 = *(char ****)(v2366 + 112);
      v1929 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1930 >= v1929)
      {
        v1932 = *(_QWORD *)(v2366 + 104);
        v1933 = ((uint64_t)v1930 - v1932) >> 3;
        if ((unint64_t)(v1933 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1934 = v1929 - v1932;
        v1935 = v1934 >> 2;
        if (v1934 >> 2 <= (unint64_t)(v1933 + 1))
          v1935 = v1933 + 1;
        if ((unint64_t)v1934 >= 0x7FFFFFFFFFFFFFF8)
          v1936 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1936 = v1935;
        if (v1936)
          v1936 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1936);
        else
          v1937 = 0;
        v1990 = (char ***)(v1936 + 8 * v1933);
        v1991 = v1936 + 8 * v1937;
        *v1990 = v1928;
        v1931 = v1990 + 1;
        v1993 = *(char **)(v2366 + 104);
        v1992 = *(char **)(v2366 + 112);
        if (v1992 == v1993)
        {
          v1995 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1994 = (char **)*((_QWORD *)v1992 - 1);
            v1992 -= 8;
            *--v1990 = v1994;
          }
          while (v1992 != v1993);
          v1995 = (_QWORD *)v2366;
          v1992 = *(char **)(v2366 + 104);
        }
        v1995[13] = v1990;
        v1995[14] = v1931;
        v1995[15] = v1991;
        if (v1992)
          operator delete(v1992);
      }
      else
      {
        *v1930 = v1928;
        v1931 = v1930 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1931;
      v1996 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1931 - 1) + 272))(*(v1931 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1997 = operator new();
      v1998 = *(_DWORD *)(v2366 + 4);
      v2446 = 0;
      v2444 = 0;
      v2445 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2444, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v1997, v1996, v1998, (_DWORD **)&v2444, 0, a2, 1, 0, 0);
      v1999 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2001 = v2000;
      v2002 = (char *)&v1999[v2000];
      *v1999 = v1997;
      v2449 = v2002;
      v2447 = v1999;
      v2448 = v1999 + 1;
      if (v2444)
      {
        v2445 = v2444;
        operator delete(v2444);
      }
      v2003 = operator new();
      Direct::Direct(v2003, v1996, v1996, 0);
      if (v2001 < 2)
      {
        v2005 = 2;
        if ((unint64_t)((v2002 - (char *)v1999) >> 2) > 2)
          v2005 = (v2002 - (char *)v1999) >> 2;
        if ((unint64_t)(v2002 - (char *)v1999) >= 0x7FFFFFFFFFFFFFF8)
          v2006 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2006 = v2005;
        if (v2006)
          v2006 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2006);
        else
          v2007 = 0;
        v2105 = 0;
        v2106 = v2006 + 8;
        v2107 = v2006 + 8 * v2007;
        *(_QWORD *)(v2006 + 8) = v2003;
        v2004 = (_QWORD *)(v2006 + 16);
        do
        {
          *(_QWORD *)(v2006 + v2105 * 8) = v1999[v2105];
          --v2105;
        }
        while (v2105 != -1);
        v2108 = v2447;
        v2447 = (void *)(v2106 - 8);
        v2449 = (char *)v2107;
        if (v2108)
          operator delete(v2108);
      }
      else
      {
        v1999[1] = v2003;
        v2004 = v1999 + 2;
      }
      v2448 = v2004;
      v2109 = (char **)operator new();
      Parallel::Parallel(v2109, (uint64_t)&v2447);
      v2111 = *(char ****)(v2366 + 112);
      v2110 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2111 >= v2110)
      {
        v2113 = *(_QWORD *)(v2366 + 104);
        v2114 = ((uint64_t)v2111 - v2113) >> 3;
        if ((unint64_t)(v2114 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2115 = v2110 - v2113;
        v2116 = v2115 >> 2;
        if (v2115 >> 2 <= (unint64_t)(v2114 + 1))
          v2116 = v2114 + 1;
        if ((unint64_t)v2115 >= 0x7FFFFFFFFFFFFFF8)
          v2117 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2117 = v2116;
        if (v2117)
          v2117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2117);
        else
          v2118 = 0;
        v2134 = (char ***)(v2117 + 8 * v2114);
        v2135 = v2117 + 8 * v2118;
        *v2134 = v2109;
        v2112 = v2134 + 1;
        v2137 = *(char **)(v2366 + 104);
        v2136 = *(char **)(v2366 + 112);
        if (v2136 == v2137)
        {
          v2139 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2138 = (char **)*((_QWORD *)v2136 - 1);
            v2136 -= 8;
            *--v2134 = v2138;
          }
          while (v2136 != v2137);
          v2139 = (_QWORD *)v2366;
          v2136 = *(char **)(v2366 + 104);
        }
        v2139[13] = v2134;
        v2139[14] = v2112;
        v2139[15] = v2135;
        if (v2136)
          operator delete(v2136);
      }
      else
      {
        *v2111 = v2109;
        v2112 = v2111 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2112;
      v2140 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2112 - 1) + 272))(*(v2112 - 1));
      v2141 = operator new();
      v2142 = *(_DWORD *)(v2366 + 4);
      v2443 = 0;
      v2441 = 0;
      v2442 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2441, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v2141, v2140, v2142, (_DWORD **)&v2441, 0, a2, 1, 0, 0);
      v2144 = *(uint64_t **)(v2366 + 112);
      v2143 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2144 >= v2143)
      {
        v2146 = *(_QWORD *)(v2366 + 104);
        v2147 = ((uint64_t)v2144 - v2146) >> 3;
        if ((unint64_t)(v2147 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2148 = v2143 - v2146;
        v2149 = v2148 >> 2;
        if (v2148 >> 2 <= (unint64_t)(v2147 + 1))
          v2149 = v2147 + 1;
        if ((unint64_t)v2148 >= 0x7FFFFFFFFFFFFFF8)
          v2150 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2150 = v2149;
        if (v2150)
          v2150 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2150);
        else
          v2151 = 0;
        v2172 = (uint64_t *)(v2150 + 8 * v2147);
        v2173 = v2150 + 8 * v2151;
        *v2172 = v2141;
        v2145 = v2172 + 1;
        v2175 = *(char **)(v2366 + 104);
        v2174 = *(char **)(v2366 + 112);
        if (v2174 == v2175)
        {
          v2177 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2176 = *((_QWORD *)v2174 - 1);
            v2174 -= 8;
            *--v2172 = v2176;
          }
          while (v2174 != v2175);
          v2177 = (_QWORD *)v2366;
          v2174 = *(char **)(v2366 + 104);
        }
        v2177[13] = v2172;
        v2177[14] = v2145;
        v2177[15] = v2173;
        if (v2174)
          operator delete(v2174);
      }
      else
      {
        *v2144 = v2141;
        v2145 = v2144 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2145;
      v2158 = v2441;
      if (!v2441)
        goto LABEL_2404;
      v2442 = v2441;
      goto LABEL_2403;
    case 40:
      v308 = operator new();
      FullLayer<signed char>::FullLayer(v308, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v310 = *(uint64_t **)(a1 + 112);
      v309 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v310 >= v309)
      {
        v523 = *(_QWORD *)(a1 + 104);
        v524 = ((uint64_t)v310 - v523) >> 3;
        if ((unint64_t)(v524 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v525 = v309 - v523;
        v526 = v525 >> 2;
        if (v525 >> 2 <= (unint64_t)(v524 + 1))
          v526 = v524 + 1;
        if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFF8)
          v527 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v527 = v526;
        if (v527)
          v527 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v527);
        else
          v528 = 0;
        v831 = (uint64_t *)(v527 + 8 * v524);
        v832 = v527 + 8 * v528;
        *v831 = v308;
        v311 = v831 + 1;
        v834 = *(char **)(a1 + 104);
        v833 = *(char **)(a1 + 112);
        if (v833 == v834)
        {
          v836 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v835 = *((_QWORD *)v833 - 1);
            v833 -= 8;
            *--v831 = v835;
          }
          while (v833 != v834);
          v836 = (_QWORD *)a1;
          v833 = *(char **)(a1 + 104);
        }
        v836[13] = v831;
        v836[14] = v311;
        v836[15] = v832;
        if (v833)
          operator delete(v833);
      }
      else
      {
        *v310 = v308;
        v311 = v310 + 1;
      }
      *(_QWORD *)(a1 + 112) = v311;
      v950 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v311 - 1) + 272))(*(v311 - 1));
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v951 = operator new();
      FullLayer<signed char>::FullLayer(v951, v950, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v952 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v954 = v953;
      *v952 = v951;
      v955 = &v952[v953];
      v2682 = v952 + 1;
      v2683 = v955;
      v2681 = v952;
      v956 = operator new();
      Direct::Direct(v956, v950, v950, 0);
      if (v954 < 2)
      {
        v958 = 2;
        if ((unint64_t)(((char *)v955 - (char *)v952) >> 2) > 2)
          v958 = ((char *)v955 - (char *)v952) >> 2;
        if ((unint64_t)((char *)v955 - (char *)v952) >= 0x7FFFFFFFFFFFFFF8)
          v959 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v959 = v958;
        if (v959)
          v959 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v959);
        else
          v960 = 0;
        v1497 = 0;
        v1498 = v959 + 8;
        v1499 = v959 + 8 * v960;
        *(_QWORD *)(v959 + 8) = v956;
        v957 = (_QWORD *)(v959 + 16);
        do
        {
          *(_QWORD *)(v959 + v1497 * 8) = v952[v1497];
          --v1497;
        }
        while (v1497 != -1);
        v1500 = v2681;
        v2681 = (void *)(v1498 - 8);
        v2683 = (_QWORD *)v1499;
        if (v1500)
          operator delete(v1500);
      }
      else
      {
        v952[1] = v956;
        v957 = v952 + 2;
      }
      v2682 = v957;
      v1501 = (char **)operator new();
      Parallel::Parallel(v1501, (uint64_t)&v2681);
      v1503 = *(char ****)(v2366 + 112);
      v1502 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1503 >= v1502)
      {
        v1505 = *(_QWORD *)(v2366 + 104);
        v1506 = ((uint64_t)v1503 - v1505) >> 3;
        if ((unint64_t)(v1506 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1507 = v1502 - v1505;
        v1508 = v1507 >> 2;
        if (v1507 >> 2 <= (unint64_t)(v1506 + 1))
          v1508 = v1506 + 1;
        if ((unint64_t)v1507 >= 0x7FFFFFFFFFFFFFF8)
          v1509 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1509 = v1508;
        if (v1509)
          v1509 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1509);
        else
          v1510 = 0;
        v1698 = (char ***)(v1509 + 8 * v1506);
        v1699 = v1509 + 8 * v1510;
        *v1698 = v1501;
        v1504 = v1698 + 1;
        v1701 = *(char **)(v2366 + 104);
        v1700 = *(char **)(v2366 + 112);
        if (v1700 == v1701)
        {
          v1703 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1702 = (char **)*((_QWORD *)v1700 - 1);
            v1700 -= 8;
            *--v1698 = v1702;
          }
          while (v1700 != v1701);
          v1703 = (_QWORD *)v2366;
          v1700 = *(char **)(v2366 + 104);
        }
        v1703[13] = v1698;
        v1703[14] = v1504;
        v1703[15] = v1699;
        if (v1700)
          operator delete(v1700);
      }
      else
      {
        *v1503 = v1501;
        v1504 = v1503 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1504;
      v1723 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1504 - 1) + 272))(*(v1504 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1724 = operator new();
      FullLayer<signed char>::FullLayer(v1724, v1723, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1725 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1727 = v1726;
      *v1725 = v1724;
      v1728 = (char *)&v1725[v1726];
      v2455 = v1728;
      v2453 = v1725;
      v2454 = v1725 + 1;
      v1729 = operator new();
      Direct::Direct(v1729, v1723, v1723, 0);
      if (v1727 < 2)
      {
        v1731 = 2;
        if ((unint64_t)((v1728 - (char *)v1725) >> 2) > 2)
          v1731 = (v1728 - (char *)v1725) >> 2;
        if ((unint64_t)(v1728 - (char *)v1725) >= 0x7FFFFFFFFFFFFFF8)
          v1732 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1732 = v1731;
        if (v1732)
          v1732 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1732);
        else
          v1733 = 0;
        v1845 = 0;
        v1846 = v1732 + 8;
        v1847 = v1732 + 8 * v1733;
        *(_QWORD *)(v1732 + 8) = v1729;
        v1730 = (_QWORD *)(v1732 + 16);
        do
        {
          *(_QWORD *)(v1732 + v1845 * 8) = v1725[v1845];
          --v1845;
        }
        while (v1845 != -1);
        v1848 = v2453;
        v2453 = (void *)(v1846 - 8);
        v2455 = (char *)v1847;
        if (v1848)
          operator delete(v1848);
      }
      else
      {
        v1725[1] = v1729;
        v1730 = v1725 + 2;
      }
      v2454 = v1730;
      v1849 = (char **)operator new();
      Parallel::Parallel(v1849, (uint64_t)&v2453);
      v1851 = *(char ****)(v2366 + 112);
      v1850 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1851 >= v1850)
      {
        v1853 = *(_QWORD *)(v2366 + 104);
        v1854 = ((uint64_t)v1851 - v1853) >> 3;
        if ((unint64_t)(v1854 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1855 = v1850 - v1853;
        v1856 = v1855 >> 2;
        if (v1855 >> 2 <= (unint64_t)(v1854 + 1))
          v1856 = v1854 + 1;
        if ((unint64_t)v1855 >= 0x7FFFFFFFFFFFFFF8)
          v1857 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1857 = v1856;
        if (v1857)
          v1857 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1857);
        else
          v1858 = 0;
        v1938 = (char ***)(v1857 + 8 * v1854);
        v1939 = v1857 + 8 * v1858;
        *v1938 = v1849;
        v1852 = v1938 + 1;
        v1941 = *(char **)(v2366 + 104);
        v1940 = *(char **)(v2366 + 112);
        if (v1940 == v1941)
        {
          v1943 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1942 = (char **)*((_QWORD *)v1940 - 1);
            v1940 -= 8;
            *--v1938 = v1942;
          }
          while (v1940 != v1941);
          v1943 = (_QWORD *)v2366;
          v1940 = *(char **)(v2366 + 104);
        }
        v1943[13] = v1938;
        v1943[14] = v1852;
        v1943[15] = v1939;
        if (v1940)
          operator delete(v1940);
      }
      else
      {
        *v1851 = v1849;
        v1852 = v1851 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1852;
      v1969 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1852 - 1) + 272))(*(v1852 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1970 = operator new();
      FullLayer<signed char>::FullLayer(v1970, v1969, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1971 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1973 = v1972;
      *v1971 = v1970;
      v1974 = (char *)&v1971[v1972];
      v2449 = v1974;
      v2447 = v1971;
      v2448 = v1971 + 1;
      v1975 = operator new();
      Direct::Direct(v1975, v1969, v1969, 0);
      if (v1973 < 2)
      {
        v1977 = 2;
        if ((unint64_t)((v1974 - (char *)v1971) >> 2) > 2)
          v1977 = (v1974 - (char *)v1971) >> 2;
        if ((unint64_t)(v1974 - (char *)v1971) >= 0x7FFFFFFFFFFFFFF8)
          v1978 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1978 = v1977;
        if (v1978)
          v1978 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1978);
        else
          v1979 = 0;
        v2047 = 0;
        v2048 = v1978 + 8;
        v2049 = v1978 + 8 * v1979;
        *(_QWORD *)(v1978 + 8) = v1975;
        v1976 = (_QWORD *)(v1978 + 16);
        do
        {
          *(_QWORD *)(v1978 + v2047 * 8) = v1971[v2047];
          --v2047;
        }
        while (v2047 != -1);
        v2050 = v2447;
        v2447 = (void *)(v2048 - 8);
        v2449 = (char *)v2049;
        if (v2050)
          operator delete(v2050);
      }
      else
      {
        v1971[1] = v1975;
        v1976 = v1971 + 2;
      }
      v2448 = v1976;
      v2051 = (char **)operator new();
      Parallel::Parallel(v2051, (uint64_t)&v2447);
      v2053 = *(char ****)(v2366 + 112);
      v2052 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2053 >= v2052)
      {
        v2055 = *(_QWORD *)(v2366 + 104);
        v2056 = ((uint64_t)v2053 - v2055) >> 3;
        if ((unint64_t)(v2056 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2057 = v2052 - v2055;
        v2058 = v2057 >> 2;
        if (v2057 >> 2 <= (unint64_t)(v2056 + 1))
          v2058 = v2056 + 1;
        if ((unint64_t)v2057 >= 0x7FFFFFFFFFFFFFF8)
          v2059 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2059 = v2058;
        if (v2059)
          v2059 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2059);
        else
          v2060 = 0;
        v2072 = (char ***)(v2059 + 8 * v2056);
        v2073 = v2059 + 8 * v2060;
        *v2072 = v2051;
        v2054 = v2072 + 1;
        v2075 = *(char **)(v2366 + 104);
        v2074 = *(char **)(v2366 + 112);
        if (v2074 == v2075)
        {
          v2077 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2076 = (char **)*((_QWORD *)v2074 - 1);
            v2074 -= 8;
            *--v2072 = v2076;
          }
          while (v2074 != v2075);
          v2077 = (_QWORD *)v2366;
          v2074 = *(char **)(v2366 + 104);
        }
        v2077[13] = v2072;
        v2077[14] = v2054;
        v2077[15] = v2073;
        if (v2074)
          operator delete(v2074);
      }
      else
      {
        *v2053 = v2051;
        v2054 = v2053 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2054;
      v2119 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2054 - 1) + 272))(*(v2054 - 1));
      v2120 = operator new();
      v2121 = *(_DWORD *)(v2366 + 4);
      v2440 = 0;
      v2438 = 0;
      v2439 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2438, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v2120, v2119, v2121, &v2438, 0, a2, 1, 0, 0);
      v2123 = *(uint64_t **)(v2366 + 112);
      v2122 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2123 >= v2122)
      {
        v2125 = *(_QWORD *)(v2366 + 104);
        v2126 = ((uint64_t)v2123 - v2125) >> 3;
        if ((unint64_t)(v2126 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2127 = v2122 - v2125;
        v2128 = v2127 >> 2;
        if (v2127 >> 2 <= (unint64_t)(v2126 + 1))
          v2128 = v2126 + 1;
        if ((unint64_t)v2127 >= 0x7FFFFFFFFFFFFFF8)
          v2129 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2129 = v2128;
        if (v2129)
          v2129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2129);
        else
          v2130 = 0;
        v2152 = (uint64_t *)(v2129 + 8 * v2126);
        v2153 = v2129 + 8 * v2130;
        *v2152 = v2120;
        v2124 = v2152 + 1;
        v2155 = *(char **)(v2366 + 104);
        v2154 = *(char **)(v2366 + 112);
        if (v2154 == v2155)
        {
          v2157 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2156 = *((_QWORD *)v2154 - 1);
            v2154 -= 8;
            *--v2152 = v2156;
          }
          while (v2154 != v2155);
          v2157 = (_QWORD *)v2366;
          v2154 = *(char **)(v2366 + 104);
        }
        v2157[13] = v2152;
        v2157[14] = v2124;
        v2157[15] = v2153;
        if (v2154)
          operator delete(v2154);
      }
      else
      {
        *v2123 = v2120;
        v2124 = v2123 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2124;
      v2158 = v2438;
      if (!v2438)
        goto LABEL_2404;
      v2439 = v2438;
LABEL_2403:
      operator delete(v2158);
LABEL_2404:
      if (v2447)
        operator delete(v2447);
      if (v2453)
        operator delete(v2453);
LABEL_2408:
      v1324 = (uint64_t *)v2681;
      if (!v2681)
        goto LABEL_2421;
      goto LABEL_2420;
    case 46:
      v73 = operator new();
      FullLayer<signed char>::FullLayer(v73, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v75 = v74;
      *v40 = v73;
      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 272))(v73);
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v77 = operator new();
      FullLayer<signed char>::FullLayer(v77, v76, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v78 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v80 = v79;
      *v78 = v77;
      v81 = &v78[v79];
      v2682 = v78 + 1;
      v2683 = v81;
      v2681 = v78;
      v82 = operator new();
      Direct::Direct(v82, v76, v76, 0);
      if (v80 < 2)
      {
        v673 = 2;
        if ((unint64_t)(((char *)v81 - (char *)v78) >> 2) > 2)
          v673 = ((char *)v81 - (char *)v78) >> 2;
        if ((unint64_t)((char *)v81 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8)
          v674 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v674 = v673;
        if (v674)
          v674 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v674);
        else
          v675 = 0;
        v1511 = 0;
        v1512 = v674 + 8;
        v1513 = v674 + 8 * v675;
        *(_QWORD *)(v674 + 8) = v82;
        v83 = (_QWORD *)(v674 + 16);
        do
        {
          *(_QWORD *)(v674 + v1511 * 8) = v78[v1511];
          --v1511;
        }
        while (v1511 != -1);
        v1514 = v2681;
        v2681 = (void *)(v1512 - 8);
        v2683 = (_QWORD *)v1513;
        if (v1514)
          operator delete(v1514);
      }
      else
      {
        v78[1] = v82;
        v83 = v78 + 2;
      }
      v2682 = v83;
      v1515 = (char **)operator new();
      Parallel::Parallel(v1515, (uint64_t)&v2681);
      v1516 = (char *)&v40[v75];
      if (v75 < 2)
      {
        v1518 = 2;
        if ((unint64_t)((8 * v75) >> 2) > 2)
          v1518 = (8 * v75) >> 2;
        if ((unint64_t)(8 * v75) >= 0x7FFFFFFFFFFFFFF8)
          v1519 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1519 = v1518;
        if (v1519)
          v1519 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1519);
        else
          v1520 = 0;
        v1704 = 0;
        v1516 = (char *)(v1519 + 8 * v1520);
        *(_QWORD *)(v1519 + 8) = v1515;
        v1517 = (char ***)(v1519 + 16);
        do
        {
          *(_QWORD *)(v1519 + v1704 * 8) = v40[v1704];
          --v1704;
        }
        while (v1704 != -1);
        v1705 = (uint64_t *)v1519;
        operator delete(v40);
        v40 = v1705;
      }
      else
      {
        v40[1] = (uint64_t)v1515;
        v1517 = (char ***)(v40 + 2);
      }
      v1706 = (*((uint64_t (**)(_QWORD))**(v1517 - 1) + 34))(*(v1517 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1707 = operator new();
      FullLayer<signed char>::FullLayer(v1707, v1706, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1708 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1710 = v1709;
      *v1708 = v1707;
      v1711 = (char *)&v1708[v1709];
      v2455 = v1711;
      v2453 = v1708;
      v2454 = v1708 + 1;
      v1712 = operator new();
      Direct::Direct(v1712, v1706, v1706, 0);
      if (v1710 < 2)
      {
        v1714 = 2;
        if ((unint64_t)((v1711 - (char *)v1708) >> 2) > 2)
          v1714 = (v1711 - (char *)v1708) >> 2;
        if ((unint64_t)(v1711 - (char *)v1708) >= 0x7FFFFFFFFFFFFFF8)
          v1715 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1715 = v1714;
        if (v1715)
          v1715 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1715);
        else
          v1716 = 0;
        v1871 = 0;
        v1872 = v1715 + 8;
        v1873 = v1715 + 8 * v1716;
        *(_QWORD *)(v1715 + 8) = v1712;
        v1713 = (_QWORD *)(v1715 + 16);
        do
        {
          *(_QWORD *)(v1715 + v1871 * 8) = v1708[v1871];
          --v1871;
        }
        while (v1871 != -1);
        v1874 = v2453;
        v2453 = (void *)(v1872 - 8);
        v2455 = (char *)v1873;
        if (v1874)
          operator delete(v1874);
      }
      else
      {
        v1708[1] = v1712;
        v1713 = v1708 + 2;
      }
      v2454 = v1713;
      v1875 = (char **)operator new();
      Parallel::Parallel(v1875, (uint64_t)&v2453);
      if (v1517 >= (char ***)v1516)
      {
        v1877 = ((char *)v1517 - (char *)v40) >> 3;
        v1878 = v1877 + 1;
        if ((unint64_t)(v1877 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v1878)
          v1878 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v1879 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1879 = v1878;
        if (v1879)
          v1879 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1879);
        else
          v1880 = 0;
        v1956 = (char ***)(v1879 + 8 * v1877);
        v1516 = (char *)(v1879 + 8 * v1880);
        *v1956 = v1875;
        v1876 = v1956 + 1;
        while (v1517 != (char ***)v40)
        {
          v1957 = *--v1517;
          *--v1956 = v1957;
        }
        operator delete(v40);
        v40 = (uint64_t *)v1956;
      }
      else
      {
        *v1517 = v1875;
        v1876 = v1517 + 1;
      }
      v1958 = (*((uint64_t (**)(_QWORD))**(v1876 - 1) + 34))(*(v1876 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1959 = operator new();
      FullLayer<signed char>::FullLayer(v1959, v1958, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1960 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1962 = v1961;
      *v1960 = v1959;
      v1963 = (char *)&v1960[v1961];
      v2449 = v1963;
      v2447 = v1960;
      v2448 = v1960 + 1;
      v1964 = operator new();
      Direct::Direct(v1964, v1958, v1958, 0);
      if (v1962 < 2)
      {
        v1966 = 2;
        if ((unint64_t)((v1963 - (char *)v1960) >> 2) > 2)
          v1966 = (v1963 - (char *)v1960) >> 2;
        if ((unint64_t)(v1963 - (char *)v1960) >= 0x7FFFFFFFFFFFFFF8)
          v1967 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1967 = v1966;
        if (v1967)
          v1967 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1967);
        else
          v1968 = 0;
        v2061 = 0;
        v2062 = v1967 + 8;
        v2063 = v1967 + 8 * v1968;
        *(_QWORD *)(v1967 + 8) = v1964;
        v1965 = (_QWORD *)(v1967 + 16);
        do
        {
          *(_QWORD *)(v1967 + v2061 * 8) = v1960[v2061];
          --v2061;
        }
        while (v2061 != -1);
        v2064 = v2447;
        v2447 = (void *)(v2062 - 8);
        v2449 = (char *)v2063;
        if (v2064)
          operator delete(v2064);
      }
      else
      {
        v1960[1] = v1964;
        v1965 = v1960 + 2;
      }
      v2448 = v1965;
      v2065 = (char **)operator new();
      Parallel::Parallel(v2065, (uint64_t)&v2447);
      if (v1876 >= (char ***)v1516)
      {
        v2067 = ((char *)v1876 - (char *)v40) >> 3;
        v2068 = v2067 + 1;
        if ((unint64_t)(v2067 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v2068)
          v2068 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v2069 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2069 = v2068;
        if (v2069)
          v2069 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2069);
        else
          v2070 = 0;
        v2078 = (char ***)(v2069 + 8 * v2067);
        v1516 = (char *)(v2069 + 8 * v2070);
        *v2078 = v2065;
        v2066 = (uint64_t *)(v2078 + 1);
        while (v1876 != (char ***)v40)
        {
          v2079 = *--v1876;
          *--v2078 = v2079;
        }
        operator delete(v40);
        v40 = (uint64_t *)v2078;
      }
      else
      {
        *v1876 = v2065;
        v2066 = (uint64_t *)(v1876 + 1);
      }
      v2080 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2066 - 1) + 272))(*(v2066 - 1));
      v2081 = operator new();
      v2082 = *(_DWORD *)(v2366 + 4);
      v2437 = 0;
      v2435 = 0;
      v2436 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2435, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v2081, v2080, v2082, (_DWORD **)&v2435, 0, a2, 1, 0, 0);
      if (v2066 >= (uint64_t *)v1516)
      {
        v2084 = v2066 - v40;
        v2085 = v2084 + 1;
        if ((unint64_t)(v2084 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v2085)
          v2085 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v2086 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2086 = v2085;
        if (v2086)
          v2086 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2086);
        v2087 = (uint64_t *)(v2086 + 8 * v2084);
        *v2087 = v2081;
        v2083 = (uint64_t)(v2087 + 1);
        while (v2066 != v40)
        {
          v2088 = *--v2066;
          *--v2087 = v2088;
        }
        operator delete(v40);
        v40 = v2087;
      }
      else
      {
        *v2066 = v2081;
        v2083 = (uint64_t)(v2066 + 1);
      }
      if (v2435)
      {
        v2436 = v2435;
        operator delete(v2435);
      }
      v2089 = operator new();
      v2433 = 0;
      v2432 = 0;
      v2434 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2432, v40, v2083, (v2083 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v2089, (uint64_t)&v2432);
      if (v2432)
      {
        v2433 = v2432;
        operator delete(v2432);
      }
      v2090 = operator new();
      FullLayer<signed char>::FullLayer(v2090, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v2091 = (char ***)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2093 = v2092;
      *v2091 = (char **)v2090;
      v2094 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2090 + 272))(v2090);
      v2430 = 0;
      v2429 = 0;
      v2431 = 0;
      v2095 = operator new();
      FullLayer<signed char>::FullLayer(v2095, v2094, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2096 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2098 = v2097;
      *v2096 = v2095;
      v2099 = (char *)&v2096[v2097];
      v2431 = v2099;
      v2429 = v2096;
      v2430 = v2096 + 1;
      v2100 = operator new();
      Direct::Direct(v2100, v2094, v2094, 0);
      if (v2098 < 2)
      {
        v2102 = 2;
        if ((unint64_t)((v2099 - (char *)v2096) >> 2) > 2)
          v2102 = (v2099 - (char *)v2096) >> 2;
        if ((unint64_t)(v2099 - (char *)v2096) >= 0x7FFFFFFFFFFFFFF8)
          v2103 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2103 = v2102;
        if (v2103)
          v2103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2103);
        else
          v2104 = 0;
        v2264 = 0;
        v2265 = v2103 + 8;
        v2266 = v2103 + 8 * v2104;
        *(_QWORD *)(v2103 + 8) = v2100;
        v2101 = (_QWORD *)(v2103 + 16);
        do
        {
          *(_QWORD *)(v2103 + v2264 * 8) = v2096[v2264];
          --v2264;
        }
        while (v2264 != -1);
        v2267 = v2429;
        v2429 = (void *)(v2265 - 8);
        v2431 = (char *)v2266;
        if (v2267)
          operator delete(v2267);
      }
      else
      {
        v2096[1] = v2100;
        v2101 = v2096 + 2;
      }
      v2430 = v2101;
      v2268 = (char **)operator new();
      Parallel::Parallel(v2268, (uint64_t)&v2429);
      v2269 = (char *)&v2091[v2093];
      if (v2093 < 2)
      {
        v2271 = 2;
        if ((unint64_t)((8 * v2093) >> 2) > 2)
          v2271 = (8 * v2093) >> 2;
        if ((unint64_t)(8 * v2093) >= 0x7FFFFFFFFFFFFFF8)
          v2272 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2272 = v2271;
        if (v2272)
          v2272 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2272);
        else
          v2273 = 0;
        v2274 = 0;
        v2269 = (char *)(v2272 + 8 * v2273);
        *(_QWORD *)(v2272 + 8) = v2268;
        v2270 = (char ***)(v2272 + 16);
        do
        {
          *(_QWORD *)(v2272 + v2274 * 8) = v2091[v2274];
          --v2274;
        }
        while (v2274 != -1);
        v2275 = (char ***)v2272;
        operator delete(v2091);
        v2091 = v2275;
      }
      else
      {
        v2091[1] = v2268;
        v2270 = v2091 + 2;
      }
      v2276 = (*((uint64_t (**)(_QWORD))**(v2270 - 1) + 34))(*(v2270 - 1));
      v2427 = 0;
      v2426 = 0;
      v2428 = 0;
      v2277 = operator new();
      FullLayer<signed char>::FullLayer(v2277, v2276, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2278 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2280 = v2279;
      v2356 = (std::vector<int> *)v2089;
      *v2278 = v2277;
      v2281 = (char *)&v2278[v2279];
      v2428 = v2281;
      v2426 = v2278;
      v2427 = v2278 + 1;
      v2282 = operator new();
      Direct::Direct(v2282, v2276, v2276, 0);
      if (v2280 < 2)
      {
        v2284 = 2;
        if ((unint64_t)((v2281 - (char *)v2278) >> 2) > 2)
          v2284 = (v2281 - (char *)v2278) >> 2;
        if ((unint64_t)(v2281 - (char *)v2278) >= 0x7FFFFFFFFFFFFFF8)
          v2285 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2285 = v2284;
        if (v2285)
          v2285 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2285);
        else
          v2286 = 0;
        v2287 = 0;
        v2288 = v2285 + 8;
        v2289 = v2285 + 8 * v2286;
        *(_QWORD *)(v2285 + 8) = v2282;
        v2283 = (_QWORD *)(v2285 + 16);
        do
        {
          *(_QWORD *)(v2285 + v2287 * 8) = v2278[v2287];
          --v2287;
        }
        while (v2287 != -1);
        v2290 = v2426;
        v2426 = (void *)(v2288 - 8);
        v2428 = (char *)v2289;
        if (v2290)
          operator delete(v2290);
      }
      else
      {
        v2278[1] = v2282;
        v2283 = v2278 + 2;
      }
      v2427 = v2283;
      v2291 = (char **)operator new();
      Parallel::Parallel(v2291, (uint64_t)&v2426);
      if (v2270 >= (char ***)v2269)
      {
        v2293 = v2270 - v2091;
        v2294 = v2293 + 1;
        if ((unint64_t)(v2293 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2294)
          v2294 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2295 = v2294;
        if (v2295)
          v2295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2295);
        else
          v2296 = 0;
        v2297 = (char ***)(v2295 + 8 * v2293);
        v2269 = (char *)(v2295 + 8 * v2296);
        *v2297 = v2291;
        v2292 = v2297 + 1;
        while (v2270 != v2091)
        {
          v2298 = *--v2270;
          *--v2297 = v2298;
        }
        operator delete(v2091);
        v2091 = v2297;
      }
      else
      {
        *v2270 = v2291;
        v2292 = v2270 + 1;
      }
      v2299 = (*((uint64_t (**)(_QWORD))**(v2292 - 1) + 34))(*(v2292 - 1));
      v2424 = 0;
      v2423 = 0;
      v2425 = 0;
      v2300 = operator new();
      FullLayer<signed char>::FullLayer(v2300, v2299, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2301 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2303 = v2302;
      *v2301 = v2300;
      v2304 = (char *)&v2301[v2302];
      v2425 = v2304;
      v2423 = v2301;
      v2424 = v2301 + 1;
      v2305 = operator new();
      Direct::Direct(v2305, v2299, v2299, 0);
      if (v2303 < 2)
      {
        v2307 = 2;
        if ((unint64_t)((v2304 - (char *)v2301) >> 2) > 2)
          v2307 = (v2304 - (char *)v2301) >> 2;
        if ((unint64_t)(v2304 - (char *)v2301) >= 0x7FFFFFFFFFFFFFF8)
          v2308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2308 = v2307;
        if (v2308)
          v2308 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2308);
        else
          v2309 = 0;
        v2310 = 0;
        v2311 = v2308 + 8;
        v2312 = v2308 + 8 * v2309;
        *(_QWORD *)(v2308 + 8) = v2305;
        v2306 = (_QWORD *)(v2308 + 16);
        do
        {
          *(_QWORD *)(v2308 + v2310 * 8) = v2301[v2310];
          --v2310;
        }
        while (v2310 != -1);
        v2313 = v2423;
        v2423 = (void *)(v2311 - 8);
        v2425 = (char *)v2312;
        if (v2313)
          operator delete(v2313);
      }
      else
      {
        v2301[1] = v2305;
        v2306 = v2301 + 2;
      }
      v2424 = v2306;
      v2314 = (char **)operator new();
      Parallel::Parallel(v2314, (uint64_t)&v2423);
      if (v2292 >= (char ***)v2269)
      {
        v2316 = v2292 - v2091;
        v2317 = v2316 + 1;
        if ((unint64_t)(v2316 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2317)
          v2317 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2318 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2318 = v2317;
        if (v2318)
          v2318 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2318);
        else
          v2319 = 0;
        v2320 = (char ***)(v2318 + 8 * v2316);
        v2269 = (char *)(v2318 + 8 * v2319);
        *v2320 = v2314;
        v2315 = (uint64_t *)(v2320 + 1);
        while (v2292 != v2091)
        {
          v2321 = *--v2292;
          *--v2320 = v2321;
        }
        operator delete(v2091);
        v2091 = v2320;
      }
      else
      {
        *v2292 = v2314;
        v2315 = (uint64_t *)(v2292 + 1);
      }
      v2322 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2315 - 1) + 272))(*(v2315 - 1));
      v2323 = operator new();
      v2324 = *(_DWORD *)(v2366 + 4);
      v2422 = 0;
      v2420 = 0;
      v2421 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2420, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v2323, v2322, v2324, (_DWORD **)&v2420, 0, a2, 1, 0, 0);
      if (v2315 >= (uint64_t *)v2269)
      {
        v2326 = ((char *)v2315 - (char *)v2091) >> 3;
        v2327 = v2326 + 1;
        if ((unint64_t)(v2326 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2327)
          v2327 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2328 = v2327;
        if (v2328)
          v2328 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2328);
        v2329 = (uint64_t *)(v2328 + 8 * v2326);
        *v2329 = v2323;
        v2325 = (uint64_t)(v2329 + 1);
        while (v2315 != (uint64_t *)v2091)
        {
          v2330 = *--v2315;
          *--v2329 = v2330;
        }
        operator delete(v2091);
        v2091 = (char ***)v2329;
      }
      else
      {
        *v2315 = v2323;
        v2325 = (uint64_t)(v2315 + 1);
      }
      if (v2420)
      {
        v2421 = v2420;
        operator delete(v2420);
      }
      v2331 = operator new();
      v2332 = operator new();
      v2418 = 0;
      v2417 = 0;
      v2419 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2417, v2091, v2325, (v2325 - (uint64_t)v2091) >> 3);
      Stacked::Stacked(v2332, (uint64_t)&v2417);
      Reverse::Reverse(v2331, v2332, *(_DWORD *)(v2366 + 20));
      if (v2417)
      {
        v2418 = v2417;
        operator delete(v2417);
      }
      v2333 = operator new(8uLL);
      *v2333 = v2356;
      v2334 = operator new(0x10uLL);
      v2335 = v2334 + 2;
      *v2334 = *v2333;
      v2334[1] = v2331;
      v2416[0] = v2334;
      v2416[2] = v2334 + 2;
      operator delete(v2333);
      v2416[1] = v2335;
      v2336 = (char **)operator new();
      Parallel::Parallel(v2336, (uint64_t)v2416);
      v2338 = *(char ****)(v2366 + 112);
      v2337 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2338 >= v2337)
      {
        v2340 = *(_QWORD *)(v2366 + 104);
        v2341 = ((uint64_t)v2338 - v2340) >> 3;
        if ((unint64_t)(v2341 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2342 = v2337 - v2340;
        v2343 = v2342 >> 2;
        if (v2342 >> 2 <= (unint64_t)(v2341 + 1))
          v2343 = v2341 + 1;
        if ((unint64_t)v2342 >= 0x7FFFFFFFFFFFFFF8)
          v2344 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2344 = v2343;
        if (v2344)
          v2344 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2344);
        else
          v2345 = 0;
        v2346 = (char ***)(v2344 + 8 * v2341);
        v2347 = v2344 + 8 * v2345;
        *v2346 = v2336;
        v2339 = v2346 + 1;
        v2349 = *(char **)(v2366 + 104);
        v2348 = *(char **)(v2366 + 112);
        if (v2348 == v2349)
        {
          v2351 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2350 = (char **)*((_QWORD *)v2348 - 1);
            v2348 -= 8;
            *--v2346 = v2350;
          }
          while (v2348 != v2349);
          v2351 = (_QWORD *)v2366;
          v2348 = *(char **)(v2366 + 104);
        }
        v2351[13] = v2346;
        v2351[14] = v2339;
        v2351[15] = v2347;
        if (v2348)
          operator delete(v2348);
      }
      else
      {
        *v2338 = v2336;
        v2339 = v2338 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2339;
      if (v2416[0])
        operator delete(v2416[0]);
      if (v2423)
        operator delete(v2423);
      if (v2426)
        operator delete(v2426);
      if (v2429)
        operator delete(v2429);
      if (v2447)
        operator delete(v2447);
      if (v2453)
        operator delete(v2453);
      if (v2681)
        operator delete(v2681);
      if (v2091)
        operator delete(v2091);
      if (!v40)
        goto LABEL_2421;
      goto LABEL_2350;
    case 47:
      v37 = operator new();
      v38 = *(_DWORD *)a1;
      v39 = *(_DWORD *)(a1 + 4);
      v2415 = 0;
      __p = 0;
      v2414 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&__p, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v37, v38, v39, (_DWORD **)&__p, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v42 = v41;
      *v40 = v37;
      if (__p)
      {
        v2414 = __p;
        operator delete(__p);
      }
      v43 = operator new();
      v44 = *(_DWORD *)(a1 + 4);
      v2411 = 0;
      v2412 = 0;
      v2410 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2410, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v43, v44, v44, (_DWORD **)&v2410, 0, a2, 1, 0, 0);
      if (v42 < 2)
      {
        v630 = 2;
        if ((unint64_t)((8 * v42) >> 2) > 2)
          v630 = (8 * v42) >> 2;
        if ((unint64_t)(8 * v42) >= 0x7FFFFFFFFFFFFFF8)
          v631 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v631 = v630;
        if (v631)
          v631 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v631);
        v632 = 0;
        *(_QWORD *)(v631 + 8) = v43;
        v45 = v631 + 16;
        do
        {
          *(_QWORD *)(v631 + v632 * 8) = v40[v632];
          --v632;
        }
        while (v632 != -1);
        v633 = (uint64_t *)v631;
        operator delete(v40);
        v40 = v633;
      }
      else
      {
        v40[1] = v43;
        v45 = (uint64_t)(v40 + 2);
      }
      if (v2410)
      {
        v2411 = v2410;
        operator delete(v2410);
      }
      v634 = operator new();
      v2407 = 0;
      v2408 = 0;
      v2409 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2407, v40, v45, (v45 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v634, (uint64_t)&v2407);
      if (v2407)
      {
        v2408 = v2407;
        operator delete(v2407);
      }
      v635 = operator new();
      v636 = *(_DWORD *)a1;
      v637 = *(_DWORD *)(a1 + 4);
      v2405 = 0;
      v2406 = 0;
      v2404 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2404, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v635, v636, v637, (_DWORD **)&v2404, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v639 = v638;
      *v621 = v635;
      if (v2404)
      {
        v2405 = v2404;
        operator delete(v2404);
      }
      v640 = operator new();
      v641 = *(_DWORD *)(a1 + 4);
      v2402 = 0;
      v2403 = 0;
      v2401 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2401, v2362, (uint64_t)v2361);
      LSTM<signed char>::LSTM(v640, v641, v641, (_DWORD **)&v2401, 0, a2, 1, 0, 0);
      if (v639 < 2)
      {
        v697 = 2;
        if ((unint64_t)((8 * v639) >> 2) > 2)
          v697 = (8 * v639) >> 2;
        if ((unint64_t)(8 * v639) >= 0x7FFFFFFFFFFFFFF8)
          v698 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v698 = v697;
        if (v698)
          v698 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v698);
        v699 = 0;
        *(_QWORD *)(v698 + 8) = v640;
        v642 = v698 + 16;
        do
        {
          *(_QWORD *)(v698 + v699 * 8) = v621[v699];
          --v699;
        }
        while (v699 != -1);
        v700 = (uint64_t *)v698;
        operator delete(v621);
        v621 = v700;
      }
      else
      {
        v621[1] = v640;
        v642 = (uint64_t)(v621 + 2);
      }
      if (v2401)
      {
        v2402 = v2401;
        operator delete(v2401);
      }
      v701 = operator new();
      v702 = operator new();
      v2398 = 0;
      v2399 = 0;
      v2400 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2398, v621, v642, (v642 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v702, (uint64_t)&v2398);
      Reverse::Reverse(v701, v702, *(_DWORD *)(a1 + 20));
      if (v2398)
      {
        v2399 = v2398;
        operator delete(v2398);
      }
      v703 = operator new(8uLL);
      *v703 = v634;
      v704 = operator new(0x10uLL);
      v705 = v704 + 2;
      *v704 = *v703;
      v704[1] = v701;
      v2681 = v704;
      v2683 = v704 + 2;
      operator delete(v703);
      v2682 = v705;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v706 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v706)
      {
LABEL_2104:
        *v690 = v688;
        v1917 = v690 + 1;
      }
      else
      {
        v707 = *(_QWORD *)(v2366 + 104);
        v708 = ((uint64_t)v690 - v707) >> 3;
        if ((unint64_t)(v708 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v709 = v706 - v707;
        v710 = v709 >> 2;
        if (v709 >> 2 <= (unint64_t)(v708 + 1))
          v710 = v708 + 1;
        if ((unint64_t)v709 >= 0x7FFFFFFFFFFFFFF8)
          v711 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v711 = v710;
        if (v711)
          v711 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v711);
        else
          v712 = 0;
        v2032 = (char ***)(v711 + 8 * v708);
        v2033 = v711 + 8 * v712;
        *v2032 = v688;
        v1917 = v2032 + 1;
        v2037 = *(char **)(v2366 + 104);
        v2034 = *(char **)(v2366 + 112);
        if (v2034 == v2037)
        {
LABEL_2344:
          v2133 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2038 = (char **)*((_QWORD *)v2034 - 1);
            v2034 -= 8;
            *--v2032 = v2038;
          }
          while (v2034 != v2037);
LABEL_2343:
          v2133 = (_QWORD *)v2366;
          v2034 = *(char **)(v2366 + 104);
        }
        v2133[13] = v2032;
        v2133[14] = v1917;
        v2133[15] = v2033;
        if (v2034)
          operator delete(v2034);
      }
      *(_QWORD *)(v2366 + 112) = v1917;
      if (v2681)
        operator delete(v2681);
      operator delete(v621);
LABEL_2350:
      v1324 = v40;
      goto LABEL_2420;
    case 48:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v33 = operator new();
      FullLayer<signed char>::FullLayer(v33, *(_DWORD *)a1, *(_DWORD *)a1, 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v35 = *(uint64_t **)(a1 + 112);
      v34 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v35 >= v34)
      {
        v541 = *(_QWORD *)(a1 + 104);
        v542 = ((uint64_t)v35 - v541) >> 3;
        if ((unint64_t)(v542 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v543 = v34 - v541;
        v544 = v543 >> 2;
        if (v543 >> 2 <= (unint64_t)(v542 + 1))
          v544 = v542 + 1;
        if ((unint64_t)v543 >= 0x7FFFFFFFFFFFFFF8)
          v545 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v545 = v544;
        if (v545)
          v545 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v545);
        else
          v546 = 0;
        v978 = (uint64_t *)(v545 + 8 * v542);
        v979 = v545 + 8 * v546;
        *v978 = v33;
        v36 = v978 + 1;
        v981 = *(char **)(a1 + 104);
        v980 = *(char **)(a1 + 112);
        if (v980 == v981)
        {
          v983 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v982 = *((_QWORD *)v980 - 1);
            v980 -= 8;
            *--v978 = v982;
          }
          while (v980 != v981);
          v983 = (_QWORD *)a1;
          v980 = *(char **)(a1 + 104);
        }
        v983[13] = v978;
        v983[14] = v36;
        v983[15] = v979;
        if (v980)
          operator delete(v980);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      *(_QWORD *)(a1 + 112) = v36;
      v1054 = operator new();
      BatchNormalization<signed char>::BatchNormalization(v1054, *(_DWORD *)a1, (__int128 *)a2);
      v1056 = *(uint64_t **)(a1 + 112);
      v1055 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1056 >= v1055)
      {
        v1058 = *(_QWORD *)(a1 + 104);
        v1059 = ((uint64_t)v1056 - v1058) >> 3;
        if ((unint64_t)(v1059 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1060 = v1055 - v1058;
        v1061 = v1060 >> 2;
        if (v1060 >> 2 <= (unint64_t)(v1059 + 1))
          v1061 = v1059 + 1;
        if ((unint64_t)v1060 >= 0x7FFFFFFFFFFFFFF8)
          v1062 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1062 = v1061;
        if (v1062)
          v1062 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1062);
        else
          v1063 = 0;
        v1191 = (uint64_t *)(v1062 + 8 * v1059);
        v1192 = v1062 + 8 * v1063;
        *v1191 = v1054;
        v1057 = v1191 + 1;
        v1194 = *(char **)(a1 + 104);
        v1193 = *(char **)(a1 + 112);
        if (v1193 == v1194)
        {
          v1196 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1195 = *((_QWORD *)v1193 - 1);
            v1193 -= 8;
            *--v1191 = v1195;
          }
          while (v1193 != v1194);
          v1196 = (_QWORD *)a1;
          v1193 = *(char **)(a1 + 104);
        }
        v1196[13] = v1191;
        v1196[14] = v1057;
        v1196[15] = v1192;
        if (v1193)
          operator delete(v1193);
      }
      else
      {
        *v1056 = v1054;
        v1057 = v1056 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1057;
      v1292 = operator new();
      v1293 = *(_DWORD *)a1;
      v1294 = *(_DWORD *)(a1 + 4);
      v2396 = 0;
      v2397 = 0;
      v2395 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2395, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v1292, v1293, v1294, (_DWORD **)&v2395, 0, a2, 1, 0, 0);
      if (v2395)
      {
        v2396 = v2395;
        operator delete(v2395);
      }
      v1295 = operator new();
      v1296 = operator new();
      v1297 = *(_DWORD *)a1;
      v1298 = *(_DWORD *)(a1 + 4);
      v2393 = 0;
      v2394 = 0;
      v2392 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2392, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v1296, v1297, v1298, (_DWORD **)&v2392, 0, a2, 1, 0, 0);
      Reverse::Reverse(v1295, v1296, *(_DWORD *)(a1 + 20));
      if (v2392)
      {
        v2393 = v2392;
        operator delete(v2392);
      }
      v1299 = operator new(8uLL);
      *v1299 = v1292;
      v1300 = operator new(0x10uLL);
      v1301 = v1300 + 2;
      *v1300 = *v1299;
      v1300[1] = v1295;
      v2681 = v1300;
      v2683 = v1300 + 2;
      operator delete(v1299);
      v2682 = v1301;
      v1302 = (char **)operator new();
      Parallel::Parallel(v1302, (uint64_t)&v2681);
      v1304 = *(char ****)(v2366 + 112);
      v1303 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1304 >= v1303)
      {
        v1306 = *(_QWORD *)(v2366 + 104);
        v1307 = ((uint64_t)v1304 - v1306) >> 3;
        if ((unint64_t)(v1307 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1308 = v1303 - v1306;
        v1309 = v1308 >> 2;
        if (v1308 >> 2 <= (unint64_t)(v1307 + 1))
          v1309 = v1307 + 1;
        if ((unint64_t)v1308 >= 0x7FFFFFFFFFFFFFF8)
          v1310 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1310 = v1309;
        if (v1310)
          v1310 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1310);
        else
          v1311 = 0;
        v1865 = (char ***)(v1310 + 8 * v1307);
        v1866 = v1310 + 8 * v1311;
        *v1865 = v1302;
        v1305 = v1865 + 1;
        v1868 = *(char **)(v2366 + 104);
        v1867 = *(char **)(v2366 + 112);
        if (v1867 == v1868)
        {
          v1870 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1869 = (char **)*((_QWORD *)v1867 - 1);
            v1867 -= 8;
            *--v1865 = v1869;
          }
          while (v1867 != v1868);
          v1870 = (_QWORD *)v2366;
          v1867 = *(char **)(v2366 + 104);
        }
        v1870[13] = v1865;
        v1870[14] = v1305;
        v1870[15] = v1866;
        if (v1867)
          operator delete(v1867);
      }
      else
      {
        *v1304 = v1302;
        v1305 = v1304 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1305;
      if (v2681)
        operator delete(v2681);
      v1891 = operator new();
      FullLayer<signed char>::FullLayer(v1891, 2 * *(_DWORD *)(v2366 + 4), *(_DWORD *)(v2366 + 4), 0, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v1893 = *(uint64_t **)(v2366 + 112);
      v1892 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1893 >= v1892)
      {
        v1895 = *(_QWORD *)(v2366 + 104);
        v1896 = ((uint64_t)v1893 - v1895) >> 3;
        if ((unint64_t)(v1896 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1897 = v1892 - v1895;
        v1898 = v1897 >> 2;
        if (v1897 >> 2 <= (unint64_t)(v1896 + 1))
          v1898 = v1896 + 1;
        if ((unint64_t)v1897 >= 0x7FFFFFFFFFFFFFF8)
          v1899 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1899 = v1898;
        if (v1899)
          v1899 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1899);
        else
          v1900 = 0;
        v1950 = (uint64_t *)(v1899 + 8 * v1896);
        v1951 = v1899 + 8 * v1900;
        *v1950 = v1891;
        v1894 = v1950 + 1;
        v1953 = *(char **)(v2366 + 104);
        v1952 = *(char **)(v2366 + 112);
        if (v1952 == v1953)
        {
          v1955 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1954 = *((_QWORD *)v1952 - 1);
            v1952 -= 8;
            *--v1950 = v1954;
          }
          while (v1952 != v1953);
          v1955 = (_QWORD *)v2366;
          v1952 = *(char **)(v2366 + 104);
        }
        v1955[13] = v1950;
        v1955[14] = v1894;
        v1955[15] = v1951;
        if (v1952)
          operator delete(v1952);
      }
      else
      {
        *v1893 = v1891;
        v1894 = v1893 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1894;
      goto LABEL_2419;
    case 49:
      goto LABEL_12;
    case 50:
    case 52:
      if (v5 == 50)
        v13 = 27;
      else
        v13 = 101;
LABEL_12:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v15 = operator new();
      FullLayer<signed char>::FullLayer(v15, *(_DWORD *)a1, v13, 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v17 = *(uint64_t **)(a1 + 112);
      v16 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(_QWORD *)(a1 + 104);
        v20 = ((uint64_t)v17 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v21 = v16 - v19;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v23);
        else
          v24 = 0;
        v341 = (uint64_t *)(v23 + 8 * v20);
        v342 = v23 + 8 * v24;
        *v341 = v15;
        v18 = v341 + 1;
        v344 = *(char **)(a1 + 104);
        v343 = *(char **)(a1 + 112);
        if (v343 == v344)
        {
          v346 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v345 = *((_QWORD *)v343 - 1);
            v343 -= 8;
            *--v341 = v345;
          }
          while (v343 != v344);
          v346 = (_QWORD *)a1;
          v343 = *(char **)(a1 + 104);
        }
        v346[13] = v341;
        v346[14] = v18;
        v346[15] = v342;
        if (v343)
          operator delete(v343);
      }
      else
      {
        *v17 = v15;
        v18 = v17 + 1;
      }
      *(_QWORD *)(a1 + 112) = v18;
      v347 = operator new();
      BatchNormalization<signed char>::BatchNormalization(v347, v13, (__int128 *)a2);
      v349 = *(uint64_t **)(a1 + 112);
      v348 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v349 >= v348)
      {
        v351 = *(_QWORD *)(a1 + 104);
        v352 = ((uint64_t)v349 - v351) >> 3;
        if ((unint64_t)(v352 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v353 = v348 - v351;
        v354 = v353 >> 2;
        if (v353 >> 2 <= (unint64_t)(v352 + 1))
          v354 = v352 + 1;
        if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
          v355 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v355 = v354;
        if (v355)
          v355 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v355);
        else
          v356 = 0;
        v357 = (uint64_t *)(v355 + 8 * v352);
        v358 = v355 + 8 * v356;
        *v357 = v347;
        v350 = v357 + 1;
        v360 = *(char **)(a1 + 104);
        v359 = *(char **)(a1 + 112);
        if (v359 == v360)
        {
          v362 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v361 = *((_QWORD *)v359 - 1);
            v359 -= 8;
            *--v357 = v361;
          }
          while (v359 != v360);
          v362 = (_QWORD *)a1;
          v359 = *(char **)(a1 + 104);
        }
        v362[13] = v357;
        v362[14] = v350;
        v362[15] = v358;
        if (v359)
          operator delete(v359);
      }
      else
      {
        *v349 = v347;
        v350 = v349 + 1;
      }
      *(_QWORD *)(a1 + 112) = v350;
      v363 = operator new();
      v364 = *(_DWORD *)(a1 + 4);
      v2390 = 0;
      v2391 = 0;
      v2389 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2389, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v363, v13, v364, (_DWORD **)&v2389, 0, a2, 1, 0, 0);
      if (v2389)
      {
        v2390 = v2389;
        operator delete(v2389);
      }
      v365 = operator new();
      v366 = operator new();
      v367 = *(_DWORD *)(a1 + 4);
      v2387 = 0;
      v2388 = 0;
      v2386 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2386, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v366, v13, v367, (_DWORD **)&v2386, 0, a2, 1, 0, 0);
      Reverse::Reverse(v365, v366, *(_DWORD *)(a1 + 20));
      if (v2386)
      {
        v2387 = v2386;
        operator delete(v2386);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v368 = operator new(8uLL);
      *v368 = v363;
      v2681 = v368;
      v369 = operator new(0x10uLL);
      v370 = v369 + 2;
      *v369 = *v368;
      v369[1] = v365;
      v2681 = v369;
      v2683 = v369 + 2;
      operator delete(v368);
      v2682 = v370;
      v371 = (char **)operator new();
      Parallel::Parallel(v371, (uint64_t)&v2681);
      v373 = *(char ****)(a1 + 112);
      v372 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v373 >= v372)
      {
        v375 = *(_QWORD *)(a1 + 104);
        v376 = ((uint64_t)v373 - v375) >> 3;
        if ((unint64_t)(v376 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v377 = v372 - v375;
        v378 = v377 >> 2;
        if (v377 >> 2 <= (unint64_t)(v376 + 1))
          v378 = v376 + 1;
        if ((unint64_t)v377 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v378;
        if (v379)
          v379 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v379);
        else
          v380 = 0;
        v381 = (char ***)(v379 + 8 * v376);
        v382 = v379 + 8 * v380;
        *v381 = v371;
        v374 = v381 + 1;
        v384 = *(char **)(a1 + 104);
        v383 = *(char **)(a1 + 112);
        if (v383 == v384)
        {
          v386 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v385 = (char **)*((_QWORD *)v383 - 1);
            v383 -= 8;
            *--v381 = v385;
          }
          while (v383 != v384);
          v386 = (_QWORD *)a1;
          v383 = *(char **)(a1 + 104);
        }
        v386[13] = v381;
        v386[14] = v374;
        v386[15] = v382;
        if (v383)
          operator delete(v383);
      }
      else
      {
        *v373 = v371;
        v374 = v373 + 1;
      }
      *(_QWORD *)(a1 + 112) = v374;
      v387 = operator new();
      FullLayer<signed char>::FullLayer(v387, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v389 = *(uint64_t **)(a1 + 112);
      v388 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v389 >= v388)
      {
        v391 = *(_QWORD *)(a1 + 104);
        v392 = ((uint64_t)v389 - v391) >> 3;
        if ((unint64_t)(v392 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v393 = v388 - v391;
        v394 = v393 >> 2;
        if (v393 >> 2 <= (unint64_t)(v392 + 1))
          v394 = v392 + 1;
        if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFF8)
          v395 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v395 = v394;
        if (v395)
          v395 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v395);
        else
          v396 = 0;
        v397 = (uint64_t *)(v395 + 8 * v392);
        v398 = v395 + 8 * v396;
        *v397 = v387;
        v390 = v397 + 1;
        v400 = *(char **)(a1 + 104);
        v399 = *(char **)(a1 + 112);
        if (v399 == v400)
        {
          v402 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v401 = *((_QWORD *)v399 - 1);
            v399 -= 8;
            *--v397 = v401;
          }
          while (v399 != v400);
          v402 = (_QWORD *)a1;
          v399 = *(char **)(a1 + 104);
        }
        v402[13] = v397;
        v402[14] = v390;
        v402[15] = v398;
        if (v399)
          operator delete(v399);
      }
      else
      {
        *v389 = v387;
        v390 = v389 + 1;
      }
      *(_QWORD *)(a1 + 112) = v390;
      if (v2681)
        operator delete(v2681);
      v403 = operator new();
      BatchNormalization<signed char>::BatchNormalization(v403, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v405 = *(uint64_t **)(a1 + 112);
      v404 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v405 >= v404)
      {
        v407 = *(_QWORD *)(a1 + 104);
        v408 = ((uint64_t)v405 - v407) >> 3;
        if ((unint64_t)(v408 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v409 = v404 - v407;
        v410 = v409 >> 2;
        if (v409 >> 2 <= (unint64_t)(v408 + 1))
          v410 = v408 + 1;
        if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFF8)
          v411 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v411 = v410;
        if (v411)
          v411 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v411);
        else
          v412 = 0;
        v413 = (uint64_t *)(v411 + 8 * v408);
        v414 = v411 + 8 * v412;
        *v413 = v403;
        v406 = v413 + 1;
        v416 = *(char **)(a1 + 104);
        v415 = *(char **)(a1 + 112);
        if (v415 == v416)
        {
          v418 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v417 = *((_QWORD *)v415 - 1);
            v415 -= 8;
            *--v413 = v417;
          }
          while (v415 != v416);
          v418 = (_QWORD *)a1;
          v415 = *(char **)(a1 + 104);
        }
        v418[13] = v413;
        v418[14] = v406;
        v418[15] = v414;
        if (v415)
          operator delete(v415);
      }
      else
      {
        *v405 = v403;
        v406 = v405 + 1;
      }
      *(_QWORD *)(a1 + 112) = v406;
      v419 = operator new();
      v420 = *(_DWORD *)(a1 + 4);
      v2384 = 0;
      v2385 = 0;
      v2383 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2383, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v419, v420, v420, (_DWORD **)&v2383, 0, a2, 1, 0, 0);
      if (v2383)
      {
        v2384 = v2383;
        operator delete(v2383);
      }
      v421 = operator new();
      v422 = operator new();
      v423 = *(_DWORD *)(a1 + 4);
      v2381 = 0;
      v2382 = 0;
      v2380 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2380, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v422, v423, v423, (_DWORD **)&v2380, 0, a2, 1, 0, 0);
      Reverse::Reverse(v421, v422, *(_DWORD *)(a1 + 20));
      if (v2380)
      {
        v2381 = v2380;
        operator delete(v2380);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v424 = operator new(8uLL);
      *v424 = v419;
      v2681 = v424;
      v425 = operator new(0x10uLL);
      v426 = v425 + 2;
      *v425 = *v424;
      v425[1] = v421;
      v2681 = v425;
      v2683 = v425 + 2;
      operator delete(v424);
      v2682 = v426;
      v427 = (char **)operator new();
      Parallel::Parallel(v427, (uint64_t)&v2681);
      v429 = *(char ****)(a1 + 112);
      v428 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v429 >= v428)
      {
        v431 = *(_QWORD *)(a1 + 104);
        v432 = ((uint64_t)v429 - v431) >> 3;
        if ((unint64_t)(v432 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v433 = v428 - v431;
        v434 = v433 >> 2;
        if (v433 >> 2 <= (unint64_t)(v432 + 1))
          v434 = v432 + 1;
        if ((unint64_t)v433 >= 0x7FFFFFFFFFFFFFF8)
          v435 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v435 = v434;
        if (v435)
          v435 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v435);
        else
          v436 = 0;
        v437 = (char ***)(v435 + 8 * v432);
        v438 = v435 + 8 * v436;
        *v437 = v427;
        v430 = v437 + 1;
        v440 = *(char **)(a1 + 104);
        v439 = *(char **)(a1 + 112);
        if (v439 == v440)
        {
          v442 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v441 = (char **)*((_QWORD *)v439 - 1);
            v439 -= 8;
            *--v437 = v441;
          }
          while (v439 != v440);
          v442 = (_QWORD *)a1;
          v439 = *(char **)(a1 + 104);
        }
        v442[13] = v437;
        v442[14] = v430;
        v442[15] = v438;
        if (v439)
          operator delete(v439);
      }
      else
      {
        *v429 = v427;
        v430 = v429 + 1;
      }
      *(_QWORD *)(a1 + 112) = v430;
      v443 = operator new();
      FullLayer<signed char>::FullLayer(v443, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v445 = *(uint64_t **)(a1 + 112);
      v444 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v445 < v444)
        goto LABEL_2385;
      v446 = *(_QWORD *)(a1 + 104);
      v447 = ((uint64_t)v445 - v446) >> 3;
      if ((unint64_t)(v447 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v448 = v444 - v446;
      v449 = v448 >> 2;
      if (v448 >> 2 <= (unint64_t)(v447 + 1))
        v449 = v447 + 1;
      if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFF8)
        v450 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v450 = v449;
      if (v450)
        v450 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v450);
      else
        v451 = 0;
      v452 = (uint64_t *)(v450 + 8 * v447);
      v453 = v450 + 8 * v451;
      *v452 = v443;
      v454 = v452 + 1;
      v456 = *(char **)(a1 + 104);
      v455 = *(char **)(a1 + 112);
      if (v455 == v456)
        goto LABEL_2414;
      do
      {
        v457 = *((_QWORD *)v455 - 1);
        v455 -= 8;
        *--v452 = v457;
      }
      while (v455 != v456);
      goto LABEL_2413;
    case 51:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v25 = operator new();
      FullLayer<signed char>::FullLayer(v25, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v27 = *(uint64_t **)(a1 + 112);
      v26 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v27 >= v26)
      {
        v535 = *(_QWORD *)(a1 + 104);
        v536 = ((uint64_t)v27 - v535) >> 3;
        if ((unint64_t)(v536 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v537 = v26 - v535;
        v538 = v537 >> 2;
        if (v537 >> 2 <= (unint64_t)(v536 + 1))
          v538 = v536 + 1;
        if ((unint64_t)v537 >= 0x7FFFFFFFFFFFFFF8)
          v539 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v539 = v538;
        if (v539)
          v539 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v539);
        else
          v540 = 0;
        v972 = (uint64_t *)(v539 + 8 * v536);
        v973 = v539 + 8 * v540;
        *v972 = v25;
        v28 = v972 + 1;
        v975 = *(char **)(a1 + 104);
        v974 = *(char **)(a1 + 112);
        if (v974 == v975)
        {
          v977 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v976 = *((_QWORD *)v974 - 1);
            v974 -= 8;
            *--v972 = v976;
          }
          while (v974 != v975);
          v977 = (_QWORD *)a1;
          v974 = *(char **)(a1 + 104);
        }
        v977[13] = v972;
        v977[14] = v28;
        v977[15] = v973;
        if (v974)
          operator delete(v974);
      }
      else
      {
        *v27 = v25;
        v28 = v27 + 1;
      }
      *(_QWORD *)(a1 + 112) = v28;
      v1044 = operator new();
      BatchNormalization<signed char>::BatchNormalization(v1044, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v1046 = *(uint64_t **)(a1 + 112);
      v1045 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1046 >= v1045)
      {
        v1048 = *(_QWORD *)(a1 + 104);
        v1049 = ((uint64_t)v1046 - v1048) >> 3;
        if ((unint64_t)(v1049 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1050 = v1045 - v1048;
        v1051 = v1050 >> 2;
        if (v1050 >> 2 <= (unint64_t)(v1049 + 1))
          v1051 = v1049 + 1;
        if ((unint64_t)v1050 >= 0x7FFFFFFFFFFFFFF8)
          v1052 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1052 = v1051;
        if (v1052)
          v1052 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1052);
        else
          v1053 = 0;
        v1179 = (uint64_t *)(v1052 + 8 * v1049);
        v1180 = v1052 + 8 * v1053;
        *v1179 = v1044;
        v1047 = v1179 + 1;
        v1182 = *(char **)(a1 + 104);
        v1181 = *(char **)(a1 + 112);
        if (v1181 == v1182)
        {
          v1184 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1183 = *((_QWORD *)v1181 - 1);
            v1181 -= 8;
            *--v1179 = v1183;
          }
          while (v1181 != v1182);
          v1184 = (_QWORD *)a1;
          v1181 = *(char **)(a1 + 104);
        }
        v1184[13] = v1179;
        v1184[14] = v1047;
        v1184[15] = v1180;
        if (v1181)
          operator delete(v1181);
      }
      else
      {
        *v1046 = v1044;
        v1047 = v1046 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1047;
      v1263 = operator new();
      v1264 = *(_DWORD *)(a1 + 4);
      v2378 = 0;
      v2379 = 0;
      v2377 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2377, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v1263, v1264, v1264, (_DWORD **)&v2377, 0, a2, 1, 0, 0);
      if (v2377)
      {
        v2378 = v2377;
        operator delete(v2377);
      }
      v1265 = operator new();
      v1266 = operator new();
      v1267 = *(_DWORD *)(a1 + 4);
      v2375 = 0;
      v2376 = 0;
      v2374 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2374, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v1266, v1267, v1267, (_DWORD **)&v2374, 0, a2, 1, 0, 0);
      Reverse::Reverse(v1265, v1266, *(_DWORD *)(a1 + 20));
      if (v2374)
      {
        v2375 = v2374;
        operator delete(v2374);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v1268 = operator new(8uLL);
      *v1268 = v1263;
      v2681 = v1268;
      v1269 = operator new(0x10uLL);
      v1270 = v1269 + 2;
      *v1269 = *v1268;
      v1269[1] = v1265;
      v2681 = v1269;
      v2683 = v1269 + 2;
      operator delete(v1268);
      v2682 = v1270;
      v1271 = (char **)operator new();
      Parallel::Parallel(v1271, (uint64_t)&v2681);
      v1273 = *(char ****)(a1 + 112);
      v1272 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1273 >= v1272)
      {
        v1275 = *(_QWORD *)(a1 + 104);
        v1276 = ((uint64_t)v1273 - v1275) >> 3;
        if ((unint64_t)(v1276 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1277 = v1272 - v1275;
        v1278 = v1277 >> 2;
        if (v1277 >> 2 <= (unint64_t)(v1276 + 1))
          v1278 = v1276 + 1;
        if ((unint64_t)v1277 >= 0x7FFFFFFFFFFFFFF8)
          v1279 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1279 = v1278;
        if (v1279)
          v1279 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1279);
        else
          v1280 = 0;
        v1859 = (char ***)(v1279 + 8 * v1276);
        v1860 = v1279 + 8 * v1280;
        *v1859 = v1271;
        v1274 = v1859 + 1;
        v1862 = *(char **)(a1 + 104);
        v1861 = *(char **)(a1 + 112);
        if (v1861 == v1862)
        {
          v1864 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1863 = (char **)*((_QWORD *)v1861 - 1);
            v1861 -= 8;
            *--v1859 = v1863;
          }
          while (v1861 != v1862);
          v1864 = (_QWORD *)a1;
          v1861 = *(char **)(a1 + 104);
        }
        v1864[13] = v1859;
        v1864[14] = v1274;
        v1864[15] = v1860;
        if (v1861)
          operator delete(v1861);
      }
      else
      {
        *v1273 = v1271;
        v1274 = v1273 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1274;
      v1881 = operator new();
      FullLayer<signed char>::FullLayer(v1881, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v1883 = *(uint64_t **)(a1 + 112);
      v1882 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1883 >= v1882)
      {
        v1885 = *(_QWORD *)(a1 + 104);
        v1886 = ((uint64_t)v1883 - v1885) >> 3;
        if ((unint64_t)(v1886 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1887 = v1882 - v1885;
        v1888 = v1887 >> 2;
        if (v1887 >> 2 <= (unint64_t)(v1886 + 1))
          v1888 = v1886 + 1;
        if ((unint64_t)v1887 >= 0x7FFFFFFFFFFFFFF8)
          v1889 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1889 = v1888;
        if (v1889)
          v1889 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1889);
        else
          v1890 = 0;
        v1944 = (uint64_t *)(v1889 + 8 * v1886);
        v1945 = v1889 + 8 * v1890;
        *v1944 = v1881;
        v1884 = v1944 + 1;
        v1947 = *(char **)(a1 + 104);
        v1946 = *(char **)(a1 + 112);
        if (v1946 == v1947)
        {
          v1949 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1948 = *((_QWORD *)v1946 - 1);
            v1946 -= 8;
            *--v1944 = v1948;
          }
          while (v1946 != v1947);
          v1949 = (_QWORD *)a1;
          v1946 = *(char **)(a1 + 104);
        }
        v1949[13] = v1944;
        v1949[14] = v1884;
        v1949[15] = v1945;
        if (v1946)
          operator delete(v1946);
      }
      else
      {
        *v1883 = v1881;
        v1884 = v1883 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1884;
      if (v2681)
        operator delete(v2681);
      v1980 = operator new();
      BatchNormalization<signed char>::BatchNormalization(v1980, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v1982 = *(uint64_t **)(a1 + 112);
      v1981 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1982 >= v1981)
      {
        v1984 = *(_QWORD *)(a1 + 104);
        v1985 = ((uint64_t)v1982 - v1984) >> 3;
        if ((unint64_t)(v1985 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1986 = v1981 - v1984;
        v1987 = v1986 >> 2;
        if (v1986 >> 2 <= (unint64_t)(v1985 + 1))
          v1987 = v1985 + 1;
        if ((unint64_t)v1986 >= 0x7FFFFFFFFFFFFFF8)
          v1988 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1988 = v1987;
        if (v1988)
          v1988 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1988);
        else
          v1989 = 0;
        v2008 = (uint64_t *)(v1988 + 8 * v1985);
        v2009 = v1988 + 8 * v1989;
        *v2008 = v1980;
        v1983 = v2008 + 1;
        v2011 = *(char **)(a1 + 104);
        v2010 = *(char **)(a1 + 112);
        if (v2010 == v2011)
        {
          v2013 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2012 = *((_QWORD *)v2010 - 1);
            v2010 -= 8;
            *--v2008 = v2012;
          }
          while (v2010 != v2011);
          v2013 = (_QWORD *)a1;
          v2010 = *(char **)(a1 + 104);
        }
        v2013[13] = v2008;
        v2013[14] = v1983;
        v2013[15] = v2009;
        if (v2010)
          operator delete(v2010);
      }
      else
      {
        *v1982 = v1980;
        v1983 = v1982 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1983;
      v2014 = operator new();
      v2015 = *(_DWORD *)(a1 + 4);
      v2372 = 0;
      v2373 = 0;
      v2371 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2371, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v2014, v2015, v2015, (_DWORD **)&v2371, 0, a2, 1, 0, 0);
      if (v2371)
      {
        v2372 = v2371;
        operator delete(v2371);
      }
      v2016 = operator new();
      v2017 = operator new();
      v2018 = *(_DWORD *)(a1 + 4);
      v2369 = 0;
      v2370 = 0;
      v2368 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2368, v14, (uint64_t)v14 + 12);
      LSTM<signed char>::LSTM(v2017, v2018, v2018, (_DWORD **)&v2368, 0, a2, 1, 0, 0);
      Reverse::Reverse(v2016, v2017, *(_DWORD *)(a1 + 20));
      if (v2368)
      {
        v2369 = v2368;
        operator delete(v2368);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v2019 = operator new(8uLL);
      *v2019 = v2014;
      v2681 = v2019;
      v2020 = operator new(0x10uLL);
      v2021 = v2020 + 2;
      *v2020 = *v2019;
      v2020[1] = v2016;
      v2681 = v2020;
      v2683 = v2020 + 2;
      operator delete(v2019);
      v2682 = v2021;
      v2022 = (char **)operator new();
      Parallel::Parallel(v2022, (uint64_t)&v2681);
      v2024 = *(char ****)(a1 + 112);
      v2023 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v2024 >= v2023)
      {
        v2026 = *(_QWORD *)(a1 + 104);
        v2027 = ((uint64_t)v2024 - v2026) >> 3;
        if ((unint64_t)(v2027 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2028 = v2023 - v2026;
        v2029 = v2028 >> 2;
        if (v2028 >> 2 <= (unint64_t)(v2027 + 1))
          v2029 = v2027 + 1;
        if ((unint64_t)v2028 >= 0x7FFFFFFFFFFFFFF8)
          v2030 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2030 = v2029;
        if (v2030)
          v2030 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2030);
        else
          v2031 = 0;
        v2159 = (char ***)(v2030 + 8 * v2027);
        v2160 = v2030 + 8 * v2031;
        *v2159 = v2022;
        v2025 = v2159 + 1;
        v2162 = *(char **)(a1 + 104);
        v2161 = *(char **)(a1 + 112);
        if (v2161 == v2162)
        {
          v2164 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2163 = (char **)*((_QWORD *)v2161 - 1);
            v2161 -= 8;
            *--v2159 = v2163;
          }
          while (v2161 != v2162);
          v2164 = (_QWORD *)a1;
          v2161 = *(char **)(a1 + 104);
        }
        v2164[13] = v2159;
        v2164[14] = v2025;
        v2164[15] = v2160;
        if (v2161)
          operator delete(v2161);
      }
      else
      {
        *v2024 = v2022;
        v2025 = v2024 + 1;
      }
      *(_QWORD *)(a1 + 112) = v2025;
      v443 = operator new();
      FullLayer<signed char>::FullLayer(v443, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v445 = *(uint64_t **)(a1 + 112);
      v2165 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v445 >= v2165)
      {
        v2166 = *(_QWORD *)(a1 + 104);
        v2167 = ((uint64_t)v445 - v2166) >> 3;
        if ((unint64_t)(v2167 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2168 = v2165 - v2166;
        v2169 = v2168 >> 2;
        if (v2168 >> 2 <= (unint64_t)(v2167 + 1))
          v2169 = v2167 + 1;
        if ((unint64_t)v2168 >= 0x7FFFFFFFFFFFFFF8)
          v2170 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2170 = v2169;
        if (v2170)
          v2170 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2170);
        else
          v2171 = 0;
        v452 = (uint64_t *)(v2170 + 8 * v2167);
        v453 = v2170 + 8 * v2171;
        *v452 = v443;
        v454 = v452 + 1;
        v2178 = *(char **)(a1 + 104);
        v455 = *(char **)(a1 + 112);
        if (v455 == v2178)
        {
LABEL_2414:
          v2180 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2179 = *((_QWORD *)v455 - 1);
            v455 -= 8;
            *--v452 = v2179;
          }
          while (v455 != v2178);
LABEL_2413:
          v2180 = (_QWORD *)a1;
          v455 = *(char **)(a1 + 104);
        }
        v2180[13] = v452;
        v2180[14] = v454;
        v2180[15] = v453;
        if (v455)
          operator delete(v455);
      }
      else
      {
LABEL_2385:
        *v445 = v443;
        v454 = v445 + 1;
      }
      *(_QWORD *)(a1 + 112) = v454;
      v2071 = v2681;
      if (v2681)
LABEL_2418:
        operator delete(v2071);
LABEL_2419:
      v1324 = v14;
LABEL_2420:
      operator delete(v1324);
LABEL_2421:
      v154 = 1;
LABEL_2422:
      if (*(_QWORD *)(a2 + 56))
        goto LABEL_2423;
      if (*(_BYTE *)(v2366 + 16))
      {
        v2182 = *(_DWORD *)(a3 + 8);
        v2183 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2366 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8));
        v2184 = operator new();
        SoftMax<signed char>::SoftMax(v2184, v2183, v2182, a2, v154, 0);
        v2185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
        v2187 = v2185;
        *(_QWORD *)v2185 = v2184;
        v2188 = (uint64_t)(v2185 + 8);
        if (*(int *)(a3 + 8) >= 1)
        {
          v2189 = 0;
          v2190 = v2185 + 8;
          v2191 = &v2185[8 * v2186];
          v2192 = a3;
          v2193 = v154;
          do
          {
            v2194 = *(_DWORD *)(*(_QWORD *)(v2192 + 16) + 4 * v2189);
            v2195 = operator new();
            SoftMax<signed char>::SoftMax(v2195, v2183, v2194, a2, v154, 0);
            if (v2190 >= v2191)
            {
              v2196 = (v2190 - v2187) >> 3;
              v2197 = v2196 + 1;
              if ((unint64_t)(v2196 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if ((v2191 - v2187) >> 2 > v2197)
                v2197 = (v2191 - v2187) >> 2;
              if ((unint64_t)(v2191 - v2187) >= 0x7FFFFFFFFFFFFFF8)
                v2198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v2198 = v2197;
              if (v2198)
                v2198 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2198);
              else
                v2199 = 0;
              v2200 = (uint64_t *)(v2198 + 8 * v2196);
              *v2200 = v2195;
              v2188 = (uint64_t)(v2200 + 1);
              while (v2190 != v2187)
              {
                v2201 = *((_QWORD *)v2190 - 1);
                v2190 -= 8;
                *--v2200 = v2201;
              }
              v2191 = (char *)(v2198 + 8 * v2199);
              if (v2187)
                operator delete(v2187);
              v2187 = (char *)v2200;
              v154 = v2193;
            }
            else
            {
              *(_QWORD *)v2190 = v2195;
              v2188 = (uint64_t)(v2190 + 8);
            }
            ++v2189;
            v2192 = a3;
            v2190 = (char *)v2188;
          }
          while (v2189 < *(int *)(a3 + 8));
        }
        v2202 = operator new();
        v2203 = *(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8);
        *(_OWORD *)(v2202 + 16) = 0u;
        *(_QWORD *)(v2202 + 48) = 0;
        *(_OWORD *)(v2202 + 56) = 0u;
        *(_DWORD *)(v2202 + 72) = 0;
        *(_OWORD *)(v2202 + 96) = 0u;
        *(_OWORD *)(v2202 + 112) = 0u;
        *(_OWORD *)(v2202 + 128) = 0u;
        *(_OWORD *)(v2202 + 144) = 0u;
        *(_OWORD *)(v2202 + 160) = 0u;
        *(_OWORD *)(v2202 + 176) = 0u;
        *(_OWORD *)(v2202 + 192) = 0u;
        *(_OWORD *)(v2202 + 208) = 0u;
        *(_OWORD *)(v2202 + 80) = 0u;
        *(_OWORD *)(v2202 + 248) = 0u;
        *(_OWORD *)(v2202 + 232) = 0u;
        *(_OWORD *)(v2202 + 264) = 0u;
        *(_QWORD *)v2202 = off_1E2D55D90;
        *(_QWORD *)(v2202 + 8) = 0;
        v2204 = (void **)(v2202 + 352);
        *(_OWORD *)(v2202 + 280) = 0u;
        *(_OWORD *)(v2202 + 296) = 0u;
        *(_OWORD *)(v2202 + 312) = 0u;
        *(_OWORD *)(v2202 + 352) = 0u;
        *(_OWORD *)(v2202 + 368) = 0u;
        *(_OWORD *)(v2202 + 384) = 0u;
        *(_OWORD *)(v2202 + 400) = 0u;
        *(_OWORD *)(v2202 + 416) = 0u;
        *(_OWORD *)(v2202 + 432) = 0u;
        *(_OWORD *)(v2202 + 448) = 0u;
        *(_OWORD *)(v2202 + 464) = 0u;
        *(_OWORD *)(v2202 + 480) = 0u;
        *(_QWORD *)(v2202 + 496) = a3;
        *(_QWORD *)(v2202 + 520) = 0;
        *(_OWORD *)(v2202 + 504) = 0u;
        *(_QWORD *)(v2202 + 552) = 0;
        *(_OWORD *)(v2202 + 536) = 0u;
        *(_BYTE *)(v2202 + 41) = 0;
        *(_BYTE *)(v2202 + 529) = v2358;
        *(_OWORD *)(v2202 + 332) = xmmword_191A936E0;
        *(_DWORD *)(v2202 + 328) = v2357;
        *(_BYTE *)(v2202 + 528) = 0;
        std::vector<NeuralNetwork *>::__assign_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>((char *)(v2202 + 80), v2187, v2188, (v2188 - (uint64_t)v2187) >> 3);
        *(_QWORD *)(v2202 + 224) = v2203;
        std::string::basic_string[abi:ne180100]<0>(&v2681, "From constructor");
        ParallelSelector<float>::init(v2202);
        if (SHIBYTE(v2683) < 0)
          operator delete(v2681);
        *(_QWORD *)(v2202 + 264) = *(_QWORD *)(v2202 + 256);
        *(_QWORD *)(v2202 + 240) = *(_QWORD *)(v2202 + 232);
        *(_QWORD *)(v2202 + 360) = *(_QWORD *)(v2202 + 352);
        v2205 = *(_QWORD *)(v2202 + 80);
        if (*(_QWORD *)(v2202 + 88) != v2205)
        {
          v2206 = 0;
          v2207 = (void **)(v2202 + 256);
          do
          {
            v2208 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2205 + 8 * v2206) + 272))(*(_QWORD *)(v2205 + 8 * v2206));
            v2209 = v2208;
            v2211 = *(char **)(v2202 + 264);
            v2210 = *(_QWORD *)(v2202 + 272);
            if ((unint64_t)v2211 >= v2210)
            {
              v2213 = (char *)*v2207;
              v2214 = (v2211 - (_BYTE *)*v2207) >> 2;
              v2215 = v2214 + 1;
              if ((unint64_t)(v2214 + 1) >> 62)
                goto LABEL_2653;
              v2216 = v2210 - (_QWORD)v2213;
              if (v2216 >> 1 > v2215)
                v2215 = v2216 >> 1;
              if ((unint64_t)v2216 >= 0x7FFFFFFFFFFFFFFCLL)
                v2217 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v2217 = v2215;
              if (v2217)
              {
                v2217 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v2217);
                v2213 = *(char **)(v2202 + 256);
                v2211 = *(char **)(v2202 + 264);
              }
              else
              {
                v2218 = 0;
              }
              v2219 = (_DWORD *)(v2217 + 4 * v2214);
              *v2219 = v2209;
              v2212 = v2219 + 1;
              while (v2211 != v2213)
              {
                v2220 = *((_DWORD *)v2211 - 1);
                v2211 -= 4;
                *--v2219 = v2220;
              }
              *(_QWORD *)(v2202 + 256) = v2219;
              *(_QWORD *)(v2202 + 264) = v2212;
              *(_QWORD *)(v2202 + 272) = v2217 + 4 * v2218;
              if (v2213)
                operator delete(v2213);
            }
            else
            {
              *(_DWORD *)v2211 = v2208;
              v2212 = v2211 + 4;
            }
            *(_QWORD *)(v2202 + 264) = v2212;
            if (v2206)
            {
              v2222 = *(char **)(v2202 + 360);
              v2221 = *(_QWORD *)(v2202 + 368);
              if ((unint64_t)v2222 >= v2221)
              {
                v2224 = (char *)*v2204;
                v2225 = (v2222 - (_BYTE *)*v2204) >> 2;
                v2226 = v2225 + 1;
                if ((unint64_t)(v2225 + 1) >> 62)
LABEL_2653:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v2227 = v2221 - (_QWORD)v2224;
                if (v2227 >> 1 > v2226)
                  v2226 = v2227 >> 1;
                if ((unint64_t)v2227 >= 0x7FFFFFFFFFFFFFFCLL)
                  v2228 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v2228 = v2226;
                if (v2228)
                {
                  v2228 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v2228);
                  v2224 = *(char **)(v2202 + 352);
                  v2222 = *(char **)(v2202 + 360);
                }
                else
                {
                  v2229 = 0;
                }
                v2230 = (_DWORD *)(v2228 + 4 * v2225);
                *v2230 = v2206;
                v2223 = v2230 + 1;
                while (v2222 != v2224)
                {
                  v2231 = *((_DWORD *)v2222 - 1);
                  v2222 -= 4;
                  *--v2230 = v2231;
                }
                *(_QWORD *)(v2202 + 352) = v2230;
                *(_QWORD *)(v2202 + 360) = v2223;
                *(_QWORD *)(v2202 + 368) = v2228 + 4 * v2229;
                if (v2224)
                  operator delete(v2224);
              }
              else
              {
                *(_DWORD *)v2222 = v2206;
                v2223 = v2222 + 4;
              }
              *(_QWORD *)(v2202 + 360) = v2223;
            }
            ++v2206;
            v2205 = *(_QWORD *)(v2202 + 80);
          }
          while (v2206 < (*(_QWORD *)(v2202 + 88) - v2205) >> 3);
        }
        std::vector<int>::resize((std::vector<int> *)(v2202 + 376), maxFeatureVectors);
        std::vector<int>::resize((std::vector<int> *)(v2202 + 400), maxFeatureVectors);
        std::vector<int>::resize((std::vector<int> *)(v2202 + 424), maxFeatureVectors);
        std::vector<std::vector<int>>::resize((uint64_t *)(v2202 + 536), (uint64_t)(*(_QWORD *)(v2202 + 88) - *(_QWORD *)(v2202 + 80)) >> 3);
        v2233 = *(uint64_t **)(v2366 + 112);
        v2232 = *(_QWORD *)(v2366 + 120);
        if ((unint64_t)v2233 >= v2232)
        {
          v2240 = *(_QWORD *)(v2366 + 104);
          v2241 = ((uint64_t)v2233 - v2240) >> 3;
          if ((unint64_t)(v2241 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v2242 = v2232 - v2240;
          v2243 = v2242 >> 2;
          if (v2242 >> 2 <= (unint64_t)(v2241 + 1))
            v2243 = v2241 + 1;
          if ((unint64_t)v2242 >= 0x7FFFFFFFFFFFFFF8)
            v2244 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v2244 = v2243;
          if (v2244)
            v2244 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2244);
          else
            v2245 = 0;
          v2252 = (uint64_t *)(v2244 + 8 * v2241);
          v2253 = v2244 + 8 * v2245;
          *v2252 = v2202;
          v2234 = v2252 + 1;
          v2255 = *(char **)(v2366 + 104);
          v2254 = *(char **)(v2366 + 112);
          if (v2254 == v2255)
          {
            v2257 = (_QWORD *)v2366;
          }
          else
          {
            do
            {
              v2256 = *((_QWORD *)v2254 - 1);
              v2254 -= 8;
              *--v2252 = v2256;
            }
            while (v2254 != v2255);
            v2257 = (_QWORD *)v2366;
            v2254 = *(char **)(v2366 + 104);
          }
          v2257[13] = v2252;
          v2257[14] = v2234;
          v2257[15] = v2253;
          if (v2254)
            operator delete(v2254);
        }
        else
        {
          *v2233 = v2202;
          v2234 = v2233 + 1;
        }
        *(_QWORD *)(v2366 + 112) = v2234;
        if (v2187)
          operator delete(v2187);
      }
      else
      {
        v2235 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2366 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8));
        v2236 = operator new();
        SoftMax<signed char>::SoftMax(v2236, v2235, *(_DWORD *)(v2366 + 8), a2, v154, 0);
        v2238 = *(uint64_t **)(v2366 + 112);
        v2237 = *(_QWORD *)(v2366 + 120);
        if ((unint64_t)v2238 >= v2237)
        {
          v2246 = *(_QWORD *)(v2366 + 104);
          v2247 = ((uint64_t)v2238 - v2246) >> 3;
          if ((unint64_t)(v2247 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v2248 = v2237 - v2246;
          v2249 = v2248 >> 2;
          if (v2248 >> 2 <= (unint64_t)(v2247 + 1))
            v2249 = v2247 + 1;
          if ((unint64_t)v2248 >= 0x7FFFFFFFFFFFFFF8)
            v2250 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v2250 = v2249;
          if (v2250)
            v2250 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2250);
          else
            v2251 = 0;
          v2258 = (uint64_t *)(v2250 + 8 * v2247);
          v2259 = v2250 + 8 * v2251;
          *v2258 = v2236;
          v2239 = v2258 + 1;
          v2261 = *(char **)(v2366 + 104);
          v2260 = *(char **)(v2366 + 112);
          if (v2260 == v2261)
          {
            v2263 = (_QWORD *)v2366;
          }
          else
          {
            do
            {
              v2262 = *((_QWORD *)v2260 - 1);
              v2260 -= 8;
              *--v2258 = v2262;
            }
            while (v2260 != v2261);
            v2263 = (_QWORD *)v2366;
            v2260 = *(char **)(v2366 + 104);
          }
          v2263[13] = v2258;
          v2263[14] = v2239;
          v2263[15] = v2259;
          if (v2260)
            operator delete(v2260);
        }
        else
        {
          *v2238 = v2236;
          v2239 = v2238 + 1;
        }
        *(_QWORD *)(v2366 + 112) = v2239;
      }
LABEL_2423:
      v2181 = operator new();
      memset(v2367, 0, sizeof(v2367));
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v2367, *(const void **)(v2366 + 104), *(_QWORD *)(v2366 + 112), (uint64_t)(*(_QWORD *)(v2366 + 112) - *(_QWORD *)(v2366 + 104)) >> 3);
      Stacked::Stacked(v2181, (uint64_t)v2367);
      *(_QWORD *)(v2366 + 40) = v2181;
      if (v2367[0])
      {
        operator delete(v2367[0]);
        if (!*(_QWORD *)(v2366 + 40))
        {
          v11 = 4;
LABEL_2656:
          exitFramework(v11);
        }
      }
      (*(void (**)(_QWORD))(***(_QWORD ***)(v2366 + 104) + 8))(**(_QWORD **)(v2366 + 104));
      *(_BYTE *)(v2366 + 28) = v2359;
      (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v2366 + 40) + 280))(*(_QWORD *)(v2366 + 40), v2359 != 0);
      *(_QWORD *)(*(_QWORD *)(v2366 + 40) + 32) = *(_QWORD *)(a2 + 16);
      operator delete(v2360);
      operator delete(v2362);
      return;
    default:
      goto LABEL_2656;
  }
}

void sub_191537060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v26;

  MEMORY[0x19401CD90](v20, 0x10B1C40EA042734);
  operator delete(v21);
  if (STACK[0x260])
    operator delete((void *)STACK[0x260]);
  if (STACK[0x278])
    operator delete((void *)STACK[0x278]);
  if (STACK[0x290])
    operator delete((void *)STACK[0x290]);
  if (STACK[0x320])
    operator delete((void *)STACK[0x320]);
  if (STACK[0x350])
    operator delete((void *)STACK[0x350]);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    operator delete(v26);
    if (!v23)
      goto LABEL_15;
  }
  else if (!v23)
  {
LABEL_15:
    if (!v22)
    {
LABEL_19:
      operator delete(a18);
      operator delete(a20);
      _Unwind_Resume(a1);
    }
LABEL_18:
    operator delete(v22);
    goto LABEL_19;
  }
  operator delete(v23);
  if (!v22)
    goto LABEL_19;
  goto LABEL_18;
}

void SentenceRecognizer::init<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  unint64_t v92;
  uint64_t *v93;
  void **v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  char **v130;
  unint64_t v131;
  char ***v132;
  _QWORD *v133;
  uint64_t v134;
  int v135;
  int v136;
  unint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  char v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  _QWORD *v227;
  _DWORD *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  void *v232;
  char **v233;
  unint64_t v234;
  char ***v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char ***v243;
  char *v244;
  char *v245;
  char **v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  unint64_t v263;
  uint64_t *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  _QWORD *v273;
  uint64_t v274;
  int v275;
  int v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  _QWORD *v285;
  uint64_t v286;
  int v287;
  int v288;
  unint64_t v289;
  uint64_t *v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t *v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t *v298;
  _QWORD *v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t *v310;
  _QWORD *v311;
  uint64_t v312;
  int v313;
  int v314;
  unint64_t v315;
  uint64_t *v316;
  _QWORD *v317;
  uint64_t v318;
  int v319;
  int v320;
  int v321;
  unint64_t v322;
  uint64_t *v323;
  _QWORD *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t *v327;
  _QWORD *v328;
  uint64_t v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  int v335;
  int v336;
  int v337;
  unint64_t v338;
  uint64_t *v339;
  _QWORD *v340;
  uint64_t *v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t *v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  unint64_t v358;
  char *v359;
  char *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  char **v371;
  unint64_t v372;
  char ***v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  char ***v381;
  unint64_t v382;
  char *v383;
  char *v384;
  char **v385;
  _QWORD *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t *v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  unint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  unint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  _QWORD *v424;
  _QWORD *v425;
  _QWORD *v426;
  char **v427;
  unint64_t v428;
  char ***v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  char ***v437;
  unint64_t v438;
  char *v439;
  char *v440;
  char **v441;
  _QWORD *v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t *v452;
  unint64_t v453;
  _QWORD *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  void **v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  void **v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  int v666;
  _QWORD *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t *v682;
  uint64_t v683;
  uint64_t v684;
  _QWORD *v685;
  _QWORD *v686;
  _QWORD *v687;
  char **v688;
  unint64_t v689;
  char ***v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  _QWORD *v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  uint64_t v718;
  _QWORD *v719;
  _QWORD *v720;
  _QWORD *v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  _QWORD *v735;
  _QWORD *v736;
  _QWORD *v737;
  char **v738;
  unint64_t v739;
  char ***v740;
  _QWORD *v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t *v748;
  unint64_t v749;
  char *v750;
  char *v751;
  uint64_t v752;
  _QWORD *v753;
  uint64_t *v754;
  unint64_t v755;
  _QWORD *v756;
  char *v757;
  char *v758;
  uint64_t v759;
  uint64_t *v760;
  unint64_t v761;
  char *v762;
  char *v763;
  uint64_t v764;
  _QWORD *v765;
  uint64_t *v766;
  unint64_t v767;
  char *v768;
  char *v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  unint64_t v774;
  uint64_t *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t *v781;
  unint64_t v782;
  char *v783;
  char *v784;
  uint64_t v785;
  _QWORD *v786;
  char *v787;
  uint64_t v788;
  uint64_t *v789;
  unint64_t v790;
  char *v791;
  char *v792;
  uint64_t v793;
  _QWORD *v794;
  uint64_t *v795;
  unint64_t v796;
  char *v797;
  char *v798;
  uint64_t v799;
  _QWORD *v800;
  uint64_t *v801;
  unint64_t v802;
  char *v803;
  char *v804;
  uint64_t v805;
  _QWORD *v806;
  uint64_t *v807;
  unint64_t v808;
  char *v809;
  char *v810;
  uint64_t v811;
  _QWORD *v812;
  uint64_t *v813;
  unint64_t v814;
  char *v815;
  char *v816;
  uint64_t v817;
  _QWORD *v818;
  uint64_t *v819;
  unint64_t v820;
  char *v821;
  char *v822;
  uint64_t v823;
  _QWORD *v824;
  uint64_t *v825;
  unint64_t v826;
  char *v827;
  char *v828;
  uint64_t v829;
  _QWORD *v830;
  uint64_t *v831;
  unint64_t v832;
  char *v833;
  char *v834;
  uint64_t v835;
  _QWORD *v836;
  uint64_t *v837;
  unint64_t v838;
  char *v839;
  char *v840;
  uint64_t v841;
  _QWORD *v842;
  uint64_t v843;
  int v844;
  unint64_t v845;
  uint64_t *v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  int v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  unint64_t v864;
  uint64_t *v865;
  _QWORD *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  unint64_t v875;
  uint64_t *v876;
  _QWORD *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t v884;
  int v885;
  unint64_t v886;
  uint64_t *v887;
  _QWORD *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  int v896;
  unint64_t v897;
  uint64_t *v898;
  _QWORD *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  int v907;
  unint64_t v908;
  uint64_t *v909;
  _QWORD *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  int v919;
  _QWORD *v920;
  uint64_t v921;
  uint64_t v922;
  _QWORD *v923;
  uint64_t v924;
  _QWORD *v925;
  uint64_t v926;
  unint64_t v927;
  uint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t *v931;
  _QWORD *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  unint64_t v941;
  uint64_t *v942;
  _QWORD *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  int v950;
  uint64_t v951;
  _QWORD *v952;
  uint64_t v953;
  uint64_t v954;
  _QWORD *v955;
  uint64_t v956;
  _QWORD *v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  int v962;
  unint64_t v963;
  uint64_t *v964;
  _QWORD *v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unint64_t v970;
  uint64_t v971;
  uint64_t *v972;
  unint64_t v973;
  char *v974;
  char *v975;
  uint64_t v976;
  _QWORD *v977;
  uint64_t *v978;
  unint64_t v979;
  char *v980;
  char *v981;
  uint64_t v982;
  _QWORD *v983;
  uint64_t *v984;
  unint64_t v985;
  char *v986;
  char *v987;
  uint64_t v988;
  _QWORD *v989;
  uint64_t *v990;
  unint64_t v991;
  char *v992;
  char *v993;
  uint64_t v994;
  _QWORD *v995;
  uint64_t *v996;
  unint64_t v997;
  char *v998;
  char *v999;
  uint64_t v1000;
  _QWORD *v1001;
  uint64_t *v1002;
  unint64_t v1003;
  char *v1004;
  char *v1005;
  uint64_t v1006;
  _QWORD *v1007;
  uint64_t *v1008;
  unint64_t v1009;
  char *v1010;
  char *v1011;
  uint64_t v1012;
  _QWORD *v1013;
  uint64_t *v1014;
  unint64_t v1015;
  char *v1016;
  char *v1017;
  uint64_t v1018;
  _DWORD *v1019;
  void **v1020;
  uint64_t *v1021;
  unint64_t v1022;
  char *v1023;
  char *v1024;
  uint64_t v1025;
  _QWORD *v1026;
  uint64_t *v1027;
  unint64_t v1028;
  char *v1029;
  char *v1030;
  uint64_t v1031;
  _QWORD *v1032;
  uint64_t *v1033;
  unint64_t v1034;
  char *v1035;
  char *v1036;
  uint64_t v1037;
  uint64_t *v1038;
  unint64_t v1039;
  char *v1040;
  char *v1041;
  uint64_t v1042;
  _QWORD *v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t *v1046;
  _QWORD *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  uint64_t *v1056;
  _QWORD *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  int v1065;
  unint64_t v1066;
  uint64_t *v1067;
  _QWORD *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  int v1076;
  unint64_t v1077;
  uint64_t *v1078;
  _QWORD *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  unint64_t v1088;
  uint64_t *v1089;
  _QWORD *v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  unint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  int v1098;
  unint64_t v1099;
  uint64_t *v1100;
  _QWORD *v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  int v1109;
  int v1110;
  unint64_t v1111;
  uint64_t *v1112;
  _QWORD *v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  int v1121;
  unint64_t v1122;
  uint64_t *v1123;
  _QWORD *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  int v1132;
  int v1133;
  unint64_t v1134;
  uint64_t *v1135;
  _QWORD *v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  int v1144;
  int v1145;
  unint64_t v1146;
  uint64_t *v1147;
  _QWORD *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  uint64_t *v1155;
  unint64_t v1156;
  char *v1157;
  char *v1158;
  uint64_t v1159;
  _QWORD *v1160;
  char ***v1161;
  unint64_t v1162;
  char *v1163;
  char *v1164;
  char **v1165;
  _QWORD *v1166;
  uint64_t v1167;
  int v1168;
  int v1169;
  unint64_t v1170;
  uint64_t *v1171;
  _QWORD *v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t *v1179;
  unint64_t v1180;
  char *v1181;
  char *v1182;
  uint64_t v1183;
  _QWORD *v1184;
  uint64_t *v1185;
  unint64_t v1186;
  char *v1187;
  char *v1188;
  uint64_t v1189;
  _QWORD *v1190;
  uint64_t *v1191;
  unint64_t v1192;
  char *v1193;
  char *v1194;
  uint64_t v1195;
  _QWORD *v1196;
  char *v1197;
  uint64_t v1198;
  _QWORD *v1199;
  uint64_t *v1200;
  unint64_t v1201;
  char *v1202;
  char *v1203;
  uint64_t v1204;
  _QWORD *v1205;
  uint64_t *v1206;
  unint64_t v1207;
  char *v1208;
  char *v1209;
  uint64_t v1210;
  _QWORD *v1211;
  uint64_t *v1212;
  unint64_t v1213;
  char *v1214;
  char *v1215;
  uint64_t v1216;
  _QWORD *v1217;
  uint64_t *v1218;
  unint64_t v1219;
  char *v1220;
  char *v1221;
  uint64_t v1222;
  _QWORD *v1223;
  uint64_t *v1224;
  unint64_t v1225;
  char *v1226;
  char *v1227;
  uint64_t v1228;
  _QWORD *v1229;
  uint64_t *v1230;
  unint64_t v1231;
  char *v1232;
  char *v1233;
  uint64_t v1234;
  _QWORD *v1235;
  uint64_t *v1236;
  unint64_t v1237;
  char *v1238;
  char *v1239;
  uint64_t v1240;
  _QWORD *v1241;
  uint64_t v1242;
  uint64_t *v1243;
  uint64_t v1244;
  int v1245;
  uint64_t v1246;
  uint64_t v1247;
  unint64_t v1248;
  unint64_t v1249;
  uint64_t *v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  int v1257;
  uint64_t *v1258;
  uint64_t *v1259;
  uint64_t v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  int v1264;
  uint64_t v1265;
  uint64_t v1266;
  int v1267;
  _QWORD *v1268;
  _QWORD *v1269;
  _QWORD *v1270;
  char **v1271;
  unint64_t v1272;
  char ***v1273;
  _QWORD *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  unint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  int v1282;
  unint64_t v1283;
  uint64_t *v1284;
  _QWORD *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int v1293;
  int v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  int v1298;
  _QWORD *v1299;
  _QWORD *v1300;
  _QWORD *v1301;
  char **v1302;
  unint64_t v1303;
  char ***v1304;
  _QWORD *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  int v1314;
  unint64_t v1315;
  uint64_t *v1316;
  _QWORD *v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  uint64_t *v1324;
  uint64_t v1325;
  int v1326;
  unint64_t v1327;
  uint64_t *v1328;
  _QWORD *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  int v1337;
  unint64_t v1338;
  uint64_t *v1339;
  _QWORD *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  int v1348;
  unint64_t v1349;
  uint64_t *v1350;
  _QWORD *v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  unint64_t v1356;
  uint64_t v1357;
  uint64_t *v1358;
  unint64_t v1359;
  char *v1360;
  char *v1361;
  uint64_t v1362;
  _QWORD *v1363;
  uint64_t *v1364;
  unint64_t v1365;
  char *v1366;
  char *v1367;
  uint64_t v1368;
  _QWORD *v1369;
  uint64_t *v1370;
  unint64_t v1371;
  char *v1372;
  char *v1373;
  uint64_t v1374;
  uint64_t *v1375;
  unint64_t v1376;
  char *v1377;
  char *v1378;
  uint64_t v1379;
  _QWORD *v1380;
  uint64_t *v1381;
  unint64_t v1382;
  char *v1383;
  char *v1384;
  uint64_t v1385;
  _QWORD *v1386;
  uint64_t *v1387;
  unint64_t v1388;
  char *v1389;
  char *v1390;
  uint64_t v1391;
  _QWORD *v1392;
  uint64_t *v1393;
  unint64_t v1394;
  char *v1395;
  char *v1396;
  uint64_t v1397;
  _QWORD *v1398;
  uint64_t *v1399;
  unint64_t v1400;
  char *v1401;
  char *v1402;
  uint64_t v1403;
  _QWORD *v1404;
  uint64_t *v1405;
  unint64_t v1406;
  char *v1407;
  char *v1408;
  uint64_t v1409;
  _QWORD *v1410;
  uint64_t v1411;
  unint64_t v1412;
  unint64_t v1413;
  void *v1414;
  char **v1415;
  unint64_t v1416;
  char ***v1417;
  _QWORD *v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  int v1426;
  unint64_t v1427;
  uint64_t *v1428;
  _QWORD *v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  int v1437;
  unint64_t v1438;
  uint64_t *v1439;
  _QWORD *v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  unint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  int v1448;
  unint64_t v1449;
  uint64_t *v1450;
  _QWORD *v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  int v1459;
  unint64_t v1460;
  uint64_t *v1461;
  _QWORD *v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  unint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  int v1470;
  unint64_t v1471;
  uint64_t *v1472;
  _QWORD *v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  int v1481;
  unint64_t v1482;
  uint64_t *v1483;
  _QWORD *v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t *v1491;
  unint64_t v1492;
  char *v1493;
  char *v1494;
  uint64_t v1495;
  _QWORD *v1496;
  uint64_t v1497;
  unint64_t v1498;
  unint64_t v1499;
  void *v1500;
  char **v1501;
  unint64_t v1502;
  char ***v1503;
  _QWORD *v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  void *v1514;
  char **v1515;
  char *v1516;
  char ***v1517;
  uint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  unint64_t v1522;
  unint64_t v1523;
  void *v1524;
  char **v1525;
  unint64_t v1526;
  char ***v1527;
  _QWORD *v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  unint64_t v1533;
  uint64_t v1534;
  uint64_t *v1535;
  unint64_t v1536;
  char *v1537;
  char *v1538;
  uint64_t v1539;
  _QWORD *v1540;
  uint64_t *v1541;
  unint64_t v1542;
  char *v1543;
  char *v1544;
  uint64_t v1545;
  _QWORD *v1546;
  uint64_t *v1547;
  unint64_t v1548;
  char *v1549;
  char *v1550;
  uint64_t v1551;
  _QWORD *v1552;
  uint64_t *v1553;
  unint64_t v1554;
  char *v1555;
  char *v1556;
  uint64_t v1557;
  _QWORD *v1558;
  char ***v1559;
  unint64_t v1560;
  char *v1561;
  char *v1562;
  char **v1563;
  _QWORD *v1564;
  uint64_t v1565;
  unint64_t v1566;
  unint64_t v1567;
  void *v1568;
  char **v1569;
  unint64_t v1570;
  char ***v1571;
  _QWORD *v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  unint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  int v1580;
  unint64_t v1581;
  uint64_t *v1582;
  _QWORD *v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  unint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  int v1591;
  unint64_t v1592;
  uint64_t *v1593;
  _QWORD *v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  int v1602;
  unint64_t v1603;
  uint64_t *v1604;
  _QWORD *v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  uint64_t v1611;
  uint64_t *v1612;
  unint64_t v1613;
  char *v1614;
  char *v1615;
  uint64_t v1616;
  _QWORD *v1617;
  uint64_t *v1618;
  unint64_t v1619;
  char *v1620;
  char *v1621;
  uint64_t v1622;
  _QWORD *v1623;
  uint64_t *v1624;
  unint64_t v1625;
  char *v1626;
  char *v1627;
  uint64_t v1628;
  _QWORD *v1629;
  uint64_t *v1630;
  unint64_t v1631;
  char *v1632;
  char *v1633;
  uint64_t v1634;
  _QWORD *v1635;
  uint64_t *v1636;
  unint64_t v1637;
  char *v1638;
  char *v1639;
  uint64_t v1640;
  _QWORD *v1641;
  uint64_t *v1642;
  unint64_t v1643;
  char *v1644;
  char *v1645;
  uint64_t v1646;
  _QWORD *v1647;
  uint64_t *v1648;
  unint64_t v1649;
  char *v1650;
  char *v1651;
  uint64_t v1652;
  _QWORD *v1653;
  uint64_t v1654;
  int v1655;
  unint64_t v1656;
  uint64_t *v1657;
  _QWORD *v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  unint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  int v1666;
  unint64_t v1667;
  uint64_t *v1668;
  _QWORD *v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  int v1677;
  unint64_t v1678;
  uint64_t *v1679;
  _QWORD *v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  unint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  int v1688;
  unint64_t v1689;
  uint64_t *v1690;
  _QWORD *v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  unint64_t v1696;
  uint64_t v1697;
  char ***v1698;
  unint64_t v1699;
  char *v1700;
  char *v1701;
  char **v1702;
  _QWORD *v1703;
  uint64_t v1704;
  uint64_t *v1705;
  int v1706;
  uint64_t v1707;
  _QWORD *v1708;
  uint64_t v1709;
  uint64_t v1710;
  char *v1711;
  uint64_t v1712;
  _QWORD *v1713;
  uint64_t v1714;
  unint64_t v1715;
  uint64_t v1716;
  char ***v1717;
  unint64_t v1718;
  char *v1719;
  char *v1720;
  char **v1721;
  _QWORD *v1722;
  int v1723;
  uint64_t v1724;
  _QWORD *v1725;
  uint64_t v1726;
  uint64_t v1727;
  char *v1728;
  uint64_t v1729;
  _QWORD *v1730;
  uint64_t v1731;
  unint64_t v1732;
  uint64_t v1733;
  char ***v1734;
  unint64_t v1735;
  char *v1736;
  char *v1737;
  char **v1738;
  _QWORD *v1739;
  int v1740;
  uint64_t v1741;
  int v1742;
  _QWORD *v1743;
  uint64_t v1744;
  uint64_t v1745;
  char *v1746;
  uint64_t v1747;
  _QWORD *v1748;
  uint64_t v1749;
  unint64_t v1750;
  uint64_t v1751;
  uint64_t *v1752;
  unint64_t v1753;
  char *v1754;
  char *v1755;
  uint64_t v1756;
  _QWORD *v1757;
  uint64_t *v1758;
  unint64_t v1759;
  char *v1760;
  char *v1761;
  uint64_t v1762;
  _QWORD *v1763;
  uint64_t *v1764;
  unint64_t v1765;
  char *v1766;
  char *v1767;
  uint64_t v1768;
  _QWORD *v1769;
  uint64_t v1770;
  int v1771;
  unint64_t v1772;
  uint64_t *v1773;
  _QWORD *v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  unint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  int v1782;
  unint64_t v1783;
  uint64_t *v1784;
  _QWORD *v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  uint64_t *v1792;
  unint64_t v1793;
  char *v1794;
  char *v1795;
  uint64_t v1796;
  _QWORD *v1797;
  uint64_t *v1798;
  unint64_t v1799;
  char *v1800;
  char *v1801;
  uint64_t v1802;
  _QWORD *v1803;
  uint64_t *v1804;
  unint64_t v1805;
  char *v1806;
  char *v1807;
  uint64_t v1808;
  _QWORD *v1809;
  uint64_t *v1810;
  unint64_t v1811;
  char *v1812;
  char *v1813;
  uint64_t v1814;
  _QWORD *v1815;
  uint64_t v1816;
  int v1817;
  unint64_t v1818;
  uint64_t *v1819;
  _QWORD *v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  unint64_t v1825;
  uint64_t v1826;
  uint64_t *v1827;
  unint64_t v1828;
  char *v1829;
  char *v1830;
  uint64_t v1831;
  _QWORD *v1832;
  uint64_t *v1833;
  unint64_t v1834;
  char *v1835;
  char *v1836;
  uint64_t v1837;
  _QWORD *v1838;
  uint64_t *v1839;
  unint64_t v1840;
  char *v1841;
  char *v1842;
  uint64_t v1843;
  _QWORD *v1844;
  uint64_t v1845;
  unint64_t v1846;
  unint64_t v1847;
  void *v1848;
  char **v1849;
  unint64_t v1850;
  char ***v1851;
  _QWORD *v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  unint64_t v1857;
  uint64_t v1858;
  char ***v1859;
  unint64_t v1860;
  char *v1861;
  char *v1862;
  char **v1863;
  _QWORD *v1864;
  char ***v1865;
  unint64_t v1866;
  char *v1867;
  char *v1868;
  char **v1869;
  _QWORD *v1870;
  uint64_t v1871;
  unint64_t v1872;
  unint64_t v1873;
  void *v1874;
  char **v1875;
  char ***v1876;
  uint64_t v1877;
  unint64_t v1878;
  unint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  unint64_t v1882;
  uint64_t *v1883;
  _QWORD *v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  unint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  unint64_t v1892;
  uint64_t *v1893;
  _QWORD *v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  unint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t *v1902;
  uint64_t v1903;
  int v1904;
  uint64_t v1905;
  uint64_t v1906;
  unint64_t v1907;
  unint64_t v1908;
  uint64_t *v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  _QWORD *v1913;
  _QWORD *v1914;
  _QWORD *v1915;
  unint64_t v1916;
  _QWORD *v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  unint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  unint64_t v1925;
  unint64_t v1926;
  void *v1927;
  char **v1928;
  unint64_t v1929;
  char ***v1930;
  _QWORD *v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  unint64_t v1936;
  uint64_t v1937;
  char ***v1938;
  unint64_t v1939;
  char *v1940;
  char *v1941;
  char **v1942;
  _QWORD *v1943;
  uint64_t *v1944;
  unint64_t v1945;
  char *v1946;
  char *v1947;
  uint64_t v1948;
  _QWORD *v1949;
  uint64_t *v1950;
  unint64_t v1951;
  char *v1952;
  char *v1953;
  uint64_t v1954;
  _QWORD *v1955;
  char ***v1956;
  char **v1957;
  int v1958;
  uint64_t v1959;
  _QWORD *v1960;
  uint64_t v1961;
  uint64_t v1962;
  char *v1963;
  uint64_t v1964;
  _QWORD *v1965;
  uint64_t v1966;
  unint64_t v1967;
  uint64_t v1968;
  int v1969;
  uint64_t v1970;
  _QWORD *v1971;
  uint64_t v1972;
  uint64_t v1973;
  char *v1974;
  uint64_t v1975;
  _QWORD *v1976;
  uint64_t v1977;
  unint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  unint64_t v1981;
  uint64_t *v1982;
  _QWORD *v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  unint64_t v1988;
  uint64_t v1989;
  char ***v1990;
  unint64_t v1991;
  char *v1992;
  char *v1993;
  char **v1994;
  _QWORD *v1995;
  int v1996;
  uint64_t v1997;
  int v1998;
  _QWORD *v1999;
  uint64_t v2000;
  uint64_t v2001;
  char *v2002;
  uint64_t v2003;
  _QWORD *v2004;
  uint64_t v2005;
  unint64_t v2006;
  uint64_t v2007;
  uint64_t *v2008;
  unint64_t v2009;
  char *v2010;
  char *v2011;
  uint64_t v2012;
  _QWORD *v2013;
  uint64_t v2014;
  int v2015;
  uint64_t v2016;
  uint64_t v2017;
  int v2018;
  _QWORD *v2019;
  _QWORD *v2020;
  _QWORD *v2021;
  char **v2022;
  unint64_t v2023;
  char ***v2024;
  _QWORD *v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  unint64_t v2030;
  uint64_t v2031;
  char ***v2032;
  unint64_t v2033;
  char *v2034;
  char *v2035;
  char **v2036;
  char *v2037;
  char **v2038;
  char *v2039;
  char **v2040;
  char ***v2041;
  unint64_t v2042;
  char *v2043;
  char *v2044;
  char **v2045;
  _QWORD *v2046;
  uint64_t v2047;
  unint64_t v2048;
  unint64_t v2049;
  void *v2050;
  char **v2051;
  unint64_t v2052;
  char ***v2053;
  _QWORD *v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  unint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  unint64_t v2062;
  unint64_t v2063;
  void *v2064;
  char **v2065;
  uint64_t *v2066;
  uint64_t v2067;
  unint64_t v2068;
  unint64_t v2069;
  uint64_t v2070;
  void *v2071;
  char ***v2072;
  unint64_t v2073;
  char *v2074;
  char *v2075;
  char **v2076;
  _QWORD *v2077;
  char ***v2078;
  char **v2079;
  int v2080;
  uint64_t v2081;
  int v2082;
  uint64_t v2083;
  uint64_t v2084;
  unint64_t v2085;
  unint64_t v2086;
  uint64_t *v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  char ***v2091;
  uint64_t v2092;
  uint64_t v2093;
  int v2094;
  uint64_t v2095;
  _QWORD *v2096;
  uint64_t v2097;
  uint64_t v2098;
  char *v2099;
  uint64_t v2100;
  _QWORD *v2101;
  uint64_t v2102;
  unint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  unint64_t v2106;
  unint64_t v2107;
  void *v2108;
  char **v2109;
  unint64_t v2110;
  char ***v2111;
  _QWORD *v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  unint64_t v2117;
  uint64_t v2118;
  int v2119;
  uint64_t v2120;
  int v2121;
  unint64_t v2122;
  uint64_t *v2123;
  _QWORD *v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  unint64_t v2129;
  uint64_t v2130;
  char *v2131;
  char **v2132;
  _QWORD *v2133;
  char ***v2134;
  unint64_t v2135;
  char *v2136;
  char *v2137;
  char **v2138;
  _QWORD *v2139;
  int v2140;
  uint64_t v2141;
  int v2142;
  unint64_t v2143;
  uint64_t *v2144;
  _QWORD *v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  unint64_t v2150;
  uint64_t v2151;
  uint64_t *v2152;
  unint64_t v2153;
  char *v2154;
  char *v2155;
  uint64_t v2156;
  _QWORD *v2157;
  _DWORD *v2158;
  char ***v2159;
  unint64_t v2160;
  char *v2161;
  char *v2162;
  char **v2163;
  _QWORD *v2164;
  unint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  unint64_t v2170;
  uint64_t v2171;
  uint64_t *v2172;
  unint64_t v2173;
  char *v2174;
  char *v2175;
  uint64_t v2176;
  _QWORD *v2177;
  char *v2178;
  uint64_t v2179;
  _QWORD *v2180;
  uint64_t v2181;
  int v2182;
  int v2183;
  uint64_t v2184;
  char *v2185;
  uint64_t v2186;
  char *v2187;
  uint64_t v2188;
  uint64_t v2189;
  char *v2190;
  char *v2191;
  uint64_t v2192;
  char v2193;
  int v2194;
  uint64_t v2195;
  uint64_t v2196;
  unint64_t v2197;
  unint64_t v2198;
  uint64_t v2199;
  uint64_t *v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  void **v2204;
  uint64_t v2205;
  unint64_t v2206;
  void **v2207;
  int v2208;
  int v2209;
  unint64_t v2210;
  char *v2211;
  _DWORD *v2212;
  char *v2213;
  uint64_t v2214;
  unint64_t v2215;
  uint64_t v2216;
  unint64_t v2217;
  uint64_t v2218;
  _DWORD *v2219;
  int v2220;
  unint64_t v2221;
  char *v2222;
  _DWORD *v2223;
  char *v2224;
  uint64_t v2225;
  unint64_t v2226;
  uint64_t v2227;
  unint64_t v2228;
  uint64_t v2229;
  _DWORD *v2230;
  int v2231;
  unint64_t v2232;
  uint64_t *v2233;
  _QWORD *v2234;
  int v2235;
  uint64_t v2236;
  unint64_t v2237;
  uint64_t *v2238;
  _QWORD *v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  unint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  unint64_t v2250;
  uint64_t v2251;
  uint64_t *v2252;
  unint64_t v2253;
  char *v2254;
  char *v2255;
  uint64_t v2256;
  _QWORD *v2257;
  uint64_t *v2258;
  unint64_t v2259;
  char *v2260;
  char *v2261;
  uint64_t v2262;
  _QWORD *v2263;
  uint64_t v2264;
  unint64_t v2265;
  unint64_t v2266;
  void *v2267;
  char **v2268;
  char *v2269;
  char ***v2270;
  uint64_t v2271;
  unint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  char ***v2275;
  int v2276;
  uint64_t v2277;
  _QWORD *v2278;
  uint64_t v2279;
  uint64_t v2280;
  char *v2281;
  uint64_t v2282;
  _QWORD *v2283;
  uint64_t v2284;
  unint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  unint64_t v2288;
  unint64_t v2289;
  void *v2290;
  char **v2291;
  char ***v2292;
  uint64_t v2293;
  unint64_t v2294;
  unint64_t v2295;
  uint64_t v2296;
  char ***v2297;
  char **v2298;
  int v2299;
  uint64_t v2300;
  _QWORD *v2301;
  uint64_t v2302;
  uint64_t v2303;
  char *v2304;
  uint64_t v2305;
  _QWORD *v2306;
  uint64_t v2307;
  unint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  unint64_t v2311;
  unint64_t v2312;
  void *v2313;
  char **v2314;
  uint64_t *v2315;
  uint64_t v2316;
  unint64_t v2317;
  unint64_t v2318;
  uint64_t v2319;
  char ***v2320;
  char **v2321;
  int v2322;
  uint64_t v2323;
  int v2324;
  uint64_t v2325;
  uint64_t v2326;
  unint64_t v2327;
  unint64_t v2328;
  uint64_t *v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  _QWORD *v2333;
  _QWORD *v2334;
  void *v2335;
  char **v2336;
  unint64_t v2337;
  char ***v2338;
  _QWORD *v2339;
  uint64_t v2340;
  uint64_t v2341;
  uint64_t v2342;
  uint64_t v2343;
  unint64_t v2344;
  uint64_t v2345;
  char ***v2346;
  unint64_t v2347;
  char *v2348;
  char *v2349;
  char **v2350;
  _QWORD *v2351;
  _QWORD *v2352;
  int v2353;
  uint64_t v2354;
  int v2355;
  std::vector<int> *v2356;
  int v2357;
  int v2358;
  int v2359;
  void *v2360;
  std::vector<int> *v2361;
  _DWORD *v2362;
  int v2365;
  uint64_t v2366;
  void *v2367[3];
  void *v2368;
  void *v2369;
  uint64_t v2370;
  void *v2371;
  void *v2372;
  uint64_t v2373;
  void *v2374;
  void *v2375;
  uint64_t v2376;
  void *v2377;
  void *v2378;
  uint64_t v2379;
  void *v2380;
  void *v2381;
  uint64_t v2382;
  void *v2383;
  void *v2384;
  uint64_t v2385;
  void *v2386;
  void *v2387;
  uint64_t v2388;
  void *v2389;
  void *v2390;
  uint64_t v2391;
  void *v2392;
  void *v2393;
  uint64_t v2394;
  void *v2395;
  void *v2396;
  uint64_t v2397;
  void *v2398;
  void *v2399;
  uint64_t v2400;
  void *v2401;
  void *v2402;
  uint64_t v2403;
  void *v2404;
  void *v2405;
  uint64_t v2406;
  void *v2407;
  void *v2408;
  uint64_t v2409;
  void *v2410;
  void *v2411;
  uint64_t v2412;
  void *__p;
  void *v2414;
  uint64_t v2415;
  void *v2416[3];
  void *v2417;
  void *v2418;
  uint64_t v2419;
  void *v2420;
  void *v2421;
  uint64_t v2422;
  void *v2423;
  _QWORD *v2424;
  char *v2425;
  void *v2426;
  _QWORD *v2427;
  char *v2428;
  void *v2429;
  _QWORD *v2430;
  char *v2431;
  void *v2432;
  void *v2433;
  uint64_t v2434;
  void *v2435;
  void *v2436;
  uint64_t v2437;
  _DWORD *v2438;
  _DWORD *v2439;
  uint64_t v2440;
  void *v2441;
  void *v2442;
  uint64_t v2443;
  void *v2444;
  void *v2445;
  uint64_t v2446;
  void *v2447;
  _QWORD *v2448;
  char *v2449;
  void *v2450;
  void *v2451;
  uint64_t v2452;
  void *v2453;
  _QWORD *v2454;
  char *v2455;
  void *v2456;
  void *v2457;
  uint64_t v2458;
  uint64_t *v2459;
  uint64_t *v2460;
  uint64_t v2461;
  void *v2462;
  void *v2463;
  uint64_t v2464;
  void *v2465;
  void *v2466;
  uint64_t v2467;
  void *v2468;
  void *v2469;
  uint64_t v2470;
  void *v2471;
  void *v2472;
  uint64_t v2473;
  void *v2474;
  void *v2475;
  uint64_t v2476;
  void *v2477;
  void *v2478;
  uint64_t v2479;
  void *v2480;
  void *v2481;
  uint64_t v2482;
  void *v2483;
  void *v2484;
  uint64_t v2485;
  void *v2486;
  void *v2487;
  uint64_t v2488;
  uint64_t *v2489;
  uint64_t *v2490;
  uint64_t v2491;
  _DWORD *v2492[3];
  uint64_t *v2493;
  uint64_t *v2494;
  uint64_t v2495;
  void *v2496;
  void *v2497;
  uint64_t v2498;
  void *v2499;
  void *v2500;
  uint64_t v2501;
  void *v2502;
  void *v2503;
  uint64_t v2504;
  uint64_t *v2505;
  uint64_t *v2506;
  uint64_t v2507;
  void *v2508;
  void *v2509;
  uint64_t v2510;
  void *v2511;
  void *v2512;
  uint64_t v2513;
  void *v2514;
  void *v2515;
  uint64_t v2516;
  uint64_t *v2517;
  uint64_t *v2518;
  uint64_t v2519;
  void *v2520;
  void *v2521;
  uint64_t v2522;
  void *v2523;
  void *v2524;
  uint64_t v2525;
  uint64_t *v2526;
  uint64_t *v2527;
  uint64_t v2528;
  void *v2529;
  void *v2530;
  uint64_t v2531;
  void *v2532;
  void *v2533;
  uint64_t v2534;
  void *v2535;
  void *v2536;
  uint64_t v2537;
  uint64_t *v2538;
  uint64_t *v2539;
  uint64_t v2540;
  void *v2541;
  void *v2542;
  uint64_t v2543;
  void *v2544;
  void *v2545;
  uint64_t v2546;
  uint64_t *v2547;
  uint64_t *v2548;
  uint64_t v2549;
  void *v2550;
  void *v2551;
  uint64_t v2552;
  uint64_t *v2553;
  uint64_t *v2554;
  uint64_t v2555;
  void *v2556;
  void *v2557;
  uint64_t v2558;
  void *v2559;
  void *v2560;
  uint64_t v2561;
  void *v2562;
  void *v2563;
  uint64_t v2564;
  void *v2565;
  void *v2566;
  uint64_t v2567;
  uint64_t *v2568;
  uint64_t *v2569;
  uint64_t v2570;
  void *v2571;
  void *v2572;
  uint64_t v2573;
  void *v2574;
  void *v2575;
  uint64_t v2576;
  void *v2577;
  void *v2578;
  uint64_t v2579;
  uint64_t *v2580;
  uint64_t *v2581;
  uint64_t v2582;
  void *v2583;
  void *v2584;
  uint64_t v2585;
  void *v2586;
  void *v2587;
  uint64_t v2588;
  uint64_t *v2589;
  uint64_t *v2590;
  uint64_t v2591;
  void *v2592;
  void *v2593;
  uint64_t v2594;
  uint64_t *v2595;
  uint64_t *v2596;
  uint64_t v2597;
  void *v2598;
  void *v2599;
  uint64_t v2600;
  void *v2601;
  void *v2602;
  uint64_t v2603;
  _DWORD *v2604;
  _DWORD *v2605;
  uint64_t v2606;
  _DWORD *v2607;
  _DWORD *v2608;
  uint64_t v2609;
  void *v2610;
  void *v2611;
  uint64_t v2612;
  void *v2613[3];
  void *v2614;
  void *v2615;
  uint64_t v2616;
  void *v2617;
  void *v2618;
  uint64_t v2619;
  void *v2620;
  void *v2621;
  uint64_t v2622;
  void *v2623;
  void *v2624;
  uint64_t v2625;
  void *v2626;
  void *v2627;
  uint64_t v2628;
  void *v2629;
  void *v2630;
  uint64_t v2631;
  uint64_t *v2632;
  uint64_t *v2633;
  uint64_t v2634;
  void *v2635;
  void *v2636;
  uint64_t v2637;
  void *v2638;
  void *v2639;
  uint64_t v2640;
  void *v2641;
  void *v2642;
  uint64_t v2643;
  void *v2644;
  void *v2645;
  uint64_t v2646;
  void *v2647;
  void *v2648;
  uint64_t v2649;
  uint64_t *v2650;
  uint64_t *v2651;
  uint64_t v2652;
  uint64_t *v2653;
  uint64_t *v2654;
  uint64_t v2655;
  void *v2656;
  void *v2657;
  uint64_t v2658;
  void *v2659;
  void *v2660;
  uint64_t v2661;
  void *v2662;
  void *v2663;
  uint64_t v2664;
  void *v2665;
  void *v2666;
  uint64_t v2667;
  _DWORD *v2668;
  _DWORD *v2669;
  uint64_t v2670;
  _DWORD *v2671;
  _DWORD *v2672;
  uint64_t v2673;
  _DWORD *v2674;
  _DWORD *v2675;
  uint64_t v2676;
  _DWORD *v2677;
  _DWORD *v2678;
  uint64_t v2679;
  _DWORD *v2680[3];
  void *v2681;
  _QWORD *v2682;
  _QWORD *v2683;

  if ((*(_BYTE *)(a2 + 48) & 7) != 0)
    exitFramework(345);
  v2359 = *(unsigned __int8 *)(a2 + 44);
  v2355 = *(unsigned __int8 *)(a2 + 46);
  v4 = *(unsigned __int8 *)(a2 + 45);
  v5 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 4);
  v2353 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 8);
  v2365 = *(_QWORD *)(a2 + 36);
  *(int32x2_t *)(a1 + 20) = vrev64_s32(*(int32x2_t *)(a2 + 36));
  *(_QWORD *)(a1 + 96) = 0;
  v6 = operator new(0xCuLL);
  *(_QWORD *)v6 = 0x300000001;
  v2362 = v6;
  v6[2] = 3;
  v7 = operator new(0xCuLL);
  *(_QWORD *)v7 = 0x100000001;
  v7[2] = 3;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_DWORD *)(a3 + 8);
  if (v4)
    v9 = 4;
  else
    v9 = 1;
  *(_BYTE *)(a1 + 16) = v8 != 0;
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  v2357 = v10;
  v2358 = v4;
  *(_DWORD *)(a1 + 64) = 3;
  *(_DWORD *)(a1 + 68) = v5;
  *(_QWORD *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 80) = v2365;
  v2366 = a1;
  *(_QWORD *)(a1 + 84) = 0x2000000001;
  v11 = 5;
  v2360 = v7;
  v2361 = (std::vector<int> *)(v2362 + 3);
  v12 = (uint64_t)(v7 + 3);
  v13 = 300;
  switch(v5)
  {
    case 2:
      v286 = operator new();
      v287 = *(_DWORD *)a1;
      v288 = *(_DWORD *)(a1 + 4);
      memset(v2680, 0, sizeof(v2680));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2680, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v286, v287, v288, v2680, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v290 = *(uint64_t **)(a1 + 112);
      v289 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v290 >= v289)
      {
        v578 = (void **)(v2366 + 104);
        v577 = *(_QWORD *)(v2366 + 104);
        v579 = ((uint64_t)v290 - v577) >> 3;
        if ((unint64_t)(v579 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v580 = v289 - v577;
        v581 = v580 >> 2;
        if (v580 >> 2 <= (unint64_t)(v579 + 1))
          v581 = v579 + 1;
        if ((unint64_t)v580 >= 0x7FFFFFFFFFFFFFF8)
          v582 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v582 = v581;
        if (v582)
          v582 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v582);
        else
          v583 = 0;
        v1014 = (uint64_t *)(v582 + 8 * v579);
        v1015 = v582 + 8 * v583;
        *v1014 = v286;
        v291 = v1014 + 1;
        v1016 = (char *)*v94;
        v1017 = (char *)*v578;
        if (*v94 != *v578)
        {
          do
          {
            v1018 = *((_QWORD *)v1016 - 1);
            v1016 -= 8;
            *--v1014 = v1018;
          }
          while (v1016 != v1017);
          v1016 = (char *)*v578;
        }
        *(_QWORD *)(v2366 + 104) = v1014;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1015;
        if (v1016)
          operator delete(v1016);
      }
      else
      {
        *v290 = v286;
        v291 = v290 + 1;
      }
      *v94 = v291;
      v1019 = v2680[0];
      if (!v2680[0])
        goto LABEL_1450;
      v1020 = (void **)v2680;
      goto LABEL_1449;
    case 3:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v274 = operator new();
      v275 = *(_DWORD *)a1;
      v276 = *(_DWORD *)(a1 + 4);
      v2678 = 0;
      v2679 = 0;
      v2677 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2677, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v274, v275, v276, &v2677, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v277 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v279 = v278;
      v280 = &v277[v278];
      *v277 = v274;
      v2682 = v277 + 1;
      v2683 = v280;
      v2681 = v277;
      if (v2677)
      {
        v2678 = v2677;
        operator delete(v2677);
      }
      v281 = operator new();
      v282 = operator new();
      v283 = *(_DWORD *)v2366;
      v284 = *(_DWORD *)(v2366 + 4);
      v2675 = 0;
      v2676 = 0;
      v2674 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2674, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v282, v283, v284, &v2674, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      Reverse::Reverse(v281, v282, *(_DWORD *)(v2366 + 20));
      if (v279 < 2)
      {
        v676 = 2;
        if ((unint64_t)(((char *)v280 - (char *)v277) >> 2) > 2)
          v676 = ((char *)v280 - (char *)v277) >> 2;
        if ((unint64_t)((char *)v280 - (char *)v277) >= 0x7FFFFFFFFFFFFFF8)
          v677 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v677 = v676;
        if (v677)
          v677 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v677);
        else
          v678 = 0;
        v1521 = 0;
        v1522 = v677 + 8;
        v1523 = v677 + 8 * v678;
        *(_QWORD *)(v677 + 8) = v281;
        v285 = (_QWORD *)(v677 + 16);
        do
        {
          *(_QWORD *)(v677 + v1521 * 8) = v277[v1521];
          --v1521;
        }
        while (v1521 != -1);
        v1524 = v2681;
        v2681 = (void *)(v1522 - 8);
        v2683 = (_QWORD *)v1523;
        if (v1524)
          operator delete(v1524);
      }
      else
      {
        v277[1] = v281;
        v285 = v277 + 2;
      }
      v2682 = v285;
      if (v2674)
      {
        v2675 = v2674;
        operator delete(v2674);
      }
      v1525 = (char **)operator new();
      Parallel::Parallel(v1525, (uint64_t)&v2681);
      v1527 = *(char ****)(v2366 + 112);
      v1526 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1527 >= v1526)
      {
        v1529 = *(_QWORD *)(v2366 + 104);
        v1530 = ((uint64_t)v1527 - v1529) >> 3;
        if ((unint64_t)(v1530 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1531 = v1526 - v1529;
        v1532 = v1531 >> 2;
        if (v1531 >> 2 <= (unint64_t)(v1530 + 1))
          v1532 = v1530 + 1;
        if ((unint64_t)v1531 >= 0x7FFFFFFFFFFFFFF8)
          v1533 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1533 = v1532;
        if (v1533)
          v1533 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1533);
        else
          v1534 = 0;
        v1717 = (char ***)(v1533 + 8 * v1530);
        v1718 = v1533 + 8 * v1534;
        *v1717 = v1525;
        v1528 = v1717 + 1;
        v1720 = *(char **)(v2366 + 104);
        v1719 = *(char **)(v2366 + 112);
        if (v1719 == v1720)
        {
          v1722 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1721 = (char **)*((_QWORD *)v1719 - 1);
            v1719 -= 8;
            *--v1717 = v1721;
          }
          while (v1719 != v1720);
          v1722 = (_QWORD *)v2366;
          v1719 = *(char **)(v2366 + 104);
        }
        v1722[13] = v1717;
        v1722[14] = v1528;
        v1722[15] = v1718;
        if (v1719)
          operator delete(v1719);
      }
      else
      {
        *v1527 = v1525;
        v1528 = v1527 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1528;
      (*(void (**)(_QWORD))(*(_QWORD *)*(v1528 - 1) + 8))(*(v1528 - 1));
      goto LABEL_2408;
    case 4:
      v140 = operator new();
      FullLayer<float>::FullLayer(v140, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v142 = *(uint64_t **)(a1 + 112);
      v141 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v142 >= v141)
      {
        v481 = *(_QWORD *)(a1 + 104);
        v482 = ((uint64_t)v142 - v481) >> 3;
        if ((unint64_t)(v482 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v483 = v141 - v481;
        v484 = v483 >> 2;
        if (v483 >> 2 <= (unint64_t)(v482 + 1))
          v484 = v482 + 1;
        if ((unint64_t)v483 >= 0x7FFFFFFFFFFFFFF8)
          v485 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v485 = v484;
        if (v485)
          v485 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v485);
        else
          v486 = 0;
        v789 = (uint64_t *)(v485 + 8 * v482);
        v790 = v485 + 8 * v486;
        *v789 = v140;
        v143 = v789 + 1;
        v792 = *(char **)(a1 + 104);
        v791 = *(char **)(a1 + 112);
        if (v791 == v792)
        {
          v794 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v793 = *((_QWORD *)v791 - 1);
            v791 -= 8;
            *--v789 = v793;
          }
          while (v791 != v792);
          v794 = (_QWORD *)a1;
          v791 = *(char **)(a1 + 104);
        }
        v794[13] = v789;
        v794[14] = v143;
        v794[15] = v790;
        if (v791)
          operator delete(v791);
      }
      else
      {
        *v142 = v140;
        v143 = v142 + 1;
      }
      *(_QWORD *)(a1 + 112) = v143;
      v873 = operator new();
      v874 = *(_DWORD *)(a1 + 4);
      v2655 = 0;
      v2653 = 0;
      v2654 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2653, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v873, v874, v874, (_DWORD **)&v2653, 0, a2, 1, 0, 0);
      v876 = *(uint64_t **)(a1 + 112);
      v875 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v876 >= v875)
      {
        v878 = *(_QWORD *)(a1 + 104);
        v879 = ((uint64_t)v876 - v878) >> 3;
        if ((unint64_t)(v879 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v880 = v875 - v878;
        v881 = v880 >> 2;
        if (v880 >> 2 <= (unint64_t)(v879 + 1))
          v881 = v879 + 1;
        if ((unint64_t)v880 >= 0x7FFFFFFFFFFFFFF8)
          v882 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v882 = v881;
        if (v882)
          v882 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v882);
        else
          v883 = 0;
        v1206 = (uint64_t *)(v882 + 8 * v879);
        v1207 = v882 + 8 * v883;
        *v1206 = v873;
        v877 = v1206 + 1;
        v1209 = *(char **)(a1 + 104);
        v1208 = *(char **)(a1 + 112);
        if (v1208 == v1209)
        {
          v1211 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1210 = *((_QWORD *)v1208 - 1);
            v1208 -= 8;
            *--v1206 = v1210;
          }
          while (v1208 != v1209);
          v1211 = (_QWORD *)a1;
          v1208 = *(char **)(a1 + 104);
        }
        v1211[13] = v1206;
        v1211[14] = v877;
        v1211[15] = v1207;
        if (v1208)
          operator delete(v1208);
      }
      else
      {
        *v876 = v873;
        v877 = v876 + 1;
      }
      *(_QWORD *)(a1 + 112) = v877;
      v1324 = v2653;
      if (!v2653)
        goto LABEL_2421;
      v2654 = v2653;
      goto LABEL_2420;
    case 5:
      v116 = operator new();
      FullLayer<float>::FullLayer(v116, *(_DWORD *)a1, 2 * *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v118 = *(uint64_t **)(a1 + 112);
      v117 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v118 >= v117)
      {
        v475 = *(_QWORD *)(a1 + 104);
        v476 = ((uint64_t)v118 - v475) >> 3;
        if ((unint64_t)(v476 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v477 = v117 - v475;
        v478 = v477 >> 2;
        if (v477 >> 2 <= (unint64_t)(v476 + 1))
          v478 = v476 + 1;
        if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8)
          v479 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v479 = v478;
        if (v479)
          v479 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v479);
        else
          v480 = 0;
        v781 = (uint64_t *)(v479 + 8 * v476);
        v782 = v479 + 8 * v480;
        *v781 = v116;
        v119 = v781 + 1;
        v784 = *(char **)(a1 + 104);
        v783 = *(char **)(a1 + 112);
        if (v783 == v784)
        {
          v786 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v785 = *((_QWORD *)v783 - 1);
            v783 -= 8;
            *--v781 = v785;
          }
          while (v783 != v784);
          v786 = (_QWORD *)a1;
          v783 = *(char **)(a1 + 104);
        }
        v786[13] = v781;
        v786[14] = v119;
        v786[15] = v782;
        if (v783)
          operator delete(v783);
      }
      else
      {
        *v118 = v116;
        v119 = v118 + 1;
      }
      *(_QWORD *)(a1 + 112) = v119;
      v862 = operator new();
      v863 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      FullLayer<float>::FullLayer(v862, v863, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v865 = *(uint64_t **)(a1 + 112);
      v864 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v865 >= v864)
      {
        v867 = *(_QWORD *)(a1 + 104);
        v868 = ((uint64_t)v865 - v867) >> 3;
        if ((unint64_t)(v868 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v869 = v864 - v867;
        v870 = v869 >> 2;
        if (v869 >> 2 <= (unint64_t)(v868 + 1))
          v870 = v868 + 1;
        if ((unint64_t)v869 >= 0x7FFFFFFFFFFFFFF8)
          v871 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v871 = v870;
        if (v871)
          v871 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v871);
        else
          v872 = 0;
        v1200 = (uint64_t *)(v871 + 8 * v868);
        v1201 = v871 + 8 * v872;
        *v1200 = v862;
        v866 = v1200 + 1;
        v1203 = *(char **)(a1 + 104);
        v1202 = *(char **)(a1 + 112);
        if (v1202 == v1203)
        {
          v1205 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1204 = *((_QWORD *)v1202 - 1);
            v1202 -= 8;
            *--v1200 = v1204;
          }
          while (v1202 != v1203);
          v1205 = (_QWORD *)a1;
          v1202 = *(char **)(a1 + 104);
        }
        v1205[13] = v1200;
        v1205[14] = v866;
        v1205[15] = v1201;
        if (v1202)
          operator delete(v1202);
      }
      else
      {
        *v865 = v862;
        v866 = v865 + 1;
      }
      *(_QWORD *)(a1 + 112) = v866;
      v1312 = operator new();
      v1313 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      v1314 = *(_DWORD *)(a1 + 4);
      v2652 = 0;
      v2650 = 0;
      v2651 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2650, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1312, v1313, v1314, (_DWORD **)&v2650, 0, a2, 1, 0, 0);
      v1316 = *(uint64_t **)(a1 + 112);
      v1315 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1316 >= v1315)
      {
        v1318 = *(_QWORD *)(a1 + 104);
        v1319 = ((uint64_t)v1316 - v1318) >> 3;
        if ((unint64_t)(v1319 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1320 = v1315 - v1318;
        v1321 = v1320 >> 2;
        if (v1320 >> 2 <= (unint64_t)(v1319 + 1))
          v1321 = v1319 + 1;
        if ((unint64_t)v1320 >= 0x7FFFFFFFFFFFFFF8)
          v1322 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1322 = v1321;
        if (v1322)
          v1322 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1322);
        else
          v1323 = 0;
        v1624 = (uint64_t *)(v1322 + 8 * v1319);
        v1625 = v1322 + 8 * v1323;
        *v1624 = v1312;
        v1317 = v1624 + 1;
        v1627 = *(char **)(a1 + 104);
        v1626 = *(char **)(a1 + 112);
        if (v1626 == v1627)
        {
          v1629 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1628 = *((_QWORD *)v1626 - 1);
            v1626 -= 8;
            *--v1624 = v1628;
          }
          while (v1626 != v1627);
          v1629 = (_QWORD *)a1;
          v1626 = *(char **)(a1 + 104);
        }
        v1629[13] = v1624;
        v1629[14] = v1317;
        v1629[15] = v1625;
        if (v1626)
          operator delete(v1626);
      }
      else
      {
        *v1316 = v1312;
        v1317 = v1316 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1317;
      v1324 = v2650;
      if (!v2650)
        goto LABEL_2421;
      v2651 = v2650;
      goto LABEL_2420;
    case 6:
      v96 = operator new();
      FullLayer<float>::FullLayer(v96, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v98 = v97;
      *v40 = v96;
      v99 = operator new();
      v100 = *(_DWORD *)(a1 + 4);
      v2649 = 0;
      v2647 = 0;
      v2648 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2647, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v99, v100, v100, (_DWORD **)&v2647, 0, a2, 1, 0, 0);
      if (v98 < 2)
      {
        v615 = 2;
        if ((unint64_t)((8 * v98) >> 2) > 2)
          v615 = (8 * v98) >> 2;
        if ((unint64_t)(8 * v98) >= 0x7FFFFFFFFFFFFFF8)
          v616 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v616 = v615;
        if (v616)
          v616 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v616);
        v617 = 0;
        *(_QWORD *)(v616 + 8) = v99;
        v101 = v616 + 16;
        do
        {
          *(_QWORD *)(v616 + v617 * 8) = v40[v617];
          --v617;
        }
        while (v617 != -1);
        v618 = (uint64_t *)v616;
        operator delete(v40);
        v40 = v618;
      }
      else
      {
        v40[1] = v99;
        v101 = (uint64_t)(v40 + 2);
      }
      if (v2647)
      {
        v2648 = v2647;
        operator delete(v2647);
      }
      v619 = operator new();
      v2645 = 0;
      v2644 = 0;
      v2646 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2644, v40, v101, (v101 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v619, (uint64_t)&v2644);
      if (v2644)
      {
        v2645 = v2644;
        operator delete(v2644);
      }
      v620 = operator new();
      FullLayer<float>::FullLayer(v620, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v623 = v622;
      *v621 = v620;
      v624 = operator new();
      v625 = *(_DWORD *)(a1 + 4);
      v2643 = 0;
      v2641 = 0;
      v2642 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2641, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v624, v625, v625, (_DWORD **)&v2641, 0, a2, 1, 0, 0);
      if (v623 < 2)
      {
        v679 = 2;
        if ((unint64_t)((8 * v623) >> 2) > 2)
          v679 = (8 * v623) >> 2;
        if ((unint64_t)(8 * v623) >= 0x7FFFFFFFFFFFFFF8)
          v680 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v680 = v679;
        if (v680)
          v680 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v680);
        v681 = 0;
        *(_QWORD *)(v680 + 8) = v624;
        v626 = v680 + 16;
        do
        {
          *(_QWORD *)(v680 + v681 * 8) = v621[v681];
          --v681;
        }
        while (v681 != -1);
        v682 = (uint64_t *)v680;
        operator delete(v621);
        v621 = v682;
      }
      else
      {
        v621[1] = v624;
        v626 = (uint64_t)(v621 + 2);
      }
      if (v2641)
      {
        v2642 = v2641;
        operator delete(v2641);
      }
      v683 = operator new();
      v684 = operator new();
      v2639 = 0;
      v2638 = 0;
      v2640 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2638, v621, v626, (v626 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v684, (uint64_t)&v2638);
      Reverse::Reverse(v683, v684, *(_DWORD *)(a1 + 20));
      if (v2638)
      {
        v2639 = v2638;
        operator delete(v2638);
      }
      v685 = operator new(8uLL);
      *v685 = v619;
      v686 = operator new(0x10uLL);
      v687 = v686 + 2;
      *v686 = *v685;
      v686[1] = v683;
      v2681 = v686;
      v2683 = v686 + 2;
      operator delete(v685);
      v2682 = v687;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v689 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v689)
        goto LABEL_2104;
      v691 = *(_QWORD *)(v2366 + 104);
      v692 = ((uint64_t)v690 - v691) >> 3;
      if ((unint64_t)(v692 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v693 = v689 - v691;
      v694 = v693 >> 2;
      if (v693 >> 2 <= (unint64_t)(v692 + 1))
        v694 = v692 + 1;
      if ((unint64_t)v693 >= 0x7FFFFFFFFFFFFFF8)
        v695 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v695 = v694;
      if (v695)
        v695 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v695);
      else
        v696 = 0;
      v2032 = (char ***)(v695 + 8 * v692);
      v2033 = v695 + 8 * v696;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2035 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2035)
        goto LABEL_2344;
      do
      {
        v2036 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2036;
      }
      while (v2034 != v2035);
      goto LABEL_2343;
    case 7:
      v60 = operator new();
      RecurrentLayer<float>::RecurrentLayer(v60, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v61 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 < v61)
        goto LABEL_855;
      v63 = *(_QWORD *)(a1 + 104);
      v64 = ((uint64_t)v62 - v63) >> 3;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v65 = v61 - v63;
      v66 = v65 >> 2;
      if (v65 >> 2 <= (unint64_t)(v64 + 1))
        v66 = v64 + 1;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
        v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
      else
        v68 = 0;
      v754 = (uint64_t *)(v67 + 8 * v64);
      v755 = v67 + 8 * v68;
      *v754 = v60;
      v756 = v754 + 1;
      v758 = *(char **)(a1 + 104);
      v757 = *(char **)(a1 + 112);
      if (v757 == v758)
        goto LABEL_1246;
      do
      {
        v759 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v754 = v759;
      }
      while (v757 != v758);
      goto LABEL_1245;
    case 8:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v108 = operator new();
      RecurrentLayer<float>::RecurrentLayer(v108, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      v109 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v111 = v110;
      *v109 = v108;
      v112 = &v109[v110];
      v2682 = v109 + 1;
      v2683 = v112;
      v2681 = v109;
      v113 = operator new();
      v114 = operator new();
      RecurrentLayer<float>::RecurrentLayer(v114, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      Reverse::Reverse(v113, v114, 0);
      if (v111 < 2)
      {
        v656 = 2;
        if ((unint64_t)(((char *)v112 - (char *)v109) >> 2) > 2)
          v656 = ((char *)v112 - (char *)v109) >> 2;
        if ((unint64_t)((char *)v112 - (char *)v109) >= 0x7FFFFFFFFFFFFFF8)
          v657 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v657 = v656;
        if (v657)
          v657 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v657);
        else
          v658 = 0;
        v1411 = 0;
        v1412 = v657 + 8;
        v1413 = v657 + 8 * v658;
        *(_QWORD *)(v657 + 8) = v113;
        v115 = (_QWORD *)(v657 + 16);
        do
        {
          *(_QWORD *)(v657 + v1411 * 8) = v109[v1411];
          --v1411;
        }
        while (v1411 != -1);
        v1414 = v2681;
        v2681 = (void *)(v1412 - 8);
        v2683 = (_QWORD *)v1413;
        if (v1414)
          operator delete(v1414);
      }
      else
      {
        v109[1] = v113;
        v115 = v109 + 2;
      }
      v2682 = v115;
      v1415 = (char **)operator new();
      Parallel::Parallel(v1415, (uint64_t)&v2681);
      v1417 = *(char ****)(v2366 + 112);
      v1416 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1417 >= v1416)
      {
        v1419 = *(_QWORD *)(v2366 + 104);
        v1420 = ((uint64_t)v1417 - v1419) >> 3;
        if ((unint64_t)(v1420 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1421 = v1416 - v1419;
        v1422 = v1421 >> 2;
        if (v1421 >> 2 <= (unint64_t)(v1420 + 1))
          v1422 = v1420 + 1;
        if ((unint64_t)v1421 >= 0x7FFFFFFFFFFFFFF8)
          v1423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1423 = v1422;
        if (v1423)
          v1423 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1423);
        else
          v1424 = 0;
        v1559 = (char ***)(v1423 + 8 * v1420);
        v1560 = v1423 + 8 * v1424;
        *v1559 = v1415;
        v1418 = v1559 + 1;
        v1562 = *(char **)(v2366 + 104);
        v1561 = *(char **)(v2366 + 112);
        if (v1561 == v1562)
        {
          v1564 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1563 = (char **)*((_QWORD *)v1561 - 1);
            v1561 -= 8;
            *--v1559 = v1563;
          }
          while (v1561 != v1562);
          v1564 = (_QWORD *)v2366;
          v1561 = *(char **)(v2366 + 104);
        }
        v1564[13] = v1559;
        v1564[14] = v1418;
        v1564[15] = v1560;
        if (v1561)
          operator delete(v1561);
      }
      else
      {
        *v1417 = v1415;
        v1418 = v1417 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1418;
      goto LABEL_2408;
    case 9:
      v292 = operator new();
      FullLayer<float>::FullLayer(v292, *(_DWORD *)a1, 2 * v2353, 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v294 = *(uint64_t **)(a1 + 112);
      v293 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v294 >= v293)
      {
        v511 = *(_QWORD *)(v2366 + 104);
        v512 = ((uint64_t)v294 - v511) >> 3;
        if ((unint64_t)(v512 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v513 = v293 - v511;
        v514 = v513 >> 2;
        if (v513 >> 2 <= (unint64_t)(v512 + 1))
          v514 = v512 + 1;
        if ((unint64_t)v513 >= 0x7FFFFFFFFFFFFFF8)
          v515 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v515 = v514;
        if (v515)
          v515 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v515);
        else
          v516 = 0;
        v819 = (uint64_t *)(v515 + 8 * v512);
        v820 = v515 + 8 * v516;
        *v819 = v292;
        v295 = v819 + 1;
        v822 = *(char **)(v2366 + 104);
        v821 = *(char **)(v2366 + 112);
        if (v821 == v822)
        {
          v824 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v823 = *((_QWORD *)v821 - 1);
            v821 -= 8;
            *--v819 = v823;
          }
          while (v821 != v822);
          v824 = (_QWORD *)v2366;
          v821 = *(char **)(v2366 + 104);
        }
        v824[13] = v819;
        v824[14] = v295;
        v824[15] = v820;
        if (v821)
          operator delete(v821);
      }
      else
      {
        *v294 = v292;
        v295 = v294 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v295;
      v929 = operator new();
      RecurrentLayer<float>::RecurrentLayer(v929, v2353, v2353, 3, v4 != 0, v2355 != 0, 1, 0);
      v931 = *(uint64_t **)(v2366 + 112);
      v930 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v931 >= v930)
      {
        v933 = *(_QWORD *)(v2366 + 104);
        v934 = ((uint64_t)v931 - v933) >> 3;
        if ((unint64_t)(v934 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v935 = v930 - v933;
        v936 = v935 >> 2;
        if (v935 >> 2 <= (unint64_t)(v934 + 1))
          v936 = v934 + 1;
        if ((unint64_t)v935 >= 0x7FFFFFFFFFFFFFF8)
          v937 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v937 = v936;
        if (v937)
          v937 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v937);
        else
          v938 = 0;
        v1155 = (uint64_t *)(v937 + 8 * v934);
        v1156 = v937 + 8 * v938;
        *v1155 = v929;
        v932 = v1155 + 1;
        v1158 = *(char **)(v2366 + 104);
        v1157 = *(char **)(v2366 + 112);
        if (v1157 == v1158)
        {
          v1160 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1159 = *((_QWORD *)v1157 - 1);
            v1157 -= 8;
            *--v1155 = v1159;
          }
          while (v1157 != v1158);
          v1160 = (_QWORD *)v2366;
          v1157 = *(char **)(v2366 + 104);
        }
        v1160[13] = v1155;
        v1160[14] = v932;
        v1160[15] = v1156;
        if (v1157)
          operator delete(v1157);
      }
      else
      {
        *v931 = v929;
        v932 = v931 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v932;
      goto LABEL_2421;
    case 10:
      v60 = operator new();
      FullLayer<float>::FullLayer(v60, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v120 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 < v120)
        goto LABEL_855;
      v121 = *(_QWORD *)(a1 + 104);
      v122 = ((uint64_t)v62 - v121) >> 3;
      if ((unint64_t)(v122 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v123 = v120 - v121;
      v124 = v123 >> 2;
      if (v123 >> 2 <= (unint64_t)(v122 + 1))
        v124 = v122 + 1;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
        v125 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v125 = v124;
      if (v125)
        v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v125);
      else
        v126 = 0;
      v754 = (uint64_t *)(v125 + 8 * v122);
      v755 = v125 + 8 * v126;
      *v754 = v60;
      v756 = v754 + 1;
      v787 = *(char **)(a1 + 104);
      v757 = *(char **)(a1 + 112);
      if (v757 == v787)
        goto LABEL_1246;
      do
      {
        v788 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v754 = v788;
      }
      while (v757 != v787);
      goto LABEL_1245;
    case 11:
      v69 = operator new();
      FullLayer<float>::FullLayer(v69, *(_DWORD *)a1, 2 * *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v71 = *(uint64_t **)(a1 + 112);
      v70 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v71 >= v70)
      {
        v464 = *(_QWORD *)(a1 + 104);
        v465 = ((uint64_t)v71 - v464) >> 3;
        if ((unint64_t)(v465 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v466 = v70 - v464;
        v467 = v466 >> 2;
        if (v466 >> 2 <= (unint64_t)(v465 + 1))
          v467 = v465 + 1;
        if ((unint64_t)v466 >= 0x7FFFFFFFFFFFFFF8)
          v468 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v468 = v467;
        if (v468)
          v468 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v468);
        else
          v469 = 0;
        v760 = (uint64_t *)(v468 + 8 * v465);
        v761 = v468 + 8 * v469;
        *v760 = v69;
        v72 = v760 + 1;
        v763 = *(char **)(a1 + 104);
        v762 = *(char **)(a1 + 112);
        if (v762 == v763)
        {
          v765 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v764 = *((_QWORD *)v762 - 1);
            v762 -= 8;
            *--v760 = v764;
          }
          while (v762 != v763);
          v765 = (_QWORD *)a1;
          v762 = *(char **)(a1 + 104);
        }
        v765[13] = v760;
        v765[14] = v72;
        v765[15] = v761;
        if (v762)
          operator delete(v762);
      }
      else
      {
        *v71 = v69;
        v72 = v71 + 1;
      }
      *(_QWORD *)(a1 + 112) = v72;
      v60 = operator new();
      v854 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      FullLayer<float>::FullLayer(v60, v854, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v855 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 >= v855)
      {
        v856 = *(_QWORD *)(a1 + 104);
        v857 = ((uint64_t)v62 - v856) >> 3;
        if ((unint64_t)(v857 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v858 = v855 - v856;
        v859 = v858 >> 2;
        if (v858 >> 2 <= (unint64_t)(v857 + 1))
          v859 = v857 + 1;
        if ((unint64_t)v858 >= 0x7FFFFFFFFFFFFFF8)
          v860 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v860 = v859;
        if (v860)
          v860 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v860);
        else
          v861 = 0;
        v754 = (uint64_t *)(v860 + 8 * v857);
        v755 = v860 + 8 * v861;
        *v754 = v60;
        v756 = v754 + 1;
        v1197 = *(char **)(a1 + 104);
        v757 = *(char **)(a1 + 112);
        if (v757 == v1197)
        {
LABEL_1246:
          v1199 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1198 = *((_QWORD *)v757 - 1);
            v757 -= 8;
            *--v754 = v1198;
          }
          while (v757 != v1197);
LABEL_1245:
          v1199 = (_QWORD *)a1;
          v757 = *(char **)(a1 + 104);
        }
        v1199[13] = v754;
        v1199[14] = v756;
        v1199[15] = v755;
        if (v757)
          operator delete(v757);
      }
      else
      {
LABEL_855:
        *v62 = v60;
        v756 = v62 + 1;
      }
      *(_QWORD *)(a1 + 112) = v756;
      goto LABEL_2421;
    case 12:
      v102 = operator new();
      v103 = *(_DWORD *)a1;
      v104 = *(_DWORD *)(a1 + 4);
      v2637 = 0;
      v2635 = 0;
      v2636 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2635, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v102, v103, v104, (_DWORD **)&v2635, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v106 = *(uint64_t **)(a1 + 112);
      v105 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v106 >= v105)
      {
        v559 = *(_QWORD *)(a1 + 104);
        v560 = ((uint64_t)v106 - v559) >> 3;
        if ((unint64_t)(v560 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v561 = v105 - v559;
        v562 = v561 >> 2;
        if (v561 >> 2 <= (unint64_t)(v560 + 1))
          v562 = v560 + 1;
        if ((unint64_t)v561 >= 0x7FFFFFFFFFFFFFF8)
          v563 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v563 = v562;
        if (v563)
          v563 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v563);
        else
          v564 = 0;
        v996 = (uint64_t *)(v563 + 8 * v560);
        v997 = v563 + 8 * v564;
        *v996 = v102;
        v107 = v996 + 1;
        v999 = *(char **)(a1 + 104);
        v998 = *(char **)(a1 + 112);
        if (v998 == v999)
        {
          v1001 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1000 = *((_QWORD *)v998 - 1);
            v998 -= 8;
            *--v996 = v1000;
          }
          while (v998 != v999);
          v1001 = (_QWORD *)a1;
          v998 = *(char **)(a1 + 104);
        }
        v1001[13] = v996;
        v1001[14] = v107;
        v1001[15] = v997;
        if (v998)
          operator delete(v998);
      }
      else
      {
        *v106 = v102;
        v107 = v106 + 1;
      }
      *(_QWORD *)(a1 + 112) = v107;
      if (v2635)
      {
        v2636 = v2635;
        operator delete(v2635);
      }
      v1086 = operator new();
      v1087 = *(_DWORD *)(a1 + 4);
      v2634 = 0;
      v2632 = 0;
      v2633 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2632, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1086, v1087, v1087, (_DWORD **)&v2632, 0, a2, 1, 0, 0);
      v1089 = *(uint64_t **)(a1 + 112);
      v1088 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1089 >= v1088)
      {
        v1091 = *(_QWORD *)(a1 + 104);
        v1092 = ((uint64_t)v1089 - v1091) >> 3;
        if ((unint64_t)(v1092 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1093 = v1088 - v1091;
        v1094 = v1093 >> 2;
        if (v1093 >> 2 <= (unint64_t)(v1092 + 1))
          v1094 = v1092 + 1;
        if ((unint64_t)v1093 >= 0x7FFFFFFFFFFFFFF8)
          v1095 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1095 = v1094;
        if (v1095)
          v1095 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1095);
        else
          v1096 = 0;
        v1375 = (uint64_t *)(v1095 + 8 * v1092);
        v1376 = v1095 + 8 * v1096;
        *v1375 = v1086;
        v1090 = v1375 + 1;
        v1378 = *(char **)(a1 + 104);
        v1377 = *(char **)(a1 + 112);
        if (v1377 == v1378)
        {
          v1380 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1379 = *((_QWORD *)v1377 - 1);
            v1377 -= 8;
            *--v1375 = v1379;
          }
          while (v1377 != v1378);
          v1380 = (_QWORD *)a1;
          v1377 = *(char **)(a1 + 104);
        }
        v1380[13] = v1375;
        v1380[14] = v1090;
        v1380[15] = v1376;
        if (v1377)
          operator delete(v1377);
      }
      else
      {
        *v1089 = v1086;
        v1090 = v1089 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1090;
      v1324 = v2632;
      if (!v2632)
        goto LABEL_2421;
      v2633 = v2632;
      goto LABEL_2420;
    case 13:
      v46 = operator new();
      v47 = *(_DWORD *)a1;
      v48 = *(_DWORD *)(a1 + 4);
      v2631 = 0;
      v2629 = 0;
      v2630 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2629, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v46, v47, v48, (_DWORD **)&v2629, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v50 = v49;
      *v40 = v46;
      if (v2629)
      {
        v2630 = v2629;
        operator delete(v2629);
      }
      v51 = operator new();
      v52 = *(_DWORD *)(a1 + 4);
      v2628 = 0;
      v2626 = 0;
      v2627 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2626, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v51, v52, v52, (_DWORD **)&v2626, 0, a2, 1, 0, 0);
      if (v50 < 2)
      {
        v643 = 2;
        if ((unint64_t)((8 * v50) >> 2) > 2)
          v643 = (8 * v50) >> 2;
        if ((unint64_t)(8 * v50) >= 0x7FFFFFFFFFFFFFF8)
          v644 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v644 = v643;
        if (v644)
          v644 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v644);
        v645 = 0;
        *(_QWORD *)(v644 + 8) = v51;
        v53 = v644 + 16;
        do
        {
          *(_QWORD *)(v644 + v645 * 8) = v40[v645];
          --v645;
        }
        while (v645 != -1);
        v646 = (uint64_t *)v644;
        operator delete(v40);
        v40 = v646;
      }
      else
      {
        v40[1] = v51;
        v53 = (uint64_t)(v40 + 2);
      }
      if (v2626)
      {
        v2627 = v2626;
        operator delete(v2626);
      }
      v647 = operator new();
      v2624 = 0;
      v2623 = 0;
      v2625 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2623, v40, v53, (v53 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v647, (uint64_t)&v2623);
      if (v2623)
      {
        v2624 = v2623;
        operator delete(v2623);
      }
      v648 = operator new();
      v649 = *(_DWORD *)a1;
      v650 = *(_DWORD *)(a1 + 4);
      v2622 = 0;
      v2620 = 0;
      v2621 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2620, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v648, v649, v650, (_DWORD **)&v2620, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v652 = v651;
      *v621 = v648;
      if (v2620)
      {
        v2621 = v2620;
        operator delete(v2620);
      }
      v653 = operator new();
      v654 = *(_DWORD *)(a1 + 4);
      v2619 = 0;
      v2617 = 0;
      v2618 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2617, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v653, v654, v654, (_DWORD **)&v2617, 0, a2, 1, 0, 0);
      if (v652 < 2)
      {
        v713 = 2;
        if ((unint64_t)((8 * v652) >> 2) > 2)
          v713 = (8 * v652) >> 2;
        if ((unint64_t)(8 * v652) >= 0x7FFFFFFFFFFFFFF8)
          v714 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v714 = v713;
        if (v714)
          v714 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v714);
        v715 = 0;
        *(_QWORD *)(v714 + 8) = v653;
        v655 = v714 + 16;
        do
        {
          *(_QWORD *)(v714 + v715 * 8) = v621[v715];
          --v715;
        }
        while (v715 != -1);
        v716 = (uint64_t *)v714;
        operator delete(v621);
        v621 = v716;
      }
      else
      {
        v621[1] = v653;
        v655 = (uint64_t)(v621 + 2);
      }
      if (v2617)
      {
        v2618 = v2617;
        operator delete(v2617);
      }
      v717 = operator new();
      v718 = operator new();
      v2615 = 0;
      v2614 = 0;
      v2616 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2614, v621, v655, (v655 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v718, (uint64_t)&v2614);
      Reverse::Reverse(v717, v718, *(_DWORD *)(a1 + 20));
      if (v2614)
      {
        v2615 = v2614;
        operator delete(v2614);
      }
      v719 = operator new(8uLL);
      *v719 = v647;
      v720 = operator new(0x10uLL);
      v721 = v720 + 2;
      *v720 = *v719;
      v720[1] = v717;
      v2681 = v720;
      v2683 = v720 + 2;
      operator delete(v719);
      v2682 = v721;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v722 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v722)
        goto LABEL_2104;
      v723 = *(_QWORD *)(v2366 + 104);
      v724 = ((uint64_t)v690 - v723) >> 3;
      if ((unint64_t)(v724 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v725 = v722 - v723;
      v726 = v725 >> 2;
      if (v725 >> 2 <= (unint64_t)(v724 + 1))
        v726 = v724 + 1;
      if ((unint64_t)v725 >= 0x7FFFFFFFFFFFFFF8)
        v727 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v727 = v726;
      if (v727)
        v727 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v727);
      else
        v728 = 0;
      v2032 = (char ***)(v727 + 8 * v724);
      v2033 = v727 + 8 * v728;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2039 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2039)
        goto LABEL_2344;
      do
      {
        v2040 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2040;
      }
      while (v2034 != v2039);
      goto LABEL_2343;
    case 14:
      v90 = operator new();
      Direct::Direct(v90, *(_DWORD *)a1, *(_DWORD *)a1, *(_DWORD *)(a1 + 20));
      v91 = (void **)(a1 + 104);
      v93 = *(uint64_t **)(a1 + 112);
      v92 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v93 >= v92)
      {
        v470 = ((char *)v93 - (_BYTE *)*v91) >> 3;
        if ((unint64_t)(v470 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v471 = v92 - (_QWORD)*v91;
        v472 = v471 >> 2;
        if (v471 >> 2 <= (unint64_t)(v470 + 1))
          v472 = v470 + 1;
        if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF8)
          v473 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v473 = v472;
        if (v473)
          v473 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v473);
        else
          v474 = 0;
        v766 = (uint64_t *)(v473 + 8 * v470);
        v767 = v473 + 8 * v474;
        *v766 = v90;
        v95 = v766 + 1;
        v768 = (char *)*v94;
        v769 = (char *)*v91;
        if (*v94 != *v91)
        {
          do
          {
            v770 = *((_QWORD *)v768 - 1);
            v768 -= 8;
            *--v766 = v770;
          }
          while (v768 != v769);
          v768 = (char *)*v91;
        }
        *(_QWORD *)(v2366 + 104) = v766;
        *(_QWORD *)(v2366 + 112) = v95;
        *(_QWORD *)(v2366 + 120) = v767;
        if (v768)
          operator delete(v768);
      }
      else
      {
        *v93 = v90;
        v95 = v93 + 1;
      }
      *v94 = v95;
      (*(void (**)(_QWORD))(*(_QWORD *)*(v95 - 1) + 8))(*(v95 - 1));
      v771 = operator new();
      v772 = *(_DWORD *)v2366;
      v773 = *(_DWORD *)(v2366 + 4);
      memset(v2613, 0, sizeof(v2613));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2613, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v771, v772, v773, (_DWORD **)v2613, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v775 = *(uint64_t **)(v2366 + 112);
      v774 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v775 >= v774)
      {
        v776 = ((char *)v775 - (_BYTE *)*v91) >> 3;
        if ((unint64_t)(v776 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v777 = v774 - (_QWORD)*v91;
        v778 = v777 >> 2;
        if (v777 >> 2 <= (unint64_t)(v776 + 1))
          v778 = v776 + 1;
        if ((unint64_t)v777 >= 0x7FFFFFFFFFFFFFF8)
          v779 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v779 = v778;
        if (v779)
          v779 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v779);
        else
          v780 = 0;
        v1370 = (uint64_t *)(v779 + 8 * v776);
        v1371 = v779 + 8 * v780;
        *v1370 = v771;
        v291 = v1370 + 1;
        v1372 = (char *)*v94;
        v1373 = (char *)*v91;
        if (*v94 != *v91)
        {
          do
          {
            v1374 = *((_QWORD *)v1372 - 1);
            v1372 -= 8;
            *--v1370 = v1374;
          }
          while (v1372 != v1373);
          v1372 = (char *)*v91;
        }
        *(_QWORD *)(v2366 + 104) = v1370;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1371;
        if (v1372)
          operator delete(v1372);
      }
      else
      {
        *v775 = v771;
        v291 = v775 + 1;
      }
      *v94 = v291;
      v1019 = v2613[0];
      if (!v2613[0])
        goto LABEL_1450;
      v1020 = v2613;
      goto LABEL_1449;
    case 15:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v127 = operator new();
      Direct::Direct(v127, *(_DWORD *)a1, *(_DWORD *)a1, *(_DWORD *)(a1 + 20));
      v128 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      *v128 = v127;
      v2682 = v128 + 1;
      v2683 = &v128[v129];
      v2681 = v128;
      v130 = (char **)operator new();
      Parallel::Parallel(v130, (uint64_t)&v2681);
      v132 = *(char ****)(a1 + 112);
      v131 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v132 >= v131)
      {
        v609 = *(_QWORD *)(a1 + 104);
        v610 = ((uint64_t)v132 - v609) >> 3;
        if ((unint64_t)(v610 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v611 = v131 - v609;
        v612 = v611 >> 2;
        if (v611 >> 2 <= (unint64_t)(v610 + 1))
          v612 = v610 + 1;
        if ((unint64_t)v611 >= 0x7FFFFFFFFFFFFFF8)
          v613 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v613 = v612;
        if (v613)
          v613 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v613);
        else
          v614 = 0;
        v1161 = (char ***)(v613 + 8 * v610);
        v1162 = v613 + 8 * v614;
        *v1161 = v130;
        v133 = v1161 + 1;
        v1164 = *(char **)(a1 + 104);
        v1163 = *(char **)(a1 + 112);
        if (v1163 == v1164)
        {
          v1166 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1165 = (char **)*((_QWORD *)v1163 - 1);
            v1163 -= 8;
            *--v1161 = v1165;
          }
          while (v1163 != v1164);
          v1166 = (_QWORD *)a1;
          v1163 = *(char **)(a1 + 104);
        }
        v1166[13] = v1161;
        v1166[14] = v133;
        v1166[15] = v1162;
        if (v1163)
          operator delete(v1163);
      }
      else
      {
        *v132 = v130;
        v133 = v132 + 1;
      }
      *(_QWORD *)(a1 + 112) = v133;
      v1167 = operator new();
      v1168 = *(_DWORD *)a1;
      v1169 = *(_DWORD *)(a1 + 4);
      v2612 = 0;
      v2610 = 0;
      v2611 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2610, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1167, v1168, v1169, (_DWORD **)&v2610, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v1171 = *(uint64_t **)(a1 + 112);
      v1170 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1171 >= v1170)
      {
        v1173 = *(_QWORD *)(a1 + 104);
        v1174 = ((uint64_t)v1171 - v1173) >> 3;
        if ((unint64_t)(v1174 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1175 = v1170 - v1173;
        v1176 = v1175 >> 2;
        if (v1175 >> 2 <= (unint64_t)(v1174 + 1))
          v1176 = v1174 + 1;
        if ((unint64_t)v1175 >= 0x7FFFFFFFFFFFFFF8)
          v1177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1177 = v1176;
        if (v1177)
          v1177 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1177);
        else
          v1178 = 0;
        v1491 = (uint64_t *)(v1177 + 8 * v1174);
        v1492 = v1177 + 8 * v1178;
        *v1491 = v1167;
        v1172 = v1491 + 1;
        v1494 = *(char **)(a1 + 104);
        v1493 = *(char **)(a1 + 112);
        if (v1493 == v1494)
        {
          v1496 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1495 = *((_QWORD *)v1493 - 1);
            v1493 -= 8;
            *--v1491 = v1495;
          }
          while (v1493 != v1494);
          v1496 = (_QWORD *)a1;
          v1493 = *(char **)(a1 + 104);
        }
        v1496[13] = v1491;
        v1496[14] = v1172;
        v1496[15] = v1492;
        if (v1493)
          operator delete(v1493);
      }
      else
      {
        *v1171 = v1167;
        v1172 = v1171 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1172;
      if (v2610)
      {
        v2611 = v2610;
        operator delete(v2610);
        v1172 = *(_QWORD **)(a1 + 112);
      }
      (*(void (**)(_QWORD))(*(_QWORD *)*(v1172 - 1) + 8))(*(v1172 - 1));
      goto LABEL_2408;
    case 16:
      if (*(int *)(a2 + 64) >= 1)
      {
        v148 = 0;
        while (2)
        {
          v149 = *(_QWORD *)(a2 + 56);
          v150 = v149 + 632 * v148;
          if (*(_BYTE *)(v150 + 20))
            v151 = *(_DWORD *)(v2366 + 20);
          else
            v151 = 0;
          v152 = v149 + 632 * v148;
          v153 = *(unsigned __int8 *)(v152 + 512);
          v154 = *(_BYTE *)(v152 + 512) != 0;
          v156 = *(_DWORD *)(v150 + 12);
          v155 = *(_DWORD *)(v150 + 16);
          switch(*(_DWORD *)(v152 + 8))
          {
            case 0:
              v157 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v157 + 576);
              v2362[2] = *(_DWORD *)(v157 + 584);
              v158 = operator new();
              v2608 = 0;
              v2607 = 0;
              v2609 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2607, v2362, (uint64_t)v2361);
              LSTM<float>::LSTM(v158, v156, v155, &v2607, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 0);
              v160 = *(uint64_t **)(v2366 + 112);
              v159 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v160 >= v159)
              {
                v200 = *(_QWORD *)(v2366 + 104);
                v201 = ((uint64_t)v160 - v200) >> 3;
                if ((unint64_t)(v201 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v202 = v159 - v200;
                v203 = v202 >> 2;
                if (v202 >> 2 <= (unint64_t)(v201 + 1))
                  v203 = v201 + 1;
                if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
                  v204 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v204 = v203;
                if (v204)
                  v204 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v204);
                else
                  v205 = 0;
                v223 = (uint64_t *)(v204 + 8 * v201);
                *v223 = v158;
                v161 = v223 + 1;
                v225 = *(char **)(v2366 + 104);
                v224 = *(char **)(v2366 + 112);
                if (v224 == v225)
                {
                  v227 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v226 = *((_QWORD *)v224 - 1);
                    v224 -= 8;
                    *--v223 = v226;
                  }
                  while (v224 != v225);
                  v227 = (_QWORD *)v2366;
                  v224 = *(char **)(v2366 + 104);
                }
                v227[13] = v223;
                v227[14] = v161;
                v227[15] = v204 + 8 * v205;
                if (v224)
                  operator delete(v224);
              }
              else
              {
                *v160 = v158;
                v161 = v160 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v161;
              v228 = v2607;
              if (!v2607)
                goto LABEL_205;
              v2608 = v2607;
              goto LABEL_204;
            case 1:
              v167 = operator new();
              RecurrentLayer<float>::RecurrentLayer(v167, v156, v155, *(_DWORD *)(v149 + 632 * v148 + 576), v2358 != 0, v2355 != 0, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v168 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 < v168)
                goto LABEL_113;
              v170 = *(_QWORD *)(v2366 + 104);
              v171 = ((uint64_t)v169 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v172 = v168 - v170;
              v173 = v172 >> 2;
              if (v172 >> 2 <= (unint64_t)(v171 + 1))
                v173 = v171 + 1;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
                v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
              else
                v175 = 0;
              v209 = (uint64_t *)(v174 + 8 * v171);
              *v209 = v167;
              v189 = v209 + 1;
              v211 = *(char **)(v2366 + 104);
              v210 = *(char **)(v2366 + 112);
              if (v210 == v211)
                goto LABEL_157;
              do
              {
                v212 = *((_QWORD *)v210 - 1);
                v210 -= 8;
                *--v209 = v212;
              }
              while (v210 != v211);
              goto LABEL_156;
            case 3:
              v167 = operator new();
              FullLayer<float>::FullLayer(v167, v156, v155, *(_DWORD *)(v149 + 632 * v148 + 576), v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v183 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 < v183)
                goto LABEL_113;
              v184 = *(_QWORD *)(v2366 + 104);
              v185 = ((uint64_t)v169 - v184) >> 3;
              if ((unint64_t)(v185 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v186 = v183 - v184;
              v187 = v186 >> 2;
              if (v186 >> 2 <= (unint64_t)(v185 + 1))
                v187 = v185 + 1;
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v187;
              if (v174)
                v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
              else
                v175 = 0;
              v209 = (uint64_t *)(v174 + 8 * v185);
              *v209 = v167;
              v189 = v209 + 1;
              v213 = *(char **)(v2366 + 104);
              v210 = *(char **)(v2366 + 112);
              if (v210 == v213)
                goto LABEL_157;
              do
              {
                v214 = *((_QWORD *)v210 - 1);
                v210 -= 8;
                *--v209 = v214;
              }
              while (v210 != v213);
              goto LABEL_156;
            case 4:
              v167 = operator new();
              SoftMax<float>::SoftMax(v167, v156, v155, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v188 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 >= v188)
              {
                v190 = *(_QWORD *)(v2366 + 104);
                v191 = ((uint64_t)v169 - v190) >> 3;
                if ((unint64_t)(v191 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v192 = v188 - v190;
                v193 = v192 >> 2;
                if (v192 >> 2 <= (unint64_t)(v191 + 1))
                  v193 = v191 + 1;
                if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
                  v174 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v174 = v193;
                if (v174)
                  v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
                else
                  v175 = 0;
                v209 = (uint64_t *)(v174 + 8 * v191);
                *v209 = v167;
                v189 = v209 + 1;
                v215 = *(char **)(v2366 + 104);
                v210 = *(char **)(v2366 + 112);
                if (v210 == v215)
                {
LABEL_157:
                  v217 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v216 = *((_QWORD *)v210 - 1);
                    v210 -= 8;
                    *--v209 = v216;
                  }
                  while (v210 != v215);
LABEL_156:
                  v217 = (_QWORD *)v2366;
                  v210 = *(char **)(v2366 + 104);
                }
                v217[13] = v209;
                v217[14] = v189;
                v217[15] = v174 + 8 * v175;
                if (v210)
                  operator delete(v210);
              }
              else
              {
LABEL_113:
                *v169 = v167;
                v189 = v169 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v189;
LABEL_205:
              if (++v148 >= *(int *)(a2 + 64))
                goto LABEL_2422;
              continue;
            case 5:
              v162 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v162 + 576);
              v2362[2] = *(_DWORD *)(v162 + 584);
              v163 = operator new();
              v2605 = 0;
              v2604 = 0;
              v2606 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2604, v2362, (uint64_t)v2361);
              GRU<float>::GRU(v163, v156, v155, &v2604, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v165 = *(uint64_t **)(v2366 + 112);
              v164 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v165 >= v164)
              {
                v194 = *(_QWORD *)(v2366 + 104);
                v195 = ((uint64_t)v165 - v194) >> 3;
                if ((unint64_t)(v195 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v196 = v164 - v194;
                v197 = v196 >> 2;
                if (v196 >> 2 <= (unint64_t)(v195 + 1))
                  v197 = v195 + 1;
                if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
                  v198 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v198 = v197;
                if (v198)
                  v198 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v198);
                else
                  v199 = 0;
                v218 = (uint64_t *)(v198 + 8 * v195);
                *v218 = v163;
                v166 = v218 + 1;
                v220 = *(char **)(v2366 + 104);
                v219 = *(char **)(v2366 + 112);
                if (v219 == v220)
                {
                  v222 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v221 = *((_QWORD *)v219 - 1);
                    v219 -= 8;
                    *--v218 = v221;
                  }
                  while (v219 != v220);
                  v222 = (_QWORD *)v2366;
                  v219 = *(char **)(v2366 + 104);
                }
                v222[13] = v218;
                v222[14] = v166;
                v222[15] = v198 + 8 * v199;
                if (v219)
                  operator delete(v219);
              }
              else
              {
                *v165 = v163;
                v166 = v165 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v166;
              v228 = v2604;
              if (!v2604)
                goto LABEL_205;
              v2605 = v2604;
LABEL_204:
              operator delete(v228);
              goto LABEL_205;
            case 7:
              v176 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v176 + 576);
              v2362[2] = *(_DWORD *)(v176 + 584);
              v2681 = 0;
              v2682 = 0;
              v2683 = 0;
              v177 = operator new();
              v2602 = 0;
              v2601 = 0;
              v2603 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2601, v2362, (uint64_t)v2361);
              LSTM<float>::LSTM(v177, v156, v155, (_DWORD **)&v2601, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 0);
              v178 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
              v180 = v179;
              *v178 = v177;
              v2352 = &v178[v179];
              v2682 = v178 + 1;
              v2683 = v2352;
              v2681 = v178;
              if (v2601)
              {
                v2602 = v2601;
                operator delete(v2601);
              }
              v2354 = operator new();
              v181 = operator new();
              v2599 = 0;
              v2598 = 0;
              v2600 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2598, v2362, (uint64_t)v2361);
              LSTM<float>::LSTM(v181, v156, v155, (_DWORD **)&v2598, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 1);
              Reverse::Reverse(v2354, v181, v151);
              if (v180 < 2)
              {
                v206 = 2;
                if ((unint64_t)(((char *)v2352 - (char *)v178) >> 2) > 2)
                  v206 = ((char *)v2352 - (char *)v178) >> 2;
                if ((unint64_t)((char *)v2352 - (char *)v178) >= 0x7FFFFFFFFFFFFFF8)
                  v207 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v207 = v206;
                if (v207)
                  v207 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v207);
                else
                  v208 = 0;
                v229 = 0;
                v230 = v207 + 8;
                v231 = v207 + 8 * v208;
                *(_QWORD *)(v207 + 8) = v2354;
                v182 = (_QWORD *)(v207 + 16);
                do
                {
                  *(_QWORD *)(v207 + v229 * 8) = v178[v229];
                  --v229;
                }
                while (v229 != -1);
                v232 = v2681;
                v2681 = (void *)(v230 - 8);
                v2683 = (_QWORD *)v231;
                if (v232)
                  operator delete(v232);
              }
              else
              {
                v178[1] = v2354;
                v182 = v178 + 2;
              }
              v2682 = v182;
              if (v2598)
              {
                v2599 = v2598;
                operator delete(v2598);
              }
              v233 = (char **)operator new();
              Parallel::Parallel(v233, (uint64_t)&v2681);
              v235 = *(char ****)(v2366 + 112);
              v234 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v235 >= v234)
              {
                v237 = *(_QWORD *)(v2366 + 104);
                v238 = ((uint64_t)v235 - v237) >> 3;
                if ((unint64_t)(v238 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v239 = v234 - v237;
                v240 = v239 >> 2;
                if (v239 >> 2 <= (unint64_t)(v238 + 1))
                  v240 = v238 + 1;
                if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
                  v241 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v241 = v240;
                if (v241)
                  v241 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v241);
                else
                  v242 = 0;
                v243 = (char ***)(v241 + 8 * v238);
                *v243 = v233;
                v236 = v243 + 1;
                v245 = *(char **)(v2366 + 104);
                v244 = *(char **)(v2366 + 112);
                if (v244 == v245)
                {
                  v247 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v246 = (char **)*((_QWORD *)v244 - 1);
                    v244 -= 8;
                    *--v243 = v246;
                  }
                  while (v244 != v245);
                  v247 = (_QWORD *)v2366;
                  v244 = *(char **)(v2366 + 104);
                }
                v247[13] = v243;
                v247[14] = v236;
                v247[15] = v241 + 8 * v242;
                if (v244)
                  operator delete(v244);
              }
              else
              {
                *v235 = v233;
                v236 = v235 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v236;
              v228 = v2681;
              if (v2681)
                goto LABEL_204;
              goto LABEL_205;
            default:
              exitFramework(89);
          }
        }
      }
      goto LABEL_2421;
    case 17:
      v252 = operator new();
      FullLayer<float>::FullLayer(v252, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v254 = v253;
      *v40 = v252;
      v255 = operator new();
      v256 = *(_DWORD *)(a1 + 4);
      v2672 = 0;
      v2673 = 0;
      v2671 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2671, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v255, v256, v256, &v2671, 0, a2, 1, 0, 0);
      v257 = &v40[v254];
      if (v254 < 2)
      {
        v627 = 2;
        if ((unint64_t)((8 * v254) >> 2) > 2)
          v627 = (8 * v254) >> 2;
        if ((unint64_t)(8 * v254) >= 0x7FFFFFFFFFFFFFF8)
          v628 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v628 = v627;
        if (v628)
          v628 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v628);
        else
          v629 = 0;
        v1242 = 0;
        v257 = (uint64_t *)(v628 + 8 * v629);
        *(_QWORD *)(v628 + 8) = v255;
        v258 = (uint64_t *)(v628 + 16);
        do
        {
          *(_QWORD *)(v628 + v1242 * 8) = v40[v1242];
          --v1242;
        }
        while (v1242 != -1);
        v1243 = (uint64_t *)v628;
        operator delete(v40);
        v40 = v1243;
      }
      else
      {
        v40[1] = v255;
        v258 = v40 + 2;
      }
      if (v2671)
      {
        v2672 = v2671;
        operator delete(v2671);
      }
      v1244 = operator new();
      v1245 = *(_DWORD *)(v2366 + 4);
      v2669 = 0;
      v2670 = 0;
      v2668 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2668, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1244, v1245, v1245, &v2668, 0, a2, 1, 0, 0);
      if (v258 >= v257)
      {
        v1247 = v258 - v40;
        v1248 = v1247 + 1;
        if ((unint64_t)(v1247 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (((char *)v257 - (char *)v40) >> 2 > v1248)
          v1248 = ((char *)v257 - (char *)v40) >> 2;
        if ((unint64_t)((char *)v257 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v1249 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1249 = v1248;
        if (v1249)
          v1249 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1249);
        v1250 = (uint64_t *)(v1249 + 8 * v1247);
        *v1250 = v1244;
        v1246 = (uint64_t)(v1250 + 1);
        while (v258 != v40)
        {
          v1251 = *--v258;
          *--v1250 = v1251;
        }
        operator delete(v40);
        v40 = v1250;
      }
      else
      {
        *v258 = v1244;
        v1246 = (uint64_t)(v258 + 1);
      }
      if (v2668)
      {
        v2669 = v2668;
        operator delete(v2668);
      }
      v1252 = operator new();
      v2665 = 0;
      v2666 = 0;
      v2667 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2665, v40, v1246, (v1246 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v1252, (uint64_t)&v2665);
      if (v2665)
      {
        v2666 = v2665;
        operator delete(v2665);
      }
      v1253 = operator new();
      FullLayer<float>::FullLayer(v1253, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1255 = v1254;
      *v621 = v1253;
      v1256 = operator new();
      v1257 = *(_DWORD *)(v2366 + 4);
      v2664 = 0;
      v2662 = 0;
      v2663 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2662, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1256, v1257, v1257, (_DWORD **)&v2662, 0, a2, 1, 0, 0);
      v1258 = &v621[v1255];
      if (v1255 < 2)
      {
        v1260 = 2;
        if ((unint64_t)((8 * v1255) >> 2) > 2)
          v1260 = (8 * v1255) >> 2;
        if ((unint64_t)(8 * v1255) >= 0x7FFFFFFFFFFFFFF8)
          v1261 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1261 = v1260;
        if (v1261)
          v1261 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1261);
        else
          v1262 = 0;
        v1901 = 0;
        v1258 = (uint64_t *)(v1261 + 8 * v1262);
        *(_QWORD *)(v1261 + 8) = v1256;
        v1259 = (uint64_t *)(v1261 + 16);
        do
        {
          *(_QWORD *)(v1261 + v1901 * 8) = v621[v1901];
          --v1901;
        }
        while (v1901 != -1);
        v1902 = (uint64_t *)v1261;
        operator delete(v621);
        v621 = v1902;
      }
      else
      {
        v621[1] = v1256;
        v1259 = v621 + 2;
      }
      if (v2662)
      {
        v2663 = v2662;
        operator delete(v2662);
      }
      v1903 = operator new();
      v1904 = *(_DWORD *)(v2366 + 4);
      v2661 = 0;
      v2659 = 0;
      v2660 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2659, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1903, v1904, v1904, (_DWORD **)&v2659, 0, a2, 1, 0, 0);
      if (v1259 >= v1258)
      {
        v1906 = v1259 - v621;
        v1907 = v1906 + 1;
        if ((unint64_t)(v1906 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (((char *)v1258 - (char *)v621) >> 2 > v1907)
          v1907 = ((char *)v1258 - (char *)v621) >> 2;
        if ((unint64_t)((char *)v1258 - (char *)v621) >= 0x7FFFFFFFFFFFFFF8)
          v1908 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1908 = v1907;
        if (v1908)
          v1908 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1908);
        v1909 = (uint64_t *)(v1908 + 8 * v1906);
        *v1909 = v1903;
        v1905 = (uint64_t)(v1909 + 1);
        while (v1259 != v621)
        {
          v1910 = *--v1259;
          *--v1909 = v1910;
        }
        operator delete(v621);
        v621 = v1909;
      }
      else
      {
        *v1259 = v1903;
        v1905 = (uint64_t)(v1259 + 1);
      }
      if (v2659)
      {
        v2660 = v2659;
        operator delete(v2659);
      }
      v1911 = operator new();
      v1912 = operator new();
      v2657 = 0;
      v2656 = 0;
      v2658 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2656, v621, v1905, (v1905 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v1912, (uint64_t)&v2656);
      Reverse::Reverse(v1911, v1912, *(_DWORD *)(v2366 + 20));
      if (v2656)
      {
        v2657 = v2656;
        operator delete(v2656);
      }
      v1913 = operator new(8uLL);
      *v1913 = v1252;
      v1914 = operator new(0x10uLL);
      v1915 = v1914 + 2;
      *v1914 = *v1913;
      v1914[1] = v1911;
      v2681 = v1914;
      v2683 = v1914 + 2;
      operator delete(v1913);
      v2682 = v1915;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v1916 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v1916)
        goto LABEL_2104;
      v1918 = *(_QWORD *)(v2366 + 104);
      v1919 = ((uint64_t)v690 - v1918) >> 3;
      if ((unint64_t)(v1919 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v1920 = v1916 - v1918;
      v1921 = v1920 >> 2;
      if (v1920 >> 2 <= (unint64_t)(v1919 + 1))
        v1921 = v1919 + 1;
      if ((unint64_t)v1920 >= 0x7FFFFFFFFFFFFFF8)
        v1922 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1922 = v1921;
      if (v1922)
        v1922 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1922);
      else
        v1923 = 0;
      v2032 = (char ***)(v1922 + 8 * v1919);
      v2033 = v1922 + 8 * v1923;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2131 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2131)
        goto LABEL_2344;
      do
      {
        v2132 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2132;
      }
      while (v2034 != v2131);
      goto LABEL_2343;
    case 19:
      v248 = operator new();
      FullLayer<float>::FullLayer(v248, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v250 = *(uint64_t **)(a1 + 112);
      v249 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v250 >= v249)
      {
        v493 = *(_QWORD *)(a1 + 104);
        v494 = ((uint64_t)v250 - v493) >> 3;
        if ((unint64_t)(v494 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v495 = v249 - v493;
        v496 = v495 >> 2;
        if (v495 >> 2 <= (unint64_t)(v494 + 1))
          v496 = v494 + 1;
        if ((unint64_t)v495 >= 0x7FFFFFFFFFFFFFF8)
          v497 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v497 = v496;
        if (v497)
          v497 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v497);
        else
          v498 = 0;
        v801 = (uint64_t *)(v497 + 8 * v494);
        v802 = v497 + 8 * v498;
        *v801 = v248;
        v251 = v801 + 1;
        v804 = *(char **)(a1 + 104);
        v803 = *(char **)(a1 + 112);
        if (v803 == v804)
        {
          v806 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v805 = *((_QWORD *)v803 - 1);
            v803 -= 8;
            *--v801 = v805;
          }
          while (v803 != v804);
          v806 = (_QWORD *)a1;
          v803 = *(char **)(a1 + 104);
        }
        v806[13] = v801;
        v806[14] = v251;
        v806[15] = v802;
        if (v803)
          operator delete(v803);
      }
      else
      {
        *v250 = v248;
        v251 = v250 + 1;
      }
      *(_QWORD *)(a1 + 112) = v251;
      v895 = operator new();
      v896 = *(_DWORD *)(a1 + 4);
      v2597 = 0;
      v2595 = 0;
      v2596 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2595, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v895, v896, v896, (_DWORD **)&v2595, 0, a2, 1, 0, 0);
      v898 = *(uint64_t **)(a1 + 112);
      v897 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v898 >= v897)
      {
        v900 = *(_QWORD *)(a1 + 104);
        v901 = ((uint64_t)v898 - v900) >> 3;
        if ((unint64_t)(v901 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v902 = v897 - v900;
        v903 = v902 >> 2;
        if (v902 >> 2 <= (unint64_t)(v901 + 1))
          v903 = v901 + 1;
        if ((unint64_t)v902 >= 0x7FFFFFFFFFFFFFF8)
          v904 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v904 = v903;
        if (v904)
          v904 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v904);
        else
          v905 = 0;
        v1218 = (uint64_t *)(v904 + 8 * v901);
        v1219 = v904 + 8 * v905;
        *v1218 = v895;
        v899 = v1218 + 1;
        v1221 = *(char **)(a1 + 104);
        v1220 = *(char **)(a1 + 112);
        if (v1220 == v1221)
        {
          v1223 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1222 = *((_QWORD *)v1220 - 1);
            v1220 -= 8;
            *--v1218 = v1222;
          }
          while (v1220 != v1221);
          v1223 = (_QWORD *)a1;
          v1220 = *(char **)(a1 + 104);
        }
        v1223[13] = v1218;
        v1223[14] = v899;
        v1223[15] = v1219;
        if (v1220)
          operator delete(v1220);
      }
      else
      {
        *v898 = v895;
        v899 = v898 + 1;
      }
      *(_QWORD *)(a1 + 112) = v899;
      v1324 = v2595;
      if (!v2595)
        goto LABEL_2421;
      v2596 = v2595;
      goto LABEL_2420;
    case 20:
      v134 = operator new();
      v135 = *(_DWORD *)a1;
      v136 = *(_DWORD *)(a1 + 4);
      v2594 = 0;
      v2592 = 0;
      v2593 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2592, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v134, v135, v136, (_DWORD **)&v2592, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v138 = *(uint64_t **)(a1 + 112);
      v137 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v138 >= v137)
      {
        v565 = *(_QWORD *)(a1 + 104);
        v566 = ((uint64_t)v138 - v565) >> 3;
        if ((unint64_t)(v566 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v567 = v137 - v565;
        v568 = v567 >> 2;
        if (v567 >> 2 <= (unint64_t)(v566 + 1))
          v568 = v566 + 1;
        if ((unint64_t)v567 >= 0x7FFFFFFFFFFFFFF8)
          v569 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v569 = v568;
        if (v569)
          v569 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v569);
        else
          v570 = 0;
        v1002 = (uint64_t *)(v569 + 8 * v566);
        v1003 = v569 + 8 * v570;
        *v1002 = v134;
        v139 = v1002 + 1;
        v1005 = *(char **)(a1 + 104);
        v1004 = *(char **)(a1 + 112);
        if (v1004 == v1005)
        {
          v1007 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1006 = *((_QWORD *)v1004 - 1);
            v1004 -= 8;
            *--v1002 = v1006;
          }
          while (v1004 != v1005);
          v1007 = (_QWORD *)a1;
          v1004 = *(char **)(a1 + 104);
        }
        v1007[13] = v1002;
        v1007[14] = v139;
        v1007[15] = v1003;
        if (v1004)
          operator delete(v1004);
      }
      else
      {
        *v138 = v134;
        v139 = v138 + 1;
      }
      *(_QWORD *)(a1 + 112) = v139;
      if (v2592)
      {
        v2593 = v2592;
        operator delete(v2592);
      }
      v1097 = operator new();
      v1098 = *(_DWORD *)(a1 + 4);
      v2591 = 0;
      v2589 = 0;
      v2590 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2589, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1097, v1098, v1098, (_DWORD **)&v2589, 0, a2, 1, 0, 0);
      v1100 = *(uint64_t **)(a1 + 112);
      v1099 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1100 >= v1099)
      {
        v1102 = *(_QWORD *)(a1 + 104);
        v1103 = ((uint64_t)v1100 - v1102) >> 3;
        if ((unint64_t)(v1103 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1104 = v1099 - v1102;
        v1105 = v1104 >> 2;
        if (v1104 >> 2 <= (unint64_t)(v1103 + 1))
          v1105 = v1103 + 1;
        if ((unint64_t)v1104 >= 0x7FFFFFFFFFFFFFF8)
          v1106 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1106 = v1105;
        if (v1106)
          v1106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1106);
        else
          v1107 = 0;
        v1381 = (uint64_t *)(v1106 + 8 * v1103);
        v1382 = v1106 + 8 * v1107;
        *v1381 = v1097;
        v1101 = v1381 + 1;
        v1384 = *(char **)(a1 + 104);
        v1383 = *(char **)(a1 + 112);
        if (v1383 == v1384)
        {
          v1386 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1385 = *((_QWORD *)v1383 - 1);
            v1383 -= 8;
            *--v1381 = v1385;
          }
          while (v1383 != v1384);
          v1386 = (_QWORD *)a1;
          v1383 = *(char **)(a1 + 104);
        }
        v1386[13] = v1381;
        v1386[14] = v1101;
        v1386[15] = v1382;
        if (v1383)
          operator delete(v1383);
      }
      else
      {
        *v1100 = v1097;
        v1101 = v1100 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1101;
      v1324 = v2589;
      if (!v2589)
        goto LABEL_2421;
      v2590 = v2589;
      goto LABEL_2420;
    case 21:
      v312 = operator new();
      v313 = *(_DWORD *)a1;
      v314 = *(_DWORD *)(a1 + 4);
      v2588 = 0;
      v2586 = 0;
      v2587 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2586, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v312, v313, v314, (_DWORD **)&v2586, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v316 = *(uint64_t **)(a1 + 112);
      v315 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v316 >= v315)
      {
        v584 = *(_QWORD *)(a1 + 104);
        v585 = ((uint64_t)v316 - v584) >> 3;
        if ((unint64_t)(v585 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v586 = v315 - v584;
        v587 = v586 >> 2;
        if (v586 >> 2 <= (unint64_t)(v585 + 1))
          v587 = v585 + 1;
        if ((unint64_t)v586 >= 0x7FFFFFFFFFFFFFF8)
          v588 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v588 = v587;
        if (v588)
          v588 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v588);
        else
          v589 = 0;
        v1021 = (uint64_t *)(v588 + 8 * v585);
        v1022 = v588 + 8 * v589;
        *v1021 = v312;
        v317 = v1021 + 1;
        v1024 = *(char **)(a1 + 104);
        v1023 = *(char **)(a1 + 112);
        if (v1023 == v1024)
        {
          v1026 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1025 = *((_QWORD *)v1023 - 1);
            v1023 -= 8;
            *--v1021 = v1025;
          }
          while (v1023 != v1024);
          v1026 = (_QWORD *)a1;
          v1023 = *(char **)(a1 + 104);
        }
        v1026[13] = v1021;
        v1026[14] = v317;
        v1026[15] = v1022;
        if (v1023)
          operator delete(v1023);
      }
      else
      {
        *v316 = v312;
        v317 = v316 + 1;
      }
      *(_QWORD *)(a1 + 112) = v317;
      if (v2586)
      {
        v2587 = v2586;
        operator delete(v2586);
      }
      v1120 = operator new();
      v1121 = *(_DWORD *)(a1 + 4);
      v2585 = 0;
      v2583 = 0;
      v2584 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2583, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1120, v1121, v1121, (_DWORD **)&v2583, 0, a2, 1, 0, 0);
      v1123 = *(uint64_t **)(a1 + 112);
      v1122 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1123 >= v1122)
      {
        v1125 = *(_QWORD *)(a1 + 104);
        v1126 = ((uint64_t)v1123 - v1125) >> 3;
        if ((unint64_t)(v1126 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1127 = v1122 - v1125;
        v1128 = v1127 >> 2;
        if (v1127 >> 2 <= (unint64_t)(v1126 + 1))
          v1128 = v1126 + 1;
        if ((unint64_t)v1127 >= 0x7FFFFFFFFFFFFFF8)
          v1129 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1129 = v1128;
        if (v1129)
          v1129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1129);
        else
          v1130 = 0;
        v1393 = (uint64_t *)(v1129 + 8 * v1126);
        v1394 = v1129 + 8 * v1130;
        *v1393 = v1120;
        v1124 = v1393 + 1;
        v1396 = *(char **)(a1 + 104);
        v1395 = *(char **)(a1 + 112);
        if (v1395 == v1396)
        {
          v1398 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1397 = *((_QWORD *)v1395 - 1);
            v1395 -= 8;
            *--v1393 = v1397;
          }
          while (v1395 != v1396);
          v1398 = (_QWORD *)a1;
          v1395 = *(char **)(a1 + 104);
        }
        v1398[13] = v1393;
        v1398[14] = v1124;
        v1398[15] = v1394;
        if (v1395)
          operator delete(v1395);
      }
      else
      {
        *v1123 = v1120;
        v1124 = v1123 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1124;
      if (v2583)
      {
        v2584 = v2583;
        operator delete(v2583);
      }
      v1458 = operator new();
      v1459 = *(_DWORD *)(a1 + 4);
      v2582 = 0;
      v2580 = 0;
      v2581 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2580, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1458, v1459, v1459, (_DWORD **)&v2580, 0, a2, 1, 0, 0);
      v1461 = *(uint64_t **)(a1 + 112);
      v1460 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1461 >= v1460)
      {
        v1463 = *(_QWORD *)(a1 + 104);
        v1464 = ((uint64_t)v1461 - v1463) >> 3;
        if ((unint64_t)(v1464 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1465 = v1460 - v1463;
        v1466 = v1465 >> 2;
        if (v1465 >> 2 <= (unint64_t)(v1464 + 1))
          v1466 = v1464 + 1;
        if ((unint64_t)v1465 >= 0x7FFFFFFFFFFFFFF8)
          v1467 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1467 = v1466;
        if (v1467)
          v1467 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1467);
        else
          v1468 = 0;
        v1636 = (uint64_t *)(v1467 + 8 * v1464);
        v1637 = v1467 + 8 * v1468;
        *v1636 = v1458;
        v1462 = v1636 + 1;
        v1639 = *(char **)(a1 + 104);
        v1638 = *(char **)(a1 + 112);
        if (v1638 == v1639)
        {
          v1641 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1640 = *((_QWORD *)v1638 - 1);
            v1638 -= 8;
            *--v1636 = v1640;
          }
          while (v1638 != v1639);
          v1641 = (_QWORD *)a1;
          v1638 = *(char **)(a1 + 104);
        }
        v1641[13] = v1636;
        v1641[14] = v1462;
        v1641[15] = v1637;
        if (v1638)
          operator delete(v1638);
      }
      else
      {
        *v1461 = v1458;
        v1462 = v1461 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1462;
      v1324 = v2580;
      if (!v2580)
        goto LABEL_2421;
      v2581 = v2580;
      goto LABEL_2420;
    case 22:
      v84 = operator new();
      v85 = *(_DWORD *)a1;
      v86 = *(_DWORD *)(a1 + 4);
      v2579 = 0;
      v2577 = 0;
      v2578 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2577, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v84, v85, v86, (_DWORD **)&v2577, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v88 = *(uint64_t **)(a1 + 112);
      v87 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v88 >= v87)
      {
        v553 = *(_QWORD *)(a1 + 104);
        v554 = ((uint64_t)v88 - v553) >> 3;
        if ((unint64_t)(v554 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v555 = v87 - v553;
        v556 = v555 >> 2;
        if (v555 >> 2 <= (unint64_t)(v554 + 1))
          v556 = v554 + 1;
        if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFF8)
          v557 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v557 = v556;
        if (v557)
          v557 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v557);
        else
          v558 = 0;
        v990 = (uint64_t *)(v557 + 8 * v554);
        v991 = v557 + 8 * v558;
        *v990 = v84;
        v89 = v990 + 1;
        v993 = *(char **)(a1 + 104);
        v992 = *(char **)(a1 + 112);
        if (v992 == v993)
        {
          v995 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v994 = *((_QWORD *)v992 - 1);
            v992 -= 8;
            *--v990 = v994;
          }
          while (v992 != v993);
          v995 = (_QWORD *)a1;
          v992 = *(char **)(a1 + 104);
        }
        v995[13] = v990;
        v995[14] = v89;
        v995[15] = v991;
        if (v992)
          operator delete(v992);
      }
      else
      {
        *v88 = v84;
        v89 = v88 + 1;
      }
      *(_QWORD *)(a1 + 112) = v89;
      if (v2577)
      {
        v2578 = v2577;
        operator delete(v2577);
      }
      v1075 = operator new();
      v1076 = *(_DWORD *)(a1 + 4);
      v2576 = 0;
      v2574 = 0;
      v2575 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2574, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1075, v1076, v1076, (_DWORD **)&v2574, 0, a2, 1, 0, 0);
      v1078 = *(uint64_t **)(a1 + 112);
      v1077 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1078 >= v1077)
      {
        v1080 = *(_QWORD *)(a1 + 104);
        v1081 = ((uint64_t)v1078 - v1080) >> 3;
        if ((unint64_t)(v1081 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1082 = v1077 - v1080;
        v1083 = v1082 >> 2;
        if (v1082 >> 2 <= (unint64_t)(v1081 + 1))
          v1083 = v1081 + 1;
        if ((unint64_t)v1082 >= 0x7FFFFFFFFFFFFFF8)
          v1084 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1084 = v1083;
        if (v1084)
          v1084 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1084);
        else
          v1085 = 0;
        v1364 = (uint64_t *)(v1084 + 8 * v1081);
        v1365 = v1084 + 8 * v1085;
        *v1364 = v1075;
        v1079 = v1364 + 1;
        v1367 = *(char **)(a1 + 104);
        v1366 = *(char **)(a1 + 112);
        if (v1366 == v1367)
        {
          v1369 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1368 = *((_QWORD *)v1366 - 1);
            v1366 -= 8;
            *--v1364 = v1368;
          }
          while (v1366 != v1367);
          v1369 = (_QWORD *)a1;
          v1366 = *(char **)(a1 + 104);
        }
        v1369[13] = v1364;
        v1369[14] = v1079;
        v1369[15] = v1365;
        if (v1366)
          operator delete(v1366);
      }
      else
      {
        *v1078 = v1075;
        v1079 = v1078 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1079;
      if (v2574)
      {
        v2575 = v2574;
        operator delete(v2574);
      }
      v1436 = operator new();
      v1437 = *(_DWORD *)(a1 + 4);
      v2573 = 0;
      v2571 = 0;
      v2572 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2571, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1436, v1437, v1437, (_DWORD **)&v2571, 0, a2, 1, 0, 0);
      v1439 = *(uint64_t **)(a1 + 112);
      v1438 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1439 >= v1438)
      {
        v1441 = *(_QWORD *)(a1 + 104);
        v1442 = ((uint64_t)v1439 - v1441) >> 3;
        if ((unint64_t)(v1442 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1443 = v1438 - v1441;
        v1444 = v1443 >> 2;
        if (v1443 >> 2 <= (unint64_t)(v1442 + 1))
          v1444 = v1442 + 1;
        if ((unint64_t)v1443 >= 0x7FFFFFFFFFFFFFF8)
          v1445 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1445 = v1444;
        if (v1445)
          v1445 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1445);
        else
          v1446 = 0;
        v1618 = (uint64_t *)(v1445 + 8 * v1442);
        v1619 = v1445 + 8 * v1446;
        *v1618 = v1436;
        v1440 = v1618 + 1;
        v1621 = *(char **)(a1 + 104);
        v1620 = *(char **)(a1 + 112);
        if (v1620 == v1621)
        {
          v1623 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1622 = *((_QWORD *)v1620 - 1);
            v1620 -= 8;
            *--v1618 = v1622;
          }
          while (v1620 != v1621);
          v1623 = (_QWORD *)a1;
          v1620 = *(char **)(a1 + 104);
        }
        v1623[13] = v1618;
        v1623[14] = v1440;
        v1623[15] = v1619;
        if (v1620)
          operator delete(v1620);
      }
      else
      {
        *v1439 = v1436;
        v1440 = v1439 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1440;
      if (v2571)
      {
        v2572 = v2571;
        operator delete(v2571);
      }
      v1665 = operator new();
      v1666 = *(_DWORD *)(a1 + 4);
      v2570 = 0;
      v2568 = 0;
      v2569 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2568, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1665, v1666, v1666, (_DWORD **)&v2568, 0, a2, 1, 0, 0);
      v1668 = *(uint64_t **)(a1 + 112);
      v1667 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1668 >= v1667)
      {
        v1670 = *(_QWORD *)(a1 + 104);
        v1671 = ((uint64_t)v1668 - v1670) >> 3;
        if ((unint64_t)(v1671 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1672 = v1667 - v1670;
        v1673 = v1672 >> 2;
        if (v1672 >> 2 <= (unint64_t)(v1671 + 1))
          v1673 = v1671 + 1;
        if ((unint64_t)v1672 >= 0x7FFFFFFFFFFFFFF8)
          v1674 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1674 = v1673;
        if (v1674)
          v1674 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1674);
        else
          v1675 = 0;
        v1798 = (uint64_t *)(v1674 + 8 * v1671);
        v1799 = v1674 + 8 * v1675;
        *v1798 = v1665;
        v1669 = v1798 + 1;
        v1801 = *(char **)(a1 + 104);
        v1800 = *(char **)(a1 + 112);
        if (v1800 == v1801)
        {
          v1803 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1802 = *((_QWORD *)v1800 - 1);
            v1800 -= 8;
            *--v1798 = v1802;
          }
          while (v1800 != v1801);
          v1803 = (_QWORD *)a1;
          v1800 = *(char **)(a1 + 104);
        }
        v1803[13] = v1798;
        v1803[14] = v1669;
        v1803[15] = v1799;
        if (v1800)
          operator delete(v1800);
      }
      else
      {
        *v1668 = v1665;
        v1669 = v1668 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1669;
      v1324 = v2568;
      if (!v2568)
        goto LABEL_2421;
      v2569 = v2568;
      goto LABEL_2420;
    case 23:
      v54 = operator new();
      v55 = *(_DWORD *)a1;
      v56 = *(_DWORD *)(a1 + 4);
      v2567 = 0;
      v2565 = 0;
      v2566 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2565, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v54, v55, v56, (_DWORD **)&v2565, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v58 = *(uint64_t **)(a1 + 112);
      v57 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v58 >= v57)
      {
        v547 = *(_QWORD *)(a1 + 104);
        v548 = ((uint64_t)v58 - v547) >> 3;
        if ((unint64_t)(v548 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v549 = v57 - v547;
        v550 = v549 >> 2;
        if (v549 >> 2 <= (unint64_t)(v548 + 1))
          v550 = v548 + 1;
        if ((unint64_t)v549 >= 0x7FFFFFFFFFFFFFF8)
          v551 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v551 = v550;
        if (v551)
          v551 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v551);
        else
          v552 = 0;
        v984 = (uint64_t *)(v551 + 8 * v548);
        v985 = v551 + 8 * v552;
        *v984 = v54;
        v59 = v984 + 1;
        v987 = *(char **)(a1 + 104);
        v986 = *(char **)(a1 + 112);
        if (v986 == v987)
        {
          v989 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v988 = *((_QWORD *)v986 - 1);
            v986 -= 8;
            *--v984 = v988;
          }
          while (v986 != v987);
          v989 = (_QWORD *)a1;
          v986 = *(char **)(a1 + 104);
        }
        v989[13] = v984;
        v989[14] = v59;
        v989[15] = v985;
        if (v986)
          operator delete(v986);
      }
      else
      {
        *v58 = v54;
        v59 = v58 + 1;
      }
      *(_QWORD *)(a1 + 112) = v59;
      if (v2565)
      {
        v2566 = v2565;
        operator delete(v2565);
      }
      v1064 = operator new();
      v1065 = *(_DWORD *)(a1 + 4);
      v2564 = 0;
      v2562 = 0;
      v2563 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2562, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1064, v1065, v1065, (_DWORD **)&v2562, 0, a2, 1, 0, 0);
      v1067 = *(uint64_t **)(a1 + 112);
      v1066 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1067 >= v1066)
      {
        v1069 = *(_QWORD *)(a1 + 104);
        v1070 = ((uint64_t)v1067 - v1069) >> 3;
        if ((unint64_t)(v1070 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1071 = v1066 - v1069;
        v1072 = v1071 >> 2;
        if (v1071 >> 2 <= (unint64_t)(v1070 + 1))
          v1072 = v1070 + 1;
        if ((unint64_t)v1071 >= 0x7FFFFFFFFFFFFFF8)
          v1073 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1073 = v1072;
        if (v1073)
          v1073 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1073);
        else
          v1074 = 0;
        v1358 = (uint64_t *)(v1073 + 8 * v1070);
        v1359 = v1073 + 8 * v1074;
        *v1358 = v1064;
        v1068 = v1358 + 1;
        v1361 = *(char **)(a1 + 104);
        v1360 = *(char **)(a1 + 112);
        if (v1360 == v1361)
        {
          v1363 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1362 = *((_QWORD *)v1360 - 1);
            v1360 -= 8;
            *--v1358 = v1362;
          }
          while (v1360 != v1361);
          v1363 = (_QWORD *)a1;
          v1360 = *(char **)(a1 + 104);
        }
        v1363[13] = v1358;
        v1363[14] = v1068;
        v1363[15] = v1359;
        if (v1360)
          operator delete(v1360);
      }
      else
      {
        *v1067 = v1064;
        v1068 = v1067 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1068;
      if (v2562)
      {
        v2563 = v2562;
        operator delete(v2562);
      }
      v1425 = operator new();
      v1426 = *(_DWORD *)(a1 + 4);
      v2561 = 0;
      v2559 = 0;
      v2560 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2559, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1425, v1426, v1426, (_DWORD **)&v2559, 0, a2, 1, 0, 0);
      v1428 = *(uint64_t **)(a1 + 112);
      v1427 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1428 >= v1427)
      {
        v1430 = *(_QWORD *)(a1 + 104);
        v1431 = ((uint64_t)v1428 - v1430) >> 3;
        if ((unint64_t)(v1431 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1432 = v1427 - v1430;
        v1433 = v1432 >> 2;
        if (v1432 >> 2 <= (unint64_t)(v1431 + 1))
          v1433 = v1431 + 1;
        if ((unint64_t)v1432 >= 0x7FFFFFFFFFFFFFF8)
          v1434 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1434 = v1433;
        if (v1434)
          v1434 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1434);
        else
          v1435 = 0;
        v1612 = (uint64_t *)(v1434 + 8 * v1431);
        v1613 = v1434 + 8 * v1435;
        *v1612 = v1425;
        v1429 = v1612 + 1;
        v1615 = *(char **)(a1 + 104);
        v1614 = *(char **)(a1 + 112);
        if (v1614 == v1615)
        {
          v1617 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1616 = *((_QWORD *)v1614 - 1);
            v1614 -= 8;
            *--v1612 = v1616;
          }
          while (v1614 != v1615);
          v1617 = (_QWORD *)a1;
          v1614 = *(char **)(a1 + 104);
        }
        v1617[13] = v1612;
        v1617[14] = v1429;
        v1617[15] = v1613;
        if (v1614)
          operator delete(v1614);
      }
      else
      {
        *v1428 = v1425;
        v1429 = v1428 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1429;
      if (v2559)
      {
        v2560 = v2559;
        operator delete(v2559);
      }
      v1654 = operator new();
      v1655 = *(_DWORD *)(a1 + 4);
      v2558 = 0;
      v2556 = 0;
      v2557 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2556, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1654, v1655, v1655, (_DWORD **)&v2556, 0, a2, 1, 0, 0);
      v1657 = *(uint64_t **)(a1 + 112);
      v1656 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1657 >= v1656)
      {
        v1659 = *(_QWORD *)(a1 + 104);
        v1660 = ((uint64_t)v1657 - v1659) >> 3;
        if ((unint64_t)(v1660 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1661 = v1656 - v1659;
        v1662 = v1661 >> 2;
        if (v1661 >> 2 <= (unint64_t)(v1660 + 1))
          v1662 = v1660 + 1;
        if ((unint64_t)v1661 >= 0x7FFFFFFFFFFFFFF8)
          v1663 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1663 = v1662;
        if (v1663)
          v1663 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1663);
        else
          v1664 = 0;
        v1792 = (uint64_t *)(v1663 + 8 * v1660);
        v1793 = v1663 + 8 * v1664;
        *v1792 = v1654;
        v1658 = v1792 + 1;
        v1795 = *(char **)(a1 + 104);
        v1794 = *(char **)(a1 + 112);
        if (v1794 == v1795)
        {
          v1797 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1796 = *((_QWORD *)v1794 - 1);
            v1794 -= 8;
            *--v1792 = v1796;
          }
          while (v1794 != v1795);
          v1797 = (_QWORD *)a1;
          v1794 = *(char **)(a1 + 104);
        }
        v1797[13] = v1792;
        v1797[14] = v1658;
        v1797[15] = v1793;
        if (v1794)
          operator delete(v1794);
      }
      else
      {
        *v1657 = v1654;
        v1658 = v1657 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1658;
      if (v2556)
      {
        v2557 = v2556;
        operator delete(v2556);
      }
      v1816 = operator new();
      v1817 = *(_DWORD *)(a1 + 4);
      v2555 = 0;
      v2553 = 0;
      v2554 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2553, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1816, v1817, v1817, (_DWORD **)&v2553, 0, a2, 1, 0, 0);
      v1819 = *(uint64_t **)(a1 + 112);
      v1818 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1819 >= v1818)
      {
        v1821 = *(_QWORD *)(a1 + 104);
        v1822 = ((uint64_t)v1819 - v1821) >> 3;
        if ((unint64_t)(v1822 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1823 = v1818 - v1821;
        v1824 = v1823 >> 2;
        if (v1823 >> 2 <= (unint64_t)(v1822 + 1))
          v1824 = v1822 + 1;
        if ((unint64_t)v1823 >= 0x7FFFFFFFFFFFFFF8)
          v1825 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1825 = v1824;
        if (v1825)
          v1825 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1825);
        else
          v1826 = 0;
        v1839 = (uint64_t *)(v1825 + 8 * v1822);
        v1840 = v1825 + 8 * v1826;
        *v1839 = v1816;
        v1820 = v1839 + 1;
        v1842 = *(char **)(a1 + 104);
        v1841 = *(char **)(a1 + 112);
        if (v1841 == v1842)
        {
          v1844 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1843 = *((_QWORD *)v1841 - 1);
            v1841 -= 8;
            *--v1839 = v1843;
          }
          while (v1841 != v1842);
          v1844 = (_QWORD *)a1;
          v1841 = *(char **)(a1 + 104);
        }
        v1844[13] = v1839;
        v1844[14] = v1820;
        v1844[15] = v1840;
        if (v1841)
          operator delete(v1841);
      }
      else
      {
        *v1819 = v1816;
        v1820 = v1819 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1820;
      v1324 = v2553;
      if (!v2553)
        goto LABEL_2421;
      v2554 = v2553;
      goto LABEL_2420;
    case 24:
      v144 = operator new();
      FullLayer<float>::FullLayer(v144, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v146 = *(uint64_t **)(a1 + 112);
      v145 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v146 >= v145)
      {
        v487 = *(_QWORD *)(a1 + 104);
        v488 = ((uint64_t)v146 - v487) >> 3;
        if ((unint64_t)(v488 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v489 = v145 - v487;
        v490 = v489 >> 2;
        if (v489 >> 2 <= (unint64_t)(v488 + 1))
          v490 = v488 + 1;
        if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFF8)
          v491 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v491 = v490;
        if (v491)
          v491 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v491);
        else
          v492 = 0;
        v795 = (uint64_t *)(v491 + 8 * v488);
        v796 = v491 + 8 * v492;
        *v795 = v144;
        v147 = v795 + 1;
        v798 = *(char **)(a1 + 104);
        v797 = *(char **)(a1 + 112);
        if (v797 == v798)
        {
          v800 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v799 = *((_QWORD *)v797 - 1);
            v797 -= 8;
            *--v795 = v799;
          }
          while (v797 != v798);
          v800 = (_QWORD *)a1;
          v797 = *(char **)(a1 + 104);
        }
        v800[13] = v795;
        v800[14] = v147;
        v800[15] = v796;
        if (v797)
          operator delete(v797);
      }
      else
      {
        *v146 = v144;
        v147 = v146 + 1;
      }
      *(_QWORD *)(a1 + 112) = v147;
      v884 = operator new();
      v885 = *(_DWORD *)(a1 + 4);
      v2552 = 0;
      v2550 = 0;
      v2551 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2550, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v884, v885, v885, (_DWORD **)&v2550, 0, a2, 1, 0, 0);
      v887 = *(uint64_t **)(a1 + 112);
      v886 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v887 >= v886)
      {
        v889 = *(_QWORD *)(a1 + 104);
        v890 = ((uint64_t)v887 - v889) >> 3;
        if ((unint64_t)(v890 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v891 = v886 - v889;
        v892 = v891 >> 2;
        if (v891 >> 2 <= (unint64_t)(v890 + 1))
          v892 = v890 + 1;
        if ((unint64_t)v891 >= 0x7FFFFFFFFFFFFFF8)
          v893 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v893 = v892;
        if (v893)
          v893 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v893);
        else
          v894 = 0;
        v1212 = (uint64_t *)(v893 + 8 * v890);
        v1213 = v893 + 8 * v894;
        *v1212 = v884;
        v888 = v1212 + 1;
        v1215 = *(char **)(a1 + 104);
        v1214 = *(char **)(a1 + 112);
        if (v1214 == v1215)
        {
          v1217 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1216 = *((_QWORD *)v1214 - 1);
            v1214 -= 8;
            *--v1212 = v1216;
          }
          while (v1214 != v1215);
          v1217 = (_QWORD *)a1;
          v1214 = *(char **)(a1 + 104);
        }
        v1217[13] = v1212;
        v1217[14] = v888;
        v1217[15] = v1213;
        if (v1214)
          operator delete(v1214);
      }
      else
      {
        *v887 = v884;
        v888 = v887 + 1;
      }
      *(_QWORD *)(a1 + 112) = v888;
      if (v2550)
      {
        v2551 = v2550;
        operator delete(v2550);
      }
      v1325 = operator new();
      v1326 = *(_DWORD *)(a1 + 4);
      v2549 = 0;
      v2547 = 0;
      v2548 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2547, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1325, v1326, v1326, (_DWORD **)&v2547, 0, a2, 1, 0, 0);
      v1328 = *(uint64_t **)(a1 + 112);
      v1327 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1328 >= v1327)
      {
        v1330 = *(_QWORD *)(a1 + 104);
        v1331 = ((uint64_t)v1328 - v1330) >> 3;
        if ((unint64_t)(v1331 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1332 = v1327 - v1330;
        v1333 = v1332 >> 2;
        if (v1332 >> 2 <= (unint64_t)(v1331 + 1))
          v1333 = v1331 + 1;
        if ((unint64_t)v1332 >= 0x7FFFFFFFFFFFFFF8)
          v1334 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1334 = v1333;
        if (v1334)
          v1334 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1334);
        else
          v1335 = 0;
        v1541 = (uint64_t *)(v1334 + 8 * v1331);
        v1542 = v1334 + 8 * v1335;
        *v1541 = v1325;
        v1329 = v1541 + 1;
        v1544 = *(char **)(a1 + 104);
        v1543 = *(char **)(a1 + 112);
        if (v1543 == v1544)
        {
          v1546 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1545 = *((_QWORD *)v1543 - 1);
            v1543 -= 8;
            *--v1541 = v1545;
          }
          while (v1543 != v1544);
          v1546 = (_QWORD *)a1;
          v1543 = *(char **)(a1 + 104);
        }
        v1546[13] = v1541;
        v1546[14] = v1329;
        v1546[15] = v1542;
        if (v1543)
          operator delete(v1543);
      }
      else
      {
        *v1328 = v1325;
        v1329 = v1328 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1329;
      v1324 = v2547;
      if (!v2547)
        goto LABEL_2421;
      v2548 = v2547;
      goto LABEL_2420;
    case 25:
      v325 = operator new();
      FullLayer<float>::FullLayer(v325, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 4, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v327 = *(uint64_t **)(a1 + 112);
      v326 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v327 >= v326)
      {
        v529 = *(_QWORD *)(a1 + 104);
        v530 = ((uint64_t)v327 - v529) >> 3;
        if ((unint64_t)(v530 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v531 = v326 - v529;
        v532 = v531 >> 2;
        if (v531 >> 2 <= (unint64_t)(v530 + 1))
          v532 = v530 + 1;
        if ((unint64_t)v531 >= 0x7FFFFFFFFFFFFFF8)
          v533 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v533 = v532;
        if (v533)
          v533 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v533);
        else
          v534 = 0;
        v837 = (uint64_t *)(v533 + 8 * v530);
        v838 = v533 + 8 * v534;
        *v837 = v325;
        v328 = v837 + 1;
        v840 = *(char **)(a1 + 104);
        v839 = *(char **)(a1 + 112);
        if (v839 == v840)
        {
          v842 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v841 = *((_QWORD *)v839 - 1);
            v839 -= 8;
            *--v837 = v841;
          }
          while (v839 != v840);
          v842 = (_QWORD *)a1;
          v839 = *(char **)(a1 + 104);
        }
        v842[13] = v837;
        v842[14] = v328;
        v842[15] = v838;
        if (v839)
          operator delete(v839);
      }
      else
      {
        *v327 = v325;
        v328 = v327 + 1;
      }
      *(_QWORD *)(a1 + 112) = v328;
      v961 = operator new();
      v962 = *(_DWORD *)(a1 + 4);
      v2546 = 0;
      v2544 = 0;
      v2545 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2544, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v961, v962, v962, (_DWORD **)&v2544, 0, a2, 1, 0, 0);
      v964 = *(uint64_t **)(a1 + 112);
      v963 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v964 >= v963)
      {
        v966 = *(_QWORD *)(a1 + 104);
        v967 = ((uint64_t)v964 - v966) >> 3;
        if ((unint64_t)(v967 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v968 = v963 - v966;
        v969 = v968 >> 2;
        if (v968 >> 2 <= (unint64_t)(v967 + 1))
          v969 = v967 + 1;
        if ((unint64_t)v968 >= 0x7FFFFFFFFFFFFFF8)
          v970 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v970 = v969;
        if (v970)
          v970 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v970);
        else
          v971 = 0;
        v1236 = (uint64_t *)(v970 + 8 * v967);
        v1237 = v970 + 8 * v971;
        *v1236 = v961;
        v965 = v1236 + 1;
        v1239 = *(char **)(a1 + 104);
        v1238 = *(char **)(a1 + 112);
        if (v1238 == v1239)
        {
          v1241 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1240 = *((_QWORD *)v1238 - 1);
            v1238 -= 8;
            *--v1236 = v1240;
          }
          while (v1238 != v1239);
          v1241 = (_QWORD *)a1;
          v1238 = *(char **)(a1 + 104);
        }
        v1241[13] = v1236;
        v1241[14] = v965;
        v1241[15] = v1237;
        if (v1238)
          operator delete(v1238);
      }
      else
      {
        *v964 = v961;
        v965 = v964 + 1;
      }
      *(_QWORD *)(a1 + 112) = v965;
      if (v2544)
      {
        v2545 = v2544;
        operator delete(v2544);
      }
      v1347 = operator new();
      v1348 = *(_DWORD *)(a1 + 4);
      v2543 = 0;
      v2541 = 0;
      v2542 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2541, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1347, v1348, v1348, (_DWORD **)&v2541, 0, a2, 1, 0, 0);
      v1350 = *(uint64_t **)(a1 + 112);
      v1349 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1350 >= v1349)
      {
        v1352 = *(_QWORD *)(a1 + 104);
        v1353 = ((uint64_t)v1350 - v1352) >> 3;
        if ((unint64_t)(v1353 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1354 = v1349 - v1352;
        v1355 = v1354 >> 2;
        if (v1354 >> 2 <= (unint64_t)(v1353 + 1))
          v1355 = v1353 + 1;
        if ((unint64_t)v1354 >= 0x7FFFFFFFFFFFFFF8)
          v1356 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1356 = v1355;
        if (v1356)
          v1356 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1356);
        else
          v1357 = 0;
        v1553 = (uint64_t *)(v1356 + 8 * v1353);
        v1554 = v1356 + 8 * v1357;
        *v1553 = v1347;
        v1351 = v1553 + 1;
        v1556 = *(char **)(a1 + 104);
        v1555 = *(char **)(a1 + 112);
        if (v1555 == v1556)
        {
          v1558 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1557 = *((_QWORD *)v1555 - 1);
            v1555 -= 8;
            *--v1553 = v1557;
          }
          while (v1555 != v1556);
          v1558 = (_QWORD *)a1;
          v1555 = *(char **)(a1 + 104);
        }
        v1558[13] = v1553;
        v1558[14] = v1351;
        v1558[15] = v1554;
        if (v1555)
          operator delete(v1555);
      }
      else
      {
        *v1350 = v1347;
        v1351 = v1350 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1351;
      if (v2541)
      {
        v2542 = v2541;
        operator delete(v2541);
      }
      v1601 = operator new();
      v1602 = *(_DWORD *)(a1 + 4);
      v2540 = 0;
      v2538 = 0;
      v2539 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2538, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1601, v1602, v1602, (_DWORD **)&v2538, 0, a2, 1, 0, 0);
      v1604 = *(uint64_t **)(a1 + 112);
      v1603 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1604 >= v1603)
      {
        v1606 = *(_QWORD *)(a1 + 104);
        v1607 = ((uint64_t)v1604 - v1606) >> 3;
        if ((unint64_t)(v1607 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1608 = v1603 - v1606;
        v1609 = v1608 >> 2;
        if (v1608 >> 2 <= (unint64_t)(v1607 + 1))
          v1609 = v1607 + 1;
        if ((unint64_t)v1608 >= 0x7FFFFFFFFFFFFFF8)
          v1610 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1610 = v1609;
        if (v1610)
          v1610 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1610);
        else
          v1611 = 0;
        v1764 = (uint64_t *)(v1610 + 8 * v1607);
        v1765 = v1610 + 8 * v1611;
        *v1764 = v1601;
        v1605 = v1764 + 1;
        v1767 = *(char **)(a1 + 104);
        v1766 = *(char **)(a1 + 112);
        if (v1766 == v1767)
        {
          v1769 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1768 = *((_QWORD *)v1766 - 1);
            v1766 -= 8;
            *--v1764 = v1768;
          }
          while (v1766 != v1767);
          v1769 = (_QWORD *)a1;
          v1766 = *(char **)(a1 + 104);
        }
        v1769[13] = v1764;
        v1769[14] = v1605;
        v1769[15] = v1765;
        if (v1766)
          operator delete(v1766);
      }
      else
      {
        *v1604 = v1601;
        v1605 = v1604 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1605;
      v1324 = v2538;
      if (!v2538)
        goto LABEL_2421;
      v2539 = v2538;
      goto LABEL_2420;
    case 26:
      v29 = operator new();
      FullLayer<float>::FullLayer(v29, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v31 = *(uint64_t **)(a1 + 112);
      v30 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v31 >= v30)
      {
        v458 = *(_QWORD *)(a1 + 104);
        v459 = ((uint64_t)v31 - v458) >> 3;
        if ((unint64_t)(v459 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v460 = v30 - v458;
        v461 = v460 >> 2;
        if (v460 >> 2 <= (unint64_t)(v459 + 1))
          v461 = v459 + 1;
        if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8)
          v462 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v462 = v461;
        if (v462)
          v462 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v462);
        else
          v463 = 0;
        v748 = (uint64_t *)(v462 + 8 * v459);
        v749 = v462 + 8 * v463;
        *v748 = v29;
        v32 = v748 + 1;
        v751 = *(char **)(a1 + 104);
        v750 = *(char **)(a1 + 112);
        if (v750 == v751)
        {
          v753 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v752 = *((_QWORD *)v750 - 1);
            v750 -= 8;
            *--v748 = v752;
          }
          while (v750 != v751);
          v753 = (_QWORD *)a1;
          v750 = *(char **)(a1 + 104);
        }
        v753[13] = v748;
        v753[14] = v32;
        v753[15] = v749;
        if (v750)
          operator delete(v750);
      }
      else
      {
        *v31 = v29;
        v32 = v31 + 1;
      }
      *(_QWORD *)(a1 + 112) = v32;
      v843 = operator new();
      v844 = *(_DWORD *)(a1 + 4);
      v2537 = 0;
      v2535 = 0;
      v2536 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2535, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v843, v844, v844, (_DWORD **)&v2535, 0, a2, 1, 0, 0);
      v846 = *(uint64_t **)(a1 + 112);
      v845 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v846 >= v845)
      {
        v848 = *(_QWORD *)(a1 + 104);
        v849 = ((uint64_t)v846 - v848) >> 3;
        if ((unint64_t)(v849 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v850 = v845 - v848;
        v851 = v850 >> 2;
        if (v850 >> 2 <= (unint64_t)(v849 + 1))
          v851 = v849 + 1;
        if ((unint64_t)v850 >= 0x7FFFFFFFFFFFFFF8)
          v852 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v852 = v851;
        if (v852)
          v852 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v852);
        else
          v853 = 0;
        v1185 = (uint64_t *)(v852 + 8 * v849);
        v1186 = v852 + 8 * v853;
        *v1185 = v843;
        v847 = v1185 + 1;
        v1188 = *(char **)(a1 + 104);
        v1187 = *(char **)(a1 + 112);
        if (v1187 == v1188)
        {
          v1190 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1189 = *((_QWORD *)v1187 - 1);
            v1187 -= 8;
            *--v1185 = v1189;
          }
          while (v1187 != v1188);
          v1190 = (_QWORD *)a1;
          v1187 = *(char **)(a1 + 104);
        }
        v1190[13] = v1185;
        v1190[14] = v847;
        v1190[15] = v1186;
        if (v1187)
          operator delete(v1187);
      }
      else
      {
        *v846 = v843;
        v847 = v846 + 1;
      }
      *(_QWORD *)(a1 + 112) = v847;
      if (v2535)
      {
        v2536 = v2535;
        operator delete(v2535);
      }
      v1281 = operator new();
      v1282 = *(_DWORD *)(a1 + 4);
      v2534 = 0;
      v2532 = 0;
      v2533 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2532, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1281, v1282, v1282, (_DWORD **)&v2532, 0, a2, 1, 0, 0);
      v1284 = *(uint64_t **)(a1 + 112);
      v1283 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1284 >= v1283)
      {
        v1286 = *(_QWORD *)(a1 + 104);
        v1287 = ((uint64_t)v1284 - v1286) >> 3;
        if ((unint64_t)(v1287 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1288 = v1283 - v1286;
        v1289 = v1288 >> 2;
        if (v1288 >> 2 <= (unint64_t)(v1287 + 1))
          v1289 = v1287 + 1;
        if ((unint64_t)v1288 >= 0x7FFFFFFFFFFFFFF8)
          v1290 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1290 = v1289;
        if (v1290)
          v1290 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1290);
        else
          v1291 = 0;
        v1535 = (uint64_t *)(v1290 + 8 * v1287);
        v1536 = v1290 + 8 * v1291;
        *v1535 = v1281;
        v1285 = v1535 + 1;
        v1538 = *(char **)(a1 + 104);
        v1537 = *(char **)(a1 + 112);
        if (v1537 == v1538)
        {
          v1540 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1539 = *((_QWORD *)v1537 - 1);
            v1537 -= 8;
            *--v1535 = v1539;
          }
          while (v1537 != v1538);
          v1540 = (_QWORD *)a1;
          v1537 = *(char **)(a1 + 104);
        }
        v1540[13] = v1535;
        v1540[14] = v1285;
        v1540[15] = v1536;
        if (v1537)
          operator delete(v1537);
      }
      else
      {
        *v1284 = v1281;
        v1285 = v1284 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1285;
      if (v2532)
      {
        v2533 = v2532;
        operator delete(v2532);
      }
      v1579 = operator new();
      v1580 = *(_DWORD *)(a1 + 4);
      v2531 = 0;
      v2529 = 0;
      v2530 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2529, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1579, v1580, v1580, (_DWORD **)&v2529, 0, a2, 1, 0, 0);
      v1582 = *(uint64_t **)(a1 + 112);
      v1581 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1582 >= v1581)
      {
        v1584 = *(_QWORD *)(a1 + 104);
        v1585 = ((uint64_t)v1582 - v1584) >> 3;
        if ((unint64_t)(v1585 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1586 = v1581 - v1584;
        v1587 = v1586 >> 2;
        if (v1586 >> 2 <= (unint64_t)(v1585 + 1))
          v1587 = v1585 + 1;
        if ((unint64_t)v1586 >= 0x7FFFFFFFFFFFFFF8)
          v1588 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1588 = v1587;
        if (v1588)
          v1588 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1588);
        else
          v1589 = 0;
        v1752 = (uint64_t *)(v1588 + 8 * v1585);
        v1753 = v1588 + 8 * v1589;
        *v1752 = v1579;
        v1583 = v1752 + 1;
        v1755 = *(char **)(a1 + 104);
        v1754 = *(char **)(a1 + 112);
        if (v1754 == v1755)
        {
          v1757 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1756 = *((_QWORD *)v1754 - 1);
            v1754 -= 8;
            *--v1752 = v1756;
          }
          while (v1754 != v1755);
          v1757 = (_QWORD *)a1;
          v1754 = *(char **)(a1 + 104);
        }
        v1757[13] = v1752;
        v1757[14] = v1583;
        v1757[15] = v1753;
        if (v1754)
          operator delete(v1754);
      }
      else
      {
        *v1582 = v1579;
        v1583 = v1582 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1583;
      if (v2529)
      {
        v2530 = v2529;
        operator delete(v2529);
      }
      v1770 = operator new();
      v1771 = *(_DWORD *)(a1 + 4);
      v2528 = 0;
      v2526 = 0;
      v2527 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2526, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1770, v1771, v1771, (_DWORD **)&v2526, 0, a2, 1, 0, 0);
      v1773 = *(uint64_t **)(a1 + 112);
      v1772 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1773 >= v1772)
      {
        v1775 = *(_QWORD *)(a1 + 104);
        v1776 = ((uint64_t)v1773 - v1775) >> 3;
        if ((unint64_t)(v1776 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1777 = v1772 - v1775;
        v1778 = v1777 >> 2;
        if (v1777 >> 2 <= (unint64_t)(v1776 + 1))
          v1778 = v1776 + 1;
        if ((unint64_t)v1777 >= 0x7FFFFFFFFFFFFFF8)
          v1779 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1779 = v1778;
        if (v1779)
          v1779 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1779);
        else
          v1780 = 0;
        v1827 = (uint64_t *)(v1779 + 8 * v1776);
        v1828 = v1779 + 8 * v1780;
        *v1827 = v1770;
        v1774 = v1827 + 1;
        v1830 = *(char **)(a1 + 104);
        v1829 = *(char **)(a1 + 112);
        if (v1829 == v1830)
        {
          v1832 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1831 = *((_QWORD *)v1829 - 1);
            v1829 -= 8;
            *--v1827 = v1831;
          }
          while (v1829 != v1830);
          v1832 = (_QWORD *)a1;
          v1829 = *(char **)(a1 + 104);
        }
        v1832[13] = v1827;
        v1832[14] = v1774;
        v1832[15] = v1828;
        if (v1829)
          operator delete(v1829);
      }
      else
      {
        *v1773 = v1770;
        v1774 = v1773 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1774;
      v1324 = v2526;
      if (!v2526)
        goto LABEL_2421;
      v2527 = v2526;
      goto LABEL_2420;
    case 27:
      v318 = operator new();
      v319 = *(_DWORD *)a1;
      v320 = *(_DWORD *)(a1 + 4);
      v2525 = 0;
      v2523 = 0;
      v2524 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2523, v2362, (uint64_t)v2361);
      if (v320 >= 0)
        v321 = v320;
      else
        v321 = v320 + 1;
      LSTM<float>::LSTM(v318, v319, v321 >> 1, (_DWORD **)&v2523, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v323 = *(uint64_t **)(v2366 + 112);
      v322 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v323 >= v322)
      {
        v590 = *(_QWORD *)(v2366 + 104);
        v591 = ((uint64_t)v323 - v590) >> 3;
        if ((unint64_t)(v591 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v592 = v322 - v590;
        v593 = v592 >> 2;
        if (v592 >> 2 <= (unint64_t)(v591 + 1))
          v593 = v591 + 1;
        if ((unint64_t)v592 >= 0x7FFFFFFFFFFFFFF8)
          v594 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v594 = v593;
        if (v594)
          v594 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v594);
        else
          v595 = 0;
        v1027 = (uint64_t *)(v594 + 8 * v591);
        v1028 = v594 + 8 * v595;
        *v1027 = v318;
        v324 = v1027 + 1;
        v1030 = *(char **)(v2366 + 104);
        v1029 = *(char **)(v2366 + 112);
        if (v1029 == v1030)
        {
          v1032 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1031 = *((_QWORD *)v1029 - 1);
            v1029 -= 8;
            *--v1027 = v1031;
          }
          while (v1029 != v1030);
          v1032 = (_QWORD *)v2366;
          v1029 = *(char **)(v2366 + 104);
        }
        v1032[13] = v1027;
        v1032[14] = v324;
        v1032[15] = v1028;
        if (v1029)
          operator delete(v1029);
      }
      else
      {
        *v323 = v318;
        v324 = v323 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v324;
      if (v2523)
      {
        v2524 = v2523;
        operator delete(v2523);
      }
      v1131 = operator new();
      v1132 = *(_DWORD *)(v2366 + 4);
      v2522 = 0;
      v2520 = 0;
      v2521 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2520, v2362, (uint64_t)v2361);
      if (v1132 >= 0)
        v1133 = v1132;
      else
        v1133 = v1132 + 1;
      LSTM<float>::LSTM(v1131, v1133 >> 1, v1132, (_DWORD **)&v2520, 0, a2, 1, 0, 0);
      v1135 = *(uint64_t **)(v2366 + 112);
      v1134 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1135 >= v1134)
      {
        v1137 = *(_QWORD *)(v2366 + 104);
        v1138 = ((uint64_t)v1135 - v1137) >> 3;
        if ((unint64_t)(v1138 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1139 = v1134 - v1137;
        v1140 = v1139 >> 2;
        if (v1139 >> 2 <= (unint64_t)(v1138 + 1))
          v1140 = v1138 + 1;
        if ((unint64_t)v1139 >= 0x7FFFFFFFFFFFFFF8)
          v1141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1141 = v1140;
        if (v1141)
          v1141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1141);
        else
          v1142 = 0;
        v1399 = (uint64_t *)(v1141 + 8 * v1138);
        v1400 = v1141 + 8 * v1142;
        *v1399 = v1131;
        v1136 = v1399 + 1;
        v1402 = *(char **)(v2366 + 104);
        v1401 = *(char **)(v2366 + 112);
        if (v1401 == v1402)
        {
          v1404 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1403 = *((_QWORD *)v1401 - 1);
            v1401 -= 8;
            *--v1399 = v1403;
          }
          while (v1401 != v1402);
          v1404 = (_QWORD *)v2366;
          v1401 = *(char **)(v2366 + 104);
        }
        v1404[13] = v1399;
        v1404[14] = v1136;
        v1404[15] = v1400;
        if (v1401)
          operator delete(v1401);
      }
      else
      {
        *v1135 = v1131;
        v1136 = v1135 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1136;
      if (v2520)
      {
        v2521 = v2520;
        operator delete(v2520);
      }
      v1469 = operator new();
      v1470 = *(_DWORD *)(v2366 + 4);
      v2519 = 0;
      v2517 = 0;
      v2518 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2517, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1469, v1470, v1470, (_DWORD **)&v2517, 0, a2, 1, 0, 0);
      v1472 = *(uint64_t **)(v2366 + 112);
      v1471 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1472 >= v1471)
      {
        v1474 = *(_QWORD *)(v2366 + 104);
        v1475 = ((uint64_t)v1472 - v1474) >> 3;
        if ((unint64_t)(v1475 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1476 = v1471 - v1474;
        v1477 = v1476 >> 2;
        if (v1476 >> 2 <= (unint64_t)(v1475 + 1))
          v1477 = v1475 + 1;
        if ((unint64_t)v1476 >= 0x7FFFFFFFFFFFFFF8)
          v1478 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1478 = v1477;
        if (v1478)
          v1478 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1478);
        else
          v1479 = 0;
        v1642 = (uint64_t *)(v1478 + 8 * v1475);
        v1643 = v1478 + 8 * v1479;
        *v1642 = v1469;
        v1473 = v1642 + 1;
        v1645 = *(char **)(v2366 + 104);
        v1644 = *(char **)(v2366 + 112);
        if (v1644 == v1645)
        {
          v1647 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1646 = *((_QWORD *)v1644 - 1);
            v1644 -= 8;
            *--v1642 = v1646;
          }
          while (v1644 != v1645);
          v1647 = (_QWORD *)v2366;
          v1644 = *(char **)(v2366 + 104);
        }
        v1647[13] = v1642;
        v1647[14] = v1473;
        v1647[15] = v1643;
        if (v1644)
          operator delete(v1644);
      }
      else
      {
        *v1472 = v1469;
        v1473 = v1472 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1473;
      v1324 = v2517;
      if (!v2517)
        goto LABEL_2421;
      v2518 = v2517;
      goto LABEL_2420;
    case 28:
      v334 = operator new();
      v335 = *(_DWORD *)a1;
      v336 = *(_DWORD *)(a1 + 4);
      v2516 = 0;
      v2514 = 0;
      v2515 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2514, v2362, (uint64_t)v2361);
      if (v336 >= 0)
        v337 = v336;
      else
        v337 = v336 + 1;
      LSTM<float>::LSTM(v334, v335, v337 >> 1, (_DWORD **)&v2514, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v339 = *(uint64_t **)(v2366 + 112);
      v338 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v339 >= v338)
      {
        v603 = *(_QWORD *)(v2366 + 104);
        v604 = ((uint64_t)v339 - v603) >> 3;
        if ((unint64_t)(v604 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v605 = v338 - v603;
        v606 = v605 >> 2;
        if (v605 >> 2 <= (unint64_t)(v604 + 1))
          v606 = v604 + 1;
        if ((unint64_t)v605 >= 0x7FFFFFFFFFFFFFF8)
          v607 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v607 = v606;
        if (v607)
          v607 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v607);
        else
          v608 = 0;
        v1038 = (uint64_t *)(v607 + 8 * v604);
        v1039 = v607 + 8 * v608;
        *v1038 = v334;
        v340 = v1038 + 1;
        v1041 = *(char **)(v2366 + 104);
        v1040 = *(char **)(v2366 + 112);
        if (v1040 == v1041)
        {
          v1043 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1042 = *((_QWORD *)v1040 - 1);
            v1040 -= 8;
            *--v1038 = v1042;
          }
          while (v1040 != v1041);
          v1043 = (_QWORD *)v2366;
          v1040 = *(char **)(v2366 + 104);
        }
        v1043[13] = v1038;
        v1043[14] = v340;
        v1043[15] = v1039;
        if (v1040)
          operator delete(v1040);
      }
      else
      {
        *v339 = v334;
        v340 = v339 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v340;
      if (v2514)
      {
        v2515 = v2514;
        operator delete(v2514);
      }
      v1143 = operator new();
      v1144 = *(_DWORD *)(v2366 + 4);
      v2513 = 0;
      v2511 = 0;
      v2512 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2511, v2362, (uint64_t)v2361);
      if (v1144 >= 0)
        v1145 = v1144;
      else
        v1145 = v1144 + 1;
      LSTM<float>::LSTM(v1143, v1145 >> 1, v1144, (_DWORD **)&v2511, 0, a2, 1, 0, 0);
      v1147 = *(uint64_t **)(v2366 + 112);
      v1146 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1147 >= v1146)
      {
        v1149 = *(_QWORD *)(v2366 + 104);
        v1150 = ((uint64_t)v1147 - v1149) >> 3;
        if ((unint64_t)(v1150 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1151 = v1146 - v1149;
        v1152 = v1151 >> 2;
        if (v1151 >> 2 <= (unint64_t)(v1150 + 1))
          v1152 = v1150 + 1;
        if ((unint64_t)v1151 >= 0x7FFFFFFFFFFFFFF8)
          v1153 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1153 = v1152;
        if (v1153)
          v1153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1153);
        else
          v1154 = 0;
        v1405 = (uint64_t *)(v1153 + 8 * v1150);
        v1406 = v1153 + 8 * v1154;
        *v1405 = v1143;
        v1148 = v1405 + 1;
        v1408 = *(char **)(v2366 + 104);
        v1407 = *(char **)(v2366 + 112);
        if (v1407 == v1408)
        {
          v1410 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1409 = *((_QWORD *)v1407 - 1);
            v1407 -= 8;
            *--v1405 = v1409;
          }
          while (v1407 != v1408);
          v1410 = (_QWORD *)v2366;
          v1407 = *(char **)(v2366 + 104);
        }
        v1410[13] = v1405;
        v1410[14] = v1148;
        v1410[15] = v1406;
        if (v1407)
          operator delete(v1407);
      }
      else
      {
        *v1147 = v1143;
        v1148 = v1147 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1148;
      if (v2511)
      {
        v2512 = v2511;
        operator delete(v2511);
      }
      v1480 = operator new();
      v1481 = *(_DWORD *)(v2366 + 4);
      v2510 = 0;
      v2508 = 0;
      v2509 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2508, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1480, v1481, v1481, (_DWORD **)&v2508, 0, a2, 1, 0, 0);
      v1483 = *(uint64_t **)(v2366 + 112);
      v1482 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1483 >= v1482)
      {
        v1485 = *(_QWORD *)(v2366 + 104);
        v1486 = ((uint64_t)v1483 - v1485) >> 3;
        if ((unint64_t)(v1486 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1487 = v1482 - v1485;
        v1488 = v1487 >> 2;
        if (v1487 >> 2 <= (unint64_t)(v1486 + 1))
          v1488 = v1486 + 1;
        if ((unint64_t)v1487 >= 0x7FFFFFFFFFFFFFF8)
          v1489 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1489 = v1488;
        if (v1489)
          v1489 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1489);
        else
          v1490 = 0;
        v1648 = (uint64_t *)(v1489 + 8 * v1486);
        v1649 = v1489 + 8 * v1490;
        *v1648 = v1480;
        v1484 = v1648 + 1;
        v1651 = *(char **)(v2366 + 104);
        v1650 = *(char **)(v2366 + 112);
        if (v1650 == v1651)
        {
          v1653 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1652 = *((_QWORD *)v1650 - 1);
            v1650 -= 8;
            *--v1648 = v1652;
          }
          while (v1650 != v1651);
          v1653 = (_QWORD *)v2366;
          v1650 = *(char **)(v2366 + 104);
        }
        v1653[13] = v1648;
        v1653[14] = v1484;
        v1653[15] = v1649;
        if (v1650)
          operator delete(v1650);
      }
      else
      {
        *v1483 = v1480;
        v1484 = v1483 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1484;
      if (v2508)
      {
        v2509 = v2508;
        operator delete(v2508);
      }
      v1687 = operator new();
      v1688 = *(_DWORD *)(v2366 + 4);
      v2507 = 0;
      v2505 = 0;
      v2506 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2505, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1687, v1688, v1688, (_DWORD **)&v2505, 0, a2, 1, 0, 0);
      v1690 = *(uint64_t **)(v2366 + 112);
      v1689 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1690 >= v1689)
      {
        v1692 = *(_QWORD *)(v2366 + 104);
        v1693 = ((uint64_t)v1690 - v1692) >> 3;
        if ((unint64_t)(v1693 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1694 = v1689 - v1692;
        v1695 = v1694 >> 2;
        if (v1694 >> 2 <= (unint64_t)(v1693 + 1))
          v1695 = v1693 + 1;
        if ((unint64_t)v1694 >= 0x7FFFFFFFFFFFFFF8)
          v1696 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1696 = v1695;
        if (v1696)
          v1696 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1696);
        else
          v1697 = 0;
        v1810 = (uint64_t *)(v1696 + 8 * v1693);
        v1811 = v1696 + 8 * v1697;
        *v1810 = v1687;
        v1691 = v1810 + 1;
        v1813 = *(char **)(v2366 + 104);
        v1812 = *(char **)(v2366 + 112);
        if (v1812 == v1813)
        {
          v1815 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1814 = *((_QWORD *)v1812 - 1);
            v1812 -= 8;
            *--v1810 = v1814;
          }
          while (v1812 != v1813);
          v1815 = (_QWORD *)v2366;
          v1812 = *(char **)(v2366 + 104);
        }
        v1815[13] = v1810;
        v1815[14] = v1691;
        v1815[15] = v1811;
        if (v1812)
          operator delete(v1812);
      }
      else
      {
        *v1690 = v1687;
        v1691 = v1690 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1691;
      v1324 = v2505;
      if (!v2505)
        goto LABEL_2421;
      v2506 = v2505;
      goto LABEL_2420;
    case 29:
      v259 = operator new();
      v260 = *(_DWORD *)a1;
      v261 = *(_DWORD *)(a1 + 4);
      v2504 = 0;
      v2502 = 0;
      v2503 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2502, v2360, v12);
      if (v261 >= 0)
        v262 = v261;
      else
        v262 = v261 + 1;
      GRU<float>::GRU(v259, v260, v262 >> 1, (_DWORD **)&v2502, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v264 = *(uint64_t **)(v2366 + 112);
      v263 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v264 >= v263)
      {
        v571 = *(_QWORD *)(v2366 + 104);
        v572 = ((uint64_t)v264 - v571) >> 3;
        if ((unint64_t)(v572 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v573 = v263 - v571;
        v574 = v573 >> 2;
        if (v573 >> 2 <= (unint64_t)(v572 + 1))
          v574 = v572 + 1;
        if ((unint64_t)v573 >= 0x7FFFFFFFFFFFFFF8)
          v575 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v575 = v574;
        if (v575)
          v575 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v575);
        else
          v576 = 0;
        v1008 = (uint64_t *)(v575 + 8 * v572);
        v1009 = v575 + 8 * v576;
        *v1008 = v259;
        v265 = v1008 + 1;
        v1011 = *(char **)(v2366 + 104);
        v1010 = *(char **)(v2366 + 112);
        if (v1010 == v1011)
        {
          v1013 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1012 = *((_QWORD *)v1010 - 1);
            v1010 -= 8;
            *--v1008 = v1012;
          }
          while (v1010 != v1011);
          v1013 = (_QWORD *)v2366;
          v1010 = *(char **)(v2366 + 104);
        }
        v1013[13] = v1008;
        v1013[14] = v265;
        v1013[15] = v1009;
        if (v1010)
          operator delete(v1010);
      }
      else
      {
        *v264 = v259;
        v265 = v264 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v265;
      if (v2502)
      {
        v2503 = v2502;
        operator delete(v2502);
      }
      v1108 = operator new();
      v1109 = *(_DWORD *)(v2366 + 4);
      v2501 = 0;
      v2499 = 0;
      v2500 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2499, v2360, v12);
      if (v1109 >= 0)
        v1110 = v1109;
      else
        v1110 = v1109 + 1;
      GRU<float>::GRU(v1108, v1110 >> 1, v1109, (_DWORD **)&v2499, 0, a2, 1, 0);
      v1112 = *(uint64_t **)(v2366 + 112);
      v1111 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1112 >= v1111)
      {
        v1114 = *(_QWORD *)(v2366 + 104);
        v1115 = ((uint64_t)v1112 - v1114) >> 3;
        if ((unint64_t)(v1115 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1116 = v1111 - v1114;
        v1117 = v1116 >> 2;
        if (v1116 >> 2 <= (unint64_t)(v1115 + 1))
          v1117 = v1115 + 1;
        if ((unint64_t)v1116 >= 0x7FFFFFFFFFFFFFF8)
          v1118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1118 = v1117;
        if (v1118)
          v1118 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1118);
        else
          v1119 = 0;
        v1387 = (uint64_t *)(v1118 + 8 * v1115);
        v1388 = v1118 + 8 * v1119;
        *v1387 = v1108;
        v1113 = v1387 + 1;
        v1390 = *(char **)(v2366 + 104);
        v1389 = *(char **)(v2366 + 112);
        if (v1389 == v1390)
        {
          v1392 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1391 = *((_QWORD *)v1389 - 1);
            v1389 -= 8;
            *--v1387 = v1391;
          }
          while (v1389 != v1390);
          v1392 = (_QWORD *)v2366;
          v1389 = *(char **)(v2366 + 104);
        }
        v1392[13] = v1387;
        v1392[14] = v1113;
        v1392[15] = v1388;
        if (v1389)
          operator delete(v1389);
      }
      else
      {
        *v1112 = v1108;
        v1113 = v1112 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1113;
      if (v2499)
      {
        v2500 = v2499;
        operator delete(v2499);
      }
      v1447 = operator new();
      v1448 = *(_DWORD *)(v2366 + 4);
      v2498 = 0;
      v2496 = 0;
      v2497 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2496, v2360, v12);
      GRU<float>::GRU(v1447, v1448, v1448, (_DWORD **)&v2496, 0, a2, 1, 0);
      v1450 = *(uint64_t **)(v2366 + 112);
      v1449 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1450 >= v1449)
      {
        v1452 = *(_QWORD *)(v2366 + 104);
        v1453 = ((uint64_t)v1450 - v1452) >> 3;
        if ((unint64_t)(v1453 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1454 = v1449 - v1452;
        v1455 = v1454 >> 2;
        if (v1454 >> 2 <= (unint64_t)(v1453 + 1))
          v1455 = v1453 + 1;
        if ((unint64_t)v1454 >= 0x7FFFFFFFFFFFFFF8)
          v1456 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1456 = v1455;
        if (v1456)
          v1456 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1456);
        else
          v1457 = 0;
        v1630 = (uint64_t *)(v1456 + 8 * v1453);
        v1631 = v1456 + 8 * v1457;
        *v1630 = v1447;
        v1451 = v1630 + 1;
        v1633 = *(char **)(v2366 + 104);
        v1632 = *(char **)(v2366 + 112);
        if (v1632 == v1633)
        {
          v1635 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1634 = *((_QWORD *)v1632 - 1);
            v1632 -= 8;
            *--v1630 = v1634;
          }
          while (v1632 != v1633);
          v1635 = (_QWORD *)v2366;
          v1632 = *(char **)(v2366 + 104);
        }
        v1635[13] = v1630;
        v1635[14] = v1451;
        v1635[15] = v1631;
        if (v1632)
          operator delete(v1632);
      }
      else
      {
        *v1450 = v1447;
        v1451 = v1450 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1451;
      if (v2496)
      {
        v2497 = v2496;
        operator delete(v2496);
      }
      v1676 = operator new();
      v1677 = *(_DWORD *)(v2366 + 4);
      v2495 = 0;
      v2493 = 0;
      v2494 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2493, v2360, v12);
      GRU<float>::GRU(v1676, v1677, v1677, (_DWORD **)&v2493, 0, a2, 1, 0);
      v1679 = *(uint64_t **)(v2366 + 112);
      v1678 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1679 >= v1678)
      {
        v1681 = *(_QWORD *)(v2366 + 104);
        v1682 = ((uint64_t)v1679 - v1681) >> 3;
        if ((unint64_t)(v1682 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1683 = v1678 - v1681;
        v1684 = v1683 >> 2;
        if (v1683 >> 2 <= (unint64_t)(v1682 + 1))
          v1684 = v1682 + 1;
        if ((unint64_t)v1683 >= 0x7FFFFFFFFFFFFFF8)
          v1685 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1685 = v1684;
        if (v1685)
          v1685 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1685);
        else
          v1686 = 0;
        v1804 = (uint64_t *)(v1685 + 8 * v1682);
        v1805 = v1685 + 8 * v1686;
        *v1804 = v1676;
        v1680 = v1804 + 1;
        v1807 = *(char **)(v2366 + 104);
        v1806 = *(char **)(v2366 + 112);
        if (v1806 == v1807)
        {
          v1809 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1808 = *((_QWORD *)v1806 - 1);
            v1806 -= 8;
            *--v1804 = v1808;
          }
          while (v1806 != v1807);
          v1809 = (_QWORD *)v2366;
          v1806 = *(char **)(v2366 + 104);
        }
        v1809[13] = v1804;
        v1809[14] = v1680;
        v1809[15] = v1805;
        if (v1806)
          operator delete(v1806);
      }
      else
      {
        *v1679 = v1676;
        v1680 = v1679 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1680;
      v1324 = v2493;
      if (!v2493)
        goto LABEL_2421;
      v2494 = v2493;
      goto LABEL_2420;
    case 30:
      v329 = operator new();
      v330 = *(_DWORD *)a1;
      v331 = *(_DWORD *)(a1 + 4);
      memset(v2492, 0, sizeof(v2492));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2492, v2360, v12);
      GRU<float>::GRU(v329, v330, v331, v2492, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v333 = *(uint64_t **)(a1 + 112);
      v332 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v333 >= v332)
      {
        v597 = (void **)(v2366 + 104);
        v596 = *(_QWORD *)(v2366 + 104);
        v598 = ((uint64_t)v333 - v596) >> 3;
        if ((unint64_t)(v598 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v599 = v332 - v596;
        v600 = v599 >> 2;
        if (v599 >> 2 <= (unint64_t)(v598 + 1))
          v600 = v598 + 1;
        if ((unint64_t)v599 >= 0x7FFFFFFFFFFFFFF8)
          v601 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v601 = v600;
        if (v601)
          v601 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v601);
        else
          v602 = 0;
        v1033 = (uint64_t *)(v601 + 8 * v598);
        v1034 = v601 + 8 * v602;
        *v1033 = v329;
        v291 = v1033 + 1;
        v1035 = (char *)*v94;
        v1036 = (char *)*v597;
        if (*v94 != *v597)
        {
          do
          {
            v1037 = *((_QWORD *)v1035 - 1);
            v1035 -= 8;
            *--v1033 = v1037;
          }
          while (v1035 != v1036);
          v1035 = (char *)*v597;
        }
        *(_QWORD *)(v2366 + 104) = v1033;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1034;
        if (v1035)
          operator delete(v1035);
      }
      else
      {
        *v333 = v329;
        v291 = v333 + 1;
      }
      *v94 = v291;
      v1019 = v2492[0];
      if (!v2492[0])
        goto LABEL_1450;
      v1020 = (void **)v2492;
LABEL_1449:
      v1020[1] = v1019;
      operator delete(v1019);
      v291 = *v94;
LABEL_1450:
      (*(void (**)(_QWORD))(*(_QWORD *)*(v291 - 1) + 8))(*(v291 - 1));
      goto LABEL_2421;
    case 31:
      v296 = operator new();
      FullLayer<float>::FullLayer(v296, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v298 = *(uint64_t **)(a1 + 112);
      v297 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v298 >= v297)
      {
        v517 = *(_QWORD *)(a1 + 104);
        v518 = ((uint64_t)v298 - v517) >> 3;
        if ((unint64_t)(v518 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v519 = v297 - v517;
        v520 = v519 >> 2;
        if (v519 >> 2 <= (unint64_t)(v518 + 1))
          v520 = v518 + 1;
        if ((unint64_t)v519 >= 0x7FFFFFFFFFFFFFF8)
          v521 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v521 = v520;
        if (v521)
          v521 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v521);
        else
          v522 = 0;
        v825 = (uint64_t *)(v521 + 8 * v518);
        v826 = v521 + 8 * v522;
        *v825 = v296;
        v299 = v825 + 1;
        v828 = *(char **)(a1 + 104);
        v827 = *(char **)(a1 + 112);
        if (v827 == v828)
        {
          v830 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v829 = *((_QWORD *)v827 - 1);
            v827 -= 8;
            *--v825 = v829;
          }
          while (v827 != v828);
          v830 = (_QWORD *)a1;
          v827 = *(char **)(a1 + 104);
        }
        v830[13] = v825;
        v830[14] = v299;
        v830[15] = v826;
        if (v827)
          operator delete(v827);
      }
      else
      {
        *v298 = v296;
        v299 = v298 + 1;
      }
      *(_QWORD *)(a1 + 112) = v299;
      v939 = operator new();
      v940 = *(_DWORD *)(a1 + 4);
      v2491 = 0;
      v2489 = 0;
      v2490 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2489, v2360, v12);
      GRU<float>::GRU(v939, v940, v940, (_DWORD **)&v2489, 0, a2, 1, 0);
      v942 = *(uint64_t **)(a1 + 112);
      v941 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v942 >= v941)
      {
        v944 = *(_QWORD *)(a1 + 104);
        v945 = ((uint64_t)v942 - v944) >> 3;
        if ((unint64_t)(v945 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v946 = v941 - v944;
        v947 = v946 >> 2;
        if (v946 >> 2 <= (unint64_t)(v945 + 1))
          v947 = v945 + 1;
        if ((unint64_t)v946 >= 0x7FFFFFFFFFFFFFF8)
          v948 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v948 = v947;
        if (v948)
          v948 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v948);
        else
          v949 = 0;
        v1230 = (uint64_t *)(v948 + 8 * v945);
        v1231 = v948 + 8 * v949;
        *v1230 = v939;
        v943 = v1230 + 1;
        v1233 = *(char **)(a1 + 104);
        v1232 = *(char **)(a1 + 112);
        if (v1232 == v1233)
        {
          v1235 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1234 = *((_QWORD *)v1232 - 1);
            v1232 -= 8;
            *--v1230 = v1234;
          }
          while (v1232 != v1233);
          v1235 = (_QWORD *)a1;
          v1232 = *(char **)(a1 + 104);
        }
        v1235[13] = v1230;
        v1235[14] = v943;
        v1235[15] = v1231;
        if (v1232)
          operator delete(v1232);
      }
      else
      {
        *v942 = v939;
        v943 = v942 + 1;
      }
      *(_QWORD *)(a1 + 112) = v943;
      v1324 = v2489;
      if (!v2489)
        goto LABEL_2421;
      v2490 = v2489;
      goto LABEL_2420;
    case 32:
      v300 = operator new();
      v301 = *(_DWORD *)a1;
      v302 = *(_DWORD *)(a1 + 4);
      v2488 = 0;
      v2486 = 0;
      v2487 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2486, v2360, v12);
      GRU<float>::GRU(v300, v301, v302, (_DWORD **)&v2486, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v304 = v303;
      *v14 = v300;
      if (v2486)
      {
        v2487 = v2486;
        operator delete(v2486);
      }
      v305 = operator new();
      v306 = *(_DWORD *)(a1 + 4);
      v2485 = 0;
      v2483 = 0;
      v2484 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2483, v2360, v12);
      GRU<float>::GRU(v305, v306, v306, (_DWORD **)&v2483, 0, a2, 1, 0);
      if (v304 < 2)
      {
        v659 = 2;
        if ((unint64_t)((8 * v304) >> 2) > 2)
          v659 = (8 * v304) >> 2;
        if ((unint64_t)(8 * v304) >= 0x7FFFFFFFFFFFFFF8)
          v660 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v660 = v659;
        if (v660)
          v660 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v660);
        v661 = 0;
        *(_QWORD *)(v660 + 8) = v305;
        v307 = v660 + 16;
        do
        {
          *(_QWORD *)(v660 + v661 * 8) = v14[v661];
          --v661;
        }
        while (v661 != -1);
        v662 = (_QWORD *)v660;
        operator delete(v14);
        v14 = v662;
      }
      else
      {
        v14[1] = v305;
        v307 = (uint64_t)(v14 + 2);
      }
      if (v2483)
      {
        v2484 = v2483;
        operator delete(v2483);
      }
      v663 = operator new();
      v2481 = 0;
      v2480 = 0;
      v2482 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2480, v14, v307, (v307 - (uint64_t)v14) >> 3);
      Stacked::Stacked(v663, (uint64_t)&v2480);
      if (v2480)
      {
        v2481 = v2480;
        operator delete(v2480);
      }
      v664 = operator new();
      v665 = *(_DWORD *)a1;
      v666 = *(_DWORD *)(a1 + 4);
      v2479 = 0;
      v2477 = 0;
      v2478 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2477, v2360, v12);
      GRU<float>::GRU(v664, v665, v666, (_DWORD **)&v2477, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v667 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v669 = v668;
      *v667 = v664;
      if (v2477)
      {
        v2478 = v2477;
        operator delete(v2477);
      }
      v670 = operator new();
      v671 = *(_DWORD *)(a1 + 4);
      v2476 = 0;
      v2474 = 0;
      v2475 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2474, v2360, v12);
      GRU<float>::GRU(v670, v671, v671, (_DWORD **)&v2474, 0, a2, 1, 0);
      if (v669 < 2)
      {
        v729 = 2;
        if ((unint64_t)((8 * v669) >> 2) > 2)
          v729 = (8 * v669) >> 2;
        if ((unint64_t)(8 * v669) >= 0x7FFFFFFFFFFFFFF8)
          v730 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v730 = v729;
        if (v730)
          v730 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v730);
        v731 = 0;
        *(_QWORD *)(v730 + 8) = v670;
        v672 = v730 + 16;
        do
        {
          *(_QWORD *)(v730 + v731 * 8) = v667[v731];
          --v731;
        }
        while (v731 != -1);
        v732 = (_QWORD *)v730;
        operator delete(v667);
        v667 = v732;
      }
      else
      {
        v667[1] = v670;
        v672 = (uint64_t)(v667 + 2);
      }
      if (v2474)
      {
        v2475 = v2474;
        operator delete(v2474);
      }
      v733 = operator new();
      v734 = operator new();
      v2472 = 0;
      v2471 = 0;
      v2473 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2471, v667, v672, (v672 - (uint64_t)v667) >> 3);
      Stacked::Stacked(v734, (uint64_t)&v2471);
      Reverse::Reverse(v733, v734, *(_DWORD *)(a1 + 20));
      if (v2471)
      {
        v2472 = v2471;
        operator delete(v2471);
      }
      v735 = operator new(8uLL);
      *v735 = v663;
      v736 = operator new(0x10uLL);
      v737 = v736 + 2;
      *v736 = *v735;
      v736[1] = v733;
      v2681 = v736;
      v2683 = v736 + 2;
      operator delete(v735);
      v2682 = v737;
      v738 = (char **)operator new();
      Parallel::Parallel(v738, (uint64_t)&v2681);
      v740 = *(char ****)(v2366 + 112);
      v739 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v740 >= v739)
      {
        v742 = *(_QWORD *)(v2366 + 104);
        v743 = ((uint64_t)v740 - v742) >> 3;
        if ((unint64_t)(v743 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v744 = v739 - v742;
        v745 = v744 >> 2;
        if (v744 >> 2 <= (unint64_t)(v743 + 1))
          v745 = v743 + 1;
        if ((unint64_t)v744 >= 0x7FFFFFFFFFFFFFF8)
          v746 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v746 = v745;
        if (v746)
          v746 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v746);
        else
          v747 = 0;
        v2041 = (char ***)(v746 + 8 * v743);
        v2042 = v746 + 8 * v747;
        *v2041 = v738;
        v741 = v2041 + 1;
        v2044 = *(char **)(v2366 + 104);
        v2043 = *(char **)(v2366 + 112);
        if (v2043 == v2044)
        {
          v2046 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2045 = (char **)*((_QWORD *)v2043 - 1);
            v2043 -= 8;
            *--v2041 = v2045;
          }
          while (v2043 != v2044);
          v2046 = (_QWORD *)v2366;
          v2043 = *(char **)(v2366 + 104);
        }
        v2046[13] = v2041;
        v2046[14] = v741;
        v2046[15] = v2042;
        if (v2043)
          operator delete(v2043);
      }
      else
      {
        *v740 = v738;
        v741 = v740 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v741;
      if (v2681)
        operator delete(v2681);
      v2071 = v667;
      goto LABEL_2418;
    case 33:
      v266 = operator new();
      FullLayer<float>::FullLayer(v266, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v268 = *(uint64_t **)(a1 + 112);
      v267 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v268 >= v267)
      {
        v499 = *(_QWORD *)(a1 + 104);
        v500 = ((uint64_t)v268 - v499) >> 3;
        if ((unint64_t)(v500 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v501 = v267 - v499;
        v502 = v501 >> 2;
        if (v501 >> 2 <= (unint64_t)(v500 + 1))
          v502 = v500 + 1;
        if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF8)
          v503 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v503 = v502;
        if (v503)
          v503 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v503);
        else
          v504 = 0;
        v807 = (uint64_t *)(v503 + 8 * v500);
        v808 = v503 + 8 * v504;
        *v807 = v266;
        v269 = v807 + 1;
        v810 = *(char **)(a1 + 104);
        v809 = *(char **)(a1 + 112);
        if (v809 == v810)
        {
          v812 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v811 = *((_QWORD *)v809 - 1);
            v809 -= 8;
            *--v807 = v811;
          }
          while (v809 != v810);
          v812 = (_QWORD *)a1;
          v809 = *(char **)(a1 + 104);
        }
        v812[13] = v807;
        v812[14] = v269;
        v812[15] = v808;
        if (v809)
          operator delete(v809);
      }
      else
      {
        *v268 = v266;
        v269 = v268 + 1;
      }
      *(_QWORD *)(a1 + 112) = v269;
      v906 = operator new();
      v907 = *(_DWORD *)(a1 + 4);
      v2470 = 0;
      v2468 = 0;
      v2469 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2468, v2360, v12);
      GRU<float>::GRU(v906, v907, v907, (_DWORD **)&v2468, 0, a2, 1, 0);
      v909 = *(uint64_t **)(a1 + 112);
      v908 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v909 >= v908)
      {
        v911 = *(_QWORD *)(a1 + 104);
        v912 = ((uint64_t)v909 - v911) >> 3;
        if ((unint64_t)(v912 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v913 = v908 - v911;
        v914 = v913 >> 2;
        if (v913 >> 2 <= (unint64_t)(v912 + 1))
          v914 = v912 + 1;
        if ((unint64_t)v913 >= 0x7FFFFFFFFFFFFFF8)
          v915 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v915 = v914;
        if (v915)
          v915 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v915);
        else
          v916 = 0;
        v1224 = (uint64_t *)(v915 + 8 * v912);
        v1225 = v915 + 8 * v916;
        *v1224 = v906;
        v910 = v1224 + 1;
        v1227 = *(char **)(a1 + 104);
        v1226 = *(char **)(a1 + 112);
        if (v1226 == v1227)
        {
          v1229 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1228 = *((_QWORD *)v1226 - 1);
            v1226 -= 8;
            *--v1224 = v1228;
          }
          while (v1226 != v1227);
          v1229 = (_QWORD *)a1;
          v1226 = *(char **)(a1 + 104);
        }
        v1229[13] = v1224;
        v1229[14] = v910;
        v1229[15] = v1225;
        if (v1226)
          operator delete(v1226);
      }
      else
      {
        *v909 = v906;
        v910 = v909 + 1;
      }
      *(_QWORD *)(a1 + 112) = v910;
      if (v2468)
      {
        v2469 = v2468;
        operator delete(v2468);
      }
      v1336 = operator new();
      v1337 = *(_DWORD *)(a1 + 4);
      v2467 = 0;
      v2465 = 0;
      v2466 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2465, v2360, v12);
      GRU<float>::GRU(v1336, v1337, v1337, (_DWORD **)&v2465, 0, a2, 1, 0);
      v1339 = *(uint64_t **)(a1 + 112);
      v1338 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1339 >= v1338)
      {
        v1341 = *(_QWORD *)(a1 + 104);
        v1342 = ((uint64_t)v1339 - v1341) >> 3;
        if ((unint64_t)(v1342 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1343 = v1338 - v1341;
        v1344 = v1343 >> 2;
        if (v1343 >> 2 <= (unint64_t)(v1342 + 1))
          v1344 = v1342 + 1;
        if ((unint64_t)v1343 >= 0x7FFFFFFFFFFFFFF8)
          v1345 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1345 = v1344;
        if (v1345)
          v1345 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1345);
        else
          v1346 = 0;
        v1547 = (uint64_t *)(v1345 + 8 * v1342);
        v1548 = v1345 + 8 * v1346;
        *v1547 = v1336;
        v1340 = v1547 + 1;
        v1550 = *(char **)(a1 + 104);
        v1549 = *(char **)(a1 + 112);
        if (v1549 == v1550)
        {
          v1552 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1551 = *((_QWORD *)v1549 - 1);
            v1549 -= 8;
            *--v1547 = v1551;
          }
          while (v1549 != v1550);
          v1552 = (_QWORD *)a1;
          v1549 = *(char **)(a1 + 104);
        }
        v1552[13] = v1547;
        v1552[14] = v1340;
        v1552[15] = v1548;
        if (v1549)
          operator delete(v1549);
      }
      else
      {
        *v1339 = v1336;
        v1340 = v1339 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1340;
      if (v2465)
      {
        v2466 = v2465;
        operator delete(v2465);
      }
      v1590 = operator new();
      v1591 = *(_DWORD *)(a1 + 4);
      v2464 = 0;
      v2462 = 0;
      v2463 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2462, v2360, v12);
      GRU<float>::GRU(v1590, v1591, v1591, (_DWORD **)&v2462, 0, a2, 1, 0);
      v1593 = *(uint64_t **)(a1 + 112);
      v1592 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1593 >= v1592)
      {
        v1595 = *(_QWORD *)(a1 + 104);
        v1596 = ((uint64_t)v1593 - v1595) >> 3;
        if ((unint64_t)(v1596 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1597 = v1592 - v1595;
        v1598 = v1597 >> 2;
        if (v1597 >> 2 <= (unint64_t)(v1596 + 1))
          v1598 = v1596 + 1;
        if ((unint64_t)v1597 >= 0x7FFFFFFFFFFFFFF8)
          v1599 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1599 = v1598;
        if (v1599)
          v1599 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1599);
        else
          v1600 = 0;
        v1758 = (uint64_t *)(v1599 + 8 * v1596);
        v1759 = v1599 + 8 * v1600;
        *v1758 = v1590;
        v1594 = v1758 + 1;
        v1761 = *(char **)(a1 + 104);
        v1760 = *(char **)(a1 + 112);
        if (v1760 == v1761)
        {
          v1763 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1762 = *((_QWORD *)v1760 - 1);
            v1760 -= 8;
            *--v1758 = v1762;
          }
          while (v1760 != v1761);
          v1763 = (_QWORD *)a1;
          v1760 = *(char **)(a1 + 104);
        }
        v1763[13] = v1758;
        v1763[14] = v1594;
        v1763[15] = v1759;
        if (v1760)
          operator delete(v1760);
      }
      else
      {
        *v1593 = v1590;
        v1594 = v1593 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1594;
      if (v2462)
      {
        v2463 = v2462;
        operator delete(v2462);
      }
      v1781 = operator new();
      v1782 = *(_DWORD *)(a1 + 4);
      v2461 = 0;
      v2459 = 0;
      v2460 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2459, v2360, v12);
      GRU<float>::GRU(v1781, v1782, v1782, (_DWORD **)&v2459, 0, a2, 1, 0);
      v1784 = *(uint64_t **)(a1 + 112);
      v1783 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1784 >= v1783)
      {
        v1786 = *(_QWORD *)(a1 + 104);
        v1787 = ((uint64_t)v1784 - v1786) >> 3;
        if ((unint64_t)(v1787 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1788 = v1783 - v1786;
        v1789 = v1788 >> 2;
        if (v1788 >> 2 <= (unint64_t)(v1787 + 1))
          v1789 = v1787 + 1;
        if ((unint64_t)v1788 >= 0x7FFFFFFFFFFFFFF8)
          v1790 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1790 = v1789;
        if (v1790)
          v1790 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1790);
        else
          v1791 = 0;
        v1833 = (uint64_t *)(v1790 + 8 * v1787);
        v1834 = v1790 + 8 * v1791;
        *v1833 = v1781;
        v1785 = v1833 + 1;
        v1836 = *(char **)(a1 + 104);
        v1835 = *(char **)(a1 + 112);
        if (v1835 == v1836)
        {
          v1838 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1837 = *((_QWORD *)v1835 - 1);
            v1835 -= 8;
            *--v1833 = v1837;
          }
          while (v1835 != v1836);
          v1838 = (_QWORD *)a1;
          v1835 = *(char **)(a1 + 104);
        }
        v1838[13] = v1833;
        v1838[14] = v1785;
        v1838[15] = v1834;
        if (v1835)
          operator delete(v1835);
      }
      else
      {
        *v1784 = v1781;
        v1785 = v1784 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1785;
      v1324 = v2459;
      if (!v2459)
        goto LABEL_2421;
      v2460 = v2459;
      goto LABEL_2420;
    case 39:
      v270 = operator new();
      FullLayer<float>::FullLayer(v270, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v272 = *(uint64_t **)(a1 + 112);
      v271 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v272 >= v271)
      {
        v505 = *(_QWORD *)(a1 + 104);
        v506 = ((uint64_t)v272 - v505) >> 3;
        if ((unint64_t)(v506 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v507 = v271 - v505;
        v508 = v507 >> 2;
        if (v507 >> 2 <= (unint64_t)(v506 + 1))
          v508 = v506 + 1;
        if ((unint64_t)v507 >= 0x7FFFFFFFFFFFFFF8)
          v509 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v509 = v508;
        if (v509)
          v509 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v509);
        else
          v510 = 0;
        v813 = (uint64_t *)(v509 + 8 * v506);
        v814 = v509 + 8 * v510;
        *v813 = v270;
        v273 = v813 + 1;
        v816 = *(char **)(a1 + 104);
        v815 = *(char **)(a1 + 112);
        if (v815 == v816)
        {
          v818 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v817 = *((_QWORD *)v815 - 1);
            v815 -= 8;
            *--v813 = v817;
          }
          while (v815 != v816);
          v818 = (_QWORD *)a1;
          v815 = *(char **)(a1 + 104);
        }
        v818[13] = v813;
        v818[14] = v273;
        v818[15] = v814;
        if (v815)
          operator delete(v815);
      }
      else
      {
        *v272 = v270;
        v273 = v272 + 1;
      }
      *(_QWORD *)(a1 + 112) = v273;
      v917 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v273 - 1) + 272))(*(v273 - 1));
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v918 = operator new();
      v919 = *(_DWORD *)(a1 + 4);
      v2458 = 0;
      v2456 = 0;
      v2457 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2456, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v918, v917, v919, (_DWORD **)&v2456, 0, a2, 1, 0, 0);
      v920 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v922 = v921;
      v923 = &v920[v921];
      *v920 = v918;
      v2682 = v920 + 1;
      v2683 = v923;
      v2681 = v920;
      if (v2456)
      {
        v2457 = v2456;
        operator delete(v2456);
      }
      v924 = operator new();
      Direct::Direct(v924, v917, v917, 0);
      if (v922 < 2)
      {
        v926 = 2;
        if ((unint64_t)(((char *)v923 - (char *)v920) >> 2) > 2)
          v926 = ((char *)v923 - (char *)v920) >> 2;
        if ((unint64_t)((char *)v923 - (char *)v920) >= 0x7FFFFFFFFFFFFFF8)
          v927 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v927 = v926;
        if (v927)
          v927 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v927);
        else
          v928 = 0;
        v1565 = 0;
        v1566 = v927 + 8;
        v1567 = v927 + 8 * v928;
        *(_QWORD *)(v927 + 8) = v924;
        v925 = (_QWORD *)(v927 + 16);
        do
        {
          *(_QWORD *)(v927 + v1565 * 8) = v920[v1565];
          --v1565;
        }
        while (v1565 != -1);
        v1568 = v2681;
        v2681 = (void *)(v1566 - 8);
        v2683 = (_QWORD *)v1567;
        if (v1568)
          operator delete(v1568);
      }
      else
      {
        v920[1] = v924;
        v925 = v920 + 2;
      }
      v2682 = v925;
      v1569 = (char **)operator new();
      Parallel::Parallel(v1569, (uint64_t)&v2681);
      v1571 = *(char ****)(v2366 + 112);
      v1570 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1571 >= v1570)
      {
        v1573 = *(_QWORD *)(v2366 + 104);
        v1574 = ((uint64_t)v1571 - v1573) >> 3;
        if ((unint64_t)(v1574 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1575 = v1570 - v1573;
        v1576 = v1575 >> 2;
        if (v1575 >> 2 <= (unint64_t)(v1574 + 1))
          v1576 = v1574 + 1;
        if ((unint64_t)v1575 >= 0x7FFFFFFFFFFFFFF8)
          v1577 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1577 = v1576;
        if (v1577)
          v1577 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1577);
        else
          v1578 = 0;
        v1734 = (char ***)(v1577 + 8 * v1574);
        v1735 = v1577 + 8 * v1578;
        *v1734 = v1569;
        v1572 = v1734 + 1;
        v1737 = *(char **)(v2366 + 104);
        v1736 = *(char **)(v2366 + 112);
        if (v1736 == v1737)
        {
          v1739 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1738 = (char **)*((_QWORD *)v1736 - 1);
            v1736 -= 8;
            *--v1734 = v1738;
          }
          while (v1736 != v1737);
          v1739 = (_QWORD *)v2366;
          v1736 = *(char **)(v2366 + 104);
        }
        v1739[13] = v1734;
        v1739[14] = v1572;
        v1739[15] = v1735;
        if (v1736)
          operator delete(v1736);
      }
      else
      {
        *v1571 = v1569;
        v1572 = v1571 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1572;
      v1740 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1572 - 1) + 272))(*(v1572 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1741 = operator new();
      v1742 = *(_DWORD *)(v2366 + 4);
      v2452 = 0;
      v2450 = 0;
      v2451 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2450, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1741, v1740, v1742, (_DWORD **)&v2450, 0, a2, 1, 0, 0);
      v1743 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1745 = v1744;
      v1746 = (char *)&v1743[v1744];
      *v1743 = v1741;
      v2455 = v1746;
      v2453 = v1743;
      v2454 = v1743 + 1;
      if (v2450)
      {
        v2451 = v2450;
        operator delete(v2450);
      }
      v1747 = operator new();
      Direct::Direct(v1747, v1740, v1740, 0);
      if (v1745 < 2)
      {
        v1749 = 2;
        if ((unint64_t)((v1746 - (char *)v1743) >> 2) > 2)
          v1749 = (v1746 - (char *)v1743) >> 2;
        if ((unint64_t)(v1746 - (char *)v1743) >= 0x7FFFFFFFFFFFFFF8)
          v1750 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1750 = v1749;
        if (v1750)
          v1750 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1750);
        else
          v1751 = 0;
        v1924 = 0;
        v1925 = v1750 + 8;
        v1926 = v1750 + 8 * v1751;
        *(_QWORD *)(v1750 + 8) = v1747;
        v1748 = (_QWORD *)(v1750 + 16);
        do
        {
          *(_QWORD *)(v1750 + v1924 * 8) = v1743[v1924];
          --v1924;
        }
        while (v1924 != -1);
        v1927 = v2453;
        v2453 = (void *)(v1925 - 8);
        v2455 = (char *)v1926;
        if (v1927)
          operator delete(v1927);
      }
      else
      {
        v1743[1] = v1747;
        v1748 = v1743 + 2;
      }
      v2454 = v1748;
      v1928 = (char **)operator new();
      Parallel::Parallel(v1928, (uint64_t)&v2453);
      v1930 = *(char ****)(v2366 + 112);
      v1929 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1930 >= v1929)
      {
        v1932 = *(_QWORD *)(v2366 + 104);
        v1933 = ((uint64_t)v1930 - v1932) >> 3;
        if ((unint64_t)(v1933 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1934 = v1929 - v1932;
        v1935 = v1934 >> 2;
        if (v1934 >> 2 <= (unint64_t)(v1933 + 1))
          v1935 = v1933 + 1;
        if ((unint64_t)v1934 >= 0x7FFFFFFFFFFFFFF8)
          v1936 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1936 = v1935;
        if (v1936)
          v1936 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1936);
        else
          v1937 = 0;
        v1990 = (char ***)(v1936 + 8 * v1933);
        v1991 = v1936 + 8 * v1937;
        *v1990 = v1928;
        v1931 = v1990 + 1;
        v1993 = *(char **)(v2366 + 104);
        v1992 = *(char **)(v2366 + 112);
        if (v1992 == v1993)
        {
          v1995 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1994 = (char **)*((_QWORD *)v1992 - 1);
            v1992 -= 8;
            *--v1990 = v1994;
          }
          while (v1992 != v1993);
          v1995 = (_QWORD *)v2366;
          v1992 = *(char **)(v2366 + 104);
        }
        v1995[13] = v1990;
        v1995[14] = v1931;
        v1995[15] = v1991;
        if (v1992)
          operator delete(v1992);
      }
      else
      {
        *v1930 = v1928;
        v1931 = v1930 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1931;
      v1996 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1931 - 1) + 272))(*(v1931 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1997 = operator new();
      v1998 = *(_DWORD *)(v2366 + 4);
      v2446 = 0;
      v2444 = 0;
      v2445 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2444, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v1997, v1996, v1998, (_DWORD **)&v2444, 0, a2, 1, 0, 0);
      v1999 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2001 = v2000;
      v2002 = (char *)&v1999[v2000];
      *v1999 = v1997;
      v2449 = v2002;
      v2447 = v1999;
      v2448 = v1999 + 1;
      if (v2444)
      {
        v2445 = v2444;
        operator delete(v2444);
      }
      v2003 = operator new();
      Direct::Direct(v2003, v1996, v1996, 0);
      if (v2001 < 2)
      {
        v2005 = 2;
        if ((unint64_t)((v2002 - (char *)v1999) >> 2) > 2)
          v2005 = (v2002 - (char *)v1999) >> 2;
        if ((unint64_t)(v2002 - (char *)v1999) >= 0x7FFFFFFFFFFFFFF8)
          v2006 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2006 = v2005;
        if (v2006)
          v2006 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2006);
        else
          v2007 = 0;
        v2105 = 0;
        v2106 = v2006 + 8;
        v2107 = v2006 + 8 * v2007;
        *(_QWORD *)(v2006 + 8) = v2003;
        v2004 = (_QWORD *)(v2006 + 16);
        do
        {
          *(_QWORD *)(v2006 + v2105 * 8) = v1999[v2105];
          --v2105;
        }
        while (v2105 != -1);
        v2108 = v2447;
        v2447 = (void *)(v2106 - 8);
        v2449 = (char *)v2107;
        if (v2108)
          operator delete(v2108);
      }
      else
      {
        v1999[1] = v2003;
        v2004 = v1999 + 2;
      }
      v2448 = v2004;
      v2109 = (char **)operator new();
      Parallel::Parallel(v2109, (uint64_t)&v2447);
      v2111 = *(char ****)(v2366 + 112);
      v2110 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2111 >= v2110)
      {
        v2113 = *(_QWORD *)(v2366 + 104);
        v2114 = ((uint64_t)v2111 - v2113) >> 3;
        if ((unint64_t)(v2114 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2115 = v2110 - v2113;
        v2116 = v2115 >> 2;
        if (v2115 >> 2 <= (unint64_t)(v2114 + 1))
          v2116 = v2114 + 1;
        if ((unint64_t)v2115 >= 0x7FFFFFFFFFFFFFF8)
          v2117 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2117 = v2116;
        if (v2117)
          v2117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2117);
        else
          v2118 = 0;
        v2134 = (char ***)(v2117 + 8 * v2114);
        v2135 = v2117 + 8 * v2118;
        *v2134 = v2109;
        v2112 = v2134 + 1;
        v2137 = *(char **)(v2366 + 104);
        v2136 = *(char **)(v2366 + 112);
        if (v2136 == v2137)
        {
          v2139 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2138 = (char **)*((_QWORD *)v2136 - 1);
            v2136 -= 8;
            *--v2134 = v2138;
          }
          while (v2136 != v2137);
          v2139 = (_QWORD *)v2366;
          v2136 = *(char **)(v2366 + 104);
        }
        v2139[13] = v2134;
        v2139[14] = v2112;
        v2139[15] = v2135;
        if (v2136)
          operator delete(v2136);
      }
      else
      {
        *v2111 = v2109;
        v2112 = v2111 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2112;
      v2140 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2112 - 1) + 272))(*(v2112 - 1));
      v2141 = operator new();
      v2142 = *(_DWORD *)(v2366 + 4);
      v2443 = 0;
      v2441 = 0;
      v2442 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2441, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v2141, v2140, v2142, (_DWORD **)&v2441, 0, a2, 1, 0, 0);
      v2144 = *(uint64_t **)(v2366 + 112);
      v2143 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2144 >= v2143)
      {
        v2146 = *(_QWORD *)(v2366 + 104);
        v2147 = ((uint64_t)v2144 - v2146) >> 3;
        if ((unint64_t)(v2147 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2148 = v2143 - v2146;
        v2149 = v2148 >> 2;
        if (v2148 >> 2 <= (unint64_t)(v2147 + 1))
          v2149 = v2147 + 1;
        if ((unint64_t)v2148 >= 0x7FFFFFFFFFFFFFF8)
          v2150 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2150 = v2149;
        if (v2150)
          v2150 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2150);
        else
          v2151 = 0;
        v2172 = (uint64_t *)(v2150 + 8 * v2147);
        v2173 = v2150 + 8 * v2151;
        *v2172 = v2141;
        v2145 = v2172 + 1;
        v2175 = *(char **)(v2366 + 104);
        v2174 = *(char **)(v2366 + 112);
        if (v2174 == v2175)
        {
          v2177 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2176 = *((_QWORD *)v2174 - 1);
            v2174 -= 8;
            *--v2172 = v2176;
          }
          while (v2174 != v2175);
          v2177 = (_QWORD *)v2366;
          v2174 = *(char **)(v2366 + 104);
        }
        v2177[13] = v2172;
        v2177[14] = v2145;
        v2177[15] = v2173;
        if (v2174)
          operator delete(v2174);
      }
      else
      {
        *v2144 = v2141;
        v2145 = v2144 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2145;
      v2158 = v2441;
      if (!v2441)
        goto LABEL_2404;
      v2442 = v2441;
      goto LABEL_2403;
    case 40:
      v308 = operator new();
      FullLayer<float>::FullLayer(v308, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v310 = *(uint64_t **)(a1 + 112);
      v309 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v310 >= v309)
      {
        v523 = *(_QWORD *)(a1 + 104);
        v524 = ((uint64_t)v310 - v523) >> 3;
        if ((unint64_t)(v524 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v525 = v309 - v523;
        v526 = v525 >> 2;
        if (v525 >> 2 <= (unint64_t)(v524 + 1))
          v526 = v524 + 1;
        if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFF8)
          v527 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v527 = v526;
        if (v527)
          v527 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v527);
        else
          v528 = 0;
        v831 = (uint64_t *)(v527 + 8 * v524);
        v832 = v527 + 8 * v528;
        *v831 = v308;
        v311 = v831 + 1;
        v834 = *(char **)(a1 + 104);
        v833 = *(char **)(a1 + 112);
        if (v833 == v834)
        {
          v836 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v835 = *((_QWORD *)v833 - 1);
            v833 -= 8;
            *--v831 = v835;
          }
          while (v833 != v834);
          v836 = (_QWORD *)a1;
          v833 = *(char **)(a1 + 104);
        }
        v836[13] = v831;
        v836[14] = v311;
        v836[15] = v832;
        if (v833)
          operator delete(v833);
      }
      else
      {
        *v310 = v308;
        v311 = v310 + 1;
      }
      *(_QWORD *)(a1 + 112) = v311;
      v950 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v311 - 1) + 272))(*(v311 - 1));
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v951 = operator new();
      FullLayer<float>::FullLayer(v951, v950, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v952 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v954 = v953;
      *v952 = v951;
      v955 = &v952[v953];
      v2682 = v952 + 1;
      v2683 = v955;
      v2681 = v952;
      v956 = operator new();
      Direct::Direct(v956, v950, v950, 0);
      if (v954 < 2)
      {
        v958 = 2;
        if ((unint64_t)(((char *)v955 - (char *)v952) >> 2) > 2)
          v958 = ((char *)v955 - (char *)v952) >> 2;
        if ((unint64_t)((char *)v955 - (char *)v952) >= 0x7FFFFFFFFFFFFFF8)
          v959 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v959 = v958;
        if (v959)
          v959 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v959);
        else
          v960 = 0;
        v1497 = 0;
        v1498 = v959 + 8;
        v1499 = v959 + 8 * v960;
        *(_QWORD *)(v959 + 8) = v956;
        v957 = (_QWORD *)(v959 + 16);
        do
        {
          *(_QWORD *)(v959 + v1497 * 8) = v952[v1497];
          --v1497;
        }
        while (v1497 != -1);
        v1500 = v2681;
        v2681 = (void *)(v1498 - 8);
        v2683 = (_QWORD *)v1499;
        if (v1500)
          operator delete(v1500);
      }
      else
      {
        v952[1] = v956;
        v957 = v952 + 2;
      }
      v2682 = v957;
      v1501 = (char **)operator new();
      Parallel::Parallel(v1501, (uint64_t)&v2681);
      v1503 = *(char ****)(v2366 + 112);
      v1502 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1503 >= v1502)
      {
        v1505 = *(_QWORD *)(v2366 + 104);
        v1506 = ((uint64_t)v1503 - v1505) >> 3;
        if ((unint64_t)(v1506 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1507 = v1502 - v1505;
        v1508 = v1507 >> 2;
        if (v1507 >> 2 <= (unint64_t)(v1506 + 1))
          v1508 = v1506 + 1;
        if ((unint64_t)v1507 >= 0x7FFFFFFFFFFFFFF8)
          v1509 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1509 = v1508;
        if (v1509)
          v1509 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1509);
        else
          v1510 = 0;
        v1698 = (char ***)(v1509 + 8 * v1506);
        v1699 = v1509 + 8 * v1510;
        *v1698 = v1501;
        v1504 = v1698 + 1;
        v1701 = *(char **)(v2366 + 104);
        v1700 = *(char **)(v2366 + 112);
        if (v1700 == v1701)
        {
          v1703 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1702 = (char **)*((_QWORD *)v1700 - 1);
            v1700 -= 8;
            *--v1698 = v1702;
          }
          while (v1700 != v1701);
          v1703 = (_QWORD *)v2366;
          v1700 = *(char **)(v2366 + 104);
        }
        v1703[13] = v1698;
        v1703[14] = v1504;
        v1703[15] = v1699;
        if (v1700)
          operator delete(v1700);
      }
      else
      {
        *v1503 = v1501;
        v1504 = v1503 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1504;
      v1723 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1504 - 1) + 272))(*(v1504 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1724 = operator new();
      FullLayer<float>::FullLayer(v1724, v1723, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1725 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1727 = v1726;
      *v1725 = v1724;
      v1728 = (char *)&v1725[v1726];
      v2455 = v1728;
      v2453 = v1725;
      v2454 = v1725 + 1;
      v1729 = operator new();
      Direct::Direct(v1729, v1723, v1723, 0);
      if (v1727 < 2)
      {
        v1731 = 2;
        if ((unint64_t)((v1728 - (char *)v1725) >> 2) > 2)
          v1731 = (v1728 - (char *)v1725) >> 2;
        if ((unint64_t)(v1728 - (char *)v1725) >= 0x7FFFFFFFFFFFFFF8)
          v1732 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1732 = v1731;
        if (v1732)
          v1732 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1732);
        else
          v1733 = 0;
        v1845 = 0;
        v1846 = v1732 + 8;
        v1847 = v1732 + 8 * v1733;
        *(_QWORD *)(v1732 + 8) = v1729;
        v1730 = (_QWORD *)(v1732 + 16);
        do
        {
          *(_QWORD *)(v1732 + v1845 * 8) = v1725[v1845];
          --v1845;
        }
        while (v1845 != -1);
        v1848 = v2453;
        v2453 = (void *)(v1846 - 8);
        v2455 = (char *)v1847;
        if (v1848)
          operator delete(v1848);
      }
      else
      {
        v1725[1] = v1729;
        v1730 = v1725 + 2;
      }
      v2454 = v1730;
      v1849 = (char **)operator new();
      Parallel::Parallel(v1849, (uint64_t)&v2453);
      v1851 = *(char ****)(v2366 + 112);
      v1850 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1851 >= v1850)
      {
        v1853 = *(_QWORD *)(v2366 + 104);
        v1854 = ((uint64_t)v1851 - v1853) >> 3;
        if ((unint64_t)(v1854 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1855 = v1850 - v1853;
        v1856 = v1855 >> 2;
        if (v1855 >> 2 <= (unint64_t)(v1854 + 1))
          v1856 = v1854 + 1;
        if ((unint64_t)v1855 >= 0x7FFFFFFFFFFFFFF8)
          v1857 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1857 = v1856;
        if (v1857)
          v1857 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1857);
        else
          v1858 = 0;
        v1938 = (char ***)(v1857 + 8 * v1854);
        v1939 = v1857 + 8 * v1858;
        *v1938 = v1849;
        v1852 = v1938 + 1;
        v1941 = *(char **)(v2366 + 104);
        v1940 = *(char **)(v2366 + 112);
        if (v1940 == v1941)
        {
          v1943 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1942 = (char **)*((_QWORD *)v1940 - 1);
            v1940 -= 8;
            *--v1938 = v1942;
          }
          while (v1940 != v1941);
          v1943 = (_QWORD *)v2366;
          v1940 = *(char **)(v2366 + 104);
        }
        v1943[13] = v1938;
        v1943[14] = v1852;
        v1943[15] = v1939;
        if (v1940)
          operator delete(v1940);
      }
      else
      {
        *v1851 = v1849;
        v1852 = v1851 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1852;
      v1969 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1852 - 1) + 272))(*(v1852 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1970 = operator new();
      FullLayer<float>::FullLayer(v1970, v1969, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1971 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1973 = v1972;
      *v1971 = v1970;
      v1974 = (char *)&v1971[v1972];
      v2449 = v1974;
      v2447 = v1971;
      v2448 = v1971 + 1;
      v1975 = operator new();
      Direct::Direct(v1975, v1969, v1969, 0);
      if (v1973 < 2)
      {
        v1977 = 2;
        if ((unint64_t)((v1974 - (char *)v1971) >> 2) > 2)
          v1977 = (v1974 - (char *)v1971) >> 2;
        if ((unint64_t)(v1974 - (char *)v1971) >= 0x7FFFFFFFFFFFFFF8)
          v1978 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1978 = v1977;
        if (v1978)
          v1978 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1978);
        else
          v1979 = 0;
        v2047 = 0;
        v2048 = v1978 + 8;
        v2049 = v1978 + 8 * v1979;
        *(_QWORD *)(v1978 + 8) = v1975;
        v1976 = (_QWORD *)(v1978 + 16);
        do
        {
          *(_QWORD *)(v1978 + v2047 * 8) = v1971[v2047];
          --v2047;
        }
        while (v2047 != -1);
        v2050 = v2447;
        v2447 = (void *)(v2048 - 8);
        v2449 = (char *)v2049;
        if (v2050)
          operator delete(v2050);
      }
      else
      {
        v1971[1] = v1975;
        v1976 = v1971 + 2;
      }
      v2448 = v1976;
      v2051 = (char **)operator new();
      Parallel::Parallel(v2051, (uint64_t)&v2447);
      v2053 = *(char ****)(v2366 + 112);
      v2052 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2053 >= v2052)
      {
        v2055 = *(_QWORD *)(v2366 + 104);
        v2056 = ((uint64_t)v2053 - v2055) >> 3;
        if ((unint64_t)(v2056 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2057 = v2052 - v2055;
        v2058 = v2057 >> 2;
        if (v2057 >> 2 <= (unint64_t)(v2056 + 1))
          v2058 = v2056 + 1;
        if ((unint64_t)v2057 >= 0x7FFFFFFFFFFFFFF8)
          v2059 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2059 = v2058;
        if (v2059)
          v2059 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2059);
        else
          v2060 = 0;
        v2072 = (char ***)(v2059 + 8 * v2056);
        v2073 = v2059 + 8 * v2060;
        *v2072 = v2051;
        v2054 = v2072 + 1;
        v2075 = *(char **)(v2366 + 104);
        v2074 = *(char **)(v2366 + 112);
        if (v2074 == v2075)
        {
          v2077 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2076 = (char **)*((_QWORD *)v2074 - 1);
            v2074 -= 8;
            *--v2072 = v2076;
          }
          while (v2074 != v2075);
          v2077 = (_QWORD *)v2366;
          v2074 = *(char **)(v2366 + 104);
        }
        v2077[13] = v2072;
        v2077[14] = v2054;
        v2077[15] = v2073;
        if (v2074)
          operator delete(v2074);
      }
      else
      {
        *v2053 = v2051;
        v2054 = v2053 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2054;
      v2119 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2054 - 1) + 272))(*(v2054 - 1));
      v2120 = operator new();
      v2121 = *(_DWORD *)(v2366 + 4);
      v2440 = 0;
      v2438 = 0;
      v2439 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2438, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v2120, v2119, v2121, &v2438, 0, a2, 1, 0, 0);
      v2123 = *(uint64_t **)(v2366 + 112);
      v2122 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2123 >= v2122)
      {
        v2125 = *(_QWORD *)(v2366 + 104);
        v2126 = ((uint64_t)v2123 - v2125) >> 3;
        if ((unint64_t)(v2126 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2127 = v2122 - v2125;
        v2128 = v2127 >> 2;
        if (v2127 >> 2 <= (unint64_t)(v2126 + 1))
          v2128 = v2126 + 1;
        if ((unint64_t)v2127 >= 0x7FFFFFFFFFFFFFF8)
          v2129 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2129 = v2128;
        if (v2129)
          v2129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2129);
        else
          v2130 = 0;
        v2152 = (uint64_t *)(v2129 + 8 * v2126);
        v2153 = v2129 + 8 * v2130;
        *v2152 = v2120;
        v2124 = v2152 + 1;
        v2155 = *(char **)(v2366 + 104);
        v2154 = *(char **)(v2366 + 112);
        if (v2154 == v2155)
        {
          v2157 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2156 = *((_QWORD *)v2154 - 1);
            v2154 -= 8;
            *--v2152 = v2156;
          }
          while (v2154 != v2155);
          v2157 = (_QWORD *)v2366;
          v2154 = *(char **)(v2366 + 104);
        }
        v2157[13] = v2152;
        v2157[14] = v2124;
        v2157[15] = v2153;
        if (v2154)
          operator delete(v2154);
      }
      else
      {
        *v2123 = v2120;
        v2124 = v2123 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2124;
      v2158 = v2438;
      if (!v2438)
        goto LABEL_2404;
      v2439 = v2438;
LABEL_2403:
      operator delete(v2158);
LABEL_2404:
      if (v2447)
        operator delete(v2447);
      if (v2453)
        operator delete(v2453);
LABEL_2408:
      v1324 = (uint64_t *)v2681;
      if (!v2681)
        goto LABEL_2421;
      goto LABEL_2420;
    case 46:
      v73 = operator new();
      FullLayer<float>::FullLayer(v73, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v75 = v74;
      *v40 = v73;
      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 272))(v73);
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v77 = operator new();
      FullLayer<float>::FullLayer(v77, v76, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v78 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v80 = v79;
      *v78 = v77;
      v81 = &v78[v79];
      v2682 = v78 + 1;
      v2683 = v81;
      v2681 = v78;
      v82 = operator new();
      Direct::Direct(v82, v76, v76, 0);
      if (v80 < 2)
      {
        v673 = 2;
        if ((unint64_t)(((char *)v81 - (char *)v78) >> 2) > 2)
          v673 = ((char *)v81 - (char *)v78) >> 2;
        if ((unint64_t)((char *)v81 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8)
          v674 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v674 = v673;
        if (v674)
          v674 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v674);
        else
          v675 = 0;
        v1511 = 0;
        v1512 = v674 + 8;
        v1513 = v674 + 8 * v675;
        *(_QWORD *)(v674 + 8) = v82;
        v83 = (_QWORD *)(v674 + 16);
        do
        {
          *(_QWORD *)(v674 + v1511 * 8) = v78[v1511];
          --v1511;
        }
        while (v1511 != -1);
        v1514 = v2681;
        v2681 = (void *)(v1512 - 8);
        v2683 = (_QWORD *)v1513;
        if (v1514)
          operator delete(v1514);
      }
      else
      {
        v78[1] = v82;
        v83 = v78 + 2;
      }
      v2682 = v83;
      v1515 = (char **)operator new();
      Parallel::Parallel(v1515, (uint64_t)&v2681);
      v1516 = (char *)&v40[v75];
      if (v75 < 2)
      {
        v1518 = 2;
        if ((unint64_t)((8 * v75) >> 2) > 2)
          v1518 = (8 * v75) >> 2;
        if ((unint64_t)(8 * v75) >= 0x7FFFFFFFFFFFFFF8)
          v1519 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1519 = v1518;
        if (v1519)
          v1519 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1519);
        else
          v1520 = 0;
        v1704 = 0;
        v1516 = (char *)(v1519 + 8 * v1520);
        *(_QWORD *)(v1519 + 8) = v1515;
        v1517 = (char ***)(v1519 + 16);
        do
        {
          *(_QWORD *)(v1519 + v1704 * 8) = v40[v1704];
          --v1704;
        }
        while (v1704 != -1);
        v1705 = (uint64_t *)v1519;
        operator delete(v40);
        v40 = v1705;
      }
      else
      {
        v40[1] = (uint64_t)v1515;
        v1517 = (char ***)(v40 + 2);
      }
      v1706 = (*((uint64_t (**)(_QWORD))**(v1517 - 1) + 34))(*(v1517 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1707 = operator new();
      FullLayer<float>::FullLayer(v1707, v1706, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1708 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1710 = v1709;
      *v1708 = v1707;
      v1711 = (char *)&v1708[v1709];
      v2455 = v1711;
      v2453 = v1708;
      v2454 = v1708 + 1;
      v1712 = operator new();
      Direct::Direct(v1712, v1706, v1706, 0);
      if (v1710 < 2)
      {
        v1714 = 2;
        if ((unint64_t)((v1711 - (char *)v1708) >> 2) > 2)
          v1714 = (v1711 - (char *)v1708) >> 2;
        if ((unint64_t)(v1711 - (char *)v1708) >= 0x7FFFFFFFFFFFFFF8)
          v1715 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1715 = v1714;
        if (v1715)
          v1715 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1715);
        else
          v1716 = 0;
        v1871 = 0;
        v1872 = v1715 + 8;
        v1873 = v1715 + 8 * v1716;
        *(_QWORD *)(v1715 + 8) = v1712;
        v1713 = (_QWORD *)(v1715 + 16);
        do
        {
          *(_QWORD *)(v1715 + v1871 * 8) = v1708[v1871];
          --v1871;
        }
        while (v1871 != -1);
        v1874 = v2453;
        v2453 = (void *)(v1872 - 8);
        v2455 = (char *)v1873;
        if (v1874)
          operator delete(v1874);
      }
      else
      {
        v1708[1] = v1712;
        v1713 = v1708 + 2;
      }
      v2454 = v1713;
      v1875 = (char **)operator new();
      Parallel::Parallel(v1875, (uint64_t)&v2453);
      if (v1517 >= (char ***)v1516)
      {
        v1877 = ((char *)v1517 - (char *)v40) >> 3;
        v1878 = v1877 + 1;
        if ((unint64_t)(v1877 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v1878)
          v1878 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v1879 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1879 = v1878;
        if (v1879)
          v1879 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1879);
        else
          v1880 = 0;
        v1956 = (char ***)(v1879 + 8 * v1877);
        v1516 = (char *)(v1879 + 8 * v1880);
        *v1956 = v1875;
        v1876 = v1956 + 1;
        while (v1517 != (char ***)v40)
        {
          v1957 = *--v1517;
          *--v1956 = v1957;
        }
        operator delete(v40);
        v40 = (uint64_t *)v1956;
      }
      else
      {
        *v1517 = v1875;
        v1876 = v1517 + 1;
      }
      v1958 = (*((uint64_t (**)(_QWORD))**(v1876 - 1) + 34))(*(v1876 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1959 = operator new();
      FullLayer<float>::FullLayer(v1959, v1958, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1960 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1962 = v1961;
      *v1960 = v1959;
      v1963 = (char *)&v1960[v1961];
      v2449 = v1963;
      v2447 = v1960;
      v2448 = v1960 + 1;
      v1964 = operator new();
      Direct::Direct(v1964, v1958, v1958, 0);
      if (v1962 < 2)
      {
        v1966 = 2;
        if ((unint64_t)((v1963 - (char *)v1960) >> 2) > 2)
          v1966 = (v1963 - (char *)v1960) >> 2;
        if ((unint64_t)(v1963 - (char *)v1960) >= 0x7FFFFFFFFFFFFFF8)
          v1967 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1967 = v1966;
        if (v1967)
          v1967 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1967);
        else
          v1968 = 0;
        v2061 = 0;
        v2062 = v1967 + 8;
        v2063 = v1967 + 8 * v1968;
        *(_QWORD *)(v1967 + 8) = v1964;
        v1965 = (_QWORD *)(v1967 + 16);
        do
        {
          *(_QWORD *)(v1967 + v2061 * 8) = v1960[v2061];
          --v2061;
        }
        while (v2061 != -1);
        v2064 = v2447;
        v2447 = (void *)(v2062 - 8);
        v2449 = (char *)v2063;
        if (v2064)
          operator delete(v2064);
      }
      else
      {
        v1960[1] = v1964;
        v1965 = v1960 + 2;
      }
      v2448 = v1965;
      v2065 = (char **)operator new();
      Parallel::Parallel(v2065, (uint64_t)&v2447);
      if (v1876 >= (char ***)v1516)
      {
        v2067 = ((char *)v1876 - (char *)v40) >> 3;
        v2068 = v2067 + 1;
        if ((unint64_t)(v2067 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v2068)
          v2068 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v2069 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2069 = v2068;
        if (v2069)
          v2069 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2069);
        else
          v2070 = 0;
        v2078 = (char ***)(v2069 + 8 * v2067);
        v1516 = (char *)(v2069 + 8 * v2070);
        *v2078 = v2065;
        v2066 = (uint64_t *)(v2078 + 1);
        while (v1876 != (char ***)v40)
        {
          v2079 = *--v1876;
          *--v2078 = v2079;
        }
        operator delete(v40);
        v40 = (uint64_t *)v2078;
      }
      else
      {
        *v1876 = v2065;
        v2066 = (uint64_t *)(v1876 + 1);
      }
      v2080 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2066 - 1) + 272))(*(v2066 - 1));
      v2081 = operator new();
      v2082 = *(_DWORD *)(v2366 + 4);
      v2437 = 0;
      v2435 = 0;
      v2436 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2435, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v2081, v2080, v2082, (_DWORD **)&v2435, 0, a2, 1, 0, 0);
      if (v2066 >= (uint64_t *)v1516)
      {
        v2084 = v2066 - v40;
        v2085 = v2084 + 1;
        if ((unint64_t)(v2084 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v2085)
          v2085 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v2086 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2086 = v2085;
        if (v2086)
          v2086 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2086);
        v2087 = (uint64_t *)(v2086 + 8 * v2084);
        *v2087 = v2081;
        v2083 = (uint64_t)(v2087 + 1);
        while (v2066 != v40)
        {
          v2088 = *--v2066;
          *--v2087 = v2088;
        }
        operator delete(v40);
        v40 = v2087;
      }
      else
      {
        *v2066 = v2081;
        v2083 = (uint64_t)(v2066 + 1);
      }
      if (v2435)
      {
        v2436 = v2435;
        operator delete(v2435);
      }
      v2089 = operator new();
      v2433 = 0;
      v2432 = 0;
      v2434 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2432, v40, v2083, (v2083 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v2089, (uint64_t)&v2432);
      if (v2432)
      {
        v2433 = v2432;
        operator delete(v2432);
      }
      v2090 = operator new();
      FullLayer<float>::FullLayer(v2090, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v2091 = (char ***)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2093 = v2092;
      *v2091 = (char **)v2090;
      v2094 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2090 + 272))(v2090);
      v2430 = 0;
      v2429 = 0;
      v2431 = 0;
      v2095 = operator new();
      FullLayer<float>::FullLayer(v2095, v2094, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2096 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2098 = v2097;
      *v2096 = v2095;
      v2099 = (char *)&v2096[v2097];
      v2431 = v2099;
      v2429 = v2096;
      v2430 = v2096 + 1;
      v2100 = operator new();
      Direct::Direct(v2100, v2094, v2094, 0);
      if (v2098 < 2)
      {
        v2102 = 2;
        if ((unint64_t)((v2099 - (char *)v2096) >> 2) > 2)
          v2102 = (v2099 - (char *)v2096) >> 2;
        if ((unint64_t)(v2099 - (char *)v2096) >= 0x7FFFFFFFFFFFFFF8)
          v2103 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2103 = v2102;
        if (v2103)
          v2103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2103);
        else
          v2104 = 0;
        v2264 = 0;
        v2265 = v2103 + 8;
        v2266 = v2103 + 8 * v2104;
        *(_QWORD *)(v2103 + 8) = v2100;
        v2101 = (_QWORD *)(v2103 + 16);
        do
        {
          *(_QWORD *)(v2103 + v2264 * 8) = v2096[v2264];
          --v2264;
        }
        while (v2264 != -1);
        v2267 = v2429;
        v2429 = (void *)(v2265 - 8);
        v2431 = (char *)v2266;
        if (v2267)
          operator delete(v2267);
      }
      else
      {
        v2096[1] = v2100;
        v2101 = v2096 + 2;
      }
      v2430 = v2101;
      v2268 = (char **)operator new();
      Parallel::Parallel(v2268, (uint64_t)&v2429);
      v2269 = (char *)&v2091[v2093];
      if (v2093 < 2)
      {
        v2271 = 2;
        if ((unint64_t)((8 * v2093) >> 2) > 2)
          v2271 = (8 * v2093) >> 2;
        if ((unint64_t)(8 * v2093) >= 0x7FFFFFFFFFFFFFF8)
          v2272 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2272 = v2271;
        if (v2272)
          v2272 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2272);
        else
          v2273 = 0;
        v2274 = 0;
        v2269 = (char *)(v2272 + 8 * v2273);
        *(_QWORD *)(v2272 + 8) = v2268;
        v2270 = (char ***)(v2272 + 16);
        do
        {
          *(_QWORD *)(v2272 + v2274 * 8) = v2091[v2274];
          --v2274;
        }
        while (v2274 != -1);
        v2275 = (char ***)v2272;
        operator delete(v2091);
        v2091 = v2275;
      }
      else
      {
        v2091[1] = v2268;
        v2270 = v2091 + 2;
      }
      v2276 = (*((uint64_t (**)(_QWORD))**(v2270 - 1) + 34))(*(v2270 - 1));
      v2427 = 0;
      v2426 = 0;
      v2428 = 0;
      v2277 = operator new();
      FullLayer<float>::FullLayer(v2277, v2276, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2278 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2280 = v2279;
      v2356 = (std::vector<int> *)v2089;
      *v2278 = v2277;
      v2281 = (char *)&v2278[v2279];
      v2428 = v2281;
      v2426 = v2278;
      v2427 = v2278 + 1;
      v2282 = operator new();
      Direct::Direct(v2282, v2276, v2276, 0);
      if (v2280 < 2)
      {
        v2284 = 2;
        if ((unint64_t)((v2281 - (char *)v2278) >> 2) > 2)
          v2284 = (v2281 - (char *)v2278) >> 2;
        if ((unint64_t)(v2281 - (char *)v2278) >= 0x7FFFFFFFFFFFFFF8)
          v2285 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2285 = v2284;
        if (v2285)
          v2285 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2285);
        else
          v2286 = 0;
        v2287 = 0;
        v2288 = v2285 + 8;
        v2289 = v2285 + 8 * v2286;
        *(_QWORD *)(v2285 + 8) = v2282;
        v2283 = (_QWORD *)(v2285 + 16);
        do
        {
          *(_QWORD *)(v2285 + v2287 * 8) = v2278[v2287];
          --v2287;
        }
        while (v2287 != -1);
        v2290 = v2426;
        v2426 = (void *)(v2288 - 8);
        v2428 = (char *)v2289;
        if (v2290)
          operator delete(v2290);
      }
      else
      {
        v2278[1] = v2282;
        v2283 = v2278 + 2;
      }
      v2427 = v2283;
      v2291 = (char **)operator new();
      Parallel::Parallel(v2291, (uint64_t)&v2426);
      if (v2270 >= (char ***)v2269)
      {
        v2293 = v2270 - v2091;
        v2294 = v2293 + 1;
        if ((unint64_t)(v2293 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2294)
          v2294 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2295 = v2294;
        if (v2295)
          v2295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2295);
        else
          v2296 = 0;
        v2297 = (char ***)(v2295 + 8 * v2293);
        v2269 = (char *)(v2295 + 8 * v2296);
        *v2297 = v2291;
        v2292 = v2297 + 1;
        while (v2270 != v2091)
        {
          v2298 = *--v2270;
          *--v2297 = v2298;
        }
        operator delete(v2091);
        v2091 = v2297;
      }
      else
      {
        *v2270 = v2291;
        v2292 = v2270 + 1;
      }
      v2299 = (*((uint64_t (**)(_QWORD))**(v2292 - 1) + 34))(*(v2292 - 1));
      v2424 = 0;
      v2423 = 0;
      v2425 = 0;
      v2300 = operator new();
      FullLayer<float>::FullLayer(v2300, v2299, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2301 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2303 = v2302;
      *v2301 = v2300;
      v2304 = (char *)&v2301[v2302];
      v2425 = v2304;
      v2423 = v2301;
      v2424 = v2301 + 1;
      v2305 = operator new();
      Direct::Direct(v2305, v2299, v2299, 0);
      if (v2303 < 2)
      {
        v2307 = 2;
        if ((unint64_t)((v2304 - (char *)v2301) >> 2) > 2)
          v2307 = (v2304 - (char *)v2301) >> 2;
        if ((unint64_t)(v2304 - (char *)v2301) >= 0x7FFFFFFFFFFFFFF8)
          v2308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2308 = v2307;
        if (v2308)
          v2308 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2308);
        else
          v2309 = 0;
        v2310 = 0;
        v2311 = v2308 + 8;
        v2312 = v2308 + 8 * v2309;
        *(_QWORD *)(v2308 + 8) = v2305;
        v2306 = (_QWORD *)(v2308 + 16);
        do
        {
          *(_QWORD *)(v2308 + v2310 * 8) = v2301[v2310];
          --v2310;
        }
        while (v2310 != -1);
        v2313 = v2423;
        v2423 = (void *)(v2311 - 8);
        v2425 = (char *)v2312;
        if (v2313)
          operator delete(v2313);
      }
      else
      {
        v2301[1] = v2305;
        v2306 = v2301 + 2;
      }
      v2424 = v2306;
      v2314 = (char **)operator new();
      Parallel::Parallel(v2314, (uint64_t)&v2423);
      if (v2292 >= (char ***)v2269)
      {
        v2316 = v2292 - v2091;
        v2317 = v2316 + 1;
        if ((unint64_t)(v2316 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2317)
          v2317 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2318 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2318 = v2317;
        if (v2318)
          v2318 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2318);
        else
          v2319 = 0;
        v2320 = (char ***)(v2318 + 8 * v2316);
        v2269 = (char *)(v2318 + 8 * v2319);
        *v2320 = v2314;
        v2315 = (uint64_t *)(v2320 + 1);
        while (v2292 != v2091)
        {
          v2321 = *--v2292;
          *--v2320 = v2321;
        }
        operator delete(v2091);
        v2091 = v2320;
      }
      else
      {
        *v2292 = v2314;
        v2315 = (uint64_t *)(v2292 + 1);
      }
      v2322 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2315 - 1) + 272))(*(v2315 - 1));
      v2323 = operator new();
      v2324 = *(_DWORD *)(v2366 + 4);
      v2422 = 0;
      v2420 = 0;
      v2421 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2420, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v2323, v2322, v2324, (_DWORD **)&v2420, 0, a2, 1, 0, 0);
      if (v2315 >= (uint64_t *)v2269)
      {
        v2326 = ((char *)v2315 - (char *)v2091) >> 3;
        v2327 = v2326 + 1;
        if ((unint64_t)(v2326 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2327)
          v2327 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2328 = v2327;
        if (v2328)
          v2328 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2328);
        v2329 = (uint64_t *)(v2328 + 8 * v2326);
        *v2329 = v2323;
        v2325 = (uint64_t)(v2329 + 1);
        while (v2315 != (uint64_t *)v2091)
        {
          v2330 = *--v2315;
          *--v2329 = v2330;
        }
        operator delete(v2091);
        v2091 = (char ***)v2329;
      }
      else
      {
        *v2315 = v2323;
        v2325 = (uint64_t)(v2315 + 1);
      }
      if (v2420)
      {
        v2421 = v2420;
        operator delete(v2420);
      }
      v2331 = operator new();
      v2332 = operator new();
      v2418 = 0;
      v2417 = 0;
      v2419 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2417, v2091, v2325, (v2325 - (uint64_t)v2091) >> 3);
      Stacked::Stacked(v2332, (uint64_t)&v2417);
      Reverse::Reverse(v2331, v2332, *(_DWORD *)(v2366 + 20));
      if (v2417)
      {
        v2418 = v2417;
        operator delete(v2417);
      }
      v2333 = operator new(8uLL);
      *v2333 = v2356;
      v2334 = operator new(0x10uLL);
      v2335 = v2334 + 2;
      *v2334 = *v2333;
      v2334[1] = v2331;
      v2416[0] = v2334;
      v2416[2] = v2334 + 2;
      operator delete(v2333);
      v2416[1] = v2335;
      v2336 = (char **)operator new();
      Parallel::Parallel(v2336, (uint64_t)v2416);
      v2338 = *(char ****)(v2366 + 112);
      v2337 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2338 >= v2337)
      {
        v2340 = *(_QWORD *)(v2366 + 104);
        v2341 = ((uint64_t)v2338 - v2340) >> 3;
        if ((unint64_t)(v2341 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2342 = v2337 - v2340;
        v2343 = v2342 >> 2;
        if (v2342 >> 2 <= (unint64_t)(v2341 + 1))
          v2343 = v2341 + 1;
        if ((unint64_t)v2342 >= 0x7FFFFFFFFFFFFFF8)
          v2344 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2344 = v2343;
        if (v2344)
          v2344 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2344);
        else
          v2345 = 0;
        v2346 = (char ***)(v2344 + 8 * v2341);
        v2347 = v2344 + 8 * v2345;
        *v2346 = v2336;
        v2339 = v2346 + 1;
        v2349 = *(char **)(v2366 + 104);
        v2348 = *(char **)(v2366 + 112);
        if (v2348 == v2349)
        {
          v2351 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2350 = (char **)*((_QWORD *)v2348 - 1);
            v2348 -= 8;
            *--v2346 = v2350;
          }
          while (v2348 != v2349);
          v2351 = (_QWORD *)v2366;
          v2348 = *(char **)(v2366 + 104);
        }
        v2351[13] = v2346;
        v2351[14] = v2339;
        v2351[15] = v2347;
        if (v2348)
          operator delete(v2348);
      }
      else
      {
        *v2338 = v2336;
        v2339 = v2338 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2339;
      if (v2416[0])
        operator delete(v2416[0]);
      if (v2423)
        operator delete(v2423);
      if (v2426)
        operator delete(v2426);
      if (v2429)
        operator delete(v2429);
      if (v2447)
        operator delete(v2447);
      if (v2453)
        operator delete(v2453);
      if (v2681)
        operator delete(v2681);
      if (v2091)
        operator delete(v2091);
      if (!v40)
        goto LABEL_2421;
      goto LABEL_2350;
    case 47:
      v37 = operator new();
      v38 = *(_DWORD *)a1;
      v39 = *(_DWORD *)(a1 + 4);
      v2415 = 0;
      __p = 0;
      v2414 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&__p, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v37, v38, v39, (_DWORD **)&__p, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v42 = v41;
      *v40 = v37;
      if (__p)
      {
        v2414 = __p;
        operator delete(__p);
      }
      v43 = operator new();
      v44 = *(_DWORD *)(a1 + 4);
      v2411 = 0;
      v2412 = 0;
      v2410 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2410, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v43, v44, v44, (_DWORD **)&v2410, 0, a2, 1, 0, 0);
      if (v42 < 2)
      {
        v630 = 2;
        if ((unint64_t)((8 * v42) >> 2) > 2)
          v630 = (8 * v42) >> 2;
        if ((unint64_t)(8 * v42) >= 0x7FFFFFFFFFFFFFF8)
          v631 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v631 = v630;
        if (v631)
          v631 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v631);
        v632 = 0;
        *(_QWORD *)(v631 + 8) = v43;
        v45 = v631 + 16;
        do
        {
          *(_QWORD *)(v631 + v632 * 8) = v40[v632];
          --v632;
        }
        while (v632 != -1);
        v633 = (uint64_t *)v631;
        operator delete(v40);
        v40 = v633;
      }
      else
      {
        v40[1] = v43;
        v45 = (uint64_t)(v40 + 2);
      }
      if (v2410)
      {
        v2411 = v2410;
        operator delete(v2410);
      }
      v634 = operator new();
      v2407 = 0;
      v2408 = 0;
      v2409 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2407, v40, v45, (v45 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v634, (uint64_t)&v2407);
      if (v2407)
      {
        v2408 = v2407;
        operator delete(v2407);
      }
      v635 = operator new();
      v636 = *(_DWORD *)a1;
      v637 = *(_DWORD *)(a1 + 4);
      v2405 = 0;
      v2406 = 0;
      v2404 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2404, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v635, v636, v637, (_DWORD **)&v2404, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v639 = v638;
      *v621 = v635;
      if (v2404)
      {
        v2405 = v2404;
        operator delete(v2404);
      }
      v640 = operator new();
      v641 = *(_DWORD *)(a1 + 4);
      v2402 = 0;
      v2403 = 0;
      v2401 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2401, v2362, (uint64_t)v2361);
      LSTM<float>::LSTM(v640, v641, v641, (_DWORD **)&v2401, 0, a2, 1, 0, 0);
      if (v639 < 2)
      {
        v697 = 2;
        if ((unint64_t)((8 * v639) >> 2) > 2)
          v697 = (8 * v639) >> 2;
        if ((unint64_t)(8 * v639) >= 0x7FFFFFFFFFFFFFF8)
          v698 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v698 = v697;
        if (v698)
          v698 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v698);
        v699 = 0;
        *(_QWORD *)(v698 + 8) = v640;
        v642 = v698 + 16;
        do
        {
          *(_QWORD *)(v698 + v699 * 8) = v621[v699];
          --v699;
        }
        while (v699 != -1);
        v700 = (uint64_t *)v698;
        operator delete(v621);
        v621 = v700;
      }
      else
      {
        v621[1] = v640;
        v642 = (uint64_t)(v621 + 2);
      }
      if (v2401)
      {
        v2402 = v2401;
        operator delete(v2401);
      }
      v701 = operator new();
      v702 = operator new();
      v2398 = 0;
      v2399 = 0;
      v2400 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2398, v621, v642, (v642 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v702, (uint64_t)&v2398);
      Reverse::Reverse(v701, v702, *(_DWORD *)(a1 + 20));
      if (v2398)
      {
        v2399 = v2398;
        operator delete(v2398);
      }
      v703 = operator new(8uLL);
      *v703 = v634;
      v704 = operator new(0x10uLL);
      v705 = v704 + 2;
      *v704 = *v703;
      v704[1] = v701;
      v2681 = v704;
      v2683 = v704 + 2;
      operator delete(v703);
      v2682 = v705;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v706 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v706)
      {
LABEL_2104:
        *v690 = v688;
        v1917 = v690 + 1;
      }
      else
      {
        v707 = *(_QWORD *)(v2366 + 104);
        v708 = ((uint64_t)v690 - v707) >> 3;
        if ((unint64_t)(v708 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v709 = v706 - v707;
        v710 = v709 >> 2;
        if (v709 >> 2 <= (unint64_t)(v708 + 1))
          v710 = v708 + 1;
        if ((unint64_t)v709 >= 0x7FFFFFFFFFFFFFF8)
          v711 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v711 = v710;
        if (v711)
          v711 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v711);
        else
          v712 = 0;
        v2032 = (char ***)(v711 + 8 * v708);
        v2033 = v711 + 8 * v712;
        *v2032 = v688;
        v1917 = v2032 + 1;
        v2037 = *(char **)(v2366 + 104);
        v2034 = *(char **)(v2366 + 112);
        if (v2034 == v2037)
        {
LABEL_2344:
          v2133 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2038 = (char **)*((_QWORD *)v2034 - 1);
            v2034 -= 8;
            *--v2032 = v2038;
          }
          while (v2034 != v2037);
LABEL_2343:
          v2133 = (_QWORD *)v2366;
          v2034 = *(char **)(v2366 + 104);
        }
        v2133[13] = v2032;
        v2133[14] = v1917;
        v2133[15] = v2033;
        if (v2034)
          operator delete(v2034);
      }
      *(_QWORD *)(v2366 + 112) = v1917;
      if (v2681)
        operator delete(v2681);
      operator delete(v621);
LABEL_2350:
      v1324 = v40;
      goto LABEL_2420;
    case 48:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v33 = operator new();
      FullLayer<float>::FullLayer(v33, *(_DWORD *)a1, *(_DWORD *)a1, 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v35 = *(uint64_t **)(a1 + 112);
      v34 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v35 >= v34)
      {
        v541 = *(_QWORD *)(a1 + 104);
        v542 = ((uint64_t)v35 - v541) >> 3;
        if ((unint64_t)(v542 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v543 = v34 - v541;
        v544 = v543 >> 2;
        if (v543 >> 2 <= (unint64_t)(v542 + 1))
          v544 = v542 + 1;
        if ((unint64_t)v543 >= 0x7FFFFFFFFFFFFFF8)
          v545 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v545 = v544;
        if (v545)
          v545 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v545);
        else
          v546 = 0;
        v978 = (uint64_t *)(v545 + 8 * v542);
        v979 = v545 + 8 * v546;
        *v978 = v33;
        v36 = v978 + 1;
        v981 = *(char **)(a1 + 104);
        v980 = *(char **)(a1 + 112);
        if (v980 == v981)
        {
          v983 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v982 = *((_QWORD *)v980 - 1);
            v980 -= 8;
            *--v978 = v982;
          }
          while (v980 != v981);
          v983 = (_QWORD *)a1;
          v980 = *(char **)(a1 + 104);
        }
        v983[13] = v978;
        v983[14] = v36;
        v983[15] = v979;
        if (v980)
          operator delete(v980);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      *(_QWORD *)(a1 + 112) = v36;
      v1054 = operator new();
      BatchNormalization<float>::BatchNormalization(v1054, *(_DWORD *)a1, (__int128 *)a2);
      v1056 = *(uint64_t **)(a1 + 112);
      v1055 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1056 >= v1055)
      {
        v1058 = *(_QWORD *)(a1 + 104);
        v1059 = ((uint64_t)v1056 - v1058) >> 3;
        if ((unint64_t)(v1059 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1060 = v1055 - v1058;
        v1061 = v1060 >> 2;
        if (v1060 >> 2 <= (unint64_t)(v1059 + 1))
          v1061 = v1059 + 1;
        if ((unint64_t)v1060 >= 0x7FFFFFFFFFFFFFF8)
          v1062 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1062 = v1061;
        if (v1062)
          v1062 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1062);
        else
          v1063 = 0;
        v1191 = (uint64_t *)(v1062 + 8 * v1059);
        v1192 = v1062 + 8 * v1063;
        *v1191 = v1054;
        v1057 = v1191 + 1;
        v1194 = *(char **)(a1 + 104);
        v1193 = *(char **)(a1 + 112);
        if (v1193 == v1194)
        {
          v1196 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1195 = *((_QWORD *)v1193 - 1);
            v1193 -= 8;
            *--v1191 = v1195;
          }
          while (v1193 != v1194);
          v1196 = (_QWORD *)a1;
          v1193 = *(char **)(a1 + 104);
        }
        v1196[13] = v1191;
        v1196[14] = v1057;
        v1196[15] = v1192;
        if (v1193)
          operator delete(v1193);
      }
      else
      {
        *v1056 = v1054;
        v1057 = v1056 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1057;
      v1292 = operator new();
      v1293 = *(_DWORD *)a1;
      v1294 = *(_DWORD *)(a1 + 4);
      v2396 = 0;
      v2397 = 0;
      v2395 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2395, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v1292, v1293, v1294, (_DWORD **)&v2395, 0, a2, 1, 0, 0);
      if (v2395)
      {
        v2396 = v2395;
        operator delete(v2395);
      }
      v1295 = operator new();
      v1296 = operator new();
      v1297 = *(_DWORD *)a1;
      v1298 = *(_DWORD *)(a1 + 4);
      v2393 = 0;
      v2394 = 0;
      v2392 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2392, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v1296, v1297, v1298, (_DWORD **)&v2392, 0, a2, 1, 0, 0);
      Reverse::Reverse(v1295, v1296, *(_DWORD *)(a1 + 20));
      if (v2392)
      {
        v2393 = v2392;
        operator delete(v2392);
      }
      v1299 = operator new(8uLL);
      *v1299 = v1292;
      v1300 = operator new(0x10uLL);
      v1301 = v1300 + 2;
      *v1300 = *v1299;
      v1300[1] = v1295;
      v2681 = v1300;
      v2683 = v1300 + 2;
      operator delete(v1299);
      v2682 = v1301;
      v1302 = (char **)operator new();
      Parallel::Parallel(v1302, (uint64_t)&v2681);
      v1304 = *(char ****)(v2366 + 112);
      v1303 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1304 >= v1303)
      {
        v1306 = *(_QWORD *)(v2366 + 104);
        v1307 = ((uint64_t)v1304 - v1306) >> 3;
        if ((unint64_t)(v1307 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1308 = v1303 - v1306;
        v1309 = v1308 >> 2;
        if (v1308 >> 2 <= (unint64_t)(v1307 + 1))
          v1309 = v1307 + 1;
        if ((unint64_t)v1308 >= 0x7FFFFFFFFFFFFFF8)
          v1310 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1310 = v1309;
        if (v1310)
          v1310 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1310);
        else
          v1311 = 0;
        v1865 = (char ***)(v1310 + 8 * v1307);
        v1866 = v1310 + 8 * v1311;
        *v1865 = v1302;
        v1305 = v1865 + 1;
        v1868 = *(char **)(v2366 + 104);
        v1867 = *(char **)(v2366 + 112);
        if (v1867 == v1868)
        {
          v1870 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1869 = (char **)*((_QWORD *)v1867 - 1);
            v1867 -= 8;
            *--v1865 = v1869;
          }
          while (v1867 != v1868);
          v1870 = (_QWORD *)v2366;
          v1867 = *(char **)(v2366 + 104);
        }
        v1870[13] = v1865;
        v1870[14] = v1305;
        v1870[15] = v1866;
        if (v1867)
          operator delete(v1867);
      }
      else
      {
        *v1304 = v1302;
        v1305 = v1304 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1305;
      if (v2681)
        operator delete(v2681);
      v1891 = operator new();
      FullLayer<float>::FullLayer(v1891, 2 * *(_DWORD *)(v2366 + 4), *(_DWORD *)(v2366 + 4), 0, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v1893 = *(uint64_t **)(v2366 + 112);
      v1892 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1893 >= v1892)
      {
        v1895 = *(_QWORD *)(v2366 + 104);
        v1896 = ((uint64_t)v1893 - v1895) >> 3;
        if ((unint64_t)(v1896 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1897 = v1892 - v1895;
        v1898 = v1897 >> 2;
        if (v1897 >> 2 <= (unint64_t)(v1896 + 1))
          v1898 = v1896 + 1;
        if ((unint64_t)v1897 >= 0x7FFFFFFFFFFFFFF8)
          v1899 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1899 = v1898;
        if (v1899)
          v1899 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1899);
        else
          v1900 = 0;
        v1950 = (uint64_t *)(v1899 + 8 * v1896);
        v1951 = v1899 + 8 * v1900;
        *v1950 = v1891;
        v1894 = v1950 + 1;
        v1953 = *(char **)(v2366 + 104);
        v1952 = *(char **)(v2366 + 112);
        if (v1952 == v1953)
        {
          v1955 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1954 = *((_QWORD *)v1952 - 1);
            v1952 -= 8;
            *--v1950 = v1954;
          }
          while (v1952 != v1953);
          v1955 = (_QWORD *)v2366;
          v1952 = *(char **)(v2366 + 104);
        }
        v1955[13] = v1950;
        v1955[14] = v1894;
        v1955[15] = v1951;
        if (v1952)
          operator delete(v1952);
      }
      else
      {
        *v1893 = v1891;
        v1894 = v1893 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1894;
      goto LABEL_2419;
    case 49:
      goto LABEL_12;
    case 50:
    case 52:
      if (v5 == 50)
        v13 = 27;
      else
        v13 = 101;
LABEL_12:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v15 = operator new();
      FullLayer<float>::FullLayer(v15, *(_DWORD *)a1, v13, 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v17 = *(uint64_t **)(a1 + 112);
      v16 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(_QWORD *)(a1 + 104);
        v20 = ((uint64_t)v17 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v21 = v16 - v19;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v23);
        else
          v24 = 0;
        v341 = (uint64_t *)(v23 + 8 * v20);
        v342 = v23 + 8 * v24;
        *v341 = v15;
        v18 = v341 + 1;
        v344 = *(char **)(a1 + 104);
        v343 = *(char **)(a1 + 112);
        if (v343 == v344)
        {
          v346 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v345 = *((_QWORD *)v343 - 1);
            v343 -= 8;
            *--v341 = v345;
          }
          while (v343 != v344);
          v346 = (_QWORD *)a1;
          v343 = *(char **)(a1 + 104);
        }
        v346[13] = v341;
        v346[14] = v18;
        v346[15] = v342;
        if (v343)
          operator delete(v343);
      }
      else
      {
        *v17 = v15;
        v18 = v17 + 1;
      }
      *(_QWORD *)(a1 + 112) = v18;
      v347 = operator new();
      BatchNormalization<float>::BatchNormalization(v347, v13, (__int128 *)a2);
      v349 = *(uint64_t **)(a1 + 112);
      v348 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v349 >= v348)
      {
        v351 = *(_QWORD *)(a1 + 104);
        v352 = ((uint64_t)v349 - v351) >> 3;
        if ((unint64_t)(v352 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v353 = v348 - v351;
        v354 = v353 >> 2;
        if (v353 >> 2 <= (unint64_t)(v352 + 1))
          v354 = v352 + 1;
        if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
          v355 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v355 = v354;
        if (v355)
          v355 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v355);
        else
          v356 = 0;
        v357 = (uint64_t *)(v355 + 8 * v352);
        v358 = v355 + 8 * v356;
        *v357 = v347;
        v350 = v357 + 1;
        v360 = *(char **)(a1 + 104);
        v359 = *(char **)(a1 + 112);
        if (v359 == v360)
        {
          v362 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v361 = *((_QWORD *)v359 - 1);
            v359 -= 8;
            *--v357 = v361;
          }
          while (v359 != v360);
          v362 = (_QWORD *)a1;
          v359 = *(char **)(a1 + 104);
        }
        v362[13] = v357;
        v362[14] = v350;
        v362[15] = v358;
        if (v359)
          operator delete(v359);
      }
      else
      {
        *v349 = v347;
        v350 = v349 + 1;
      }
      *(_QWORD *)(a1 + 112) = v350;
      v363 = operator new();
      v364 = *(_DWORD *)(a1 + 4);
      v2390 = 0;
      v2391 = 0;
      v2389 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2389, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v363, v13, v364, (_DWORD **)&v2389, 0, a2, 1, 0, 0);
      if (v2389)
      {
        v2390 = v2389;
        operator delete(v2389);
      }
      v365 = operator new();
      v366 = operator new();
      v367 = *(_DWORD *)(a1 + 4);
      v2387 = 0;
      v2388 = 0;
      v2386 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2386, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v366, v13, v367, (_DWORD **)&v2386, 0, a2, 1, 0, 0);
      Reverse::Reverse(v365, v366, *(_DWORD *)(a1 + 20));
      if (v2386)
      {
        v2387 = v2386;
        operator delete(v2386);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v368 = operator new(8uLL);
      *v368 = v363;
      v2681 = v368;
      v369 = operator new(0x10uLL);
      v370 = v369 + 2;
      *v369 = *v368;
      v369[1] = v365;
      v2681 = v369;
      v2683 = v369 + 2;
      operator delete(v368);
      v2682 = v370;
      v371 = (char **)operator new();
      Parallel::Parallel(v371, (uint64_t)&v2681);
      v373 = *(char ****)(a1 + 112);
      v372 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v373 >= v372)
      {
        v375 = *(_QWORD *)(a1 + 104);
        v376 = ((uint64_t)v373 - v375) >> 3;
        if ((unint64_t)(v376 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v377 = v372 - v375;
        v378 = v377 >> 2;
        if (v377 >> 2 <= (unint64_t)(v376 + 1))
          v378 = v376 + 1;
        if ((unint64_t)v377 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v378;
        if (v379)
          v379 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v379);
        else
          v380 = 0;
        v381 = (char ***)(v379 + 8 * v376);
        v382 = v379 + 8 * v380;
        *v381 = v371;
        v374 = v381 + 1;
        v384 = *(char **)(a1 + 104);
        v383 = *(char **)(a1 + 112);
        if (v383 == v384)
        {
          v386 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v385 = (char **)*((_QWORD *)v383 - 1);
            v383 -= 8;
            *--v381 = v385;
          }
          while (v383 != v384);
          v386 = (_QWORD *)a1;
          v383 = *(char **)(a1 + 104);
        }
        v386[13] = v381;
        v386[14] = v374;
        v386[15] = v382;
        if (v383)
          operator delete(v383);
      }
      else
      {
        *v373 = v371;
        v374 = v373 + 1;
      }
      *(_QWORD *)(a1 + 112) = v374;
      v387 = operator new();
      FullLayer<float>::FullLayer(v387, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v389 = *(uint64_t **)(a1 + 112);
      v388 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v389 >= v388)
      {
        v391 = *(_QWORD *)(a1 + 104);
        v392 = ((uint64_t)v389 - v391) >> 3;
        if ((unint64_t)(v392 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v393 = v388 - v391;
        v394 = v393 >> 2;
        if (v393 >> 2 <= (unint64_t)(v392 + 1))
          v394 = v392 + 1;
        if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFF8)
          v395 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v395 = v394;
        if (v395)
          v395 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v395);
        else
          v396 = 0;
        v397 = (uint64_t *)(v395 + 8 * v392);
        v398 = v395 + 8 * v396;
        *v397 = v387;
        v390 = v397 + 1;
        v400 = *(char **)(a1 + 104);
        v399 = *(char **)(a1 + 112);
        if (v399 == v400)
        {
          v402 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v401 = *((_QWORD *)v399 - 1);
            v399 -= 8;
            *--v397 = v401;
          }
          while (v399 != v400);
          v402 = (_QWORD *)a1;
          v399 = *(char **)(a1 + 104);
        }
        v402[13] = v397;
        v402[14] = v390;
        v402[15] = v398;
        if (v399)
          operator delete(v399);
      }
      else
      {
        *v389 = v387;
        v390 = v389 + 1;
      }
      *(_QWORD *)(a1 + 112) = v390;
      if (v2681)
        operator delete(v2681);
      v403 = operator new();
      BatchNormalization<float>::BatchNormalization(v403, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v405 = *(uint64_t **)(a1 + 112);
      v404 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v405 >= v404)
      {
        v407 = *(_QWORD *)(a1 + 104);
        v408 = ((uint64_t)v405 - v407) >> 3;
        if ((unint64_t)(v408 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v409 = v404 - v407;
        v410 = v409 >> 2;
        if (v409 >> 2 <= (unint64_t)(v408 + 1))
          v410 = v408 + 1;
        if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFF8)
          v411 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v411 = v410;
        if (v411)
          v411 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v411);
        else
          v412 = 0;
        v413 = (uint64_t *)(v411 + 8 * v408);
        v414 = v411 + 8 * v412;
        *v413 = v403;
        v406 = v413 + 1;
        v416 = *(char **)(a1 + 104);
        v415 = *(char **)(a1 + 112);
        if (v415 == v416)
        {
          v418 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v417 = *((_QWORD *)v415 - 1);
            v415 -= 8;
            *--v413 = v417;
          }
          while (v415 != v416);
          v418 = (_QWORD *)a1;
          v415 = *(char **)(a1 + 104);
        }
        v418[13] = v413;
        v418[14] = v406;
        v418[15] = v414;
        if (v415)
          operator delete(v415);
      }
      else
      {
        *v405 = v403;
        v406 = v405 + 1;
      }
      *(_QWORD *)(a1 + 112) = v406;
      v419 = operator new();
      v420 = *(_DWORD *)(a1 + 4);
      v2384 = 0;
      v2385 = 0;
      v2383 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2383, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v419, v420, v420, (_DWORD **)&v2383, 0, a2, 1, 0, 0);
      if (v2383)
      {
        v2384 = v2383;
        operator delete(v2383);
      }
      v421 = operator new();
      v422 = operator new();
      v423 = *(_DWORD *)(a1 + 4);
      v2381 = 0;
      v2382 = 0;
      v2380 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2380, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v422, v423, v423, (_DWORD **)&v2380, 0, a2, 1, 0, 0);
      Reverse::Reverse(v421, v422, *(_DWORD *)(a1 + 20));
      if (v2380)
      {
        v2381 = v2380;
        operator delete(v2380);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v424 = operator new(8uLL);
      *v424 = v419;
      v2681 = v424;
      v425 = operator new(0x10uLL);
      v426 = v425 + 2;
      *v425 = *v424;
      v425[1] = v421;
      v2681 = v425;
      v2683 = v425 + 2;
      operator delete(v424);
      v2682 = v426;
      v427 = (char **)operator new();
      Parallel::Parallel(v427, (uint64_t)&v2681);
      v429 = *(char ****)(a1 + 112);
      v428 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v429 >= v428)
      {
        v431 = *(_QWORD *)(a1 + 104);
        v432 = ((uint64_t)v429 - v431) >> 3;
        if ((unint64_t)(v432 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v433 = v428 - v431;
        v434 = v433 >> 2;
        if (v433 >> 2 <= (unint64_t)(v432 + 1))
          v434 = v432 + 1;
        if ((unint64_t)v433 >= 0x7FFFFFFFFFFFFFF8)
          v435 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v435 = v434;
        if (v435)
          v435 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v435);
        else
          v436 = 0;
        v437 = (char ***)(v435 + 8 * v432);
        v438 = v435 + 8 * v436;
        *v437 = v427;
        v430 = v437 + 1;
        v440 = *(char **)(a1 + 104);
        v439 = *(char **)(a1 + 112);
        if (v439 == v440)
        {
          v442 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v441 = (char **)*((_QWORD *)v439 - 1);
            v439 -= 8;
            *--v437 = v441;
          }
          while (v439 != v440);
          v442 = (_QWORD *)a1;
          v439 = *(char **)(a1 + 104);
        }
        v442[13] = v437;
        v442[14] = v430;
        v442[15] = v438;
        if (v439)
          operator delete(v439);
      }
      else
      {
        *v429 = v427;
        v430 = v429 + 1;
      }
      *(_QWORD *)(a1 + 112) = v430;
      v443 = operator new();
      FullLayer<float>::FullLayer(v443, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v445 = *(uint64_t **)(a1 + 112);
      v444 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v445 < v444)
        goto LABEL_2385;
      v446 = *(_QWORD *)(a1 + 104);
      v447 = ((uint64_t)v445 - v446) >> 3;
      if ((unint64_t)(v447 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v448 = v444 - v446;
      v449 = v448 >> 2;
      if (v448 >> 2 <= (unint64_t)(v447 + 1))
        v449 = v447 + 1;
      if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFF8)
        v450 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v450 = v449;
      if (v450)
        v450 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v450);
      else
        v451 = 0;
      v452 = (uint64_t *)(v450 + 8 * v447);
      v453 = v450 + 8 * v451;
      *v452 = v443;
      v454 = v452 + 1;
      v456 = *(char **)(a1 + 104);
      v455 = *(char **)(a1 + 112);
      if (v455 == v456)
        goto LABEL_2414;
      do
      {
        v457 = *((_QWORD *)v455 - 1);
        v455 -= 8;
        *--v452 = v457;
      }
      while (v455 != v456);
      goto LABEL_2413;
    case 51:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v25 = operator new();
      FullLayer<float>::FullLayer(v25, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v27 = *(uint64_t **)(a1 + 112);
      v26 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v27 >= v26)
      {
        v535 = *(_QWORD *)(a1 + 104);
        v536 = ((uint64_t)v27 - v535) >> 3;
        if ((unint64_t)(v536 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v537 = v26 - v535;
        v538 = v537 >> 2;
        if (v537 >> 2 <= (unint64_t)(v536 + 1))
          v538 = v536 + 1;
        if ((unint64_t)v537 >= 0x7FFFFFFFFFFFFFF8)
          v539 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v539 = v538;
        if (v539)
          v539 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v539);
        else
          v540 = 0;
        v972 = (uint64_t *)(v539 + 8 * v536);
        v973 = v539 + 8 * v540;
        *v972 = v25;
        v28 = v972 + 1;
        v975 = *(char **)(a1 + 104);
        v974 = *(char **)(a1 + 112);
        if (v974 == v975)
        {
          v977 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v976 = *((_QWORD *)v974 - 1);
            v974 -= 8;
            *--v972 = v976;
          }
          while (v974 != v975);
          v977 = (_QWORD *)a1;
          v974 = *(char **)(a1 + 104);
        }
        v977[13] = v972;
        v977[14] = v28;
        v977[15] = v973;
        if (v974)
          operator delete(v974);
      }
      else
      {
        *v27 = v25;
        v28 = v27 + 1;
      }
      *(_QWORD *)(a1 + 112) = v28;
      v1044 = operator new();
      BatchNormalization<float>::BatchNormalization(v1044, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v1046 = *(uint64_t **)(a1 + 112);
      v1045 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1046 >= v1045)
      {
        v1048 = *(_QWORD *)(a1 + 104);
        v1049 = ((uint64_t)v1046 - v1048) >> 3;
        if ((unint64_t)(v1049 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1050 = v1045 - v1048;
        v1051 = v1050 >> 2;
        if (v1050 >> 2 <= (unint64_t)(v1049 + 1))
          v1051 = v1049 + 1;
        if ((unint64_t)v1050 >= 0x7FFFFFFFFFFFFFF8)
          v1052 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1052 = v1051;
        if (v1052)
          v1052 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1052);
        else
          v1053 = 0;
        v1179 = (uint64_t *)(v1052 + 8 * v1049);
        v1180 = v1052 + 8 * v1053;
        *v1179 = v1044;
        v1047 = v1179 + 1;
        v1182 = *(char **)(a1 + 104);
        v1181 = *(char **)(a1 + 112);
        if (v1181 == v1182)
        {
          v1184 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1183 = *((_QWORD *)v1181 - 1);
            v1181 -= 8;
            *--v1179 = v1183;
          }
          while (v1181 != v1182);
          v1184 = (_QWORD *)a1;
          v1181 = *(char **)(a1 + 104);
        }
        v1184[13] = v1179;
        v1184[14] = v1047;
        v1184[15] = v1180;
        if (v1181)
          operator delete(v1181);
      }
      else
      {
        *v1046 = v1044;
        v1047 = v1046 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1047;
      v1263 = operator new();
      v1264 = *(_DWORD *)(a1 + 4);
      v2378 = 0;
      v2379 = 0;
      v2377 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2377, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v1263, v1264, v1264, (_DWORD **)&v2377, 0, a2, 1, 0, 0);
      if (v2377)
      {
        v2378 = v2377;
        operator delete(v2377);
      }
      v1265 = operator new();
      v1266 = operator new();
      v1267 = *(_DWORD *)(a1 + 4);
      v2375 = 0;
      v2376 = 0;
      v2374 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2374, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v1266, v1267, v1267, (_DWORD **)&v2374, 0, a2, 1, 0, 0);
      Reverse::Reverse(v1265, v1266, *(_DWORD *)(a1 + 20));
      if (v2374)
      {
        v2375 = v2374;
        operator delete(v2374);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v1268 = operator new(8uLL);
      *v1268 = v1263;
      v2681 = v1268;
      v1269 = operator new(0x10uLL);
      v1270 = v1269 + 2;
      *v1269 = *v1268;
      v1269[1] = v1265;
      v2681 = v1269;
      v2683 = v1269 + 2;
      operator delete(v1268);
      v2682 = v1270;
      v1271 = (char **)operator new();
      Parallel::Parallel(v1271, (uint64_t)&v2681);
      v1273 = *(char ****)(a1 + 112);
      v1272 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1273 >= v1272)
      {
        v1275 = *(_QWORD *)(a1 + 104);
        v1276 = ((uint64_t)v1273 - v1275) >> 3;
        if ((unint64_t)(v1276 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1277 = v1272 - v1275;
        v1278 = v1277 >> 2;
        if (v1277 >> 2 <= (unint64_t)(v1276 + 1))
          v1278 = v1276 + 1;
        if ((unint64_t)v1277 >= 0x7FFFFFFFFFFFFFF8)
          v1279 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1279 = v1278;
        if (v1279)
          v1279 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1279);
        else
          v1280 = 0;
        v1859 = (char ***)(v1279 + 8 * v1276);
        v1860 = v1279 + 8 * v1280;
        *v1859 = v1271;
        v1274 = v1859 + 1;
        v1862 = *(char **)(a1 + 104);
        v1861 = *(char **)(a1 + 112);
        if (v1861 == v1862)
        {
          v1864 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1863 = (char **)*((_QWORD *)v1861 - 1);
            v1861 -= 8;
            *--v1859 = v1863;
          }
          while (v1861 != v1862);
          v1864 = (_QWORD *)a1;
          v1861 = *(char **)(a1 + 104);
        }
        v1864[13] = v1859;
        v1864[14] = v1274;
        v1864[15] = v1860;
        if (v1861)
          operator delete(v1861);
      }
      else
      {
        *v1273 = v1271;
        v1274 = v1273 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1274;
      v1881 = operator new();
      FullLayer<float>::FullLayer(v1881, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v1883 = *(uint64_t **)(a1 + 112);
      v1882 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1883 >= v1882)
      {
        v1885 = *(_QWORD *)(a1 + 104);
        v1886 = ((uint64_t)v1883 - v1885) >> 3;
        if ((unint64_t)(v1886 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1887 = v1882 - v1885;
        v1888 = v1887 >> 2;
        if (v1887 >> 2 <= (unint64_t)(v1886 + 1))
          v1888 = v1886 + 1;
        if ((unint64_t)v1887 >= 0x7FFFFFFFFFFFFFF8)
          v1889 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1889 = v1888;
        if (v1889)
          v1889 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1889);
        else
          v1890 = 0;
        v1944 = (uint64_t *)(v1889 + 8 * v1886);
        v1945 = v1889 + 8 * v1890;
        *v1944 = v1881;
        v1884 = v1944 + 1;
        v1947 = *(char **)(a1 + 104);
        v1946 = *(char **)(a1 + 112);
        if (v1946 == v1947)
        {
          v1949 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1948 = *((_QWORD *)v1946 - 1);
            v1946 -= 8;
            *--v1944 = v1948;
          }
          while (v1946 != v1947);
          v1949 = (_QWORD *)a1;
          v1946 = *(char **)(a1 + 104);
        }
        v1949[13] = v1944;
        v1949[14] = v1884;
        v1949[15] = v1945;
        if (v1946)
          operator delete(v1946);
      }
      else
      {
        *v1883 = v1881;
        v1884 = v1883 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1884;
      if (v2681)
        operator delete(v2681);
      v1980 = operator new();
      BatchNormalization<float>::BatchNormalization(v1980, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v1982 = *(uint64_t **)(a1 + 112);
      v1981 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1982 >= v1981)
      {
        v1984 = *(_QWORD *)(a1 + 104);
        v1985 = ((uint64_t)v1982 - v1984) >> 3;
        if ((unint64_t)(v1985 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1986 = v1981 - v1984;
        v1987 = v1986 >> 2;
        if (v1986 >> 2 <= (unint64_t)(v1985 + 1))
          v1987 = v1985 + 1;
        if ((unint64_t)v1986 >= 0x7FFFFFFFFFFFFFF8)
          v1988 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1988 = v1987;
        if (v1988)
          v1988 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1988);
        else
          v1989 = 0;
        v2008 = (uint64_t *)(v1988 + 8 * v1985);
        v2009 = v1988 + 8 * v1989;
        *v2008 = v1980;
        v1983 = v2008 + 1;
        v2011 = *(char **)(a1 + 104);
        v2010 = *(char **)(a1 + 112);
        if (v2010 == v2011)
        {
          v2013 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2012 = *((_QWORD *)v2010 - 1);
            v2010 -= 8;
            *--v2008 = v2012;
          }
          while (v2010 != v2011);
          v2013 = (_QWORD *)a1;
          v2010 = *(char **)(a1 + 104);
        }
        v2013[13] = v2008;
        v2013[14] = v1983;
        v2013[15] = v2009;
        if (v2010)
          operator delete(v2010);
      }
      else
      {
        *v1982 = v1980;
        v1983 = v1982 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1983;
      v2014 = operator new();
      v2015 = *(_DWORD *)(a1 + 4);
      v2372 = 0;
      v2373 = 0;
      v2371 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2371, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v2014, v2015, v2015, (_DWORD **)&v2371, 0, a2, 1, 0, 0);
      if (v2371)
      {
        v2372 = v2371;
        operator delete(v2371);
      }
      v2016 = operator new();
      v2017 = operator new();
      v2018 = *(_DWORD *)(a1 + 4);
      v2369 = 0;
      v2370 = 0;
      v2368 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2368, v14, (uint64_t)v14 + 12);
      LSTM<float>::LSTM(v2017, v2018, v2018, (_DWORD **)&v2368, 0, a2, 1, 0, 0);
      Reverse::Reverse(v2016, v2017, *(_DWORD *)(a1 + 20));
      if (v2368)
      {
        v2369 = v2368;
        operator delete(v2368);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v2019 = operator new(8uLL);
      *v2019 = v2014;
      v2681 = v2019;
      v2020 = operator new(0x10uLL);
      v2021 = v2020 + 2;
      *v2020 = *v2019;
      v2020[1] = v2016;
      v2681 = v2020;
      v2683 = v2020 + 2;
      operator delete(v2019);
      v2682 = v2021;
      v2022 = (char **)operator new();
      Parallel::Parallel(v2022, (uint64_t)&v2681);
      v2024 = *(char ****)(a1 + 112);
      v2023 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v2024 >= v2023)
      {
        v2026 = *(_QWORD *)(a1 + 104);
        v2027 = ((uint64_t)v2024 - v2026) >> 3;
        if ((unint64_t)(v2027 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2028 = v2023 - v2026;
        v2029 = v2028 >> 2;
        if (v2028 >> 2 <= (unint64_t)(v2027 + 1))
          v2029 = v2027 + 1;
        if ((unint64_t)v2028 >= 0x7FFFFFFFFFFFFFF8)
          v2030 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2030 = v2029;
        if (v2030)
          v2030 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2030);
        else
          v2031 = 0;
        v2159 = (char ***)(v2030 + 8 * v2027);
        v2160 = v2030 + 8 * v2031;
        *v2159 = v2022;
        v2025 = v2159 + 1;
        v2162 = *(char **)(a1 + 104);
        v2161 = *(char **)(a1 + 112);
        if (v2161 == v2162)
        {
          v2164 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2163 = (char **)*((_QWORD *)v2161 - 1);
            v2161 -= 8;
            *--v2159 = v2163;
          }
          while (v2161 != v2162);
          v2164 = (_QWORD *)a1;
          v2161 = *(char **)(a1 + 104);
        }
        v2164[13] = v2159;
        v2164[14] = v2025;
        v2164[15] = v2160;
        if (v2161)
          operator delete(v2161);
      }
      else
      {
        *v2024 = v2022;
        v2025 = v2024 + 1;
      }
      *(_QWORD *)(a1 + 112) = v2025;
      v443 = operator new();
      FullLayer<float>::FullLayer(v443, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v445 = *(uint64_t **)(a1 + 112);
      v2165 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v445 >= v2165)
      {
        v2166 = *(_QWORD *)(a1 + 104);
        v2167 = ((uint64_t)v445 - v2166) >> 3;
        if ((unint64_t)(v2167 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2168 = v2165 - v2166;
        v2169 = v2168 >> 2;
        if (v2168 >> 2 <= (unint64_t)(v2167 + 1))
          v2169 = v2167 + 1;
        if ((unint64_t)v2168 >= 0x7FFFFFFFFFFFFFF8)
          v2170 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2170 = v2169;
        if (v2170)
          v2170 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2170);
        else
          v2171 = 0;
        v452 = (uint64_t *)(v2170 + 8 * v2167);
        v453 = v2170 + 8 * v2171;
        *v452 = v443;
        v454 = v452 + 1;
        v2178 = *(char **)(a1 + 104);
        v455 = *(char **)(a1 + 112);
        if (v455 == v2178)
        {
LABEL_2414:
          v2180 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2179 = *((_QWORD *)v455 - 1);
            v455 -= 8;
            *--v452 = v2179;
          }
          while (v455 != v2178);
LABEL_2413:
          v2180 = (_QWORD *)a1;
          v455 = *(char **)(a1 + 104);
        }
        v2180[13] = v452;
        v2180[14] = v454;
        v2180[15] = v453;
        if (v455)
          operator delete(v455);
      }
      else
      {
LABEL_2385:
        *v445 = v443;
        v454 = v445 + 1;
      }
      *(_QWORD *)(a1 + 112) = v454;
      v2071 = v2681;
      if (v2681)
LABEL_2418:
        operator delete(v2071);
LABEL_2419:
      v1324 = v14;
LABEL_2420:
      operator delete(v1324);
LABEL_2421:
      v154 = 1;
LABEL_2422:
      if (*(_QWORD *)(a2 + 56))
        goto LABEL_2423;
      if (*(_BYTE *)(v2366 + 16))
      {
        v2182 = *(_DWORD *)(a3 + 8);
        v2183 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2366 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8));
        v2184 = operator new();
        SoftMax<float>::SoftMax(v2184, v2183, v2182, a2, v154, 0);
        v2185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
        v2187 = v2185;
        *(_QWORD *)v2185 = v2184;
        v2188 = (uint64_t)(v2185 + 8);
        if (*(int *)(a3 + 8) >= 1)
        {
          v2189 = 0;
          v2190 = v2185 + 8;
          v2191 = &v2185[8 * v2186];
          v2192 = a3;
          v2193 = v154;
          do
          {
            v2194 = *(_DWORD *)(*(_QWORD *)(v2192 + 16) + 4 * v2189);
            v2195 = operator new();
            SoftMax<float>::SoftMax(v2195, v2183, v2194, a2, v154, 0);
            if (v2190 >= v2191)
            {
              v2196 = (v2190 - v2187) >> 3;
              v2197 = v2196 + 1;
              if ((unint64_t)(v2196 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if ((v2191 - v2187) >> 2 > v2197)
                v2197 = (v2191 - v2187) >> 2;
              if ((unint64_t)(v2191 - v2187) >= 0x7FFFFFFFFFFFFFF8)
                v2198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v2198 = v2197;
              if (v2198)
                v2198 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2198);
              else
                v2199 = 0;
              v2200 = (uint64_t *)(v2198 + 8 * v2196);
              *v2200 = v2195;
              v2188 = (uint64_t)(v2200 + 1);
              while (v2190 != v2187)
              {
                v2201 = *((_QWORD *)v2190 - 1);
                v2190 -= 8;
                *--v2200 = v2201;
              }
              v2191 = (char *)(v2198 + 8 * v2199);
              if (v2187)
                operator delete(v2187);
              v2187 = (char *)v2200;
              v154 = v2193;
            }
            else
            {
              *(_QWORD *)v2190 = v2195;
              v2188 = (uint64_t)(v2190 + 8);
            }
            ++v2189;
            v2192 = a3;
            v2190 = (char *)v2188;
          }
          while (v2189 < *(int *)(a3 + 8));
        }
        v2202 = operator new();
        v2203 = *(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8);
        *(_OWORD *)(v2202 + 16) = 0u;
        *(_QWORD *)(v2202 + 48) = 0;
        *(_OWORD *)(v2202 + 56) = 0u;
        *(_DWORD *)(v2202 + 72) = 0;
        *(_OWORD *)(v2202 + 96) = 0u;
        *(_OWORD *)(v2202 + 112) = 0u;
        *(_OWORD *)(v2202 + 128) = 0u;
        *(_OWORD *)(v2202 + 144) = 0u;
        *(_OWORD *)(v2202 + 160) = 0u;
        *(_OWORD *)(v2202 + 176) = 0u;
        *(_OWORD *)(v2202 + 192) = 0u;
        *(_OWORD *)(v2202 + 208) = 0u;
        *(_OWORD *)(v2202 + 80) = 0u;
        *(_OWORD *)(v2202 + 248) = 0u;
        *(_OWORD *)(v2202 + 232) = 0u;
        *(_OWORD *)(v2202 + 264) = 0u;
        *(_QWORD *)v2202 = off_1E2D55F20;
        *(_QWORD *)(v2202 + 8) = 0;
        v2204 = (void **)(v2202 + 352);
        *(_OWORD *)(v2202 + 280) = 0u;
        *(_OWORD *)(v2202 + 296) = 0u;
        *(_OWORD *)(v2202 + 312) = 0u;
        *(_OWORD *)(v2202 + 352) = 0u;
        *(_OWORD *)(v2202 + 368) = 0u;
        *(_OWORD *)(v2202 + 384) = 0u;
        *(_OWORD *)(v2202 + 400) = 0u;
        *(_OWORD *)(v2202 + 416) = 0u;
        *(_OWORD *)(v2202 + 432) = 0u;
        *(_OWORD *)(v2202 + 448) = 0u;
        *(_OWORD *)(v2202 + 464) = 0u;
        *(_OWORD *)(v2202 + 480) = 0u;
        *(_QWORD *)(v2202 + 496) = a3;
        *(_QWORD *)(v2202 + 520) = 0;
        *(_OWORD *)(v2202 + 504) = 0u;
        *(_QWORD *)(v2202 + 552) = 0;
        *(_OWORD *)(v2202 + 536) = 0u;
        *(_BYTE *)(v2202 + 41) = 0;
        *(_BYTE *)(v2202 + 529) = v2358;
        *(_OWORD *)(v2202 + 332) = xmmword_191A936E0;
        *(_DWORD *)(v2202 + 328) = v2357;
        *(_BYTE *)(v2202 + 528) = 0;
        std::vector<NeuralNetwork *>::__assign_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>((char *)(v2202 + 80), v2187, v2188, (v2188 - (uint64_t)v2187) >> 3);
        *(_QWORD *)(v2202 + 224) = v2203;
        std::string::basic_string[abi:ne180100]<0>(&v2681, "From constructor");
        ParallelSelector<float>::init(v2202);
        if (SHIBYTE(v2683) < 0)
          operator delete(v2681);
        *(_QWORD *)(v2202 + 264) = *(_QWORD *)(v2202 + 256);
        *(_QWORD *)(v2202 + 240) = *(_QWORD *)(v2202 + 232);
        *(_QWORD *)(v2202 + 360) = *(_QWORD *)(v2202 + 352);
        v2205 = *(_QWORD *)(v2202 + 80);
        if (*(_QWORD *)(v2202 + 88) != v2205)
        {
          v2206 = 0;
          v2207 = (void **)(v2202 + 256);
          do
          {
            v2208 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2205 + 8 * v2206) + 272))(*(_QWORD *)(v2205 + 8 * v2206));
            v2209 = v2208;
            v2211 = *(char **)(v2202 + 264);
            v2210 = *(_QWORD *)(v2202 + 272);
            if ((unint64_t)v2211 >= v2210)
            {
              v2213 = (char *)*v2207;
              v2214 = (v2211 - (_BYTE *)*v2207) >> 2;
              v2215 = v2214 + 1;
              if ((unint64_t)(v2214 + 1) >> 62)
                goto LABEL_2653;
              v2216 = v2210 - (_QWORD)v2213;
              if (v2216 >> 1 > v2215)
                v2215 = v2216 >> 1;
              if ((unint64_t)v2216 >= 0x7FFFFFFFFFFFFFFCLL)
                v2217 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v2217 = v2215;
              if (v2217)
              {
                v2217 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v2217);
                v2213 = *(char **)(v2202 + 256);
                v2211 = *(char **)(v2202 + 264);
              }
              else
              {
                v2218 = 0;
              }
              v2219 = (_DWORD *)(v2217 + 4 * v2214);
              *v2219 = v2209;
              v2212 = v2219 + 1;
              while (v2211 != v2213)
              {
                v2220 = *((_DWORD *)v2211 - 1);
                v2211 -= 4;
                *--v2219 = v2220;
              }
              *(_QWORD *)(v2202 + 256) = v2219;
              *(_QWORD *)(v2202 + 264) = v2212;
              *(_QWORD *)(v2202 + 272) = v2217 + 4 * v2218;
              if (v2213)
                operator delete(v2213);
            }
            else
            {
              *(_DWORD *)v2211 = v2208;
              v2212 = v2211 + 4;
            }
            *(_QWORD *)(v2202 + 264) = v2212;
            if (v2206)
            {
              v2222 = *(char **)(v2202 + 360);
              v2221 = *(_QWORD *)(v2202 + 368);
              if ((unint64_t)v2222 >= v2221)
              {
                v2224 = (char *)*v2204;
                v2225 = (v2222 - (_BYTE *)*v2204) >> 2;
                v2226 = v2225 + 1;
                if ((unint64_t)(v2225 + 1) >> 62)
LABEL_2653:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v2227 = v2221 - (_QWORD)v2224;
                if (v2227 >> 1 > v2226)
                  v2226 = v2227 >> 1;
                if ((unint64_t)v2227 >= 0x7FFFFFFFFFFFFFFCLL)
                  v2228 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v2228 = v2226;
                if (v2228)
                {
                  v2228 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v2228);
                  v2224 = *(char **)(v2202 + 352);
                  v2222 = *(char **)(v2202 + 360);
                }
                else
                {
                  v2229 = 0;
                }
                v2230 = (_DWORD *)(v2228 + 4 * v2225);
                *v2230 = v2206;
                v2223 = v2230 + 1;
                while (v2222 != v2224)
                {
                  v2231 = *((_DWORD *)v2222 - 1);
                  v2222 -= 4;
                  *--v2230 = v2231;
                }
                *(_QWORD *)(v2202 + 352) = v2230;
                *(_QWORD *)(v2202 + 360) = v2223;
                *(_QWORD *)(v2202 + 368) = v2228 + 4 * v2229;
                if (v2224)
                  operator delete(v2224);
              }
              else
              {
                *(_DWORD *)v2222 = v2206;
                v2223 = v2222 + 4;
              }
              *(_QWORD *)(v2202 + 360) = v2223;
            }
            ++v2206;
            v2205 = *(_QWORD *)(v2202 + 80);
          }
          while (v2206 < (*(_QWORD *)(v2202 + 88) - v2205) >> 3);
        }
        std::vector<int>::resize((std::vector<int> *)(v2202 + 376), maxFeatureVectors);
        std::vector<int>::resize((std::vector<int> *)(v2202 + 400), maxFeatureVectors);
        std::vector<int>::resize((std::vector<int> *)(v2202 + 424), maxFeatureVectors);
        std::vector<std::vector<int>>::resize((uint64_t *)(v2202 + 536), (uint64_t)(*(_QWORD *)(v2202 + 88) - *(_QWORD *)(v2202 + 80)) >> 3);
        v2233 = *(uint64_t **)(v2366 + 112);
        v2232 = *(_QWORD *)(v2366 + 120);
        if ((unint64_t)v2233 >= v2232)
        {
          v2240 = *(_QWORD *)(v2366 + 104);
          v2241 = ((uint64_t)v2233 - v2240) >> 3;
          if ((unint64_t)(v2241 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v2242 = v2232 - v2240;
          v2243 = v2242 >> 2;
          if (v2242 >> 2 <= (unint64_t)(v2241 + 1))
            v2243 = v2241 + 1;
          if ((unint64_t)v2242 >= 0x7FFFFFFFFFFFFFF8)
            v2244 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v2244 = v2243;
          if (v2244)
            v2244 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2244);
          else
            v2245 = 0;
          v2252 = (uint64_t *)(v2244 + 8 * v2241);
          v2253 = v2244 + 8 * v2245;
          *v2252 = v2202;
          v2234 = v2252 + 1;
          v2255 = *(char **)(v2366 + 104);
          v2254 = *(char **)(v2366 + 112);
          if (v2254 == v2255)
          {
            v2257 = (_QWORD *)v2366;
          }
          else
          {
            do
            {
              v2256 = *((_QWORD *)v2254 - 1);
              v2254 -= 8;
              *--v2252 = v2256;
            }
            while (v2254 != v2255);
            v2257 = (_QWORD *)v2366;
            v2254 = *(char **)(v2366 + 104);
          }
          v2257[13] = v2252;
          v2257[14] = v2234;
          v2257[15] = v2253;
          if (v2254)
            operator delete(v2254);
        }
        else
        {
          *v2233 = v2202;
          v2234 = v2233 + 1;
        }
        *(_QWORD *)(v2366 + 112) = v2234;
        if (v2187)
          operator delete(v2187);
      }
      else
      {
        v2235 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2366 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8));
        v2236 = operator new();
        SoftMax<float>::SoftMax(v2236, v2235, *(_DWORD *)(v2366 + 8), a2, v154, 0);
        v2238 = *(uint64_t **)(v2366 + 112);
        v2237 = *(_QWORD *)(v2366 + 120);
        if ((unint64_t)v2238 >= v2237)
        {
          v2246 = *(_QWORD *)(v2366 + 104);
          v2247 = ((uint64_t)v2238 - v2246) >> 3;
          if ((unint64_t)(v2247 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v2248 = v2237 - v2246;
          v2249 = v2248 >> 2;
          if (v2248 >> 2 <= (unint64_t)(v2247 + 1))
            v2249 = v2247 + 1;
          if ((unint64_t)v2248 >= 0x7FFFFFFFFFFFFFF8)
            v2250 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v2250 = v2249;
          if (v2250)
            v2250 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2250);
          else
            v2251 = 0;
          v2258 = (uint64_t *)(v2250 + 8 * v2247);
          v2259 = v2250 + 8 * v2251;
          *v2258 = v2236;
          v2239 = v2258 + 1;
          v2261 = *(char **)(v2366 + 104);
          v2260 = *(char **)(v2366 + 112);
          if (v2260 == v2261)
          {
            v2263 = (_QWORD *)v2366;
          }
          else
          {
            do
            {
              v2262 = *((_QWORD *)v2260 - 1);
              v2260 -= 8;
              *--v2258 = v2262;
            }
            while (v2260 != v2261);
            v2263 = (_QWORD *)v2366;
            v2260 = *(char **)(v2366 + 104);
          }
          v2263[13] = v2258;
          v2263[14] = v2239;
          v2263[15] = v2259;
          if (v2260)
            operator delete(v2260);
        }
        else
        {
          *v2238 = v2236;
          v2239 = v2238 + 1;
        }
        *(_QWORD *)(v2366 + 112) = v2239;
      }
LABEL_2423:
      v2181 = operator new();
      memset(v2367, 0, sizeof(v2367));
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v2367, *(const void **)(v2366 + 104), *(_QWORD *)(v2366 + 112), (uint64_t)(*(_QWORD *)(v2366 + 112) - *(_QWORD *)(v2366 + 104)) >> 3);
      Stacked::Stacked(v2181, (uint64_t)v2367);
      *(_QWORD *)(v2366 + 40) = v2181;
      if (v2367[0])
      {
        operator delete(v2367[0]);
        if (!*(_QWORD *)(v2366 + 40))
        {
          v11 = 4;
LABEL_2656:
          exitFramework(v11);
        }
      }
      (*(void (**)(_QWORD))(***(_QWORD ***)(v2366 + 104) + 8))(**(_QWORD **)(v2366 + 104));
      *(_BYTE *)(v2366 + 28) = v2359;
      (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v2366 + 40) + 280))(*(_QWORD *)(v2366 + 40), v2359 != 0);
      *(_QWORD *)(*(_QWORD *)(v2366 + 40) + 32) = *(_QWORD *)(a2 + 16);
      operator delete(v2360);
      operator delete(v2362);
      return;
    default:
      goto LABEL_2656;
  }
}

void sub_191544830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v26;

  MEMORY[0x19401CD90](v20, 0x10B1C40EA042734);
  operator delete(v21);
  if (STACK[0x260])
    operator delete((void *)STACK[0x260]);
  if (STACK[0x278])
    operator delete((void *)STACK[0x278]);
  if (STACK[0x290])
    operator delete((void *)STACK[0x290]);
  if (STACK[0x320])
    operator delete((void *)STACK[0x320]);
  if (STACK[0x350])
    operator delete((void *)STACK[0x350]);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    operator delete(v26);
    if (!v23)
      goto LABEL_15;
  }
  else if (!v23)
  {
LABEL_15:
    if (!v22)
    {
LABEL_19:
      operator delete(a18);
      operator delete(a20);
      _Unwind_Resume(a1);
    }
LABEL_18:
    operator delete(v22);
    goto LABEL_19;
  }
  operator delete(v23);
  if (!v22)
    goto LABEL_19;
  goto LABEL_18;
}

char *std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(_QWORD *a1, const void *a2, uint64_t a3)
{
  char *result;
  char *v7;
  size_t v8;

  result = (char *)operator new(0xCuLL);
  v7 = result;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 12;
  v8 = a3 - (_QWORD)a2;
  if (v8)
    result = (char *)memcpy(result, a2, v8);
  a1[1] = &v7[v8];
  return result;
}

void sub_19154642C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<float>::LSTM(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  _OWORD *v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  float v19;
  float v20;
  double v21;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *__p[2];
  char v50;
  __int128 v51;
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  __int128 v63;
  char v64;
  __int128 v65;
  char v66;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D57FD0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  v14 = (_OWORD *)(a1 + 1640);
  *(_BYTE *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *v14 = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_QWORD *)(a1 + 1704) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1712), 0);
  *(_QWORD *)(a1 + 1776) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1784), 0);
  *(_QWORD *)(a1 + 1848) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1856), 0);
  *(_QWORD *)(a1 + 1920) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1928), 0);
  *(_QWORD *)(a1 + 1992) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2000), 0);
  *(_QWORD *)(a1 + 2064) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2072), 0);
  *(_QWORD *)(a1 + 2136) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2144), 0);
  *(_QWORD *)(a1 + 2208) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2216), 0);
  *(_QWORD *)(a1 + 2280) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2288), 0);
  *(_QWORD *)(a1 + 2352) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2360), 0);
  *(_QWORD *)(a1 + 2424) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2432), 0);
  *(_DWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v15 = 1;
  *(_BYTE *)(a1 + 2692) = 1;
  *(_BYTE *)(a1 + 2672) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2680) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    v15 = *(_DWORD *)(a8 + 28);
    v16 = a7 ^ 1;
  }
  else
  {
    v16 = 1;
  }
  *(_DWORD *)(a1 + 2688) = v15;
  *(_BYTE *)(a1 + 40) = a7;
  v17 = *(unsigned __int8 *)(a6 + 45);
  *(_BYTE *)(a1 + 1696) = v17;
  *(_BYTE *)(a1 + 1697) = *(_BYTE *)(a6 + 46);
  v18 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v18[1];
  *(_DWORD *)(a1 + 744) = v18[2];
  if (!a7)
    v16 = 0;
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2672) = 1;
    v17 = *(unsigned __int8 *)(a1 + 1696);
  }
  v19 = *(float *)(a6 + 16);
  v20 = *(float *)(a6 + 20);
  v21 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v19;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_QWORD *)(a1 + 1632) = 0;
  if (!v17)
  {
    v23 = (uint64_t *)(a1 + 1552);
    v24 = *(_DWORD *)(a6 + 32);
    if (v24 == 2)
    {
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI");
      EstimatorAdaMax<float>::EstimatorAdaMax(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *v23 = v34;
      if (v50 < 0)
        operator delete(__p[0]);
      v35 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v35, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1568) = v35;
      if (v50 < 0)
        operator delete(__p[0]);
      v36 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF");
      EstimatorAdaMax<float>::EstimatorAdaMax(v36, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1560) = v36;
      if (v50 < 0)
        operator delete(__p[0]);
      v37 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI");
      EstimatorAdaMax<float>::EstimatorAdaMax(v37, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1576) = v37;
      if (v50 < 0)
        operator delete(__p[0]);
      v38 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v38, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1584) = v38;
      if (v50 < 0)
        operator delete(__p[0]);
      v39 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v39, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1600) = v39;
      if (v50 < 0)
        operator delete(__p[0]);
      v40 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v40, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1592) = v40;
      if (v50 < 0)
        operator delete(__p[0]);
      v41 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v41, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
    }
    else
    {
      if (v24 != 1)
      {
        if (v24)
          goto LABEL_9;
        v25 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v65, "WGI");
        EstimatorScalar<float>::EstimatorScalar(v25, &v65, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *v23 = v25;
        if (v66 < 0)
          operator delete((void *)v65);
        v26 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v63, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v26, &v63, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1560) = v26;
        if (v64 < 0)
          operator delete((void *)v63);
        v27 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v61, "WGF");
        EstimatorScalar<float>::EstimatorScalar(v27, (__int128 *)v61, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1568) = v27;
        if (v62 < 0)
          operator delete(v61[0]);
        v28 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v59, "WCI");
        EstimatorScalar<float>::EstimatorScalar(v28, (__int128 *)v59, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1576) = v28;
        if (v60 < 0)
          operator delete(v59[0]);
        v29 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v57, "WGI");
        EstimatorScalar<float>::EstimatorScalar(v29, (__int128 *)v57, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1584) = v29;
        if (v58 < 0)
          operator delete(v57[0]);
        v30 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v55, "WGF");
        EstimatorScalar<float>::EstimatorScalar(v30, (__int128 *)v55, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1592) = v30;
        if (v56 < 0)
          operator delete(v55[0]);
        v31 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v53, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v31, (__int128 *)v53, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1600) = v31;
        if (v54 < 0)
          operator delete(v53[0]);
        v32 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v51, "WCI2");
        EstimatorScalar<float>::EstimatorScalar(v32, &v51, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1608) = v32;
        if ((v52 & 0x80000000) == 0)
          goto LABEL_9;
        v33 = (void *)v51;
LABEL_63:
        operator delete(v33);
        goto LABEL_9;
      }
      v42 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI");
      EstimatorADAM<float>::EstimatorADAM(v42, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *v23 = v42;
      if (v50 < 0)
        operator delete(__p[0]);
      v43 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorADAM<float>::EstimatorADAM(v43, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1568) = v43;
      if (v50 < 0)
        operator delete(__p[0]);
      v44 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF");
      EstimatorADAM<float>::EstimatorADAM(v44, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1560) = v44;
      if (v50 < 0)
        operator delete(__p[0]);
      v45 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI");
      EstimatorADAM<float>::EstimatorADAM(v45, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1576) = v45;
      if (v50 < 0)
        operator delete(__p[0]);
      v46 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI2");
      EstimatorADAM<float>::EstimatorADAM(v46, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1584) = v46;
      if (v50 < 0)
        operator delete(__p[0]);
      v47 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO2");
      EstimatorADAM<float>::EstimatorADAM(v47, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1600) = v47;
      if (v50 < 0)
        operator delete(__p[0]);
      v48 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF2");
      EstimatorADAM<float>::EstimatorADAM(v48, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1592) = v48;
      if (v50 < 0)
        operator delete(__p[0]);
      v41 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI2");
      EstimatorADAM<float>::EstimatorADAM(v41, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
    }
    *(_QWORD *)(a1 + 1608) = v41;
    if ((v50 & 0x80000000) == 0)
      goto LABEL_9;
    v33 = __p[0];
    goto LABEL_63;
  }
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, "LSTM alloc, from constructor");
  LSTM<float>::init(a1);
  if (v50 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_19154701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void **v54;
  uint64_t v55;
  uint64_t v56;
  void **v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;

  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v56, 0x10B3C408D47FFFCLL);
  v58 = v54 + 328;
  v59 = v54[331];
  if (v59)
  {
    v54[332] = v59;
    operator delete(v59);
  }
  v60 = *v58;
  if (*v58)
  {
    v54[329] = v60;
    operator delete(v60);
  }
  PTMutex::~PTMutex((PTMutex *)(v54 + 303));
  PTMutex::~PTMutex((PTMutex *)(v54 + 294));
  PTMutex::~PTMutex((PTMutex *)(v54 + 285));
  PTMutex::~PTMutex((PTMutex *)(v54 + 276));
  PTMutex::~PTMutex((PTMutex *)(v54 + 267));
  PTMutex::~PTMutex((PTMutex *)(v54 + 258));
  PTMutex::~PTMutex((PTMutex *)(v54 + 249));
  PTMutex::~PTMutex((PTMutex *)(v54 + 240));
  PTMutex::~PTMutex((PTMutex *)(v54 + 231));
  PTMutex::~PTMutex((PTMutex *)(v54 + 222));
  PTMutex::~PTMutex((PTMutex *)(v54 + 213));
  SparseMatrix<float>::~SparseMatrix(a9);
  SparseMatrix<float>::~SparseMatrix(a10);
  SparseMatrix<float>::~SparseMatrix(v55);
  SparseMatrix<float>::~SparseMatrix(a11);
  v61 = v54[120];
  if (v61)
  {
    v54[121] = v61;
    operator delete(v61);
  }
  v62 = v54[117];
  if (v62)
  {
    v54[118] = v62;
    operator delete(v62);
  }
  v63 = v54[114];
  if (v63)
  {
    v54[115] = v63;
    operator delete(v63);
  }
  v64 = v54[111];
  if (v64)
  {
    v54[112] = v64;
    operator delete(v64);
  }
  v65 = v54[108];
  if (v65)
  {
    v54[109] = v65;
    operator delete(v65);
  }
  v66 = v54[105];
  if (v66)
  {
    v54[106] = v66;
    operator delete(v66);
  }
  v67 = v54[102];
  if (v67)
  {
    v54[103] = v67;
    operator delete(v67);
  }
  v68 = v54[99];
  if (v68)
  {
    v54[100] = v68;
    operator delete(v68);
  }
  v69 = v54[89];
  if (v69)
  {
    v54[90] = v69;
    operator delete(v69);
  }
  v70 = v54[86];
  if (v70)
  {
    v54[87] = v70;
    operator delete(v70);
  }
  v71 = v54[83];
  if (v71)
  {
    v54[84] = v71;
    operator delete(v71);
  }
  v72 = v54[80];
  if (v72)
  {
    v54[81] = v72;
    operator delete(v72);
  }
  v73 = v54[77];
  if (v73)
  {
    v54[78] = v73;
    operator delete(v73);
  }
  v74 = v54[74];
  if (v74)
  {
    v54[75] = v74;
    operator delete(v74);
  }
  v75 = v54[71];
  if (v75)
  {
    v54[72] = v75;
    operator delete(v75);
  }
  v76 = v54[68];
  if (v76)
  {
    v54[69] = v76;
    operator delete(v76);
  }
  v77 = v54[65];
  if (v77)
  {
    v54[66] = v77;
    operator delete(v77);
  }
  v78 = v54[62];
  if (v78)
  {
    v54[63] = v78;
    operator delete(v78);
  }
  v79 = v54[59];
  if (v79)
  {
    v54[60] = v79;
    operator delete(v79);
  }
  v80 = v54[56];
  if (v80)
  {
    v54[57] = v80;
    operator delete(v80);
  }
  v81 = v54[53];
  if (v81)
  {
    v54[54] = v81;
    operator delete(v81);
  }
  v82 = v54[50];
  if (v82)
  {
    v54[51] = v82;
    operator delete(v82);
  }
  v83 = v54[47];
  if (v83)
  {
    v54[48] = v83;
    operator delete(v83);
  }
  v84 = v54[44];
  if (v84)
  {
    v54[45] = v84;
    operator delete(v84);
  }
  a13 = v54 + 26;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v85 = v54[23];
  if (v85)
  {
    v54[24] = v85;
    operator delete(v85);
  }
  v86 = v54[20];
  if (v86)
  {
    v54[21] = v86;
    operator delete(v86);
  }
  v87 = v54[17];
  if (v87)
  {
    v54[18] = v87;
    operator delete(v87);
  }
  v88 = v54[14];
  if (v88)
  {
    v54[15] = v88;
    operator delete(v88);
  }
  v89 = v54[11];
  if (v89)
  {
    v54[12] = v89;
    operator delete(v89);
  }
  v90 = *a12;
  if (*a12)
  {
    v54[9] = v90;
    operator delete(v90);
  }
  *v54 = off_1E2D4D730;
  v91 = v54[1];
  if (v91)
  {
    v54[2] = v91;
    operator delete(v91);
  }
  _Unwind_Resume(a1);
}

uint64_t Reverse::Reverse(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D58490;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 41) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + 40);
  return a1;
}

void sub_191547554(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1E2D4D730;
  v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **Parallel::Parallel(char **a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;

  a1[2] = 0;
  a1[3] = 0;
  a1[6] = 0;
  *a1 = (char *)off_1E2D58C98;
  a1[1] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(a1 + 10, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  *(_OWORD *)(a1 + 27) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  (*((void (**)(char **))*a1 + 24))(a1);
  *((_DWORD *)a1 + 18) = 0;
  v3 = a1[11];
  if (v3 != a1[10])
  {
    v4 = 0;
    v3 = a1[10];
    do
    {
      *((_DWORD *)a1 + 18) += (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v3[8 * v4] + 272))(*(_QWORD *)&v3[8 * v4]);
      ++v4;
      v3 = a1[10];
    }
    while (v4 < (a1[11] - v3) >> 3);
  }
  *((_BYTE *)a1 + 41) = 0;
  if (*(_BYTE *)(*(_QWORD *)v3 + 40))
    *((_BYTE *)a1 + 40) = 1;
  Parallel::init(a1);
  return a1;
}

void sub_1915476B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    v10[7] = v13;
    operator delete(v13);
  }
  *v10 = off_1E2D4D730;
  v14 = (void *)v10[1];
  if (v14)
  {
    v10[2] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<float>::FullLayer(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  float v14;
  float v15;
  double v16;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  void *__p[2];
  char v25;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D58FD0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 112) = a5;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a6 + 68);
  *(_QWORD *)(a1 + 528) = a8;
  if (a8)
    a7 = *(_BYTE *)(a8 + 512);
  *(_BYTE *)(a1 + 40) = a7;
  *(_BYTE *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v25 < 0)
    operator delete(__p[0]);
  v14 = *(float *)(a6 + 16);
  v15 = *(float *)(a6 + 20);
  v16 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v18 = *(_DWORD *)(a6 + 32);
    if (v18 == 2)
    {
      v21 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
      EstimatorAdaMax<float>::EstimatorAdaMax(v21, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14, v15, v16);
    }
    else
    {
      if (v18 != 1)
      {
        if (v18)
          return a1;
        v19 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v22, "FullLayer");
        EstimatorScalar<float>::EstimatorScalar(v19, &v22, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14);
        *(_QWORD *)(a1 + 424) = v19;
        if ((v23 & 0x80000000) == 0)
          return a1;
        v20 = (void *)v22;
LABEL_16:
        operator delete(v20);
        return a1;
      }
      v21 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
      EstimatorADAM<float>::EstimatorADAM(v21, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14, v15, v16);
    }
    *(_QWORD *)(a1 + 424) = v21;
    if ((v25 & 0x80000000) == 0)
      return a1;
    v20 = __p[0];
    goto LABEL_16;
  }
  return a1;
}

void sub_191547A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v22, 0x10B3C408D47FFFCLL);
  PTMutex::~PTMutex((PTMutex *)(v20 + 54));
  v25 = (void *)v20[48];
  if (v25)
  {
    v20[49] = v25;
    operator delete(v25);
  }
  a15 = v20 + 45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  v26 = (void *)v20[42];
  if (v26)
  {
    v20[43] = v26;
    operator delete(v26);
  }
  v27 = (void *)v20[39];
  if (v27)
  {
    v20[40] = v27;
    operator delete(v27);
  }
  v28 = (void *)v20[36];
  if (v28)
  {
    v20[37] = v28;
    operator delete(v28);
  }
  v29 = (void *)v20[33];
  if (v29)
  {
    v20[34] = v29;
    operator delete(v29);
  }
  SparseMatrix<float>::~SparseMatrix(v21);
  v30 = (void *)v20[9];
  if (v30)
  {
    v20[10] = v30;
    operator delete(v30);
  }
  v31 = *v23;
  if (*v23)
  {
    v20[7] = v31;
    operator delete(v31);
  }
  *v20 = off_1E2D4D730;
  v32 = (void *)v20[1];
  if (v32)
  {
    v20[2] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191547BCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Stacked::Stacked(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D58B10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>((_QWORD *)(a1 + 48), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_BYTE *)(a1 + 41) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(**(_QWORD **)a2 + 40);
  return a1;
}

void sub_191547C70(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  *v1 = off_1E2D4D730;
  v5 = (void *)v1[1];
  if (v5)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<float>::RecurrentLayer(uint64_t a1, int a2, int a3, int a4, char a5, char a6, char a7, uint64_t a8)
{
  void *__p[2];
  char v16;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D4DA80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 304), 0);
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 240) = a8;
  *(_BYTE *)(a1 + 40) = a7;
  *(_BYTE *)(a1 + 60) = a5;
  *(_BYTE *)(a1 + 61) = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, __p, 0, -0.44);
  if (v16 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_191547DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a15 < 0)
    operator delete(__p);
  PTMutex::~PTMutex((PTMutex *)(v16 + 6));
  v18 = (void *)v15[34];
  if (v18)
  {
    v15[35] = v18;
    operator delete(v18);
  }
  v19 = *v16;
  if (*v16)
  {
    v15[32] = v19;
    operator delete(v19);
  }
  v20 = (void *)v15[23];
  if (v20)
  {
    v15[24] = v20;
    operator delete(v20);
  }
  v21 = (void *)v15[20];
  if (v21)
  {
    v15[21] = v21;
    operator delete(v21);
  }
  v22 = (void *)v15[17];
  if (v22)
  {
    v15[18] = v22;
    operator delete(v22);
  }
  v23 = (void *)v15[14];
  if (v23)
  {
    v15[15] = v23;
    operator delete(v23);
  }
  v24 = (void *)v15[11];
  if (v24)
  {
    v15[12] = v24;
    operator delete(v24);
  }
  *v15 = off_1E2D4D730;
  v25 = (void *)v15[1];
  if (v25)
  {
    v15[2] = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t Direct::Direct(uint64_t a1, int a2, int a3, int a4)
{
  char **v5;
  char **v6;
  char **v7;
  char **v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D582E0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = (char **)(a1 + 64);
  *(_OWORD *)(a1 + 112) = 0u;
  v6 = (char **)(a1 + 112);
  v7 = (char **)(a1 + 88);
  *(_QWORD *)(a1 + 160) = &off_1E2D58470;
  v8 = (char **)(a1 + 136);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 168), 0);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v9 = (char **)(a1 + 232);
  *(_QWORD *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 44) + 1;
  std::vector<VVector<float>>::resize(v5, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v7, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v6, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v8, maxFeatureVectors);
  if (maxFeatureVectors >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(unsigned int *)(a1 + 60);
      v12 = (void *)operator new[]();
      v13 = v12;
      if ((int)v11 >= 1)
        bzero(v12, 4 * v11);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v10) = v13;
      v15 = *(_QWORD **)(a1 + 240);
      v14 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v15 >= v14)
      {
        v17 = ((char *)v15 - *v9) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v18 = v14 - (_QWORD)*v9;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v20);
        else
          v21 = 0;
        v22 = (_QWORD *)(v20 + 8 * v17);
        *v22 = v13;
        v16 = v22 + 1;
        v24 = *(char **)(a1 + 232);
        v23 = *(char **)(a1 + 240);
        if (v23 != v24)
        {
          do
          {
            v25 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v22 = v25;
          }
          while (v23 != v24);
          v23 = *v9;
        }
        *(_QWORD *)(a1 + 232) = v22;
        *(_QWORD *)(a1 + 240) = v16;
        *(_QWORD *)(a1 + 248) = v20 + 8 * v21;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v15 = v13;
        v16 = v15 + 1;
      }
      *(_QWORD *)(a1 + 240) = v16;
      v26 = *(unsigned int *)(a1 + 60);
      v27 = (void *)operator new[]();
      v28 = v27;
      if ((int)v26 >= 1)
        bzero(v27, 4 * v26);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v10) = v28;
      v30 = *(_QWORD **)(a1 + 240);
      v29 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v30 >= v29)
      {
        v32 = ((char *)v30 - *v9) >> 3;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v33 = v29 - (_QWORD)*v9;
        v34 = v33 >> 2;
        if (v33 >> 2 <= (unint64_t)(v32 + 1))
          v34 = v32 + 1;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v35);
        else
          v36 = 0;
        v37 = (_QWORD *)(v35 + 8 * v32);
        *v37 = v28;
        v31 = v37 + 1;
        v39 = *(char **)(a1 + 232);
        v38 = *(char **)(a1 + 240);
        if (v38 != v39)
        {
          do
          {
            v40 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v37 = v40;
          }
          while (v38 != v39);
          v38 = *v9;
        }
        *(_QWORD *)(a1 + 232) = v37;
        *(_QWORD *)(a1 + 240) = v31;
        *(_QWORD *)(a1 + 248) = v35 + 8 * v36;
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
      }
      *(_QWORD *)(a1 + 240) = v31;
      v41 = *(unsigned int *)(a1 + 48);
      v42 = (void *)operator new[]();
      v43 = v42;
      if ((int)v41 >= 1)
        bzero(v42, 4 * v41);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v10) = v43;
      v45 = *(_QWORD **)(a1 + 240);
      v44 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v45 >= v44)
      {
        v47 = ((char *)v45 - *v9) >> 3;
        if ((unint64_t)(v47 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v48 = v44 - (_QWORD)*v9;
        v49 = v48 >> 2;
        if (v48 >> 2 <= (unint64_t)(v47 + 1))
          v49 = v47 + 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
          v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
        else
          v51 = 0;
        v52 = (_QWORD *)(v50 + 8 * v47);
        *v52 = v43;
        v46 = v52 + 1;
        v54 = *(char **)(a1 + 232);
        v53 = *(char **)(a1 + 240);
        if (v53 != v54)
        {
          do
          {
            v55 = *((_QWORD *)v53 - 1);
            v53 -= 8;
            *--v52 = v55;
          }
          while (v53 != v54);
          v53 = *v9;
        }
        *(_QWORD *)(a1 + 232) = v52;
        *(_QWORD *)(a1 + 240) = v46;
        *(_QWORD *)(a1 + 248) = v50 + 8 * v51;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *v45 = v43;
        v46 = v45 + 1;
      }
      *(_QWORD *)(a1 + 240) = v46;
      v56 = *(unsigned int *)(a1 + 48);
      v57 = (void *)operator new[]();
      v58 = v57;
      if ((int)v56 >= 1)
        bzero(v57, 4 * v56);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v10) = v58;
      v60 = *(_QWORD **)(a1 + 240);
      v59 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v60 >= v59)
      {
        v62 = ((char *)v60 - *v9) >> 3;
        if ((unint64_t)(v62 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v63 = v59 - (_QWORD)*v9;
        v64 = v63 >> 2;
        if (v63 >> 2 <= (unint64_t)(v62 + 1))
          v64 = v62 + 1;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
          v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v65);
        else
          v66 = 0;
        v67 = (_QWORD *)(v65 + 8 * v62);
        *v67 = v58;
        v61 = v67 + 1;
        v69 = *(char **)(a1 + 232);
        v68 = *(char **)(a1 + 240);
        if (v68 != v69)
        {
          do
          {
            v70 = *((_QWORD *)v68 - 1);
            v68 -= 8;
            *--v67 = v70;
          }
          while (v68 != v69);
          v68 = *v9;
        }
        *(_QWORD *)(a1 + 232) = v67;
        *(_QWORD *)(a1 + 240) = v61;
        *(_QWORD *)(a1 + 248) = v65 + 8 * v66;
        if (v68)
          operator delete(v68);
      }
      else
      {
        *v60 = v58;
        v61 = v60 + 1;
      }
      *(_QWORD *)(a1 + 240) = v61;
      ++v10;
    }
    while (v10 < maxFeatureVectors);
  }
  return a1;
}

void sub_1915483A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, PTMutex *a12)
{
  _QWORD *v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v17 = *v16;
  if (*v16)
  {
    v12[18] = v17;
    operator delete(v17);
  }
  v18 = *v15;
  if (*v15)
  {
    v12[15] = v18;
    operator delete(v18);
  }
  v19 = *v14;
  if (*v14)
  {
    v12[12] = v19;
    operator delete(v19);
  }
  v20 = *v13;
  if (*v13)
  {
    v12[9] = v20;
    operator delete(v20);
  }
  *v12 = off_1E2D4D730;
  v21 = (void *)v12[1];
  if (v21)
  {
    v12[2] = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t SoftMax<float>::SoftMax(uint64_t a1, int a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  float v12;
  float v13;
  double v14;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  void *__p[2];
  char v23;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D58FD0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  *(_QWORD *)(a1 + 400) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_QWORD *)a1 = off_1E2D587C0;
  *(_WORD *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 528) = a6;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a4 + 68);
  if (a6)
    a5 = *(_BYTE *)(a6 + 512);
  *(_BYTE *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a4 + 45);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 528) = a6;
  if (a2 < 1 || a3 <= 0)
    exitFramework(34);
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax");
  FullLayer<float>::init(a1, (uint64_t)__p, -0.215);
  if (v23 < 0)
    operator delete(__p[0]);
  v12 = *(float *)(a4 + 16);
  v13 = *(float *)(a4 + 20);
  v14 = *(double *)(a4 + 24);
  *(float *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v16 = *(_DWORD *)(a4 + 32);
    if (v16 == 2)
    {
      v19 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      EstimatorAdaMax<float>::EstimatorAdaMax(v19, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12, v13, v14);
    }
    else
    {
      if (v16 != 1)
      {
        if (v16)
          return a1;
        v17 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v20, "Softmax");
        EstimatorScalar<float>::EstimatorScalar(v17, &v20, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12);
        *(_QWORD *)(a1 + 424) = v17;
        if ((v21 & 0x80000000) == 0)
          return a1;
        v18 = (void *)v20;
LABEL_18:
        operator delete(v18);
        return a1;
      }
      v19 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      EstimatorADAM<float>::EstimatorADAM(v19, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12, v13, v14);
    }
    *(_QWORD *)(a1 + 424) = v19;
    if ((v23 & 0x80000000) == 0)
      return a1;
    v18 = __p[0];
    goto LABEL_18;
  }
  return a1;
}

void sub_191548758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v21, 0x10B3C408D47FFFCLL);
  FullLayer<float>::~FullLayer(v20);
  _Unwind_Resume(a1);
}

uint64_t GRU<float>::GRU(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  int v13;
  int v14;
  _DWORD *v15;
  float v16;
  float v17;
  double v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  char v41;
  __int128 v42;
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  __int128 v52;
  char v53;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1E2D57B38;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_QWORD *)(a1 + 1240) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1248), 0);
  *(_QWORD *)(a1 + 1312) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1320), 0);
  *(_QWORD *)(a1 + 1384) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1392), 0);
  *(_QWORD *)(a1 + 1456) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1464), 0);
  *(_QWORD *)(a1 + 1528) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1536), 0);
  *(_QWORD *)(a1 + 1600) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1608), 0);
  *(_QWORD *)(a1 + 1672) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1680), 0);
  *(_QWORD *)(a1 + 1744) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1752), 0);
  *(_QWORD *)(a1 + 1816) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1824), 0);
  *(_QWORD *)(a1 + 1888) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1896), 0);
  *(_QWORD *)(a1 + 1960) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1968), 0);
  *(_DWORD *)(a1 + 2084) = 0;
  *(_OWORD *)(a1 + 2052) = 0u;
  *(_OWORD *)(a1 + 2068) = 0u;
  *(_OWORD *)(a1 + 2036) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2096) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    v13 = a7 ^ 1;
  }
  else
  {
    v13 = 1;
  }
  *(_BYTE *)(a1 + 40) = a7;
  v14 = *(unsigned __int8 *)(a6 + 45);
  *(_BYTE *)(a1 + 2032) = v14;
  *(_BYTE *)(a1 + 2033) = *(_BYTE *)(a6 + 46);
  v15 = *a4;
  *(_DWORD *)(a1 + 568) = **a4;
  *(_DWORD *)(a1 + 572) = v15[1];
  *(_DWORD *)(a1 + 576) = v15[2];
  if (!a7)
    v13 = 0;
  *(_DWORD *)(a1 + 48) = v13 + *(_DWORD *)(a1 + 44);
  v16 = *(float *)(a6 + 16);
  v17 = *(float *)(a6 + 20);
  v18 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  if (!v14)
  {
    v20 = (uint64_t *)(a1 + 1168);
    v21 = *(_DWORD *)(a6 + 32);
    if (v21 == 2)
    {
      v29 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGR");
      EstimatorAdaMax<float>::EstimatorAdaMax(v29, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *v20 = v29;
      if (v41 < 0)
        operator delete(__p[0]);
      v30 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGZ");
      EstimatorAdaMax<float>::EstimatorAdaMax(v30, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1176) = v30;
      if (v41 < 0)
        operator delete(__p[0]);
      v31 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v31, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1184) = v31;
      if (v41 < 0)
        operator delete(__p[0]);
      v32 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGR");
      EstimatorAdaMax<float>::EstimatorAdaMax(v32, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1192) = v32;
      if (v41 < 0)
        operator delete(__p[0]);
      v33 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGZ");
      EstimatorAdaMax<float>::EstimatorAdaMax(v33, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1200) = v33;
      if (v41 < 0)
        operator delete(__p[0]);
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
    }
    else
    {
      if (v21 != 1)
      {
        if (v21)
          goto LABEL_7;
        v22 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v52, "WGR");
        EstimatorScalar<float>::EstimatorScalar(v22, &v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *v20 = v22;
        if (v53 < 0)
          operator delete((void *)v52);
        v23 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v50, "WGZ");
        EstimatorScalar<float>::EstimatorScalar(v23, (__int128 *)v50, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *(_QWORD *)(a1 + 1176) = v23;
        if (v51 < 0)
          operator delete(v50[0]);
        v24 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v48, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v24, (__int128 *)v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *(_QWORD *)(a1 + 1184) = v24;
        if (v49 < 0)
          operator delete(v48[0]);
        v25 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v46, "RGR");
        EstimatorScalar<float>::EstimatorScalar(v25, (__int128 *)v46, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1192) = v25;
        if (v47 < 0)
          operator delete(v46[0]);
        v26 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v44, "RGZ");
        EstimatorScalar<float>::EstimatorScalar(v26, (__int128 *)v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1200) = v26;
        if (v45 < 0)
          operator delete(v44[0]);
        v27 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v42, "RGO");
        EstimatorScalar<float>::EstimatorScalar(v27, &v42, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1208) = v27;
        if ((v43 & 0x80000000) == 0)
          goto LABEL_7;
        v28 = (void *)v42;
LABEL_49:
        operator delete(v28);
        goto LABEL_7;
      }
      v35 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGR");
      EstimatorADAM<float>::EstimatorADAM(v35, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *v20 = v35;
      if (v41 < 0)
        operator delete(__p[0]);
      v36 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGZ");
      EstimatorADAM<float>::EstimatorADAM(v36, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1176) = v36;
      if (v41 < 0)
        operator delete(__p[0]);
      v37 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorADAM<float>::EstimatorADAM(v37, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1184) = v37;
      if (v41 < 0)
        operator delete(__p[0]);
      v38 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGR");
      EstimatorADAM<float>::EstimatorADAM(v38, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1192) = v38;
      if (v41 < 0)
        operator delete(__p[0]);
      v39 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGZ");
      EstimatorADAM<float>::EstimatorADAM(v39, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1200) = v39;
      if (v41 < 0)
        operator delete(__p[0]);
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGO");
      EstimatorADAM<float>::EstimatorADAM(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
    }
    *(_QWORD *)(a1 + 1208) = v34;
    if ((v41 & 0x80000000) == 0)
      goto LABEL_7;
    v28 = __p[0];
    goto LABEL_49;
  }
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU alloc, from constructor");
  GRU<float>::init(a1);
  if (v41 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_19154923C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  if (a16 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v49, 0x10B3C40C37BAA31);
  v53 = (void *)v46[258];
  if (v53)
  {
    v46[259] = v53;
    operator delete(v53);
  }
  v54 = (void *)v46[255];
  if (v54)
  {
    v46[256] = v54;
    operator delete(v54);
  }
  PTMutex::~PTMutex((PTMutex *)(v46 + 245));
  PTMutex::~PTMutex((PTMutex *)(v46 + 236));
  PTMutex::~PTMutex((PTMutex *)(v46 + 227));
  PTMutex::~PTMutex((PTMutex *)(v46 + 218));
  PTMutex::~PTMutex((PTMutex *)(v46 + 209));
  PTMutex::~PTMutex((PTMutex *)(v46 + 200));
  PTMutex::~PTMutex((PTMutex *)(v46 + 191));
  PTMutex::~PTMutex((PTMutex *)(v46 + 182));
  PTMutex::~PTMutex((PTMutex *)(v46 + 173));
  PTMutex::~PTMutex((PTMutex *)(v46 + 164));
  PTMutex::~PTMutex((PTMutex *)(v51 + 1032));
  SparseMatrix<float>::~SparseMatrix(v48);
  SparseMatrix<float>::~SparseMatrix(v47);
  SparseMatrix<float>::~SparseMatrix(a9);
  v55 = (void *)v46[91];
  if (v55)
  {
    v46[92] = v55;
    operator delete(v55);
  }
  v56 = (void *)v46[88];
  if (v56)
  {
    v46[89] = v56;
    operator delete(v56);
  }
  v57 = (void *)v46[85];
  if (v57)
  {
    v46[86] = v57;
    operator delete(v57);
  }
  v58 = (void *)v46[82];
  if (v58)
  {
    v46[83] = v58;
    operator delete(v58);
  }
  v59 = (void *)v46[79];
  if (v59)
  {
    v46[80] = v59;
    operator delete(v59);
  }
  v60 = (void *)v46[76];
  if (v60)
  {
    v46[77] = v60;
    operator delete(v60);
  }
  v61 = (void *)v46[68];
  if (v61)
  {
    v46[69] = v61;
    operator delete(v61);
  }
  v62 = (void *)v46[65];
  if (v62)
  {
    v46[66] = v62;
    operator delete(v62);
  }
  v63 = (void *)v46[62];
  if (v63)
  {
    v46[63] = v63;
    operator delete(v63);
  }
  v64 = (void *)v46[59];
  if (v64)
  {
    v46[60] = v64;
    operator delete(v64);
  }
  v65 = (void *)v46[56];
  if (v65)
  {
    v46[57] = v65;
    operator delete(v65);
  }
  v66 = *v50;
  if (*v50)
  {
    v46[54] = v66;
    operator delete(v66);
  }
  __p = (void *)v51;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v67 = (void *)v46[23];
  if (v67)
  {
    v46[24] = v67;
    operator delete(v67);
  }
  v68 = (void *)v46[20];
  if (v68)
  {
    v46[21] = v68;
    operator delete(v68);
  }
  v69 = (void *)v46[17];
  if (v69)
  {
    v46[18] = v69;
    operator delete(v69);
  }
  v70 = (void *)v46[14];
  if (v70)
  {
    v46[15] = v70;
    operator delete(v70);
  }
  v71 = (void *)v46[11];
  if (v71)
  {
    v46[12] = v71;
    operator delete(v71);
  }
  v72 = *a10;
  if (*a10)
  {
    v46[9] = v72;
    operator delete(v72);
  }
  *v46 = off_1E2D4D730;
  v73 = (void *)v46[1];
  if (v73)
  {
    v46[2] = v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

uint64_t BatchNormalization<float>::BatchNormalization(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char **v9;
  char **v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D567B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = 925353388;
  v4 = a3[2];
  v5 = a3[3];
  v6 = *((_QWORD *)a3 + 8);
  v8 = *a3;
  v7 = a3[1];
  *(_QWORD *)(a1 + 216) = &off_1E2D58470;
  *(_QWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 168) = 0u;
  v9 = (char **)(a1 + 168);
  v10 = (char **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  v11 = (char **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  std::vector<VVector<float>>::resize(v9, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v10, maxFeatureVectors);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (maxFeatureVectors >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(unsigned int *)(a1 + 44);
      v14 = (void *)operator new[]();
      v15 = v14;
      if ((int)v13 >= 1)
        bzero(v14, 4 * v13);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12) = v15;
      v16 = *(unsigned int *)(a1 + 44);
      v17 = (void *)operator new[]();
      v18 = v17;
      if ((int)v16 >= 1)
        bzero(v17, 4 * v16);
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v12) = v18;
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12);
      v21 = *(_QWORD **)(a1 + 296);
      v20 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v21 >= v20)
      {
        v23 = ((char *)v21 - *v11) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v24 = v20 - (_QWORD)*v11;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26);
        else
          v27 = 0;
        v28 = (_QWORD *)(v26 + 8 * v23);
        *v28 = v19;
        v22 = v28 + 1;
        v30 = *(char **)(a1 + 288);
        v29 = *(char **)(a1 + 296);
        if (v29 != v30)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v31;
          }
          while (v29 != v30);
          v29 = *v11;
        }
        *(_QWORD *)(a1 + 288) = v28;
        *(_QWORD *)(a1 + 296) = v22;
        *(_QWORD *)(a1 + 304) = v26 + 8 * v27;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v21 = v19;
        v22 = v21 + 1;
      }
      *(_QWORD *)(a1 + 296) = v22;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v12);
      v33 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v22 >= v33)
      {
        v35 = ((char *)v22 - *v11) >> 3;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v36 = v33 - (_QWORD)*v11;
        v37 = v36 >> 2;
        if (v36 >> 2 <= (unint64_t)(v35 + 1))
          v37 = v35 + 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        if (v38)
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v38);
        else
          v39 = 0;
        v40 = (_QWORD *)(v38 + 8 * v35);
        *v40 = v32;
        v34 = v40 + 1;
        v42 = *(char **)(a1 + 288);
        v41 = *(char **)(a1 + 296);
        if (v41 != v42)
        {
          do
          {
            v43 = *((_QWORD *)v41 - 1);
            v41 -= 8;
            *--v40 = v43;
          }
          while (v41 != v42);
          v41 = *v11;
        }
        *(_QWORD *)(a1 + 288) = v40;
        *(_QWORD *)(a1 + 296) = v34;
        *(_QWORD *)(a1 + 304) = v38 + 8 * v39;
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v22 = v32;
        v34 = v22 + 1;
      }
      *(_QWORD *)(a1 + 296) = v34;
      ++v12;
    }
    while (v12 < maxFeatureVectors);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  return a1;
}

void sub_191549924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void *v13;
  void *v14;
  void *v15;

  v13 = *a10;
  if (*a10)
  {
    v10[25] = v13;
    operator delete(v13);
  }
  v14 = *v11;
  if (*v11)
  {
    v10[22] = v14;
    operator delete(v14);
  }
  *v10 = off_1E2D4D730;
  v15 = (void *)v10[1];
  if (v15)
  {
    v10[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<NeuralNetwork *>::__assign_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void ParallelSelector<float>::init(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int *v5;
  int *v6;
  int *v7;
  int v9;
  int *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  void *v57;
  void *v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  void *v78;
  void *v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char v116;
  _DWORD v117[2];
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 529);
  v3 = *(_QWORD *)(a1 + 496);
  v4 = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(a1 + 340) = v4;
  v5 = *(int **)(v3 + 16);
  v6 = *(int **)(v3 + 24);
  v7 = v5 + 1;
  if (v5 != v6 && v7 != v6)
  {
    v9 = *v5;
    v10 = v5 + 1;
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = v9 < v12;
      if (v9 <= v12)
        v9 = v11;
      if (v13)
        v5 = v7;
      v7 = v10;
    }
    while (v10 != v6);
  }
  v14 = *v5;
  if (v14 > v4)
    v4 = v14;
  *(_DWORD *)(a1 + 344) = v4;
  v15 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
  v16 = *(_DWORD *)(a1 + 344);
  v117[0] = v15;
  v117[1] = v16;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v18 = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 72) = v17;
  *(_DWORD *)(a1 + 348) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  std::vector<VVector<float>>::resize((char **)(a1 + 104), maxFeatureVectors);
  v19 = maxFeatureVectors;
  if (maxFeatureVectors >= 1)
  {
    v20 = 0;
    do
    {
      v21 = *(unsigned int *)(a1 + 348);
      v22 = (void *)operator new[]();
      v23 = v22;
      if ((int)v21 >= 1)
        bzero(v22, 4 * v21);
      v24 = (_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v20);
      *v24 = v23;
      v26 = *(_QWORD **)(a1 + 288);
      v25 = *(_QWORD *)(a1 + 296);
      if ((unint64_t)v26 >= v25)
      {
        v28 = *(_QWORD *)(a1 + 280);
        v29 = ((uint64_t)v26 - v28) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
LABEL_123:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v30 = v25 - v28;
        v31 = v30 >> 2;
        if (v30 >> 2 <= (unint64_t)(v29 + 1))
          v31 = v29 + 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
          v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v32);
        else
          v33 = 0;
        v34 = (_QWORD *)(v32 + 8 * v29);
        *v34 = v24;
        v27 = v34 + 1;
        v36 = *(char **)(a1 + 280);
        v35 = *(char **)(a1 + 288);
        if (v35 != v36)
        {
          do
          {
            v37 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            *--v34 = v37;
          }
          while (v35 != v36);
          v35 = *(char **)(a1 + 280);
        }
        *(_QWORD *)(a1 + 280) = v34;
        *(_QWORD *)(a1 + 288) = v27;
        *(_QWORD *)(a1 + 296) = v32 + 8 * v33;
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v26 = v24;
        v27 = v26 + 1;
      }
      *(_QWORD *)(a1 + 288) = v27;
      ++v20;
      v19 = maxFeatureVectors;
    }
    while (v20 < maxFeatureVectors);
  }
  if (!v2)
  {
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 504);
    std::vector<VVector<float>>::resize((char **)(a1 + 448), v19);
    std::vector<VVector<float>>::resize((char **)(a1 + 504), maxFeatureVectors);
    if (maxFeatureVectors >= 1)
    {
      v38 = 0;
      v39 = v16 + v15;
      do
      {
        v40 = (void *)operator new[]();
        v41 = v40;
        if (v39 >= 1)
          bzero(v40, 4 * v39);
        v42 = (_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v38);
        *v42 = v41;
        v44 = *(_QWORD **)(a1 + 288);
        v43 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v44 >= v43)
        {
          v46 = *(_QWORD *)(a1 + 280);
          v47 = ((uint64_t)v44 - v46) >> 3;
          if ((unint64_t)(v47 + 1) >> 61)
            goto LABEL_123;
          v48 = v43 - v46;
          v49 = v48 >> 2;
          if (v48 >> 2 <= (unint64_t)(v47 + 1))
            v49 = v47 + 1;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v49;
          if (v50)
            v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
          else
            v51 = 0;
          v52 = (_QWORD *)(v50 + 8 * v47);
          *v52 = v42;
          v45 = v52 + 1;
          v54 = *(char **)(a1 + 280);
          v53 = *(char **)(a1 + 288);
          if (v53 != v54)
          {
            do
            {
              v55 = *((_QWORD *)v53 - 1);
              v53 -= 8;
              *--v52 = v55;
            }
            while (v53 != v54);
            v53 = *(char **)(a1 + 280);
          }
          *(_QWORD *)(a1 + 280) = v52;
          *(_QWORD *)(a1 + 288) = v45;
          *(_QWORD *)(a1 + 296) = v50 + 8 * v51;
          if (v53)
            operator delete(v53);
        }
        else
        {
          *v44 = v42;
          v45 = v44 + 1;
        }
        *(_QWORD *)(a1 + 288) = v45;
        v56 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
        v57 = (void *)operator new[]();
        v58 = v57;
        if (v56 >= 1)
          bzero(v57, 4 * v56);
        v59 = (_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * v38);
        *v59 = v58;
        v61 = *(_QWORD **)(a1 + 288);
        v60 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v61 >= v60)
        {
          v63 = *(_QWORD *)(a1 + 280);
          v64 = ((uint64_t)v61 - v63) >> 3;
          if ((unint64_t)(v64 + 1) >> 61)
            goto LABEL_123;
          v65 = v60 - v63;
          v66 = v65 >> 2;
          if (v65 >> 2 <= (unint64_t)(v64 + 1))
            v66 = v64 + 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v67 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          if (v67)
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
          else
            v68 = 0;
          v69 = (_QWORD *)(v67 + 8 * v64);
          *v69 = v59;
          v62 = v69 + 1;
          v71 = *(char **)(a1 + 280);
          v70 = *(char **)(a1 + 288);
          if (v70 != v71)
          {
            do
            {
              v72 = *((_QWORD *)v70 - 1);
              v70 -= 8;
              *--v69 = v72;
            }
            while (v70 != v71);
            v70 = *(char **)(a1 + 280);
          }
          *(_QWORD *)(a1 + 280) = v69;
          *(_QWORD *)(a1 + 288) = v62;
          *(_QWORD *)(a1 + 296) = v67 + 8 * v68;
          if (v70)
            operator delete(v70);
        }
        else
        {
          *v61 = v59;
          v62 = v61 + 1;
        }
        *(_QWORD *)(a1 + 288) = v62;
        ++v38;
      }
      while (v38 < maxFeatureVectors);
    }
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 200));
    std::vector<std::vector<VVector<float>>>::resize(a1 + 200, (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
    if (*(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80))
    {
      v73 = 0;
      v74 = maxFeatureVectors;
      do
      {
        std::vector<VVector<float>>::resize((char **)(*(_QWORD *)(a1 + 200) + 24 * v73), v74);
        v74 = maxFeatureVectors;
        if (maxFeatureVectors >= 1)
        {
          v75 = 0;
          do
          {
            v76 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v73);
            v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 272))(v76);
            v78 = (void *)operator new[]();
            v79 = v78;
            if (v77 >= 1)
              bzero(v78, 4 * v77);
            v80 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * v73) + 8 * v75);
            *v80 = v79;
            v82 = *(_QWORD **)(a1 + 288);
            v81 = *(_QWORD *)(a1 + 296);
            if ((unint64_t)v82 >= v81)
            {
              v84 = *(_QWORD *)(a1 + 280);
              v85 = ((uint64_t)v82 - v84) >> 3;
              if ((unint64_t)(v85 + 1) >> 61)
                goto LABEL_123;
              v86 = v81 - v84;
              v87 = v86 >> 2;
              if (v86 >> 2 <= (unint64_t)(v85 + 1))
                v87 = v85 + 1;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
                v88 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
                v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v88);
              else
                v89 = 0;
              v90 = (_QWORD *)(v88 + 8 * v85);
              *v90 = v80;
              v83 = v90 + 1;
              v92 = *(char **)(a1 + 280);
              v91 = *(char **)(a1 + 288);
              if (v91 != v92)
              {
                do
                {
                  v93 = *((_QWORD *)v91 - 1);
                  v91 -= 8;
                  *--v90 = v93;
                }
                while (v91 != v92);
                v91 = *(char **)(a1 + 280);
              }
              *(_QWORD *)(a1 + 280) = v90;
              *(_QWORD *)(a1 + 288) = v83;
              *(_QWORD *)(a1 + 296) = v88 + 8 * v89;
              if (v91)
                operator delete(v91);
            }
            else
            {
              *v82 = v80;
              v83 = v82 + 1;
            }
            *(_QWORD *)(a1 + 288) = v83;
            ++v75;
            v74 = maxFeatureVectors;
          }
          while (v75 < maxFeatureVectors);
        }
        ++v73;
      }
      while (v73 < (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
    }
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 472));
    std::vector<std::vector<VVector<float>>>::resize(a1 + 472, 2uLL);
    v94 = 0;
    v95 = 1;
    v96 = maxFeatureVectors;
    do
    {
      v97 = v95;
      std::vector<VVector<float>>::resize((char **)(*(_QWORD *)(a1 + 472) + 24 * v94), v96);
      v96 = maxFeatureVectors;
      if (maxFeatureVectors >= 1)
      {
        v116 = v97;
        v98 = 0;
        v99 = v117[v94];
        do
        {
          v100 = (void *)operator new[]();
          v101 = v100;
          if ((int)v99 >= 1)
            bzero(v100, 4 * v99);
          v102 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 472) + 24 * v94) + 8 * v98);
          *v102 = v101;
          v104 = *(_QWORD **)(a1 + 288);
          v103 = *(_QWORD *)(a1 + 296);
          if ((unint64_t)v104 >= v103)
          {
            v106 = *(_QWORD *)(a1 + 280);
            v107 = ((uint64_t)v104 - v106) >> 3;
            if ((unint64_t)(v107 + 1) >> 61)
              goto LABEL_123;
            v108 = v103 - v106;
            v109 = v108 >> 2;
            if (v108 >> 2 <= (unint64_t)(v107 + 1))
              v109 = v107 + 1;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
              v110 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v110 = v109;
            if (v110)
              v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v110);
            else
              v111 = 0;
            v112 = (_QWORD *)(v110 + 8 * v107);
            *v112 = v102;
            v105 = v112 + 1;
            v114 = *(char **)(a1 + 280);
            v113 = *(char **)(a1 + 288);
            if (v113 != v114)
            {
              do
              {
                v115 = *((_QWORD *)v113 - 1);
                v113 -= 8;
                *--v112 = v115;
              }
              while (v113 != v114);
              v113 = *(char **)(a1 + 280);
            }
            *(_QWORD *)(a1 + 280) = v112;
            *(_QWORD *)(a1 + 288) = v105;
            *(_QWORD *)(a1 + 296) = v110 + 8 * v111;
            if (v113)
              operator delete(v113);
          }
          else
          {
            *v104 = v102;
            v105 = v104 + 1;
          }
          *(_QWORD *)(a1 + 288) = v105;
          ++v98;
          v96 = maxFeatureVectors;
        }
        while (v98 < maxFeatureVectors);
        v97 = v116;
      }
      v95 = 0;
      v94 = 1;
    }
    while ((v97 & 1) != 0);
  }
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a1 + 304);
  std::vector<int>::resize((std::vector<int> *)(a1 + 304), *(int *)(a1 + 340) + 1);
}

void Parallel::~Parallel(Parallel *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void **v17;

  *(_QWORD *)this = off_1E2D58C98;
  v3 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  if (v2 == v3)
  {
    v3 = *((_QWORD *)this + 7);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v3 = *((_QWORD *)this + 6);
        v2 = *((_QWORD *)this + 7);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *((_QWORD *)this + 7) = v3;
  v7 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)this + 11);
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 368))(v9);
        v7 = *((_QWORD *)this + 10);
        v6 = *((_QWORD *)this + 11);
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  v10 = (void *)*((_QWORD *)this + 32);
  if (v10)
  {
    *((_QWORD *)this + 33) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 29);
  if (v11)
  {
    *((_QWORD *)this + 30) = v11;
    operator delete(v11);
  }
  v17 = (void **)((char *)this + 200);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)((char *)this + 176);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)((char *)this + 152);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v12 = (void *)*((_QWORD *)this + 16);
  if (v12)
  {
    *((_QWORD *)this + 17) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 13);
  if (v13)
  {
    *((_QWORD *)this + 14) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 10);
  if (v14)
  {
    *((_QWORD *)this + 11) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 6);
  if (v15)
  {
    *((_QWORD *)this + 7) = v15;
    operator delete(v15);
  }
  *(_QWORD *)this = off_1E2D4D730;
  v16 = (void *)*((_QWORD *)this + 1);
  if (v16)
  {
    *((_QWORD *)this + 2) = v16;
    operator delete(v16);
  }
}

{
  Parallel::~Parallel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t NeuralNetwork::isFirstLayer(NeuralNetwork *this)
{
  return *((unsigned __int8 *)this + 41);
}

uint64_t NeuralNetwork::setFirstLayerFlag(uint64_t this)
{
  *(_BYTE *)(this + 41) = 1;
  return this;
}

void NeuralNetwork::forwardForSingleFeatureVector()
{
  exitFramework(101);
}

uint64_t NeuralNetwork::reverseForward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((v6 & 1) == 0)
  {
    v14 = a6;
    v15 = a1;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    v9 = v8;
    a6 = v14;
    a1 = v15;
    if (v9)
    {
      NeuralNetwork::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE219D18 = 0;
      qword_1EE219D20 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &NeuralNetwork::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a6 = v14;
      a1 = v15;
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &NeuralNetwork::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
}

uint64_t NeuralNetwork::reverseBackward(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
}

uint64_t Parallel::isFirstLayer(Parallel *this)
{
  return (****((uint64_t (*****)(_QWORD))this + 10))(**((_QWORD **)this + 10));
}

uint64_t Parallel::setFirstLayerFlag(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 8))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return this;
}

void Parallel::targets(Parallel *this)
{
  exitFramework(1);
}

void Parallel::inputs(Parallel *this)
{
  exitFramework(1);
}

uint64_t Parallel::outputs(Parallel *this)
{
  return (uint64_t)this + 104;
}

uint64_t Parallel::deltas(Parallel *this)
{
  return (uint64_t)this + 128;
}

uint64_t Parallel::inputDeltas(Parallel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 11) - 8) + 48))(*(_QWORD *)(*((_QWORD *)this + 11) - 8));
}

uint64_t Parallel::weightsAreNaN(Parallel *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *((_QWORD *)this + 10);
  }
  while (v3 < (*((_QWORD *)this + 11) - v1) >> 3);
  return result;
}

uint64_t Parallel::read(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t Parallel::write(uint64_t this, __sFILE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v5)
  {
    v10 = this;
    v11 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, __sFILE *, int *, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 80);
    }
    while (v11 < (*(_QWORD *)(v10 + 88) - v5) >> 3);
  }
  return this;
}

const NeuralNetwork *Parallel::subtractModels(const NeuralNetwork *this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  const NeuralNetwork *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)this;
  if (lpsrc)
  {
    v5 = (uint64_t)this;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    v3 = this;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      this = (const NeuralNetwork *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 80))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(*((_QWORD *)v3 + 10) + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return this;
}

const NeuralNetwork *Parallel::compareModels(const NeuralNetwork *this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  const NeuralNetwork *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)this;
  if (lpsrc)
  {
    v5 = (uint64_t)this;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    v3 = this;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      this = (const NeuralNetwork *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 88))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(*((_QWORD *)v3 + 10) + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return this;
}

void *Parallel::addGradient(void *this, const NeuralNetwork *lpsrc)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t)this;
  if (lpsrc)
  {
    v3 = (uint64_t)this;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (*(_QWORD *)(v2 + 88) != v4)
  {
    v5 = 0;
    do
    {
      this = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 96))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v5));
      ++v5;
      v4 = *(_QWORD *)(v2 + 80);
    }
    while (v5 < (*(_QWORD *)(v2 + 88) - v4) >> 3);
  }
  return this;
}

void *Parallel::applyGradient(void *this, const NeuralNetwork *lpsrc)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t)this;
  if (lpsrc)
  {
    v3 = (uint64_t)this;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (*(_QWORD *)(v2 + 88) != v4)
  {
    v5 = 0;
    do
    {
      this = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 104))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v5));
      ++v5;
      v4 = *(_QWORD *)(v2 + 80);
    }
    while (v5 < (*(_QWORD *)(v2 + 88) - v4) >> 3);
  }
  return this;
}

uint64_t Parallel::clipModel(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return this;
}

uint64_t Parallel::normalizeModel(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return this;
}

uint64_t Parallel::allocInitialState(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 128))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t Parallel::saveState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 136))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t Parallel::restoreState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 144))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t Parallel::clearState(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v3)
  {
    v6 = result;
    v7 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 152))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 80);
    }
    while (v7 < (*(_QWORD *)(v6 + 88) - v3) >> 3);
  }
  return result;
}

uint64_t Parallel::resetForNewBatch(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return this;
}

uint64_t Parallel::getWeightMatrices(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 168))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t Parallel::setWeightMatrices(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 176))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t Parallel::setSpecialBidir(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 184))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return this;
}

uint64_t Parallel::unsetSpecialBidir(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 192))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return this;
}

void Parallel::allocAllBuffers(char **this)
{
  char *v2;
  unint64_t v3;

  Parallel::init(this);
  v2 = this[10];
  if (this[11] != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v2[8 * v3] + 200))(*(_QWORD *)&v2[8 * v3]);
      ++v3;
      v2 = this[10];
    }
    while (v3 < (this[11] - v2) >> 3);
  }
}

_QWORD *Parallel::cleanupAllBuffers(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = this;
  v2 = this[10];
  if (this[11] != v2)
  {
    v3 = 0;
    do
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 208))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = v1[10];
    }
    while (v3 < (v1[11] - v2) >> 3);
  }
  v5 = v1[6];
  v4 = v1[7];
  if (v4 == v5)
  {
    v5 = v1[7];
  }
  else
  {
    v6 = 0;
    do
    {
      this = *(_QWORD **)(v5 + 8 * v6);
      if (this)
      {
        this = (_QWORD *)MEMORY[0x19401CD78](this, 0x1000C8052888210);
        v5 = v1[6];
        v4 = v1[7];
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  v1[7] = v5;
  return this;
}

uint64_t Parallel::ninputs(Parallel *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 10) + 264))(**((_QWORD **)this + 10));
}

uint64_t Parallel::noutputs(Parallel *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) == v1)
    return 0;
  v3 = 0;
  LODWORD(v4) = 0;
  do
  {
    v4 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 272))(*(_QWORD *)(v1 + 8 * v3))
       + v4;
    ++v3;
    v1 = *((_QWORD *)this + 10);
  }
  while (v3 < (*((_QWORD *)this + 11) - v1) >> 3);
  return v4;
}

uint64_t Parallel::setPredictionMode(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return this;
}

uint64_t Parallel::update(uint64_t this, float a2, float a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) != v3)
  {
    v6 = this;
    v7 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, float, float))(**(_QWORD **)(v3 + 8 * v7) + 288))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 80);
    }
    while (v7 < (*(_QWORD *)(v6 + 88) - v3) >> 3);
  }
  return this;
}

void Parallel::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;
  void *v16[3];

  memset(v16, 0, sizeof(v16));
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v16, *(const void **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 256), *(_QWORD *)(a1 + 264), (uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 2);
  Parallel::split(a1, (uint64_t *)v16, (_QWORD *)(a1 + 176), a4, &__p, a5);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v16[0])
    operator delete(v16[0]);
  v10 = ((*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3) - 1;
  if (v10 >= 0)
  {
    v11 = 8 * (((*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3) - 1);
    v12 = 24 * v10;
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + v11)
                                                                         + 296))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + v11), a2, a3, *(_QWORD *)(a1 + 176) + v12, a5);
      v11 -= 8;
      v12 -= 24;
    }
    while (v11 != -8);
  }
}

void sub_19154B128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void Parallel::forward(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *p_p;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  float **v33;
  int v34;
  char *v35;
  uint64_t v36;
  int v37;
  char *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  void **v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  std::string::size_type v58;
  uint64_t v59;
  int v60;
  std::string *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t **v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  std::string *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  std::string::size_type v90;
  void *v91;
  uint64_t v92;
  void *v95;
  unint64_t v97;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103[3];
  void *v104[2];
  unsigned __int8 v105;
  void *__p;
  std::string::size_type v107;
  unsigned __int8 v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string v115;
  void *v116[2];
  std::string::size_type v117;
  uint64_t v118;
  void *v119;
  char v120;
  uint64_t v121;

  v9 = (uint64_t)a1;
  LODWORD(v10) = a4 & 0xFFFFFF;
  v11 = (_QWORD **)a1[10];
  v12 = a1[11];
  if ((_QWORD **)v12 == v11)
  {
    v62 = 0;
    v11 = (_QWORD **)a1[11];
  }
  else
  {
    v13 = 0;
    v99 = a4 & 0xFFFFFF;
    do
    {
      v14 = *(_QWORD *)(v9 + 224);
      v15 = a2;
      if (v14)
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
        v11 = *(_QWORD ***)(v9 + 80);
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v11[v13] + 304))(v11[v13], v15, a3, v99, a5, a6, a7);
      i2s(&v110);
      v16 = std::string::insert(&v110, 0, "Parallel: nFeatureVectors = ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::string::append(&v111, " network = ");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      i2s(&v109);
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v109;
      else
        v20 = (std::string *)v109.__r_.__value_.__r.__words[0];
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
      else
        size = v109.__r_.__value_.__l.__size_;
      v22 = std::string::append(&v112, (const std::string::value_type *)v20, size);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v113, " first output[");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      i2s(&__p);
      if ((v108 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v108 & 0x80u) == 0)
        v27 = v108;
      else
        v27 = v107;
      v28 = std::string::append(&v114, p_p, v27);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v115, "]");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v117 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)v116 = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      if ((char)v108 < 0)
        operator delete(__p);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      v32 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + 8 * v13);
      v33 = *(float ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
      v34 = SHIBYTE(v117);
      v35 = (char *)v116[0];
      v36 = *(_QWORD *)(a1[10] + 8 * v13);
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 272))(v36);
      if (v34 >= 0)
        v38 = (char *)v116;
      else
        v38 = v35;
      VVector<float>::print(v33, v38, v37);
      i2s(&v109);
      v39 = std::string::insert(&v109, 0, "Parallel: nFeatureVectors = ");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append(&v110, " network = ");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      i2s(&__p);
      if ((v108 & 0x80u) == 0)
        v43 = (const std::string::value_type *)&__p;
      else
        v43 = (const std::string::value_type *)__p;
      if ((v108 & 0x80u) == 0)
        v44 = v108;
      else
        v44 = v107;
      v45 = std::string::append(&v111, v43, v44);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = std::string::append(&v112, " last output[");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      i2s(v104);
      if ((v105 & 0x80u) == 0)
        v49 = v104;
      else
        v49 = (void **)v104[0];
      if ((v105 & 0x80u) == 0)
        v50 = v105;
      else
        v50 = (std::string::size_type)v104[1];
      v51 = std::string::append(&v113, (const std::string::value_type *)v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v53 = std::string::append(&v114, "]");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      if ((char)v105 < 0)
        operator delete(v104[0]);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if ((char)v108 < 0)
        operator delete(__p);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v55 = *(_QWORD *)(a1[10] + 8 * v13);
      v56 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55);
      v57 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
      v58 = v115.__r_.__value_.__r.__words[0];
      v59 = *(_QWORD *)(a1[10] + 8 * v13);
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 272))(v59);
      if (v57 >= 0)
        v61 = &v115;
      else
        v61 = (std::string *)v58;
      VVector<float>::print((float **)(v56 + 8 * ((int)v10 - 1)), (char *)v61, v60);
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      v9 = (uint64_t)a1;
      if (SHIBYTE(v117) < 0)
        operator delete(v116[0]);
      ++v13;
      v11 = (_QWORD **)a1[10];
      v12 = a1[11];
      v62 = (v12 - (uint64_t)v11) >> 3;
    }
    while (v62 > v13);
    if ((_QWORD **)v12 == v11)
    {
      v11 = (_QWORD **)a1[11];
      LODWORD(v10) = v99;
    }
    else
    {
      v63 = 0;
      v95 = (void *)*MEMORY[0x1E0DE4F50];
      v91 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
      v92 = MEMORY[0x1E0DE4FB8] + 16;
      v90 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v10 = v99;
      do
      {
        v64 = (uint64_t **)(*(uint64_t (**)(_QWORD *))(*v11[v63] + 32))(v11[v63]);
        v65 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v9 + 80) + 272))(**(_QWORD **)(v9 + 80));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v116);
        memset(&v115, 0, sizeof(v115));
        if ((_DWORD)v10)
        {
          v97 = v63;
          v66 = 0;
          v67 = 0;
          do
          {
            std::ios_base::clear((std::ios_base *)((char *)v116 + *((_QWORD *)v116[0] - 3)), 0);
            std::ostream::operator<<();
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v116, (uint64_t)&v115);
            std::string::basic_string[abi:ne180100]<0>(&v111, "IN (outputOfASubNetwork) Parallel output from LSTM::output");
            std::string::basic_string[abi:ne180100]<0>(&v110, " [");
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &v110;
            else
              v68 = (std::string *)v110.__r_.__value_.__r.__words[0];
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v69 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
            else
              v69 = v110.__r_.__value_.__l.__size_;
            v70 = std::string::append(&v111, (const std::string::value_type *)v68, v69);
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v112.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v115;
            else
              v72 = (std::string *)v115.__r_.__value_.__r.__words[0];
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v73 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
            else
              v73 = v115.__r_.__value_.__l.__size_;
            v74 = std::string::append(&v112, (const std::string::value_type *)v72, v73);
            v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            v113.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v109, "] ");
            if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v76 = &v109;
            else
              v76 = (std::string *)v109.__r_.__value_.__r.__words[0];
            if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
            else
              v77 = v109.__r_.__value_.__l.__size_;
            v78 = std::string::append(&v113, (const std::string::value_type *)v76, v77);
            v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
            v114.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v79;
            v78->__r_.__value_.__l.__size_ = 0;
            v78->__r_.__value_.__r.__words[2] = 0;
            v78->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v113.__r_.__value_.__l.__data_);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v112.__r_.__value_.__l.__data_);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v80 = &v114;
            else
              v80 = (std::string *)v114.__r_.__value_.__r.__words[0];
            VVector<float>::print((float **)&(*v64)[v66], (char *)v80, v65);
            if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v114.__r_.__value_.__l.__data_);
            ++v67;
            ++v66;
          }
          while (v99 != v67);
          v10 = v99;
          v63 = v97;
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
        }
        v116[0] = v95;
        *(void **)((char *)v116 + *((_QWORD *)v95 - 3)) = v91;
        v117 = v90;
        v118 = v92;
        if (v120 < 0)
          operator delete(v119);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x19401CCD0](&v121);
        v9 = (uint64_t)a1;
        if ((_DWORD)v10)
        {
          v81 = *v64;
          v82 = *(_QWORD **)(a1[19] + 24 * v63);
          v83 = v10;
          do
          {
            v84 = *v81++;
            *v82++ = v84;
            --v83;
          }
          while (v83);
        }
        ++v63;
        v11 = (_QWORD **)a1[10];
        v12 = a1[11];
        v62 = (v12 - (uint64_t)v11) >> 3;
      }
      while (v62 > v63);
    }
  }
  memset(v103, 0, sizeof(v103));
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v103, v11, v12, v62);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v100, *(const void **)(v9 + 256), *(_QWORD *)(v9 + 264), (uint64_t)(*(_QWORD *)(v9 + 264) - *(_QWORD *)(v9 + 256)) >> 2);
  Parallel::merge(v9, (uint64_t *)(v9 + 104), (_QWORD *)(v9 + 152), &v100, v10);
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v103[0])
    operator delete(v103[0]);
  v85 = *(int **)(v9 + 256);
  v86 = 0;
  v87 = *(_QWORD *)(v9 + 264) - (_QWORD)v85;
  if (v87)
  {
    v88 = v87 >> 2;
    if (v88 <= 1)
      v88 = 1;
    do
    {
      v89 = *v85++;
      v86 += v89;
      --v88;
    }
    while (v88);
  }
  VVector<float>::print(*(float ***)(v9 + 104), "Parallel:: forward: merged output = ", v86);
}

void sub_19154BA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void *Parallel::setMaster(Parallel *this, NeuralNetwork *lpsrc)
{
  void *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!result)
    __cxa_bad_cast();
  v4 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) != v4)
  {
    v5 = (uint64_t)result;
    v6 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v6) + 328))(*(_QWORD *)(v4 + 8 * v6), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v6));
      ++v6;
      v4 = *((_QWORD *)this + 10);
    }
    while (v6 < (*((_QWORD *)this + 11) - v4) >> 3);
  }
  return result;
}

void *Parallel::updateFrom(Parallel *this, NeuralNetwork *lpsrc, float a3, float a4, uint64_t a5)
{
  void *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (!result)
    __cxa_bad_cast();
  v10 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) != v10)
  {
    v11 = (uint64_t)result;
    v12 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, float, float))(**(_QWORD **)(v10 + 8 * v12)
                                                                                        + 336))(*(_QWORD *)(v10 + 8 * v12), *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v12), a5, a3, a4);
      ++v12;
      v10 = *((_QWORD *)this + 10);
    }
    while (v12 < (*((_QWORD *)this + 11) - v10) >> 3);
  }
  return result;
}

void Parallel::computeError(uint64_t a1, float ***a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  float **v22;
  int v23;
  float **v24;
  int v25;
  float **v26;
  int v27;
  float **v28;
  int v29;
  _QWORD **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38[3];
  void *__p;
  void *v40;
  uint64_t v41;
  void *v42[3];

  v12 = *(int **)(a1 + 256);
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 264) - (_QWORD)v12;
  if (v14)
  {
    v15 = v14 >> 2;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v16 = *v12++;
      v13 += v16;
      --v15;
    }
    while (v15);
  }
  VVector<float>::print(*a2, "Parallel:: computeError: targets for feature vector[0] = ", v13);
  v17 = *(int **)(a1 + 256);
  v18 = 0;
  v19 = *(_QWORD *)(a1 + 264) - (_QWORD)v17;
  if (v19)
  {
    v20 = v19 >> 2;
    if (v20 <= 1)
      v20 = 1;
    do
    {
      v21 = *v17++;
      v18 += v21;
      --v20;
    }
    while (v20);
  }
  VVector<float>::print(*a2 + 1, "Parallel:: computeError: targets for feature vector[1] = ", v18);
  memset(v42, 0, sizeof(v42));
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v42, *(const void **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  __p = 0;
  v40 = 0;
  v41 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 256), *(_QWORD *)(a1 + 264), (uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 2);
  Parallel::split(a1, (uint64_t *)v42, (_QWORD *)(a1 + 200), (uint64_t *)a2, &__p, a4);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  if (v42[0])
    operator delete(v42[0]);
  v22 = **(float ****)(a1 + 200);
  v23 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
  VVector<float>::print(v22, "Parallel:: computeError: targets for sub network[0], feature vec#0", v23);
  v24 = *(float ***)(*(_QWORD *)(a1 + 200) + 24);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8));
  VVector<float>::print(v24, "Parallel:: computeError: targets for sub network[1], feature vec#0", v25);
  v26 = (float **)(**(_QWORD **)(a1 + 200) + 8);
  v27 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
  VVector<float>::print(v26, "Parallel:: computeError: targets for sub network[0], feature vec#1", v27);
  v28 = (float **)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24) + 8);
  v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8));
  VVector<float>::print(v28, "Parallel:: computeError: targets for sub network[1], feature vec#1", v29);
  v30 = *(_QWORD ***)(a1 + 80);
  v31 = *(_QWORD *)(a1 + 88);
  if ((_QWORD **)v31 == v30)
  {
    v34 = (v31 - (uint64_t)v30) >> 3;
    v30 = *(_QWORD ***)(a1 + 88);
  }
  else
  {
    v32 = 0;
    v33 = 0;
    do
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v30[v33] + 344))(v30[v33], *(_QWORD *)(a1 + 200) + v32, *(_QWORD *)(a1 + 176) + v32, a4, a5, a6);
      ++v33;
      v30 = *(_QWORD ***)(a1 + 80);
      v31 = *(_QWORD *)(a1 + 88);
      v34 = (v31 - (uint64_t)v30) >> 3;
      v32 += 24;
    }
    while (v34 > v33);
  }
  memset(v38, 0, sizeof(v38));
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v38, v30, v31, v34);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, *(const void **)(a1 + 256), *(_QWORD *)(a1 + 264), (uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 2);
  Parallel::merge(a1, a3, (_QWORD *)(a1 + 176), &v35, a4);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v38[0])
    operator delete(v38[0]);
}

void sub_19154C0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

float Parallel::log2Probability(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  float v8;

  v3 = a1[10];
  if (a1[11] == v3)
    return 0.0;
  v6 = 0;
  v7 = 0;
  v8 = 0.0;
  do
  {
    v8 = v8
       + (*(float (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 352))(*(_QWORD *)(v3 + 8 * v7), a1[25] + v6, a3);
    ++v7;
    v3 = a1[10];
    v6 += 24;
  }
  while (v7 < (a1[11] - v3) >> 3);
  return v8;
}

void VVector<float>::print(float **a1, char *a2, int a3)
{
  float *v6;
  uint64_t v7;
  char v8;
  float v9;
  BOOL v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  size_t size;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string::size_type v42;
  uint64_t v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  uint64_t v50;
  void *__p;
  char v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;
  void *v56[2];
  uint64_t v57;
  std::string v58;
  uint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  __int128 v63;
  int64_t v64;
  void *v65[2];
  unsigned __int8 v66;
  char v67[100];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  sprintf(v67, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(v65, "() ");
  if (a3 <= 0)
    goto LABEL_7;
  v6 = *a1;
  v7 = a3;
  v8 = 1;
  do
  {
    v9 = *v6++;
    v10 = v9 >= -1.0;
    if (v9 > 1.0)
      v10 = 0;
    v8 &= v10;
    --v7;
  }
  while (v7);
  if ((v8 & 1) != 0)
LABEL_7:
    v11 = "inRange:yes";
  else
    v11 = "inRange:no";
  std::string::basic_string[abi:ne180100]<0>(&v49, v11);
  v12 = std::string::insert(&v49, 0, " (");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v58, ") ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v64 = v14->__r_.__value_.__r.__words[2];
  v63 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v58);
  v56[0] = 0;
  v56[1] = 0;
  v57 = 0;
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v58, (uint64_t)v56);
  std::operator+<char>();
  v16 = std::string::append(&v49, "] ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v55 = v16->__r_.__value_.__r.__words[2];
  v54 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v49);
  std::string::basic_string[abi:ne180100]<0>(&v44, a2);
  if (v64 >= 0)
    v18 = (const std::string::value_type *)&v63;
  else
    v18 = (const std::string::value_type *)v63;
  if (v64 >= 0)
    v19 = HIBYTE(v64);
  else
    v19 = *((_QWORD *)&v63 + 1);
  v20 = std::string::append(&v44, v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((v66 & 0x80u) == 0)
    v22 = (const std::string::value_type *)v65;
  else
    v22 = (const std::string::value_type *)v65[0];
  if ((v66 & 0x80u) == 0)
    v23 = v66;
  else
    v23 = (std::string::size_type)v65[1];
  v24 = std::string::append(&v45, v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v55 >= 0)
    v26 = (const std::string::value_type *)&v54;
  else
    v26 = (const std::string::value_type *)v54;
  if (v55 >= 0)
    v27 = HIBYTE(v55);
  else
    v27 = *((_QWORD *)&v54 + 1);
  v28 = std::string::append(&v46, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v47, "[ ");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (a3 >= 1)
  {
    v32 = 0;
    if (a3 >= 1000)
      v33 = 1000;
    else
      v33 = a3;
    v34 = 4 * v33;
    do
    {
      memset(&v47, 0, sizeof(v47));
      std::ios_base::clear((std::ios_base *)((char *)&v49 + *(_QWORD *)(v49.__r_.__value_.__r.__words[0] - 24)), 0);
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, (uint64_t)&v47);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        size = v47.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v46, size + 3);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v46;
      else
        v36 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v47;
        else
          v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
        memmove(v36, v37, size);
      }
      *(_DWORD *)((char *)&v36->__r_.__value_.__l.__data_ + size) = 2108448;
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v46;
      else
        v38 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        v39 = v46.__r_.__value_.__l.__size_;
      std::string::append(&v48, (const std::string::value_type *)v38, v39);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      v32 += 4;
    }
    while (v34 != v32);
  }
  std::string::append(&v48, "]");
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v40 = *MEMORY[0x1E0DE4F50];
  v49.__r_.__value_.__r.__words[0] = v40;
  v42 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v41 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + *(_QWORD *)(v40 - 24)) = v42;
  v43 = MEMORY[0x1E0DE4FB8];
  v49.__r_.__value_.__r.__words[2] = v41;
  v50 = MEMORY[0x1E0DE4FB8] + 16;
  if (v52 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v53);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  v58.__r_.__value_.__r.__words[0] = v40;
  *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + *(_QWORD *)(v40 - 24)) = v42;
  v58.__r_.__value_.__r.__words[2] = v41;
  v59 = v43 + 16;
  if (v61 < 0)
    operator delete(v60);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v62);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  if ((char)v66 < 0)
    operator delete(v65[0]);
}

void sub_19154C700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  uint64_t v74;

  if (a30 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  if (a71 < 0)
    operator delete(a66);
  if (a73 < 0)
    operator delete(a72);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a74);
  if (*(char *)(v74 - 233) < 0)
    operator delete(*(void **)(v74 - 256));
  if (*(char *)(v74 - 209) < 0)
    operator delete(*(void **)(v74 - 232));
  _Unwind_Resume(a1);
}

uint64_t Parallel::split(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int *v19;
  int v20;
  int v23;

  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    do
    {
      if (a6 >= 1)
      {
        v13 = 0;
        v23 = v12;
        v14 = 4 * v12;
        do
        {
          v15 = *(_QWORD *)(*a3 + 24 * v11);
          v16 = *a4;
          v17 = *(unsigned int *)(*a5 + 4 * v11);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v10);
          if ((int)v17 >= 1)
          {
            v18 = *(_DWORD **)(v15 + 8 * v13);
            v19 = (int *)(*(_QWORD *)(v16 + 8 * v13) + v14);
            do
            {
              v20 = *v19++;
              *v18++ = v20;
              --v17;
            }
            while (v17);
          }
          ++v13;
        }
        while (v13 != a6);
        v7 = *a2;
        v6 = a2[1];
        v12 = v23;
      }
      v12 += *(_DWORD *)(*a5 + 4 * v11++);
    }
    while (v11 < (v6 - v7) >> 3);
  }
  return result;
}

uint64_t Parallel::merge(uint64_t result, uint64_t *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _DWORD *v18;
  int v19;
  int v21;

  v6 = *(_QWORD *)(result + 80);
  v5 = *(_QWORD *)(result + 88);
  if (v5 != v6)
  {
    v9 = (_QWORD *)result;
    v10 = 0;
    v11 = 0;
    do
    {
      if (a5 >= 1)
      {
        v12 = 0;
        v21 = v11;
        v13 = 4 * v11;
        do
        {
          v14 = *(_QWORD *)(*a3 + 24 * v10);
          v15 = *a2;
          v16 = *(unsigned int *)(*a4 + 4 * v10);
          result = (*(uint64_t (**)(_QWORD *))(*v9 + 272))(v9);
          if ((int)v16 >= 1)
          {
            v17 = *(int **)(v14 + 8 * v12);
            v18 = (_DWORD *)(*(_QWORD *)(v15 + 8 * v12) + v13);
            do
            {
              v19 = *v17++;
              *v18++ = v19;
              --v16;
            }
            while (v16);
          }
          ++v12;
        }
        while (v12 != a5);
        v6 = v9[10];
        v5 = v9[11];
        v11 = v21;
      }
      v11 += *(_DWORD *)(*a4 + 4 * v10++);
    }
    while (v10 < (v5 - v6) >> 3);
  }
  return result;
}

void Parallel::init(char **this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void **v35;
  char *v36;
  unint64_t v37;
  int v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  void **v115;

  std::vector<VVector<float>>::resize(this + 13, maxFeatureVectors);
  std::vector<VVector<float>>::resize(this + 16, maxFeatureVectors);
  if (maxFeatureVectors >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *((unsigned int *)this + 18);
      v4 = (void *)operator new[]();
      v5 = v4;
      if ((int)v3 >= 1)
        bzero(v4, 4 * v3);
      *(_QWORD *)&this[13][8 * v2] = v5;
      v7 = this[7];
      v6 = this[8];
      if (v7 >= v6)
      {
        v9 = this[6];
        v10 = (v7 - v9) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_131;
        v11 = v6 - v9;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13);
        else
          v14 = 0;
        v15 = (char *)(v13 + 8 * v10);
        *(_QWORD *)v15 = v5;
        v8 = v15 + 8;
        v17 = this[6];
        v16 = this[7];
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = this[6];
        }
        this[6] = v15;
        this[7] = v8;
        this[8] = (char *)(v13 + 8 * v14);
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v7 = v5;
        v8 = v7 + 8;
      }
      this[7] = v8;
      v19 = *((unsigned int *)this + 18);
      v20 = (void *)operator new[]();
      v21 = v20;
      if ((int)v19 >= 1)
        bzero(v20, 4 * v19);
      *(_QWORD *)&this[16][8 * v2] = v21;
      v23 = this[7];
      v22 = this[8];
      if (v23 >= v22)
      {
        v25 = this[6];
        v26 = (v23 - v25) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
LABEL_131:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v27 = v22 - v25;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
        else
          v30 = 0;
        v31 = (char *)(v29 + 8 * v26);
        *(_QWORD *)v31 = v21;
        v24 = v31 + 8;
        v33 = this[6];
        v32 = this[7];
        if (v32 != v33)
        {
          do
          {
            v34 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v31 - 1) = v34;
            v31 -= 8;
          }
          while (v32 != v33);
          v32 = this[6];
        }
        this[6] = v31;
        this[7] = v24;
        this[8] = (char *)(v29 + 8 * v30);
        if (v32)
          operator delete(v32);
      }
      else
      {
        *(_QWORD *)v23 = v21;
        v24 = v23 + 8;
      }
      this[7] = v24;
      ++v2;
    }
    while (v2 < maxFeatureVectors);
  }
  std::vector<std::vector<VVector<float>>>::resize((uint64_t)(this + 22), (this[11] - this[10]) >> 3);
  std::vector<std::vector<VVector<float>>>::resize((uint64_t)(this + 19), (this[11] - this[10]) >> 3);
  std::vector<std::vector<VVector<float>>>::resize((uint64_t)(this + 25), (this[11] - this[10]) >> 3);
  this[30] = this[29];
  v35 = (void **)(this + 32);
  v115 = (void **)(this + 29);
  this[33] = this[32];
  v36 = this[10];
  if (this[11] != v36)
  {
    v37 = 0;
    do
    {
      v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v36[8 * v37] + 272))(*(_QWORD *)&v36[8 * v37]);
      v39 = v38;
      v41 = this[33];
      v40 = this[34];
      if (v41 >= v40)
      {
        v43 = (char *)*v35;
        v44 = (v41 - (_BYTE *)*v35) >> 2;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v46 = v40 - v43;
        if (v46 >> 1 > v45)
          v45 = v46 >> 1;
        v47 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL;
        v48 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v47)
          v48 = v45;
        if (v48)
        {
          v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v48);
          v43 = this[32];
          v41 = this[33];
        }
        else
        {
          v49 = 0;
        }
        v50 = (char *)(v48 + 4 * v44);
        *(_DWORD *)v50 = v39;
        v42 = v50 + 4;
        while (v41 != v43)
        {
          v51 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v50 - 1) = v51;
          v50 -= 4;
        }
        this[32] = v50;
        this[33] = v42;
        this[34] = (char *)(v48 + 4 * v49);
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_DWORD *)v41 = v38;
        v42 = v41 + 4;
      }
      this[33] = v42;
      v52 = *(_QWORD *)&this[10][8 * v37];
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 264))(v52);
      v54 = v53;
      v56 = this[30];
      v55 = this[31];
      if (v56 >= v55)
      {
        v58 = (char *)*v115;
        v59 = (v56 - (_BYTE *)*v115) >> 2;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v61 = v55 - v58;
        if (v61 >> 1 > v60)
          v60 = v61 >> 1;
        v47 = (unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL;
        v62 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v47)
          v62 = v60;
        if (v62)
        {
          v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v62);
          v58 = this[29];
          v56 = this[30];
        }
        else
        {
          v63 = 0;
        }
        v64 = (char *)(v62 + 4 * v59);
        *(_DWORD *)v64 = v54;
        v57 = v64 + 4;
        while (v56 != v58)
        {
          v65 = *((_DWORD *)v56 - 1);
          v56 -= 4;
          *((_DWORD *)v64 - 1) = v65;
          v64 -= 4;
        }
        this[29] = v64;
        this[30] = v57;
        this[31] = (char *)(v62 + 4 * v63);
        if (v58)
          operator delete(v58);
      }
      else
      {
        *(_DWORD *)v56 = v53;
        v57 = v56 + 4;
      }
      this[30] = v57;
      std::vector<VVector<float>>::resize((char **)&this[22][24 * v37], maxFeatureVectors);
      std::vector<VVector<float>>::resize((char **)&this[19][24 * v37], maxFeatureVectors);
      std::vector<VVector<float>>::resize((char **)&this[25][24 * v37], maxFeatureVectors);
      if (maxFeatureVectors >= 1)
      {
        v66 = 0;
        do
        {
          v67 = *((unsigned int *)*v35 + v37);
          v68 = (void *)operator new[]();
          v69 = v68;
          if ((int)v67 >= 1)
            bzero(v68, 4 * v67);
          *(_QWORD *)(*(_QWORD *)&this[22][24 * v37] + 8 * v66) = v69;
          v71 = this[7];
          v70 = this[8];
          if (v71 >= v70)
          {
            v73 = this[6];
            v74 = (v71 - v73) >> 3;
            if ((unint64_t)(v74 + 1) >> 61)
              goto LABEL_131;
            v75 = v70 - v73;
            v76 = v75 >> 2;
            if (v75 >> 2 <= (unint64_t)(v74 + 1))
              v76 = v74 + 1;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v77 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v77 = v76;
            if (v77)
              v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v77);
            else
              v78 = 0;
            v79 = (char *)(v77 + 8 * v74);
            *(_QWORD *)v79 = v69;
            v72 = v79 + 8;
            v81 = this[6];
            v80 = this[7];
            if (v80 != v81)
            {
              do
              {
                v82 = *((_QWORD *)v80 - 1);
                v80 -= 8;
                *((_QWORD *)v79 - 1) = v82;
                v79 -= 8;
              }
              while (v80 != v81);
              v80 = this[6];
            }
            this[6] = v79;
            this[7] = v72;
            this[8] = (char *)(v77 + 8 * v78);
            if (v80)
              operator delete(v80);
          }
          else
          {
            *(_QWORD *)v71 = v69;
            v72 = v71 + 8;
          }
          this[7] = v72;
          v83 = *(unsigned int *)&this[32][4 * v37];
          v84 = (void *)operator new[]();
          v85 = v84;
          if ((int)v83 >= 1)
            bzero(v84, 4 * v83);
          *(_QWORD *)(*(_QWORD *)&this[19][24 * v37] + 8 * v66) = v85;
          v87 = this[7];
          v86 = this[8];
          if (v87 >= v86)
          {
            v89 = this[6];
            v90 = (v87 - v89) >> 3;
            if ((unint64_t)(v90 + 1) >> 61)
              goto LABEL_131;
            v91 = v86 - v89;
            v92 = v91 >> 2;
            if (v91 >> 2 <= (unint64_t)(v90 + 1))
              v92 = v90 + 1;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
              v93 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v93 = v92;
            if (v93)
              v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v93);
            else
              v94 = 0;
            v95 = (char *)(v93 + 8 * v90);
            *(_QWORD *)v95 = v85;
            v88 = v95 + 8;
            v97 = this[6];
            v96 = this[7];
            if (v96 != v97)
            {
              do
              {
                v98 = *((_QWORD *)v96 - 1);
                v96 -= 8;
                *((_QWORD *)v95 - 1) = v98;
                v95 -= 8;
              }
              while (v96 != v97);
              v96 = this[6];
            }
            this[6] = v95;
            this[7] = v88;
            this[8] = (char *)(v93 + 8 * v94);
            if (v96)
              operator delete(v96);
          }
          else
          {
            *(_QWORD *)v87 = v85;
            v88 = v87 + 8;
          }
          this[7] = v88;
          v99 = *(unsigned int *)&this[32][4 * v37];
          v100 = (void *)operator new[]();
          v101 = v100;
          if ((int)v99 >= 1)
            bzero(v100, 4 * v99);
          *(_QWORD *)(*(_QWORD *)&this[25][24 * v37] + 8 * v66) = v101;
          v103 = this[7];
          v102 = this[8];
          if (v103 >= v102)
          {
            v105 = this[6];
            v106 = (v103 - v105) >> 3;
            if ((unint64_t)(v106 + 1) >> 61)
              goto LABEL_131;
            v107 = v102 - v105;
            v108 = v107 >> 2;
            if (v107 >> 2 <= (unint64_t)(v106 + 1))
              v108 = v106 + 1;
            if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
              v109 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v109 = v108;
            if (v109)
              v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v109);
            else
              v110 = 0;
            v111 = (char *)(v109 + 8 * v106);
            *(_QWORD *)v111 = v101;
            v104 = v111 + 8;
            v113 = this[6];
            v112 = this[7];
            if (v112 != v113)
            {
              do
              {
                v114 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v111 - 1) = v114;
                v111 -= 8;
              }
              while (v112 != v113);
              v112 = this[6];
            }
            this[6] = v111;
            this[7] = v104;
            this[8] = (char *)(v109 + 8 * v110);
            if (v112)
              operator delete(v112);
          }
          else
          {
            *(_QWORD *)v103 = v101;
            v104 = v103 + 8;
          }
          this[7] = v104;
          ++v66;
        }
        while (v66 < maxFeatureVectors);
      }
      ++v37;
      v36 = this[10];
    }
    while (v37 < (this[11] - v36) >> 3);
  }
}

void std::vector<std::vector<VVector<float>>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 3 * v10;
    v12 = (char *)operator new(24 * v10);
    v13 = &v12[24 * v5];
    v14 = &v12[8 * v11];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v3[2];
        *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      v19 = *(_QWORD **)a1;
      v3 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v3 != v19)
      {
        v20 = v3;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v3 - 2) = v21;
            operator delete(v21);
          }
          v3 = v20;
        }
        while (v20 != v19);
        v3 = v19;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v23 = &v4[3 * a2];
    if (v3 != v23)
    {
      v24 = *(_QWORD **)(a1 + 8);
      do
      {
        v26 = (void *)*(v24 - 3);
        v24 -= 3;
        v25 = v26;
        if (v26)
        {
          *(v3 - 2) = v25;
          operator delete(v25);
        }
        v3 = v24;
      }
      while (v24 != v23);
    }
    *(_QWORD *)(a1 + 8) = v23;
  }
}

uint64_t ParallelSelector<float>::outputs(uint64_t a1)
{
  return a1 + 104;
}

uint64_t ParallelSelector<float>::deltas(uint64_t a1)
{
  return a1 + 448;
}

uint64_t ParallelSelector<float>::inputDeltas(uint64_t a1)
{
  return a1 + 504;
}

uint64_t ParallelSelector<float>::weightsAreNaN(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t ParallelSelector<float>::read(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::write(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v5)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 80);
    }
    while (v11 < (*(_QWORD *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

_QWORD *ParallelSelector<float>::subtractModels(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 80))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *ParallelSelector<float>::compareModels(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 88))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *ParallelSelector<float>::addGradient(void *result, void *lpsrc)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t)result;
  if (lpsrc)
  {
    v3 = (uint64_t)result;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (*(_QWORD *)(v2 + 88) != v4)
  {
    v5 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 96))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v5));
      ++v5;
      v4 = *(_QWORD *)(v2 + 80);
    }
    while (v5 < (*(_QWORD *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<float>::applyGradient(void *result, void *lpsrc)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t)result;
  if (lpsrc)
  {
    v3 = (uint64_t)result;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (*(_QWORD *)(v2 + 88) != v4)
  {
    v5 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 104))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v5));
      ++v5;
      v4 = *(_QWORD *)(v2 + 80);
    }
    while (v5 < (*(_QWORD *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::clipModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::resetForNewBatch(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void ParallelSelector<float>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *__p;
  char v5;

  v2 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 200))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = *(_QWORD *)(a1 + 80);
    }
    while (v3 < (*(_QWORD *)(a1 + 88) - v2) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "From allocAllBuffers");
  ParallelSelector<float>::init(a1);
  if (v5 < 0)
    operator delete(__p);
}

void sub_19154DA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ParallelSelector<float>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x19401CD78](*v5, 0x1000C8052888210);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[10];
  if (a1[11] != v6)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 208))(*(_QWORD *)(v6 + 8 * v7));
      ++v7;
      v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 25);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 59);
  a1[39] = a1[38];
}

void ParallelSelector<float>::rearrangeTargets(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  OutputCluster *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v29;

  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v27 = (a4 - 1);
  if (a4 >= 1)
  {
    v9 = 0;
    v10 = a4;
    do
    {
      if ((a5 & 1) != 0)
      {
        if (a3[1] != *a3)
        {
          if (v9 >= v27)
            v11 = 2;
          else
            v11 = **(_DWORD **)(*a3 + 24 * v9 + 24);
          goto LABEL_21;
        }
        if (v29 >= 1)
        {
          v11 = 0;
          v15 = 0;
          v17 = 1.1755e-38;
          do
          {
            v16 = *(_QWORD *)(*a2 + 8 * v9);
            if (*(float *)(v16 + 4 * v15) > v17)
            {
              v11 = v15;
              v17 = *(float *)(v16 + 4 * v15);
            }
            ++v15;
          }
          while (v29 != v15);
          goto LABEL_21;
        }
      }
      else if (v29 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v14 = 1.1755e-38;
        do
        {
          v13 = *(_QWORD *)(*a2 + 8 * v9);
          if (*(float *)(v13 + 4 * v12) > v14)
          {
            v11 = v12;
            v14 = *(float *)(v13 + 4 * v12);
          }
          ++v12;
        }
        while (v29 != v12);
        goto LABEL_21;
      }
      v11 = 0;
LABEL_21:
      v18 = *(_QWORD *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v9) = v11;
      v19 = *(OutputCluster **)(a1 + 496);
      *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v9) = OutputCluster::getWordClass(v19, v11) + 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v9) = OutputCluster::getWordClassIndex(v19, *(_DWORD *)(v18 + 4 * v9));
      v20 = **(_QWORD **)(a1 + 200);
      v21 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v20 + 8 * v9), 4 * v21);
      v22 = *(_QWORD **)(a1 + 200);
      v23 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v9);
      v24 = v22[3 * (int)v23];
      *(_DWORD *)(*(_QWORD *)(*v22 + 8 * v9) + 4 * v23 - 4) = 1065353216;
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 272))(v25);
      bzero(*(void **)(v24 + 8 * v9), 4 * v26);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * *(int *)(*(_QWORD *)(a1 + 400) + 4 * v9))
                            + 8 * v9)
                + 4 * *(int *)(*(_QWORD *)(a1 + 424) + 4 * v9)) = 1065353216;
      ++v9;
    }
    while (v9 != v10);
  }
}

uint64_t ParallelSelector<float>::noutputs(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - v1) < 9)
    return 0;
  LODWORD(v3) = 0;
  v4 = 1;
  do
  {
    v3 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v4) + 272))(*(_QWORD *)(v1 + 8 * v4))
       + v3;
    ++v4;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v4 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t ParallelSelector<float>::setPredictionMode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(result + 528) = a2;
  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void ParallelSelector<float>::update()
{
  exitFramework(5);
}

void ParallelSelector<float>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  float32_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  _QWORD v32[3];

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = 8 * a5;
    v9 = a5;
    do
    {
      v10 = *(_QWORD *)(a1 + 504);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    v12 = 0;
    for (i = 0; i != v9; ++i)
    {
      v14 = *(int *)(a1 + 332);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 248))(v15, *(_QWORD *)(a1 + 472) + 24 * (int)v14, a3, i, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v14), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v14));
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      v17 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
      memset(v32, 0, sizeof(v32));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v32, *v17, v17[1], v17[1] - *v17);
      v18 = *(_QWORD *)(a1 + 504);
      v19 = (char *)v32[0];
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 264))(v20);
      v22 = VVector<float>::add<float>((float32x4_t **)(v18 + v12), (float32x4_t **)&v19[v12], v21);
      v23 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * i);
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, float32_t))(*(_QWORD *)v24 + 248))(v24, *(_QWORD *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v23), v22);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v26 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
      memset(v31, 0, sizeof(v31));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v31, *v26, v26[1], v26[1] - *v26);
      v27 = *(_QWORD *)(a1 + 504);
      v28 = (char *)v31[0];
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 264))(v29);
      VVector<float>::add<float>((float32x4_t **)(v27 + v12), (float32x4_t **)&v28[v12], v30);
      if (v28)
        operator delete(v28);
      if (v19)
        operator delete(v19);
      v12 += 8;
    }
  }
}

void sub_19154E014(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ParallelSelector<float>::forward(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int **a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  int *v32;
  int *v33;
  std::vector<int> *v34;
  unint64_t v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  int WordClass;
  int WordClassIndex;
  uint64_t v57;
  _DWORD *v58;
  _DWORD **v59;
  unint64_t v60;
  _DWORD *v61;
  char *v62;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  int v79;
  int *v80;
  int v81;
  std::vector<int>::pointer end;
  int *v83;
  std::vector<int>::pointer begin;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  std::vector<int>::pointer v91;
  int *v92;
  int *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::vector<int>::pointer v100;
  int *v101;
  std::vector<int>::pointer v102;
  int64_t v103;
  unint64_t v104;
  int64_t v105;
  unint64_t v106;
  uint64_t v107;
  int *v108;
  int v109;
  std::vector<int>::pointer v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  unint64_t v114;
  uint64_t v115;
  int *v116;
  int v117;
  std::vector<int>::pointer v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  float *v130;
  uint64_t v131;
  int *v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  vDSP_Length v138;
  int v139;
  _DWORD *v140;
  void *v141;
  uint64_t *v142;
  std::vector<int> v143;
  void *__p;
  void *v145;
  uint64_t v146;
  void *v147;
  char *v148;
  unint64_t v149;
  float __C;

  v147 = 0;
  v148 = 0;
  v149 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 304);
    do
      *(_DWORD *)(v14 + 4 * v13) = 0;
    while (v13++ < *(int *)(a1 + 340));
  }
  v16 = *(_QWORD *)(a1 + 224);
  if (v16)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ParallelSelector");
  v17 = a4 & 0xFFFFFF;
  if (SHIBYTE(v146) < 0)
    operator delete(__p);
  if (v17 > (a5 != 0))
  {
    v18 = a5 != 0;
    while (1)
    {
      v19 = *(int *)(a1 + 332);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 272))(v20);
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 264))(v21);
      v22 = *(_QWORD *)(a1 + 304);
      if (!*(_DWORD *)(v22 + 4 * v19))
      {
        *(_DWORD *)(v22 + 4 * v19) = 1;
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 256))(v23, v17);
      }
      __p = 0;
      v145 = 0;
      v146 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v24 + 224))(v24, a2, a3, v18, &__p);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
      memset(&v143, 0, sizeof(v143));
      v26 = *(_DWORD *)(a1 + 328);
      if (v26 == 1)
        break;
      if (v26 == 2)
      {
        v72 = *v142;
        v73 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 272))(v73);
        if (v74 < 1)
        {
          v75 = 0;
        }
        else
        {
          v75 = 0;
          v76 = 0;
          v78 = 1.1755e-38;
          do
          {
            v77 = *(_QWORD *)(v72 + 8 * v18);
            if (*(float *)(v77 + 4 * v76) > v78)
            {
              v75 = v76;
              v78 = *(float *)(v77 + 4 * v76);
            }
            ++v76;
          }
          while (v74 != v76);
        }
        v81 = v75 + 1;
        end = v143.__end_;
        if (v143.__end_ >= v143.__end_cap_.__value_)
        {
          begin = v143.__begin_;
          v85 = v143.__end_ - v143.__begin_;
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v87 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
          if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v86)
            v86 = v87 >> 1;
          v52 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL;
          v88 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v52)
            v88 = v86;
          if (v88)
          {
            v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v88);
            begin = v143.__begin_;
            end = v143.__end_;
          }
          else
          {
            v89 = 0;
          }
          v93 = (int *)(v88 + 4 * v85);
          *v93 = v81;
          v83 = v93 + 1;
          while (end != begin)
          {
            v94 = *--end;
            *--v93 = v94;
          }
          v143.__begin_ = v93;
          v143.__end_ = v83;
          v143.__end_cap_.__value_ = (int *)(v88 + 4 * v89);
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v143.__end_ = v81;
          v83 = end + 1;
        }
        v143.__end_ = v83;
        goto LABEL_133;
      }
      if (v26 != 4)
      {
        v34 = &v143;
        VVector<float>::getTopNIndices((uint64_t *)(*v142 + 8 * v18), *(_DWORD *)(a1 + 340), &v143, *(_DWORD *)(*(_QWORD *)(a1 + 496) + 8));
        goto LABEL_134;
      }
      v27 = (char *)v147;
      v148 = (char *)v147;
      v28 = *(_QWORD *)(a1 + 536);
      v29 = *(_QWORD *)(a1 + 544) - v28;
      if (v29)
      {
        v30 = v29 / 24;
        if (v30 <= 1)
          v30 = 1;
        v31 = (_QWORD *)(v28 + 8);
        do
        {
          *v31 = *(v31 - 1);
          v31 += 3;
          --v30;
        }
        while (v30);
      }
      v33 = *a7;
      v32 = a7[1];
      v34 = (std::vector<int> *)(a1 + 352);
      v35 = (char *)v32 - (char *)*a7;
      if (v32 != *a7)
      {
        if (v35 < 5)
        {
          v148 = v27;
          if (v35 == 4)
          {
            v36 = operator new(4uLL);
            v37 = *v33;
            *v36 = *v33;
            goto LABEL_85;
          }
        }
        else
        {
          v36 = operator new(4uLL);
          v37 = *v33;
          *v36 = *v33;
          if (v33[1] != -1)
            exitFramework(900);
          if (v35 >= 9)
          {
            v140 = v36;
            v38 = 2;
            do
            {
              v39 = v17;
              v40 = *v33;
              v41 = v33[v38];
              v42 = *(_QWORD *)(a1 + 496);
              if (v40 == -1)
              {
                if (*(_QWORD *)(v42 + 104))
                  v47 = *(_DWORD *)(v42 + 112);
                else
                  v47 = *(_DWORD *)(v42 + 96);
                if (v41 >= v47)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C20], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v41);
                  v17 = v39;
                }
                else
                {
                  WordClass = OutputCluster::getWordClass(*(OutputCluster **)(a1 + 496), v41);
                  WordClassIndex = OutputCluster::getWordClassIndex((OutputCluster *)v42, v41);
                  v57 = *(_QWORD *)(a1 + 536) + 24 * WordClass;
                  v59 = (_DWORD **)(v57 + 8);
                  v58 = *(_DWORD **)(v57 + 8);
                  v60 = *(_QWORD *)(v57 + 16);
                  if ((unint64_t)v58 >= v60)
                  {
                    v139 = WordClassIndex;
                    v64 = *(_DWORD **)v57;
                    v65 = ((uint64_t)v58 - *(_QWORD *)v57) >> 2;
                    v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) >> 62)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v67 = v60 - (_QWORD)v64;
                    if (v67 >> 1 > v66)
                      v66 = v67 >> 1;
                    v52 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL;
                    v68 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52)
                      v68 = v66;
                    if (v68)
                    {
                      v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v68);
                      v58 = *v59;
                      v64 = *(_DWORD **)v57;
                    }
                    else
                    {
                      v69 = 0;
                    }
                    v70 = (_DWORD *)(v68 + 4 * v65);
                    *v70 = v139;
                    v61 = v70 + 1;
                    while (v58 != v64)
                    {
                      v71 = *--v58;
                      *--v70 = v71;
                    }
                    *(_QWORD *)v57 = v70;
                    *v59 = v61;
                    *(_QWORD *)(v57 + 16) = v68 + 4 * v69;
                    if (v64)
                      operator delete(v64);
                  }
                  else
                  {
                    *v58 = WordClassIndex;
                    v61 = v58 + 1;
                  }
                  v17 = v39;
                  *v59 = v61;
                }
              }
              else
              {
                v43 = OutputCluster::getWordClassIndex(*(OutputCluster **)(a1 + 496), v41);
                v44 = v43;
                v45 = v148;
                if ((unint64_t)v148 >= v149)
                {
                  v48 = (char *)v147;
                  v49 = (v148 - (_BYTE *)v147) >> 2;
                  v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 62)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v17 = v39;
                  v51 = v149 - (_QWORD)v147;
                  if ((uint64_t)(v149 - (_QWORD)v147) >> 1 > v50)
                    v50 = v51 >> 1;
                  v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
                  v53 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v52)
                    v53 = v50;
                  if (v53)
                  {
                    v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
                    v48 = (char *)v147;
                    v45 = v148;
                  }
                  else
                  {
                    v54 = 0;
                  }
                  v62 = (char *)(v53 + 4 * v49);
                  *(_DWORD *)v62 = v44;
                  v46 = v62 + 4;
                  while (v45 != v48)
                  {
                    v63 = *((_DWORD *)v45 - 1);
                    v45 -= 4;
                    *((_DWORD *)v62 - 1) = v63;
                    v62 -= 4;
                  }
                  v147 = v62;
                  v148 = v46;
                  v149 = v53 + 4 * v54;
                  if (v48)
                    operator delete(v48);
                }
                else
                {
                  *(_DWORD *)v148 = v43;
                  v46 = v45 + 4;
                  v17 = v39;
                }
                v148 = v46;
              }
              ++v38;
              v33 = *a7;
            }
            while (v38 < a7[1] - *a7);
            v36 = v140;
            v37 = *v140;
          }
LABEL_85:
          v141 = v36;
          if (v37 == -1)
          {
            v95 = *(_QWORD *)(a1 + 544);
            v96 = *(_QWORD *)(a1 + 536);
            if (v95 != v96)
            {
              v97 = 0;
              do
              {
                v98 = *(_QWORD *)(v96 + 24 * v97);
                v99 = *(_QWORD *)(v96 + 24 * v97++ + 8);
                if (v99 != v98)
                {
                  v100 = v143.__end_;
                  if (v143.__end_ >= v143.__end_cap_.__value_)
                  {
                    v102 = v143.__begin_;
                    v103 = v143.__end_ - v143.__begin_;
                    v104 = v103 + 1;
                    if ((unint64_t)(v103 + 1) >> 62)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v105 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
                    if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v104)
                      v104 = v105 >> 1;
                    v52 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL;
                    v106 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52)
                      v106 = v104;
                    if (v106)
                    {
                      v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v106);
                      v102 = v143.__begin_;
                      v100 = v143.__end_;
                    }
                    else
                    {
                      v107 = 0;
                    }
                    v108 = (int *)(v106 + 4 * v103);
                    *v108 = v97;
                    v101 = v108 + 1;
                    while (v100 != v102)
                    {
                      v109 = *--v100;
                      *--v108 = v109;
                    }
                    v143.__begin_ = v108;
                    v143.__end_ = v101;
                    v143.__end_cap_.__value_ = (int *)(v106 + 4 * v107);
                    if (v102)
                      operator delete(v102);
                  }
                  else
                  {
                    *v143.__end_ = v97;
                    v101 = v100 + 1;
                  }
                  v143.__end_ = v101;
                  v95 = *(_QWORD *)(a1 + 544);
                  v96 = *(_QWORD *)(a1 + 536);
                }
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v95 - v96) >> 3) > v97);
            }
          }
          else
          {
            if (v37 < 0
              || (v90 = v37 + 1,
                  (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3 <= (unint64_t)(v37 + 1)))
            {
              exitFramework(45);
            }
            v91 = v143.__end_;
            if (v143.__end_ >= v143.__end_cap_.__value_)
            {
              v110 = v143.__begin_;
              v111 = v143.__end_ - v143.__begin_;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v113 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
              if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v112)
                v112 = v113 >> 1;
              v52 = (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL;
              v114 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v52)
                v114 = v112;
              if (v114)
              {
                v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v114);
                v110 = v143.__begin_;
                v91 = v143.__end_;
              }
              else
              {
                v115 = 0;
              }
              v116 = (int *)(v114 + 4 * v111);
              *v116 = v90;
              v92 = v116 + 1;
              while (v91 != v110)
              {
                v117 = *--v91;
                *--v116 = v117;
              }
              v143.__begin_ = v116;
              v143.__end_ = v92;
              v143.__end_cap_.__value_ = (int *)(v114 + 4 * v115);
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v143.__end_ = v90;
              v92 = v91 + 1;
            }
            v143.__end_ = v92;
          }
          operator delete(v141);
        }
LABEL_133:
        v34 = &v143;
      }
LABEL_134:
      bzero(*(void **)(*(_QWORD *)(a1 + 104) + 8 * v18), 4 * *(int *)(a1 + 348));
      v118 = v34->__begin_;
      if (v34->__end_ != v34->__begin_)
      {
        v119 = 0;
        while (1)
        {
          v120 = v118[v119];
          v121 = *(_QWORD *)(a1 + 304);
          if (!*(_DWORD *)(v121 + 4 * v120))
          {
            *(_DWORD *)(v121 + 4 * v120) = 1;
            v122 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 256))(v122, v17);
          }
          v123 = a7[1] != *a7 && **a7 == -1 ? (void **)(*(_QWORD *)(a1 + 536) + 24 * (int)v120 - 24) : &v147;
          v124 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v124 + 224))(v124, a2, a3, v18, v123);
          v125 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
          v126 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125);
          v127 = *(_QWORD *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2)
            break;
          v128 = *(unsigned int *)(v127 + 4 * v120);
          if ((int)v128 >= 1)
          {
            v129 = *(float *)(*(_QWORD *)(*v142 + 8 * v18) + 4 * ((int)v120 - 1));
            v130 = *(float **)(*v126 + 8 * v18);
            v131 = v128;
            do
            {
              *v130 = v129 * *v130;
              ++v130;
              --v131;
            }
            while (v131);
LABEL_148:
            if ((int)v128 >= 1)
            {
              v132 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 120) + 24 * ((int)v120 - 1));
              v133 = *(_DWORD **)(*v126 + 8 * v18);
              v134 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v18);
              do
              {
                v136 = *v132++;
                v135 = v136;
                LODWORD(v136) = *v133++;
                *(_DWORD *)(v134 + 4 * v135) = v136;
                --v128;
              }
              while (v128);
            }
          }
          ++v119;
          v118 = v34->__begin_;
          if (v119 >= v34->__end_ - v34->__begin_)
            goto LABEL_152;
        }
        v128 = *(unsigned int *)(v127 + 4 * v120);
        goto LABEL_148;
      }
LABEL_152:
      v137 = *(_QWORD *)(a1 + 104);
      v138 = *(int *)(a1 + 348);
      __C = 0.0;
      vDSP_sve(*(const float **)(v137 + 8 * v18), 1, &__C, v138);
      if (v143.__begin_)
      {
        v143.__end_ = v143.__begin_;
        operator delete(v143.__begin_);
      }
      if (__p)
      {
        v145 = __p;
        operator delete(__p);
      }
      if (++v18 == v17)
        goto LABEL_157;
    }
    v79 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v18);
    v80 = (int *)operator new(4uLL);
    *v80 = v79;
    v143.__end_ = v80 + 1;
    v143.__end_cap_.__value_ = v80 + 1;
    v143.__begin_ = v80;
    goto LABEL_133;
  }
LABEL_157:
  if (v147)
  {
    v148 = (char *)v147;
    operator delete(v147);
  }
}

void sub_19154EA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void *ParallelSelector<float>::updateFrom(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  void *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!result)
    __cxa_bad_cast();
  v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (uint64_t)result;
    v12 = 0;
    do
    {
      if (*(int *)(*(_QWORD *)(v11 + 304) + 4 * v12) >= 1)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v12);
        result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, float, float))(*(_QWORD *)v13 + 336))(v13, *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v12), a3, a4, a5);
        v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t ParallelSelector<float>::computeError(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 >= 1)
  {
    v19 = v6;
    v20 = v7;
    v10 = result;
    v11 = 0;
    v12 = a4;
    do
    {
      v18 = 0;
      v13 = *(int *)(v10 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v14 + 240))(v14, *(_QWORD *)(v10 + 200) + 24 * v13, *(_QWORD *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      v17 = 0;
      v15 = *(int *)(*(_QWORD *)(v10 + 400) + 4 * v11);
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v15);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v16 + 240))(v16, *(_QWORD *)(v10 + 200) + 24 * (int)v15, *(_QWORD *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1)
        ++*a5;
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float ParallelSelector<float>::log2Probability(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v13;

  v13 = 0;
  if (a3 < 1)
    return 0.0;
  v4 = 0;
  v5 = a3;
  v6 = 0.0;
  do
  {
    v7 = *(int *)(a1 + 332);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v8 + 232))(v8, *(_QWORD *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    v9 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v4);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 232))(v10, *(_QWORD *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2)
      v11 = -0.0;
    v6 = v6 + (float)(*(float *)&v13 + v11);
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void ParallelSelector<float>::~ParallelSelector(uint64_t a1)
{
  ParallelSelector<float>::~ParallelSelector(a1);
  JUMPOUT(0x19401CD90);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;

  *(_QWORD *)a1 = off_1E2D55F20;
  v3 = *(_QWORD *)(a1 + 280);
  v2 = *(_QWORD *)(a1 + 288);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(a1 + 288);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x19401CD78](*v5, 0x1000C8052888210);
        *v5 = 0;
        v3 = *(_QWORD *)(a1 + 280);
        v2 = *(_QWORD *)(a1 + 288);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(_QWORD *)(a1 + 288) = v3;
  v14 = (void **)(a1 + 536);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v6 = *(void **)(a1 + 504);
  if (v6)
  {
    *(_QWORD *)(a1 + 512) = v6;
    operator delete(v6);
  }
  v14 = (void **)(a1 + 472);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = *(void **)(a1 + 448);
  if (v7)
  {
    *(_QWORD *)(a1 + 456) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 424);
  if (v8)
  {
    *(_QWORD *)(a1 + 432) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 400);
  if (v9)
  {
    *(_QWORD *)(a1 + 408) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 376);
  if (v10)
  {
    *(_QWORD *)(a1 + 384) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(_QWORD *)(a1 + 360) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 304);
  if (v12)
  {
    *(_QWORD *)(a1 + 312) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 280);
  if (v13)
  {
    *(_QWORD *)(a1 + 288) = v13;
    operator delete(v13);
  }
  Parallel::~Parallel((Parallel *)a1);
}

uint64_t OutputCluster::getWordClass(OutputCluster *this, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  BOOL v10;
  char **v11;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4 * ((2 * a2) | 1));
    return *v3;
  }
  v7 = (char *)*((_QWORD *)this + 6);
  v5 = (char *)this + 48;
  v6 = v7;
  if (v7)
  {
    v8 = v5;
    do
    {
      v9 = *((_DWORD *)v6 + 7);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (char **)v6;
      else
        v11 = (char **)(v6 + 8);
      if (!v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && *((_DWORD *)v8 + 7) <= a2)
    {
      v3 = (unsigned int *)(v8 + 32);
      return *v3;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t OutputCluster::getWordClassIndex(OutputCluster *this, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  BOOL v10;
  char **v11;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4 * ((2 * a2) | 1));
    return *v3;
  }
  v7 = (char *)*((_QWORD *)this + 11);
  v5 = (char *)this + 88;
  v6 = v7;
  if (v7)
  {
    v8 = v5;
    do
    {
      v9 = *((_DWORD *)v6 + 7);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (char **)v6;
      else
        v11 = (char **)(v6 + 8);
      if (!v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && *((_DWORD *)v8 + 7) <= a2)
    {
      v3 = (unsigned int *)(v8 + 32);
      return *v3;
    }
  }
  return 0xFFFFFFFFLL;
}

void VVector<float>::getTopNIndices(uint64_t *a1, int a2, std::vector<int> *a3, int a4)
{
  float *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  float *v12;
  float *v13;
  unint64_t v14;
  float *v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  unint64_t v20;
  float *v21;
  float v22;
  float v23;
  float *v24;
  float *v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  float *v52;
  float *v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  float *v58;
  std::vector<int>::pointer begin;
  uint64_t v60;
  int *v61;
  int v62;
  void *__p;
  float *v64;

  std::vector<std::pair<int,float>>::vector(&__p, a2);
  v8 = (float *)__p;
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = *a1;
    v11 = (char *)__p + 4;
    do
    {
      *(v11 - 1) = v9;
      *v11 = *(_DWORD *)(v10 + 4 * v9);
      v11 += 2;
      ++v9;
    }
    while (a2 != v9);
  }
  v12 = &v8[2 * a4];
  v13 = v64;
  if (v12 != v64)
  {
    do
    {
      v14 = ((char *)v13 - (char *)v8) >> 3;
      if (v14 < 2)
        break;
      if (v14 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::__wrap_iter<std::pair<int,float> *>>(v8, v8 + 2, v13 - 2);
        break;
      }
      if (v14 == 2)
      {
        v48 = *(v13 - 1);
        v49 = v8[1];
        if (v48 > v49)
        {
          v50 = *v8;
          *v8 = *(v13 - 2);
          *(v13 - 2) = v50;
          v8[1] = v48;
          *(v13 - 1) = v49;
        }
        break;
      }
      if ((char *)v13 - (char *)v8 <= 63)
      {
        while (v8 != v13 - 2)
        {
          v51 = v8;
          v8 += 2;
          if (v51 != v13 && v8 != v13)
          {
            v52 = v8;
            v53 = v51;
            do
            {
              if (v52[1] > v53[1])
                v53 = v52;
              v52 += 2;
            }
            while (v52 != v13);
            if (v53 != v51)
            {
              v54 = *(_DWORD *)v51;
              *v51 = *v53;
              *(_DWORD *)v53 = v54;
              v55 = *((_DWORD *)v51 + 1);
              v51[1] = v53[1];
              *((_DWORD *)v53 + 1) = v55;
            }
          }
        }
        break;
      }
      v15 = &v8[2 * (v14 >> 1)];
      v16 = v13 - 2;
      v17 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::__wrap_iter<std::pair<int,float> *>>(v8, v15, v13 - 2);
      v18 = v8[1];
      v19 = v15[1];
      if (v18 <= v19)
      {
        v21 = v13 - 2;
        while (1)
        {
          v20 = (unint64_t)(v21 - 2);
          if (v21 - 2 == v8)
            break;
          v22 = *(v21 - 1);
          v21 -= 2;
          if (v22 > v19)
          {
            v23 = *v8;
            *v8 = *(float *)v20;
            *(float *)v20 = v23;
            v8[1] = v22;
            *(float *)(v20 + 4) = v18;
            ++v17;
            goto LABEL_15;
          }
        }
        v37 = v8 + 2;
        v38 = *(v13 - 1);
        if (v18 <= v38)
        {
          while (v37 != v16)
          {
            v39 = v37[1];
            if (v18 > v39)
            {
              v43 = *(_DWORD *)v37;
              *v37 = *(v13 - 2);
              *((_DWORD *)v13 - 2) = v43;
              v37[1] = v38;
              *(v13 - 1) = v39;
              v37 += 2;
              goto LABEL_46;
            }
            v37 += 2;
          }
          break;
        }
LABEL_46:
        if (v37 == v16)
          break;
        while (1)
        {
          v44 = v8[1];
          do
          {
            v34 = v37;
            v45 = v37[1];
            v37 += 2;
          }
          while (v44 <= v45);
          do
          {
            v46 = *(v16 - 1);
            v16 -= 2;
          }
          while (v44 > v46);
          if (v34 >= v16)
            break;
          v47 = *v34;
          *v34 = *v16;
          *v16 = v47;
          v34[1] = v46;
          v16[1] = v45;
        }
        if (v34 > v12)
          break;
      }
      else
      {
        v20 = (unint64_t)(v13 - 2);
LABEL_15:
        v24 = v8 + 2;
        if ((unint64_t)(v8 + 2) >= v20)
        {
          v27 = v8 + 2;
        }
        else
        {
          v25 = v8 + 2;
          while (1)
          {
            v26 = v15[1];
            do
            {
              v27 = v25;
              v28 = v25[1];
              v25 += 2;
            }
            while (v28 > v26);
            do
            {
              v29 = *(float *)(v20 - 4);
              v20 -= 8;
            }
            while (v29 <= v26);
            if ((unint64_t)v27 >= v20)
              break;
            v30 = *v27;
            *v27 = *(float *)v20;
            *(float *)v20 = v30;
            v27[1] = v29;
            *(float *)(v20 + 4) = v28;
            ++v17;
            if (v15 == v27)
              v15 = (float *)v20;
          }
        }
        if (v27 != v15)
        {
          v31 = v15[1];
          v32 = v27[1];
          if (v31 > v32)
          {
            v33 = *v27;
            *v27 = *v15;
            *v15 = v33;
            v27[1] = v31;
            v15[1] = v32;
            ++v17;
          }
        }
        if (v27 == v12)
          break;
        if (!v17)
        {
          if (v27 <= v12)
          {
            v40 = v27 + 2;
            while (v40 != v13)
            {
              v41 = v40[1];
              v42 = *(v40 - 1);
              v40 += 2;
              if (v41 > v42)
                goto LABEL_30;
            }
          }
          else
          {
            while (v24 != v27)
            {
              v35 = v24[1];
              v36 = *(v24 - 1);
              v24 += 2;
              if (v35 > v36)
                goto LABEL_30;
            }
          }
          break;
        }
LABEL_30:
        if (v27 <= v12)
        {
          v34 = v27 + 2;
        }
        else
        {
          v13 = v27;
          v34 = v8;
        }
      }
      v8 = v34;
    }
    while (v13 != v12);
    v8 = (float *)__p;
  }
  v56 = 126 - 2 * __clz(a4);
  if (a4)
    v57 = v56;
  else
    v57 = 0;
  std::__introsort<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *,false>(v8, &v8[2 * a4], v57, 1);
  std::vector<int>::resize(a3, a4);
  v58 = (float *)__p;
  if (a4 < 1)
  {
    if (!__p)
      return;
  }
  else
  {
    begin = a3->__begin_;
    v60 = a4;
    v61 = (int *)__p;
    do
    {
      v62 = *v61;
      v61 += 2;
      *begin++ = v62 + 1;
      --v60;
    }
    while (v60);
  }
  v64 = v58;
  operator delete(v58);
}

void sub_19154F384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<int,float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19154F3F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float *std::__introsort<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  int v26;
  float v27;
  float v28;
  BOOL v29;
  float *v30;
  float v31;
  float *v32;
  float v33;
  float *v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  BOOL v47;
  uint64_t v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  float *v60;
  float v61;
  float v62;
  float *v63;
  int v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  float v80;
  float v81;
  int v82;
  unint64_t v83;
  float *v84;
  float *v86;
  float v87;
  float v88;
  float v89;
  float *v90;
  float v91;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 1);
        v43 = v8[1];
        if (v42 > v43)
        {
          v44 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v44;
          v8[1] = v42;
          *(a2 - 1) = v43;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v8, v8 + 2, v8 + 4, v8 + 6, a2 - 2);
      default:
        if (v9 <= 191)
        {
          v45 = v8 + 2;
          v47 = v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v49[3];
                v51 = v49[1];
                v49 = v45;
                if (v50 > v51)
                {
                  v52 = *v45;
                  v53 = v48;
                  while (1)
                  {
                    v54 = (float *)((char *)v8 + v53);
                    v54[2] = *(float *)((char *)v8 + v53);
                    v54[3] = *(float *)((char *)v8 + v53 + 4);
                    if (!v53)
                      break;
                    v53 -= 8;
                    if (v50 <= *(v54 - 1))
                    {
                      v55 = (uint64_t)v8 + v53 + 8;
                      goto LABEL_77;
                    }
                  }
                  v55 = (uint64_t)v8;
LABEL_77:
                  *(float *)v55 = v52;
                  *(float *)(v55 + 4) = v50;
                }
                v45 = v49 + 2;
                v48 += 8;
              }
              while (v49 + 2 != a2);
            }
          }
          else if (!v47)
          {
            v86 = v8 + 1;
            do
            {
              v87 = v7[3];
              v88 = v7[1];
              v7 = v45;
              if (v87 > v88)
              {
                v89 = *v45;
                v90 = v86;
                do
                {
                  v90[1] = *(v90 - 1);
                  v90[2] = *v90;
                  v91 = *(v90 - 2);
                  v90 -= 2;
                }
                while (v87 > v91);
                v90[1] = v89;
                v90[2] = v87;
              }
              v45 = v7 + 2;
              v86 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &v8[2 * v59];
                if (2 * v58 + 2 < (uint64_t)v10 && v60[1] > v60[3])
                {
                  v60 += 2;
                  v59 = 2 * v58 + 2;
                }
                v61 = v60[1];
                v62 = v8[2 * v58 + 1];
                if (v61 <= v62)
                {
                  v63 = &v8[2 * v58];
                  v64 = *(_DWORD *)v63;
                  do
                  {
                    v65 = v63;
                    v63 = v60;
                    *v65 = *v60;
                    v65[1] = v61;
                    if (v56 < v59)
                      break;
                    v66 = 2 * v59;
                    v59 = (2 * v59) | 1;
                    v60 = &v8[2 * v59];
                    v67 = v66 + 2;
                    if (v67 < (uint64_t)v10 && v60[1] > v60[3])
                    {
                      v60 += 2;
                      v59 = v67;
                    }
                    v61 = v60[1];
                  }
                  while (v61 <= v62);
                  *(_DWORD *)v63 = v64;
                  v63[1] = v62;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v68 = (unint64_t)v9 >> 3;
            do
            {
              v69 = 0;
              v70 = *v8;
              v71 = *((_DWORD *)v8 + 1);
              v72 = v68 - 2;
              if (v68 < 2)
                v72 = v68 - 1;
              v73 = v72 >> 1;
              v74 = v8;
              do
              {
                v75 = v74;
                v74 += 2 * v69 + 2;
                v76 = 2 * v69;
                v69 = (2 * v69) | 1;
                v77 = v76 + 2;
                if (v77 < v68 && v74[1] > v74[3])
                {
                  v74 += 2;
                  v69 = v77;
                }
                *v75 = *v74;
                v75[1] = v74[1];
              }
              while (v69 <= v73);
              if (v74 == a2 - 2)
              {
                *v74 = v70;
                *((_DWORD *)v74 + 1) = v71;
              }
              else
              {
                *v74 = *(a2 - 2);
                v74[1] = *(a2 - 1);
                *(a2 - 2) = v70;
                *((_DWORD *)a2 - 1) = v71;
                v78 = (char *)v74 - (char *)v8 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = v8[2 * v79 + 1];
                  v81 = v74[1];
                  if (v80 > v81)
                  {
                    v82 = *(_DWORD *)v74;
                    do
                    {
                      v83 = v79;
                      v84 = v74;
                      v74 = &v8[2 * v83];
                      *v84 = *v74;
                      v84[1] = v80;
                      if (!v83)
                        break;
                      v79 = (v83 - 1) >> 1;
                      v80 = v8[2 * v79 + 1];
                    }
                    while (v80 > v81);
                    *(_DWORD *)v74 = v82;
                    v8[2 * v83 + 1] = v81;
                  }
                }
              }
              a2 -= 2;
            }
            while (v68-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
          v14 = *((_DWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_DWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) > v15)
            goto LABEL_12;
          if (v15 <= *(a2 - 1))
          {
            v32 = v7 + 2;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v33 = v32[1];
              v32 += 2;
            }
            while (v15 <= v33);
          }
          else
          {
            v30 = v7;
            do
            {
              v8 = v30 + 2;
              v31 = v30[3];
              v30 += 2;
            }
            while (v15 <= v31);
          }
          v34 = a2;
          if (v8 < a2)
          {
            v35 = a2;
            do
            {
              v34 = v35 - 2;
              v36 = *(v35 - 1);
              v35 -= 2;
            }
            while (v15 > v36);
          }
          v37 = *v7;
          while (v8 < v34)
          {
            v38 = *v8;
            *v8 = *v34;
            *v34 = v38;
            v39 = *((_DWORD *)v8 + 1);
            v8[1] = v34[1];
            *((_DWORD *)v34 + 1) = v39;
            do
            {
              v40 = v8[3];
              v8 += 2;
            }
            while (v15 <= v40);
            do
            {
              v41 = *(v34 - 1);
              v34 -= 2;
            }
            while (v15 > v41);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v37;
          *(v8 - 1) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = *v7;
        v17 = v7;
        do
        {
          v18 = v17;
          v17 += 2;
        }
        while (v18[3] > v15);
        v19 = a2;
        if (v18 == v7)
        {
          v22 = a2;
          while (v17 < v22)
          {
            v20 = v22 - 2;
            v23 = *(v22 - 1);
            v22 -= 2;
            if (v23 > v15)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *(v19 - 1);
            v19 -= 2;
          }
          while (v21 <= v15);
        }
LABEL_22:
        v8 = v17;
        if (v17 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *v8;
            *v8 = *v24;
            *v24 = v25;
            v26 = *((_DWORD *)v8 + 1);
            v8[1] = v24[1];
            *((_DWORD *)v24 + 1) = v26;
            do
            {
              v27 = v8[3];
              v8 += 2;
            }
            while (v27 > v15);
            do
            {
              v28 = *(v24 - 1);
              v24 -= 2;
            }
            while (v28 <= v15);
          }
          while (v8 < v24);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v16;
        *(v8 - 1) = v15;
        if (v17 < v20)
        {
LABEL_33:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v7, v8 - 2);
        result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 2;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      v8 = a2[1];
      v9 = result[1];
      if (v8 > v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      v11 = a3[1];
      if (v11 <= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  float *result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 > v10)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 > v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 > v16)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

float *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float *result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  if (v11 > v12)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    a4[1] = v11;
    a5[1] = v12;
    v14 = a4[1];
    v15 = a3[1];
    if (v14 > v15)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      a3[1] = v14;
      a4[1] = v15;
      v17 = a3[1];
      v18 = a2[1];
      if (v17 > v18)
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        a2[1] = v17;
        a3[1] = v18;
        v20 = a2[1];
        v21 = a1[1];
        if (v20 > v21)
        {
          v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
          a1[1] = v20;
          a2[1] = v21;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float v13;
  int v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 > v9[1])
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = (float *)((char *)a1 + v15);
        v16[6] = *(float *)((char *)a1 + v15 + 16);
        v16[7] = *(float *)((char *)a1 + v15 + 20);
        if (v15 == -16)
          break;
        v15 -= 8;
        if (v13 <= v16[3])
        {
          v17 = (uint64_t)a1 + v15 + 24;
          goto LABEL_12;
        }
      }
      v17 = (uint64_t)a1;
LABEL_12:
      *(_DWORD *)v17 = v14;
      *(float *)(v17 + 4) = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::__wrap_iter<std::pair<int,float> *>>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v3 = a2[1];
  v4 = a1[1];
  v5 = a3[1];
  if (v3 > v4)
  {
    v6 = *a1;
    if (v5 > v3)
    {
      *a1 = *a3;
      *a3 = v6;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    a1[1] = v3;
    a2[1] = v4;
    v11 = a3[1];
    if (v11 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v6;
    a2[1] = v11;
    a3[1] = v4;
    return 2;
  }
  if (v5 > v3)
  {
    v7 = *a2;
    *a2 = *a3;
    *a3 = v7;
    a2[1] = v5;
    a3[1] = v3;
    v8 = a2[1];
    v9 = a1[1];
    if (v8 <= v9)
      return 1;
    v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    a1[1] = v8;
    a2[1] = v9;
    return 2;
  }
  return 0;
}

char *std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

_QWORD *std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = *a2++;
      *result++ = v8;
    }
    v4[1] = result;
  }
  return result;
}

void sub_191550090(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float32_t VVector<float>::add<float>(float32x4_t **a1, float32x4_t **a2, int a3)
{
  int v3;
  float32x4_t *v4;
  float32x4_t *v5;
  int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int v11;
  uint64_t v12;
  float *f32;
  float *v14;
  float v15;

  v3 = a3 / 8;
  if (a3 >= 8)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a3 / 8;
    do
    {
      v7 = *v5;
      v8 = v5[1];
      v5 += 2;
      v9 = vaddq_f32(v8, v4[1]);
      v10 = vaddq_f32(v7, *v4);
      *v4 = v10;
      v4[1] = v9;
      v4 += 2;
      --v6;
    }
    while (v6);
  }
  v11 = 2 * v3;
  if (8 * v3 < a3)
  {
    v12 = a3 - (uint64_t)(v11 * 4);
    f32 = (*a1)[v11].f32;
    v14 = (*a2)[v11].f32;
    do
    {
      v15 = *v14++;
      v10.f32[0] = v15 + *f32;
      *f32++ = v10.f32[0];
      --v12;
    }
    while (v12);
  }
  return v10.f32[0];
}

void BatchNormalization<float>::targets()
{
  exitFramework(1);
}

uint64_t BatchNormalization<float>::inputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t BatchNormalization<float>::outputs(uint64_t a1)
{
  return a1 + 192;
}

void BatchNormalization<float>::deltas()
{
  exitFramework(1);
}

void BatchNormalization<float>::inputDeltas()
{
  exitFramework(1);
}

uint64_t BatchNormalization<float>::weightsAreNaN()
{
  return 0;
}

uint64_t BatchNormalization<float>::read(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  int v8;

  v6 = *(int *)(a2 + 72);
  v7 = (int *)(*(_QWORD *)a2 + v6);
  if ((unint64_t)v7 <= *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4)
  {
    v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8)
    exitFramework(3);
  VVector<float>::read((signed __int8 **)(a1 + 128), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x20, v8);
  VVector<float>::read((signed __int8 **)(a1 + 136), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x20, *(_DWORD *)(a1 + 44));
  VVector<float>::read((signed __int8 **)(a1 + 144), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x20, *(_DWORD *)(a1 + 44));
  return VVector<float>::read((signed __int8 **)(a1 + 152), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x20, *(_DWORD *)(a1 + 44));
}

void **BatchNormalization<float>::write(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int __ptr;

  __ptr = *(_DWORD *)(a1 + 44);
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  *a3 += 4;
  VVector<float>::write((void **)(a1 + 128), __stream, a3, 32, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((void **)(a1 + 136), __stream, a3, 32, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((void **)(a1 + 144), __stream, a3, 32, a5, *(_DWORD *)(a1 + 44));
  return VVector<float>::write((void **)(a1 + 152), __stream, a3, 32, a5, *(_DWORD *)(a1 + 44));
}

void BatchNormalization<float>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void *__p;
  char v106;

  std::string::basic_string[abi:ne180100]<0>(&__p, "BatchNormalization, from allocAll");
  std::vector<VVector<float>>::resize((char **)(a1 + 168), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 192), maxFeatureVectors);
  if (!*(_BYTE *)(a1 + 161))
  {
    v2 = *(unsigned int *)(a1 + 44);
    v3 = (void *)operator new[]();
    v4 = v3;
    if ((int)v2 >= 1)
      bzero(v3, 4 * v2);
    *(_QWORD *)(a1 + 128) = v4;
    v5 = *(unsigned int *)(a1 + 44);
    v6 = (void *)operator new[]();
    v7 = v6;
    if ((int)v5 >= 1)
      bzero(v6, 4 * v5);
    *(_QWORD *)(a1 + 136) = v7;
    v8 = *(unsigned int *)(a1 + 44);
    v9 = (void *)operator new[]();
    v10 = v9;
    if ((int)v8 >= 1)
      bzero(v9, 4 * v8);
    *(_QWORD *)(a1 + 144) = v10;
    v11 = *(unsigned int *)(a1 + 44);
    v12 = (void *)operator new[]();
    v13 = v12;
    if ((int)v11 >= 1)
      bzero(v12, 4 * v11);
    *(_QWORD *)(a1 + 152) = v13;
    v14 = *(_QWORD *)(a1 + 128);
    v16 = *(_QWORD **)(a1 + 296);
    v15 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v16 >= v15)
    {
      v18 = *(_QWORD *)(a1 + 288);
      v19 = ((uint64_t)v16 - v18) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        goto LABEL_120;
      v20 = v15 - v18;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v22);
      else
        v23 = 0;
      v24 = (_QWORD *)(v22 + 8 * v19);
      v25 = v22 + 8 * v23;
      *v24 = v14;
      v17 = v24 + 1;
      v27 = *(char **)(a1 + 288);
      v26 = *(char **)(a1 + 296);
      if (v26 != v27)
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v24 = v28;
        }
        while (v26 != v27);
        v26 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v24;
      *(_QWORD *)(a1 + 296) = v17;
      *(_QWORD *)(a1 + 304) = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v16 = v14;
      v17 = v16 + 1;
    }
    *(_QWORD *)(a1 + 296) = v17;
    v29 = *(_QWORD *)(a1 + 136);
    v30 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v17 >= v30)
    {
      v32 = *(_QWORD *)(a1 + 288);
      v33 = ((uint64_t)v17 - v32) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        goto LABEL_120;
      v34 = v30 - v32;
      v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1))
        v35 = v33 + 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
        v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36);
      else
        v37 = 0;
      v38 = (_QWORD *)(v36 + 8 * v33);
      v39 = v36 + 8 * v37;
      *v38 = v29;
      v31 = v38 + 1;
      v41 = *(char **)(a1 + 288);
      v40 = *(char **)(a1 + 296);
      if (v40 != v41)
      {
        do
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *--v38 = v42;
        }
        while (v40 != v41);
        v40 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v38;
      *(_QWORD *)(a1 + 296) = v31;
      *(_QWORD *)(a1 + 304) = v39;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v17 = v29;
      v31 = v17 + 1;
    }
    *(_QWORD *)(a1 + 296) = v31;
    v43 = *(_QWORD *)(a1 + 144);
    v44 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v31 >= v44)
    {
      v46 = *(_QWORD *)(a1 + 288);
      v47 = ((uint64_t)v31 - v46) >> 3;
      if ((unint64_t)(v47 + 1) >> 61)
        goto LABEL_120;
      v48 = v44 - v46;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
      else
        v51 = 0;
      v52 = (_QWORD *)(v50 + 8 * v47);
      v53 = v50 + 8 * v51;
      *v52 = v43;
      v45 = v52 + 1;
      v55 = *(char **)(a1 + 288);
      v54 = *(char **)(a1 + 296);
      if (v54 != v55)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *--v52 = v56;
        }
        while (v54 != v55);
        v54 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v52;
      *(_QWORD *)(a1 + 296) = v45;
      *(_QWORD *)(a1 + 304) = v53;
      if (v54)
        operator delete(v54);
    }
    else
    {
      *v31 = v43;
      v45 = v31 + 1;
    }
    *(_QWORD *)(a1 + 296) = v45;
    v57 = *(_QWORD *)(a1 + 152);
    v58 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v45 < v58)
    {
      *v45 = v57;
      v59 = v45 + 1;
LABEL_74:
      *(_QWORD *)(a1 + 296) = v59;
      goto LABEL_75;
    }
    v60 = *(_QWORD *)(a1 + 288);
    v61 = ((uint64_t)v45 - v60) >> 3;
    if (!((unint64_t)(v61 + 1) >> 61))
    {
      v62 = v58 - v60;
      v63 = v62 >> 2;
      if (v62 >> 2 <= (unint64_t)(v61 + 1))
        v63 = v61 + 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
        v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v64);
      else
        v65 = 0;
      v66 = (_QWORD *)(v64 + 8 * v61);
      v67 = v64 + 8 * v65;
      *v66 = v57;
      v59 = v66 + 1;
      v69 = *(char **)(a1 + 288);
      v68 = *(char **)(a1 + 296);
      if (v68 != v69)
      {
        do
        {
          v70 = *((_QWORD *)v68 - 1);
          v68 -= 8;
          *--v66 = v70;
        }
        while (v68 != v69);
        v68 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v66;
      *(_QWORD *)(a1 + 296) = v59;
      *(_QWORD *)(a1 + 304) = v67;
      if (v68)
        operator delete(v68);
      goto LABEL_74;
    }
LABEL_120:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_75:
  if (maxFeatureVectors >= 1)
  {
    v71 = 0;
    do
    {
      v72 = *(unsigned int *)(a1 + 44);
      v73 = (void *)operator new[]();
      v74 = v73;
      if ((int)v72 >= 1)
        bzero(v73, 4 * v72);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v71) = v74;
      v76 = *(_QWORD **)(a1 + 296);
      v75 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v76 >= v75)
      {
        v78 = *(_QWORD *)(a1 + 288);
        v79 = ((uint64_t)v76 - v78) >> 3;
        if ((unint64_t)(v79 + 1) >> 61)
          goto LABEL_120;
        v80 = v75 - v78;
        v81 = v80 >> 2;
        if (v80 >> 2 <= (unint64_t)(v79 + 1))
          v81 = v79 + 1;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
          v82 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v82 = v81;
        if (v82)
          v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v82);
        else
          v83 = 0;
        v84 = (_QWORD *)(v82 + 8 * v79);
        *v84 = v74;
        v77 = v84 + 1;
        v86 = *(char **)(a1 + 288);
        v85 = *(char **)(a1 + 296);
        if (v85 != v86)
        {
          do
          {
            v87 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *--v84 = v87;
          }
          while (v85 != v86);
          v85 = *(char **)(a1 + 288);
        }
        *(_QWORD *)(a1 + 288) = v84;
        *(_QWORD *)(a1 + 296) = v77;
        *(_QWORD *)(a1 + 304) = v82 + 8 * v83;
        if (v85)
          operator delete(v85);
      }
      else
      {
        *v76 = v74;
        v77 = v76 + 1;
      }
      *(_QWORD *)(a1 + 296) = v77;
      ++v71;
    }
    while (v71 < maxFeatureVectors);
    if (maxFeatureVectors >= 1)
    {
      v88 = 0;
      do
      {
        v89 = *(unsigned int *)(a1 + 44);
        v90 = (void *)operator new[]();
        v91 = v90;
        if ((int)v89 >= 1)
          bzero(v90, 4 * v89);
        *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v88) = v91;
        v93 = *(_QWORD **)(a1 + 296);
        v92 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v93 >= v92)
        {
          v95 = *(_QWORD *)(a1 + 288);
          v96 = ((uint64_t)v93 - v95) >> 3;
          if ((unint64_t)(v96 + 1) >> 61)
            goto LABEL_120;
          v97 = v92 - v95;
          v98 = v97 >> 2;
          if (v97 >> 2 <= (unint64_t)(v96 + 1))
            v98 = v96 + 1;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
            v99 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v99 = v98;
          if (v99)
            v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v99);
          else
            v100 = 0;
          v101 = (_QWORD *)(v99 + 8 * v96);
          *v101 = v91;
          v94 = v101 + 1;
          v103 = *(char **)(a1 + 288);
          v102 = *(char **)(a1 + 296);
          if (v102 != v103)
          {
            do
            {
              v104 = *((_QWORD *)v102 - 1);
              v102 -= 8;
              *--v101 = v104;
            }
            while (v102 != v103);
            v102 = *(char **)(a1 + 288);
          }
          *(_QWORD *)(a1 + 288) = v101;
          *(_QWORD *)(a1 + 296) = v94;
          *(_QWORD *)(a1 + 304) = v99 + 8 * v100;
          if (v102)
            operator delete(v102);
        }
        else
        {
          *v93 = v91;
          v94 = v93 + 1;
        }
        *(_QWORD *)(a1 + 296) = v94;
        ++v88;
      }
      while (v88 < maxFeatureVectors);
    }
  }
  if (v106 < 0)
    operator delete(__p);
}

void sub_1915509EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BatchNormalization<float>::cleanupAllBuffers(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = (_QWORD *)result;
  v3 = *(_QWORD *)(result + 288);
  v2 = *(_QWORD *)(result + 296);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(result + 296);
  }
  else
  {
    v4 = 0;
    do
    {
      result = *(_QWORD *)(v3 + 8 * v4);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C8052888210);
        v3 = v1[36];
        v2 = v1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v1[37] = v3;
  v1[22] = v1[21];
  v1[25] = v1[24];
  return result;
}

uint64_t BatchNormalization<float>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void BatchNormalization<float>::backward()
{
  exitFramework(5);
}

int *BatchNormalization<float>::forward(int *result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  float v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    v6 = result;
    v7 = 0;
    do
    {
      memmove(*(void **)(*((_QWORD *)v6 + 21) + 8 * v7), *(const void **)(*a2 + 8 * v7), 4 * v6[11]);
      v8 = v6[11];
      v9 = *(const void **)(*((_QWORD *)v6 + 21) + 8 * v7);
      if (v8 >= 1)
      {
        v10 = *((float *)v6 + 12);
        v11 = (float *)*((_QWORD *)v6 + 16);
        v12 = (float *)*((_QWORD *)v6 + 17);
        v13 = *(float **)(*((_QWORD *)v6 + 21) + 8 * v7);
        v14 = v6[11];
        v15 = (float *)*((_QWORD *)v6 + 18);
        v16 = (float *)*((_QWORD *)v6 + 19);
        do
        {
          v17 = *v11++;
          v18 = v17;
          v19 = *v12++;
          v20 = sqrtf(v10 + v19);
          v21 = *v15++;
          v22 = v21;
          v23 = *v16++;
          *v13 = v23 + (float)((float)((float)(*v13 - v18) / v20) * v22);
          ++v13;
          --v14;
        }
        while (v14);
      }
      result = (int *)memmove(*(void **)(*((_QWORD *)v6 + 24) + 8 * v7++), v9, 4 * v8);
    }
    while (v7 != v4);
  }
  return result;
}

_QWORD *BatchNormalization<float>::setMaster(_QWORD *a1, void *lpsrc)
{
  _QWORD *result;

  if (!result)
    __cxa_bad_cast();
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void BatchNormalization<float>::computeError()
{
  exitFramework(5);
}

void BatchNormalization<float>::log2Probability()
{
  exitFramework(5);
}

void BatchNormalization<float>::~BatchNormalization(uint64_t a1)
{
  BatchNormalization<float>::~BatchNormalization(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t BatchNormalization<float>::~BatchNormalization(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = off_1E2D567B8;
  v4 = a1 + 288;
  v2 = *(void **)(a1 + 288);
  v3 = *(void **)(v4 + 8);
  if (v3 == v2)
  {
    v2 = v3;
    if (v3)
    {
LABEL_7:
      *(_QWORD *)(a1 + 296) = v2;
      operator delete(v2);
    }
  }
  else
  {
    v5 = 0;
    do
    {
      if (*((_QWORD *)v2 + v5))
      {
        MEMORY[0x19401CD78](*((_QWORD *)v2 + v5), 0x1000C8052888210);
        v2 = *(void **)(a1 + 288);
        v3 = *(void **)(a1 + 296);
      }
      ++v5;
    }
    while (v5 < ((_BYTE *)v3 - (_BYTE *)v2) >> 3);
    if (v2)
      goto LABEL_7;
  }
  *(_QWORD *)(a1 + 216) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 224));
  v6 = *(void **)(a1 + 192);
  if (v6)
  {
    *(_QWORD *)(a1 + 200) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 168);
  if (v7)
  {
    *(_QWORD *)(a1 + 176) = v7;
    operator delete(v7);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

void **VVector<float>::write(void **result, FILE *__stream, int *a3, int a4, unsigned int a5, int a6)
{
  void **v9;
  int v10;
  int v11;
  float *v12;
  void *v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float *v19;
  _WORD *v20;
  unsigned int v21;
  int v22;
  int v23;
  float *v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  int v28;
  float *v29;
  _BYTE *v30;
  _BYTE *v31;
  void *__p[2];
  char v33;
  void *__ptr[2];
  char v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;

  if (a5 > 0x20 || ((1 << a5) & 0x100010100) == 0)
    exitFramework(23);
  v9 = result;
  if (a4 == 8)
  {
    if (a5 == 32)
    {
      if (!__stream)
        goto LABEL_77;
      v17 = *a3 & 0xF;
      if (*a3 <= 0)
        v17 = -(-*a3 & 0xF);
      if (v17 >= 15)
        v18 = 16;
      else
        v18 = 15 - v17;
      LOBYTE(__ptr[0]) = v18;
      fwrite(__ptr, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v18);
      if ((*(_BYTE *)a3 & 0xF) != 0)
        goto LABEL_78;
LABEL_37:
      v19 = (float *)*v9;
      std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
      std::string::basic_string[abi:ne180100]<0>(__p, "VVector");
      v37 = 0.0;
      v38 = 0.0;
      onlineStdMeanVar(v19, &v41, &v40, &v39, &v38, &v37, &v36, a6);
      if (v33 < 0)
        operator delete(__p[0]);
      if (v35 < 0)
        operator delete(__ptr[0]);
      v13 = (void *)operator new[]();
      if (a6 < 1)
        goto LABEL_44;
      v14 = 4 * a6;
      goto LABEL_43;
    }
LABEL_79:
    exitFramework(45);
  }
  if (a4 == 16)
  {
    if (a5 == 32)
    {
      if (!__stream)
        goto LABEL_77;
      v15 = *a3 & 0xF;
      if (*a3 <= 0)
        v15 = -(-*a3 & 0xF);
      if (v15 >= 15)
        v16 = 16;
      else
        v16 = 15 - v15;
      LOBYTE(__ptr[0]) = v16;
      fwrite(__ptr, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v16);
      if ((*(_BYTE *)a3 & 0xF) != 0)
        goto LABEL_78;
      goto LABEL_37;
    }
    goto LABEL_79;
  }
  if (a4 != 32)
    return result;
  switch(a5)
  {
    case 0x20u:
      if (__stream)
      {
        v10 = *a3 & 0xF;
        if (*a3 <= 0)
          v10 = -(-*a3 & 0xF);
        if (v10 >= 15)
          v11 = 16;
        else
          v11 = 15 - v10;
        LOBYTE(__ptr[0]) = v11;
        fwrite(__ptr, 1uLL, 1uLL, __stream);
        ++*a3;
        writeByteArray((size_t)__stream, a3, v11);
        if ((*(_BYTE *)a3 & 0xF) == 0)
        {
          v12 = (float *)*v9;
          std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
          std::string::basic_string[abi:ne180100]<0>(__p, "VVector");
          v37 = 0.0;
          v38 = 0.0;
          onlineStdMeanVar(v12, &v41, &v40, &v39, &v38, &v37, &v36, a6);
          if (v33 < 0)
            operator delete(__p[0]);
          if (v35 < 0)
            operator delete(__ptr[0]);
          v13 = (void *)operator new[]();
          if (a6 < 1)
            goto LABEL_44;
          v14 = 4 * a6;
LABEL_43:
          bzero(v13, v14);
LABEL_44:
          writeArray<float,float>(__stream, a3, *v9, a6);
          v20 = v13;
          v21 = 1384677904;
          return (void **)MEMORY[0x19401CD78](v20, v21 | 0x1000C8000000000);
        }
LABEL_78:
        exitFramework(17);
      }
      goto LABEL_77;
    case 8u:
      if (__stream)
      {
        v27 = *a3 & 0xF;
        if (*a3 <= 0)
          v27 = -(-*a3 & 0xF);
        if (v27 >= 15)
          v28 = 16;
        else
          v28 = 15 - v27;
        LOBYTE(__ptr[0]) = v28;
        fwrite(__ptr, 1uLL, 1uLL, __stream);
        ++*a3;
        writeByteArray((size_t)__stream, a3, v28);
        if ((*(_BYTE *)a3 & 0xF) == 0)
        {
          v29 = (float *)*v9;
          std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
          std::string::basic_string[abi:ne180100]<0>(__p, "VVector");
          v37 = 0.0;
          v38 = 0.0;
          onlineStdMeanVar(v29, &v41, &v40, &v39, &v38, &v37, &v36, a6);
          if (v33 < 0)
            operator delete(__p[0]);
          if (v35 < 0)
            operator delete(__ptr[0]);
          v30 = (_BYTE *)operator new[]();
          v31 = v30;
          if (a6 >= 1)
            bzero(v30, a6);
          writeArray<float,signed char>(__stream, a3, (float *)*v9, v31, a6);
          v20 = v31;
          v21 = 2004306212;
          return (void **)MEMORY[0x19401CD78](v20, v21 | 0x1000C8000000000);
        }
        goto LABEL_78;
      }
      goto LABEL_77;
    case 0x10u:
      if (__stream)
      {
        v22 = *a3 & 0xF;
        if (*a3 <= 0)
          v22 = -(-*a3 & 0xF);
        if (v22 >= 15)
          v23 = 16;
        else
          v23 = 15 - v22;
        LOBYTE(__ptr[0]) = v23;
        fwrite(__ptr, 1uLL, 1uLL, __stream);
        ++*a3;
        writeByteArray((size_t)__stream, a3, v23);
        if ((*(_BYTE *)a3 & 0xF) == 0)
        {
          v24 = (float *)*v9;
          std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
          std::string::basic_string[abi:ne180100]<0>(__p, "VVector");
          v37 = 0.0;
          v38 = 0.0;
          onlineStdMeanVar(v24, &v41, &v40, &v39, &v38, &v37, &v36, a6);
          if (v33 < 0)
            operator delete(__p[0]);
          if (v35 < 0)
            operator delete(__ptr[0]);
          v25 = (_WORD *)operator new[]();
          v26 = v25;
          if (a6 >= 1)
            bzero(v25, 2 * a6);
          writeArray<float,short>(__stream, a3, (float *)*v9, v26, a6);
          v20 = v26;
          v21 = -1107623837;
          return (void **)MEMORY[0x19401CD78](v20, v21 | 0x1000C8000000000);
        }
        goto LABEL_78;
      }
LABEL_77:
      exitFramework(9);
  }
  return result;
}

void sub_19155136C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VVector<float>::read(signed __int8 **a1, uint64_t a2, int a3, _BOOL4 a4, signed __int8 **a5, int a6)
{
  int v7;
  char v11;
  int v12;
  uint64_t v13;
  signed __int8 *v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  signed __int8 *v18;
  uint64_t v19;
  int v20;

  v20 = a6;
  if (!a2)
    goto LABEL_24;
  v7 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    v11 = *(_BYTE *)(a2 + 72);
  }
  else
  {
    v11 = *(_BYTE *)a1;
  }
  if ((v11 & 0xF) != 0)
    exitFramework(19);
  if (a4)
  {
    *a1 = 0;
    if (v7 == 8)
    {
      v17 = *(int *)(a2 + 72);
      v18 = (signed __int8 *)(*(_QWORD *)a2 + v17);
      *a1 = v18;
      *(_DWORD *)(a2 + 72) = v17 + a6;
      result = a6;
      if (!v18)
        goto LABEL_24;
    }
    else
    {
      if (v7 == 16)
      {
        v12 = 2 * a6;
        v19 = *(int *)(a2 + 72);
        v14 = (signed __int8 *)(*(_QWORD *)a2 + v19);
        *a1 = v14;
        v15 = v19 + 2 * a6;
      }
      else
      {
        if (v7 != 32)
          exitFramework(46);
        v12 = 4 * a6;
        v13 = *(int *)(a2 + 72);
        v14 = (signed __int8 *)(*(_QWORD *)a2 + v13);
        *a1 = v14;
        v15 = v13 + 4 * a6;
      }
      *(_DWORD *)(a2 + 72) = v15;
      result = v12;
      if (!v14)
        goto LABEL_24;
    }
  }
  else
  {
    switch(v7)
    {
      case 8:
        result = ReadOnlyFile::readInt8Array((ReadOnlyFile *)a2, *a1, &v20, a4, a5);
        break;
      case 16:
        result = ReadOnlyFile::readInt16Array((ReadOnlyFile *)a2, (__int16 *)*a1, &v20, a4, (__int16 **)a5);
        break;
      case 32:
        result = ReadOnlyFile::readFloatArray((ReadOnlyFile *)a2, (float *)*a1, &v20, a4, (float **)a5);
        break;
      default:
        exitFramework(45);
    }
    if (!*a1)
LABEL_24:
      exitFramework(9);
  }
  if (!result)
    goto LABEL_24;
  return result;
}

uint64_t *readPadding(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  int v5;
  int v6;

  v1 = *((int *)result + 18);
  v2 = *result;
  v3 = (unsigned __int8 *)(*result + v1);
  v4 = *result + result[1] - 1;
  if ((unint64_t)v3 <= v4)
  {
    v5 = *v3;
    v6 = v1 + 1;
    for (*((_DWORD *)result + 18) = v6; v5; --v5)
    {
      if (v2 + v6 <= v4)
        *((_DWORD *)result + 18) = ++v6;
    }
  }
  return result;
}

uint64_t ReadOnlyFile::readFloatArray(ReadOnlyFile *this, float *a2, int *a3, BOOL a4, float **a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  float *v10;
  float v11;

  v5 = *a3;
  if (*a3 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)this;
    v8 = *(_QWORD *)this + *((_QWORD *)this + 1) - 4;
    v9 = *((_DWORD *)this + 18);
    do
    {
      v10 = (float *)(v7 + v9);
      if ((unint64_t)v10 > v8)
        exitFramework(25);
      v11 = *v10;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      a2[v6++] = v11;
    }
    while (v6 < *a3);
  }
  return 4 * v5;
}

uint64_t ReadOnlyFile::readInt16Array(ReadOnlyFile *this, __int16 *a2, int *a3, BOOL a4, __int16 **a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  __int16 *v10;
  __int16 v11;

  v5 = *a3;
  if (*a3 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)this;
    v8 = *(_QWORD *)this + *((_QWORD *)this + 1) - 4;
    v9 = *((_DWORD *)this + 18);
    do
    {
      v10 = (__int16 *)(v7 + v9 + (int)v6);
      if ((unint64_t)v10 > v8)
        exitFramework(25);
      v11 = *v10;
      *((_DWORD *)this + 18) = v9 + v6 + 1;
      a2[v6++] = v11;
    }
    while (v6 < *a3);
  }
  return 2 * v5;
}

uint64_t ReadOnlyFile::readInt8Array(ReadOnlyFile *this, signed __int8 *a2, const int *a3, BOOL a4, signed __int8 **a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  signed __int8 *v9;
  signed __int8 v10;

  result = *a3;
  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *((int *)this + 18);
      v9 = (signed __int8 *)(*(_QWORD *)this + v8);
      if ((unint64_t)v9 > *(_QWORD *)this + *((_QWORD *)this + 1) - 1)
        exitFramework(25);
      v10 = *v9;
      *((_DWORD *)this + 18) = v8 + 1;
      a2[v7++] = v10;
    }
    while (v7 < *a3);
  }
  return result;
}

uint64_t EstimatorScalar<float>::EstimatorScalar(uint64_t a1, __int128 *a2, int a3, int a4, float a5)
{
  __int128 v6;
  _QWORD *v7;
  int v8;
  void *v9;

  *(float *)(a1 + 8) = a5;
  *(_QWORD *)a1 = off_1E2D55C08;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v6;
  }
  *(_BYTE *)(a1 + 56) = 1;
  v7 = (_QWORD *)operator new();
  v8 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
  v9 = (void *)operator new[]();
  *v7 = v9;
  bzero(v9, 4 * v8);
  *(_QWORD *)(a1 + 24) = v7;
  return a1;
}

void sub_191551780(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x19401CD90](v3, 0x80C40B8603338);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t EstimatorADAM<float>::EstimatorADAM(uint64_t a1, __int128 *a2, int a3, int a4, float a5, float a6, double a7)
{
  std::string *v10;
  __int128 v11;

  *(_QWORD *)a1 = off_1E2D4D6C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(float *)(a1 + 20) = a5;
  *(float *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 28) = 841731191;
  *(double *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 60) = a4;
  v10 = (std::string *)(a1 + 136);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    a6 = *(float *)(a1 + 24);
    a7 = *(double *)(a1 + 32);
  }
  else
  {
    v11 = *a2;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_BYTE *)(a1 + 160) = 1;
  *(_DWORD *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 60) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(float *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a7;
  *(_DWORD *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

uint64_t EstimatorAdaMax<float>::EstimatorAdaMax(uint64_t a1, __int128 *a2, int a3, int a4, float a5, float a6, double a7)
{
  float v10;
  std::string *v11;
  __int128 v12;

  *(_QWORD *)a1 = off_1E2D55BA0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(float *)(a1 + 24) = a5;
  *(float *)(a1 + 28) = a6;
  *(_DWORD *)(a1 + 32) = 841731191;
  v10 = a7;
  *(float *)(a1 + 36) = v10;
  v11 = (std::string *)(a1 + 120);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    a6 = *(float *)(a1 + 28);
    v10 = *(float *)(a1 + 36);
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_BYTE *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(float *)(a1 + 40) = a6;
  *(float *)(a1 + 44) = v10;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

void GRU<float>::init(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  _QWORD *v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unsigned int v182;
  _BYTE *v183;
  int v184;
  void *v185;
  _QWORD *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  int v210;
  void *v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  int v226;
  void *v227;
  _QWORD *v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  unsigned int v242;
  void *v243;
  _QWORD *v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  unsigned int v258;
  void *v259;
  _QWORD *v260;
  unint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unsigned int v274;
  void *v275;
  _QWORD *v276;
  unint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  void *v292;
  _QWORD *v293;
  unint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  unint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  void *v310;
  _QWORD *v311;
  unint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  char *v321;
  char *v322;
  uint64_t v323;
  std::vector<int>::size_type v324;
  uint64_t v325;
  void *v326;
  void *v327;
  _QWORD *v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  char *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  void *v343;
  _QWORD *v344;
  unint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  void *v359;
  _QWORD *v360;
  unint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  char *v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  void *v375;
  _QWORD *v376;
  unint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  _QWORD *v385;
  char *v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  void *v391;
  _QWORD *v392;
  unint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  char *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  void *v406;
  void *v407;
  _QWORD *v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  char *v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  void *v423;
  _QWORD *v424;
  unint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  char *v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  void *v438;
  void *v439;
  _QWORD *v440;
  unint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  char *v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  void *v454;
  void *v455;
  _QWORD *v456;
  unint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  char *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  void *v470;
  void *v471;
  _QWORD *v472;
  unint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  char *v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  void *v486;
  void *v487;
  _QWORD *v488;
  unint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  char *v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  void *v502;
  void *v503;
  _QWORD *v504;
  unint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  _QWORD *v513;
  char *v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  void *v518;
  void *v519;
  _QWORD *v520;
  unint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  _QWORD *v529;
  char *v530;
  char *v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  void *v535;
  _QWORD *v536;
  unint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  _QWORD *v545;
  char *v546;
  char *v547;
  uint64_t v548;
  _QWORD *v549;
  unint64_t v550;
  char *v551;
  char *v552;
  uint64_t v553;
  uint64_t v554;
  _QWORD *v555;
  unint64_t v556;
  _QWORD *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  _QWORD *v564;
  unint64_t v565;
  char *v566;
  char *v567;
  uint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  unint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  _QWORD *v579;
  unint64_t v580;
  char *v581;
  char *v582;
  uint64_t v583;
  _BYTE *v584;
  uint64_t v585;
  _QWORD *v586;
  unint64_t v587;
  _QWORD *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  _QWORD *v595;
  unint64_t v596;
  char *v597;
  char *v598;
  uint64_t v599;
  uint64_t v600;
  _QWORD *v601;
  unint64_t v602;
  _QWORD *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  uint64_t v609;
  _QWORD *v610;
  unint64_t v611;
  char *v612;
  char *v613;
  uint64_t v614;
  uint64_t v615;
  _QWORD *v616;
  unint64_t v617;
  _QWORD *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  uint64_t v624;
  _QWORD *v625;
  unint64_t v626;
  char *v627;
  char *v628;
  uint64_t v629;
  __int128 v630[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1216) = v4;
  v5 = *(_QWORD **)(a1 + 2048);
  v6 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(a1 + 2040);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_707;
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = v4;
    v7 = v14 + 1;
    v16 = *(char **)(a1 + 2048);
    v17 = *(char **)(a1 + 2040);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v14;
    *(_QWORD *)(a1 + 2048) = v7;
    *(_QWORD *)(a1 + 2056) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = v4;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v7;
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  v21 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  *(_QWORD *)(a1 + 1224) = v21;
  v22 = *(_QWORD **)(a1 + 2048);
  v23 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v22 >= v23)
  {
    v25 = *(_QWORD *)(a1 + 2040);
    v26 = ((uint64_t)v22 - v25) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      goto LABEL_707;
    v27 = v23 - v25;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    else
      v30 = 0;
    v31 = (_QWORD *)(v29 + 8 * v26);
    v32 = v29 + 8 * v30;
    *v31 = v21;
    v24 = v31 + 1;
    v33 = *(char **)(a1 + 2048);
    v34 = *(char **)(a1 + 2040);
    if (v33 != v34)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
      v33 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v31;
    *(_QWORD *)(a1 + 2048) = v24;
    *(_QWORD *)(a1 + 2056) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v22 = v21;
    v24 = v22 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v24;
  v36 = *(unsigned int *)(a1 + 52);
  v37 = (void *)operator new[]();
  v38 = v37;
  if ((int)v36 >= 1)
    bzero(v37, 4 * v36);
  *(_QWORD *)(a1 + 1232) = v38;
  v39 = *(_QWORD **)(a1 + 2048);
  v40 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v39 >= v40)
  {
    v42 = *(_QWORD *)(a1 + 2040);
    v43 = ((uint64_t)v39 - v42) >> 3;
    if ((unint64_t)(v43 + 1) >> 61)
      goto LABEL_707;
    v44 = v40 - v42;
    v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1))
      v45 = v43 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v46);
    else
      v47 = 0;
    v48 = (_QWORD *)(v46 + 8 * v43);
    v49 = v46 + 8 * v47;
    *v48 = v38;
    v41 = v48 + 1;
    v50 = *(char **)(a1 + 2048);
    v51 = *(char **)(a1 + 2040);
    if (v50 != v51)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v52;
      }
      while (v50 != v51);
      v50 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v48;
    *(_QWORD *)(a1 + 2048) = v41;
    *(_QWORD *)(a1 + 2056) = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v39 = v38;
    v41 = v39 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v41;
  if (*(_BYTE *)(a1 + 42) || (v53 = *(unsigned __int8 *)(a1 + 2088), *(_BYTE *)(a1 + 2088)))
  {
    v54 = 3;
    v53 = 6;
  }
  else
  {
    v54 = 0;
  }
  if (!*(_DWORD *)(a1 + 2036))
  {
    v55 = *(_QWORD *)(a1 + 2096);
    if (v55 && (v56 = *(_DWORD *)(v55 + 40), v56 >= 1))
    {
      if (v56 == 6)
      {
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(v55 + 112 + 8 * v53);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(v55 + 112 + 8 * (v53 | 1));
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(v55 + 112 + 8 * (v53 + 2));
      }
      else
      {
        if (v56 != 4)
          exitFramework(45);
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(v55 + 8 * v53 + 112);
      }
      v61 = v55 + 112;
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(v61 + 8 * (v53 + 3));
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(v61 + 8 * (v53 + 4));
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(v61 + 8 * (v53 + 5));
    }
    else if (!*(_BYTE *)(a1 + 2033))
    {
      MMatrix<float>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v57 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 232) = *(_QWORD *)&v630[0];
      v58 = *(_QWORD **)(a1 + 2072);
      v59 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v58 >= v59)
      {
        v62 = *(_QWORD *)(a1 + 2064);
        v63 = ((uint64_t)v58 - v62) >> 3;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_707;
        v64 = v59 - v62;
        v65 = v64 >> 2;
        if (v64 >> 2 <= (unint64_t)(v63 + 1))
          v65 = v63 + 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
          v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v66);
        else
          v67 = 0;
        v68 = (_QWORD *)(v66 + 8 * v63);
        v69 = v66 + 8 * v67;
        *v68 = v57;
        v60 = v68 + 1;
        v70 = *(char **)(a1 + 2072);
        v71 = *(char **)(a1 + 2064);
        if (v70 != v71)
        {
          do
          {
            v72 = *((_QWORD *)v70 - 1);
            v70 -= 8;
            *--v68 = v72;
          }
          while (v70 != v71);
          v70 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v68;
        *(_QWORD *)(a1 + 2072) = v60;
        *(_QWORD *)(a1 + 2080) = v69;
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v58 = v57;
        v60 = v58 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v60;
      MMatrix<float>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v73 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 240) = *(_QWORD *)&v630[0];
      v74 = *(_QWORD **)(a1 + 2072);
      v75 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v74 >= v75)
      {
        v77 = *(_QWORD *)(a1 + 2064);
        v78 = ((uint64_t)v74 - v77) >> 3;
        if ((unint64_t)(v78 + 1) >> 61)
          goto LABEL_707;
        v79 = v75 - v77;
        v80 = v79 >> 2;
        if (v79 >> 2 <= (unint64_t)(v78 + 1))
          v80 = v78 + 1;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
          v81 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v81 = v80;
        if (v81)
          v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v81);
        else
          v82 = 0;
        v83 = (_QWORD *)(v81 + 8 * v78);
        v84 = v81 + 8 * v82;
        *v83 = v73;
        v76 = v83 + 1;
        v85 = *(char **)(a1 + 2072);
        v86 = *(char **)(a1 + 2064);
        if (v85 != v86)
        {
          do
          {
            v87 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *--v83 = v87;
          }
          while (v85 != v86);
          v85 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v83;
        *(_QWORD *)(a1 + 2072) = v76;
        *(_QWORD *)(a1 + 2080) = v84;
        if (v85)
          operator delete(v85);
      }
      else
      {
        *v74 = v73;
        v76 = v74 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v76;
      MMatrix<float>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v88 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 248) = *(_QWORD *)&v630[0];
      v89 = *(_QWORD **)(a1 + 2072);
      v90 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v89 >= v90)
      {
        v92 = *(_QWORD *)(a1 + 2064);
        v93 = ((uint64_t)v89 - v92) >> 3;
        if ((unint64_t)(v93 + 1) >> 61)
          goto LABEL_707;
        v94 = v90 - v92;
        v95 = v94 >> 2;
        if (v94 >> 2 <= (unint64_t)(v93 + 1))
          v95 = v93 + 1;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
          v96 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v96 = v95;
        if (v96)
          v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v96);
        else
          v97 = 0;
        v98 = (_QWORD *)(v96 + 8 * v93);
        v99 = v96 + 8 * v97;
        *v98 = v88;
        v91 = v98 + 1;
        v100 = *(char **)(a1 + 2072);
        v101 = *(char **)(a1 + 2064);
        if (v100 != v101)
        {
          do
          {
            v102 = *((_QWORD *)v100 - 1);
            v100 -= 8;
            *--v98 = v102;
          }
          while (v100 != v101);
          v100 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v98;
        *(_QWORD *)(a1 + 2072) = v91;
        *(_QWORD *)(a1 + 2080) = v99;
        if (v100)
          operator delete(v100);
      }
      else
      {
        *v89 = v88;
        v91 = v89 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v91;
      MMatrix<float>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v103 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 256) = *(_QWORD *)&v630[0];
      v104 = *(_QWORD **)(a1 + 2072);
      v105 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v104 >= v105)
      {
        v107 = *(_QWORD *)(a1 + 2064);
        v108 = ((uint64_t)v104 - v107) >> 3;
        if ((unint64_t)(v108 + 1) >> 61)
          goto LABEL_707;
        v109 = v105 - v107;
        v110 = v109 >> 2;
        if (v109 >> 2 <= (unint64_t)(v108 + 1))
          v110 = v108 + 1;
        if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
          v111 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v111 = v110;
        if (v111)
          v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v111);
        else
          v112 = 0;
        v113 = (_QWORD *)(v111 + 8 * v108);
        v114 = v111 + 8 * v112;
        *v113 = v103;
        v106 = v113 + 1;
        v115 = *(char **)(a1 + 2072);
        v116 = *(char **)(a1 + 2064);
        if (v115 != v116)
        {
          do
          {
            v117 = *((_QWORD *)v115 - 1);
            v115 -= 8;
            *--v113 = v117;
          }
          while (v115 != v116);
          v115 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v113;
        *(_QWORD *)(a1 + 2072) = v106;
        *(_QWORD *)(a1 + 2080) = v114;
        if (v115)
          operator delete(v115);
      }
      else
      {
        *v104 = v103;
        v106 = v104 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v106;
      MMatrix<float>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v118 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 264) = *(_QWORD *)&v630[0];
      v119 = *(_QWORD **)(a1 + 2072);
      v120 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v119 >= v120)
      {
        v122 = *(_QWORD *)(a1 + 2064);
        v123 = ((uint64_t)v119 - v122) >> 3;
        if ((unint64_t)(v123 + 1) >> 61)
          goto LABEL_707;
        v124 = v120 - v122;
        v125 = v124 >> 2;
        if (v124 >> 2 <= (unint64_t)(v123 + 1))
          v125 = v123 + 1;
        if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
          v126 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v126 = v125;
        if (v126)
          v126 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v126);
        else
          v127 = 0;
        v128 = (_QWORD *)(v126 + 8 * v123);
        v129 = v126 + 8 * v127;
        *v128 = v118;
        v121 = v128 + 1;
        v130 = *(char **)(a1 + 2072);
        v131 = *(char **)(a1 + 2064);
        if (v130 != v131)
        {
          do
          {
            v132 = *((_QWORD *)v130 - 1);
            v130 -= 8;
            *--v128 = v132;
          }
          while (v130 != v131);
          v130 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v128;
        *(_QWORD *)(a1 + 2072) = v121;
        *(_QWORD *)(a1 + 2080) = v129;
        if (v130)
          operator delete(v130);
      }
      else
      {
        *v119 = v118;
        v121 = v119 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v121;
      MMatrix<float>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v133 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 272) = *(_QWORD *)&v630[0];
      v134 = *(_QWORD **)(a1 + 2072);
      v135 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v134 >= v135)
      {
        v137 = *(_QWORD *)(a1 + 2064);
        v138 = ((uint64_t)v134 - v137) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_707;
        v139 = v135 - v137;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v141);
        else
          v142 = 0;
        v143 = (_QWORD *)(v141 + 8 * v138);
        v144 = v141 + 8 * v142;
        *v143 = v133;
        v136 = v143 + 1;
        v145 = *(char **)(a1 + 2072);
        v146 = *(char **)(a1 + 2064);
        if (v145 != v146)
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v143 = v147;
          }
          while (v145 != v146);
          v145 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v143;
        *(_QWORD *)(a1 + 2072) = v136;
        *(_QWORD *)(a1 + 2080) = v144;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v134 = v133;
        v136 = v134 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v136;
    }
    if (!*(_BYTE *)(a1 + 2033))
    {
      v183 = *(_BYTE **)(a1 + 2096);
      if (v183)
      {
        if (v183[244] && v183[245])
        {
          *(_QWORD *)(a1 + 280) = *(_QWORD *)&v183[8 * v54 + 248];
          *(_QWORD *)(a1 + 288) = *(_QWORD *)&v183[8 * v54 + 256];
          *(_QWORD *)(a1 + 296) = *(_QWORD *)&v183[8 * v54 + 264];
        }
        else
        {
          VVector<float>::VVector(v630, *(_DWORD *)(a1 + 52), 1);
          v195 = *(_QWORD *)&v630[0];
          *(_QWORD *)(a1 + 280) = *(_QWORD *)&v630[0];
          v196 = *(_QWORD **)(a1 + 2072);
          v197 = *(_QWORD *)(a1 + 2080);
          if ((unint64_t)v196 >= v197)
          {
            v199 = *(_QWORD *)(a1 + 2064);
            v200 = ((uint64_t)v196 - v199) >> 3;
            if ((unint64_t)(v200 + 1) >> 61)
              goto LABEL_707;
            v201 = v197 - v199;
            v202 = v201 >> 2;
            if (v201 >> 2 <= (unint64_t)(v200 + 1))
              v202 = v200 + 1;
            if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
              v203 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v203 = v202;
            if (v203)
              v203 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v203);
            else
              v204 = 0;
            v549 = (_QWORD *)(v203 + 8 * v200);
            v550 = v203 + 8 * v204;
            *v549 = v195;
            v198 = v549 + 1;
            v551 = *(char **)(a1 + 2072);
            v552 = *(char **)(a1 + 2064);
            if (v551 != v552)
            {
              do
              {
                v553 = *((_QWORD *)v551 - 1);
                v551 -= 8;
                *--v549 = v553;
              }
              while (v551 != v552);
              v551 = *(char **)(a1 + 2064);
            }
            *(_QWORD *)(a1 + 2064) = v549;
            *(_QWORD *)(a1 + 2072) = v198;
            *(_QWORD *)(a1 + 2080) = v550;
            if (v551)
              operator delete(v551);
          }
          else
          {
            *v196 = v195;
            v198 = v196 + 1;
          }
          *(_QWORD *)(a1 + 2072) = v198;
          VVector<float>::VVector(v630, *(_DWORD *)(a1 + 52), 1);
          v554 = *(_QWORD *)&v630[0];
          *(_QWORD *)(a1 + 288) = *(_QWORD *)&v630[0];
          v555 = *(_QWORD **)(a1 + 2072);
          v556 = *(_QWORD *)(a1 + 2080);
          if ((unint64_t)v555 >= v556)
          {
            v558 = *(_QWORD *)(a1 + 2064);
            v559 = ((uint64_t)v555 - v558) >> 3;
            if ((unint64_t)(v559 + 1) >> 61)
              goto LABEL_707;
            v560 = v556 - v558;
            v561 = v560 >> 2;
            if (v560 >> 2 <= (unint64_t)(v559 + 1))
              v561 = v559 + 1;
            if ((unint64_t)v560 >= 0x7FFFFFFFFFFFFFF8)
              v562 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v562 = v561;
            if (v562)
              v562 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v562);
            else
              v563 = 0;
            v564 = (_QWORD *)(v562 + 8 * v559);
            v565 = v562 + 8 * v563;
            *v564 = v554;
            v557 = v564 + 1;
            v566 = *(char **)(a1 + 2072);
            v567 = *(char **)(a1 + 2064);
            if (v566 != v567)
            {
              do
              {
                v568 = *((_QWORD *)v566 - 1);
                v566 -= 8;
                *--v564 = v568;
              }
              while (v566 != v567);
              v566 = *(char **)(a1 + 2064);
            }
            *(_QWORD *)(a1 + 2064) = v564;
            *(_QWORD *)(a1 + 2072) = v557;
            *(_QWORD *)(a1 + 2080) = v565;
            if (v566)
              operator delete(v566);
          }
          else
          {
            *v555 = v554;
            v557 = v555 + 1;
          }
          *(_QWORD *)(a1 + 2072) = v557;
          VVector<float>::VVector(v630, *(_DWORD *)(a1 + 52), 1);
          v569 = *(_QWORD *)&v630[0];
          *(_QWORD *)(a1 + 296) = *(_QWORD *)&v630[0];
          v570 = *(_QWORD **)(a1 + 2072);
          v571 = *(_QWORD *)(a1 + 2080);
          if ((unint64_t)v570 >= v571)
          {
            v573 = *(_QWORD *)(a1 + 2064);
            v574 = ((uint64_t)v570 - v573) >> 3;
            if ((unint64_t)(v574 + 1) >> 61)
              goto LABEL_707;
            v575 = v571 - v573;
            v576 = v575 >> 2;
            if (v575 >> 2 <= (unint64_t)(v574 + 1))
              v576 = v574 + 1;
            if ((unint64_t)v575 >= 0x7FFFFFFFFFFFFFF8)
              v577 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v577 = v576;
            if (v577)
              v577 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v577);
            else
              v578 = 0;
            v579 = (_QWORD *)(v577 + 8 * v574);
            v580 = v577 + 8 * v578;
            *v579 = v569;
            v572 = v579 + 1;
            v581 = *(char **)(a1 + 2072);
            v582 = *(char **)(a1 + 2064);
            if (v581 != v582)
            {
              do
              {
                v583 = *((_QWORD *)v581 - 1);
                v581 -= 8;
                *--v579 = v583;
              }
              while (v581 != v582);
              v581 = *(char **)(a1 + 2064);
            }
            *(_QWORD *)(a1 + 2064) = v579;
            *(_QWORD *)(a1 + 2072) = v572;
            *(_QWORD *)(a1 + 2080) = v580;
            if (v581)
              operator delete(v581);
          }
          else
          {
            *v570 = v569;
            v572 = v570 + 1;
          }
          *(_QWORD *)(a1 + 2072) = v572;
          v183 = *(_BYTE **)(a1 + 2096);
        }
        if (v183[376])
        {
          v584 = v183 + 384;
          *(_QWORD *)(a1 + 304) = *(_QWORD *)&v584[8 * v54];
          *(_QWORD *)(a1 + 312) = *(_QWORD *)&v584[8 * v54 + 8];
          *(_QWORD *)(a1 + 320) = *(_QWORD *)&v584[8 * v54 + 16];
        }
        else
        {
          VVector<float>::VVector(v630, *(_DWORD *)(a1 + 52), 1);
          v585 = *(_QWORD *)&v630[0];
          *(_QWORD *)(a1 + 304) = *(_QWORD *)&v630[0];
          v586 = *(_QWORD **)(a1 + 2072);
          v587 = *(_QWORD *)(a1 + 2080);
          if ((unint64_t)v586 >= v587)
          {
            v589 = *(_QWORD *)(a1 + 2064);
            v590 = ((uint64_t)v586 - v589) >> 3;
            if ((unint64_t)(v590 + 1) >> 61)
              goto LABEL_707;
            v591 = v587 - v589;
            v592 = v591 >> 2;
            if (v591 >> 2 <= (unint64_t)(v590 + 1))
              v592 = v590 + 1;
            if ((unint64_t)v591 >= 0x7FFFFFFFFFFFFFF8)
              v593 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v593 = v592;
            if (v593)
              v593 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v593);
            else
              v594 = 0;
            v595 = (_QWORD *)(v593 + 8 * v590);
            v596 = v593 + 8 * v594;
            *v595 = v585;
            v588 = v595 + 1;
            v597 = *(char **)(a1 + 2072);
            v598 = *(char **)(a1 + 2064);
            if (v597 != v598)
            {
              do
              {
                v599 = *((_QWORD *)v597 - 1);
                v597 -= 8;
                *--v595 = v599;
              }
              while (v597 != v598);
              v597 = *(char **)(a1 + 2064);
            }
            *(_QWORD *)(a1 + 2064) = v595;
            *(_QWORD *)(a1 + 2072) = v588;
            *(_QWORD *)(a1 + 2080) = v596;
            if (v597)
              operator delete(v597);
          }
          else
          {
            *v586 = v585;
            v588 = v586 + 1;
          }
          *(_QWORD *)(a1 + 2072) = v588;
          VVector<float>::VVector(v630, *(_DWORD *)(a1 + 52), 1);
          v600 = *(_QWORD *)&v630[0];
          *(_QWORD *)(a1 + 312) = *(_QWORD *)&v630[0];
          v601 = *(_QWORD **)(a1 + 2072);
          v602 = *(_QWORD *)(a1 + 2080);
          if ((unint64_t)v601 >= v602)
          {
            v604 = *(_QWORD *)(a1 + 2064);
            v605 = ((uint64_t)v601 - v604) >> 3;
            if ((unint64_t)(v605 + 1) >> 61)
              goto LABEL_707;
            v606 = v602 - v604;
            v607 = v606 >> 2;
            if (v606 >> 2 <= (unint64_t)(v605 + 1))
              v607 = v605 + 1;
            if ((unint64_t)v606 >= 0x7FFFFFFFFFFFFFF8)
              v608 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v608 = v607;
            if (v608)
              v608 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v608);
            else
              v609 = 0;
            v610 = (_QWORD *)(v608 + 8 * v605);
            v611 = v608 + 8 * v609;
            *v610 = v600;
            v603 = v610 + 1;
            v612 = *(char **)(a1 + 2072);
            v613 = *(char **)(a1 + 2064);
            if (v612 != v613)
            {
              do
              {
                v614 = *((_QWORD *)v612 - 1);
                v612 -= 8;
                *--v610 = v614;
              }
              while (v612 != v613);
              v612 = *(char **)(a1 + 2064);
            }
            *(_QWORD *)(a1 + 2064) = v610;
            *(_QWORD *)(a1 + 2072) = v603;
            *(_QWORD *)(a1 + 2080) = v611;
            if (v612)
              operator delete(v612);
          }
          else
          {
            *v601 = v600;
            v603 = v601 + 1;
          }
          *(_QWORD *)(a1 + 2072) = v603;
          VVector<float>::VVector(v630, *(_DWORD *)(a1 + 52), 1);
          v615 = *(_QWORD *)&v630[0];
          *(_QWORD *)(a1 + 320) = *(_QWORD *)&v630[0];
          v616 = *(_QWORD **)(a1 + 2072);
          v617 = *(_QWORD *)(a1 + 2080);
          if ((unint64_t)v616 >= v617)
          {
            v619 = *(_QWORD *)(a1 + 2064);
            v620 = ((uint64_t)v616 - v619) >> 3;
            if ((unint64_t)(v620 + 1) >> 61)
              goto LABEL_707;
            v621 = v617 - v619;
            v622 = v621 >> 2;
            if (v621 >> 2 <= (unint64_t)(v620 + 1))
              v622 = v620 + 1;
            if ((unint64_t)v621 >= 0x7FFFFFFFFFFFFFF8)
              v623 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v623 = v622;
            if (v623)
              v623 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v623);
            else
              v624 = 0;
            v625 = (_QWORD *)(v623 + 8 * v620);
            v626 = v623 + 8 * v624;
            *v625 = v615;
            v618 = v625 + 1;
            v627 = *(char **)(a1 + 2072);
            v628 = *(char **)(a1 + 2064);
            if (v627 != v628)
            {
              do
              {
                v629 = *((_QWORD *)v627 - 1);
                v627 -= 8;
                *--v625 = v629;
              }
              while (v627 != v628);
              v627 = *(char **)(a1 + 2064);
            }
            *(_QWORD *)(a1 + 2064) = v625;
            *(_QWORD *)(a1 + 2072) = v618;
            *(_QWORD *)(a1 + 2080) = v626;
            if (v627)
              operator delete(v627);
          }
          else
          {
            *v616 = v615;
            v618 = v616 + 1;
          }
          *(_QWORD *)(a1 + 2072) = v618;
        }
      }
    }
    *(_QWORD *)(a1 + 328) = a1 + 232;
    *(_QWORD *)(a1 + 336) = a1 + 240;
    *(_QWORD *)(a1 + 344) = a1 + 248;
    *(_QWORD *)(a1 + 352) = a1 + 256;
    *(_QWORD *)(a1 + 360) = a1 + 264;
    *(_QWORD *)(a1 + 368) = a1 + 272;
    *(_QWORD *)(a1 + 376) = a1 + 280;
    *(_QWORD *)(a1 + 384) = a1 + 288;
    *(_QWORD *)(a1 + 392) = a1 + 296;
    *(_QWORD *)(a1 + 400) = a1 + 304;
    *(_QWORD *)(a1 + 408) = a1 + 312;
    *(_QWORD *)(a1 + 416) = a1 + 320;
  }
  v148 = *(unsigned int *)(a1 + 52);
  v149 = (void *)operator new[]();
  v150 = v149;
  if ((int)v148 >= 1)
    bzero(v149, 4 * v148);
  *(_QWORD *)(a1 + 584) = v150;
  v151 = *(_QWORD **)(a1 + 2048);
  v152 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v151 >= v152)
  {
    v154 = *(_QWORD *)(a1 + 2040);
    v155 = ((uint64_t)v151 - v154) >> 3;
    if ((unint64_t)(v155 + 1) >> 61)
      goto LABEL_707;
    v156 = v152 - v154;
    v157 = v156 >> 2;
    if (v156 >> 2 <= (unint64_t)(v155 + 1))
      v157 = v155 + 1;
    if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
      v158 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v158 = v157;
    if (v158)
      v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v158);
    else
      v159 = 0;
    v160 = (_QWORD *)(v158 + 8 * v155);
    v161 = v158 + 8 * v159;
    *v160 = v150;
    v153 = v160 + 1;
    v162 = *(char **)(a1 + 2048);
    v163 = *(char **)(a1 + 2040);
    if (v162 != v163)
    {
      do
      {
        v164 = *((_QWORD *)v162 - 1);
        v162 -= 8;
        *--v160 = v164;
      }
      while (v162 != v163);
      v162 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v160;
    *(_QWORD *)(a1 + 2048) = v153;
    *(_QWORD *)(a1 + 2056) = v161;
    if (v162)
      operator delete(v162);
  }
  else
  {
    *v151 = v150;
    v153 = v151 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v153;
  v165 = *(unsigned int *)(a1 + 52);
  v166 = (void *)operator new[]();
  v167 = v166;
  if ((int)v165 >= 1)
    bzero(v166, 4 * v165);
  *(_QWORD *)(a1 + 592) = v167;
  v168 = *(_QWORD **)(a1 + 2048);
  v169 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v168 >= v169)
  {
    v171 = *(_QWORD *)(a1 + 2040);
    v172 = ((uint64_t)v168 - v171) >> 3;
    if ((unint64_t)(v172 + 1) >> 61)
      goto LABEL_707;
    v173 = v169 - v171;
    v174 = v173 >> 2;
    if (v173 >> 2 <= (unint64_t)(v172 + 1))
      v174 = v172 + 1;
    if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
      v175 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v175 = v174;
    if (v175)
      v175 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v175);
    else
      v176 = 0;
    v177 = (_QWORD *)(v175 + 8 * v172);
    v178 = v175 + 8 * v176;
    *v177 = v167;
    v170 = v177 + 1;
    v179 = *(char **)(a1 + 2048);
    v180 = *(char **)(a1 + 2040);
    if (v179 != v180)
    {
      do
      {
        v181 = *((_QWORD *)v179 - 1);
        v179 -= 8;
        *--v177 = v181;
      }
      while (v179 != v180);
      v179 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v177;
    *(_QWORD *)(a1 + 2048) = v170;
    *(_QWORD *)(a1 + 2056) = v178;
    if (v179)
      operator delete(v179);
  }
  else
  {
    *v168 = v167;
    v170 = v168 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v170;
  if (!*(_BYTE *)(a1 + 2032))
  {
    if (*(_DWORD *)(a1 + 56))
    {
      v182 = *(unsigned __int8 *)(a1 + 40) + 1;
      SparseMatrix<float>::SparseMatrix((unsigned int *)v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 760), v630);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v630);
      SparseMatrix<float>::SparseMatrix((unsigned int *)v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 880), v630);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v630);
      SparseMatrix<float>::SparseMatrix((unsigned int *)v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 1000), v630);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v630);
    }
    else
    {
      v184 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v185 = (void *)operator new[]();
      bzero(v185, 4 * v184);
      *(_QWORD *)(a1 + 1120) = v185;
      v186 = *(_QWORD **)(a1 + 2048);
      v187 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v186 >= v187)
      {
        v189 = *(_QWORD *)(a1 + 2040);
        v190 = ((uint64_t)v186 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61)
          goto LABEL_707;
        v191 = v187 - v189;
        v192 = v191 >> 2;
        if (v191 >> 2 <= (unint64_t)(v190 + 1))
          v192 = v190 + 1;
        if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
          v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v193);
        else
          v194 = 0;
        v205 = (_QWORD *)(v193 + 8 * v190);
        v206 = v193 + 8 * v194;
        *v205 = v185;
        v188 = v205 + 1;
        v207 = *(char **)(a1 + 2048);
        v208 = *(char **)(a1 + 2040);
        if (v207 != v208)
        {
          do
          {
            v209 = *((_QWORD *)v207 - 1);
            v207 -= 8;
            *--v205 = v209;
          }
          while (v207 != v208);
          v207 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v205;
        *(_QWORD *)(a1 + 2048) = v188;
        *(_QWORD *)(a1 + 2056) = v206;
        if (v207)
          operator delete(v207);
      }
      else
      {
        *v186 = v185;
        v188 = v186 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v188;
      v210 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v211 = (void *)operator new[]();
      bzero(v211, 4 * v210);
      *(_QWORD *)(a1 + 1128) = v211;
      v212 = *(_QWORD **)(a1 + 2048);
      v213 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v212 >= v213)
      {
        v215 = *(_QWORD *)(a1 + 2040);
        v216 = ((uint64_t)v212 - v215) >> 3;
        if ((unint64_t)(v216 + 1) >> 61)
          goto LABEL_707;
        v217 = v213 - v215;
        v218 = v217 >> 2;
        if (v217 >> 2 <= (unint64_t)(v216 + 1))
          v218 = v216 + 1;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          v219 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v219 = v218;
        if (v219)
          v219 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v219);
        else
          v220 = 0;
        v221 = (_QWORD *)(v219 + 8 * v216);
        v222 = v219 + 8 * v220;
        *v221 = v211;
        v214 = v221 + 1;
        v223 = *(char **)(a1 + 2048);
        v224 = *(char **)(a1 + 2040);
        if (v223 != v224)
        {
          do
          {
            v225 = *((_QWORD *)v223 - 1);
            v223 -= 8;
            *--v221 = v225;
          }
          while (v223 != v224);
          v223 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v221;
        *(_QWORD *)(a1 + 2048) = v214;
        *(_QWORD *)(a1 + 2056) = v222;
        if (v223)
          operator delete(v223);
      }
      else
      {
        *v212 = v211;
        v214 = v212 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v214;
      v226 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v227 = (void *)operator new[]();
      bzero(v227, 4 * v226);
      *(_QWORD *)(a1 + 1136) = v227;
      v228 = *(_QWORD **)(a1 + 2048);
      v229 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v228 >= v229)
      {
        v231 = *(_QWORD *)(a1 + 2040);
        v232 = ((uint64_t)v228 - v231) >> 3;
        if ((unint64_t)(v232 + 1) >> 61)
          goto LABEL_707;
        v233 = v229 - v231;
        v234 = v233 >> 2;
        if (v233 >> 2 <= (unint64_t)(v232 + 1))
          v234 = v232 + 1;
        if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFF8)
          v235 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v235 = v234;
        if (v235)
          v235 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v235);
        else
          v236 = 0;
        v237 = (_QWORD *)(v235 + 8 * v232);
        v238 = v235 + 8 * v236;
        *v237 = v227;
        v230 = v237 + 1;
        v239 = *(char **)(a1 + 2048);
        v240 = *(char **)(a1 + 2040);
        if (v239 != v240)
        {
          do
          {
            v241 = *((_QWORD *)v239 - 1);
            v239 -= 8;
            *--v237 = v241;
          }
          while (v239 != v240);
          v239 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v237;
        *(_QWORD *)(a1 + 2048) = v230;
        *(_QWORD *)(a1 + 2056) = v238;
        if (v239)
          operator delete(v239);
      }
      else
      {
        *v228 = v227;
        v230 = v228 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v230;
    }
    v242 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v243 = (void *)operator new[]();
    bzero(v243, 4 * v242);
    *(_QWORD *)(a1 + 1152) = v243;
    v244 = *(_QWORD **)(a1 + 2048);
    v245 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v244 >= v245)
    {
      v247 = *(_QWORD *)(a1 + 2040);
      v248 = ((uint64_t)v244 - v247) >> 3;
      if ((unint64_t)(v248 + 1) >> 61)
        goto LABEL_707;
      v249 = v245 - v247;
      v250 = v249 >> 2;
      if (v249 >> 2 <= (unint64_t)(v248 + 1))
        v250 = v248 + 1;
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF8)
        v251 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v251 = v250;
      if (v251)
        v251 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v251);
      else
        v252 = 0;
      v253 = (_QWORD *)(v251 + 8 * v248);
      v254 = v251 + 8 * v252;
      *v253 = v243;
      v246 = v253 + 1;
      v255 = *(char **)(a1 + 2048);
      v256 = *(char **)(a1 + 2040);
      if (v255 != v256)
      {
        do
        {
          v257 = *((_QWORD *)v255 - 1);
          v255 -= 8;
          *--v253 = v257;
        }
        while (v255 != v256);
        v255 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v253;
      *(_QWORD *)(a1 + 2048) = v246;
      *(_QWORD *)(a1 + 2056) = v254;
      if (v255)
        operator delete(v255);
    }
    else
    {
      *v244 = v243;
      v246 = v244 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v246;
    v258 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v259 = (void *)operator new[]();
    bzero(v259, 4 * v258);
    *(_QWORD *)(a1 + 1144) = v259;
    v260 = *(_QWORD **)(a1 + 2048);
    v261 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v260 >= v261)
    {
      v263 = *(_QWORD *)(a1 + 2040);
      v264 = ((uint64_t)v260 - v263) >> 3;
      if ((unint64_t)(v264 + 1) >> 61)
        goto LABEL_707;
      v265 = v261 - v263;
      v266 = v265 >> 2;
      if (v265 >> 2 <= (unint64_t)(v264 + 1))
        v266 = v264 + 1;
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFF8)
        v267 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v267 = v266;
      if (v267)
        v267 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v267);
      else
        v268 = 0;
      v269 = (_QWORD *)(v267 + 8 * v264);
      v270 = v267 + 8 * v268;
      *v269 = v259;
      v262 = v269 + 1;
      v271 = *(char **)(a1 + 2048);
      v272 = *(char **)(a1 + 2040);
      if (v271 != v272)
      {
        do
        {
          v273 = *((_QWORD *)v271 - 1);
          v271 -= 8;
          *--v269 = v273;
        }
        while (v271 != v272);
        v271 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v269;
      *(_QWORD *)(a1 + 2048) = v262;
      *(_QWORD *)(a1 + 2056) = v270;
      if (v271)
        operator delete(v271);
    }
    else
    {
      *v260 = v259;
      v262 = v260 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v262;
    v274 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v275 = (void *)operator new[]();
    bzero(v275, 4 * v274);
    *(_QWORD *)(a1 + 1160) = v275;
    v276 = *(_QWORD **)(a1 + 2048);
    v277 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v276 >= v277)
    {
      v279 = *(_QWORD *)(a1 + 2040);
      v280 = ((uint64_t)v276 - v279) >> 3;
      if ((unint64_t)(v280 + 1) >> 61)
        goto LABEL_707;
      v281 = v277 - v279;
      v282 = v281 >> 2;
      if (v281 >> 2 <= (unint64_t)(v280 + 1))
        v282 = v280 + 1;
      if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8)
        v283 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v283 = v282;
      if (v283)
        v283 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v283);
      else
        v284 = 0;
      v285 = (_QWORD *)(v283 + 8 * v280);
      v286 = v283 + 8 * v284;
      *v285 = v275;
      v278 = v285 + 1;
      v287 = *(char **)(a1 + 2048);
      v288 = *(char **)(a1 + 2040);
      if (v287 != v288)
      {
        do
        {
          v289 = *((_QWORD *)v287 - 1);
          v287 -= 8;
          *--v285 = v289;
        }
        while (v287 != v288);
        v287 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v285;
      *(_QWORD *)(a1 + 2048) = v278;
      *(_QWORD *)(a1 + 2056) = v286;
      if (v287)
        operator delete(v287);
    }
    else
    {
      *v276 = v275;
      v278 = v276 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v278;
  }
  std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 64), maxFeatureVectors);
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 208), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 496), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 520), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 544), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 424), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 448), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 472), maxFeatureVectors);
  if (*(_BYTE *)(a1 + 2032))
    goto LABEL_338;
  std::vector<VVector<float>>::resize((char **)(a1 + 728), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 632), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 608), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 704), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 680), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 656), maxFeatureVectors);
  v290 = *(unsigned int *)(a1 + 52);
  v291 = (void *)operator new[]();
  v292 = v291;
  if ((int)v290 >= 1)
    bzero(v291, 4 * v290);
  *(_QWORD *)(a1 + 752) = v292;
  v293 = *(_QWORD **)(a1 + 2048);
  v294 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v293 >= v294)
  {
    v296 = *(_QWORD *)(a1 + 2040);
    v297 = ((uint64_t)v293 - v296) >> 3;
    if (!((unint64_t)(v297 + 1) >> 61))
    {
      v298 = v294 - v296;
      v299 = v298 >> 2;
      if (v298 >> 2 <= (unint64_t)(v297 + 1))
        v299 = v297 + 1;
      if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF8)
        v300 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v300 = v299;
      if (v300)
        v300 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v300);
      else
        v301 = 0;
      v302 = (_QWORD *)(v300 + 8 * v297);
      v303 = v300 + 8 * v301;
      *v302 = v292;
      v295 = v302 + 1;
      v304 = *(char **)(a1 + 2048);
      v305 = *(char **)(a1 + 2040);
      if (v304 != v305)
      {
        do
        {
          v306 = *((_QWORD *)v304 - 1);
          v304 -= 8;
          *--v302 = v306;
        }
        while (v304 != v305);
        v304 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v302;
      *(_QWORD *)(a1 + 2048) = v295;
      *(_QWORD *)(a1 + 2056) = v303;
      if (v304)
        operator delete(v304);
      goto LABEL_337;
    }
LABEL_707:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  *v293 = v292;
  v295 = v293 + 1;
LABEL_337:
  *(_QWORD *)(a1 + 2048) = v295;
LABEL_338:
  if (maxFeatureVectors >= 1)
  {
    v307 = 0;
    do
    {
      v308 = *(unsigned int *)(a1 + 48);
      v309 = (void *)operator new[]();
      v310 = v309;
      if ((int)v308 >= 1)
        bzero(v309, 4 * v308);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v307) = v310;
      v311 = *(_QWORD **)(a1 + 2048);
      v312 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v311 >= v312)
      {
        v314 = *(_QWORD *)(a1 + 2040);
        v315 = ((uint64_t)v311 - v314) >> 3;
        if ((unint64_t)(v315 + 1) >> 61)
          goto LABEL_707;
        v316 = v312 - v314;
        v317 = v316 >> 2;
        if (v316 >> 2 <= (unint64_t)(v315 + 1))
          v317 = v315 + 1;
        if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
          v318 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v318 = v317;
        if (v318)
          v318 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v318);
        else
          v319 = 0;
        v320 = (_QWORD *)(v318 + 8 * v315);
        *v320 = v310;
        v313 = v320 + 1;
        v321 = *(char **)(a1 + 2048);
        v322 = *(char **)(a1 + 2040);
        if (v321 != v322)
        {
          do
          {
            v323 = *((_QWORD *)v321 - 1);
            v321 -= 8;
            *--v320 = v323;
          }
          while (v321 != v322);
          v321 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v320;
        *(_QWORD *)(a1 + 2048) = v313;
        *(_QWORD *)(a1 + 2056) = v318 + 8 * v319;
        if (v321)
          operator delete(v321);
      }
      else
      {
        *v311 = v310;
        v313 = v311 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v313;
      if (*(_BYTE *)(a1 + 40))
        v324 = 2;
      else
        v324 = 1;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 208) + 24 * v307), v324);
      v325 = *(unsigned int *)(a1 + 52);
      v326 = (void *)operator new[]();
      v327 = v326;
      if ((int)v325 >= 1)
        bzero(v326, 4 * v325);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v307) = v327;
      v328 = *(_QWORD **)(a1 + 2048);
      v329 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v328 >= v329)
      {
        v331 = *(_QWORD *)(a1 + 2040);
        v332 = ((uint64_t)v328 - v331) >> 3;
        if ((unint64_t)(v332 + 1) >> 61)
          goto LABEL_707;
        v333 = v329 - v331;
        v334 = v333 >> 2;
        if (v333 >> 2 <= (unint64_t)(v332 + 1))
          v334 = v332 + 1;
        if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8)
          v335 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v335 = v334;
        if (v335)
          v335 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v335);
        else
          v336 = 0;
        v337 = (_QWORD *)(v335 + 8 * v332);
        *v337 = v327;
        v330 = v337 + 1;
        v338 = *(char **)(a1 + 2048);
        v339 = *(char **)(a1 + 2040);
        if (v338 != v339)
        {
          do
          {
            v340 = *((_QWORD *)v338 - 1);
            v338 -= 8;
            *--v337 = v340;
          }
          while (v338 != v339);
          v338 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v337;
        *(_QWORD *)(a1 + 2048) = v330;
        *(_QWORD *)(a1 + 2056) = v335 + 8 * v336;
        if (v338)
          operator delete(v338);
      }
      else
      {
        *v328 = v327;
        v330 = v328 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v330;
      v341 = *(unsigned int *)(a1 + 52);
      v342 = (void *)operator new[]();
      v343 = v342;
      if ((int)v341 >= 1)
        bzero(v342, 4 * v341);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v307) = v343;
      v344 = *(_QWORD **)(a1 + 2048);
      v345 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v344 >= v345)
      {
        v347 = *(_QWORD *)(a1 + 2040);
        v348 = ((uint64_t)v344 - v347) >> 3;
        if ((unint64_t)(v348 + 1) >> 61)
          goto LABEL_707;
        v349 = v345 - v347;
        v350 = v349 >> 2;
        if (v349 >> 2 <= (unint64_t)(v348 + 1))
          v350 = v348 + 1;
        if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFF8)
          v351 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v351 = v350;
        if (v351)
          v351 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v351);
        else
          v352 = 0;
        v353 = (_QWORD *)(v351 + 8 * v348);
        *v353 = v343;
        v346 = v353 + 1;
        v354 = *(char **)(a1 + 2048);
        v355 = *(char **)(a1 + 2040);
        if (v354 != v355)
        {
          do
          {
            v356 = *((_QWORD *)v354 - 1);
            v354 -= 8;
            *--v353 = v356;
          }
          while (v354 != v355);
          v354 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v353;
        *(_QWORD *)(a1 + 2048) = v346;
        *(_QWORD *)(a1 + 2056) = v351 + 8 * v352;
        if (v354)
          operator delete(v354);
      }
      else
      {
        *v344 = v343;
        v346 = v344 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v346;
      v357 = *(unsigned int *)(a1 + 52);
      v358 = (void *)operator new[]();
      v359 = v358;
      if ((int)v357 >= 1)
        bzero(v358, 4 * v357);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v307) = v359;
      v360 = *(_QWORD **)(a1 + 2048);
      v361 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v360 >= v361)
      {
        v363 = *(_QWORD *)(a1 + 2040);
        v364 = ((uint64_t)v360 - v363) >> 3;
        if ((unint64_t)(v364 + 1) >> 61)
          goto LABEL_707;
        v365 = v361 - v363;
        v366 = v365 >> 2;
        if (v365 >> 2 <= (unint64_t)(v364 + 1))
          v366 = v364 + 1;
        if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFF8)
          v367 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v367 = v366;
        if (v367)
          v367 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v367);
        else
          v368 = 0;
        v369 = (_QWORD *)(v367 + 8 * v364);
        *v369 = v359;
        v362 = v369 + 1;
        v370 = *(char **)(a1 + 2048);
        v371 = *(char **)(a1 + 2040);
        if (v370 != v371)
        {
          do
          {
            v372 = *((_QWORD *)v370 - 1);
            v370 -= 8;
            *--v369 = v372;
          }
          while (v370 != v371);
          v370 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v369;
        *(_QWORD *)(a1 + 2048) = v362;
        *(_QWORD *)(a1 + 2056) = v367 + 8 * v368;
        if (v370)
          operator delete(v370);
      }
      else
      {
        *v360 = v359;
        v362 = v360 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v362;
      v373 = *(unsigned int *)(a1 + 52);
      v374 = (void *)operator new[]();
      v375 = v374;
      if ((int)v373 >= 1)
        bzero(v374, 4 * v373);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v307) = v375;
      v376 = *(_QWORD **)(a1 + 2048);
      v377 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v376 >= v377)
      {
        v379 = *(_QWORD *)(a1 + 2040);
        v380 = ((uint64_t)v376 - v379) >> 3;
        if ((unint64_t)(v380 + 1) >> 61)
          goto LABEL_707;
        v381 = v377 - v379;
        v382 = v381 >> 2;
        if (v381 >> 2 <= (unint64_t)(v380 + 1))
          v382 = v380 + 1;
        if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8)
          v383 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v383 = v382;
        if (v383)
          v383 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v383);
        else
          v384 = 0;
        v385 = (_QWORD *)(v383 + 8 * v380);
        *v385 = v375;
        v378 = v385 + 1;
        v386 = *(char **)(a1 + 2048);
        v387 = *(char **)(a1 + 2040);
        if (v386 != v387)
        {
          do
          {
            v388 = *((_QWORD *)v386 - 1);
            v386 -= 8;
            *--v385 = v388;
          }
          while (v386 != v387);
          v386 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v385;
        *(_QWORD *)(a1 + 2048) = v378;
        *(_QWORD *)(a1 + 2056) = v383 + 8 * v384;
        if (v386)
          operator delete(v386);
      }
      else
      {
        *v376 = v375;
        v378 = v376 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v378;
      v389 = *(unsigned int *)(a1 + 52);
      v390 = (void *)operator new[]();
      v391 = v390;
      if ((int)v389 >= 1)
        bzero(v390, 4 * v389);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v307) = v391;
      v392 = *(_QWORD **)(a1 + 2048);
      v393 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v392 >= v393)
      {
        v395 = *(_QWORD *)(a1 + 2040);
        v396 = ((uint64_t)v392 - v395) >> 3;
        if ((unint64_t)(v396 + 1) >> 61)
          goto LABEL_707;
        v397 = v393 - v395;
        v398 = v397 >> 2;
        if (v397 >> 2 <= (unint64_t)(v396 + 1))
          v398 = v396 + 1;
        if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFF8)
          v399 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v399 = v398;
        if (v399)
          v399 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v399);
        else
          v400 = 0;
        v401 = (_QWORD *)(v399 + 8 * v396);
        *v401 = v391;
        v394 = v401 + 1;
        v402 = *(char **)(a1 + 2048);
        v403 = *(char **)(a1 + 2040);
        if (v402 != v403)
        {
          do
          {
            v404 = *((_QWORD *)v402 - 1);
            v402 -= 8;
            *--v401 = v404;
          }
          while (v402 != v403);
          v402 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v401;
        *(_QWORD *)(a1 + 2048) = v394;
        *(_QWORD *)(a1 + 2056) = v399 + 8 * v400;
        if (v402)
          operator delete(v402);
      }
      else
      {
        *v392 = v391;
        v394 = v392 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v394;
      v405 = *(unsigned int *)(a1 + 52);
      v406 = (void *)operator new[]();
      v407 = v406;
      if ((int)v405 >= 1)
        bzero(v406, 4 * v405);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * v307) = v407;
      v408 = *(_QWORD **)(a1 + 2048);
      v409 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v408 >= v409)
      {
        v411 = *(_QWORD *)(a1 + 2040);
        v412 = ((uint64_t)v408 - v411) >> 3;
        if ((unint64_t)(v412 + 1) >> 61)
          goto LABEL_707;
        v413 = v409 - v411;
        v414 = v413 >> 2;
        if (v413 >> 2 <= (unint64_t)(v412 + 1))
          v414 = v412 + 1;
        if ((unint64_t)v413 >= 0x7FFFFFFFFFFFFFF8)
          v415 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v415 = v414;
        if (v415)
          v415 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v415);
        else
          v416 = 0;
        v417 = (_QWORD *)(v415 + 8 * v412);
        *v417 = v407;
        v410 = v417 + 1;
        v418 = *(char **)(a1 + 2048);
        v419 = *(char **)(a1 + 2040);
        if (v418 != v419)
        {
          do
          {
            v420 = *((_QWORD *)v418 - 1);
            v418 -= 8;
            *--v417 = v420;
          }
          while (v418 != v419);
          v418 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v417;
        *(_QWORD *)(a1 + 2048) = v410;
        *(_QWORD *)(a1 + 2056) = v415 + 8 * v416;
        if (v418)
          operator delete(v418);
      }
      else
      {
        *v408 = v407;
        v410 = v408 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v410;
      v421 = *(unsigned int *)(a1 + 52);
      v422 = (void *)operator new[]();
      v423 = v422;
      if ((int)v421 >= 1)
        bzero(v422, 4 * v421);
      *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * v307) = v423;
      v424 = *(_QWORD **)(a1 + 2048);
      v425 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v424 >= v425)
      {
        v427 = *(_QWORD *)(a1 + 2040);
        v428 = ((uint64_t)v424 - v427) >> 3;
        if ((unint64_t)(v428 + 1) >> 61)
          goto LABEL_707;
        v429 = v425 - v427;
        v430 = v429 >> 2;
        if (v429 >> 2 <= (unint64_t)(v428 + 1))
          v430 = v428 + 1;
        if ((unint64_t)v429 >= 0x7FFFFFFFFFFFFFF8)
          v431 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v431 = v430;
        if (v431)
          v431 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v431);
        else
          v432 = 0;
        v433 = (_QWORD *)(v431 + 8 * v428);
        *v433 = v423;
        v426 = v433 + 1;
        v434 = *(char **)(a1 + 2048);
        v435 = *(char **)(a1 + 2040);
        if (v434 != v435)
        {
          do
          {
            v436 = *((_QWORD *)v434 - 1);
            v434 -= 8;
            *--v433 = v436;
          }
          while (v434 != v435);
          v434 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v433;
        *(_QWORD *)(a1 + 2048) = v426;
        *(_QWORD *)(a1 + 2056) = v431 + 8 * v432;
        if (v434)
          operator delete(v434);
      }
      else
      {
        *v424 = v423;
        v426 = v424 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v426;
      v437 = *(unsigned int *)(a1 + 52);
      v438 = (void *)operator new[]();
      v439 = v438;
      if ((int)v437 >= 1)
        bzero(v438, 4 * v437);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v307) = v439;
      v440 = *(_QWORD **)(a1 + 2048);
      v441 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v440 >= v441)
      {
        v443 = *(_QWORD *)(a1 + 2040);
        v444 = ((uint64_t)v440 - v443) >> 3;
        if ((unint64_t)(v444 + 1) >> 61)
          goto LABEL_707;
        v445 = v441 - v443;
        v446 = v445 >> 2;
        if (v445 >> 2 <= (unint64_t)(v444 + 1))
          v446 = v444 + 1;
        if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFF8)
          v447 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v447 = v446;
        if (v447)
          v447 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v447);
        else
          v448 = 0;
        v449 = (_QWORD *)(v447 + 8 * v444);
        *v449 = v439;
        v442 = v449 + 1;
        v450 = *(char **)(a1 + 2048);
        v451 = *(char **)(a1 + 2040);
        if (v450 != v451)
        {
          do
          {
            v452 = *((_QWORD *)v450 - 1);
            v450 -= 8;
            *--v449 = v452;
          }
          while (v450 != v451);
          v450 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v449;
        *(_QWORD *)(a1 + 2048) = v442;
        *(_QWORD *)(a1 + 2056) = v447 + 8 * v448;
        if (v450)
          operator delete(v450);
      }
      else
      {
        *v440 = v439;
        v442 = v440 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v442;
      if (!*(_BYTE *)(a1 + 2032))
      {
        v453 = *(unsigned int *)(a1 + 52);
        v454 = (void *)operator new[]();
        v455 = v454;
        if ((int)v453 >= 1)
          bzero(v454, 4 * v453);
        *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v307) = v455;
        v456 = *(_QWORD **)(a1 + 2048);
        v457 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v456 >= v457)
        {
          v459 = *(_QWORD *)(a1 + 2040);
          v460 = ((uint64_t)v456 - v459) >> 3;
          if ((unint64_t)(v460 + 1) >> 61)
            goto LABEL_707;
          v461 = v457 - v459;
          v462 = v461 >> 2;
          if (v461 >> 2 <= (unint64_t)(v460 + 1))
            v462 = v460 + 1;
          if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFF8)
            v463 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v463 = v462;
          if (v463)
            v463 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v463);
          else
            v464 = 0;
          v465 = (_QWORD *)(v463 + 8 * v460);
          *v465 = v455;
          v458 = v465 + 1;
          v466 = *(char **)(a1 + 2048);
          v467 = *(char **)(a1 + 2040);
          if (v466 != v467)
          {
            do
            {
              v468 = *((_QWORD *)v466 - 1);
              v466 -= 8;
              *--v465 = v468;
            }
            while (v466 != v467);
            v466 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v465;
          *(_QWORD *)(a1 + 2048) = v458;
          *(_QWORD *)(a1 + 2056) = v463 + 8 * v464;
          if (v466)
            operator delete(v466);
        }
        else
        {
          *v456 = v455;
          v458 = v456 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v458;
        v469 = *(unsigned int *)(a1 + 52);
        v470 = (void *)operator new[]();
        v471 = v470;
        if ((int)v469 >= 1)
          bzero(v470, 4 * v469);
        *(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v307) = v471;
        v472 = *(_QWORD **)(a1 + 2048);
        v473 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v472 >= v473)
        {
          v475 = *(_QWORD *)(a1 + 2040);
          v476 = ((uint64_t)v472 - v475) >> 3;
          if ((unint64_t)(v476 + 1) >> 61)
            goto LABEL_707;
          v477 = v473 - v475;
          v478 = v477 >> 2;
          if (v477 >> 2 <= (unint64_t)(v476 + 1))
            v478 = v476 + 1;
          if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8)
            v479 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v479 = v478;
          if (v479)
            v479 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v479);
          else
            v480 = 0;
          v481 = (_QWORD *)(v479 + 8 * v476);
          *v481 = v471;
          v474 = v481 + 1;
          v482 = *(char **)(a1 + 2048);
          v483 = *(char **)(a1 + 2040);
          if (v482 != v483)
          {
            do
            {
              v484 = *((_QWORD *)v482 - 1);
              v482 -= 8;
              *--v481 = v484;
            }
            while (v482 != v483);
            v482 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v481;
          *(_QWORD *)(a1 + 2048) = v474;
          *(_QWORD *)(a1 + 2056) = v479 + 8 * v480;
          if (v482)
            operator delete(v482);
        }
        else
        {
          *v472 = v471;
          v474 = v472 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v474;
        v485 = *(unsigned int *)(a1 + 48);
        v486 = (void *)operator new[]();
        v487 = v486;
        if ((int)v485 >= 1)
          bzero(v486, 4 * v485);
        *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v307) = v487;
        v488 = *(_QWORD **)(a1 + 2048);
        v489 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v488 >= v489)
        {
          v491 = *(_QWORD *)(a1 + 2040);
          v492 = ((uint64_t)v488 - v491) >> 3;
          if ((unint64_t)(v492 + 1) >> 61)
            goto LABEL_707;
          v493 = v489 - v491;
          v494 = v493 >> 2;
          if (v493 >> 2 <= (unint64_t)(v492 + 1))
            v494 = v492 + 1;
          if ((unint64_t)v493 >= 0x7FFFFFFFFFFFFFF8)
            v495 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v495 = v494;
          if (v495)
            v495 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v495);
          else
            v496 = 0;
          v497 = (_QWORD *)(v495 + 8 * v492);
          *v497 = v487;
          v490 = v497 + 1;
          v498 = *(char **)(a1 + 2048);
          v499 = *(char **)(a1 + 2040);
          if (v498 != v499)
          {
            do
            {
              v500 = *((_QWORD *)v498 - 1);
              v498 -= 8;
              *--v497 = v500;
            }
            while (v498 != v499);
            v498 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v497;
          *(_QWORD *)(a1 + 2048) = v490;
          *(_QWORD *)(a1 + 2056) = v495 + 8 * v496;
          if (v498)
            operator delete(v498);
        }
        else
        {
          *v488 = v487;
          v490 = v488 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v490;
        v501 = *(unsigned int *)(a1 + 52);
        v502 = (void *)operator new[]();
        v503 = v502;
        if ((int)v501 >= 1)
          bzero(v502, 4 * v501);
        *(_QWORD *)(*(_QWORD *)(a1 + 704) + 8 * v307) = v503;
        v504 = *(_QWORD **)(a1 + 2048);
        v505 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v504 >= v505)
        {
          v507 = *(_QWORD *)(a1 + 2040);
          v508 = ((uint64_t)v504 - v507) >> 3;
          if ((unint64_t)(v508 + 1) >> 61)
            goto LABEL_707;
          v509 = v505 - v507;
          v510 = v509 >> 2;
          if (v509 >> 2 <= (unint64_t)(v508 + 1))
            v510 = v508 + 1;
          if ((unint64_t)v509 >= 0x7FFFFFFFFFFFFFF8)
            v511 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v511 = v510;
          if (v511)
            v511 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v511);
          else
            v512 = 0;
          v513 = (_QWORD *)(v511 + 8 * v508);
          *v513 = v503;
          v506 = v513 + 1;
          v514 = *(char **)(a1 + 2048);
          v515 = *(char **)(a1 + 2040);
          if (v514 != v515)
          {
            do
            {
              v516 = *((_QWORD *)v514 - 1);
              v514 -= 8;
              *--v513 = v516;
            }
            while (v514 != v515);
            v514 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v513;
          *(_QWORD *)(a1 + 2048) = v506;
          *(_QWORD *)(a1 + 2056) = v511 + 8 * v512;
          if (v514)
            operator delete(v514);
        }
        else
        {
          *v504 = v503;
          v506 = v504 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v506;
        v517 = *(unsigned int *)(a1 + 52);
        v518 = (void *)operator new[]();
        v519 = v518;
        if ((int)v517 >= 1)
          bzero(v518, 4 * v517);
        *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * v307) = v519;
        v520 = *(_QWORD **)(a1 + 2048);
        v521 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v520 >= v521)
        {
          v523 = *(_QWORD *)(a1 + 2040);
          v524 = ((uint64_t)v520 - v523) >> 3;
          if ((unint64_t)(v524 + 1) >> 61)
            goto LABEL_707;
          v525 = v521 - v523;
          v526 = v525 >> 2;
          if (v525 >> 2 <= (unint64_t)(v524 + 1))
            v526 = v524 + 1;
          if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFF8)
            v527 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v527 = v526;
          if (v527)
            v527 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v527);
          else
            v528 = 0;
          v529 = (_QWORD *)(v527 + 8 * v524);
          *v529 = v519;
          v522 = v529 + 1;
          v530 = *(char **)(a1 + 2048);
          v531 = *(char **)(a1 + 2040);
          if (v530 != v531)
          {
            do
            {
              v532 = *((_QWORD *)v530 - 1);
              v530 -= 8;
              *--v529 = v532;
            }
            while (v530 != v531);
            v530 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v529;
          *(_QWORD *)(a1 + 2048) = v522;
          *(_QWORD *)(a1 + 2056) = v527 + 8 * v528;
          if (v530)
            operator delete(v530);
        }
        else
        {
          *v520 = v519;
          v522 = v520 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v522;
        v533 = *(unsigned int *)(a1 + 52);
        v534 = (void *)operator new[]();
        v535 = v534;
        if ((int)v533 >= 1)
          bzero(v534, 4 * v533);
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + 8 * v307) = v535;
        v536 = *(_QWORD **)(a1 + 2048);
        v537 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v536 >= v537)
        {
          v539 = *(_QWORD *)(a1 + 2040);
          v540 = ((uint64_t)v536 - v539) >> 3;
          if ((unint64_t)(v540 + 1) >> 61)
            goto LABEL_707;
          v541 = v537 - v539;
          v542 = v541 >> 2;
          if (v541 >> 2 <= (unint64_t)(v540 + 1))
            v542 = v540 + 1;
          if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFF8)
            v543 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v543 = v542;
          if (v543)
            v543 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v543);
          else
            v544 = 0;
          v545 = (_QWORD *)(v543 + 8 * v540);
          *v545 = v535;
          v538 = v545 + 1;
          v546 = *(char **)(a1 + 2048);
          v547 = *(char **)(a1 + 2040);
          if (v546 != v547)
          {
            do
            {
              v548 = *((_QWORD *)v546 - 1);
              v546 -= 8;
              *--v545 = v548;
            }
            while (v546 != v547);
            v546 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v545;
          *(_QWORD *)(a1 + 2048) = v538;
          *(_QWORD *)(a1 + 2056) = v543 + 8 * v544;
          if (v546)
            operator delete(v546);
        }
        else
        {
          *v536 = v535;
          v538 = v536 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v538;
      }
      ++v307;
    }
    while (v307 < maxFeatureVectors);
  }
}

void sub_1915540B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SparseMatrix<float>::~SparseMatrix(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  SparseMatrix<float>::cleanupAllBuffers((_QWORD *)a1);
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t SparseMatrix<float>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = a1[12];
  v3 = a1[13];
  if (v3 == v2)
  {
    v2 = a1[13];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = a1[12];
        v3 = a1[13];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  a1[13] = v2;
  v6 = a1[10];
  if (v6)
  {
    MEMORY[0x19401CD90](v6, 0x80C40B8603338);
    a1[10] = 0;
  }
  result = a1[9];
  if (result)
  {
    result = MEMORY[0x19401CD90](result, 0x80C40B8603338);
    a1[9] = 0;
  }
  return result;
}

_QWORD *MMatrix<float>::MMatrix(_QWORD *a1, int a2, int a3, float a4)
{
  int v6;
  void *v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v12;
  float v13;

  v6 = a3 * a2;
  v7 = (void *)operator new[]();
  *a1 = v7;
  bzero(v7, 4 * v6);
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = a4 + a4;
    v10 = -a4;
    v11 = 4 * v6;
    do
    {
      rgen();
      v13 = (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
      rgen();
      *(float *)(*a1 + v8) = v10 + (float)(v9 * (float)(v13 * 2.3283e-10));
      v8 += 4;
    }
    while (v11 != v8);
  }
  return a1;
}

_QWORD *VVector<float>::VVector(_QWORD *a1, int a2, int a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v9;
  float v10;

  v6 = (void *)operator new[]();
  *a1 = v6;
  if (a3 == 1)
  {
    if (a2 >= 1)
    {
      v7 = 0;
      v8 = 4 * a2;
      do
      {
        rgen();
        v10 = (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v9);
        rgen();
        *(float *)(*a1 + v7) = (float)((float)(v10 * 2.3283e-10) * 0.2) + -0.1;
        v7 += 4;
      }
      while (v8 != v7);
    }
  }
  else if (a2 >= 1)
  {
    bzero(v6, 4 * a2);
  }
  return a1;
}

unsigned int *SparseMatrix<float>::SparseMatrix(unsigned int *a1, unsigned int a2, unsigned int a3, signed int a4, unsigned int a5)
{
  char **v6;
  uint64_t *v7;
  _QWORD *v8;
  int64_t v9;
  int64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;

  *(_OWORD *)(a1 + 6) = 0u;
  *((_QWORD *)a1 + 12) = 0;
  v6 = (char **)(a1 + 24);
  *((_QWORD *)a1 + 13) = 0;
  *((_QWORD *)a1 + 14) = 0;
  v7 = (uint64_t *)(a1 + 12);
  *(_OWORD *)(a1 + 10) = 0u;
  *(_OWORD *)(a1 + 14) = 0u;
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = 0;
  *((_QWORD *)a1 + 9) = 0;
  v8 = a1 + 18;
  *((_QWORD *)a1 + 10) = 0;
  *((_BYTE *)a1 + 88) = 0;
  std::vector<VVector<float>>::resize((char **)a1 + 3, a4);
  v9 = (int)a1[2];
  if ((int)v9 > 0)
  {
    for (i = 0; i < v9; ++i)
    {
      v11 = *a1;
      v12 = (void *)operator new[]();
      v13 = v12;
      if ((int)v11 >= 1)
        bzero(v12, 4 * v11);
      *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * i) = v13;
      v15 = (_QWORD *)*((_QWORD *)a1 + 13);
      v14 = *((_QWORD *)a1 + 14);
      if ((unint64_t)v15 >= v14)
      {
        v17 = ((char *)v15 - *v6) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          goto LABEL_60;
        v18 = v14 - (_QWORD)*v6;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v20);
        else
          v21 = 0;
        v22 = (_QWORD *)(v20 + 8 * v17);
        *v22 = v13;
        v16 = v22 + 1;
        v24 = (char *)*((_QWORD *)a1 + 12);
        v23 = (char *)*((_QWORD *)a1 + 13);
        if (v23 != v24)
        {
          do
          {
            v25 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v22 = v25;
          }
          while (v23 != v24);
          v23 = *v6;
        }
        *((_QWORD *)a1 + 12) = v22;
        *((_QWORD *)a1 + 13) = v16;
        *((_QWORD *)a1 + 14) = v20 + 8 * v21;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v15 = v13;
        v16 = v15 + 1;
      }
      *((_QWORD *)a1 + 13) = v16;
      v9 = (int)a1[2];
    }
  }
  std::vector<std::vector<int>>::resize(v7, v9);
  if ((int)a1[2] >= 1)
  {
    v26 = 0;
    v27 = 0;
    do
    {
      std::vector<int>::resize((std::vector<int> *)(*((_QWORD *)a1 + 6) + v26), (int)a1[3]);
      ++v27;
      v26 += 24;
    }
    while (v27 < (int)a1[2]);
  }
  *v8 = 0;
  v8[1] = 0;
  if (!*((_BYTE *)a1 + 88))
  {
    v28 = (_QWORD *)operator new();
    VVector<float>::VVector(v28, *a1, 0);
    *v8 = v28;
    v29 = (_QWORD *)operator new();
    v30 = *a1 * a1[1];
    v31 = (void *)operator new[]();
    *v29 = v31;
    bzero(v31, 4 * v30);
    *((_QWORD *)a1 + 10) = v29;
    v32 = **((_QWORD **)a1 + 9);
    v34 = (_QWORD *)*((_QWORD *)a1 + 13);
    v33 = *((_QWORD *)a1 + 14);
    if ((unint64_t)v34 >= v33)
    {
      v36 = ((char *)v34 - *v6) >> 3;
      if ((unint64_t)(v36 + 1) >> 61)
        goto LABEL_60;
      v37 = v33 - (_QWORD)*v6;
      v38 = v37 >> 2;
      if (v37 >> 2 <= (unint64_t)(v36 + 1))
        v38 = v36 + 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
        v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v39);
      else
        v40 = 0;
      v41 = (_QWORD *)(v39 + 8 * v36);
      v42 = v39 + 8 * v40;
      *v41 = v32;
      v35 = v41 + 1;
      v44 = (char *)*((_QWORD *)a1 + 12);
      v43 = (char *)*((_QWORD *)a1 + 13);
      if (v43 != v44)
      {
        do
        {
          v45 = *((_QWORD *)v43 - 1);
          v43 -= 8;
          *--v41 = v45;
        }
        while (v43 != v44);
        v43 = *v6;
      }
      *((_QWORD *)a1 + 12) = v41;
      *((_QWORD *)a1 + 13) = v35;
      *((_QWORD *)a1 + 14) = v42;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *v34 = v32;
      v35 = v34 + 1;
    }
    *((_QWORD *)a1 + 13) = v35;
    v46 = **((_QWORD **)a1 + 10);
    v47 = *((_QWORD *)a1 + 14);
    if ((unint64_t)v35 < v47)
    {
      *v35 = v46;
      v48 = v35 + 1;
LABEL_58:
      *((_QWORD *)a1 + 13) = v48;
      return a1;
    }
    v49 = ((char *)v35 - *v6) >> 3;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      v50 = v47 - (_QWORD)*v6;
      v51 = v50 >> 2;
      if (v50 >> 2 <= (unint64_t)(v49 + 1))
        v51 = v49 + 1;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v52);
      else
        v53 = 0;
      v54 = (_QWORD *)(v52 + 8 * v49);
      v55 = v52 + 8 * v53;
      *v54 = v46;
      v48 = v54 + 1;
      v57 = (char *)*((_QWORD *)a1 + 12);
      v56 = (char *)*((_QWORD *)a1 + 13);
      if (v56 != v57)
      {
        do
        {
          v58 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *--v54 = v58;
        }
        while (v56 != v57);
        v56 = *v6;
      }
      *((_QWORD *)a1 + 12) = v54;
      *((_QWORD *)a1 + 13) = v48;
      *((_QWORD *)a1 + 14) = v55;
      if (v56)
        operator delete(v56);
      goto LABEL_58;
    }
LABEL_60:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  return a1;
}

void sub_191554770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  MEMORY[0x19401CD90](v4, 0x80C40B8603338);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

unsigned int *SparseMatrix<float>::operator=(unsigned int *a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void **v23;
  _QWORD *v24;
  int v25;
  void *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int64_t v41;
  int64_t i;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  a1[4] = *((_DWORD *)a2 + 4);
  *((_QWORD *)a1 + 13) = *((_QWORD *)a1 + 12);
  v5 = (void **)*((_QWORD *)a1 + 9);
  if (v5)
  {
    v6 = v4;
  }
  else
  {
    v7 = (uint64_t *)operator new();
    VVector<float>::VVector(v7, *a1, 0);
    *((_QWORD *)a1 + 9) = v7;
    v8 = *v7;
    v10 = (_QWORD *)*((_QWORD *)a1 + 13);
    v9 = *((_QWORD *)a1 + 14);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *((_QWORD *)a1 + 12);
      v13 = ((uint64_t)v10 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_67;
      v14 = v9 - v12;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v16);
      else
        v17 = 0;
      v18 = (_QWORD *)(v16 + 8 * v13);
      v19 = v16 + 8 * v17;
      *v18 = v8;
      v11 = v18 + 1;
      v21 = (char *)*((_QWORD *)a1 + 12);
      v20 = (char *)*((_QWORD *)a1 + 13);
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = (char *)*((_QWORD *)a1 + 12);
      }
      *((_QWORD *)a1 + 12) = v18;
      *((_QWORD *)a1 + 13) = v11;
      *((_QWORD *)a1 + 14) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    *((_QWORD *)a1 + 13) = v11;
    v5 = (void **)*((_QWORD *)a1 + 9);
    v6 = *a1;
  }
  memmove(*v5, **((const void ***)a2 + 9), 4 * v6);
  v23 = (void **)*((_QWORD *)a1 + 10);
  if (v23)
    goto LABEL_38;
  v24 = (_QWORD *)operator new();
  v25 = *a1 * a1[1];
  v26 = (void *)operator new[]();
  *v24 = v26;
  bzero(v26, 4 * v25);
  *((_QWORD *)a1 + 10) = v24;
  v28 = (_QWORD *)*((_QWORD *)a1 + 13);
  v27 = *((_QWORD *)a1 + 14);
  if ((unint64_t)v28 >= v27)
  {
    v30 = *((_QWORD *)a1 + 12);
    v31 = ((uint64_t)v28 - v30) >> 3;
    if (!((unint64_t)(v31 + 1) >> 61))
    {
      v32 = v27 - v30;
      v33 = v32 >> 2;
      if (v32 >> 2 <= (unint64_t)(v31 + 1))
        v33 = v31 + 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v34);
      else
        v35 = 0;
      v36 = (_QWORD *)(v34 + 8 * v31);
      v37 = v34 + 8 * v35;
      *v36 = v26;
      v29 = v36 + 1;
      v39 = (char *)*((_QWORD *)a1 + 12);
      v38 = (char *)*((_QWORD *)a1 + 13);
      if (v38 != v39)
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = (char *)*((_QWORD *)a1 + 12);
      }
      *((_QWORD *)a1 + 12) = v36;
      *((_QWORD *)a1 + 13) = v29;
      *((_QWORD *)a1 + 14) = v37;
      if (v38)
        operator delete(v38);
      goto LABEL_37;
    }
LABEL_67:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  *v28 = v26;
  v29 = v28 + 1;
LABEL_37:
  *((_QWORD *)a1 + 13) = v29;
  v23 = (void **)*((_QWORD *)a1 + 10);
LABEL_38:
  memmove(*v23, **((const void ***)a2 + 10), 4 * (int)(a1[1] * *a1));
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  std::vector<VVector<float>>::resize((char **)a1 + 3, (int)a1[2]);
  v41 = (int)a1[2];
  if ((int)v41 > 0)
  {
    for (i = 0; i < v41; ++i)
    {
      v43 = *a1;
      v44 = (void *)operator new[]();
      v45 = v44;
      if ((int)v43 >= 1)
        bzero(v44, 4 * v43);
      v46 = *((_QWORD *)a1 + 3);
      *(_QWORD *)(v46 + 8 * i) = v45;
      memmove(v45, *(const void **)(*((_QWORD *)a2 + 3) + 8 * i), 4 * (int)*a1);
      v47 = *(_QWORD *)(v46 + 8 * i);
      v49 = (_QWORD *)*((_QWORD *)a1 + 13);
      v48 = *((_QWORD *)a1 + 14);
      if ((unint64_t)v49 >= v48)
      {
        v51 = *((_QWORD *)a1 + 12);
        v52 = ((uint64_t)v49 - v51) >> 3;
        if ((unint64_t)(v52 + 1) >> 61)
          goto LABEL_67;
        v53 = v48 - v51;
        v54 = v53 >> 2;
        if (v53 >> 2 <= (unint64_t)(v52 + 1))
          v54 = v52 + 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
          v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v55);
        else
          v56 = 0;
        v57 = (_QWORD *)(v55 + 8 * v52);
        *v57 = v47;
        v50 = v57 + 1;
        v59 = (char *)*((_QWORD *)a1 + 12);
        v58 = (char *)*((_QWORD *)a1 + 13);
        if (v58 != v59)
        {
          do
          {
            v60 = *((_QWORD *)v58 - 1);
            v58 -= 8;
            *--v57 = v60;
          }
          while (v58 != v59);
          v58 = (char *)*((_QWORD *)a1 + 12);
        }
        *((_QWORD *)a1 + 12) = v57;
        *((_QWORD *)a1 + 13) = v50;
        *((_QWORD *)a1 + 14) = v55 + 8 * v56;
        if (v58)
          operator delete(v58);
      }
      else
      {
        *v49 = v47;
        v50 = v49 + 1;
      }
      *((_QWORD *)a1 + 13) = v50;
      v41 = (int)a1[2];
    }
  }
  std::vector<std::vector<int>>::resize((uint64_t *)a1 + 6, v41);
  if ((int)a1[2] >= 1)
  {
    v61 = 0;
    v62 = a1[3];
    do
    {
      std::vector<int>::resize((std::vector<int> *)(*((_QWORD *)a1 + 6) + 24 * v61), v62);
      v62 = a1[3];
      if (v62 >= 1)
      {
        v63 = 0;
        v64 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 24 * v61);
        v65 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 24 * v61);
        do
        {
          *(_DWORD *)(v65 + 4 * v63) = *(_DWORD *)(v64 + 4 * v63);
          ++v63;
        }
        while (v63 < (int)a1[3]);
        v62 = a1[3];
      }
      ++v61;
    }
    while (v61 < (int)a1[2]);
  }
  return a1;
}

void sub_191554C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void rgen(void)
{
  unsigned __int8 v0;
  unsigned int v1;
  uint64_t i;

  {
    v1 = 5489;
    rgen(void)::rgen_[0] = 5489;
    for (i = 1; i != 624; ++i)
    {
      v1 = i + 1812433253 * (v1 ^ (v1 >> 30));
      rgen(void)::rgen_[i] = v1;
    }
    qword_1EE21A6F0 = 0;
  }
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (qword_1EE21A6F0 + 1) % 0x270uLL;
  v2 = rgen(void)::rgen_[(qword_1EE21A6F0 + 397) % 0x270uLL] ^ ((rgen(void)::rgen_[v1] & 0x7FFFFFFE | rgen(void)::rgen_[qword_1EE21A6F0] & 0x80000000) >> 1) ^ (rgen(void)::rgen_[v1] << 31 >> 31) & 0x9908B0DF;
  rgen(void)::rgen_[qword_1EE21A6F0] = v2;
  qword_1EE21A6F0 = v1;
  v3 = ((v2 ^ (v2 >> 11)) << 7) & 0x9D2C5680 ^ v2 ^ (v2 >> 11);
  return (v3 << 15) & 0xEFC60000 ^ v3 ^ (((v3 << 15) & 0xEFC60000 ^ v3) >> 18);
}

float EstimatorAdaMax<float>::update(uint64_t a1, const float **a2, _QWORD *a3, float a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t i;
  const void **v12;
  void **v13;
  const float **v14;
  vDSP_Length v15;
  float result;
  float v17;
  float __B;

  if (a4 != 0.0)
    *(float *)(a1 + 24) = a4;
  if (!*(_BYTE *)(a1 + 12))
    EstimatorAdaMax<float>::allocate(a1);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  if (a4 != 0.0)
    *(float *)(a1 + 24) = a4;
  v10 = (v9 * v8);
  if (!*(_BYTE *)(a1 + 12))
    EstimatorAdaMax<float>::allocate(a1);
  if ((int)v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
      *(float *)(**(_QWORD **)(a1 + 104) + 4 * i) = (*(float (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 24))(a1, i, *(float *)(*a3 + 4 * i));
  }
  v13 = *(void ***)(a1 + 72);
  v12 = *(const void ***)(a1 + 80);
  memmove(**(void ***)(a1 + 56), **(const void ***)(a1 + 64), 4 * (int)v10);
  memmove(*v13, *v12, 4 * (int)v10);
  v14 = *(const float ***)(a1 + 104);
  v15 = *(int *)(a1 + 20) * (uint64_t)*(int *)(a1 + 16);
  __B = 1.0;
  vDSP_vsma(*v14, 1, &__B, *a2, 1, (float *)*a2, 1, v15);
  result = *(float *)(a1 + 28) * *(float *)(a1 + 40);
  v17 = *(float *)(a1 + 36) * *(float *)(a1 + 44);
  *(float *)(a1 + 40) = result;
  *(float *)(a1 + 44) = v17;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

float EstimatorAdaMax<float>::update(uint64_t a1, _QWORD *a2, uint64_t a3, float a4)
{
  uint64_t v7;
  int v8;
  const void **v9;
  void **v10;
  float result;
  float v12;

  if (a4 != 0.0)
    *(float *)(a1 + 24) = a4;
  if (!*(_BYTE *)(a1 + 12))
    EstimatorAdaMax<float>::allocate(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
  {
    v8 = *(_DWORD *)(a1 + 16);
    v7 = *(unsigned int *)(a1 + 20);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    v8 = *(_DWORD *)(a1 + 20);
  }
  SparseMatrix<float>::add<float>(a3, a2, v7, v8, a1);
  v10 = *(void ***)(a1 + 72);
  v9 = *(const void ***)(a1 + 80);
  memmove(**(void ***)(a1 + 56), **(const void ***)(a1 + 64), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  memmove(*v10, *v9, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  result = *(float *)(a1 + 28) * *(float *)(a1 + 40);
  v12 = *(float *)(a1 + 36) * *(float *)(a1 + 44);
  *(float *)(a1 + 40) = result;
  *(float *)(a1 + 44) = v12;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void EstimatorAdaMax<float>::reset(uint64_t a1)
{
  int v2;
  void **v3;
  void **v4;

  *(_DWORD *)(a1 + 8) = 0;
  v2 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 44) = v2;
  bzero(**(void ***)(a1 + 56), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 64), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 72), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 80), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 104), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v3 = *(void ***)(a1 + 112);
  if (v3)
    bzero(*v3, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v4 = *(void ***)(a1 + 48);
  if (v4)
    bzero(*v4, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

float EstimatorAdaMax<float>::updateOneElement(uint64_t a1, int a2, float a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  float v6;
  float result;

  v4 = *(_QWORD **)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 80);
  v5 = **(_QWORD **)(a1 + 64);
  *(float *)(v5 + 4 * a2) = (float)((float)(1.0 - *(float *)(a1 + 28)) * a3)
                            + (float)(*(float *)(a1 + 28) * *(float *)(**(_QWORD **)(a1 + 56) + 4 * a2));
  v6 = fabsf(a3);
  if ((float)(*(float *)(a1 + 36) * *(float *)(*v4 + 4 * a2)) >= v6)
    v6 = *(float *)(a1 + 36) * *(float *)(*v4 + 4 * a2);
  *(float *)(*v3 + 4 * a2) = v6;
  result = (float)(*(float *)(v5 + 4 * a2) * (float)(*(float *)(a1 + 24) / (float)(1.0 - *(float *)(a1 + 40))))
         / (float)(v6 + *(float *)(a1 + 32));
  *(float *)(**(_QWORD **)(a1 + 104) + 4 * a2) = result;
  return result;
}

uint64_t EstimatorAdaMax<float>::updateRowOfElements(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = **(_QWORD **)(result + 104) + 4 * a2;
    v7 = **(_QWORD **)(result + 80) + 4 * a2;
    v8 = **(_QWORD **)(result + 72) + 4 * a2;
    v9 = **(_QWORD **)(result + 64) + 4 * a2;
    v10 = **(_QWORD **)(result + 56) + 4 * a2;
    do
    {
      v11 = *(float *)(a3 + v5);
      *(float *)(v9 + v5) = (float)(v11 * (float)(1.0 - *(float *)(result + 28)))
                          + (float)(*(float *)(result + 28) * *(float *)(v10 + v5));
      v12 = fabsf(v11);
      if ((float)(*(float *)(result + 36) * *(float *)(v8 + v5)) >= v12)
        v12 = *(float *)(result + 36) * *(float *)(v8 + v5);
      *(float *)(v7 + v5) = v12;
      v13 = (float)(*(float *)(v9 + v5) * (float)(*(float *)(result + 24) / (float)(1.0 - *(float *)(result + 40))))
          / (float)(v12 + *(float *)(result + 32));
      *(float *)(v6 + v5) = v13;
      *(float *)(a4 + v5) = v13;
      v5 += 4;
    }
    while (4 * a5 != v5);
  }
  return result;
}

float *EstimatorAdaMax<float>::print(uint64_t a1)
{
  int v2;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  if (!*(_BYTE *)(a1 + 12))
    EstimatorAdaMax<float>::allocate(a1);
  v2 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v5 = 0.0;
  v6 = 0.0;
  onlineStdMeanVar(**(float ***)(a1 + 56), &v9, &v8, &v7, &v6, &v5, &v4, v2);
  onlineStdMeanVar(**(float ***)(a1 + 64), &v9, &v8, &v7, &v6, &v5, &v4, v2);
  onlineStdMeanVar(**(float ***)(a1 + 72), &v9, &v8, &v7, &v6, &v5, &v4, v2);
  onlineStdMeanVar(**(float ***)(a1 + 80), &v9, &v8, &v7, &v6, &v5, &v4, v2);
  return onlineStdMeanVar(**(float ***)(a1 + 104), &v9, &v8, &v7, &v6, &v5, &v4, v2);
}

void EstimatorAdaMax<float>::name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 120), *(_QWORD *)(a1 + 128));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 120);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 136);
  }
}

uint64_t EstimatorAdaMax<float>::isTransposed(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

float EstimatorAdaMax<float>::getAlpha(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

void EstimatorAdaMax<float>::~EstimatorAdaMax(uint64_t a1)
{
  EstimatorAdaMax<float>::~EstimatorAdaMax(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t EstimatorAdaMax<float>::~EstimatorAdaMax(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  *(_QWORD *)a1 = off_1E2D55BA0;
  v2 = *(_QWORD **)(a1 + 56);
  if (v2)
  {
    if (*v2)
    {
      MEMORY[0x19401CD78](*v2, 0x1000C8052888210);
      v3 = *(_QWORD *)(a1 + 56);
      if (v3)
        MEMORY[0x19401CD90](v3, 0x80C40B8603338);
    }
  }
  v4 = *(_QWORD **)(a1 + 64);
  if (v4)
  {
    if (*v4)
    {
      MEMORY[0x19401CD78](*v4, 0x1000C8052888210);
      v5 = *(_QWORD *)(a1 + 64);
      if (v5)
        MEMORY[0x19401CD90](v5, 0x80C40B8603338);
    }
  }
  v6 = *(_QWORD **)(a1 + 72);
  if (v6)
  {
    if (*v6)
    {
      MEMORY[0x19401CD78](*v6, 0x1000C8052888210);
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        MEMORY[0x19401CD90](v7, 0x80C40B8603338);
    }
  }
  v8 = *(_QWORD **)(a1 + 80);
  if (v8)
  {
    if (*v8)
    {
      MEMORY[0x19401CD78](*v8, 0x1000C8052888210);
      v9 = *(_QWORD *)(a1 + 80);
      if (v9)
        MEMORY[0x19401CD90](v9, 0x80C40B8603338);
    }
  }
  v10 = *(_QWORD **)(a1 + 88);
  if (v10)
  {
    if (*v10)
    {
      MEMORY[0x19401CD78](*v10, 0x1000C8052888210);
      v11 = *(_QWORD *)(a1 + 88);
      if (v11)
        MEMORY[0x19401CD90](v11, 0x80C40B8603338);
    }
  }
  v12 = *(_QWORD **)(a1 + 96);
  if (v12)
  {
    if (*v12)
    {
      MEMORY[0x19401CD78](*v12, 0x1000C8052888210);
      v13 = *(_QWORD *)(a1 + 96);
      if (v13)
        MEMORY[0x19401CD90](v13, 0x80C40B8603338);
    }
  }
  v14 = *(_QWORD **)(a1 + 104);
  if (v14)
  {
    if (*v14)
    {
      MEMORY[0x19401CD78](*v14, 0x1000C8052888210);
      v15 = *(_QWORD *)(a1 + 104);
      if (v15)
        MEMORY[0x19401CD90](v15, 0x80C40B8603338);
    }
  }
  v16 = *(_QWORD **)(a1 + 48);
  if (v16)
  {
    if (*v16)
    {
      MEMORY[0x19401CD78](*v16, 0x1000C8052888210);
      v17 = *(_QWORD *)(a1 + 48);
      if (v17)
        MEMORY[0x19401CD90](v17, 0x80C40B8603338);
    }
  }
  v18 = *(_QWORD **)(a1 + 112);
  if (v18)
  {
    if (*v18)
    {
      MEMORY[0x19401CD78](*v18, 0x1000C8052888210);
      v19 = *(_QWORD *)(a1 + 112);
      if (v19)
        MEMORY[0x19401CD90](v19, 0x80C40B8603338);
    }
  }
  *(_BYTE *)(a1 + 12) = 0;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  return a1;
}

void EstimatorAdaMax<float>::allocate(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  void *v4;
  _QWORD *v5;
  int v6;
  void *v7;
  _QWORD *v8;
  int v9;
  void *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  _QWORD *v17;
  int v18;
  void *v19;
  _QWORD *v20;
  int v21;
  void *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  _QWORD *v26;
  int v27;
  void *v28;

  v2 = (_QWORD *)operator new();
  v3 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v4 = (void *)operator new[]();
  *v2 = v4;
  bzero(v4, 4 * v3);
  *(_QWORD *)(a1 + 56) = v2;
  v5 = (_QWORD *)operator new();
  v6 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v7 = (void *)operator new[]();
  *v5 = v7;
  bzero(v7, 4 * v6);
  *(_QWORD *)(a1 + 64) = v5;
  v8 = (_QWORD *)operator new();
  v9 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v10 = (void *)operator new[]();
  *v8 = v10;
  bzero(v10, 4 * v9);
  *(_QWORD *)(a1 + 72) = v8;
  v11 = (_QWORD *)operator new();
  v12 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v13 = (void *)operator new[]();
  *v11 = v13;
  bzero(v13, 4 * v12);
  *(_QWORD *)(a1 + 80) = v11;
  v14 = (_QWORD *)operator new();
  v15 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v16 = (void *)operator new[]();
  *v14 = v16;
  bzero(v16, 4 * v15);
  *(_QWORD *)(a1 + 88) = v14;
  v17 = (_QWORD *)operator new();
  v18 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v19 = (void *)operator new[]();
  *v17 = v19;
  bzero(v19, 4 * v18);
  *(_QWORD *)(a1 + 96) = v17;
  v20 = (_QWORD *)operator new();
  v21 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v22 = (void *)operator new[]();
  *v20 = v22;
  bzero(v22, 4 * v21);
  *(_QWORD *)(a1 + 104) = v20;
  v23 = (_QWORD *)operator new();
  v24 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v25 = (void *)operator new[]();
  *v23 = v25;
  bzero(v25, 4 * v24);
  *(_QWORD *)(a1 + 48) = v23;
  v26 = (_QWORD *)operator new();
  v27 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v28 = (void *)operator new[]();
  *v26 = v28;
  bzero(v28, 4 * v27);
  *(_QWORD *)(a1 + 112) = v26;
  *(_BYTE *)(a1 + 12) = 1;
}

void sub_191555980(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void SparseMatrix<float>::add<float>(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  _QWORD **v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD **v21;
  int v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD **v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  int *v38;
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  _QWORD *v52;
  _QWORD **v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  float *v60;
  uint64_t v61;
  float v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  float *v69;
  float *v70;
  uint64_t v71;
  float v72;
  float v73;
  uint64_t v77;
  unint64_t v78;
  int v79;
  void *__p;
  char *v81;
  unint64_t v82;
  void *v83;
  int *v84;
  unint64_t v85;
  uint64_t *v86;
  _QWORD *v87[2];
  _QWORD **v88;
  _QWORD *v89[3];

  v89[0] = 0;
  v89[1] = 0;
  v88 = v89;
  v87[0] = 0;
  v87[1] = 0;
  v86 = (uint64_t *)v87;
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 < 1)
  {
    v25 = v89;
  }
  else
  {
    v8 = 0;
    LODWORD(v9) = *(_DWORD *)(a1 + 12);
    do
    {
      if ((int)v9 >= 1)
      {
        v10 = 0;
        do
        {
          v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24 * v8) + 4 * v10);
          LODWORD(v83) = v11;
          v12 = v89[0];
          if (!v89[0])
            goto LABEL_14;
          v13 = v89;
          do
          {
            v14 = v12;
            v15 = v13;
            v16 = *((_DWORD *)v12 + 7);
            v17 = v12 + 1;
            if (v16 >= v11)
            {
              v17 = v14;
              v13 = (_QWORD **)v14;
            }
            v12 = (_QWORD *)*v17;
          }
          while (v12);
          if (v13 == v89)
            goto LABEL_14;
          if (v16 < v11)
            v14 = v15;
          if (v11 < *((_DWORD *)v14 + 7))
LABEL_14:
            std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)&v88, v11, v11);
          v18 = v87[0];
          if (!v87[0])
            goto LABEL_24;
          v19 = v87;
          do
          {
            v20 = v18;
            v21 = v19;
            v22 = *((_DWORD *)v18 + 7);
            v23 = v18 + 1;
            if (v22 >= v11)
            {
              v23 = v20;
              v19 = (_QWORD **)v20;
            }
            v18 = (_QWORD *)*v23;
          }
          while (v18);
          if (v19 == v87)
            goto LABEL_24;
          if (v22 < v11)
            v20 = v21;
          if (v11 >= *((_DWORD *)v20 + 7))
          {
            v24 = std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(&v86, v11, (unsigned int *)&v83);
            ++*((_DWORD *)v24 + 8);
          }
          else
          {
LABEL_24:
            std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>((uint64_t *)&v86, v11, COERCE_DOUBLE(v11 | 0x100000000));
          }
          ++v10;
          v9 = *(int *)(a1 + 12);
        }
        while (v10 < v9);
        v7 = *(_DWORD *)(a1 + 16);
      }
      ++v8;
    }
    while (v8 < v7);
    v25 = v88;
  }
  v83 = 0;
  v84 = 0;
  v85 = 0;
  __p = 0;
  v81 = 0;
  v82 = 0;
  v26 = **(_QWORD **)(a1 + 80);
  if (v25 == v89)
  {
    v29 = 0;
  }
  else
  {
    v77 = **(_QWORD **)(a1 + 80);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = *((_DWORD *)v25 + 7);
      v79 = v30;
      if ((unint64_t)v29 >= v28)
      {
        v31 = v29 - v27;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62)
          goto LABEL_99;
        v33 = v28 - (_QWORD)v27;
        v34 = (uint64_t)(v28 - (_QWORD)v27) >> 1;
        if (v34 > v32)
          v32 = v34;
        if (v33 >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v32;
        if (v35)
          v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
        else
          v36 = 0;
        v37 = (int *)(v35 + 4 * v31);
        *v37 = v30;
        v38 = v37 + 1;
        while (v29 != v27)
        {
          v39 = *--v29;
          *--v37 = v39;
        }
        v83 = v37;
        v84 = v38;
        v78 = v35 + 4 * v36;
        v85 = v78;
        if (v27)
          operator delete(v27);
        v27 = v37;
        v29 = v38;
      }
      else
      {
        v78 = v28;
        *v29++ = v30;
      }
      v84 = v29;
      v40 = std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(&v86, v79, (unsigned int *)&v79);
      v41 = v40;
      v42 = v81;
      if ((unint64_t)v81 >= v82)
      {
        v44 = (char *)__p;
        v45 = (v81 - (_BYTE *)__p) >> 2;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62)
LABEL_99:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v47 = v82 - (_QWORD)__p;
        if ((uint64_t)(v82 - (_QWORD)__p) >> 1 > v46)
          v46 = v47 >> 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
          v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v48);
        else
          v49 = 0;
        v50 = (char *)(v48 + 4 * v45);
        *(_DWORD *)v50 = *((_DWORD *)v41 + 8);
        v43 = v50 + 4;
        while (v42 != v44)
        {
          v51 = *((_DWORD *)v42 - 1);
          v42 -= 4;
          *((_DWORD *)v50 - 1) = v51;
          v50 -= 4;
        }
        __p = v50;
        v82 = v48 + 4 * v49;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_DWORD *)v81 = *((_DWORD *)v40 + 8);
        v43 = v42 + 4;
      }
      v81 = v43;
      if ((int)a3 >= 1)
        bzero((void *)(v77 + 4 * v79 * (int)a3), 4 * a3);
      v52 = v25[1];
      v28 = v78;
      if (v52)
      {
        do
        {
          v53 = (_QWORD **)v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD **)v25[2];
          v54 = *v53 == v25;
          v25 = v53;
        }
        while (!v54);
      }
      v25 = v53;
    }
    while (v53 != v89);
    v7 = *(_DWORD *)(a1 + 16);
    v26 = v77;
  }
  if (v7 >= 1)
  {
    v55 = 0;
    v56 = *(unsigned int *)(a1 + 12);
    do
    {
      if ((int)v56 >= 1)
      {
        v57 = 0;
        v58 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24 * v55);
        do
        {
          if ((int)a3 >= 1)
          {
            v59 = *(float **)(*(_QWORD *)(a1 + 24) + 8 * v55);
            v60 = (float *)(v26 + 4 * *(_DWORD *)(v58 + 4 * v57) * (int)a3);
            v61 = a3;
            do
            {
              v62 = *v59++;
              *v60 = v62 + *v60;
              ++v60;
              --v61;
            }
            while (v61);
          }
          ++v57;
        }
        while (v57 != v56);
      }
      ++v55;
    }
    while (v55 != v7);
  }
  v63 = (int *)v83;
  if (v29 != v83)
  {
    v64 = v26;
    v65 = 0;
    v66 = **(_QWORD **)(a1 + 72);
    v67 = ((char *)v29 - (_BYTE *)v83) >> 2;
    do
    {
      v68 = v63[v65];
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 32))(a5, (v68 * a3), v64 + 4 * (int)v68 * (int)a3, v66, a3);
      v66 = **(_QWORD **)(a1 + 72);
      if ((int)a3 >= 1)
      {
        v69 = (float *)(*a2 + 4 * v68);
        v70 = **(float ***)(a1 + 72);
        v71 = a3;
        do
        {
          v72 = *v70 + *v69;
          *v69 = v72;
          v73 = 2.0;
          if (v72 > 2.0 || (v73 = -2.0, v72 < -2.0))
            *v69 = v73;
          ++v70;
          v69 += a4;
          --v71;
        }
        while (v71);
      }
      ++v65;
    }
    while (v67 > v65);
  }
  if (__p)
    operator delete(__p);
  if (v63)
    operator delete(v63);
  std::__tree<int>::destroy(v87[0]);
  std::__tree<int>::destroy(v89[0]);
}

void sub_191555F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  std::__tree<int>::destroy(a23);
  std::__tree<int>::destroy(*(_QWORD **)(v23 - 104));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>(uint64_t *result, int a2, double a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  char *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (char *)operator new(0x28uLL);
    *(double *)(v9 + 28) = a3;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

void EstimatorADAM<float>::update(uint64_t a1, float a2)
{
  if (a2 != 0.0)
    *(float *)(a1 + 20) = a2;
  if (!*(_BYTE *)(a1 + 16))
    EstimatorADAM<float>::allocate(a1);
}

double EstimatorADAM<float>::update(uint64_t a1, _QWORD *a2, uint64_t a3, float a4)
{
  uint64_t v7;
  int v8;
  double result;

  if (a4 != 0.0)
    *(float *)(a1 + 20) = a4;
  if (!*(_BYTE *)(a1 + 16))
    EstimatorADAM<float>::allocate(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
  {
    v8 = *(_DWORD *)(a1 + 56);
    v7 = *(unsigned int *)(a1 + 60);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 56);
    v8 = *(_DWORD *)(a1 + 60);
  }
  SparseMatrix<float>::add<float>(a3, a2, v7, v8, a1);
  *(float *)(a1 + 40) = *(float *)(a1 + 24) * *(float *)(a1 + 40);
  result = *(double *)(a1 + 32) * *(double *)(a1 + 48);
  *(double *)(a1 + 48) = result;
  ++*(_QWORD *)(a1 + 8);
  return result;
}

void EstimatorADAM<float>::reset(uint64_t a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 32);
  bzero(**(void ***)(a1 + 72), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 80), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 88), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 96), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 120), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  v2 = *(void ***)(a1 + 128);
  if (v2)
    bzero(*v2, 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  v3 = *(void ***)(a1 + 64);
  if (v3)
    bzero(*v3, 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
}

float EstimatorADAM<float>::updateOneElement(uint64_t a1, int a2, float a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  float v6;
  float v7;
  float result;

  v4 = *(_QWORD **)(a1 + 88);
  v3 = *(_QWORD **)(a1 + 96);
  v5 = **(_QWORD **)(a1 + 80);
  *(float *)(v5 + 4 * a2) = (float)((float)(1.0 - *(float *)(a1 + 24)) * a3)
                            + (float)(*(float *)(a1 + 24) * *(float *)(**(_QWORD **)(a1 + 72) + 4 * a2));
  v6 = (1.0 - *(double *)(a1 + 32)) * a3 * a3 + *(double *)(a1 + 32) * *(float *)(*v4 + 4 * a2);
  *(float *)(*v3 + 4 * a2) = v6;
  v7 = v6 / (1.0 - *(double *)(a1 + 48));
  result = *(float *)(a1 + 20)
         * (float)((float)(*(float *)(v5 + 4 * a2) / (float)(1.0 - *(float *)(a1 + 40)))
                 / (float)(*(float *)(a1 + 28) + sqrtf(v7)));
  *(float *)(**(_QWORD **)(a1 + 120) + 4 * a2) = result;
  return result;
}

float *EstimatorADAM<float>::print(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  float **v5;
  float **v6;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  if (!*(_BYTE *)(a1 + 16))
    EstimatorADAM<float>::allocate(a1);
  v2 = *(_DWORD *)(a1 + 56);
  v3 = *(_DWORD *)(a1 + 60);
  v4 = v3 * v2;
  v9 = 0.0;
  v10 = 0.0;
  v5 = *(float ***)(a1 + 72);
  onlineStdMeanVar(*v5, &v13, &v12, &v11, &v10, &v9, &v8, v3 * v2);
  if (*(int *)(a1 + 164) >= 2)
    MMatrix<float>::print(v5, "prevM=", v2, v3, 10);
  v6 = *(float ***)(a1 + 80);
  onlineStdMeanVar(*v6, &v13, &v12, &v11, &v10, &v9, &v8, v4);
  if (*(int *)(a1 + 164) >= 2)
    MMatrix<float>::print(v6, "M=", *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), 10);
  onlineStdMeanVar(**(float ***)(a1 + 88), &v13, &v12, &v11, &v10, &v9, &v8, v4);
  onlineStdMeanVar(**(float ***)(a1 + 96), &v13, &v12, &v11, &v10, &v9, &v8, v4);
  return onlineStdMeanVar(**(float ***)(a1 + 120), &v13, &v12, &v11, &v10, &v9, &v8, v4);
}

void EstimatorADAM<float>::name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 136), *(_QWORD *)(a1 + 144));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 136);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 152);
  }
}

uint64_t EstimatorADAM<float>::isTransposed(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

float EstimatorADAM<float>::getAlpha(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

void EstimatorADAM<float>::~EstimatorADAM(uint64_t a1)
{
  EstimatorADAM<float>::~EstimatorADAM(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t EstimatorADAM<float>::~EstimatorADAM(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  *(_QWORD *)a1 = off_1E2D4D6C8;
  v2 = *(_QWORD **)(a1 + 72);
  if (v2)
  {
    if (*v2)
    {
      MEMORY[0x19401CD78](*v2, 0x1000C8052888210);
      v3 = *(_QWORD *)(a1 + 72);
      if (v3)
        MEMORY[0x19401CD90](v3, 0x80C40B8603338);
    }
  }
  v4 = *(_QWORD **)(a1 + 80);
  if (v4)
  {
    if (*v4)
    {
      MEMORY[0x19401CD78](*v4, 0x1000C8052888210);
      v5 = *(_QWORD *)(a1 + 80);
      if (v5)
        MEMORY[0x19401CD90](v5, 0x80C40B8603338);
    }
  }
  v6 = *(_QWORD **)(a1 + 88);
  if (v6)
  {
    if (*v6)
    {
      MEMORY[0x19401CD78](*v6, 0x1000C8052888210);
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        MEMORY[0x19401CD90](v7, 0x80C40B8603338);
    }
  }
  v8 = *(_QWORD **)(a1 + 96);
  if (v8)
  {
    if (*v8)
    {
      MEMORY[0x19401CD78](*v8, 0x1000C8052888210);
      v9 = *(_QWORD *)(a1 + 96);
      if (v9)
        MEMORY[0x19401CD90](v9, 0x80C40B8603338);
    }
  }
  v10 = *(_QWORD **)(a1 + 104);
  if (v10)
  {
    if (*v10)
    {
      MEMORY[0x19401CD78](*v10, 0x1000C8052888210);
      v11 = *(_QWORD *)(a1 + 104);
      if (v11)
        MEMORY[0x19401CD90](v11, 0x80C40B8603338);
    }
  }
  v12 = *(_QWORD **)(a1 + 112);
  if (v12)
  {
    if (*v12)
    {
      MEMORY[0x19401CD78](*v12, 0x1000C8052888210);
      v13 = *(_QWORD *)(a1 + 112);
      if (v13)
        MEMORY[0x19401CD90](v13, 0x80C40B8603338);
    }
  }
  v14 = *(_QWORD **)(a1 + 120);
  if (v14)
  {
    if (*v14)
    {
      MEMORY[0x19401CD78](*v14, 0x1000C8052888210);
      v15 = *(_QWORD *)(a1 + 120);
      if (v15)
        MEMORY[0x19401CD90](v15, 0x80C40B8603338);
    }
  }
  v17 = (_QWORD *)(a1 + 64);
  v16 = *(_QWORD **)(a1 + 64);
  if (v16)
  {
    if (*v16)
    {
      MEMORY[0x19401CD78](*v16, 0x1000C8052888210);
      if (*v17)
        MEMORY[0x19401CD90](*v17, 0x80C40B8603338);
    }
  }
  v18 = *(_QWORD **)(a1 + 128);
  if (v18)
  {
    if (*v18)
    {
      MEMORY[0x19401CD78](*v18, 0x1000C8052888210);
      v19 = *(_QWORD *)(a1 + 128);
      if (v19)
        MEMORY[0x19401CD90](v19, 0x80C40B8603338);
    }
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  return a1;
}

void EstimatorADAM<float>::allocate(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  void *v4;
  _QWORD *v5;
  int v6;
  void *v7;
  _QWORD *v8;
  int v9;
  void *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  _QWORD *v17;
  int v18;
  void *v19;
  _QWORD *v20;
  int v21;
  void *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  _QWORD *v26;
  int v27;
  void *v28;

  v2 = (_QWORD *)operator new();
  v3 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v4 = (void *)operator new[]();
  *v2 = v4;
  bzero(v4, 4 * v3);
  *(_QWORD *)(a1 + 72) = v2;
  v5 = (_QWORD *)operator new();
  v6 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v7 = (void *)operator new[]();
  *v5 = v7;
  bzero(v7, 4 * v6);
  *(_QWORD *)(a1 + 80) = v5;
  v8 = (_QWORD *)operator new();
  v9 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v10 = (void *)operator new[]();
  *v8 = v10;
  bzero(v10, 4 * v9);
  *(_QWORD *)(a1 + 88) = v8;
  v11 = (_QWORD *)operator new();
  v12 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v13 = (void *)operator new[]();
  *v11 = v13;
  bzero(v13, 4 * v12);
  *(_QWORD *)(a1 + 96) = v11;
  v14 = (_QWORD *)operator new();
  v15 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v16 = (void *)operator new[]();
  *v14 = v16;
  bzero(v16, 4 * v15);
  *(_QWORD *)(a1 + 104) = v14;
  v17 = (_QWORD *)operator new();
  v18 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v19 = (void *)operator new[]();
  *v17 = v19;
  bzero(v19, 4 * v18);
  *(_QWORD *)(a1 + 112) = v17;
  v20 = (_QWORD *)operator new();
  v21 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v22 = (void *)operator new[]();
  *v20 = v22;
  bzero(v22, 4 * v21);
  *(_QWORD *)(a1 + 120) = v20;
  v23 = (_QWORD *)operator new();
  v24 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v25 = (void *)operator new[]();
  *v23 = v25;
  bzero(v25, 4 * v24);
  *(_QWORD *)(a1 + 64) = v23;
  v26 = (_QWORD *)operator new();
  v27 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v28 = (void *)operator new[]();
  *v26 = v28;
  bzero(v28, 4 * v27);
  *(_QWORD *)(a1 + 128) = v26;
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_191556A7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void MMatrix<float>::print(float **a1, char *a2, int a3, int a4, int a5)
{
  uint64_t v5;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  float *v13;
  char v14;
  uint64_t v15;
  float v16;
  BOOL v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  uint64_t v46;
  _BYTE v47[56];
  void *__p;
  char v49;
  uint64_t v50;
  std::string v51;
  std::string v52;
  __int128 v53;
  int64_t v54;
  char __s[100];
  uint64_t v56;

  LODWORD(v5) = a5;
  v56 = *MEMORY[0x1E0C80C00];
  sprintf(__s, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(&v52, __s);
  v9 = std::string::insert(&v52, 0, " (");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v45, ") ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v54 = v11->__r_.__value_.__r.__words[2];
  v53 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (a4 * a3 >= (int)v5)
    v5 = v5;
  else
    v5 = (a4 * a3);
  if ((int)v5 <= 0)
    goto LABEL_14;
  v13 = *a1;
  v14 = 1;
  v15 = v5;
  do
  {
    v16 = *v13++;
    v17 = v16 >= -1.0;
    if (v16 > 1.0)
      v17 = 0;
    v14 &= v17;
    --v15;
  }
  while (v15);
  if ((v14 & 1) != 0)
LABEL_14:
    v18 = "yes";
  else
    v18 = "no";
  std::string::basic_string[abi:ne180100]<0>(&v51, v18);
  v19 = std::string::insert(&v51, 0, " (");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v45, ") ");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  std::string::basic_string[abi:ne180100]<0>(&v42, a2);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v52;
  else
    v23 = (std::string *)v52.__r_.__value_.__r.__words[0];
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  else
    size = v52.__r_.__value_.__l.__size_;
  v25 = std::string::append(&v42, (const std::string::value_type *)v23, size);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v54 >= 0)
    v27 = (const std::string::value_type *)&v53;
  else
    v27 = (const std::string::value_type *)v53;
  if (v54 >= 0)
    v28 = HIBYTE(v54);
  else
    v28 = *((_QWORD *)&v53 + 1);
  v29 = std::string::append(&v43, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v44, "[");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if ((int)v5 >= 1)
  {
    v33 = 0;
    v34 = 4 * v5;
    do
    {
      memset(&v44, 0, sizeof(v44));
      std::ios_base::clear((std::ios_base *)((char *)&v45 + *(_QWORD *)(v45.__r_.__value_.__r.__words[0] - 24)), 0);
      *(_QWORD *)&v47[*(_QWORD *)(v45.__r_.__value_.__r.__words[2] - 24)] = 6;
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v45, (uint64_t)&v44);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v35 = v44.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v43, v35 + 1);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v43;
      else
        v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if (v35)
      {
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v44;
        else
          v37 = (std::string *)v44.__r_.__value_.__r.__words[0];
        memmove(v36, v37, v35);
      }
      *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 32;
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v43;
      else
        v38 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        v39 = v43.__r_.__value_.__l.__size_;
      std::string::append(&v51, (const std::string::value_type *)v38, v39);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v33 += 4;
    }
    while (v34 != v33);
  }
  std::string::append(&v51, " ]");
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v45.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + *(_QWORD *)(v45.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v45.__r_.__value_.__r.__words[2] = v40;
  v46 = MEMORY[0x1E0DE4FB8] + 16;
  if (v49 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v50);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
}

void sub_191556F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  uint64_t v71;

  if (a64 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
  if (a71 < 0)
    operator delete(a66);
  if (*(char *)(v71 - 217) < 0)
    operator delete(*(void **)(v71 - 240));
  _Unwind_Resume(a1);
}

void EstimatorScalar<float>::update(uint64_t a1, const float **a2, const float **a3, float a4)
{
  vDSP_Length v4;
  float __B;

  if (a4 == 0.0)
    a4 = *(float *)(a1 + 8);
  else
    *(float *)(a1 + 8) = a4;
  v4 = *(int *)(a1 + 16) * (uint64_t)*(int *)(a1 + 12);
  __B = a4;
  vDSP_vsma(*a3, 1, &__B, *a2, 1, (float *)*a2, 1, v4);
}

void EstimatorScalar<float>::update(uint64_t a1, _QWORD *a2, uint64_t a3, float a4)
{
  if (a4 != 0.0)
    *(float *)(a1 + 8) = a4;
  SparseMatrix<float>::add<float>(a3, a2, *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), a1);
}

float EstimatorScalar<float>::updateOneElement(uint64_t a1, float a2)
{
  return *(float *)(a1 + 8) * a2;
}

float EstimatorScalar<float>::updateRowOfElements(uint64_t a1, uint64_t a2, float *a3, float *a4, int a5)
{
  uint64_t v5;
  float v6;
  float result;

  if (a5 >= 1)
  {
    v5 = a5;
    do
    {
      v6 = *a3++;
      result = v6 * *(float *)(a1 + 8);
      *a4++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void EstimatorScalar<float>::name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
  }
}

uint64_t EstimatorScalar<float>::isTransposed(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

float EstimatorScalar<float>::getAlpha(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

void EstimatorScalar<float>::~EstimatorScalar(uint64_t a1)
{
  EstimatorScalar<float>::~EstimatorScalar(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t EstimatorScalar<float>::~EstimatorScalar(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_1E2D55C08;
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    if (!*v2 || (MEMORY[0x19401CD78](*v2, 0x1000C8052888210), *(_QWORD *)(a1 + 24)))
      MEMORY[0x19401CD90]();
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void GRU<float>::targets()
{
  exitFramework(1);
}

uint64_t GRU<float>::inputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t GRU<float>::outputs(uint64_t a1)
{
  return a1 + 112;
}

void GRU<float>::deltas()
{
  exitFramework(1);
}

uint64_t GRU<float>::inputDeltas(uint64_t a1)
{
  return a1 + 608;
}

uint64_t GRU<float>::weightsAreNaN()
{
  return 0;
}

uint64_t GRU<float>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  int v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  float **v18;
  int v19;
  char v21[8];

  v5 = (int)a4;
  *(_QWORD *)v21 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v21[4], v21, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((_DWORD *)this + 18);
    v10 = *(_QWORD *)this;
    v11 = (int *)(*(_QWORD *)this + v9);
    v12 = *(_QWORD *)this + *((_QWORD *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      v13 = 0;
    }
    v14 = v9;
    *(_DWORD *)(a1 + 568) = v13;
    if (v10 + v9 <= v12)
    {
      v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      v14 = v9;
    }
    else
    {
      v15 = 0;
    }
    *(_DWORD *)(a1 + 572) = v15;
    v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v17 = 0;
    }
    *(_DWORD *)(a1 + 576) = v17;
  }
  v18 = (float **)*(unsigned int *)(a1 + 52);
  if ((_DWORD)v18 != *(_DWORD *)&v21[4] || (v19 = *(_DWORD *)(a1 + 48), v19 != *(_DWORD *)v21))
    exitFramework(3);
  MMatrix<float>::read(*(char **)(a1 + 336), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), v18, v19);
  MMatrix<float>::read(*(char **)(a1 + 328), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 344), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 360), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<float>::read(*(char **)(a1 + 352), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  return MMatrix<float>::read(*(char **)(a1 + 368), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void GRU<float>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 568);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 572);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 576);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  MMatrix<float>::write(*(float ***)(a1 + 336), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
}

void sub_1915574B8()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 328), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_1915574D0()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 344), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_1915574E8()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 360), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_191557504()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 352), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_191557520(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int *v19;
  FILE *v20;
  uint64_t v21;

  MMatrix<float>::write(*(float ***)(v21 + 368), v20, v19, v18, *(_DWORD *)(v21 + 52), *(_DWORD *)(v21 + 52));
}

float GRU<float>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD **v5;
  float result;
  _QWORD **v7;
  int v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float *v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  float *v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  float *v46;
  float *v47;
  float v48;
  float v49;
  float v50;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v7 = 0;
LABEL_6:
  v8 = *(_DWORD *)(a1 + 52);
  v9 = (*(_DWORD *)(a1 + 48) * v8);
  if ((int)v9 >= 1)
  {
    v10 = (float *)*v7[42];
    v11 = (float *)*v5[42];
    v12 = **(float ***)(a1 + 336);
    v13 = (*(_DWORD *)(a1 + 48) * v8);
    do
    {
      v14 = *v10++;
      v15 = v14;
      v16 = *v11++;
      *v12++ = v15 - v16;
      --v13;
    }
    while (v13);
    v17 = (float *)*v7[43];
    v18 = (float *)*v5[43];
    v19 = **(float ***)(a1 + 344);
    v20 = v9;
    do
    {
      v21 = *v17++;
      v22 = v21;
      v23 = *v18++;
      *v19++ = v22 - v23;
      --v20;
    }
    while (v20);
    v24 = (float *)*v7[41];
    v25 = (float *)*v5[41];
    v26 = **(float ***)(a1 + 328);
    do
    {
      v27 = *v24++;
      v28 = v27;
      v29 = *v25++;
      result = v28 - v29;
      *v26++ = result;
      --v9;
    }
    while (v9);
  }
  if (v8)
  {
    v30 = (v8 * v8);
    v31 = (float *)*v7[45];
    v32 = (float *)*v5[45];
    v33 = **(float ***)(a1 + 360);
    v34 = v30;
    do
    {
      v35 = *v31++;
      v36 = v35;
      v37 = *v32++;
      *v33++ = v36 - v37;
      --v34;
    }
    while (v34);
    v38 = (float *)*v7[46];
    v39 = (float *)*v5[46];
    v40 = **(float ***)(a1 + 368);
    v41 = v30;
    do
    {
      v42 = *v38++;
      v43 = v42;
      v44 = *v39++;
      *v40++ = v43 - v44;
      --v41;
    }
    while (v41);
    v45 = (float *)*v7[44];
    v46 = (float *)*v5[44];
    v47 = **(float ***)(a1 + 352);
    do
    {
      v48 = *v45++;
      v49 = v48;
      v50 = *v46++;
      result = v49 - v50;
      *v47++ = result;
      --v30;
    }
    while (v30);
  }
  return result;
}

void GRU<float>::compareModels(uint64_t a1, void *lpsrc, _QWORD **a3)
{
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;
  float *v7;
  float *v8;
  int v9;
  float v10;
  float v11;
  float v12;
  _QWORD *v13;
  unint64_t v14;
  void *__p;

  v3 = a3;
  if (lpsrc)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
LABEL_3:
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  v6 = (*(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
  if ((int)v6 <= 0)
  {
    v13 = __p;
LABEL_12:
    v14 = *v13 | 1;
    goto LABEL_13;
  }
  v7 = (float *)*v3[42];
  v8 = (float *)*v5[42];
  LOBYTE(v9) = 1;
  do
  {
    v10 = *v7++;
    v11 = v10;
    v12 = *v8++;
    v9 = v9 & (vabds_f32(v11, v12) < 0.0000001);
    --v6;
  }
  while (v6);
  v13 = __p;
  if (v9)
    goto LABEL_12;
  v14 = *(_QWORD *)__p & 0xFFFFFFFFFFFFFFFELL;
LABEL_13:
  *v13 = v14;
  operator delete(v13);
}

void GRU<float>::addGradient(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  const float **v4;
  const float **v5;
  vDSP_Length v6;
  const float **v7;
  const float **v8;
  vDSP_Length v9;
  const float **v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  const float **v14;
  vDSP_Length v15;
  const float **v16;
  const float **v17;
  vDSP_Length v18;
  const float **v19;
  const float **v20;
  vDSP_Length v21;
  float __B;

  if (lpsrc)
  else
    v3 = 0;
  v4 = *(const float ***)(a1 + 336);
  v5 = (const float **)v3[42];
  v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v5, 1, &__B, *v4, 1, (float *)*v4, 1, v6);
  v7 = *(const float ***)(a1 + 328);
  v8 = (const float **)v3[41];
  v9 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v8, 1, &__B, *v7, 1, (float *)*v7, 1, v9);
  v10 = *(const float ***)(a1 + 344);
  v11 = (const float **)v3[43];
  v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v11, 1, &__B, *v10, 1, (float *)*v10, 1, v12);
  v13 = *(const float ***)(a1 + 360);
  v14 = (const float **)v3[45];
  v15 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v14, 1, &__B, *v13, 1, (float *)*v13, 1, v15);
  v16 = *(const float ***)(a1 + 352);
  v17 = (const float **)v3[44];
  v18 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v17, 1, &__B, *v16, 1, (float *)*v16, 1, v18);
  v19 = *(const float ***)(a1 + 368);
  v20 = (const float **)v3[46];
  v21 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v20, 1, &__B, *v19, 1, (float *)*v19, 1, v21);
}

void GRU<float>::applyGradient(uint64_t a1, void *lpsrc)
{
  void *v3;
  float v4;
  const float **v5;
  vDSP_Length v6;
  const float **v7;
  vDSP_Length v8;
  const float **v9;
  vDSP_Length v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  vDSP_Length v14;
  const float **v15;
  vDSP_Length v16;
  float __C;
  float __B;

  if (lpsrc)
  else
    v3 = 0;
  v4 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 1176) + 64))(*(_QWORD *)(a1 + 1176));
  (***(void (****)(_QWORD, _QWORD, uint64_t))(a1 + 1176))(*(_QWORD *)(a1 + 1176), *(_QWORD *)(a1 + 328), (uint64_t)v3 + 232);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1168))(*(_QWORD *)(a1 + 1168), *(_QWORD *)(a1 + 336), (uint64_t)v3 + 240, v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1184))(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 344), (uint64_t)v3 + 248, v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1200))(*(_QWORD *)(a1 + 1200), *(_QWORD *)(a1 + 352), (uint64_t)v3 + 256, v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1192))(*(_QWORD *)(a1 + 1192), *(_QWORD *)(a1 + 360), (uint64_t)v3 + 264, v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1208))(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 368), (uint64_t)v3 + 272, v4);
  v5 = *(const float ***)(a1 + 328);
  v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v5, 1, &__B, &__C, (float *)*v5, 1, v6);
  v7 = *(const float ***)(a1 + 336);
  v8 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  v9 = *(const float ***)(a1 + 344);
  v10 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  v11 = *(const float ***)(a1 + 352);
  v12 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  v13 = *(const float ***)(a1 + 360);
  v14 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  v15 = *(const float ***)(a1 + 368);
  v16 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
}

void GRU<float>::clipModel(uint64_t a1, float a2)
{
  const float **v4;
  float v5;
  vDSP_Length v6;
  const float **v7;
  vDSP_Length v8;
  const float **v9;
  vDSP_Length v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  vDSP_Length v14;
  const float **v15;
  vDSP_Length v16;
  float __C;
  float __B;

  v4 = *(const float ***)(a1 + 336);
  v5 = -a2;
  v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = -a2;
  vDSP_vclip(*v4, 1, &__B, &__C, (float *)*v4, 1, v6);
  v7 = *(const float ***)(a1 + 328);
  v8 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  v9 = *(const float ***)(a1 + 344);
  v10 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  v11 = *(const float ***)(a1 + 360);
  v12 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  v13 = *(const float ***)(a1 + 352);
  v14 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  v15 = *(const float ***)(a1 + 368);
  v16 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
}

uint64_t GRU<float>::normalizeModel(uint64_t result, float a2)
{
  int v2;
  uint64_t v3;
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;

  v2 = *(_DWORD *)(result + 52);
  v3 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v3 >= 1)
  {
    v4 = **(float ***)(result + 336);
    v5 = v4;
    v6 = (*(_DWORD *)(result + 48) * v2);
    do
    {
      *v5 = *v5 * a2;
      ++v5;
      --v6;
    }
    while (v6);
    v7 = v3;
    do
    {
      *v4 = *v4 * a2;
      ++v4;
      --v7;
    }
    while (v7);
    v8 = **(float ***)(result + 344);
    do
    {
      *v8 = *v8 * a2;
      ++v8;
      --v3;
    }
    while (v3);
  }
  if (v2)
  {
    v9 = (v2 * v2);
    v10 = **(float ***)(result + 360);
    v11 = v9;
    do
    {
      *v10 = *v10 * a2;
      ++v10;
      --v11;
    }
    while (v11);
    v12 = **(float ***)(result + 352);
    v13 = v9;
    do
    {
      *v12 = *v12 * a2;
      ++v12;
      --v13;
    }
    while (v13);
    v14 = **(float ***)(result + 368);
    do
    {
      *v14 = *v14 * a2;
      ++v14;
      --v9;
    }
    while (v9);
  }
  return result;
}

void GRU<float>::allocInitialState(uint64_t a1, void **a2)
{
  _QWORD *v4;
  int v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  int v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;

  v4 = (_QWORD *)operator new();
  VVector<float>::VVector(v4, *(_DWORD *)(a1 + 52), 0);
  v5 = *(_DWORD *)(a1 + 52);
  v7 = (char *)a2[1];
  v6 = (char *)a2[2];
  if (v7 >= v6)
  {
    v9 = (v7 - (_BYTE *)*a2) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      goto LABEL_34;
    v11 = v6 - (_BYTE *)*a2;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 16 * v9;
    v15 = v12 + 16 * v13;
    *(_DWORD *)v14 = v5;
    *(_QWORD *)(v14 + 8) = v4;
    v8 = (void *)(v14 + 16);
    v17 = (char *)*a2;
    v16 = (char *)a2[1];
    if (v16 != *a2)
    {
      do
      {
        *(_OWORD *)(v14 - 16) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a2;
    }
    *a2 = (void *)v14;
    a2[1] = v8;
    a2[2] = (void *)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v7 = v5;
    *((_QWORD *)v7 + 1) = v4;
    v8 = v7 + 16;
  }
  a2[1] = v8;
  v18 = (_QWORD *)operator new();
  VVector<float>::VVector(v18, *(_DWORD *)(a1 + 52), 0);
  v19 = *(_DWORD *)(a1 + 52);
  v21 = (char *)a2[1];
  v20 = (char *)a2[2];
  if (v21 < v20)
  {
    *(_DWORD *)v21 = v19;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    goto LABEL_33;
  }
  v23 = (v21 - (_BYTE *)*a2) >> 4;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 60)
LABEL_34:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v25 = v20 - (_BYTE *)*a2;
  if (v25 >> 3 > v24)
    v24 = v25 >> 3;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
    v26 = 0xFFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
    v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v26);
  else
    v27 = 0;
  v28 = v26 + 16 * v23;
  v29 = v26 + 16 * v27;
  *(_DWORD *)v28 = v19;
  *(_QWORD *)(v28 + 8) = v18;
  v22 = (void *)(v28 + 16);
  v31 = (char *)*a2;
  v30 = (char *)a2[1];
  if (v30 != *a2)
  {
    do
    {
      *(_OWORD *)(v28 - 16) = *((_OWORD *)v30 - 1);
      v28 -= 16;
      v30 -= 16;
    }
    while (v30 != v31);
    v30 = (char *)*a2;
  }
  *a2 = (void *)v28;
  a2[1] = v22;
  a2[2] = (void *)v29;
  if (v30)
    operator delete(v30);
LABEL_33:
  a2[1] = v22;
}

void sub_191557FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void *GRU<float>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;

  v8 = *(int *)(a1 + 52);
  v9 = *a2;
  *(_DWORD *)(v9 + 16 * *a4) = v8;
  memmove(**(void ***)(v9 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v8);
  v10 = *a4 + 1;
  *a4 = v10;
  v11 = *(int *)(a1 + 52);
  v12 = *a2;
  *(_DWORD *)(v12 + 16 * v10) = v11;
  result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 88) + 8 * a3), 4 * v11);
  ++*a4;
  return result;
}

void *GRU<float>::restoreState(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 112);
  v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v8 + 8 * a3), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *a4;
  *a4 = v11 + 1;
  return memmove(*(void **)(v10 + 8 * a3), **(const void ***)(*a2 + 16 * v11 + 8), 4 * *(int *)(a1 + 52));
}

void GRU<float>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;

  v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  v6 = *a3 + 1;
  *a3 = v6;
  bzero(**(void ***)(*a2 + 16 * v6 + 8), 4 * *(int *)(*a2 + 16 * v6));
  ++*a3;
}

void GRU<float>::resetForNewBatch(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v15;

  v2 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v3 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v4 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v5 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 40))(v5, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v6 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v7 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[146] + 16))(a1[146]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[147] + 16))(a1[147]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[148] + 16))(a1[148]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[149] + 16))(a1[149]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[150] + 16))(a1[150]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[151] + 16))(a1[151]);
  v8 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v9 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 40))(v9, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v10 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 40))(v10, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v11 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v12 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 40))(v12, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v13 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, __p);
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_1915584E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *GRU<float>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  double v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *result;
  uint64_t v19;
  char *v20;

  v4 = **(_QWORD **)(a1 + 328);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v5;
  v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v6, v5)));
    v6 = *(_DWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(_QWORD *)v9 = v4;
    v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v5;
    *(_DWORD *)(v9 + 12) = v6;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = **(_QWORD **)(a1 + 336);
  if ((unint64_t)v10 >= *(_QWORD *)(a2 + 16))
  {
    v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    v6 = *(_DWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(_QWORD *)v10 = v11;
    v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v5;
    *((_DWORD *)v10 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v12;
  v13 = **(_QWORD **)(a1 + 344);
  if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
  {
    v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
  }
  else
  {
    *(_QWORD *)v12 = v13;
    v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v5;
    *((_DWORD *)v12 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v14;
  v15 = **(_QWORD **)(a1 + 352);
  HIDWORD(v7) = v5;
  if ((unint64_t)v14 >= *(_QWORD *)(a2 + 16))
  {
    v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v7);
    v5 = *(_DWORD *)(a1 + 52);
    v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(_QWORD *)v14 = v15;
    v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v5;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v16;
  v17 = **(_QWORD **)(a1 + 360);
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, v7);
    v5 = *(_DWORD *)(a1 + 52);
    v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(_QWORD *)v16 = v17;
    result = v16 + 16;
    *((_DWORD *)v16 + 2) = v5;
    *((_DWORD *)v16 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = result;
  v19 = **(_QWORD **)(a1 + 368);
  if ((unint64_t)result >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v19, v7);
    v20 = result;
  }
  else
  {
    *(_QWORD *)result = v19;
    v20 = result + 16;
    *((_DWORD *)result + 2) = v5;
    *((_DWORD *)result + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v20;
  return result;
}

uint64_t GRU<float>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t GRU<float>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void GRU<float>::allocAllBuffers(uint64_t a1)
{
  void *__p;
  char v3;

  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from allocAll");
  GRU<float>::init(a1);
  if (v3 < 0)
    operator delete(__p);
}

void sub_191558730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GRU<float>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[256];
  v3 = a1[255];
  if (v2 == v3)
  {
    v3 = a1[256];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = a1[256];
        v3 = a1[255];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[259];
  v7 = a1[258];
  if (v6 == v7)
  {
    v7 = a1[259];
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C8052888210);
        v6 = a1[259];
        v7 = a1[258];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    v3 = a1[255];
  }
  a1[256] = v3;
  a1[259] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 95);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 125);
  return SparseMatrix<float>::cleanupAllBuffers(a1 + 110);
}

uint64_t GRU<float>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t GRU<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void GRU<float>::update(uint64_t a1, float a2)
{
  int v4;
  int v5;
  vDSP_Length v6;
  vDSP_Length v7;
  float __B;

  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  if (*(int *)(a1 + 56) < 1)
  {
    __B = a2;
    v6 = v5 * v4;
    vDSP_vsma(*(const float **)(a1 + 1120), 1, &__B, *(const float **)(a1 + 240), 1, *(float **)(a1 + 240), 1, v6);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1136), 1, &__B, *(const float **)(a1 + 248), 1, *(float **)(a1 + 248), 1, v6);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1128), 1, &__B, *(const float **)(a1 + 232), 1, *(float **)(a1 + 232), 1, v6);
  }
  else
  {
    SparseMatrix<float>::add<float>(a1 + 760, (uint64_t *)(a1 + 240), v5, v4, a2);
    SparseMatrix<float>::add<float>(a1 + 1000, (uint64_t *)(a1 + 248), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    SparseMatrix<float>::add<float>(a1 + 880, (uint64_t *)(a1 + 232), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
  }
  v7 = (v5 * v5);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1144), 1, &__B, *(const float **)(a1 + 264), 1, *(float **)(a1 + 264), 1, v7);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1160), 1, &__B, *(const float **)(a1 + 272), 1, *(float **)(a1 + 272), 1, v7);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1152), 1, &__B, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v7);
}

void GRU<float>::backward(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  int v12;
  float32x4_t **v13;
  int v14;
  float *v15;
  float *v16;
  float32x4_t *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  void **v22;
  int v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float32x4_t **v33;
  uint64_t v34;
  float32x4_t **v35;
  __n128 v36;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  _BOOL4 v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  int v56;
  float32x4_t **v57;
  void **v60;
  int v61;
  int v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *__p;
  void *v70;
  uint64_t v71;

  v56 = a5;
  v62 = a5 - 1;
  if (a5 >= 1)
  {
    v57 = (float32x4_t **)(a1 + 752);
    v60 = (void **)(a1 + 1232);
    v6 = a5 - 1;
    do
    {
      v7 = *(unsigned __int8 *)(a1 + 2088);
      if (*(_BYTE *)(a1 + 2088))
        v8 = v62 - v6;
      else
        v8 = v6;
      if (*(_BYTE *)(a1 + 2088))
        v9 = v8 < v62;
      else
        v9 = v8 > 0;
      if (*(_BYTE *)(a1 + 2088))
        v10 = v8 > 0;
      else
        v10 = v8 < v62;
      if (*(_BYTE *)(a1 + 2088))
        v11 = v8 + 1;
      else
        v11 = v8 - 1;
      v61 = v11;
      memmove(*(void **)(*(_QWORD *)(a1 + 632) + 8 * v8), *(const void **)(*a4 + 8 * v8), 4 * *(int *)(a1 + 52));
      if (v10)
      {
        if (v7)
          v12 = v8 - 1;
        else
          v12 = v8 + 1;
        bzero(*(void **)(a1 + 752), 4 * *(int *)(a1 + 52));
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 656) + 8 * v12), 1, 0.0, *(float **)(a1 + 752), 1);
        VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 632) + 8 * v8), v57, (float32x4_t **)(*(_QWORD *)(a1 + 520) + 8 * v12), *(_DWORD *)(a1 + 52));
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 352), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 680) + 8 * v12), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 632) + 8 * v8), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 360), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 704) + 8 * v12), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 632) + 8 * v8), 1);
      }
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1216), *(float **)(*(_QWORD *)(a1 + 472) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 576));
      VVector<float>::applyPrimeDerivative(v60, *(float **)(*(_QWORD *)(a1 + 448) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 572));
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1224), *(float **)(*(_QWORD *)(a1 + 424) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 568));
      bzero(*(void **)(*(_QWORD *)(a1 + 656) + 8 * v8), 4 * *(int *)(a1 + 52));
      v13 = (float32x4_t **)(*(_QWORD *)(a1 + 656) + 8 * v8);
      v14 = *(_DWORD *)(a1 + 52);
      if (v14 >= 1)
      {
        v15 = *(float **)(*(_QWORD *)(a1 + 632) + 8 * v8);
        v16 = *(float **)(*(_QWORD *)(a1 + 496) + 8 * v8);
        v17 = *v13;
        v18 = *(unsigned int *)(a1 + 52);
        do
        {
          v19 = *v15++;
          v20 = v19;
          v21 = *v16++;
          v17->f32[0] = v17->f32[0] + (float)(v20 * (float)(1.0 - v21));
          v17 = (float32x4_t *)((char *)v17 + 4);
          --v18;
        }
        while (v18);
      }
      VVector<float>::mulV(v13, v13, (float32x4_t **)(a1 + 1216), v14);
      v22 = (void **)(*(_QWORD *)(a1 + 680) + 8 * v8);
      if (v9)
      {
        v23 = *(_DWORD *)(a1 + 52);
        if (v23 >= 1)
        {
          v24 = *(float **)(*(_QWORD *)(a1 + 112) + 8 * v61);
          v25 = *(float **)(*(_QWORD *)(a1 + 544) + 8 * v8);
          v26 = (float *)*v22;
          v27 = *(unsigned int *)(a1 + 52);
          do
          {
            v28 = *v24++;
            v29 = v28;
            v30 = *v25++;
            *v26++ = v29 - v30;
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        memmove(*v22, *(const void **)(*(_QWORD *)(a1 + 544) + 8 * v8), 4 * *(int *)(a1 + 52));
        v22 = (void **)(*(_QWORD *)(a1 + 680) + 8 * v8);
        v23 = *(_DWORD *)(a1 + 52);
        if (v23 >= 1)
        {
          v31 = (float *)*v22;
          v32 = *(unsigned int *)(a1 + 52);
          do
          {
            *v31 = -*v31;
            ++v31;
            --v32;
          }
          while (v32);
        }
      }
      VVector<float>::mulV((float32x4_t **)v22, (float32x4_t **)(*(_QWORD *)(a1 + 632) + 8 * v8), (float32x4_t **)v22, v23);
      v33 = (float32x4_t **)(*(_QWORD *)(a1 + 680) + 8 * v8);
      VVector<float>::mulV(v33, v33, (float32x4_t **)(a1 + 1224), *(_DWORD *)(a1 + 52));
      v34 = *(_QWORD *)(a1 + 704);
      if (v9)
      {
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 656) + 8 * v8), 1, 0.0, *(float **)(v34 + 8 * v8), 1);
        VVector<float>::mulV((float32x4_t **)(*(_QWORD *)(a1 + 704) + 8 * v8), (float32x4_t **)(*(_QWORD *)(a1 + 704) + 8 * v8), (float32x4_t **)(*(_QWORD *)(a1 + 112) + 8 * v61), *(_DWORD *)(a1 + 52));
        v35 = (float32x4_t **)(*(_QWORD *)(a1 + 704) + 8 * v8);
        v36.n128_f32[0] = VVector<float>::mulV(v35, v35, (float32x4_t **)v60, *(_DWORD *)(a1 + 52));
      }
      else
      {
        bzero(*(void **)(v34 + 8 * v8), 4 * *(int *)(a1 + 52));
      }
      if (((**(uint64_t (***)(uint64_t, __n128))a1)(a1, v36) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 608) + 8 * v8), 4 * *(int *)(a1 + 48));
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 328), *(_DWORD *)(a1 + 48), *(const float **)(*(_QWORD *)(a1 + 680) + 8 * v8), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 608) + 8 * v8), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 344), *(_DWORD *)(a1 + 48), *(const float **)(*(_QWORD *)(a1 + 656) + 8 * v8), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 608) + 8 * v8), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 336), *(_DWORD *)(a1 + 48), *(const float **)(*(_QWORD *)(a1 + 704) + 8 * v8), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 608) + 8 * v8), 1);
      }
    }
    while (v6-- > 0);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 1016) = 0;
    *(_DWORD *)(a1 + 896) = 0;
  }
  if (v56 > 1)
  {
    v38 = 1;
    v39 = v56 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2088))
        v40 = v39;
      else
        v40 = v38;
      if (*(_BYTE *)(a1 + 2088))
        v41 = 1;
      else
        v41 = -1;
      v42 = v40 + v41;
      if (*(_BYTE *)(a1 + 2088))
        v43 = v56 - 2;
      else
        v43 = 1;
      v44 = v40 == v43;
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 680) + 8 * v40), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v42), (void **)(a1 + 1152), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v44);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 704) + 8 * v40), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v42), (void **)(a1 + 1144), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v44);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 656) + 8 * v40), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v42), (void **)(a1 + 1160), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v44);
      ++v38;
      --v39;
    }
    while (v39 != -1);
  }
  if (v56 >= 1)
  {
    v45 = 0;
    v46 = v62;
    do
    {
      if (*(_BYTE *)(a1 + 2088))
        v47 = v46;
      else
        v47 = v45;
      v48 = v62;
      if (!*(_BYTE *)(a1 + 2088))
        v48 = 0;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        v55 = v47 == v48;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 704) + 8 * v47), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v47), (void **)(a1 + 1120), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v55);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 680) + 8 * v47), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v47), (void **)(a1 + 1128), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v55);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 656) + 8 * v47), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v47), (void **)(a1 + 1136), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v55);
      }
      else
      {
        v49 = *(_QWORD *)(a1 + 704);
        v50 = *(_QWORD *)(a1 + 208) + 24 * v47;
        v70 = 0;
        v71 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v50, *(_QWORD *)(v50 + 8), (uint64_t)(*(_QWORD *)(v50 + 8) - *(_QWORD *)v50) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 760, *(int **)(v49 + 8 * v47), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          v70 = __p;
          operator delete(__p);
        }
        v51 = *(_QWORD *)(a1 + 680);
        v52 = *(_QWORD *)(a1 + 208) + 24 * v47;
        v67 = 0;
        v68 = 0;
        v66 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, *(const void **)v52, *(_QWORD *)(v52 + 8), (uint64_t)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 880, *(int **)(v51 + 8 * v47), (uint64_t)v66, *(_DWORD *)(a1 + 52));
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        v53 = *(_QWORD *)(a1 + 656);
        v54 = *(_QWORD *)(a1 + 208) + 24 * v47;
        v64 = 0;
        v65 = 0;
        v63 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v63, *(const void **)v54, *(_QWORD *)(v54 + 8), (uint64_t)(*(_QWORD *)(v54 + 8) - *(_QWORD *)v54) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1000, *(int **)(v53 + 8 * v47), (uint64_t)v63, *(_DWORD *)(a1 + 52));
        if (v63)
        {
          v64 = v63;
          operator delete(v63);
        }
      }
      ++v45;
      --v46;
    }
    while (v46 != -1);
  }
}

void GRU<float>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v8;
  float v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  void *v13;
  char v14;
  char *p_p;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  void *v19;
  char v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  void *v25;
  char v26;
  char *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  void *v31;
  char v32;
  char *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  void *v37;
  char v38;
  char *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  void *v43;
  char v44;
  char *v45;
  uint64_t v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  void *v50;
  char v51;
  char *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  void *v56;
  char v57;
  char *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  void *v62;
  char v63;
  char *v64;
  unsigned int v65;
  unsigned int v66;
  signed int v67;
  int v68;
  _BOOL4 v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  float32x4_t **v83;
  float32x4_t **v84;
  int v85;
  uint64_t v86;
  vDSP_Length v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  float32x4_t **v94;
  float32x4_t **v95;
  int v96;
  uint64_t v97;
  vDSP_Length v98;
  uint64_t v99;
  vDSP_Length v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  float32x4_t **v107;
  float32x4_t **v108;
  uint64_t v109;
  int v110;
  float32x4_t **v111;
  int v112;
  uint64_t v113;
  const float **v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  float *__Y;
  void *v120;
  void *v121;
  _QWORD *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  vDSP_Length v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  void *v130;
  char v131;
  char *p_B;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  void *v136;
  char v137;
  char *v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  void *v142;
  char v143;
  char *v144;
  uint64_t v145;
  float32x4_t **v146;
  uint64_t v147;
  float32x4_t **v148;
  int v149;
  float *v150;
  float32x4_t *v151;
  float32x4_t *v152;
  uint64_t v153;
  float v154;
  float v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  float32x4_t **v167;
  int *v168;
  _DWORD *v169;
  uint64_t v170;
  int v171;
  _DWORD *v172;
  int *v173;
  uint64_t v174;
  int v175;
  _DWORD *v176;
  int *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  float **v182;
  unsigned int v184;
  signed int v185;
  int v187;
  uint64_t v188;
  uint64_t v189;
  _BOOL4 v190;
  std::string v191;
  std::string __C;
  void *__B;
  __int128 v194;
  void *v195;
  char v196;
  void *v197;
  void *v198;
  uint64_t v199;
  void *v200;
  char v201;
  void *v202;
  void *v203;
  uint64_t v204;
  void *v205;
  char v206;
  std::string v207;
  void *__p;
  __int128 v209;
  _QWORD v210[2];
  void *v211[3];
  std::string v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
    v187 = 0;
  else
    v187 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v8 = *(_QWORD *)(a1 + 2096);
  if (!v8 || (v9 = *(float *)(v8 + 604), v9 <= 0.0))
    v9 = 50.0;
  __p = 0;
  v209 = 0uLL;
  i2s(&v207);
  v10 = std::string::insert(&v207, 0, "GRU Forward W_z[");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v212, "] WGZ:");
  v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v211[0] = (void *)v12->__r_.__value_.__l.__size_;
  *(void **)((char *)v211 + 7) = *(void **)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v209) < 0)
    operator delete(__p);
  __p = v13;
  *(void **)&v209 = v211[0];
  *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
  HIBYTE(v209) = v14;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v209 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  MMatrix<float>::print(*(float ***)(a1 + 328), p_p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v207);
  v16 = std::string::insert(&v207, 0, "GRU Forward W_r[");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v212, "] WGR:");
  v19 = (void *)v18->__r_.__value_.__r.__words[0];
  v211[0] = (void *)v18->__r_.__value_.__l.__size_;
  *(void **)((char *)v211 + 7) = *(void **)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v209) < 0)
    operator delete(__p);
  __p = v19;
  *(void **)&v209 = v211[0];
  *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
  HIBYTE(v209) = v20;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v209 >= 0)
    v21 = (char *)&__p;
  else
    v21 = (char *)__p;
  MMatrix<float>::print(*(float ***)(a1 + 336), v21, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v207);
  v22 = std::string::insert(&v207, 0, "GRU Forward W_o[");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v212, "] WGO:");
  v25 = (void *)v24->__r_.__value_.__r.__words[0];
  v211[0] = (void *)v24->__r_.__value_.__l.__size_;
  *(void **)((char *)v211 + 7) = *(void **)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v209) < 0)
    operator delete(__p);
  __p = v25;
  *(void **)&v209 = v211[0];
  *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
  HIBYTE(v209) = v26;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v209 >= 0)
    v27 = (char *)&__p;
  else
    v27 = (char *)__p;
  MMatrix<float>::print(*(float ***)(a1 + 344), v27, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v207);
  v28 = std::string::insert(&v207, 0, "GRU Forward R_z[");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v212, "] RGZ:");
  v31 = (void *)v30->__r_.__value_.__r.__words[0];
  v211[0] = (void *)v30->__r_.__value_.__l.__size_;
  *(void **)((char *)v211 + 7) = *(void **)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
  v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v209) < 0)
    operator delete(__p);
  __p = v31;
  *(void **)&v209 = v211[0];
  *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
  HIBYTE(v209) = v32;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v209 >= 0)
    v33 = (char *)&__p;
  else
    v33 = (char *)__p;
  MMatrix<float>::print(*(float ***)(a1 + 352), v33, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v207);
  v34 = std::string::insert(&v207, 0, "GRU Forward R_r[");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v212, "] RGR:");
  v37 = (void *)v36->__r_.__value_.__r.__words[0];
  v211[0] = (void *)v36->__r_.__value_.__l.__size_;
  *(void **)((char *)v211 + 7) = *(void **)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
  v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v209) < 0)
    operator delete(__p);
  __p = v37;
  *(void **)&v209 = v211[0];
  *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
  HIBYTE(v209) = v38;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v209 >= 0)
    v39 = (char *)&__p;
  else
    v39 = (char *)__p;
  MMatrix<float>::print(*(float ***)(a1 + 360), v39, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v207);
  v40 = std::string::insert(&v207, 0, "GRU Forward R_o[");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v212, "] RGO:");
  v43 = (void *)v42->__r_.__value_.__r.__words[0];
  v211[0] = (void *)v42->__r_.__value_.__l.__size_;
  *(void **)((char *)v211 + 7) = *(void **)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
  v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v209) < 0)
    operator delete(__p);
  __p = v43;
  *(void **)&v209 = v211[0];
  *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
  HIBYTE(v209) = v44;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v209 >= 0)
    v45 = (char *)&__p;
  else
    v45 = (char *)__p;
  MMatrix<float>::print(*(float ***)(a1 + 368), v45, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  v46 = *(_QWORD *)(a1 + 2096);
  if (v46 && *(_BYTE *)(v46 + 244))
  {
    i2s(&v207);
    v47 = std::string::insert(&v207, 0, "GRU Forward B_z[");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v212, "] :");
    v50 = (void *)v49->__r_.__value_.__r.__words[0];
    v211[0] = (void *)v49->__r_.__value_.__l.__size_;
    *(void **)((char *)v211 + 7) = *(void **)((char *)&v49->__r_.__value_.__r.__words[1] + 7);
    v51 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v209) < 0)
      operator delete(__p);
    __p = v50;
    *(void **)&v209 = v211[0];
    *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
    HIBYTE(v209) = v51;
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212.__r_.__value_.__l.__data_);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v207.__r_.__value_.__l.__data_);
    if (v209 >= 0)
      v52 = (char *)&__p;
    else
      v52 = (char *)__p;
    VVector<float>::print(*(float ***)(a1 + 376), v52, *(_DWORD *)(a1 + 52));
    i2s(&v207);
    v53 = std::string::insert(&v207, 0, "GRU Forward B_r[");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&v212, "] :");
    v56 = (void *)v55->__r_.__value_.__r.__words[0];
    v211[0] = (void *)v55->__r_.__value_.__l.__size_;
    *(void **)((char *)v211 + 7) = *(void **)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
    v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v209) < 0)
      operator delete(__p);
    __p = v56;
    *(void **)&v209 = v211[0];
    *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
    HIBYTE(v209) = v57;
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212.__r_.__value_.__l.__data_);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v207.__r_.__value_.__l.__data_);
    if (v209 >= 0)
      v58 = (char *)&__p;
    else
      v58 = (char *)__p;
    VVector<float>::print(*(float ***)(a1 + 384), v58, *(_DWORD *)(a1 + 52));
    i2s(&v207);
    v59 = std::string::insert(&v207, 0, "GRU Forward B_o[");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    v61 = std::string::append(&v212, "] :");
    v62 = (void *)v61->__r_.__value_.__r.__words[0];
    v211[0] = (void *)v61->__r_.__value_.__l.__size_;
    *(void **)((char *)v211 + 7) = *(void **)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
    v63 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v209) < 0)
      operator delete(__p);
    __p = v62;
    *(void **)&v209 = v211[0];
    *(void **)((char *)&v209 + 7) = *(void **)((char *)v211 + 7);
    HIBYTE(v209) = v63;
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212.__r_.__value_.__l.__data_);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v207.__r_.__value_.__l.__data_);
    if (v209 >= 0)
      v64 = (char *)&__p;
    else
      v64 = (char *)__p;
    VVector<float>::print(*(float ***)(a1 + 392), v64, *(_DWORD *)(a1 + 52));
  }
  v65 = a4 & 0xFFFFFF;
  v66 = a5 != 0;
  if (v65 > v66)
  {
    v184 = v65;
    v185 = v65 - 1;
    v182 = (float **)(a1 + 584);
    do
    {
      if (*(_BYTE *)(a1 + 2088))
        v67 = v65 + ~v66;
      else
        v67 = v66;
      if (*(_BYTE *)(a1 + 2088))
        v68 = 1;
      else
        v68 = -1;
      if (*(_BYTE *)(a1 + 2088))
        v69 = v67 < v185;
      else
        v69 = v67 > 0;
      v190 = v69;
      v70 = v67;
      memmove(*(void **)(*(_QWORD *)(a1 + 64) + 8 * v67), *(const void **)(*a2 + 8 * v67), 4 * *(int *)(a1 + 44));
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v67) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      v71 = v67 + v68;
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * (v67 + v68)), "GRU output t-1 : ", *(_DWORD *)(a1 + 52));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 64) + 8 * v67), "GRU input t: ", *(_DWORD *)(a1 + 44));
      if (v187)
      {
        v72 = *(unsigned __int8 *)(a1 + 40);
        v73 = *(_DWORD *)(a1 + 48);
        v74 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v67);
        *v74 = **(_DWORD **)(*a3 + 24 * v67);
        if (v72)
          v74[1] = v73 - 1;
      }
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v67), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 448) + 8 * v67), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 472) + 8 * v67), 4 * *(int *)(a1 + 52));
      v75 = *(_QWORD *)(a1 + 2096);
      if (v75
        && !*(_BYTE *)(v75 + 20)
        && ((v112 = *(_DWORD *)(v75 + 40), v112 == 4) || v112 == 2)
        && *(_DWORD *)(v75 + 44) == 3)
      {
        v189 = *(_QWORD *)(a1 + 424);
        v180 = *(_QWORD *)(a1 + 472);
        v181 = *(_QWORD *)(a1 + 448);
        v113 = *(_QWORD *)(a1 + 64);
        v114 = *(const float ***)(a1 + 328);
        v115 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        memset(&v207, 0, sizeof(v207));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v207, *(const void **)v115, *(_QWORD *)(v115 + 8), (uint64_t)(*(_QWORD *)(v115 + 8) - *(_QWORD *)v115) >> 2);
        v116 = *(_DWORD *)(a1 + 48);
        v117 = *(unsigned int *)(a1 + 52);
        v118 = 3 * v117;
        __Y = *(float **)(a1 + 600);
        if (!__Y)
        {
          v120 = (void *)operator new[]();
          v121 = v120;
          if ((int)v117 >= 1)
            bzero(v120, 4 * (3 * v117));
          *(_QWORD *)(a1 + 600) = v121;
          v122 = *(_QWORD **)(a1 + 2048);
          v123 = *(_QWORD *)(a1 + 2056);
          if ((unint64_t)v122 >= v123)
          {
            v157 = *(_QWORD *)(a1 + 2040);
            v158 = ((uint64_t)v122 - v157) >> 3;
            if ((unint64_t)(v158 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v159 = v123 - v157;
            v160 = v159 >> 2;
            if (v159 >> 2 <= (unint64_t)(v158 + 1))
              v160 = v158 + 1;
            if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
              v161 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v161 = v160;
            if (v161)
              v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v161);
            else
              v162 = 0;
            v163 = (_QWORD *)(v161 + 8 * v158);
            *v163 = v121;
            v124 = v163 + 1;
            v164 = *(char **)(a1 + 2048);
            v165 = *(char **)(a1 + 2040);
            if (v164 != v165)
            {
              do
              {
                v166 = *((_QWORD *)v164 - 1);
                v164 -= 8;
                *--v163 = v166;
              }
              while (v164 != v165);
              v164 = *(char **)(a1 + 2040);
            }
            *(_QWORD *)(a1 + 2040) = v163;
            *(_QWORD *)(a1 + 2048) = v124;
            *(_QWORD *)(a1 + 2056) = v161 + 8 * v162;
            if (v164)
              operator delete(v164);
          }
          else
          {
            *v122 = v121;
            v124 = v122 + 1;
          }
          v118 = 3 * v117;
          *(_QWORD *)(a1 + 2048) = v124;
          __Y = *(float **)(a1 + 600);
        }
        cblas_sgemv(CblasRowMajor, CblasNoTrans, v118, v116, 1.0, *v114, v116, *(const float **)(v113 + 8 * v70), 1, 0.0, __Y, 1);
        v167 = (float32x4_t **)(v189 + 8 * v70);
        if ((int)v117 < 1)
        {
          VVector<float>::print(v182, "outvec0/gzx", v117);
          VVector<float>::add<float>(v167, (float32x4_t **)v182, v117);
        }
        else
        {
          v168 = *(int **)(a1 + 600);
          v169 = *(_DWORD **)(a1 + 584);
          v170 = v117;
          do
          {
            v171 = *v168++;
            *v169++ = v171;
            --v170;
          }
          while (v170);
          VVector<float>::print(v182, "outvec0/gzx", v117);
          VVector<float>::add<float>(v167, (float32x4_t **)v182, v117);
          v172 = *(_DWORD **)(a1 + 584);
          v173 = (int *)(*(_QWORD *)(a1 + 600) + 4 * v117);
          v174 = v117;
          do
          {
            v175 = *v173++;
            *v172++ = v175;
            --v174;
          }
          while (v174);
        }
        VVector<float>::print(v182, "outvec1/grx", v117);
        VVector<float>::add<float>((float32x4_t **)(v181 + 8 * v70), (float32x4_t **)v182, v117);
        if ((int)v117 >= 1)
        {
          v176 = *(_DWORD **)(a1 + 584);
          v177 = (int *)(*(_QWORD *)(a1 + 600) + 8 * v117);
          v178 = v117;
          do
          {
            v179 = *v177++;
            *v176++ = v179;
            --v178;
          }
          while (v178);
        }
        VVector<float>::print(v182, "outvec2/gox", v117);
        VVector<float>::add<float>((float32x4_t **)(v180 + 8 * v70), (float32x4_t **)v182, v117);
        VVector<float>::print((float **)v167, "outVec0 == gix[]", v117);
        VVector<float>::print((float **)(v181 + 8 * v70), "outVec1 == gfx[]", v117);
        VVector<float>::print((float **)(v180 + 8 * v70), "outVec3 == gox[]", v117);
        if (v207.__r_.__value_.__r.__words[0])
        {
          v207.__r_.__value_.__l.__size_ = v207.__r_.__value_.__r.__words[0];
          operator delete(v207.__r_.__value_.__l.__data_);
        }
        v76 = 1;
      }
      else
      {
        v76 = 0;
      }
      sprintf((char *)&v212, "GRU[t=%d] input/source forwardNew1() vec ", v70);
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 64) + 8 * v70), (char *)&v212, *(_DWORD *)(a1 + 48));
      if ((v76 & 1) == 0)
      {
        v77 = *(_QWORD *)(a1 + 424);
        v78 = *(_QWORD *)(a1 + 64);
        v79 = *(uint64_t **)(a1 + 328);
        v80 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        memset(v211, 0, sizeof(v211));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v211, *(const void **)v80, *(_QWORD *)(v80 + 8), (uint64_t)(*(_QWORD *)(v80 + 8) - *(_QWORD *)v80) >> 2);
        GRU<float>::computeXTimesWSparseOrDense(a1, v187, (float32x4_t **)(v77 + 8 * v70), *(const float **)(v78 + 8 * v70), v79, v211[0], (uint64_t)v211[1], *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v211[0])
        {
          v211[1] = v211[0];
          operator delete(v211[0]);
        }
      }
      v81 = *(_BYTE **)(a1 + 2096);
      v82 = *(_QWORD *)(a1 + 424);
      v83 = *(float32x4_t ***)(a1 + 400);
      v84 = *(float32x4_t ***)(a1 + 376);
      v85 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v205, "gzx");
      GRU<float>::addOptionalBiasVector(v81, (float32x4_t **)(v82 + 8 * v70), v83, v84, v85);
      if (v206 < 0)
        operator delete(v205);
      v188 = v71;
      if (v190)
        cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 352), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 112) + 8 * v71), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 424) + 8 * v70), 1);
      v86 = *(_QWORD *)(a1 + 424);
      v87 = *(int *)(a1 + 52);
      *(float *)&__B = -v9;
      *(float *)&__C.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(v86 + 8 * v70), 1, (const float *)&__B, (const float *)&__C, *(float **)(v86 + 8 * v70), 1, v87);
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 496) + 8 * v70), *(float **)(*(_QWORD *)(a1 + 424) + 8 * v70), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 568));
      if ((v76 & 1) == 0)
      {
        v88 = *(_QWORD *)(a1 + 448);
        v89 = *(_QWORD *)(a1 + 64);
        v90 = *(uint64_t **)(a1 + 336);
        v91 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v203 = 0;
        v204 = 0;
        v202 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v202, *(const void **)v91, *(_QWORD *)(v91 + 8), (uint64_t)(*(_QWORD *)(v91 + 8) - *(_QWORD *)v91) >> 2);
        GRU<float>::computeXTimesWSparseOrDense(a1, v187, (float32x4_t **)(v88 + 8 * v70), *(const float **)(v89 + 8 * v70), v90, v202, (uint64_t)v203, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v202)
        {
          v203 = v202;
          operator delete(v202);
        }
      }
      v92 = *(_BYTE **)(a1 + 2096);
      v93 = *(_QWORD *)(a1 + 448);
      v94 = *(float32x4_t ***)(a1 + 408);
      v95 = *(float32x4_t ***)(a1 + 384);
      v96 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v200, "grx");
      GRU<float>::addOptionalBiasVector(v92, (float32x4_t **)(v93 + 8 * v70), v94, v95, v96);
      if (v201 < 0)
        operator delete(v200);
      if (v190)
        cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 360), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 112) + 8 * v188), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 448) + 8 * v70), 1);
      v97 = *(_QWORD *)(a1 + 448);
      v98 = *(int *)(a1 + 52);
      *(float *)&__B = -v9;
      *(float *)&__C.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(v97 + 8 * v70), 1, (const float *)&__B, (const float *)&__C, *(float **)(v97 + 8 * v70), 1, v98);
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 520) + 8 * v70), *(float **)(*(_QWORD *)(a1 + 448) + 8 * v70), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 572));
      bzero(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v70), 4 * *(int *)(a1 + 52));
      if (v190)
        VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v70), (float32x4_t **)(*(_QWORD *)(a1 + 112) + 8 * v188), (float32x4_t **)(*(_QWORD *)(a1 + 520) + 8 * v70), *(_DWORD *)(a1 + 52));
      v99 = *(_QWORD *)(a1 + 88);
      v100 = *(int *)(a1 + 52);
      *(float *)&__B = -v9;
      *(float *)&__C.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(v99 + 8 * v70), 1, (const float *)&__B, (const float *)&__C, *(float **)(v99 + 8 * v70), 1, v100);
      if ((v76 & 1) == 0)
      {
        v101 = *(_QWORD *)(a1 + 472);
        v102 = *(_QWORD *)(a1 + 64);
        v103 = *(uint64_t **)(a1 + 344);
        v104 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v198 = 0;
        v199 = 0;
        v197 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v197, *(const void **)v104, *(_QWORD *)(v104 + 8), (uint64_t)(*(_QWORD *)(v104 + 8) - *(_QWORD *)v104) >> 2);
        GRU<float>::computeXTimesWSparseOrDense(a1, v187, (float32x4_t **)(v101 + 8 * v70), *(const float **)(v102 + 8 * v70), v103, v197, (uint64_t)v198, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v197)
        {
          v198 = v197;
          operator delete(v197);
        }
      }
      v105 = *(_BYTE **)(a1 + 2096);
      v106 = *(_QWORD *)(a1 + 472);
      v107 = *(float32x4_t ***)(a1 + 416);
      v108 = *(float32x4_t ***)(a1 + 392);
      v109 = *(_QWORD *)(a1 + 520);
      v110 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v195, "gox");
      if (v105 && v105[244])
      {
        v111 = (float32x4_t **)(v106 + 8 * v70);
        if (v105[376])
          VVector<float>::add<float>(v111, v107, v110);
        if (v105[245])
        {
          if (v105[610])
            VVector<float>::mulAddV(v111, v108, (float32x4_t **)(v109 + 8 * v70), v110);
          else
            VVector<float>::add<float>(v111, v108, v110);
        }
      }
      if (v196 < 0)
        operator delete(v195);
      cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 88) + 8 * v70), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 472) + 8 * v70), 1);
      v125 = *(_QWORD *)(a1 + 472);
      v126 = *(int *)(a1 + 52);
      *(float *)&__B = -v9;
      *(float *)&__C.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(v125 + 8 * v70), 1, (const float *)&__B, (const float *)&__C, *(float **)(v125 + 8 * v70), 1, v126);
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 544) + 8 * v70), *(float **)(*(_QWORD *)(a1 + 472) + 8 * v70), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 576));
      __B = 0;
      v194 = 0uLL;
      i2s(&v191);
      v127 = std::string::insert(&v191, 0, "GRU Forward final[");
      v65 = v184;
      v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      __C.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__C.__r_.__value_.__l.__data_ = v128;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      v127->__r_.__value_.__r.__words[0] = 0;
      v129 = std::string::append(&__C, "] updateGate gzx:");
      v130 = (void *)v129->__r_.__value_.__r.__words[0];
      v210[0] = v129->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v210 + 7) = *(std::string::size_type *)((char *)&v129->__r_.__value_.__r.__words[1] + 7);
      v131 = HIBYTE(v129->__r_.__value_.__r.__words[2]);
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v194) < 0)
        operator delete(__B);
      __B = v130;
      *(_QWORD *)&v194 = v210[0];
      *(_QWORD *)((char *)&v194 + 7) = *(_QWORD *)((char *)v210 + 7);
      HIBYTE(v194) = v131;
      if (SHIBYTE(__C.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__C.__r_.__value_.__l.__data_);
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v191.__r_.__value_.__l.__data_);
      if (v194 >= 0)
        p_B = (char *)&__B;
      else
        p_B = (char *)__B;
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 424) + 8 * v70), p_B, *(_DWORD *)(a1 + 52));
      i2s(&v191);
      v133 = std::string::insert(&v191, 0, "GRU Forward final[");
      v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      __C.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__C.__r_.__value_.__l.__data_ = v134;
      v133->__r_.__value_.__l.__size_ = 0;
      v133->__r_.__value_.__r.__words[2] = 0;
      v133->__r_.__value_.__r.__words[0] = 0;
      v135 = std::string::append(&__C, "] resetGate  grx:");
      v136 = (void *)v135->__r_.__value_.__r.__words[0];
      v210[0] = v135->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v210 + 7) = *(std::string::size_type *)((char *)&v135->__r_.__value_.__r.__words[1] + 7);
      v137 = HIBYTE(v135->__r_.__value_.__r.__words[2]);
      v135->__r_.__value_.__l.__size_ = 0;
      v135->__r_.__value_.__r.__words[2] = 0;
      v135->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v194) < 0)
        operator delete(__B);
      __B = v136;
      *(_QWORD *)&v194 = v210[0];
      *(_QWORD *)((char *)&v194 + 7) = *(_QWORD *)((char *)v210 + 7);
      HIBYTE(v194) = v137;
      if (SHIBYTE(__C.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__C.__r_.__value_.__l.__data_);
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v191.__r_.__value_.__l.__data_);
      if (v194 >= 0)
        v138 = (char *)&__B;
      else
        v138 = (char *)__B;
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 448) + 8 * v70), v138, *(_DWORD *)(a1 + 52));
      i2s(&v191);
      v139 = std::string::insert(&v191, 0, "GRU Forward final[");
      v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
      __C.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__C.__r_.__value_.__l.__data_ = v140;
      v139->__r_.__value_.__l.__size_ = 0;
      v139->__r_.__value_.__r.__words[2] = 0;
      v139->__r_.__value_.__r.__words[0] = 0;
      v141 = std::string::append(&__C, "] gox:");
      v142 = (void *)v141->__r_.__value_.__r.__words[0];
      v210[0] = v141->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v210 + 7) = *(std::string::size_type *)((char *)&v141->__r_.__value_.__r.__words[1] + 7);
      v143 = HIBYTE(v141->__r_.__value_.__r.__words[2]);
      v141->__r_.__value_.__l.__size_ = 0;
      v141->__r_.__value_.__r.__words[2] = 0;
      v141->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v194) < 0)
        operator delete(__B);
      __B = v142;
      *(_QWORD *)&v194 = v210[0];
      *(_QWORD *)((char *)&v194 + 7) = *(_QWORD *)((char *)v210 + 7);
      HIBYTE(v194) = v143;
      if (SHIBYTE(__C.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__C.__r_.__value_.__l.__data_);
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v191.__r_.__value_.__l.__data_);
      if (v194 >= 0)
        v144 = (char *)&__B;
      else
        v144 = (char *)__B;
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 472) + 8 * v70), v144, *(_DWORD *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 112) + 8 * v70), 4 * *(int *)(a1 + 52));
      v145 = *(_QWORD *)(a1 + 112);
      v146 = (float32x4_t **)(v145 + 8 * v70);
      v147 = *(_QWORD *)(a1 + 496);
      v148 = (float32x4_t **)(v147 + 8 * v70);
      v149 = *(_DWORD *)(a1 + 52);
      if (v149 >= 1)
      {
        v150 = *(float **)(*(_QWORD *)(a1 + 544) + 8 * v70);
        v151 = *v148;
        v152 = *v146;
        v153 = *(unsigned int *)(a1 + 52);
        do
        {
          v154 = *v150++;
          v155 = v154;
          v156 = v151->f32[0];
          v151 = (float32x4_t *)((char *)v151 + 4);
          v152->f32[0] = v152->f32[0] + (float)(v155 * (float)(1.0 - v156));
          v152 = (float32x4_t *)((char *)v152 + 4);
          --v153;
        }
        while (v153);
      }
      if (v190)
      {
        VVector<float>::mulAddV(v146, v148, (float32x4_t **)(v145 + 8 * v188), v149);
        v147 = *(_QWORD *)(a1 + 496);
        v149 = *(_DWORD *)(a1 + 52);
      }
      VVector<float>::print((float **)(v147 + 8 * v70), "GRU Forward updateGate gz:", v149);
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 520) + 8 * v70), "GRU Forward resetGate gr:", *(_DWORD *)(a1 + 52));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 88) + 8 * v70), "GRU Forward state (internal cell c_t) state[t]:", *(_DWORD *)(a1 + 52));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 544) + 8 * v70), "GRU Forward outputgate go:", *(_DWORD *)(a1 + 52));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * v70), "GRU Forward final output[t]:", *(_DWORD *)(a1 + 52));
      if (SHIBYTE(v194) < 0)
        operator delete(__B);
      ++v66;
    }
    while (v66 != v184);
  }
  if (SHIBYTE(v209) < 0)
    operator delete(__p);
}

void sub_19155A6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  _Unwind_Resume(a1);
}

uint64_t GRU<float>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2088] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      GRU<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A818 = 0;
      qword_1EE21A820 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &GRU<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &GRU<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2088] = 0;
  return result;
}

uint64_t GRU<float>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[2088] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2088] = 0;
  return result;
}

char *GRU<float>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2036) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 328) = result + 232;
  *(_QWORD *)(a1 + 336) = result + 240;
  *(_QWORD *)(a1 + 344) = result + 248;
  *(_QWORD *)(a1 + 352) = result + 256;
  *(_QWORD *)(a1 + 360) = result + 264;
  *(_QWORD *)(a1 + 368) = result + 272;
  *(_QWORD *)(a1 + 376) = result + 280;
  *(_QWORD *)(a1 + 384) = result + 288;
  *(_QWORD *)(a1 + 392) = result + 296;
  *(_QWORD *)(a1 + 400) = result + 304;
  *(_QWORD *)(a1 + 408) = result + 312;
  *(_QWORD *)(a1 + 416) = result + 320;
  return result;
}

void GRU<float>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  _DWORD *v5;
  _DWORD *v6;

  if (*(_DWORD *)(a1 + 2036))
    exitFramework(1);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 240), (uint64_t)(v5 + 280), v5 + 190, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 1168), a1 + 1240, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 248), (uint64_t)(v6 + 284), v6 + 250, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 1184), a1 + 1312, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 232), (uint64_t)(v6 + 282), v6 + 220, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 1176), a1 + 1384, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 264), (uint64_t)(v6 + 286), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 1192), a1 + 1456, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 272), (uint64_t)(v6 + 290), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 1208), a1 + 1528, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 256), (uint64_t)(v6 + 288), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 1200), a1 + 1600, a3);
}

void GRU<float>::computeError()
{
  exitFramework(1);
}

void GRU<float>::log2Probability()
{
  exitFramework(0);
}

void GRU<float>::~GRU(uint64_t a1)
{
  GRU<float>::~GRU(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t GRU<float>::~GRU(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v24;

  *(_QWORD *)a1 = off_1E2D57B38;
  GRU<float>::cleanupAllBuffers((_QWORD *)a1);
  v2 = *(void **)(a1 + 2064);
  if (v2)
  {
    *(_QWORD *)(a1 + 2072) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 2040);
  if (v3)
  {
    *(_QWORD *)(a1 + 2048) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 1960) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1968));
  *(_QWORD *)(a1 + 1888) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1896));
  *(_QWORD *)(a1 + 1816) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1824));
  *(_QWORD *)(a1 + 1744) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1752));
  *(_QWORD *)(a1 + 1672) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1680));
  *(_QWORD *)(a1 + 1600) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1608));
  *(_QWORD *)(a1 + 1528) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1536));
  *(_QWORD *)(a1 + 1456) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1464));
  *(_QWORD *)(a1 + 1384) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1392));
  *(_QWORD *)(a1 + 1312) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1320));
  *(_QWORD *)(a1 + 1240) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1248));
  SparseMatrix<float>::~SparseMatrix(a1 + 1000);
  SparseMatrix<float>::~SparseMatrix(a1 + 880);
  SparseMatrix<float>::~SparseMatrix(a1 + 760);
  v4 = *(void **)(a1 + 728);
  if (v4)
  {
    *(_QWORD *)(a1 + 736) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 704);
  if (v5)
  {
    *(_QWORD *)(a1 + 712) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 680);
  if (v6)
  {
    *(_QWORD *)(a1 + 688) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 656);
  if (v7)
  {
    *(_QWORD *)(a1 + 664) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 632);
  if (v8)
  {
    *(_QWORD *)(a1 + 640) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 608);
  if (v9)
  {
    *(_QWORD *)(a1 + 616) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 544);
  if (v10)
  {
    *(_QWORD *)(a1 + 552) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 520);
  if (v11)
  {
    *(_QWORD *)(a1 + 528) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 496);
  if (v12)
  {
    *(_QWORD *)(a1 + 504) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 472);
  if (v13)
  {
    *(_QWORD *)(a1 + 480) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 448);
  if (v14)
  {
    *(_QWORD *)(a1 + 456) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 424);
  if (v15)
  {
    *(_QWORD *)(a1 + 432) = v15;
    operator delete(v15);
  }
  v24 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v24);
  v16 = *(void **)(a1 + 184);
  if (v16)
  {
    *(_QWORD *)(a1 + 192) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 160);
  if (v17)
  {
    *(_QWORD *)(a1 + 168) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 136);
  if (v18)
  {
    *(_QWORD *)(a1 + 144) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 112);
  if (v19)
  {
    *(_QWORD *)(a1 + 120) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 88);
  if (v20)
  {
    *(_QWORD *)(a1 + 96) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 64);
  if (v21)
  {
    *(_QWORD *)(a1 + 72) = v21;
    operator delete(v21);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v22 = *(void **)(a1 + 8);
  if (v22)
  {
    *(_QWORD *)(a1 + 16) = v22;
    operator delete(v22);
  }
  return a1;
}

void GRU<float>::safeAddDenseOrSparse(uint64_t a1, const float **a2, uint64_t a3, _DWORD *a4, int a5, int a6, uint64_t a7, uint64_t a8, float a9)
{
  float __C;
  float __B;

  if (a8)
    pthread_mutex_lock((pthread_mutex_t *)(a8 + 8));
  if (*(_DWORD *)(a1 + 56))
  {
    if (a4 && a4[1] * *a4 >= 1)
      (*(void (**)(uint64_t, const float **, _DWORD *, float))(*(_QWORD *)a7 + 8))(a7, a2, a4, a9);
    else
      (**(void (***)(uint64_t, const float **, uint64_t, float))a7)(a7, a2, a3, a9);
    if (a8)
      goto LABEL_11;
  }
  else
  {
    (**(void (***)(uint64_t, const float **, uint64_t, float))a7)(a7, a2, a3, a9);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*a2, 1, &__B, &__C, (float *)*a2, 1, a6 * a5);
    if (a8)
LABEL_11:
      pthread_mutex_unlock((pthread_mutex_t *)(a8 + 8));
  }
}

float32_t GRU<float>::computeXTimesWSparseOrDense(uint64_t a1, int a2, float32x4_t **a3, const float *__X, uint64_t *a5, const void *a6, uint64_t a7, int __M, int __lda)
{
  float **v12;
  void *__p;
  int *v15;
  uint64_t v16;

  v12 = (float **)(a1 + 584);
  if (a2)
  {
    __p = 0;
    v15 = 0;
    v16 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a6, a7, (a7 - (uint64_t)a6) >> 2);
    VVector<float>::internalMul(v12, (int *)__p, v15, *a5, __M, __lda);
    if (__p)
    {
      v15 = (int *)__p;
      operator delete(__p);
    }
  }
  else
  {
    cblas_sgemv(CblasRowMajor, CblasNoTrans, __M, __lda, 1.0, (const float *)*a5, __lda, __X, 1, 0.0, *v12, 1);
  }
  return VVector<float>::add<float>(a3, (float32x4_t **)v12, __M);
}

float32_t GRU<float>::addOptionalBiasVector(_BYTE *a1, float32x4_t **a2, float32x4_t **a3, float32x4_t **a4, int a5)
{
  float32_t result;

  if (a1 && a1[244])
  {
    if (a1[376])
      result = VVector<float>::add<float>(a2, a3, a5);
    if (a1[245])
      return VVector<float>::add<float>(a2, a4, a5);
  }
  return result;
}

void VVector<float>::applyForwardActivation(void **a1, float *a2, int a3, int a4)
{
  float *v4;
  uint64_t v5;
  float v6;
  float v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;

  switch(a4)
  {
    case 0:
      memmove(*a1, a2, 4 * a3);
      break;
    case 1:
      VVector<float>::ffuncV((float *)*a1, a2, a3);
      break;
    case 2:
      v12 = a3;
      vvtanhf((float *)*a1, a2, &v12);
      break;
    case 3:
      VVector<float>::gfunc2V((float **)a1, a2, a3);
      break;
    case 4:
      if (a3 >= 1)
      {
        v4 = (float *)*a1;
        v5 = a3;
        do
        {
          v6 = *a2++;
          v7 = v6;
          if (v6 < 0.0)
            v7 = 0.0;
          *v4++ = v7;
          --v5;
        }
        while (v5);
      }
      break;
    case 5:
      if (a3 >= 1)
      {
        v8 = (float *)*a1;
        v9 = a3;
        do
        {
          v10 = *a2 * 0.2 + 0.5;
          *v8 = v10;
          v11 = 0.0;
          if (v10 < 0.0 || (v11 = 1.0, v10 > 1.0))
            *v8 = v11;
          ++v8;
          ++a2;
          --v9;
        }
        while (v9);
      }
      break;
    default:
      exitFramework(4);
  }
}

float32_t VVector<float>::mulAddV(float32x4_t **a1, float32x4_t **a2, float32x4_t **a3, int a4)
{
  int v4;
  float32x4_t *v5;
  float32x4_t *v6;
  int v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  uint64_t v15;
  float *f32;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float v21;

  v4 = a4 / 8;
  if (a4 >= 8)
  {
    v5 = *a1;
    v6 = *a3;
    v7 = a4 / 8;
    v8 = *a2;
    do
    {
      v9 = *v8;
      v10 = v8[1];
      v8 += 2;
      v11 = *v6;
      v12 = v6[1];
      v6 += 2;
      v13 = vmlaq_f32(v5[1], v12, v10);
      *v5 = vmlaq_f32(*v5, v11, v9);
      v5[1] = v13;
      v5 += 2;
      --v7;
    }
    while (v7);
  }
  v14 = 2 * v4;
  if (8 * v4 < a4)
  {
    v15 = a4 - (uint64_t)(v14 * 4);
    f32 = (*a1)[v14].f32;
    v17 = (*a3)[v14].f32;
    v18 = (*a2)[v14].f32;
    do
    {
      v19 = *v18++;
      v20 = v19;
      v21 = *v17++;
      v9.f32[0] = *f32 + (float)(v20 * v21);
      *f32++ = v9.f32[0];
      --v15;
    }
    while (v15);
  }
  return v9.f32[0];
}

float **VVector<float>::internalMul(float **result, int *a2, int *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  int *v14;
  unint64_t v15;
  int v16;

  if ((char *)a3 - (char *)a2 == 8)
  {
    if (a5 >= 1)
    {
      v7 = *a2;
      v6 = a2[1];
      v8 = *result;
      v9 = a5;
      do
      {
        *v8++ = *(float *)(a4 + 4 * v7) + *(float *)(a4 + 4 * v6);
        a4 += 4 * a6;
        --v9;
      }
      while (v9);
    }
  }
  else if (a5 >= 1)
  {
    v10 = 0;
    v11 = a3 - a2;
    v12 = *result;
    if (v11 <= 1)
      v11 = 1;
    do
    {
      v12[v10] = 0.0;
      if (a3 != a2)
      {
        v13 = 0.0;
        v14 = a2;
        v15 = v11;
        do
        {
          v16 = *v14++;
          v13 = *(float *)(a4 + 4 * (v16 + (int)v10 * a6)) + v13;
          v12[v10] = v13;
          --v15;
        }
        while (v15);
      }
      ++v10;
    }
    while (v10 != a5);
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;

  if ((char *)a3 - (char *)a2 == 8)
  {
    if (a5 >= 1)
    {
      v7 = *a2;
      v6 = a2[1];
      v8 = *result;
      v9 = a5;
      do
      {
        *v8++ = (float)(*(char *)(a4 + v6) + *(char *)(a4 + v7)) * 0.039673;
        a4 += a6;
        --v9;
      }
      while (v9);
    }
  }
  else if (a5 >= 1)
  {
    v10 = 0;
    v11 = a3 - a2;
    v12 = *result;
    if (v11 <= 1)
      v11 = 1;
    do
    {
      v12[v10] = 0.0;
      if (a3 != a2)
      {
        v13 = 0.0;
        v14 = a2;
        v15 = v11;
        do
        {
          v16 = *v14++;
          v13 = v13 + (float)((float)*(char *)(a4 + v16 + (int)v10 * a6) * 0.039673);
          v12[v10] = v13;
          --v15;
        }
        while (v15);
      }
      ++v10;
    }
    while (v10 != a5);
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  int *v14;
  unint64_t v15;
  int v16;

  if ((char *)a3 - (char *)a2 == 8)
  {
    if (a5 >= 1)
    {
      v7 = *a2;
      v6 = a2[1];
      v8 = *result;
      v9 = a5;
      do
      {
        *v8++ = (float)(*(__int16 *)(a4 + 2 * v6) + *(__int16 *)(a4 + 2 * v7)) * 0.0001526;
        a4 += 2 * a6;
        --v9;
      }
      while (v9);
    }
  }
  else if (a5 >= 1)
  {
    v10 = 0;
    v11 = a3 - a2;
    v12 = *result;
    if (v11 <= 1)
      v11 = 1;
    do
    {
      v12[v10] = 0.0;
      if (a3 != a2)
      {
        v13 = 0.0;
        v14 = a2;
        v15 = v11;
        do
        {
          v16 = *v14++;
          v13 = v13 + (double)*(__int16 *)(a4 + 2 * (v16 + (int)v10 * a6)) * 0.000152597204;
          --v15;
        }
        while (v15);
        v12[v10] = v13;
      }
      ++v10;
    }
    while (v10 != a5);
  }
  return result;
}

void VVector<float>::applyPrimeDerivative(void **a1, float *__src, int a3, int a4)
{
  float *v4;
  float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;

  v4 = __src;
  switch(a4)
  {
    case 0:
      memmove(*a1, __src, 4 * a3);
      break;
    case 1:
      if (a3 >= 1)
      {
        v5 = (float *)*a1;
        v6 = a3;
        do
        {
          v7 = *v4++;
          v8 = expf(-v7);
          *v5++ = (float)(1.0 / (float)(v8 + 1.0)) * (float)(1.0 - (float)(1.0 / (float)(v8 + 1.0)));
          --v6;
        }
        while (v6);
      }
      break;
    case 2:
      if (a3 >= 1)
      {
        v9 = (float *)*a1;
        v10 = a3;
        do
        {
          v11 = *v4++;
          v12 = tanhf(v11);
          *v9++ = 1.0 - (float)(v12 * v12);
          --v10;
        }
        while (v10);
      }
      break;
    case 3:
      if (a3 >= 1)
      {
        v13 = (float *)*a1;
        v14 = a3;
        do
        {
          v15 = *v4++;
          v16 = tanhf(v15 * 0.66667);
          *v13++ = (float)(1.0 - (float)(v16 * v16)) * 1.1439;
          --v14;
        }
        while (v14);
      }
      break;
    case 4:
      if (a3 >= 1)
      {
        v17 = (float *)*a1;
        v18 = a3;
        do
        {
          v19 = *v4++;
          if (v19 > 0.0)
            v20 = 1.0;
          else
            v20 = 0.0;
          *v17++ = v20;
          --v18;
        }
        while (v18);
      }
      break;
    default:
      return;
  }
}

float32_t VVector<float>::mulV(float32x4_t **a1, float32x4_t **a2, float32x4_t **a3, int a4)
{
  int v4;
  float32x4_t *v5;
  float32x4_t *v6;
  int v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  uint64_t v15;
  float32x4_t *v16;
  float *f32;
  float *v18;
  float v19;
  float v20;
  float v21;

  v4 = a4 / 8;
  if (a4 >= 8)
  {
    v5 = *a1;
    v6 = *a3;
    v7 = a4 / 8;
    v8 = *a2;
    do
    {
      v10 = *v8;
      v9 = v8[1];
      v8 += 2;
      v12 = *v6;
      v11 = v6[1];
      v6 += 2;
      v13 = vmulq_f32(v9, v11);
      *v5 = vmulq_f32(v10, v12);
      v5[1] = v13;
      v5 += 2;
      --v7;
    }
    while (v7);
  }
  v14 = 2 * v4;
  if (8 * v4 < a4)
  {
    v15 = a4 - (uint64_t)(v14 * 4);
    v16 = &(*a1)[v14];
    f32 = (*a3)[v14].f32;
    v18 = (*a2)[v14].f32;
    do
    {
      v19 = *v18++;
      v20 = v19;
      v21 = *f32++;
      v13.f32[0] = v20 * v21;
      v16->i32[0] = v13.i32[0];
      v16 = (float32x4_t *)((char *)v16 + 4);
      --v15;
    }
    while (v15);
  }
  return v13.f32[0];
}

void VVector<float>::sumOuterProdWithInitFlag(const float **a1, const float **a2, void **a3, int a4, int a5, int a6)
{
  if (a6)
  {
    bzero(*a3, 4 * a5 * a4);
    cblas_sger(CblasRowMajor, a4, a5, 1.0, *a1, 1, *a2, 1, (float *)*a3, a5);
  }
  else
  {
    VVector<float>::sumOuterProd((uint64_t)a1, (uint64_t)a2, (uint64_t)*a3, a4, a5);
  }
}

uint64_t SparseMatrix<float>::sum<float>(uint64_t result, int *a2, uint64_t a3, int a4)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (a4 >= 1)
  {
    v4 = *(_DWORD **)(*(_QWORD *)(result + 24) + 8 * *(int *)(result + 16));
    v5 = a4;
    do
    {
      v6 = *a2++;
      *v4++ = v6;
      --v5;
    }
    while (v5);
  }
  if (*(int *)(result + 12) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 48);
    do
    {
      *(_DWORD *)(*(_QWORD *)(v8 + 24 * *(int *)(result + 16)) + 4 * v7) = *(_DWORD *)(a3 + 4 * v7);
      ++v7;
    }
    while (v7 < *(int *)(result + 12));
  }
  ++*(_DWORD *)(result + 16);
  return result;
}

void VVector<float>::sumOuterProd(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  NSObject *global_queue;
  _QWORD v11[7];
  int v12;

  global_queue = dispatch_get_global_queue(0, 0);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK7VVectorIfE12sumOuterProdERKS0_S2_R7MMatrixIfEii_block_invoke;
  v11[3] = &__block_descriptor_tmp_1;
  v12 = a5;
  v11[4] = a3;
  v11[5] = a1;
  v11[6] = a2;
  dispatch_apply(a4, global_queue, v11);
}

void ___ZNK7VVectorIfE12sumOuterProdERKS0_S2_R7MMatrixIfEii_block_invoke(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2;
  float *v3;
  float __B;

  v2 = *(int *)(a1 + 56);
  v3 = (float *)(*(_QWORD *)(a1 + 32) + 4 * v2 * a2);
  __B = *(float *)(**(_QWORD **)(a1 + 40) + 4 * (int)a2);
  vDSP_vsma(**(const float ***)(a1 + 48), 1, &__B, v3, 1, v3, 1, v2);
}

void SparseMatrix<float>::add<float>(uint64_t a1, uint64_t *a2, int a3, int a4, float a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  void *__p;
  char *v30;
  uint64_t v31;

  v5 = *(unsigned int *)(a1 + 16);
  if ((int)v5 >= 1)
  {
    v10 = 0;
    v11 = a3;
    do
    {
      if (a3 >= 1)
      {
        v12 = *(float **)(*(_QWORD *)(a1 + 24) + 8 * v10);
        v13 = a3;
        do
        {
          *v12 = *v12 * a5;
          ++v12;
          --v13;
        }
        while (v13);
      }
      ++v10;
    }
    while (v10 != v5);
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 48) + 24 * v14;
      v30 = 0;
      v31 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 2);
      v17 = (int *)__p;
      if (a3 >= 1)
      {
        v18 = 0;
        v19 = (int *)v30;
        v20 = (v30 - (_BYTE *)__p) >> 2;
        v21 = *(_QWORD *)(v15 + 8 * v14);
        v22 = *a2;
        if (v20 <= 1)
          v20 = 1;
        do
        {
          if (v19 != v17)
          {
            v23 = v17;
            v24 = v20;
            do
            {
              v25 = *v23++;
              v26 = v25 + (int)v18 * a4;
              v27 = *(float *)(v21 + 4 * v18) + *(float *)(v22 + 4 * v26);
              *(float *)(v22 + 4 * v26) = v27;
              v28 = 2.0;
              if (v27 > 2.0 || (v28 = -2.0, v27 < -2.0))
                *(float *)(v22 + 4 * v26) = v28;
              --v24;
            }
            while (v24);
          }
          ++v18;
        }
        while (v18 != v11);
      }
      if (v17)
      {
        v30 = (char *)v17;
        operator delete(v17);
      }
      ++v14;
    }
    while (v14 < *(int *)(a1 + 16));
  }
}

char *std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(uint64_t a1, uint64_t a2, double a3)
{
  double *v3;
  double *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  double *v13;
  char *v14;
  uint64_t v15;

  v3 = *(double **)a1;
  v4 = *(double **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(16 * v9);
  v13 = (double *)&v12[16 * v5];
  *(_QWORD *)v13 = a2;
  v13[1] = a3;
  v14 = (char *)(v13 + 2);
  while (v4 != v3)
  {
    v15 = *((_QWORD *)v4 - 2);
    v4 -= 2;
    *((_QWORD *)v13 - 2) = v15;
    v13 -= 2;
    v13[1] = v4[1];
  }
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = &v12[16 * v9];
  if (v3)
    operator delete(v3);
  return v14;
}

size_t NeuralNetwork::writeDimensions(FILE *__stream, __sFILE *a2, int *a3, int a4)
{
  size_t result;
  int __ptr;
  int v9;

  if (!__stream)
    exitFramework(3);
  __ptr = (int)a3;
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  LODWORD(a2->_p) += 4;
  v9 = a4;
  result = fwrite(&v9, 4uLL, 1uLL, __stream);
  LODWORD(a2->_p) += 4;
  return result;
}

void MMatrix<float>::write(float **a1, FILE *__stream, int *a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  _BYTE *v18;
  int v19;
  int v20;
  int v21;
  _WORD *v22;
  char __ptr;
  char v24;
  char v25;

  switch(a4)
  {
    case 8:
      if (!__stream)
        goto LABEL_28;
      v15 = *a3 & 0xF;
      if (*a3 <= 0)
        v15 = -(-*a3 & 0xF);
      if (v15 >= 15)
        v16 = 16;
      else
        v16 = 15 - v15;
      v25 = v16;
      fwrite(&v25, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v16);
      if ((*(_BYTE *)a3 & 0xF) != 0)
        goto LABEL_29;
      v17 = a6 * a5;
      v18 = (_BYTE *)operator new[]();
      bzero(v18, v17);
      writeArray<float,signed char>(__stream, a3, *a1, v18, v17);
      break;
    case 16:
      if (!__stream)
        goto LABEL_28;
      v19 = *a3 & 0xF;
      if (*a3 <= 0)
        v19 = -(-*a3 & 0xF);
      if (v19 >= 15)
        v20 = 16;
      else
        v20 = 15 - v19;
      v24 = v20;
      fwrite(&v24, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v20);
      if ((*(_BYTE *)a3 & 0xF) != 0)
        goto LABEL_29;
      v21 = a6 * a5;
      v22 = (_WORD *)operator new[]();
      bzero(v22, 2 * v21);
      writeArray<float,short>(__stream, a3, *a1, v22, v21);
      break;
    case 32:
      if (__stream)
      {
        v11 = *a3 & 0xF;
        if (*a3 <= 0)
          v11 = -(-*a3 & 0xF);
        if (v11 >= 15)
          v12 = 16;
        else
          v12 = 15 - v11;
        __ptr = v12;
        fwrite(&__ptr, 1uLL, 1uLL, __stream);
        ++*a3;
        writeByteArray((size_t)__stream, a3, v12);
        if ((*(_BYTE *)a3 & 0xF) == 0)
        {
          v13 = a6 * a5;
          v14 = (void *)operator new[]();
          bzero(v14, 4 * v13);
          writeArray<float,float>(__stream, a3, *a1, v13);
          break;
        }
LABEL_29:
        exitFramework(18);
      }
LABEL_28:
      exitFramework(9);
    default:
      exitFramework(23);
  }
  JUMPOUT(0x19401CD78);
}

uint64_t *NeuralNetwork::readDimensions(uint64_t *this, ReadOnlyFile *a2, char *a3, int *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;

  if (!this)
    exitFramework(3);
  v5 = *this;
  v6 = this[1];
  v7 = (_DWORD *)(*this + *((int *)this + 18));
  if ((unint64_t)v7 <= *this + v6 - 4)
  {
    *(_DWORD *)a2 = *v7;
    v8 = *((_DWORD *)this + 18) + 4;
    *((_DWORD *)this + 18) = v8;
    v5 = *this;
    v6 = this[1];
  }
  else
  {
    *(_DWORD *)a2 = 0;
    v8 = *((_DWORD *)this + 18);
  }
  v9 = (_DWORD *)(v5 + v8);
  if ((unint64_t)v9 <= v5 + v6 - 4)
  {
    *(_DWORD *)a3 = *v9;
    *((_DWORD *)this + 18) += 4;
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
  return this;
}

uint64_t MMatrix<float>::read(char *a1, uint64_t a2, int a3, _BOOL4 a4, float **a5, int a6)
{
  int v7;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  float *v15;
  int v16;

  if (!a2)
LABEL_11:
    exitFramework(9);
  v7 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    v11 = *(_BYTE *)(a2 + 72);
  }
  else
  {
    v11 = *a1;
  }
  if ((v11 & 0xF) != 0)
    exitFramework(18);
  if (a4)
  {
    v12 = *(int *)(a2 + 72);
    v13 = *(_QWORD *)a2 + v12;
    *(_QWORD *)a1 = v13;
    *(_DWORD *)(a2 + 72) = v12 + 4 * a6 * v7;
    result = 4 * a6 * v7;
    if (!v13)
      goto LABEL_11;
  }
  else
  {
    v15 = *(float **)a1;
    v16 = a6 * v7;
    result = ReadOnlyFile::readFloatArray((ReadOnlyFile *)a2, v15, &v16, a4, a5);
    if (!*(_QWORD *)a1)
      goto LABEL_11;
  }
  if (!result)
    goto LABEL_11;
  return result;
}

void FullLayer<float>::init(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  void *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  char *v63;
  int v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t i;
  uint64_t v74;
  void *v75;
  void *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t j;
  uint64_t v91;
  void *v92;
  void *v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  std::vector<int>::size_type v108;
  uint64_t v109;
  void *v110;
  void *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  std::string v157;
  void *__p[2];
  int64_t v159;

  v5 = *(_QWORD *)(a1 + 528);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 512);
  else
    v6 = 0;
  if (*(_BYTE *)(a1 + 40))
    v7 = *(_DWORD *)(a1 + 96) + (v6 ^ 1);
  else
    v7 = *(_DWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 108) = v8 * v7;
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!*(_BYTE *)(a1 + 117))
    {
      if (v5 && *(_DWORD *)(v5 + 40) == 1)
      {
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(v5 + 112);
      }
      else
      {
        MMatrix<float>::MMatrix(__p, v8, v7, a3);
        v9 = __p[0];
        *(void **)(a1 + 128) = __p[0];
        v11 = *(_QWORD **)(a1 + 80);
        v10 = *(_QWORD *)(a1 + 88);
        if ((unint64_t)v11 >= v10)
        {
          v13 = *(_QWORD *)(a1 + 72);
          v14 = ((uint64_t)v11 - v13) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            goto LABEL_213;
          v15 = v10 - v13;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v17);
          else
            v18 = 0;
          v19 = (_QWORD *)(v17 + 8 * v14);
          v20 = v17 + 8 * v18;
          *v19 = v9;
          v12 = v19 + 1;
          v22 = *(char **)(a1 + 72);
          v21 = *(char **)(a1 + 80);
          if (v21 != v22)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v19 = v23;
            }
            while (v21 != v22);
            v21 = *(char **)(a1 + 72);
          }
          *(_QWORD *)(a1 + 72) = v19;
          *(_QWORD *)(a1 + 80) = v12;
          *(_QWORD *)(a1 + 88) = v20;
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v11 = v9;
          v12 = v11 + 1;
        }
        *(_QWORD *)(a1 + 80) = v12;
      }
    }
    *(_QWORD *)(a1 + 512) = a1 + 128;
  }
  if (!*(_BYTE *)(a1 + 116))
  {
    v24 = *(unsigned int *)(a1 + 100);
    v25 = (void *)operator new[]();
    v26 = v25;
    if ((int)v24 >= 1)
      bzero(v25, 4 * v24);
    *(_QWORD *)(a1 + 416) = v26;
    v28 = *(_QWORD **)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v28 >= v27)
    {
      v30 = *(_QWORD *)(a1 + 48);
      v31 = ((uint64_t)v28 - v30) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        goto LABEL_213;
      v32 = v27 - v30;
      v33 = v32 >> 2;
      if (v32 >> 2 <= (unint64_t)(v31 + 1))
        v33 = v31 + 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v34);
      else
        v35 = 0;
      v36 = (_QWORD *)(v34 + 8 * v31);
      v37 = v34 + 8 * v35;
      *v36 = v26;
      v29 = v36 + 1;
      v39 = *(char **)(a1 + 48);
      v38 = *(char **)(a1 + 56);
      if (v38 != v39)
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = *(char **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v36;
      *(_QWORD *)(a1 + 56) = v29;
      *(_QWORD *)(a1 + 64) = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v28 = v26;
      v29 = v28 + 1;
    }
    *(_QWORD *)(a1 + 56) = v29;
    if (*(int *)(a1 + 112) >= 1)
    {
      SparseMatrix<float>::SparseMatrix((unsigned int *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), maxFeatureVectors, *(unsigned __int8 *)(a1 + 40) + 1);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 144), (__int128 *)__p);
      SparseMatrix<float>::~SparseMatrix((uint64_t)__p);
    }
    v41 = *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100);
    v42 = (void *)operator new[]();
    bzero(v42, 4 * v41);
    *(_QWORD *)(a1 + 136) = v42;
    v44 = *(_QWORD **)(a1 + 56);
    v43 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v44 < v43)
    {
      *v44 = v42;
      v45 = v44 + 1;
LABEL_67:
      *(_QWORD *)(a1 + 56) = v45;
      goto LABEL_68;
    }
    v46 = *(_QWORD *)(a1 + 48);
    v47 = ((uint64_t)v44 - v46) >> 3;
    if (!((unint64_t)(v47 + 1) >> 61))
    {
      v48 = v43 - v46;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
      else
        v51 = 0;
      v52 = (_QWORD *)(v50 + 8 * v47);
      v53 = v50 + 8 * v51;
      *v52 = v42;
      v45 = v52 + 1;
      v55 = *(char **)(a1 + 48);
      v54 = *(char **)(a1 + 56);
      if (v54 != v55)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *--v52 = v56;
        }
        while (v54 != v55);
        v54 = *(char **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v52;
      *(_QWORD *)(a1 + 56) = v45;
      *(_QWORD *)(a1 + 64) = v53;
      if (v54)
        operator delete(v54);
      goto LABEL_67;
    }
LABEL_213:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_68:
  if (!*(_DWORD *)(a1 + 504) && *(_QWORD *)(a1 + 128))
  {
    std::string::basic_string[abi:ne180100]<0>(&v157, " constructt W=");
    v58 = *(char *)(a2 + 23);
    if (v58 >= 0)
      v59 = (const std::string::value_type *)a2;
    else
      v59 = *(const std::string::value_type **)a2;
    if (v58 >= 0)
      v60 = *(unsigned __int8 *)(a2 + 23);
    else
      v60 = *(_QWORD *)(a2 + 8);
    v61 = std::string::insert(&v157, 0, v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v159 = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (v159 >= 0)
      v63 = (char *)__p;
    else
      v63 = (char *)__p[0];
    MMatrix<float>::print((float **)(a1 + 128), v63, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
    if (SHIBYTE(v159) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if (!*(_DWORD *)(a1 + 504) && *(_QWORD *)(a1 + 128))
    {
      std::string::basic_string[abi:ne180100]<0>(&v157, " construct W=");
      v64 = *(char *)(a2 + 23);
      if (v64 >= 0)
        v65 = (const std::string::value_type *)a2;
      else
        v65 = *(const std::string::value_type **)a2;
      if (v64 >= 0)
        v66 = *(unsigned __int8 *)(a2 + 23);
      else
        v66 = *(_QWORD *)(a2 + 8);
      v67 = std::string::insert(&v157, 0, v65, v66);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v159 = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if (v159 >= 0)
        v69 = (char *)__p;
      else
        v69 = (char *)__p[0];
      MMatrix<float>::print((float **)(a1 + 128), v69, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (SHIBYTE(v159) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
    }
  }
  if (*(int *)(a1 + 112) < 1)
    v57 = 0;
  else
    v57 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (*(_BYTE *)(a1 + 42))
    v70 = 2;
  else
    v70 = maxFeatureVectors;
  if (((*(_BYTE *)(a1 + 42) != 0) & v57) != 0)
    v71 = 2;
  else
    v71 = maxFeatureVectors;
  std::vector<VVector<float>>::resize((char **)(a1 + 264), (int)v71);
  std::vector<VVector<float>>::resize((char **)(a1 + 384), (int)v70);
  std::vector<VVector<float>>::resize((char **)(a1 + 288), maxFeatureVectors);
  if (!*(_BYTE *)(a1 + 116))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 312), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 336), maxFeatureVectors);
  }
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 360), maxFeatureVectors);
  v72 = *(unsigned __int8 *)(a1 + 40);
  if ((int)v71 >= 1)
  {
    for (i = 0; i != v71; ++i)
    {
      v74 = *(unsigned int *)(a1 + 104);
      v75 = (void *)operator new[]();
      v76 = v75;
      if ((int)v74 >= 1)
        bzero(v75, 4 * v74);
      *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * i) = v76;
      v78 = *(_QWORD **)(a1 + 56);
      v77 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v78 >= v77)
      {
        v80 = *(_QWORD *)(a1 + 48);
        v81 = ((uint64_t)v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          goto LABEL_213;
        v82 = v77 - v80;
        v83 = v82 >> 2;
        if (v82 >> 2 <= (unint64_t)(v81 + 1))
          v83 = v81 + 1;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        if (v84)
          v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v84);
        else
          v85 = 0;
        v86 = (_QWORD *)(v84 + 8 * v81);
        *v86 = v76;
        v79 = v86 + 1;
        v88 = *(char **)(a1 + 48);
        v87 = *(char **)(a1 + 56);
        if (v87 != v88)
        {
          do
          {
            v89 = *((_QWORD *)v87 - 1);
            v87 -= 8;
            *--v86 = v89;
          }
          while (v87 != v88);
          v87 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v86;
        *(_QWORD *)(a1 + 56) = v79;
        *(_QWORD *)(a1 + 64) = v84 + 8 * v85;
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v78 = v76;
        v79 = v78 + 1;
      }
      *(_QWORD *)(a1 + 56) = v79;
    }
  }
  if ((int)v70 >= 1)
  {
    for (j = 0; j != v70; ++j)
    {
      v91 = *(unsigned int *)(a1 + 100);
      v92 = (void *)operator new[]();
      v93 = v92;
      if ((int)v91 >= 1)
        bzero(v92, 4 * v91);
      *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * j) = v93;
      v95 = *(_QWORD **)(a1 + 56);
      v94 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v95 >= v94)
      {
        v97 = *(_QWORD *)(a1 + 48);
        v98 = ((uint64_t)v95 - v97) >> 3;
        if ((unint64_t)(v98 + 1) >> 61)
          goto LABEL_213;
        v99 = v94 - v97;
        v100 = v99 >> 2;
        if (v99 >> 2 <= (unint64_t)(v98 + 1))
          v100 = v98 + 1;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
          v101 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v101 = v100;
        if (v101)
          v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v101);
        else
          v102 = 0;
        v103 = (_QWORD *)(v101 + 8 * v98);
        *v103 = v93;
        v96 = v103 + 1;
        v105 = *(char **)(a1 + 48);
        v104 = *(char **)(a1 + 56);
        if (v104 != v105)
        {
          do
          {
            v106 = *((_QWORD *)v104 - 1);
            v104 -= 8;
            *--v103 = v106;
          }
          while (v104 != v105);
          v104 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v103;
        *(_QWORD *)(a1 + 56) = v96;
        *(_QWORD *)(a1 + 64) = v101 + 8 * v102;
        if (v104)
          operator delete(v104);
      }
      else
      {
        *v95 = v93;
        v96 = v95 + 1;
      }
      *(_QWORD *)(a1 + 56) = v96;
    }
  }
  if (maxFeatureVectors >= 1)
  {
    v107 = 0;
    if (v72)
      v108 = 2;
    else
      v108 = 1;
    do
    {
      if (!*(_BYTE *)(a1 + 116))
      {
        v109 = *(unsigned int *)(a1 + 104);
        v110 = (void *)operator new[]();
        v111 = v110;
        if ((int)v109 >= 1)
          bzero(v110, 4 * v109);
        *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v107) = v111;
        v113 = *(_QWORD **)(a1 + 56);
        v112 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v113 >= v112)
        {
          v115 = *(_QWORD *)(a1 + 48);
          v116 = ((uint64_t)v113 - v115) >> 3;
          if ((unint64_t)(v116 + 1) >> 61)
            goto LABEL_213;
          v117 = v112 - v115;
          v118 = v117 >> 2;
          if (v117 >> 2 <= (unint64_t)(v116 + 1))
            v118 = v116 + 1;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
            v119 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v119 = v118;
          if (v119)
            v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v119);
          else
            v120 = 0;
          v121 = (_QWORD *)(v119 + 8 * v116);
          *v121 = v111;
          v114 = v121 + 1;
          v123 = *(char **)(a1 + 48);
          v122 = *(char **)(a1 + 56);
          if (v122 != v123)
          {
            do
            {
              v124 = *((_QWORD *)v122 - 1);
              v122 -= 8;
              *--v121 = v124;
            }
            while (v122 != v123);
            v122 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v121;
          *(_QWORD *)(a1 + 56) = v114;
          *(_QWORD *)(a1 + 64) = v119 + 8 * v120;
          if (v122)
            operator delete(v122);
        }
        else
        {
          *v113 = v111;
          v114 = v113 + 1;
        }
        *(_QWORD *)(a1 + 56) = v114;
        v125 = *(unsigned int *)(a1 + 100);
        v126 = (void *)operator new[]();
        v127 = v126;
        if ((int)v125 >= 1)
          bzero(v126, 4 * v125);
        *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v107) = v127;
        v129 = *(_QWORD **)(a1 + 56);
        v128 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v129 >= v128)
        {
          v131 = *(_QWORD *)(a1 + 48);
          v132 = ((uint64_t)v129 - v131) >> 3;
          if ((unint64_t)(v132 + 1) >> 61)
            goto LABEL_213;
          v133 = v128 - v131;
          v134 = v133 >> 2;
          if (v133 >> 2 <= (unint64_t)(v132 + 1))
            v134 = v132 + 1;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8)
            v135 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v135 = v134;
          if (v135)
            v135 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v135);
          else
            v136 = 0;
          v137 = (_QWORD *)(v135 + 8 * v132);
          *v137 = v127;
          v130 = v137 + 1;
          v139 = *(char **)(a1 + 48);
          v138 = *(char **)(a1 + 56);
          if (v138 != v139)
          {
            do
            {
              v140 = *((_QWORD *)v138 - 1);
              v138 -= 8;
              *--v137 = v140;
            }
            while (v138 != v139);
            v138 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v137;
          *(_QWORD *)(a1 + 56) = v130;
          *(_QWORD *)(a1 + 64) = v135 + 8 * v136;
          if (v138)
            operator delete(v138);
        }
        else
        {
          *v129 = v127;
          v130 = v129 + 1;
        }
        *(_QWORD *)(a1 + 56) = v130;
      }
      v141 = *(unsigned int *)(a1 + 100);
      v142 = (void *)operator new[]();
      v143 = v142;
      if ((int)v141 >= 1)
        bzero(v142, 4 * v141);
      *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v107) = v143;
      v145 = *(_QWORD **)(a1 + 56);
      v144 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v145 >= v144)
      {
        v147 = *(_QWORD *)(a1 + 48);
        v148 = ((uint64_t)v145 - v147) >> 3;
        if ((unint64_t)(v148 + 1) >> 61)
          goto LABEL_213;
        v149 = v144 - v147;
        v150 = v149 >> 2;
        if (v149 >> 2 <= (unint64_t)(v148 + 1))
          v150 = v148 + 1;
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8)
          v151 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v151 = v150;
        if (v151)
          v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v151);
        else
          v152 = 0;
        v153 = (_QWORD *)(v151 + 8 * v148);
        *v153 = v143;
        v146 = v153 + 1;
        v155 = *(char **)(a1 + 48);
        v154 = *(char **)(a1 + 56);
        if (v154 != v155)
        {
          do
          {
            v156 = *((_QWORD *)v154 - 1);
            v154 -= 8;
            *--v153 = v156;
          }
          while (v154 != v155);
          v154 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v153;
        *(_QWORD *)(a1 + 56) = v146;
        *(_QWORD *)(a1 + 64) = v151 + 8 * v152;
        if (v154)
          operator delete(v154);
      }
      else
      {
        *v145 = v143;
        v146 = v145 + 1;
      }
      *(_QWORD *)(a1 + 56) = v146;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 360) + 24 * v107++), v108);
    }
    while (v107 < maxFeatureVectors);
  }
}

void sub_19155C88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<float>::~FullLayer(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;

  *(_QWORD *)a1 = off_1E2D58FD0;
  FullLayer<float>::cleanupAllBuffers(a1);
  v2 = *(_QWORD *)(a1 + 424);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    *(_QWORD *)(a1 + 424) = 0;
  }
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 440));
  v3 = *(void **)(a1 + 384);
  if (v3)
  {
    *(_QWORD *)(a1 + 392) = v3;
    operator delete(v3);
  }
  v12 = (void **)(a1 + 360);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(_QWORD *)(a1 + 344) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 264);
  if (v7)
  {
    *(_QWORD *)(a1 + 272) = v7;
    operator delete(v7);
  }
  SparseMatrix<float>::~SparseMatrix(a1 + 144);
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(_QWORD *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void FullLayer<float>::cleanupAllBuffers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = *(_QWORD *)(a1 + 48);
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 == v6)
  {
    v6 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C8052888210);
        v6 = *(_QWORD *)(a1 + 72);
        v7 = *(_QWORD *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    v2 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 80) = v6;
  SparseMatrix<float>::cleanupAllBuffers((_QWORD *)(a1 + 144));
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 360));
  if (!*(_BYTE *)(a1 + 116))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
  }
}

void FullLayer<float>::targets()
{
  exitFramework(1);
}

uint64_t FullLayer<float>::inputs(uint64_t a1)
{
  return a1 + 264;
}

uint64_t FullLayer<float>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t FullLayer<float>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t FullLayer<float>::inputDeltas(uint64_t a1)
{
  return a1 + 312;
}

uint64_t FullLayer<float>::weightsAreNaN()
{
  return 0;
}

uint64_t FullLayer<float>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  uint64_t v9;
  int *v10;
  int v11;
  float **v12;
  int v13;
  char v15[8];

  v5 = (int)a4;
  *(_QWORD *)v15 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v15[4], v15, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((int *)this + 18);
    v10 = (int *)(*(_QWORD *)this + v9);
    if ((unint64_t)v10 <= *(_QWORD *)this + *((_QWORD *)this + 1) - 4)
    {
      v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v11 = 0;
    }
    *(_DWORD *)(a1 + 408) = v11;
  }
  v12 = (float **)*(unsigned int *)(a1 + 100);
  if ((_DWORD)v12 != *(_DWORD *)&v15[4] || (v13 = *(_DWORD *)(a1 + 104), v13 != *(_DWORD *)v15))
    exitFramework(3);
  return MMatrix<float>::read(*(char **)(a1 + 512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 117), v12, v13);
}

void FullLayer<float>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 100), *(_DWORD *)(a1 + 104));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 408);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  MMatrix<float>::write(*(float ***)(a1 + 512), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

float FullLayer<float>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  void *v5;
  float result;
  _QWORD *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float v14;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v7 = 0;
LABEL_6:
  v8 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v8 >= 1)
  {
    v9 = (float *)v7[16];
    v10 = (float *)*((_QWORD *)v5 + 16);
    v11 = **(float ***)(a1 + 512);
    do
    {
      v12 = *v9++;
      v13 = v12;
      v14 = *v10++;
      result = v13 - v14;
      *v11++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *FullLayer<float>::compareModels(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
  if (a3)
  return result;
}

void FullLayer<float>::addGradient(uint64_t a1, void *lpsrc)
{
  const float **v3;
  const float **v4;
  vDSP_Length v5;
  float __B;

  v4 = *(const float ***)(a1 + 512);
  v5 = *(int *)(a1 + 104) * (uint64_t)*(int *)(a1 + 100);
  __B = 1.0;
  vDSP_vsma(v3[16], 1, &__B, *v4, 1, (float *)*v4, 1, v5);
}

void FullLayer<float>::applyGradient(uint64_t a1, void *lpsrc)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  const float **v7;
  vDSP_Length v8;
  float __C;
  float __B;

  if (lpsrc)
  else
    v3 = 0;
  v4 = *(_QWORD *)(a1 + 424);
  v5 = *(_QWORD *)(a1 + 512);
  v6 = v3 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  (**(void (***)(uint64_t, uint64_t, char *))v4)(v4, v5, v6);
  v7 = *(const float ***)(a1 + 512);
  v8 = *(int *)(a1 + 108);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
}

void FullLayer<float>::clipModel(uint64_t a1, float a2)
{
  const float **v2;
  vDSP_Length v3;
  float __C;
  float __B;

  v2 = *(const float ***)(a1 + 512);
  v3 = *(int *)(a1 + 108);
  __B = -a2;
  __C = a2;
  vDSP_vclip(*v2, 1, &__B, &__C, (float *)*v2, 1, v3);
}

uint64_t FullLayer<float>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  float *v3;

  v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    v3 = **(float ***)(result + 512);
    do
    {
      *v3 = *v3 * a2;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void FullLayer<float>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v2 = *(_QWORD *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print before reset");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424));
  v3 = *(_QWORD *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print AFTER reset");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_19155CFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *FullLayer<float>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t *v5;
  char *result;

  v3 = **(_QWORD **)(a1 + 512);
  v4 = *(double *)(a1 + 100);
  v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    *v5 = v3;
    *((double *)v5 + 1) = v4;
    result = (char *)(v5 + 2);
  }
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t FullLayer<float>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 128) = v3;
  result = a1 + 128;
  *(_QWORD *)(result + 384) = result;
  return result;
}

uint64_t FullLayer<float>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t FullLayer<float>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void FullLayer<float>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_19155D0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FullLayer<float>::log2ProbabilityForSingleFeatureVector(uint64_t a1, _QWORD *a2, float *a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;

  v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    v10 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v9 = 1.1755e-38;
    do
    {
      v8 = *(_QWORD *)(*a2 + 8 * a4);
      if (*(float *)(v8 + 4 * v7) > v9)
      {
        v6 = v7;
        v9 = *(float *)(v8 + 4 * v7);
      }
      ++v7;
    }
    while (v5 != v7);
    v10 = v6;
  }
  v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
    v12 = 99.0;
  else
    v12 = 0.0 - log2f(v11);
  *a3 = v12;
}

float FullLayer<float>::computeErrorForSingleFeatureVector(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, _DWORD *a5, float result)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float **v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float v22;

  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    v14 = *a2;
    v15 = (float **)(*a2 + 8 * a4);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v11 = 1.1755e-38;
    do
    {
      v10 = *(_QWORD *)(v6 + 8 * a4);
      if (*(float *)(v10 + 4 * v9) > v11)
      {
        v8 = v9;
        v11 = *(float *)(v10 + 4 * v9);
      }
      ++v9;
    }
    while (v7 != v9);
    v12 = 0;
    v13 = 0;
    v14 = *a2;
    v15 = (float **)(*a2 + 8 * a4);
    result = 1.1755e-38;
    do
    {
      if ((*v15)[v13] > result)
      {
        v12 = v13;
        result = (*v15)[v13];
      }
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12)
      ++*a5;
  }
  if (a4 < (unint64_t)((uint64_t)(a3[1] - *a3) >> 3)
    && a4 < (unint64_t)((a2[1] - v14) >> 3)
    && a4 < (unint64_t)((*(_QWORD *)(a1 + 296) - v6) >> 3))
  {
    v16 = *(unsigned int *)(a1 + 100);
    if ((int)v16 >= 1)
    {
      v17 = *v15;
      v18 = *(float **)(v6 + 8 * a4);
      v19 = *(float **)(*a3 + 8 * a4);
      do
      {
        v20 = *v17++;
        v21 = v20;
        v22 = *v18++;
        result = v21 - v22;
        *v19++ = result;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

void FullLayer<float>::backwardForSingleFeatureVector(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  vDSP_Length v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;
  float __C;
  float __B;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 416), *(float **)(*(_QWORD *)(a1 + 384) + 8 * a4), *(float **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
    cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1.0, **(const float ***)(a1 + 512), *(_DWORD *)(a1 + 104), *(const float **)(a1 + 416), 1, 0.0, *(float **)(*(_QWORD *)(a1 + 312) + 8 * a4), 1);
    v8 = *(_QWORD *)(a1 + 312);
    v9 = *(int *)(a1 + 104);
    __B = -50.0;
    __C = 50.0;
    vDSP_vclip(*(const float **)(v8 + 8 * a4), 1, &__B, &__C, *(float **)(v8 + 8 * a4), 1, v9);
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    VVector<float>::sumOuterProd(a1 + 416, *(_QWORD *)(a1 + 264) + 8 * a4, *(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
  }
  else
  {
    v10 = *a2;
    v11 = *(_QWORD *)(a1 + 360) + 24 * a4;
    v13 = 0;
    v14 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2);
    SparseMatrix<float>::sum<float>(a1 + 144, *(int **)(v10 + 8 * a4), (uint64_t)__p, *(_DWORD *)(a1 + 100));
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
}

void FullLayer<float>::initDW(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 116))
  {
    if (*(_DWORD *)(a1 + 112))
      *(_DWORD *)(a1 + 160) = 0;
    else
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  }
  v4 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(a1 + 272) != v4)
  {
    v5 = 0;
    do
    {
      bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
      v4 = *(_QWORD *)(a1 + 264);
    }
    while (v5 < (*(_QWORD *)(a1 + 272) - v4) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v6)
  {
    v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      v6 = *(_QWORD *)(a1 + 288);
    }
    while (v7 < (*(_QWORD *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1)
  {
    v8 = 0;
    v9 = 8 * a2;
    do
    {
      if (!*(_BYTE *)(a1 + 116))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
        bzero(*(void **)(*(_QWORD *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
}

uint64_t FullLayer<float>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t FullLayer<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t FullLayer<float>::update(uint64_t a1)
{
  uint64_t (**v1)(void);

  v1 = **(uint64_t (****)(void))(a1 + 424);
  if (*(int *)(a1 + 112) < 1)
    return (*v1)();
  else
    return v1[1]();
}

void FullLayer<float>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  if (*(int *)(a1 + 112) < 1)
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  else
    *(_DWORD *)(a1 + 160) = 0;
  v9 = __OFSUB__(a5, 1);
  v10 = a5 - 1;
  if (v10 < 0 == v9)
  {
    v11 = 0;
    do
    {
      if (*(_BYTE *)(a1 + 520))
        v12 = v11;
      else
        v12 = v10;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
      --v10;
      ++v11;
    }
    while (v10 != -1);
  }
}

void FullLayer<float>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const void **v22;
  _DWORD *v23;
  uint64_t v24;
  float **v25;
  uint64_t v26;
  uint64_t v27;
  vDSP_Length v28;
  void *v30;
  int *v31;
  uint64_t v32;
  void *__p[2];
  char v34;
  float __C;

  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
    v9 = 0;
  else
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v10 = *(unsigned __int8 *)(a1 + 520);
  std::string::basic_string[abi:ne180100]<0>(__p, "Fulllayer");
  if (a5 && v10)
    exitFramework(34);
  v11 = a4 & 0xFFFFFF;
  v12 = a5 != 0;
  if (v34 < 0)
    operator delete(__p[0]);
  if (v11 > v12)
  {
    v13 = ~v12 + v11;
    do
    {
      if (*(_BYTE *)(a1 + 520))
        v14 = v13;
      else
        v14 = v12;
      v15 = v14;
      if (*(_BYTE *)(a1 + 42))
        v16 = 1;
      else
        v16 = v14;
      if (((*(_BYTE *)(a1 + 42) != 0) & v9) != 0)
        v17 = 1;
      else
        v17 = v14;
      v18 = *(_QWORD *)(a1 + 264);
      if (v9)
      {
        bzero(*(void **)(v18 + 8 * v17), 4 * *(int *)(a1 + 104));
        v19 = *(_QWORD *)(a1 + 264);
        *(_DWORD *)(*(_QWORD *)(v19 + 8 * v17) + 4 * **(int **)(*a3 + 24 * (int)v15)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v18 + 8 * v17), *(const void **)(*a2 + 8 * v17), 4 * *(int *)(a1 + 96));
        v19 = *(_QWORD *)(a1 + 264);
      }
      v20 = *(_DWORD *)(a1 + 104);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(v19 + 8 * v17) + 4 * (v20 - 1)) = 1065353216;
      VVector<float>::print((float **)(v19 + 8 * v17), "FullLayer input: ", v20);
      MMatrix<float>::print(*(float ***)(a1 + 512), "FullLayer weights: ", *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 360);
        v22 = (const void **)(v21 + 24 * v15);
        v23 = *v22;
        *(_DWORD *)*v22 = **(_DWORD **)(*a3 + 24 * v15);
        if (*(_BYTE *)(a1 + 40))
          v23[1] = *(_DWORD *)(a1 + 104) - 1;
        v24 = v16;
        v25 = (float **)(*(_QWORD *)(a1 + 384) + 8 * v16);
        v31 = 0;
        v32 = 0;
        v30 = 0;
        v26 = *(_QWORD *)(v21 + 24 * (int)v15 + 8);
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *v22, v26, (v26 - (uint64_t)*v22) >> 2);
        VVector<float>::internalMul(v25, (int *)v30, v31, **(_QWORD **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
        if (v30)
        {
          v31 = (int *)v30;
          operator delete(v30);
        }
      }
      else
      {
        v24 = v16;
        cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1.0, **(const float ***)(a1 + 512), *(_DWORD *)(a1 + 104), *(const float **)(*(_QWORD *)(a1 + 264) + 8 * v17), 1, 0.0, *(float **)(*(_QWORD *)(a1 + 384) + 8 * v16), 1);
      }
      v27 = *(_QWORD *)(a1 + 384);
      v28 = *(int *)(a1 + 100);
      LODWORD(__p[0]) = -1035468800;
      __C = 50.0;
      vDSP_vclip(*(const float **)(v27 + 8 * v24), 1, (const float *)__p, &__C, *(float **)(v27 + 8 * v24), 1, v28);
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 288) + 8 * v15), *(float **)(*(_QWORD *)(a1 + 384) + 8 * v24), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
      ++v12;
      --v13;
    }
    while (v13 != -1);
  }
}

void sub_19155D8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<float>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[520] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      FullLayer<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A7F8 = 0;
      qword_1EE21A800 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &FullLayer<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &FullLayer<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[520] = 0;
  return result;
}

uint64_t FullLayer<float>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[520] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *FullLayer<float>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 504) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 512) = result + 128;
  return result;
}

uint64_t FullLayer<float>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  void (**v5)(float);
  const float **v6;
  vDSP_Length v7;
  float __C;
  float __B;

  if (*(_DWORD *)(a1 + 504))
    exitFramework(1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 440));
  v5 = **(void (****)(float))(a1 + 424);
  if (*(_DWORD *)(a1 + 112))
  {
    v5[1](a3);
  }
  else
  {
    (*v5)(a3);
    v6 = *(const float ***)(a1 + 512);
    v7 = *(int *)(a1 + 108);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*v6, 1, &__B, &__C, (float *)*v6, 1, v7);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 440));
}

_DWORD *FullLayer<float>::computeError(_DWORD *result)
{
  if (!result[30])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 392))(result);
  return result;
}

float FullLayer<float>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = 0;
  v4 = *(unsigned int *)(a1 + 100);
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 288);
  v7 = a3;
  v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v12 = 1.1755e-38;
      do
      {
        v11 = *(_QWORD *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          v9 = v10;
          v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    v13 = *(float *)(*(_QWORD *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10)
      v14 = 99.0;
    else
      v14 = -log2f(v13);
    v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

void FullLayer<float>::~FullLayer(uint64_t a1)
{
  FullLayer<float>::~FullLayer(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t FullLayer<float>::outputDeltas(uint64_t a1)
{
  return a1 + 336;
}

float FullLayer<float>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a2) + 4 * a3);
}

void FullLayer<float>::computeErrorRMSE(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  void *__p[2];
  unsigned __int8 v33;
  std::string v34;
  void *v35[2];
  int64_t v36;

  if (a4 >= 1)
  {
    v9 = a4;
    do
    {
      v10 = (v9 - 1);
      v11 = *(unsigned int *)(a1 + 100);
      if ((int)v11 >= 1)
      {
        v12 = 0;
        v13 = 0;
        v14 = *(float **)(*(_QWORD *)(a1 + 288) + 8 * v10);
        v15 = 1.1755e-38;
        do
        {
          if (v14[v13] > v15)
          {
            v12 = v13;
            v15 = v14[v13];
          }
          ++v13;
        }
        while (v11 != v13);
        v16 = 0;
        v17 = 0;
        v18 = *(float **)(*a2 + 8 * v10);
        v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            v16 = v17;
            v19 = v18[v17];
          }
          ++v17;
        }
        while (v11 != v17);
        if (v12 != v16)
        {
          ++*a5;
          v11 = *(unsigned int *)(a1 + 100);
        }
        if ((int)v11 >= 1)
        {
          v20 = *(float **)(*a3 + 8 * v10);
          do
          {
            v21 = *v18++;
            v22 = v21;
            v23 = *v14++;
            *v20++ = v22 - v23;
            --v11;
          }
          while (v11);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v34, "SoftMax ComputerError::targets t=");
      i2s(__p);
      if ((v33 & 0x80u) == 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      if ((v33 & 0x80u) == 0)
        v25 = v33;
      else
        v25 = (std::string::size_type)__p[1];
      v26 = std::string::append(&v34, (const std::string::value_type *)v24, v25);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v36 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)v35 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((char)v33 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (v36 >= 0)
        v28 = (char *)v35;
      else
        v28 = (char *)v35[0];
      VVector<float>::print((float **)(*a2 + 8 * v10), v28, *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 288) + 8 * v10), "SoftMax ComputerError::output ", *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*a3 + 8 * v10), "SoftMax ComputerError::deltas ", *(_DWORD *)(a1 + 100));
      if (SHIBYTE(v36) < 0)
        operator delete(v35[0]);
      v31 = __OFSUB__(v9, 1);
      v29 = v9 == 1;
      v30 = --v9 < 0;
    }
    while (!(v30 ^ v31 | v29));
  }
}

void sub_19155DE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

float VVector<float>::applyBackwardActivationDerivative(void **a1, float *a2, float *__src, int a4, int a5)
{
  float result;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;

  switch(a5)
  {
    case 0:
      memmove(*a1, __src, 4 * a4);
      break;
    case 1:
      if (a4 >= 1)
      {
        v6 = (float *)*a1;
        v7 = a4;
        result = 1.0;
        do
        {
          v8 = *a2++;
          v9 = v8 * (float)(1.0 - v8);
          v10 = *__src++;
          *v6++ = v10 * v9;
          --v7;
        }
        while (v7);
      }
      break;
    case 2:
      if (a4 >= 1)
      {
        v11 = (float *)*a1;
        v12 = a4;
        result = 1.0;
        do
        {
          v13 = *a2++;
          v14 = 1.0 - (float)(v13 * v13);
          v15 = *__src++;
          *v11++ = v14 * v15;
          --v12;
        }
        while (v12);
      }
      break;
    case 3:
      if (a4 >= 1)
      {
        v16 = (float *)*a1;
        v17 = a4;
        result = 1.7159;
        do
        {
          v18 = *a2++;
          v19 = (float)(v18 + 1.7159) * (float)((float)(1.7159 - v18) * 0.38853);
          v20 = *__src++;
          *v16++ = v20 * v19;
          --v17;
        }
        while (v17);
      }
      break;
    case 4:
      v21 = (float *)*a1;
      *(_DWORD *)*a1 = -971227136;
      if (a4 >= 1)
      {
        v22 = a4;
        v23 = v21;
        v24 = a4;
        do
        {
          v25 = *a2++;
          if (v25 > 0.0)
            v26 = 1.0;
          else
            v26 = 0.0;
          *v23++ = v26;
          --v24;
        }
        while (v24);
        do
        {
          v27 = *__src++;
          result = *v21 * v27;
          *v21++ = result;
          --v22;
        }
        while (v22);
      }
      break;
    default:
      return result;
  }
  return result;
}

void SoftMax<float>::targets()
{
  exitFramework(1);
}

uint64_t SoftMax<float>::inputs(uint64_t a1)
{
  return a1 + 264;
}

uint64_t SoftMax<float>::outputs(uint64_t a1)
{
  return a1 + 288;
}

void SoftMax<float>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax, from allocAll");
  FullLayer<float>::init(a1, (uint64_t)__p, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_19155E0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoftMax<float>::forwardForSingleFeatureVector(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, const void **a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  const float **v12;
  vDSP_Length v13;
  _QWORD *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  vDSP_Length __M;
  void *__p;
  void *v30;
  uint64_t v31;
  float __C;
  float __B;

  v9 = *(unsigned __int8 *)(a1 + 42);
  v10 = a4;
  v11 = *(int *)(a1 + 96);
  __M = *(int *)(a1 + 100);
  v12 = *(const float ***)(a1 + 512);
  v13 = *(int *)(a1 + 104);
  v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  memmove(*(void **)(*v14 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v11);
  if (*(_BYTE *)(a1 + 40))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 8 * v10)
              + 4 * ((int)v13 - 1)) = 1065353216;
  v15 = (int *)*a5;
  v16 = (int *)a5[1];
  if (v9)
    v17 = 1;
  else
    v17 = v10;
  v18 = *(_QWORD *)(a1 + 384);
  v19 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v16 == v15)
  {
    cblas_sgemv(CblasRowMajor, CblasNoTrans, __M, v13, 1.0, *v12, v13, *(const float **)(v19 + 8 * v10), 1, 0.0, *(float **)(v18 + 8 * v17), 1);
    v25 = *(_QWORD *)(a1 + 384);
    __C = 50.0;
    __B = -50.0;
    vDSP_vclip(*(const float **)(v25 + 8 * v17), 1, &__B, &__C, *(float **)(v25 + 8 * v17), 1, __M);
    v26 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    VVector<float>::outputExpNormalized((float **)(*v26 + 8 * v10), *(const float **)(*(_QWORD *)(a1 + 384) + 8 * v17), __M);
    v27 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    __C = 5.0;
    __B = -5.0;
    vDSP_vclip(*(const float **)(v27 + 8 * v10), 1, &__B, &__C, *(float **)(v27 + 8 * v10), 1, __M);
  }
  else
  {
    bzero(*(void **)(v18 + 8 * v17), 4 * __M);
    v20 = (int *)*a5;
    if (a5[1] != *a5)
    {
      v21 = 0;
      do
      {
        vDSP_dotpr(*(const float **)(v19 + 8 * v10), 1, &(*v12)[v20[v21] * (int)v13], 1, (float *)(*(_QWORD *)(v18 + 8 * v17) + 4 * v20[v21]), v13);
        ++v21;
        v20 = (int *)*a5;
      }
      while (v21 < ((_BYTE *)a5[1] - (_BYTE *)*a5) >> 2);
    }
    v22 = *(_QWORD *)(a1 + 384);
    __C = 50.0;
    __B = -50.0;
    vDSP_vclip(*(const float **)(v22 + 8 * v17), 1, &__B, &__C, *(float **)(v22 + 8 * v17), 1, __M);
    v23 = (void **)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 8 * v10);
    v24 = (uint64_t *)(*(_QWORD *)(a1 + 384) + 8 * v17);
    v30 = 0;
    v31 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *a5, (uint64_t)a5[1], ((_BYTE *)a5[1] - (_BYTE *)*a5) >> 2);
    VVector<float>::outputExpNormalized(v23, v24, (int **)&__p, __M);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
  }
}

void SoftMax<float>::forward(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  void *__p;
  char v17;

  v13 = a1[520];
  std::string::basic_string[abi:ne180100]<0>(&__p, "Softmax");
  if (a5 && v13)
    exitFramework(34);
  v14 = a4 & 0xFFFFFF;
  v15 = a5 != 0;
  if (v17 < 0)
    operator delete(__p);
  if (v14 > v15)
  {
    do
    {
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2, a3, v15, a7);
      v15 = (v15 + 1);
    }
    while (v14 != (_DWORD)v15);
  }
}

void sub_19155E444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoftMax<float>::~SoftMax(uint64_t a1)
{
  FullLayer<float>::~FullLayer(a1);
  JUMPOUT(0x19401CD90);
}

void VVector<float>::outputExpNormalized(void **a1, uint64_t *a2, int **a3, int a4)
{
  char *v7;
  int **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;

  bzero(*a1, 4 * a4);
  v8 = a3;
  v7 = (char *)*a3;
  v9 = (char *)v8[1] - v7;
  if (v9)
  {
    v10 = v9 >> 2;
    v11 = *a2;
    v12 = (float *)*a1;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v10;
    v14 = 0.0;
    v15 = v7;
    v16 = v13;
    do
    {
      v17 = *(int *)v15;
      v15 += 4;
      v18 = expf(*(float *)(v11 + 4 * v17));
      v12[v17] = v18;
      v14 = v14 + v18;
      --v16;
    }
    while (v16);
    v19 = 0.001;
    if (v14 > 0.0)
      v19 = v14 + 0.001;
    do
    {
      v20 = *(int *)v7;
      v7 += 4;
      v12[v20] = v12[v20] / v19;
      --v13;
    }
    while (v13);
  }
}

void VVector<float>::outputExpNormalized(float **a1, const float *a2, int a3)
{
  float v4;
  float v5;
  float __B;
  float __C;
  vDSP_Length __N;

  __C = 0.0;
  LODWORD(__N) = a3;
  vvexpf(*a1, a2, (const int *)&__N);
  vDSP_sve(*a1, 1, &__C, (int)__N);
  v4 = __C;
  if (fabsf(__C) == INFINITY)
  {
    __C = 1.7014e38;
    v4 = 1.7014e38;
  }
  if (v4 <= 0.0)
    v5 = 0.001;
  else
    v5 = v4 + 0.001;
  __B = v5;
  vDSP_vsdiv(*a1, 1, &__B, *a1, 1, (int)__N);
}

void Direct::targets(Direct *this)
{
  exitFramework(1);
}

uint64_t Direct::inputs(Direct *this)
{
  return (uint64_t)this + 64;
}

uint64_t Direct::outputs(Direct *this)
{
  return (uint64_t)this + 88;
}

void Direct::deltas(Direct *this)
{
  exitFramework(1);
}

uint64_t Direct::inputDeltas(Direct *this)
{
  return (uint64_t)this + 112;
}

uint64_t Direct::weightsAreNaN(Direct *this)
{
  return 0;
}

uint64_t Direct::ninputs(Direct *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t Direct::noutputs(Direct *this)
{
  return *((unsigned int *)this + 12);
}

void Direct::backward(uint64_t a1, uint64_t a2, uint64_t a3, float ***a4, int a5)
{
  uint64_t v7;
  float **v8;
  float **v9;

  if (a5 <= 0)
  {
    v9 = *(float ***)(a1 + 112);
  }
  else
  {
    v7 = 0;
    v8 = *a4;
    v9 = *(float ***)(a1 + 112);
    do
    {
      v9[v7] = v8[v7];
      ++v7;
    }
    while (a5 != v7);
  }
  VVector<float>::print(v9, "Direct backward: dxs err to percolate up: ", *(_DWORD *)(a1 + 60));
  VVector<float>::print(*a4, "Direct backward: deltas input err : ", *(_DWORD *)(a1 + 48));
}

void Direct::forward(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;

  if ((a4 & 0xFFFFFF) != 0)
  {
    v6 = 0;
    v7 = 8 * (a4 & 0xFFFFFF);
    do
    {
      memmove(*(void **)(*(_QWORD *)(a1 + 64) + v6), *(const void **)(*a2 + v6), 4 * *(int *)(a1 + 44));
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + v6) + 4 * *(int *)(a1 + 44)) = 1065353216;
      memmove(*(void **)(*(_QWORD *)(a1 + 88) + v6), *(const void **)(*a2 + v6), 4 * *(int *)(a1 + 48));
      v6 += 8;
    }
    while (v7 != v6);
  }
  VVector<float>::print(*(float ***)(a1 + 64), "FullLayer input: ", *(_DWORD *)(a1 + 60));
  VVector<float>::print(*(float ***)(a1 + 88), "FullLayer output[0]: ", *(_DWORD *)(a1 + 48));
}

void Direct::computeError()
{
  exitFramework(5);
}

void Direct::log2Probability()
{
  exitFramework(5);
}

void Direct::~Direct(Direct *this)
{
  Direct::~Direct(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  void *v3;
  char *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = off_1E2D582E0;
  v4 = (char *)this + 232;
  v2 = (void *)*((_QWORD *)this + 29);
  v3 = (void *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
    if (v3)
    {
LABEL_7:
      *((_QWORD *)this + 30) = v2;
      operator delete(v2);
    }
  }
  else
  {
    v5 = 0;
    do
    {
      if (*((_QWORD *)v2 + v5))
      {
        MEMORY[0x19401CD78](*((_QWORD *)v2 + v5), 0x1000C8052888210);
        v2 = (void *)*((_QWORD *)this + 29);
        v3 = (void *)*((_QWORD *)this + 30);
      }
      ++v5;
    }
    while (v5 < ((_BYTE *)v3 - (_BYTE *)v2) >> 3);
    if (v2)
      goto LABEL_7;
  }
  *((_QWORD *)this + 20) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 168));
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 18) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 15) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 12) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 9) = v9;
    operator delete(v9);
  }
  *(_QWORD *)this = off_1E2D4D730;
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
}

void Direct::outputDeltas(Direct *this)
{
  exitFramework(1);
}

void RecurrentLayer<float>::targets()
{
  exitFramework(1);
}

uint64_t RecurrentLayer<float>::inputs(uint64_t a1)
{
  return a1 + 88;
}

uint64_t RecurrentLayer<float>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t RecurrentLayer<float>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t RecurrentLayer<float>::inputDeltas(uint64_t a1)
{
  return a1 + 136;
}

uint64_t RecurrentLayer<float>::weightsAreNaN()
{
  return 0;
}

uint64_t RecurrentLayer<float>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  uint64_t v9;
  int *v10;
  int v11;
  float **v12;
  int v13;
  char v15[8];

  v5 = (int)a4;
  *(_QWORD *)v15 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v15[4], v15, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((int *)this + 18);
    v10 = (int *)(*(_QWORD *)this + v9);
    if ((unint64_t)v10 <= *(_QWORD *)this + *((_QWORD *)this + 1) - 4)
    {
      v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v11 = 0;
    }
    *(_DWORD *)(a1 + 208) = v11;
  }
  v12 = (float **)*(unsigned int *)(a1 + 48);
  if ((_DWORD)v12 != *(_DWORD *)&v15[4] || (v13 = *(_DWORD *)(a1 + 52), v13 != *(_DWORD *)v15))
    exitFramework(3);
  return MMatrix<float>::read(*(char **)(a1 + 376), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 61), v12, v13);
}

void RecurrentLayer<float>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 48), *(_DWORD *)(a1 + 52));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 208);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  MMatrix<float>::write(*(float ***)(a1 + 376), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

float RecurrentLayer<float>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  void *v5;
  float result;
  _QWORD *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float v14;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v7 = 0;
LABEL_6:
  v8 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v8 >= 1)
  {
    v9 = (float *)v7[8];
    v10 = (float *)*((_QWORD *)v5 + 8);
    v11 = **(float ***)(a1 + 376);
    do
    {
      v12 = *v9++;
      v13 = v12;
      v14 = *v10++;
      result = v13 - v14;
      *v11++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *RecurrentLayer<float>::compareModels(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
  if (a3)
  return result;
}

void RecurrentLayer<float>::addGradient(uint64_t a1, void *lpsrc)
{
  const float **v3;
  const float **v4;
  vDSP_Length v5;
  float __B;

  v4 = *(const float ***)(a1 + 376);
  v5 = *(int *)(a1 + 52) * (uint64_t)*(int *)(a1 + 48);
  __B = 1.0;
  vDSP_vsma(v3[8], 1, &__B, *v4, 1, (float *)*v4, 1, v5);
}

void RecurrentLayer<float>::allocInitialState(uint64_t a1, void **a2)
{
  _QWORD *v4;
  int v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = (_QWORD *)operator new();
  VVector<float>::VVector(v4, *(_DWORD *)(a1 + 48), 0);
  v5 = *(_DWORD *)(a1 + 48);
  v7 = (char *)a2[1];
  v6 = (char *)a2[2];
  if (v7 >= v6)
  {
    v9 = (v7 - (_BYTE *)*a2) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - (_BYTE *)*a2;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 16 * v9;
    v15 = v12 + 16 * v13;
    *(_DWORD *)v14 = v5;
    *(_QWORD *)(v14 + 8) = v4;
    v8 = (void *)(v14 + 16);
    v17 = (char *)*a2;
    v16 = (char *)a2[1];
    if (v16 != *a2)
    {
      do
      {
        *(_OWORD *)(v14 - 16) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a2;
    }
    *a2 = (void *)v14;
    a2[1] = v8;
    a2[2] = (void *)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v7 = v5;
    *((_QWORD *)v7 + 1) = v4;
    v8 = v7 + 16;
  }
  a2[1] = v8;
}

void sub_19155ED68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void *RecurrentLayer<float>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *result;

  v5 = *(int *)(a1 + 48);
  v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void RecurrentLayer<float>::restoreState(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8[200];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *a4;
  *a4 = v7 + 1;
  memmove(*(void **)(v6 + 8 * a3), **(const void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(a1 + 48));
  sprintf(v8, "RNN restore startTimIdx = %d", a3);
  VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * a3), v8, *(_DWORD *)(a1 + 48));
}

void RecurrentLayer<float>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v4;

  v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

char *RecurrentLayer<float>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t *v5;
  char *result;

  v3 = **(_QWORD **)(a1 + 376);
  v4 = *(double *)(a1 + 48);
  v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    *v5 = v3;
    *((double *)v5 + 1) = v4;
    result = (char *)(v5 + 2);
  }
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t RecurrentLayer<float>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 64) = v3;
  result = a1 + 64;
  *(_QWORD *)(result + 312) = result;
  return result;
}

uint64_t RecurrentLayer<float>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t RecurrentLayer<float>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void RecurrentLayer<float>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, __p, 0, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_19155EFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<float>::cleanupAllBuffers(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 248);
  v3 = *(_QWORD *)(result + 256);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(result + 256);
  }
  else
  {
    v4 = 0;
    do
    {
      result = *(_QWORD *)(v2 + 8 * v4);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C8052888210);
        v2 = v1[31];
        v3 = v1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v5 = v1[34];
  v6 = v1[35];
  if (v6 == v5)
  {
    v5 = v1[35];
  }
  else
  {
    v7 = 0;
    do
    {
      result = *(_QWORD *)(v5 + 8 * v7);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C8052888210);
        v5 = v1[34];
        v6 = v1[35];
      }
      ++v7;
    }
    while (v7 < (v6 - v5) >> 3);
    v2 = v1[31];
  }
  v1[32] = v2;
  v1[35] = v5;
  return result;
}

uint64_t RecurrentLayer<float>::ninputs(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t RecurrentLayer<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void RecurrentLayer<float>::update(uint64_t a1, float a2)
{
  vDSP_Length v4;
  float *v5;
  float __B;

  operator new[]();
  v4 = *(int *)(a1 + 56);
  v5 = *(float **)(a1 + 64);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 80), 1, &__B, v5, 1, v5, 1, v4);
}

void RecurrentLayer<float>::backward(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  vDSP_Length v12;
  int v13;
  int v14;
  uint64_t v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  char *p_B;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  std::string v29;
  std::string __C;
  __int128 __B;
  int64_t v32;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    if (a5 <= 0)
    {
      bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
      return;
    }
    v8 = 0;
    v9 = a5 - 1;
    do
    {
      if (*(_BYTE *)(a1 + 232))
        v10 = v8;
      else
        v10 = v9;
      VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 216), *(float **)(*(_QWORD *)(a1 + 184) + 8 * v10), *(float **)(*a4 + 8 * v10), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 376), *(_DWORD *)(a1 + 52), *(const float **)(a1 + 216), 1, 0.0, *(float **)(*(_QWORD *)(a1 + 136) + 8 * v10), 1);
      v11 = *(_QWORD *)(a1 + 136);
      v12 = *(int *)(a1 + 52);
      LODWORD(__B) = -1035468800;
      LODWORD(__C.__r_.__value_.__l.__data_) = 1112014848;
      vDSP_vclip(*(const float **)(v11 + 8 * v10), 1, (const float *)&__B, (const float *)&__C, *(float **)(v11 + 8 * v10), 1, v12);
      --v9;
      ++v8;
    }
    while (v9 != -1);
  }
  bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  if (a5 >= 1)
  {
    v13 = 0;
    do
    {
      --a5;
      if (*(_BYTE *)(a1 + 232))
        v14 = v13;
      else
        v14 = a5;
      v15 = v14;
      VVector<float>::sumOuterProd(*a4 + 8 * v14, *(_QWORD *)(a1 + 88) + 8 * v14, *(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v15) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      std::string::basic_string[abi:ne180100]<0>(&v29, "FullLayer DW: t[");
      i2s(v27);
      if ((v28 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (void **)v27[0];
      if ((v28 & 0x80u) == 0)
        v17 = v28;
      else
        v17 = (std::string::size_type)v27[1];
      v18 = std::string::append(&v29, (const std::string::value_type *)v16, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __C.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__C.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "] ");
      if ((v26 & 0x80u) == 0)
        v20 = __p;
      else
        v20 = (void **)__p[0];
      if ((v26 & 0x80u) == 0)
        v21 = v26;
      else
        v21 = (std::string::size_type)__p[1];
      v22 = std::string::append(&__C, (const std::string::value_type *)v20, v21);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v32 = v22->__r_.__value_.__r.__words[2];
      __B = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if ((char)v26 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__C.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__C.__r_.__value_.__l.__data_);
      if ((char)v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (v32 >= 0)
        p_B = (char *)&__B;
      else
        p_B = (char *)__B;
      MMatrix<float>::print((float **)(a1 + 80), p_B, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
      if (SHIBYTE(v32) < 0)
        operator delete((void *)__B);
      ++v13;
    }
    while (a5 > 0);
  }
}

void sub_19155F434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<float>::forward(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  float v9;
  BOOL v10;
  char v11;
  unsigned int v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  void *v16;
  char v17;
  char *p_p;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  void *v22;
  char v23;
  float **v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int *v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int *v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  float32x4_t **v43;
  int v44;
  vDSP_Length v45;
  _BOOL4 v47;
  void *v48;
  char v49;
  std::string v50;
  std::string v51;
  void *__p;
  __int128 v53;
  _QWORD v54[4];

  v54[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 240);
  if (v8)
  {
    if (*(float *)(v8 + 604) <= 0.0)
      v9 = 50.0;
    else
      v9 = *(float *)(v8 + 604);
    v47 = !*(_BYTE *)(v8 + 20) && *(_DWORD *)(v8 + 40) == 1 && *(_DWORD *)(v8 + 44) == 1;
  }
  else
  {
    v47 = 1;
    v9 = 50.0;
  }
  v10 = *(_BYTE *)(a1 + 232) != 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Recurrent");
  v11 = !v10;
  if (!a5)
    v11 = 1;
  if ((v11 & 1) == 0)
    exitFramework(34);
  v12 = a5 != 0;
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
  __p = 0;
  v53 = 0uLL;
  i2s(&v50);
  v13 = std::string::insert(&v50, 0, "RNN Forward W_i[");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v51, "] W:");
  v16 = (void *)v15->__r_.__value_.__r.__words[0];
  v54[0] = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
  __p = v16;
  *(_QWORD *)&v53 = v54[0];
  *(_QWORD *)((char *)&v53 + 7) = *(_QWORD *)((char *)v54 + 7);
  HIBYTE(v53) = v17;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v53 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  MMatrix<float>::print(*(float ***)(a1 + 376), p_p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  i2s(&v50);
  v19 = std::string::insert(&v50, 0, "RNN Forward R_i[");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v51, "] R:");
  v22 = (void *)v21->__r_.__value_.__r.__words[0];
  v54[0] = v21->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
  __p = v22;
  *(_QWORD *)&v53 = v54[0];
  *(_QWORD *)((char *)&v53 + 7) = *(_QWORD *)((char *)v54 + 7);
  HIBYTE(v53) = v23;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v24 = *(float ***)(a1 + 384);
  if (v24)
  {
    if (v53 >= 0)
      v25 = (char *)&__p;
    else
      v25 = (char *)__p;
    MMatrix<float>::print(v24, v25, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48));
  }
  v26 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFFu) > v12)
  {
    do
    {
      if (*(_BYTE *)(a1 + 232))
        v27 = v26 + ~v12;
      else
        v27 = v12;
      if (*(_BYTE *)(a1 + 232))
        v28 = 1;
      else
        v28 = -1;
      if (*(_BYTE *)(a1 + 232))
        v29 = v27 >= v26 - 1;
      else
        v29 = v27 < 1;
      v30 = v27;
      bzero(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v27), 4 * *(int *)(a1 + 52));
      v31 = *(_QWORD *)(a1 + 88);
      v32 = *(_DWORD *)(a1 + 44);
      if (v32 >= 1)
      {
        v33 = *(int **)(*a2 + 8 * v27);
        v34 = *(_DWORD **)(v31 + 8 * v27);
        v35 = *(unsigned int *)(a1 + 44);
        do
        {
          v36 = *v33++;
          *v34++ = v36;
          --v35;
        }
        while (v35);
      }
      v37 = v27 + v28;
      if (v47 && !v29)
      {
        v38 = *(unsigned int *)(a1 + 48);
        if ((int)v38 >= 1)
        {
          v39 = *(int **)(*(_QWORD *)(a1 + 112) + 8 * v37);
          v40 = (_DWORD *)(*(_QWORD *)(v31 + 8 * v30) + 4 * v32);
          do
          {
            v41 = *v39++;
            *v40++ = v41;
            --v38;
          }
          while (v38);
        }
      }
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(v31 + 8 * v30) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * v37), "RNN output t-1 : ", *(_DWORD *)(a1 + 48));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 88) + 8 * v30), "RNN input t: ", *(_DWORD *)(a1 + 52));
      MMatrix<float>::print((float **)(a1 + 64), "RNN weights: ", *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
      cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 376), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 88) + 8 * v30), 1, 0.0, *(float **)(a1 + 216), 1);
      VVector<float>::print((float **)(a1 + 216), "RNN tmp #1: ", *(_DWORD *)(a1 + 48));
      if (!v47 && !v29)
        cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 384), *(_DWORD *)(a1 + 48), *(const float **)(*(_QWORD *)(a1 + 112) + 8 * v37), 1, 1.0, *(float **)(a1 + 216), 1);
      v42 = *(_QWORD *)(a1 + 240);
      v43 = *(float32x4_t ***)(a1 + 392);
      v44 = *(_DWORD *)(a1 + 48);
      std::string::basic_string[abi:ne180100]<0>(&v48, "rnn bias ");
      if (v42 && *(_BYTE *)(v42 + 244))
        VVector<float>::add<float>((float32x4_t **)(a1 + 216), v43, v44);
      if (v49 < 0)
        operator delete(v48);
      VVector<float>::print((float **)(a1 + 216), "RNN tmp #2 after: ", *(_DWORD *)(a1 + 48));
      v45 = *(int *)(a1 + 48);
      *(float *)&v51.__r_.__value_.__l.__data_ = -v9;
      *(float *)&v50.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(a1 + 216), 1, (const float *)&v51, (const float *)&v50, *(float **)(a1 + 216), 1, v45);
      VVector<float>::print((float **)(a1 + 216), "RNN tmp #3: ", *(_DWORD *)(a1 + 48));
      memmove(*(void **)(*(_QWORD *)(a1 + 184) + 8 * v30), *(const void **)(a1 + 216), 4 * *(int *)(a1 + 48));
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 112) + 8 * v30), *(float **)(a1 + 216), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * v30), "RNN out: ", *(_DWORD *)(a1 + 48));
      ++v12;
    }
    while (v12 != v26);
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
}

void sub_19155FA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

char *RecurrentLayer<float>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 368) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 376) = result + 64;
  return result;
}

uint64_t RecurrentLayer<float>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  const float **v5;
  const float **v6;
  vDSP_Length v7;
  float __B;

  if (*(_DWORD *)(a1 + 368))
    exitFramework(1);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  v7 = *(int *)(a1 + 56);
  __B = a3;
  vDSP_vsma(v6[10], 1, &__B, *(const float **)(a1 + 64), 1, *(float **)(a1 + 64), 1, v7);
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
}

uint64_t RecurrentLayer<float>::computeError(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;

  if (a4 >= 1)
  {
    v5 = *a5;
    v6 = *(_QWORD *)(result + 112);
    v7 = *a2;
    v8 = *a3;
    v9 = a4;
    v10 = *(unsigned int *)(result + 48);
    do
    {
      if ((int)v10 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v13 = (v9 - 1);
        v14 = *(float **)(v6 + 8 * v13);
        v15 = 1.1755e-38;
        do
        {
          if (v14[v12] > v15)
          {
            v11 = v12;
            v15 = v14[v12];
          }
          ++v12;
        }
        while (v10 != v12);
        v16 = 0;
        v17 = 0;
        v18 = *(float **)(v7 + 8 * v13);
        v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            v16 = v17;
            v19 = v18[v17];
          }
          ++v17;
        }
        while (v10 != v17);
        if (v11 == v16)
        {
          v10 = v10;
        }
        else
        {
          *a5 = ++v5;
          v10 = *(unsigned int *)(result + 48);
        }
        if ((int)v10 >= 1)
        {
          v20 = *(float **)(v8 + 8 * v13);
          v21 = v10;
          do
          {
            v22 = *v18++;
            v23 = v22;
            v24 = *v14++;
            *v20++ = v23 - v24;
            --v21;
          }
          while (v21);
        }
      }
    }
    while (v9-- > 1);
  }
  return result;
}

float RecurrentLayer<float>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = 0;
  v4 = *(unsigned int *)(a1 + 48);
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 112);
  v7 = a3;
  v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v12 = 1.1755e-38;
      do
      {
        v11 = *(_QWORD *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          v9 = v10;
          v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    v13 = *(float *)(*(_QWORD *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10)
      v14 = 99.0;
    else
      v14 = -log2f(v13);
    v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

void RecurrentLayer<float>::~RecurrentLayer(uint64_t a1)
{
  RecurrentLayer<float>::~RecurrentLayer(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t RecurrentLayer<float>::outputDeltas(uint64_t a1)
{
  return a1 + 160;
}

float RecurrentLayer<float>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void RecurrentLayer<float>::init(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  _BOOL4 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  void *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  std::string v148;
  void *__p[2];
  int64_t v150;

  v6 = *(_QWORD *)(a1 + 240);
  if (v6)
    v7 = !*(_BYTE *)(v6 + 20) && *(_DWORD *)(v6 + 40) == 1 && *(_DWORD *)(v6 + 44) == 1;
  else
    v7 = 1;
  if (*(_BYTE *)(a1 + 42))
  {
    v8 = 2;
    v9 = 2;
  }
  else
  {
    v8 = 2 * (*(_BYTE *)(a1 + 232) != 0);
    v9 = 2 * *(unsigned __int8 *)(a1 + 232);
  }
  v10 = *(unsigned int *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v11;
  if (v7)
  {
    v11 += v10;
    *(_DWORD *)(a1 + 52) = v11;
  }
  *(_DWORD *)(a1 + 56) = v10 * v11;
  v12 = (void *)operator new[]();
  v13 = v12;
  if ((int)v10 >= 1)
    bzero(v12, 4 * v10);
  *(_QWORD *)(a1 + 216) = v13;
  v15 = *(_QWORD **)(a1 + 256);
  v14 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(_QWORD *)(a1 + 248);
    v18 = ((uint64_t)v15 - v17) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      goto LABEL_181;
    v19 = v14 - v17;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v21);
    else
      v22 = 0;
    v23 = (_QWORD *)(v21 + 8 * v18);
    v24 = v21 + 8 * v22;
    *v23 = v13;
    v16 = v23 + 1;
    v26 = *(char **)(a1 + 248);
    v25 = *(char **)(a1 + 256);
    if (v25 != v26)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = *(char **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 248) = v23;
    *(_QWORD *)(a1 + 256) = v16;
    *(_QWORD *)(a1 + 264) = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = v13;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 256) = v16;
  if (!*(_DWORD *)(a1 + 368))
  {
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    v33 = *(_QWORD *)(a1 + 240);
    if (v33 && (v34 = *(_DWORD *)(v33 + 40), v34 >= 1))
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v33 + 8 * v8 + 112);
      *(_QWORD *)(a1 + 376) = a1 + 64;
      if (v34 == 2)
      {
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(v33 + 8 * (v8 | 1) + 112);
        *(_QWORD *)(a1 + 384) = a1 + 72;
      }
      if (*(_BYTE *)(v33 + 244))
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(v33 + 8 * v9 + 248);
        *(_QWORD *)(a1 + 392) = a1 + 224;
      }
    }
    else if (*(_BYTE *)(a1 + 61))
    {
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
    else
    {
      MMatrix<float>::MMatrix(__p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), a3);
      v41 = __p[0];
      *(void **)(a1 + 64) = __p[0];
      v43 = *(_QWORD **)(a1 + 280);
      v42 = *(_QWORD *)(a1 + 288);
      if ((unint64_t)v43 >= v42)
      {
        v137 = *(_QWORD *)(a1 + 272);
        v138 = ((uint64_t)v43 - v137) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_181;
        v139 = v42 - v137;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v141);
        else
          v142 = 0;
        v143 = (_QWORD *)(v141 + 8 * v138);
        v144 = v141 + 8 * v142;
        *v143 = v41;
        v44 = v143 + 1;
        v146 = *(char **)(a1 + 272);
        v145 = *(char **)(a1 + 280);
        if (v145 != v146)
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v143 = v147;
          }
          while (v145 != v146);
          v145 = *(char **)(a1 + 272);
        }
        *(_QWORD *)(a1 + 272) = v143;
        *(_QWORD *)(a1 + 280) = v44;
        *(_QWORD *)(a1 + 288) = v144;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v43 = v41;
        v44 = v43 + 1;
      }
      *(_QWORD *)(a1 + 280) = v44;
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
  }
  if (*(_BYTE *)(a1 + 60))
    goto LABEL_59;
  v28 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48);
  v29 = (void *)operator new[]();
  bzero(v29, 4 * v28);
  *(_QWORD *)(a1 + 80) = v29;
  v31 = *(_QWORD **)(a1 + 256);
  v30 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v31 >= v30)
  {
    v35 = *(_QWORD *)(a1 + 248);
    v36 = ((uint64_t)v31 - v35) >> 3;
    if (!((unint64_t)(v36 + 1) >> 61))
    {
      v37 = v30 - v35;
      v38 = v37 >> 2;
      if (v37 >> 2 <= (unint64_t)(v36 + 1))
        v38 = v36 + 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
        v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v39);
      else
        v40 = 0;
      v45 = (_QWORD *)(v39 + 8 * v36);
      v46 = v39 + 8 * v40;
      *v45 = v29;
      v32 = v45 + 1;
      v48 = *(char **)(a1 + 248);
      v47 = *(char **)(a1 + 256);
      if (v47 != v48)
      {
        do
        {
          v49 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *--v45 = v49;
        }
        while (v47 != v48);
        v47 = *(char **)(a1 + 248);
      }
      *(_QWORD *)(a1 + 248) = v45;
      *(_QWORD *)(a1 + 256) = v32;
      *(_QWORD *)(a1 + 264) = v46;
      if (v47)
        operator delete(v47);
      goto LABEL_58;
    }
LABEL_181:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  *v31 = v29;
  v32 = v31 + 1;
LABEL_58:
  *(_QWORD *)(a1 + 256) = v32;
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(&v148, " constructt W=");
  v50 = *(char *)(a2 + 23);
  if (v50 >= 0)
    v51 = (const std::string::value_type *)a2;
  else
    v51 = *(const std::string::value_type **)a2;
  if (v50 >= 0)
    v52 = *(unsigned __int8 *)(a2 + 23);
  else
    v52 = *(_QWORD *)(a2 + 8);
  v53 = std::string::insert(&v148, 0, v51, v52);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v150 = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if (v150 >= 0)
    v55 = (char *)__p;
  else
    v55 = (char *)__p[0];
  MMatrix<float>::print((float **)(a1 + 64), v55, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
  if (SHIBYTE(v150) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 136), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 160), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 184), maxFeatureVectors);
  if (maxFeatureVectors >= 1)
  {
    v56 = 0;
    do
    {
      v57 = *(unsigned int *)(a1 + 52);
      v58 = (void *)operator new[]();
      v59 = v58;
      if ((int)v57 >= 1)
        bzero(v58, 4 * v57);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v56) = v59;
      v61 = *(_QWORD **)(a1 + 256);
      v60 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v61 >= v60)
      {
        v63 = *(_QWORD *)(a1 + 248);
        v64 = ((uint64_t)v61 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61)
          goto LABEL_181;
        v65 = v60 - v63;
        v66 = v65 >> 2;
        if (v65 >> 2 <= (unint64_t)(v64 + 1))
          v66 = v64 + 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
        else
          v68 = 0;
        v69 = (_QWORD *)(v67 + 8 * v64);
        *v69 = v59;
        v62 = v69 + 1;
        v71 = *(char **)(a1 + 248);
        v70 = *(char **)(a1 + 256);
        if (v70 != v71)
        {
          do
          {
            v72 = *((_QWORD *)v70 - 1);
            v70 -= 8;
            *--v69 = v72;
          }
          while (v70 != v71);
          v70 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v69;
        *(_QWORD *)(a1 + 256) = v62;
        *(_QWORD *)(a1 + 264) = v67 + 8 * v68;
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v61 = v59;
        v62 = v61 + 1;
      }
      *(_QWORD *)(a1 + 256) = v62;
      v73 = *(unsigned int *)(a1 + 52);
      v74 = (void *)operator new[]();
      v75 = v74;
      if ((int)v73 >= 1)
        bzero(v74, 4 * v73);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v56) = v75;
      v77 = *(_QWORD **)(a1 + 256);
      v76 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v77 >= v76)
      {
        v79 = *(_QWORD *)(a1 + 248);
        v80 = ((uint64_t)v77 - v79) >> 3;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_181;
        v81 = v76 - v79;
        v82 = v81 >> 2;
        if (v81 >> 2 <= (unint64_t)(v80 + 1))
          v82 = v80 + 1;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
          v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v83);
        else
          v84 = 0;
        v85 = (_QWORD *)(v83 + 8 * v80);
        *v85 = v75;
        v78 = v85 + 1;
        v87 = *(char **)(a1 + 248);
        v86 = *(char **)(a1 + 256);
        if (v86 != v87)
        {
          do
          {
            v88 = *((_QWORD *)v86 - 1);
            v86 -= 8;
            *--v85 = v88;
          }
          while (v86 != v87);
          v86 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v85;
        *(_QWORD *)(a1 + 256) = v78;
        *(_QWORD *)(a1 + 264) = v83 + 8 * v84;
        if (v86)
          operator delete(v86);
      }
      else
      {
        *v77 = v75;
        v78 = v77 + 1;
      }
      *(_QWORD *)(a1 + 256) = v78;
      v89 = *(unsigned int *)(a1 + 48);
      v90 = (void *)operator new[]();
      v91 = v90;
      if ((int)v89 >= 1)
        bzero(v90, 4 * v89);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v56) = v91;
      v93 = *(_QWORD **)(a1 + 256);
      v92 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v93 >= v92)
      {
        v95 = *(_QWORD *)(a1 + 248);
        v96 = ((uint64_t)v93 - v95) >> 3;
        if ((unint64_t)(v96 + 1) >> 61)
          goto LABEL_181;
        v97 = v92 - v95;
        v98 = v97 >> 2;
        if (v97 >> 2 <= (unint64_t)(v96 + 1))
          v98 = v96 + 1;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
          v99 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v99 = v98;
        if (v99)
          v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v99);
        else
          v100 = 0;
        v101 = (_QWORD *)(v99 + 8 * v96);
        *v101 = v91;
        v94 = v101 + 1;
        v103 = *(char **)(a1 + 248);
        v102 = *(char **)(a1 + 256);
        if (v102 != v103)
        {
          do
          {
            v104 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *--v101 = v104;
          }
          while (v102 != v103);
          v102 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v101;
        *(_QWORD *)(a1 + 256) = v94;
        *(_QWORD *)(a1 + 264) = v99 + 8 * v100;
        if (v102)
          operator delete(v102);
      }
      else
      {
        *v93 = v91;
        v94 = v93 + 1;
      }
      *(_QWORD *)(a1 + 256) = v94;
      v105 = *(unsigned int *)(a1 + 48);
      v106 = (void *)operator new[]();
      v107 = v106;
      if ((int)v105 >= 1)
        bzero(v106, 4 * v105);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v56) = v107;
      v109 = *(_QWORD **)(a1 + 256);
      v108 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v109 >= v108)
      {
        v111 = *(_QWORD *)(a1 + 248);
        v112 = ((uint64_t)v109 - v111) >> 3;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_181;
        v113 = v108 - v111;
        v114 = v113 >> 2;
        if (v113 >> 2 <= (unint64_t)(v112 + 1))
          v114 = v112 + 1;
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
          v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v115);
        else
          v116 = 0;
        v117 = (_QWORD *)(v115 + 8 * v112);
        *v117 = v107;
        v110 = v117 + 1;
        v119 = *(char **)(a1 + 248);
        v118 = *(char **)(a1 + 256);
        if (v118 != v119)
        {
          do
          {
            v120 = *((_QWORD *)v118 - 1);
            v118 -= 8;
            *--v117 = v120;
          }
          while (v118 != v119);
          v118 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v117;
        *(_QWORD *)(a1 + 256) = v110;
        *(_QWORD *)(a1 + 264) = v115 + 8 * v116;
        if (v118)
          operator delete(v118);
      }
      else
      {
        *v109 = v107;
        v110 = v109 + 1;
      }
      *(_QWORD *)(a1 + 256) = v110;
      v121 = *(unsigned int *)(a1 + 48);
      v122 = (void *)operator new[]();
      v123 = v122;
      if ((int)v121 >= 1)
        bzero(v122, 4 * v121);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v56) = v123;
      v125 = *(_QWORD **)(a1 + 256);
      v124 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v125 >= v124)
      {
        v127 = *(_QWORD *)(a1 + 248);
        v128 = ((uint64_t)v125 - v127) >> 3;
        if ((unint64_t)(v128 + 1) >> 61)
          goto LABEL_181;
        v129 = v124 - v127;
        v130 = v129 >> 2;
        if (v129 >> 2 <= (unint64_t)(v128 + 1))
          v130 = v128 + 1;
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
          v131 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v131 = v130;
        if (v131)
          v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v131);
        else
          v132 = 0;
        v133 = (_QWORD *)(v131 + 8 * v128);
        *v133 = v123;
        v126 = v133 + 1;
        v135 = *(char **)(a1 + 248);
        v134 = *(char **)(a1 + 256);
        if (v134 != v135)
        {
          do
          {
            v136 = *((_QWORD *)v134 - 1);
            v134 -= 8;
            *--v133 = v136;
          }
          while (v134 != v135);
          v134 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v133;
        *(_QWORD *)(a1 + 256) = v126;
        *(_QWORD *)(a1 + 264) = v131 + 8 * v132;
        if (v134)
          operator delete(v134);
      }
      else
      {
        *v125 = v123;
        v126 = v125 + 1;
      }
      *(_QWORD *)(a1 + 256) = v126;
      ++v56;
    }
    while (v56 < maxFeatureVectors);
  }
}

void sub_1915607B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<float>::~RecurrentLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = off_1E2D4DA80;
  RecurrentLayer<float>::cleanupAllBuffers(a1);
  *(_QWORD *)(a1 + 296) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 304));
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(_QWORD *)(a1 + 256) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 184);
  if (v4)
  {
    *(_QWORD *)(a1 + 192) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 160);
  if (v5)
  {
    *(_QWORD *)(a1 + 168) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 136);
  if (v6)
  {
    *(_QWORD *)(a1 + 144) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 112);
  if (v7)
  {
    *(_QWORD *)(a1 + 120) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 88);
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    operator delete(v8);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t Stacked::isFirstLayer(Stacked *this)
{
  return (****((uint64_t (*****)(_QWORD))this + 6))(**((_QWORD **)this + 6));
}

uint64_t Stacked::setFirstLayerFlag(Stacked *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 6) + 8))(**((_QWORD **)this + 6));
}

uint64_t Stacked::targets(Stacked *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) - 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 7) - 8));
}

uint64_t Stacked::inputs(Stacked *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 6) + 24))(**((_QWORD **)this + 6));
}

uint64_t Stacked::outputs(Stacked *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) - 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 7) - 8));
}

uint64_t Stacked::deltas(Stacked *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) - 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 7) - 8));
}

uint64_t Stacked::inputDeltas(Stacked *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) - 8) + 48))(*(_QWORD *)(*((_QWORD *)this + 7) - 8));
}

uint64_t Stacked::weightsAreNaN(Stacked *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 7) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *((_QWORD *)this + 6);
  }
  while (v3 < (*((_QWORD *)this + 7) - v1) >> 3);
  return result;
}

uint64_t Stacked::read(uint64_t this, ReadOnlyFile *a2, const SentenceFileHeader *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v4)
  {
    v8 = this;
    v9 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, ReadOnlyFile *, const SentenceFileHeader *, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 48);
    }
    while (v9 < (*(_QWORD *)(v8 + 56) - v4) >> 3);
  }
  return this;
}

uint64_t Stacked::write(uint64_t this, __sFILE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v5)
  {
    v10 = this;
    v11 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, __sFILE *, int *, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 48);
    }
    while (v11 < (*(_QWORD *)(v10 + 56) - v5) >> 3);
  }
  return this;
}

uint64_t Stacked::subtractModels(uint64_t this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v3)
  {
    v6 = this;
    v7 = 0;
    do
    {
      if (lpsrc)
      else
        v8 = 0;
      this = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * v7) + 80))(*(_QWORD *)(v3 + 8 * v7), *(_QWORD *)(v8[6] + 8 * v7), *(_QWORD *)(v9[6] + 8 * v7));
      ++v7;
      v3 = *(_QWORD *)(v6 + 48);
    }
    while (v7 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
  }
  return this;
}

uint64_t Stacked::compareModels(uint64_t this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v3)
  {
    v6 = this;
    v7 = 0;
    do
    {
      if (lpsrc)
      else
        v8 = 0;
      this = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * v7) + 88))(*(_QWORD *)(v3 + 8 * v7), *(_QWORD *)(v8[6] + 8 * v7), *(_QWORD *)(v9[6] + 8 * v7));
      ++v7;
      v3 = *(_QWORD *)(v6 + 48);
    }
    while (v7 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
  }
  return this;
}

uint64_t Stacked::addGradient(uint64_t this, const NeuralNetwork *lpsrc)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * v5) + 96))(*(_QWORD *)(v2 + 8 * v5), *(_QWORD *)(v6[6] + 8 * v5));
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::applyGradient(uint64_t this, const NeuralNetwork *lpsrc)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * v5) + 104))(*(_QWORD *)(v2 + 8 * v5), *(_QWORD *)(v6[6] + 8 * v5));
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::clipModel(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::normalizeModel(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::allocInitialState(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 128))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t Stacked::saveState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 136))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 48);
    }
    while (v9 < (*(_QWORD *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t Stacked::restoreState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 144))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 48);
    }
    while (v9 < (*(_QWORD *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t Stacked::clearState(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v3)
  {
    v6 = result;
    v7 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 152))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 48);
    }
    while (v7 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
  }
  return result;
}

uint64_t Stacked::resetForNewBatch(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::getWeightMatrices(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 168))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t Stacked::setWeightMatrices(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 176))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t Stacked::setSpecialBidir(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 184))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::unsetSpecialBidir(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 192))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::allocAllBuffers(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 200))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::cleanupAllBuffers(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 208))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::ninputs(Stacked *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 6) + 264))(**((_QWORD **)this + 6));
}

uint64_t Stacked::noutputs(Stacked *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) - 8) + 272))(*(_QWORD *)(*((_QWORD *)this + 7) - 8));
}

uint64_t Stacked::setPredictionMode(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::update(uint64_t this, float a2, float a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(this + 56) != v3)
  {
    v6 = this;
    v7 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, float, float))(**(_QWORD **)(v3 + 8 * v7) + 288))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 48);
    }
    while (v7 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
  }
  return this;
}

uint64_t Stacked::backward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (*(_QWORD *)(result + 56) - *(_QWORD *)(result + 48)) >> 3;
  v6 = (v5 - 1);
  if ((int)v5 - 1 >= 0)
  {
    v11 = result;
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v11 + 48);
      if (v12)
      {
        v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 8 * v6 + 8) + 48))(*(_QWORD *)(v13 + 8 * v6 + 8));
        v13 = *(_QWORD *)(v11 + 48);
      }
      else
      {
        v14 = a4;
      }
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v13 + 8 * v6)
                                                                                     + 296))(*(_QWORD *)(v13 + 8 * v6), a2, a3, v14, a5);
      ++v12;
    }
    while (v6-- > 0);
  }
  return result;
}

uint64_t Stacked::forward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v7 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v7)
  {
    v14 = result;
    v15 = 0;
    do
    {
      if (v15)
      {
        v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8 * v15 - 8) + 32))(*(_QWORD *)(v7 + 8 * v15 - 8));
        v7 = *(_QWORD *)(v14 + 48);
      }
      else
      {
        v16 = a2;
      }
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v7 + 8 * v15) + 304))(*(_QWORD *)(v7 + 8 * v15), v16, a3, a4, a5, a6, a7);
      ++v15;
      v7 = *(_QWORD *)(v14 + 48);
    }
    while (v15 < (*(_QWORD *)(v14 + 56) - v7) >> 3);
  }
  return result;
}

uint64_t Stacked::reverseForward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v6)
  {
    v12 = result;
    v13 = 0;
    do
    {
      if (v13)
      {
        v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v13 - 8) + 32))(*(_QWORD *)(v6 + 8 * v13 - 8));
        v6 = *(_QWORD *)(v12 + 48);
      }
      else
      {
        v14 = a2;
      }
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v6 + 8 * v13)
                                                                                              + 312))(*(_QWORD *)(v6 + 8 * v13), v14, a3, a4, a5, a6);
      ++v13;
      v6 = *(_QWORD *)(v12 + 48);
    }
    while (v13 < (*(_QWORD *)(v12 + 56) - v6) >> 3);
  }
  return result;
}

uint64_t Stacked::reverseBackward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (*(_QWORD *)(result + 56) - *(_QWORD *)(result + 48)) >> 3;
  v6 = (v5 - 1);
  if ((int)v5 - 1 >= 0)
  {
    v11 = result;
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v11 + 48);
      if (v12)
      {
        v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 8 * v6 + 8) + 48))(*(_QWORD *)(v13 + 8 * v6 + 8));
        v13 = *(_QWORD *)(v11 + 48);
      }
      else
      {
        v14 = a4;
      }
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v13 + 8 * v6)
                                                                                     + 320))(*(_QWORD *)(v13 + 8 * v6), a2, a3, v14, a5);
      ++v12;
    }
    while (v6-- > 0);
  }
  return result;
}

void *Stacked::setMaster(Stacked *this, NeuralNetwork *lpsrc)
{
  void *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!result)
    __cxa_bad_cast();
  v4 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 7) != v4)
  {
    v5 = (uint64_t)result;
    v6 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v6) + 328))(*(_QWORD *)(v4 + 8 * v6), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v6));
      ++v6;
      v4 = *((_QWORD *)this + 6);
    }
    while (v6 < (*((_QWORD *)this + 7) - v4) >> 3);
  }
  return result;
}

void *Stacked::updateFrom(Stacked *this, NeuralNetwork *lpsrc, float a3, float a4, uint64_t a5)
{
  void *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (!result)
    __cxa_bad_cast();
  v11 = (uint64_t)result;
  if (*((float *)this + 8) != a3)
    *((float *)this + 8) = a3;
  if (*((float *)lpsrc + 8) != a3)
    *((float *)lpsrc + 8) = a3;
  v12 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 7) != v12)
  {
    v13 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, float, float))(**(_QWORD **)(v12 + 8 * v13)
                                                                                        + 336))(*(_QWORD *)(v12 + 8 * v13), *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v13), a5, a3, a4);
      ++v13;
      v12 = *((_QWORD *)this + 6);
    }
    while (v13 < (*((_QWORD *)this + 7) - v12) >> 3);
  }
  return result;
}

uint64_t Stacked::computeError(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 344))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

uint64_t Stacked::log2Probability(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 352))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

void Stacked::~Stacked(Stacked *this)
{
  Stacked::~Stacked(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  void *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E2D58B10;
  v4 = (char *)this + 48;
  v2 = (void *)*((_QWORD *)this + 6);
  v3 = (void *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
    if (v3)
    {
LABEL_7:
      *((_QWORD *)this + 7) = v2;
      operator delete(v2);
    }
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)v2 + v5);
      if (v6)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v6 + 368))(*((_QWORD *)v2 + v5));
        v2 = (void *)*((_QWORD *)this + 6);
        v3 = (void *)*((_QWORD *)this + 7);
      }
      ++v5;
    }
    while (v5 < ((_BYTE *)v3 - (_BYTE *)v2) >> 3);
    if (v2)
      goto LABEL_7;
  }
  *(_QWORD *)this = off_1E2D4D730;
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
}

uint64_t Reverse::isFirstLayer(Reverse *this)
{
  return (***((uint64_t (****)(_QWORD))this + 6))(*((_QWORD *)this + 6));
}

uint64_t Reverse::setFirstLayerFlag(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 8))(*((_QWORD *)this + 6));
}

uint64_t Reverse::targets(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
}

uint64_t Reverse::inputs(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
}

uint64_t Reverse::outputs(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
}

uint64_t Reverse::deltas(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6));
}

uint64_t Reverse::inputDeltas(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 48))(*((_QWORD *)this + 6));
}

uint64_t Reverse::weightsAreNaN(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6));
}

uint64_t Reverse::read(Reverse *this, ReadOnlyFile *a2, const SentenceFileHeader *a3)
{
  return (*(uint64_t (**)(_QWORD, ReadOnlyFile *, const SentenceFileHeader *))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6), a2, a3);
}

uint64_t Reverse::write(Reverse *this, __sFILE *a2, int *a3)
{
  return (*(uint64_t (**)(_QWORD, __sFILE *, int *))(**((_QWORD **)this + 6) + 72))(*((_QWORD *)this + 6), a2, a3);
}

uint64_t Reverse::subtractModels(Reverse *this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  if (lpsrc)
  else
    v5 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 6) + 80))(*((_QWORD *)this + 6), v5[6], v6[6]);
}

uint64_t Reverse::compareModels(Reverse *this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  if (lpsrc)
  else
    v5 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 6) + 88))(*((_QWORD *)this + 6), v5[6], v6[6]);
}

uint64_t Reverse::addGradient(Reverse *this, const NeuralNetwork *lpsrc)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 96))(*((_QWORD *)this + 6), v3);
}

uint64_t Reverse::applyGradient(Reverse *this, const NeuralNetwork *lpsrc)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 104))(*((_QWORD *)this + 6), v3);
}

uint64_t Reverse::clipModel(Reverse *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 6) + 112))(*((_QWORD *)this + 6), a2);
}

uint64_t Reverse::normalizeModel(Reverse *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 6) + 120))(*((_QWORD *)this + 6), a2);
}

uint64_t Reverse::allocInitialState(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 128))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::saveState(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::restoreState(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 144))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::clearState(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 152))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::resetForNewBatch(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 160))(*((_QWORD *)this + 6));
}

uint64_t Reverse::getWeightMatrices(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 168))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::setWeightMatrices(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 176))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::setSpecialBidir(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 184))(*((_QWORD *)this + 6));
}

uint64_t Reverse::unsetSpecialBidir(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 192))(*((_QWORD *)this + 6));
}

uint64_t Reverse::allocAllBuffers(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 200))(*((_QWORD *)this + 6));
}

uint64_t Reverse::cleanupAllBuffers(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 208))(*((_QWORD *)this + 6));
}

uint64_t Reverse::ninputs(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 264))(*((_QWORD *)this + 6));
}

uint64_t Reverse::noutputs(Reverse *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 272))(*((_QWORD *)this + 6));
}

uint64_t Reverse::update(Reverse *this, float a2, float a3)
{
  return (*(uint64_t (**)(_QWORD, float, float))(**((_QWORD **)this + 6) + 288))(*((_QWORD *)this + 6), a2, a3);
}

uint64_t Reverse::backward(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 320))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::forward(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 312))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::setMaster(Reverse *this, NeuralNetwork *lpsrc)
{
  _QWORD *v3;

  if (!v3)
    __cxa_bad_cast();
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 328))(*((_QWORD *)this + 6), v3[6]);
}

uint64_t Reverse::updateFrom(Reverse *this, NeuralNetwork *lpsrc, float a3, float a4, uint64_t a5)
{
  _QWORD *v9;

  if (!v9)
    __cxa_bad_cast();
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, float, float))(**((_QWORD **)this + 6) + 336))(*((_QWORD *)this + 6), v9[6], a5, a3, a4);
}

uint64_t Reverse::computeError(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 344))(*(_QWORD *)(a1 + 48));
}

uint64_t Reverse::log2Probability(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 352))(*(_QWORD *)(a1 + 48));
}

void Reverse::~Reverse(Reverse *this)
{
  Reverse::~Reverse(this);
  JUMPOUT(0x19401CD90);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2D58490;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2);
  *(_QWORD *)this = off_1E2D4D730;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void LSTM<float>::init(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  BOOL v130;
  _BOOL4 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  unint64_t v329;
  char *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  unint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  unint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  unint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  unint64_t v359;
  char *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  void *v365;
  _QWORD *v366;
  unint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  unint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  void *v382;
  _QWORD *v383;
  unint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  unint64_t v393;
  char *v394;
  char *v395;
  uint64_t v396;
  int v397;
  void *v398;
  _QWORD *v399;
  unint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  unint64_t v409;
  char *v410;
  char *v411;
  uint64_t v412;
  unsigned int v413;
  int v414;
  void *v415;
  _QWORD *v416;
  unint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  unint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  int v430;
  void *v431;
  _QWORD *v432;
  unint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  unint64_t v442;
  char *v443;
  char *v444;
  uint64_t v445;
  int v446;
  void *v447;
  _QWORD *v448;
  unint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  unint64_t v458;
  char *v459;
  char *v460;
  uint64_t v461;
  int v462;
  void *v463;
  _QWORD *v464;
  unint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  unint64_t v474;
  char *v475;
  char *v476;
  uint64_t v477;
  unsigned int v478;
  void *v479;
  _QWORD *v480;
  unint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  _QWORD *v489;
  unint64_t v490;
  char *v491;
  char *v492;
  uint64_t v493;
  unsigned int v494;
  void *v495;
  _QWORD *v496;
  unint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  unint64_t v506;
  char *v507;
  char *v508;
  uint64_t v509;
  unsigned int v510;
  void *v511;
  _QWORD *v512;
  unint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  unint64_t v522;
  char *v523;
  char *v524;
  uint64_t v525;
  unsigned int v526;
  void *v527;
  _QWORD *v528;
  unint64_t v529;
  _QWORD *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  unint64_t v538;
  char *v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  void *v543;
  void *v544;
  _QWORD *v545;
  unint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  _QWORD *v554;
  unint64_t v555;
  char *v556;
  char *v557;
  uint64_t v558;
  uint64_t v559;
  void *v560;
  void *v561;
  _QWORD *v562;
  unint64_t v563;
  _QWORD *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  _QWORD *v571;
  unint64_t v572;
  char *v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  void *v577;
  void *v578;
  _QWORD *v579;
  unint64_t v580;
  _QWORD *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  _QWORD *v588;
  unint64_t v589;
  char *v590;
  char *v591;
  uint64_t v592;
  uint64_t i;
  uint64_t v594;
  void *v595;
  void *v596;
  _QWORD *v597;
  unint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  _QWORD *v606;
  char *v607;
  char *v608;
  uint64_t v609;
  int v610;
  void *v611;
  _QWORD *v612;
  unint64_t v613;
  _QWORD *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  _QWORD *v621;
  char *v622;
  char *v623;
  uint64_t v624;
  uint64_t j;
  uint64_t v626;
  void *v627;
  void *v628;
  _QWORD *v629;
  unint64_t v630;
  _QWORD *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  _QWORD *v638;
  char *v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  void *v643;
  void *v644;
  _QWORD *v645;
  unint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  _QWORD *v654;
  char *v655;
  char *v656;
  uint64_t v657;
  uint64_t v658;
  void *v659;
  void *v660;
  _QWORD *v661;
  unint64_t v662;
  _QWORD *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  _QWORD *v670;
  char *v671;
  char *v672;
  uint64_t v673;
  uint64_t v674;
  void *v675;
  void *v676;
  _QWORD *v677;
  unint64_t v678;
  _QWORD *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  _QWORD *v686;
  char *v687;
  char *v688;
  uint64_t v689;
  uint64_t v690;
  void *v691;
  void *v692;
  _QWORD *v693;
  unint64_t v694;
  _QWORD *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  _QWORD *v702;
  char *v703;
  char *v704;
  uint64_t v705;
  uint64_t v706;
  void *v707;
  void *v708;
  _QWORD *v709;
  unint64_t v710;
  _QWORD *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  _QWORD *v718;
  char *v719;
  char *v720;
  uint64_t v721;
  uint64_t v722;
  void *v723;
  void *v724;
  _QWORD *v725;
  unint64_t v726;
  _QWORD *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  _QWORD *v734;
  char *v735;
  char *v736;
  uint64_t v737;
  uint64_t v738;
  void *v739;
  void *v740;
  _QWORD *v741;
  unint64_t v742;
  _QWORD *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  _QWORD *v750;
  char *v751;
  char *v752;
  uint64_t v753;
  int v754;
  void *v755;
  _QWORD *v756;
  unint64_t v757;
  _QWORD *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  _QWORD *v765;
  char *v766;
  char *v767;
  uint64_t v768;
  int v769;
  void *v770;
  _QWORD *v771;
  unint64_t v772;
  _QWORD *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  uint64_t v779;
  _QWORD *v780;
  char *v781;
  char *v782;
  uint64_t v783;
  int v784;
  void *v785;
  _QWORD *v786;
  unint64_t v787;
  _QWORD *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  uint64_t v794;
  _QWORD *v795;
  char *v796;
  char *v797;
  uint64_t v798;
  int v799;
  void *v800;
  _QWORD *v801;
  unint64_t v802;
  _QWORD *v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  uint64_t v809;
  _QWORD *v810;
  char *v811;
  char *v812;
  uint64_t v813;
  int v814;
  void *v815;
  _QWORD *v816;
  unint64_t v817;
  _QWORD *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  unint64_t v823;
  uint64_t v824;
  _QWORD *v825;
  char *v826;
  char *v827;
  uint64_t v828;
  int v829;
  void *v830;
  _QWORD *v831;
  unint64_t v832;
  _QWORD *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  unint64_t v838;
  uint64_t v839;
  _QWORD *v840;
  char *v841;
  char *v842;
  uint64_t v843;
  int v844;
  void *v845;
  _QWORD *v846;
  unint64_t v847;
  _QWORD *v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  unint64_t v853;
  uint64_t v854;
  _QWORD *v855;
  char *v856;
  char *v857;
  uint64_t v858;
  int v859;
  void *v860;
  _QWORD *v861;
  unint64_t v862;
  _QWORD *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  unint64_t v868;
  uint64_t v869;
  _QWORD *v870;
  char *v871;
  char *v872;
  uint64_t v873;
  uint64_t v874;
  std::vector<int>::size_type v875;
  uint64_t v876;
  void *v877;
  void *v878;
  _QWORD *v879;
  unint64_t v880;
  _QWORD *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  uint64_t v887;
  _QWORD *v888;
  char *v889;
  char *v890;
  uint64_t v891;
  uint64_t v892;
  void *v893;
  void *v894;
  _QWORD *v895;
  unint64_t v896;
  _QWORD *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  uint64_t v903;
  _QWORD *v904;
  char *v905;
  char *v906;
  uint64_t v907;
  int v908;
  void *v909;
  _QWORD *v910;
  unint64_t v911;
  _QWORD *v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  unint64_t v917;
  uint64_t v918;
  _QWORD *v919;
  char *v920;
  char *v921;
  uint64_t v922;
  int v923;
  void *v924;
  _QWORD *v925;
  unint64_t v926;
  _QWORD *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  _QWORD *v934;
  char *v935;
  char *v936;
  uint64_t v937;
  uint64_t v938;
  void *v939;
  void *v940;
  _QWORD *v941;
  unint64_t v942;
  _QWORD *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  _QWORD *v950;
  char *v951;
  char *v952;
  uint64_t v953;
  uint64_t v954;
  void *v955;
  void *v956;
  _QWORD *v957;
  unint64_t v958;
  _QWORD *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  unint64_t v964;
  uint64_t v965;
  _QWORD *v966;
  char *v967;
  char *v968;
  uint64_t v969;
  uint64_t v970;
  void *v971;
  void *v972;
  _QWORD *v973;
  unint64_t v974;
  _QWORD *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  _QWORD *v982;
  char *v983;
  char *v984;
  uint64_t v985;
  uint64_t v986;
  void *v987;
  void *v988;
  _QWORD *v989;
  unint64_t v990;
  _QWORD *v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  unint64_t v996;
  uint64_t v997;
  _QWORD *v998;
  char *v999;
  char *v1000;
  uint64_t v1001;
  uint64_t v1002;
  void *v1003;
  void *v1004;
  _QWORD *v1005;
  unint64_t v1006;
  _QWORD *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  _QWORD *v1014;
  char *v1015;
  char *v1016;
  uint64_t v1017;
  uint64_t v1018;
  void *v1019;
  void *v1020;
  _QWORD *v1021;
  unint64_t v1022;
  _QWORD *v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  uint64_t v1029;
  _QWORD *v1030;
  char *v1031;
  char *v1032;
  uint64_t v1033;
  uint64_t v1034;
  void *v1035;
  void *v1036;
  _QWORD *v1037;
  unint64_t v1038;
  _QWORD *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  _QWORD *v1046;
  char *v1047;
  char *v1048;
  uint64_t v1049;
  __int128 v1050[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1640) = v4;
  v5 = *(_QWORD **)(a1 + 2632);
  v6 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(a1 + 2624);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_1172;
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = v4;
    v7 = v14 + 1;
    v16 = *(char **)(a1 + 2632);
    v17 = *(char **)(a1 + 2624);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v14;
    *(_QWORD *)(a1 + 2632) = v7;
    *(_QWORD *)(a1 + 2640) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = v4;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v7;
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  v21 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  *(_QWORD *)(a1 + 1648) = v21;
  v22 = *(_QWORD **)(a1 + 2632);
  v23 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v22 >= v23)
  {
    v25 = *(_QWORD *)(a1 + 2624);
    v26 = ((uint64_t)v22 - v25) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      goto LABEL_1172;
    v27 = v23 - v25;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    else
      v30 = 0;
    v31 = (_QWORD *)(v29 + 8 * v26);
    v32 = v29 + 8 * v30;
    *v31 = v21;
    v24 = v31 + 1;
    v33 = *(char **)(a1 + 2632);
    v34 = *(char **)(a1 + 2624);
    if (v33 != v34)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
      v33 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v31;
    *(_QWORD *)(a1 + 2632) = v24;
    *(_QWORD *)(a1 + 2640) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v22 = v21;
    v24 = v22 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v24;
  v36 = *(unsigned int *)(a1 + 52);
  v37 = (void *)operator new[]();
  v38 = v37;
  if ((int)v36 >= 1)
    bzero(v37, 4 * v36);
  *(_QWORD *)(a1 + 1656) = v38;
  v39 = *(_QWORD **)(a1 + 2632);
  v40 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v39 >= v40)
  {
    v42 = *(_QWORD *)(a1 + 2624);
    v43 = ((uint64_t)v39 - v42) >> 3;
    if ((unint64_t)(v43 + 1) >> 61)
      goto LABEL_1172;
    v44 = v40 - v42;
    v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1))
      v45 = v43 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v46);
    else
      v47 = 0;
    v48 = (_QWORD *)(v46 + 8 * v43);
    v49 = v46 + 8 * v47;
    *v48 = v38;
    v41 = v48 + 1;
    v50 = *(char **)(a1 + 2632);
    v51 = *(char **)(a1 + 2624);
    if (v50 != v51)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v52;
      }
      while (v50 != v51);
      v50 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v48;
    *(_QWORD *)(a1 + 2632) = v41;
    *(_QWORD *)(a1 + 2640) = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v39 = v38;
    v41 = v39 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v41;
  v53 = *(unsigned int *)(a1 + 52);
  v54 = (void *)operator new[]();
  v55 = v54;
  if ((int)v53 >= 1)
    bzero(v54, 4 * v53);
  *(_QWORD *)(a1 + 1664) = v55;
  v56 = *(_QWORD **)(a1 + 2632);
  v57 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v56 >= v57)
  {
    v59 = *(_QWORD *)(a1 + 2624);
    v60 = ((uint64_t)v56 - v59) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_1172;
    v61 = v57 - v59;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
      v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
    else
      v64 = 0;
    v65 = (_QWORD *)(v63 + 8 * v60);
    v66 = v63 + 8 * v64;
    *v65 = v55;
    v58 = v65 + 1;
    v67 = *(char **)(a1 + 2632);
    v68 = *(char **)(a1 + 2624);
    if (v67 != v68)
    {
      do
      {
        v69 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *--v65 = v69;
      }
      while (v67 != v68);
      v67 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v65;
    *(_QWORD *)(a1 + 2632) = v58;
    *(_QWORD *)(a1 + 2640) = v66;
    if (v67)
      operator delete(v67);
  }
  else
  {
    *v56 = v55;
    v58 = v56 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v58;
  v70 = *(unsigned int *)(a1 + 52);
  v71 = (void *)operator new[]();
  v72 = v71;
  if ((int)v70 >= 1)
    bzero(v71, 4 * v70);
  *(_QWORD *)(a1 + 1672) = v72;
  v73 = *(_QWORD **)(a1 + 2632);
  v74 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v73 >= v74)
  {
    v76 = *(_QWORD *)(a1 + 2624);
    v77 = ((uint64_t)v73 - v76) >> 3;
    if ((unint64_t)(v77 + 1) >> 61)
      goto LABEL_1172;
    v78 = v74 - v76;
    v79 = v78 >> 2;
    if (v78 >> 2 <= (unint64_t)(v77 + 1))
      v79 = v77 + 1;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v80 = v79;
    if (v80)
      v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v80);
    else
      v81 = 0;
    v82 = (_QWORD *)(v80 + 8 * v77);
    v83 = v80 + 8 * v81;
    *v82 = v72;
    v75 = v82 + 1;
    v84 = *(char **)(a1 + 2632);
    v85 = *(char **)(a1 + 2624);
    if (v84 != v85)
    {
      do
      {
        v86 = *((_QWORD *)v84 - 1);
        v84 -= 8;
        *--v82 = v86;
      }
      while (v84 != v85);
      v84 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v82;
    *(_QWORD *)(a1 + 2632) = v75;
    *(_QWORD *)(a1 + 2640) = v83;
    if (v84)
      operator delete(v84);
  }
  else
  {
    *v73 = v72;
    v75 = v73 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v75;
  v87 = *(unsigned int *)(a1 + 52);
  v88 = (void *)operator new[]();
  v89 = v88;
  if ((int)v87 >= 1)
    bzero(v88, 4 * v87);
  *(_QWORD *)(a1 + 1680) = v89;
  v90 = *(_QWORD **)(a1 + 2632);
  v91 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v90 >= v91)
  {
    v93 = *(_QWORD *)(a1 + 2624);
    v94 = ((uint64_t)v90 - v93) >> 3;
    if ((unint64_t)(v94 + 1) >> 61)
      goto LABEL_1172;
    v95 = v91 - v93;
    v96 = v95 >> 2;
    if (v95 >> 2 <= (unint64_t)(v94 + 1))
      v96 = v94 + 1;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
      v97 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v97 = v96;
    if (v97)
      v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v97);
    else
      v98 = 0;
    v99 = (_QWORD *)(v97 + 8 * v94);
    v100 = v97 + 8 * v98;
    *v99 = v89;
    v92 = v99 + 1;
    v101 = *(char **)(a1 + 2632);
    v102 = *(char **)(a1 + 2624);
    if (v101 != v102)
    {
      do
      {
        v103 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *--v99 = v103;
      }
      while (v101 != v102);
      v101 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v99;
    *(_QWORD *)(a1 + 2632) = v92;
    *(_QWORD *)(a1 + 2640) = v100;
    if (v101)
      operator delete(v101);
  }
  else
  {
    *v90 = v89;
    v92 = v90 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v92;
  v104 = *(unsigned int *)(a1 + 52);
  v105 = (void *)operator new[]();
  v106 = v105;
  if ((int)v104 >= 1)
    bzero(v105, 4 * v104);
  *(_QWORD *)(a1 + 1688) = v106;
  v107 = *(_QWORD **)(a1 + 2632);
  v108 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v107 >= v108)
  {
    v110 = *(_QWORD *)(a1 + 2624);
    v111 = ((uint64_t)v107 - v110) >> 3;
    if ((unint64_t)(v111 + 1) >> 61)
      goto LABEL_1172;
    v112 = v108 - v110;
    v113 = v112 >> 2;
    if (v112 >> 2 <= (unint64_t)(v111 + 1))
      v113 = v111 + 1;
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
      v114 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v114 = v113;
    if (v114)
      v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114);
    else
      v115 = 0;
    v116 = (_QWORD *)(v114 + 8 * v111);
    v117 = v114 + 8 * v115;
    *v116 = v106;
    v109 = v116 + 1;
    v118 = *(char **)(a1 + 2632);
    v119 = *(char **)(a1 + 2624);
    if (v118 != v119)
    {
      do
      {
        v120 = *((_QWORD *)v118 - 1);
        v118 -= 8;
        *--v116 = v120;
      }
      while (v118 != v119);
      v118 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v116;
    *(_QWORD *)(a1 + 2632) = v109;
    *(_QWORD *)(a1 + 2640) = v117;
    if (v118)
      operator delete(v118);
  }
  else
  {
    *v107 = v106;
    v109 = v107 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v109;
  v121 = *(_QWORD *)(a1 + 2680);
  if (v121)
  {
    v122 = *(_DWORD *)(v121 + 40) / 2;
    v123 = 4 * *(unsigned __int8 *)(v121 + 244);
    if (*(_BYTE *)(v121 + 520))
      v124 = 3;
    else
      v124 = 0;
  }
  else
  {
    v123 = 0;
    v124 = 0;
    v122 = 8;
  }
  v125 = *(unsigned __int8 *)(a1 + 42);
  if (*(_BYTE *)(a1 + 42))
  {
    if (*(_BYTE *)(a1 + 2672))
      v126 = v122;
    else
      v126 = 0;
    if (*(_BYTE *)(a1 + 2672))
      v127 = v123;
    else
      v127 = 0;
    if (*(_BYTE *)(a1 + 2672))
      v128 = v124;
    else
      v128 = 0;
  }
  else
  {
    v127 = 0;
    v126 = 0;
    v128 = 0;
  }
  if (*(int *)(a1 + 56) < 1)
  {
    v129 = 0;
  }
  else
  {
    v129 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v125 = *(unsigned __int8 *)(a1 + 42);
  }
  v130 = v125 == 0;
  v131 = v125 != 0;
  if (v130)
    v132 = maxFeatureVectors;
  else
    v132 = 2;
  if ((v131 & v129) != 0)
    v133 = 2;
  else
    v133 = maxFeatureVectors;
  if (!*(_DWORD *)(a1 + 2496))
  {
    v134 = *(_QWORD *)(a1 + 2680);
    if (v134 && *(int *)(v134 + 40) >= 1)
    {
      v135 = (_QWORD *)(v134 + 8 * v126);
      *(_QWORD *)(a1 + 232) = v135[14];
      *(_QWORD *)(a1 + 240) = v135[15];
      *(_QWORD *)(a1 + 256) = v135[16];
      *(_QWORD *)(a1 + 248) = v135[17];
      *(_QWORD *)(a1 + 264) = v135[18];
      *(_QWORD *)(a1 + 272) = v135[19];
      *(_QWORD *)(a1 + 288) = v135[20];
      *(_QWORD *)(a1 + 280) = v135[21];
    }
    else if (!*(_BYTE *)(a1 + 1697))
    {
      MMatrix<float>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v136 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 232) = *(_QWORD *)&v1050[0];
      v137 = *(_QWORD **)(a1 + 2656);
      v138 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v137 >= v138)
      {
        v140 = *(_QWORD *)(a1 + 2648);
        v141 = ((uint64_t)v137 - v140) >> 3;
        if ((unint64_t)(v141 + 1) >> 61)
          goto LABEL_1172;
        v142 = v138 - v140;
        v143 = v142 >> 2;
        if (v142 >> 2 <= (unint64_t)(v141 + 1))
          v143 = v141 + 1;
        if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
          v144 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v144 = v143;
        if (v144)
          v144 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v144);
        else
          v145 = 0;
        v146 = (_QWORD *)(v144 + 8 * v141);
        v147 = v144 + 8 * v145;
        *v146 = v136;
        v139 = v146 + 1;
        v148 = *(char **)(a1 + 2656);
        v149 = *(char **)(a1 + 2648);
        if (v148 != v149)
        {
          do
          {
            v150 = *((_QWORD *)v148 - 1);
            v148 -= 8;
            *--v146 = v150;
          }
          while (v148 != v149);
          v148 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v146;
        *(_QWORD *)(a1 + 2656) = v139;
        *(_QWORD *)(a1 + 2664) = v147;
        if (v148)
          operator delete(v148);
      }
      else
      {
        *v137 = v136;
        v139 = v137 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v139;
      MMatrix<float>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v151 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 240) = *(_QWORD *)&v1050[0];
      v152 = *(_QWORD **)(a1 + 2656);
      v153 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v152 >= v153)
      {
        v155 = *(_QWORD *)(a1 + 2648);
        v156 = ((uint64_t)v152 - v155) >> 3;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_1172;
        v157 = v153 - v155;
        v158 = v157 >> 2;
        if (v157 >> 2 <= (unint64_t)(v156 + 1))
          v158 = v156 + 1;
        if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
          v159 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v159);
        else
          v160 = 0;
        v161 = (_QWORD *)(v159 + 8 * v156);
        v162 = v159 + 8 * v160;
        *v161 = v151;
        v154 = v161 + 1;
        v163 = *(char **)(a1 + 2656);
        v164 = *(char **)(a1 + 2648);
        if (v163 != v164)
        {
          do
          {
            v165 = *((_QWORD *)v163 - 1);
            v163 -= 8;
            *--v161 = v165;
          }
          while (v163 != v164);
          v163 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v161;
        *(_QWORD *)(a1 + 2656) = v154;
        *(_QWORD *)(a1 + 2664) = v162;
        if (v163)
          operator delete(v163);
      }
      else
      {
        *v152 = v151;
        v154 = v152 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v154;
      MMatrix<float>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v166 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 248) = *(_QWORD *)&v1050[0];
      v167 = *(_QWORD **)(a1 + 2656);
      v168 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v167 >= v168)
      {
        v170 = *(_QWORD *)(a1 + 2648);
        v171 = ((uint64_t)v167 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_1172;
        v172 = v168 - v170;
        v173 = v172 >> 2;
        if (v172 >> 2 <= (unint64_t)(v171 + 1))
          v173 = v171 + 1;
        if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
          v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
        else
          v175 = 0;
        v176 = (_QWORD *)(v174 + 8 * v171);
        v177 = v174 + 8 * v175;
        *v176 = v166;
        v169 = v176 + 1;
        v178 = *(char **)(a1 + 2656);
        v179 = *(char **)(a1 + 2648);
        if (v178 != v179)
        {
          do
          {
            v180 = *((_QWORD *)v178 - 1);
            v178 -= 8;
            *--v176 = v180;
          }
          while (v178 != v179);
          v178 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v176;
        *(_QWORD *)(a1 + 2656) = v169;
        *(_QWORD *)(a1 + 2664) = v177;
        if (v178)
          operator delete(v178);
      }
      else
      {
        *v167 = v166;
        v169 = v167 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v169;
      MMatrix<float>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v181 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 256) = *(_QWORD *)&v1050[0];
      v182 = *(_QWORD **)(a1 + 2656);
      v183 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v182 >= v183)
      {
        v185 = *(_QWORD *)(a1 + 2648);
        v186 = ((uint64_t)v182 - v185) >> 3;
        if ((unint64_t)(v186 + 1) >> 61)
          goto LABEL_1172;
        v187 = v183 - v185;
        v188 = v187 >> 2;
        if (v187 >> 2 <= (unint64_t)(v186 + 1))
          v188 = v186 + 1;
        if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8)
          v189 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v189 = v188;
        if (v189)
          v189 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v189);
        else
          v190 = 0;
        v191 = (_QWORD *)(v189 + 8 * v186);
        v192 = v189 + 8 * v190;
        *v191 = v181;
        v184 = v191 + 1;
        v193 = *(char **)(a1 + 2656);
        v194 = *(char **)(a1 + 2648);
        if (v193 != v194)
        {
          do
          {
            v195 = *((_QWORD *)v193 - 1);
            v193 -= 8;
            *--v191 = v195;
          }
          while (v193 != v194);
          v193 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v191;
        *(_QWORD *)(a1 + 2656) = v184;
        *(_QWORD *)(a1 + 2664) = v192;
        if (v193)
          operator delete(v193);
      }
      else
      {
        *v182 = v181;
        v184 = v182 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v184;
      MMatrix<float>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v196 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 264) = *(_QWORD *)&v1050[0];
      v197 = *(_QWORD **)(a1 + 2656);
      v198 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v197 >= v198)
      {
        v200 = *(_QWORD *)(a1 + 2648);
        v201 = ((uint64_t)v197 - v200) >> 3;
        if ((unint64_t)(v201 + 1) >> 61)
          goto LABEL_1172;
        v202 = v198 - v200;
        v203 = v202 >> 2;
        if (v202 >> 2 <= (unint64_t)(v201 + 1))
          v203 = v201 + 1;
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
          v204 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v204 = v203;
        if (v204)
          v204 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v204);
        else
          v205 = 0;
        v206 = (_QWORD *)(v204 + 8 * v201);
        v207 = v204 + 8 * v205;
        *v206 = v196;
        v199 = v206 + 1;
        v208 = *(char **)(a1 + 2656);
        v209 = *(char **)(a1 + 2648);
        if (v208 != v209)
        {
          do
          {
            v210 = *((_QWORD *)v208 - 1);
            v208 -= 8;
            *--v206 = v210;
          }
          while (v208 != v209);
          v208 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v206;
        *(_QWORD *)(a1 + 2656) = v199;
        *(_QWORD *)(a1 + 2664) = v207;
        if (v208)
          operator delete(v208);
      }
      else
      {
        *v197 = v196;
        v199 = v197 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v199;
      MMatrix<float>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v211 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 272) = *(_QWORD *)&v1050[0];
      v212 = *(_QWORD **)(a1 + 2656);
      v213 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v212 >= v213)
      {
        v215 = *(_QWORD *)(a1 + 2648);
        v216 = ((uint64_t)v212 - v215) >> 3;
        if ((unint64_t)(v216 + 1) >> 61)
          goto LABEL_1172;
        v217 = v213 - v215;
        v218 = v217 >> 2;
        if (v217 >> 2 <= (unint64_t)(v216 + 1))
          v218 = v216 + 1;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          v219 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v219 = v218;
        if (v219)
          v219 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v219);
        else
          v220 = 0;
        v221 = (_QWORD *)(v219 + 8 * v216);
        v222 = v219 + 8 * v220;
        *v221 = v211;
        v214 = v221 + 1;
        v223 = *(char **)(a1 + 2656);
        v224 = *(char **)(a1 + 2648);
        if (v223 != v224)
        {
          do
          {
            v225 = *((_QWORD *)v223 - 1);
            v223 -= 8;
            *--v221 = v225;
          }
          while (v223 != v224);
          v223 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v221;
        *(_QWORD *)(a1 + 2656) = v214;
        *(_QWORD *)(a1 + 2664) = v222;
        if (v223)
          operator delete(v223);
      }
      else
      {
        *v212 = v211;
        v214 = v212 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v214;
      MMatrix<float>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v226 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 280) = *(_QWORD *)&v1050[0];
      v227 = *(_QWORD **)(a1 + 2656);
      v228 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v227 >= v228)
      {
        v230 = *(_QWORD *)(a1 + 2648);
        v231 = ((uint64_t)v227 - v230) >> 3;
        if ((unint64_t)(v231 + 1) >> 61)
          goto LABEL_1172;
        v232 = v228 - v230;
        v233 = v232 >> 2;
        if (v232 >> 2 <= (unint64_t)(v231 + 1))
          v233 = v231 + 1;
        if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
          v234 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v234 = v233;
        if (v234)
          v234 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v234);
        else
          v235 = 0;
        v236 = (_QWORD *)(v234 + 8 * v231);
        v237 = v234 + 8 * v235;
        *v236 = v226;
        v229 = v236 + 1;
        v238 = *(char **)(a1 + 2656);
        v239 = *(char **)(a1 + 2648);
        if (v238 != v239)
        {
          do
          {
            v240 = *((_QWORD *)v238 - 1);
            v238 -= 8;
            *--v236 = v240;
          }
          while (v238 != v239);
          v238 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v236;
        *(_QWORD *)(a1 + 2656) = v229;
        *(_QWORD *)(a1 + 2664) = v237;
        if (v238)
          operator delete(v238);
      }
      else
      {
        *v227 = v226;
        v229 = v227 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v229;
      MMatrix<float>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v241 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 288) = *(_QWORD *)&v1050[0];
      v242 = *(_QWORD **)(a1 + 2656);
      v243 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v242 >= v243)
      {
        v245 = *(_QWORD *)(a1 + 2648);
        v246 = ((uint64_t)v242 - v245) >> 3;
        if ((unint64_t)(v246 + 1) >> 61)
          goto LABEL_1172;
        v247 = v243 - v245;
        v248 = v247 >> 2;
        if (v247 >> 2 <= (unint64_t)(v246 + 1))
          v248 = v246 + 1;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
          v249 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v249 = v248;
        if (v249)
          v249 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v249);
        else
          v250 = 0;
        v251 = (_QWORD *)(v249 + 8 * v246);
        v252 = v249 + 8 * v250;
        *v251 = v241;
        v244 = v251 + 1;
        v253 = *(char **)(a1 + 2656);
        v254 = *(char **)(a1 + 2648);
        if (v253 != v254)
        {
          do
          {
            v255 = *((_QWORD *)v253 - 1);
            v253 -= 8;
            *--v251 = v255;
          }
          while (v253 != v254);
          v253 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v251;
        *(_QWORD *)(a1 + 2656) = v244;
        *(_QWORD *)(a1 + 2664) = v252;
        if (v253)
          operator delete(v253);
      }
      else
      {
        *v242 = v241;
        v244 = v242 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v244;
    }
    if (!*(_BYTE *)(a1 + 1697))
    {
      v256 = *(_QWORD *)(a1 + 2680);
      if (v256 && *(_BYTE *)(v256 + 520))
      {
        *(_QWORD *)(a1 + 296) = *(_QWORD *)(v256 + 528 + 8 * v128);
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(v256 + 528 + 8 * (v128 + 1));
        *(_QWORD *)(a1 + 312) = *(_QWORD *)(v256 + 528 + 8 * (v128 + 2));
        goto LABEL_339;
      }
      VVector<float>::VVector(v1050, *(_DWORD *)(a1 + 52), 1);
      v257 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 296) = *(_QWORD *)&v1050[0];
      v258 = *(_QWORD **)(a1 + 2656);
      v259 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v258 >= v259)
      {
        v261 = *(_QWORD *)(a1 + 2648);
        v262 = ((uint64_t)v258 - v261) >> 3;
        if ((unint64_t)(v262 + 1) >> 61)
          goto LABEL_1172;
        v263 = v259 - v261;
        v264 = v263 >> 2;
        if (v263 >> 2 <= (unint64_t)(v262 + 1))
          v264 = v262 + 1;
        if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF8)
          v265 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v265 = v264;
        if (v265)
          v265 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v265);
        else
          v266 = 0;
        v267 = (_QWORD *)(v265 + 8 * v262);
        v268 = v265 + 8 * v266;
        *v267 = v257;
        v260 = v267 + 1;
        v269 = *(char **)(a1 + 2656);
        v270 = *(char **)(a1 + 2648);
        if (v269 != v270)
        {
          do
          {
            v271 = *((_QWORD *)v269 - 1);
            v269 -= 8;
            *--v267 = v271;
          }
          while (v269 != v270);
          v269 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v267;
        *(_QWORD *)(a1 + 2656) = v260;
        *(_QWORD *)(a1 + 2664) = v268;
        if (v269)
          operator delete(v269);
      }
      else
      {
        *v258 = v257;
        v260 = v258 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v260;
      VVector<float>::VVector(v1050, *(_DWORD *)(a1 + 52), 1);
      v272 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 304) = *(_QWORD *)&v1050[0];
      v273 = *(_QWORD **)(a1 + 2656);
      v274 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v273 >= v274)
      {
        v276 = *(_QWORD *)(a1 + 2648);
        v277 = ((uint64_t)v273 - v276) >> 3;
        if ((unint64_t)(v277 + 1) >> 61)
          goto LABEL_1172;
        v278 = v274 - v276;
        v279 = v278 >> 2;
        if (v278 >> 2 <= (unint64_t)(v277 + 1))
          v279 = v277 + 1;
        if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8)
          v280 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v280 = v279;
        if (v280)
          v280 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v280);
        else
          v281 = 0;
        v282 = (_QWORD *)(v280 + 8 * v277);
        v283 = v280 + 8 * v281;
        *v282 = v272;
        v275 = v282 + 1;
        v284 = *(char **)(a1 + 2656);
        v285 = *(char **)(a1 + 2648);
        if (v284 != v285)
        {
          do
          {
            v286 = *((_QWORD *)v284 - 1);
            v284 -= 8;
            *--v282 = v286;
          }
          while (v284 != v285);
          v284 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v282;
        *(_QWORD *)(a1 + 2656) = v275;
        *(_QWORD *)(a1 + 2664) = v283;
        if (v284)
          operator delete(v284);
      }
      else
      {
        *v273 = v272;
        v275 = v273 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v275;
      VVector<float>::VVector(v1050, *(_DWORD *)(a1 + 52), 1);
      v287 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 312) = *(_QWORD *)&v1050[0];
      v288 = *(_QWORD **)(a1 + 2656);
      v289 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v288 >= v289)
      {
        v291 = *(_QWORD *)(a1 + 2648);
        v292 = ((uint64_t)v288 - v291) >> 3;
        if ((unint64_t)(v292 + 1) >> 61)
          goto LABEL_1172;
        v293 = v289 - v291;
        v294 = v293 >> 2;
        if (v293 >> 2 <= (unint64_t)(v292 + 1))
          v294 = v292 + 1;
        if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
          v295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v295 = v294;
        if (v295)
          v295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v295);
        else
          v296 = 0;
        v297 = (_QWORD *)(v295 + 8 * v292);
        v298 = v295 + 8 * v296;
        *v297 = v287;
        v290 = v297 + 1;
        v299 = *(char **)(a1 + 2656);
        v300 = *(char **)(a1 + 2648);
        if (v299 != v300)
        {
          do
          {
            v301 = *((_QWORD *)v299 - 1);
            v299 -= 8;
            *--v297 = v301;
          }
          while (v299 != v300);
          v299 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v297;
        *(_QWORD *)(a1 + 2656) = v290;
        *(_QWORD *)(a1 + 2664) = v298;
        if (v299)
          operator delete(v299);
      }
      else
      {
        *v288 = v287;
        v290 = v288 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v290;
      v256 = *(_QWORD *)(a1 + 2680);
      if (v256)
      {
LABEL_339:
        if (*(_BYTE *)(v256 + 244))
        {
          v302 = v256 + 248;
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(v302 + 8 * v127);
          *(_QWORD *)(a1 + 328) = *(_QWORD *)(v302 + 8 * (v127 + 1));
          *(_QWORD *)(a1 + 336) = *(_QWORD *)(v302 + 8 * (v127 + 2));
          *(_QWORD *)(a1 + 344) = *(_QWORD *)(v302 + 8 * (v127 + 3));
        }
        else
        {
          VVector<float>::VVector(v1050, *(_DWORD *)(a1 + 52), 1);
          v303 = *(_QWORD *)&v1050[0];
          *(_QWORD *)(a1 + 320) = *(_QWORD *)&v1050[0];
          v304 = *(_QWORD **)(a1 + 2656);
          v305 = *(_QWORD *)(a1 + 2664);
          if ((unint64_t)v304 >= v305)
          {
            v307 = *(_QWORD *)(a1 + 2648);
            v308 = ((uint64_t)v304 - v307) >> 3;
            if ((unint64_t)(v308 + 1) >> 61)
              goto LABEL_1172;
            v309 = v305 - v307;
            v310 = v309 >> 2;
            if (v309 >> 2 <= (unint64_t)(v308 + 1))
              v310 = v308 + 1;
            if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFF8)
              v311 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v311 = v310;
            if (v311)
              v311 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v311);
            else
              v312 = 0;
            v313 = (_QWORD *)(v311 + 8 * v308);
            v314 = v311 + 8 * v312;
            *v313 = v303;
            v306 = v313 + 1;
            v315 = *(char **)(a1 + 2656);
            v316 = *(char **)(a1 + 2648);
            if (v315 != v316)
            {
              do
              {
                v317 = *((_QWORD *)v315 - 1);
                v315 -= 8;
                *--v313 = v317;
              }
              while (v315 != v316);
              v315 = *(char **)(a1 + 2648);
            }
            *(_QWORD *)(a1 + 2648) = v313;
            *(_QWORD *)(a1 + 2656) = v306;
            *(_QWORD *)(a1 + 2664) = v314;
            if (v315)
              operator delete(v315);
          }
          else
          {
            *v304 = v303;
            v306 = v304 + 1;
          }
          *(_QWORD *)(a1 + 2656) = v306;
          VVector<float>::VVector(v1050, *(_DWORD *)(a1 + 52), 1);
          v318 = *(_QWORD *)&v1050[0];
          *(_QWORD *)(a1 + 328) = *(_QWORD *)&v1050[0];
          v319 = *(_QWORD **)(a1 + 2656);
          v320 = *(_QWORD *)(a1 + 2664);
          if ((unint64_t)v319 >= v320)
          {
            v322 = *(_QWORD *)(a1 + 2648);
            v323 = ((uint64_t)v319 - v322) >> 3;
            if ((unint64_t)(v323 + 1) >> 61)
              goto LABEL_1172;
            v324 = v320 - v322;
            v325 = v324 >> 2;
            if (v324 >> 2 <= (unint64_t)(v323 + 1))
              v325 = v323 + 1;
            if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF8)
              v326 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v326 = v325;
            if (v326)
              v326 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v326);
            else
              v327 = 0;
            v328 = (_QWORD *)(v326 + 8 * v323);
            v329 = v326 + 8 * v327;
            *v328 = v318;
            v321 = v328 + 1;
            v330 = *(char **)(a1 + 2656);
            v331 = *(char **)(a1 + 2648);
            if (v330 != v331)
            {
              do
              {
                v332 = *((_QWORD *)v330 - 1);
                v330 -= 8;
                *--v328 = v332;
              }
              while (v330 != v331);
              v330 = *(char **)(a1 + 2648);
            }
            *(_QWORD *)(a1 + 2648) = v328;
            *(_QWORD *)(a1 + 2656) = v321;
            *(_QWORD *)(a1 + 2664) = v329;
            if (v330)
              operator delete(v330);
          }
          else
          {
            *v319 = v318;
            v321 = v319 + 1;
          }
          *(_QWORD *)(a1 + 2656) = v321;
          VVector<float>::VVector(v1050, *(_DWORD *)(a1 + 52), 1);
          v333 = *(_QWORD *)&v1050[0];
          *(_QWORD *)(a1 + 336) = *(_QWORD *)&v1050[0];
          v334 = *(_QWORD **)(a1 + 2656);
          v335 = *(_QWORD *)(a1 + 2664);
          if ((unint64_t)v334 >= v335)
          {
            v337 = *(_QWORD *)(a1 + 2648);
            v338 = ((uint64_t)v334 - v337) >> 3;
            if ((unint64_t)(v338 + 1) >> 61)
              goto LABEL_1172;
            v339 = v335 - v337;
            v340 = v339 >> 2;
            if (v339 >> 2 <= (unint64_t)(v338 + 1))
              v340 = v338 + 1;
            if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8)
              v341 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v341 = v340;
            if (v341)
              v341 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v341);
            else
              v342 = 0;
            v343 = (_QWORD *)(v341 + 8 * v338);
            v344 = v341 + 8 * v342;
            *v343 = v333;
            v336 = v343 + 1;
            v345 = *(char **)(a1 + 2656);
            v346 = *(char **)(a1 + 2648);
            if (v345 != v346)
            {
              do
              {
                v347 = *((_QWORD *)v345 - 1);
                v345 -= 8;
                *--v343 = v347;
              }
              while (v345 != v346);
              v345 = *(char **)(a1 + 2648);
            }
            *(_QWORD *)(a1 + 2648) = v343;
            *(_QWORD *)(a1 + 2656) = v336;
            *(_QWORD *)(a1 + 2664) = v344;
            if (v345)
              operator delete(v345);
          }
          else
          {
            *v334 = v333;
            v336 = v334 + 1;
          }
          *(_QWORD *)(a1 + 2656) = v336;
          VVector<float>::VVector(v1050, *(_DWORD *)(a1 + 52), 1);
          v348 = *(_QWORD *)&v1050[0];
          *(_QWORD *)(a1 + 344) = *(_QWORD *)&v1050[0];
          v349 = *(_QWORD **)(a1 + 2656);
          v350 = *(_QWORD *)(a1 + 2664);
          if ((unint64_t)v349 >= v350)
          {
            v352 = *(_QWORD *)(a1 + 2648);
            v353 = ((uint64_t)v349 - v352) >> 3;
            if ((unint64_t)(v353 + 1) >> 61)
              goto LABEL_1172;
            v354 = v350 - v352;
            v355 = v354 >> 2;
            if (v354 >> 2 <= (unint64_t)(v353 + 1))
              v355 = v353 + 1;
            if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFF8)
              v356 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v356 = v355;
            if (v356)
              v356 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v356);
            else
              v357 = 0;
            v358 = (_QWORD *)(v356 + 8 * v353);
            v359 = v356 + 8 * v357;
            *v358 = v348;
            v351 = v358 + 1;
            v360 = *(char **)(a1 + 2656);
            v361 = *(char **)(a1 + 2648);
            if (v360 != v361)
            {
              do
              {
                v362 = *((_QWORD *)v360 - 1);
                v360 -= 8;
                *--v358 = v362;
              }
              while (v360 != v361);
              v360 = *(char **)(a1 + 2648);
            }
            *(_QWORD *)(a1 + 2648) = v358;
            *(_QWORD *)(a1 + 2656) = v351;
            *(_QWORD *)(a1 + 2664) = v359;
            if (v360)
              operator delete(v360);
          }
          else
          {
            *v349 = v348;
            v351 = v349 + 1;
          }
          *(_QWORD *)(a1 + 2656) = v351;
        }
      }
    }
    *(_QWORD *)(a1 + 2504) = a1 + 232;
    *(_QWORD *)(a1 + 2512) = a1 + 240;
    *(_QWORD *)(a1 + 2520) = a1 + 248;
    *(_QWORD *)(a1 + 2528) = a1 + 256;
    *(_QWORD *)(a1 + 2536) = a1 + 264;
    *(_QWORD *)(a1 + 2544) = a1 + 272;
    *(_QWORD *)(a1 + 2552) = a1 + 280;
    *(_QWORD *)(a1 + 2560) = a1 + 288;
    *(_QWORD *)(a1 + 2568) = a1 + 296;
    *(_QWORD *)(a1 + 2576) = a1 + 304;
    *(_QWORD *)(a1 + 2584) = a1 + 312;
    *(_QWORD *)(a1 + 2592) = a1 + 320;
    *(_QWORD *)(a1 + 2600) = a1 + 328;
    *(_QWORD *)(a1 + 2608) = a1 + 336;
    *(_QWORD *)(a1 + 2616) = a1 + 344;
  }
  v363 = *(unsigned int *)(a1 + 52);
  v364 = (void *)operator new[]();
  v365 = v364;
  if ((int)v363 >= 1)
    bzero(v364, 4 * v363);
  *(_QWORD *)(a1 + 760) = v365;
  v366 = *(_QWORD **)(a1 + 2632);
  v367 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v366 >= v367)
  {
    v369 = *(_QWORD *)(a1 + 2624);
    v370 = ((uint64_t)v366 - v369) >> 3;
    if ((unint64_t)(v370 + 1) >> 61)
      goto LABEL_1172;
    v371 = v367 - v369;
    v372 = v371 >> 2;
    if (v371 >> 2 <= (unint64_t)(v370 + 1))
      v372 = v370 + 1;
    if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF8)
      v373 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v373 = v372;
    if (v373)
      v373 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v373);
    else
      v374 = 0;
    v375 = (_QWORD *)(v373 + 8 * v370);
    v376 = v373 + 8 * v374;
    *v375 = v365;
    v368 = v375 + 1;
    v377 = *(char **)(a1 + 2632);
    v378 = *(char **)(a1 + 2624);
    if (v377 != v378)
    {
      do
      {
        v379 = *((_QWORD *)v377 - 1);
        v377 -= 8;
        *--v375 = v379;
      }
      while (v377 != v378);
      v377 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v375;
    *(_QWORD *)(a1 + 2632) = v368;
    *(_QWORD *)(a1 + 2640) = v376;
    if (v377)
      operator delete(v377);
  }
  else
  {
    *v366 = v365;
    v368 = v366 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v368;
  v380 = *(unsigned int *)(a1 + 52);
  v381 = (void *)operator new[]();
  v382 = v381;
  if ((int)v380 >= 1)
    bzero(v381, 4 * v380);
  *(_QWORD *)(a1 + 768) = v382;
  v383 = *(_QWORD **)(a1 + 2632);
  v384 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v383 >= v384)
  {
    v386 = *(_QWORD *)(a1 + 2624);
    v387 = ((uint64_t)v383 - v386) >> 3;
    if ((unint64_t)(v387 + 1) >> 61)
      goto LABEL_1172;
    v388 = v384 - v386;
    v389 = v388 >> 2;
    if (v388 >> 2 <= (unint64_t)(v387 + 1))
      v389 = v387 + 1;
    if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFF8)
      v390 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v390 = v389;
    if (v390)
      v390 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v390);
    else
      v391 = 0;
    v392 = (_QWORD *)(v390 + 8 * v387);
    v393 = v390 + 8 * v391;
    *v392 = v382;
    v385 = v392 + 1;
    v394 = *(char **)(a1 + 2632);
    v395 = *(char **)(a1 + 2624);
    if (v394 != v395)
    {
      do
      {
        v396 = *((_QWORD *)v394 - 1);
        v394 -= 8;
        *--v392 = v396;
      }
      while (v394 != v395);
      v394 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v392;
    *(_QWORD *)(a1 + 2632) = v385;
    *(_QWORD *)(a1 + 2640) = v393;
    if (v394)
      operator delete(v394);
  }
  else
  {
    *v383 = v382;
    v385 = v383 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v385;
  v397 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
  v398 = (void *)operator new[]();
  bzero(v398, 4 * v397);
  *(_QWORD *)(a1 + 752) = v398;
  v399 = *(_QWORD **)(a1 + 2632);
  v400 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v399 >= v400)
  {
    v402 = *(_QWORD *)(a1 + 2624);
    v403 = ((uint64_t)v399 - v402) >> 3;
    if ((unint64_t)(v403 + 1) >> 61)
      goto LABEL_1172;
    v404 = v400 - v402;
    v405 = v404 >> 2;
    if (v404 >> 2 <= (unint64_t)(v403 + 1))
      v405 = v403 + 1;
    if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFF8)
      v406 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v406 = v405;
    if (v406)
      v406 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v406);
    else
      v407 = 0;
    v408 = (_QWORD *)(v406 + 8 * v403);
    v409 = v406 + 8 * v407;
    *v408 = v398;
    v401 = v408 + 1;
    v410 = *(char **)(a1 + 2632);
    v411 = *(char **)(a1 + 2624);
    if (v410 != v411)
    {
      do
      {
        v412 = *((_QWORD *)v410 - 1);
        v410 -= 8;
        *--v408 = v412;
      }
      while (v410 != v411);
      v410 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v408;
    *(_QWORD *)(a1 + 2632) = v401;
    *(_QWORD *)(a1 + 2640) = v409;
    if (v410)
      operator delete(v410);
  }
  else
  {
    *v399 = v398;
    v401 = v399 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v401;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_647;
  if (*(_DWORD *)(a1 + 56))
  {
    v413 = *(unsigned __int8 *)(a1 + 40) + 1;
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v413);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 984), v1050);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1050);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v413);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1104), v1050);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1050);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v413);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1224), v1050);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1050);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v413);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1344), v1050);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1050);
  }
  else
  {
    v414 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v415 = (void *)operator new[]();
    bzero(v415, 4 * v414);
    *(_QWORD *)(a1 + 1464) = v415;
    v416 = *(_QWORD **)(a1 + 2632);
    v417 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v416 >= v417)
    {
      v419 = *(_QWORD *)(a1 + 2624);
      v420 = ((uint64_t)v416 - v419) >> 3;
      if ((unint64_t)(v420 + 1) >> 61)
        goto LABEL_1172;
      v421 = v417 - v419;
      v422 = v421 >> 2;
      if (v421 >> 2 <= (unint64_t)(v420 + 1))
        v422 = v420 + 1;
      if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFF8)
        v423 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v423 = v422;
      if (v423)
        v423 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v423);
      else
        v424 = 0;
      v425 = (_QWORD *)(v423 + 8 * v420);
      v426 = v423 + 8 * v424;
      *v425 = v415;
      v418 = v425 + 1;
      v427 = *(char **)(a1 + 2632);
      v428 = *(char **)(a1 + 2624);
      if (v427 != v428)
      {
        do
        {
          v429 = *((_QWORD *)v427 - 1);
          v427 -= 8;
          *--v425 = v429;
        }
        while (v427 != v428);
        v427 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v425;
      *(_QWORD *)(a1 + 2632) = v418;
      *(_QWORD *)(a1 + 2640) = v426;
      if (v427)
        operator delete(v427);
    }
    else
    {
      *v416 = v415;
      v418 = v416 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v418;
    v430 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v431 = (void *)operator new[]();
    bzero(v431, 4 * v430);
    *(_QWORD *)(a1 + 1472) = v431;
    v432 = *(_QWORD **)(a1 + 2632);
    v433 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v432 >= v433)
    {
      v435 = *(_QWORD *)(a1 + 2624);
      v436 = ((uint64_t)v432 - v435) >> 3;
      if ((unint64_t)(v436 + 1) >> 61)
        goto LABEL_1172;
      v437 = v433 - v435;
      v438 = v437 >> 2;
      if (v437 >> 2 <= (unint64_t)(v436 + 1))
        v438 = v436 + 1;
      if ((unint64_t)v437 >= 0x7FFFFFFFFFFFFFF8)
        v439 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v439 = v438;
      if (v439)
        v439 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v439);
      else
        v440 = 0;
      v441 = (_QWORD *)(v439 + 8 * v436);
      v442 = v439 + 8 * v440;
      *v441 = v431;
      v434 = v441 + 1;
      v443 = *(char **)(a1 + 2632);
      v444 = *(char **)(a1 + 2624);
      if (v443 != v444)
      {
        do
        {
          v445 = *((_QWORD *)v443 - 1);
          v443 -= 8;
          *--v441 = v445;
        }
        while (v443 != v444);
        v443 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v441;
      *(_QWORD *)(a1 + 2632) = v434;
      *(_QWORD *)(a1 + 2640) = v442;
      if (v443)
        operator delete(v443);
    }
    else
    {
      *v432 = v431;
      v434 = v432 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v434;
    v446 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v447 = (void *)operator new[]();
    bzero(v447, 4 * v446);
    *(_QWORD *)(a1 + 1480) = v447;
    v448 = *(_QWORD **)(a1 + 2632);
    v449 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v448 >= v449)
    {
      v451 = *(_QWORD *)(a1 + 2624);
      v452 = ((uint64_t)v448 - v451) >> 3;
      if ((unint64_t)(v452 + 1) >> 61)
        goto LABEL_1172;
      v453 = v449 - v451;
      v454 = v453 >> 2;
      if (v453 >> 2 <= (unint64_t)(v452 + 1))
        v454 = v452 + 1;
      if ((unint64_t)v453 >= 0x7FFFFFFFFFFFFFF8)
        v455 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v455 = v454;
      if (v455)
        v455 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v455);
      else
        v456 = 0;
      v457 = (_QWORD *)(v455 + 8 * v452);
      v458 = v455 + 8 * v456;
      *v457 = v447;
      v450 = v457 + 1;
      v459 = *(char **)(a1 + 2632);
      v460 = *(char **)(a1 + 2624);
      if (v459 != v460)
      {
        do
        {
          v461 = *((_QWORD *)v459 - 1);
          v459 -= 8;
          *--v457 = v461;
        }
        while (v459 != v460);
        v459 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v457;
      *(_QWORD *)(a1 + 2632) = v450;
      *(_QWORD *)(a1 + 2640) = v458;
      if (v459)
        operator delete(v459);
    }
    else
    {
      *v448 = v447;
      v450 = v448 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v450;
    v462 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v463 = (void *)operator new[]();
    bzero(v463, 4 * v462);
    *(_QWORD *)(a1 + 1488) = v463;
    v464 = *(_QWORD **)(a1 + 2632);
    v465 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v464 >= v465)
    {
      v467 = *(_QWORD *)(a1 + 2624);
      v468 = ((uint64_t)v464 - v467) >> 3;
      if ((unint64_t)(v468 + 1) >> 61)
        goto LABEL_1172;
      v469 = v465 - v467;
      v470 = v469 >> 2;
      if (v469 >> 2 <= (unint64_t)(v468 + 1))
        v470 = v468 + 1;
      if ((unint64_t)v469 >= 0x7FFFFFFFFFFFFFF8)
        v471 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v471 = v470;
      if (v471)
        v471 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v471);
      else
        v472 = 0;
      v473 = (_QWORD *)(v471 + 8 * v468);
      v474 = v471 + 8 * v472;
      *v473 = v463;
      v466 = v473 + 1;
      v475 = *(char **)(a1 + 2632);
      v476 = *(char **)(a1 + 2624);
      if (v475 != v476)
      {
        do
        {
          v477 = *((_QWORD *)v475 - 1);
          v475 -= 8;
          *--v473 = v477;
        }
        while (v475 != v476);
        v475 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v473;
      *(_QWORD *)(a1 + 2632) = v466;
      *(_QWORD *)(a1 + 2640) = v474;
      if (v475)
        operator delete(v475);
    }
    else
    {
      *v464 = v463;
      v466 = v464 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v466;
  }
  v478 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v479 = (void *)operator new[]();
  bzero(v479, 4 * v478);
  *(_QWORD *)(a1 + 1496) = v479;
  v480 = *(_QWORD **)(a1 + 2632);
  v481 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v480 >= v481)
  {
    v483 = *(_QWORD *)(a1 + 2624);
    v484 = ((uint64_t)v480 - v483) >> 3;
    if ((unint64_t)(v484 + 1) >> 61)
      goto LABEL_1172;
    v485 = v481 - v483;
    v486 = v485 >> 2;
    if (v485 >> 2 <= (unint64_t)(v484 + 1))
      v486 = v484 + 1;
    if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFF8)
      v487 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v487 = v486;
    if (v487)
      v487 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v487);
    else
      v488 = 0;
    v489 = (_QWORD *)(v487 + 8 * v484);
    v490 = v487 + 8 * v488;
    *v489 = v479;
    v482 = v489 + 1;
    v491 = *(char **)(a1 + 2632);
    v492 = *(char **)(a1 + 2624);
    if (v491 != v492)
    {
      do
      {
        v493 = *((_QWORD *)v491 - 1);
        v491 -= 8;
        *--v489 = v493;
      }
      while (v491 != v492);
      v491 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v489;
    *(_QWORD *)(a1 + 2632) = v482;
    *(_QWORD *)(a1 + 2640) = v490;
    if (v491)
      operator delete(v491);
  }
  else
  {
    *v480 = v479;
    v482 = v480 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v482;
  v494 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v495 = (void *)operator new[]();
  bzero(v495, 4 * v494);
  *(_QWORD *)(a1 + 1504) = v495;
  v496 = *(_QWORD **)(a1 + 2632);
  v497 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v496 >= v497)
  {
    v499 = *(_QWORD *)(a1 + 2624);
    v500 = ((uint64_t)v496 - v499) >> 3;
    if ((unint64_t)(v500 + 1) >> 61)
      goto LABEL_1172;
    v501 = v497 - v499;
    v502 = v501 >> 2;
    if (v501 >> 2 <= (unint64_t)(v500 + 1))
      v502 = v500 + 1;
    if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF8)
      v503 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v503 = v502;
    if (v503)
      v503 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v503);
    else
      v504 = 0;
    v505 = (_QWORD *)(v503 + 8 * v500);
    v506 = v503 + 8 * v504;
    *v505 = v495;
    v498 = v505 + 1;
    v507 = *(char **)(a1 + 2632);
    v508 = *(char **)(a1 + 2624);
    if (v507 != v508)
    {
      do
      {
        v509 = *((_QWORD *)v507 - 1);
        v507 -= 8;
        *--v505 = v509;
      }
      while (v507 != v508);
      v507 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v505;
    *(_QWORD *)(a1 + 2632) = v498;
    *(_QWORD *)(a1 + 2640) = v506;
    if (v507)
      operator delete(v507);
  }
  else
  {
    *v496 = v495;
    v498 = v496 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v498;
  v510 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v511 = (void *)operator new[]();
  bzero(v511, 4 * v510);
  *(_QWORD *)(a1 + 1512) = v511;
  v512 = *(_QWORD **)(a1 + 2632);
  v513 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v512 >= v513)
  {
    v515 = *(_QWORD *)(a1 + 2624);
    v516 = ((uint64_t)v512 - v515) >> 3;
    if ((unint64_t)(v516 + 1) >> 61)
      goto LABEL_1172;
    v517 = v513 - v515;
    v518 = v517 >> 2;
    if (v517 >> 2 <= (unint64_t)(v516 + 1))
      v518 = v516 + 1;
    if ((unint64_t)v517 >= 0x7FFFFFFFFFFFFFF8)
      v519 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v519 = v518;
    if (v519)
      v519 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v519);
    else
      v520 = 0;
    v521 = (_QWORD *)(v519 + 8 * v516);
    v522 = v519 + 8 * v520;
    *v521 = v511;
    v514 = v521 + 1;
    v523 = *(char **)(a1 + 2632);
    v524 = *(char **)(a1 + 2624);
    if (v523 != v524)
    {
      do
      {
        v525 = *((_QWORD *)v523 - 1);
        v523 -= 8;
        *--v521 = v525;
      }
      while (v523 != v524);
      v523 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v521;
    *(_QWORD *)(a1 + 2632) = v514;
    *(_QWORD *)(a1 + 2640) = v522;
    if (v523)
      operator delete(v523);
  }
  else
  {
    *v512 = v511;
    v514 = v512 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v514;
  v526 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v527 = (void *)operator new[]();
  bzero(v527, 4 * v526);
  *(_QWORD *)(a1 + 1520) = v527;
  v528 = *(_QWORD **)(a1 + 2632);
  v529 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v528 >= v529)
  {
    v531 = *(_QWORD *)(a1 + 2624);
    v532 = ((uint64_t)v528 - v531) >> 3;
    if ((unint64_t)(v532 + 1) >> 61)
      goto LABEL_1172;
    v533 = v529 - v531;
    v534 = v533 >> 2;
    if (v533 >> 2 <= (unint64_t)(v532 + 1))
      v534 = v532 + 1;
    if ((unint64_t)v533 >= 0x7FFFFFFFFFFFFFF8)
      v535 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v535 = v534;
    if (v535)
      v535 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v535);
    else
      v536 = 0;
    v537 = (_QWORD *)(v535 + 8 * v532);
    v538 = v535 + 8 * v536;
    *v537 = v527;
    v530 = v537 + 1;
    v539 = *(char **)(a1 + 2632);
    v540 = *(char **)(a1 + 2624);
    if (v539 != v540)
    {
      do
      {
        v541 = *((_QWORD *)v539 - 1);
        v539 -= 8;
        *--v537 = v541;
      }
      while (v539 != v540);
      v539 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v537;
    *(_QWORD *)(a1 + 2632) = v530;
    *(_QWORD *)(a1 + 2640) = v538;
    if (v539)
      operator delete(v539);
  }
  else
  {
    *v528 = v527;
    v530 = v528 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v530;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_647;
  v542 = *(unsigned int *)(a1 + 52);
  v543 = (void *)operator new[]();
  v544 = v543;
  if ((int)v542 >= 1)
    bzero(v543, 4 * v542);
  *(_QWORD *)(a1 + 1528) = v544;
  v545 = *(_QWORD **)(a1 + 2632);
  v546 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v545 >= v546)
  {
    v548 = *(_QWORD *)(a1 + 2624);
    v549 = ((uint64_t)v545 - v548) >> 3;
    if ((unint64_t)(v549 + 1) >> 61)
      goto LABEL_1172;
    v550 = v546 - v548;
    v551 = v550 >> 2;
    if (v550 >> 2 <= (unint64_t)(v549 + 1))
      v551 = v549 + 1;
    if ((unint64_t)v550 >= 0x7FFFFFFFFFFFFFF8)
      v552 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v552 = v551;
    if (v552)
      v552 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v552);
    else
      v553 = 0;
    v554 = (_QWORD *)(v552 + 8 * v549);
    v555 = v552 + 8 * v553;
    *v554 = v544;
    v547 = v554 + 1;
    v556 = *(char **)(a1 + 2632);
    v557 = *(char **)(a1 + 2624);
    if (v556 != v557)
    {
      do
      {
        v558 = *((_QWORD *)v556 - 1);
        v556 -= 8;
        *--v554 = v558;
      }
      while (v556 != v557);
      v556 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v554;
    *(_QWORD *)(a1 + 2632) = v547;
    *(_QWORD *)(a1 + 2640) = v555;
    if (v556)
      operator delete(v556);
  }
  else
  {
    *v545 = v544;
    v547 = v545 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v547;
  v559 = *(unsigned int *)(a1 + 52);
  v560 = (void *)operator new[]();
  v561 = v560;
  if ((int)v559 >= 1)
    bzero(v560, 4 * v559);
  *(_QWORD *)(a1 + 1536) = v561;
  v562 = *(_QWORD **)(a1 + 2632);
  v563 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v562 >= v563)
  {
    v565 = *(_QWORD *)(a1 + 2624);
    v566 = ((uint64_t)v562 - v565) >> 3;
    if ((unint64_t)(v566 + 1) >> 61)
      goto LABEL_1172;
    v567 = v563 - v565;
    v568 = v567 >> 2;
    if (v567 >> 2 <= (unint64_t)(v566 + 1))
      v568 = v566 + 1;
    if ((unint64_t)v567 >= 0x7FFFFFFFFFFFFFF8)
      v569 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v569 = v568;
    if (v569)
      v569 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v569);
    else
      v570 = 0;
    v571 = (_QWORD *)(v569 + 8 * v566);
    v572 = v569 + 8 * v570;
    *v571 = v561;
    v564 = v571 + 1;
    v573 = *(char **)(a1 + 2632);
    v574 = *(char **)(a1 + 2624);
    if (v573 != v574)
    {
      do
      {
        v575 = *((_QWORD *)v573 - 1);
        v573 -= 8;
        *--v571 = v575;
      }
      while (v573 != v574);
      v573 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v571;
    *(_QWORD *)(a1 + 2632) = v564;
    *(_QWORD *)(a1 + 2640) = v572;
    if (v573)
      operator delete(v573);
  }
  else
  {
    *v562 = v561;
    v564 = v562 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v564;
  v576 = *(unsigned int *)(a1 + 52);
  v577 = (void *)operator new[]();
  v578 = v577;
  if ((int)v576 >= 1)
    bzero(v577, 4 * v576);
  *(_QWORD *)(a1 + 1544) = v578;
  v579 = *(_QWORD **)(a1 + 2632);
  v580 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v579 >= v580)
  {
    v582 = *(_QWORD *)(a1 + 2624);
    v583 = ((uint64_t)v579 - v582) >> 3;
    if (!((unint64_t)(v583 + 1) >> 61))
    {
      v584 = v580 - v582;
      v585 = v584 >> 2;
      if (v584 >> 2 <= (unint64_t)(v583 + 1))
        v585 = v583 + 1;
      if ((unint64_t)v584 >= 0x7FFFFFFFFFFFFFF8)
        v586 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v586 = v585;
      if (v586)
        v586 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v586);
      else
        v587 = 0;
      v588 = (_QWORD *)(v586 + 8 * v583);
      v589 = v586 + 8 * v587;
      *v588 = v578;
      v581 = v588 + 1;
      v590 = *(char **)(a1 + 2632);
      v591 = *(char **)(a1 + 2624);
      if (v590 != v591)
      {
        do
        {
          v592 = *((_QWORD *)v590 - 1);
          v590 -= 8;
          *--v588 = v592;
        }
        while (v590 != v591);
        v590 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v588;
      *(_QWORD *)(a1 + 2632) = v581;
      *(_QWORD *)(a1 + 2640) = v589;
      if (v590)
        operator delete(v590);
      goto LABEL_646;
    }
LABEL_1172:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  *v579 = v578;
  v581 = v579 + 1;
LABEL_646:
  *(_QWORD *)(a1 + 2632) = v581;
LABEL_647:
  if (*(_BYTE *)(a1 + 2692))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  }
  std::vector<MMatrix<float>>::resize((char **)(a1 + 184), maxFeatureVectors);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 160), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 64), (int)v133);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 136), (int)v133);
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 208), maxFeatureVectors);
  if (*(_BYTE *)(a1 + 2692))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 640), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 664), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 688), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 712), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 544), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 568), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 592), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 616), (int)v132);
  }
  std::vector<MMatrix<float>>::resize((char **)(a1 + 448), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 472), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 496), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 520), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 352), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 376), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 400), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 424), (int)v132);
  if (!*(_BYTE *)(a1 + 1696))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 960), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 840), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 816), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 912), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 888), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 864), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 936), maxFeatureVectors);
  }
  if ((int)v133 >= 1)
  {
    for (i = 0; i != v133; ++i)
    {
      v594 = *(unsigned int *)(a1 + 48);
      v595 = (void *)operator new[]();
      v596 = v595;
      if ((int)v594 >= 1)
        bzero(v595, 4 * v594);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * i) = v596;
      v597 = *(_QWORD **)(a1 + 2632);
      v598 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v597 >= v598)
      {
        v600 = *(_QWORD *)(a1 + 2624);
        v601 = ((uint64_t)v597 - v600) >> 3;
        if ((unint64_t)(v601 + 1) >> 61)
          goto LABEL_1172;
        v602 = v598 - v600;
        v603 = v602 >> 2;
        if (v602 >> 2 <= (unint64_t)(v601 + 1))
          v603 = v601 + 1;
        if ((unint64_t)v602 >= 0x7FFFFFFFFFFFFFF8)
          v604 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v604 = v603;
        if (v604)
          v604 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v604);
        else
          v605 = 0;
        v606 = (_QWORD *)(v604 + 8 * v601);
        *v606 = v596;
        v599 = v606 + 1;
        v607 = *(char **)(a1 + 2632);
        v608 = *(char **)(a1 + 2624);
        if (v607 != v608)
        {
          do
          {
            v609 = *((_QWORD *)v607 - 1);
            v607 -= 8;
            *--v606 = v609;
          }
          while (v607 != v608);
          v607 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v606;
        *(_QWORD *)(a1 + 2632) = v599;
        *(_QWORD *)(a1 + 2640) = v604 + 8 * v605;
        if (v607)
          operator delete(v607);
      }
      else
      {
        *v597 = v596;
        v599 = v597 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v599;
      v610 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 2688);
      v611 = (void *)operator new[]();
      bzero(v611, 4 * v610);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * i) = v611;
      v612 = *(_QWORD **)(a1 + 2632);
      v613 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v612 >= v613)
      {
        v615 = *(_QWORD *)(a1 + 2624);
        v616 = ((uint64_t)v612 - v615) >> 3;
        if ((unint64_t)(v616 + 1) >> 61)
          goto LABEL_1172;
        v617 = v613 - v615;
        v618 = v617 >> 2;
        if (v617 >> 2 <= (unint64_t)(v616 + 1))
          v618 = v616 + 1;
        if ((unint64_t)v617 >= 0x7FFFFFFFFFFFFFF8)
          v619 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v619 = v618;
        if (v619)
          v619 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v619);
        else
          v620 = 0;
        v621 = (_QWORD *)(v619 + 8 * v616);
        *v621 = v611;
        v614 = v621 + 1;
        v622 = *(char **)(a1 + 2632);
        v623 = *(char **)(a1 + 2624);
        if (v622 != v623)
        {
          do
          {
            v624 = *((_QWORD *)v622 - 1);
            v622 -= 8;
            *--v621 = v624;
          }
          while (v622 != v623);
          v622 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v621;
        *(_QWORD *)(a1 + 2632) = v614;
        *(_QWORD *)(a1 + 2640) = v619 + 8 * v620;
        if (v622)
          operator delete(v622);
      }
      else
      {
        *v612 = v611;
        v614 = v612 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v614;
    }
  }
  if ((int)v132 >= 1)
  {
    for (j = 0; j != v132; ++j)
    {
      if (*(_BYTE *)(a1 + 2692))
      {
        v626 = *(unsigned int *)(a1 + 52);
        v627 = (void *)operator new[]();
        v628 = v627;
        if ((int)v626 >= 1)
          bzero(v627, 4 * v626);
        *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * j) = v628;
        v629 = *(_QWORD **)(a1 + 2632);
        v630 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v629 >= v630)
        {
          v632 = *(_QWORD *)(a1 + 2624);
          v633 = ((uint64_t)v629 - v632) >> 3;
          if ((unint64_t)(v633 + 1) >> 61)
            goto LABEL_1172;
          v634 = v630 - v632;
          v635 = v634 >> 2;
          if (v634 >> 2 <= (unint64_t)(v633 + 1))
            v635 = v633 + 1;
          if ((unint64_t)v634 >= 0x7FFFFFFFFFFFFFF8)
            v636 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v636 = v635;
          if (v636)
            v636 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v636);
          else
            v637 = 0;
          v638 = (_QWORD *)(v636 + 8 * v633);
          *v638 = v628;
          v631 = v638 + 1;
          v639 = *(char **)(a1 + 2632);
          v640 = *(char **)(a1 + 2624);
          if (v639 != v640)
          {
            do
            {
              v641 = *((_QWORD *)v639 - 1);
              v639 -= 8;
              *--v638 = v641;
            }
            while (v639 != v640);
            v639 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v638;
          *(_QWORD *)(a1 + 2632) = v631;
          *(_QWORD *)(a1 + 2640) = v636 + 8 * v637;
          if (v639)
            operator delete(v639);
        }
        else
        {
          *v629 = v628;
          v631 = v629 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v631;
        v642 = *(unsigned int *)(a1 + 52);
        v643 = (void *)operator new[]();
        v644 = v643;
        if ((int)v642 >= 1)
          bzero(v643, 4 * v642);
        *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * j) = v644;
        v645 = *(_QWORD **)(a1 + 2632);
        v646 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v645 >= v646)
        {
          v648 = *(_QWORD *)(a1 + 2624);
          v649 = ((uint64_t)v645 - v648) >> 3;
          if ((unint64_t)(v649 + 1) >> 61)
            goto LABEL_1172;
          v650 = v646 - v648;
          v651 = v650 >> 2;
          if (v650 >> 2 <= (unint64_t)(v649 + 1))
            v651 = v649 + 1;
          if ((unint64_t)v650 >= 0x7FFFFFFFFFFFFFF8)
            v652 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v652 = v651;
          if (v652)
            v652 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v652);
          else
            v653 = 0;
          v654 = (_QWORD *)(v652 + 8 * v649);
          *v654 = v644;
          v647 = v654 + 1;
          v655 = *(char **)(a1 + 2632);
          v656 = *(char **)(a1 + 2624);
          if (v655 != v656)
          {
            do
            {
              v657 = *((_QWORD *)v655 - 1);
              v655 -= 8;
              *--v654 = v657;
            }
            while (v655 != v656);
            v655 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v654;
          *(_QWORD *)(a1 + 2632) = v647;
          *(_QWORD *)(a1 + 2640) = v652 + 8 * v653;
          if (v655)
            operator delete(v655);
        }
        else
        {
          *v645 = v644;
          v647 = v645 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v647;
        v658 = *(unsigned int *)(a1 + 52);
        v659 = (void *)operator new[]();
        v660 = v659;
        if ((int)v658 >= 1)
          bzero(v659, 4 * v658);
        *(_QWORD *)(*(_QWORD *)(a1 + 592) + 8 * j) = v660;
        v661 = *(_QWORD **)(a1 + 2632);
        v662 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v661 >= v662)
        {
          v664 = *(_QWORD *)(a1 + 2624);
          v665 = ((uint64_t)v661 - v664) >> 3;
          if ((unint64_t)(v665 + 1) >> 61)
            goto LABEL_1172;
          v666 = v662 - v664;
          v667 = v666 >> 2;
          if (v666 >> 2 <= (unint64_t)(v665 + 1))
            v667 = v665 + 1;
          if ((unint64_t)v666 >= 0x7FFFFFFFFFFFFFF8)
            v668 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v668 = v667;
          if (v668)
            v668 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v668);
          else
            v669 = 0;
          v670 = (_QWORD *)(v668 + 8 * v665);
          *v670 = v660;
          v663 = v670 + 1;
          v671 = *(char **)(a1 + 2632);
          v672 = *(char **)(a1 + 2624);
          if (v671 != v672)
          {
            do
            {
              v673 = *((_QWORD *)v671 - 1);
              v671 -= 8;
              *--v670 = v673;
            }
            while (v671 != v672);
            v671 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v670;
          *(_QWORD *)(a1 + 2632) = v663;
          *(_QWORD *)(a1 + 2640) = v668 + 8 * v669;
          if (v671)
            operator delete(v671);
        }
        else
        {
          *v661 = v660;
          v663 = v661 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v663;
        v674 = *(unsigned int *)(a1 + 52);
        v675 = (void *)operator new[]();
        v676 = v675;
        if ((int)v674 >= 1)
          bzero(v675, 4 * v674);
        *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * j) = v676;
        v677 = *(_QWORD **)(a1 + 2632);
        v678 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v677 >= v678)
        {
          v680 = *(_QWORD *)(a1 + 2624);
          v681 = ((uint64_t)v677 - v680) >> 3;
          if ((unint64_t)(v681 + 1) >> 61)
            goto LABEL_1172;
          v682 = v678 - v680;
          v683 = v682 >> 2;
          if (v682 >> 2 <= (unint64_t)(v681 + 1))
            v683 = v681 + 1;
          if ((unint64_t)v682 >= 0x7FFFFFFFFFFFFFF8)
            v684 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v684 = v683;
          if (v684)
            v684 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v684);
          else
            v685 = 0;
          v686 = (_QWORD *)(v684 + 8 * v681);
          *v686 = v676;
          v679 = v686 + 1;
          v687 = *(char **)(a1 + 2632);
          v688 = *(char **)(a1 + 2624);
          if (v687 != v688)
          {
            do
            {
              v689 = *((_QWORD *)v687 - 1);
              v687 -= 8;
              *--v686 = v689;
            }
            while (v687 != v688);
            v687 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v686;
          *(_QWORD *)(a1 + 2632) = v679;
          *(_QWORD *)(a1 + 2640) = v684 + 8 * v685;
          if (v687)
            operator delete(v687);
        }
        else
        {
          *v677 = v676;
          v679 = v677 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v679;
        v690 = *(unsigned int *)(a1 + 52);
        v691 = (void *)operator new[]();
        v692 = v691;
        if ((int)v690 >= 1)
          bzero(v691, 4 * v690);
        *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * j) = v692;
        v693 = *(_QWORD **)(a1 + 2632);
        v694 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v693 >= v694)
        {
          v696 = *(_QWORD *)(a1 + 2624);
          v697 = ((uint64_t)v693 - v696) >> 3;
          if ((unint64_t)(v697 + 1) >> 61)
            goto LABEL_1172;
          v698 = v694 - v696;
          v699 = v698 >> 2;
          if (v698 >> 2 <= (unint64_t)(v697 + 1))
            v699 = v697 + 1;
          if ((unint64_t)v698 >= 0x7FFFFFFFFFFFFFF8)
            v700 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v700 = v699;
          if (v700)
            v700 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v700);
          else
            v701 = 0;
          v702 = (_QWORD *)(v700 + 8 * v697);
          *v702 = v692;
          v695 = v702 + 1;
          v703 = *(char **)(a1 + 2632);
          v704 = *(char **)(a1 + 2624);
          if (v703 != v704)
          {
            do
            {
              v705 = *((_QWORD *)v703 - 1);
              v703 -= 8;
              *--v702 = v705;
            }
            while (v703 != v704);
            v703 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v702;
          *(_QWORD *)(a1 + 2632) = v695;
          *(_QWORD *)(a1 + 2640) = v700 + 8 * v701;
          if (v703)
            operator delete(v703);
        }
        else
        {
          *v693 = v692;
          v695 = v693 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v695;
        v706 = *(unsigned int *)(a1 + 52);
        v707 = (void *)operator new[]();
        v708 = v707;
        if ((int)v706 >= 1)
          bzero(v707, 4 * v706);
        *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * j) = v708;
        v709 = *(_QWORD **)(a1 + 2632);
        v710 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v709 >= v710)
        {
          v712 = *(_QWORD *)(a1 + 2624);
          v713 = ((uint64_t)v709 - v712) >> 3;
          if ((unint64_t)(v713 + 1) >> 61)
            goto LABEL_1172;
          v714 = v710 - v712;
          v715 = v714 >> 2;
          if (v714 >> 2 <= (unint64_t)(v713 + 1))
            v715 = v713 + 1;
          if ((unint64_t)v714 >= 0x7FFFFFFFFFFFFFF8)
            v716 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v716 = v715;
          if (v716)
            v716 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v716);
          else
            v717 = 0;
          v718 = (_QWORD *)(v716 + 8 * v713);
          *v718 = v708;
          v711 = v718 + 1;
          v719 = *(char **)(a1 + 2632);
          v720 = *(char **)(a1 + 2624);
          if (v719 != v720)
          {
            do
            {
              v721 = *((_QWORD *)v719 - 1);
              v719 -= 8;
              *--v718 = v721;
            }
            while (v719 != v720);
            v719 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v718;
          *(_QWORD *)(a1 + 2632) = v711;
          *(_QWORD *)(a1 + 2640) = v716 + 8 * v717;
          if (v719)
            operator delete(v719);
        }
        else
        {
          *v709 = v708;
          v711 = v709 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v711;
        v722 = *(unsigned int *)(a1 + 52);
        v723 = (void *)operator new[]();
        v724 = v723;
        if ((int)v722 >= 1)
          bzero(v723, 4 * v722);
        *(_QWORD *)(*(_QWORD *)(a1 + 688) + 8 * j) = v724;
        v725 = *(_QWORD **)(a1 + 2632);
        v726 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v725 >= v726)
        {
          v728 = *(_QWORD *)(a1 + 2624);
          v729 = ((uint64_t)v725 - v728) >> 3;
          if ((unint64_t)(v729 + 1) >> 61)
            goto LABEL_1172;
          v730 = v726 - v728;
          v731 = v730 >> 2;
          if (v730 >> 2 <= (unint64_t)(v729 + 1))
            v731 = v729 + 1;
          if ((unint64_t)v730 >= 0x7FFFFFFFFFFFFFF8)
            v732 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v732 = v731;
          if (v732)
            v732 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v732);
          else
            v733 = 0;
          v734 = (_QWORD *)(v732 + 8 * v729);
          *v734 = v724;
          v727 = v734 + 1;
          v735 = *(char **)(a1 + 2632);
          v736 = *(char **)(a1 + 2624);
          if (v735 != v736)
          {
            do
            {
              v737 = *((_QWORD *)v735 - 1);
              v735 -= 8;
              *--v734 = v737;
            }
            while (v735 != v736);
            v735 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v734;
          *(_QWORD *)(a1 + 2632) = v727;
          *(_QWORD *)(a1 + 2640) = v732 + 8 * v733;
          if (v735)
            operator delete(v735);
        }
        else
        {
          *v725 = v724;
          v727 = v725 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v727;
        v738 = *(unsigned int *)(a1 + 52);
        v739 = (void *)operator new[]();
        v740 = v739;
        if ((int)v738 >= 1)
          bzero(v739, 4 * v738);
        *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * j) = v740;
        v741 = *(_QWORD **)(a1 + 2632);
        v742 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v741 >= v742)
        {
          v744 = *(_QWORD *)(a1 + 2624);
          v745 = ((uint64_t)v741 - v744) >> 3;
          if ((unint64_t)(v745 + 1) >> 61)
            goto LABEL_1172;
          v746 = v742 - v744;
          v747 = v746 >> 2;
          if (v746 >> 2 <= (unint64_t)(v745 + 1))
            v747 = v745 + 1;
          if ((unint64_t)v746 >= 0x7FFFFFFFFFFFFFF8)
            v748 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v748 = v747;
          if (v748)
            v748 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v748);
          else
            v749 = 0;
          v750 = (_QWORD *)(v748 + 8 * v745);
          *v750 = v740;
          v743 = v750 + 1;
          v751 = *(char **)(a1 + 2632);
          v752 = *(char **)(a1 + 2624);
          if (v751 != v752)
          {
            do
            {
              v753 = *((_QWORD *)v751 - 1);
              v751 -= 8;
              *--v750 = v753;
            }
            while (v751 != v752);
            v751 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v750;
          *(_QWORD *)(a1 + 2632) = v743;
          *(_QWORD *)(a1 + 2640) = v748 + 8 * v749;
          if (v751)
            operator delete(v751);
        }
        else
        {
          *v741 = v740;
          v743 = v741 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v743;
      }
      v754 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v755 = (void *)operator new[]();
      bzero(v755, 4 * v754);
      *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * j) = v755;
      v756 = *(_QWORD **)(a1 + 2632);
      v757 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v756 >= v757)
      {
        v759 = *(_QWORD *)(a1 + 2624);
        v760 = ((uint64_t)v756 - v759) >> 3;
        if ((unint64_t)(v760 + 1) >> 61)
          goto LABEL_1172;
        v761 = v757 - v759;
        v762 = v761 >> 2;
        if (v761 >> 2 <= (unint64_t)(v760 + 1))
          v762 = v760 + 1;
        if ((unint64_t)v761 >= 0x7FFFFFFFFFFFFFF8)
          v763 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v763 = v762;
        if (v763)
          v763 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v763);
        else
          v764 = 0;
        v765 = (_QWORD *)(v763 + 8 * v760);
        *v765 = v755;
        v758 = v765 + 1;
        v766 = *(char **)(a1 + 2632);
        v767 = *(char **)(a1 + 2624);
        if (v766 != v767)
        {
          do
          {
            v768 = *((_QWORD *)v766 - 1);
            v766 -= 8;
            *--v765 = v768;
          }
          while (v766 != v767);
          v766 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v765;
        *(_QWORD *)(a1 + 2632) = v758;
        *(_QWORD *)(a1 + 2640) = v763 + 8 * v764;
        if (v766)
          operator delete(v766);
      }
      else
      {
        *v756 = v755;
        v758 = v756 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v758;
      v769 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v770 = (void *)operator new[]();
      bzero(v770, 4 * v769);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * j) = v770;
      v771 = *(_QWORD **)(a1 + 2632);
      v772 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v771 >= v772)
      {
        v774 = *(_QWORD *)(a1 + 2624);
        v775 = ((uint64_t)v771 - v774) >> 3;
        if ((unint64_t)(v775 + 1) >> 61)
          goto LABEL_1172;
        v776 = v772 - v774;
        v777 = v776 >> 2;
        if (v776 >> 2 <= (unint64_t)(v775 + 1))
          v777 = v775 + 1;
        if ((unint64_t)v776 >= 0x7FFFFFFFFFFFFFF8)
          v778 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v778 = v777;
        if (v778)
          v778 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v778);
        else
          v779 = 0;
        v780 = (_QWORD *)(v778 + 8 * v775);
        *v780 = v770;
        v773 = v780 + 1;
        v781 = *(char **)(a1 + 2632);
        v782 = *(char **)(a1 + 2624);
        if (v781 != v782)
        {
          do
          {
            v783 = *((_QWORD *)v781 - 1);
            v781 -= 8;
            *--v780 = v783;
          }
          while (v781 != v782);
          v781 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v780;
        *(_QWORD *)(a1 + 2632) = v773;
        *(_QWORD *)(a1 + 2640) = v778 + 8 * v779;
        if (v781)
          operator delete(v781);
      }
      else
      {
        *v771 = v770;
        v773 = v771 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v773;
      v784 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v785 = (void *)operator new[]();
      bzero(v785, 4 * v784);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * j) = v785;
      v786 = *(_QWORD **)(a1 + 2632);
      v787 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v786 >= v787)
      {
        v789 = *(_QWORD *)(a1 + 2624);
        v790 = ((uint64_t)v786 - v789) >> 3;
        if ((unint64_t)(v790 + 1) >> 61)
          goto LABEL_1172;
        v791 = v787 - v789;
        v792 = v791 >> 2;
        if (v791 >> 2 <= (unint64_t)(v790 + 1))
          v792 = v790 + 1;
        if ((unint64_t)v791 >= 0x7FFFFFFFFFFFFFF8)
          v793 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v793 = v792;
        if (v793)
          v793 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v793);
        else
          v794 = 0;
        v795 = (_QWORD *)(v793 + 8 * v790);
        *v795 = v785;
        v788 = v795 + 1;
        v796 = *(char **)(a1 + 2632);
        v797 = *(char **)(a1 + 2624);
        if (v796 != v797)
        {
          do
          {
            v798 = *((_QWORD *)v796 - 1);
            v796 -= 8;
            *--v795 = v798;
          }
          while (v796 != v797);
          v796 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v795;
        *(_QWORD *)(a1 + 2632) = v788;
        *(_QWORD *)(a1 + 2640) = v793 + 8 * v794;
        if (v796)
          operator delete(v796);
      }
      else
      {
        *v786 = v785;
        v788 = v786 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v788;
      v799 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v800 = (void *)operator new[]();
      bzero(v800, 4 * v799);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * j) = v800;
      v801 = *(_QWORD **)(a1 + 2632);
      v802 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v801 >= v802)
      {
        v804 = *(_QWORD *)(a1 + 2624);
        v805 = ((uint64_t)v801 - v804) >> 3;
        if ((unint64_t)(v805 + 1) >> 61)
          goto LABEL_1172;
        v806 = v802 - v804;
        v807 = v806 >> 2;
        if (v806 >> 2 <= (unint64_t)(v805 + 1))
          v807 = v805 + 1;
        if ((unint64_t)v806 >= 0x7FFFFFFFFFFFFFF8)
          v808 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v808 = v807;
        if (v808)
          v808 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v808);
        else
          v809 = 0;
        v810 = (_QWORD *)(v808 + 8 * v805);
        *v810 = v800;
        v803 = v810 + 1;
        v811 = *(char **)(a1 + 2632);
        v812 = *(char **)(a1 + 2624);
        if (v811 != v812)
        {
          do
          {
            v813 = *((_QWORD *)v811 - 1);
            v811 -= 8;
            *--v810 = v813;
          }
          while (v811 != v812);
          v811 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v810;
        *(_QWORD *)(a1 + 2632) = v803;
        *(_QWORD *)(a1 + 2640) = v808 + 8 * v809;
        if (v811)
          operator delete(v811);
      }
      else
      {
        *v801 = v800;
        v803 = v801 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v803;
      v814 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v815 = (void *)operator new[]();
      bzero(v815, 4 * v814);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * j) = v815;
      v816 = *(_QWORD **)(a1 + 2632);
      v817 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v816 >= v817)
      {
        v819 = *(_QWORD *)(a1 + 2624);
        v820 = ((uint64_t)v816 - v819) >> 3;
        if ((unint64_t)(v820 + 1) >> 61)
          goto LABEL_1172;
        v821 = v817 - v819;
        v822 = v821 >> 2;
        if (v821 >> 2 <= (unint64_t)(v820 + 1))
          v822 = v820 + 1;
        if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFF8)
          v823 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v823 = v822;
        if (v823)
          v823 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v823);
        else
          v824 = 0;
        v825 = (_QWORD *)(v823 + 8 * v820);
        *v825 = v815;
        v818 = v825 + 1;
        v826 = *(char **)(a1 + 2632);
        v827 = *(char **)(a1 + 2624);
        if (v826 != v827)
        {
          do
          {
            v828 = *((_QWORD *)v826 - 1);
            v826 -= 8;
            *--v825 = v828;
          }
          while (v826 != v827);
          v826 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v825;
        *(_QWORD *)(a1 + 2632) = v818;
        *(_QWORD *)(a1 + 2640) = v823 + 8 * v824;
        if (v826)
          operator delete(v826);
      }
      else
      {
        *v816 = v815;
        v818 = v816 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v818;
      v829 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v830 = (void *)operator new[]();
      bzero(v830, 4 * v829);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * j) = v830;
      v831 = *(_QWORD **)(a1 + 2632);
      v832 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v831 >= v832)
      {
        v834 = *(_QWORD *)(a1 + 2624);
        v835 = ((uint64_t)v831 - v834) >> 3;
        if ((unint64_t)(v835 + 1) >> 61)
          goto LABEL_1172;
        v836 = v832 - v834;
        v837 = v836 >> 2;
        if (v836 >> 2 <= (unint64_t)(v835 + 1))
          v837 = v835 + 1;
        if ((unint64_t)v836 >= 0x7FFFFFFFFFFFFFF8)
          v838 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v838 = v837;
        if (v838)
          v838 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v838);
        else
          v839 = 0;
        v840 = (_QWORD *)(v838 + 8 * v835);
        *v840 = v830;
        v833 = v840 + 1;
        v841 = *(char **)(a1 + 2632);
        v842 = *(char **)(a1 + 2624);
        if (v841 != v842)
        {
          do
          {
            v843 = *((_QWORD *)v841 - 1);
            v841 -= 8;
            *--v840 = v843;
          }
          while (v841 != v842);
          v841 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v840;
        *(_QWORD *)(a1 + 2632) = v833;
        *(_QWORD *)(a1 + 2640) = v838 + 8 * v839;
        if (v841)
          operator delete(v841);
      }
      else
      {
        *v831 = v830;
        v833 = v831 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v833;
      v844 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v845 = (void *)operator new[]();
      bzero(v845, 4 * v844);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * j) = v845;
      v846 = *(_QWORD **)(a1 + 2632);
      v847 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v846 >= v847)
      {
        v849 = *(_QWORD *)(a1 + 2624);
        v850 = ((uint64_t)v846 - v849) >> 3;
        if ((unint64_t)(v850 + 1) >> 61)
          goto LABEL_1172;
        v851 = v847 - v849;
        v852 = v851 >> 2;
        if (v851 >> 2 <= (unint64_t)(v850 + 1))
          v852 = v850 + 1;
        if ((unint64_t)v851 >= 0x7FFFFFFFFFFFFFF8)
          v853 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v853 = v852;
        if (v853)
          v853 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v853);
        else
          v854 = 0;
        v855 = (_QWORD *)(v853 + 8 * v850);
        *v855 = v845;
        v848 = v855 + 1;
        v856 = *(char **)(a1 + 2632);
        v857 = *(char **)(a1 + 2624);
        if (v856 != v857)
        {
          do
          {
            v858 = *((_QWORD *)v856 - 1);
            v856 -= 8;
            *--v855 = v858;
          }
          while (v856 != v857);
          v856 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v855;
        *(_QWORD *)(a1 + 2632) = v848;
        *(_QWORD *)(a1 + 2640) = v853 + 8 * v854;
        if (v856)
          operator delete(v856);
      }
      else
      {
        *v846 = v845;
        v848 = v846 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v848;
      v859 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v860 = (void *)operator new[]();
      bzero(v860, 4 * v859);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * j) = v860;
      v861 = *(_QWORD **)(a1 + 2632);
      v862 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v861 >= v862)
      {
        v864 = *(_QWORD *)(a1 + 2624);
        v865 = ((uint64_t)v861 - v864) >> 3;
        if ((unint64_t)(v865 + 1) >> 61)
          goto LABEL_1172;
        v866 = v862 - v864;
        v867 = v866 >> 2;
        if (v866 >> 2 <= (unint64_t)(v865 + 1))
          v867 = v865 + 1;
        if ((unint64_t)v866 >= 0x7FFFFFFFFFFFFFF8)
          v868 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v868 = v867;
        if (v868)
          v868 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v868);
        else
          v869 = 0;
        v870 = (_QWORD *)(v868 + 8 * v865);
        *v870 = v860;
        v863 = v870 + 1;
        v871 = *(char **)(a1 + 2632);
        v872 = *(char **)(a1 + 2624);
        if (v871 != v872)
        {
          do
          {
            v873 = *((_QWORD *)v871 - 1);
            v871 -= 8;
            *--v870 = v873;
          }
          while (v871 != v872);
          v871 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v870;
        *(_QWORD *)(a1 + 2632) = v863;
        *(_QWORD *)(a1 + 2640) = v868 + 8 * v869;
        if (v871)
          operator delete(v871);
      }
      else
      {
        *v861 = v860;
        v863 = v861 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v863;
    }
  }
  if (maxFeatureVectors >= 1)
  {
    v874 = 0;
    do
    {
      if (*(_BYTE *)(a1 + 40))
        v875 = 2;
      else
        v875 = 1;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 208) + 24 * v874), v875);
      if (*(_BYTE *)(a1 + 2692))
      {
        v876 = *(unsigned int *)(a1 + 52);
        v877 = (void *)operator new[]();
        v878 = v877;
        if ((int)v876 >= 1)
          bzero(v877, 4 * v876);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v874) = v878;
        v879 = *(_QWORD **)(a1 + 2632);
        v880 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v879 >= v880)
        {
          v882 = *(_QWORD *)(a1 + 2624);
          v883 = ((uint64_t)v879 - v882) >> 3;
          if ((unint64_t)(v883 + 1) >> 61)
            goto LABEL_1172;
          v884 = v880 - v882;
          v885 = v884 >> 2;
          if (v884 >> 2 <= (unint64_t)(v883 + 1))
            v885 = v883 + 1;
          if ((unint64_t)v884 >= 0x7FFFFFFFFFFFFFF8)
            v886 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v886 = v885;
          if (v886)
            v886 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v886);
          else
            v887 = 0;
          v888 = (_QWORD *)(v886 + 8 * v883);
          *v888 = v878;
          v881 = v888 + 1;
          v889 = *(char **)(a1 + 2632);
          v890 = *(char **)(a1 + 2624);
          if (v889 != v890)
          {
            do
            {
              v891 = *((_QWORD *)v889 - 1);
              v889 -= 8;
              *--v888 = v891;
            }
            while (v889 != v890);
            v889 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v888;
          *(_QWORD *)(a1 + 2632) = v881;
          *(_QWORD *)(a1 + 2640) = v886 + 8 * v887;
          if (v889)
            operator delete(v889);
        }
        else
        {
          *v879 = v878;
          v881 = v879 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v881;
        v892 = *(unsigned int *)(a1 + 52);
        v893 = (void *)operator new[]();
        v894 = v893;
        if ((int)v892 >= 1)
          bzero(v893, 4 * v892);
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v874) = v894;
        v895 = *(_QWORD **)(a1 + 2632);
        v896 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v895 >= v896)
        {
          v898 = *(_QWORD *)(a1 + 2624);
          v899 = ((uint64_t)v895 - v898) >> 3;
          if ((unint64_t)(v899 + 1) >> 61)
            goto LABEL_1172;
          v900 = v896 - v898;
          v901 = v900 >> 2;
          if (v900 >> 2 <= (unint64_t)(v899 + 1))
            v901 = v899 + 1;
          if ((unint64_t)v900 >= 0x7FFFFFFFFFFFFFF8)
            v902 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v902 = v901;
          if (v902)
            v902 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v902);
          else
            v903 = 0;
          v904 = (_QWORD *)(v902 + 8 * v899);
          *v904 = v894;
          v897 = v904 + 1;
          v905 = *(char **)(a1 + 2632);
          v906 = *(char **)(a1 + 2624);
          if (v905 != v906)
          {
            do
            {
              v907 = *((_QWORD *)v905 - 1);
              v905 -= 8;
              *--v904 = v907;
            }
            while (v905 != v906);
            v905 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v904;
          *(_QWORD *)(a1 + 2632) = v897;
          *(_QWORD *)(a1 + 2640) = v902 + 8 * v903;
          if (v905)
            operator delete(v905);
        }
        else
        {
          *v895 = v894;
          v897 = v895 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v897;
      }
      v908 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v909 = (void *)operator new[]();
      bzero(v909, 4 * v908);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v874) = v909;
      v910 = *(_QWORD **)(a1 + 2632);
      v911 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v910 >= v911)
      {
        v913 = *(_QWORD *)(a1 + 2624);
        v914 = ((uint64_t)v910 - v913) >> 3;
        if ((unint64_t)(v914 + 1) >> 61)
          goto LABEL_1172;
        v915 = v911 - v913;
        v916 = v915 >> 2;
        if (v915 >> 2 <= (unint64_t)(v914 + 1))
          v916 = v914 + 1;
        if ((unint64_t)v915 >= 0x7FFFFFFFFFFFFFF8)
          v917 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v917 = v916;
        if (v917)
          v917 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v917);
        else
          v918 = 0;
        v919 = (_QWORD *)(v917 + 8 * v914);
        *v919 = v909;
        v912 = v919 + 1;
        v920 = *(char **)(a1 + 2632);
        v921 = *(char **)(a1 + 2624);
        if (v920 != v921)
        {
          do
          {
            v922 = *((_QWORD *)v920 - 1);
            v920 -= 8;
            *--v919 = v922;
          }
          while (v920 != v921);
          v920 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v919;
        *(_QWORD *)(a1 + 2632) = v912;
        *(_QWORD *)(a1 + 2640) = v917 + 8 * v918;
        if (v920)
          operator delete(v920);
      }
      else
      {
        *v910 = v909;
        v912 = v910 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v912;
      v923 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v924 = (void *)operator new[]();
      bzero(v924, 4 * v923);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v874) = v924;
      v925 = *(_QWORD **)(a1 + 2632);
      v926 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v925 >= v926)
      {
        v928 = *(_QWORD *)(a1 + 2624);
        v929 = ((uint64_t)v925 - v928) >> 3;
        if ((unint64_t)(v929 + 1) >> 61)
          goto LABEL_1172;
        v930 = v926 - v928;
        v931 = v930 >> 2;
        if (v930 >> 2 <= (unint64_t)(v929 + 1))
          v931 = v929 + 1;
        if ((unint64_t)v930 >= 0x7FFFFFFFFFFFFFF8)
          v932 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v932 = v931;
        if (v932)
          v932 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v932);
        else
          v933 = 0;
        v934 = (_QWORD *)(v932 + 8 * v929);
        *v934 = v924;
        v927 = v934 + 1;
        v935 = *(char **)(a1 + 2632);
        v936 = *(char **)(a1 + 2624);
        if (v935 != v936)
        {
          do
          {
            v937 = *((_QWORD *)v935 - 1);
            v935 -= 8;
            *--v934 = v937;
          }
          while (v935 != v936);
          v935 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v934;
        *(_QWORD *)(a1 + 2632) = v927;
        *(_QWORD *)(a1 + 2640) = v932 + 8 * v933;
        if (v935)
          operator delete(v935);
      }
      else
      {
        *v925 = v924;
        v927 = v925 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v927;
      if (!*(_BYTE *)(a1 + 1696))
      {
        v938 = *(unsigned int *)(a1 + 52);
        v939 = (void *)operator new[]();
        v940 = v939;
        if ((int)v938 >= 1)
          bzero(v939, 4 * v938);
        *(_QWORD *)(*(_QWORD *)(a1 + 960) + 8 * v874) = v940;
        v941 = *(_QWORD **)(a1 + 2632);
        v942 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v941 >= v942)
        {
          v944 = *(_QWORD *)(a1 + 2624);
          v945 = ((uint64_t)v941 - v944) >> 3;
          if ((unint64_t)(v945 + 1) >> 61)
            goto LABEL_1172;
          v946 = v942 - v944;
          v947 = v946 >> 2;
          if (v946 >> 2 <= (unint64_t)(v945 + 1))
            v947 = v945 + 1;
          if ((unint64_t)v946 >= 0x7FFFFFFFFFFFFFF8)
            v948 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v948 = v947;
          if (v948)
            v948 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v948);
          else
            v949 = 0;
          v950 = (_QWORD *)(v948 + 8 * v945);
          *v950 = v940;
          v943 = v950 + 1;
          v951 = *(char **)(a1 + 2632);
          v952 = *(char **)(a1 + 2624);
          if (v951 != v952)
          {
            do
            {
              v953 = *((_QWORD *)v951 - 1);
              v951 -= 8;
              *--v950 = v953;
            }
            while (v951 != v952);
            v951 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v950;
          *(_QWORD *)(a1 + 2632) = v943;
          *(_QWORD *)(a1 + 2640) = v948 + 8 * v949;
          if (v951)
            operator delete(v951);
        }
        else
        {
          *v941 = v940;
          v943 = v941 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v943;
        v954 = *(unsigned int *)(a1 + 52);
        v955 = (void *)operator new[]();
        v956 = v955;
        if ((int)v954 >= 1)
          bzero(v955, 4 * v954);
        *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v874) = v956;
        v957 = *(_QWORD **)(a1 + 2632);
        v958 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v957 >= v958)
        {
          v960 = *(_QWORD *)(a1 + 2624);
          v961 = ((uint64_t)v957 - v960) >> 3;
          if ((unint64_t)(v961 + 1) >> 61)
            goto LABEL_1172;
          v962 = v958 - v960;
          v963 = v962 >> 2;
          if (v962 >> 2 <= (unint64_t)(v961 + 1))
            v963 = v961 + 1;
          if ((unint64_t)v962 >= 0x7FFFFFFFFFFFFFF8)
            v964 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v964 = v963;
          if (v964)
            v964 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v964);
          else
            v965 = 0;
          v966 = (_QWORD *)(v964 + 8 * v961);
          *v966 = v956;
          v959 = v966 + 1;
          v967 = *(char **)(a1 + 2632);
          v968 = *(char **)(a1 + 2624);
          if (v967 != v968)
          {
            do
            {
              v969 = *((_QWORD *)v967 - 1);
              v967 -= 8;
              *--v966 = v969;
            }
            while (v967 != v968);
            v967 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v966;
          *(_QWORD *)(a1 + 2632) = v959;
          *(_QWORD *)(a1 + 2640) = v964 + 8 * v965;
          if (v967)
            operator delete(v967);
        }
        else
        {
          *v957 = v956;
          v959 = v957 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v959;
        v970 = *(unsigned int *)(a1 + 48);
        v971 = (void *)operator new[]();
        v972 = v971;
        if ((int)v970 >= 1)
          bzero(v971, 4 * v970);
        *(_QWORD *)(*(_QWORD *)(a1 + 816) + 8 * v874) = v972;
        v973 = *(_QWORD **)(a1 + 2632);
        v974 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v973 >= v974)
        {
          v976 = *(_QWORD *)(a1 + 2624);
          v977 = ((uint64_t)v973 - v976) >> 3;
          if ((unint64_t)(v977 + 1) >> 61)
            goto LABEL_1172;
          v978 = v974 - v976;
          v979 = v978 >> 2;
          if (v978 >> 2 <= (unint64_t)(v977 + 1))
            v979 = v977 + 1;
          if ((unint64_t)v978 >= 0x7FFFFFFFFFFFFFF8)
            v980 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v980 = v979;
          if (v980)
            v980 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v980);
          else
            v981 = 0;
          v982 = (_QWORD *)(v980 + 8 * v977);
          *v982 = v972;
          v975 = v982 + 1;
          v983 = *(char **)(a1 + 2632);
          v984 = *(char **)(a1 + 2624);
          if (v983 != v984)
          {
            do
            {
              v985 = *((_QWORD *)v983 - 1);
              v983 -= 8;
              *--v982 = v985;
            }
            while (v983 != v984);
            v983 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v982;
          *(_QWORD *)(a1 + 2632) = v975;
          *(_QWORD *)(a1 + 2640) = v980 + 8 * v981;
          if (v983)
            operator delete(v983);
        }
        else
        {
          *v973 = v972;
          v975 = v973 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v975;
        v986 = *(unsigned int *)(a1 + 52);
        v987 = (void *)operator new[]();
        v988 = v987;
        if ((int)v986 >= 1)
          bzero(v987, 4 * v986);
        *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v874) = v988;
        v989 = *(_QWORD **)(a1 + 2632);
        v990 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v989 >= v990)
        {
          v992 = *(_QWORD *)(a1 + 2624);
          v993 = ((uint64_t)v989 - v992) >> 3;
          if ((unint64_t)(v993 + 1) >> 61)
            goto LABEL_1172;
          v994 = v990 - v992;
          v995 = v994 >> 2;
          if (v994 >> 2 <= (unint64_t)(v993 + 1))
            v995 = v993 + 1;
          if ((unint64_t)v994 >= 0x7FFFFFFFFFFFFFF8)
            v996 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v996 = v995;
          if (v996)
            v996 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v996);
          else
            v997 = 0;
          v998 = (_QWORD *)(v996 + 8 * v993);
          *v998 = v988;
          v991 = v998 + 1;
          v999 = *(char **)(a1 + 2632);
          v1000 = *(char **)(a1 + 2624);
          if (v999 != v1000)
          {
            do
            {
              v1001 = *((_QWORD *)v999 - 1);
              v999 -= 8;
              *--v998 = v1001;
            }
            while (v999 != v1000);
            v999 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v998;
          *(_QWORD *)(a1 + 2632) = v991;
          *(_QWORD *)(a1 + 2640) = v996 + 8 * v997;
          if (v999)
            operator delete(v999);
        }
        else
        {
          *v989 = v988;
          v991 = v989 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v991;
        v1002 = *(unsigned int *)(a1 + 52);
        v1003 = (void *)operator new[]();
        v1004 = v1003;
        if ((int)v1002 >= 1)
          bzero(v1003, 4 * v1002);
        *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8 * v874) = v1004;
        v1005 = *(_QWORD **)(a1 + 2632);
        v1006 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1005 >= v1006)
        {
          v1008 = *(_QWORD *)(a1 + 2624);
          v1009 = ((uint64_t)v1005 - v1008) >> 3;
          if ((unint64_t)(v1009 + 1) >> 61)
            goto LABEL_1172;
          v1010 = v1006 - v1008;
          v1011 = v1010 >> 2;
          if (v1010 >> 2 <= (unint64_t)(v1009 + 1))
            v1011 = v1009 + 1;
          if ((unint64_t)v1010 >= 0x7FFFFFFFFFFFFFF8)
            v1012 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1012 = v1011;
          if (v1012)
            v1012 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1012);
          else
            v1013 = 0;
          v1014 = (_QWORD *)(v1012 + 8 * v1009);
          *v1014 = v1004;
          v1007 = v1014 + 1;
          v1015 = *(char **)(a1 + 2632);
          v1016 = *(char **)(a1 + 2624);
          if (v1015 != v1016)
          {
            do
            {
              v1017 = *((_QWORD *)v1015 - 1);
              v1015 -= 8;
              *--v1014 = v1017;
            }
            while (v1015 != v1016);
            v1015 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1014;
          *(_QWORD *)(a1 + 2632) = v1007;
          *(_QWORD *)(a1 + 2640) = v1012 + 8 * v1013;
          if (v1015)
            operator delete(v1015);
        }
        else
        {
          *v1005 = v1004;
          v1007 = v1005 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1007;
        v1018 = *(unsigned int *)(a1 + 52);
        v1019 = (void *)operator new[]();
        v1020 = v1019;
        if ((int)v1018 >= 1)
          bzero(v1019, 4 * v1018);
        *(_QWORD *)(*(_QWORD *)(a1 + 864) + 8 * v874) = v1020;
        v1021 = *(_QWORD **)(a1 + 2632);
        v1022 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1021 >= v1022)
        {
          v1024 = *(_QWORD *)(a1 + 2624);
          v1025 = ((uint64_t)v1021 - v1024) >> 3;
          if ((unint64_t)(v1025 + 1) >> 61)
            goto LABEL_1172;
          v1026 = v1022 - v1024;
          v1027 = v1026 >> 2;
          if (v1026 >> 2 <= (unint64_t)(v1025 + 1))
            v1027 = v1025 + 1;
          if ((unint64_t)v1026 >= 0x7FFFFFFFFFFFFFF8)
            v1028 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1028 = v1027;
          if (v1028)
            v1028 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1028);
          else
            v1029 = 0;
          v1030 = (_QWORD *)(v1028 + 8 * v1025);
          *v1030 = v1020;
          v1023 = v1030 + 1;
          v1031 = *(char **)(a1 + 2632);
          v1032 = *(char **)(a1 + 2624);
          if (v1031 != v1032)
          {
            do
            {
              v1033 = *((_QWORD *)v1031 - 1);
              v1031 -= 8;
              *--v1030 = v1033;
            }
            while (v1031 != v1032);
            v1031 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1030;
          *(_QWORD *)(a1 + 2632) = v1023;
          *(_QWORD *)(a1 + 2640) = v1028 + 8 * v1029;
          if (v1031)
            operator delete(v1031);
        }
        else
        {
          *v1021 = v1020;
          v1023 = v1021 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1023;
        v1034 = *(unsigned int *)(a1 + 52);
        v1035 = (void *)operator new[]();
        v1036 = v1035;
        if ((int)v1034 >= 1)
          bzero(v1035, 4 * v1034);
        *(_QWORD *)(*(_QWORD *)(a1 + 936) + 8 * v874) = v1036;
        v1037 = *(_QWORD **)(a1 + 2632);
        v1038 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1037 >= v1038)
        {
          v1040 = *(_QWORD *)(a1 + 2624);
          v1041 = ((uint64_t)v1037 - v1040) >> 3;
          if ((unint64_t)(v1041 + 1) >> 61)
            goto LABEL_1172;
          v1042 = v1038 - v1040;
          v1043 = v1042 >> 2;
          if (v1042 >> 2 <= (unint64_t)(v1041 + 1))
            v1043 = v1041 + 1;
          if ((unint64_t)v1042 >= 0x7FFFFFFFFFFFFFF8)
            v1044 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1044 = v1043;
          if (v1044)
            v1044 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1044);
          else
            v1045 = 0;
          v1046 = (_QWORD *)(v1044 + 8 * v1041);
          *v1046 = v1036;
          v1039 = v1046 + 1;
          v1047 = *(char **)(a1 + 2632);
          v1048 = *(char **)(a1 + 2624);
          if (v1047 != v1048)
          {
            do
            {
              v1049 = *((_QWORD *)v1047 - 1);
              v1047 -= 8;
              *--v1046 = v1049;
            }
            while (v1047 != v1048);
            v1047 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1046;
          *(_QWORD *)(a1 + 2632) = v1039;
          *(_QWORD *)(a1 + 2640) = v1044 + 8 * v1045;
          if (v1047)
            operator delete(v1047);
        }
        else
        {
          *v1037 = v1036;
          v1039 = v1037 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1039;
      }
      ++v874;
    }
    while (v874 < maxFeatureVectors);
  }
}

void sub_191565F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<MMatrix<float>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[8 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v16 = &v3[8 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v4;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void LSTM<float>::targets()
{
  exitFramework(1);
}

uint64_t LSTM<float>::inputs(uint64_t a1)
{
  return a1 + 64;
}

_QWORD **LSTM<float>::outputs(uint64_t a1)
{
  _QWORD **v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (_QWORD **)(a1 + 792);
  std::vector<VVector<float>>::resize((char **)(a1 + 792), (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3);
  v3 = *(uint64_t **)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 168) - (_QWORD)v3;
  if (v4)
  {
    v5 = v4 >> 3;
    v6 = *v2;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      v7 = *v3++;
      *v6++ = v7;
      --v5;
    }
    while (v5);
  }
  return v2;
}

void LSTM<float>::deltas()
{
  exitFramework(1);
}

uint64_t LSTM<float>::inputDeltas(uint64_t a1)
{
  return a1 + 816;
}

uint64_t LSTM<float>::weightsAreNaN()
{
  return 0;
}

uint64_t LSTM<float>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  int v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  char v20[8];

  v5 = (int)a4;
  *(_QWORD *)v20 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v20[4], v20, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((_DWORD *)this + 18);
    v10 = *(_QWORD *)this;
    v11 = (int *)(*(_QWORD *)this + v9);
    v12 = *(_QWORD *)this + *((_QWORD *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      v13 = 0;
    }
    v14 = v9;
    *(_DWORD *)(a1 + 736) = v13;
    if (v10 + v9 <= v12)
    {
      v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      v14 = v9;
    }
    else
    {
      v15 = 0;
    }
    *(_DWORD *)(a1 + 740) = v15;
    v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v17 = 0;
    }
    *(_DWORD *)(a1 + 744) = v17;
  }
  v18 = *(_DWORD *)(a1 + 52);
  if (v18 != *(_DWORD *)&v20[4] || *(_DWORD *)(a1 + 48) != *(_DWORD *)v20)
    exitFramework(3);
  VVector<float>::read(*(signed __int8 ***)(a1 + 2568), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)0x20, v18);
  VVector<float>::read(*(signed __int8 ***)(a1 + 2576), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)0x20, *(_DWORD *)(a1 + 52));
  VVector<float>::read(*(signed __int8 ***)(a1 + 2584), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)0x20, *(_DWORD *)(a1 + 52));
  MMatrix<float>::read(*(char **)(a1 + 2504), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 2512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 2520), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 2528), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 2536), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<float>::read(*(char **)(a1 + 2544), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<float>::read(*(char **)(a1 + 2552), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  return MMatrix<float>::read(*(char **)(a1 + 2560), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void LSTM<float>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, unsigned int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  VVector<float>::write(*(void ***)(a1 + 2568), __stream, (int *)a3, 32, a5, *(_DWORD *)(a1 + 52));
  VVector<float>::write(*(void ***)(a1 + 2576), __stream, (int *)a3, 32, a5, *(_DWORD *)(a1 + 52));
  VVector<float>::write(*(void ***)(a1 + 2584), __stream, (int *)a3, 32, a5, *(_DWORD *)(a1 + 52));
  MMatrix<float>::write(*(float ***)(a1 + 2504), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
}

void sub_19156648C()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 2512), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_1915664A4()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 2520), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_1915664BC()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 2528), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_1915664D4()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 2536), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_1915664F0()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 2544), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_19156650C()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<float>::write(*(float ***)(v3 + 2552), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_191566528(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int *v19;
  FILE *v20;
  uint64_t v21;

  MMatrix<float>::write(*(float ***)(v21 + 2560), v20, v19, v18, *(_DWORD *)(v21 + 52), *(_DWORD *)(v21 + 52));
}

float LSTM<float>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD **v5;
  float result;
  _QWORD **v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float *v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  float *v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  float *v59;
  float *v60;
  float *v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  float *v67;
  float *v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float *v74;
  float *v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  float *v80;
  float *v81;
  float *v82;
  float v83;
  float v84;
  float v85;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v7 = 0;
LABEL_6:
  v8 = *(unsigned int *)(a1 + 52);
  if ((int)v8 >= 1)
  {
    v9 = (float *)*v7[321];
    v10 = (float *)*v5[321];
    v11 = **(float ***)(a1 + 2568);
    v12 = *(unsigned int *)(a1 + 52);
    do
    {
      v13 = *v9++;
      v14 = v13;
      v15 = *v10++;
      *v11++ = v14 - v15;
      --v12;
    }
    while (v12);
    v16 = (float *)*v7[322];
    v17 = (float *)*v5[322];
    v18 = **(float ***)(a1 + 2576);
    v19 = v8;
    do
    {
      v20 = *v16++;
      v21 = v20;
      v22 = *v17++;
      *v18++ = v21 - v22;
      --v19;
    }
    while (v19);
    v23 = (float *)*v7[323];
    v24 = (float *)*v5[323];
    v25 = **(float ***)(a1 + 2584);
    v26 = v8;
    do
    {
      v27 = *v23++;
      v28 = v27;
      v29 = *v24++;
      result = v28 - v29;
      *v25++ = result;
      --v26;
    }
    while (v26);
  }
  v30 = (*(_DWORD *)(a1 + 48) * v8);
  if ((int)v30 >= 1)
  {
    v31 = (float *)*v7[313];
    v32 = (float *)*v5[313];
    v33 = **(float ***)(a1 + 2504);
    v34 = (*(_DWORD *)(a1 + 48) * v8);
    do
    {
      v35 = *v31++;
      v36 = v35;
      v37 = *v32++;
      *v33++ = v36 - v37;
      --v34;
    }
    while (v34);
    v38 = (float *)*v7[315];
    v39 = (float *)*v5[315];
    v40 = **(float ***)(a1 + 2520);
    v41 = v30;
    do
    {
      v42 = *v38++;
      v43 = v42;
      v44 = *v39++;
      *v40++ = v43 - v44;
      --v41;
    }
    while (v41);
    v45 = (float *)*v7[314];
    v46 = (float *)*v5[314];
    v47 = **(float ***)(a1 + 2512);
    v48 = v30;
    do
    {
      v49 = *v45++;
      v50 = v49;
      v51 = *v46++;
      *v47++ = v50 - v51;
      --v48;
    }
    while (v48);
    v52 = (float *)*v7[316];
    v53 = (float *)*v5[316];
    v54 = **(float ***)(a1 + 2528);
    do
    {
      v55 = *v52++;
      v56 = v55;
      v57 = *v53++;
      result = v56 - v57;
      *v54++ = result;
      --v30;
    }
    while (v30);
  }
  if ((_DWORD)v8)
  {
    v58 = (v8 * v8);
    v59 = (float *)*v7[317];
    v60 = (float *)*v5[317];
    v61 = **(float ***)(a1 + 2536);
    v62 = v58;
    do
    {
      v63 = *v59++;
      v64 = v63;
      v65 = *v60++;
      *v61++ = v64 - v65;
      --v62;
    }
    while (v62);
    v66 = (float *)*v7[319];
    v67 = (float *)*v5[319];
    v68 = **(float ***)(a1 + 2552);
    v69 = v58;
    do
    {
      v70 = *v66++;
      v71 = v70;
      v72 = *v67++;
      *v68++ = v71 - v72;
      --v69;
    }
    while (v69);
    v73 = (float *)*v7[318];
    v74 = (float *)*v5[318];
    v75 = **(float ***)(a1 + 2544);
    v76 = v58;
    do
    {
      v77 = *v73++;
      v78 = v77;
      v79 = *v74++;
      *v75++ = v78 - v79;
      --v76;
    }
    while (v76);
    v80 = (float *)*v7[320];
    v81 = (float *)*v5[320];
    v82 = **(float ***)(a1 + 2560);
    do
    {
      v83 = *v80++;
      v84 = v83;
      v85 = *v81++;
      result = v84 - v85;
      *v82++ = result;
      --v58;
    }
    while (v58);
  }
  return result;
}

void LSTM<float>::compareModels(uint64_t a1, void *lpsrc, _QWORD **a3)
{
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;
  float *v7;
  float *v8;
  int v9;
  float v10;
  float v11;
  float v12;
  _QWORD *v13;
  unint64_t v14;
  void *__p;

  v3 = a3;
  if (lpsrc)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
LABEL_3:
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  v6 = *(unsigned int *)(a1 + 52);
  if ((int)v6 <= 0)
  {
    v13 = __p;
LABEL_12:
    v14 = *v13 | 1;
    goto LABEL_13;
  }
  v7 = (float *)*v3[321];
  v8 = (float *)*v5[321];
  LOBYTE(v9) = 1;
  do
  {
    v10 = *v7++;
    v11 = v10;
    v12 = *v8++;
    v9 = v9 & (vabds_f32(v11, v12) < 0.0000001);
    --v6;
  }
  while (v6);
  v13 = __p;
  if (v9)
    goto LABEL_12;
  v14 = *(_QWORD *)__p & 0xFFFFFFFFFFFFFFFELL;
LABEL_13:
  *v13 = v14;
  operator delete(v13);
}

void LSTM<float>::addGradient(uint64_t a1, void *lpsrc)
{
  void *v3;
  const float **v4;
  const float **v5;
  vDSP_Length v6;
  const float **v7;
  const float **v8;
  vDSP_Length v9;
  const float **v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  const float **v14;
  vDSP_Length v15;
  const float **v16;
  const float **v17;
  vDSP_Length v18;
  const float **v19;
  const float **v20;
  vDSP_Length v21;
  const float **v22;
  const float **v23;
  vDSP_Length v24;
  const float **v25;
  const float **v26;
  vDSP_Length v27;
  float __B;

  if (lpsrc)
  else
    v3 = 0;
  VVector<float>::add<float>(*(float32x4_t ***)(a1 + 2568), *((float32x4_t ***)v3 + 321), *(_DWORD *)(a1 + 52));
  VVector<float>::add<float>(*(float32x4_t ***)(a1 + 2576), *((float32x4_t ***)v3 + 322), *(_DWORD *)(a1 + 52));
  VVector<float>::add<float>(*(float32x4_t ***)(a1 + 2584), *((float32x4_t ***)v3 + 323), *(_DWORD *)(a1 + 52));
  v4 = *(const float ***)(a1 + 2504);
  v5 = (const float **)*((_QWORD *)v3 + 313);
  v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v5, 1, &__B, *v4, 1, (float *)*v4, 1, v6);
  v7 = *(const float ***)(a1 + 2512);
  v8 = (const float **)*((_QWORD *)v3 + 314);
  v9 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v8, 1, &__B, *v7, 1, (float *)*v7, 1, v9);
  v10 = *(const float ***)(a1 + 2520);
  v11 = (const float **)*((_QWORD *)v3 + 315);
  v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v11, 1, &__B, *v10, 1, (float *)*v10, 1, v12);
  v13 = *(const float ***)(a1 + 2528);
  v14 = (const float **)*((_QWORD *)v3 + 316);
  v15 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v14, 1, &__B, *v13, 1, (float *)*v13, 1, v15);
  v16 = *(const float ***)(a1 + 2536);
  v17 = (const float **)*((_QWORD *)v3 + 317);
  v18 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v17, 1, &__B, *v16, 1, (float *)*v16, 1, v18);
  v19 = *(const float ***)(a1 + 2544);
  v20 = (const float **)*((_QWORD *)v3 + 318);
  v21 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v20, 1, &__B, *v19, 1, (float *)*v19, 1, v21);
  v22 = *(const float ***)(a1 + 2552);
  v23 = (const float **)*((_QWORD *)v3 + 319);
  v24 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v23, 1, &__B, *v22, 1, (float *)*v22, 1, v24);
  v25 = *(const float ***)(a1 + 2560);
  v26 = (const float **)*((_QWORD *)v3 + 320);
  v27 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v26, 1, &__B, *v25, 1, (float *)*v25, 1, v27);
}

void LSTM<float>::applyGradient(uint64_t a1, void *lpsrc)
{
  _QWORD **v3;
  float v4;
  float v5;
  float **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float v18;
  const float **v19;
  vDSP_Length v20;
  const float **v21;
  vDSP_Length v22;
  const float **v23;
  vDSP_Length v24;
  const float **v25;
  vDSP_Length v26;
  const float **v27;
  vDSP_Length v28;
  const float **v29;
  vDSP_Length v30;
  const float **v31;
  vDSP_Length v32;
  const float **v33;
  vDSP_Length v34;
  const float **v35;
  vDSP_Length v36;
  const float **v37;
  vDSP_Length v38;
  float __C;
  float __B;

  if (lpsrc)
  else
    v3 = 0;
  v4 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  v5 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1552))(*(_QWORD *)(a1 + 1552), *(_QWORD *)(a1 + 2504), (uint64_t)(v3 + 29), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1560))(*(_QWORD *)(a1 + 1560), *(_QWORD *)(a1 + 2512), (uint64_t)(v3 + 30), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1568))(*(_QWORD *)(a1 + 1568), *(_QWORD *)(a1 + 2520), (uint64_t)(v3 + 31), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1576))(*(_QWORD *)(a1 + 1576), *(_QWORD *)(a1 + 2528), (uint64_t)(v3 + 32), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1584))(*(_QWORD *)(a1 + 1584), *(_QWORD *)(a1 + 2536), (uint64_t)(v3 + 33), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1592))(*(_QWORD *)(a1 + 1592), *(_QWORD *)(a1 + 2544), (uint64_t)(v3 + 34), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1600))(*(_QWORD *)(a1 + 1600), *(_QWORD *)(a1 + 2552), (uint64_t)(v3 + 35), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1608))(*(_QWORD *)(a1 + 1608), *(_QWORD *)(a1 + 2560), (uint64_t)(v3 + 36), v4);
  v6 = *(float ***)(a1 + 2568);
  v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 <= 0)
  {
    v10 = *v6;
  }
  else
  {
    v8 = 0;
    v9 = *v3[321];
    v10 = *v6;
    do
    {
      v10[v8] = v10[v8] + (float)(v5 * *(float *)(v9 + v8 * 4));
      ++v8;
    }
    while (v7 != v8);
    v11 = (float *)*v3[322];
    v12 = **(float ***)(a1 + 2576);
    v13 = v7;
    do
    {
      v14 = *v11++;
      *v12 = *v12 + (float)(v5 * v14);
      ++v12;
      --v13;
    }
    while (v13);
    v15 = (float *)*v3[323];
    v16 = **(float ***)(a1 + 2584);
    v17 = v7;
    do
    {
      v18 = *v15++;
      *v16 = *v16 + (float)(v5 * v18);
      ++v16;
      --v17;
    }
    while (v17);
  }
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(v10, 1, &__B, &__C, v10, 1, (int)v7);
  v19 = *(const float ***)(a1 + 2576);
  v20 = *(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v19, 1, &__B, &__C, (float *)*v19, 1, v20);
  v21 = *(const float ***)(a1 + 2584);
  v22 = *(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v21, 1, &__B, &__C, (float *)*v21, 1, v22);
  v23 = *(const float ***)(a1 + 2504);
  v24 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v23, 1, &__B, &__C, (float *)*v23, 1, v24);
  v25 = *(const float ***)(a1 + 2512);
  v26 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v25, 1, &__B, &__C, (float *)*v25, 1, v26);
  v27 = *(const float ***)(a1 + 2520);
  v28 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v27, 1, &__B, &__C, (float *)*v27, 1, v28);
  v29 = *(const float ***)(a1 + 2528);
  v30 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v29, 1, &__B, &__C, (float *)*v29, 1, v30);
  v31 = *(const float ***)(a1 + 2536);
  v32 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v31, 1, &__B, &__C, (float *)*v31, 1, v32);
  v33 = *(const float ***)(a1 + 2544);
  v34 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v33, 1, &__B, &__C, (float *)*v33, 1, v34);
  v35 = *(const float ***)(a1 + 2552);
  v36 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v35, 1, &__B, &__C, (float *)*v35, 1, v36);
  v37 = *(const float ***)(a1 + 2560);
  v38 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v37, 1, &__B, &__C, (float *)*v37, 1, v38);
}

void LSTM<float>::clipModel(uint64_t a1, float a2)
{
  const float **v4;
  float v5;
  vDSP_Length v6;
  const float **v7;
  vDSP_Length v8;
  const float **v9;
  vDSP_Length v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  vDSP_Length v14;
  const float **v15;
  vDSP_Length v16;
  const float **v17;
  vDSP_Length v18;
  const float **v19;
  vDSP_Length v20;
  const float **v21;
  vDSP_Length v22;
  const float **v23;
  vDSP_Length v24;
  const float **v25;
  vDSP_Length v26;
  float __C;
  float __B;

  v4 = *(const float ***)(a1 + 2568);
  v5 = -a2;
  v6 = *(int *)(a1 + 52);
  __C = a2;
  __B = -a2;
  vDSP_vclip(*v4, 1, &__B, &__C, (float *)*v4, 1, v6);
  v7 = *(const float ***)(a1 + 2576);
  v8 = *(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  v9 = *(const float ***)(a1 + 2584);
  v10 = *(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  v11 = *(const float ***)(a1 + 2504);
  v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  v13 = *(const float ***)(a1 + 2512);
  v14 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  v15 = *(const float ***)(a1 + 2520);
  v16 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
  v17 = *(const float ***)(a1 + 2528);
  v18 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v17, 1, &__B, &__C, (float *)*v17, 1, v18);
  v19 = *(const float ***)(a1 + 2536);
  v20 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v19, 1, &__B, &__C, (float *)*v19, 1, v20);
  v21 = *(const float ***)(a1 + 2544);
  v22 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v21, 1, &__B, &__C, (float *)*v21, 1, v22);
  v23 = *(const float ***)(a1 + 2552);
  v24 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v23, 1, &__B, &__C, (float *)*v23, 1, v24);
  v25 = *(const float ***)(a1 + 2560);
  v26 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v25, 1, &__B, &__C, (float *)*v25, 1, v26);
}

uint64_t LSTM<float>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float *v24;

  v2 = *(unsigned int *)(result + 52);
  if ((int)v2 >= 1)
  {
    v3 = **(float ***)(result + 2568);
    v4 = *(unsigned int *)(result + 52);
    do
    {
      *v3 = *v3 * a2;
      ++v3;
      --v4;
    }
    while (v4);
    v5 = **(float ***)(result + 2576);
    v6 = v2;
    do
    {
      *v5 = *v5 * a2;
      ++v5;
      --v6;
    }
    while (v6);
    v7 = **(float ***)(result + 2584);
    v8 = v2;
    do
    {
      *v7 = *v7 * a2;
      ++v7;
      --v8;
    }
    while (v8);
  }
  v9 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v9 >= 1)
  {
    v10 = **(float ***)(result + 2504);
    v11 = (*(_DWORD *)(result + 48) * v2);
    do
    {
      *v10 = *v10 * a2;
      ++v10;
      --v11;
    }
    while (v11);
    v12 = **(float ***)(result + 2512);
    v13 = v9;
    do
    {
      *v12 = *v12 * a2;
      ++v12;
      --v13;
    }
    while (v13);
    v14 = **(float ***)(result + 2520);
    v15 = v9;
    do
    {
      *v14 = *v14 * a2;
      ++v14;
      --v15;
    }
    while (v15);
    v16 = **(float ***)(result + 2528);
    do
    {
      *v16 = *v16 * a2;
      ++v16;
      --v9;
    }
    while (v9);
  }
  if ((_DWORD)v2)
  {
    v17 = (v2 * v2);
    v18 = **(float ***)(result + 2536);
    v19 = v17;
    do
    {
      *v18 = *v18 * a2;
      ++v18;
      --v19;
    }
    while (v19);
    v20 = **(float ***)(result + 2544);
    v21 = v17;
    do
    {
      *v20 = *v20 * a2;
      ++v20;
      --v21;
    }
    while (v21);
    v22 = **(float ***)(result + 2552);
    v23 = v17;
    do
    {
      *v22 = *v22 * a2;
      ++v22;
      --v23;
    }
    while (v23);
    v24 = **(float ***)(result + 2560);
    do
    {
      *v24 = *v24 * a2;
      ++v24;
      --v17;
    }
    while (v17);
  }
  return result;
}

void LSTM<float>::allocInitialState(uint64_t a1, void **a2)
{
  int v4;
  _QWORD *v5;
  int v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  int v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD *)operator new();
      VVector<float>::VVector(v5, *(_DWORD *)(a1 + 52), 0);
      v6 = *(_DWORD *)(a1 + 52);
      v8 = (char *)a2[1];
      v7 = (char *)a2[2];
      if (v8 >= v7)
      {
        v10 = (v8 - (_BYTE *)*a2) >> 4;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60)
          goto LABEL_37;
        v12 = v7 - (_BYTE *)*a2;
        if (v12 >> 3 > v11)
          v11 = v12 >> 3;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
        else
          v14 = 0;
        v15 = v13 + 16 * v10;
        *(_DWORD *)v15 = v6;
        *(_QWORD *)(v15 + 8) = v5;
        v17 = (char *)*a2;
        v16 = (char *)a2[1];
        v18 = (char *)v15;
        if (v16 != *a2)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
            v18 -= 16;
            v16 -= 16;
          }
          while (v16 != v17);
          v16 = (char *)*a2;
        }
        v9 = (void *)(v15 + 16);
        *a2 = v18;
        a2[1] = (void *)(v15 + 16);
        a2[2] = (void *)(v13 + 16 * v14);
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v8 = v6;
        *((_QWORD *)v8 + 1) = v5;
        v9 = v8 + 16;
      }
      a2[1] = v9;
      v19 = (_QWORD *)operator new();
      VVector<float>::VVector(v19, *(_DWORD *)(a1 + 52), 0);
      v20 = *(_DWORD *)(a1 + 52);
      v22 = (char *)a2[1];
      v21 = (char *)a2[2];
      if (v22 >= v21)
      {
        v24 = (v22 - (_BYTE *)*a2) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
LABEL_37:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v26 = v21 - (_BYTE *)*a2;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v27);
        else
          v28 = 0;
        v29 = v27 + 16 * v24;
        *(_DWORD *)v29 = v20;
        *(_QWORD *)(v29 + 8) = v19;
        v31 = (char *)*a2;
        v30 = (char *)a2[1];
        v32 = (char *)v29;
        if (v30 != *a2)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
            v32 -= 16;
            v30 -= 16;
          }
          while (v30 != v31);
          v30 = (char *)*a2;
        }
        v23 = (void *)(v29 + 16);
        *a2 = v32;
        a2[1] = (void *)(v29 + 16);
        a2[2] = (void *)(v27 + 16 * v28);
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_DWORD *)v22 = v20;
        *((_QWORD *)v22 + 1) = v19;
        v23 = v22 + 16;
      }
      a2[1] = v23;
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_191567500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

int *LSTM<float>::saveState(int *result, uint64_t *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = a3;
    v9 = *a4;
    do
    {
      v10 = v6[13];
      v11 = v10 * v7;
      v12 = *(_QWORD *)(*((_QWORD *)v6 + 20) + 8 * v8);
      v13 = *a2;
      *(_DWORD *)(v13 + 16 * v9) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v12 + 4 * (int)v10 * v7), 4 * v10);
      v14 = *a4 + 1;
      *a4 = v14;
      v15 = v6[13];
      v16 = *a2;
      *(_DWORD *)(v16 + 16 * v14) = v15;
      result = (int *)memmove(**(void ***)(v16 + 16 * *a4 + 8), (const void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + 8 * v8) + 4 * v11), 4 * v15);
      v9 = *a4 + 1;
      *a4 = v9;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *LSTM<float>::restoreState(int *result, _QWORD *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = a3;
    do
    {
      v9 = v6[13] * v7;
      v10 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 20) + 8 * v8) + 4 * v9);
      v11 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + 8 * v8) + 4 * v9);
      v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      v13 = *a4;
      *a4 = v13 + 1;
      result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void LSTM<float>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v6 = 0;
    v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      v8 = *a3 + 1;
      *a3 = v8;
      bzero(**(void ***)(*a2 + 16 * v8 + 8), 4 * *(int *)(*a2 + 16 * v8));
      v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void LSTM<float>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v19;

  if (*(_BYTE *)(a1 + 2692))
  {
    v2 = *(_QWORD *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v3 = *(_QWORD *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v4 = *(_QWORD *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v5 = *(_QWORD *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 40))(v5, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v6 = *(_QWORD *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v7 = *(_QWORD *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v8 = *(_QWORD *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v9 = *(_QWORD *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 40))(v9, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 16))(*(_QWORD *)(a1 + 1552));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1560) + 16))(*(_QWORD *)(a1 + 1560));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1568) + 16))(*(_QWORD *)(a1 + 1568));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1576) + 16))(*(_QWORD *)(a1 + 1576));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 16))(*(_QWORD *)(a1 + 1584));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1592) + 16))(*(_QWORD *)(a1 + 1592));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1600) + 16))(*(_QWORD *)(a1 + 1600));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1608) + 16))(*(_QWORD *)(a1 + 1608));
    v10 = *(_QWORD *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 40))(v10, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v11 = *(_QWORD *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v12 = *(_QWORD *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 40))(v12, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v13 = *(_QWORD *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v14 = *(_QWORD *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 40))(v14, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v15 = *(_QWORD *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 40))(v15, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v16 = *(_QWORD *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 40))(v16, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v17 = *(_QWORD *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v19 < 0)
      operator delete(__p[0]);
  }
}

void sub_191567BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *LSTM<float>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  double v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *result;
  uint64_t v30;
  char *v31;

  v4 = **(_QWORD **)(a1 + 2504);
  v5 = *(_DWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v6;
  v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v5, v6)));
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v9 = v4;
    v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v6;
    *(_DWORD *)(v9 + 12) = v5;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = **(_QWORD **)(a1 + 2512);
  if ((unint64_t)v10 >= *(_QWORD *)(a2 + 16))
  {
    v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v10 = v11;
    v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v6;
    *((_DWORD *)v10 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v12;
  v13 = **(_QWORD **)(a1 + 2528);
  if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
  {
    v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v12 = v13;
    v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v6;
    *((_DWORD *)v12 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v14;
  v15 = **(_QWORD **)(a1 + 2520);
  if ((unint64_t)v14 >= *(_QWORD *)(a2 + 16))
  {
    v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v8);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(_QWORD *)v14 = v15;
    v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v6;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v16;
  v17 = **(_QWORD **)(a1 + 2536);
  v18 = __PAIR64__(v6, LODWORD(v7));
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 16))
  {
    v19 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, COERCE_DOUBLE(__PAIR64__(v6, LODWORD(v7))));
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v16 = v17;
    v19 = v16 + 16;
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v19;
  v20 = **(_QWORD **)(a1 + 2544);
  if ((unint64_t)v19 >= *(_QWORD *)(a2 + 16))
  {
    v21 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v20, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v19 = v20;
    v21 = v19 + 16;
    *((_DWORD *)v19 + 2) = v6;
    *((_DWORD *)v19 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v21;
  v22 = **(_QWORD **)(a1 + 2560);
  if ((unint64_t)v21 >= *(_QWORD *)(a2 + 16))
  {
    v23 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v22, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v21 = v22;
    v23 = v21 + 16;
    *((_DWORD *)v21 + 2) = v6;
    *((_DWORD *)v21 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v24 = **(_QWORD **)(a1 + 2552);
  if ((unint64_t)v23 >= *(_QWORD *)(a2 + 16))
  {
    v25 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v24, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(_QWORD *)v23 = v24;
    v25 = v23 + 16;
    *((_DWORD *)v23 + 2) = v6;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v25;
  v26 = **(_QWORD **)(a1 + 2568);
  HIDWORD(v7) = 0;
  if ((unint64_t)v25 >= *(_QWORD *)(a2 + 16))
  {
    v27 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v26, v7);
    v6 = *(_DWORD *)(a1 + 52);
    *(_QWORD *)&v7 = v6;
  }
  else
  {
    *(_QWORD *)v25 = v26;
    v27 = v25 + 16;
    *((_DWORD *)v25 + 2) = v6;
    *((_DWORD *)v25 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v27;
  v28 = **(_QWORD **)(a1 + 2576);
  if ((unint64_t)v27 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v28, v7);
    v6 = *(_DWORD *)(a1 + 52);
    *(_QWORD *)&v7 = v6;
  }
  else
  {
    *(_QWORD *)v27 = v28;
    result = v27 + 16;
    *((_DWORD *)v27 + 2) = v6;
    *((_DWORD *)v27 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = result;
  v30 = **(_QWORD **)(a1 + 2584);
  if ((unint64_t)result >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v30, v7);
    v31 = result;
  }
  else
  {
    *(_QWORD *)result = v30;
    v31 = result + 16;
    *((_DWORD *)result + 2) = v6;
    *((_DWORD *)result + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v31;
  return result;
}

__n128 LSTM<float>::setWeightMatrices(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  v2 = *(_OWORD **)(a2 + 8);
  v3 = *((_QWORD *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(_QWORD *)(a2 + 8) = v2;
  *v2 = *(v2 - 1);
  a1[30] = *(_QWORD *)v2;
  a1[314] = a1 + 30;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4 - 16;
  *v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(_QWORD *)v2;
  a1[316] = a1 + 32;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5 - 16;
  *v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(_QWORD *)v2;
  v6 = a1 + 31;
  v6[284] = v6;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7 - 16;
  *v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(_QWORD *)v2;
  v6[286] = v6 + 2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v8 - 16;
  *v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(_QWORD *)v2;
  v6[287] = v6 + 3;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9 - 16;
  *v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(_QWORD *)v2;
  v6[289] = v6 + 5;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10 - 16;
  *v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(_QWORD *)v2;
  v6[288] = v6 + 4;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v11 - 16;
  *v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(_QWORD *)v2;
  v6[290] = v6 + 6;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v12 - 16;
  *v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(_QWORD *)v2;
  v6[291] = v6 + 7;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v13 - 16;
  result = *(__n128 *)(v13 - 32);
  *v2 = result;
  v6[8] = *(_QWORD *)v2;
  v6[292] = v6 + 8;
  *(_QWORD *)(a2 + 8) -= 16;
  return result;
}

uint64_t LSTM<float>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t LSTM<float>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void LSTM<float>::allocAllBuffers(uint64_t a1)
{
  void *__p;
  char v3;

  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from allocAll");
  LSTM<float>::init(a1);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1915680D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<float>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[329];
  v3 = a1[328];
  if (v2 == v3)
  {
    v3 = a1[329];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = a1[329];
        v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[332];
  v7 = a1[331];
  if (v6 == v7)
  {
    v7 = a1[332];
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C8052888210);
        v6 = a1[332];
        v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    v3 = a1[328];
  }
  a1[329] = v3;
  a1[332] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 123);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 153);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 138);
  return SparseMatrix<float>::cleanupAllBuffers(a1 + 168);
}

uint64_t LSTM<float>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t LSTM<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void LSTM<float>::update(uint64_t a1, float a2)
{
  int v4;
  int v5;
  vDSP_Length v6;
  vDSP_Length v7;
  uint64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float v16;
  float *v17;
  float *v18;
  float v19;
  float __B;

  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  if (*(int *)(a1 + 56) < 1)
  {
    __B = a2;
    v6 = v5 * v4;
    vDSP_vsma(*(const float **)(a1 + 1464), 1, &__B, *(const float **)(a1 + 232), 1, *(float **)(a1 + 232), 1, v6);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1480), 1, &__B, *(const float **)(a1 + 248), 1, *(float **)(a1 + 248), 1, v6);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1472), 1, &__B, *(const float **)(a1 + 240), 1, *(float **)(a1 + 240), 1, v6);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1488), 1, &__B, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v6);
  }
  else
  {
    SparseMatrix<float>::add<float>(a1 + 984, (uint64_t *)(a1 + 232), v5, v4, a2);
    SparseMatrix<float>::add<float>(a1 + 1224, (uint64_t *)(a1 + 248), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    SparseMatrix<float>::add<float>(a1 + 1104, (uint64_t *)(a1 + 240), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    SparseMatrix<float>::add<float>(a1 + 1344, (uint64_t *)(a1 + 256), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
  }
  v7 = (v5 * v5);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1496), 1, &__B, *(const float **)(a1 + 264), 1, *(float **)(a1 + 264), 1, v7);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1512), 1, &__B, *(const float **)(a1 + 280), 1, *(float **)(a1 + 280), 1, v7);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1504), 1, &__B, *(const float **)(a1 + 272), 1, *(float **)(a1 + 272), 1, v7);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1520), 1, &__B, *(const float **)(a1 + 288), 1, *(float **)(a1 + 288), 1, v7);
  v8 = *(unsigned int *)(a1 + 52);
  if ((int)v8 >= 1)
  {
    v9 = *(float **)(a1 + 1528);
    v10 = *(float **)(a1 + 296);
    v11 = *(unsigned int *)(a1 + 52);
    do
    {
      v12 = *v9++;
      *v10 = *v10 + (float)(a2 * v12);
      ++v10;
      --v11;
    }
    while (v11);
    v13 = *(float **)(a1 + 1544);
    v14 = *(float **)(a1 + 312);
    v15 = v8;
    do
    {
      v16 = *v13++;
      *v14 = *v14 + (float)(a2 * v16);
      ++v14;
      --v15;
    }
    while (v15);
    v17 = *(float **)(a1 + 1536);
    v18 = *(float **)(a1 + 304);
    do
    {
      v19 = *v17++;
      *v18 = *v18 + (float)(a2 * v19);
      ++v18;
      --v8;
    }
    while (v8);
  }
}

void LSTM<float>::backward(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  int v6;
  void **v7;
  int v8;
  void **v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float32x4_t *v20;
  float v21;
  uint64_t v22;
  size_t v23;
  float32x4_t **v24;
  float32x4_t **v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  void **v52;
  void **v53;
  void **v54;
  int v56;
  void **v57;
  float32x4_t **v58;
  _BOOL4 v60;
  _BOOL4 v61;
  int v62;
  int v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *__p;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  float32x4_t *v76;
  float32x4_t *v77;
  float32x4_t *v78;

  v63 = a5 - 1;
  if (a5 >= 1)
  {
    v6 = 0;
    v57 = (void **)(a1 + 1648);
    v7 = (void **)(a1 + 1656);
    v52 = (void **)(a1 + 1680);
    v8 = a5;
    v54 = (void **)(a1 + 1672);
    v53 = (void **)(a1 + 1664);
    do
    {
      v9 = v7;
      v10 = v8 - 1;
      v62 = v10;
      if (*(_BYTE *)(a1 + 2672))
      {
        v10 = v6;
        v11 = v6 < v63;
      }
      else
      {
        v11 = v10 > 0;
      }
      v61 = v11;
      if (*(_BYTE *)(a1 + 2672))
        v12 = v10 > 0;
      else
        v12 = v10 < v63;
      if (*(_BYTE *)(a1 + 2672))
        v13 = v10 - 1;
      else
        v13 = v10 + 1;
      if (*(_BYTE *)(a1 + 2672))
        v14 = v10 + 1;
      else
        v14 = v10 - 1;
      v56 = v14;
      v15 = v10;
      memmove(*(void **)(*(_QWORD *)(a1 + 840) + 8 * v10), *(const void **)(*a4 + 8 * v10), 4 * *(int *)(a1 + 52));
      v60 = v12;
      if (v12)
      {
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 2560), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 936) + 8 * v13), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 840) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 2536), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 912) + 8 * v13), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 840) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 2544), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 888) + 8 * v13), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 840) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 2552), *(_DWORD *)(a1 + 52), *(const float **)(*(_QWORD *)(a1 + 864) + 8 * v13), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 840) + 8 * v15), 1);
      }
      v16 = *(float **)(*(_QWORD *)(a1 + 352) + 8 * v15);
      v17 = *(float **)(*(_QWORD *)(a1 + 376) + 8 * v15);
      v18 = *(float **)(*(_QWORD *)(a1 + 424) + 8 * v15);
      v19 = *(float **)(*(_QWORD *)(a1 + 400) + 8 * v15);
      v20 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v15);
      v77 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v15);
      v78 = v20;
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1640), v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::applyPrimeDerivative(v57, v17, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      v7 = v9;
      VVector<float>::applyPrimeDerivative(v9, v16, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::applyForwardActivation(v54, v18, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyPrimeDerivative(v53, v18, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyForwardActivation(v52, *(float **)(*(_QWORD *)(a1 + 88) + 8 * v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1688), *(float **)(*(_QWORD *)(a1 + 88) + 8 * v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 864) + 8 * v15), (float32x4_t **)(a1 + 1640), (float32x4_t **)v52, (float32x4_t **)(*(_QWORD *)(a1 + 840) + 8 * v15), *(_DWORD *)(a1 + 52));
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 960) + 8 * v15), (float32x4_t **)(a1 + 1688), &v77, (float32x4_t **)(*(_QWORD *)(a1 + 840) + 8 * v15), *(_DWORD *)(a1 + 52));
      VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(_QWORD *)(a1 + 864) + 8 * v15), *(float32x4_t ***)(a1 + 2584), *(_DWORD *)(a1 + 52));
      if (v60)
      {
        v76 = *(float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v13);
        VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(_QWORD *)(a1 + 888) + 8 * v13), *(float32x4_t ***)(a1 + 2576), *(_DWORD *)(a1 + 52));
        VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(_QWORD *)(a1 + 912) + 8 * v13), *(float32x4_t ***)(a1 + 2568), *(_DWORD *)(a1 + 52));
        VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v13), &v76, *(_DWORD *)(a1 + 52));
      }
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 936) + 8 * v15), (float32x4_t **)v53, (float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v15), &v78, *(_DWORD *)(a1 + 52));
      if (v61)
        VVector<float>::mul((void **)(*(_QWORD *)(a1 + 888) + 8 * v15), (float32x4_t **)v57, (float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v56), *(_DWORD *)(a1 + 52));
      v21 = VVector<float>::mul((void **)(*(_QWORD *)(a1 + 912) + 8 * v15), (float32x4_t **)v9, (float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v15), (float32x4_t **)v54, *(_DWORD *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t, float))a1)(a1, v21) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 816) + 8 * v15), 4 * *(int *)(a1 + 48));
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 2504), *(_DWORD *)(a1 + 48), *(const float **)(*(_QWORD *)(a1 + 912) + 8 * v15), 1, 0.0, *(float **)(*(_QWORD *)(a1 + 816) + 8 * v15), 1);
        if (v61)
          cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 2512), *(_DWORD *)(a1 + 48), *(const float **)(*(_QWORD *)(a1 + 888) + 8 * v15), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 816) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 2520), *(_DWORD *)(a1 + 48), *(const float **)(*(_QWORD *)(a1 + 864) + 8 * v15), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 816) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 2528), *(_DWORD *)(a1 + 48), *(const float **)(*(_QWORD *)(a1 + 936) + 8 * v15), 1, 1.0, *(float **)(*(_QWORD *)(a1 + 816) + 8 * v15), 1);
      }
      ++v6;
      v8 = v62;
    }
    while (v62 > 0);
  }
  v22 = *(unsigned int *)(a1 + 52);
  if ((int)v22 <= 0)
  {
    v24 = (float32x4_t **)(a1 + 1536);
    v25 = (float32x4_t **)(a1 + 1544);
  }
  else
  {
    v23 = 4 * v22;
    bzero(*(void **)(a1 + 1528), 4 * v22);
    v24 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v23);
    v25 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v23);
  }
  v58 = v25;
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
  if (a5 > 1)
  {
    v26 = 1;
    v27 = a5 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v28 = v27;
      else
        v28 = v26;
      if (*(_BYTE *)(a1 + 2672))
        v29 = 1;
      else
        v29 = -1;
      v30 = v28 + v29;
      if (*(_BYTE *)(a1 + 2672))
        v31 = a5 - 2;
      else
        v31 = 1;
      v32 = v28 == v31;
      VVector<float>::mulAddV((float32x4_t **)(a1 + 1528), (float32x4_t **)(*(_QWORD *)(a1 + 912) + 8 * v28), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v30), *(_DWORD *)(a1 + 52));
      VVector<float>::mulAddV(v24, (float32x4_t **)(*(_QWORD *)(a1 + 888) + 8 * v28), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v30), *(_DWORD *)(a1 + 52));
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 912) + 8 * v28), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v30), (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v32);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 888) + 8 * v28), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v30), (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v32);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 864) + 8 * v28), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v30), (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v32);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 936) + 8 * v28), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v30), (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v32);
      ++v26;
      --v27;
    }
    while (v27 != -1);
    v33 = 1;
    v34 = a5 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v35 = v34;
      else
        v35 = v33;
      if (*(_BYTE *)(a1 + 2672))
        v36 = a5 - 2;
      else
        v36 = 1;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 888) + 8 * v35), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v35), (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v35 == v36);
      }
      else
      {
        v37 = *(_QWORD *)(a1 + 888);
        v38 = *(_QWORD *)(a1 + 208) + 24 * v35;
        v74 = 0;
        v75 = 0;
        v73 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, *(const void **)v38, *(_QWORD *)(v38 + 8), (uint64_t)(*(_QWORD *)(v38 + 8) - *(_QWORD *)v38) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1104, *(int **)(v37 + 8 * v35), (uint64_t)v73, *(_DWORD *)(a1 + 52));
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
      }
      ++v33;
      --v34;
    }
    while (v34 != -1);
  }
  if (a5 >= 1)
  {
    v39 = 0;
    v40 = v63;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v41 = v40;
      else
        v41 = v39;
      if (*(_BYTE *)(a1 + 2672))
        v42 = v63;
      else
        v42 = 0;
      v43 = v41;
      VVector<float>::mulAddV(v58, (float32x4_t **)(*(_QWORD *)(a1 + 864) + 8 * v41), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v41), *(_DWORD *)(a1 + 52));
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        v50 = v43 == v42;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 912) + 8 * v43), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v43), (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v50);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 864) + 8 * v43), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v43), (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v50);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 936) + 8 * v43), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v43), (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v50);
      }
      else
      {
        v44 = *(_QWORD *)(a1 + 912);
        v45 = *(_QWORD *)(a1 + 208) + 24 * (int)v43;
        v71 = 0;
        v72 = 0;
        v70 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v70, *(const void **)v45, *(_QWORD *)(v45 + 8), (uint64_t)(*(_QWORD *)(v45 + 8) - *(_QWORD *)v45) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 984, *(int **)(v44 + 8 * v43), (uint64_t)v70, *(_DWORD *)(a1 + 52));
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        v46 = *(_QWORD *)(a1 + 864);
        v47 = *(_QWORD *)(a1 + 208) + 24 * (int)v43;
        v68 = 0;
        v69 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v47, *(_QWORD *)(v47 + 8), (uint64_t)(*(_QWORD *)(v47 + 8) - *(_QWORD *)v47) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1224, *(int **)(v46 + 8 * v43), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          v68 = __p;
          operator delete(__p);
        }
        v48 = *(_QWORD *)(a1 + 936);
        v49 = *(_QWORD *)(a1 + 208) + 24 * (int)v43;
        v65 = 0;
        v66 = 0;
        v64 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, *(const void **)v49, *(_QWORD *)(v49 + 8), (uint64_t)(*(_QWORD *)(v49 + 8) - *(_QWORD *)v49) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1344, *(int **)(v48 + 8 * v43), (uint64_t)v64, *(_DWORD *)(a1 + 52));
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
      }
      ++v39;
      --v40;
    }
    while (v40 != -1);
  }
}

void LSTM<float>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  signed int v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  BOOL v31;
  int v32;
  _BOOL4 v33;
  BOOL v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  float32x4_t **v40;
  int v41;
  uint64_t v42;
  vDSP_Length v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  float32x4_t **v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  float32x4_t **v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  vDSP_Length v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  float32x4_t **v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  float32x4_t **v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  float *v79;
  float *v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;
  vDSP_Length v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  float32x4_t **v89;
  int v90;
  uint64_t v91;
  _QWORD *v92;
  float32x4_t **v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  vDSP_Length v97;
  BOOL v98;
  uint64_t *v99;
  int v100;
  signed int v101;
  char v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _BOOL4 v110;
  void *v111;
  char v112;
  void *v113;
  char v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *__p;
  char v120;
  void *v121;
  char v122;
  void *v123[2];
  char v124;
  float v125;
  float v126[3];

  if (a4 < 0x2000000)
    v8 = 1;
  else
    v8 = HIBYTE(a4);
  v9 = *(_QWORD *)(a1 + 2680);
  if (v9)
    v98 = *(_BYTE *)(v9 + 600) != 0;
  else
    v98 = 0;
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
  {
    v10 = 0;
    if (!v9)
    {
LABEL_13:
      v11 = 50.0;
      goto LABEL_14;
    }
  }
  else
  {
    v10 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = *(_QWORD *)(a1 + 2680);
    if (!v9)
      goto LABEL_13;
  }
  v11 = *(float *)(v9 + 604);
  if (v11 <= 0.0)
    goto LABEL_13;
LABEL_14:
  v12 = *(unsigned __int8 *)(a1 + 2672);
  std::string::basic_string[abi:ne180100]<0>(v123, "LSTMv2");
  if (a5 && v12)
    exitFramework(34);
  v13 = a4 & 0xFFFFFF;
  if (v124 < 0)
    operator delete(v123[0]);
  if (a5)
    v14 = *(_BYTE *)(a1 + 42) == 0;
  else
    v14 = 0;
  v15 = v14;
  if (v13 > v15)
  {
    v100 = a4 & 0xFFFFFF;
    v101 = v13 - 1;
    v99 = (uint64_t *)(a1 + 752);
    v106 = v10;
    while (1)
    {
      v16 = v13 + ~v15;
      if (!*(_BYTE *)(a1 + 2672))
        v16 = v15;
      v17 = v16;
      if (*(_BYTE *)(a1 + 2672))
        v18 = v16 < v101;
      else
        v18 = v16 > 0;
      v110 = v18;
      if (*(_BYTE *)(a1 + 2672))
        v19 = v17 + 1;
      else
        v19 = v17 - 1;
      v108 = v19;
      v20 = *(unsigned __int8 *)(a1 + 42);
      if (((*(_BYTE *)(a1 + 42) != 0) & v10) != 0)
        v21 = 1;
      else
        v21 = v17;
      v22 = *(_QWORD *)(a1 + 64);
      if (v10)
      {
        bzero(*(void **)(v22 + 8 * v21), 4 * *(int *)(a1 + 48));
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v21) + 4 * **(int **)(*a3 + 24 * (int)v17)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v22 + 8 * v21), *(const void **)(*a2 + 8 * v21), 4 * *(int *)(a1 + 44));
      }
      v23 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v21) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      if (v10)
      {
        v24 = *(_DWORD *)(a1 + 48);
        v25 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v17);
        *v25 = **(_DWORD **)(*a3 + 24 * v17);
        if (v23)
          v25[1] = v24 - 1;
      }
      v26 = *(_QWORD *)(a1 + 136);
      if (v8 == 1)
        memcpy(*(void **)(v26 + 8 * v21), *(const void **)(*(_QWORD *)(a1 + 64) + 8 * v21), 4 * *(int *)(a1 + 48));
      else
        memmove(*(void **)(v26 + 8 * v21), *(const void **)(*a2 + 8 * v21), 4 * *(_DWORD *)(a1 + 44) * v8);
      if (v8 > *(_DWORD *)(a1 + 2688))
        exitFramework(83724);
      if (v20)
        v27 = 1;
      else
        v27 = v17;
      if (*(_BYTE *)(a1 + 2692))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 544) + 8 * v27), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 568) + 8 * v27), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 616) + 8 * v27), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 592) + 8 * v27), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(_QWORD *)(a1 + 352) + 8 * v27), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + 8 * v27), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + 8 * v27), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v27), 4 * *(_DWORD *)(a1 + 52) * v8);
      v28 = *(_QWORD *)(a1 + 2680);
      v105 = v15;
      if (!v28)
      {
LABEL_72:
        v32 = 0;
        v34 = !v110;
LABEL_73:
        v37 = *(_QWORD *)(a1 + 208) + 24 * (int)v17;
        LSTM<float>::computeXTimesWSparseOrDense(a1, v10, (const float **)(*(_QWORD *)(a1 + 424) + 8 * v27), *(const float **)(*(_QWORD *)(a1 + 136) + 8 * v21), *(uint64_t **)(a1 + 2528), *(const void **)v37, *(_QWORD *)(v37 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        v109 = 0;
LABEL_74:
        v36 = 1;
        if (!v34 && (v32 & 1) == 0)
        {
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, *(const float **)(*(_QWORD *)(a1 + 160) + 8 * (int)v108), *(_DWORD *)(a1 + 52), **(const float ***)(a1 + 2560), *(_DWORD *)(a1 + 52), 1.0, *(float **)(*(_QWORD *)(a1 + 424) + 8 * v27), *(_DWORD *)(a1 + 52));
          v36 = 0;
          v32 = 0;
        }
        goto LABEL_77;
      }
      v29 = *(_DWORD *)(v28 + 40);
      v30 = !*(_BYTE *)(v28 + 20) && (v29 == 5 || v29 == 2) && *(_DWORD *)(v28 + 44) == 6;
      if (v29 != 5 && v29 != 2)
        break;
      v31 = *(_DWORD *)(v28 + 60) == 22;
      v32 = v31;
      if (v30)
        goto LABEL_69;
      v33 = v110;
      v34 = !v110;
      if (!v31)
        v33 = 0;
      if (!v33)
        goto LABEL_73;
      v109 = 0;
LABEL_70:
      v35 = v109;
      LSTM<float>::computeXTimesWSparseOrDenseCombined(a1, (_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v27), (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v27), (_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v27), (_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v27), (const float **)(*(_QWORD *)(a1 + 160) + 8 * (int)v108), *(const float ***)(a1 + 2536), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
      v32 = 1;
      v36 = 1;
      v109 = 1;
      if ((v35 & 1) == 0)
        goto LABEL_73;
LABEL_77:
      v104 = v36;
      v107 = v21;
      v38 = *(_QWORD *)(a1 + 2680);
      v39 = (_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v27);
      v40 = *(float32x4_t ***)(a1 + 2608);
      v41 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(v123, "cix");
      LSTM<float>::addOptionalBiasVector(v38, v39, v40, v8, v41);
      if (v124 < 0)
        operator delete(v123[0]);
      v42 = *(_QWORD *)(a1 + 424);
      v43 = *(int *)(a1 + 52) * (uint64_t)v8;
      v125 = 50.0;
      v126[0] = -50.0;
      vDSP_vclip(*(const float **)(v42 + 8 * v27), 1, v126, &v125, *(float **)(v42 + 8 * v27), 1, v43);
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 520) + 8 * v27), (uint64_t *)(*(_QWORD *)(a1 + 424) + 8 * v27), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      if ((v109 & 1) == 0)
      {
        v44 = *(_QWORD *)(a1 + 208) + 24 * (int)v17;
        LSTM<float>::computeXTimesWSparseOrDense(a1, v10, (const float **)(*(_QWORD *)(a1 + 352) + 8 * v27), *(const float **)(*(_QWORD *)(a1 + 136) + 8 * v107), *(uint64_t **)(a1 + 2504), *(const void **)v44, *(_QWORD *)(v44 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      }
      v45 = *(_QWORD *)(a1 + 2680);
      v46 = (_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v27);
      v47 = *(float32x4_t ***)(a1 + 2592);
      v48 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v121, "gix");
      LSTM<float>::addOptionalBiasVector(v45, v46, v47, v8, v48);
      if (v122 < 0)
        operator delete(v121);
      if (v110)
      {
        if (v32)
        {
          v49 = (int)v108;
        }
        else
        {
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, *(const float **)(*(_QWORD *)(a1 + 160) + 8 * v108), *(_DWORD *)(a1 + 52), **(const float ***)(a1 + 2536), *(_DWORD *)(a1 + 52), 1.0, *(float **)(*(_QWORD *)(a1 + 352) + 8 * v27), *(_DWORD *)(a1 + 52));
          v49 = v108;
        }
        v50 = *(_QWORD *)(a1 + 2680);
        v51 = (_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v27);
        v52 = *(float32x4_t ***)(a1 + 2568);
        v53 = (_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v49);
        v54 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&__p, "gix");
        LSTM<float>::addOptionalPeepholeVector(a1, v50, v51, v52, v53, v8, v54);
        v10 = v106;
        if (v120 < 0)
          operator delete(__p);
      }
      v55 = *(_QWORD *)(a1 + 352);
      v56 = *(int *)(a1 + 52) * (uint64_t)v8;
      v125 = 50.0;
      v126[0] = -50.0;
      vDSP_vclip(*(const float **)(v55 + 8 * v27), 1, v126, &v125, *(float **)(v55 + 8 * v27), 1, v56);
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 448) + 8 * v27), (uint64_t *)(*(_QWORD *)(a1 + 352) + 8 * v27), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      if ((v109 & 1) == 0)
      {
        v57 = *(_QWORD *)(a1 + 208) + 24 * (int)v17;
        LSTM<float>::computeXTimesWSparseOrDense(a1, v10, (const float **)(*(_QWORD *)(a1 + 376) + 8 * v27), *(const float **)(*(_QWORD *)(a1 + 136) + 8 * v107), *(uint64_t **)(a1 + 2512), *(const void **)v57, *(_QWORD *)(v57 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      }
      v58 = *(_QWORD *)(a1 + 2680);
      v59 = (_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v27);
      v60 = *(float32x4_t ***)(a1 + 2600);
      v61 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v117, "gfx");
      LSTM<float>::addOptionalBiasVector(v58, v59, v60, v8, v61);
      if (v118 < 0)
        operator delete(v117);
      v62 = v107;
      if (v110)
      {
        if (v32)
        {
          v63 = (int)v108;
        }
        else
        {
          v63 = (int)v108;
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, *(const float **)(*(_QWORD *)(a1 + 160) + 8 * (int)v108), *(_DWORD *)(a1 + 52), **(const float ***)(a1 + 2544), *(_DWORD *)(a1 + 52), 1.0, *(float **)(*(_QWORD *)(a1 + 376) + 8 * v27), *(_DWORD *)(a1 + 52));
        }
        v64 = *(_QWORD *)(a1 + 2680);
        v65 = (_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v27);
        v66 = *(float32x4_t ***)(a1 + 2576);
        v67 = (_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v63);
        v68 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&v115, "gfx");
        LSTM<float>::addOptionalPeepholeVector(a1, v64, v65, v66, v67, v8, v68);
        v10 = v106;
        v62 = v107;
        if (v116 < 0)
          operator delete(v115);
      }
      v69 = *(_QWORD *)(a1 + 2680);
      if (v69)
      {
        v70 = *(unsigned __int8 *)(v69 + 601);
        v71 = *(_DWORD *)(a1 + 52);
        v72 = v105;
        if (v70)
        {
          v73 = (v71 * v8);
          if ((int)v73 >= 1)
          {
            v74 = *(float **)(*(_QWORD *)(a1 + 376) + 8 * v27);
            do
            {
              *v74 = *v74 + 1.0;
              ++v74;
              --v73;
            }
            while (v73);
          }
        }
      }
      else
      {
        v71 = *(_DWORD *)(a1 + 52);
        v72 = v105;
      }
      v75 = *(_QWORD *)(a1 + 376);
      v125 = 50.0;
      v126[0] = -50.0;
      vDSP_vclip(*(const float **)(v75 + 8 * v27), 1, v126, &v125, *(float **)(v75 + 8 * v27), 1, v71 * v8);
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 472) + 8 * v27), (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v27), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::mulV((float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v17), (float32x4_t **)(*(_QWORD *)(a1 + 520) + 8 * v27), (float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v27), *(_DWORD *)(a1 + 52) * v8);
      if (v110)
      {
        if (v98)
        {
          v76 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v76 >= 1)
          {
            v77 = *(_QWORD *)(a1 + 184);
            v78 = *(float **)(v77 + 8 * (int)v108);
            v79 = *(float **)(*(_QWORD *)(a1 + 448) + 8 * v27);
            v80 = *(float **)(v77 + 8 * v17);
            do
            {
              v81 = *v78++;
              v82 = v81;
              v83 = *v79++;
              *v80 = *v80 + (float)(v82 * (float)(1.0 - v83));
              ++v80;
              --v76;
            }
            while (v76);
          }
        }
        else
        {
          VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v17), (float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v27), (float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * (int)v108), *(_DWORD *)(a1 + 52) * v8);
        }
      }
      v84 = *(_QWORD *)(a1 + 184);
      v85 = *(int *)(a1 + 52) * (uint64_t)v8;
      v125 = v11;
      v126[0] = -v11;
      vDSP_vclip(*(const float **)(v84 + 8 * v17), 1, v126, &v125, *(float **)(v84 + 8 * v17), 1, v85);
      if ((v109 & 1) == 0)
      {
        v86 = *(_QWORD *)(a1 + 208) + 24 * (int)v17;
        LSTM<float>::computeXTimesWSparseOrDense(a1, v10, (const float **)(*(_QWORD *)(a1 + 400) + 8 * v27), *(const float **)(*(_QWORD *)(a1 + 136) + 8 * v62), *(uint64_t **)(a1 + 2520), *(const void **)v86, *(_QWORD *)(v86 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      }
      v87 = *(_QWORD *)(a1 + 2680);
      v88 = (_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v27);
      v89 = *(float32x4_t ***)(a1 + 2616);
      v90 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v113, "gox");
      LSTM<float>::addOptionalBiasVector(v87, v88, v89, v8, v90);
      if (v114 < 0)
        operator delete(v113);
      if ((v104 & 1) == 0)
        cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, *(const float **)(*(_QWORD *)(a1 + 160) + 8 * (int)v108), *(_DWORD *)(a1 + 52), **(const float ***)(a1 + 2552), *(_DWORD *)(a1 + 52), 1.0, *(float **)(*(_QWORD *)(a1 + 400) + 8 * v27), *(_DWORD *)(a1 + 52));
      v91 = *(_QWORD *)(a1 + 2680);
      v92 = (_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v27);
      v93 = *(float32x4_t ***)(a1 + 2584);
      v94 = (_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v17);
      v95 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v111, "gox");
      LSTM<float>::addOptionalPeepholeVector(a1, v91, v92, v93, v94, v8, v95);
      if (v112 < 0)
        operator delete(v111);
      v96 = *(_QWORD *)(a1 + 400);
      v97 = *(int *)(a1 + 52) * (uint64_t)v8;
      v125 = 50.0;
      v126[0] = -50.0;
      vDSP_vclip(*(const float **)(v96 + 8 * v27), 1, v126, &v125, *(float **)(v96 + 8 * v27), 1, v97);
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 496) + 8 * v27), (uint64_t *)(*(_QWORD *)(a1 + 400) + 8 * v27), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      applyForwardActivation(v99, (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * v17), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mulV((float32x4_t **)(*(_QWORD *)(a1 + 160) + 8 * v17), (float32x4_t **)v99, (float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v27), *(_DWORD *)(a1 + 52) * v8);
      v10 = v106;
      v13 = v100;
      if (*(_BYTE *)(a1 + 2692))
      {
        memcpy(*(void **)(*(_QWORD *)(a1 + 112) + 8 * v17), *(const void **)(*(_QWORD *)(a1 + 160) + 8 * v17), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v17), *(const void **)(*(_QWORD *)(a1 + 184) + 8 * v17), 4 * *(int *)(a1 + 52));
      }
      v15 = v72 + 1;
      if (v15 == v100)
        return;
    }
    if (!v30)
      goto LABEL_72;
    v32 = 0;
LABEL_69:
    LSTM<float>::computeXTimesWSparseOrDenseCombined(a1, (_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v27), (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v27), (_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v27), (_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v27), (const float **)(*(_QWORD *)(a1 + 136) + 8 * v21), *(const float ***)(a1 + 2504), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
    v34 = !v110;
    v109 = 1;
    if ((v110 & v32 & 1) == 0)
      goto LABEL_74;
    goto LABEL_70;
  }
}

void sub_191569AFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<float>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2672] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      LSTM<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A7D8 = 0;
      qword_1EE21A7E0 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &LSTM<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &LSTM<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2672] = 0;
  return result;
}

uint64_t LSTM<float>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[2672] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *LSTM<float>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2496) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 2504) = result + 232;
  *(_QWORD *)(a1 + 2520) = result + 248;
  *(_QWORD *)(a1 + 2512) = result + 240;
  *(_QWORD *)(a1 + 2528) = result + 256;
  *(_QWORD *)(a1 + 2536) = result + 264;
  *(_QWORD *)(a1 + 2552) = result + 280;
  *(_QWORD *)(a1 + 2544) = result + 272;
  *(_QWORD *)(a1 + 2560) = result + 288;
  *(_QWORD *)(a1 + 2568) = result + 296;
  *(_QWORD *)(a1 + 2576) = result + 304;
  *(_QWORD *)(a1 + 2584) = result + 312;
  *(_QWORD *)(a1 + 2592) = result + 320;
  *(_QWORD *)(a1 + 2600) = result + 328;
  *(_QWORD *)(a1 + 2608) = result + 336;
  *(_QWORD *)(a1 + 2616) = result + 344;
  return result;
}

uint64_t LSTM<float>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;
  int v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float v18;
  int v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float __C;
  float __B;

  if (*(_DWORD *)(a1 + 2496))
    exitFramework(1);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 232), (uint64_t)(v5 + 366), v5 + 246, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 1552), a1 + 1704, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 248), (uint64_t)(v6 + 370), v6 + 306, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 1568), a1 + 1776, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 240), (uint64_t)(v6 + 368), v6 + 276, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 1560), a1 + 1848, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 256), (uint64_t)(v6 + 372), v6 + 336, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 1576), a1 + 1920, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 264), (uint64_t)(v6 + 374), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 1584), a1 + 1992, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 280), (uint64_t)(v6 + 378), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 1600), a1 + 2064, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 272), (uint64_t)(v6 + 376), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 1592), a1 + 2136, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 288), (uint64_t)(v6 + 380), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 1608), a1 + 2208, a3);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2288));
  v7 = *(_DWORD *)(a1 + 52);
  v8 = *(float **)(a1 + 296);
  if (v7 >= 1)
  {
    v9 = (float *)*((_QWORD *)v6 + 191);
    v10 = *(float **)(a1 + 296);
    v11 = *(unsigned int *)(a1 + 52);
    do
    {
      v12 = *v9++;
      *v10 = *v10 + (float)(a3 * v12);
      ++v10;
      --v11;
    }
    while (v11);
  }
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(v8, 1, &__B, &__C, v8, 1, v7);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2288));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2360));
  v13 = *(_DWORD *)(a1 + 52);
  v14 = *(float **)(a1 + 312);
  if (v13 >= 1)
  {
    v15 = (float *)*((_QWORD *)v6 + 193);
    v16 = *(float **)(a1 + 312);
    v17 = *(unsigned int *)(a1 + 52);
    do
    {
      v18 = *v15++;
      *v16 = *v16 + (float)(a3 * v18);
      ++v16;
      --v17;
    }
    while (v17);
  }
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(v14, 1, &__B, &__C, v14, 1, v13);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2360));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2432));
  v19 = *(_DWORD *)(a1 + 52);
  v20 = *(float **)(a1 + 304);
  if (v19 >= 1)
  {
    v21 = (float *)*((_QWORD *)v6 + 192);
    v22 = *(float **)(a1 + 304);
    v23 = *(unsigned int *)(a1 + 52);
    do
    {
      v24 = *v21++;
      *v22 = *v22 + (float)(a3 * v24);
      ++v22;
      --v23;
    }
    while (v23);
  }
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(v20, 1, &__B, &__C, v20, 1, v19);
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2432));
}

void LSTM<float>::computeError()
{
  exitFramework(1);
}

void LSTM<float>::log2Probability()
{
  exitFramework(0);
}

void LSTM<float>::~LSTM(uint64_t a1)
{
  LSTM<float>::~LSTM(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t LSTM<float>::~LSTM(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void **v44;

  *(_QWORD *)a1 = off_1E2D57FD0;
  LSTM<float>::cleanupAllBuffers((_QWORD *)a1);
  v2 = *(_QWORD *)(a1 + 1552);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    *(_QWORD *)(a1 + 1552) = 0;
    v3 = *(_QWORD *)(a1 + 1560);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
    *(_QWORD *)(a1 + 1560) = 0;
    v4 = *(_QWORD *)(a1 + 1568);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    *(_QWORD *)(a1 + 1568) = 0;
    v5 = *(_QWORD *)(a1 + 1576);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    *(_QWORD *)(a1 + 1576) = 0;
    v6 = *(_QWORD *)(a1 + 1584);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    *(_QWORD *)(a1 + 1584) = 0;
    v7 = *(_QWORD *)(a1 + 1592);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
    *(_QWORD *)(a1 + 1592) = 0;
    v8 = *(_QWORD *)(a1 + 1600);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8);
    *(_QWORD *)(a1 + 1600) = 0;
    v9 = *(_QWORD *)(a1 + 1608);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
    *(_QWORD *)(a1 + 1608) = 0;
  }
  v10 = *(void **)(a1 + 2648);
  if (v10)
  {
    *(_QWORD *)(a1 + 2656) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 2624);
  if (v11)
  {
    *(_QWORD *)(a1 + 2632) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 2424) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2432));
  *(_QWORD *)(a1 + 2352) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2360));
  *(_QWORD *)(a1 + 2280) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2288));
  *(_QWORD *)(a1 + 2208) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2216));
  *(_QWORD *)(a1 + 2136) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2144));
  *(_QWORD *)(a1 + 2064) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2072));
  *(_QWORD *)(a1 + 1992) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2000));
  *(_QWORD *)(a1 + 1920) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1928));
  *(_QWORD *)(a1 + 1848) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1856));
  *(_QWORD *)(a1 + 1776) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1784));
  *(_QWORD *)(a1 + 1704) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1712));
  SparseMatrix<float>::~SparseMatrix(a1 + 1344);
  SparseMatrix<float>::~SparseMatrix(a1 + 1224);
  SparseMatrix<float>::~SparseMatrix(a1 + 1104);
  SparseMatrix<float>::~SparseMatrix(a1 + 984);
  v12 = *(void **)(a1 + 960);
  if (v12)
  {
    *(_QWORD *)(a1 + 968) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 936);
  if (v13)
  {
    *(_QWORD *)(a1 + 944) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 912);
  if (v14)
  {
    *(_QWORD *)(a1 + 920) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 888);
  if (v15)
  {
    *(_QWORD *)(a1 + 896) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 864);
  if (v16)
  {
    *(_QWORD *)(a1 + 872) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 840);
  if (v17)
  {
    *(_QWORD *)(a1 + 848) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 816);
  if (v18)
  {
    *(_QWORD *)(a1 + 824) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 792);
  if (v19)
  {
    *(_QWORD *)(a1 + 800) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 712);
  if (v20)
  {
    *(_QWORD *)(a1 + 720) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 688);
  if (v21)
  {
    *(_QWORD *)(a1 + 696) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 664);
  if (v22)
  {
    *(_QWORD *)(a1 + 672) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 640);
  if (v23)
  {
    *(_QWORD *)(a1 + 648) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 616);
  if (v24)
  {
    *(_QWORD *)(a1 + 624) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 592);
  if (v25)
  {
    *(_QWORD *)(a1 + 600) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 568);
  if (v26)
  {
    *(_QWORD *)(a1 + 576) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 544);
  if (v27)
  {
    *(_QWORD *)(a1 + 552) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 520);
  if (v28)
  {
    *(_QWORD *)(a1 + 528) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 496);
  if (v29)
  {
    *(_QWORD *)(a1 + 504) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 472);
  if (v30)
  {
    *(_QWORD *)(a1 + 480) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(a1 + 448);
  if (v31)
  {
    *(_QWORD *)(a1 + 456) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(a1 + 424);
  if (v32)
  {
    *(_QWORD *)(a1 + 432) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(a1 + 400);
  if (v33)
  {
    *(_QWORD *)(a1 + 408) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(a1 + 376);
  if (v34)
  {
    *(_QWORD *)(a1 + 384) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(a1 + 352);
  if (v35)
  {
    *(_QWORD *)(a1 + 360) = v35;
    operator delete(v35);
  }
  v44 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v44);
  v36 = *(void **)(a1 + 184);
  if (v36)
  {
    *(_QWORD *)(a1 + 192) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(a1 + 160);
  if (v37)
  {
    *(_QWORD *)(a1 + 168) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(a1 + 136);
  if (v38)
  {
    *(_QWORD *)(a1 + 144) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(a1 + 112);
  if (v39)
  {
    *(_QWORD *)(a1 + 120) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(a1 + 88);
  if (v40)
  {
    *(_QWORD *)(a1 + 96) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(a1 + 64);
  if (v41)
  {
    *(_QWORD *)(a1 + 72) = v41;
    operator delete(v41);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v42 = *(void **)(a1 + 8);
  if (v42)
  {
    *(_QWORD *)(a1 + 16) = v42;
    operator delete(v42);
  }
  return a1;
}

void LSTM<float>::computeXTimesWSparseOrDenseCombined(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, const float **a6, const float **a7, int __M, int a9, int __lda)
{
  int v10;
  _QWORD *v13;
  int __ldc;
  float *__C;
  int v19;
  void *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int *v47;
  uint64_t v48;
  int v49;
  _QWORD *v51;
  _QWORD v53[5];

  v10 = __M;
  v13 = a4;
  v53[4] = *MEMORY[0x1E0C80C00];
  __ldc = 4 * a9;
  __C = *(float **)(a1 + 784);
  if (!__C)
  {
    v51 = a5;
    v19 = *(_DWORD *)(a1 + 2688) * __ldc;
    v20 = (void *)operator new[]();
    bzero(v20, 4 * v19);
    *(_QWORD *)(a1 + 784) = v20;
    v21 = *(_QWORD **)(a1 + 2632);
    v22 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v21 >= v22)
    {
      v24 = *(_QWORD *)(a1 + 2624);
      v25 = ((uint64_t)v21 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v26 = v22 - v24;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v28);
      else
        v29 = 0;
      v30 = (_QWORD *)(v28 + 8 * v25);
      v31 = v28 + 8 * v29;
      *v30 = v20;
      v23 = v30 + 1;
      v32 = *(char **)(a1 + 2632);
      v33 = *(char **)(a1 + 2624);
      if (v32 == v33)
      {
        v10 = __M;
      }
      else
      {
        v10 = __M;
        do
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *--v30 = v34;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v30;
      *(_QWORD *)(a1 + 2632) = v23;
      *(_QWORD *)(a1 + 2640) = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v21 = v20;
      v23 = v21 + 1;
      v10 = __M;
    }
    __ldc = 4 * a9;
    *(_QWORD *)(a1 + 2632) = v23;
    __C = *(float **)(a1 + 784);
    v13 = a4;
    a5 = v51;
  }
  v35 = __ldc;
  v36 = a5;
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v10, __ldc, __lda, 1.0, *a6, __lda, *a7, __lda, 0.0, __C, __ldc);
  v37 = 0;
  v38 = 0;
  v39 = *a3;
  v53[0] = *a2;
  v53[1] = v39;
  v40 = *v36;
  v53[2] = *v13;
  v53[3] = v40;
  v41 = 4 * a9;
  v42 = 4 * v35;
  do
  {
    bzero(*(void **)(a1 + 752), 4 * a9 * v10);
    if (v10 >= 1)
    {
      v43 = 0;
      v44 = 0;
      v45 = v37;
      do
      {
        if (a9 >= 1)
        {
          v46 = (_DWORD *)(*(_QWORD *)(a1 + 752) + v43);
          v47 = (int *)(*(_QWORD *)(a1 + 784) + v45);
          v48 = a9;
          do
          {
            v49 = *v47++;
            *v46++ = v49;
            --v48;
          }
          while (v48);
        }
        ++v44;
        v43 += v41;
        v45 += v42;
      }
      while (v44 != v10);
    }
    vDSP_vadd(*(const float **)(a1 + 752), 1, (const float *)v53[v38], 1, (float *)v53[v38], 1, a9 * v10);
    ++v38;
    v37 += v41;
  }
  while (v38 != 4);
}

void LSTM<float>::computeXTimesWSparseOrDense(uint64_t a1, int a2, const float **a3, const float *__A, uint64_t *a5, const void *a6, uint64_t a7, int __M, int __ldc, int __ldb)
{
  const float **v14;
  void *__p;
  int *v16;
  uint64_t v17;

  if (a2)
  {
    if (__M != 1)
      exitFramework(502);
    v14 = (const float **)(a1 + 760);
    __p = 0;
    v16 = 0;
    v17 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a6, a7, (a7 - (uint64_t)a6) >> 2);
    VVector<float>::internalMul((float **)(a1 + 760), (int *)__p, v16, *a5, __ldc, __ldb);
    if (__p)
    {
      v16 = (int *)__p;
      operator delete(__p);
    }
    vDSP_vadd(*v14, 1, *a3, 1, (float *)*a3, 1, __ldc);
  }
  else
  {
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M, __ldc, __ldb, 1.0, __A, __ldb, (const float *)*a5, __ldb, 0.0, *(float **)(a1 + 752), __ldc);
    vDSP_vadd(*(const float **)(a1 + 752), 1, *a3, 1, (float *)*a3, 1, __ldc * __M);
  }
}

void LSTM<float>::addOptionalBiasVector(uint64_t a1, _QWORD *a2, float32x4_t **a3, int a4, int a5)
{
  BOOL v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 244))
      v5 = a4 < 1;
    else
      v5 = 1;
    if (!v5)
    {
      v9 = 0;
      v10 = 4 * a5;
      v11 = a4;
      do
      {
        v12 = (float32x4_t *)(*a2 + v9);
        VVector<float>::add<float>(&v12, a3, a5);
        v9 += v10;
        --v11;
      }
      while (v11);
    }
  }
}

void LSTM<float>::addOptionalPeepholeVector(uint64_t a1, uint64_t a2, _QWORD *a3, float32x4_t **a4, _QWORD *a5, int a6, int a7)
{
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t *v16;

  if (!a2)
  {
    if (a6 < 1)
      return;
    goto LABEL_9;
  }
  if (*(_BYTE *)(a2 + 520))
    v11 = a6 <= 0;
  else
    v11 = 1;
  if (!v11)
  {
LABEL_9:
    v12 = 0;
    v13 = 4 * a7;
    v14 = a6;
    do
    {
      v16 = (float32x4_t *)(*a3 + v12);
      v15 = (float32x4_t *)(*a5 + v12);
      VVector<float>::mulAddV(&v16, a4, &v15, *(_DWORD *)(a1 + 52));
      v12 += v13;
      --v14;
    }
    while (v14);
  }
}

float32_t VVector<float>::mul(void **a1, float32x4_t **a2, float32x4_t **a3, float32x4_t **a4, int a5)
{
  float32x4_t v10;
  int v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  int v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int v25;
  uint64_t v26;
  float *v27;
  float *f32;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  bzero(*a1, 4 * a5);
  v11 = a5 / 8;
  if (a5 >= 8)
  {
    v12 = (float32x4_t *)*a1;
    v13 = *a4;
    v14 = *a3;
    v15 = a5 / 8;
    v16 = *a2;
    do
    {
      v18 = *v16;
      v17 = v16[1];
      v16 += 2;
      v20 = *v14;
      v19 = v14[1];
      v14 += 2;
      v21 = vmulq_f32(v18, v20);
      v10 = vmulq_f32(v17, v19);
      v22 = *v13;
      v23 = v13[1];
      v13 += 2;
      v24 = vmlaq_f32(v12[1], v23, v10);
      *v12 = vmlaq_f32(*v12, v22, v21);
      v12[1] = v24;
      v12 += 2;
      --v15;
    }
    while (v15);
  }
  v25 = 8 * v11;
  if (8 * v11 < a5)
  {
    v26 = a5 - (uint64_t)v25;
    v27 = (float *)((char *)*a1 + 4 * v25);
    f32 = (*a4)[v25 / 4u].f32;
    v29 = (*a3)[v25 / 4u].f32;
    v30 = (*a2)[v25 / 4u].f32;
    do
    {
      v31 = *v30++;
      v32 = v31;
      v33 = *v29++;
      v34 = v33;
      v35 = *f32++;
      v10.f32[0] = *v27 + (float)((float)(v32 * v34) * v35);
      *v27++ = v10.f32[0];
      --v26;
    }
    while (v26);
  }
  return v10.f32[0];
}

uint64_t LSTM<signed char>::LSTM(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  _OWORD *v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  float v19;
  float v20;
  double v21;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *__p[2];
  char v50;
  __int128 v51;
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  __int128 v63;
  char v64;
  __int128 v65;
  char v66;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D57E48;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  v14 = (_OWORD *)(a1 + 1640);
  *(_BYTE *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *v14 = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_QWORD *)(a1 + 1704) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1712), 0);
  *(_QWORD *)(a1 + 1776) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1784), 0);
  *(_QWORD *)(a1 + 1848) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1856), 0);
  *(_QWORD *)(a1 + 1920) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1928), 0);
  *(_QWORD *)(a1 + 1992) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2000), 0);
  *(_QWORD *)(a1 + 2064) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2072), 0);
  *(_QWORD *)(a1 + 2136) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2144), 0);
  *(_QWORD *)(a1 + 2208) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2216), 0);
  *(_QWORD *)(a1 + 2280) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2288), 0);
  *(_QWORD *)(a1 + 2352) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2360), 0);
  *(_QWORD *)(a1 + 2424) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2432), 0);
  *(_DWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v15 = 1;
  *(_BYTE *)(a1 + 2692) = 1;
  *(_BYTE *)(a1 + 2672) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2680) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    v15 = *(_DWORD *)(a8 + 28);
    v16 = a7 ^ 1;
  }
  else
  {
    v16 = 1;
  }
  *(_DWORD *)(a1 + 2688) = v15;
  *(_BYTE *)(a1 + 40) = a7;
  v17 = *(unsigned __int8 *)(a6 + 45);
  *(_BYTE *)(a1 + 1696) = v17;
  *(_BYTE *)(a1 + 1697) = *(_BYTE *)(a6 + 46);
  v18 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v18[1];
  *(_DWORD *)(a1 + 744) = v18[2];
  if (!a7)
    v16 = 0;
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2672) = 1;
    v17 = *(unsigned __int8 *)(a1 + 1696);
  }
  v19 = *(float *)(a6 + 16);
  v20 = *(float *)(a6 + 20);
  v21 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v19;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_QWORD *)(a1 + 1632) = 0;
  if (!v17)
  {
    v23 = (uint64_t *)(a1 + 1552);
    v24 = *(_DWORD *)(a6 + 32);
    if (v24 == 2)
    {
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI");
      EstimatorAdaMax<float>::EstimatorAdaMax(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *v23 = v34;
      if (v50 < 0)
        operator delete(__p[0]);
      v35 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v35, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1568) = v35;
      if (v50 < 0)
        operator delete(__p[0]);
      v36 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF");
      EstimatorAdaMax<float>::EstimatorAdaMax(v36, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1560) = v36;
      if (v50 < 0)
        operator delete(__p[0]);
      v37 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI");
      EstimatorAdaMax<float>::EstimatorAdaMax(v37, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1576) = v37;
      if (v50 < 0)
        operator delete(__p[0]);
      v38 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v38, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1584) = v38;
      if (v50 < 0)
        operator delete(__p[0]);
      v39 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v39, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1600) = v39;
      if (v50 < 0)
        operator delete(__p[0]);
      v40 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v40, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1592) = v40;
      if (v50 < 0)
        operator delete(__p[0]);
      v41 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v41, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
    }
    else
    {
      if (v24 != 1)
      {
        if (v24)
          goto LABEL_9;
        v25 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v65, "WGI");
        EstimatorScalar<float>::EstimatorScalar(v25, &v65, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *v23 = v25;
        if (v66 < 0)
          operator delete((void *)v65);
        v26 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v63, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v26, &v63, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1560) = v26;
        if (v64 < 0)
          operator delete((void *)v63);
        v27 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v61, "WGF");
        EstimatorScalar<float>::EstimatorScalar(v27, (__int128 *)v61, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1568) = v27;
        if (v62 < 0)
          operator delete(v61[0]);
        v28 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v59, "WCI");
        EstimatorScalar<float>::EstimatorScalar(v28, (__int128 *)v59, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1576) = v28;
        if (v60 < 0)
          operator delete(v59[0]);
        v29 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v57, "WGI");
        EstimatorScalar<float>::EstimatorScalar(v29, (__int128 *)v57, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1584) = v29;
        if (v58 < 0)
          operator delete(v57[0]);
        v30 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v55, "WGF");
        EstimatorScalar<float>::EstimatorScalar(v30, (__int128 *)v55, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1592) = v30;
        if (v56 < 0)
          operator delete(v55[0]);
        v31 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v53, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v31, (__int128 *)v53, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1600) = v31;
        if (v54 < 0)
          operator delete(v53[0]);
        v32 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v51, "WCI2");
        EstimatorScalar<float>::EstimatorScalar(v32, &v51, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1608) = v32;
        if ((v52 & 0x80000000) == 0)
          goto LABEL_9;
        v33 = (void *)v51;
LABEL_63:
        operator delete(v33);
        goto LABEL_9;
      }
      v42 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI");
      EstimatorADAM<float>::EstimatorADAM(v42, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *v23 = v42;
      if (v50 < 0)
        operator delete(__p[0]);
      v43 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorADAM<float>::EstimatorADAM(v43, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1568) = v43;
      if (v50 < 0)
        operator delete(__p[0]);
      v44 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF");
      EstimatorADAM<float>::EstimatorADAM(v44, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1560) = v44;
      if (v50 < 0)
        operator delete(__p[0]);
      v45 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI");
      EstimatorADAM<float>::EstimatorADAM(v45, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1576) = v45;
      if (v50 < 0)
        operator delete(__p[0]);
      v46 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI2");
      EstimatorADAM<float>::EstimatorADAM(v46, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1584) = v46;
      if (v50 < 0)
        operator delete(__p[0]);
      v47 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO2");
      EstimatorADAM<float>::EstimatorADAM(v47, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1600) = v47;
      if (v50 < 0)
        operator delete(__p[0]);
      v48 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF2");
      EstimatorADAM<float>::EstimatorADAM(v48, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1592) = v48;
      if (v50 < 0)
        operator delete(__p[0]);
      v41 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI2");
      EstimatorADAM<float>::EstimatorADAM(v41, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
    }
    *(_QWORD *)(a1 + 1608) = v41;
    if ((v50 & 0x80000000) == 0)
      goto LABEL_9;
    v33 = __p[0];
    goto LABEL_63;
  }
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, "LSTM alloc, from constructor");
  LSTM<signed char>::init(a1);
  if (v50 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_19156B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void **v54;
  uint64_t v55;
  uint64_t v56;
  void **v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;

  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v56, 0x10B3C408D47FFFCLL);
  v58 = v54 + 328;
  v59 = v54[331];
  if (v59)
  {
    v54[332] = v59;
    operator delete(v59);
  }
  v60 = *v58;
  if (*v58)
  {
    v54[329] = v60;
    operator delete(v60);
  }
  PTMutex::~PTMutex((PTMutex *)(v54 + 303));
  PTMutex::~PTMutex((PTMutex *)(v54 + 294));
  PTMutex::~PTMutex((PTMutex *)(v54 + 285));
  PTMutex::~PTMutex((PTMutex *)(v54 + 276));
  PTMutex::~PTMutex((PTMutex *)(v54 + 267));
  PTMutex::~PTMutex((PTMutex *)(v54 + 258));
  PTMutex::~PTMutex((PTMutex *)(v54 + 249));
  PTMutex::~PTMutex((PTMutex *)(v54 + 240));
  PTMutex::~PTMutex((PTMutex *)(v54 + 231));
  PTMutex::~PTMutex((PTMutex *)(v54 + 222));
  PTMutex::~PTMutex((PTMutex *)(v54 + 213));
  SparseMatrix<float>::~SparseMatrix(a9);
  SparseMatrix<float>::~SparseMatrix(a10);
  SparseMatrix<float>::~SparseMatrix(v55);
  SparseMatrix<float>::~SparseMatrix(a11);
  v61 = v54[120];
  if (v61)
  {
    v54[121] = v61;
    operator delete(v61);
  }
  v62 = v54[117];
  if (v62)
  {
    v54[118] = v62;
    operator delete(v62);
  }
  v63 = v54[114];
  if (v63)
  {
    v54[115] = v63;
    operator delete(v63);
  }
  v64 = v54[111];
  if (v64)
  {
    v54[112] = v64;
    operator delete(v64);
  }
  v65 = v54[108];
  if (v65)
  {
    v54[109] = v65;
    operator delete(v65);
  }
  v66 = v54[105];
  if (v66)
  {
    v54[106] = v66;
    operator delete(v66);
  }
  v67 = v54[102];
  if (v67)
  {
    v54[103] = v67;
    operator delete(v67);
  }
  v68 = v54[99];
  if (v68)
  {
    v54[100] = v68;
    operator delete(v68);
  }
  v69 = v54[89];
  if (v69)
  {
    v54[90] = v69;
    operator delete(v69);
  }
  v70 = v54[86];
  if (v70)
  {
    v54[87] = v70;
    operator delete(v70);
  }
  v71 = v54[83];
  if (v71)
  {
    v54[84] = v71;
    operator delete(v71);
  }
  v72 = v54[80];
  if (v72)
  {
    v54[81] = v72;
    operator delete(v72);
  }
  v73 = v54[77];
  if (v73)
  {
    v54[78] = v73;
    operator delete(v73);
  }
  v74 = v54[74];
  if (v74)
  {
    v54[75] = v74;
    operator delete(v74);
  }
  v75 = v54[71];
  if (v75)
  {
    v54[72] = v75;
    operator delete(v75);
  }
  v76 = v54[68];
  if (v76)
  {
    v54[69] = v76;
    operator delete(v76);
  }
  v77 = v54[65];
  if (v77)
  {
    v54[66] = v77;
    operator delete(v77);
  }
  v78 = v54[62];
  if (v78)
  {
    v54[63] = v78;
    operator delete(v78);
  }
  v79 = v54[59];
  if (v79)
  {
    v54[60] = v79;
    operator delete(v79);
  }
  v80 = v54[56];
  if (v80)
  {
    v54[57] = v80;
    operator delete(v80);
  }
  v81 = v54[53];
  if (v81)
  {
    v54[54] = v81;
    operator delete(v81);
  }
  v82 = v54[50];
  if (v82)
  {
    v54[51] = v82;
    operator delete(v82);
  }
  v83 = v54[47];
  if (v83)
  {
    v54[48] = v83;
    operator delete(v83);
  }
  v84 = v54[44];
  if (v84)
  {
    v54[45] = v84;
    operator delete(v84);
  }
  a13 = v54 + 26;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v85 = v54[23];
  if (v85)
  {
    v54[24] = v85;
    operator delete(v85);
  }
  v86 = v54[20];
  if (v86)
  {
    v54[21] = v86;
    operator delete(v86);
  }
  v87 = v54[17];
  if (v87)
  {
    v54[18] = v87;
    operator delete(v87);
  }
  v88 = v54[14];
  if (v88)
  {
    v54[15] = v88;
    operator delete(v88);
  }
  v89 = v54[11];
  if (v89)
  {
    v54[12] = v89;
    operator delete(v89);
  }
  v90 = *a12;
  if (*a12)
  {
    v54[9] = v90;
    operator delete(v90);
  }
  *v54 = off_1E2D4D730;
  v91 = v54[1];
  if (v91)
  {
    v54[2] = v91;
    operator delete(v91);
  }
  _Unwind_Resume(a1);
}

uint64_t FullLayer<signed char>::FullLayer(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  float v14;
  float v15;
  double v16;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  void *__p[2];
  char v25;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D58E28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 112) = a5;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a6 + 68);
  *(_QWORD *)(a1 + 528) = a8;
  if (a8)
    a7 = *(_BYTE *)(a8 + 512);
  *(_BYTE *)(a1 + 40) = a7;
  *(_BYTE *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v25 < 0)
    operator delete(__p[0]);
  v14 = *(float *)(a6 + 16);
  v15 = *(float *)(a6 + 20);
  v16 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v18 = *(_DWORD *)(a6 + 32);
    if (v18 == 2)
    {
      v21 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
      EstimatorAdaMax<float>::EstimatorAdaMax(v21, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14, v15, v16);
    }
    else
    {
      if (v18 != 1)
      {
        if (v18)
          return a1;
        v19 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v22, "FullLayer");
        EstimatorScalar<float>::EstimatorScalar(v19, &v22, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14);
        *(_QWORD *)(a1 + 424) = v19;
        if ((v23 & 0x80000000) == 0)
          return a1;
        v20 = (void *)v22;
LABEL_16:
        operator delete(v20);
        return a1;
      }
      v21 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
      EstimatorADAM<float>::EstimatorADAM(v21, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14, v15, v16);
    }
    *(_QWORD *)(a1 + 424) = v21;
    if ((v25 & 0x80000000) == 0)
      return a1;
    v20 = __p[0];
    goto LABEL_16;
  }
  return a1;
}

void sub_19156BDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v22, 0x10B3C408D47FFFCLL);
  PTMutex::~PTMutex((PTMutex *)(v20 + 54));
  v25 = (void *)v20[48];
  if (v25)
  {
    v20[49] = v25;
    operator delete(v25);
  }
  a15 = v20 + 45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  v26 = (void *)v20[42];
  if (v26)
  {
    v20[43] = v26;
    operator delete(v26);
  }
  v27 = (void *)v20[39];
  if (v27)
  {
    v20[40] = v27;
    operator delete(v27);
  }
  v28 = (void *)v20[36];
  if (v28)
  {
    v20[37] = v28;
    operator delete(v28);
  }
  v29 = (void *)v20[33];
  if (v29)
  {
    v20[34] = v29;
    operator delete(v29);
  }
  SparseMatrix<float>::~SparseMatrix(v21);
  v30 = (void *)v20[9];
  if (v30)
  {
    v20[10] = v30;
    operator delete(v30);
  }
  v31 = *v23;
  if (*v23)
  {
    v20[7] = v31;
    operator delete(v31);
  }
  *v20 = off_1E2D4D730;
  v32 = (void *)v20[1];
  if (v32)
  {
    v20[2] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t RecurrentLayer<signed char>::RecurrentLayer(uint64_t a1, int a2, int a3, int a4, char a5, char a6, char a7, uint64_t a8)
{
  void *__p[2];
  char v16;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D4D8E0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 304), 0);
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 240) = a8;
  *(_BYTE *)(a1 + 40) = a7;
  *(_BYTE *)(a1 + 60) = a5;
  *(_BYTE *)(a1 + 61) = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, __p, 0, -0.44);
  if (v16 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_19156C03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a15 < 0)
    operator delete(__p);
  PTMutex::~PTMutex((PTMutex *)(v16 + 6));
  v18 = (void *)v15[34];
  if (v18)
  {
    v15[35] = v18;
    operator delete(v18);
  }
  v19 = *v16;
  if (*v16)
  {
    v15[32] = v19;
    operator delete(v19);
  }
  v20 = (void *)v15[23];
  if (v20)
  {
    v15[24] = v20;
    operator delete(v20);
  }
  v21 = (void *)v15[20];
  if (v21)
  {
    v15[21] = v21;
    operator delete(v21);
  }
  v22 = (void *)v15[17];
  if (v22)
  {
    v15[18] = v22;
    operator delete(v22);
  }
  v23 = (void *)v15[14];
  if (v23)
  {
    v15[15] = v23;
    operator delete(v23);
  }
  v24 = (void *)v15[11];
  if (v24)
  {
    v15[12] = v24;
    operator delete(v24);
  }
  *v15 = off_1E2D4D730;
  v25 = (void *)v15[1];
  if (v25)
  {
    v15[2] = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t SoftMax<signed char>::SoftMax(uint64_t a1, int a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  float v12;
  float v13;
  double v14;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  void *__p[2];
  char v23;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D58E28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  *(_QWORD *)(a1 + 400) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_QWORD *)a1 = off_1E2D58618;
  *(_WORD *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 528) = a6;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a4 + 68);
  if (a6)
    a5 = *(_BYTE *)(a6 + 512);
  *(_BYTE *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a4 + 45);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 528) = a6;
  if (a2 < 1 || a3 <= 0)
    exitFramework(34);
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax");
  FullLayer<signed char>::init(a1, (uint64_t)__p, -0.215);
  if (v23 < 0)
    operator delete(__p[0]);
  v12 = *(float *)(a4 + 16);
  v13 = *(float *)(a4 + 20);
  v14 = *(double *)(a4 + 24);
  *(float *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v16 = *(_DWORD *)(a4 + 32);
    if (v16 == 2)
    {
      v19 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      EstimatorAdaMax<float>::EstimatorAdaMax(v19, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12, v13, v14);
    }
    else
    {
      if (v16 != 1)
      {
        if (v16)
          return a1;
        v17 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v20, "Softmax");
        EstimatorScalar<float>::EstimatorScalar(v17, &v20, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12);
        *(_QWORD *)(a1 + 424) = v17;
        if ((v21 & 0x80000000) == 0)
          return a1;
        v18 = (void *)v20;
LABEL_18:
        operator delete(v18);
        return a1;
      }
      v19 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      EstimatorADAM<float>::EstimatorADAM(v19, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12, v13, v14);
    }
    *(_QWORD *)(a1 + 424) = v19;
    if ((v23 & 0x80000000) == 0)
      return a1;
    v18 = __p[0];
    goto LABEL_18;
  }
  return a1;
}

void sub_19156C3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v21, 0x10B3C408D47FFFCLL);
  FullLayer<signed char>::~FullLayer(v20);
  _Unwind_Resume(a1);
}

uint64_t GRU<signed char>::GRU(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  int v13;
  int v14;
  _DWORD *v15;
  float v16;
  float v17;
  double v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  char v41;
  __int128 v42;
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  __int128 v52;
  char v53;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1E2D579B0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_QWORD *)(a1 + 1240) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1248), 0);
  *(_QWORD *)(a1 + 1312) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1320), 0);
  *(_QWORD *)(a1 + 1384) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1392), 0);
  *(_QWORD *)(a1 + 1456) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1464), 0);
  *(_QWORD *)(a1 + 1528) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1536), 0);
  *(_QWORD *)(a1 + 1600) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1608), 0);
  *(_QWORD *)(a1 + 1672) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1680), 0);
  *(_QWORD *)(a1 + 1744) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1752), 0);
  *(_QWORD *)(a1 + 1816) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1824), 0);
  *(_QWORD *)(a1 + 1888) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1896), 0);
  *(_QWORD *)(a1 + 1960) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1968), 0);
  *(_DWORD *)(a1 + 2084) = 0;
  *(_OWORD *)(a1 + 2052) = 0u;
  *(_OWORD *)(a1 + 2068) = 0u;
  *(_OWORD *)(a1 + 2036) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2096) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    v13 = a7 ^ 1;
  }
  else
  {
    v13 = 1;
  }
  *(_BYTE *)(a1 + 40) = a7;
  v14 = *(unsigned __int8 *)(a6 + 45);
  *(_BYTE *)(a1 + 2032) = v14;
  *(_BYTE *)(a1 + 2033) = *(_BYTE *)(a6 + 46);
  v15 = *a4;
  *(_DWORD *)(a1 + 568) = **a4;
  *(_DWORD *)(a1 + 572) = v15[1];
  *(_DWORD *)(a1 + 576) = v15[2];
  if (!a7)
    v13 = 0;
  *(_DWORD *)(a1 + 48) = v13 + *(_DWORD *)(a1 + 44);
  v16 = *(float *)(a6 + 16);
  v17 = *(float *)(a6 + 20);
  v18 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  if (!v14)
  {
    v20 = (uint64_t *)(a1 + 1168);
    v21 = *(_DWORD *)(a6 + 32);
    if (v21 == 2)
    {
      v29 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGR");
      EstimatorAdaMax<float>::EstimatorAdaMax(v29, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *v20 = v29;
      if (v41 < 0)
        operator delete(__p[0]);
      v30 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGZ");
      EstimatorAdaMax<float>::EstimatorAdaMax(v30, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1176) = v30;
      if (v41 < 0)
        operator delete(__p[0]);
      v31 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v31, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1184) = v31;
      if (v41 < 0)
        operator delete(__p[0]);
      v32 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGR");
      EstimatorAdaMax<float>::EstimatorAdaMax(v32, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1192) = v32;
      if (v41 < 0)
        operator delete(__p[0]);
      v33 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGZ");
      EstimatorAdaMax<float>::EstimatorAdaMax(v33, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1200) = v33;
      if (v41 < 0)
        operator delete(__p[0]);
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
    }
    else
    {
      if (v21 != 1)
      {
        if (v21)
          goto LABEL_7;
        v22 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v52, "WGR");
        EstimatorScalar<float>::EstimatorScalar(v22, &v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *v20 = v22;
        if (v53 < 0)
          operator delete((void *)v52);
        v23 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v50, "WGZ");
        EstimatorScalar<float>::EstimatorScalar(v23, (__int128 *)v50, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *(_QWORD *)(a1 + 1176) = v23;
        if (v51 < 0)
          operator delete(v50[0]);
        v24 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v48, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v24, (__int128 *)v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *(_QWORD *)(a1 + 1184) = v24;
        if (v49 < 0)
          operator delete(v48[0]);
        v25 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v46, "RGR");
        EstimatorScalar<float>::EstimatorScalar(v25, (__int128 *)v46, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1192) = v25;
        if (v47 < 0)
          operator delete(v46[0]);
        v26 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v44, "RGZ");
        EstimatorScalar<float>::EstimatorScalar(v26, (__int128 *)v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1200) = v26;
        if (v45 < 0)
          operator delete(v44[0]);
        v27 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v42, "RGO");
        EstimatorScalar<float>::EstimatorScalar(v27, &v42, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1208) = v27;
        if ((v43 & 0x80000000) == 0)
          goto LABEL_7;
        v28 = (void *)v42;
LABEL_49:
        operator delete(v28);
        goto LABEL_7;
      }
      v35 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGR");
      EstimatorADAM<float>::EstimatorADAM(v35, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *v20 = v35;
      if (v41 < 0)
        operator delete(__p[0]);
      v36 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGZ");
      EstimatorADAM<float>::EstimatorADAM(v36, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1176) = v36;
      if (v41 < 0)
        operator delete(__p[0]);
      v37 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorADAM<float>::EstimatorADAM(v37, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1184) = v37;
      if (v41 < 0)
        operator delete(__p[0]);
      v38 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGR");
      EstimatorADAM<float>::EstimatorADAM(v38, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1192) = v38;
      if (v41 < 0)
        operator delete(__p[0]);
      v39 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGZ");
      EstimatorADAM<float>::EstimatorADAM(v39, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1200) = v39;
      if (v41 < 0)
        operator delete(__p[0]);
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGO");
      EstimatorADAM<float>::EstimatorADAM(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
    }
    *(_QWORD *)(a1 + 1208) = v34;
    if ((v41 & 0x80000000) == 0)
      goto LABEL_7;
    v28 = __p[0];
    goto LABEL_49;
  }
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU alloc, from constructor");
  GRU<signed char>::init(a1);
  if (v41 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_19156CECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  if (a16 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v49, 0x10B3C40C37BAA31);
  v53 = (void *)v46[258];
  if (v53)
  {
    v46[259] = v53;
    operator delete(v53);
  }
  v54 = (void *)v46[255];
  if (v54)
  {
    v46[256] = v54;
    operator delete(v54);
  }
  PTMutex::~PTMutex((PTMutex *)(v46 + 245));
  PTMutex::~PTMutex((PTMutex *)(v46 + 236));
  PTMutex::~PTMutex((PTMutex *)(v46 + 227));
  PTMutex::~PTMutex((PTMutex *)(v46 + 218));
  PTMutex::~PTMutex((PTMutex *)(v46 + 209));
  PTMutex::~PTMutex((PTMutex *)(v46 + 200));
  PTMutex::~PTMutex((PTMutex *)(v46 + 191));
  PTMutex::~PTMutex((PTMutex *)(v46 + 182));
  PTMutex::~PTMutex((PTMutex *)(v46 + 173));
  PTMutex::~PTMutex((PTMutex *)(v46 + 164));
  PTMutex::~PTMutex((PTMutex *)(v51 + 1032));
  SparseMatrix<float>::~SparseMatrix(v48);
  SparseMatrix<float>::~SparseMatrix(v47);
  SparseMatrix<float>::~SparseMatrix(a9);
  v55 = (void *)v46[91];
  if (v55)
  {
    v46[92] = v55;
    operator delete(v55);
  }
  v56 = (void *)v46[88];
  if (v56)
  {
    v46[89] = v56;
    operator delete(v56);
  }
  v57 = (void *)v46[85];
  if (v57)
  {
    v46[86] = v57;
    operator delete(v57);
  }
  v58 = (void *)v46[82];
  if (v58)
  {
    v46[83] = v58;
    operator delete(v58);
  }
  v59 = (void *)v46[79];
  if (v59)
  {
    v46[80] = v59;
    operator delete(v59);
  }
  v60 = (void *)v46[76];
  if (v60)
  {
    v46[77] = v60;
    operator delete(v60);
  }
  v61 = (void *)v46[68];
  if (v61)
  {
    v46[69] = v61;
    operator delete(v61);
  }
  v62 = (void *)v46[65];
  if (v62)
  {
    v46[66] = v62;
    operator delete(v62);
  }
  v63 = (void *)v46[62];
  if (v63)
  {
    v46[63] = v63;
    operator delete(v63);
  }
  v64 = (void *)v46[59];
  if (v64)
  {
    v46[60] = v64;
    operator delete(v64);
  }
  v65 = (void *)v46[56];
  if (v65)
  {
    v46[57] = v65;
    operator delete(v65);
  }
  v66 = *v50;
  if (*v50)
  {
    v46[54] = v66;
    operator delete(v66);
  }
  __p = (void *)v51;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v67 = (void *)v46[23];
  if (v67)
  {
    v46[24] = v67;
    operator delete(v67);
  }
  v68 = (void *)v46[20];
  if (v68)
  {
    v46[21] = v68;
    operator delete(v68);
  }
  v69 = (void *)v46[17];
  if (v69)
  {
    v46[18] = v69;
    operator delete(v69);
  }
  v70 = (void *)v46[14];
  if (v70)
  {
    v46[15] = v70;
    operator delete(v70);
  }
  v71 = (void *)v46[11];
  if (v71)
  {
    v46[12] = v71;
    operator delete(v71);
  }
  v72 = *a10;
  if (*a10)
  {
    v46[9] = v72;
    operator delete(v72);
  }
  *v46 = off_1E2D4D730;
  v73 = (void *)v46[1];
  if (v73)
  {
    v46[2] = v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

uint64_t BatchNormalization<signed char>::BatchNormalization(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char **v9;
  char **v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D56630;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = 925353388;
  v4 = a3[2];
  v5 = a3[3];
  v6 = *((_QWORD *)a3 + 8);
  v8 = *a3;
  v7 = a3[1];
  *(_QWORD *)(a1 + 216) = &off_1E2D58470;
  *(_QWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 168) = 0u;
  v9 = (char **)(a1 + 168);
  v10 = (char **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  v11 = (char **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  std::vector<VVector<float>>::resize(v9, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v10, maxFeatureVectors);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (maxFeatureVectors >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(unsigned int *)(a1 + 44);
      v14 = (void *)operator new[]();
      v15 = v14;
      if ((int)v13 >= 1)
        bzero(v14, 4 * v13);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12) = v15;
      v16 = *(unsigned int *)(a1 + 44);
      v17 = (void *)operator new[]();
      v18 = v17;
      if ((int)v16 >= 1)
        bzero(v17, 4 * v16);
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v12) = v18;
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12);
      v21 = *(_QWORD **)(a1 + 296);
      v20 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v21 >= v20)
      {
        v23 = ((char *)v21 - *v11) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v24 = v20 - (_QWORD)*v11;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26);
        else
          v27 = 0;
        v28 = (_QWORD *)(v26 + 8 * v23);
        *v28 = v19;
        v22 = v28 + 1;
        v30 = *(char **)(a1 + 288);
        v29 = *(char **)(a1 + 296);
        if (v29 != v30)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v31;
          }
          while (v29 != v30);
          v29 = *v11;
        }
        *(_QWORD *)(a1 + 288) = v28;
        *(_QWORD *)(a1 + 296) = v22;
        *(_QWORD *)(a1 + 304) = v26 + 8 * v27;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v21 = v19;
        v22 = v21 + 1;
      }
      *(_QWORD *)(a1 + 296) = v22;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v12);
      v33 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v22 >= v33)
      {
        v35 = ((char *)v22 - *v11) >> 3;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v36 = v33 - (_QWORD)*v11;
        v37 = v36 >> 2;
        if (v36 >> 2 <= (unint64_t)(v35 + 1))
          v37 = v35 + 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        if (v38)
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v38);
        else
          v39 = 0;
        v40 = (_QWORD *)(v38 + 8 * v35);
        *v40 = v32;
        v34 = v40 + 1;
        v42 = *(char **)(a1 + 288);
        v41 = *(char **)(a1 + 296);
        if (v41 != v42)
        {
          do
          {
            v43 = *((_QWORD *)v41 - 1);
            v41 -= 8;
            *--v40 = v43;
          }
          while (v41 != v42);
          v41 = *v11;
        }
        *(_QWORD *)(a1 + 288) = v40;
        *(_QWORD *)(a1 + 296) = v34;
        *(_QWORD *)(a1 + 304) = v38 + 8 * v39;
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v22 = v32;
        v34 = v22 + 1;
      }
      *(_QWORD *)(a1 + 296) = v34;
      ++v12;
    }
    while (v12 < maxFeatureVectors);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  return a1;
}

void sub_19156D5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void *v13;
  void *v14;
  void *v15;

  v13 = *a10;
  if (*a10)
  {
    v10[25] = v13;
    operator delete(v13);
  }
  v14 = *v11;
  if (*v11)
  {
    v10[22] = v14;
    operator delete(v14);
  }
  *v10 = off_1E2D4D730;
  v15 = (void *)v10[1];
  if (v15)
  {
    v10[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ParallelSelector<signed char>::outputs(uint64_t a1)
{
  return a1 + 104;
}

uint64_t ParallelSelector<signed char>::deltas(uint64_t a1)
{
  return a1 + 448;
}

uint64_t ParallelSelector<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 504;
}

uint64_t ParallelSelector<signed char>::weightsAreNaN(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t ParallelSelector<signed char>::read(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::write(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v5)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 80);
    }
    while (v11 < (*(_QWORD *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

_QWORD *ParallelSelector<signed char>::subtractModels(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 80))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *ParallelSelector<signed char>::compareModels(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 88))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *ParallelSelector<signed char>::addGradient(void *result, void *lpsrc)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t)result;
  if (lpsrc)
  {
    v3 = (uint64_t)result;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (*(_QWORD *)(v2 + 88) != v4)
  {
    v5 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 96))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v5));
      ++v5;
      v4 = *(_QWORD *)(v2 + 80);
    }
    while (v5 < (*(_QWORD *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<signed char>::applyGradient(void *result, void *lpsrc)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t)result;
  if (lpsrc)
  {
    v3 = (uint64_t)result;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (*(_QWORD *)(v2 + 88) != v4)
  {
    v5 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 104))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v5));
      ++v5;
      v4 = *(_QWORD *)(v2 + 80);
    }
    while (v5 < (*(_QWORD *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::clipModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::resetForNewBatch(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void ParallelSelector<signed char>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *__p;
  char v5;

  v2 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 200))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = *(_QWORD *)(a1 + 80);
    }
    while (v3 < (*(_QWORD *)(a1 + 88) - v2) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "From allocAllBuffers");
  ParallelSelector<float>::init(a1);
  if (v5 < 0)
    operator delete(__p);
}

void sub_19156DBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ParallelSelector<signed char>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x19401CD78](*v5, 0x1000C8052888210);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[10];
  if (a1[11] != v6)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 208))(*(_QWORD *)(v6 + 8 * v7));
      ++v7;
      v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 25);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 59);
  a1[39] = a1[38];
}

void ParallelSelector<signed char>::rearrangeTargets(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  OutputCluster *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v29;

  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v27 = (a4 - 1);
  if (a4 >= 1)
  {
    v9 = 0;
    v10 = a4;
    do
    {
      if ((a5 & 1) != 0)
      {
        if (a3[1] != *a3)
        {
          if (v9 >= v27)
            v11 = 2;
          else
            v11 = **(_DWORD **)(*a3 + 24 * v9 + 24);
          goto LABEL_21;
        }
        if (v29 >= 1)
        {
          v11 = 0;
          v15 = 0;
          v17 = 1.1755e-38;
          do
          {
            v16 = *(_QWORD *)(*a2 + 8 * v9);
            if (*(float *)(v16 + 4 * v15) > v17)
            {
              v11 = v15;
              v17 = *(float *)(v16 + 4 * v15);
            }
            ++v15;
          }
          while (v29 != v15);
          goto LABEL_21;
        }
      }
      else if (v29 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v14 = 1.1755e-38;
        do
        {
          v13 = *(_QWORD *)(*a2 + 8 * v9);
          if (*(float *)(v13 + 4 * v12) > v14)
          {
            v11 = v12;
            v14 = *(float *)(v13 + 4 * v12);
          }
          ++v12;
        }
        while (v29 != v12);
        goto LABEL_21;
      }
      v11 = 0;
LABEL_21:
      v18 = *(_QWORD *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v9) = v11;
      v19 = *(OutputCluster **)(a1 + 496);
      *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v9) = OutputCluster::getWordClass(v19, v11) + 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v9) = OutputCluster::getWordClassIndex(v19, *(_DWORD *)(v18 + 4 * v9));
      v20 = **(_QWORD **)(a1 + 200);
      v21 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v20 + 8 * v9), 4 * v21);
      v22 = *(_QWORD **)(a1 + 200);
      v23 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v9);
      v24 = v22[3 * (int)v23];
      *(_DWORD *)(*(_QWORD *)(*v22 + 8 * v9) + 4 * v23 - 4) = 1065353216;
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 272))(v25);
      bzero(*(void **)(v24 + 8 * v9), 4 * v26);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * *(int *)(*(_QWORD *)(a1 + 400) + 4 * v9))
                            + 8 * v9)
                + 4 * *(int *)(*(_QWORD *)(a1 + 424) + 4 * v9)) = 1065353216;
      ++v9;
    }
    while (v9 != v10);
  }
}

uint64_t ParallelSelector<signed char>::noutputs(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - v1) < 9)
    return 0;
  LODWORD(v3) = 0;
  v4 = 1;
  do
  {
    v3 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v4) + 272))(*(_QWORD *)(v1 + 8 * v4))
       + v3;
    ++v4;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v4 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t ParallelSelector<signed char>::setPredictionMode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(result + 528) = a2;
  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void ParallelSelector<signed char>::update()
{
  exitFramework(5);
}

void ParallelSelector<signed char>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  float32_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  _QWORD v32[3];

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = 8 * a5;
    v9 = a5;
    do
    {
      v10 = *(_QWORD *)(a1 + 504);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    v12 = 0;
    for (i = 0; i != v9; ++i)
    {
      v14 = *(int *)(a1 + 332);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 248))(v15, *(_QWORD *)(a1 + 472) + 24 * (int)v14, a3, i, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v14), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v14));
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      v17 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
      memset(v32, 0, sizeof(v32));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v32, *v17, v17[1], v17[1] - *v17);
      v18 = *(_QWORD *)(a1 + 504);
      v19 = (char *)v32[0];
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 264))(v20);
      v22 = VVector<float>::add<float>((float32x4_t **)(v18 + v12), (float32x4_t **)&v19[v12], v21);
      v23 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * i);
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, float32_t))(*(_QWORD *)v24 + 248))(v24, *(_QWORD *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v23), v22);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v26 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
      memset(v31, 0, sizeof(v31));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v31, *v26, v26[1], v26[1] - *v26);
      v27 = *(_QWORD *)(a1 + 504);
      v28 = (char *)v31[0];
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 264))(v29);
      VVector<float>::add<float>((float32x4_t **)(v27 + v12), (float32x4_t **)&v28[v12], v30);
      if (v28)
        operator delete(v28);
      if (v19)
        operator delete(v19);
      v12 += 8;
    }
  }
}

void sub_19156E1DC(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ParallelSelector<signed char>::forward(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int **a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  int *v32;
  int *v33;
  std::vector<int> *v34;
  unint64_t v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  int WordClass;
  int WordClassIndex;
  uint64_t v57;
  _DWORD *v58;
  _DWORD **v59;
  unint64_t v60;
  _DWORD *v61;
  char *v62;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  int v79;
  int *v80;
  int v81;
  std::vector<int>::pointer end;
  int *v83;
  std::vector<int>::pointer begin;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  std::vector<int>::pointer v91;
  int *v92;
  int *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::vector<int>::pointer v100;
  int *v101;
  std::vector<int>::pointer v102;
  int64_t v103;
  unint64_t v104;
  int64_t v105;
  unint64_t v106;
  uint64_t v107;
  int *v108;
  int v109;
  std::vector<int>::pointer v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  unint64_t v114;
  uint64_t v115;
  int *v116;
  int v117;
  std::vector<int>::pointer v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  float *v130;
  uint64_t v131;
  int *v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  vDSP_Length v138;
  int v139;
  _DWORD *v140;
  void *v141;
  uint64_t *v142;
  std::vector<int> v143;
  void *__p;
  void *v145;
  uint64_t v146;
  void *v147;
  char *v148;
  unint64_t v149;
  float __C;

  v147 = 0;
  v148 = 0;
  v149 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 304);
    do
      *(_DWORD *)(v14 + 4 * v13) = 0;
    while (v13++ < *(int *)(a1 + 340));
  }
  v16 = *(_QWORD *)(a1 + 224);
  if (v16)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ParallelSelector");
  v17 = a4 & 0xFFFFFF;
  if (SHIBYTE(v146) < 0)
    operator delete(__p);
  if (v17 > (a5 != 0))
  {
    v18 = a5 != 0;
    while (1)
    {
      v19 = *(int *)(a1 + 332);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 272))(v20);
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 264))(v21);
      v22 = *(_QWORD *)(a1 + 304);
      if (!*(_DWORD *)(v22 + 4 * v19))
      {
        *(_DWORD *)(v22 + 4 * v19) = 1;
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 256))(v23, v17);
      }
      __p = 0;
      v145 = 0;
      v146 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v24 + 224))(v24, a2, a3, v18, &__p);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
      memset(&v143, 0, sizeof(v143));
      v26 = *(_DWORD *)(a1 + 328);
      if (v26 == 1)
        break;
      if (v26 == 2)
      {
        v72 = *v142;
        v73 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 272))(v73);
        if (v74 < 1)
        {
          v75 = 0;
        }
        else
        {
          v75 = 0;
          v76 = 0;
          v78 = 1.1755e-38;
          do
          {
            v77 = *(_QWORD *)(v72 + 8 * v18);
            if (*(float *)(v77 + 4 * v76) > v78)
            {
              v75 = v76;
              v78 = *(float *)(v77 + 4 * v76);
            }
            ++v76;
          }
          while (v74 != v76);
        }
        v81 = v75 + 1;
        end = v143.__end_;
        if (v143.__end_ >= v143.__end_cap_.__value_)
        {
          begin = v143.__begin_;
          v85 = v143.__end_ - v143.__begin_;
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v87 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
          if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v86)
            v86 = v87 >> 1;
          v52 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL;
          v88 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v52)
            v88 = v86;
          if (v88)
          {
            v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v88);
            begin = v143.__begin_;
            end = v143.__end_;
          }
          else
          {
            v89 = 0;
          }
          v93 = (int *)(v88 + 4 * v85);
          *v93 = v81;
          v83 = v93 + 1;
          while (end != begin)
          {
            v94 = *--end;
            *--v93 = v94;
          }
          v143.__begin_ = v93;
          v143.__end_ = v83;
          v143.__end_cap_.__value_ = (int *)(v88 + 4 * v89);
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v143.__end_ = v81;
          v83 = end + 1;
        }
        v143.__end_ = v83;
        goto LABEL_133;
      }
      if (v26 != 4)
      {
        v34 = &v143;
        VVector<float>::getTopNIndices((uint64_t *)(*v142 + 8 * v18), *(_DWORD *)(a1 + 340), &v143, *(_DWORD *)(*(_QWORD *)(a1 + 496) + 8));
        goto LABEL_134;
      }
      v27 = (char *)v147;
      v148 = (char *)v147;
      v28 = *(_QWORD *)(a1 + 536);
      v29 = *(_QWORD *)(a1 + 544) - v28;
      if (v29)
      {
        v30 = v29 / 24;
        if (v30 <= 1)
          v30 = 1;
        v31 = (_QWORD *)(v28 + 8);
        do
        {
          *v31 = *(v31 - 1);
          v31 += 3;
          --v30;
        }
        while (v30);
      }
      v33 = *a7;
      v32 = a7[1];
      v34 = (std::vector<int> *)(a1 + 352);
      v35 = (char *)v32 - (char *)*a7;
      if (v32 != *a7)
      {
        if (v35 < 5)
        {
          v148 = v27;
          if (v35 == 4)
          {
            v36 = operator new(4uLL);
            v37 = *v33;
            *v36 = *v33;
            goto LABEL_85;
          }
        }
        else
        {
          v36 = operator new(4uLL);
          v37 = *v33;
          *v36 = *v33;
          if (v33[1] != -1)
            exitFramework(900);
          if (v35 >= 9)
          {
            v140 = v36;
            v38 = 2;
            do
            {
              v39 = v17;
              v40 = *v33;
              v41 = v33[v38];
              v42 = *(_QWORD *)(a1 + 496);
              if (v40 == -1)
              {
                if (*(_QWORD *)(v42 + 104))
                  v47 = *(_DWORD *)(v42 + 112);
                else
                  v47 = *(_DWORD *)(v42 + 96);
                if (v41 >= v47)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C20], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v41);
                  v17 = v39;
                }
                else
                {
                  WordClass = OutputCluster::getWordClass(*(OutputCluster **)(a1 + 496), v41);
                  WordClassIndex = OutputCluster::getWordClassIndex((OutputCluster *)v42, v41);
                  v57 = *(_QWORD *)(a1 + 536) + 24 * WordClass;
                  v59 = (_DWORD **)(v57 + 8);
                  v58 = *(_DWORD **)(v57 + 8);
                  v60 = *(_QWORD *)(v57 + 16);
                  if ((unint64_t)v58 >= v60)
                  {
                    v139 = WordClassIndex;
                    v64 = *(_DWORD **)v57;
                    v65 = ((uint64_t)v58 - *(_QWORD *)v57) >> 2;
                    v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) >> 62)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v67 = v60 - (_QWORD)v64;
                    if (v67 >> 1 > v66)
                      v66 = v67 >> 1;
                    v52 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL;
                    v68 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52)
                      v68 = v66;
                    if (v68)
                    {
                      v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v68);
                      v58 = *v59;
                      v64 = *(_DWORD **)v57;
                    }
                    else
                    {
                      v69 = 0;
                    }
                    v70 = (_DWORD *)(v68 + 4 * v65);
                    *v70 = v139;
                    v61 = v70 + 1;
                    while (v58 != v64)
                    {
                      v71 = *--v58;
                      *--v70 = v71;
                    }
                    *(_QWORD *)v57 = v70;
                    *v59 = v61;
                    *(_QWORD *)(v57 + 16) = v68 + 4 * v69;
                    if (v64)
                      operator delete(v64);
                  }
                  else
                  {
                    *v58 = WordClassIndex;
                    v61 = v58 + 1;
                  }
                  v17 = v39;
                  *v59 = v61;
                }
              }
              else
              {
                v43 = OutputCluster::getWordClassIndex(*(OutputCluster **)(a1 + 496), v41);
                v44 = v43;
                v45 = v148;
                if ((unint64_t)v148 >= v149)
                {
                  v48 = (char *)v147;
                  v49 = (v148 - (_BYTE *)v147) >> 2;
                  v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 62)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v17 = v39;
                  v51 = v149 - (_QWORD)v147;
                  if ((uint64_t)(v149 - (_QWORD)v147) >> 1 > v50)
                    v50 = v51 >> 1;
                  v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
                  v53 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v52)
                    v53 = v50;
                  if (v53)
                  {
                    v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
                    v48 = (char *)v147;
                    v45 = v148;
                  }
                  else
                  {
                    v54 = 0;
                  }
                  v62 = (char *)(v53 + 4 * v49);
                  *(_DWORD *)v62 = v44;
                  v46 = v62 + 4;
                  while (v45 != v48)
                  {
                    v63 = *((_DWORD *)v45 - 1);
                    v45 -= 4;
                    *((_DWORD *)v62 - 1) = v63;
                    v62 -= 4;
                  }
                  v147 = v62;
                  v148 = v46;
                  v149 = v53 + 4 * v54;
                  if (v48)
                    operator delete(v48);
                }
                else
                {
                  *(_DWORD *)v148 = v43;
                  v46 = v45 + 4;
                  v17 = v39;
                }
                v148 = v46;
              }
              ++v38;
              v33 = *a7;
            }
            while (v38 < a7[1] - *a7);
            v36 = v140;
            v37 = *v140;
          }
LABEL_85:
          v141 = v36;
          if (v37 == -1)
          {
            v95 = *(_QWORD *)(a1 + 544);
            v96 = *(_QWORD *)(a1 + 536);
            if (v95 != v96)
            {
              v97 = 0;
              do
              {
                v98 = *(_QWORD *)(v96 + 24 * v97);
                v99 = *(_QWORD *)(v96 + 24 * v97++ + 8);
                if (v99 != v98)
                {
                  v100 = v143.__end_;
                  if (v143.__end_ >= v143.__end_cap_.__value_)
                  {
                    v102 = v143.__begin_;
                    v103 = v143.__end_ - v143.__begin_;
                    v104 = v103 + 1;
                    if ((unint64_t)(v103 + 1) >> 62)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v105 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
                    if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v104)
                      v104 = v105 >> 1;
                    v52 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL;
                    v106 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52)
                      v106 = v104;
                    if (v106)
                    {
                      v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v106);
                      v102 = v143.__begin_;
                      v100 = v143.__end_;
                    }
                    else
                    {
                      v107 = 0;
                    }
                    v108 = (int *)(v106 + 4 * v103);
                    *v108 = v97;
                    v101 = v108 + 1;
                    while (v100 != v102)
                    {
                      v109 = *--v100;
                      *--v108 = v109;
                    }
                    v143.__begin_ = v108;
                    v143.__end_ = v101;
                    v143.__end_cap_.__value_ = (int *)(v106 + 4 * v107);
                    if (v102)
                      operator delete(v102);
                  }
                  else
                  {
                    *v143.__end_ = v97;
                    v101 = v100 + 1;
                  }
                  v143.__end_ = v101;
                  v95 = *(_QWORD *)(a1 + 544);
                  v96 = *(_QWORD *)(a1 + 536);
                }
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v95 - v96) >> 3) > v97);
            }
          }
          else
          {
            if (v37 < 0
              || (v90 = v37 + 1,
                  (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3 <= (unint64_t)(v37 + 1)))
            {
              exitFramework(45);
            }
            v91 = v143.__end_;
            if (v143.__end_ >= v143.__end_cap_.__value_)
            {
              v110 = v143.__begin_;
              v111 = v143.__end_ - v143.__begin_;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v113 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
              if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v112)
                v112 = v113 >> 1;
              v52 = (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL;
              v114 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v52)
                v114 = v112;
              if (v114)
              {
                v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v114);
                v110 = v143.__begin_;
                v91 = v143.__end_;
              }
              else
              {
                v115 = 0;
              }
              v116 = (int *)(v114 + 4 * v111);
              *v116 = v90;
              v92 = v116 + 1;
              while (v91 != v110)
              {
                v117 = *--v91;
                *--v116 = v117;
              }
              v143.__begin_ = v116;
              v143.__end_ = v92;
              v143.__end_cap_.__value_ = (int *)(v114 + 4 * v115);
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v143.__end_ = v90;
              v92 = v91 + 1;
            }
            v143.__end_ = v92;
          }
          operator delete(v141);
        }
LABEL_133:
        v34 = &v143;
      }
LABEL_134:
      bzero(*(void **)(*(_QWORD *)(a1 + 104) + 8 * v18), 4 * *(int *)(a1 + 348));
      v118 = v34->__begin_;
      if (v34->__end_ != v34->__begin_)
      {
        v119 = 0;
        while (1)
        {
          v120 = v118[v119];
          v121 = *(_QWORD *)(a1 + 304);
          if (!*(_DWORD *)(v121 + 4 * v120))
          {
            *(_DWORD *)(v121 + 4 * v120) = 1;
            v122 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 256))(v122, v17);
          }
          v123 = a7[1] != *a7 && **a7 == -1 ? (void **)(*(_QWORD *)(a1 + 536) + 24 * (int)v120 - 24) : &v147;
          v124 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v124 + 224))(v124, a2, a3, v18, v123);
          v125 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
          v126 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125);
          v127 = *(_QWORD *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2)
            break;
          v128 = *(unsigned int *)(v127 + 4 * v120);
          if ((int)v128 >= 1)
          {
            v129 = *(float *)(*(_QWORD *)(*v142 + 8 * v18) + 4 * ((int)v120 - 1));
            v130 = *(float **)(*v126 + 8 * v18);
            v131 = v128;
            do
            {
              *v130 = v129 * *v130;
              ++v130;
              --v131;
            }
            while (v131);
LABEL_148:
            if ((int)v128 >= 1)
            {
              v132 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 120) + 24 * ((int)v120 - 1));
              v133 = *(_DWORD **)(*v126 + 8 * v18);
              v134 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v18);
              do
              {
                v136 = *v132++;
                v135 = v136;
                LODWORD(v136) = *v133++;
                *(_DWORD *)(v134 + 4 * v135) = v136;
                --v128;
              }
              while (v128);
            }
          }
          ++v119;
          v118 = v34->__begin_;
          if (v119 >= v34->__end_ - v34->__begin_)
            goto LABEL_152;
        }
        v128 = *(unsigned int *)(v127 + 4 * v120);
        goto LABEL_148;
      }
LABEL_152:
      v137 = *(_QWORD *)(a1 + 104);
      v138 = *(int *)(a1 + 348);
      __C = 0.0;
      vDSP_sve(*(const float **)(v137 + 8 * v18), 1, &__C, v138);
      if (v143.__begin_)
      {
        v143.__end_ = v143.__begin_;
        operator delete(v143.__begin_);
      }
      if (__p)
      {
        v145 = __p;
        operator delete(__p);
      }
      if (++v18 == v17)
        goto LABEL_157;
    }
    v79 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v18);
    v80 = (int *)operator new(4uLL);
    *v80 = v79;
    v143.__end_ = v80 + 1;
    v143.__end_cap_.__value_ = v80 + 1;
    v143.__begin_ = v80;
    goto LABEL_133;
  }
LABEL_157:
  if (v147)
  {
    v148 = (char *)v147;
    operator delete(v147);
  }
}

void sub_19156EBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void *ParallelSelector<signed char>::updateFrom(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  void *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!result)
    __cxa_bad_cast();
  v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (uint64_t)result;
    v12 = 0;
    do
    {
      if (*(int *)(*(_QWORD *)(v11 + 304) + 4 * v12) >= 1)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v12);
        result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, float, float))(*(_QWORD *)v13 + 336))(v13, *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v12), a3, a4, a5);
        v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::computeError(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 >= 1)
  {
    v19 = v6;
    v20 = v7;
    v10 = result;
    v11 = 0;
    v12 = a4;
    do
    {
      v18 = 0;
      v13 = *(int *)(v10 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v14 + 240))(v14, *(_QWORD *)(v10 + 200) + 24 * v13, *(_QWORD *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      v17 = 0;
      v15 = *(int *)(*(_QWORD *)(v10 + 400) + 4 * v11);
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v15);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v16 + 240))(v16, *(_QWORD *)(v10 + 200) + 24 * (int)v15, *(_QWORD *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1)
        ++*a5;
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float ParallelSelector<signed char>::log2Probability(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v13;

  v13 = 0;
  if (a3 < 1)
    return 0.0;
  v4 = 0;
  v5 = a3;
  v6 = 0.0;
  do
  {
    v7 = *(int *)(a1 + 332);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v8 + 232))(v8, *(_QWORD *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    v9 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v4);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 232))(v10, *(_QWORD *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2)
      v11 = -0.0;
    v6 = v6 + (float)(*(float *)&v13 + v11);
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void ParallelSelector<signed char>::~ParallelSelector(uint64_t a1)
{
  ParallelSelector<signed char>::~ParallelSelector(a1);
  JUMPOUT(0x19401CD90);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;

  *(_QWORD *)a1 = off_1E2D55D90;
  v3 = *(_QWORD *)(a1 + 280);
  v2 = *(_QWORD *)(a1 + 288);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(a1 + 288);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x19401CD78](*v5, 0x1000C8052888210);
        *v5 = 0;
        v3 = *(_QWORD *)(a1 + 280);
        v2 = *(_QWORD *)(a1 + 288);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(_QWORD *)(a1 + 288) = v3;
  v14 = (void **)(a1 + 536);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v6 = *(void **)(a1 + 504);
  if (v6)
  {
    *(_QWORD *)(a1 + 512) = v6;
    operator delete(v6);
  }
  v14 = (void **)(a1 + 472);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = *(void **)(a1 + 448);
  if (v7)
  {
    *(_QWORD *)(a1 + 456) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 424);
  if (v8)
  {
    *(_QWORD *)(a1 + 432) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 400);
  if (v9)
  {
    *(_QWORD *)(a1 + 408) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 376);
  if (v10)
  {
    *(_QWORD *)(a1 + 384) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(_QWORD *)(a1 + 360) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 304);
  if (v12)
  {
    *(_QWORD *)(a1 + 312) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 280);
  if (v13)
  {
    *(_QWORD *)(a1 + 288) = v13;
    operator delete(v13);
  }
  Parallel::~Parallel((Parallel *)a1);
}

void BatchNormalization<signed char>::targets()
{
  exitFramework(1);
}

uint64_t BatchNormalization<signed char>::inputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t BatchNormalization<signed char>::outputs(uint64_t a1)
{
  return a1 + 192;
}

void BatchNormalization<signed char>::deltas()
{
  exitFramework(1);
}

void BatchNormalization<signed char>::inputDeltas()
{
  exitFramework(1);
}

uint64_t BatchNormalization<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t BatchNormalization<signed char>::read(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  int v8;

  v6 = *(int *)(a2 + 72);
  v7 = (int *)(*(_QWORD *)a2 + v6);
  if ((unint64_t)v7 <= *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4)
  {
    v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8)
    exitFramework(3);
  VVector<float>::read((signed __int8 **)(a1 + 128), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)8, v8);
  VVector<float>::read((signed __int8 **)(a1 + 136), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)8, *(_DWORD *)(a1 + 44));
  VVector<float>::read((signed __int8 **)(a1 + 144), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)8, *(_DWORD *)(a1 + 44));
  return VVector<float>::read((signed __int8 **)(a1 + 152), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)8, *(_DWORD *)(a1 + 44));
}

void **BatchNormalization<signed char>::write(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int __ptr;

  __ptr = *(_DWORD *)(a1 + 44);
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  *a3 += 4;
  VVector<float>::write((void **)(a1 + 128), __stream, a3, 8, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((void **)(a1 + 136), __stream, a3, 8, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((void **)(a1 + 144), __stream, a3, 8, a5, *(_DWORD *)(a1 + 44));
  return VVector<float>::write((void **)(a1 + 152), __stream, a3, 8, a5, *(_DWORD *)(a1 + 44));
}

void BatchNormalization<signed char>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void *__p;
  char v106;

  std::string::basic_string[abi:ne180100]<0>(&__p, "BatchNormalization, from allocAll");
  std::vector<VVector<float>>::resize((char **)(a1 + 168), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 192), maxFeatureVectors);
  if (!*(_BYTE *)(a1 + 161))
  {
    v2 = *(unsigned int *)(a1 + 44);
    v3 = (void *)operator new[]();
    v4 = v3;
    if ((int)v2 >= 1)
      bzero(v3, 4 * v2);
    *(_QWORD *)(a1 + 128) = v4;
    v5 = *(unsigned int *)(a1 + 44);
    v6 = (void *)operator new[]();
    v7 = v6;
    if ((int)v5 >= 1)
      bzero(v6, 4 * v5);
    *(_QWORD *)(a1 + 136) = v7;
    v8 = *(unsigned int *)(a1 + 44);
    v9 = (void *)operator new[]();
    v10 = v9;
    if ((int)v8 >= 1)
      bzero(v9, 4 * v8);
    *(_QWORD *)(a1 + 144) = v10;
    v11 = *(unsigned int *)(a1 + 44);
    v12 = (void *)operator new[]();
    v13 = v12;
    if ((int)v11 >= 1)
      bzero(v12, 4 * v11);
    *(_QWORD *)(a1 + 152) = v13;
    v14 = *(_QWORD *)(a1 + 128);
    v16 = *(_QWORD **)(a1 + 296);
    v15 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v16 >= v15)
    {
      v18 = *(_QWORD *)(a1 + 288);
      v19 = ((uint64_t)v16 - v18) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        goto LABEL_120;
      v20 = v15 - v18;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v22);
      else
        v23 = 0;
      v24 = (_QWORD *)(v22 + 8 * v19);
      v25 = v22 + 8 * v23;
      *v24 = v14;
      v17 = v24 + 1;
      v27 = *(char **)(a1 + 288);
      v26 = *(char **)(a1 + 296);
      if (v26 != v27)
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v24 = v28;
        }
        while (v26 != v27);
        v26 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v24;
      *(_QWORD *)(a1 + 296) = v17;
      *(_QWORD *)(a1 + 304) = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v16 = v14;
      v17 = v16 + 1;
    }
    *(_QWORD *)(a1 + 296) = v17;
    v29 = *(_QWORD *)(a1 + 136);
    v30 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v17 >= v30)
    {
      v32 = *(_QWORD *)(a1 + 288);
      v33 = ((uint64_t)v17 - v32) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        goto LABEL_120;
      v34 = v30 - v32;
      v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1))
        v35 = v33 + 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
        v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36);
      else
        v37 = 0;
      v38 = (_QWORD *)(v36 + 8 * v33);
      v39 = v36 + 8 * v37;
      *v38 = v29;
      v31 = v38 + 1;
      v41 = *(char **)(a1 + 288);
      v40 = *(char **)(a1 + 296);
      if (v40 != v41)
      {
        do
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *--v38 = v42;
        }
        while (v40 != v41);
        v40 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v38;
      *(_QWORD *)(a1 + 296) = v31;
      *(_QWORD *)(a1 + 304) = v39;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v17 = v29;
      v31 = v17 + 1;
    }
    *(_QWORD *)(a1 + 296) = v31;
    v43 = *(_QWORD *)(a1 + 144);
    v44 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v31 >= v44)
    {
      v46 = *(_QWORD *)(a1 + 288);
      v47 = ((uint64_t)v31 - v46) >> 3;
      if ((unint64_t)(v47 + 1) >> 61)
        goto LABEL_120;
      v48 = v44 - v46;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
      else
        v51 = 0;
      v52 = (_QWORD *)(v50 + 8 * v47);
      v53 = v50 + 8 * v51;
      *v52 = v43;
      v45 = v52 + 1;
      v55 = *(char **)(a1 + 288);
      v54 = *(char **)(a1 + 296);
      if (v54 != v55)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *--v52 = v56;
        }
        while (v54 != v55);
        v54 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v52;
      *(_QWORD *)(a1 + 296) = v45;
      *(_QWORD *)(a1 + 304) = v53;
      if (v54)
        operator delete(v54);
    }
    else
    {
      *v31 = v43;
      v45 = v31 + 1;
    }
    *(_QWORD *)(a1 + 296) = v45;
    v57 = *(_QWORD *)(a1 + 152);
    v58 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v45 < v58)
    {
      *v45 = v57;
      v59 = v45 + 1;
LABEL_74:
      *(_QWORD *)(a1 + 296) = v59;
      goto LABEL_75;
    }
    v60 = *(_QWORD *)(a1 + 288);
    v61 = ((uint64_t)v45 - v60) >> 3;
    if (!((unint64_t)(v61 + 1) >> 61))
    {
      v62 = v58 - v60;
      v63 = v62 >> 2;
      if (v62 >> 2 <= (unint64_t)(v61 + 1))
        v63 = v61 + 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
        v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v64);
      else
        v65 = 0;
      v66 = (_QWORD *)(v64 + 8 * v61);
      v67 = v64 + 8 * v65;
      *v66 = v57;
      v59 = v66 + 1;
      v69 = *(char **)(a1 + 288);
      v68 = *(char **)(a1 + 296);
      if (v68 != v69)
      {
        do
        {
          v70 = *((_QWORD *)v68 - 1);
          v68 -= 8;
          *--v66 = v70;
        }
        while (v68 != v69);
        v68 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v66;
      *(_QWORD *)(a1 + 296) = v59;
      *(_QWORD *)(a1 + 304) = v67;
      if (v68)
        operator delete(v68);
      goto LABEL_74;
    }
LABEL_120:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_75:
  if (maxFeatureVectors >= 1)
  {
    v71 = 0;
    do
    {
      v72 = *(unsigned int *)(a1 + 44);
      v73 = (void *)operator new[]();
      v74 = v73;
      if ((int)v72 >= 1)
        bzero(v73, 4 * v72);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v71) = v74;
      v76 = *(_QWORD **)(a1 + 296);
      v75 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v76 >= v75)
      {
        v78 = *(_QWORD *)(a1 + 288);
        v79 = ((uint64_t)v76 - v78) >> 3;
        if ((unint64_t)(v79 + 1) >> 61)
          goto LABEL_120;
        v80 = v75 - v78;
        v81 = v80 >> 2;
        if (v80 >> 2 <= (unint64_t)(v79 + 1))
          v81 = v79 + 1;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
          v82 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v82 = v81;
        if (v82)
          v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v82);
        else
          v83 = 0;
        v84 = (_QWORD *)(v82 + 8 * v79);
        *v84 = v74;
        v77 = v84 + 1;
        v86 = *(char **)(a1 + 288);
        v85 = *(char **)(a1 + 296);
        if (v85 != v86)
        {
          do
          {
            v87 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *--v84 = v87;
          }
          while (v85 != v86);
          v85 = *(char **)(a1 + 288);
        }
        *(_QWORD *)(a1 + 288) = v84;
        *(_QWORD *)(a1 + 296) = v77;
        *(_QWORD *)(a1 + 304) = v82 + 8 * v83;
        if (v85)
          operator delete(v85);
      }
      else
      {
        *v76 = v74;
        v77 = v76 + 1;
      }
      *(_QWORD *)(a1 + 296) = v77;
      ++v71;
    }
    while (v71 < maxFeatureVectors);
    if (maxFeatureVectors >= 1)
    {
      v88 = 0;
      do
      {
        v89 = *(unsigned int *)(a1 + 44);
        v90 = (void *)operator new[]();
        v91 = v90;
        if ((int)v89 >= 1)
          bzero(v90, 4 * v89);
        *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v88) = v91;
        v93 = *(_QWORD **)(a1 + 296);
        v92 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v93 >= v92)
        {
          v95 = *(_QWORD *)(a1 + 288);
          v96 = ((uint64_t)v93 - v95) >> 3;
          if ((unint64_t)(v96 + 1) >> 61)
            goto LABEL_120;
          v97 = v92 - v95;
          v98 = v97 >> 2;
          if (v97 >> 2 <= (unint64_t)(v96 + 1))
            v98 = v96 + 1;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
            v99 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v99 = v98;
          if (v99)
            v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v99);
          else
            v100 = 0;
          v101 = (_QWORD *)(v99 + 8 * v96);
          *v101 = v91;
          v94 = v101 + 1;
          v103 = *(char **)(a1 + 288);
          v102 = *(char **)(a1 + 296);
          if (v102 != v103)
          {
            do
            {
              v104 = *((_QWORD *)v102 - 1);
              v102 -= 8;
              *--v101 = v104;
            }
            while (v102 != v103);
            v102 = *(char **)(a1 + 288);
          }
          *(_QWORD *)(a1 + 288) = v101;
          *(_QWORD *)(a1 + 296) = v94;
          *(_QWORD *)(a1 + 304) = v99 + 8 * v100;
          if (v102)
            operator delete(v102);
        }
        else
        {
          *v93 = v91;
          v94 = v93 + 1;
        }
        *(_QWORD *)(a1 + 296) = v94;
        ++v88;
      }
      while (v88 < maxFeatureVectors);
    }
  }
  if (v106 < 0)
    operator delete(__p);
}

void sub_19156F920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BatchNormalization<signed char>::cleanupAllBuffers(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = (_QWORD *)result;
  v3 = *(_QWORD *)(result + 288);
  v2 = *(_QWORD *)(result + 296);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(result + 296);
  }
  else
  {
    v4 = 0;
    do
    {
      result = *(_QWORD *)(v3 + 8 * v4);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C8052888210);
        v3 = v1[36];
        v2 = v1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v1[37] = v3;
  v1[22] = v1[21];
  v1[25] = v1[24];
  return result;
}

uint64_t BatchNormalization<signed char>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void BatchNormalization<signed char>::backward()
{
  exitFramework(5);
}

int *BatchNormalization<signed char>::forward(int *result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  float v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    v6 = result;
    v7 = 0;
    do
    {
      memmove(*(void **)(*((_QWORD *)v6 + 21) + 8 * v7), *(const void **)(*a2 + 8 * v7), 4 * v6[11]);
      v8 = v6[11];
      v9 = *(const void **)(*((_QWORD *)v6 + 21) + 8 * v7);
      if (v8 >= 1)
      {
        v10 = *((float *)v6 + 12);
        v11 = (float *)*((_QWORD *)v6 + 16);
        v12 = (float *)*((_QWORD *)v6 + 17);
        v13 = *(float **)(*((_QWORD *)v6 + 21) + 8 * v7);
        v14 = v6[11];
        v15 = (float *)*((_QWORD *)v6 + 18);
        v16 = (float *)*((_QWORD *)v6 + 19);
        do
        {
          v17 = *v11++;
          v18 = v17;
          v19 = *v12++;
          v20 = sqrtf(v10 + v19);
          v21 = *v15++;
          v22 = v21;
          v23 = *v16++;
          *v13 = v23 + (float)((float)((float)(*v13 - v18) / v20) * v22);
          ++v13;
          --v14;
        }
        while (v14);
      }
      result = (int *)memmove(*(void **)(*((_QWORD *)v6 + 24) + 8 * v7++), v9, 4 * v8);
    }
    while (v7 != v4);
  }
  return result;
}

_QWORD *BatchNormalization<signed char>::setMaster(_QWORD *a1, void *lpsrc)
{
  _QWORD *result;

  if (!result)
    __cxa_bad_cast();
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void BatchNormalization<signed char>::computeError()
{
  exitFramework(5);
}

void BatchNormalization<signed char>::log2Probability()
{
  exitFramework(5);
}

void BatchNormalization<signed char>::~BatchNormalization(uint64_t a1)
{
  BatchNormalization<signed char>::~BatchNormalization(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t BatchNormalization<signed char>::~BatchNormalization(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = off_1E2D56630;
  v4 = a1 + 288;
  v2 = *(void **)(a1 + 288);
  v3 = *(void **)(v4 + 8);
  if (v3 == v2)
  {
    v2 = v3;
    if (v3)
    {
LABEL_7:
      *(_QWORD *)(a1 + 296) = v2;
      operator delete(v2);
    }
  }
  else
  {
    v5 = 0;
    do
    {
      if (*((_QWORD *)v2 + v5))
      {
        MEMORY[0x19401CD78](*((_QWORD *)v2 + v5), 0x1000C8052888210);
        v2 = *(void **)(a1 + 288);
        v3 = *(void **)(a1 + 296);
      }
      ++v5;
    }
    while (v5 < ((_BYTE *)v3 - (_BYTE *)v2) >> 3);
    if (v2)
      goto LABEL_7;
  }
  *(_QWORD *)(a1 + 216) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 224));
  v6 = *(void **)(a1 + 192);
  if (v6)
  {
    *(_QWORD *)(a1 + 200) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 168);
  if (v7)
  {
    *(_QWORD *)(a1 + 176) = v7;
    operator delete(v7);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

void GRU<signed char>::init(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  _QWORD *v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unsigned int v182;
  _BYTE *v183;
  int v184;
  void *v185;
  _QWORD *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  int v211;
  void *v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  int v227;
  void *v228;
  _QWORD *v229;
  unint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  unsigned int v243;
  void *v244;
  _QWORD *v245;
  unint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  unint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  unsigned int v259;
  void *v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  unsigned int v275;
  void *v276;
  _QWORD *v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  void *v293;
  _QWORD *v294;
  unint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  void *v311;
  _QWORD *v312;
  unint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  char *v322;
  char *v323;
  uint64_t v324;
  std::vector<int>::size_type v325;
  uint64_t v326;
  void *v327;
  void *v328;
  _QWORD *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  void *v344;
  _QWORD *v345;
  unint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  void *v360;
  _QWORD *v361;
  unint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  _QWORD *v370;
  char *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  void *v375;
  void *v376;
  _QWORD *v377;
  unint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  char *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  void *v391;
  void *v392;
  _QWORD *v393;
  unint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  void *v407;
  void *v408;
  _QWORD *v409;
  unint64_t v410;
  _QWORD *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  void *v424;
  _QWORD *v425;
  unint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  _QWORD *v434;
  char *v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  void *v439;
  void *v440;
  _QWORD *v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  char *v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  void *v455;
  void *v456;
  _QWORD *v457;
  unint64_t v458;
  _QWORD *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  _QWORD *v466;
  char *v467;
  char *v468;
  uint64_t v469;
  uint64_t v470;
  void *v471;
  void *v472;
  _QWORD *v473;
  unint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  char *v483;
  char *v484;
  uint64_t v485;
  uint64_t v486;
  void *v487;
  void *v488;
  _QWORD *v489;
  unint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  char *v499;
  char *v500;
  uint64_t v501;
  uint64_t v502;
  void *v503;
  void *v504;
  _QWORD *v505;
  unint64_t v506;
  _QWORD *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  char *v515;
  char *v516;
  uint64_t v517;
  uint64_t v518;
  void *v519;
  void *v520;
  _QWORD *v521;
  unint64_t v522;
  _QWORD *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD *v530;
  char *v531;
  char *v532;
  uint64_t v533;
  uint64_t v534;
  void *v535;
  void *v536;
  _QWORD *v537;
  unint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  char *v547;
  char *v548;
  uint64_t v549;
  uint64_t *v550;
  unint64_t v551;
  char *v552;
  char *v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t *v557;
  unint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t *v566;
  unint64_t v567;
  char *v568;
  char *v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  uint64_t *v573;
  unint64_t v574;
  _QWORD *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t *v582;
  unint64_t v583;
  char *v584;
  char *v585;
  uint64_t v586;
  _BYTE *v587;
  int v588;
  uint64_t v589;
  uint64_t *v590;
  unint64_t v591;
  _QWORD *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t *v599;
  unint64_t v600;
  char *v601;
  char *v602;
  uint64_t v603;
  int v604;
  uint64_t v605;
  uint64_t *v606;
  unint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t *v615;
  unint64_t v616;
  char *v617;
  char *v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t *v622;
  unint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t *v631;
  unint64_t v632;
  char *v633;
  char *v634;
  uint64_t v635;
  __int128 v636[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1216) = v4;
  v5 = *(_QWORD **)(a1 + 2048);
  v6 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(a1 + 2040);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_707;
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = v4;
    v7 = v14 + 1;
    v16 = *(char **)(a1 + 2048);
    v17 = *(char **)(a1 + 2040);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v14;
    *(_QWORD *)(a1 + 2048) = v7;
    *(_QWORD *)(a1 + 2056) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = v4;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v7;
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  v21 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  *(_QWORD *)(a1 + 1224) = v21;
  v22 = *(_QWORD **)(a1 + 2048);
  v23 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v22 >= v23)
  {
    v25 = *(_QWORD *)(a1 + 2040);
    v26 = ((uint64_t)v22 - v25) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      goto LABEL_707;
    v27 = v23 - v25;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    else
      v30 = 0;
    v31 = (_QWORD *)(v29 + 8 * v26);
    v32 = v29 + 8 * v30;
    *v31 = v21;
    v24 = v31 + 1;
    v33 = *(char **)(a1 + 2048);
    v34 = *(char **)(a1 + 2040);
    if (v33 != v34)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
      v33 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v31;
    *(_QWORD *)(a1 + 2048) = v24;
    *(_QWORD *)(a1 + 2056) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v22 = v21;
    v24 = v22 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v24;
  v36 = *(unsigned int *)(a1 + 52);
  v37 = (void *)operator new[]();
  v38 = v37;
  if ((int)v36 >= 1)
    bzero(v37, 4 * v36);
  *(_QWORD *)(a1 + 1232) = v38;
  v39 = *(_QWORD **)(a1 + 2048);
  v40 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v39 >= v40)
  {
    v42 = *(_QWORD *)(a1 + 2040);
    v43 = ((uint64_t)v39 - v42) >> 3;
    if ((unint64_t)(v43 + 1) >> 61)
      goto LABEL_707;
    v44 = v40 - v42;
    v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1))
      v45 = v43 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v46);
    else
      v47 = 0;
    v48 = (_QWORD *)(v46 + 8 * v43);
    v49 = v46 + 8 * v47;
    *v48 = v38;
    v41 = v48 + 1;
    v50 = *(char **)(a1 + 2048);
    v51 = *(char **)(a1 + 2040);
    if (v50 != v51)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v52;
      }
      while (v50 != v51);
      v50 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v48;
    *(_QWORD *)(a1 + 2048) = v41;
    *(_QWORD *)(a1 + 2056) = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v39 = v38;
    v41 = v39 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v41;
  if (*(_BYTE *)(a1 + 42) || (v53 = *(unsigned __int8 *)(a1 + 2088), *(_BYTE *)(a1 + 2088)))
  {
    v54 = 3;
    v53 = 6;
  }
  else
  {
    v54 = 0;
  }
  if (!*(_DWORD *)(a1 + 2036))
  {
    v55 = *(_QWORD *)(a1 + 2096);
    if (v55 && (v56 = *(_DWORD *)(v55 + 40), v56 >= 1))
    {
      if (v56 == 6)
      {
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(v55 + 112 + 8 * v53);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(v55 + 112 + 8 * (v53 | 1));
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(v55 + 112 + 8 * (v53 + 2));
      }
      else
      {
        if (v56 != 4)
          exitFramework(45);
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(v55 + 8 * v53 + 112);
      }
      v61 = v55 + 112;
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(v61 + 8 * (v53 + 3));
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(v61 + 8 * (v53 + 4));
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(v61 + 8 * (v53 + 5));
    }
    else if (!*(_BYTE *)(a1 + 2033))
    {
      MMatrix<signed char>::MMatrix(v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v57 = *(_QWORD *)&v636[0];
      *(_QWORD *)(a1 + 232) = *(_QWORD *)&v636[0];
      v58 = *(_QWORD **)(a1 + 2072);
      v59 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v58 >= v59)
      {
        v62 = *(_QWORD *)(a1 + 2064);
        v63 = ((uint64_t)v58 - v62) >> 3;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_708;
        v64 = v59 - v62;
        v65 = v64 >> 2;
        if (v64 >> 2 <= (unint64_t)(v63 + 1))
          v65 = v63 + 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
          v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v66);
        else
          v67 = 0;
        v68 = (_QWORD *)(v66 + 8 * v63);
        v69 = v66 + 8 * v67;
        *v68 = v57;
        v60 = v68 + 1;
        v70 = *(char **)(a1 + 2072);
        v71 = *(char **)(a1 + 2064);
        if (v70 != v71)
        {
          do
          {
            v72 = *((_QWORD *)v70 - 1);
            v70 -= 8;
            *--v68 = v72;
          }
          while (v70 != v71);
          v70 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v68;
        *(_QWORD *)(a1 + 2072) = v60;
        *(_QWORD *)(a1 + 2080) = v69;
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v58 = v57;
        v60 = v58 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v60;
      MMatrix<signed char>::MMatrix(v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v73 = *(_QWORD *)&v636[0];
      *(_QWORD *)(a1 + 240) = *(_QWORD *)&v636[0];
      v74 = *(_QWORD **)(a1 + 2072);
      v75 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v74 >= v75)
      {
        v77 = *(_QWORD *)(a1 + 2064);
        v78 = ((uint64_t)v74 - v77) >> 3;
        if ((unint64_t)(v78 + 1) >> 61)
          goto LABEL_708;
        v79 = v75 - v77;
        v80 = v79 >> 2;
        if (v79 >> 2 <= (unint64_t)(v78 + 1))
          v80 = v78 + 1;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
          v81 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v81 = v80;
        if (v81)
          v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v81);
        else
          v82 = 0;
        v83 = (_QWORD *)(v81 + 8 * v78);
        v84 = v81 + 8 * v82;
        *v83 = v73;
        v76 = v83 + 1;
        v85 = *(char **)(a1 + 2072);
        v86 = *(char **)(a1 + 2064);
        if (v85 != v86)
        {
          do
          {
            v87 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *--v83 = v87;
          }
          while (v85 != v86);
          v85 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v83;
        *(_QWORD *)(a1 + 2072) = v76;
        *(_QWORD *)(a1 + 2080) = v84;
        if (v85)
          operator delete(v85);
      }
      else
      {
        *v74 = v73;
        v76 = v74 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v76;
      MMatrix<signed char>::MMatrix(v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v88 = *(_QWORD *)&v636[0];
      *(_QWORD *)(a1 + 248) = *(_QWORD *)&v636[0];
      v89 = *(_QWORD **)(a1 + 2072);
      v90 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v89 >= v90)
      {
        v92 = *(_QWORD *)(a1 + 2064);
        v93 = ((uint64_t)v89 - v92) >> 3;
        if ((unint64_t)(v93 + 1) >> 61)
          goto LABEL_708;
        v94 = v90 - v92;
        v95 = v94 >> 2;
        if (v94 >> 2 <= (unint64_t)(v93 + 1))
          v95 = v93 + 1;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
          v96 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v96 = v95;
        if (v96)
          v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v96);
        else
          v97 = 0;
        v98 = (_QWORD *)(v96 + 8 * v93);
        v99 = v96 + 8 * v97;
        *v98 = v88;
        v91 = v98 + 1;
        v100 = *(char **)(a1 + 2072);
        v101 = *(char **)(a1 + 2064);
        if (v100 != v101)
        {
          do
          {
            v102 = *((_QWORD *)v100 - 1);
            v100 -= 8;
            *--v98 = v102;
          }
          while (v100 != v101);
          v100 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v98;
        *(_QWORD *)(a1 + 2072) = v91;
        *(_QWORD *)(a1 + 2080) = v99;
        if (v100)
          operator delete(v100);
      }
      else
      {
        *v89 = v88;
        v91 = v89 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v91;
      MMatrix<signed char>::MMatrix(v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v103 = *(_QWORD *)&v636[0];
      *(_QWORD *)(a1 + 256) = *(_QWORD *)&v636[0];
      v104 = *(_QWORD **)(a1 + 2072);
      v105 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v104 >= v105)
      {
        v107 = *(_QWORD *)(a1 + 2064);
        v108 = ((uint64_t)v104 - v107) >> 3;
        if ((unint64_t)(v108 + 1) >> 61)
          goto LABEL_708;
        v109 = v105 - v107;
        v110 = v109 >> 2;
        if (v109 >> 2 <= (unint64_t)(v108 + 1))
          v110 = v108 + 1;
        if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
          v111 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v111 = v110;
        if (v111)
          v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v111);
        else
          v112 = 0;
        v113 = (_QWORD *)(v111 + 8 * v108);
        v114 = v111 + 8 * v112;
        *v113 = v103;
        v106 = v113 + 1;
        v115 = *(char **)(a1 + 2072);
        v116 = *(char **)(a1 + 2064);
        if (v115 != v116)
        {
          do
          {
            v117 = *((_QWORD *)v115 - 1);
            v115 -= 8;
            *--v113 = v117;
          }
          while (v115 != v116);
          v115 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v113;
        *(_QWORD *)(a1 + 2072) = v106;
        *(_QWORD *)(a1 + 2080) = v114;
        if (v115)
          operator delete(v115);
      }
      else
      {
        *v104 = v103;
        v106 = v104 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v106;
      MMatrix<signed char>::MMatrix(v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v118 = *(_QWORD *)&v636[0];
      *(_QWORD *)(a1 + 264) = *(_QWORD *)&v636[0];
      v119 = *(_QWORD **)(a1 + 2072);
      v120 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v119 >= v120)
      {
        v122 = *(_QWORD *)(a1 + 2064);
        v123 = ((uint64_t)v119 - v122) >> 3;
        if ((unint64_t)(v123 + 1) >> 61)
          goto LABEL_708;
        v124 = v120 - v122;
        v125 = v124 >> 2;
        if (v124 >> 2 <= (unint64_t)(v123 + 1))
          v125 = v123 + 1;
        if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
          v126 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v126 = v125;
        if (v126)
          v126 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v126);
        else
          v127 = 0;
        v128 = (_QWORD *)(v126 + 8 * v123);
        v129 = v126 + 8 * v127;
        *v128 = v118;
        v121 = v128 + 1;
        v130 = *(char **)(a1 + 2072);
        v131 = *(char **)(a1 + 2064);
        if (v130 != v131)
        {
          do
          {
            v132 = *((_QWORD *)v130 - 1);
            v130 -= 8;
            *--v128 = v132;
          }
          while (v130 != v131);
          v130 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v128;
        *(_QWORD *)(a1 + 2072) = v121;
        *(_QWORD *)(a1 + 2080) = v129;
        if (v130)
          operator delete(v130);
      }
      else
      {
        *v119 = v118;
        v121 = v119 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v121;
      MMatrix<signed char>::MMatrix(v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v133 = *(_QWORD *)&v636[0];
      *(_QWORD *)(a1 + 272) = *(_QWORD *)&v636[0];
      v134 = *(_QWORD **)(a1 + 2072);
      v135 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v134 >= v135)
      {
        v137 = *(_QWORD *)(a1 + 2064);
        v138 = ((uint64_t)v134 - v137) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_708;
        v139 = v135 - v137;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v141);
        else
          v142 = 0;
        v143 = (_QWORD *)(v141 + 8 * v138);
        v144 = v141 + 8 * v142;
        *v143 = v133;
        v136 = v143 + 1;
        v145 = *(char **)(a1 + 2072);
        v146 = *(char **)(a1 + 2064);
        if (v145 != v146)
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v143 = v147;
          }
          while (v145 != v146);
          v145 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v143;
        *(_QWORD *)(a1 + 2072) = v136;
        *(_QWORD *)(a1 + 2080) = v144;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v134 = v133;
        v136 = v134 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v136;
    }
    if (*(_BYTE *)(a1 + 2033))
      goto LABEL_166;
    v183 = *(_BYTE **)(a1 + 2096);
    if (!v183)
      goto LABEL_166;
    if (v183[244] && v183[245])
    {
      *(_QWORD *)(a1 + 280) = *(_QWORD *)&v183[8 * v54 + 248];
      *(_QWORD *)(a1 + 288) = *(_QWORD *)&v183[8 * v54 + 256];
      *(_QWORD *)(a1 + 296) = *(_QWORD *)&v183[8 * v54 + 264];
    }
    else
    {
      v195 = *(_DWORD *)(a1 + 52);
      v196 = operator new[]();
      *(_QWORD *)&v636[0] = v196;
      VVector<signed char>::randomize(v636, v195);
      *(_QWORD *)(a1 + 280) = v196;
      v197 = *(uint64_t **)(a1 + 2072);
      v198 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v197 >= v198)
      {
        v200 = *(_QWORD *)(a1 + 2064);
        v201 = ((uint64_t)v197 - v200) >> 3;
        if ((unint64_t)(v201 + 1) >> 61)
          goto LABEL_708;
        v202 = v198 - v200;
        v203 = v202 >> 2;
        if (v202 >> 2 <= (unint64_t)(v201 + 1))
          v203 = v201 + 1;
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
          v204 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v204 = v203;
        if (v204)
          v204 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v204);
        else
          v205 = 0;
        v550 = (uint64_t *)(v204 + 8 * v201);
        v551 = v204 + 8 * v205;
        *v550 = v196;
        v199 = v550 + 1;
        v552 = *(char **)(a1 + 2072);
        v553 = *(char **)(a1 + 2064);
        if (v552 != v553)
        {
          do
          {
            v554 = *((_QWORD *)v552 - 1);
            v552 -= 8;
            *--v550 = v554;
          }
          while (v552 != v553);
          v552 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v550;
        *(_QWORD *)(a1 + 2072) = v199;
        *(_QWORD *)(a1 + 2080) = v551;
        if (v552)
          operator delete(v552);
      }
      else
      {
        *v197 = v196;
        v199 = v197 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v199;
      v555 = *(_DWORD *)(a1 + 52);
      v556 = operator new[]();
      *(_QWORD *)&v636[0] = v556;
      VVector<signed char>::randomize(v636, v555);
      *(_QWORD *)(a1 + 288) = v556;
      v557 = *(uint64_t **)(a1 + 2072);
      v558 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v557 >= v558)
      {
        v560 = *(_QWORD *)(a1 + 2064);
        v561 = ((uint64_t)v557 - v560) >> 3;
        if ((unint64_t)(v561 + 1) >> 61)
          goto LABEL_708;
        v562 = v558 - v560;
        v563 = v562 >> 2;
        if (v562 >> 2 <= (unint64_t)(v561 + 1))
          v563 = v561 + 1;
        if ((unint64_t)v562 >= 0x7FFFFFFFFFFFFFF8)
          v564 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v564 = v563;
        if (v564)
          v564 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v564);
        else
          v565 = 0;
        v566 = (uint64_t *)(v564 + 8 * v561);
        v567 = v564 + 8 * v565;
        *v566 = v556;
        v559 = v566 + 1;
        v568 = *(char **)(a1 + 2072);
        v569 = *(char **)(a1 + 2064);
        if (v568 != v569)
        {
          do
          {
            v570 = *((_QWORD *)v568 - 1);
            v568 -= 8;
            *--v566 = v570;
          }
          while (v568 != v569);
          v568 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v566;
        *(_QWORD *)(a1 + 2072) = v559;
        *(_QWORD *)(a1 + 2080) = v567;
        if (v568)
          operator delete(v568);
      }
      else
      {
        *v557 = v556;
        v559 = v557 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v559;
      v571 = *(_DWORD *)(a1 + 52);
      v572 = operator new[]();
      *(_QWORD *)&v636[0] = v572;
      VVector<signed char>::randomize(v636, v571);
      *(_QWORD *)(a1 + 296) = v572;
      v573 = *(uint64_t **)(a1 + 2072);
      v574 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v573 >= v574)
      {
        v576 = *(_QWORD *)(a1 + 2064);
        v577 = ((uint64_t)v573 - v576) >> 3;
        if ((unint64_t)(v577 + 1) >> 61)
          goto LABEL_708;
        v578 = v574 - v576;
        v579 = v578 >> 2;
        if (v578 >> 2 <= (unint64_t)(v577 + 1))
          v579 = v577 + 1;
        if ((unint64_t)v578 >= 0x7FFFFFFFFFFFFFF8)
          v580 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v580 = v579;
        if (v580)
          v580 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v580);
        else
          v581 = 0;
        v582 = (uint64_t *)(v580 + 8 * v577);
        v583 = v580 + 8 * v581;
        *v582 = v572;
        v575 = v582 + 1;
        v584 = *(char **)(a1 + 2072);
        v585 = *(char **)(a1 + 2064);
        if (v584 != v585)
        {
          do
          {
            v586 = *((_QWORD *)v584 - 1);
            v584 -= 8;
            *--v582 = v586;
          }
          while (v584 != v585);
          v584 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v582;
        *(_QWORD *)(a1 + 2072) = v575;
        *(_QWORD *)(a1 + 2080) = v583;
        if (v584)
          operator delete(v584);
      }
      else
      {
        *v573 = v572;
        v575 = v573 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v575;
      v183 = *(_BYTE **)(a1 + 2096);
    }
    if (v183[376])
    {
      v587 = v183 + 384;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)&v587[8 * v54];
      *(_QWORD *)(a1 + 312) = *(_QWORD *)&v587[8 * v54 + 8];
      *(_QWORD *)(a1 + 320) = *(_QWORD *)&v587[8 * v54 + 16];
LABEL_166:
      *(_QWORD *)(a1 + 328) = a1 + 232;
      *(_QWORD *)(a1 + 336) = a1 + 240;
      *(_QWORD *)(a1 + 344) = a1 + 248;
      *(_QWORD *)(a1 + 352) = a1 + 256;
      *(_QWORD *)(a1 + 360) = a1 + 264;
      *(_QWORD *)(a1 + 368) = a1 + 272;
      *(_QWORD *)(a1 + 376) = a1 + 280;
      *(_QWORD *)(a1 + 384) = a1 + 288;
      *(_QWORD *)(a1 + 392) = a1 + 296;
      *(_QWORD *)(a1 + 400) = a1 + 304;
      *(_QWORD *)(a1 + 408) = a1 + 312;
      *(_QWORD *)(a1 + 416) = a1 + 320;
      goto LABEL_167;
    }
    v588 = *(_DWORD *)(a1 + 52);
    v589 = operator new[]();
    *(_QWORD *)&v636[0] = v589;
    VVector<signed char>::randomize(v636, v588);
    *(_QWORD *)(a1 + 304) = v589;
    v590 = *(uint64_t **)(a1 + 2072);
    v591 = *(_QWORD *)(a1 + 2080);
    if ((unint64_t)v590 >= v591)
    {
      v593 = *(_QWORD *)(a1 + 2064);
      v594 = ((uint64_t)v590 - v593) >> 3;
      if ((unint64_t)(v594 + 1) >> 61)
        goto LABEL_708;
      v595 = v591 - v593;
      v596 = v595 >> 2;
      if (v595 >> 2 <= (unint64_t)(v594 + 1))
        v596 = v594 + 1;
      if ((unint64_t)v595 >= 0x7FFFFFFFFFFFFFF8)
        v597 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v597 = v596;
      if (v597)
        v597 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v597);
      else
        v598 = 0;
      v599 = (uint64_t *)(v597 + 8 * v594);
      v600 = v597 + 8 * v598;
      *v599 = v589;
      v592 = v599 + 1;
      v601 = *(char **)(a1 + 2072);
      v602 = *(char **)(a1 + 2064);
      if (v601 != v602)
      {
        do
        {
          v603 = *((_QWORD *)v601 - 1);
          v601 -= 8;
          *--v599 = v603;
        }
        while (v601 != v602);
        v601 = *(char **)(a1 + 2064);
      }
      *(_QWORD *)(a1 + 2064) = v599;
      *(_QWORD *)(a1 + 2072) = v592;
      *(_QWORD *)(a1 + 2080) = v600;
      if (v601)
        operator delete(v601);
    }
    else
    {
      *v590 = v589;
      v592 = v590 + 1;
    }
    *(_QWORD *)(a1 + 2072) = v592;
    v604 = *(_DWORD *)(a1 + 52);
    v605 = operator new[]();
    *(_QWORD *)&v636[0] = v605;
    VVector<signed char>::randomize(v636, v604);
    *(_QWORD *)(a1 + 312) = v605;
    v606 = *(uint64_t **)(a1 + 2072);
    v607 = *(_QWORD *)(a1 + 2080);
    if ((unint64_t)v606 >= v607)
    {
      v609 = *(_QWORD *)(a1 + 2064);
      v610 = ((uint64_t)v606 - v609) >> 3;
      if ((unint64_t)(v610 + 1) >> 61)
        goto LABEL_708;
      v611 = v607 - v609;
      v612 = v611 >> 2;
      if (v611 >> 2 <= (unint64_t)(v610 + 1))
        v612 = v610 + 1;
      if ((unint64_t)v611 >= 0x7FFFFFFFFFFFFFF8)
        v613 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v613 = v612;
      if (v613)
        v613 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v613);
      else
        v614 = 0;
      v615 = (uint64_t *)(v613 + 8 * v610);
      v616 = v613 + 8 * v614;
      *v615 = v605;
      v608 = v615 + 1;
      v617 = *(char **)(a1 + 2072);
      v618 = *(char **)(a1 + 2064);
      if (v617 != v618)
      {
        do
        {
          v619 = *((_QWORD *)v617 - 1);
          v617 -= 8;
          *--v615 = v619;
        }
        while (v617 != v618);
        v617 = *(char **)(a1 + 2064);
      }
      *(_QWORD *)(a1 + 2064) = v615;
      *(_QWORD *)(a1 + 2072) = v608;
      *(_QWORD *)(a1 + 2080) = v616;
      if (v617)
        operator delete(v617);
    }
    else
    {
      *v606 = v605;
      v608 = v606 + 1;
    }
    *(_QWORD *)(a1 + 2072) = v608;
    v620 = *(_DWORD *)(a1 + 52);
    v621 = operator new[]();
    *(_QWORD *)&v636[0] = v621;
    VVector<signed char>::randomize(v636, v620);
    *(_QWORD *)(a1 + 320) = v621;
    v622 = *(uint64_t **)(a1 + 2072);
    v623 = *(_QWORD *)(a1 + 2080);
    if ((unint64_t)v622 < v623)
    {
      *v622 = v621;
      v624 = v622 + 1;
LABEL_706:
      *(_QWORD *)(a1 + 2072) = v624;
      goto LABEL_166;
    }
    v625 = *(_QWORD *)(a1 + 2064);
    v626 = ((uint64_t)v622 - v625) >> 3;
    if (!((unint64_t)(v626 + 1) >> 61))
    {
      v627 = v623 - v625;
      v628 = v627 >> 2;
      if (v627 >> 2 <= (unint64_t)(v626 + 1))
        v628 = v626 + 1;
      if ((unint64_t)v627 >= 0x7FFFFFFFFFFFFFF8)
        v629 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v629 = v628;
      if (v629)
        v629 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v629);
      else
        v630 = 0;
      v631 = (uint64_t *)(v629 + 8 * v626);
      v632 = v629 + 8 * v630;
      *v631 = v621;
      v624 = v631 + 1;
      v633 = *(char **)(a1 + 2072);
      v634 = *(char **)(a1 + 2064);
      if (v633 != v634)
      {
        do
        {
          v635 = *((_QWORD *)v633 - 1);
          v633 -= 8;
          *--v631 = v635;
        }
        while (v633 != v634);
        v633 = *(char **)(a1 + 2064);
      }
      *(_QWORD *)(a1 + 2064) = v631;
      *(_QWORD *)(a1 + 2072) = v624;
      *(_QWORD *)(a1 + 2080) = v632;
      if (v633)
        operator delete(v633);
      goto LABEL_706;
    }
LABEL_708:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_167:
  v148 = *(unsigned int *)(a1 + 52);
  v149 = (void *)operator new[]();
  v150 = v149;
  if ((int)v148 >= 1)
    bzero(v149, 4 * v148);
  *(_QWORD *)(a1 + 584) = v150;
  v151 = *(_QWORD **)(a1 + 2048);
  v152 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v151 >= v152)
  {
    v154 = *(_QWORD *)(a1 + 2040);
    v155 = ((uint64_t)v151 - v154) >> 3;
    if ((unint64_t)(v155 + 1) >> 61)
      goto LABEL_707;
    v156 = v152 - v154;
    v157 = v156 >> 2;
    if (v156 >> 2 <= (unint64_t)(v155 + 1))
      v157 = v155 + 1;
    if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
      v158 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v158 = v157;
    if (v158)
      v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v158);
    else
      v159 = 0;
    v160 = (_QWORD *)(v158 + 8 * v155);
    v161 = v158 + 8 * v159;
    *v160 = v150;
    v153 = v160 + 1;
    v162 = *(char **)(a1 + 2048);
    v163 = *(char **)(a1 + 2040);
    if (v162 != v163)
    {
      do
      {
        v164 = *((_QWORD *)v162 - 1);
        v162 -= 8;
        *--v160 = v164;
      }
      while (v162 != v163);
      v162 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v160;
    *(_QWORD *)(a1 + 2048) = v153;
    *(_QWORD *)(a1 + 2056) = v161;
    if (v162)
      operator delete(v162);
  }
  else
  {
    *v151 = v150;
    v153 = v151 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v153;
  v165 = *(unsigned int *)(a1 + 52);
  v166 = (void *)operator new[]();
  v167 = v166;
  if ((int)v165 >= 1)
    bzero(v166, 4 * v165);
  *(_QWORD *)(a1 + 592) = v167;
  v168 = *(_QWORD **)(a1 + 2048);
  v169 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v168 >= v169)
  {
    v171 = *(_QWORD *)(a1 + 2040);
    v172 = ((uint64_t)v168 - v171) >> 3;
    if ((unint64_t)(v172 + 1) >> 61)
      goto LABEL_707;
    v173 = v169 - v171;
    v174 = v173 >> 2;
    if (v173 >> 2 <= (unint64_t)(v172 + 1))
      v174 = v172 + 1;
    if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
      v175 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v175 = v174;
    if (v175)
      v175 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v175);
    else
      v176 = 0;
    v177 = (_QWORD *)(v175 + 8 * v172);
    v178 = v175 + 8 * v176;
    *v177 = v167;
    v170 = v177 + 1;
    v179 = *(char **)(a1 + 2048);
    v180 = *(char **)(a1 + 2040);
    if (v179 != v180)
    {
      do
      {
        v181 = *((_QWORD *)v179 - 1);
        v179 -= 8;
        *--v177 = v181;
      }
      while (v179 != v180);
      v179 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v177;
    *(_QWORD *)(a1 + 2048) = v170;
    *(_QWORD *)(a1 + 2056) = v178;
    if (v179)
      operator delete(v179);
  }
  else
  {
    *v168 = v167;
    v170 = v168 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v170;
  if (!*(_BYTE *)(a1 + 2032))
  {
    if (*(_DWORD *)(a1 + 56))
    {
      v182 = *(unsigned __int8 *)(a1 + 40) + 1;
      SparseMatrix<float>::SparseMatrix((unsigned int *)v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 760), v636);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v636);
      SparseMatrix<float>::SparseMatrix((unsigned int *)v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 880), v636);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v636);
      SparseMatrix<float>::SparseMatrix((unsigned int *)v636, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 1000), v636);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v636);
    }
    else
    {
      v184 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v185 = (void *)operator new[]();
      bzero(v185, 4 * v184);
      *(_QWORD *)(a1 + 1120) = v185;
      v186 = *(_QWORD **)(a1 + 2048);
      v187 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v186 >= v187)
      {
        v189 = *(_QWORD *)(a1 + 2040);
        v190 = ((uint64_t)v186 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61)
          goto LABEL_707;
        v191 = v187 - v189;
        v192 = v191 >> 2;
        if (v191 >> 2 <= (unint64_t)(v190 + 1))
          v192 = v190 + 1;
        if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
          v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v193);
        else
          v194 = 0;
        v206 = (_QWORD *)(v193 + 8 * v190);
        v207 = v193 + 8 * v194;
        *v206 = v185;
        v188 = v206 + 1;
        v208 = *(char **)(a1 + 2048);
        v209 = *(char **)(a1 + 2040);
        if (v208 != v209)
        {
          do
          {
            v210 = *((_QWORD *)v208 - 1);
            v208 -= 8;
            *--v206 = v210;
          }
          while (v208 != v209);
          v208 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v206;
        *(_QWORD *)(a1 + 2048) = v188;
        *(_QWORD *)(a1 + 2056) = v207;
        if (v208)
          operator delete(v208);
      }
      else
      {
        *v186 = v185;
        v188 = v186 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v188;
      v211 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v212 = (void *)operator new[]();
      bzero(v212, 4 * v211);
      *(_QWORD *)(a1 + 1128) = v212;
      v213 = *(_QWORD **)(a1 + 2048);
      v214 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v213 >= v214)
      {
        v216 = *(_QWORD *)(a1 + 2040);
        v217 = ((uint64_t)v213 - v216) >> 3;
        if ((unint64_t)(v217 + 1) >> 61)
          goto LABEL_707;
        v218 = v214 - v216;
        v219 = v218 >> 2;
        if (v218 >> 2 <= (unint64_t)(v217 + 1))
          v219 = v217 + 1;
        if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8)
          v220 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v220 = v219;
        if (v220)
          v220 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v220);
        else
          v221 = 0;
        v222 = (_QWORD *)(v220 + 8 * v217);
        v223 = v220 + 8 * v221;
        *v222 = v212;
        v215 = v222 + 1;
        v224 = *(char **)(a1 + 2048);
        v225 = *(char **)(a1 + 2040);
        if (v224 != v225)
        {
          do
          {
            v226 = *((_QWORD *)v224 - 1);
            v224 -= 8;
            *--v222 = v226;
          }
          while (v224 != v225);
          v224 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v222;
        *(_QWORD *)(a1 + 2048) = v215;
        *(_QWORD *)(a1 + 2056) = v223;
        if (v224)
          operator delete(v224);
      }
      else
      {
        *v213 = v212;
        v215 = v213 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v215;
      v227 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v228 = (void *)operator new[]();
      bzero(v228, 4 * v227);
      *(_QWORD *)(a1 + 1136) = v228;
      v229 = *(_QWORD **)(a1 + 2048);
      v230 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v229 >= v230)
      {
        v232 = *(_QWORD *)(a1 + 2040);
        v233 = ((uint64_t)v229 - v232) >> 3;
        if ((unint64_t)(v233 + 1) >> 61)
          goto LABEL_707;
        v234 = v230 - v232;
        v235 = v234 >> 2;
        if (v234 >> 2 <= (unint64_t)(v233 + 1))
          v235 = v233 + 1;
        if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF8)
          v236 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v236 = v235;
        if (v236)
          v236 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v236);
        else
          v237 = 0;
        v238 = (_QWORD *)(v236 + 8 * v233);
        v239 = v236 + 8 * v237;
        *v238 = v228;
        v231 = v238 + 1;
        v240 = *(char **)(a1 + 2048);
        v241 = *(char **)(a1 + 2040);
        if (v240 != v241)
        {
          do
          {
            v242 = *((_QWORD *)v240 - 1);
            v240 -= 8;
            *--v238 = v242;
          }
          while (v240 != v241);
          v240 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v238;
        *(_QWORD *)(a1 + 2048) = v231;
        *(_QWORD *)(a1 + 2056) = v239;
        if (v240)
          operator delete(v240);
      }
      else
      {
        *v229 = v228;
        v231 = v229 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v231;
    }
    v243 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v244 = (void *)operator new[]();
    bzero(v244, 4 * v243);
    *(_QWORD *)(a1 + 1152) = v244;
    v245 = *(_QWORD **)(a1 + 2048);
    v246 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v245 >= v246)
    {
      v248 = *(_QWORD *)(a1 + 2040);
      v249 = ((uint64_t)v245 - v248) >> 3;
      if ((unint64_t)(v249 + 1) >> 61)
        goto LABEL_707;
      v250 = v246 - v248;
      v251 = v250 >> 2;
      if (v250 >> 2 <= (unint64_t)(v249 + 1))
        v251 = v249 + 1;
      if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF8)
        v252 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v252 = v251;
      if (v252)
        v252 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v252);
      else
        v253 = 0;
      v254 = (_QWORD *)(v252 + 8 * v249);
      v255 = v252 + 8 * v253;
      *v254 = v244;
      v247 = v254 + 1;
      v256 = *(char **)(a1 + 2048);
      v257 = *(char **)(a1 + 2040);
      if (v256 != v257)
      {
        do
        {
          v258 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *--v254 = v258;
        }
        while (v256 != v257);
        v256 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v254;
      *(_QWORD *)(a1 + 2048) = v247;
      *(_QWORD *)(a1 + 2056) = v255;
      if (v256)
        operator delete(v256);
    }
    else
    {
      *v245 = v244;
      v247 = v245 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v247;
    v259 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v260 = (void *)operator new[]();
    bzero(v260, 4 * v259);
    *(_QWORD *)(a1 + 1144) = v260;
    v261 = *(_QWORD **)(a1 + 2048);
    v262 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v261 >= v262)
    {
      v264 = *(_QWORD *)(a1 + 2040);
      v265 = ((uint64_t)v261 - v264) >> 3;
      if ((unint64_t)(v265 + 1) >> 61)
        goto LABEL_707;
      v266 = v262 - v264;
      v267 = v266 >> 2;
      if (v266 >> 2 <= (unint64_t)(v265 + 1))
        v267 = v265 + 1;
      if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFF8)
        v268 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v268 = v267;
      if (v268)
        v268 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v268);
      else
        v269 = 0;
      v270 = (_QWORD *)(v268 + 8 * v265);
      v271 = v268 + 8 * v269;
      *v270 = v260;
      v263 = v270 + 1;
      v272 = *(char **)(a1 + 2048);
      v273 = *(char **)(a1 + 2040);
      if (v272 != v273)
      {
        do
        {
          v274 = *((_QWORD *)v272 - 1);
          v272 -= 8;
          *--v270 = v274;
        }
        while (v272 != v273);
        v272 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v270;
      *(_QWORD *)(a1 + 2048) = v263;
      *(_QWORD *)(a1 + 2056) = v271;
      if (v272)
        operator delete(v272);
    }
    else
    {
      *v261 = v260;
      v263 = v261 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v263;
    v275 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v276 = (void *)operator new[]();
    bzero(v276, 4 * v275);
    *(_QWORD *)(a1 + 1160) = v276;
    v277 = *(_QWORD **)(a1 + 2048);
    v278 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v277 >= v278)
    {
      v280 = *(_QWORD *)(a1 + 2040);
      v281 = ((uint64_t)v277 - v280) >> 3;
      if ((unint64_t)(v281 + 1) >> 61)
        goto LABEL_707;
      v282 = v278 - v280;
      v283 = v282 >> 2;
      if (v282 >> 2 <= (unint64_t)(v281 + 1))
        v283 = v281 + 1;
      if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF8)
        v284 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v284 = v283;
      if (v284)
        v284 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v284);
      else
        v285 = 0;
      v286 = (_QWORD *)(v284 + 8 * v281);
      v287 = v284 + 8 * v285;
      *v286 = v276;
      v279 = v286 + 1;
      v288 = *(char **)(a1 + 2048);
      v289 = *(char **)(a1 + 2040);
      if (v288 != v289)
      {
        do
        {
          v290 = *((_QWORD *)v288 - 1);
          v288 -= 8;
          *--v286 = v290;
        }
        while (v288 != v289);
        v288 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v286;
      *(_QWORD *)(a1 + 2048) = v279;
      *(_QWORD *)(a1 + 2056) = v287;
      if (v288)
        operator delete(v288);
    }
    else
    {
      *v277 = v276;
      v279 = v277 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v279;
  }
  std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 64), maxFeatureVectors);
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 208), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 496), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 520), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 544), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 424), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 448), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 472), maxFeatureVectors);
  if (*(_BYTE *)(a1 + 2032))
    goto LABEL_338;
  std::vector<VVector<float>>::resize((char **)(a1 + 728), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 632), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 608), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 704), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 680), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 656), maxFeatureVectors);
  v291 = *(unsigned int *)(a1 + 52);
  v292 = (void *)operator new[]();
  v293 = v292;
  if ((int)v291 >= 1)
    bzero(v292, 4 * v291);
  *(_QWORD *)(a1 + 752) = v293;
  v294 = *(_QWORD **)(a1 + 2048);
  v295 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v294 >= v295)
  {
    v297 = *(_QWORD *)(a1 + 2040);
    v298 = ((uint64_t)v294 - v297) >> 3;
    if (!((unint64_t)(v298 + 1) >> 61))
    {
      v299 = v295 - v297;
      v300 = v299 >> 2;
      if (v299 >> 2 <= (unint64_t)(v298 + 1))
        v300 = v298 + 1;
      if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8)
        v301 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v301 = v300;
      if (v301)
        v301 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v301);
      else
        v302 = 0;
      v303 = (_QWORD *)(v301 + 8 * v298);
      v304 = v301 + 8 * v302;
      *v303 = v293;
      v296 = v303 + 1;
      v305 = *(char **)(a1 + 2048);
      v306 = *(char **)(a1 + 2040);
      if (v305 != v306)
      {
        do
        {
          v307 = *((_QWORD *)v305 - 1);
          v305 -= 8;
          *--v303 = v307;
        }
        while (v305 != v306);
        v305 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v303;
      *(_QWORD *)(a1 + 2048) = v296;
      *(_QWORD *)(a1 + 2056) = v304;
      if (v305)
        operator delete(v305);
      goto LABEL_337;
    }
LABEL_707:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  *v294 = v293;
  v296 = v294 + 1;
LABEL_337:
  *(_QWORD *)(a1 + 2048) = v296;
LABEL_338:
  if (maxFeatureVectors >= 1)
  {
    v308 = 0;
    do
    {
      v309 = *(unsigned int *)(a1 + 48);
      v310 = (void *)operator new[]();
      v311 = v310;
      if ((int)v309 >= 1)
        bzero(v310, 4 * v309);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v308) = v311;
      v312 = *(_QWORD **)(a1 + 2048);
      v313 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v312 >= v313)
      {
        v315 = *(_QWORD *)(a1 + 2040);
        v316 = ((uint64_t)v312 - v315) >> 3;
        if ((unint64_t)(v316 + 1) >> 61)
          goto LABEL_707;
        v317 = v313 - v315;
        v318 = v317 >> 2;
        if (v317 >> 2 <= (unint64_t)(v316 + 1))
          v318 = v316 + 1;
        if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFF8)
          v319 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v319 = v318;
        if (v319)
          v319 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v319);
        else
          v320 = 0;
        v321 = (_QWORD *)(v319 + 8 * v316);
        *v321 = v311;
        v314 = v321 + 1;
        v322 = *(char **)(a1 + 2048);
        v323 = *(char **)(a1 + 2040);
        if (v322 != v323)
        {
          do
          {
            v324 = *((_QWORD *)v322 - 1);
            v322 -= 8;
            *--v321 = v324;
          }
          while (v322 != v323);
          v322 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v321;
        *(_QWORD *)(a1 + 2048) = v314;
        *(_QWORD *)(a1 + 2056) = v319 + 8 * v320;
        if (v322)
          operator delete(v322);
      }
      else
      {
        *v312 = v311;
        v314 = v312 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v314;
      if (*(_BYTE *)(a1 + 40))
        v325 = 2;
      else
        v325 = 1;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 208) + 24 * v308), v325);
      v326 = *(unsigned int *)(a1 + 52);
      v327 = (void *)operator new[]();
      v328 = v327;
      if ((int)v326 >= 1)
        bzero(v327, 4 * v326);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v308) = v328;
      v329 = *(_QWORD **)(a1 + 2048);
      v330 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v329 >= v330)
      {
        v332 = *(_QWORD *)(a1 + 2040);
        v333 = ((uint64_t)v329 - v332) >> 3;
        if ((unint64_t)(v333 + 1) >> 61)
          goto LABEL_707;
        v334 = v330 - v332;
        v335 = v334 >> 2;
        if (v334 >> 2 <= (unint64_t)(v333 + 1))
          v335 = v333 + 1;
        if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFF8)
          v336 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v336 = v335;
        if (v336)
          v336 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v336);
        else
          v337 = 0;
        v338 = (_QWORD *)(v336 + 8 * v333);
        *v338 = v328;
        v331 = v338 + 1;
        v339 = *(char **)(a1 + 2048);
        v340 = *(char **)(a1 + 2040);
        if (v339 != v340)
        {
          do
          {
            v341 = *((_QWORD *)v339 - 1);
            v339 -= 8;
            *--v338 = v341;
          }
          while (v339 != v340);
          v339 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v338;
        *(_QWORD *)(a1 + 2048) = v331;
        *(_QWORD *)(a1 + 2056) = v336 + 8 * v337;
        if (v339)
          operator delete(v339);
      }
      else
      {
        *v329 = v328;
        v331 = v329 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v331;
      v342 = *(unsigned int *)(a1 + 52);
      v343 = (void *)operator new[]();
      v344 = v343;
      if ((int)v342 >= 1)
        bzero(v343, 4 * v342);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v308) = v344;
      v345 = *(_QWORD **)(a1 + 2048);
      v346 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v345 >= v346)
      {
        v348 = *(_QWORD *)(a1 + 2040);
        v349 = ((uint64_t)v345 - v348) >> 3;
        if ((unint64_t)(v349 + 1) >> 61)
          goto LABEL_707;
        v350 = v346 - v348;
        v351 = v350 >> 2;
        if (v350 >> 2 <= (unint64_t)(v349 + 1))
          v351 = v349 + 1;
        if ((unint64_t)v350 >= 0x7FFFFFFFFFFFFFF8)
          v352 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v352 = v351;
        if (v352)
          v352 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v352);
        else
          v353 = 0;
        v354 = (_QWORD *)(v352 + 8 * v349);
        *v354 = v344;
        v347 = v354 + 1;
        v355 = *(char **)(a1 + 2048);
        v356 = *(char **)(a1 + 2040);
        if (v355 != v356)
        {
          do
          {
            v357 = *((_QWORD *)v355 - 1);
            v355 -= 8;
            *--v354 = v357;
          }
          while (v355 != v356);
          v355 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v354;
        *(_QWORD *)(a1 + 2048) = v347;
        *(_QWORD *)(a1 + 2056) = v352 + 8 * v353;
        if (v355)
          operator delete(v355);
      }
      else
      {
        *v345 = v344;
        v347 = v345 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v347;
      v358 = *(unsigned int *)(a1 + 52);
      v359 = (void *)operator new[]();
      v360 = v359;
      if ((int)v358 >= 1)
        bzero(v359, 4 * v358);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v308) = v360;
      v361 = *(_QWORD **)(a1 + 2048);
      v362 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v361 >= v362)
      {
        v364 = *(_QWORD *)(a1 + 2040);
        v365 = ((uint64_t)v361 - v364) >> 3;
        if ((unint64_t)(v365 + 1) >> 61)
          goto LABEL_707;
        v366 = v362 - v364;
        v367 = v366 >> 2;
        if (v366 >> 2 <= (unint64_t)(v365 + 1))
          v367 = v365 + 1;
        if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF8)
          v368 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v368 = v367;
        if (v368)
          v368 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v368);
        else
          v369 = 0;
        v370 = (_QWORD *)(v368 + 8 * v365);
        *v370 = v360;
        v363 = v370 + 1;
        v371 = *(char **)(a1 + 2048);
        v372 = *(char **)(a1 + 2040);
        if (v371 != v372)
        {
          do
          {
            v373 = *((_QWORD *)v371 - 1);
            v371 -= 8;
            *--v370 = v373;
          }
          while (v371 != v372);
          v371 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v370;
        *(_QWORD *)(a1 + 2048) = v363;
        *(_QWORD *)(a1 + 2056) = v368 + 8 * v369;
        if (v371)
          operator delete(v371);
      }
      else
      {
        *v361 = v360;
        v363 = v361 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v363;
      v374 = *(unsigned int *)(a1 + 52);
      v375 = (void *)operator new[]();
      v376 = v375;
      if ((int)v374 >= 1)
        bzero(v375, 4 * v374);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v308) = v376;
      v377 = *(_QWORD **)(a1 + 2048);
      v378 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v377 >= v378)
      {
        v380 = *(_QWORD *)(a1 + 2040);
        v381 = ((uint64_t)v377 - v380) >> 3;
        if ((unint64_t)(v381 + 1) >> 61)
          goto LABEL_707;
        v382 = v378 - v380;
        v383 = v382 >> 2;
        if (v382 >> 2 <= (unint64_t)(v381 + 1))
          v383 = v381 + 1;
        if ((unint64_t)v382 >= 0x7FFFFFFFFFFFFFF8)
          v384 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v384 = v383;
        if (v384)
          v384 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v384);
        else
          v385 = 0;
        v386 = (_QWORD *)(v384 + 8 * v381);
        *v386 = v376;
        v379 = v386 + 1;
        v387 = *(char **)(a1 + 2048);
        v388 = *(char **)(a1 + 2040);
        if (v387 != v388)
        {
          do
          {
            v389 = *((_QWORD *)v387 - 1);
            v387 -= 8;
            *--v386 = v389;
          }
          while (v387 != v388);
          v387 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v386;
        *(_QWORD *)(a1 + 2048) = v379;
        *(_QWORD *)(a1 + 2056) = v384 + 8 * v385;
        if (v387)
          operator delete(v387);
      }
      else
      {
        *v377 = v376;
        v379 = v377 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v379;
      v390 = *(unsigned int *)(a1 + 52);
      v391 = (void *)operator new[]();
      v392 = v391;
      if ((int)v390 >= 1)
        bzero(v391, 4 * v390);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v308) = v392;
      v393 = *(_QWORD **)(a1 + 2048);
      v394 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v393 >= v394)
      {
        v396 = *(_QWORD *)(a1 + 2040);
        v397 = ((uint64_t)v393 - v396) >> 3;
        if ((unint64_t)(v397 + 1) >> 61)
          goto LABEL_707;
        v398 = v394 - v396;
        v399 = v398 >> 2;
        if (v398 >> 2 <= (unint64_t)(v397 + 1))
          v399 = v397 + 1;
        if ((unint64_t)v398 >= 0x7FFFFFFFFFFFFFF8)
          v400 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v400 = v399;
        if (v400)
          v400 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v400);
        else
          v401 = 0;
        v402 = (_QWORD *)(v400 + 8 * v397);
        *v402 = v392;
        v395 = v402 + 1;
        v403 = *(char **)(a1 + 2048);
        v404 = *(char **)(a1 + 2040);
        if (v403 != v404)
        {
          do
          {
            v405 = *((_QWORD *)v403 - 1);
            v403 -= 8;
            *--v402 = v405;
          }
          while (v403 != v404);
          v403 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v402;
        *(_QWORD *)(a1 + 2048) = v395;
        *(_QWORD *)(a1 + 2056) = v400 + 8 * v401;
        if (v403)
          operator delete(v403);
      }
      else
      {
        *v393 = v392;
        v395 = v393 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v395;
      v406 = *(unsigned int *)(a1 + 52);
      v407 = (void *)operator new[]();
      v408 = v407;
      if ((int)v406 >= 1)
        bzero(v407, 4 * v406);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * v308) = v408;
      v409 = *(_QWORD **)(a1 + 2048);
      v410 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v409 >= v410)
      {
        v412 = *(_QWORD *)(a1 + 2040);
        v413 = ((uint64_t)v409 - v412) >> 3;
        if ((unint64_t)(v413 + 1) >> 61)
          goto LABEL_707;
        v414 = v410 - v412;
        v415 = v414 >> 2;
        if (v414 >> 2 <= (unint64_t)(v413 + 1))
          v415 = v413 + 1;
        if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8)
          v416 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v416 = v415;
        if (v416)
          v416 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v416);
        else
          v417 = 0;
        v418 = (_QWORD *)(v416 + 8 * v413);
        *v418 = v408;
        v411 = v418 + 1;
        v419 = *(char **)(a1 + 2048);
        v420 = *(char **)(a1 + 2040);
        if (v419 != v420)
        {
          do
          {
            v421 = *((_QWORD *)v419 - 1);
            v419 -= 8;
            *--v418 = v421;
          }
          while (v419 != v420);
          v419 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v418;
        *(_QWORD *)(a1 + 2048) = v411;
        *(_QWORD *)(a1 + 2056) = v416 + 8 * v417;
        if (v419)
          operator delete(v419);
      }
      else
      {
        *v409 = v408;
        v411 = v409 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v411;
      v422 = *(unsigned int *)(a1 + 52);
      v423 = (void *)operator new[]();
      v424 = v423;
      if ((int)v422 >= 1)
        bzero(v423, 4 * v422);
      *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * v308) = v424;
      v425 = *(_QWORD **)(a1 + 2048);
      v426 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v425 >= v426)
      {
        v428 = *(_QWORD *)(a1 + 2040);
        v429 = ((uint64_t)v425 - v428) >> 3;
        if ((unint64_t)(v429 + 1) >> 61)
          goto LABEL_707;
        v430 = v426 - v428;
        v431 = v430 >> 2;
        if (v430 >> 2 <= (unint64_t)(v429 + 1))
          v431 = v429 + 1;
        if ((unint64_t)v430 >= 0x7FFFFFFFFFFFFFF8)
          v432 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v432 = v431;
        if (v432)
          v432 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v432);
        else
          v433 = 0;
        v434 = (_QWORD *)(v432 + 8 * v429);
        *v434 = v424;
        v427 = v434 + 1;
        v435 = *(char **)(a1 + 2048);
        v436 = *(char **)(a1 + 2040);
        if (v435 != v436)
        {
          do
          {
            v437 = *((_QWORD *)v435 - 1);
            v435 -= 8;
            *--v434 = v437;
          }
          while (v435 != v436);
          v435 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v434;
        *(_QWORD *)(a1 + 2048) = v427;
        *(_QWORD *)(a1 + 2056) = v432 + 8 * v433;
        if (v435)
          operator delete(v435);
      }
      else
      {
        *v425 = v424;
        v427 = v425 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v427;
      v438 = *(unsigned int *)(a1 + 52);
      v439 = (void *)operator new[]();
      v440 = v439;
      if ((int)v438 >= 1)
        bzero(v439, 4 * v438);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v308) = v440;
      v441 = *(_QWORD **)(a1 + 2048);
      v442 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v441 >= v442)
      {
        v444 = *(_QWORD *)(a1 + 2040);
        v445 = ((uint64_t)v441 - v444) >> 3;
        if ((unint64_t)(v445 + 1) >> 61)
          goto LABEL_707;
        v446 = v442 - v444;
        v447 = v446 >> 2;
        if (v446 >> 2 <= (unint64_t)(v445 + 1))
          v447 = v445 + 1;
        if ((unint64_t)v446 >= 0x7FFFFFFFFFFFFFF8)
          v448 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v448 = v447;
        if (v448)
          v448 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v448);
        else
          v449 = 0;
        v450 = (_QWORD *)(v448 + 8 * v445);
        *v450 = v440;
        v443 = v450 + 1;
        v451 = *(char **)(a1 + 2048);
        v452 = *(char **)(a1 + 2040);
        if (v451 != v452)
        {
          do
          {
            v453 = *((_QWORD *)v451 - 1);
            v451 -= 8;
            *--v450 = v453;
          }
          while (v451 != v452);
          v451 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v450;
        *(_QWORD *)(a1 + 2048) = v443;
        *(_QWORD *)(a1 + 2056) = v448 + 8 * v449;
        if (v451)
          operator delete(v451);
      }
      else
      {
        *v441 = v440;
        v443 = v441 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v443;
      if (!*(_BYTE *)(a1 + 2032))
      {
        v454 = *(unsigned int *)(a1 + 52);
        v455 = (void *)operator new[]();
        v456 = v455;
        if ((int)v454 >= 1)
          bzero(v455, 4 * v454);
        *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v308) = v456;
        v457 = *(_QWORD **)(a1 + 2048);
        v458 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v457 >= v458)
        {
          v460 = *(_QWORD *)(a1 + 2040);
          v461 = ((uint64_t)v457 - v460) >> 3;
          if ((unint64_t)(v461 + 1) >> 61)
            goto LABEL_707;
          v462 = v458 - v460;
          v463 = v462 >> 2;
          if (v462 >> 2 <= (unint64_t)(v461 + 1))
            v463 = v461 + 1;
          if ((unint64_t)v462 >= 0x7FFFFFFFFFFFFFF8)
            v464 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v464 = v463;
          if (v464)
            v464 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v464);
          else
            v465 = 0;
          v466 = (_QWORD *)(v464 + 8 * v461);
          *v466 = v456;
          v459 = v466 + 1;
          v467 = *(char **)(a1 + 2048);
          v468 = *(char **)(a1 + 2040);
          if (v467 != v468)
          {
            do
            {
              v469 = *((_QWORD *)v467 - 1);
              v467 -= 8;
              *--v466 = v469;
            }
            while (v467 != v468);
            v467 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v466;
          *(_QWORD *)(a1 + 2048) = v459;
          *(_QWORD *)(a1 + 2056) = v464 + 8 * v465;
          if (v467)
            operator delete(v467);
        }
        else
        {
          *v457 = v456;
          v459 = v457 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v459;
        v470 = *(unsigned int *)(a1 + 52);
        v471 = (void *)operator new[]();
        v472 = v471;
        if ((int)v470 >= 1)
          bzero(v471, 4 * v470);
        *(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v308) = v472;
        v473 = *(_QWORD **)(a1 + 2048);
        v474 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v473 >= v474)
        {
          v476 = *(_QWORD *)(a1 + 2040);
          v477 = ((uint64_t)v473 - v476) >> 3;
          if ((unint64_t)(v477 + 1) >> 61)
            goto LABEL_707;
          v478 = v474 - v476;
          v479 = v478 >> 2;
          if (v478 >> 2 <= (unint64_t)(v477 + 1))
            v479 = v477 + 1;
          if ((unint64_t)v478 >= 0x7FFFFFFFFFFFFFF8)
            v480 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v480 = v479;
          if (v480)
            v480 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v480);
          else
            v481 = 0;
          v482 = (_QWORD *)(v480 + 8 * v477);
          *v482 = v472;
          v475 = v482 + 1;
          v483 = *(char **)(a1 + 2048);
          v484 = *(char **)(a1 + 2040);
          if (v483 != v484)
          {
            do
            {
              v485 = *((_QWORD *)v483 - 1);
              v483 -= 8;
              *--v482 = v485;
            }
            while (v483 != v484);
            v483 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v482;
          *(_QWORD *)(a1 + 2048) = v475;
          *(_QWORD *)(a1 + 2056) = v480 + 8 * v481;
          if (v483)
            operator delete(v483);
        }
        else
        {
          *v473 = v472;
          v475 = v473 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v475;
        v486 = *(unsigned int *)(a1 + 48);
        v487 = (void *)operator new[]();
        v488 = v487;
        if ((int)v486 >= 1)
          bzero(v487, 4 * v486);
        *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v308) = v488;
        v489 = *(_QWORD **)(a1 + 2048);
        v490 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v489 >= v490)
        {
          v492 = *(_QWORD *)(a1 + 2040);
          v493 = ((uint64_t)v489 - v492) >> 3;
          if ((unint64_t)(v493 + 1) >> 61)
            goto LABEL_707;
          v494 = v490 - v492;
          v495 = v494 >> 2;
          if (v494 >> 2 <= (unint64_t)(v493 + 1))
            v495 = v493 + 1;
          if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFF8)
            v496 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v496 = v495;
          if (v496)
            v496 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v496);
          else
            v497 = 0;
          v498 = (_QWORD *)(v496 + 8 * v493);
          *v498 = v488;
          v491 = v498 + 1;
          v499 = *(char **)(a1 + 2048);
          v500 = *(char **)(a1 + 2040);
          if (v499 != v500)
          {
            do
            {
              v501 = *((_QWORD *)v499 - 1);
              v499 -= 8;
              *--v498 = v501;
            }
            while (v499 != v500);
            v499 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v498;
          *(_QWORD *)(a1 + 2048) = v491;
          *(_QWORD *)(a1 + 2056) = v496 + 8 * v497;
          if (v499)
            operator delete(v499);
        }
        else
        {
          *v489 = v488;
          v491 = v489 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v491;
        v502 = *(unsigned int *)(a1 + 52);
        v503 = (void *)operator new[]();
        v504 = v503;
        if ((int)v502 >= 1)
          bzero(v503, 4 * v502);
        *(_QWORD *)(*(_QWORD *)(a1 + 704) + 8 * v308) = v504;
        v505 = *(_QWORD **)(a1 + 2048);
        v506 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v505 >= v506)
        {
          v508 = *(_QWORD *)(a1 + 2040);
          v509 = ((uint64_t)v505 - v508) >> 3;
          if ((unint64_t)(v509 + 1) >> 61)
            goto LABEL_707;
          v510 = v506 - v508;
          v511 = v510 >> 2;
          if (v510 >> 2 <= (unint64_t)(v509 + 1))
            v511 = v509 + 1;
          if ((unint64_t)v510 >= 0x7FFFFFFFFFFFFFF8)
            v512 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v512 = v511;
          if (v512)
            v512 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v512);
          else
            v513 = 0;
          v514 = (_QWORD *)(v512 + 8 * v509);
          *v514 = v504;
          v507 = v514 + 1;
          v515 = *(char **)(a1 + 2048);
          v516 = *(char **)(a1 + 2040);
          if (v515 != v516)
          {
            do
            {
              v517 = *((_QWORD *)v515 - 1);
              v515 -= 8;
              *--v514 = v517;
            }
            while (v515 != v516);
            v515 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v514;
          *(_QWORD *)(a1 + 2048) = v507;
          *(_QWORD *)(a1 + 2056) = v512 + 8 * v513;
          if (v515)
            operator delete(v515);
        }
        else
        {
          *v505 = v504;
          v507 = v505 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v507;
        v518 = *(unsigned int *)(a1 + 52);
        v519 = (void *)operator new[]();
        v520 = v519;
        if ((int)v518 >= 1)
          bzero(v519, 4 * v518);
        *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * v308) = v520;
        v521 = *(_QWORD **)(a1 + 2048);
        v522 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v521 >= v522)
        {
          v524 = *(_QWORD *)(a1 + 2040);
          v525 = ((uint64_t)v521 - v524) >> 3;
          if ((unint64_t)(v525 + 1) >> 61)
            goto LABEL_707;
          v526 = v522 - v524;
          v527 = v526 >> 2;
          if (v526 >> 2 <= (unint64_t)(v525 + 1))
            v527 = v525 + 1;
          if ((unint64_t)v526 >= 0x7FFFFFFFFFFFFFF8)
            v528 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v528 = v527;
          if (v528)
            v528 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v528);
          else
            v529 = 0;
          v530 = (_QWORD *)(v528 + 8 * v525);
          *v530 = v520;
          v523 = v530 + 1;
          v531 = *(char **)(a1 + 2048);
          v532 = *(char **)(a1 + 2040);
          if (v531 != v532)
          {
            do
            {
              v533 = *((_QWORD *)v531 - 1);
              v531 -= 8;
              *--v530 = v533;
            }
            while (v531 != v532);
            v531 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v530;
          *(_QWORD *)(a1 + 2048) = v523;
          *(_QWORD *)(a1 + 2056) = v528 + 8 * v529;
          if (v531)
            operator delete(v531);
        }
        else
        {
          *v521 = v520;
          v523 = v521 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v523;
        v534 = *(unsigned int *)(a1 + 52);
        v535 = (void *)operator new[]();
        v536 = v535;
        if ((int)v534 >= 1)
          bzero(v535, 4 * v534);
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + 8 * v308) = v536;
        v537 = *(_QWORD **)(a1 + 2048);
        v538 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v537 >= v538)
        {
          v540 = *(_QWORD *)(a1 + 2040);
          v541 = ((uint64_t)v537 - v540) >> 3;
          if ((unint64_t)(v541 + 1) >> 61)
            goto LABEL_707;
          v542 = v538 - v540;
          v543 = v542 >> 2;
          if (v542 >> 2 <= (unint64_t)(v541 + 1))
            v543 = v541 + 1;
          if ((unint64_t)v542 >= 0x7FFFFFFFFFFFFFF8)
            v544 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v544 = v543;
          if (v544)
            v544 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v544);
          else
            v545 = 0;
          v546 = (_QWORD *)(v544 + 8 * v541);
          *v546 = v536;
          v539 = v546 + 1;
          v547 = *(char **)(a1 + 2048);
          v548 = *(char **)(a1 + 2040);
          if (v547 != v548)
          {
            do
            {
              v549 = *((_QWORD *)v547 - 1);
              v547 -= 8;
              *--v546 = v549;
            }
            while (v547 != v548);
            v547 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v546;
          *(_QWORD *)(a1 + 2048) = v539;
          *(_QWORD *)(a1 + 2056) = v544 + 8 * v545;
          if (v547)
            operator delete(v547);
        }
        else
        {
          *v537 = v536;
          v539 = v537 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v539;
      }
      ++v308;
    }
    while (v308 < maxFeatureVectors);
  }
}

void sub_1915724E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *MMatrix<signed char>::MMatrix(_QWORD *a1, int a2, int a3, float a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  float v9;
  float v10;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v11;
  float v12;

  v6 = (a3 * a2);
  v7 = (void *)operator new[]();
  *a1 = v7;
  bzero(v7, (int)v6);
  if ((int)v6 >= 1)
  {
    v8 = 0;
    v9 = a4 + a4;
    v10 = -a4;
    do
    {
      rgen();
      v12 = (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v11);
      rgen();
      *(_BYTE *)(*a1 + v8++) = (int)(float)(v10 + (float)(v9 * (float)(v12 * 2.3283e-10)));
    }
    while (v6 != v8);
  }
  return a1;
}

void VVector<signed char>::randomize(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v5;
  float v6;

  if (a2 >= 1)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      rgen();
      v6 = (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v5);
      rgen();
      *(_BYTE *)(*a1 + v3++) = (int)(float)((float)((float)(v6 * 2.3283e-10) * 0.2) + -0.1);
    }
    while (v4 != v3);
  }
}

void GRU<signed char>::targets()
{
  exitFramework(1);
}

uint64_t GRU<signed char>::inputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t GRU<signed char>::outputs(uint64_t a1)
{
  return a1 + 112;
}

void GRU<signed char>::deltas()
{
  exitFramework(1);
}

uint64_t GRU<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 608;
}

uint64_t GRU<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t GRU<signed char>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  int v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  signed __int8 **v18;
  int v19;
  char v21[8];

  v5 = (int)a4;
  *(_QWORD *)v21 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v21[4], v21, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((_DWORD *)this + 18);
    v10 = *(_QWORD *)this;
    v11 = (int *)(*(_QWORD *)this + v9);
    v12 = *(_QWORD *)this + *((_QWORD *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      v13 = 0;
    }
    v14 = v9;
    *(_DWORD *)(a1 + 568) = v13;
    if (v10 + v9 <= v12)
    {
      v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      v14 = v9;
    }
    else
    {
      v15 = 0;
    }
    *(_DWORD *)(a1 + 572) = v15;
    v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v17 = 0;
    }
    *(_DWORD *)(a1 + 576) = v17;
  }
  v18 = (signed __int8 **)*(unsigned int *)(a1 + 52);
  if ((_DWORD)v18 != *(_DWORD *)&v21[4] || (v19 = *(_DWORD *)(a1 + 48), v19 != *(_DWORD *)v21))
    exitFramework(3);
  MMatrix<signed char>::read(*(char **)(a1 + 336), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), v18, v19);
  MMatrix<signed char>::read(*(char **)(a1 + 328), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 344), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 360), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<signed char>::read(*(char **)(a1 + 352), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  return MMatrix<signed char>::read(*(char **)(a1 + 368), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void GRU<signed char>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 568);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 572);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 576);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  MMatrix<signed char>::write(*(char ***)(a1 + 336), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
}

void sub_1915728E0()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 328), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_1915728F8()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 344), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_191572910()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 360), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_19157292C()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 352), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_191572948(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int *v19;
  FILE *v20;
  uint64_t v21;

  MMatrix<signed char>::write(*(char ***)(v21 + 368), v20, v19, v18, *(_DWORD *)(v21 + 52), *(_DWORD *)(v21 + 52));
}

_QWORD *GRU<signed char>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;

  if (!lpsrc)
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    result = 0;
    goto LABEL_6;
  }
  if (!a3)
    goto LABEL_5;
LABEL_3:
LABEL_6:
  v7 = *(_DWORD *)(a1 + 52);
  v8 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = *(_QWORD **)(a1 + 336);
    v11 = (_QWORD *)result[42];
    v12 = (_QWORD *)v5[42];
    do
    {
      *(_BYTE *)(*v10 + v9) = *(_BYTE *)(*v11 + v9) - *(_BYTE *)(*v12 + v9);
      ++v9;
    }
    while (v8 != v9);
    v7 = *(_DWORD *)(a1 + 52);
    v13 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v13 >= 1)
    {
      v14 = 0;
      v15 = *(_QWORD **)(a1 + 344);
      v16 = (_QWORD *)result[43];
      v17 = (_QWORD *)v5[43];
      do
      {
        *(_BYTE *)(*v15 + v14) = *(_BYTE *)(*v16 + v14) - *(_BYTE *)(*v17 + v14);
        ++v14;
      }
      while (v13 != v14);
      v7 = *(_DWORD *)(a1 + 52);
      v18 = (*(_DWORD *)(a1 + 48) * v7);
      if ((int)v18 >= 1)
      {
        v19 = 0;
        v20 = *(_QWORD **)(a1 + 328);
        v21 = (_QWORD *)result[41];
        v22 = (_QWORD *)v5[41];
        do
        {
          *(_BYTE *)(*v20 + v19) = *(_BYTE *)(*v21 + v19) - *(_BYTE *)(*v22 + v19);
          ++v19;
        }
        while (v18 != v19);
        v7 = *(_DWORD *)(a1 + 52);
      }
    }
  }
  if (v7)
  {
    v23 = 0;
    v24 = *(_QWORD **)(a1 + 360);
    v25 = (_QWORD *)result[45];
    v26 = (v7 * v7);
    v27 = (_QWORD *)v5[45];
    do
    {
      *(_BYTE *)(*v24 + v23) = *(_BYTE *)(*v25 + v23) - *(_BYTE *)(*v27 + v23);
      ++v23;
    }
    while (v26 != v23);
    v28 = *(_DWORD *)(a1 + 52);
    if (v28)
    {
      v29 = 0;
      v30 = *(_QWORD **)(a1 + 368);
      v31 = (_QWORD *)result[46];
      v32 = (v28 * v28);
      v33 = (_QWORD *)v5[46];
      do
      {
        *(_BYTE *)(*v30 + v29) = *(_BYTE *)(*v31 + v29) - *(_BYTE *)(*v33 + v29);
        ++v29;
      }
      while (v32 != v29);
      v34 = *(_DWORD *)(a1 + 52);
      if (v34)
      {
        v35 = 0;
        v36 = *(_QWORD **)(a1 + 352);
        v37 = (_QWORD *)result[44];
        v38 = (v34 * v34);
        v39 = (_QWORD *)v5[44];
        do
        {
          *(_BYTE *)(*v36 + v35) = *(_BYTE *)(*v37 + v35) - *(_BYTE *)(*v39 + v35);
          ++v35;
        }
        while (v38 != v35);
      }
    }
  }
  return result;
}

void GRU<signed char>::compareModels(uint64_t a1, void *lpsrc, _QWORD **a3)
{
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  void *__p;

  v3 = a3;
  if (lpsrc)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
LABEL_3:
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  v6 = (*(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
  if ((int)v6 <= 0)
  {
    v11 = __p;
LABEL_15:
    v12 = *v11 | 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    do
    {
      while (!v8)
      {
        v8 = 0;
        if (++v7 == v6)
        {
          v11 = __p;
          goto LABEL_16;
        }
      }
      v9 = *(unsigned __int8 *)(*v3[42] + v7);
      v10 = *(unsigned __int8 *)(*v5[42] + v7);
      v8 = v9 == v10;
      ++v7;
    }
    while (v7 != v6);
    v11 = __p;
    if (v9 == v10)
      goto LABEL_15;
LABEL_16:
    v12 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  *v11 = v12;
  if ((int)v6 < 1)
  {
LABEL_25:
    v17 = v12 | 2;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    do
    {
      while (!v14)
      {
        v14 = 0;
        if (++v13 == v6)
          goto LABEL_26;
      }
      v15 = *(unsigned __int8 *)(*v3[43] + v13);
      v16 = *(unsigned __int8 *)(*v5[43] + v13);
      v14 = v15 == v16;
      ++v13;
    }
    while (v13 != v6);
    if (v15 == v16)
      goto LABEL_25;
LABEL_26:
    v17 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *v11 = v17;
  if ((int)v6 < 1)
  {
LABEL_35:
    v22 = v17 | 4;
  }
  else
  {
    v18 = 0;
    v19 = 1;
    do
    {
      while (!v19)
      {
        v19 = 0;
        if (++v18 == v6)
          goto LABEL_36;
      }
      v20 = *(unsigned __int8 *)(*v3[41] + v18);
      v21 = *(unsigned __int8 *)(*v5[41] + v18);
      v19 = v20 == v21;
      ++v18;
    }
    while (v18 != v6);
    if (v20 == v21)
      goto LABEL_35;
LABEL_36:
    v22 = v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *v11 = v22;
  if ((int)v6 < 1)
  {
LABEL_45:
    v27 = v22 | 1;
  }
  else
  {
    v23 = 0;
    v24 = 1;
    do
    {
      while (!v24)
      {
        v24 = 0;
        if (++v23 == v6)
          goto LABEL_46;
      }
      v25 = *(unsigned __int8 *)(*v3[45] + v23);
      v26 = *(unsigned __int8 *)(*v5[45] + v23);
      v24 = v25 == v26;
      ++v23;
    }
    while (v23 != v6);
    if (v25 == v26)
      goto LABEL_45;
LABEL_46:
    v27 = v22 & 0xFFFFFFFFFFFFFFFELL;
  }
  *v11 = v27;
  if ((int)v6 >= 1)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      v29 = v29 && *(unsigned __int8 *)(*v3[46] + v28) == *(unsigned __int8 *)(*v5[46] + v28);
      ++v28;
    }
    while (v28 != v6);
  }
  operator delete(v11);
}

_QWORD *GRU<signed char>::addGradient(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  if (lpsrc)
  else
    result = 0;
  v4 = *(_DWORD *)(a1 + 52);
  v5 = (*(_DWORD *)(a1 + 48) * v4);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD **)(a1 + 336);
    v8 = (_QWORD *)result[42];
    do
    {
      *(_BYTE *)(*v7 + v6) += *(_BYTE *)(*v8 + v6);
      ++v6;
    }
    while (v5 != v6);
    v4 = *(_DWORD *)(a1 + 52);
    v9 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v9 >= 1)
    {
      v10 = 0;
      v11 = *(_QWORD **)(a1 + 328);
      v12 = (_QWORD *)result[41];
      do
      {
        *(_BYTE *)(*v11 + v10) += *(_BYTE *)(*v12 + v10);
        ++v10;
      }
      while (v9 != v10);
      v4 = *(_DWORD *)(a1 + 52);
      v13 = (*(_DWORD *)(a1 + 48) * v4);
      if ((int)v13 >= 1)
      {
        v14 = 0;
        v15 = *(_QWORD **)(a1 + 344);
        v16 = (_QWORD *)result[43];
        do
        {
          *(_BYTE *)(*v15 + v14) += *(_BYTE *)(*v16 + v14);
          ++v14;
        }
        while (v13 != v14);
        v4 = *(_DWORD *)(a1 + 52);
      }
    }
  }
  if (v4)
  {
    v17 = 0;
    v18 = *(_QWORD **)(a1 + 360);
    v19 = (_QWORD *)result[45];
    v20 = (v4 * v4);
    do
    {
      *(_BYTE *)(*v18 + v17) += *(_BYTE *)(*v19 + v17);
      ++v17;
    }
    while (v20 != v17);
    v21 = *(_DWORD *)(a1 + 52);
    if (v21)
    {
      v22 = 0;
      v23 = *(_QWORD **)(a1 + 352);
      v24 = (_QWORD *)result[44];
      v25 = (v21 * v21);
      do
      {
        *(_BYTE *)(*v23 + v22) += *(_BYTE *)(*v24 + v22);
        ++v22;
      }
      while (v25 != v22);
      v26 = *(_DWORD *)(a1 + 52);
      if (v26)
      {
        v27 = 0;
        v28 = *(_QWORD **)(a1 + 368);
        v29 = (_QWORD *)result[46];
        v30 = (v26 * v26);
        do
        {
          *(_BYTE *)(*v28 + v27) += *(_BYTE *)(*v29 + v27);
          ++v27;
        }
        while (v30 != v27);
      }
    }
  }
  return result;
}

void GRU<signed char>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1176) + 64))(*(_QWORD *)(a1 + 1176));
  exitFramework(23);
}

uint64_t GRU<signed char>::clipModel(uint64_t result, float a2)
{
  float v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  float v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  float v28;
  float v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  float v34;
  float v35;

  v2 = -a2;
  v3 = *(_DWORD *)(result + 52);
  v4 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD **)(result + 336);
    do
    {
      v7 = (float)*(char *)(*v6 + v5);
      v8 = -a2;
      if (v7 < v2 || (v8 = a2, v7 > a2))
        *(_BYTE *)(*v6 + v5) = (int)v8;
      ++v5;
    }
    while (v4 != v5);
    v3 = *(_DWORD *)(result + 52);
    v9 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v9 >= 1)
    {
      v10 = 0;
      v11 = *(_QWORD **)(result + 328);
      do
      {
        v12 = (float)*(char *)(*v11 + v10);
        v13 = -a2;
        if (v12 < v2 || (v13 = a2, v12 > a2))
          *(_BYTE *)(*v11 + v10) = (int)v13;
        ++v10;
      }
      while (v9 != v10);
      v3 = *(_DWORD *)(result + 52);
      v14 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v14 >= 1)
      {
        v15 = 0;
        v16 = *(_QWORD **)(result + 344);
        do
        {
          v17 = (float)*(char *)(*v16 + v15);
          v18 = -a2;
          if (v17 < v2 || (v18 = a2, v17 > a2))
            *(_BYTE *)(*v16 + v15) = (int)v18;
          ++v15;
        }
        while (v14 != v15);
        v3 = *(_DWORD *)(result + 52);
      }
    }
  }
  if (v3)
  {
    v19 = 0;
    v20 = *(_QWORD **)(result + 360);
    v21 = (v3 * v3);
    do
    {
      v22 = (float)*(char *)(*v20 + v19);
      v23 = -a2;
      if (v22 < v2 || (v23 = a2, v22 > a2))
        *(_BYTE *)(*v20 + v19) = (int)v23;
      ++v19;
    }
    while (v21 != v19);
    v24 = *(_DWORD *)(result + 52);
    if (v24)
    {
      v25 = 0;
      v26 = *(_QWORD **)(result + 352);
      v27 = (v24 * v24);
      do
      {
        v28 = (float)*(char *)(*v26 + v25);
        v29 = -a2;
        if (v28 < v2 || (v29 = a2, v28 > a2))
          *(_BYTE *)(*v26 + v25) = (int)v29;
        ++v25;
      }
      while (v27 != v25);
      v30 = *(_DWORD *)(result + 52);
      if (v30)
      {
        v31 = 0;
        v32 = *(_QWORD **)(result + 368);
        v33 = (v30 * v30);
        do
        {
          v34 = (float)*(char *)(*v32 + v31);
          v35 = -a2;
          if (v34 < v2 || (v35 = a2, v34 > a2))
            *(_BYTE *)(*v32 + v31) = (int)v35;
          ++v31;
        }
        while (v33 != v31);
      }
    }
  }
  return result;
}

uint64_t GRU<signed char>::normalizeModel(uint64_t result, float a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v2 = *(_DWORD *)(result + 52);
  v3 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD **)(result + 336);
    do
    {
      *(_BYTE *)(*v5 + v4) = (int)(float)((float)*(char *)(*v5 + v4) * a2);
      ++v4;
    }
    while (v3 != v4);
    v2 = *(_DWORD *)(result + 52);
    v6 = (*(_DWORD *)(result + 48) * v2);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = *(_QWORD **)(result + 336);
      do
      {
        *(_BYTE *)(*v8 + v7) = (int)(float)((float)*(char *)(*v8 + v7) * a2);
        ++v7;
      }
      while (v6 != v7);
      v2 = *(_DWORD *)(result + 52);
      v9 = (*(_DWORD *)(result + 48) * v2);
      if ((int)v9 >= 1)
      {
        v10 = 0;
        v11 = *(_QWORD **)(result + 344);
        do
        {
          *(_BYTE *)(*v11 + v10) = (int)(float)((float)*(char *)(*v11 + v10) * a2);
          ++v10;
        }
        while (v9 != v10);
        v2 = *(_DWORD *)(result + 52);
      }
    }
  }
  if (v2)
  {
    v12 = 0;
    v13 = *(_QWORD **)(result + 360);
    v14 = (v2 * v2);
    do
    {
      *(_BYTE *)(*v13 + v12) = (int)(float)((float)*(char *)(*v13 + v12) * a2);
      ++v12;
    }
    while (v14 != v12);
    v15 = *(_DWORD *)(result + 52);
    if (v15)
    {
      v16 = 0;
      v17 = *(_QWORD **)(result + 352);
      v18 = (v15 * v15);
      do
      {
        *(_BYTE *)(*v17 + v16) = (int)(float)((float)*(char *)(*v17 + v16) * a2);
        ++v16;
      }
      while (v18 != v16);
      v19 = *(_DWORD *)(result + 52);
      if (v19)
      {
        v20 = 0;
        v21 = *(_QWORD **)(result + 368);
        v22 = (v19 * v19);
        do
        {
          *(_BYTE *)(*v21 + v20) = (int)(float)((float)*(char *)(*v21 + v20) * a2);
          ++v20;
        }
        while (v22 != v20);
      }
    }
  }
  return result;
}

void GRU<signed char>::allocInitialState(uint64_t a1, void **a2)
{
  _QWORD *v4;
  int v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  int v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;

  v4 = (_QWORD *)operator new();
  VVector<float>::VVector(v4, *(_DWORD *)(a1 + 52), 0);
  v5 = *(_DWORD *)(a1 + 52);
  v7 = (char *)a2[1];
  v6 = (char *)a2[2];
  if (v7 >= v6)
  {
    v9 = (v7 - (_BYTE *)*a2) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      goto LABEL_34;
    v11 = v6 - (_BYTE *)*a2;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 16 * v9;
    v15 = v12 + 16 * v13;
    *(_DWORD *)v14 = v5;
    *(_QWORD *)(v14 + 8) = v4;
    v8 = (void *)(v14 + 16);
    v17 = (char *)*a2;
    v16 = (char *)a2[1];
    if (v16 != *a2)
    {
      do
      {
        *(_OWORD *)(v14 - 16) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a2;
    }
    *a2 = (void *)v14;
    a2[1] = v8;
    a2[2] = (void *)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v7 = v5;
    *((_QWORD *)v7 + 1) = v4;
    v8 = v7 + 16;
  }
  a2[1] = v8;
  v18 = (_QWORD *)operator new();
  VVector<float>::VVector(v18, *(_DWORD *)(a1 + 52), 0);
  v19 = *(_DWORD *)(a1 + 52);
  v21 = (char *)a2[1];
  v20 = (char *)a2[2];
  if (v21 < v20)
  {
    *(_DWORD *)v21 = v19;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    goto LABEL_33;
  }
  v23 = (v21 - (_BYTE *)*a2) >> 4;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 60)
LABEL_34:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v25 = v20 - (_BYTE *)*a2;
  if (v25 >> 3 > v24)
    v24 = v25 >> 3;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
    v26 = 0xFFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
    v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v26);
  else
    v27 = 0;
  v28 = v26 + 16 * v23;
  v29 = v26 + 16 * v27;
  *(_DWORD *)v28 = v19;
  *(_QWORD *)(v28 + 8) = v18;
  v22 = (void *)(v28 + 16);
  v31 = (char *)*a2;
  v30 = (char *)a2[1];
  if (v30 != *a2)
  {
    do
    {
      *(_OWORD *)(v28 - 16) = *((_OWORD *)v30 - 1);
      v28 -= 16;
      v30 -= 16;
    }
    while (v30 != v31);
    v30 = (char *)*a2;
  }
  *a2 = (void *)v28;
  a2[1] = v22;
  a2[2] = (void *)v29;
  if (v30)
    operator delete(v30);
LABEL_33:
  a2[1] = v22;
}

void sub_19157359C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void *GRU<signed char>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;

  v8 = *(int *)(a1 + 52);
  v9 = *a2;
  *(_DWORD *)(v9 + 16 * *a4) = v8;
  memmove(**(void ***)(v9 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v8);
  v10 = *a4 + 1;
  *a4 = v10;
  v11 = *(int *)(a1 + 52);
  v12 = *a2;
  *(_DWORD *)(v12 + 16 * v10) = v11;
  result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 88) + 8 * a3), 4 * v11);
  ++*a4;
  return result;
}

void *GRU<signed char>::restoreState(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 112);
  v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v8 + 8 * a3), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *a4;
  *a4 = v11 + 1;
  return memmove(*(void **)(v10 + 8 * a3), **(const void ***)(*a2 + 16 * v11 + 8), 4 * *(int *)(a1 + 52));
}

void GRU<signed char>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;

  v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  v6 = *a3 + 1;
  *a3 = v6;
  bzero(**(void ***)(*a2 + 16 * v6 + 8), 4 * *(int *)(*a2 + 16 * v6));
  ++*a3;
}

void GRU<signed char>::resetForNewBatch(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v15;

  v2 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v3 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v4 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v5 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 40))(v5, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v6 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v7 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[146] + 16))(a1[146]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[147] + 16))(a1[147]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[148] + 16))(a1[148]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[149] + 16))(a1[149]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[150] + 16))(a1[150]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[151] + 16))(a1[151]);
  v8 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v9 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 40))(v9, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v10 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 40))(v10, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v11 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v12 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 40))(v12, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v13 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, __p);
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_191573A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *GRU<signed char>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  double v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *result;
  uint64_t v19;
  char *v20;

  v4 = **(_QWORD **)(a1 + 328);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v5;
  v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v6, v5)));
    v6 = *(_DWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(_QWORD *)v9 = v4;
    v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v5;
    *(_DWORD *)(v9 + 12) = v6;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = **(_QWORD **)(a1 + 336);
  if ((unint64_t)v10 >= *(_QWORD *)(a2 + 16))
  {
    v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    v6 = *(_DWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(_QWORD *)v10 = v11;
    v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v5;
    *((_DWORD *)v10 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v12;
  v13 = **(_QWORD **)(a1 + 344);
  if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
  {
    v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
  }
  else
  {
    *(_QWORD *)v12 = v13;
    v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v5;
    *((_DWORD *)v12 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v14;
  v15 = **(_QWORD **)(a1 + 352);
  HIDWORD(v7) = v5;
  if ((unint64_t)v14 >= *(_QWORD *)(a2 + 16))
  {
    v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v7);
    v5 = *(_DWORD *)(a1 + 52);
    v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(_QWORD *)v14 = v15;
    v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v5;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v16;
  v17 = **(_QWORD **)(a1 + 360);
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, v7);
    v5 = *(_DWORD *)(a1 + 52);
    v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(_QWORD *)v16 = v17;
    result = v16 + 16;
    *((_DWORD *)v16 + 2) = v5;
    *((_DWORD *)v16 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = result;
  v19 = **(_QWORD **)(a1 + 368);
  if ((unint64_t)result >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v19, v7);
    v20 = result;
  }
  else
  {
    *(_QWORD *)result = v19;
    v20 = result + 16;
    *((_DWORD *)result + 2) = v5;
    *((_DWORD *)result + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v20;
  return result;
}

uint64_t GRU<signed char>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t GRU<signed char>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void GRU<signed char>::allocAllBuffers(uint64_t a1)
{
  void *__p;
  char v3;

  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from allocAll");
  GRU<signed char>::init(a1);
  if (v3 < 0)
    operator delete(__p);
}

void sub_191573CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GRU<signed char>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[256];
  v3 = a1[255];
  if (v2 == v3)
  {
    v3 = a1[256];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = a1[256];
        v3 = a1[255];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[259];
  v7 = a1[258];
  if (v6 == v7)
  {
    v7 = a1[259];
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C8077774924);
        v6 = a1[259];
        v7 = a1[258];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    v3 = a1[255];
  }
  a1[256] = v3;
  a1[259] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 95);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 125);
  return SparseMatrix<float>::cleanupAllBuffers(a1 + 110);
}

uint64_t GRU<signed char>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t GRU<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t GRU<signed char>::update(uint64_t result, float a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result;
  v3 = (int)a2;
  v4 = *(_DWORD *)(result + 52);
  if (*(int *)(result + 56) < 1)
  {
    v5 = (v4 * *(_DWORD *)(result + 48));
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = (float)v3;
      do
      {
        *(_BYTE *)(*(_QWORD *)(result + 240) + v6) = (int)(float)((float)*(char *)(*(_QWORD *)(result + 240) + v6)
                                                                + (float)(*(float *)(*(_QWORD *)(result + 1120) + 4 * v6)
                                                                        * v7));
        ++v6;
      }
      while (v5 != v6);
      for (i = 0; i != v5; ++i)
        *(_BYTE *)(*(_QWORD *)(result + 248) + i) = (int)(float)((float)*(char *)(*(_QWORD *)(result + 248) + i)
                                                               + (float)(*(float *)(*(_QWORD *)(result + 1136) + 4 * i)
                                                                       * v7));
      for (j = 0; j != v5; ++j)
        *(_BYTE *)(*(_QWORD *)(result + 232) + j) = (int)(float)((float)*(char *)(*(_QWORD *)(result + 232) + j)
                                                               + (float)(*(float *)(*(_QWORD *)(result + 1128) + 4 * j)
                                                                       * v7));
    }
  }
  else
  {
    SparseMatrix<float>::add<signed char>(result + 760, v4, (float)v3);
    SparseMatrix<float>::add<signed char>(v2 + 1000, *(_DWORD *)(v2 + 52), (float)v3);
    result = SparseMatrix<float>::add<signed char>(v2 + 880, *(_DWORD *)(v2 + 52), (float)v3);
  }
  if (v4)
  {
    v10 = 0;
    v11 = (v4 * v4);
    v12 = (float)v3;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 264) + v10) = (int)(float)((float)*(char *)(*(_QWORD *)(v2 + 264) + v10)
                                                           + (float)(*(float *)(*(_QWORD *)(v2 + 1144) + 4 * v10) * v12));
      ++v10;
    }
    while (v11 != v10);
    v13 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 272) + v13) = (int)(float)((float)*(char *)(*(_QWORD *)(v2 + 272) + v13)
                                                           + (float)(*(float *)(*(_QWORD *)(v2 + 1160) + 4 * v13) * v12));
      ++v13;
    }
    while (v11 != v13);
    v14 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 256) + v14) = (int)(float)((float)*(char *)(*(_QWORD *)(v2 + 256) + v14)
                                                           + (float)(*(float *)(*(_QWORD *)(v2 + 1152) + 4 * v14) * v12));
      ++v14;
    }
    while (v11 != v14);
  }
  return result;
}

void GRU<signed char>::backward(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  int v12;
  float32x4_t **v13;
  int v14;
  float *v15;
  float *v16;
  float32x4_t *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  void **v22;
  int v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float32x4_t **v33;
  float **v34;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  float **v55;
  void **v58;
  int v59;
  int v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *__p;
  void *v68;
  uint64_t v69;

  v60 = a5 - 1;
  if (a5 >= 1)
  {
    v55 = (float **)(a1 + 752);
    v58 = (void **)(a1 + 1232);
    v6 = a5 - 1;
    do
    {
      v7 = *(unsigned __int8 *)(a1 + 2088);
      if (*(_BYTE *)(a1 + 2088))
        v8 = v60 - v6;
      else
        v8 = v6;
      if (*(_BYTE *)(a1 + 2088))
        v9 = v8 < v60;
      else
        v9 = v8 > 0;
      if (*(_BYTE *)(a1 + 2088))
        v10 = v8 > 0;
      else
        v10 = v8 < v60;
      v11 = v8 - 1;
      if (*(_BYTE *)(a1 + 2088))
        v12 = v8 + 1;
      else
        v12 = v8 - 1;
      v59 = v12;
      memmove(*(void **)(*(_QWORD *)(a1 + 632) + 8 * v8), *(const void **)(*a4 + 8 * v8), 4 * *(int *)(a1 + 52));
      if (v10)
      {
        if (!v7)
          v11 = v8 + 1;
        bzero(*(void **)(a1 + 752), 4 * *(int *)(a1 + 52));
        VVector<float>::internalMul(v55, (float **)(*(_QWORD *)(a1 + 656) + 8 * v11), *(int8x16_t ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
      }
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1216), *(float **)(*(_QWORD *)(a1 + 472) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 576));
      VVector<float>::applyPrimeDerivative(v58, *(float **)(*(_QWORD *)(a1 + 448) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 572));
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1224), *(float **)(*(_QWORD *)(a1 + 424) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 568));
      bzero(*(void **)(*(_QWORD *)(a1 + 656) + 8 * v8), 4 * *(int *)(a1 + 52));
      v13 = (float32x4_t **)(*(_QWORD *)(a1 + 656) + 8 * v8);
      v14 = *(_DWORD *)(a1 + 52);
      if (v14 >= 1)
      {
        v15 = *(float **)(*(_QWORD *)(a1 + 632) + 8 * v8);
        v16 = *(float **)(*(_QWORD *)(a1 + 496) + 8 * v8);
        v17 = *v13;
        v18 = *(unsigned int *)(a1 + 52);
        do
        {
          v19 = *v15++;
          v20 = v19;
          v21 = *v16++;
          v17->f32[0] = v17->f32[0] + (float)(v20 * (float)(1.0 - v21));
          v17 = (float32x4_t *)((char *)v17 + 4);
          --v18;
        }
        while (v18);
      }
      VVector<float>::mulV(v13, v13, (float32x4_t **)(a1 + 1216), v14);
      v22 = (void **)(*(_QWORD *)(a1 + 680) + 8 * v8);
      if (v9)
      {
        v23 = *(_DWORD *)(a1 + 52);
        if (v23 >= 1)
        {
          v24 = *(float **)(*(_QWORD *)(a1 + 112) + 8 * v59);
          v25 = *(float **)(*(_QWORD *)(a1 + 544) + 8 * v8);
          v26 = (float *)*v22;
          v27 = *(unsigned int *)(a1 + 52);
          do
          {
            v28 = *v24++;
            v29 = v28;
            v30 = *v25++;
            *v26++ = v29 - v30;
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        memmove(*v22, *(const void **)(*(_QWORD *)(a1 + 544) + 8 * v8), 4 * *(int *)(a1 + 52));
        v22 = (void **)(*(_QWORD *)(a1 + 680) + 8 * v8);
        v23 = *(_DWORD *)(a1 + 52);
        if (v23 >= 1)
        {
          v31 = (float *)*v22;
          v32 = *(unsigned int *)(a1 + 52);
          do
          {
            *v31 = -*v31;
            ++v31;
            --v32;
          }
          while (v32);
        }
      }
      VVector<float>::mulV((float32x4_t **)v22, (float32x4_t **)(*(_QWORD *)(a1 + 632) + 8 * v8), (float32x4_t **)v22, v23);
      v33 = (float32x4_t **)(*(_QWORD *)(a1 + 680) + 8 * v8);
      VVector<float>::mulV(v33, v33, (float32x4_t **)(a1 + 1224), *(_DWORD *)(a1 + 52));
      v34 = (float **)(*(_QWORD *)(a1 + 704) + 8 * v8);
      if (v9)
        VVector<float>::internalMul(v34, (float **)(*(_QWORD *)(a1 + 656) + 8 * v8), *(int8x16_t ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
      bzero(*v34, 4 * *(int *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 608) + 8 * v8), 4 * *(int *)(a1 + 48));
        VVector<float>::internalMul((float **)(*(_QWORD *)(a1 + 608) + 8 * v8), (float **)(*(_QWORD *)(a1 + 680) + 8 * v8), *(int8x16_t ***)(a1 + 328), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
      }
    }
    while (v6-- > 0);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 1016) = 0;
    *(_DWORD *)(a1 + 896) = 0;
  }
  if (a5 > 1)
  {
    v36 = 1;
    v37 = a5 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2088))
        v38 = v37;
      else
        v38 = v36;
      if (*(_BYTE *)(a1 + 2088))
        v39 = 1;
      else
        v39 = -1;
      v40 = v38 + v39;
      if (*(_BYTE *)(a1 + 2088))
        v41 = a5 - 2;
      else
        v41 = 1;
      v42 = v38 == v41;
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 680) + 8 * v38), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v40), (void **)(a1 + 1152), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v42);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 704) + 8 * v38), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v40), (void **)(a1 + 1144), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v42);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 656) + 8 * v38), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v40), (void **)(a1 + 1160), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v42);
      ++v36;
      --v37;
    }
    while (v37 != -1);
  }
  if (a5 >= 1)
  {
    v43 = 0;
    v44 = v60;
    do
    {
      if (*(_BYTE *)(a1 + 2088))
        v45 = v44;
      else
        v45 = v43;
      v46 = v60;
      if (!*(_BYTE *)(a1 + 2088))
        v46 = 0;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        v53 = v45 == v46;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 704) + 8 * v45), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v45), (void **)(a1 + 1120), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v53);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 680) + 8 * v45), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v45), (void **)(a1 + 1128), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v53);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 656) + 8 * v45), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v45), (void **)(a1 + 1136), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v53);
      }
      else
      {
        v47 = *(_QWORD *)(a1 + 704);
        v48 = *(_QWORD *)(a1 + 208) + 24 * v45;
        v68 = 0;
        v69 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v48, *(_QWORD *)(v48 + 8), (uint64_t)(*(_QWORD *)(v48 + 8) - *(_QWORD *)v48) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 760, *(int **)(v47 + 8 * v45), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          v68 = __p;
          operator delete(__p);
        }
        v49 = *(_QWORD *)(a1 + 680);
        v50 = *(_QWORD *)(a1 + 208) + 24 * v45;
        v65 = 0;
        v66 = 0;
        v64 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, *(const void **)v50, *(_QWORD *)(v50 + 8), (uint64_t)(*(_QWORD *)(v50 + 8) - *(_QWORD *)v50) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 880, *(int **)(v49 + 8 * v45), (uint64_t)v64, *(_DWORD *)(a1 + 52));
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        v51 = *(_QWORD *)(a1 + 656);
        v52 = *(_QWORD *)(a1 + 208) + 24 * v45;
        v62 = 0;
        v63 = 0;
        v61 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)v52, *(_QWORD *)(v52 + 8), (uint64_t)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1000, *(int **)(v51 + 8 * v45), (uint64_t)v61, *(_DWORD *)(a1 + 52));
        if (v61)
        {
          v62 = v61;
          operator delete(v61);
        }
      }
      ++v43;
      --v44;
    }
    while (v44 != -1);
  }
}

void GRU<signed char>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v8;
  float v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  void *v13;
  char v14;
  char *p_p;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  void *v19;
  char v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  void *v25;
  char v26;
  char *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  void *v31;
  char v32;
  char *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  void *v37;
  char v38;
  char *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  void *v43;
  char v44;
  char *v45;
  uint64_t v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  void *v50;
  char v51;
  char *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  void *v56;
  char v57;
  char *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  void *v62;
  char v63;
  char *v64;
  unsigned int v65;
  float v66;
  int v67;
  int v68;
  _BOOL4 v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  float *v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  int8x16_t **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  float *v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  float *v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t **v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int8x16_t **v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  int v126;
  int8x16_t **v127;
  int v130;
  void *v131;
  char v132;
  void *v133;
  void *v134;
  uint64_t v135;
  void *v136;
  char v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  char v142;
  std::string v143;
  void *__p;
  __int128 v145;
  void *v146[3];
  std::string v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
    v130 = 0;
  else
    v130 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v8 = *(_QWORD *)(a1 + 2096);
  if (!v8 || (v9 = *(float *)(v8 + 604), v9 <= 0.0))
    v9 = 50.0;
  __p = 0;
  v145 = 0uLL;
  i2s(&v143);
  v10 = std::string::insert(&v143, 0, "GRU Forward W_z[");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v147, "] WGZ:");
  v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v12->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v13;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v14;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  MMatrix<signed char>::print(*(char ***)(a1 + 328), p_p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v143);
  v16 = std::string::insert(&v143, 0, "GRU Forward W_r[");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v147, "] WGR:");
  v19 = (void *)v18->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v18->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v19;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v20;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v21 = (char *)&__p;
  else
    v21 = (char *)__p;
  MMatrix<signed char>::print(*(char ***)(a1 + 336), v21, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v143);
  v22 = std::string::insert(&v143, 0, "GRU Forward W_o[");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v147, "] WGO:");
  v25 = (void *)v24->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v24->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v25;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v26;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v27 = (char *)&__p;
  else
    v27 = (char *)__p;
  MMatrix<signed char>::print(*(char ***)(a1 + 344), v27, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v143);
  v28 = std::string::insert(&v143, 0, "GRU Forward R_z[");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v147, "] RGZ:");
  v31 = (void *)v30->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v30->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
  v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v31;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v32;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v33 = (char *)&__p;
  else
    v33 = (char *)__p;
  MMatrix<signed char>::print(*(char ***)(a1 + 352), v33, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v143);
  v34 = std::string::insert(&v143, 0, "GRU Forward R_r[");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v147, "] RGR:");
  v37 = (void *)v36->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v36->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
  v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v37;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v38;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v39 = (char *)&__p;
  else
    v39 = (char *)__p;
  MMatrix<signed char>::print(*(char ***)(a1 + 360), v39, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v143);
  v40 = std::string::insert(&v143, 0, "GRU Forward R_o[");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v147, "] RGO:");
  v43 = (void *)v42->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v42->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
  v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v43;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v44;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v45 = (char *)&__p;
  else
    v45 = (char *)__p;
  MMatrix<signed char>::print(*(char ***)(a1 + 368), v45, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  v46 = *(_QWORD *)(a1 + 2096);
  if (v46 && *(_BYTE *)(v46 + 244))
  {
    i2s(&v143);
    v47 = std::string::insert(&v143, 0, "GRU Forward B_z[");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v147, "] :");
    v50 = (void *)v49->__r_.__value_.__r.__words[0];
    v146[0] = (void *)v49->__r_.__value_.__l.__size_;
    *(void **)((char *)v146 + 7) = *(void **)((char *)&v49->__r_.__value_.__r.__words[1] + 7);
    v51 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v145) < 0)
      operator delete(__p);
    __p = v50;
    *(void **)&v145 = v146[0];
    *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
    HIBYTE(v145) = v51;
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (v145 >= 0)
      v52 = (char *)&__p;
    else
      v52 = (char *)__p;
    VVector<signed char>::print(*(char ***)(a1 + 376), v52, *(_DWORD *)(a1 + 52));
    i2s(&v143);
    v53 = std::string::insert(&v143, 0, "GRU Forward B_r[");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&v147, "] :");
    v56 = (void *)v55->__r_.__value_.__r.__words[0];
    v146[0] = (void *)v55->__r_.__value_.__l.__size_;
    *(void **)((char *)v146 + 7) = *(void **)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
    v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v145) < 0)
      operator delete(__p);
    __p = v56;
    *(void **)&v145 = v146[0];
    *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
    HIBYTE(v145) = v57;
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (v145 >= 0)
      v58 = (char *)&__p;
    else
      v58 = (char *)__p;
    VVector<signed char>::print(*(char ***)(a1 + 384), v58, *(_DWORD *)(a1 + 52));
    i2s(&v143);
    v59 = std::string::insert(&v143, 0, "GRU Forward B_o[");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    v61 = std::string::append(&v147, "] :");
    v62 = (void *)v61->__r_.__value_.__r.__words[0];
    v146[0] = (void *)v61->__r_.__value_.__l.__size_;
    *(void **)((char *)v146 + 7) = *(void **)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
    v63 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v145) < 0)
      operator delete(__p);
    __p = v62;
    *(void **)&v145 = v146[0];
    *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
    HIBYTE(v145) = v63;
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (v145 >= 0)
      v64 = (char *)&__p;
    else
      v64 = (char *)__p;
    VVector<signed char>::print(*(char ***)(a1 + 392), v64, *(_DWORD *)(a1 + 52));
  }
  v65 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v65)
  {
    v66 = -v9;
    if (*(_BYTE *)(a1 + 2088))
      v67 = (a4 & 0xFFFFFF) + ~v65;
    else
      v67 = a5 != 0;
    if (*(_BYTE *)(a1 + 2088))
      v68 = 1;
    else
      v68 = -1;
    if (*(_BYTE *)(a1 + 2088))
      v69 = v67 < (a4 & 0xFFFFFF) - 1;
    else
      v69 = v67 > 0;
    v70 = v67;
    memmove(*(void **)(*(_QWORD *)(a1 + 64) + 8 * v67), *(const void **)(*a2 + 8 * v67), 4 * *(int *)(a1 + 44));
    if (*(_BYTE *)(a1 + 40))
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v67) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    v71 = v67 + v68;
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * v71), "GRU output t-1 : ", *(_DWORD *)(a1 + 52));
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 64) + 8 * v67), "GRU input t: ", *(_DWORD *)(a1 + 44));
    if (v130)
    {
      v72 = *(unsigned __int8 *)(a1 + 40);
      v73 = *(_DWORD *)(a1 + 48);
      v74 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v67);
      *v74 = **(_DWORD **)(*a3 + 24 * v67);
      if (v72)
        v74[1] = v73 - 1;
    }
    bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v67), 4 * *(int *)(a1 + 52));
    bzero(*(void **)(*(_QWORD *)(a1 + 448) + 8 * v67), 4 * *(int *)(a1 + 52));
    bzero(*(void **)(*(_QWORD *)(a1 + 472) + 8 * v67), 4 * *(int *)(a1 + 52));
    v75 = *(_QWORD *)(a1 + 2096);
    if (v75)
    {
      if (!*(_BYTE *)(v75 + 20))
      {
        v104 = *(_DWORD *)(v75 + 40);
        if ((v104 == 4 || v104 == 2) && *(_DWORD *)(v75 + 44) == 3)
        {
          v105 = *(_QWORD *)(a1 + 64);
          v106 = *(int8x16_t ***)(a1 + 328);
          v107 = *(_QWORD *)(a1 + 208) + 24 * v67;
          memset(&v143, 0, sizeof(v143));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v143, *(const void **)v107, *(_QWORD *)(v107 + 8), (uint64_t)(*(_QWORD *)(v107 + 8) - *(_QWORD *)v107) >> 2);
          v108 = *(_DWORD *)(a1 + 48);
          v109 = *(_DWORD *)(a1 + 52);
          v110 = 3 * v109;
          if (!*(_QWORD *)(a1 + 600))
          {
            v126 = *(_DWORD *)(a1 + 48);
            v127 = v106;
            v111 = (void *)operator new[]();
            v112 = v111;
            if (v109 >= 1)
              bzero(v111, 4 * (3 * v109));
            *(_QWORD *)(a1 + 600) = v112;
            v113 = *(_QWORD **)(a1 + 2048);
            v114 = *(_QWORD *)(a1 + 2056);
            if ((unint64_t)v113 >= v114)
            {
              v116 = *(_QWORD *)(a1 + 2040);
              v117 = ((uint64_t)v113 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v118 = v114 - v116;
              v119 = v118 >> 2;
              if (v118 >> 2 <= (unint64_t)(v117 + 1))
                v119 = v117 + 1;
              if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
                v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v120);
              else
                v121 = 0;
              v122 = (_QWORD *)(v120 + 8 * v117);
              *v122 = v112;
              v115 = v122 + 1;
              v123 = *(char **)(a1 + 2048);
              v124 = *(char **)(a1 + 2040);
              if (v123 == v124)
              {
                v106 = v127;
              }
              else
              {
                v106 = v127;
                do
                {
                  v125 = *((_QWORD *)v123 - 1);
                  v123 -= 8;
                  *--v122 = v125;
                }
                while (v123 != v124);
                v123 = *(char **)(a1 + 2040);
              }
              *(_QWORD *)(a1 + 2040) = v122;
              *(_QWORD *)(a1 + 2048) = v115;
              *(_QWORD *)(a1 + 2056) = v120 + 8 * v121;
              if (v123)
                operator delete(v123);
            }
            else
            {
              *v113 = v112;
              v115 = v113 + 1;
              v106 = v127;
            }
            v110 = 3 * v109;
            *(_QWORD *)(a1 + 2048) = v115;
            v108 = v126;
          }
          VVector<float>::internalMul((float **)(a1 + 600), (float **)(v105 + 8 * v70), v106, v110, v108, 0.0);
        }
      }
    }
    sprintf((char *)&v147, "GRU[t=%d] input/source forwardNew1() vec ", v67);
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 64) + 8 * v67), (char *)&v147, *(_DWORD *)(a1 + 48));
    v76 = *(_QWORD *)(a1 + 424);
    v77 = *(_QWORD *)(a1 + 64);
    v78 = *(int8x16_t ***)(a1 + 328);
    v79 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
    memset(v146, 0, sizeof(v146));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v146, *(const void **)v79, *(_QWORD *)(v79 + 8), (uint64_t)(*(_QWORD *)(v79 + 8) - *(_QWORD *)v79) >> 2);
    GRU<signed char>::computeXTimesWSparseOrDense(a1, v130, (float32x4_t **)(v76 + 8 * v70), (float **)(v77 + 8 * v70), v78, v146[0], (uint64_t)v146[1], *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
    if (v146[0])
    {
      v146[1] = v146[0];
      operator delete(v146[0]);
    }
    v80 = *(_QWORD *)(a1 + 2096);
    std::string::basic_string[abi:ne180100]<0>(&v141, "gzx");
    if (!v80 || !*(_BYTE *)(v80 + 244))
    {
      if (v142 < 0)
        operator delete(v141);
      if (v69)
        VVector<float>::internalMul((float **)(*(_QWORD *)(a1 + 424) + 8 * v70), (float **)(*(_QWORD *)(a1 + 112) + 8 * v71), *(int8x16_t ***)(a1 + 352), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      v81 = *(_QWORD *)(a1 + 424);
      v82 = *(_DWORD *)(a1 + 52);
      v83 = *(float **)(v81 + 8 * v70);
      if (v82 >= 1)
      {
        v84 = *(unsigned int *)(a1 + 52);
        do
        {
          v85 = -v9;
          if (*v83 < v66 || (v85 = v9, *v83 > v9))
            *v83 = v85;
          ++v83;
          --v84;
        }
        while (v84);
        v83 = *(float **)(v81 + 8 * v70);
      }
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 496) + 8 * v70), v83, v82, *(_DWORD *)(a1 + 568));
      v86 = *(_QWORD *)(a1 + 448);
      v87 = *(_QWORD *)(a1 + 64);
      v88 = *(int8x16_t ***)(a1 + 336);
      v89 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
      v139 = 0;
      v140 = 0;
      v138 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v138, *(const void **)v89, *(_QWORD *)(v89 + 8), (uint64_t)(*(_QWORD *)(v89 + 8) - *(_QWORD *)v89) >> 2);
      GRU<signed char>::computeXTimesWSparseOrDense(a1, v130, (float32x4_t **)(v86 + 8 * v70), (float **)(v87 + 8 * v70), v88, v138, (uint64_t)v139, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      if (v138)
      {
        v139 = v138;
        operator delete(v138);
      }
      v90 = *(_QWORD *)(a1 + 2096);
      std::string::basic_string[abi:ne180100]<0>(&v136, "grx");
      if (!v90 || !*(_BYTE *)(v90 + 244))
      {
        if (v137 < 0)
          operator delete(v136);
        v91 = *(_QWORD *)(a1 + 448);
        v92 = *(_DWORD *)(a1 + 52);
        v93 = *(float **)(v91 + 8 * v70);
        if (v92 >= 1)
        {
          v94 = *(unsigned int *)(a1 + 52);
          do
          {
            v95 = -v9;
            if (*v93 < v66 || (v95 = v9, *v93 > v9))
              *v93 = v95;
            ++v93;
            --v94;
          }
          while (v94);
          v93 = *(float **)(v91 + 8 * v70);
        }
        VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 520) + 8 * v70), v93, v92, *(_DWORD *)(a1 + 572));
        bzero(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v70), 4 * *(int *)(a1 + 52));
        v96 = *(unsigned int *)(a1 + 52);
        if ((int)v96 >= 1)
        {
          v97 = *(float **)(*(_QWORD *)(a1 + 88) + 8 * v70);
          do
          {
            v98 = -v9;
            if (*v97 < v66 || (v98 = v9, *v97 > v9))
              *v97 = v98;
            ++v97;
            --v96;
          }
          while (v96);
        }
        v99 = *(_QWORD *)(a1 + 472);
        v100 = *(_QWORD *)(a1 + 64);
        v101 = *(int8x16_t ***)(a1 + 344);
        v102 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v134 = 0;
        v135 = 0;
        v133 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, *(const void **)v102, *(_QWORD *)(v102 + 8), (uint64_t)(*(_QWORD *)(v102 + 8) - *(_QWORD *)v102) >> 2);
        GRU<signed char>::computeXTimesWSparseOrDense(a1, v130, (float32x4_t **)(v99 + 8 * v70), (float **)(v100 + 8 * v70), v101, v133, (uint64_t)v134, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v103 = *(_QWORD *)(a1 + 2096);
        std::string::basic_string[abi:ne180100]<0>(&v131, "gox");
        if (!v103 || !*(_BYTE *)(v103 + 244))
        {
          if (v132 < 0)
            operator delete(v131);
          VVector<float>::internalMul((float **)(*(_QWORD *)(a1 + 472) + 8 * v70), (float **)(*(_QWORD *)(a1 + 88) + 8 * v70), *(int8x16_t ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        }
        exitFramework(76);
      }
      exitFramework(76);
    }
    exitFramework(76);
  }
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
}

void sub_191575B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  _Unwind_Resume(a1);
}

uint64_t GRU<signed char>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2088] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      GRU<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A7B8 = 0;
      qword_1EE21A7C0 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &GRU<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &GRU<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2088] = 0;
  return result;
}

uint64_t GRU<signed char>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[2088] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2088] = 0;
  return result;
}

char *GRU<signed char>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2036) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 328) = result + 232;
  *(_QWORD *)(a1 + 336) = result + 240;
  *(_QWORD *)(a1 + 344) = result + 248;
  *(_QWORD *)(a1 + 352) = result + 256;
  *(_QWORD *)(a1 + 360) = result + 264;
  *(_QWORD *)(a1 + 368) = result + 272;
  *(_QWORD *)(a1 + 376) = result + 280;
  *(_QWORD *)(a1 + 384) = result + 288;
  *(_QWORD *)(a1 + 392) = result + 296;
  *(_QWORD *)(a1 + 400) = result + 304;
  *(_QWORD *)(a1 + 408) = result + 312;
  *(_QWORD *)(a1 + 416) = result + 320;
  return result;
}

void GRU<signed char>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2036))
  {
    exitFramework(34);
  }
  exitFramework(1);
}

void GRU<signed char>::computeError()
{
  exitFramework(1);
}

void GRU<signed char>::log2Probability()
{
  exitFramework(0);
}

void GRU<signed char>::~GRU(uint64_t a1)
{
  GRU<signed char>::~GRU(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t GRU<signed char>::~GRU(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v24;

  *(_QWORD *)a1 = off_1E2D579B0;
  GRU<signed char>::cleanupAllBuffers((_QWORD *)a1);
  v2 = *(void **)(a1 + 2064);
  if (v2)
  {
    *(_QWORD *)(a1 + 2072) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 2040);
  if (v3)
  {
    *(_QWORD *)(a1 + 2048) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 1960) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1968));
  *(_QWORD *)(a1 + 1888) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1896));
  *(_QWORD *)(a1 + 1816) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1824));
  *(_QWORD *)(a1 + 1744) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1752));
  *(_QWORD *)(a1 + 1672) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1680));
  *(_QWORD *)(a1 + 1600) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1608));
  *(_QWORD *)(a1 + 1528) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1536));
  *(_QWORD *)(a1 + 1456) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1464));
  *(_QWORD *)(a1 + 1384) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1392));
  *(_QWORD *)(a1 + 1312) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1320));
  *(_QWORD *)(a1 + 1240) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1248));
  SparseMatrix<float>::~SparseMatrix(a1 + 1000);
  SparseMatrix<float>::~SparseMatrix(a1 + 880);
  SparseMatrix<float>::~SparseMatrix(a1 + 760);
  v4 = *(void **)(a1 + 728);
  if (v4)
  {
    *(_QWORD *)(a1 + 736) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 704);
  if (v5)
  {
    *(_QWORD *)(a1 + 712) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 680);
  if (v6)
  {
    *(_QWORD *)(a1 + 688) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 656);
  if (v7)
  {
    *(_QWORD *)(a1 + 664) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 632);
  if (v8)
  {
    *(_QWORD *)(a1 + 640) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 608);
  if (v9)
  {
    *(_QWORD *)(a1 + 616) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 544);
  if (v10)
  {
    *(_QWORD *)(a1 + 552) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 520);
  if (v11)
  {
    *(_QWORD *)(a1 + 528) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 496);
  if (v12)
  {
    *(_QWORD *)(a1 + 504) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 472);
  if (v13)
  {
    *(_QWORD *)(a1 + 480) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 448);
  if (v14)
  {
    *(_QWORD *)(a1 + 456) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 424);
  if (v15)
  {
    *(_QWORD *)(a1 + 432) = v15;
    operator delete(v15);
  }
  v24 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v24);
  v16 = *(void **)(a1 + 184);
  if (v16)
  {
    *(_QWORD *)(a1 + 192) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 160);
  if (v17)
  {
    *(_QWORD *)(a1 + 168) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 136);
  if (v18)
  {
    *(_QWORD *)(a1 + 144) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 112);
  if (v19)
  {
    *(_QWORD *)(a1 + 120) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 88);
  if (v20)
  {
    *(_QWORD *)(a1 + 96) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 64);
  if (v21)
  {
    *(_QWORD *)(a1 + 72) = v21;
    operator delete(v21);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v22 = *(void **)(a1 + 8);
  if (v22)
  {
    *(_QWORD *)(a1 + 16) = v22;
    operator delete(v22);
  }
  return a1;
}

void MMatrix<signed char>::print(char **a1, char *a2, int a3, int a4, int a5)
{
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  char v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  uint64_t i;
  size_t v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  uint64_t v45;
  _BYTE v46[56];
  void *__p;
  char v48;
  uint64_t v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  int64_t v53;
  char __s[100];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  sprintf(__s, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(&v51, __s);
  v9 = std::string::insert(&v51, 0, " (");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v44, ") ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v53 = v11->__r_.__value_.__r.__words[2];
  v52 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (a4 * a3 >= a5)
    v13 = a5;
  else
    v13 = (a4 * a3);
  if ((int)v13 <= 0)
    goto LABEL_12;
  v14 = *a1;
  LOBYTE(v15) = 1;
  v16 = v13;
  do
  {
    v17 = *v14++;
    v15 = ((v17 + 1) < 3u) & v15;
    --v16;
  }
  while (v16);
  if (v15)
LABEL_12:
    v18 = "yes";
  else
    v18 = "no";
  std::string::basic_string[abi:ne180100]<0>(&v50, v18);
  v19 = std::string::insert(&v50, 0, " (");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v44, ") ");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v44);
  std::string::basic_string[abi:ne180100]<0>(&v41, a2);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v51;
  else
    v23 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  else
    size = v51.__r_.__value_.__l.__size_;
  v25 = std::string::append(&v41, (const std::string::value_type *)v23, size);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v53 >= 0)
    v27 = (const std::string::value_type *)&v52;
  else
    v27 = (const std::string::value_type *)v52;
  if (v53 >= 0)
    v28 = HIBYTE(v53);
  else
    v28 = *((_QWORD *)&v52 + 1);
  v29 = std::string::append(&v42, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v43, "[");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if ((int)v13 >= 1)
  {
    for (i = 0; i != v13; ++i)
    {
      memset(&v43, 0, sizeof(v43));
      std::ios_base::clear((std::ios_base *)((char *)&v44 + *(_QWORD *)(v44.__r_.__value_.__r.__words[0] - 24)), 0);
      *(_QWORD *)&v46[*(_QWORD *)(v44.__r_.__value_.__r.__words[2] - 24)] = 6;
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v44, (uint64_t)&v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        v34 = v43.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v34 + 1);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v42;
      else
        v35 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if (v34)
      {
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v43;
        else
          v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
        memmove(v35, v36, v34);
      }
      *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 32;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v42;
      else
        v37 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      else
        v38 = v42.__r_.__value_.__l.__size_;
      std::string::append(&v50, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(&v50, " ]");
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v44.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v39 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + *(_QWORD *)(v44.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v44.__r_.__value_.__r.__words[2] = v39;
  v45 = MEMORY[0x1E0DE4FB8] + 16;
  if (v48 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v49);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
}

void sub_1915765F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  uint64_t v71;

  if (a64 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
  if (a71 < 0)
    operator delete(a66);
  if (*(char *)(v71 - 217) < 0)
    operator delete(*(void **)(v71 - 240));
  _Unwind_Resume(a1);
}

void VVector<signed char>::print(char **a1, char *a2, int a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  char v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  size_t size;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  uint64_t v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  uint64_t v48;
  void *__p;
  char v50;
  uint64_t v51;
  __int128 v52;
  int64_t v53;
  void *v54[2];
  uint64_t v55;
  std::string v56;
  uint64_t v57;
  void *v58;
  char v59;
  uint64_t v60;
  __int128 v61;
  int64_t v62;
  void *v63[2];
  unsigned __int8 v64;
  char v65[100];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  sprintf(v65, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(v63, "() ");
  if (a3 <= 0)
    goto LABEL_5;
  v6 = *a1;
  v7 = a3;
  LOBYTE(v8) = 1;
  do
  {
    v9 = *v6++;
    v8 = ((v9 + 1) < 3u) & v8;
    --v7;
  }
  while (v7);
  if (v8)
LABEL_5:
    v10 = "inRange:yes";
  else
    v10 = "inRange:no";
  std::string::basic_string[abi:ne180100]<0>(&v47, v10);
  v11 = std::string::insert(&v47, 0, " (");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v56, ") ");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v62 = v13->__r_.__value_.__r.__words[2];
  v61 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v56);
  v54[0] = 0;
  v54[1] = 0;
  v55 = 0;
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v56, (uint64_t)v54);
  std::operator+<char>();
  v15 = std::string::append(&v47, "] ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v53 = v15->__r_.__value_.__r.__words[2];
  v52 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v47);
  std::string::basic_string[abi:ne180100]<0>(&v42, a2);
  if (v62 >= 0)
    v17 = (const std::string::value_type *)&v61;
  else
    v17 = (const std::string::value_type *)v61;
  if (v62 >= 0)
    v18 = HIBYTE(v62);
  else
    v18 = *((_QWORD *)&v61 + 1);
  v19 = std::string::append(&v42, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if ((v64 & 0x80u) == 0)
    v21 = (const std::string::value_type *)v63;
  else
    v21 = (const std::string::value_type *)v63[0];
  if ((v64 & 0x80u) == 0)
    v22 = v64;
  else
    v22 = (std::string::size_type)v63[1];
  v23 = std::string::append(&v43, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (v53 >= 0)
    v25 = (const std::string::value_type *)&v52;
  else
    v25 = (const std::string::value_type *)v52;
  if (v53 >= 0)
    v26 = HIBYTE(v53);
  else
    v26 = *((_QWORD *)&v52 + 1);
  v27 = std::string::append(&v44, v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v45, "[ ");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (a3 >= 1)
  {
    v31 = 0;
    if (a3 >= 1000)
      v32 = 1000;
    else
      v32 = a3;
    do
    {
      memset(&v45, 0, sizeof(v45));
      std::ios_base::clear((std::ios_base *)((char *)&v47 + *(_QWORD *)(v47.__r_.__value_.__r.__words[0] - 24)), 0);
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v47, (uint64_t)&v45);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        size = v45.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v44, size + 3);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v44;
      else
        v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v45;
        else
          v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
        memmove(v34, v35, size);
      }
      *(_DWORD *)((char *)&v34->__r_.__value_.__l.__data_ + size) = 2108448;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v44;
      else
        v36 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v37 = v44.__r_.__value_.__l.__size_;
      std::string::append(&v46, (const std::string::value_type *)v36, v37);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      ++v31;
    }
    while (v32 != v31);
  }
  std::string::append(&v46, "]");
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v38 = *MEMORY[0x1E0DE4F50];
  v47.__r_.__value_.__r.__words[0] = v38;
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v39 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + *(_QWORD *)(v38 - 24)) = v40;
  v41 = MEMORY[0x1E0DE4FB8];
  v47.__r_.__value_.__r.__words[2] = v39;
  v48 = MEMORY[0x1E0DE4FB8] + 16;
  if (v50 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v51);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v55) < 0)
    operator delete(v54[0]);
  v56.__r_.__value_.__r.__words[0] = v38;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + *(_QWORD *)(v38 - 24)) = v40;
  v56.__r_.__value_.__r.__words[2] = v39;
  v57 = v41 + 16;
  if (v59 < 0)
    operator delete(v58);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v60);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)v61);
  if ((char)v64 < 0)
    operator delete(v63[0]);
}

void sub_191576C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  uint64_t v74;

  if (a30 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  if (a71 < 0)
    operator delete(a66);
  if (a73 < 0)
    operator delete(a72);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a74);
  if (*(char *)(v74 - 233) < 0)
    operator delete(*(void **)(v74 - 256));
  if (*(char *)(v74 - 209) < 0)
    operator delete(*(void **)(v74 - 232));
  _Unwind_Resume(a1);
}

float32_t GRU<signed char>::computeXTimesWSparseOrDense(uint64_t a1, int a2, float32x4_t **a3, float **a4, int8x16_t **a5, const void *a6, uint64_t a7, int a8, int a9)
{
  float **v12;
  void *__p;
  int *v15;
  uint64_t v16;

  v12 = (float **)(a1 + 584);
  if (!a2)
    VVector<float>::internalMul((float **)(a1 + 584), a4, a5, a8, a9, 0.0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a6, a7, (a7 - (uint64_t)a6) >> 2);
  VVector<float>::internalMul(v12, (int *)__p, v15, (uint64_t)*a5, a8, a9);
  if (__p)
  {
    v15 = (int *)__p;
    operator delete(__p);
  }
  return VVector<float>::add<float>(a3, (float32x4_t **)v12, a8);
}

void VVector<float>::internalMul(float **a1, float **a2, int8x16_t **a3, int a4, int a5, float a6)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  float *v15;
  uint64_t v16;
  _BYTE *v17;
  float v18;
  int v19;
  int8x16_t *v20;
  float *v21;
  int v22;
  float v23;

  LODWORD(v8) = a4;
  v12 = a5;
  v13 = operator new[]();
  v14 = (int8x16_t *)v13;
  if (a5 >= 1)
  {
    v15 = *a2;
    v16 = a5;
    v17 = (_BYTE *)v13;
    do
    {
      v18 = *v15;
      if (*v15 <= -5.0)
      {
        LOBYTE(v19) = -127;
      }
      else if (v18 < 5.0 && (v19 = llroundf(v18 * 25.6), v19 <= 127))
      {
        if (v19 <= -127)
          LOBYTE(v19) = -127;
      }
      else
      {
        LOBYTE(v19) = 127;
      }
      *v17++ = v19;
      ++v15;
      --v16;
    }
    while (v16);
  }
  if ((int)v8 >= 1)
  {
    v8 = v8;
    v20 = *a3;
    v21 = *a1;
    do
    {
      v22 = VVector<float>::dot(v14, v20, a5);
      v23 = 0.0;
      if (a6 != 0.0)
        v23 = *v21;
      *v21++ = v23 + (float)((float)v22 * 0.0015259);
      v20 = (int8x16_t *)((char *)v20 + v12);
      --v8;
    }
    while (v8);
  }
  JUMPOUT(0x19401CD78);
}

uint64_t VVector<float>::dot(int8x16_t *a1, int8x16_t *a2, int a3)
{
  int v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int v23;
  int v24;
  int v25;
  int32x4_t v26;

  v3 = a3 / 16;
  v4 = 0uLL;
  v5 = 0uLL;
  v6 = 0uLL;
  v7 = 0uLL;
  if (a3 >= 16)
  {
    v8 = a1;
    v9 = a2;
    v10 = (a3 / 16);
    do
    {
      v11 = *v8++;
      v12 = v11;
      v13 = *v9++;
      v14 = vmovl_high_s8(v12);
      v15 = vmovl_high_s8(v13);
      v7 = vmlal_high_s16(v7, v14, v15);
      v6 = vmlal_s16(v6, *(int16x4_t *)v14.i8, *(int16x4_t *)v15.i8);
      v16 = vmovl_s8(*(int8x8_t *)v12.i8);
      v17 = vmovl_s8(*(int8x8_t *)v13.i8);
      v5 = vmlal_high_s16(v5, v16, v17);
      v4 = vmlal_s16(v4, *(int16x4_t *)v16.i8, *(int16x4_t *)v17.i8);
      --v10;
    }
    while (v10);
  }
  v18 = (a3 % 16);
  if ((int)v18 < 1)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    v20 = v3;
    v21 = &a2[v3];
    v22 = &a1[v20];
    do
    {
      v24 = v22->i8[0];
      v22 = (int8x16_t *)((char *)v22 + 1);
      v23 = v24;
      v25 = v21->i8[0];
      v21 = (int8x16_t *)((char *)v21 + 1);
      v19 += v25 * v23;
      --v18;
    }
    while (v18);
  }
  v26 = vaddq_s32(vaddq_s32(v5, v4), vaddq_s32(v6, v7));
  return v19 + vpadalq_s32(vdupq_laneq_s64(vpaddlq_s32(v26), 1), v26).u32[0];
}

uint64_t SparseMatrix<float>::add<signed char>(uint64_t result, int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  v3 = *(unsigned int *)(result + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    while (1)
    {
      if (a2 >= 1)
      {
        v5 = *(float **)(*(_QWORD *)(result + 24) + 8 * v4);
        v6 = a2;
        do
        {
          *v5 = *v5 * a3;
          ++v5;
          --v6;
        }
        while (v6);
      }
      if (++v4 == v3)
      {
        v7 = *(_QWORD *)(result + 48);
        memset(v8, 0, sizeof(v8));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
        exitFramework(67);
      }
    }
  }
  return result;
}

void sub_1915771E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MMatrix<signed char>::write(char **a1, FILE *__stream, int *a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  void *v14;
  char __ptr;

  if (a4 == 32)
  {
    if (__stream)
    {
      v11 = *a3 & 0xF;
      if (*a3 <= 0)
        v11 = -(-*a3 & 0xF);
      if (v11 >= 15)
        v12 = 16;
      else
        v12 = 15 - v11;
      __ptr = v12;
      fwrite(&__ptr, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v12);
      if ((*(_BYTE *)a3 & 0xF) == 0)
      {
        v13 = a6 * a5;
        v14 = (void *)operator new[]();
        bzero(v14, 4 * v13);
        writeArray<signed char,float>(__stream, a3, *a1, (float *)v14, v13);
        JUMPOUT(0x19401CD78);
      }
      exitFramework(18);
    }
    exitFramework(9);
  }
  if (a4 == 8 || a4 == 16)
    exitFramework(45);
  exitFramework(23);
}

uint64_t MMatrix<signed char>::read(char *a1, uint64_t a2, int a3, _BOOL4 a4, signed __int8 **a5, int a6)
{
  int v7;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  signed __int8 *v15;
  int v16;

  if (!a2)
LABEL_11:
    exitFramework(9);
  v7 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    v11 = *(_BYTE *)(a2 + 72);
  }
  else
  {
    v11 = *a1;
  }
  if ((v11 & 0xF) != 0)
    exitFramework(18);
  if (a4)
  {
    v12 = *(int *)(a2 + 72);
    v13 = *(_QWORD *)a2 + v12;
    *(_QWORD *)a1 = v13;
    *(_DWORD *)(a2 + 72) = v12 + a6 * v7;
    result = a6 * v7;
    if (!v13)
      goto LABEL_11;
  }
  else
  {
    v15 = *(signed __int8 **)a1;
    v16 = a6 * v7;
    result = ReadOnlyFile::readInt8Array((ReadOnlyFile *)a2, v15, &v16, a4, a5);
    if (!*(_QWORD *)a1)
      goto LABEL_11;
  }
  if (!result)
    goto LABEL_11;
  return result;
}

void FullLayer<signed char>::init(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  void *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  char *v63;
  int v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t i;
  uint64_t v74;
  void *v75;
  void *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t j;
  uint64_t v91;
  void *v92;
  void *v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  std::vector<int>::size_type v108;
  uint64_t v109;
  void *v110;
  void *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  std::string v157;
  void *__p[2];
  int64_t v159;

  v5 = *(_QWORD *)(a1 + 528);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 512);
  else
    v6 = 0;
  if (*(_BYTE *)(a1 + 40))
    v7 = *(_DWORD *)(a1 + 96) + (v6 ^ 1);
  else
    v7 = *(_DWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 108) = v8 * v7;
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!*(_BYTE *)(a1 + 117))
    {
      if (v5 && *(_DWORD *)(v5 + 40) == 1)
      {
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(v5 + 112);
      }
      else
      {
        MMatrix<signed char>::MMatrix(__p, v8, v7, a3);
        v9 = __p[0];
        *(void **)(a1 + 128) = __p[0];
        v11 = *(_QWORD **)(a1 + 80);
        v10 = *(_QWORD *)(a1 + 88);
        if ((unint64_t)v11 >= v10)
        {
          v13 = *(_QWORD *)(a1 + 72);
          v14 = ((uint64_t)v11 - v13) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v15 = v10 - v13;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v17);
          else
            v18 = 0;
          v19 = (_QWORD *)(v17 + 8 * v14);
          v20 = v17 + 8 * v18;
          *v19 = v9;
          v12 = v19 + 1;
          v22 = *(char **)(a1 + 72);
          v21 = *(char **)(a1 + 80);
          if (v21 != v22)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v19 = v23;
            }
            while (v21 != v22);
            v21 = *(char **)(a1 + 72);
          }
          *(_QWORD *)(a1 + 72) = v19;
          *(_QWORD *)(a1 + 80) = v12;
          *(_QWORD *)(a1 + 88) = v20;
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v11 = v9;
          v12 = v11 + 1;
        }
        *(_QWORD *)(a1 + 80) = v12;
      }
    }
    *(_QWORD *)(a1 + 512) = a1 + 128;
  }
  if (!*(_BYTE *)(a1 + 116))
  {
    v24 = *(unsigned int *)(a1 + 100);
    v25 = (void *)operator new[]();
    v26 = v25;
    if ((int)v24 >= 1)
      bzero(v25, 4 * v24);
    *(_QWORD *)(a1 + 416) = v26;
    v28 = *(_QWORD **)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v28 >= v27)
    {
      v30 = *(_QWORD *)(a1 + 48);
      v31 = ((uint64_t)v28 - v30) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        goto LABEL_213;
      v32 = v27 - v30;
      v33 = v32 >> 2;
      if (v32 >> 2 <= (unint64_t)(v31 + 1))
        v33 = v31 + 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v34);
      else
        v35 = 0;
      v36 = (_QWORD *)(v34 + 8 * v31);
      v37 = v34 + 8 * v35;
      *v36 = v26;
      v29 = v36 + 1;
      v39 = *(char **)(a1 + 48);
      v38 = *(char **)(a1 + 56);
      if (v38 != v39)
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = *(char **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v36;
      *(_QWORD *)(a1 + 56) = v29;
      *(_QWORD *)(a1 + 64) = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v28 = v26;
      v29 = v28 + 1;
    }
    *(_QWORD *)(a1 + 56) = v29;
    if (*(int *)(a1 + 112) >= 1)
    {
      SparseMatrix<float>::SparseMatrix((unsigned int *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), maxFeatureVectors, *(unsigned __int8 *)(a1 + 40) + 1);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 144), (__int128 *)__p);
      SparseMatrix<float>::~SparseMatrix((uint64_t)__p);
    }
    v41 = *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100);
    v42 = (void *)operator new[]();
    bzero(v42, 4 * v41);
    *(_QWORD *)(a1 + 136) = v42;
    v44 = *(_QWORD **)(a1 + 56);
    v43 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v44 < v43)
    {
      *v44 = v42;
      v45 = v44 + 1;
LABEL_67:
      *(_QWORD *)(a1 + 56) = v45;
      goto LABEL_68;
    }
    v46 = *(_QWORD *)(a1 + 48);
    v47 = ((uint64_t)v44 - v46) >> 3;
    if (!((unint64_t)(v47 + 1) >> 61))
    {
      v48 = v43 - v46;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
      else
        v51 = 0;
      v52 = (_QWORD *)(v50 + 8 * v47);
      v53 = v50 + 8 * v51;
      *v52 = v42;
      v45 = v52 + 1;
      v55 = *(char **)(a1 + 48);
      v54 = *(char **)(a1 + 56);
      if (v54 != v55)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *--v52 = v56;
        }
        while (v54 != v55);
        v54 = *(char **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v52;
      *(_QWORD *)(a1 + 56) = v45;
      *(_QWORD *)(a1 + 64) = v53;
      if (v54)
        operator delete(v54);
      goto LABEL_67;
    }
LABEL_213:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_68:
  if (!*(_DWORD *)(a1 + 504) && *(_QWORD *)(a1 + 128))
  {
    std::string::basic_string[abi:ne180100]<0>(&v157, " constructt W=");
    v58 = *(char *)(a2 + 23);
    if (v58 >= 0)
      v59 = (const std::string::value_type *)a2;
    else
      v59 = *(const std::string::value_type **)a2;
    if (v58 >= 0)
      v60 = *(unsigned __int8 *)(a2 + 23);
    else
      v60 = *(_QWORD *)(a2 + 8);
    v61 = std::string::insert(&v157, 0, v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v159 = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (v159 >= 0)
      v63 = (char *)__p;
    else
      v63 = (char *)__p[0];
    MMatrix<signed char>::print((char **)(a1 + 128), v63, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
    if (SHIBYTE(v159) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if (!*(_DWORD *)(a1 + 504) && *(_QWORD *)(a1 + 128))
    {
      std::string::basic_string[abi:ne180100]<0>(&v157, " construct W=");
      v64 = *(char *)(a2 + 23);
      if (v64 >= 0)
        v65 = (const std::string::value_type *)a2;
      else
        v65 = *(const std::string::value_type **)a2;
      if (v64 >= 0)
        v66 = *(unsigned __int8 *)(a2 + 23);
      else
        v66 = *(_QWORD *)(a2 + 8);
      v67 = std::string::insert(&v157, 0, v65, v66);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v159 = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if (v159 >= 0)
        v69 = (char *)__p;
      else
        v69 = (char *)__p[0];
      MMatrix<signed char>::print((char **)(a1 + 128), v69, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (SHIBYTE(v159) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
    }
  }
  if (*(int *)(a1 + 112) < 1)
    v57 = 0;
  else
    v57 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (*(_BYTE *)(a1 + 42))
    v70 = 2;
  else
    v70 = maxFeatureVectors;
  if (((*(_BYTE *)(a1 + 42) != 0) & v57) != 0)
    v71 = 2;
  else
    v71 = maxFeatureVectors;
  std::vector<VVector<float>>::resize((char **)(a1 + 264), (int)v71);
  std::vector<VVector<float>>::resize((char **)(a1 + 384), (int)v70);
  std::vector<VVector<float>>::resize((char **)(a1 + 288), maxFeatureVectors);
  if (!*(_BYTE *)(a1 + 116))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 312), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 336), maxFeatureVectors);
  }
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 360), maxFeatureVectors);
  v72 = *(unsigned __int8 *)(a1 + 40);
  if ((int)v71 >= 1)
  {
    for (i = 0; i != v71; ++i)
    {
      v74 = *(unsigned int *)(a1 + 104);
      v75 = (void *)operator new[]();
      v76 = v75;
      if ((int)v74 >= 1)
        bzero(v75, 4 * v74);
      *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * i) = v76;
      v78 = *(_QWORD **)(a1 + 56);
      v77 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v78 >= v77)
      {
        v80 = *(_QWORD *)(a1 + 48);
        v81 = ((uint64_t)v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          goto LABEL_213;
        v82 = v77 - v80;
        v83 = v82 >> 2;
        if (v82 >> 2 <= (unint64_t)(v81 + 1))
          v83 = v81 + 1;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        if (v84)
          v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v84);
        else
          v85 = 0;
        v86 = (_QWORD *)(v84 + 8 * v81);
        *v86 = v76;
        v79 = v86 + 1;
        v88 = *(char **)(a1 + 48);
        v87 = *(char **)(a1 + 56);
        if (v87 != v88)
        {
          do
          {
            v89 = *((_QWORD *)v87 - 1);
            v87 -= 8;
            *--v86 = v89;
          }
          while (v87 != v88);
          v87 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v86;
        *(_QWORD *)(a1 + 56) = v79;
        *(_QWORD *)(a1 + 64) = v84 + 8 * v85;
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v78 = v76;
        v79 = v78 + 1;
      }
      *(_QWORD *)(a1 + 56) = v79;
    }
  }
  if ((int)v70 >= 1)
  {
    for (j = 0; j != v70; ++j)
    {
      v91 = *(unsigned int *)(a1 + 100);
      v92 = (void *)operator new[]();
      v93 = v92;
      if ((int)v91 >= 1)
        bzero(v92, 4 * v91);
      *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * j) = v93;
      v95 = *(_QWORD **)(a1 + 56);
      v94 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v95 >= v94)
      {
        v97 = *(_QWORD *)(a1 + 48);
        v98 = ((uint64_t)v95 - v97) >> 3;
        if ((unint64_t)(v98 + 1) >> 61)
          goto LABEL_213;
        v99 = v94 - v97;
        v100 = v99 >> 2;
        if (v99 >> 2 <= (unint64_t)(v98 + 1))
          v100 = v98 + 1;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
          v101 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v101 = v100;
        if (v101)
          v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v101);
        else
          v102 = 0;
        v103 = (_QWORD *)(v101 + 8 * v98);
        *v103 = v93;
        v96 = v103 + 1;
        v105 = *(char **)(a1 + 48);
        v104 = *(char **)(a1 + 56);
        if (v104 != v105)
        {
          do
          {
            v106 = *((_QWORD *)v104 - 1);
            v104 -= 8;
            *--v103 = v106;
          }
          while (v104 != v105);
          v104 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v103;
        *(_QWORD *)(a1 + 56) = v96;
        *(_QWORD *)(a1 + 64) = v101 + 8 * v102;
        if (v104)
          operator delete(v104);
      }
      else
      {
        *v95 = v93;
        v96 = v95 + 1;
      }
      *(_QWORD *)(a1 + 56) = v96;
    }
  }
  if (maxFeatureVectors >= 1)
  {
    v107 = 0;
    if (v72)
      v108 = 2;
    else
      v108 = 1;
    do
    {
      if (!*(_BYTE *)(a1 + 116))
      {
        v109 = *(unsigned int *)(a1 + 104);
        v110 = (void *)operator new[]();
        v111 = v110;
        if ((int)v109 >= 1)
          bzero(v110, 4 * v109);
        *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v107) = v111;
        v113 = *(_QWORD **)(a1 + 56);
        v112 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v113 >= v112)
        {
          v115 = *(_QWORD *)(a1 + 48);
          v116 = ((uint64_t)v113 - v115) >> 3;
          if ((unint64_t)(v116 + 1) >> 61)
            goto LABEL_213;
          v117 = v112 - v115;
          v118 = v117 >> 2;
          if (v117 >> 2 <= (unint64_t)(v116 + 1))
            v118 = v116 + 1;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
            v119 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v119 = v118;
          if (v119)
            v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v119);
          else
            v120 = 0;
          v121 = (_QWORD *)(v119 + 8 * v116);
          *v121 = v111;
          v114 = v121 + 1;
          v123 = *(char **)(a1 + 48);
          v122 = *(char **)(a1 + 56);
          if (v122 != v123)
          {
            do
            {
              v124 = *((_QWORD *)v122 - 1);
              v122 -= 8;
              *--v121 = v124;
            }
            while (v122 != v123);
            v122 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v121;
          *(_QWORD *)(a1 + 56) = v114;
          *(_QWORD *)(a1 + 64) = v119 + 8 * v120;
          if (v122)
            operator delete(v122);
        }
        else
        {
          *v113 = v111;
          v114 = v113 + 1;
        }
        *(_QWORD *)(a1 + 56) = v114;
        v125 = *(unsigned int *)(a1 + 100);
        v126 = (void *)operator new[]();
        v127 = v126;
        if ((int)v125 >= 1)
          bzero(v126, 4 * v125);
        *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v107) = v127;
        v129 = *(_QWORD **)(a1 + 56);
        v128 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v129 >= v128)
        {
          v131 = *(_QWORD *)(a1 + 48);
          v132 = ((uint64_t)v129 - v131) >> 3;
          if ((unint64_t)(v132 + 1) >> 61)
            goto LABEL_213;
          v133 = v128 - v131;
          v134 = v133 >> 2;
          if (v133 >> 2 <= (unint64_t)(v132 + 1))
            v134 = v132 + 1;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8)
            v135 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v135 = v134;
          if (v135)
            v135 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v135);
          else
            v136 = 0;
          v137 = (_QWORD *)(v135 + 8 * v132);
          *v137 = v127;
          v130 = v137 + 1;
          v139 = *(char **)(a1 + 48);
          v138 = *(char **)(a1 + 56);
          if (v138 != v139)
          {
            do
            {
              v140 = *((_QWORD *)v138 - 1);
              v138 -= 8;
              *--v137 = v140;
            }
            while (v138 != v139);
            v138 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v137;
          *(_QWORD *)(a1 + 56) = v130;
          *(_QWORD *)(a1 + 64) = v135 + 8 * v136;
          if (v138)
            operator delete(v138);
        }
        else
        {
          *v129 = v127;
          v130 = v129 + 1;
        }
        *(_QWORD *)(a1 + 56) = v130;
      }
      v141 = *(unsigned int *)(a1 + 100);
      v142 = (void *)operator new[]();
      v143 = v142;
      if ((int)v141 >= 1)
        bzero(v142, 4 * v141);
      *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v107) = v143;
      v145 = *(_QWORD **)(a1 + 56);
      v144 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v145 >= v144)
      {
        v147 = *(_QWORD *)(a1 + 48);
        v148 = ((uint64_t)v145 - v147) >> 3;
        if ((unint64_t)(v148 + 1) >> 61)
          goto LABEL_213;
        v149 = v144 - v147;
        v150 = v149 >> 2;
        if (v149 >> 2 <= (unint64_t)(v148 + 1))
          v150 = v148 + 1;
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8)
          v151 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v151 = v150;
        if (v151)
          v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v151);
        else
          v152 = 0;
        v153 = (_QWORD *)(v151 + 8 * v148);
        *v153 = v143;
        v146 = v153 + 1;
        v155 = *(char **)(a1 + 48);
        v154 = *(char **)(a1 + 56);
        if (v154 != v155)
        {
          do
          {
            v156 = *((_QWORD *)v154 - 1);
            v154 -= 8;
            *--v153 = v156;
          }
          while (v154 != v155);
          v154 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v153;
        *(_QWORD *)(a1 + 56) = v146;
        *(_QWORD *)(a1 + 64) = v151 + 8 * v152;
        if (v154)
          operator delete(v154);
      }
      else
      {
        *v145 = v143;
        v146 = v145 + 1;
      }
      *(_QWORD *)(a1 + 56) = v146;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 360) + 24 * v107++), v108);
    }
    while (v107 < maxFeatureVectors);
  }
}

void sub_191577EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<signed char>::~FullLayer(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;

  *(_QWORD *)a1 = off_1E2D58E28;
  FullLayer<signed char>::cleanupAllBuffers(a1);
  v2 = *(_QWORD *)(a1 + 424);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    *(_QWORD *)(a1 + 424) = 0;
  }
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 440));
  v3 = *(void **)(a1 + 384);
  if (v3)
  {
    *(_QWORD *)(a1 + 392) = v3;
    operator delete(v3);
  }
  v12 = (void **)(a1 + 360);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(_QWORD *)(a1 + 344) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 264);
  if (v7)
  {
    *(_QWORD *)(a1 + 272) = v7;
    operator delete(v7);
  }
  SparseMatrix<float>::~SparseMatrix(a1 + 144);
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(_QWORD *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void FullLayer<signed char>::cleanupAllBuffers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = *(_QWORD *)(a1 + 48);
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 == v6)
  {
    v6 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C8077774924);
        v6 = *(_QWORD *)(a1 + 72);
        v7 = *(_QWORD *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    v2 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 80) = v6;
  SparseMatrix<float>::cleanupAllBuffers((_QWORD *)(a1 + 144));
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 360));
  if (!*(_BYTE *)(a1 + 116))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
  }
}

void FullLayer<signed char>::targets()
{
  exitFramework(1);
}

uint64_t FullLayer<signed char>::inputs(uint64_t a1)
{
  return a1 + 264;
}

uint64_t FullLayer<signed char>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t FullLayer<signed char>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t FullLayer<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 312;
}

uint64_t FullLayer<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t FullLayer<signed char>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  uint64_t v9;
  int *v10;
  int v11;
  signed __int8 **v12;
  int v13;
  char v15[8];

  v5 = (int)a4;
  *(_QWORD *)v15 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v15[4], v15, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((int *)this + 18);
    v10 = (int *)(*(_QWORD *)this + v9);
    if ((unint64_t)v10 <= *(_QWORD *)this + *((_QWORD *)this + 1) - 4)
    {
      v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v11 = 0;
    }
    *(_DWORD *)(a1 + 408) = v11;
  }
  v12 = (signed __int8 **)*(unsigned int *)(a1 + 100);
  if ((_DWORD)v12 != *(_DWORD *)&v15[4] || (v13 = *(_DWORD *)(a1 + 104), v13 != *(_DWORD *)v15))
    exitFramework(3);
  return MMatrix<signed char>::read(*(char **)(a1 + 512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 117), v12, v13);
}

void FullLayer<signed char>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 100), *(_DWORD *)(a1 + 104));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 408);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  MMatrix<signed char>::write(*(char ***)(a1 + 512), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

_QWORD *FullLayer<signed char>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  result = 0;
LABEL_6:
  v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD **)(a1 + 512);
    do
    {
      *(_BYTE *)(*v9 + v8) = *(_BYTE *)(result[16] + v8) - *(_BYTE *)(v5[16] + v8);
      ++v8;
    }
    while (v7 != v8);
  }
  return result;
}

void *FullLayer<signed char>::compareModels(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
  if (a3)
  return result;
}

_QWORD *FullLayer<signed char>::addGradient(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (lpsrc)
  else
    result = 0;
  v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD **)(a1 + 512);
    do
    {
      *(_BYTE *)(*v6 + v5) += *(_BYTE *)(result[16] + v5);
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

void FullLayer<signed char>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 64))(*(_QWORD *)(a1 + 424));
  exitFramework(23);
}

uint64_t FullLayer<signed char>::clipModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  float v5;
  float v6;

  v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD **)(result + 512);
    do
    {
      v5 = (float)*(char *)(*v4 + v3);
      v6 = -a2;
      if (v5 < (float)-a2 || (v6 = a2, v5 > a2))
        *(_BYTE *)(*v4 + v3) = (int)v6;
      ++v3;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t FullLayer<signed char>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD **)(result + 512);
    do
    {
      *(_BYTE *)(*v4 + v3) = (int)(float)((float)*(char *)(*v4 + v3) * a2);
      ++v3;
    }
    while (v2 != v3);
  }
  return result;
}

void FullLayer<signed char>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v2 = *(_QWORD *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print before reset");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424));
  v3 = *(_QWORD *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print AFTER reset");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_191578610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *FullLayer<signed char>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t *v5;
  char *result;

  v3 = **(_QWORD **)(a1 + 512);
  v4 = *(double *)(a1 + 100);
  v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    *v5 = v3;
    *((double *)v5 + 1) = v4;
    result = (char *)(v5 + 2);
  }
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t FullLayer<signed char>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 128) = v3;
  result = a1 + 128;
  *(_QWORD *)(result + 384) = result;
  return result;
}

uint64_t FullLayer<signed char>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t FullLayer<signed char>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void FullLayer<signed char>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_191578710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FullLayer<signed char>::log2ProbabilityForSingleFeatureVector(uint64_t a1, _QWORD *a2, float *a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;

  v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    v10 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v9 = 1.1755e-38;
    do
    {
      v8 = *(_QWORD *)(*a2 + 8 * a4);
      if (*(float *)(v8 + 4 * v7) > v9)
      {
        v6 = v7;
        v9 = *(float *)(v8 + 4 * v7);
      }
      ++v7;
    }
    while (v5 != v7);
    v10 = v6;
  }
  v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
    v12 = 99.0;
  else
    v12 = 0.0 - log2f(v11);
  *a3 = v12;
}

float FullLayer<signed char>::computeErrorForSingleFeatureVector(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, _DWORD *a5, float result)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float **v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float v22;

  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    v14 = *a2;
    v15 = (float **)(*a2 + 8 * a4);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v11 = 1.1755e-38;
    do
    {
      v10 = *(_QWORD *)(v6 + 8 * a4);
      if (*(float *)(v10 + 4 * v9) > v11)
      {
        v8 = v9;
        v11 = *(float *)(v10 + 4 * v9);
      }
      ++v9;
    }
    while (v7 != v9);
    v12 = 0;
    v13 = 0;
    v14 = *a2;
    v15 = (float **)(*a2 + 8 * a4);
    result = 1.1755e-38;
    do
    {
      if ((*v15)[v13] > result)
      {
        v12 = v13;
        result = (*v15)[v13];
      }
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12)
      ++*a5;
  }
  if (a4 < (unint64_t)((uint64_t)(a3[1] - *a3) >> 3)
    && a4 < (unint64_t)((a2[1] - v14) >> 3)
    && a4 < (unint64_t)((*(_QWORD *)(a1 + 296) - v6) >> 3))
  {
    v16 = *(unsigned int *)(a1 + 100);
    if ((int)v16 >= 1)
    {
      v17 = *v15;
      v18 = *(float **)(v6 + 8 * a4);
      v19 = *(float **)(*a3 + 8 * a4);
      do
      {
        v20 = *v17++;
        v21 = v20;
        v22 = *v18++;
        result = v21 - v22;
        *v19++ = result;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

void FullLayer<signed char>::backwardForSingleFeatureVector(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  void *__p;
  void *v11;
  uint64_t v12;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 416), *(float **)(*(_QWORD *)(a1 + 384) + 8 * a4), *(float **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
    VVector<float>::internalMul((float **)(*(_QWORD *)(a1 + 312) + 8 * a4), (float **)(a1 + 416), *(int8x16_t ***)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    VVector<float>::sumOuterProd(a1 + 416, *(_QWORD *)(a1 + 264) + 8 * a4, *(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
  }
  else
  {
    v8 = *a2;
    v9 = *(_QWORD *)(a1 + 360) + 24 * a4;
    v11 = 0;
    v12 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
    SparseMatrix<float>::sum<float>(a1 + 144, *(int **)(v8 + 8 * a4), (uint64_t)__p, *(_DWORD *)(a1 + 100));
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
}

void FullLayer<signed char>::initDW(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 116))
  {
    if (*(_DWORD *)(a1 + 112))
      *(_DWORD *)(a1 + 160) = 0;
    else
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  }
  v4 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(a1 + 272) != v4)
  {
    v5 = 0;
    do
    {
      bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
      v4 = *(_QWORD *)(a1 + 264);
    }
    while (v5 < (*(_QWORD *)(a1 + 272) - v4) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v6)
  {
    v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      v6 = *(_QWORD *)(a1 + 288);
    }
    while (v7 < (*(_QWORD *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1)
  {
    v8 = 0;
    v9 = 8 * a2;
    do
    {
      if (!*(_BYTE *)(a1 + 116))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
        bzero(*(void **)(*(_QWORD *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
}

uint64_t FullLayer<signed char>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t FullLayer<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

void FullLayer<signed char>::update(uint64_t a1)
{
  if (*(int *)(a1 + 112) >= 1)
    exitFramework(33);
  exitFramework(23);
}

void FullLayer<signed char>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  if (*(int *)(a1 + 112) < 1)
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  else
    *(_DWORD *)(a1 + 160) = 0;
  v9 = __OFSUB__(a5, 1);
  v10 = a5 - 1;
  if (v10 < 0 == v9)
  {
    v11 = 0;
    do
    {
      if (*(_BYTE *)(a1 + 520))
        v12 = v11;
      else
        v12 = v10;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
      --v10;
      ++v11;
    }
    while (v10 != -1);
  }
}

void FullLayer<signed char>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const void **v21;
  _DWORD *v22;
  uint64_t v23;
  float **v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  float *v28;
  uint64_t v29;
  int v30;
  void *v32;
  int *v33;
  uint64_t v34;
  void *__p;
  char v36;

  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
    v9 = 0;
  else
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v10 = *(unsigned __int8 *)(a1 + 520);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fulllayer");
  if (a5 && v10)
    exitFramework(34);
  v11 = a4 & 0xFFFFFF;
  v12 = a5 != 0;
  if (v36 < 0)
    operator delete(__p);
  if (v11 > v12)
  {
    do
    {
      if (*(_BYTE *)(a1 + 520))
        v13 = v11 + ~v12;
      else
        v13 = v12;
      v14 = v13;
      if (*(_BYTE *)(a1 + 42))
        v15 = 1;
      else
        v15 = v13;
      if (((*(_BYTE *)(a1 + 42) != 0) & v9) != 0)
        v16 = 1;
      else
        v16 = v13;
      v17 = *(_QWORD *)(a1 + 264);
      if (v9)
      {
        bzero(*(void **)(v17 + 8 * v16), 4 * *(int *)(a1 + 104));
        v18 = *(_QWORD *)(a1 + 264);
        *(_DWORD *)(*(_QWORD *)(v18 + 8 * v16) + 4 * **(int **)(*a3 + 24 * (int)v14)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v17 + 8 * v16), *(const void **)(*a2 + 8 * v16), 4 * *(int *)(a1 + 96));
        v18 = *(_QWORD *)(a1 + 264);
      }
      v19 = *(_DWORD *)(a1 + 104);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(v18 + 8 * v16) + 4 * (v19 - 1)) = 1065353216;
      VVector<float>::print((float **)(v18 + 8 * v16), "FullLayer input: ", v19);
      MMatrix<signed char>::print(*(char ***)(a1 + 512), "FullLayer weights: ", *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (!v9)
        VVector<float>::internalMul((float **)(*(_QWORD *)(a1 + 384) + 8 * v15), (float **)(*(_QWORD *)(a1 + 264) + 8 * v16), *(int8x16_t ***)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
      v20 = *(_QWORD *)(a1 + 360);
      v21 = (const void **)(v20 + 24 * v14);
      v22 = *v21;
      *(_DWORD *)*v21 = **(_DWORD **)(*a3 + 24 * v14);
      if (*(_BYTE *)(a1 + 40))
        v22[1] = *(_DWORD *)(a1 + 104) - 1;
      v23 = v15;
      v24 = (float **)(*(_QWORD *)(a1 + 384) + 8 * v15);
      v33 = 0;
      v34 = 0;
      v32 = 0;
      v25 = *(_QWORD *)(v20 + 24 * (int)v14 + 8);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *v21, v25, (v25 - (uint64_t)*v21) >> 2);
      VVector<float>::internalMul(v24, (int *)v32, v33, **(_QWORD **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
      if (v32)
      {
        v33 = (int *)v32;
        operator delete(v32);
      }
      v26 = *(_QWORD *)(a1 + 384);
      v27 = *(_DWORD *)(a1 + 100);
      v28 = *(float **)(v26 + 8 * v23);
      if (v27 >= 1)
      {
        v29 = *(unsigned int *)(a1 + 100);
        do
        {
          v30 = -1035468800;
          if (*v28 < -50.0 || (v30 = 1112014848, *v28 > 50.0))
            *(_DWORD *)v28 = v30;
          ++v28;
          --v29;
        }
        while (v29);
        v28 = *(float **)(v26 + 8 * v23);
      }
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 288) + 8 * v14), v28, v27, *(_DWORD *)(a1 + 408));
      ++v12;
    }
    while (v12 != v11);
  }
}

void sub_191578F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<signed char>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[520] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      FullLayer<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A788 = 0;
      qword_1EE21A790 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &FullLayer<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &FullLayer<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[520] = 0;
  return result;
}

uint64_t FullLayer<signed char>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[520] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *FullLayer<signed char>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 504) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 512) = result + 128;
  return result;
}

void FullLayer<signed char>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 504))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 440));
    if (!*(_DWORD *)(a1 + 112))
      exitFramework(23);
    exitFramework(33);
  }
  exitFramework(1);
}

_DWORD *FullLayer<signed char>::computeError(_DWORD *result)
{
  if (!result[30])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 392))(result);
  return result;
}

float FullLayer<signed char>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = 0;
  v4 = *(unsigned int *)(a1 + 100);
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 288);
  v7 = a3;
  v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v12 = 1.1755e-38;
      do
      {
        v11 = *(_QWORD *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          v9 = v10;
          v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    v13 = *(float *)(*(_QWORD *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10)
      v14 = 99.0;
    else
      v14 = -log2f(v13);
    v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

void FullLayer<signed char>::~FullLayer(uint64_t a1)
{
  FullLayer<signed char>::~FullLayer(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t FullLayer<signed char>::outputDeltas(uint64_t a1)
{
  return a1 + 336;
}

float FullLayer<signed char>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a2) + 4 * a3);
}

void FullLayer<signed char>::computeErrorRMSE(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  void *__p[2];
  unsigned __int8 v33;
  std::string v34;
  void *v35[2];
  int64_t v36;

  if (a4 >= 1)
  {
    v9 = a4;
    do
    {
      v10 = (v9 - 1);
      v11 = *(unsigned int *)(a1 + 100);
      if ((int)v11 >= 1)
      {
        v12 = 0;
        v13 = 0;
        v14 = *(float **)(*(_QWORD *)(a1 + 288) + 8 * v10);
        v15 = 1.1755e-38;
        do
        {
          if (v14[v13] > v15)
          {
            v12 = v13;
            v15 = v14[v13];
          }
          ++v13;
        }
        while (v11 != v13);
        v16 = 0;
        v17 = 0;
        v18 = *(float **)(*a2 + 8 * v10);
        v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            v16 = v17;
            v19 = v18[v17];
          }
          ++v17;
        }
        while (v11 != v17);
        if (v12 != v16)
        {
          ++*a5;
          v11 = *(unsigned int *)(a1 + 100);
        }
        if ((int)v11 >= 1)
        {
          v20 = *(float **)(*a3 + 8 * v10);
          do
          {
            v21 = *v18++;
            v22 = v21;
            v23 = *v14++;
            *v20++ = v22 - v23;
            --v11;
          }
          while (v11);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v34, "SoftMax ComputerError::targets t=");
      i2s(__p);
      if ((v33 & 0x80u) == 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      if ((v33 & 0x80u) == 0)
        v25 = v33;
      else
        v25 = (std::string::size_type)__p[1];
      v26 = std::string::append(&v34, (const std::string::value_type *)v24, v25);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v36 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)v35 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((char)v33 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (v36 >= 0)
        v28 = (char *)v35;
      else
        v28 = (char *)v35[0];
      VVector<float>::print((float **)(*a2 + 8 * v10), v28, *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 288) + 8 * v10), "SoftMax ComputerError::output ", *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*a3 + 8 * v10), "SoftMax ComputerError::deltas ", *(_DWORD *)(a1 + 100));
      if (SHIBYTE(v36) < 0)
        operator delete(v35[0]);
      v31 = __OFSUB__(v9, 1);
      v29 = v9 == 1;
      v30 = --v9 < 0;
    }
    while (!(v30 ^ v31 | v29));
  }
}

void sub_191579420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void SoftMax<signed char>::targets()
{
  exitFramework(1);
}

uint64_t SoftMax<signed char>::inputs(uint64_t a1)
{
  return a1 + 264;
}

uint64_t SoftMax<signed char>::outputs(uint64_t a1)
{
  return a1 + 288;
}

void SoftMax<signed char>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax, from allocAll");
  FullLayer<signed char>::init(a1, (uint64_t)__p, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1915794E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoftMax<signed char>::forwardForSingleFeatureVector(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, const void **a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  const void *v16;
  const void *v17;
  const void **v18;
  uint64_t v19;
  float **v20;
  float **v21;
  unsigned __int8 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  float v27;
  int v28;
  int *v29;
  int8x16_t *v30;
  uint64_t v31;
  int8x16_t *v32;
  float v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int32 *v38;
  uint64_t v39;
  void **v40;
  uint64_t *v41;
  uint64_t v42;
  int8x16_t **v43;
  uint64_t v44;
  const void **v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *__p[3];

  v9 = *(unsigned __int8 *)(a1 + 42);
  v10 = a4;
  v11 = *(int *)(a1 + 96);
  v44 = *(int *)(a1 + 100);
  v12 = *(unsigned int *)(a1 + 100);
  v43 = *(int8x16_t ***)(a1 + 512);
  v13 = *(int *)(a1 + 104);
  v14 = *(unsigned int *)(a1 + 104);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  memmove(*(void **)(*v15 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v11);
  if (*(_BYTE *)(a1 + 40))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 8 * v10)
              + 4 * ((int)v13 - 1)) = 1065353216;
  v45 = a5;
  v18 = a5;
  v17 = *a5;
  v16 = v18[1];
  if (v9)
    v19 = 1;
  else
    v19 = v10;
  v20 = (float **)(*(_QWORD *)(a1 + 384) + 8 * v19);
  v21 = (float **)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 8 * v10);
  if (v16 == v17)
    VVector<float>::internalMul(v20, v21, v43, v12, v14, 0.0);
  bzero(*v20, 4 * v44);
  if ((v22 & 1) == 0
  {
    VVector<float>::computeXTimesW(VVector<float>&,std::vector<int> const&,VVector<float> const&,MMatrix<signed char> const&,int,int)::scale = 986185728;
  }
  std::vector<signed char>::vector(__p, v13);
  if ((int)v13 >= 1)
  {
    v26 = 0;
    v23.n128_u32[0] = -5.0;
    v24.n128_u32[0] = 5.0;
    v25.n128_u32[0] = 1103940813;
    do
    {
      v27 = (*v21)[v26];
      if (v27 <= -5.0)
      {
        LOBYTE(v28) = -127;
      }
      else if (v27 < 5.0 && (v28 = llroundf(v27 * 25.6), v28 <= 127))
      {
        if (v28 <= -127)
          LOBYTE(v28) = -127;
      }
      else
      {
        LOBYTE(v28) = 127;
      }
      *((_BYTE *)__p[0] + v26++) = v28;
    }
    while (v14 != v26);
  }
  v42 = v19;
  v29 = (int *)*v45;
  v30 = (int8x16_t *)__p[0];
  v31 = (_BYTE *)v45[1] - (_BYTE *)*v45;
  if (v31)
  {
    v32 = *v43;
    v33 = *(float *)&VVector<float>::computeXTimesW(VVector<float>&,std::vector<int> const&,VVector<float> const&,MMatrix<signed char> const&,int,int)::scale;
    v34 = *v20;
    v35 = v31 >> 2;
    if (v35 <= 1)
      v36 = 1;
    else
      v36 = v35;
    do
    {
      v37 = *v29++;
      v23.n128_f32[0] = v33
                      * (float)(int)VVector<float>::dot((int8x16_t *)((char *)v32 + (int)v37 * (uint64_t)(int)v14), v30, v14);
      v34[v37] = v23.n128_f32[0];
      --v36;
    }
    while (v36);
  }
  if (v30)
  {
    __p[1] = v30;
    operator delete(v30);
  }
  if ((int)v44 >= 1)
  {
    v38 = *(unsigned __int32 **)(*(_QWORD *)(a1 + 384) + 8 * v42);
    v39 = v12;
    do
    {
      v24.n128_u32[0] = *v38;
      v23.n128_u32[0] = -1035468800;
      if (*(float *)v38 < -50.0 || (v23.n128_u32[0] = 1112014848, v24.n128_f32[0] > 50.0))
        *v38 = v23.n128_u32[0];
      ++v38;
      --v39;
    }
    while (v39);
  }
  v40 = (void **)(*(_QWORD *)(*(uint64_t (**)(uint64_t, __n128, __n128, __n128))(*(_QWORD *)a1 + 32))(a1, v23, v24, v25)+ 8 * v10);
  v41 = (uint64_t *)(*(_QWORD *)(a1 + 384) + 8 * v42);
  v47 = 0;
  v48 = 0;
  v46 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, *v45, (uint64_t)v45[1], ((_BYTE *)v45[1] - (_BYTE *)*v45) >> 2);
  VVector<float>::outputExpNormalized(v40, v41, (int **)&v46, v12);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
}

void SoftMax<signed char>::forward(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  void *__p;
  char v17;

  v13 = a1[520];
  std::string::basic_string[abi:ne180100]<0>(&__p, "Softmax");
  if (a5 && v13)
    exitFramework(34);
  v14 = a4 & 0xFFFFFF;
  v15 = a5 != 0;
  if (v17 < 0)
    operator delete(__p);
  if (v14 > v15)
  {
    do
    {
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2, a3, v15, a7);
      v15 = (v15 + 1);
    }
    while (v14 != (_DWORD)v15);
  }
}

void sub_19157999C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoftMax<signed char>::~SoftMax(uint64_t a1)
{
  FullLayer<signed char>::~FullLayer(a1);
  JUMPOUT(0x19401CD90);
}

_QWORD *std::vector<signed char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_191579A34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<signed char>::targets()
{
  exitFramework(1);
}

uint64_t RecurrentLayer<signed char>::inputs(uint64_t a1)
{
  return a1 + 88;
}

uint64_t RecurrentLayer<signed char>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t RecurrentLayer<signed char>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t RecurrentLayer<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 136;
}

uint64_t RecurrentLayer<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t RecurrentLayer<signed char>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  uint64_t v9;
  int *v10;
  int v11;
  signed __int8 **v12;
  int v13;
  char v15[8];

  v5 = (int)a4;
  *(_QWORD *)v15 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v15[4], v15, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((int *)this + 18);
    v10 = (int *)(*(_QWORD *)this + v9);
    if ((unint64_t)v10 <= *(_QWORD *)this + *((_QWORD *)this + 1) - 4)
    {
      v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v11 = 0;
    }
    *(_DWORD *)(a1 + 208) = v11;
  }
  v12 = (signed __int8 **)*(unsigned int *)(a1 + 48);
  if ((_DWORD)v12 != *(_DWORD *)&v15[4] || (v13 = *(_DWORD *)(a1 + 52), v13 != *(_DWORD *)v15))
    exitFramework(3);
  return MMatrix<signed char>::read(*(char **)(a1 + 376), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 61), v12, v13);
}

void RecurrentLayer<signed char>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 48), *(_DWORD *)(a1 + 52));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 208);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  MMatrix<signed char>::write(*(char ***)(a1 + 376), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

_QWORD *RecurrentLayer<signed char>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  result = 0;
LABEL_6:
  v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD **)(a1 + 376);
    do
    {
      *(_BYTE *)(*v9 + v8) = *(_BYTE *)(result[8] + v8) - *(_BYTE *)(v5[8] + v8);
      ++v8;
    }
    while (v7 != v8);
  }
  return result;
}

void *RecurrentLayer<signed char>::compareModels(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
  if (a3)
  return result;
}

_QWORD *RecurrentLayer<signed char>::addGradient(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (lpsrc)
  else
    result = 0;
  v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD **)(a1 + 376);
    do
    {
      *(_BYTE *)(*v6 + v5) += *(_BYTE *)(result[8] + v5);
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

void RecurrentLayer<signed char>::allocInitialState(uint64_t a1, void **a2)
{
  _QWORD *v4;
  int v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = (_QWORD *)operator new();
  VVector<float>::VVector(v4, *(_DWORD *)(a1 + 48), 0);
  v5 = *(_DWORD *)(a1 + 48);
  v7 = (char *)a2[1];
  v6 = (char *)a2[2];
  if (v7 >= v6)
  {
    v9 = (v7 - (_BYTE *)*a2) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - (_BYTE *)*a2;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 16 * v9;
    v15 = v12 + 16 * v13;
    *(_DWORD *)v14 = v5;
    *(_QWORD *)(v14 + 8) = v4;
    v8 = (void *)(v14 + 16);
    v17 = (char *)*a2;
    v16 = (char *)a2[1];
    if (v16 != *a2)
    {
      do
      {
        *(_OWORD *)(v14 - 16) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a2;
    }
    *a2 = (void *)v14;
    a2[1] = v8;
    a2[2] = (void *)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v7 = v5;
    *((_QWORD *)v7 + 1) = v4;
    v8 = v7 + 16;
  }
  a2[1] = v8;
}

void sub_191579EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void *RecurrentLayer<signed char>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *result;

  v5 = *(int *)(a1 + 48);
  v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void RecurrentLayer<signed char>::restoreState(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8[200];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *a4;
  *a4 = v7 + 1;
  memmove(*(void **)(v6 + 8 * a3), **(const void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(a1 + 48));
  sprintf(v8, "RNN restore startTimIdx = %d", a3);
  VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * a3), v8, *(_DWORD *)(a1 + 48));
}

void RecurrentLayer<signed char>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v4;

  v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

char *RecurrentLayer<signed char>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t *v5;
  char *result;

  v3 = **(_QWORD **)(a1 + 376);
  v4 = *(double *)(a1 + 48);
  v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    *v5 = v3;
    *((double *)v5 + 1) = v4;
    result = (char *)(v5 + 2);
  }
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t RecurrentLayer<signed char>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 64) = v3;
  result = a1 + 64;
  *(_QWORD *)(result + 312) = result;
  return result;
}

uint64_t RecurrentLayer<signed char>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t RecurrentLayer<signed char>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void RecurrentLayer<signed char>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, __p, 0, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_19157A110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<signed char>::cleanupAllBuffers(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 248);
  v3 = *(_QWORD *)(result + 256);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(result + 256);
  }
  else
  {
    v4 = 0;
    do
    {
      result = *(_QWORD *)(v2 + 8 * v4);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C8052888210);
        v2 = v1[31];
        v3 = v1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v5 = v1[34];
  v6 = v1[35];
  if (v6 == v5)
  {
    v5 = v1[35];
  }
  else
  {
    v7 = 0;
    do
    {
      result = *(_QWORD *)(v5 + 8 * v7);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C8077774924);
        v5 = v1[34];
        v6 = v1[35];
      }
      ++v7;
    }
    while (v7 < (v6 - v5) >> 3);
    v2 = v1[31];
  }
  v1[32] = v2;
  v1[35] = v5;
  return result;
}

uint64_t RecurrentLayer<signed char>::ninputs(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t RecurrentLayer<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t RecurrentLayer<signed char>::update(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t i;

  result = operator new[]();
  v5 = *(unsigned int *)(a1 + 56);
  if ((int)v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
      *(_BYTE *)(*(_QWORD *)(a1 + 64) + i) = (int)(float)((float)*(char *)(*(_QWORD *)(a1 + 64) + i)
                                                        + (float)(*(float *)(*(_QWORD *)(a1 + 80) + 4 * i)
                                                                * (float)(int)a2));
  }
  return result;
}

void RecurrentLayer<signed char>::backward(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  void *v27[2];
  int64_t v28;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) != 0)
  {
    bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
    if (a5 >= 1)
    {
      v9 = 0;
      do
      {
        --a5;
        if (*(_BYTE *)(a1 + 232))
          v10 = v9;
        else
          v10 = a5;
        v11 = v10;
        VVector<float>::sumOuterProd(*a4 + 8 * v10, *(_QWORD *)(a1 + 88) + 8 * v10, *(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
        if (*(_BYTE *)(a1 + 40))
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v11) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
        std::string::basic_string[abi:ne180100]<0>(&v25, "FullLayer DW: t[");
        i2s(v23);
        if ((v24 & 0x80u) == 0)
          v12 = v23;
        else
          v12 = (void **)v23[0];
        if ((v24 & 0x80u) == 0)
          v13 = v24;
        else
          v13 = (std::string::size_type)v23[1];
        v14 = std::string::append(&v25, (const std::string::value_type *)v12, v13);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "] ");
        if ((v22 & 0x80u) == 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        if ((v22 & 0x80u) == 0)
          v17 = v22;
        else
          v17 = (std::string::size_type)__p[1];
        v18 = std::string::append(&v26, (const std::string::value_type *)v16, v17);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v28 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)v27 = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((char)v22 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        if ((char)v24 < 0)
          operator delete(v23[0]);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (v28 >= 0)
          v20 = (char *)v27;
        else
          v20 = (char *)v27[0];
        MMatrix<float>::print((float **)(a1 + 80), v20, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
        if (SHIBYTE(v28) < 0)
          operator delete(v27[0]);
        ++v9;
      }
      while (a5 > 0);
    }
  }
  else
  {
    if (a5 > 0)
    {
      if (*(_BYTE *)(a1 + 232))
        v8 = 0;
      else
        v8 = a5 - 1;
      VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 216), *(float **)(*(_QWORD *)(a1 + 184) + 8 * v8), *(float **)(*a4 + 8 * v8), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      VVector<float>::internalMul((float **)(*(_QWORD *)(a1 + 136) + 8 * v8), (float **)(a1 + 216), *(int8x16_t ***)(a1 + 376), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 0.0);
    }
    bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  }
}

void sub_19157A57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<signed char>::forward(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  _BOOL4 v10;
  BOOL v11;
  char v12;
  signed int v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  void *v17;
  char v18;
  char *p_p;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  void *v23;
  char v24;
  char **v25;
  char *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int *v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  _DWORD *v41;
  int v42;
  std::string v43;
  std::string v44;
  void *__p;
  __int128 v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 240);
  if (v9)
    v10 = !*(_BYTE *)(v9 + 20) && *(_DWORD *)(v9 + 40) == 1 && *(_DWORD *)(v9 + 44) == 1;
  else
    v10 = 1;
  v11 = *(_BYTE *)(a1 + 232) != 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Recurrent");
  v12 = !v11;
  if (!a5)
    v12 = 1;
  if ((v12 & 1) == 0)
    exitFramework(34);
  v13 = a5 != 0;
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  __p = 0;
  v46 = 0uLL;
  i2s(&v43);
  v14 = std::string::insert(&v43, 0, "RNN Forward W_i[");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v44, "] W:");
  v17 = (void *)v16->__r_.__value_.__r.__words[0];
  v47[0] = v16->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  __p = v17;
  *(_QWORD *)&v46 = v47[0];
  *(_QWORD *)((char *)&v46 + 7) = *(_QWORD *)((char *)v47 + 7);
  HIBYTE(v46) = v18;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v46 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  MMatrix<signed char>::print(*(char ***)(a1 + 376), p_p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  i2s(&v43);
  v20 = std::string::insert(&v43, 0, "RNN Forward R_i[");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v44, "] R:");
  v23 = (void *)v22->__r_.__value_.__r.__words[0];
  v47[0] = v22->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  __p = v23;
  *(_QWORD *)&v46 = v47[0];
  *(_QWORD *)((char *)&v46 + 7) = *(_QWORD *)((char *)v47 + 7);
  HIBYTE(v46) = v24;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v25 = *(char ***)(a1 + 384);
  if (v25)
  {
    if (v46 >= 0)
      v26 = (char *)&__p;
    else
      v26 = (char *)__p;
    MMatrix<signed char>::print(v25, v26, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48));
  }
  v27 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFFu) > v13)
  {
    if (*(_BYTE *)(a1 + 232))
      v13 = v27 + ~v13;
    v28 = v13 < v27 - 1;
    if (*(_BYTE *)(a1 + 232))
      v29 = 1;
    else
      v29 = -1;
    if (*(_BYTE *)(a1 + 232))
      v30 = v28;
    else
      v30 = a5 != 0;
    v31 = v13;
    bzero(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v13), 4 * *(int *)(a1 + 52));
    v32 = *(_QWORD *)(a1 + 88);
    v33 = *(_DWORD *)(a1 + 44);
    if (v33 >= 1)
    {
      v34 = *(int **)(*a2 + 8 * v13);
      v35 = *(_DWORD **)(v32 + 8 * v13);
      v36 = *(unsigned int *)(a1 + 44);
      do
      {
        v37 = *v34++;
        *v35++ = v37;
        --v36;
      }
      while (v36);
    }
    v38 = v13 + v29;
    if (v10 && v30)
    {
      v39 = *(unsigned int *)(a1 + 48);
      if ((int)v39 >= 1)
      {
        v40 = *(int **)(*(_QWORD *)(a1 + 112) + 8 * v38);
        v41 = (_DWORD *)(*(_QWORD *)(v32 + 8 * v31) + 4 * v33);
        do
        {
          v42 = *v40++;
          *v41++ = v42;
          --v39;
        }
        while (v39);
      }
    }
    if (*(_BYTE *)(a1 + 40))
      *(_DWORD *)(*(_QWORD *)(v32 + 8 * v31) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * v38), "RNN output t-1 : ", *(_DWORD *)(a1 + 48));
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 88) + 8 * v31), "RNN input t: ", *(_DWORD *)(a1 + 52));
    MMatrix<signed char>::print((char **)(a1 + 64), "RNN weights: ", *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
    VVector<float>::internalMul((float **)(a1 + 216), (float **)(*(_QWORD *)(a1 + 88) + 8 * v31), *(int8x16_t ***)(a1 + 376), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 0.0);
  }
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
}

void sub_19157AA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

char *RecurrentLayer<signed char>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 368) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 376) = result + 64;
  return result;
}

uint64_t RecurrentLayer<signed char>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;

  if (*(_DWORD *)(a1 + 368))
    exitFramework(1);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  v7 = *(unsigned int *)(a1 + 56);
  if ((int)v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(*(_QWORD *)(a1 + 64) + i) = (int)(float)((float)*(char *)(*(_QWORD *)(a1 + 64) + i)
                                                        + (float)(*(float *)(v6[10] + 4 * i) * (float)(int)a3));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
}

uint64_t RecurrentLayer<signed char>::computeError(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;

  if (a4 >= 1)
  {
    v5 = *a5;
    v6 = *(_QWORD *)(result + 112);
    v7 = *a2;
    v8 = *a3;
    v9 = a4;
    v10 = *(unsigned int *)(result + 48);
    do
    {
      if ((int)v10 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v13 = (v9 - 1);
        v14 = *(float **)(v6 + 8 * v13);
        v15 = 1.1755e-38;
        do
        {
          if (v14[v12] > v15)
          {
            v11 = v12;
            v15 = v14[v12];
          }
          ++v12;
        }
        while (v10 != v12);
        v16 = 0;
        v17 = 0;
        v18 = *(float **)(v7 + 8 * v13);
        v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            v16 = v17;
            v19 = v18[v17];
          }
          ++v17;
        }
        while (v10 != v17);
        if (v11 == v16)
        {
          v10 = v10;
        }
        else
        {
          *a5 = ++v5;
          v10 = *(unsigned int *)(result + 48);
        }
        if ((int)v10 >= 1)
        {
          v20 = *(float **)(v8 + 8 * v13);
          v21 = v10;
          do
          {
            v22 = *v18++;
            v23 = v22;
            v24 = *v14++;
            *v20++ = v23 - v24;
            --v21;
          }
          while (v21);
        }
      }
    }
    while (v9-- > 1);
  }
  return result;
}

float RecurrentLayer<signed char>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = 0;
  v4 = *(unsigned int *)(a1 + 48);
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 112);
  v7 = a3;
  v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v12 = 1.1755e-38;
      do
      {
        v11 = *(_QWORD *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          v9 = v10;
          v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    v13 = *(float *)(*(_QWORD *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10)
      v14 = 99.0;
    else
      v14 = -log2f(v13);
    v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

void RecurrentLayer<signed char>::~RecurrentLayer(uint64_t a1)
{
  RecurrentLayer<signed char>::~RecurrentLayer(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t RecurrentLayer<signed char>::outputDeltas(uint64_t a1)
{
  return a1 + 160;
}

float RecurrentLayer<signed char>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void RecurrentLayer<signed char>::init(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  _BOOL4 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  void *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  std::string v148;
  void *__p[2];
  int64_t v150;

  v6 = *(_QWORD *)(a1 + 240);
  if (v6)
    v7 = !*(_BYTE *)(v6 + 20) && *(_DWORD *)(v6 + 40) == 1 && *(_DWORD *)(v6 + 44) == 1;
  else
    v7 = 1;
  if (*(_BYTE *)(a1 + 42))
  {
    v8 = 2;
    v9 = 2;
  }
  else
  {
    v8 = 2 * (*(_BYTE *)(a1 + 232) != 0);
    v9 = 2 * *(unsigned __int8 *)(a1 + 232);
  }
  v10 = *(unsigned int *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v11;
  if (v7)
  {
    v11 += v10;
    *(_DWORD *)(a1 + 52) = v11;
  }
  *(_DWORD *)(a1 + 56) = v10 * v11;
  v12 = (void *)operator new[]();
  v13 = v12;
  if ((int)v10 >= 1)
    bzero(v12, 4 * v10);
  *(_QWORD *)(a1 + 216) = v13;
  v15 = *(_QWORD **)(a1 + 256);
  v14 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(_QWORD *)(a1 + 248);
    v18 = ((uint64_t)v15 - v17) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      goto LABEL_181;
    v19 = v14 - v17;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v21);
    else
      v22 = 0;
    v23 = (_QWORD *)(v21 + 8 * v18);
    v24 = v21 + 8 * v22;
    *v23 = v13;
    v16 = v23 + 1;
    v26 = *(char **)(a1 + 248);
    v25 = *(char **)(a1 + 256);
    if (v25 != v26)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = *(char **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 248) = v23;
    *(_QWORD *)(a1 + 256) = v16;
    *(_QWORD *)(a1 + 264) = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = v13;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 256) = v16;
  if (!*(_DWORD *)(a1 + 368))
  {
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    v33 = *(_QWORD *)(a1 + 240);
    if (v33 && (v34 = *(_DWORD *)(v33 + 40), v34 >= 1))
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v33 + 8 * v8 + 112);
      *(_QWORD *)(a1 + 376) = a1 + 64;
      if (v34 == 2)
      {
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(v33 + 8 * (v8 | 1) + 112);
        *(_QWORD *)(a1 + 384) = a1 + 72;
      }
      if (*(_BYTE *)(v33 + 244))
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(v33 + 8 * v9 + 248);
        *(_QWORD *)(a1 + 392) = a1 + 224;
      }
    }
    else if (*(_BYTE *)(a1 + 61))
    {
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
    else
    {
      MMatrix<signed char>::MMatrix(__p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), a3);
      v41 = __p[0];
      *(void **)(a1 + 64) = __p[0];
      v43 = *(_QWORD **)(a1 + 280);
      v42 = *(_QWORD *)(a1 + 288);
      if ((unint64_t)v43 >= v42)
      {
        v137 = *(_QWORD *)(a1 + 272);
        v138 = ((uint64_t)v43 - v137) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v139 = v42 - v137;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v141);
        else
          v142 = 0;
        v143 = (_QWORD *)(v141 + 8 * v138);
        v144 = v141 + 8 * v142;
        *v143 = v41;
        v44 = v143 + 1;
        v146 = *(char **)(a1 + 272);
        v145 = *(char **)(a1 + 280);
        if (v145 != v146)
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v143 = v147;
          }
          while (v145 != v146);
          v145 = *(char **)(a1 + 272);
        }
        *(_QWORD *)(a1 + 272) = v143;
        *(_QWORD *)(a1 + 280) = v44;
        *(_QWORD *)(a1 + 288) = v144;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v43 = v41;
        v44 = v43 + 1;
      }
      *(_QWORD *)(a1 + 280) = v44;
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
  }
  if (!*(_BYTE *)(a1 + 60))
  {
    v28 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48);
    v29 = (void *)operator new[]();
    bzero(v29, 4 * v28);
    *(_QWORD *)(a1 + 80) = v29;
    v31 = *(_QWORD **)(a1 + 256);
    v30 = *(_QWORD *)(a1 + 264);
    if ((unint64_t)v31 < v30)
    {
      *v31 = v29;
      v32 = v31 + 1;
LABEL_58:
      *(_QWORD *)(a1 + 256) = v32;
      goto LABEL_59;
    }
    v35 = *(_QWORD *)(a1 + 248);
    v36 = ((uint64_t)v31 - v35) >> 3;
    if (!((unint64_t)(v36 + 1) >> 61))
    {
      v37 = v30 - v35;
      v38 = v37 >> 2;
      if (v37 >> 2 <= (unint64_t)(v36 + 1))
        v38 = v36 + 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
        v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v39);
      else
        v40 = 0;
      v45 = (_QWORD *)(v39 + 8 * v36);
      v46 = v39 + 8 * v40;
      *v45 = v29;
      v32 = v45 + 1;
      v48 = *(char **)(a1 + 248);
      v47 = *(char **)(a1 + 256);
      if (v47 != v48)
      {
        do
        {
          v49 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *--v45 = v49;
        }
        while (v47 != v48);
        v47 = *(char **)(a1 + 248);
      }
      *(_QWORD *)(a1 + 248) = v45;
      *(_QWORD *)(a1 + 256) = v32;
      *(_QWORD *)(a1 + 264) = v46;
      if (v47)
        operator delete(v47);
      goto LABEL_58;
    }
LABEL_181:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(&v148, " constructt W=");
  v50 = *(char *)(a2 + 23);
  if (v50 >= 0)
    v51 = (const std::string::value_type *)a2;
  else
    v51 = *(const std::string::value_type **)a2;
  if (v50 >= 0)
    v52 = *(unsigned __int8 *)(a2 + 23);
  else
    v52 = *(_QWORD *)(a2 + 8);
  v53 = std::string::insert(&v148, 0, v51, v52);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v150 = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if (v150 >= 0)
    v55 = (char *)__p;
  else
    v55 = (char *)__p[0];
  MMatrix<signed char>::print((char **)(a1 + 64), v55, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
  if (SHIBYTE(v150) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 136), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 160), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 184), maxFeatureVectors);
  if (maxFeatureVectors >= 1)
  {
    v56 = 0;
    do
    {
      v57 = *(unsigned int *)(a1 + 52);
      v58 = (void *)operator new[]();
      v59 = v58;
      if ((int)v57 >= 1)
        bzero(v58, 4 * v57);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v56) = v59;
      v61 = *(_QWORD **)(a1 + 256);
      v60 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v61 >= v60)
      {
        v63 = *(_QWORD *)(a1 + 248);
        v64 = ((uint64_t)v61 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61)
          goto LABEL_181;
        v65 = v60 - v63;
        v66 = v65 >> 2;
        if (v65 >> 2 <= (unint64_t)(v64 + 1))
          v66 = v64 + 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
        else
          v68 = 0;
        v69 = (_QWORD *)(v67 + 8 * v64);
        *v69 = v59;
        v62 = v69 + 1;
        v71 = *(char **)(a1 + 248);
        v70 = *(char **)(a1 + 256);
        if (v70 != v71)
        {
          do
          {
            v72 = *((_QWORD *)v70 - 1);
            v70 -= 8;
            *--v69 = v72;
          }
          while (v70 != v71);
          v70 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v69;
        *(_QWORD *)(a1 + 256) = v62;
        *(_QWORD *)(a1 + 264) = v67 + 8 * v68;
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v61 = v59;
        v62 = v61 + 1;
      }
      *(_QWORD *)(a1 + 256) = v62;
      v73 = *(unsigned int *)(a1 + 52);
      v74 = (void *)operator new[]();
      v75 = v74;
      if ((int)v73 >= 1)
        bzero(v74, 4 * v73);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v56) = v75;
      v77 = *(_QWORD **)(a1 + 256);
      v76 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v77 >= v76)
      {
        v79 = *(_QWORD *)(a1 + 248);
        v80 = ((uint64_t)v77 - v79) >> 3;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_181;
        v81 = v76 - v79;
        v82 = v81 >> 2;
        if (v81 >> 2 <= (unint64_t)(v80 + 1))
          v82 = v80 + 1;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
          v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v83);
        else
          v84 = 0;
        v85 = (_QWORD *)(v83 + 8 * v80);
        *v85 = v75;
        v78 = v85 + 1;
        v87 = *(char **)(a1 + 248);
        v86 = *(char **)(a1 + 256);
        if (v86 != v87)
        {
          do
          {
            v88 = *((_QWORD *)v86 - 1);
            v86 -= 8;
            *--v85 = v88;
          }
          while (v86 != v87);
          v86 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v85;
        *(_QWORD *)(a1 + 256) = v78;
        *(_QWORD *)(a1 + 264) = v83 + 8 * v84;
        if (v86)
          operator delete(v86);
      }
      else
      {
        *v77 = v75;
        v78 = v77 + 1;
      }
      *(_QWORD *)(a1 + 256) = v78;
      v89 = *(unsigned int *)(a1 + 48);
      v90 = (void *)operator new[]();
      v91 = v90;
      if ((int)v89 >= 1)
        bzero(v90, 4 * v89);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v56) = v91;
      v93 = *(_QWORD **)(a1 + 256);
      v92 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v93 >= v92)
      {
        v95 = *(_QWORD *)(a1 + 248);
        v96 = ((uint64_t)v93 - v95) >> 3;
        if ((unint64_t)(v96 + 1) >> 61)
          goto LABEL_181;
        v97 = v92 - v95;
        v98 = v97 >> 2;
        if (v97 >> 2 <= (unint64_t)(v96 + 1))
          v98 = v96 + 1;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
          v99 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v99 = v98;
        if (v99)
          v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v99);
        else
          v100 = 0;
        v101 = (_QWORD *)(v99 + 8 * v96);
        *v101 = v91;
        v94 = v101 + 1;
        v103 = *(char **)(a1 + 248);
        v102 = *(char **)(a1 + 256);
        if (v102 != v103)
        {
          do
          {
            v104 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *--v101 = v104;
          }
          while (v102 != v103);
          v102 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v101;
        *(_QWORD *)(a1 + 256) = v94;
        *(_QWORD *)(a1 + 264) = v99 + 8 * v100;
        if (v102)
          operator delete(v102);
      }
      else
      {
        *v93 = v91;
        v94 = v93 + 1;
      }
      *(_QWORD *)(a1 + 256) = v94;
      v105 = *(unsigned int *)(a1 + 48);
      v106 = (void *)operator new[]();
      v107 = v106;
      if ((int)v105 >= 1)
        bzero(v106, 4 * v105);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v56) = v107;
      v109 = *(_QWORD **)(a1 + 256);
      v108 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v109 >= v108)
      {
        v111 = *(_QWORD *)(a1 + 248);
        v112 = ((uint64_t)v109 - v111) >> 3;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_181;
        v113 = v108 - v111;
        v114 = v113 >> 2;
        if (v113 >> 2 <= (unint64_t)(v112 + 1))
          v114 = v112 + 1;
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
          v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v115);
        else
          v116 = 0;
        v117 = (_QWORD *)(v115 + 8 * v112);
        *v117 = v107;
        v110 = v117 + 1;
        v119 = *(char **)(a1 + 248);
        v118 = *(char **)(a1 + 256);
        if (v118 != v119)
        {
          do
          {
            v120 = *((_QWORD *)v118 - 1);
            v118 -= 8;
            *--v117 = v120;
          }
          while (v118 != v119);
          v118 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v117;
        *(_QWORD *)(a1 + 256) = v110;
        *(_QWORD *)(a1 + 264) = v115 + 8 * v116;
        if (v118)
          operator delete(v118);
      }
      else
      {
        *v109 = v107;
        v110 = v109 + 1;
      }
      *(_QWORD *)(a1 + 256) = v110;
      v121 = *(unsigned int *)(a1 + 48);
      v122 = (void *)operator new[]();
      v123 = v122;
      if ((int)v121 >= 1)
        bzero(v122, 4 * v121);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v56) = v123;
      v125 = *(_QWORD **)(a1 + 256);
      v124 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v125 >= v124)
      {
        v127 = *(_QWORD *)(a1 + 248);
        v128 = ((uint64_t)v125 - v127) >> 3;
        if ((unint64_t)(v128 + 1) >> 61)
          goto LABEL_181;
        v129 = v124 - v127;
        v130 = v129 >> 2;
        if (v129 >> 2 <= (unint64_t)(v128 + 1))
          v130 = v128 + 1;
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
          v131 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v131 = v130;
        if (v131)
          v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v131);
        else
          v132 = 0;
        v133 = (_QWORD *)(v131 + 8 * v128);
        *v133 = v123;
        v126 = v133 + 1;
        v135 = *(char **)(a1 + 248);
        v134 = *(char **)(a1 + 256);
        if (v134 != v135)
        {
          do
          {
            v136 = *((_QWORD *)v134 - 1);
            v134 -= 8;
            *--v133 = v136;
          }
          while (v134 != v135);
          v134 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v133;
        *(_QWORD *)(a1 + 256) = v126;
        *(_QWORD *)(a1 + 264) = v131 + 8 * v132;
        if (v134)
          operator delete(v134);
      }
      else
      {
        *v125 = v123;
        v126 = v125 + 1;
      }
      *(_QWORD *)(a1 + 256) = v126;
      ++v56;
    }
    while (v56 < maxFeatureVectors);
  }
}

void sub_19157B7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<signed char>::~RecurrentLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = off_1E2D4D8E0;
  RecurrentLayer<signed char>::cleanupAllBuffers(a1);
  *(_QWORD *)(a1 + 296) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 304));
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(_QWORD *)(a1 + 256) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 184);
  if (v4)
  {
    *(_QWORD *)(a1 + 192) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 160);
  if (v5)
  {
    *(_QWORD *)(a1 + 168) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 136);
  if (v6)
  {
    *(_QWORD *)(a1 + 144) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 112);
  if (v7)
  {
    *(_QWORD *)(a1 + 120) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 88);
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    operator delete(v8);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

void LSTM<signed char>::init(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  BOOL v130;
  _BOOL4 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t *v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  unint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t *v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  unint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t *v291;
  unint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  unint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t *v308;
  unint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  unint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t *v324;
  unint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  unint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t *v340;
  unint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  unint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  uint64_t *v356;
  unint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  unint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  void *v372;
  _QWORD *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  unint64_t v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  void *v389;
  _QWORD *v390;
  unint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  unint64_t v400;
  char *v401;
  char *v402;
  uint64_t v403;
  int v404;
  void *v405;
  _QWORD *v406;
  unint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  unint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  unsigned int v420;
  int v421;
  void *v422;
  _QWORD *v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD *v432;
  unint64_t v433;
  char *v434;
  char *v435;
  uint64_t v436;
  int v437;
  void *v438;
  _QWORD *v439;
  unint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  unint64_t v449;
  char *v450;
  char *v451;
  uint64_t v452;
  int v453;
  void *v454;
  _QWORD *v455;
  unint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  unint64_t v465;
  char *v466;
  char *v467;
  uint64_t v468;
  int v469;
  void *v470;
  _QWORD *v471;
  unint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  _QWORD *v480;
  unint64_t v481;
  char *v482;
  char *v483;
  uint64_t v484;
  unsigned int v485;
  void *v486;
  _QWORD *v487;
  unint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  unint64_t v497;
  char *v498;
  char *v499;
  uint64_t v500;
  unsigned int v501;
  void *v502;
  _QWORD *v503;
  unint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  _QWORD *v512;
  unint64_t v513;
  char *v514;
  char *v515;
  uint64_t v516;
  unsigned int v517;
  void *v518;
  _QWORD *v519;
  unint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  _QWORD *v528;
  unint64_t v529;
  char *v530;
  char *v531;
  uint64_t v532;
  unsigned int v533;
  void *v534;
  _QWORD *v535;
  unint64_t v536;
  _QWORD *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  unint64_t v545;
  char *v546;
  char *v547;
  uint64_t v548;
  uint64_t v549;
  void *v550;
  void *v551;
  _QWORD *v552;
  unint64_t v553;
  _QWORD *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  _QWORD *v561;
  unint64_t v562;
  char *v563;
  char *v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  void *v568;
  _QWORD *v569;
  unint64_t v570;
  _QWORD *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  _QWORD *v578;
  unint64_t v579;
  char *v580;
  char *v581;
  uint64_t v582;
  uint64_t v583;
  void *v584;
  void *v585;
  _QWORD *v586;
  unint64_t v587;
  _QWORD *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  _QWORD *v595;
  unint64_t v596;
  char *v597;
  char *v598;
  uint64_t v599;
  uint64_t i;
  uint64_t v601;
  void *v602;
  void *v603;
  _QWORD *v604;
  unint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  _QWORD *v613;
  char *v614;
  char *v615;
  uint64_t v616;
  int v617;
  void *v618;
  _QWORD *v619;
  unint64_t v620;
  _QWORD *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  _QWORD *v628;
  char *v629;
  char *v630;
  uint64_t v631;
  uint64_t j;
  uint64_t v633;
  void *v634;
  void *v635;
  _QWORD *v636;
  unint64_t v637;
  _QWORD *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  _QWORD *v645;
  char *v646;
  char *v647;
  uint64_t v648;
  uint64_t v649;
  void *v650;
  void *v651;
  _QWORD *v652;
  unint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  _QWORD *v661;
  char *v662;
  char *v663;
  uint64_t v664;
  uint64_t v665;
  void *v666;
  void *v667;
  _QWORD *v668;
  unint64_t v669;
  _QWORD *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  _QWORD *v677;
  char *v678;
  char *v679;
  uint64_t v680;
  uint64_t v681;
  void *v682;
  void *v683;
  _QWORD *v684;
  unint64_t v685;
  _QWORD *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  _QWORD *v693;
  char *v694;
  char *v695;
  uint64_t v696;
  uint64_t v697;
  void *v698;
  void *v699;
  _QWORD *v700;
  unint64_t v701;
  _QWORD *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  _QWORD *v709;
  char *v710;
  char *v711;
  uint64_t v712;
  uint64_t v713;
  void *v714;
  void *v715;
  _QWORD *v716;
  unint64_t v717;
  _QWORD *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  _QWORD *v725;
  char *v726;
  char *v727;
  uint64_t v728;
  uint64_t v729;
  void *v730;
  void *v731;
  _QWORD *v732;
  unint64_t v733;
  _QWORD *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  _QWORD *v741;
  char *v742;
  char *v743;
  uint64_t v744;
  uint64_t v745;
  void *v746;
  void *v747;
  _QWORD *v748;
  unint64_t v749;
  _QWORD *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  uint64_t v756;
  _QWORD *v757;
  char *v758;
  char *v759;
  uint64_t v760;
  int v761;
  void *v762;
  _QWORD *v763;
  unint64_t v764;
  _QWORD *v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  _QWORD *v772;
  char *v773;
  char *v774;
  uint64_t v775;
  int v776;
  void *v777;
  _QWORD *v778;
  unint64_t v779;
  _QWORD *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unint64_t v785;
  uint64_t v786;
  _QWORD *v787;
  char *v788;
  char *v789;
  uint64_t v790;
  int v791;
  void *v792;
  _QWORD *v793;
  unint64_t v794;
  _QWORD *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unint64_t v800;
  uint64_t v801;
  _QWORD *v802;
  char *v803;
  char *v804;
  uint64_t v805;
  int v806;
  void *v807;
  _QWORD *v808;
  unint64_t v809;
  _QWORD *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t v815;
  uint64_t v816;
  _QWORD *v817;
  char *v818;
  char *v819;
  uint64_t v820;
  int v821;
  void *v822;
  _QWORD *v823;
  unint64_t v824;
  _QWORD *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  _QWORD *v832;
  char *v833;
  char *v834;
  uint64_t v835;
  int v836;
  void *v837;
  _QWORD *v838;
  unint64_t v839;
  _QWORD *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  _QWORD *v847;
  char *v848;
  char *v849;
  uint64_t v850;
  int v851;
  void *v852;
  _QWORD *v853;
  unint64_t v854;
  _QWORD *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  _QWORD *v862;
  char *v863;
  char *v864;
  uint64_t v865;
  int v866;
  void *v867;
  _QWORD *v868;
  unint64_t v869;
  _QWORD *v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t v875;
  uint64_t v876;
  _QWORD *v877;
  char *v878;
  char *v879;
  uint64_t v880;
  uint64_t v881;
  std::vector<int>::size_type v882;
  uint64_t v883;
  void *v884;
  void *v885;
  _QWORD *v886;
  unint64_t v887;
  _QWORD *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  _QWORD *v895;
  char *v896;
  char *v897;
  uint64_t v898;
  uint64_t v899;
  void *v900;
  void *v901;
  _QWORD *v902;
  unint64_t v903;
  _QWORD *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  _QWORD *v911;
  char *v912;
  char *v913;
  uint64_t v914;
  int v915;
  void *v916;
  _QWORD *v917;
  unint64_t v918;
  _QWORD *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  unint64_t v924;
  uint64_t v925;
  _QWORD *v926;
  char *v927;
  char *v928;
  uint64_t v929;
  int v930;
  void *v931;
  _QWORD *v932;
  unint64_t v933;
  _QWORD *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t v939;
  uint64_t v940;
  _QWORD *v941;
  char *v942;
  char *v943;
  uint64_t v944;
  uint64_t v945;
  void *v946;
  void *v947;
  _QWORD *v948;
  unint64_t v949;
  _QWORD *v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  unint64_t v955;
  uint64_t v956;
  _QWORD *v957;
  char *v958;
  char *v959;
  uint64_t v960;
  uint64_t v961;
  void *v962;
  void *v963;
  _QWORD *v964;
  unint64_t v965;
  _QWORD *v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t v972;
  _QWORD *v973;
  char *v974;
  char *v975;
  uint64_t v976;
  uint64_t v977;
  void *v978;
  void *v979;
  _QWORD *v980;
  unint64_t v981;
  _QWORD *v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  unint64_t v987;
  uint64_t v988;
  _QWORD *v989;
  char *v990;
  char *v991;
  uint64_t v992;
  uint64_t v993;
  void *v994;
  void *v995;
  _QWORD *v996;
  unint64_t v997;
  _QWORD *v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  _QWORD *v1005;
  char *v1006;
  char *v1007;
  uint64_t v1008;
  uint64_t v1009;
  void *v1010;
  void *v1011;
  _QWORD *v1012;
  unint64_t v1013;
  _QWORD *v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  uint64_t v1020;
  _QWORD *v1021;
  char *v1022;
  char *v1023;
  uint64_t v1024;
  uint64_t v1025;
  void *v1026;
  void *v1027;
  _QWORD *v1028;
  unint64_t v1029;
  _QWORD *v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  _QWORD *v1037;
  char *v1038;
  char *v1039;
  uint64_t v1040;
  uint64_t v1041;
  void *v1042;
  void *v1043;
  _QWORD *v1044;
  unint64_t v1045;
  _QWORD *v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  _QWORD *v1053;
  char *v1054;
  char *v1055;
  uint64_t v1056;
  __int128 v1057[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1640) = v4;
  v5 = *(_QWORD **)(a1 + 2632);
  v6 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(a1 + 2624);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_1172;
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = v4;
    v7 = v14 + 1;
    v16 = *(char **)(a1 + 2632);
    v17 = *(char **)(a1 + 2624);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v14;
    *(_QWORD *)(a1 + 2632) = v7;
    *(_QWORD *)(a1 + 2640) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = v4;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v7;
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  v21 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  *(_QWORD *)(a1 + 1648) = v21;
  v22 = *(_QWORD **)(a1 + 2632);
  v23 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v22 >= v23)
  {
    v25 = *(_QWORD *)(a1 + 2624);
    v26 = ((uint64_t)v22 - v25) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      goto LABEL_1172;
    v27 = v23 - v25;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    else
      v30 = 0;
    v31 = (_QWORD *)(v29 + 8 * v26);
    v32 = v29 + 8 * v30;
    *v31 = v21;
    v24 = v31 + 1;
    v33 = *(char **)(a1 + 2632);
    v34 = *(char **)(a1 + 2624);
    if (v33 != v34)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
      v33 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v31;
    *(_QWORD *)(a1 + 2632) = v24;
    *(_QWORD *)(a1 + 2640) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v22 = v21;
    v24 = v22 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v24;
  v36 = *(unsigned int *)(a1 + 52);
  v37 = (void *)operator new[]();
  v38 = v37;
  if ((int)v36 >= 1)
    bzero(v37, 4 * v36);
  *(_QWORD *)(a1 + 1656) = v38;
  v39 = *(_QWORD **)(a1 + 2632);
  v40 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v39 >= v40)
  {
    v42 = *(_QWORD *)(a1 + 2624);
    v43 = ((uint64_t)v39 - v42) >> 3;
    if ((unint64_t)(v43 + 1) >> 61)
      goto LABEL_1172;
    v44 = v40 - v42;
    v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1))
      v45 = v43 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v46);
    else
      v47 = 0;
    v48 = (_QWORD *)(v46 + 8 * v43);
    v49 = v46 + 8 * v47;
    *v48 = v38;
    v41 = v48 + 1;
    v50 = *(char **)(a1 + 2632);
    v51 = *(char **)(a1 + 2624);
    if (v50 != v51)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v52;
      }
      while (v50 != v51);
      v50 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v48;
    *(_QWORD *)(a1 + 2632) = v41;
    *(_QWORD *)(a1 + 2640) = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v39 = v38;
    v41 = v39 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v41;
  v53 = *(unsigned int *)(a1 + 52);
  v54 = (void *)operator new[]();
  v55 = v54;
  if ((int)v53 >= 1)
    bzero(v54, 4 * v53);
  *(_QWORD *)(a1 + 1664) = v55;
  v56 = *(_QWORD **)(a1 + 2632);
  v57 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v56 >= v57)
  {
    v59 = *(_QWORD *)(a1 + 2624);
    v60 = ((uint64_t)v56 - v59) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_1172;
    v61 = v57 - v59;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
      v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
    else
      v64 = 0;
    v65 = (_QWORD *)(v63 + 8 * v60);
    v66 = v63 + 8 * v64;
    *v65 = v55;
    v58 = v65 + 1;
    v67 = *(char **)(a1 + 2632);
    v68 = *(char **)(a1 + 2624);
    if (v67 != v68)
    {
      do
      {
        v69 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *--v65 = v69;
      }
      while (v67 != v68);
      v67 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v65;
    *(_QWORD *)(a1 + 2632) = v58;
    *(_QWORD *)(a1 + 2640) = v66;
    if (v67)
      operator delete(v67);
  }
  else
  {
    *v56 = v55;
    v58 = v56 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v58;
  v70 = *(unsigned int *)(a1 + 52);
  v71 = (void *)operator new[]();
  v72 = v71;
  if ((int)v70 >= 1)
    bzero(v71, 4 * v70);
  *(_QWORD *)(a1 + 1672) = v72;
  v73 = *(_QWORD **)(a1 + 2632);
  v74 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v73 >= v74)
  {
    v76 = *(_QWORD *)(a1 + 2624);
    v77 = ((uint64_t)v73 - v76) >> 3;
    if ((unint64_t)(v77 + 1) >> 61)
      goto LABEL_1172;
    v78 = v74 - v76;
    v79 = v78 >> 2;
    if (v78 >> 2 <= (unint64_t)(v77 + 1))
      v79 = v77 + 1;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v80 = v79;
    if (v80)
      v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v80);
    else
      v81 = 0;
    v82 = (_QWORD *)(v80 + 8 * v77);
    v83 = v80 + 8 * v81;
    *v82 = v72;
    v75 = v82 + 1;
    v84 = *(char **)(a1 + 2632);
    v85 = *(char **)(a1 + 2624);
    if (v84 != v85)
    {
      do
      {
        v86 = *((_QWORD *)v84 - 1);
        v84 -= 8;
        *--v82 = v86;
      }
      while (v84 != v85);
      v84 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v82;
    *(_QWORD *)(a1 + 2632) = v75;
    *(_QWORD *)(a1 + 2640) = v83;
    if (v84)
      operator delete(v84);
  }
  else
  {
    *v73 = v72;
    v75 = v73 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v75;
  v87 = *(unsigned int *)(a1 + 52);
  v88 = (void *)operator new[]();
  v89 = v88;
  if ((int)v87 >= 1)
    bzero(v88, 4 * v87);
  *(_QWORD *)(a1 + 1680) = v89;
  v90 = *(_QWORD **)(a1 + 2632);
  v91 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v90 >= v91)
  {
    v93 = *(_QWORD *)(a1 + 2624);
    v94 = ((uint64_t)v90 - v93) >> 3;
    if ((unint64_t)(v94 + 1) >> 61)
      goto LABEL_1172;
    v95 = v91 - v93;
    v96 = v95 >> 2;
    if (v95 >> 2 <= (unint64_t)(v94 + 1))
      v96 = v94 + 1;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
      v97 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v97 = v96;
    if (v97)
      v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v97);
    else
      v98 = 0;
    v99 = (_QWORD *)(v97 + 8 * v94);
    v100 = v97 + 8 * v98;
    *v99 = v89;
    v92 = v99 + 1;
    v101 = *(char **)(a1 + 2632);
    v102 = *(char **)(a1 + 2624);
    if (v101 != v102)
    {
      do
      {
        v103 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *--v99 = v103;
      }
      while (v101 != v102);
      v101 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v99;
    *(_QWORD *)(a1 + 2632) = v92;
    *(_QWORD *)(a1 + 2640) = v100;
    if (v101)
      operator delete(v101);
  }
  else
  {
    *v90 = v89;
    v92 = v90 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v92;
  v104 = *(unsigned int *)(a1 + 52);
  v105 = (void *)operator new[]();
  v106 = v105;
  if ((int)v104 >= 1)
    bzero(v105, 4 * v104);
  *(_QWORD *)(a1 + 1688) = v106;
  v107 = *(_QWORD **)(a1 + 2632);
  v108 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v107 >= v108)
  {
    v110 = *(_QWORD *)(a1 + 2624);
    v111 = ((uint64_t)v107 - v110) >> 3;
    if ((unint64_t)(v111 + 1) >> 61)
      goto LABEL_1172;
    v112 = v108 - v110;
    v113 = v112 >> 2;
    if (v112 >> 2 <= (unint64_t)(v111 + 1))
      v113 = v111 + 1;
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
      v114 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v114 = v113;
    if (v114)
      v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114);
    else
      v115 = 0;
    v116 = (_QWORD *)(v114 + 8 * v111);
    v117 = v114 + 8 * v115;
    *v116 = v106;
    v109 = v116 + 1;
    v118 = *(char **)(a1 + 2632);
    v119 = *(char **)(a1 + 2624);
    if (v118 != v119)
    {
      do
      {
        v120 = *((_QWORD *)v118 - 1);
        v118 -= 8;
        *--v116 = v120;
      }
      while (v118 != v119);
      v118 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v116;
    *(_QWORD *)(a1 + 2632) = v109;
    *(_QWORD *)(a1 + 2640) = v117;
    if (v118)
      operator delete(v118);
  }
  else
  {
    *v107 = v106;
    v109 = v107 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v109;
  v121 = *(_QWORD *)(a1 + 2680);
  if (v121)
  {
    v122 = *(_DWORD *)(v121 + 40) / 2;
    v123 = 4 * *(unsigned __int8 *)(v121 + 244);
    if (*(_BYTE *)(v121 + 520))
      v124 = 3;
    else
      v124 = 0;
  }
  else
  {
    v123 = 0;
    v124 = 0;
    v122 = 8;
  }
  v125 = *(unsigned __int8 *)(a1 + 42);
  if (*(_BYTE *)(a1 + 42))
  {
    if (*(_BYTE *)(a1 + 2672))
      v126 = v122;
    else
      v126 = 0;
    if (*(_BYTE *)(a1 + 2672))
      v127 = v123;
    else
      v127 = 0;
    if (*(_BYTE *)(a1 + 2672))
      v128 = v124;
    else
      v128 = 0;
  }
  else
  {
    v127 = 0;
    v126 = 0;
    v128 = 0;
  }
  if (*(int *)(a1 + 56) < 1)
  {
    v129 = 0;
  }
  else
  {
    v129 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v125 = *(unsigned __int8 *)(a1 + 42);
  }
  v130 = v125 == 0;
  v131 = v125 != 0;
  if (v130)
    v132 = maxFeatureVectors;
  else
    v132 = 2;
  if ((v131 & v129) != 0)
    v133 = 2;
  else
    v133 = maxFeatureVectors;
  if (!*(_DWORD *)(a1 + 2496))
  {
    v134 = *(_QWORD *)(a1 + 2680);
    if (v134 && *(int *)(v134 + 40) >= 1)
    {
      v135 = (_QWORD *)(v134 + 8 * v126);
      *(_QWORD *)(a1 + 232) = v135[14];
      *(_QWORD *)(a1 + 240) = v135[15];
      *(_QWORD *)(a1 + 256) = v135[16];
      *(_QWORD *)(a1 + 248) = v135[17];
      *(_QWORD *)(a1 + 264) = v135[18];
      *(_QWORD *)(a1 + 272) = v135[19];
      *(_QWORD *)(a1 + 288) = v135[20];
      *(_QWORD *)(a1 + 280) = v135[21];
    }
    else if (!*(_BYTE *)(a1 + 1697))
    {
      MMatrix<signed char>::MMatrix(v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v136 = *(_QWORD *)&v1057[0];
      *(_QWORD *)(a1 + 232) = *(_QWORD *)&v1057[0];
      v137 = *(_QWORD **)(a1 + 2656);
      v138 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v137 >= v138)
      {
        v140 = *(_QWORD *)(a1 + 2648);
        v141 = ((uint64_t)v137 - v140) >> 3;
        if ((unint64_t)(v141 + 1) >> 61)
          goto LABEL_1173;
        v142 = v138 - v140;
        v143 = v142 >> 2;
        if (v142 >> 2 <= (unint64_t)(v141 + 1))
          v143 = v141 + 1;
        if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
          v144 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v144 = v143;
        if (v144)
          v144 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v144);
        else
          v145 = 0;
        v146 = (_QWORD *)(v144 + 8 * v141);
        v147 = v144 + 8 * v145;
        *v146 = v136;
        v139 = v146 + 1;
        v148 = *(char **)(a1 + 2656);
        v149 = *(char **)(a1 + 2648);
        if (v148 != v149)
        {
          do
          {
            v150 = *((_QWORD *)v148 - 1);
            v148 -= 8;
            *--v146 = v150;
          }
          while (v148 != v149);
          v148 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v146;
        *(_QWORD *)(a1 + 2656) = v139;
        *(_QWORD *)(a1 + 2664) = v147;
        if (v148)
          operator delete(v148);
      }
      else
      {
        *v137 = v136;
        v139 = v137 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v139;
      MMatrix<signed char>::MMatrix(v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v151 = *(_QWORD *)&v1057[0];
      *(_QWORD *)(a1 + 240) = *(_QWORD *)&v1057[0];
      v152 = *(_QWORD **)(a1 + 2656);
      v153 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v152 >= v153)
      {
        v155 = *(_QWORD *)(a1 + 2648);
        v156 = ((uint64_t)v152 - v155) >> 3;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_1173;
        v157 = v153 - v155;
        v158 = v157 >> 2;
        if (v157 >> 2 <= (unint64_t)(v156 + 1))
          v158 = v156 + 1;
        if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
          v159 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v159);
        else
          v160 = 0;
        v161 = (_QWORD *)(v159 + 8 * v156);
        v162 = v159 + 8 * v160;
        *v161 = v151;
        v154 = v161 + 1;
        v163 = *(char **)(a1 + 2656);
        v164 = *(char **)(a1 + 2648);
        if (v163 != v164)
        {
          do
          {
            v165 = *((_QWORD *)v163 - 1);
            v163 -= 8;
            *--v161 = v165;
          }
          while (v163 != v164);
          v163 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v161;
        *(_QWORD *)(a1 + 2656) = v154;
        *(_QWORD *)(a1 + 2664) = v162;
        if (v163)
          operator delete(v163);
      }
      else
      {
        *v152 = v151;
        v154 = v152 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v154;
      MMatrix<signed char>::MMatrix(v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v166 = *(_QWORD *)&v1057[0];
      *(_QWORD *)(a1 + 248) = *(_QWORD *)&v1057[0];
      v167 = *(_QWORD **)(a1 + 2656);
      v168 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v167 >= v168)
      {
        v170 = *(_QWORD *)(a1 + 2648);
        v171 = ((uint64_t)v167 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_1173;
        v172 = v168 - v170;
        v173 = v172 >> 2;
        if (v172 >> 2 <= (unint64_t)(v171 + 1))
          v173 = v171 + 1;
        if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
          v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
        else
          v175 = 0;
        v176 = (_QWORD *)(v174 + 8 * v171);
        v177 = v174 + 8 * v175;
        *v176 = v166;
        v169 = v176 + 1;
        v178 = *(char **)(a1 + 2656);
        v179 = *(char **)(a1 + 2648);
        if (v178 != v179)
        {
          do
          {
            v180 = *((_QWORD *)v178 - 1);
            v178 -= 8;
            *--v176 = v180;
          }
          while (v178 != v179);
          v178 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v176;
        *(_QWORD *)(a1 + 2656) = v169;
        *(_QWORD *)(a1 + 2664) = v177;
        if (v178)
          operator delete(v178);
      }
      else
      {
        *v167 = v166;
        v169 = v167 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v169;
      MMatrix<signed char>::MMatrix(v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v181 = *(_QWORD *)&v1057[0];
      *(_QWORD *)(a1 + 256) = *(_QWORD *)&v1057[0];
      v182 = *(_QWORD **)(a1 + 2656);
      v183 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v182 >= v183)
      {
        v185 = *(_QWORD *)(a1 + 2648);
        v186 = ((uint64_t)v182 - v185) >> 3;
        if ((unint64_t)(v186 + 1) >> 61)
          goto LABEL_1173;
        v187 = v183 - v185;
        v188 = v187 >> 2;
        if (v187 >> 2 <= (unint64_t)(v186 + 1))
          v188 = v186 + 1;
        if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8)
          v189 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v189 = v188;
        if (v189)
          v189 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v189);
        else
          v190 = 0;
        v191 = (_QWORD *)(v189 + 8 * v186);
        v192 = v189 + 8 * v190;
        *v191 = v181;
        v184 = v191 + 1;
        v193 = *(char **)(a1 + 2656);
        v194 = *(char **)(a1 + 2648);
        if (v193 != v194)
        {
          do
          {
            v195 = *((_QWORD *)v193 - 1);
            v193 -= 8;
            *--v191 = v195;
          }
          while (v193 != v194);
          v193 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v191;
        *(_QWORD *)(a1 + 2656) = v184;
        *(_QWORD *)(a1 + 2664) = v192;
        if (v193)
          operator delete(v193);
      }
      else
      {
        *v182 = v181;
        v184 = v182 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v184;
      MMatrix<signed char>::MMatrix(v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v196 = *(_QWORD *)&v1057[0];
      *(_QWORD *)(a1 + 264) = *(_QWORD *)&v1057[0];
      v197 = *(_QWORD **)(a1 + 2656);
      v198 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v197 >= v198)
      {
        v200 = *(_QWORD *)(a1 + 2648);
        v201 = ((uint64_t)v197 - v200) >> 3;
        if ((unint64_t)(v201 + 1) >> 61)
          goto LABEL_1173;
        v202 = v198 - v200;
        v203 = v202 >> 2;
        if (v202 >> 2 <= (unint64_t)(v201 + 1))
          v203 = v201 + 1;
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
          v204 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v204 = v203;
        if (v204)
          v204 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v204);
        else
          v205 = 0;
        v206 = (_QWORD *)(v204 + 8 * v201);
        v207 = v204 + 8 * v205;
        *v206 = v196;
        v199 = v206 + 1;
        v208 = *(char **)(a1 + 2656);
        v209 = *(char **)(a1 + 2648);
        if (v208 != v209)
        {
          do
          {
            v210 = *((_QWORD *)v208 - 1);
            v208 -= 8;
            *--v206 = v210;
          }
          while (v208 != v209);
          v208 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v206;
        *(_QWORD *)(a1 + 2656) = v199;
        *(_QWORD *)(a1 + 2664) = v207;
        if (v208)
          operator delete(v208);
      }
      else
      {
        *v197 = v196;
        v199 = v197 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v199;
      MMatrix<signed char>::MMatrix(v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v211 = *(_QWORD *)&v1057[0];
      *(_QWORD *)(a1 + 272) = *(_QWORD *)&v1057[0];
      v212 = *(_QWORD **)(a1 + 2656);
      v213 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v212 >= v213)
      {
        v215 = *(_QWORD *)(a1 + 2648);
        v216 = ((uint64_t)v212 - v215) >> 3;
        if ((unint64_t)(v216 + 1) >> 61)
          goto LABEL_1173;
        v217 = v213 - v215;
        v218 = v217 >> 2;
        if (v217 >> 2 <= (unint64_t)(v216 + 1))
          v218 = v216 + 1;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          v219 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v219 = v218;
        if (v219)
          v219 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v219);
        else
          v220 = 0;
        v221 = (_QWORD *)(v219 + 8 * v216);
        v222 = v219 + 8 * v220;
        *v221 = v211;
        v214 = v221 + 1;
        v223 = *(char **)(a1 + 2656);
        v224 = *(char **)(a1 + 2648);
        if (v223 != v224)
        {
          do
          {
            v225 = *((_QWORD *)v223 - 1);
            v223 -= 8;
            *--v221 = v225;
          }
          while (v223 != v224);
          v223 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v221;
        *(_QWORD *)(a1 + 2656) = v214;
        *(_QWORD *)(a1 + 2664) = v222;
        if (v223)
          operator delete(v223);
      }
      else
      {
        *v212 = v211;
        v214 = v212 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v214;
      MMatrix<signed char>::MMatrix(v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v226 = *(_QWORD *)&v1057[0];
      *(_QWORD *)(a1 + 280) = *(_QWORD *)&v1057[0];
      v227 = *(_QWORD **)(a1 + 2656);
      v228 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v227 >= v228)
      {
        v230 = *(_QWORD *)(a1 + 2648);
        v231 = ((uint64_t)v227 - v230) >> 3;
        if ((unint64_t)(v231 + 1) >> 61)
          goto LABEL_1173;
        v232 = v228 - v230;
        v233 = v232 >> 2;
        if (v232 >> 2 <= (unint64_t)(v231 + 1))
          v233 = v231 + 1;
        if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
          v234 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v234 = v233;
        if (v234)
          v234 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v234);
        else
          v235 = 0;
        v236 = (_QWORD *)(v234 + 8 * v231);
        v237 = v234 + 8 * v235;
        *v236 = v226;
        v229 = v236 + 1;
        v238 = *(char **)(a1 + 2656);
        v239 = *(char **)(a1 + 2648);
        if (v238 != v239)
        {
          do
          {
            v240 = *((_QWORD *)v238 - 1);
            v238 -= 8;
            *--v236 = v240;
          }
          while (v238 != v239);
          v238 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v236;
        *(_QWORD *)(a1 + 2656) = v229;
        *(_QWORD *)(a1 + 2664) = v237;
        if (v238)
          operator delete(v238);
      }
      else
      {
        *v227 = v226;
        v229 = v227 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v229;
      MMatrix<signed char>::MMatrix(v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v241 = *(_QWORD *)&v1057[0];
      *(_QWORD *)(a1 + 288) = *(_QWORD *)&v1057[0];
      v242 = *(_QWORD **)(a1 + 2656);
      v243 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v242 >= v243)
      {
        v245 = *(_QWORD *)(a1 + 2648);
        v246 = ((uint64_t)v242 - v245) >> 3;
        if ((unint64_t)(v246 + 1) >> 61)
          goto LABEL_1173;
        v247 = v243 - v245;
        v248 = v247 >> 2;
        if (v247 >> 2 <= (unint64_t)(v246 + 1))
          v248 = v246 + 1;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
          v249 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v249 = v248;
        if (v249)
          v249 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v249);
        else
          v250 = 0;
        v251 = (_QWORD *)(v249 + 8 * v246);
        v252 = v249 + 8 * v250;
        *v251 = v241;
        v244 = v251 + 1;
        v253 = *(char **)(a1 + 2656);
        v254 = *(char **)(a1 + 2648);
        if (v253 != v254)
        {
          do
          {
            v255 = *((_QWORD *)v253 - 1);
            v253 -= 8;
            *--v251 = v255;
          }
          while (v253 != v254);
          v253 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v251;
        *(_QWORD *)(a1 + 2656) = v244;
        *(_QWORD *)(a1 + 2664) = v252;
        if (v253)
          operator delete(v253);
      }
      else
      {
        *v242 = v241;
        v244 = v242 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v244;
    }
    if (!*(_BYTE *)(a1 + 1697))
    {
      v256 = *(_QWORD *)(a1 + 2680);
      if (v256 && *(_BYTE *)(v256 + 520))
      {
        *(_QWORD *)(a1 + 296) = *(_QWORD *)(v256 + 528 + 8 * v128);
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(v256 + 528 + 8 * (v128 + 1));
        *(_QWORD *)(a1 + 312) = *(_QWORD *)(v256 + 528 + 8 * (v128 + 2));
        goto LABEL_339;
      }
      v257 = *(_DWORD *)(a1 + 52);
      v258 = operator new[]();
      *(_QWORD *)&v1057[0] = v258;
      VVector<signed char>::randomize(v1057, v257);
      *(_QWORD *)(a1 + 296) = v258;
      v259 = *(uint64_t **)(a1 + 2656);
      v260 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v259 >= v260)
      {
        v262 = *(_QWORD *)(a1 + 2648);
        v263 = ((uint64_t)v259 - v262) >> 3;
        if ((unint64_t)(v263 + 1) >> 61)
          goto LABEL_1173;
        v264 = v260 - v262;
        v265 = v264 >> 2;
        if (v264 >> 2 <= (unint64_t)(v263 + 1))
          v265 = v263 + 1;
        if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFF8)
          v266 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v266 = v265;
        if (v266)
          v266 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v266);
        else
          v267 = 0;
        v268 = (uint64_t *)(v266 + 8 * v263);
        v269 = v266 + 8 * v267;
        *v268 = v258;
        v261 = v268 + 1;
        v270 = *(char **)(a1 + 2656);
        v271 = *(char **)(a1 + 2648);
        if (v270 != v271)
        {
          do
          {
            v272 = *((_QWORD *)v270 - 1);
            v270 -= 8;
            *--v268 = v272;
          }
          while (v270 != v271);
          v270 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v268;
        *(_QWORD *)(a1 + 2656) = v261;
        *(_QWORD *)(a1 + 2664) = v269;
        if (v270)
          operator delete(v270);
      }
      else
      {
        *v259 = v258;
        v261 = v259 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v261;
      v273 = *(_DWORD *)(a1 + 52);
      v274 = operator new[]();
      *(_QWORD *)&v1057[0] = v274;
      VVector<signed char>::randomize(v1057, v273);
      *(_QWORD *)(a1 + 304) = v274;
      v275 = *(uint64_t **)(a1 + 2656);
      v276 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v275 >= v276)
      {
        v278 = *(_QWORD *)(a1 + 2648);
        v279 = ((uint64_t)v275 - v278) >> 3;
        if ((unint64_t)(v279 + 1) >> 61)
          goto LABEL_1173;
        v280 = v276 - v278;
        v281 = v280 >> 2;
        if (v280 >> 2 <= (unint64_t)(v279 + 1))
          v281 = v279 + 1;
        if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFF8)
          v282 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v282 = v281;
        if (v282)
          v282 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v282);
        else
          v283 = 0;
        v284 = (uint64_t *)(v282 + 8 * v279);
        v285 = v282 + 8 * v283;
        *v284 = v274;
        v277 = v284 + 1;
        v286 = *(char **)(a1 + 2656);
        v287 = *(char **)(a1 + 2648);
        if (v286 != v287)
        {
          do
          {
            v288 = *((_QWORD *)v286 - 1);
            v286 -= 8;
            *--v284 = v288;
          }
          while (v286 != v287);
          v286 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v284;
        *(_QWORD *)(a1 + 2656) = v277;
        *(_QWORD *)(a1 + 2664) = v285;
        if (v286)
          operator delete(v286);
      }
      else
      {
        *v275 = v274;
        v277 = v275 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v277;
      v289 = *(_DWORD *)(a1 + 52);
      v290 = operator new[]();
      *(_QWORD *)&v1057[0] = v290;
      VVector<signed char>::randomize(v1057, v289);
      *(_QWORD *)(a1 + 312) = v290;
      v291 = *(uint64_t **)(a1 + 2656);
      v292 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v291 >= v292)
      {
        v294 = *(_QWORD *)(a1 + 2648);
        v295 = ((uint64_t)v291 - v294) >> 3;
        if ((unint64_t)(v295 + 1) >> 61)
          goto LABEL_1173;
        v296 = v292 - v294;
        v297 = v296 >> 2;
        if (v296 >> 2 <= (unint64_t)(v295 + 1))
          v297 = v295 + 1;
        if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8)
          v298 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v298 = v297;
        if (v298)
          v298 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v298);
        else
          v299 = 0;
        v300 = (uint64_t *)(v298 + 8 * v295);
        v301 = v298 + 8 * v299;
        *v300 = v290;
        v293 = v300 + 1;
        v302 = *(char **)(a1 + 2656);
        v303 = *(char **)(a1 + 2648);
        if (v302 != v303)
        {
          do
          {
            v304 = *((_QWORD *)v302 - 1);
            v302 -= 8;
            *--v300 = v304;
          }
          while (v302 != v303);
          v302 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v300;
        *(_QWORD *)(a1 + 2656) = v293;
        *(_QWORD *)(a1 + 2664) = v301;
        if (v302)
          operator delete(v302);
      }
      else
      {
        *v291 = v290;
        v293 = v291 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v293;
      v256 = *(_QWORD *)(a1 + 2680);
      if (v256)
      {
LABEL_339:
        if (*(_BYTE *)(v256 + 244))
        {
          v305 = v256 + 248;
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(v305 + 8 * v127);
          *(_QWORD *)(a1 + 328) = *(_QWORD *)(v305 + 8 * (v127 + 1));
          *(_QWORD *)(a1 + 336) = *(_QWORD *)(v305 + 8 * (v127 + 2));
          *(_QWORD *)(a1 + 344) = *(_QWORD *)(v305 + 8 * (v127 + 3));
          goto LABEL_406;
        }
        v306 = *(_DWORD *)(a1 + 52);
        v307 = operator new[]();
        *(_QWORD *)&v1057[0] = v307;
        VVector<signed char>::randomize(v1057, v306);
        *(_QWORD *)(a1 + 320) = v307;
        v308 = *(uint64_t **)(a1 + 2656);
        v309 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v308 >= v309)
        {
          v311 = *(_QWORD *)(a1 + 2648);
          v312 = ((uint64_t)v308 - v311) >> 3;
          if ((unint64_t)(v312 + 1) >> 61)
            goto LABEL_1173;
          v313 = v309 - v311;
          v314 = v313 >> 2;
          if (v313 >> 2 <= (unint64_t)(v312 + 1))
            v314 = v312 + 1;
          if ((unint64_t)v313 >= 0x7FFFFFFFFFFFFFF8)
            v315 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v315 = v314;
          if (v315)
            v315 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v315);
          else
            v316 = 0;
          v317 = (uint64_t *)(v315 + 8 * v312);
          v318 = v315 + 8 * v316;
          *v317 = v307;
          v310 = v317 + 1;
          v319 = *(char **)(a1 + 2656);
          v320 = *(char **)(a1 + 2648);
          if (v319 != v320)
          {
            do
            {
              v321 = *((_QWORD *)v319 - 1);
              v319 -= 8;
              *--v317 = v321;
            }
            while (v319 != v320);
            v319 = *(char **)(a1 + 2648);
          }
          *(_QWORD *)(a1 + 2648) = v317;
          *(_QWORD *)(a1 + 2656) = v310;
          *(_QWORD *)(a1 + 2664) = v318;
          if (v319)
            operator delete(v319);
        }
        else
        {
          *v308 = v307;
          v310 = v308 + 1;
        }
        *(_QWORD *)(a1 + 2656) = v310;
        v322 = *(_DWORD *)(a1 + 52);
        v323 = operator new[]();
        *(_QWORD *)&v1057[0] = v323;
        VVector<signed char>::randomize(v1057, v322);
        *(_QWORD *)(a1 + 328) = v323;
        v324 = *(uint64_t **)(a1 + 2656);
        v325 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v324 >= v325)
        {
          v327 = *(_QWORD *)(a1 + 2648);
          v328 = ((uint64_t)v324 - v327) >> 3;
          if ((unint64_t)(v328 + 1) >> 61)
            goto LABEL_1173;
          v329 = v325 - v327;
          v330 = v329 >> 2;
          if (v329 >> 2 <= (unint64_t)(v328 + 1))
            v330 = v328 + 1;
          if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8)
            v331 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v331 = v330;
          if (v331)
            v331 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v331);
          else
            v332 = 0;
          v333 = (uint64_t *)(v331 + 8 * v328);
          v334 = v331 + 8 * v332;
          *v333 = v323;
          v326 = v333 + 1;
          v335 = *(char **)(a1 + 2656);
          v336 = *(char **)(a1 + 2648);
          if (v335 != v336)
          {
            do
            {
              v337 = *((_QWORD *)v335 - 1);
              v335 -= 8;
              *--v333 = v337;
            }
            while (v335 != v336);
            v335 = *(char **)(a1 + 2648);
          }
          *(_QWORD *)(a1 + 2648) = v333;
          *(_QWORD *)(a1 + 2656) = v326;
          *(_QWORD *)(a1 + 2664) = v334;
          if (v335)
            operator delete(v335);
        }
        else
        {
          *v324 = v323;
          v326 = v324 + 1;
        }
        *(_QWORD *)(a1 + 2656) = v326;
        v338 = *(_DWORD *)(a1 + 52);
        v339 = operator new[]();
        *(_QWORD *)&v1057[0] = v339;
        VVector<signed char>::randomize(v1057, v338);
        *(_QWORD *)(a1 + 336) = v339;
        v340 = *(uint64_t **)(a1 + 2656);
        v341 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v340 >= v341)
        {
          v343 = *(_QWORD *)(a1 + 2648);
          v344 = ((uint64_t)v340 - v343) >> 3;
          if ((unint64_t)(v344 + 1) >> 61)
            goto LABEL_1173;
          v345 = v341 - v343;
          v346 = v345 >> 2;
          if (v345 >> 2 <= (unint64_t)(v344 + 1))
            v346 = v344 + 1;
          if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8)
            v347 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v347 = v346;
          if (v347)
            v347 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v347);
          else
            v348 = 0;
          v349 = (uint64_t *)(v347 + 8 * v344);
          v350 = v347 + 8 * v348;
          *v349 = v339;
          v342 = v349 + 1;
          v351 = *(char **)(a1 + 2656);
          v352 = *(char **)(a1 + 2648);
          if (v351 != v352)
          {
            do
            {
              v353 = *((_QWORD *)v351 - 1);
              v351 -= 8;
              *--v349 = v353;
            }
            while (v351 != v352);
            v351 = *(char **)(a1 + 2648);
          }
          *(_QWORD *)(a1 + 2648) = v349;
          *(_QWORD *)(a1 + 2656) = v342;
          *(_QWORD *)(a1 + 2664) = v350;
          if (v351)
            operator delete(v351);
        }
        else
        {
          *v340 = v339;
          v342 = v340 + 1;
        }
        *(_QWORD *)(a1 + 2656) = v342;
        v354 = *(_DWORD *)(a1 + 52);
        v355 = operator new[]();
        *(_QWORD *)&v1057[0] = v355;
        VVector<signed char>::randomize(v1057, v354);
        *(_QWORD *)(a1 + 344) = v355;
        v356 = *(uint64_t **)(a1 + 2656);
        v357 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v356 < v357)
        {
          *v356 = v355;
          v358 = v356 + 1;
LABEL_405:
          *(_QWORD *)(a1 + 2656) = v358;
          goto LABEL_406;
        }
        v359 = *(_QWORD *)(a1 + 2648);
        v360 = ((uint64_t)v356 - v359) >> 3;
        if (!((unint64_t)(v360 + 1) >> 61))
        {
          v361 = v357 - v359;
          v362 = v361 >> 2;
          if (v361 >> 2 <= (unint64_t)(v360 + 1))
            v362 = v360 + 1;
          if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFF8)
            v363 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v363 = v362;
          if (v363)
            v363 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v363);
          else
            v364 = 0;
          v365 = (uint64_t *)(v363 + 8 * v360);
          v366 = v363 + 8 * v364;
          *v365 = v355;
          v358 = v365 + 1;
          v367 = *(char **)(a1 + 2656);
          v368 = *(char **)(a1 + 2648);
          if (v367 != v368)
          {
            do
            {
              v369 = *((_QWORD *)v367 - 1);
              v367 -= 8;
              *--v365 = v369;
            }
            while (v367 != v368);
            v367 = *(char **)(a1 + 2648);
          }
          *(_QWORD *)(a1 + 2648) = v365;
          *(_QWORD *)(a1 + 2656) = v358;
          *(_QWORD *)(a1 + 2664) = v366;
          if (v367)
            operator delete(v367);
          goto LABEL_405;
        }
LABEL_1173:
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
    }
LABEL_406:
    *(_QWORD *)(a1 + 2504) = a1 + 232;
    *(_QWORD *)(a1 + 2512) = a1 + 240;
    *(_QWORD *)(a1 + 2520) = a1 + 248;
    *(_QWORD *)(a1 + 2528) = a1 + 256;
    *(_QWORD *)(a1 + 2536) = a1 + 264;
    *(_QWORD *)(a1 + 2544) = a1 + 272;
    *(_QWORD *)(a1 + 2552) = a1 + 280;
    *(_QWORD *)(a1 + 2560) = a1 + 288;
    *(_QWORD *)(a1 + 2568) = a1 + 296;
    *(_QWORD *)(a1 + 2576) = a1 + 304;
    *(_QWORD *)(a1 + 2584) = a1 + 312;
    *(_QWORD *)(a1 + 2592) = a1 + 320;
    *(_QWORD *)(a1 + 2600) = a1 + 328;
    *(_QWORD *)(a1 + 2608) = a1 + 336;
    *(_QWORD *)(a1 + 2616) = a1 + 344;
  }
  v370 = *(unsigned int *)(a1 + 52);
  v371 = (void *)operator new[]();
  v372 = v371;
  if ((int)v370 >= 1)
    bzero(v371, 4 * v370);
  *(_QWORD *)(a1 + 760) = v372;
  v373 = *(_QWORD **)(a1 + 2632);
  v374 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v373 >= v374)
  {
    v376 = *(_QWORD *)(a1 + 2624);
    v377 = ((uint64_t)v373 - v376) >> 3;
    if ((unint64_t)(v377 + 1) >> 61)
      goto LABEL_1172;
    v378 = v374 - v376;
    v379 = v378 >> 2;
    if (v378 >> 2 <= (unint64_t)(v377 + 1))
      v379 = v377 + 1;
    if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFF8)
      v380 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v380 = v379;
    if (v380)
      v380 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v380);
    else
      v381 = 0;
    v382 = (_QWORD *)(v380 + 8 * v377);
    v383 = v380 + 8 * v381;
    *v382 = v372;
    v375 = v382 + 1;
    v384 = *(char **)(a1 + 2632);
    v385 = *(char **)(a1 + 2624);
    if (v384 != v385)
    {
      do
      {
        v386 = *((_QWORD *)v384 - 1);
        v384 -= 8;
        *--v382 = v386;
      }
      while (v384 != v385);
      v384 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v382;
    *(_QWORD *)(a1 + 2632) = v375;
    *(_QWORD *)(a1 + 2640) = v383;
    if (v384)
      operator delete(v384);
  }
  else
  {
    *v373 = v372;
    v375 = v373 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v375;
  v387 = *(unsigned int *)(a1 + 52);
  v388 = (void *)operator new[]();
  v389 = v388;
  if ((int)v387 >= 1)
    bzero(v388, 4 * v387);
  *(_QWORD *)(a1 + 768) = v389;
  v390 = *(_QWORD **)(a1 + 2632);
  v391 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v390 >= v391)
  {
    v393 = *(_QWORD *)(a1 + 2624);
    v394 = ((uint64_t)v390 - v393) >> 3;
    if ((unint64_t)(v394 + 1) >> 61)
      goto LABEL_1172;
    v395 = v391 - v393;
    v396 = v395 >> 2;
    if (v395 >> 2 <= (unint64_t)(v394 + 1))
      v396 = v394 + 1;
    if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFF8)
      v397 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v397 = v396;
    if (v397)
      v397 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v397);
    else
      v398 = 0;
    v399 = (_QWORD *)(v397 + 8 * v394);
    v400 = v397 + 8 * v398;
    *v399 = v389;
    v392 = v399 + 1;
    v401 = *(char **)(a1 + 2632);
    v402 = *(char **)(a1 + 2624);
    if (v401 != v402)
    {
      do
      {
        v403 = *((_QWORD *)v401 - 1);
        v401 -= 8;
        *--v399 = v403;
      }
      while (v401 != v402);
      v401 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v399;
    *(_QWORD *)(a1 + 2632) = v392;
    *(_QWORD *)(a1 + 2640) = v400;
    if (v401)
      operator delete(v401);
  }
  else
  {
    *v390 = v389;
    v392 = v390 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v392;
  v404 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
  v405 = (void *)operator new[]();
  bzero(v405, 4 * v404);
  *(_QWORD *)(a1 + 752) = v405;
  v406 = *(_QWORD **)(a1 + 2632);
  v407 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v406 >= v407)
  {
    v409 = *(_QWORD *)(a1 + 2624);
    v410 = ((uint64_t)v406 - v409) >> 3;
    if ((unint64_t)(v410 + 1) >> 61)
      goto LABEL_1172;
    v411 = v407 - v409;
    v412 = v411 >> 2;
    if (v411 >> 2 <= (unint64_t)(v410 + 1))
      v412 = v410 + 1;
    if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFF8)
      v413 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v413 = v412;
    if (v413)
      v413 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v413);
    else
      v414 = 0;
    v415 = (_QWORD *)(v413 + 8 * v410);
    v416 = v413 + 8 * v414;
    *v415 = v405;
    v408 = v415 + 1;
    v417 = *(char **)(a1 + 2632);
    v418 = *(char **)(a1 + 2624);
    if (v417 != v418)
    {
      do
      {
        v419 = *((_QWORD *)v417 - 1);
        v417 -= 8;
        *--v415 = v419;
      }
      while (v417 != v418);
      v417 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v415;
    *(_QWORD *)(a1 + 2632) = v408;
    *(_QWORD *)(a1 + 2640) = v416;
    if (v417)
      operator delete(v417);
  }
  else
  {
    *v406 = v405;
    v408 = v406 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v408;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_647;
  if (*(_DWORD *)(a1 + 56))
  {
    v420 = *(unsigned __int8 *)(a1 + 40) + 1;
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v420);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 984), v1057);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1057);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v420);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1104), v1057);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1057);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v420);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1224), v1057);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1057);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1057, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v420);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1344), v1057);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1057);
  }
  else
  {
    v421 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v422 = (void *)operator new[]();
    bzero(v422, 4 * v421);
    *(_QWORD *)(a1 + 1464) = v422;
    v423 = *(_QWORD **)(a1 + 2632);
    v424 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v423 >= v424)
    {
      v426 = *(_QWORD *)(a1 + 2624);
      v427 = ((uint64_t)v423 - v426) >> 3;
      if ((unint64_t)(v427 + 1) >> 61)
        goto LABEL_1172;
      v428 = v424 - v426;
      v429 = v428 >> 2;
      if (v428 >> 2 <= (unint64_t)(v427 + 1))
        v429 = v427 + 1;
      if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFF8)
        v430 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v430 = v429;
      if (v430)
        v430 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v430);
      else
        v431 = 0;
      v432 = (_QWORD *)(v430 + 8 * v427);
      v433 = v430 + 8 * v431;
      *v432 = v422;
      v425 = v432 + 1;
      v434 = *(char **)(a1 + 2632);
      v435 = *(char **)(a1 + 2624);
      if (v434 != v435)
      {
        do
        {
          v436 = *((_QWORD *)v434 - 1);
          v434 -= 8;
          *--v432 = v436;
        }
        while (v434 != v435);
        v434 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v432;
      *(_QWORD *)(a1 + 2632) = v425;
      *(_QWORD *)(a1 + 2640) = v433;
      if (v434)
        operator delete(v434);
    }
    else
    {
      *v423 = v422;
      v425 = v423 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v425;
    v437 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v438 = (void *)operator new[]();
    bzero(v438, 4 * v437);
    *(_QWORD *)(a1 + 1472) = v438;
    v439 = *(_QWORD **)(a1 + 2632);
    v440 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v439 >= v440)
    {
      v442 = *(_QWORD *)(a1 + 2624);
      v443 = ((uint64_t)v439 - v442) >> 3;
      if ((unint64_t)(v443 + 1) >> 61)
        goto LABEL_1172;
      v444 = v440 - v442;
      v445 = v444 >> 2;
      if (v444 >> 2 <= (unint64_t)(v443 + 1))
        v445 = v443 + 1;
      if ((unint64_t)v444 >= 0x7FFFFFFFFFFFFFF8)
        v446 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v446 = v445;
      if (v446)
        v446 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v446);
      else
        v447 = 0;
      v448 = (_QWORD *)(v446 + 8 * v443);
      v449 = v446 + 8 * v447;
      *v448 = v438;
      v441 = v448 + 1;
      v450 = *(char **)(a1 + 2632);
      v451 = *(char **)(a1 + 2624);
      if (v450 != v451)
      {
        do
        {
          v452 = *((_QWORD *)v450 - 1);
          v450 -= 8;
          *--v448 = v452;
        }
        while (v450 != v451);
        v450 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v448;
      *(_QWORD *)(a1 + 2632) = v441;
      *(_QWORD *)(a1 + 2640) = v449;
      if (v450)
        operator delete(v450);
    }
    else
    {
      *v439 = v438;
      v441 = v439 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v441;
    v453 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v454 = (void *)operator new[]();
    bzero(v454, 4 * v453);
    *(_QWORD *)(a1 + 1480) = v454;
    v455 = *(_QWORD **)(a1 + 2632);
    v456 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v455 >= v456)
    {
      v458 = *(_QWORD *)(a1 + 2624);
      v459 = ((uint64_t)v455 - v458) >> 3;
      if ((unint64_t)(v459 + 1) >> 61)
        goto LABEL_1172;
      v460 = v456 - v458;
      v461 = v460 >> 2;
      if (v460 >> 2 <= (unint64_t)(v459 + 1))
        v461 = v459 + 1;
      if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8)
        v462 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v462 = v461;
      if (v462)
        v462 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v462);
      else
        v463 = 0;
      v464 = (_QWORD *)(v462 + 8 * v459);
      v465 = v462 + 8 * v463;
      *v464 = v454;
      v457 = v464 + 1;
      v466 = *(char **)(a1 + 2632);
      v467 = *(char **)(a1 + 2624);
      if (v466 != v467)
      {
        do
        {
          v468 = *((_QWORD *)v466 - 1);
          v466 -= 8;
          *--v464 = v468;
        }
        while (v466 != v467);
        v466 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v464;
      *(_QWORD *)(a1 + 2632) = v457;
      *(_QWORD *)(a1 + 2640) = v465;
      if (v466)
        operator delete(v466);
    }
    else
    {
      *v455 = v454;
      v457 = v455 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v457;
    v469 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v470 = (void *)operator new[]();
    bzero(v470, 4 * v469);
    *(_QWORD *)(a1 + 1488) = v470;
    v471 = *(_QWORD **)(a1 + 2632);
    v472 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v471 >= v472)
    {
      v474 = *(_QWORD *)(a1 + 2624);
      v475 = ((uint64_t)v471 - v474) >> 3;
      if ((unint64_t)(v475 + 1) >> 61)
        goto LABEL_1172;
      v476 = v472 - v474;
      v477 = v476 >> 2;
      if (v476 >> 2 <= (unint64_t)(v475 + 1))
        v477 = v475 + 1;
      if ((unint64_t)v476 >= 0x7FFFFFFFFFFFFFF8)
        v478 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v478 = v477;
      if (v478)
        v478 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v478);
      else
        v479 = 0;
      v480 = (_QWORD *)(v478 + 8 * v475);
      v481 = v478 + 8 * v479;
      *v480 = v470;
      v473 = v480 + 1;
      v482 = *(char **)(a1 + 2632);
      v483 = *(char **)(a1 + 2624);
      if (v482 != v483)
      {
        do
        {
          v484 = *((_QWORD *)v482 - 1);
          v482 -= 8;
          *--v480 = v484;
        }
        while (v482 != v483);
        v482 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v480;
      *(_QWORD *)(a1 + 2632) = v473;
      *(_QWORD *)(a1 + 2640) = v481;
      if (v482)
        operator delete(v482);
    }
    else
    {
      *v471 = v470;
      v473 = v471 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v473;
  }
  v485 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v486 = (void *)operator new[]();
  bzero(v486, 4 * v485);
  *(_QWORD *)(a1 + 1496) = v486;
  v487 = *(_QWORD **)(a1 + 2632);
  v488 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v487 >= v488)
  {
    v490 = *(_QWORD *)(a1 + 2624);
    v491 = ((uint64_t)v487 - v490) >> 3;
    if ((unint64_t)(v491 + 1) >> 61)
      goto LABEL_1172;
    v492 = v488 - v490;
    v493 = v492 >> 2;
    if (v492 >> 2 <= (unint64_t)(v491 + 1))
      v493 = v491 + 1;
    if ((unint64_t)v492 >= 0x7FFFFFFFFFFFFFF8)
      v494 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v494 = v493;
    if (v494)
      v494 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v494);
    else
      v495 = 0;
    v496 = (_QWORD *)(v494 + 8 * v491);
    v497 = v494 + 8 * v495;
    *v496 = v486;
    v489 = v496 + 1;
    v498 = *(char **)(a1 + 2632);
    v499 = *(char **)(a1 + 2624);
    if (v498 != v499)
    {
      do
      {
        v500 = *((_QWORD *)v498 - 1);
        v498 -= 8;
        *--v496 = v500;
      }
      while (v498 != v499);
      v498 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v496;
    *(_QWORD *)(a1 + 2632) = v489;
    *(_QWORD *)(a1 + 2640) = v497;
    if (v498)
      operator delete(v498);
  }
  else
  {
    *v487 = v486;
    v489 = v487 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v489;
  v501 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v502 = (void *)operator new[]();
  bzero(v502, 4 * v501);
  *(_QWORD *)(a1 + 1504) = v502;
  v503 = *(_QWORD **)(a1 + 2632);
  v504 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v503 >= v504)
  {
    v506 = *(_QWORD *)(a1 + 2624);
    v507 = ((uint64_t)v503 - v506) >> 3;
    if ((unint64_t)(v507 + 1) >> 61)
      goto LABEL_1172;
    v508 = v504 - v506;
    v509 = v508 >> 2;
    if (v508 >> 2 <= (unint64_t)(v507 + 1))
      v509 = v507 + 1;
    if ((unint64_t)v508 >= 0x7FFFFFFFFFFFFFF8)
      v510 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v510 = v509;
    if (v510)
      v510 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v510);
    else
      v511 = 0;
    v512 = (_QWORD *)(v510 + 8 * v507);
    v513 = v510 + 8 * v511;
    *v512 = v502;
    v505 = v512 + 1;
    v514 = *(char **)(a1 + 2632);
    v515 = *(char **)(a1 + 2624);
    if (v514 != v515)
    {
      do
      {
        v516 = *((_QWORD *)v514 - 1);
        v514 -= 8;
        *--v512 = v516;
      }
      while (v514 != v515);
      v514 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v512;
    *(_QWORD *)(a1 + 2632) = v505;
    *(_QWORD *)(a1 + 2640) = v513;
    if (v514)
      operator delete(v514);
  }
  else
  {
    *v503 = v502;
    v505 = v503 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v505;
  v517 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v518 = (void *)operator new[]();
  bzero(v518, 4 * v517);
  *(_QWORD *)(a1 + 1512) = v518;
  v519 = *(_QWORD **)(a1 + 2632);
  v520 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v519 >= v520)
  {
    v522 = *(_QWORD *)(a1 + 2624);
    v523 = ((uint64_t)v519 - v522) >> 3;
    if ((unint64_t)(v523 + 1) >> 61)
      goto LABEL_1172;
    v524 = v520 - v522;
    v525 = v524 >> 2;
    if (v524 >> 2 <= (unint64_t)(v523 + 1))
      v525 = v523 + 1;
    if ((unint64_t)v524 >= 0x7FFFFFFFFFFFFFF8)
      v526 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v526 = v525;
    if (v526)
      v526 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v526);
    else
      v527 = 0;
    v528 = (_QWORD *)(v526 + 8 * v523);
    v529 = v526 + 8 * v527;
    *v528 = v518;
    v521 = v528 + 1;
    v530 = *(char **)(a1 + 2632);
    v531 = *(char **)(a1 + 2624);
    if (v530 != v531)
    {
      do
      {
        v532 = *((_QWORD *)v530 - 1);
        v530 -= 8;
        *--v528 = v532;
      }
      while (v530 != v531);
      v530 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v528;
    *(_QWORD *)(a1 + 2632) = v521;
    *(_QWORD *)(a1 + 2640) = v529;
    if (v530)
      operator delete(v530);
  }
  else
  {
    *v519 = v518;
    v521 = v519 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v521;
  v533 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v534 = (void *)operator new[]();
  bzero(v534, 4 * v533);
  *(_QWORD *)(a1 + 1520) = v534;
  v535 = *(_QWORD **)(a1 + 2632);
  v536 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v535 >= v536)
  {
    v538 = *(_QWORD *)(a1 + 2624);
    v539 = ((uint64_t)v535 - v538) >> 3;
    if ((unint64_t)(v539 + 1) >> 61)
      goto LABEL_1172;
    v540 = v536 - v538;
    v541 = v540 >> 2;
    if (v540 >> 2 <= (unint64_t)(v539 + 1))
      v541 = v539 + 1;
    if ((unint64_t)v540 >= 0x7FFFFFFFFFFFFFF8)
      v542 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v542 = v541;
    if (v542)
      v542 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v542);
    else
      v543 = 0;
    v544 = (_QWORD *)(v542 + 8 * v539);
    v545 = v542 + 8 * v543;
    *v544 = v534;
    v537 = v544 + 1;
    v546 = *(char **)(a1 + 2632);
    v547 = *(char **)(a1 + 2624);
    if (v546 != v547)
    {
      do
      {
        v548 = *((_QWORD *)v546 - 1);
        v546 -= 8;
        *--v544 = v548;
      }
      while (v546 != v547);
      v546 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v544;
    *(_QWORD *)(a1 + 2632) = v537;
    *(_QWORD *)(a1 + 2640) = v545;
    if (v546)
      operator delete(v546);
  }
  else
  {
    *v535 = v534;
    v537 = v535 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v537;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_647;
  v549 = *(unsigned int *)(a1 + 52);
  v550 = (void *)operator new[]();
  v551 = v550;
  if ((int)v549 >= 1)
    bzero(v550, 4 * v549);
  *(_QWORD *)(a1 + 1528) = v551;
  v552 = *(_QWORD **)(a1 + 2632);
  v553 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v552 >= v553)
  {
    v555 = *(_QWORD *)(a1 + 2624);
    v556 = ((uint64_t)v552 - v555) >> 3;
    if ((unint64_t)(v556 + 1) >> 61)
      goto LABEL_1172;
    v557 = v553 - v555;
    v558 = v557 >> 2;
    if (v557 >> 2 <= (unint64_t)(v556 + 1))
      v558 = v556 + 1;
    if ((unint64_t)v557 >= 0x7FFFFFFFFFFFFFF8)
      v559 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v559 = v558;
    if (v559)
      v559 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v559);
    else
      v560 = 0;
    v561 = (_QWORD *)(v559 + 8 * v556);
    v562 = v559 + 8 * v560;
    *v561 = v551;
    v554 = v561 + 1;
    v563 = *(char **)(a1 + 2632);
    v564 = *(char **)(a1 + 2624);
    if (v563 != v564)
    {
      do
      {
        v565 = *((_QWORD *)v563 - 1);
        v563 -= 8;
        *--v561 = v565;
      }
      while (v563 != v564);
      v563 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v561;
    *(_QWORD *)(a1 + 2632) = v554;
    *(_QWORD *)(a1 + 2640) = v562;
    if (v563)
      operator delete(v563);
  }
  else
  {
    *v552 = v551;
    v554 = v552 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v554;
  v566 = *(unsigned int *)(a1 + 52);
  v567 = (void *)operator new[]();
  v568 = v567;
  if ((int)v566 >= 1)
    bzero(v567, 4 * v566);
  *(_QWORD *)(a1 + 1536) = v568;
  v569 = *(_QWORD **)(a1 + 2632);
  v570 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v569 >= v570)
  {
    v572 = *(_QWORD *)(a1 + 2624);
    v573 = ((uint64_t)v569 - v572) >> 3;
    if ((unint64_t)(v573 + 1) >> 61)
      goto LABEL_1172;
    v574 = v570 - v572;
    v575 = v574 >> 2;
    if (v574 >> 2 <= (unint64_t)(v573 + 1))
      v575 = v573 + 1;
    if ((unint64_t)v574 >= 0x7FFFFFFFFFFFFFF8)
      v576 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v576 = v575;
    if (v576)
      v576 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v576);
    else
      v577 = 0;
    v578 = (_QWORD *)(v576 + 8 * v573);
    v579 = v576 + 8 * v577;
    *v578 = v568;
    v571 = v578 + 1;
    v580 = *(char **)(a1 + 2632);
    v581 = *(char **)(a1 + 2624);
    if (v580 != v581)
    {
      do
      {
        v582 = *((_QWORD *)v580 - 1);
        v580 -= 8;
        *--v578 = v582;
      }
      while (v580 != v581);
      v580 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v578;
    *(_QWORD *)(a1 + 2632) = v571;
    *(_QWORD *)(a1 + 2640) = v579;
    if (v580)
      operator delete(v580);
  }
  else
  {
    *v569 = v568;
    v571 = v569 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v571;
  v583 = *(unsigned int *)(a1 + 52);
  v584 = (void *)operator new[]();
  v585 = v584;
  if ((int)v583 >= 1)
    bzero(v584, 4 * v583);
  *(_QWORD *)(a1 + 1544) = v585;
  v586 = *(_QWORD **)(a1 + 2632);
  v587 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v586 >= v587)
  {
    v589 = *(_QWORD *)(a1 + 2624);
    v590 = ((uint64_t)v586 - v589) >> 3;
    if (!((unint64_t)(v590 + 1) >> 61))
    {
      v591 = v587 - v589;
      v592 = v591 >> 2;
      if (v591 >> 2 <= (unint64_t)(v590 + 1))
        v592 = v590 + 1;
      if ((unint64_t)v591 >= 0x7FFFFFFFFFFFFFF8)
        v593 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v593 = v592;
      if (v593)
        v593 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v593);
      else
        v594 = 0;
      v595 = (_QWORD *)(v593 + 8 * v590);
      v596 = v593 + 8 * v594;
      *v595 = v585;
      v588 = v595 + 1;
      v597 = *(char **)(a1 + 2632);
      v598 = *(char **)(a1 + 2624);
      if (v597 != v598)
      {
        do
        {
          v599 = *((_QWORD *)v597 - 1);
          v597 -= 8;
          *--v595 = v599;
        }
        while (v597 != v598);
        v597 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v595;
      *(_QWORD *)(a1 + 2632) = v588;
      *(_QWORD *)(a1 + 2640) = v596;
      if (v597)
        operator delete(v597);
      goto LABEL_646;
    }
LABEL_1172:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  *v586 = v585;
  v588 = v586 + 1;
LABEL_646:
  *(_QWORD *)(a1 + 2632) = v588;
LABEL_647:
  if (*(_BYTE *)(a1 + 2692))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  }
  std::vector<MMatrix<float>>::resize((char **)(a1 + 184), maxFeatureVectors);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 160), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 64), (int)v133);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 136), (int)v133);
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 208), maxFeatureVectors);
  if (*(_BYTE *)(a1 + 2692))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 640), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 664), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 688), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 712), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 544), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 568), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 592), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 616), (int)v132);
  }
  std::vector<MMatrix<float>>::resize((char **)(a1 + 448), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 472), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 496), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 520), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 352), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 376), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 400), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 424), (int)v132);
  if (!*(_BYTE *)(a1 + 1696))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 960), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 840), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 816), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 912), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 888), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 864), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 936), maxFeatureVectors);
  }
  if ((int)v133 >= 1)
  {
    for (i = 0; i != v133; ++i)
    {
      v601 = *(unsigned int *)(a1 + 48);
      v602 = (void *)operator new[]();
      v603 = v602;
      if ((int)v601 >= 1)
        bzero(v602, 4 * v601);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * i) = v603;
      v604 = *(_QWORD **)(a1 + 2632);
      v605 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v604 >= v605)
      {
        v607 = *(_QWORD *)(a1 + 2624);
        v608 = ((uint64_t)v604 - v607) >> 3;
        if ((unint64_t)(v608 + 1) >> 61)
          goto LABEL_1172;
        v609 = v605 - v607;
        v610 = v609 >> 2;
        if (v609 >> 2 <= (unint64_t)(v608 + 1))
          v610 = v608 + 1;
        if ((unint64_t)v609 >= 0x7FFFFFFFFFFFFFF8)
          v611 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v611 = v610;
        if (v611)
          v611 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v611);
        else
          v612 = 0;
        v613 = (_QWORD *)(v611 + 8 * v608);
        *v613 = v603;
        v606 = v613 + 1;
        v614 = *(char **)(a1 + 2632);
        v615 = *(char **)(a1 + 2624);
        if (v614 != v615)
        {
          do
          {
            v616 = *((_QWORD *)v614 - 1);
            v614 -= 8;
            *--v613 = v616;
          }
          while (v614 != v615);
          v614 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v613;
        *(_QWORD *)(a1 + 2632) = v606;
        *(_QWORD *)(a1 + 2640) = v611 + 8 * v612;
        if (v614)
          operator delete(v614);
      }
      else
      {
        *v604 = v603;
        v606 = v604 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v606;
      v617 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 2688);
      v618 = (void *)operator new[]();
      bzero(v618, 4 * v617);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * i) = v618;
      v619 = *(_QWORD **)(a1 + 2632);
      v620 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v619 >= v620)
      {
        v622 = *(_QWORD *)(a1 + 2624);
        v623 = ((uint64_t)v619 - v622) >> 3;
        if ((unint64_t)(v623 + 1) >> 61)
          goto LABEL_1172;
        v624 = v620 - v622;
        v625 = v624 >> 2;
        if (v624 >> 2 <= (unint64_t)(v623 + 1))
          v625 = v623 + 1;
        if ((unint64_t)v624 >= 0x7FFFFFFFFFFFFFF8)
          v626 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v626 = v625;
        if (v626)
          v626 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v626);
        else
          v627 = 0;
        v628 = (_QWORD *)(v626 + 8 * v623);
        *v628 = v618;
        v621 = v628 + 1;
        v629 = *(char **)(a1 + 2632);
        v630 = *(char **)(a1 + 2624);
        if (v629 != v630)
        {
          do
          {
            v631 = *((_QWORD *)v629 - 1);
            v629 -= 8;
            *--v628 = v631;
          }
          while (v629 != v630);
          v629 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v628;
        *(_QWORD *)(a1 + 2632) = v621;
        *(_QWORD *)(a1 + 2640) = v626 + 8 * v627;
        if (v629)
          operator delete(v629);
      }
      else
      {
        *v619 = v618;
        v621 = v619 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v621;
    }
  }
  if ((int)v132 >= 1)
  {
    for (j = 0; j != v132; ++j)
    {
      if (*(_BYTE *)(a1 + 2692))
      {
        v633 = *(unsigned int *)(a1 + 52);
        v634 = (void *)operator new[]();
        v635 = v634;
        if ((int)v633 >= 1)
          bzero(v634, 4 * v633);
        *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * j) = v635;
        v636 = *(_QWORD **)(a1 + 2632);
        v637 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v636 >= v637)
        {
          v639 = *(_QWORD *)(a1 + 2624);
          v640 = ((uint64_t)v636 - v639) >> 3;
          if ((unint64_t)(v640 + 1) >> 61)
            goto LABEL_1172;
          v641 = v637 - v639;
          v642 = v641 >> 2;
          if (v641 >> 2 <= (unint64_t)(v640 + 1))
            v642 = v640 + 1;
          if ((unint64_t)v641 >= 0x7FFFFFFFFFFFFFF8)
            v643 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v643 = v642;
          if (v643)
            v643 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v643);
          else
            v644 = 0;
          v645 = (_QWORD *)(v643 + 8 * v640);
          *v645 = v635;
          v638 = v645 + 1;
          v646 = *(char **)(a1 + 2632);
          v647 = *(char **)(a1 + 2624);
          if (v646 != v647)
          {
            do
            {
              v648 = *((_QWORD *)v646 - 1);
              v646 -= 8;
              *--v645 = v648;
            }
            while (v646 != v647);
            v646 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v645;
          *(_QWORD *)(a1 + 2632) = v638;
          *(_QWORD *)(a1 + 2640) = v643 + 8 * v644;
          if (v646)
            operator delete(v646);
        }
        else
        {
          *v636 = v635;
          v638 = v636 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v638;
        v649 = *(unsigned int *)(a1 + 52);
        v650 = (void *)operator new[]();
        v651 = v650;
        if ((int)v649 >= 1)
          bzero(v650, 4 * v649);
        *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * j) = v651;
        v652 = *(_QWORD **)(a1 + 2632);
        v653 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v652 >= v653)
        {
          v655 = *(_QWORD *)(a1 + 2624);
          v656 = ((uint64_t)v652 - v655) >> 3;
          if ((unint64_t)(v656 + 1) >> 61)
            goto LABEL_1172;
          v657 = v653 - v655;
          v658 = v657 >> 2;
          if (v657 >> 2 <= (unint64_t)(v656 + 1))
            v658 = v656 + 1;
          if ((unint64_t)v657 >= 0x7FFFFFFFFFFFFFF8)
            v659 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v659 = v658;
          if (v659)
            v659 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v659);
          else
            v660 = 0;
          v661 = (_QWORD *)(v659 + 8 * v656);
          *v661 = v651;
          v654 = v661 + 1;
          v662 = *(char **)(a1 + 2632);
          v663 = *(char **)(a1 + 2624);
          if (v662 != v663)
          {
            do
            {
              v664 = *((_QWORD *)v662 - 1);
              v662 -= 8;
              *--v661 = v664;
            }
            while (v662 != v663);
            v662 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v661;
          *(_QWORD *)(a1 + 2632) = v654;
          *(_QWORD *)(a1 + 2640) = v659 + 8 * v660;
          if (v662)
            operator delete(v662);
        }
        else
        {
          *v652 = v651;
          v654 = v652 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v654;
        v665 = *(unsigned int *)(a1 + 52);
        v666 = (void *)operator new[]();
        v667 = v666;
        if ((int)v665 >= 1)
          bzero(v666, 4 * v665);
        *(_QWORD *)(*(_QWORD *)(a1 + 592) + 8 * j) = v667;
        v668 = *(_QWORD **)(a1 + 2632);
        v669 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v668 >= v669)
        {
          v671 = *(_QWORD *)(a1 + 2624);
          v672 = ((uint64_t)v668 - v671) >> 3;
          if ((unint64_t)(v672 + 1) >> 61)
            goto LABEL_1172;
          v673 = v669 - v671;
          v674 = v673 >> 2;
          if (v673 >> 2 <= (unint64_t)(v672 + 1))
            v674 = v672 + 1;
          if ((unint64_t)v673 >= 0x7FFFFFFFFFFFFFF8)
            v675 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v675 = v674;
          if (v675)
            v675 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v675);
          else
            v676 = 0;
          v677 = (_QWORD *)(v675 + 8 * v672);
          *v677 = v667;
          v670 = v677 + 1;
          v678 = *(char **)(a1 + 2632);
          v679 = *(char **)(a1 + 2624);
          if (v678 != v679)
          {
            do
            {
              v680 = *((_QWORD *)v678 - 1);
              v678 -= 8;
              *--v677 = v680;
            }
            while (v678 != v679);
            v678 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v677;
          *(_QWORD *)(a1 + 2632) = v670;
          *(_QWORD *)(a1 + 2640) = v675 + 8 * v676;
          if (v678)
            operator delete(v678);
        }
        else
        {
          *v668 = v667;
          v670 = v668 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v670;
        v681 = *(unsigned int *)(a1 + 52);
        v682 = (void *)operator new[]();
        v683 = v682;
        if ((int)v681 >= 1)
          bzero(v682, 4 * v681);
        *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * j) = v683;
        v684 = *(_QWORD **)(a1 + 2632);
        v685 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v684 >= v685)
        {
          v687 = *(_QWORD *)(a1 + 2624);
          v688 = ((uint64_t)v684 - v687) >> 3;
          if ((unint64_t)(v688 + 1) >> 61)
            goto LABEL_1172;
          v689 = v685 - v687;
          v690 = v689 >> 2;
          if (v689 >> 2 <= (unint64_t)(v688 + 1))
            v690 = v688 + 1;
          if ((unint64_t)v689 >= 0x7FFFFFFFFFFFFFF8)
            v691 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v691 = v690;
          if (v691)
            v691 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v691);
          else
            v692 = 0;
          v693 = (_QWORD *)(v691 + 8 * v688);
          *v693 = v683;
          v686 = v693 + 1;
          v694 = *(char **)(a1 + 2632);
          v695 = *(char **)(a1 + 2624);
          if (v694 != v695)
          {
            do
            {
              v696 = *((_QWORD *)v694 - 1);
              v694 -= 8;
              *--v693 = v696;
            }
            while (v694 != v695);
            v694 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v693;
          *(_QWORD *)(a1 + 2632) = v686;
          *(_QWORD *)(a1 + 2640) = v691 + 8 * v692;
          if (v694)
            operator delete(v694);
        }
        else
        {
          *v684 = v683;
          v686 = v684 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v686;
        v697 = *(unsigned int *)(a1 + 52);
        v698 = (void *)operator new[]();
        v699 = v698;
        if ((int)v697 >= 1)
          bzero(v698, 4 * v697);
        *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * j) = v699;
        v700 = *(_QWORD **)(a1 + 2632);
        v701 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v700 >= v701)
        {
          v703 = *(_QWORD *)(a1 + 2624);
          v704 = ((uint64_t)v700 - v703) >> 3;
          if ((unint64_t)(v704 + 1) >> 61)
            goto LABEL_1172;
          v705 = v701 - v703;
          v706 = v705 >> 2;
          if (v705 >> 2 <= (unint64_t)(v704 + 1))
            v706 = v704 + 1;
          if ((unint64_t)v705 >= 0x7FFFFFFFFFFFFFF8)
            v707 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v707 = v706;
          if (v707)
            v707 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v707);
          else
            v708 = 0;
          v709 = (_QWORD *)(v707 + 8 * v704);
          *v709 = v699;
          v702 = v709 + 1;
          v710 = *(char **)(a1 + 2632);
          v711 = *(char **)(a1 + 2624);
          if (v710 != v711)
          {
            do
            {
              v712 = *((_QWORD *)v710 - 1);
              v710 -= 8;
              *--v709 = v712;
            }
            while (v710 != v711);
            v710 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v709;
          *(_QWORD *)(a1 + 2632) = v702;
          *(_QWORD *)(a1 + 2640) = v707 + 8 * v708;
          if (v710)
            operator delete(v710);
        }
        else
        {
          *v700 = v699;
          v702 = v700 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v702;
        v713 = *(unsigned int *)(a1 + 52);
        v714 = (void *)operator new[]();
        v715 = v714;
        if ((int)v713 >= 1)
          bzero(v714, 4 * v713);
        *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * j) = v715;
        v716 = *(_QWORD **)(a1 + 2632);
        v717 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v716 >= v717)
        {
          v719 = *(_QWORD *)(a1 + 2624);
          v720 = ((uint64_t)v716 - v719) >> 3;
          if ((unint64_t)(v720 + 1) >> 61)
            goto LABEL_1172;
          v721 = v717 - v719;
          v722 = v721 >> 2;
          if (v721 >> 2 <= (unint64_t)(v720 + 1))
            v722 = v720 + 1;
          if ((unint64_t)v721 >= 0x7FFFFFFFFFFFFFF8)
            v723 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v723 = v722;
          if (v723)
            v723 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v723);
          else
            v724 = 0;
          v725 = (_QWORD *)(v723 + 8 * v720);
          *v725 = v715;
          v718 = v725 + 1;
          v726 = *(char **)(a1 + 2632);
          v727 = *(char **)(a1 + 2624);
          if (v726 != v727)
          {
            do
            {
              v728 = *((_QWORD *)v726 - 1);
              v726 -= 8;
              *--v725 = v728;
            }
            while (v726 != v727);
            v726 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v725;
          *(_QWORD *)(a1 + 2632) = v718;
          *(_QWORD *)(a1 + 2640) = v723 + 8 * v724;
          if (v726)
            operator delete(v726);
        }
        else
        {
          *v716 = v715;
          v718 = v716 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v718;
        v729 = *(unsigned int *)(a1 + 52);
        v730 = (void *)operator new[]();
        v731 = v730;
        if ((int)v729 >= 1)
          bzero(v730, 4 * v729);
        *(_QWORD *)(*(_QWORD *)(a1 + 688) + 8 * j) = v731;
        v732 = *(_QWORD **)(a1 + 2632);
        v733 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v732 >= v733)
        {
          v735 = *(_QWORD *)(a1 + 2624);
          v736 = ((uint64_t)v732 - v735) >> 3;
          if ((unint64_t)(v736 + 1) >> 61)
            goto LABEL_1172;
          v737 = v733 - v735;
          v738 = v737 >> 2;
          if (v737 >> 2 <= (unint64_t)(v736 + 1))
            v738 = v736 + 1;
          if ((unint64_t)v737 >= 0x7FFFFFFFFFFFFFF8)
            v739 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v739 = v738;
          if (v739)
            v739 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v739);
          else
            v740 = 0;
          v741 = (_QWORD *)(v739 + 8 * v736);
          *v741 = v731;
          v734 = v741 + 1;
          v742 = *(char **)(a1 + 2632);
          v743 = *(char **)(a1 + 2624);
          if (v742 != v743)
          {
            do
            {
              v744 = *((_QWORD *)v742 - 1);
              v742 -= 8;
              *--v741 = v744;
            }
            while (v742 != v743);
            v742 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v741;
          *(_QWORD *)(a1 + 2632) = v734;
          *(_QWORD *)(a1 + 2640) = v739 + 8 * v740;
          if (v742)
            operator delete(v742);
        }
        else
        {
          *v732 = v731;
          v734 = v732 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v734;
        v745 = *(unsigned int *)(a1 + 52);
        v746 = (void *)operator new[]();
        v747 = v746;
        if ((int)v745 >= 1)
          bzero(v746, 4 * v745);
        *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * j) = v747;
        v748 = *(_QWORD **)(a1 + 2632);
        v749 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v748 >= v749)
        {
          v751 = *(_QWORD *)(a1 + 2624);
          v752 = ((uint64_t)v748 - v751) >> 3;
          if ((unint64_t)(v752 + 1) >> 61)
            goto LABEL_1172;
          v753 = v749 - v751;
          v754 = v753 >> 2;
          if (v753 >> 2 <= (unint64_t)(v752 + 1))
            v754 = v752 + 1;
          if ((unint64_t)v753 >= 0x7FFFFFFFFFFFFFF8)
            v755 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v755 = v754;
          if (v755)
            v755 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v755);
          else
            v756 = 0;
          v757 = (_QWORD *)(v755 + 8 * v752);
          *v757 = v747;
          v750 = v757 + 1;
          v758 = *(char **)(a1 + 2632);
          v759 = *(char **)(a1 + 2624);
          if (v758 != v759)
          {
            do
            {
              v760 = *((_QWORD *)v758 - 1);
              v758 -= 8;
              *--v757 = v760;
            }
            while (v758 != v759);
            v758 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v757;
          *(_QWORD *)(a1 + 2632) = v750;
          *(_QWORD *)(a1 + 2640) = v755 + 8 * v756;
          if (v758)
            operator delete(v758);
        }
        else
        {
          *v748 = v747;
          v750 = v748 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v750;
      }
      v761 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v762 = (void *)operator new[]();
      bzero(v762, 4 * v761);
      *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * j) = v762;
      v763 = *(_QWORD **)(a1 + 2632);
      v764 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v763 >= v764)
      {
        v766 = *(_QWORD *)(a1 + 2624);
        v767 = ((uint64_t)v763 - v766) >> 3;
        if ((unint64_t)(v767 + 1) >> 61)
          goto LABEL_1172;
        v768 = v764 - v766;
        v769 = v768 >> 2;
        if (v768 >> 2 <= (unint64_t)(v767 + 1))
          v769 = v767 + 1;
        if ((unint64_t)v768 >= 0x7FFFFFFFFFFFFFF8)
          v770 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v770 = v769;
        if (v770)
          v770 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v770);
        else
          v771 = 0;
        v772 = (_QWORD *)(v770 + 8 * v767);
        *v772 = v762;
        v765 = v772 + 1;
        v773 = *(char **)(a1 + 2632);
        v774 = *(char **)(a1 + 2624);
        if (v773 != v774)
        {
          do
          {
            v775 = *((_QWORD *)v773 - 1);
            v773 -= 8;
            *--v772 = v775;
          }
          while (v773 != v774);
          v773 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v772;
        *(_QWORD *)(a1 + 2632) = v765;
        *(_QWORD *)(a1 + 2640) = v770 + 8 * v771;
        if (v773)
          operator delete(v773);
      }
      else
      {
        *v763 = v762;
        v765 = v763 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v765;
      v776 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v777 = (void *)operator new[]();
      bzero(v777, 4 * v776);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * j) = v777;
      v778 = *(_QWORD **)(a1 + 2632);
      v779 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v778 >= v779)
      {
        v781 = *(_QWORD *)(a1 + 2624);
        v782 = ((uint64_t)v778 - v781) >> 3;
        if ((unint64_t)(v782 + 1) >> 61)
          goto LABEL_1172;
        v783 = v779 - v781;
        v784 = v783 >> 2;
        if (v783 >> 2 <= (unint64_t)(v782 + 1))
          v784 = v782 + 1;
        if ((unint64_t)v783 >= 0x7FFFFFFFFFFFFFF8)
          v785 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v785 = v784;
        if (v785)
          v785 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v785);
        else
          v786 = 0;
        v787 = (_QWORD *)(v785 + 8 * v782);
        *v787 = v777;
        v780 = v787 + 1;
        v788 = *(char **)(a1 + 2632);
        v789 = *(char **)(a1 + 2624);
        if (v788 != v789)
        {
          do
          {
            v790 = *((_QWORD *)v788 - 1);
            v788 -= 8;
            *--v787 = v790;
          }
          while (v788 != v789);
          v788 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v787;
        *(_QWORD *)(a1 + 2632) = v780;
        *(_QWORD *)(a1 + 2640) = v785 + 8 * v786;
        if (v788)
          operator delete(v788);
      }
      else
      {
        *v778 = v777;
        v780 = v778 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v780;
      v791 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v792 = (void *)operator new[]();
      bzero(v792, 4 * v791);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * j) = v792;
      v793 = *(_QWORD **)(a1 + 2632);
      v794 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v793 >= v794)
      {
        v796 = *(_QWORD *)(a1 + 2624);
        v797 = ((uint64_t)v793 - v796) >> 3;
        if ((unint64_t)(v797 + 1) >> 61)
          goto LABEL_1172;
        v798 = v794 - v796;
        v799 = v798 >> 2;
        if (v798 >> 2 <= (unint64_t)(v797 + 1))
          v799 = v797 + 1;
        if ((unint64_t)v798 >= 0x7FFFFFFFFFFFFFF8)
          v800 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v800 = v799;
        if (v800)
          v800 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v800);
        else
          v801 = 0;
        v802 = (_QWORD *)(v800 + 8 * v797);
        *v802 = v792;
        v795 = v802 + 1;
        v803 = *(char **)(a1 + 2632);
        v804 = *(char **)(a1 + 2624);
        if (v803 != v804)
        {
          do
          {
            v805 = *((_QWORD *)v803 - 1);
            v803 -= 8;
            *--v802 = v805;
          }
          while (v803 != v804);
          v803 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v802;
        *(_QWORD *)(a1 + 2632) = v795;
        *(_QWORD *)(a1 + 2640) = v800 + 8 * v801;
        if (v803)
          operator delete(v803);
      }
      else
      {
        *v793 = v792;
        v795 = v793 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v795;
      v806 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v807 = (void *)operator new[]();
      bzero(v807, 4 * v806);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * j) = v807;
      v808 = *(_QWORD **)(a1 + 2632);
      v809 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v808 >= v809)
      {
        v811 = *(_QWORD *)(a1 + 2624);
        v812 = ((uint64_t)v808 - v811) >> 3;
        if ((unint64_t)(v812 + 1) >> 61)
          goto LABEL_1172;
        v813 = v809 - v811;
        v814 = v813 >> 2;
        if (v813 >> 2 <= (unint64_t)(v812 + 1))
          v814 = v812 + 1;
        if ((unint64_t)v813 >= 0x7FFFFFFFFFFFFFF8)
          v815 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v815 = v814;
        if (v815)
          v815 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v815);
        else
          v816 = 0;
        v817 = (_QWORD *)(v815 + 8 * v812);
        *v817 = v807;
        v810 = v817 + 1;
        v818 = *(char **)(a1 + 2632);
        v819 = *(char **)(a1 + 2624);
        if (v818 != v819)
        {
          do
          {
            v820 = *((_QWORD *)v818 - 1);
            v818 -= 8;
            *--v817 = v820;
          }
          while (v818 != v819);
          v818 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v817;
        *(_QWORD *)(a1 + 2632) = v810;
        *(_QWORD *)(a1 + 2640) = v815 + 8 * v816;
        if (v818)
          operator delete(v818);
      }
      else
      {
        *v808 = v807;
        v810 = v808 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v810;
      v821 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v822 = (void *)operator new[]();
      bzero(v822, 4 * v821);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * j) = v822;
      v823 = *(_QWORD **)(a1 + 2632);
      v824 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v823 >= v824)
      {
        v826 = *(_QWORD *)(a1 + 2624);
        v827 = ((uint64_t)v823 - v826) >> 3;
        if ((unint64_t)(v827 + 1) >> 61)
          goto LABEL_1172;
        v828 = v824 - v826;
        v829 = v828 >> 2;
        if (v828 >> 2 <= (unint64_t)(v827 + 1))
          v829 = v827 + 1;
        if ((unint64_t)v828 >= 0x7FFFFFFFFFFFFFF8)
          v830 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v830 = v829;
        if (v830)
          v830 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v830);
        else
          v831 = 0;
        v832 = (_QWORD *)(v830 + 8 * v827);
        *v832 = v822;
        v825 = v832 + 1;
        v833 = *(char **)(a1 + 2632);
        v834 = *(char **)(a1 + 2624);
        if (v833 != v834)
        {
          do
          {
            v835 = *((_QWORD *)v833 - 1);
            v833 -= 8;
            *--v832 = v835;
          }
          while (v833 != v834);
          v833 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v832;
        *(_QWORD *)(a1 + 2632) = v825;
        *(_QWORD *)(a1 + 2640) = v830 + 8 * v831;
        if (v833)
          operator delete(v833);
      }
      else
      {
        *v823 = v822;
        v825 = v823 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v825;
      v836 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v837 = (void *)operator new[]();
      bzero(v837, 4 * v836);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * j) = v837;
      v838 = *(_QWORD **)(a1 + 2632);
      v839 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v838 >= v839)
      {
        v841 = *(_QWORD *)(a1 + 2624);
        v842 = ((uint64_t)v838 - v841) >> 3;
        if ((unint64_t)(v842 + 1) >> 61)
          goto LABEL_1172;
        v843 = v839 - v841;
        v844 = v843 >> 2;
        if (v843 >> 2 <= (unint64_t)(v842 + 1))
          v844 = v842 + 1;
        if ((unint64_t)v843 >= 0x7FFFFFFFFFFFFFF8)
          v845 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v845 = v844;
        if (v845)
          v845 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v845);
        else
          v846 = 0;
        v847 = (_QWORD *)(v845 + 8 * v842);
        *v847 = v837;
        v840 = v847 + 1;
        v848 = *(char **)(a1 + 2632);
        v849 = *(char **)(a1 + 2624);
        if (v848 != v849)
        {
          do
          {
            v850 = *((_QWORD *)v848 - 1);
            v848 -= 8;
            *--v847 = v850;
          }
          while (v848 != v849);
          v848 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v847;
        *(_QWORD *)(a1 + 2632) = v840;
        *(_QWORD *)(a1 + 2640) = v845 + 8 * v846;
        if (v848)
          operator delete(v848);
      }
      else
      {
        *v838 = v837;
        v840 = v838 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v840;
      v851 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v852 = (void *)operator new[]();
      bzero(v852, 4 * v851);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * j) = v852;
      v853 = *(_QWORD **)(a1 + 2632);
      v854 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v853 >= v854)
      {
        v856 = *(_QWORD *)(a1 + 2624);
        v857 = ((uint64_t)v853 - v856) >> 3;
        if ((unint64_t)(v857 + 1) >> 61)
          goto LABEL_1172;
        v858 = v854 - v856;
        v859 = v858 >> 2;
        if (v858 >> 2 <= (unint64_t)(v857 + 1))
          v859 = v857 + 1;
        if ((unint64_t)v858 >= 0x7FFFFFFFFFFFFFF8)
          v860 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v860 = v859;
        if (v860)
          v860 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v860);
        else
          v861 = 0;
        v862 = (_QWORD *)(v860 + 8 * v857);
        *v862 = v852;
        v855 = v862 + 1;
        v863 = *(char **)(a1 + 2632);
        v864 = *(char **)(a1 + 2624);
        if (v863 != v864)
        {
          do
          {
            v865 = *((_QWORD *)v863 - 1);
            v863 -= 8;
            *--v862 = v865;
          }
          while (v863 != v864);
          v863 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v862;
        *(_QWORD *)(a1 + 2632) = v855;
        *(_QWORD *)(a1 + 2640) = v860 + 8 * v861;
        if (v863)
          operator delete(v863);
      }
      else
      {
        *v853 = v852;
        v855 = v853 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v855;
      v866 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v867 = (void *)operator new[]();
      bzero(v867, 4 * v866);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * j) = v867;
      v868 = *(_QWORD **)(a1 + 2632);
      v869 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v868 >= v869)
      {
        v871 = *(_QWORD *)(a1 + 2624);
        v872 = ((uint64_t)v868 - v871) >> 3;
        if ((unint64_t)(v872 + 1) >> 61)
          goto LABEL_1172;
        v873 = v869 - v871;
        v874 = v873 >> 2;
        if (v873 >> 2 <= (unint64_t)(v872 + 1))
          v874 = v872 + 1;
        if ((unint64_t)v873 >= 0x7FFFFFFFFFFFFFF8)
          v875 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v875 = v874;
        if (v875)
          v875 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v875);
        else
          v876 = 0;
        v877 = (_QWORD *)(v875 + 8 * v872);
        *v877 = v867;
        v870 = v877 + 1;
        v878 = *(char **)(a1 + 2632);
        v879 = *(char **)(a1 + 2624);
        if (v878 != v879)
        {
          do
          {
            v880 = *((_QWORD *)v878 - 1);
            v878 -= 8;
            *--v877 = v880;
          }
          while (v878 != v879);
          v878 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v877;
        *(_QWORD *)(a1 + 2632) = v870;
        *(_QWORD *)(a1 + 2640) = v875 + 8 * v876;
        if (v878)
          operator delete(v878);
      }
      else
      {
        *v868 = v867;
        v870 = v868 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v870;
    }
  }
  if (maxFeatureVectors >= 1)
  {
    v881 = 0;
    do
    {
      if (*(_BYTE *)(a1 + 40))
        v882 = 2;
      else
        v882 = 1;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 208) + 24 * v881), v882);
      if (*(_BYTE *)(a1 + 2692))
      {
        v883 = *(unsigned int *)(a1 + 52);
        v884 = (void *)operator new[]();
        v885 = v884;
        if ((int)v883 >= 1)
          bzero(v884, 4 * v883);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v881) = v885;
        v886 = *(_QWORD **)(a1 + 2632);
        v887 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v886 >= v887)
        {
          v889 = *(_QWORD *)(a1 + 2624);
          v890 = ((uint64_t)v886 - v889) >> 3;
          if ((unint64_t)(v890 + 1) >> 61)
            goto LABEL_1172;
          v891 = v887 - v889;
          v892 = v891 >> 2;
          if (v891 >> 2 <= (unint64_t)(v890 + 1))
            v892 = v890 + 1;
          if ((unint64_t)v891 >= 0x7FFFFFFFFFFFFFF8)
            v893 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v893 = v892;
          if (v893)
            v893 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v893);
          else
            v894 = 0;
          v895 = (_QWORD *)(v893 + 8 * v890);
          *v895 = v885;
          v888 = v895 + 1;
          v896 = *(char **)(a1 + 2632);
          v897 = *(char **)(a1 + 2624);
          if (v896 != v897)
          {
            do
            {
              v898 = *((_QWORD *)v896 - 1);
              v896 -= 8;
              *--v895 = v898;
            }
            while (v896 != v897);
            v896 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v895;
          *(_QWORD *)(a1 + 2632) = v888;
          *(_QWORD *)(a1 + 2640) = v893 + 8 * v894;
          if (v896)
            operator delete(v896);
        }
        else
        {
          *v886 = v885;
          v888 = v886 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v888;
        v899 = *(unsigned int *)(a1 + 52);
        v900 = (void *)operator new[]();
        v901 = v900;
        if ((int)v899 >= 1)
          bzero(v900, 4 * v899);
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v881) = v901;
        v902 = *(_QWORD **)(a1 + 2632);
        v903 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v902 >= v903)
        {
          v905 = *(_QWORD *)(a1 + 2624);
          v906 = ((uint64_t)v902 - v905) >> 3;
          if ((unint64_t)(v906 + 1) >> 61)
            goto LABEL_1172;
          v907 = v903 - v905;
          v908 = v907 >> 2;
          if (v907 >> 2 <= (unint64_t)(v906 + 1))
            v908 = v906 + 1;
          if ((unint64_t)v907 >= 0x7FFFFFFFFFFFFFF8)
            v909 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v909 = v908;
          if (v909)
            v909 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v909);
          else
            v910 = 0;
          v911 = (_QWORD *)(v909 + 8 * v906);
          *v911 = v901;
          v904 = v911 + 1;
          v912 = *(char **)(a1 + 2632);
          v913 = *(char **)(a1 + 2624);
          if (v912 != v913)
          {
            do
            {
              v914 = *((_QWORD *)v912 - 1);
              v912 -= 8;
              *--v911 = v914;
            }
            while (v912 != v913);
            v912 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v911;
          *(_QWORD *)(a1 + 2632) = v904;
          *(_QWORD *)(a1 + 2640) = v909 + 8 * v910;
          if (v912)
            operator delete(v912);
        }
        else
        {
          *v902 = v901;
          v904 = v902 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v904;
      }
      v915 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v916 = (void *)operator new[]();
      bzero(v916, 4 * v915);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v881) = v916;
      v917 = *(_QWORD **)(a1 + 2632);
      v918 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v917 >= v918)
      {
        v920 = *(_QWORD *)(a1 + 2624);
        v921 = ((uint64_t)v917 - v920) >> 3;
        if ((unint64_t)(v921 + 1) >> 61)
          goto LABEL_1172;
        v922 = v918 - v920;
        v923 = v922 >> 2;
        if (v922 >> 2 <= (unint64_t)(v921 + 1))
          v923 = v921 + 1;
        if ((unint64_t)v922 >= 0x7FFFFFFFFFFFFFF8)
          v924 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v924 = v923;
        if (v924)
          v924 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v924);
        else
          v925 = 0;
        v926 = (_QWORD *)(v924 + 8 * v921);
        *v926 = v916;
        v919 = v926 + 1;
        v927 = *(char **)(a1 + 2632);
        v928 = *(char **)(a1 + 2624);
        if (v927 != v928)
        {
          do
          {
            v929 = *((_QWORD *)v927 - 1);
            v927 -= 8;
            *--v926 = v929;
          }
          while (v927 != v928);
          v927 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v926;
        *(_QWORD *)(a1 + 2632) = v919;
        *(_QWORD *)(a1 + 2640) = v924 + 8 * v925;
        if (v927)
          operator delete(v927);
      }
      else
      {
        *v917 = v916;
        v919 = v917 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v919;
      v930 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v931 = (void *)operator new[]();
      bzero(v931, 4 * v930);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v881) = v931;
      v932 = *(_QWORD **)(a1 + 2632);
      v933 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v932 >= v933)
      {
        v935 = *(_QWORD *)(a1 + 2624);
        v936 = ((uint64_t)v932 - v935) >> 3;
        if ((unint64_t)(v936 + 1) >> 61)
          goto LABEL_1172;
        v937 = v933 - v935;
        v938 = v937 >> 2;
        if (v937 >> 2 <= (unint64_t)(v936 + 1))
          v938 = v936 + 1;
        if ((unint64_t)v937 >= 0x7FFFFFFFFFFFFFF8)
          v939 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v939 = v938;
        if (v939)
          v939 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v939);
        else
          v940 = 0;
        v941 = (_QWORD *)(v939 + 8 * v936);
        *v941 = v931;
        v934 = v941 + 1;
        v942 = *(char **)(a1 + 2632);
        v943 = *(char **)(a1 + 2624);
        if (v942 != v943)
        {
          do
          {
            v944 = *((_QWORD *)v942 - 1);
            v942 -= 8;
            *--v941 = v944;
          }
          while (v942 != v943);
          v942 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v941;
        *(_QWORD *)(a1 + 2632) = v934;
        *(_QWORD *)(a1 + 2640) = v939 + 8 * v940;
        if (v942)
          operator delete(v942);
      }
      else
      {
        *v932 = v931;
        v934 = v932 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v934;
      if (!*(_BYTE *)(a1 + 1696))
      {
        v945 = *(unsigned int *)(a1 + 52);
        v946 = (void *)operator new[]();
        v947 = v946;
        if ((int)v945 >= 1)
          bzero(v946, 4 * v945);
        *(_QWORD *)(*(_QWORD *)(a1 + 960) + 8 * v881) = v947;
        v948 = *(_QWORD **)(a1 + 2632);
        v949 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v948 >= v949)
        {
          v951 = *(_QWORD *)(a1 + 2624);
          v952 = ((uint64_t)v948 - v951) >> 3;
          if ((unint64_t)(v952 + 1) >> 61)
            goto LABEL_1172;
          v953 = v949 - v951;
          v954 = v953 >> 2;
          if (v953 >> 2 <= (unint64_t)(v952 + 1))
            v954 = v952 + 1;
          if ((unint64_t)v953 >= 0x7FFFFFFFFFFFFFF8)
            v955 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v955 = v954;
          if (v955)
            v955 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v955);
          else
            v956 = 0;
          v957 = (_QWORD *)(v955 + 8 * v952);
          *v957 = v947;
          v950 = v957 + 1;
          v958 = *(char **)(a1 + 2632);
          v959 = *(char **)(a1 + 2624);
          if (v958 != v959)
          {
            do
            {
              v960 = *((_QWORD *)v958 - 1);
              v958 -= 8;
              *--v957 = v960;
            }
            while (v958 != v959);
            v958 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v957;
          *(_QWORD *)(a1 + 2632) = v950;
          *(_QWORD *)(a1 + 2640) = v955 + 8 * v956;
          if (v958)
            operator delete(v958);
        }
        else
        {
          *v948 = v947;
          v950 = v948 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v950;
        v961 = *(unsigned int *)(a1 + 52);
        v962 = (void *)operator new[]();
        v963 = v962;
        if ((int)v961 >= 1)
          bzero(v962, 4 * v961);
        *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v881) = v963;
        v964 = *(_QWORD **)(a1 + 2632);
        v965 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v964 >= v965)
        {
          v967 = *(_QWORD *)(a1 + 2624);
          v968 = ((uint64_t)v964 - v967) >> 3;
          if ((unint64_t)(v968 + 1) >> 61)
            goto LABEL_1172;
          v969 = v965 - v967;
          v970 = v969 >> 2;
          if (v969 >> 2 <= (unint64_t)(v968 + 1))
            v970 = v968 + 1;
          if ((unint64_t)v969 >= 0x7FFFFFFFFFFFFFF8)
            v971 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v971 = v970;
          if (v971)
            v971 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v971);
          else
            v972 = 0;
          v973 = (_QWORD *)(v971 + 8 * v968);
          *v973 = v963;
          v966 = v973 + 1;
          v974 = *(char **)(a1 + 2632);
          v975 = *(char **)(a1 + 2624);
          if (v974 != v975)
          {
            do
            {
              v976 = *((_QWORD *)v974 - 1);
              v974 -= 8;
              *--v973 = v976;
            }
            while (v974 != v975);
            v974 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v973;
          *(_QWORD *)(a1 + 2632) = v966;
          *(_QWORD *)(a1 + 2640) = v971 + 8 * v972;
          if (v974)
            operator delete(v974);
        }
        else
        {
          *v964 = v963;
          v966 = v964 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v966;
        v977 = *(unsigned int *)(a1 + 48);
        v978 = (void *)operator new[]();
        v979 = v978;
        if ((int)v977 >= 1)
          bzero(v978, 4 * v977);
        *(_QWORD *)(*(_QWORD *)(a1 + 816) + 8 * v881) = v979;
        v980 = *(_QWORD **)(a1 + 2632);
        v981 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v980 >= v981)
        {
          v983 = *(_QWORD *)(a1 + 2624);
          v984 = ((uint64_t)v980 - v983) >> 3;
          if ((unint64_t)(v984 + 1) >> 61)
            goto LABEL_1172;
          v985 = v981 - v983;
          v986 = v985 >> 2;
          if (v985 >> 2 <= (unint64_t)(v984 + 1))
            v986 = v984 + 1;
          if ((unint64_t)v985 >= 0x7FFFFFFFFFFFFFF8)
            v987 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v987 = v986;
          if (v987)
            v987 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v987);
          else
            v988 = 0;
          v989 = (_QWORD *)(v987 + 8 * v984);
          *v989 = v979;
          v982 = v989 + 1;
          v990 = *(char **)(a1 + 2632);
          v991 = *(char **)(a1 + 2624);
          if (v990 != v991)
          {
            do
            {
              v992 = *((_QWORD *)v990 - 1);
              v990 -= 8;
              *--v989 = v992;
            }
            while (v990 != v991);
            v990 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v989;
          *(_QWORD *)(a1 + 2632) = v982;
          *(_QWORD *)(a1 + 2640) = v987 + 8 * v988;
          if (v990)
            operator delete(v990);
        }
        else
        {
          *v980 = v979;
          v982 = v980 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v982;
        v993 = *(unsigned int *)(a1 + 52);
        v994 = (void *)operator new[]();
        v995 = v994;
        if ((int)v993 >= 1)
          bzero(v994, 4 * v993);
        *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v881) = v995;
        v996 = *(_QWORD **)(a1 + 2632);
        v997 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v996 >= v997)
        {
          v999 = *(_QWORD *)(a1 + 2624);
          v1000 = ((uint64_t)v996 - v999) >> 3;
          if ((unint64_t)(v1000 + 1) >> 61)
            goto LABEL_1172;
          v1001 = v997 - v999;
          v1002 = v1001 >> 2;
          if (v1001 >> 2 <= (unint64_t)(v1000 + 1))
            v1002 = v1000 + 1;
          if ((unint64_t)v1001 >= 0x7FFFFFFFFFFFFFF8)
            v1003 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1003 = v1002;
          if (v1003)
            v1003 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1003);
          else
            v1004 = 0;
          v1005 = (_QWORD *)(v1003 + 8 * v1000);
          *v1005 = v995;
          v998 = v1005 + 1;
          v1006 = *(char **)(a1 + 2632);
          v1007 = *(char **)(a1 + 2624);
          if (v1006 != v1007)
          {
            do
            {
              v1008 = *((_QWORD *)v1006 - 1);
              v1006 -= 8;
              *--v1005 = v1008;
            }
            while (v1006 != v1007);
            v1006 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1005;
          *(_QWORD *)(a1 + 2632) = v998;
          *(_QWORD *)(a1 + 2640) = v1003 + 8 * v1004;
          if (v1006)
            operator delete(v1006);
        }
        else
        {
          *v996 = v995;
          v998 = v996 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v998;
        v1009 = *(unsigned int *)(a1 + 52);
        v1010 = (void *)operator new[]();
        v1011 = v1010;
        if ((int)v1009 >= 1)
          bzero(v1010, 4 * v1009);
        *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8 * v881) = v1011;
        v1012 = *(_QWORD **)(a1 + 2632);
        v1013 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1012 >= v1013)
        {
          v1015 = *(_QWORD *)(a1 + 2624);
          v1016 = ((uint64_t)v1012 - v1015) >> 3;
          if ((unint64_t)(v1016 + 1) >> 61)
            goto LABEL_1172;
          v1017 = v1013 - v1015;
          v1018 = v1017 >> 2;
          if (v1017 >> 2 <= (unint64_t)(v1016 + 1))
            v1018 = v1016 + 1;
          if ((unint64_t)v1017 >= 0x7FFFFFFFFFFFFFF8)
            v1019 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1019 = v1018;
          if (v1019)
            v1019 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1019);
          else
            v1020 = 0;
          v1021 = (_QWORD *)(v1019 + 8 * v1016);
          *v1021 = v1011;
          v1014 = v1021 + 1;
          v1022 = *(char **)(a1 + 2632);
          v1023 = *(char **)(a1 + 2624);
          if (v1022 != v1023)
          {
            do
            {
              v1024 = *((_QWORD *)v1022 - 1);
              v1022 -= 8;
              *--v1021 = v1024;
            }
            while (v1022 != v1023);
            v1022 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1021;
          *(_QWORD *)(a1 + 2632) = v1014;
          *(_QWORD *)(a1 + 2640) = v1019 + 8 * v1020;
          if (v1022)
            operator delete(v1022);
        }
        else
        {
          *v1012 = v1011;
          v1014 = v1012 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1014;
        v1025 = *(unsigned int *)(a1 + 52);
        v1026 = (void *)operator new[]();
        v1027 = v1026;
        if ((int)v1025 >= 1)
          bzero(v1026, 4 * v1025);
        *(_QWORD *)(*(_QWORD *)(a1 + 864) + 8 * v881) = v1027;
        v1028 = *(_QWORD **)(a1 + 2632);
        v1029 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1028 >= v1029)
        {
          v1031 = *(_QWORD *)(a1 + 2624);
          v1032 = ((uint64_t)v1028 - v1031) >> 3;
          if ((unint64_t)(v1032 + 1) >> 61)
            goto LABEL_1172;
          v1033 = v1029 - v1031;
          v1034 = v1033 >> 2;
          if (v1033 >> 2 <= (unint64_t)(v1032 + 1))
            v1034 = v1032 + 1;
          if ((unint64_t)v1033 >= 0x7FFFFFFFFFFFFFF8)
            v1035 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1035 = v1034;
          if (v1035)
            v1035 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1035);
          else
            v1036 = 0;
          v1037 = (_QWORD *)(v1035 + 8 * v1032);
          *v1037 = v1027;
          v1030 = v1037 + 1;
          v1038 = *(char **)(a1 + 2632);
          v1039 = *(char **)(a1 + 2624);
          if (v1038 != v1039)
          {
            do
            {
              v1040 = *((_QWORD *)v1038 - 1);
              v1038 -= 8;
              *--v1037 = v1040;
            }
            while (v1038 != v1039);
            v1038 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1037;
          *(_QWORD *)(a1 + 2632) = v1030;
          *(_QWORD *)(a1 + 2640) = v1035 + 8 * v1036;
          if (v1038)
            operator delete(v1038);
        }
        else
        {
          *v1028 = v1027;
          v1030 = v1028 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1030;
        v1041 = *(unsigned int *)(a1 + 52);
        v1042 = (void *)operator new[]();
        v1043 = v1042;
        if ((int)v1041 >= 1)
          bzero(v1042, 4 * v1041);
        *(_QWORD *)(*(_QWORD *)(a1 + 936) + 8 * v881) = v1043;
        v1044 = *(_QWORD **)(a1 + 2632);
        v1045 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1044 >= v1045)
        {
          v1047 = *(_QWORD *)(a1 + 2624);
          v1048 = ((uint64_t)v1044 - v1047) >> 3;
          if ((unint64_t)(v1048 + 1) >> 61)
            goto LABEL_1172;
          v1049 = v1045 - v1047;
          v1050 = v1049 >> 2;
          if (v1049 >> 2 <= (unint64_t)(v1048 + 1))
            v1050 = v1048 + 1;
          if ((unint64_t)v1049 >= 0x7FFFFFFFFFFFFFF8)
            v1051 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1051 = v1050;
          if (v1051)
            v1051 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1051);
          else
            v1052 = 0;
          v1053 = (_QWORD *)(v1051 + 8 * v1048);
          *v1053 = v1043;
          v1046 = v1053 + 1;
          v1054 = *(char **)(a1 + 2632);
          v1055 = *(char **)(a1 + 2624);
          if (v1054 != v1055)
          {
            do
            {
              v1056 = *((_QWORD *)v1054 - 1);
              v1054 -= 8;
              *--v1053 = v1056;
            }
            while (v1054 != v1055);
            v1054 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1053;
          *(_QWORD *)(a1 + 2632) = v1046;
          *(_QWORD *)(a1 + 2640) = v1051 + 8 * v1052;
          if (v1054)
            operator delete(v1054);
        }
        else
        {
          *v1044 = v1043;
          v1046 = v1044 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1046;
      }
      ++v881;
    }
    while (v881 < maxFeatureVectors);
  }
}

void sub_19157FC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void LSTM<signed char>::targets()
{
  exitFramework(1);
}

uint64_t LSTM<signed char>::inputs(uint64_t a1)
{
  return a1 + 64;
}

_QWORD **LSTM<signed char>::outputs(uint64_t a1)
{
  _QWORD **v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (_QWORD **)(a1 + 792);
  std::vector<VVector<float>>::resize((char **)(a1 + 792), (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3);
  v3 = *(uint64_t **)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 168) - (_QWORD)v3;
  if (v4)
  {
    v5 = v4 >> 3;
    v6 = *v2;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      v7 = *v3++;
      *v6++ = v7;
      --v5;
    }
    while (v5);
  }
  return v2;
}

void LSTM<signed char>::deltas()
{
  exitFramework(1);
}

uint64_t LSTM<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 816;
}

uint64_t LSTM<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t LSTM<signed char>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  int v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  char v19[8];

  v5 = (int)a4;
  *(_QWORD *)v19 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v19[4], v19, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((_DWORD *)this + 18);
    v10 = *(_QWORD *)this;
    v11 = (int *)(*(_QWORD *)this + v9);
    v12 = *(_QWORD *)this + *((_QWORD *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      v13 = 0;
    }
    v14 = v9;
    *(_DWORD *)(a1 + 736) = v13;
    if (v10 + v9 <= v12)
    {
      v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      v14 = v9;
    }
    else
    {
      v15 = 0;
    }
    *(_DWORD *)(a1 + 740) = v15;
    v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v17 = 0;
    }
    *(_DWORD *)(a1 + 744) = v17;
  }
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)v19)
    exitFramework(3);
  VVector<signed char>::read(*(signed __int8 ***)(a1 + 2568), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52));
  VVector<signed char>::read(*(signed __int8 ***)(a1 + 2576), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52));
  VVector<signed char>::read(*(signed __int8 ***)(a1 + 2584), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52));
  MMatrix<signed char>::read(*(char **)(a1 + 2504), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 2512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 2520), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 2528), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 2536), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<signed char>::read(*(char **)(a1 + 2544), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<signed char>::read(*(char **)(a1 + 2552), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  return MMatrix<signed char>::read(*(char **)(a1 + 2560), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void LSTM<signed char>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  VVector<signed char>::write(*(char ***)(a1 + 2568), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52));
  VVector<signed char>::write(*(char ***)(a1 + 2576), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52));
  VVector<signed char>::write(*(char ***)(a1 + 2584), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52));
  MMatrix<signed char>::write(*(char ***)(a1 + 2504), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
}

void sub_19158005C()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 2512), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_191580074()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 2520), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_19158008C()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 2528), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_1915800A4()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 2536), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_1915800C0()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 2544), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_1915800DC()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<signed char>::write(*(char ***)(v3 + 2552), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_1915800F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int *v19;
  FILE *v20;
  uint64_t v21;

  MMatrix<signed char>::write(*(char ***)(v21 + 2560), v20, v19, v18, *(_DWORD *)(v21 + 52), *(_DWORD *)(v21 + 52));
}

_QWORD *LSTM<signed char>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;

  if (!lpsrc)
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    result = 0;
    goto LABEL_6;
  }
  if (!a3)
    goto LABEL_5;
LABEL_3:
LABEL_6:
  v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD **)(a1 + 2568);
    v10 = (_QWORD *)result[321];
    v11 = (_QWORD *)v5[321];
    do
    {
      *(_BYTE *)(*v9 + v8) = *(_BYTE *)(*v10 + v8) - *(_BYTE *)(*v11 + v8);
      ++v8;
    }
    while (v7 != v8);
    v7 = *(unsigned int *)(a1 + 52);
    if ((int)v7 >= 1)
    {
      v12 = 0;
      v13 = *(_QWORD **)(a1 + 2576);
      v14 = (_QWORD *)result[322];
      v15 = (_QWORD *)v5[322];
      do
      {
        *(_BYTE *)(*v13 + v12) = *(_BYTE *)(*v14 + v12) - *(_BYTE *)(*v15 + v12);
        ++v12;
      }
      while (v7 != v12);
      v7 = *(unsigned int *)(a1 + 52);
      if ((int)v7 >= 1)
      {
        v16 = 0;
        v17 = *(_QWORD **)(a1 + 2584);
        v18 = (_QWORD *)result[323];
        v19 = (_QWORD *)v5[323];
        do
        {
          *(_BYTE *)(*v17 + v16) = *(_BYTE *)(*v18 + v16) - *(_BYTE *)(*v19 + v16);
          ++v16;
        }
        while (v7 != v16);
        LODWORD(v7) = *(_DWORD *)(a1 + 52);
      }
    }
  }
  v20 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v20 >= 1)
  {
    v21 = 0;
    v22 = *(_QWORD **)(a1 + 2504);
    v23 = (_QWORD *)result[313];
    v24 = (_QWORD *)v5[313];
    do
    {
      *(_BYTE *)(*v22 + v21) = *(_BYTE *)(*v23 + v21) - *(_BYTE *)(*v24 + v21);
      ++v21;
    }
    while (v20 != v21);
    LODWORD(v7) = *(_DWORD *)(a1 + 52);
    v25 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v25 >= 1)
    {
      v26 = 0;
      v27 = *(_QWORD **)(a1 + 2520);
      v28 = (_QWORD *)result[315];
      v29 = (_QWORD *)v5[315];
      do
      {
        *(_BYTE *)(*v27 + v26) = *(_BYTE *)(*v28 + v26) - *(_BYTE *)(*v29 + v26);
        ++v26;
      }
      while (v25 != v26);
      LODWORD(v7) = *(_DWORD *)(a1 + 52);
      v30 = (*(_DWORD *)(a1 + 48) * v7);
      if ((int)v30 >= 1)
      {
        v31 = 0;
        v32 = *(_QWORD **)(a1 + 2512);
        v33 = (_QWORD *)result[314];
        v34 = (_QWORD *)v5[314];
        do
        {
          *(_BYTE *)(*v32 + v31) = *(_BYTE *)(*v33 + v31) - *(_BYTE *)(*v34 + v31);
          ++v31;
        }
        while (v30 != v31);
        LODWORD(v7) = *(_DWORD *)(a1 + 52);
        v35 = (*(_DWORD *)(a1 + 48) * v7);
        if ((int)v35 >= 1)
        {
          v36 = 0;
          v37 = *(_QWORD **)(a1 + 2528);
          v38 = (_QWORD *)result[316];
          v39 = (_QWORD *)v5[316];
          do
          {
            *(_BYTE *)(*v37 + v36) = *(_BYTE *)(*v38 + v36) - *(_BYTE *)(*v39 + v36);
            ++v36;
          }
          while (v35 != v36);
          LODWORD(v7) = *(_DWORD *)(a1 + 52);
        }
      }
    }
  }
  if ((_DWORD)v7)
  {
    v40 = 0;
    v41 = *(_QWORD **)(a1 + 2536);
    v42 = (_QWORD *)result[317];
    v43 = (v7 * v7);
    v44 = (_QWORD *)v5[317];
    do
    {
      *(_BYTE *)(*v41 + v40) = *(_BYTE *)(*v42 + v40) - *(_BYTE *)(*v44 + v40);
      ++v40;
    }
    while (v43 != v40);
    v45 = *(_DWORD *)(a1 + 52);
    if (v45)
    {
      v46 = 0;
      v47 = *(_QWORD **)(a1 + 2552);
      v48 = (_QWORD *)result[319];
      v49 = (v45 * v45);
      v50 = (_QWORD *)v5[319];
      do
      {
        *(_BYTE *)(*v47 + v46) = *(_BYTE *)(*v48 + v46) - *(_BYTE *)(*v50 + v46);
        ++v46;
      }
      while (v49 != v46);
      v51 = *(_DWORD *)(a1 + 52);
      if (v51)
      {
        v52 = 0;
        v53 = *(_QWORD **)(a1 + 2544);
        v54 = (_QWORD *)result[318];
        v55 = (v51 * v51);
        v56 = (_QWORD *)v5[318];
        do
        {
          *(_BYTE *)(*v53 + v52) = *(_BYTE *)(*v54 + v52) - *(_BYTE *)(*v56 + v52);
          ++v52;
        }
        while (v55 != v52);
        v57 = *(_DWORD *)(a1 + 52);
        if (v57)
        {
          v58 = 0;
          v59 = *(_QWORD **)(a1 + 2560);
          v60 = (_QWORD *)result[320];
          v61 = (v57 * v57);
          v62 = (_QWORD *)v5[320];
          do
          {
            *(_BYTE *)(*v59 + v58) = *(_BYTE *)(*v60 + v58) - *(_BYTE *)(*v62 + v58);
            ++v58;
          }
          while (v61 != v58);
        }
      }
    }
  }
  return result;
}

void LSTM<signed char>::compareModels(uint64_t a1, void *lpsrc, _QWORD **a3)
{
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  void *__p;

  v3 = a3;
  if (lpsrc)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
LABEL_3:
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  v6 = *(unsigned int *)(a1 + 52);
  if ((int)v6 <= 0)
  {
    v11 = __p;
LABEL_15:
    v12 = *v11 | 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    do
    {
      while (!v8)
      {
        v8 = 0;
        if (++v7 == v6)
        {
          v11 = __p;
          goto LABEL_16;
        }
      }
      v9 = *(unsigned __int8 *)(*v3[321] + v7);
      v10 = *(unsigned __int8 *)(*v5[321] + v7);
      v8 = v9 == v10;
      ++v7;
    }
    while (v7 != v6);
    v11 = __p;
    if (v9 == v10)
      goto LABEL_15;
LABEL_16:
    v12 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  *v11 = v12;
  if ((int)v6 < 1)
  {
LABEL_25:
    v17 = v12 | 2;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    do
    {
      while (!v14)
      {
        v14 = 0;
        if (++v13 == v6)
          goto LABEL_26;
      }
      v15 = *(unsigned __int8 *)(*v3[322] + v13);
      v16 = *(unsigned __int8 *)(*v5[322] + v13);
      v14 = v15 == v16;
      ++v13;
    }
    while (v13 != v6);
    if (v15 == v16)
      goto LABEL_25;
LABEL_26:
    v17 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *v11 = v17;
  if ((int)v6 < 1)
  {
LABEL_35:
    v22 = v17 | 4;
  }
  else
  {
    v18 = 0;
    v19 = 1;
    do
    {
      while (!v19)
      {
        v19 = 0;
        if (++v18 == v6)
          goto LABEL_36;
      }
      v20 = *(unsigned __int8 *)(*v3[323] + v18);
      v21 = *(unsigned __int8 *)(*v5[323] + v18);
      v19 = v20 == v21;
      ++v18;
    }
    while (v18 != v6);
    if (v20 == v21)
      goto LABEL_35;
LABEL_36:
    v22 = v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *v11 = v22;
  v23 = (*(_DWORD *)(a1 + 48) * v6);
  if ((int)v23 < 1)
  {
LABEL_45:
    v28 = v22 | 1;
  }
  else
  {
    v24 = 0;
    v25 = 1;
    do
    {
      while (!v25)
      {
        v25 = 0;
        if (++v24 == v23)
          goto LABEL_46;
      }
      v26 = *(unsigned __int8 *)(*v3[313] + v24);
      v27 = *(unsigned __int8 *)(*v5[313] + v24);
      v25 = v26 == v27;
      ++v24;
    }
    while (v24 != v23);
    if (v26 == v27)
      goto LABEL_45;
LABEL_46:
    v28 = v22 & 0xFFFFFFFFFFFFFFFELL;
  }
  *v11 = v28;
  if ((int)v23 < 1)
  {
LABEL_55:
    v33 = v28 | 2;
  }
  else
  {
    v29 = 0;
    v30 = 1;
    do
    {
      while (!v30)
      {
        v30 = 0;
        if (++v29 == v23)
          goto LABEL_56;
      }
      v31 = *(unsigned __int8 *)(*v3[315] + v29);
      v32 = *(unsigned __int8 *)(*v5[315] + v29);
      v30 = v31 == v32;
      ++v29;
    }
    while (v29 != v23);
    if (v31 == v32)
      goto LABEL_55;
LABEL_56:
    v33 = v28 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *v11 = v33;
  if ((int)v23 < 1)
  {
LABEL_65:
    v38 = v33 | 4;
  }
  else
  {
    v34 = 0;
    v35 = 1;
    do
    {
      while (!v35)
      {
        v35 = 0;
        if (++v34 == v23)
          goto LABEL_66;
      }
      v36 = *(unsigned __int8 *)(*v3[314] + v34);
      v37 = *(unsigned __int8 *)(*v5[314] + v34);
      v35 = v36 == v37;
      ++v34;
    }
    while (v34 != v23);
    if (v36 == v37)
      goto LABEL_65;
LABEL_66:
    v38 = v33 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *v11 = v38;
  if ((int)v23 < 1)
  {
LABEL_75:
    v43 = v38 | 8;
  }
  else
  {
    v39 = 0;
    v40 = 1;
    do
    {
      while (!v40)
      {
        v40 = 0;
        if (++v39 == v23)
          goto LABEL_76;
      }
      v41 = *(unsigned __int8 *)(*v3[316] + v39);
      v42 = *(unsigned __int8 *)(*v5[316] + v39);
      v40 = v41 == v42;
      ++v39;
    }
    while (v39 != v23);
    if (v41 == v42)
      goto LABEL_75;
LABEL_76:
    v43 = v38 & 0xFFFFFFFFFFFFFFF7;
  }
  *v11 = v43;
  v44 = (v6 * v6);
  if ((_DWORD)v6)
  {
    v45 = 0;
    v46 = 1;
    do
    {
      while (!v46)
      {
        v46 = 0;
        if (++v45 == v44)
          goto LABEL_86;
      }
      v47 = *(unsigned __int8 *)(*v3[317] + v45);
      v48 = *(unsigned __int8 *)(*v5[317] + v45);
      v46 = v47 == v48;
      ++v45;
    }
    while (v45 != v44);
    if (v47 == v48)
      goto LABEL_85;
LABEL_86:
    v49 = v43 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
LABEL_85:
    v49 = v43 | 1;
  }
  *v11 = v49;
  if ((_DWORD)v6)
  {
    v50 = 0;
    v51 = 1;
    do
    {
      while (!v51)
      {
        v51 = 0;
        if (++v50 == v44)
          goto LABEL_96;
      }
      v52 = *(unsigned __int8 *)(*v3[319] + v50);
      v53 = *(unsigned __int8 *)(*v5[319] + v50);
      v51 = v52 == v53;
      ++v50;
    }
    while (v50 != v44);
    if (v52 == v53)
      goto LABEL_95;
LABEL_96:
    v54 = v49 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
LABEL_95:
    v54 = v49 | 2;
  }
  *v11 = v54;
  if ((_DWORD)v6)
  {
    v55 = 0;
    v56 = 1;
    do
    {
      v56 = v56 && *(unsigned __int8 *)(*v3[318] + v55) == *(unsigned __int8 *)(*v5[318] + v55);
      ++v55;
    }
    while (v55 != v44);
  }
  operator delete(v11);
}

float32x4_t **LSTM<signed char>::addGradient(uint64_t a1, void *lpsrc)
{
  float32x4_t ***v3;
  float32x4_t **result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  float32x4_t **v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  float32x4_t **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float32x4_t **v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float32x4_t **v21;
  uint64_t v22;
  _QWORD *v23;
  float32x4_t **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  float32x4_t **v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  float32x4_t **v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  float32x4_t **v39;
  uint64_t v40;

  if (lpsrc)
  else
    v3 = 0;
  VVector<signed char>::add<signed char>(*(float32x4_t ***)(a1 + 2568), v3[321], *(_DWORD *)(a1 + 52));
  VVector<signed char>::add<signed char>(*(float32x4_t ***)(a1 + 2576), v3[322], *(_DWORD *)(a1 + 52));
  result = VVector<signed char>::add<signed char>(*(float32x4_t ***)(a1 + 2584), v3[323], *(_DWORD *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 52);
  v6 = (*(_DWORD *)(a1 + 48) * v5);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD **)(a1 + 2504);
    v9 = v3[313];
    do
    {
      *(_BYTE *)(*v8 + v7) += (*v9)->i8[v7];
      ++v7;
    }
    while (v6 != v7);
    v5 = *(_DWORD *)(a1 + 52);
    v10 = (*(_DWORD *)(a1 + 48) * v5);
    if ((int)v10 >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD **)(a1 + 2512);
      v13 = v3[314];
      do
      {
        *(_BYTE *)(*v12 + v11) += (*v13)->i8[v11];
        ++v11;
      }
      while (v10 != v11);
      v5 = *(_DWORD *)(a1 + 52);
      v14 = (*(_DWORD *)(a1 + 48) * v5);
      if ((int)v14 >= 1)
      {
        v15 = 0;
        v16 = *(_QWORD **)(a1 + 2520);
        v17 = v3[315];
        do
        {
          *(_BYTE *)(*v16 + v15) += (*v17)->i8[v15];
          ++v15;
        }
        while (v14 != v15);
        v5 = *(_DWORD *)(a1 + 52);
        v18 = (*(_DWORD *)(a1 + 48) * v5);
        if ((int)v18 >= 1)
        {
          v19 = 0;
          v20 = *(_QWORD **)(a1 + 2528);
          v21 = v3[316];
          do
          {
            *(_BYTE *)(*v20 + v19) += (*v21)->i8[v19];
            ++v19;
          }
          while (v18 != v19);
          v5 = *(_DWORD *)(a1 + 52);
        }
      }
    }
  }
  if (v5)
  {
    v22 = 0;
    v23 = *(_QWORD **)(a1 + 2536);
    v24 = v3[317];
    v25 = (v5 * v5);
    do
    {
      *(_BYTE *)(*v23 + v22) += (*v24)->i8[v22];
      ++v22;
    }
    while (v25 != v22);
    v26 = *(_DWORD *)(a1 + 52);
    if (v26)
    {
      v27 = 0;
      v28 = *(_QWORD **)(a1 + 2544);
      v29 = v3[318];
      v30 = (v26 * v26);
      do
      {
        *(_BYTE *)(*v28 + v27) += (*v29)->i8[v27];
        ++v27;
      }
      while (v30 != v27);
      v31 = *(_DWORD *)(a1 + 52);
      if (v31)
      {
        v32 = 0;
        v33 = *(_QWORD **)(a1 + 2552);
        v34 = v3[319];
        v35 = (v31 * v31);
        do
        {
          *(_BYTE *)(*v33 + v32) += (*v34)->i8[v32];
          ++v32;
        }
        while (v35 != v32);
        v36 = *(_DWORD *)(a1 + 52);
        if (v36)
        {
          v37 = 0;
          v38 = *(_QWORD **)(a1 + 2560);
          v39 = v3[320];
          v40 = (v36 * v36);
          do
          {
            *(_BYTE *)(*v38 + v37) += (*v39)->i8[v37];
            ++v37;
          }
          while (v40 != v37);
        }
      }
    }
  }
  return result;
}

void LSTM<signed char>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  exitFramework(23);
}

uint64_t LSTM<signed char>::clipModel(uint64_t result, float a2)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  float v6;
  float v7;
  uint64_t v8;
  _QWORD *v9;
  float v10;
  float v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  float v34;
  float v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  float v39;
  float v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  float v45;
  float v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  float v51;
  float v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  float v57;
  float v58;

  v2 = -a2;
  v3 = *(unsigned int *)(result + 52);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD **)(result + 2568);
    do
    {
      v6 = (float)*(char *)(*v5 + v4);
      v7 = -a2;
      if (v6 < v2 || (v7 = a2, v6 > a2))
        *(_BYTE *)(*v5 + v4) = (int)v7;
      ++v4;
    }
    while (v3 != v4);
    v3 = *(unsigned int *)(result + 52);
    if ((int)v3 >= 1)
    {
      v8 = 0;
      v9 = *(_QWORD **)(result + 2576);
      do
      {
        v10 = (float)*(char *)(*v9 + v8);
        v11 = -a2;
        if (v10 < v2 || (v11 = a2, v10 > a2))
          *(_BYTE *)(*v9 + v8) = (int)v11;
        ++v8;
      }
      while (v3 != v8);
      v3 = *(unsigned int *)(result + 52);
      if ((int)v3 >= 1)
      {
        v12 = 0;
        v13 = *(_QWORD **)(result + 2584);
        do
        {
          v14 = (float)*(char *)(*v13 + v12);
          v15 = -a2;
          if (v14 < v2 || (v15 = a2, v14 > a2))
            *(_BYTE *)(*v13 + v12) = (int)v15;
          ++v12;
        }
        while (v3 != v12);
        LODWORD(v3) = *(_DWORD *)(result + 52);
      }
    }
  }
  v16 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v16 >= 1)
  {
    v17 = 0;
    v18 = *(_QWORD **)(result + 2504);
    do
    {
      v19 = (float)*(char *)(*v18 + v17);
      v20 = -a2;
      if (v19 < v2 || (v20 = a2, v19 > a2))
        *(_BYTE *)(*v18 + v17) = (int)v20;
      ++v17;
    }
    while (v16 != v17);
    LODWORD(v3) = *(_DWORD *)(result + 52);
    v21 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v21 >= 1)
    {
      v22 = 0;
      v23 = *(_QWORD **)(result + 2512);
      do
      {
        v24 = (float)*(char *)(*v23 + v22);
        v25 = -a2;
        if (v24 < v2 || (v25 = a2, v24 > a2))
          *(_BYTE *)(*v23 + v22) = (int)v25;
        ++v22;
      }
      while (v21 != v22);
      LODWORD(v3) = *(_DWORD *)(result + 52);
      v26 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v26 >= 1)
      {
        v27 = 0;
        v28 = *(_QWORD **)(result + 2520);
        do
        {
          v29 = (float)*(char *)(*v28 + v27);
          v30 = -a2;
          if (v29 < v2 || (v30 = a2, v29 > a2))
            *(_BYTE *)(*v28 + v27) = (int)v30;
          ++v27;
        }
        while (v26 != v27);
        LODWORD(v3) = *(_DWORD *)(result + 52);
        v31 = (*(_DWORD *)(result + 48) * v3);
        if ((int)v31 >= 1)
        {
          v32 = 0;
          v33 = *(_QWORD **)(result + 2528);
          do
          {
            v34 = (float)*(char *)(*v33 + v32);
            v35 = -a2;
            if (v34 < v2 || (v35 = a2, v34 > a2))
              *(_BYTE *)(*v33 + v32) = (int)v35;
            ++v32;
          }
          while (v31 != v32);
          LODWORD(v3) = *(_DWORD *)(result + 52);
        }
      }
    }
  }
  if ((_DWORD)v3)
  {
    v36 = 0;
    v37 = *(_QWORD **)(result + 2536);
    v38 = (v3 * v3);
    do
    {
      v39 = (float)*(char *)(*v37 + v36);
      v40 = -a2;
      if (v39 < v2 || (v40 = a2, v39 > a2))
        *(_BYTE *)(*v37 + v36) = (int)v40;
      ++v36;
    }
    while (v38 != v36);
    v41 = *(_DWORD *)(result + 52);
    if (v41)
    {
      v42 = 0;
      v43 = *(_QWORD **)(result + 2544);
      v44 = (v41 * v41);
      do
      {
        v45 = (float)*(char *)(*v43 + v42);
        v46 = -a2;
        if (v45 < v2 || (v46 = a2, v45 > a2))
          *(_BYTE *)(*v43 + v42) = (int)v46;
        ++v42;
      }
      while (v44 != v42);
      v47 = *(_DWORD *)(result + 52);
      if (v47)
      {
        v48 = 0;
        v49 = *(_QWORD **)(result + 2552);
        v50 = (v47 * v47);
        do
        {
          v51 = (float)*(char *)(*v49 + v48);
          v52 = -a2;
          if (v51 < v2 || (v52 = a2, v51 > a2))
            *(_BYTE *)(*v49 + v48) = (int)v52;
          ++v48;
        }
        while (v50 != v48);
        v53 = *(_DWORD *)(result + 52);
        if (v53)
        {
          v54 = 0;
          v55 = *(_QWORD **)(result + 2560);
          v56 = (v53 * v53);
          do
          {
            v57 = (float)*(char *)(*v55 + v54);
            v58 = -a2;
            if (v57 < v2 || (v58 = a2, v57 > a2))
              *(_BYTE *)(*v55 + v54) = (int)v58;
            ++v54;
          }
          while (v56 != v54);
        }
      }
    }
  }
  return result;
}

uint64_t LSTM<signed char>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v2 = *(unsigned int *)(result + 52);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD **)(result + 2568);
    do
    {
      *(_BYTE *)(*v4 + v3) = (int)(float)((float)*(char *)(*v4 + v3) * a2);
      ++v3;
    }
    while (v2 != v3);
    v2 = *(unsigned int *)(result + 52);
    if ((int)v2 >= 1)
    {
      v5 = 0;
      v6 = *(_QWORD **)(result + 2576);
      do
      {
        *(_BYTE *)(*v6 + v5) = (int)(float)((float)*(char *)(*v6 + v5) * a2);
        ++v5;
      }
      while (v2 != v5);
      v2 = *(unsigned int *)(result + 52);
      if ((int)v2 >= 1)
      {
        v7 = 0;
        v8 = *(_QWORD **)(result + 2584);
        do
        {
          *(_BYTE *)(*v8 + v7) = (int)(float)((float)*(char *)(*v8 + v7) * a2);
          ++v7;
        }
        while (v2 != v7);
        LODWORD(v2) = *(_DWORD *)(result + 52);
      }
    }
  }
  v9 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = *(_QWORD **)(result + 2504);
    do
    {
      *(_BYTE *)(*v11 + v10) = (int)(float)((float)*(char *)(*v11 + v10) * a2);
      ++v10;
    }
    while (v9 != v10);
    LODWORD(v2) = *(_DWORD *)(result + 52);
    v12 = (*(_DWORD *)(result + 48) * v2);
    if ((int)v12 >= 1)
    {
      v13 = 0;
      v14 = *(_QWORD **)(result + 2512);
      do
      {
        *(_BYTE *)(*v14 + v13) = (int)(float)((float)*(char *)(*v14 + v13) * a2);
        ++v13;
      }
      while (v12 != v13);
      LODWORD(v2) = *(_DWORD *)(result + 52);
      v15 = (*(_DWORD *)(result + 48) * v2);
      if ((int)v15 >= 1)
      {
        v16 = 0;
        v17 = *(_QWORD **)(result + 2520);
        do
        {
          *(_BYTE *)(*v17 + v16) = (int)(float)((float)*(char *)(*v17 + v16) * a2);
          ++v16;
        }
        while (v15 != v16);
        LODWORD(v2) = *(_DWORD *)(result + 52);
        v18 = (*(_DWORD *)(result + 48) * v2);
        if ((int)v18 >= 1)
        {
          v19 = 0;
          v20 = *(_QWORD **)(result + 2528);
          do
          {
            *(_BYTE *)(*v20 + v19) = (int)(float)((float)*(char *)(*v20 + v19) * a2);
            ++v19;
          }
          while (v18 != v19);
          LODWORD(v2) = *(_DWORD *)(result + 52);
        }
      }
    }
  }
  if ((_DWORD)v2)
  {
    v21 = 0;
    v22 = *(_QWORD **)(result + 2536);
    v23 = (v2 * v2);
    do
    {
      *(_BYTE *)(*v22 + v21) = (int)(float)((float)*(char *)(*v22 + v21) * a2);
      ++v21;
    }
    while (v23 != v21);
    v24 = *(_DWORD *)(result + 52);
    if (v24)
    {
      v25 = 0;
      v26 = *(_QWORD **)(result + 2544);
      v27 = (v24 * v24);
      do
      {
        *(_BYTE *)(*v26 + v25) = (int)(float)((float)*(char *)(*v26 + v25) * a2);
        ++v25;
      }
      while (v27 != v25);
      v28 = *(_DWORD *)(result + 52);
      if (v28)
      {
        v29 = 0;
        v30 = *(_QWORD **)(result + 2552);
        v31 = (v28 * v28);
        do
        {
          *(_BYTE *)(*v30 + v29) = (int)(float)((float)*(char *)(*v30 + v29) * a2);
          ++v29;
        }
        while (v31 != v29);
        v32 = *(_DWORD *)(result + 52);
        if (v32)
        {
          v33 = 0;
          v34 = *(_QWORD **)(result + 2560);
          v35 = (v32 * v32);
          do
          {
            *(_BYTE *)(*v34 + v33) = (int)(float)((float)*(char *)(*v34 + v33) * a2);
            ++v33;
          }
          while (v35 != v33);
        }
      }
    }
  }
  return result;
}

void LSTM<signed char>::allocInitialState(uint64_t a1, void **a2)
{
  int v4;
  _QWORD *v5;
  int v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  int v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD *)operator new();
      VVector<float>::VVector(v5, *(_DWORD *)(a1 + 52), 0);
      v6 = *(_DWORD *)(a1 + 52);
      v8 = (char *)a2[1];
      v7 = (char *)a2[2];
      if (v8 >= v7)
      {
        v10 = (v8 - (_BYTE *)*a2) >> 4;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60)
          goto LABEL_37;
        v12 = v7 - (_BYTE *)*a2;
        if (v12 >> 3 > v11)
          v11 = v12 >> 3;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
        else
          v14 = 0;
        v15 = v13 + 16 * v10;
        *(_DWORD *)v15 = v6;
        *(_QWORD *)(v15 + 8) = v5;
        v17 = (char *)*a2;
        v16 = (char *)a2[1];
        v18 = (char *)v15;
        if (v16 != *a2)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
            v18 -= 16;
            v16 -= 16;
          }
          while (v16 != v17);
          v16 = (char *)*a2;
        }
        v9 = (void *)(v15 + 16);
        *a2 = v18;
        a2[1] = (void *)(v15 + 16);
        a2[2] = (void *)(v13 + 16 * v14);
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v8 = v6;
        *((_QWORD *)v8 + 1) = v5;
        v9 = v8 + 16;
      }
      a2[1] = v9;
      v19 = (_QWORD *)operator new();
      VVector<float>::VVector(v19, *(_DWORD *)(a1 + 52), 0);
      v20 = *(_DWORD *)(a1 + 52);
      v22 = (char *)a2[1];
      v21 = (char *)a2[2];
      if (v22 >= v21)
      {
        v24 = (v22 - (_BYTE *)*a2) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
LABEL_37:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v26 = v21 - (_BYTE *)*a2;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v27);
        else
          v28 = 0;
        v29 = v27 + 16 * v24;
        *(_DWORD *)v29 = v20;
        *(_QWORD *)(v29 + 8) = v19;
        v31 = (char *)*a2;
        v30 = (char *)a2[1];
        v32 = (char *)v29;
        if (v30 != *a2)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
            v32 -= 16;
            v30 -= 16;
          }
          while (v30 != v31);
          v30 = (char *)*a2;
        }
        v23 = (void *)(v29 + 16);
        *a2 = v32;
        a2[1] = (void *)(v29 + 16);
        a2[2] = (void *)(v27 + 16 * v28);
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_DWORD *)v22 = v20;
        *((_QWORD *)v22 + 1) = v19;
        v23 = v22 + 16;
      }
      a2[1] = v23;
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_191581474(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

int *LSTM<signed char>::saveState(int *result, uint64_t *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = a3;
    v9 = *a4;
    do
    {
      v10 = v6[13];
      v11 = v10 * v7;
      v12 = *(_QWORD *)(*((_QWORD *)v6 + 20) + 8 * v8);
      v13 = *a2;
      *(_DWORD *)(v13 + 16 * v9) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v12 + 4 * (int)v10 * v7), 4 * v10);
      v14 = *a4 + 1;
      *a4 = v14;
      v15 = v6[13];
      v16 = *a2;
      *(_DWORD *)(v16 + 16 * v14) = v15;
      result = (int *)memmove(**(void ***)(v16 + 16 * *a4 + 8), (const void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + 8 * v8) + 4 * v11), 4 * v15);
      v9 = *a4 + 1;
      *a4 = v9;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *LSTM<signed char>::restoreState(int *result, _QWORD *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = a3;
    do
    {
      v9 = v6[13] * v7;
      v10 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 20) + 8 * v8) + 4 * v9);
      v11 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + 8 * v8) + 4 * v9);
      v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      v13 = *a4;
      *a4 = v13 + 1;
      result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void LSTM<signed char>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v6 = 0;
    v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      v8 = *a3 + 1;
      *a3 = v8;
      bzero(**(void ***)(*a2 + 16 * v8 + 8), 4 * *(int *)(*a2 + 16 * v8));
      v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void LSTM<signed char>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v19;

  if (*(_BYTE *)(a1 + 2692))
  {
    v2 = *(_QWORD *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v3 = *(_QWORD *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v4 = *(_QWORD *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v5 = *(_QWORD *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 40))(v5, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v6 = *(_QWORD *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v7 = *(_QWORD *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v8 = *(_QWORD *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v9 = *(_QWORD *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 40))(v9, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 16))(*(_QWORD *)(a1 + 1552));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1560) + 16))(*(_QWORD *)(a1 + 1560));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1568) + 16))(*(_QWORD *)(a1 + 1568));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1576) + 16))(*(_QWORD *)(a1 + 1576));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 16))(*(_QWORD *)(a1 + 1584));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1592) + 16))(*(_QWORD *)(a1 + 1592));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1600) + 16))(*(_QWORD *)(a1 + 1600));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1608) + 16))(*(_QWORD *)(a1 + 1608));
    v10 = *(_QWORD *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 40))(v10, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v11 = *(_QWORD *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v12 = *(_QWORD *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 40))(v12, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v13 = *(_QWORD *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v14 = *(_QWORD *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 40))(v14, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v15 = *(_QWORD *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 40))(v15, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v16 = *(_QWORD *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 40))(v16, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v17 = *(_QWORD *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v19 < 0)
      operator delete(__p[0]);
  }
}

void sub_191581B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *LSTM<signed char>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  double v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *result;
  uint64_t v30;
  char *v31;

  v4 = **(_QWORD **)(a1 + 2504);
  v5 = *(_DWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v6;
  v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v5, v6)));
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v9 = v4;
    v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v6;
    *(_DWORD *)(v9 + 12) = v5;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = **(_QWORD **)(a1 + 2512);
  if ((unint64_t)v10 >= *(_QWORD *)(a2 + 16))
  {
    v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v10 = v11;
    v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v6;
    *((_DWORD *)v10 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v12;
  v13 = **(_QWORD **)(a1 + 2528);
  if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
  {
    v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v12 = v13;
    v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v6;
    *((_DWORD *)v12 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v14;
  v15 = **(_QWORD **)(a1 + 2520);
  if ((unint64_t)v14 >= *(_QWORD *)(a2 + 16))
  {
    v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v8);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(_QWORD *)v14 = v15;
    v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v6;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v16;
  v17 = **(_QWORD **)(a1 + 2536);
  v18 = __PAIR64__(v6, LODWORD(v7));
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 16))
  {
    v19 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, COERCE_DOUBLE(__PAIR64__(v6, LODWORD(v7))));
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v16 = v17;
    v19 = v16 + 16;
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v19;
  v20 = **(_QWORD **)(a1 + 2544);
  if ((unint64_t)v19 >= *(_QWORD *)(a2 + 16))
  {
    v21 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v20, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v19 = v20;
    v21 = v19 + 16;
    *((_DWORD *)v19 + 2) = v6;
    *((_DWORD *)v19 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v21;
  v22 = **(_QWORD **)(a1 + 2560);
  if ((unint64_t)v21 >= *(_QWORD *)(a2 + 16))
  {
    v23 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v22, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v21 = v22;
    v23 = v21 + 16;
    *((_DWORD *)v21 + 2) = v6;
    *((_DWORD *)v21 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v24 = **(_QWORD **)(a1 + 2552);
  if ((unint64_t)v23 >= *(_QWORD *)(a2 + 16))
  {
    v25 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v24, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(_QWORD *)v23 = v24;
    v25 = v23 + 16;
    *((_DWORD *)v23 + 2) = v6;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v25;
  v26 = **(_QWORD **)(a1 + 2568);
  HIDWORD(v7) = 0;
  if ((unint64_t)v25 >= *(_QWORD *)(a2 + 16))
  {
    v27 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v26, v7);
    v6 = *(_DWORD *)(a1 + 52);
    *(_QWORD *)&v7 = v6;
  }
  else
  {
    *(_QWORD *)v25 = v26;
    v27 = v25 + 16;
    *((_DWORD *)v25 + 2) = v6;
    *((_DWORD *)v25 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v27;
  v28 = **(_QWORD **)(a1 + 2576);
  if ((unint64_t)v27 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v28, v7);
    v6 = *(_DWORD *)(a1 + 52);
    *(_QWORD *)&v7 = v6;
  }
  else
  {
    *(_QWORD *)v27 = v28;
    result = v27 + 16;
    *((_DWORD *)v27 + 2) = v6;
    *((_DWORD *)v27 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = result;
  v30 = **(_QWORD **)(a1 + 2584);
  if ((unint64_t)result >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v30, v7);
    v31 = result;
  }
  else
  {
    *(_QWORD *)result = v30;
    v31 = result + 16;
    *((_DWORD *)result + 2) = v6;
    *((_DWORD *)result + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v31;
  return result;
}

__n128 LSTM<signed char>::setWeightMatrices(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  v2 = *(_OWORD **)(a2 + 8);
  v3 = *((_QWORD *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(_QWORD *)(a2 + 8) = v2;
  *v2 = *(v2 - 1);
  a1[30] = *(_QWORD *)v2;
  a1[314] = a1 + 30;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4 - 16;
  *v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(_QWORD *)v2;
  a1[316] = a1 + 32;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5 - 16;
  *v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(_QWORD *)v2;
  v6 = a1 + 31;
  v6[284] = v6;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7 - 16;
  *v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(_QWORD *)v2;
  v6[286] = v6 + 2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v8 - 16;
  *v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(_QWORD *)v2;
  v6[287] = v6 + 3;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9 - 16;
  *v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(_QWORD *)v2;
  v6[289] = v6 + 5;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10 - 16;
  *v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(_QWORD *)v2;
  v6[288] = v6 + 4;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v11 - 16;
  *v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(_QWORD *)v2;
  v6[290] = v6 + 6;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v12 - 16;
  *v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(_QWORD *)v2;
  v6[291] = v6 + 7;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v13 - 16;
  result = *(__n128 *)(v13 - 32);
  *v2 = result;
  v6[8] = *(_QWORD *)v2;
  v6[292] = v6 + 8;
  *(_QWORD *)(a2 + 8) -= 16;
  return result;
}

uint64_t LSTM<signed char>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t LSTM<signed char>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void LSTM<signed char>::allocAllBuffers(uint64_t a1)
{
  void *__p;
  char v3;

  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from allocAll");
  LSTM<signed char>::init(a1);
  if (v3 < 0)
    operator delete(__p);
}

void sub_19158204C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<signed char>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[329];
  v3 = a1[328];
  if (v2 == v3)
  {
    v3 = a1[329];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = a1[329];
        v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[332];
  v7 = a1[331];
  if (v6 == v7)
  {
    v7 = a1[332];
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C8077774924);
        v6 = a1[332];
        v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    v3 = a1[328];
  }
  a1[329] = v3;
  a1[332] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 123);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 153);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 138);
  return SparseMatrix<float>::cleanupAllBuffers(a1 + 168);
}

uint64_t LSTM<signed char>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t LSTM<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t LSTM<signed char>::update(uint64_t result, float a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t m;
  uint64_t v19;
  uint64_t n;
  uint64_t v21;
  uint64_t ii;

  v2 = result;
  v3 = (int)a2;
  v4 = *(_DWORD *)(result + 52);
  if (*(int *)(result + 56) < 1)
  {
    v5 = (v4 * *(_DWORD *)(result + 48));
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = (float)v3;
      do
      {
        *(_BYTE *)(*(_QWORD *)(result + 232) + v6) = (int)(float)((float)*(char *)(*(_QWORD *)(result + 232) + v6)
                                                                + (float)(*(float *)(*(_QWORD *)(result + 1464) + 4 * v6)
                                                                        * v7));
        ++v6;
      }
      while (v5 != v6);
      for (i = 0; i != v5; ++i)
        *(_BYTE *)(*(_QWORD *)(result + 248) + i) = (int)(float)((float)*(char *)(*(_QWORD *)(result + 248) + i)
                                                               + (float)(*(float *)(*(_QWORD *)(result + 1480) + 4 * i)
                                                                       * v7));
      for (j = 0; j != v5; ++j)
        *(_BYTE *)(*(_QWORD *)(result + 240) + j) = (int)(float)((float)*(char *)(*(_QWORD *)(result + 240) + j)
                                                               + (float)(*(float *)(*(_QWORD *)(result + 1472) + 4 * j)
                                                                       * v7));
      for (k = 0; k != v5; ++k)
        *(_BYTE *)(*(_QWORD *)(result + 256) + k) = (int)(float)((float)*(char *)(*(_QWORD *)(result + 256) + k)
                                                               + (float)(*(float *)(*(_QWORD *)(result + 1488) + 4 * k)
                                                                       * v7));
    }
  }
  else
  {
    SparseMatrix<float>::add<signed char>(result + 984, v4, (float)v3);
    SparseMatrix<float>::add<signed char>(v2 + 1224, *(_DWORD *)(v2 + 52), (float)v3);
    SparseMatrix<float>::add<signed char>(v2 + 1104, *(_DWORD *)(v2 + 52), (float)v3);
    result = SparseMatrix<float>::add<signed char>(v2 + 1344, *(_DWORD *)(v2 + 52), (float)v3);
  }
  if (v4)
  {
    v11 = 0;
    v12 = (v4 * v4);
    v13 = (float)v3;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 264) + v11) = (int)(float)((float)*(char *)(*(_QWORD *)(v2 + 264) + v11)
                                                           + (float)(*(float *)(*(_QWORD *)(v2 + 1496) + 4 * v11) * v13));
      ++v11;
    }
    while (v12 != v11);
    v14 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 280) + v14) = (int)(float)((float)*(char *)(*(_QWORD *)(v2 + 280) + v14)
                                                           + (float)(*(float *)(*(_QWORD *)(v2 + 1512) + 4 * v14) * v13));
      ++v14;
    }
    while (v12 != v14);
    v15 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 272) + v15) = (int)(float)((float)*(char *)(*(_QWORD *)(v2 + 272) + v15)
                                                           + (float)(*(float *)(*(_QWORD *)(v2 + 1504) + 4 * v15) * v13));
      ++v15;
    }
    while (v12 != v15);
    v16 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 288) + v16) = (int)(float)((float)*(char *)(*(_QWORD *)(v2 + 288) + v16)
                                                           + (float)(*(float *)(*(_QWORD *)(v2 + 1520) + 4 * v16) * v13));
      ++v16;
    }
    while (v12 != v16);
  }
  else
  {
    v13 = (float)v3;
  }
  v17 = *(unsigned int *)(v2 + 52);
  if ((int)v17 >= 1)
  {
    for (m = 0; m != v17; ++m)
      *(_BYTE *)(*(_QWORD *)(v2 + 296) + m) += (int)(float)(*(float *)(*(_QWORD *)(v2 + 1528) + 4 * m) * v13);
    v19 = *(unsigned int *)(v2 + 52);
    if ((int)v19 >= 1)
    {
      for (n = 0; n != v19; ++n)
        *(_BYTE *)(*(_QWORD *)(v2 + 312) + n) += (int)(float)(*(float *)(*(_QWORD *)(v2 + 1544) + 4 * n) * v13);
      v21 = *(unsigned int *)(v2 + 52);
      if ((int)v21 >= 1)
      {
        for (ii = 0; ii != v21; ++ii)
          *(_BYTE *)(*(_QWORD *)(v2 + 304) + ii) += (int)(float)(*(float *)(*(_QWORD *)(v2 + 1536) + 4 * ii) * v13);
      }
    }
  }
  return result;
}

void LSTM<signed char>::backward(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void **v6;
  void **v7;
  int v8;
  void **v9;
  void **v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t **v23;
  uint64_t v24;
  float *v25;
  char *v26;
  float32x4_t *v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  float *v35;
  char *v36;
  float *v37;
  uint64_t v38;
  float v39;
  float v40;
  int v41;
  float *v42;
  char *v43;
  uint64_t v44;
  float v45;
  float v46;
  int v47;
  float v48;
  uint64_t v50;
  size_t v51;
  float32x4_t **v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  void **v80;
  void **v81;
  void **v82;
  int v84;
  void **v85;
  _BOOL4 v86;
  _BOOL4 v87;
  float32x4_t **v88;
  int v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  void *__p;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  float32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;

  v89 = a5 - 1;
  if (a5 >= 1)
  {
    v85 = (void **)(a1 + 1648);
    v6 = (void **)(a1 + 1656);
    v7 = (void **)(a1 + 1672);
    v80 = (void **)(a1 + 1688);
    v81 = (void **)(a1 + 1680);
    v8 = a5 - 1;
    v82 = (void **)(a1 + 1664);
    do
    {
      v9 = v7;
      v10 = v6;
      v11 = v89 - v8;
      if (*(_BYTE *)(a1 + 2672))
      {
        v12 = v11 < v89;
      }
      else
      {
        v11 = v8;
        v12 = v8 > 0;
      }
      v86 = v12;
      if (*(_BYTE *)(a1 + 2672))
        v13 = v11 > 0;
      else
        v13 = v11 < v89;
      if (*(_BYTE *)(a1 + 2672))
        v14 = v11 - 1;
      else
        v14 = v11 + 1;
      if (*(_BYTE *)(a1 + 2672))
        v15 = v11 + 1;
      else
        v15 = v11 - 1;
      v84 = v15;
      v16 = v11;
      memmove(*(void **)(*(_QWORD *)(a1 + 840) + 8 * v11), *(const void **)(*a4 + 8 * v11), 4 * *(int *)(a1 + 52));
      v87 = v13;
      if (v13)
        VVector<float>::internalMul((float **)(*(_QWORD *)(a1 + 840) + 8 * v16), (float **)(*(_QWORD *)(a1 + 936) + 8 * v14), *(int8x16_t ***)(a1 + 2560), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      v17 = *(float **)(*(_QWORD *)(a1 + 352) + 8 * v16);
      v18 = *(float **)(*(_QWORD *)(a1 + 376) + 8 * v16);
      v19 = *(float **)(*(_QWORD *)(a1 + 424) + 8 * v16);
      v20 = *(float **)(*(_QWORD *)(a1 + 400) + 8 * v16);
      v21 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v16);
      v103 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v16);
      v104 = v21;
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1640), v20, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::applyPrimeDerivative(v85, v18, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      v6 = v10;
      VVector<float>::applyPrimeDerivative(v10, v17, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      v7 = v9;
      VVector<float>::applyForwardActivation(v9, v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyPrimeDerivative(v82, v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyForwardActivation(v81, *(float **)(*(_QWORD *)(a1 + 88) + 8 * v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::applyPrimeDerivative(v80, *(float **)(*(_QWORD *)(a1 + 88) + 8 * v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 864) + 8 * v16), (float32x4_t **)(a1 + 1640), (float32x4_t **)v81, (float32x4_t **)(*(_QWORD *)(a1 + 840) + 8 * v16), *(_DWORD *)(a1 + 52));
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 960) + 8 * v16), (float32x4_t **)v80, &v103, (float32x4_t **)(*(_QWORD *)(a1 + 840) + 8 * v16), *(_DWORD *)(a1 + 52));
      v22 = *(_QWORD *)(a1 + 960);
      v23 = (float32x4_t **)(v22 + 8 * v16);
      v24 = *(unsigned int *)(a1 + 52);
      if ((int)v24 < 1)
      {
        if (!v87)
        {
          v33 = v86;
          goto LABEL_30;
        }
        v34 = v14;
        v102 = *(float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v14);
        v33 = v86;
      }
      else
      {
        v25 = *(float **)(*(_QWORD *)(a1 + 864) + 8 * v16);
        v26 = **(char ***)(a1 + 2584);
        v27 = *v23;
        v28 = (float *)*v23;
        v29 = *(unsigned int *)(a1 + 52);
        do
        {
          v30 = *v25++;
          v31 = v30;
          v32 = *v26++;
          *v28 = *v28 + (float)(v31 * (float)v32);
          ++v28;
          --v29;
        }
        while (v29);
        v33 = v86;
        if (!v87)
          goto LABEL_30;
        v34 = v14;
        v102 = *(float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v14);
        v35 = *(float **)(*(_QWORD *)(a1 + 888) + 8 * v14);
        v36 = **(char ***)(a1 + 2576);
        v37 = (float *)v27;
        v38 = v24;
        do
        {
          v39 = *v35++;
          v40 = v39;
          v41 = *v36++;
          *v37 = *v37 + (float)(v40 * (float)v41);
          ++v37;
          --v38;
        }
        while (v38);
        v42 = *(float **)(*(_QWORD *)(a1 + 912) + 8 * v14);
        v43 = **(char ***)(a1 + 2568);
        v44 = v24;
        do
        {
          v45 = *v42++;
          v46 = v45;
          v47 = *v43++;
          v27->f32[0] = v27->f32[0] + (float)(v46 * (float)v47);
          v27 = (float32x4_t *)((char *)v27 + 4);
          --v44;
        }
        while (v44);
      }
      VVector<float>::mulAddV(v23, (float32x4_t **)(v22 + 8 * v34), &v102, v24);
      v22 = *(_QWORD *)(a1 + 960);
      LODWORD(v24) = *(_DWORD *)(a1 + 52);
LABEL_30:
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 936) + 8 * v16), (float32x4_t **)v82, (float32x4_t **)(v22 + 8 * v16), &v104, v24);
      if (v33)
        VVector<float>::mul((void **)(*(_QWORD *)(a1 + 888) + 8 * v16), (float32x4_t **)v85, (float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v16), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v84), *(_DWORD *)(a1 + 52));
      v48 = VVector<float>::mul((void **)(*(_QWORD *)(a1 + 912) + 8 * v16), (float32x4_t **)v10, (float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v16), (float32x4_t **)v9, *(_DWORD *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t, float))a1)(a1, v48) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 816) + 8 * v16), 4 * *(int *)(a1 + 48));
        VVector<float>::internalMul((float **)(*(_QWORD *)(a1 + 816) + 8 * v16), (float **)(*(_QWORD *)(a1 + 912) + 8 * v16), *(int8x16_t ***)(a1 + 2504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.0);
      }
    }
    while (v8-- > 0);
  }
  v50 = *(unsigned int *)(a1 + 52);
  if ((int)v50 <= 0)
  {
    v52 = (float32x4_t **)(a1 + 1536);
    v88 = (float32x4_t **)(a1 + 1544);
  }
  else
  {
    v51 = 4 * v50;
    bzero(*(void **)(a1 + 1528), 4 * v50);
    v52 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v51);
    v88 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v51);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
  if (a5 > 1)
  {
    v53 = 1;
    v54 = a5 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v55 = v54;
      else
        v55 = v53;
      if (*(_BYTE *)(a1 + 2672))
        v56 = 1;
      else
        v56 = -1;
      v57 = v55 + v56;
      if (*(_BYTE *)(a1 + 2672))
        v58 = a5 - 2;
      else
        v58 = 1;
      v59 = v55 == v58;
      VVector<float>::mulAddV((float32x4_t **)(a1 + 1528), (float32x4_t **)(*(_QWORD *)(a1 + 912) + 8 * v55), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v57), *(_DWORD *)(a1 + 52));
      VVector<float>::mulAddV(v52, (float32x4_t **)(*(_QWORD *)(a1 + 888) + 8 * v55), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v57), *(_DWORD *)(a1 + 52));
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 912) + 8 * v55), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v57), (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 888) + 8 * v55), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v57), (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 864) + 8 * v55), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v57), (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 936) + 8 * v55), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v57), (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      ++v53;
      --v54;
    }
    while (v54 != -1);
    v60 = 1;
    v61 = a5 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v62 = v61;
      else
        v62 = v60;
      if (*(_BYTE *)(a1 + 2672))
        v63 = a5 - 2;
      else
        v63 = 1;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 888) + 8 * v62), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v62), (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v62 == v63);
      }
      else
      {
        v64 = *(_QWORD *)(a1 + 888);
        v65 = *(_QWORD *)(a1 + 208) + 24 * v62;
        v100 = 0;
        v101 = 0;
        v99 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v99, *(const void **)v65, *(_QWORD *)(v65 + 8), (uint64_t)(*(_QWORD *)(v65 + 8) - *(_QWORD *)v65) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1104, *(int **)(v64 + 8 * v62), (uint64_t)v99, *(_DWORD *)(a1 + 52));
        if (v99)
        {
          v100 = v99;
          operator delete(v99);
        }
      }
      ++v60;
      --v61;
    }
    while (v61 != -1);
  }
  if (a5 >= 1)
  {
    v66 = 0;
    v67 = v89;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v68 = v67;
      else
        v68 = v66;
      if (*(_BYTE *)(a1 + 2672))
        v69 = v89;
      else
        v69 = 0;
      v70 = v68;
      VVector<float>::mulAddV(v88, (float32x4_t **)(*(_QWORD *)(a1 + 864) + 8 * v68), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v68), *(_DWORD *)(a1 + 52));
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        v77 = v70 == v69;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 912) + 8 * v70), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v70), (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 864) + 8 * v70), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v70), (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 936) + 8 * v70), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v70), (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
      }
      else
      {
        v71 = *(_QWORD *)(a1 + 912);
        v72 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v97 = 0;
        v98 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v72, *(_QWORD *)(v72 + 8), (uint64_t)(*(_QWORD *)(v72 + 8) - *(_QWORD *)v72) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 984, *(int **)(v71 + 8 * v70), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          v97 = __p;
          operator delete(__p);
        }
        v73 = *(_QWORD *)(a1 + 864);
        v74 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v94 = 0;
        v95 = 0;
        v93 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v93, *(const void **)v74, *(_QWORD *)(v74 + 8), (uint64_t)(*(_QWORD *)(v74 + 8) - *(_QWORD *)v74) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1224, *(int **)(v73 + 8 * v70), (uint64_t)v93, *(_DWORD *)(a1 + 52));
        if (v93)
        {
          v94 = v93;
          operator delete(v93);
        }
        v75 = *(_QWORD *)(a1 + 936);
        v76 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v91 = 0;
        v92 = 0;
        v90 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v90, *(const void **)v76, *(_QWORD *)(v76 + 8), (uint64_t)(*(_QWORD *)(v76 + 8) - *(_QWORD *)v76) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1344, *(int **)(v75 + 8 * v70), (uint64_t)v90, *(_DWORD *)(a1 + 52));
        if (v90)
        {
          v91 = v90;
          operator delete(v90);
        }
      }
      ++v66;
      --v67;
    }
    while (v67 != -1);
  }
}

void LSTM<signed char>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  signed int v17;
  int v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  char v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  float *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  int v48;
  float *v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  float *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  int v61;
  float *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  float *v66;
  uint64_t *v67;
  uint64_t v68;
  float *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  float *v74;
  float *v75;
  float v76;
  float v77;
  float v78;
  int v79;
  uint64_t v80;
  float *v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char **v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  float *v93;
  int v94;
  BOOL v95;
  uint64_t *v96;
  int v97;
  int v98;
  signed int v99;
  int v102;
  _BOOL4 v103;
  void *v104;
  char v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  char v111;
  void *__p;
  char v113;
  void *v114;
  char v115;
  void *v116[2];
  char v117;

  if (a4 < 0x2000000)
    v8 = 1;
  else
    v8 = HIBYTE(a4);
  v9 = *(_QWORD *)(a1 + 2680);
  if (v9)
    v95 = *(_BYTE *)(v9 + 600) != 0;
  else
    v95 = 0;
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = *(_QWORD *)(a1 + 2680);
  }
  v102 = v10;
  if (!v9 || (v11 = *(float *)(v9 + 604), v11 <= 0.0))
    v11 = 50.0;
  v12 = *(unsigned __int8 *)(a1 + 2672);
  std::string::basic_string[abi:ne180100]<0>(v116, "LSTMv2");
  if (a5 && v12)
    exitFramework(34);
  v13 = a4 & 0xFFFFFF;
  if (v117 < 0)
    operator delete(v116[0]);
  if (a5)
    v14 = *(_BYTE *)(a1 + 42) == 0;
  else
    v14 = 0;
  v15 = v14;
  v16 = v102;
  if (v13 > v15)
  {
    v98 = v8;
    v99 = v13 - 1;
    v96 = (uint64_t *)(a1 + 752);
    v97 = a4 & 0xFFFFFF;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v17 = v13 + ~v15;
      else
        v17 = v15;
      if (*(_BYTE *)(a1 + 2672))
        v18 = 1;
      else
        v18 = -1;
      if (*(_BYTE *)(a1 + 2672))
        v19 = v17 < v99;
      else
        v19 = v17 > 0;
      v103 = v19;
      v20 = *(unsigned __int8 *)(a1 + 42);
      v21 = v17;
      if (((*(_BYTE *)(a1 + 42) != 0) & v16) != 0)
        v22 = 1;
      else
        v22 = v17;
      v23 = *(_QWORD *)(a1 + 64);
      if (v16)
      {
        bzero(*(void **)(v23 + 8 * v22), 4 * *(int *)(a1 + 48));
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v22) + 4 * **(int **)(*a3 + 24 * v17)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v23 + 8 * v22), *(const void **)(*a2 + 8 * v22), 4 * *(int *)(a1 + 44));
      }
      v24 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v22) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      if (v16)
      {
        v25 = *(_DWORD *)(a1 + 48);
        v26 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v17);
        *v26 = **(_DWORD **)(*a3 + 24 * v17);
        if (v24)
          v26[1] = v25 - 1;
      }
      v27 = *(_QWORD *)(a1 + 136);
      if (v8 == 1)
        memcpy(*(void **)(v27 + 8 * v22), *(const void **)(*(_QWORD *)(a1 + 64) + 8 * v22), 4 * *(int *)(a1 + 48));
      else
        memmove(*(void **)(v27 + 8 * v22), *(const void **)(*a2 + 8 * v22), 4 * *(_DWORD *)(a1 + 44) * v8);
      if (v8 > *(_DWORD *)(a1 + 2688))
        exitFramework(83724);
      if (v20)
        v28 = 1;
      else
        v28 = v17;
      if (*(_BYTE *)(a1 + 2692))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 544) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 568) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 616) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 592) + 8 * v28), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(_QWORD *)(a1 + 352) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      v29 = *(_QWORD *)(a1 + 2680);
      if (v29)
      {
        v30 = *(_DWORD *)(v29 + 40);
        v31 = !*(_BYTE *)(v29 + 20) && (v30 == 5 || v30 == 2) && *(_DWORD *)(v29 + 44) == 6;
        if (v30 == 5 || v30 == 2)
        {
          if (v31)
            goto LABEL_148;
          v14 = *(_DWORD *)(v29 + 60) == 22;
          v32 = v14;
          v33 = v103;
          if (!v14)
            v33 = 0;
          if (v33)
LABEL_148:
            LSTM<signed char>::computeXTimesWSparseOrDenseCombined(a1, *(_DWORD *)(a1 + 52));
          goto LABEL_70;
        }
        if (v31)
          goto LABEL_148;
      }
      v32 = 0;
LABEL_70:
      v34 = *(_QWORD *)(a1 + 208) + 24 * v17;
      LSTM<signed char>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(_QWORD *)(a1 + 424) + 8 * v28), *(uint64_t **)(a1 + 2528), *(const void **)v34, *(_QWORD *)(v34 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      if (v103 && (v32 & 1) == 0)
LABEL_147:
        exitFramework(353);
      v35 = *(_QWORD *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(v116, "cix");
      if (v35 && *(_BYTE *)(v35 + 244))
        exitFramework(200);
      if (v117 < 0)
        operator delete(v116[0]);
      v36 = (uint64_t *)(*(_QWORD *)(a1 + 424) + 8 * v28);
      v37 = *(_DWORD *)(a1 + 52);
      v38 = (v37 * v8);
      if ((int)v38 >= 1)
      {
        v39 = (float *)*v36;
        do
        {
          v40 = -1035468800;
          if (*v39 < -50.0 || (v40 = 1112014848, *v39 > 50.0))
            *(_DWORD *)v39 = v40;
          ++v39;
          --v38;
        }
        while (v38);
      }
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 520) + 8 * v28), v36, v8, v37, *(_DWORD *)(a1 + 740));
      v41 = *(_QWORD *)(a1 + 208) + 24 * v17;
      LSTM<signed char>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(_QWORD *)(a1 + 352) + 8 * v28), *(uint64_t **)(a1 + 2504), *(const void **)v41, *(_QWORD *)(v41 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      v42 = *(_QWORD *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v114, "gix");
      if (v42 && *(_BYTE *)(v42 + 244))
        exitFramework(200);
      if (v115 < 0)
        operator delete(v114);
      v43 = v17 + v18;
      if (v103)
      {
        if ((v32 & 1) == 0)
          goto LABEL_147;
        v44 = *(_QWORD *)(a1 + 2680);
        v45 = *(_QWORD *)(a1 + 352);
        v46 = *(char ***)(a1 + 2568);
        v47 = *(_QWORD *)(a1 + 184);
        v48 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&__p, "gix");
        v49 = *(float **)(v45 + 8 * v28);
        v8 = v98;
        LSTM<signed char>::addOptionalPeepholeVector(a1, v44, v49, v46, *(float **)(v47 + 8 * v43), v98, v48);
        if (v113 < 0)
          operator delete(__p);
        v32 = 1;
        v16 = v102;
      }
      v50 = (uint64_t *)(*(_QWORD *)(a1 + 352) + 8 * v28);
      v51 = *(_DWORD *)(a1 + 52);
      v52 = (v51 * v8);
      if ((int)v52 >= 1)
      {
        v53 = (float *)*v50;
        do
        {
          v54 = -1035468800;
          if (*v53 < -50.0 || (v54 = 1112014848, *v53 > 50.0))
            *(_DWORD *)v53 = v54;
          ++v53;
          --v52;
        }
        while (v52);
      }
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 448) + 8 * v28), v50, v8, v51, *(_DWORD *)(a1 + 736));
      v55 = *(_QWORD *)(a1 + 208) + 24 * (int)v21;
      LSTM<signed char>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(_QWORD *)(a1 + 376) + 8 * v28), *(uint64_t **)(a1 + 2512), *(const void **)v55, *(_QWORD *)(v55 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      v56 = *(_QWORD *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v110, "gfx");
      if (v56 && *(_BYTE *)(v56 + 244))
        exitFramework(200);
      if (v111 < 0)
        operator delete(v110);
      if (v103)
      {
        if ((v32 & 1) == 0)
          goto LABEL_147;
        v57 = *(_QWORD *)(a1 + 2680);
        v58 = *(_QWORD *)(a1 + 376);
        v59 = *(char ***)(a1 + 2576);
        v60 = *(_QWORD *)(a1 + 184);
        v61 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&v108, "gfx");
        v62 = *(float **)(v60 + 8 * v43);
        v8 = v98;
        LSTM<signed char>::addOptionalPeepholeVector(a1, v57, *(float **)(v58 + 8 * v28), v59, v62, v98, v61);
        v16 = v102;
        if (v109 < 0)
          operator delete(v108);
      }
      v63 = *(_QWORD *)(a1 + 2680);
      if (v63)
      {
        v64 = *(_DWORD *)(a1 + 52);
        if (*(_BYTE *)(v63 + 601))
        {
          v65 = (v64 * v8);
          if ((int)v65 >= 1)
          {
            v66 = *(float **)(*(_QWORD *)(a1 + 376) + 8 * v28);
            do
            {
              *v66 = *v66 + 1.0;
              ++v66;
              --v65;
            }
            while (v65);
          }
        }
      }
      else
      {
        v64 = *(_DWORD *)(a1 + 52);
      }
      v67 = (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v28);
      v68 = (v64 * v8);
      if ((int)v68 >= 1)
      {
        v69 = (float *)*v67;
        do
        {
          v70 = -1035468800;
          if (*v69 < -50.0 || (v70 = 1112014848, *v69 > 50.0))
            *(_DWORD *)v69 = v70;
          ++v69;
          --v68;
        }
        while (v68);
      }
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 472) + 8 * v28), v67, v8, v64, *(_DWORD *)(a1 + 736));
      VVector<float>::mulV((float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v21), (float32x4_t **)(*(_QWORD *)(a1 + 520) + 8 * v28), (float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v28), *(_DWORD *)(a1 + 52) * v8);
      if (v103)
      {
        if (v95)
        {
          v71 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v71 >= 1)
          {
            v72 = *(_QWORD *)(a1 + 184);
            v73 = *(float **)(v72 + 8 * v43);
            v74 = *(float **)(*(_QWORD *)(a1 + 448) + 8 * v28);
            v75 = *(float **)(v72 + 8 * v21);
            do
            {
              v76 = *v73++;
              v77 = v76;
              v78 = *v74++;
              *v75 = *v75 + (float)(v77 * (float)(1.0 - v78));
              ++v75;
              --v71;
            }
            while (v71);
          }
        }
        else
        {
          VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v21), (float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v28), (float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v43), *(_DWORD *)(a1 + 52) * v8);
        }
      }
      v79 = *(_DWORD *)(a1 + 52);
      v80 = (v79 * v8);
      if ((int)v80 >= 1)
      {
        v81 = *(float **)(*(_QWORD *)(a1 + 184) + 8 * v21);
        do
        {
          v82 = -v11;
          if (*v81 < (float)-v11 || (v82 = v11, *v81 > v11))
            *v81 = v82;
          ++v81;
          --v80;
        }
        while (v80);
      }
      v83 = *(_QWORD *)(a1 + 208) + 24 * (int)v21;
      LSTM<signed char>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(_QWORD *)(a1 + 400) + 8 * v28), *(uint64_t **)(a1 + 2520), *(const void **)v83, *(_QWORD *)(v83 + 8), v8, v79, *(_DWORD *)(a1 + 48));
      v84 = *(_QWORD *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v106, "gox");
      if (v84 && *(_BYTE *)(v84 + 244))
        exitFramework(200);
      if (v107 < 0)
        operator delete(v106);
      v85 = *(_QWORD *)(a1 + 2680);
      v86 = *(_QWORD *)(a1 + 400);
      v87 = *(char ***)(a1 + 2584);
      v88 = *(_QWORD *)(a1 + 184);
      v89 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v104, "gox");
      LSTM<signed char>::addOptionalPeepholeVector(a1, v85, *(float **)(v86 + 8 * v28), v87, *(float **)(v88 + 8 * v21), v8, v89);
      if (v105 < 0)
        operator delete(v104);
      v90 = (uint64_t *)(*(_QWORD *)(a1 + 400) + 8 * v28);
      v91 = *(_DWORD *)(a1 + 52);
      v92 = (v91 * v8);
      v16 = v102;
      v13 = v97;
      if ((int)v92 >= 1)
      {
        v93 = (float *)*v90;
        do
        {
          v94 = -1035468800;
          if (*v93 < -50.0 || (v94 = 1112014848, *v93 > 50.0))
            *(_DWORD *)v93 = v94;
          ++v93;
          --v92;
        }
        while (v92);
      }
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 496) + 8 * v28), v90, v8, v91, *(_DWORD *)(a1 + 736));
      applyForwardActivation(v96, (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * v21), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mulV((float32x4_t **)(*(_QWORD *)(a1 + 160) + 8 * v21), (float32x4_t **)v96, (float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v28), *(_DWORD *)(a1 + 52) * v8);
      if (*(_BYTE *)(a1 + 2692))
      {
        memcpy(*(void **)(*(_QWORD *)(a1 + 112) + 8 * v21), *(const void **)(*(_QWORD *)(a1 + 160) + 8 * v21), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v21), *(const void **)(*(_QWORD *)(a1 + 184) + 8 * v21), 4 * *(int *)(a1 + 52));
      }
      ++v15;
    }
    while (v15 != v97);
  }
}

void sub_1915837D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<signed char>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2672] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      LSTM<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A768 = 0;
      qword_1EE21A770 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &LSTM<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &LSTM<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2672] = 0;
  return result;
}

uint64_t LSTM<signed char>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[2672] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *LSTM<signed char>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2496) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 2504) = result + 232;
  *(_QWORD *)(a1 + 2520) = result + 248;
  *(_QWORD *)(a1 + 2512) = result + 240;
  *(_QWORD *)(a1 + 2528) = result + 256;
  *(_QWORD *)(a1 + 2536) = result + 264;
  *(_QWORD *)(a1 + 2552) = result + 280;
  *(_QWORD *)(a1 + 2544) = result + 272;
  *(_QWORD *)(a1 + 2560) = result + 288;
  *(_QWORD *)(a1 + 2568) = result + 296;
  *(_QWORD *)(a1 + 2576) = result + 304;
  *(_QWORD *)(a1 + 2584) = result + 312;
  *(_QWORD *)(a1 + 2592) = result + 320;
  *(_QWORD *)(a1 + 2600) = result + 328;
  *(_QWORD *)(a1 + 2608) = result + 336;
  *(_QWORD *)(a1 + 2616) = result + 344;
  return result;
}

void LSTM<signed char>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2496))
  {
    exitFramework(34);
  }
  exitFramework(1);
}

void LSTM<signed char>::computeError()
{
  exitFramework(1);
}

void LSTM<signed char>::log2Probability()
{
  exitFramework(0);
}

void LSTM<signed char>::~LSTM(uint64_t a1)
{
  LSTM<signed char>::~LSTM(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t LSTM<signed char>::~LSTM(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void **v44;

  *(_QWORD *)a1 = off_1E2D57E48;
  LSTM<signed char>::cleanupAllBuffers((_QWORD *)a1);
  v2 = *(_QWORD *)(a1 + 1552);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    *(_QWORD *)(a1 + 1552) = 0;
    v3 = *(_QWORD *)(a1 + 1560);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
    *(_QWORD *)(a1 + 1560) = 0;
    v4 = *(_QWORD *)(a1 + 1568);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    *(_QWORD *)(a1 + 1568) = 0;
    v5 = *(_QWORD *)(a1 + 1576);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    *(_QWORD *)(a1 + 1576) = 0;
    v6 = *(_QWORD *)(a1 + 1584);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    *(_QWORD *)(a1 + 1584) = 0;
    v7 = *(_QWORD *)(a1 + 1592);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
    *(_QWORD *)(a1 + 1592) = 0;
    v8 = *(_QWORD *)(a1 + 1600);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8);
    *(_QWORD *)(a1 + 1600) = 0;
    v9 = *(_QWORD *)(a1 + 1608);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
    *(_QWORD *)(a1 + 1608) = 0;
  }
  v10 = *(void **)(a1 + 2648);
  if (v10)
  {
    *(_QWORD *)(a1 + 2656) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 2624);
  if (v11)
  {
    *(_QWORD *)(a1 + 2632) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 2424) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2432));
  *(_QWORD *)(a1 + 2352) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2360));
  *(_QWORD *)(a1 + 2280) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2288));
  *(_QWORD *)(a1 + 2208) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2216));
  *(_QWORD *)(a1 + 2136) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2144));
  *(_QWORD *)(a1 + 2064) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2072));
  *(_QWORD *)(a1 + 1992) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2000));
  *(_QWORD *)(a1 + 1920) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1928));
  *(_QWORD *)(a1 + 1848) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1856));
  *(_QWORD *)(a1 + 1776) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1784));
  *(_QWORD *)(a1 + 1704) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1712));
  SparseMatrix<float>::~SparseMatrix(a1 + 1344);
  SparseMatrix<float>::~SparseMatrix(a1 + 1224);
  SparseMatrix<float>::~SparseMatrix(a1 + 1104);
  SparseMatrix<float>::~SparseMatrix(a1 + 984);
  v12 = *(void **)(a1 + 960);
  if (v12)
  {
    *(_QWORD *)(a1 + 968) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 936);
  if (v13)
  {
    *(_QWORD *)(a1 + 944) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 912);
  if (v14)
  {
    *(_QWORD *)(a1 + 920) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 888);
  if (v15)
  {
    *(_QWORD *)(a1 + 896) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 864);
  if (v16)
  {
    *(_QWORD *)(a1 + 872) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 840);
  if (v17)
  {
    *(_QWORD *)(a1 + 848) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 816);
  if (v18)
  {
    *(_QWORD *)(a1 + 824) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 792);
  if (v19)
  {
    *(_QWORD *)(a1 + 800) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 712);
  if (v20)
  {
    *(_QWORD *)(a1 + 720) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 688);
  if (v21)
  {
    *(_QWORD *)(a1 + 696) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 664);
  if (v22)
  {
    *(_QWORD *)(a1 + 672) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 640);
  if (v23)
  {
    *(_QWORD *)(a1 + 648) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 616);
  if (v24)
  {
    *(_QWORD *)(a1 + 624) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 592);
  if (v25)
  {
    *(_QWORD *)(a1 + 600) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 568);
  if (v26)
  {
    *(_QWORD *)(a1 + 576) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 544);
  if (v27)
  {
    *(_QWORD *)(a1 + 552) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 520);
  if (v28)
  {
    *(_QWORD *)(a1 + 528) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 496);
  if (v29)
  {
    *(_QWORD *)(a1 + 504) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 472);
  if (v30)
  {
    *(_QWORD *)(a1 + 480) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(a1 + 448);
  if (v31)
  {
    *(_QWORD *)(a1 + 456) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(a1 + 424);
  if (v32)
  {
    *(_QWORD *)(a1 + 432) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(a1 + 400);
  if (v33)
  {
    *(_QWORD *)(a1 + 408) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(a1 + 376);
  if (v34)
  {
    *(_QWORD *)(a1 + 384) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(a1 + 352);
  if (v35)
  {
    *(_QWORD *)(a1 + 360) = v35;
    operator delete(v35);
  }
  v44 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v44);
  v36 = *(void **)(a1 + 184);
  if (v36)
  {
    *(_QWORD *)(a1 + 192) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(a1 + 160);
  if (v37)
  {
    *(_QWORD *)(a1 + 168) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(a1 + 136);
  if (v38)
  {
    *(_QWORD *)(a1 + 144) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(a1 + 112);
  if (v39)
  {
    *(_QWORD *)(a1 + 120) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(a1 + 88);
  if (v40)
  {
    *(_QWORD *)(a1 + 96) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(a1 + 64);
  if (v41)
  {
    *(_QWORD *)(a1 + 72) = v41;
    operator delete(v41);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v42 = *(void **)(a1 + 8);
  if (v42)
  {
    *(_QWORD *)(a1 + 16) = v42;
    operator delete(v42);
  }
  return a1;
}

void LSTM<signed char>::computeXTimesWSparseOrDenseCombined(uint64_t a1, int a2)
{
  int v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 784))
  {
    v3 = 4 * a2 * *(_DWORD *)(a1 + 2688);
    v4 = (void *)operator new[]();
    bzero(v4, 4 * v3);
    *(_QWORD *)(a1 + 784) = v4;
    v5 = *(_QWORD **)(a1 + 2632);
    v6 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v5 >= v6)
    {
      v8 = *(_QWORD *)(a1 + 2624);
      v9 = ((uint64_t)v5 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v10 = v6 - v8;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
      else
        v13 = 0;
      v14 = (_QWORD *)(v12 + 8 * v9);
      v15 = v12 + 8 * v13;
      *v14 = v4;
      v7 = v14 + 1;
      v16 = *(char **)(a1 + 2632);
      v17 = *(char **)(a1 + 2624);
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v14;
      *(_QWORD *)(a1 + 2632) = v7;
      *(_QWORD *)(a1 + 2640) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v5 = v4;
      v7 = v5 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v7;
  }
  exitFramework(353);
}

void LSTM<signed char>::computeXTimesWSparseOrDense(uint64_t a1, int a2, const float **a3, uint64_t *a4, const void *a5, uint64_t a6, int a7, int a8, int a9)
{
  float **v12;
  void *__p;
  int *v14;
  uint64_t v15;

  if (!a2)
    exitFramework(353);
  if (a7 != 1)
    exitFramework(502);
  v12 = (float **)(a1 + 760);
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a5, a6, (a6 - (uint64_t)a5) >> 2);
  VVector<float>::internalMul(v12, (int *)__p, v14, *a4, a8, a9);
  if (__p)
  {
    v14 = (int *)__p;
    operator delete(__p);
  }
  vDSP_vadd(*v12, 1, *a3, 1, (float *)*a3, 1, a8);
}

uint64_t LSTM<signed char>::addOptionalPeepholeVector(uint64_t result, uint64_t a2, float *a3, char **a4, float *a5, int a6, int a7)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  int v15;
  int v16;
  float v17;
  float v18;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 520))
      v7 = a6 <= 0;
    else
      v7 = 1;
    if (v7)
      return result;
  }
  else if (a6 < 1)
  {
    return result;
  }
  v8 = 0;
  v9 = *(unsigned int *)(result + 52);
  v10 = 4 * a7;
  do
  {
    if ((int)v9 >= 1)
    {
      v11 = *a4;
      v12 = a5;
      v13 = a3;
      v14 = v9;
      do
      {
        v16 = *v11++;
        v15 = v16;
        v17 = -5.0;
        if (v16 >= -126)
        {
          v17 = 5.0;
          if (v15 != 127)
            v17 = (float)v15 * 0.039062;
        }
        v18 = *v12++;
        *v13 = *v13 + (float)(v17 * v18);
        ++v13;
        --v14;
      }
      while (v14);
    }
    ++v8;
    a3 = (float *)((char *)a3 + v10);
    a5 = (float *)((char *)a5 + v10);
  }
  while (v8 != a6);
  return result;
}

float32x4_t **VVector<signed char>::add<signed char>(float32x4_t **result, float32x4_t **a2, int a3)
{
  float32x4_t *v3;
  float32x4_t *v4;
  int v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;

  if (a3 >= 8)
  {
    v3 = *result;
    v4 = *a2;
    v5 = a3 / 8;
    do
    {
      v6 = *v4;
      v7 = v4[1];
      v4 += 2;
      v8 = vaddq_f32(v7, v3[1]);
      *v3 = vaddq_f32(v6, *v3);
      v3[1] = v8;
      v3 += 2;
      --v5;
    }
    while (v5);
  }
  LODWORD(v9) = 8 * (a3 / 8);
  if ((int)v9 < a3)
  {
    v9 = (int)v9;
    do
    {
      (*result)->i8[v9] += (*a2)->i8[v9];
      ++v9;
    }
    while (a3 != v9);
  }
  return result;
}

uint64_t VVector<signed char>::write(char **a1, FILE *__stream, int *a3, int a4, int a5)
{
  int v9;
  int v10;
  float *v11;
  float *v12;
  void *__p;
  char v15;
  void *__ptr[2];
  char v17;

  if (a4 != 32)
  {
    if (a4 == 8 || a4 == 16)
      exitFramework(45);
    exitFramework(23);
  }
  if (!__stream)
    exitFramework(9);
  v9 = *a3 & 0xF;
  if (*a3 <= 0)
    v9 = -(-*a3 & 0xF);
  if (v9 >= 15)
    v10 = 16;
  else
    v10 = 15 - v9;
  LOBYTE(__ptr[0]) = v10;
  fwrite(__ptr, 1uLL, 1uLL, __stream);
  ++*a3;
  writeByteArray((size_t)__stream, a3, v10);
  if ((*(_BYTE *)a3 & 0xF) != 0)
    exitFramework(17);
  std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
  std::string::basic_string[abi:ne180100]<0>(&__p, "VVector");
  if (v15 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(__ptr[0]);
  v11 = (float *)operator new[]();
  v12 = v11;
  if (a5 >= 1)
    bzero(v11, 4 * a5);
  writeArray<signed char,float>(__stream, a3, *a1, v12, a5);
  return MEMORY[0x19401CD78](v12, 0x1000C8052888210);
}

void sub_19158433C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VVector<signed char>::read(signed __int8 **a1, uint64_t a2, int a3, _BOOL4 a4, signed __int8 **a5)
{
  int v5;
  char v9;
  uint64_t v10;
  signed __int8 *v11;
  uint64_t result;
  int v13;

  v13 = (int)a5;
  if (!a2)
LABEL_11:
    exitFramework(9);
  v5 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    v9 = *(_BYTE *)(a2 + 72);
  }
  else
  {
    v9 = *(_BYTE *)a1;
  }
  if ((v9 & 0xF) != 0)
    exitFramework(19);
  if (a4)
  {
    v10 = *(int *)(a2 + 72);
    v11 = (signed __int8 *)(*(_QWORD *)a2 + v10);
    *a1 = v11;
    *(_DWORD *)(a2 + 72) = v10 + v5;
    result = v5;
    if (!v11)
      goto LABEL_11;
  }
  else
  {
    result = ReadOnlyFile::readInt8Array((ReadOnlyFile *)a2, *a1, &v13, a4, a5);
    if (!*a1)
      goto LABEL_11;
  }
  if (!result)
    goto LABEL_11;
  return result;
}

uint64_t LSTM<short>::LSTM(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  _OWORD *v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  float v19;
  float v20;
  double v21;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *__p[2];
  char v50;
  __int128 v51;
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  __int128 v63;
  char v64;
  __int128 v65;
  char v66;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D58158;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  v14 = (_OWORD *)(a1 + 1640);
  *(_BYTE *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *v14 = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_QWORD *)(a1 + 1704) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1712), 0);
  *(_QWORD *)(a1 + 1776) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1784), 0);
  *(_QWORD *)(a1 + 1848) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1856), 0);
  *(_QWORD *)(a1 + 1920) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1928), 0);
  *(_QWORD *)(a1 + 1992) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2000), 0);
  *(_QWORD *)(a1 + 2064) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2072), 0);
  *(_QWORD *)(a1 + 2136) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2144), 0);
  *(_QWORD *)(a1 + 2208) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2216), 0);
  *(_QWORD *)(a1 + 2280) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2288), 0);
  *(_QWORD *)(a1 + 2352) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2360), 0);
  *(_QWORD *)(a1 + 2424) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2432), 0);
  *(_DWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v15 = 1;
  *(_BYTE *)(a1 + 2692) = 1;
  *(_BYTE *)(a1 + 2672) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2680) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    v15 = *(_DWORD *)(a8 + 28);
    v16 = a7 ^ 1;
  }
  else
  {
    v16 = 1;
  }
  *(_DWORD *)(a1 + 2688) = v15;
  *(_BYTE *)(a1 + 40) = a7;
  v17 = *(unsigned __int8 *)(a6 + 45);
  *(_BYTE *)(a1 + 1696) = v17;
  *(_BYTE *)(a1 + 1697) = *(_BYTE *)(a6 + 46);
  v18 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v18[1];
  *(_DWORD *)(a1 + 744) = v18[2];
  if (!a7)
    v16 = 0;
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2672) = 1;
    v17 = *(unsigned __int8 *)(a1 + 1696);
  }
  v19 = *(float *)(a6 + 16);
  v20 = *(float *)(a6 + 20);
  v21 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v19;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_QWORD *)(a1 + 1632) = 0;
  if (!v17)
  {
    v23 = (uint64_t *)(a1 + 1552);
    v24 = *(_DWORD *)(a6 + 32);
    if (v24 == 2)
    {
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI");
      EstimatorAdaMax<float>::EstimatorAdaMax(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *v23 = v34;
      if (v50 < 0)
        operator delete(__p[0]);
      v35 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v35, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1568) = v35;
      if (v50 < 0)
        operator delete(__p[0]);
      v36 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF");
      EstimatorAdaMax<float>::EstimatorAdaMax(v36, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1560) = v36;
      if (v50 < 0)
        operator delete(__p[0]);
      v37 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI");
      EstimatorAdaMax<float>::EstimatorAdaMax(v37, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1576) = v37;
      if (v50 < 0)
        operator delete(__p[0]);
      v38 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v38, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1584) = v38;
      if (v50 < 0)
        operator delete(__p[0]);
      v39 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v39, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1600) = v39;
      if (v50 < 0)
        operator delete(__p[0]);
      v40 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v40, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1592) = v40;
      if (v50 < 0)
        operator delete(__p[0]);
      v41 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI2");
      EstimatorAdaMax<float>::EstimatorAdaMax(v41, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
    }
    else
    {
      if (v24 != 1)
      {
        if (v24)
          goto LABEL_9;
        v25 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v65, "WGI");
        EstimatorScalar<float>::EstimatorScalar(v25, &v65, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *v23 = v25;
        if (v66 < 0)
          operator delete((void *)v65);
        v26 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v63, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v26, &v63, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1560) = v26;
        if (v64 < 0)
          operator delete((void *)v63);
        v27 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v61, "WGF");
        EstimatorScalar<float>::EstimatorScalar(v27, (__int128 *)v61, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1568) = v27;
        if (v62 < 0)
          operator delete(v61[0]);
        v28 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v59, "WCI");
        EstimatorScalar<float>::EstimatorScalar(v28, (__int128 *)v59, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19);
        *(_QWORD *)(a1 + 1576) = v28;
        if (v60 < 0)
          operator delete(v59[0]);
        v29 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v57, "WGI");
        EstimatorScalar<float>::EstimatorScalar(v29, (__int128 *)v57, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1584) = v29;
        if (v58 < 0)
          operator delete(v57[0]);
        v30 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v55, "WGF");
        EstimatorScalar<float>::EstimatorScalar(v30, (__int128 *)v55, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1592) = v30;
        if (v56 < 0)
          operator delete(v55[0]);
        v31 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v53, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v31, (__int128 *)v53, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1600) = v31;
        if (v54 < 0)
          operator delete(v53[0]);
        v32 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v51, "WCI2");
        EstimatorScalar<float>::EstimatorScalar(v32, &v51, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19);
        *(_QWORD *)(a1 + 1608) = v32;
        if ((v52 & 0x80000000) == 0)
          goto LABEL_9;
        v33 = (void *)v51;
LABEL_63:
        operator delete(v33);
        goto LABEL_9;
      }
      v42 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI");
      EstimatorADAM<float>::EstimatorADAM(v42, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *v23 = v42;
      if (v50 < 0)
        operator delete(__p[0]);
      v43 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorADAM<float>::EstimatorADAM(v43, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1568) = v43;
      if (v50 < 0)
        operator delete(__p[0]);
      v44 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF");
      EstimatorADAM<float>::EstimatorADAM(v44, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1560) = v44;
      if (v50 < 0)
        operator delete(__p[0]);
      v45 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI");
      EstimatorADAM<float>::EstimatorADAM(v45, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v19, v20, v21);
      *(_QWORD *)(a1 + 1576) = v45;
      if (v50 < 0)
        operator delete(__p[0]);
      v46 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGI2");
      EstimatorADAM<float>::EstimatorADAM(v46, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1584) = v46;
      if (v50 < 0)
        operator delete(__p[0]);
      v47 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO2");
      EstimatorADAM<float>::EstimatorADAM(v47, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1600) = v47;
      if (v50 < 0)
        operator delete(__p[0]);
      v48 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGF2");
      EstimatorADAM<float>::EstimatorADAM(v48, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
      *(_QWORD *)(a1 + 1592) = v48;
      if (v50 < 0)
        operator delete(__p[0]);
      v41 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WCI2");
      EstimatorADAM<float>::EstimatorADAM(v41, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v19, v20, v21);
    }
    *(_QWORD *)(a1 + 1608) = v41;
    if ((v50 & 0x80000000) == 0)
      goto LABEL_9;
    v33 = __p[0];
    goto LABEL_63;
  }
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, "LSTM alloc, from constructor");
  LSTM<short>::init(a1);
  if (v50 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_191584FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void **v54;
  uint64_t v55;
  uint64_t v56;
  void **v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;

  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v56, 0x10B3C408D47FFFCLL);
  v58 = v54 + 328;
  v59 = v54[331];
  if (v59)
  {
    v54[332] = v59;
    operator delete(v59);
  }
  v60 = *v58;
  if (*v58)
  {
    v54[329] = v60;
    operator delete(v60);
  }
  PTMutex::~PTMutex((PTMutex *)(v54 + 303));
  PTMutex::~PTMutex((PTMutex *)(v54 + 294));
  PTMutex::~PTMutex((PTMutex *)(v54 + 285));
  PTMutex::~PTMutex((PTMutex *)(v54 + 276));
  PTMutex::~PTMutex((PTMutex *)(v54 + 267));
  PTMutex::~PTMutex((PTMutex *)(v54 + 258));
  PTMutex::~PTMutex((PTMutex *)(v54 + 249));
  PTMutex::~PTMutex((PTMutex *)(v54 + 240));
  PTMutex::~PTMutex((PTMutex *)(v54 + 231));
  PTMutex::~PTMutex((PTMutex *)(v54 + 222));
  PTMutex::~PTMutex((PTMutex *)(v54 + 213));
  SparseMatrix<float>::~SparseMatrix(a9);
  SparseMatrix<float>::~SparseMatrix(a10);
  SparseMatrix<float>::~SparseMatrix(v55);
  SparseMatrix<float>::~SparseMatrix(a11);
  v61 = v54[120];
  if (v61)
  {
    v54[121] = v61;
    operator delete(v61);
  }
  v62 = v54[117];
  if (v62)
  {
    v54[118] = v62;
    operator delete(v62);
  }
  v63 = v54[114];
  if (v63)
  {
    v54[115] = v63;
    operator delete(v63);
  }
  v64 = v54[111];
  if (v64)
  {
    v54[112] = v64;
    operator delete(v64);
  }
  v65 = v54[108];
  if (v65)
  {
    v54[109] = v65;
    operator delete(v65);
  }
  v66 = v54[105];
  if (v66)
  {
    v54[106] = v66;
    operator delete(v66);
  }
  v67 = v54[102];
  if (v67)
  {
    v54[103] = v67;
    operator delete(v67);
  }
  v68 = v54[99];
  if (v68)
  {
    v54[100] = v68;
    operator delete(v68);
  }
  v69 = v54[89];
  if (v69)
  {
    v54[90] = v69;
    operator delete(v69);
  }
  v70 = v54[86];
  if (v70)
  {
    v54[87] = v70;
    operator delete(v70);
  }
  v71 = v54[83];
  if (v71)
  {
    v54[84] = v71;
    operator delete(v71);
  }
  v72 = v54[80];
  if (v72)
  {
    v54[81] = v72;
    operator delete(v72);
  }
  v73 = v54[77];
  if (v73)
  {
    v54[78] = v73;
    operator delete(v73);
  }
  v74 = v54[74];
  if (v74)
  {
    v54[75] = v74;
    operator delete(v74);
  }
  v75 = v54[71];
  if (v75)
  {
    v54[72] = v75;
    operator delete(v75);
  }
  v76 = v54[68];
  if (v76)
  {
    v54[69] = v76;
    operator delete(v76);
  }
  v77 = v54[65];
  if (v77)
  {
    v54[66] = v77;
    operator delete(v77);
  }
  v78 = v54[62];
  if (v78)
  {
    v54[63] = v78;
    operator delete(v78);
  }
  v79 = v54[59];
  if (v79)
  {
    v54[60] = v79;
    operator delete(v79);
  }
  v80 = v54[56];
  if (v80)
  {
    v54[57] = v80;
    operator delete(v80);
  }
  v81 = v54[53];
  if (v81)
  {
    v54[54] = v81;
    operator delete(v81);
  }
  v82 = v54[50];
  if (v82)
  {
    v54[51] = v82;
    operator delete(v82);
  }
  v83 = v54[47];
  if (v83)
  {
    v54[48] = v83;
    operator delete(v83);
  }
  v84 = v54[44];
  if (v84)
  {
    v54[45] = v84;
    operator delete(v84);
  }
  a13 = v54 + 26;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v85 = v54[23];
  if (v85)
  {
    v54[24] = v85;
    operator delete(v85);
  }
  v86 = v54[20];
  if (v86)
  {
    v54[21] = v86;
    operator delete(v86);
  }
  v87 = v54[17];
  if (v87)
  {
    v54[18] = v87;
    operator delete(v87);
  }
  v88 = v54[14];
  if (v88)
  {
    v54[15] = v88;
    operator delete(v88);
  }
  v89 = v54[11];
  if (v89)
  {
    v54[12] = v89;
    operator delete(v89);
  }
  v90 = *a12;
  if (*a12)
  {
    v54[9] = v90;
    operator delete(v90);
  }
  *v54 = off_1E2D4D730;
  v91 = v54[1];
  if (v91)
  {
    v54[2] = v91;
    operator delete(v91);
  }
  _Unwind_Resume(a1);
}

uint64_t FullLayer<short>::FullLayer(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  float v14;
  float v15;
  double v16;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  void *__p[2];
  char v25;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D59178;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 112) = a5;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a6 + 68);
  *(_QWORD *)(a1 + 528) = a8;
  if (a8)
    a7 = *(_BYTE *)(a8 + 512);
  *(_BYTE *)(a1 + 40) = a7;
  *(_BYTE *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v25 < 0)
    operator delete(__p[0]);
  v14 = *(float *)(a6 + 16);
  v15 = *(float *)(a6 + 20);
  v16 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v18 = *(_DWORD *)(a6 + 32);
    if (v18 == 2)
    {
      v21 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
      EstimatorAdaMax<float>::EstimatorAdaMax(v21, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14, v15, v16);
    }
    else
    {
      if (v18 != 1)
      {
        if (v18)
          return a1;
        v19 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v22, "FullLayer");
        EstimatorScalar<float>::EstimatorScalar(v19, &v22, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14);
        *(_QWORD *)(a1 + 424) = v19;
        if ((v23 & 0x80000000) == 0)
          return a1;
        v20 = (void *)v22;
LABEL_16:
        operator delete(v20);
        return a1;
      }
      v21 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
      EstimatorADAM<float>::EstimatorADAM(v21, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v14, v15, v16);
    }
    *(_QWORD *)(a1 + 424) = v21;
    if ((v25 & 0x80000000) == 0)
      return a1;
    v20 = __p[0];
    goto LABEL_16;
  }
  return a1;
}

void sub_191585758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v22, 0x10B3C408D47FFFCLL);
  PTMutex::~PTMutex((PTMutex *)(v20 + 54));
  v25 = (void *)v20[48];
  if (v25)
  {
    v20[49] = v25;
    operator delete(v25);
  }
  a15 = v20 + 45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  v26 = (void *)v20[42];
  if (v26)
  {
    v20[43] = v26;
    operator delete(v26);
  }
  v27 = (void *)v20[39];
  if (v27)
  {
    v20[40] = v27;
    operator delete(v27);
  }
  v28 = (void *)v20[36];
  if (v28)
  {
    v20[37] = v28;
    operator delete(v28);
  }
  v29 = (void *)v20[33];
  if (v29)
  {
    v20[34] = v29;
    operator delete(v29);
  }
  SparseMatrix<float>::~SparseMatrix(v21);
  v30 = (void *)v20[9];
  if (v30)
  {
    v20[10] = v30;
    operator delete(v30);
  }
  v31 = *v23;
  if (*v23)
  {
    v20[7] = v31;
    operator delete(v31);
  }
  *v20 = off_1E2D4D730;
  v32 = (void *)v20[1];
  if (v32)
  {
    v20[2] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t RecurrentLayer<short>::RecurrentLayer(uint64_t a1, int a2, int a3, int a4, char a5, char a6, char a7, uint64_t a8)
{
  void *__p[2];
  char v16;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D4DC20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 304), 0);
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 240) = a8;
  *(_BYTE *)(a1 + 40) = a7;
  *(_BYTE *)(a1 + 60) = a5;
  *(_BYTE *)(a1 + 61) = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, __p, 0, -0.44);
  if (v16 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1915859E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a15 < 0)
    operator delete(__p);
  PTMutex::~PTMutex((PTMutex *)(v16 + 6));
  v18 = (void *)v15[34];
  if (v18)
  {
    v15[35] = v18;
    operator delete(v18);
  }
  v19 = *v16;
  if (*v16)
  {
    v15[32] = v19;
    operator delete(v19);
  }
  v20 = (void *)v15[23];
  if (v20)
  {
    v15[24] = v20;
    operator delete(v20);
  }
  v21 = (void *)v15[20];
  if (v21)
  {
    v15[21] = v21;
    operator delete(v21);
  }
  v22 = (void *)v15[17];
  if (v22)
  {
    v15[18] = v22;
    operator delete(v22);
  }
  v23 = (void *)v15[14];
  if (v23)
  {
    v15[15] = v23;
    operator delete(v23);
  }
  v24 = (void *)v15[11];
  if (v24)
  {
    v15[12] = v24;
    operator delete(v24);
  }
  *v15 = off_1E2D4D730;
  v25 = (void *)v15[1];
  if (v25)
  {
    v15[2] = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t SoftMax<short>::SoftMax(uint64_t a1, int a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  float v12;
  float v13;
  double v14;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  void *__p[2];
  char v23;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D59178;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  *(_QWORD *)(a1 + 400) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_QWORD *)a1 = off_1E2D58968;
  *(_WORD *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 528) = a6;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a4 + 68);
  if (a6)
    a5 = *(_BYTE *)(a6 + 512);
  *(_BYTE *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a4 + 45);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 528) = a6;
  if (a2 < 1 || a3 <= 0)
    exitFramework(34);
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax");
  FullLayer<short>::init(a1, (uint64_t)__p, -0.215);
  if (v23 < 0)
    operator delete(__p[0]);
  v12 = *(float *)(a4 + 16);
  v13 = *(float *)(a4 + 20);
  v14 = *(double *)(a4 + 24);
  *(float *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v16 = *(_DWORD *)(a4 + 32);
    if (v16 == 2)
    {
      v19 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      EstimatorAdaMax<float>::EstimatorAdaMax(v19, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12, v13, v14);
    }
    else
    {
      if (v16 != 1)
      {
        if (v16)
          return a1;
        v17 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v20, "Softmax");
        EstimatorScalar<float>::EstimatorScalar(v17, &v20, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12);
        *(_QWORD *)(a1 + 424) = v17;
        if ((v21 & 0x80000000) == 0)
          return a1;
        v18 = (void *)v20;
LABEL_18:
        operator delete(v18);
        return a1;
      }
      v19 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      EstimatorADAM<float>::EstimatorADAM(v19, (__int128 *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v12, v13, v14);
    }
    *(_QWORD *)(a1 + 424) = v19;
    if ((v23 & 0x80000000) == 0)
      return a1;
    v18 = __p[0];
    goto LABEL_18;
  }
  return a1;
}

void sub_191585D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v21, 0x10B3C408D47FFFCLL);
  FullLayer<short>::~FullLayer(v20);
  _Unwind_Resume(a1);
}

uint64_t GRU<short>::GRU(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  int v13;
  int v14;
  _DWORD *v15;
  float v16;
  float v17;
  double v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  char v41;
  __int128 v42;
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  __int128 v52;
  char v53;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1E2D57CC0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_QWORD *)(a1 + 1240) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1248), 0);
  *(_QWORD *)(a1 + 1312) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1320), 0);
  *(_QWORD *)(a1 + 1384) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1392), 0);
  *(_QWORD *)(a1 + 1456) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1464), 0);
  *(_QWORD *)(a1 + 1528) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1536), 0);
  *(_QWORD *)(a1 + 1600) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1608), 0);
  *(_QWORD *)(a1 + 1672) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1680), 0);
  *(_QWORD *)(a1 + 1744) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1752), 0);
  *(_QWORD *)(a1 + 1816) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1824), 0);
  *(_QWORD *)(a1 + 1888) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1896), 0);
  *(_QWORD *)(a1 + 1960) = &off_1E2D58470;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1968), 0);
  *(_DWORD *)(a1 + 2084) = 0;
  *(_OWORD *)(a1 + 2052) = 0u;
  *(_OWORD *)(a1 + 2068) = 0u;
  *(_OWORD *)(a1 + 2036) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2096) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    v13 = a7 ^ 1;
  }
  else
  {
    v13 = 1;
  }
  *(_BYTE *)(a1 + 40) = a7;
  v14 = *(unsigned __int8 *)(a6 + 45);
  *(_BYTE *)(a1 + 2032) = v14;
  *(_BYTE *)(a1 + 2033) = *(_BYTE *)(a6 + 46);
  v15 = *a4;
  *(_DWORD *)(a1 + 568) = **a4;
  *(_DWORD *)(a1 + 572) = v15[1];
  *(_DWORD *)(a1 + 576) = v15[2];
  if (!a7)
    v13 = 0;
  *(_DWORD *)(a1 + 48) = v13 + *(_DWORD *)(a1 + 44);
  v16 = *(float *)(a6 + 16);
  v17 = *(float *)(a6 + 20);
  v18 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  if (!v14)
  {
    v20 = (uint64_t *)(a1 + 1168);
    v21 = *(_DWORD *)(a6 + 32);
    if (v21 == 2)
    {
      v29 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGR");
      EstimatorAdaMax<float>::EstimatorAdaMax(v29, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *v20 = v29;
      if (v41 < 0)
        operator delete(__p[0]);
      v30 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGZ");
      EstimatorAdaMax<float>::EstimatorAdaMax(v30, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1176) = v30;
      if (v41 < 0)
        operator delete(__p[0]);
      v31 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v31, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1184) = v31;
      if (v41 < 0)
        operator delete(__p[0]);
      v32 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGR");
      EstimatorAdaMax<float>::EstimatorAdaMax(v32, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1192) = v32;
      if (v41 < 0)
        operator delete(__p[0]);
      v33 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGZ");
      EstimatorAdaMax<float>::EstimatorAdaMax(v33, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1200) = v33;
      if (v41 < 0)
        operator delete(__p[0]);
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGO");
      EstimatorAdaMax<float>::EstimatorAdaMax(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
    }
    else
    {
      if (v21 != 1)
      {
        if (v21)
          goto LABEL_7;
        v22 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v52, "WGR");
        EstimatorScalar<float>::EstimatorScalar(v22, &v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *v20 = v22;
        if (v53 < 0)
          operator delete((void *)v52);
        v23 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v50, "WGZ");
        EstimatorScalar<float>::EstimatorScalar(v23, (__int128 *)v50, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *(_QWORD *)(a1 + 1176) = v23;
        if (v51 < 0)
          operator delete(v50[0]);
        v24 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v48, "WGO");
        EstimatorScalar<float>::EstimatorScalar(v24, (__int128 *)v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16);
        *(_QWORD *)(a1 + 1184) = v24;
        if (v49 < 0)
          operator delete(v48[0]);
        v25 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v46, "RGR");
        EstimatorScalar<float>::EstimatorScalar(v25, (__int128 *)v46, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1192) = v25;
        if (v47 < 0)
          operator delete(v46[0]);
        v26 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v44, "RGZ");
        EstimatorScalar<float>::EstimatorScalar(v26, (__int128 *)v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1200) = v26;
        if (v45 < 0)
          operator delete(v44[0]);
        v27 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v42, "RGO");
        EstimatorScalar<float>::EstimatorScalar(v27, &v42, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16);
        *(_QWORD *)(a1 + 1208) = v27;
        if ((v43 & 0x80000000) == 0)
          goto LABEL_7;
        v28 = (void *)v42;
LABEL_49:
        operator delete(v28);
        goto LABEL_7;
      }
      v35 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGR");
      EstimatorADAM<float>::EstimatorADAM(v35, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *v20 = v35;
      if (v41 < 0)
        operator delete(__p[0]);
      v36 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGZ");
      EstimatorADAM<float>::EstimatorADAM(v36, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1176) = v36;
      if (v41 < 0)
        operator delete(__p[0]);
      v37 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "WGO");
      EstimatorADAM<float>::EstimatorADAM(v37, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v16, v17, v18);
      *(_QWORD *)(a1 + 1184) = v37;
      if (v41 < 0)
        operator delete(__p[0]);
      v38 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGR");
      EstimatorADAM<float>::EstimatorADAM(v38, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1192) = v38;
      if (v41 < 0)
        operator delete(__p[0]);
      v39 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGZ");
      EstimatorADAM<float>::EstimatorADAM(v39, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
      *(_QWORD *)(a1 + 1200) = v39;
      if (v41 < 0)
        operator delete(__p[0]);
      v34 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, "RGO");
      EstimatorADAM<float>::EstimatorADAM(v34, (__int128 *)__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v16, v17, v18);
    }
    *(_QWORD *)(a1 + 1208) = v34;
    if ((v41 & 0x80000000) == 0)
      goto LABEL_7;
    v28 = __p[0];
    goto LABEL_49;
  }
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU alloc, from constructor");
  GRU<short>::init(a1);
  if (v41 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_191586878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  if (a16 < 0)
    operator delete(__p);
  MEMORY[0x19401CD90](v49, 0x10B3C40C37BAA31);
  v53 = (void *)v46[258];
  if (v53)
  {
    v46[259] = v53;
    operator delete(v53);
  }
  v54 = (void *)v46[255];
  if (v54)
  {
    v46[256] = v54;
    operator delete(v54);
  }
  PTMutex::~PTMutex((PTMutex *)(v46 + 245));
  PTMutex::~PTMutex((PTMutex *)(v46 + 236));
  PTMutex::~PTMutex((PTMutex *)(v46 + 227));
  PTMutex::~PTMutex((PTMutex *)(v46 + 218));
  PTMutex::~PTMutex((PTMutex *)(v46 + 209));
  PTMutex::~PTMutex((PTMutex *)(v46 + 200));
  PTMutex::~PTMutex((PTMutex *)(v46 + 191));
  PTMutex::~PTMutex((PTMutex *)(v46 + 182));
  PTMutex::~PTMutex((PTMutex *)(v46 + 173));
  PTMutex::~PTMutex((PTMutex *)(v46 + 164));
  PTMutex::~PTMutex((PTMutex *)(v51 + 1032));
  SparseMatrix<float>::~SparseMatrix(v48);
  SparseMatrix<float>::~SparseMatrix(v47);
  SparseMatrix<float>::~SparseMatrix(a9);
  v55 = (void *)v46[91];
  if (v55)
  {
    v46[92] = v55;
    operator delete(v55);
  }
  v56 = (void *)v46[88];
  if (v56)
  {
    v46[89] = v56;
    operator delete(v56);
  }
  v57 = (void *)v46[85];
  if (v57)
  {
    v46[86] = v57;
    operator delete(v57);
  }
  v58 = (void *)v46[82];
  if (v58)
  {
    v46[83] = v58;
    operator delete(v58);
  }
  v59 = (void *)v46[79];
  if (v59)
  {
    v46[80] = v59;
    operator delete(v59);
  }
  v60 = (void *)v46[76];
  if (v60)
  {
    v46[77] = v60;
    operator delete(v60);
  }
  v61 = (void *)v46[68];
  if (v61)
  {
    v46[69] = v61;
    operator delete(v61);
  }
  v62 = (void *)v46[65];
  if (v62)
  {
    v46[66] = v62;
    operator delete(v62);
  }
  v63 = (void *)v46[62];
  if (v63)
  {
    v46[63] = v63;
    operator delete(v63);
  }
  v64 = (void *)v46[59];
  if (v64)
  {
    v46[60] = v64;
    operator delete(v64);
  }
  v65 = (void *)v46[56];
  if (v65)
  {
    v46[57] = v65;
    operator delete(v65);
  }
  v66 = *v50;
  if (*v50)
  {
    v46[54] = v66;
    operator delete(v66);
  }
  __p = (void *)v51;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v67 = (void *)v46[23];
  if (v67)
  {
    v46[24] = v67;
    operator delete(v67);
  }
  v68 = (void *)v46[20];
  if (v68)
  {
    v46[21] = v68;
    operator delete(v68);
  }
  v69 = (void *)v46[17];
  if (v69)
  {
    v46[18] = v69;
    operator delete(v69);
  }
  v70 = (void *)v46[14];
  if (v70)
  {
    v46[15] = v70;
    operator delete(v70);
  }
  v71 = (void *)v46[11];
  if (v71)
  {
    v46[12] = v71;
    operator delete(v71);
  }
  v72 = *a10;
  if (*a10)
  {
    v46[9] = v72;
    operator delete(v72);
  }
  *v46 = off_1E2D4D730;
  v73 = (void *)v46[1];
  if (v73)
  {
    v46[2] = v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

uint64_t BatchNormalization<short>::BatchNormalization(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char **v9;
  char **v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E2D56940;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = 925353388;
  v4 = a3[2];
  v5 = a3[3];
  v6 = *((_QWORD *)a3 + 8);
  v8 = *a3;
  v7 = a3[1];
  *(_QWORD *)(a1 + 216) = &off_1E2D58470;
  *(_QWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 168) = 0u;
  v9 = (char **)(a1 + 168);
  v10 = (char **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  v11 = (char **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  std::vector<VVector<float>>::resize(v9, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v10, maxFeatureVectors);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (maxFeatureVectors >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(unsigned int *)(a1 + 44);
      v14 = (void *)operator new[]();
      v15 = v14;
      if ((int)v13 >= 1)
        bzero(v14, 4 * v13);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12) = v15;
      v16 = *(unsigned int *)(a1 + 44);
      v17 = (void *)operator new[]();
      v18 = v17;
      if ((int)v16 >= 1)
        bzero(v17, 4 * v16);
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v12) = v18;
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12);
      v21 = *(_QWORD **)(a1 + 296);
      v20 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v21 >= v20)
      {
        v23 = ((char *)v21 - *v11) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v24 = v20 - (_QWORD)*v11;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26);
        else
          v27 = 0;
        v28 = (_QWORD *)(v26 + 8 * v23);
        *v28 = v19;
        v22 = v28 + 1;
        v30 = *(char **)(a1 + 288);
        v29 = *(char **)(a1 + 296);
        if (v29 != v30)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v31;
          }
          while (v29 != v30);
          v29 = *v11;
        }
        *(_QWORD *)(a1 + 288) = v28;
        *(_QWORD *)(a1 + 296) = v22;
        *(_QWORD *)(a1 + 304) = v26 + 8 * v27;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v21 = v19;
        v22 = v21 + 1;
      }
      *(_QWORD *)(a1 + 296) = v22;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v12);
      v33 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v22 >= v33)
      {
        v35 = ((char *)v22 - *v11) >> 3;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v36 = v33 - (_QWORD)*v11;
        v37 = v36 >> 2;
        if (v36 >> 2 <= (unint64_t)(v35 + 1))
          v37 = v35 + 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        if (v38)
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v38);
        else
          v39 = 0;
        v40 = (_QWORD *)(v38 + 8 * v35);
        *v40 = v32;
        v34 = v40 + 1;
        v42 = *(char **)(a1 + 288);
        v41 = *(char **)(a1 + 296);
        if (v41 != v42)
        {
          do
          {
            v43 = *((_QWORD *)v41 - 1);
            v41 -= 8;
            *--v40 = v43;
          }
          while (v41 != v42);
          v41 = *v11;
        }
        *(_QWORD *)(a1 + 288) = v40;
        *(_QWORD *)(a1 + 296) = v34;
        *(_QWORD *)(a1 + 304) = v38 + 8 * v39;
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v22 = v32;
        v34 = v22 + 1;
      }
      *(_QWORD *)(a1 + 296) = v34;
      ++v12;
    }
    while (v12 < maxFeatureVectors);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  return a1;
}

void sub_191586F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void *v13;
  void *v14;
  void *v15;

  v13 = *a10;
  if (*a10)
  {
    v10[25] = v13;
    operator delete(v13);
  }
  v14 = *v11;
  if (*v11)
  {
    v10[22] = v14;
    operator delete(v14);
  }
  *v10 = off_1E2D4D730;
  v15 = (void *)v10[1];
  if (v15)
  {
    v10[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ParallelSelector<short>::outputs(uint64_t a1)
{
  return a1 + 104;
}

uint64_t ParallelSelector<short>::deltas(uint64_t a1)
{
  return a1 + 448;
}

uint64_t ParallelSelector<short>::inputDeltas(uint64_t a1)
{
  return a1 + 504;
}

uint64_t ParallelSelector<short>::weightsAreNaN(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t ParallelSelector<short>::read(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::write(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v5)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 80);
    }
    while (v11 < (*(_QWORD *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

_QWORD *ParallelSelector<short>::subtractModels(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 80))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *ParallelSelector<short>::compareModels(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 88))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *ParallelSelector<short>::addGradient(void *result, void *lpsrc)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t)result;
  if (lpsrc)
  {
    v3 = (uint64_t)result;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (*(_QWORD *)(v2 + 88) != v4)
  {
    v5 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 96))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v5));
      ++v5;
      v4 = *(_QWORD *)(v2 + 80);
    }
    while (v5 < (*(_QWORD *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<short>::applyGradient(void *result, void *lpsrc)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t)result;
  if (lpsrc)
  {
    v3 = (uint64_t)result;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (*(_QWORD *)(v2 + 88) != v4)
  {
    v5 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 104))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v5));
      ++v5;
      v4 = *(_QWORD *)(v2 + 80);
    }
    while (v5 < (*(_QWORD *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::clipModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::resetForNewBatch(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void ParallelSelector<short>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *__p;
  char v5;

  v2 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 200))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = *(_QWORD *)(a1 + 80);
    }
    while (v3 < (*(_QWORD *)(a1 + 88) - v2) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "From allocAllBuffers");
  ParallelSelector<float>::init(a1);
  if (v5 < 0)
    operator delete(__p);
}

void sub_191587598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ParallelSelector<short>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x19401CD78](*v5, 0x1000C8052888210);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[10];
  if (a1[11] != v6)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 208))(*(_QWORD *)(v6 + 8 * v7));
      ++v7;
      v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 25);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 59);
  a1[39] = a1[38];
}

void ParallelSelector<short>::rearrangeTargets(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  OutputCluster *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v29;

  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v27 = (a4 - 1);
  if (a4 >= 1)
  {
    v9 = 0;
    v10 = a4;
    do
    {
      if ((a5 & 1) != 0)
      {
        if (a3[1] != *a3)
        {
          if (v9 >= v27)
            v11 = 2;
          else
            v11 = **(_DWORD **)(*a3 + 24 * v9 + 24);
          goto LABEL_21;
        }
        if (v29 >= 1)
        {
          v11 = 0;
          v15 = 0;
          v17 = 1.1755e-38;
          do
          {
            v16 = *(_QWORD *)(*a2 + 8 * v9);
            if (*(float *)(v16 + 4 * v15) > v17)
            {
              v11 = v15;
              v17 = *(float *)(v16 + 4 * v15);
            }
            ++v15;
          }
          while (v29 != v15);
          goto LABEL_21;
        }
      }
      else if (v29 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v14 = 1.1755e-38;
        do
        {
          v13 = *(_QWORD *)(*a2 + 8 * v9);
          if (*(float *)(v13 + 4 * v12) > v14)
          {
            v11 = v12;
            v14 = *(float *)(v13 + 4 * v12);
          }
          ++v12;
        }
        while (v29 != v12);
        goto LABEL_21;
      }
      v11 = 0;
LABEL_21:
      v18 = *(_QWORD *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v9) = v11;
      v19 = *(OutputCluster **)(a1 + 496);
      *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v9) = OutputCluster::getWordClass(v19, v11) + 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v9) = OutputCluster::getWordClassIndex(v19, *(_DWORD *)(v18 + 4 * v9));
      v20 = **(_QWORD **)(a1 + 200);
      v21 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v20 + 8 * v9), 4 * v21);
      v22 = *(_QWORD **)(a1 + 200);
      v23 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v9);
      v24 = v22[3 * (int)v23];
      *(_DWORD *)(*(_QWORD *)(*v22 + 8 * v9) + 4 * v23 - 4) = 1065353216;
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 272))(v25);
      bzero(*(void **)(v24 + 8 * v9), 4 * v26);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * *(int *)(*(_QWORD *)(a1 + 400) + 4 * v9))
                            + 8 * v9)
                + 4 * *(int *)(*(_QWORD *)(a1 + 424) + 4 * v9)) = 1065353216;
      ++v9;
    }
    while (v9 != v10);
  }
}

uint64_t ParallelSelector<short>::noutputs(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - v1) < 9)
    return 0;
  LODWORD(v3) = 0;
  v4 = 1;
  do
  {
    v3 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v4) + 272))(*(_QWORD *)(v1 + 8 * v4))
       + v3;
    ++v4;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v4 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t ParallelSelector<short>::setPredictionMode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(result + 528) = a2;
  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void ParallelSelector<short>::update()
{
  exitFramework(5);
}

void ParallelSelector<short>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  float32_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  _QWORD v32[3];

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = 8 * a5;
    v9 = a5;
    do
    {
      v10 = *(_QWORD *)(a1 + 504);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    v12 = 0;
    for (i = 0; i != v9; ++i)
    {
      v14 = *(int *)(a1 + 332);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 248))(v15, *(_QWORD *)(a1 + 472) + 24 * (int)v14, a3, i, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v14), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v14));
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      v17 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
      memset(v32, 0, sizeof(v32));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v32, *v17, v17[1], v17[1] - *v17);
      v18 = *(_QWORD *)(a1 + 504);
      v19 = (char *)v32[0];
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 264))(v20);
      v22 = VVector<float>::add<float>((float32x4_t **)(v18 + v12), (float32x4_t **)&v19[v12], v21);
      v23 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * i);
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, float32_t))(*(_QWORD *)v24 + 248))(v24, *(_QWORD *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v23), v22);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v26 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
      memset(v31, 0, sizeof(v31));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v31, *v26, v26[1], v26[1] - *v26);
      v27 = *(_QWORD *)(a1 + 504);
      v28 = (char *)v31[0];
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 264))(v29);
      VVector<float>::add<float>((float32x4_t **)(v27 + v12), (float32x4_t **)&v28[v12], v30);
      if (v28)
        operator delete(v28);
      if (v19)
        operator delete(v19);
      v12 += 8;
    }
  }
}

void sub_191587B88(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ParallelSelector<short>::forward(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int **a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  int *v32;
  int *v33;
  std::vector<int> *v34;
  unint64_t v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  int WordClass;
  int WordClassIndex;
  uint64_t v57;
  _DWORD *v58;
  _DWORD **v59;
  unint64_t v60;
  _DWORD *v61;
  char *v62;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  int v79;
  int *v80;
  int v81;
  std::vector<int>::pointer end;
  int *v83;
  std::vector<int>::pointer begin;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  std::vector<int>::pointer v91;
  int *v92;
  int *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::vector<int>::pointer v100;
  int *v101;
  std::vector<int>::pointer v102;
  int64_t v103;
  unint64_t v104;
  int64_t v105;
  unint64_t v106;
  uint64_t v107;
  int *v108;
  int v109;
  std::vector<int>::pointer v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  unint64_t v114;
  uint64_t v115;
  int *v116;
  int v117;
  std::vector<int>::pointer v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  float *v130;
  uint64_t v131;
  int *v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  vDSP_Length v138;
  int v139;
  _DWORD *v140;
  void *v141;
  uint64_t *v142;
  std::vector<int> v143;
  void *__p;
  void *v145;
  uint64_t v146;
  void *v147;
  char *v148;
  unint64_t v149;
  float __C;

  v147 = 0;
  v148 = 0;
  v149 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 304);
    do
      *(_DWORD *)(v14 + 4 * v13) = 0;
    while (v13++ < *(int *)(a1 + 340));
  }
  v16 = *(_QWORD *)(a1 + 224);
  if (v16)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ParallelSelector");
  v17 = a4 & 0xFFFFFF;
  if (SHIBYTE(v146) < 0)
    operator delete(__p);
  if (v17 > (a5 != 0))
  {
    v18 = a5 != 0;
    while (1)
    {
      v19 = *(int *)(a1 + 332);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 272))(v20);
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 264))(v21);
      v22 = *(_QWORD *)(a1 + 304);
      if (!*(_DWORD *)(v22 + 4 * v19))
      {
        *(_DWORD *)(v22 + 4 * v19) = 1;
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 256))(v23, v17);
      }
      __p = 0;
      v145 = 0;
      v146 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v24 + 224))(v24, a2, a3, v18, &__p);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
      memset(&v143, 0, sizeof(v143));
      v26 = *(_DWORD *)(a1 + 328);
      if (v26 == 1)
        break;
      if (v26 == 2)
      {
        v72 = *v142;
        v73 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 272))(v73);
        if (v74 < 1)
        {
          v75 = 0;
        }
        else
        {
          v75 = 0;
          v76 = 0;
          v78 = 1.1755e-38;
          do
          {
            v77 = *(_QWORD *)(v72 + 8 * v18);
            if (*(float *)(v77 + 4 * v76) > v78)
            {
              v75 = v76;
              v78 = *(float *)(v77 + 4 * v76);
            }
            ++v76;
          }
          while (v74 != v76);
        }
        v81 = v75 + 1;
        end = v143.__end_;
        if (v143.__end_ >= v143.__end_cap_.__value_)
        {
          begin = v143.__begin_;
          v85 = v143.__end_ - v143.__begin_;
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v87 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
          if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v86)
            v86 = v87 >> 1;
          v52 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL;
          v88 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v52)
            v88 = v86;
          if (v88)
          {
            v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v88);
            begin = v143.__begin_;
            end = v143.__end_;
          }
          else
          {
            v89 = 0;
          }
          v93 = (int *)(v88 + 4 * v85);
          *v93 = v81;
          v83 = v93 + 1;
          while (end != begin)
          {
            v94 = *--end;
            *--v93 = v94;
          }
          v143.__begin_ = v93;
          v143.__end_ = v83;
          v143.__end_cap_.__value_ = (int *)(v88 + 4 * v89);
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v143.__end_ = v81;
          v83 = end + 1;
        }
        v143.__end_ = v83;
        goto LABEL_133;
      }
      if (v26 != 4)
      {
        v34 = &v143;
        VVector<float>::getTopNIndices((uint64_t *)(*v142 + 8 * v18), *(_DWORD *)(a1 + 340), &v143, *(_DWORD *)(*(_QWORD *)(a1 + 496) + 8));
        goto LABEL_134;
      }
      v27 = (char *)v147;
      v148 = (char *)v147;
      v28 = *(_QWORD *)(a1 + 536);
      v29 = *(_QWORD *)(a1 + 544) - v28;
      if (v29)
      {
        v30 = v29 / 24;
        if (v30 <= 1)
          v30 = 1;
        v31 = (_QWORD *)(v28 + 8);
        do
        {
          *v31 = *(v31 - 1);
          v31 += 3;
          --v30;
        }
        while (v30);
      }
      v33 = *a7;
      v32 = a7[1];
      v34 = (std::vector<int> *)(a1 + 352);
      v35 = (char *)v32 - (char *)*a7;
      if (v32 != *a7)
      {
        if (v35 < 5)
        {
          v148 = v27;
          if (v35 == 4)
          {
            v36 = operator new(4uLL);
            v37 = *v33;
            *v36 = *v33;
            goto LABEL_85;
          }
        }
        else
        {
          v36 = operator new(4uLL);
          v37 = *v33;
          *v36 = *v33;
          if (v33[1] != -1)
            exitFramework(900);
          if (v35 >= 9)
          {
            v140 = v36;
            v38 = 2;
            do
            {
              v39 = v17;
              v40 = *v33;
              v41 = v33[v38];
              v42 = *(_QWORD *)(a1 + 496);
              if (v40 == -1)
              {
                if (*(_QWORD *)(v42 + 104))
                  v47 = *(_DWORD *)(v42 + 112);
                else
                  v47 = *(_DWORD *)(v42 + 96);
                if (v41 >= v47)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C20], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v41);
                  v17 = v39;
                }
                else
                {
                  WordClass = OutputCluster::getWordClass(*(OutputCluster **)(a1 + 496), v41);
                  WordClassIndex = OutputCluster::getWordClassIndex((OutputCluster *)v42, v41);
                  v57 = *(_QWORD *)(a1 + 536) + 24 * WordClass;
                  v59 = (_DWORD **)(v57 + 8);
                  v58 = *(_DWORD **)(v57 + 8);
                  v60 = *(_QWORD *)(v57 + 16);
                  if ((unint64_t)v58 >= v60)
                  {
                    v139 = WordClassIndex;
                    v64 = *(_DWORD **)v57;
                    v65 = ((uint64_t)v58 - *(_QWORD *)v57) >> 2;
                    v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) >> 62)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v67 = v60 - (_QWORD)v64;
                    if (v67 >> 1 > v66)
                      v66 = v67 >> 1;
                    v52 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL;
                    v68 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52)
                      v68 = v66;
                    if (v68)
                    {
                      v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v68);
                      v58 = *v59;
                      v64 = *(_DWORD **)v57;
                    }
                    else
                    {
                      v69 = 0;
                    }
                    v70 = (_DWORD *)(v68 + 4 * v65);
                    *v70 = v139;
                    v61 = v70 + 1;
                    while (v58 != v64)
                    {
                      v71 = *--v58;
                      *--v70 = v71;
                    }
                    *(_QWORD *)v57 = v70;
                    *v59 = v61;
                    *(_QWORD *)(v57 + 16) = v68 + 4 * v69;
                    if (v64)
                      operator delete(v64);
                  }
                  else
                  {
                    *v58 = WordClassIndex;
                    v61 = v58 + 1;
                  }
                  v17 = v39;
                  *v59 = v61;
                }
              }
              else
              {
                v43 = OutputCluster::getWordClassIndex(*(OutputCluster **)(a1 + 496), v41);
                v44 = v43;
                v45 = v148;
                if ((unint64_t)v148 >= v149)
                {
                  v48 = (char *)v147;
                  v49 = (v148 - (_BYTE *)v147) >> 2;
                  v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 62)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v17 = v39;
                  v51 = v149 - (_QWORD)v147;
                  if ((uint64_t)(v149 - (_QWORD)v147) >> 1 > v50)
                    v50 = v51 >> 1;
                  v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
                  v53 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v52)
                    v53 = v50;
                  if (v53)
                  {
                    v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
                    v48 = (char *)v147;
                    v45 = v148;
                  }
                  else
                  {
                    v54 = 0;
                  }
                  v62 = (char *)(v53 + 4 * v49);
                  *(_DWORD *)v62 = v44;
                  v46 = v62 + 4;
                  while (v45 != v48)
                  {
                    v63 = *((_DWORD *)v45 - 1);
                    v45 -= 4;
                    *((_DWORD *)v62 - 1) = v63;
                    v62 -= 4;
                  }
                  v147 = v62;
                  v148 = v46;
                  v149 = v53 + 4 * v54;
                  if (v48)
                    operator delete(v48);
                }
                else
                {
                  *(_DWORD *)v148 = v43;
                  v46 = v45 + 4;
                  v17 = v39;
                }
                v148 = v46;
              }
              ++v38;
              v33 = *a7;
            }
            while (v38 < a7[1] - *a7);
            v36 = v140;
            v37 = *v140;
          }
LABEL_85:
          v141 = v36;
          if (v37 == -1)
          {
            v95 = *(_QWORD *)(a1 + 544);
            v96 = *(_QWORD *)(a1 + 536);
            if (v95 != v96)
            {
              v97 = 0;
              do
              {
                v98 = *(_QWORD *)(v96 + 24 * v97);
                v99 = *(_QWORD *)(v96 + 24 * v97++ + 8);
                if (v99 != v98)
                {
                  v100 = v143.__end_;
                  if (v143.__end_ >= v143.__end_cap_.__value_)
                  {
                    v102 = v143.__begin_;
                    v103 = v143.__end_ - v143.__begin_;
                    v104 = v103 + 1;
                    if ((unint64_t)(v103 + 1) >> 62)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v105 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
                    if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v104)
                      v104 = v105 >> 1;
                    v52 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL;
                    v106 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52)
                      v106 = v104;
                    if (v106)
                    {
                      v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v106);
                      v102 = v143.__begin_;
                      v100 = v143.__end_;
                    }
                    else
                    {
                      v107 = 0;
                    }
                    v108 = (int *)(v106 + 4 * v103);
                    *v108 = v97;
                    v101 = v108 + 1;
                    while (v100 != v102)
                    {
                      v109 = *--v100;
                      *--v108 = v109;
                    }
                    v143.__begin_ = v108;
                    v143.__end_ = v101;
                    v143.__end_cap_.__value_ = (int *)(v106 + 4 * v107);
                    if (v102)
                      operator delete(v102);
                  }
                  else
                  {
                    *v143.__end_ = v97;
                    v101 = v100 + 1;
                  }
                  v143.__end_ = v101;
                  v95 = *(_QWORD *)(a1 + 544);
                  v96 = *(_QWORD *)(a1 + 536);
                }
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v95 - v96) >> 3) > v97);
            }
          }
          else
          {
            if (v37 < 0
              || (v90 = v37 + 1,
                  (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3 <= (unint64_t)(v37 + 1)))
            {
              exitFramework(45);
            }
            v91 = v143.__end_;
            if (v143.__end_ >= v143.__end_cap_.__value_)
            {
              v110 = v143.__begin_;
              v111 = v143.__end_ - v143.__begin_;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v113 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
              if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v112)
                v112 = v113 >> 1;
              v52 = (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL;
              v114 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v52)
                v114 = v112;
              if (v114)
              {
                v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v114);
                v110 = v143.__begin_;
                v91 = v143.__end_;
              }
              else
              {
                v115 = 0;
              }
              v116 = (int *)(v114 + 4 * v111);
              *v116 = v90;
              v92 = v116 + 1;
              while (v91 != v110)
              {
                v117 = *--v91;
                *--v116 = v117;
              }
              v143.__begin_ = v116;
              v143.__end_ = v92;
              v143.__end_cap_.__value_ = (int *)(v114 + 4 * v115);
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v143.__end_ = v90;
              v92 = v91 + 1;
            }
            v143.__end_ = v92;
          }
          operator delete(v141);
        }
LABEL_133:
        v34 = &v143;
      }
LABEL_134:
      bzero(*(void **)(*(_QWORD *)(a1 + 104) + 8 * v18), 4 * *(int *)(a1 + 348));
      v118 = v34->__begin_;
      if (v34->__end_ != v34->__begin_)
      {
        v119 = 0;
        while (1)
        {
          v120 = v118[v119];
          v121 = *(_QWORD *)(a1 + 304);
          if (!*(_DWORD *)(v121 + 4 * v120))
          {
            *(_DWORD *)(v121 + 4 * v120) = 1;
            v122 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 256))(v122, v17);
          }
          v123 = a7[1] != *a7 && **a7 == -1 ? (void **)(*(_QWORD *)(a1 + 536) + 24 * (int)v120 - 24) : &v147;
          v124 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v124 + 224))(v124, a2, a3, v18, v123);
          v125 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v120);
          v126 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125);
          v127 = *(_QWORD *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2)
            break;
          v128 = *(unsigned int *)(v127 + 4 * v120);
          if ((int)v128 >= 1)
          {
            v129 = *(float *)(*(_QWORD *)(*v142 + 8 * v18) + 4 * ((int)v120 - 1));
            v130 = *(float **)(*v126 + 8 * v18);
            v131 = v128;
            do
            {
              *v130 = v129 * *v130;
              ++v130;
              --v131;
            }
            while (v131);
LABEL_148:
            if ((int)v128 >= 1)
            {
              v132 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 120) + 24 * ((int)v120 - 1));
              v133 = *(_DWORD **)(*v126 + 8 * v18);
              v134 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v18);
              do
              {
                v136 = *v132++;
                v135 = v136;
                LODWORD(v136) = *v133++;
                *(_DWORD *)(v134 + 4 * v135) = v136;
                --v128;
              }
              while (v128);
            }
          }
          ++v119;
          v118 = v34->__begin_;
          if (v119 >= v34->__end_ - v34->__begin_)
            goto LABEL_152;
        }
        v128 = *(unsigned int *)(v127 + 4 * v120);
        goto LABEL_148;
      }
LABEL_152:
      v137 = *(_QWORD *)(a1 + 104);
      v138 = *(int *)(a1 + 348);
      __C = 0.0;
      vDSP_sve(*(const float **)(v137 + 8 * v18), 1, &__C, v138);
      if (v143.__begin_)
      {
        v143.__end_ = v143.__begin_;
        operator delete(v143.__begin_);
      }
      if (__p)
      {
        v145 = __p;
        operator delete(__p);
      }
      if (++v18 == v17)
        goto LABEL_157;
    }
    v79 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v18);
    v80 = (int *)operator new(4uLL);
    *v80 = v79;
    v143.__end_ = v80 + 1;
    v143.__end_cap_.__value_ = v80 + 1;
    v143.__begin_ = v80;
    goto LABEL_133;
  }
LABEL_157:
  if (v147)
  {
    v148 = (char *)v147;
    operator delete(v147);
  }
}

void sub_191588588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void *ParallelSelector<short>::updateFrom(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  void *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!result)
    __cxa_bad_cast();
  v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (uint64_t)result;
    v12 = 0;
    do
    {
      if (*(int *)(*(_QWORD *)(v11 + 304) + 4 * v12) >= 1)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v12);
        result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, float, float))(*(_QWORD *)v13 + 336))(v13, *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v12), a3, a4, a5);
        v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t ParallelSelector<short>::computeError(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 >= 1)
  {
    v19 = v6;
    v20 = v7;
    v10 = result;
    v11 = 0;
    v12 = a4;
    do
    {
      v18 = 0;
      v13 = *(int *)(v10 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v14 + 240))(v14, *(_QWORD *)(v10 + 200) + 24 * v13, *(_QWORD *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      v17 = 0;
      v15 = *(int *)(*(_QWORD *)(v10 + 400) + 4 * v11);
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v15);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v16 + 240))(v16, *(_QWORD *)(v10 + 200) + 24 * (int)v15, *(_QWORD *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1)
        ++*a5;
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float ParallelSelector<short>::log2Probability(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v13;

  v13 = 0;
  if (a3 < 1)
    return 0.0;
  v4 = 0;
  v5 = a3;
  v6 = 0.0;
  do
  {
    v7 = *(int *)(a1 + 332);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v8 + 232))(v8, *(_QWORD *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    v9 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v4);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 232))(v10, *(_QWORD *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2)
      v11 = -0.0;
    v6 = v6 + (float)(*(float *)&v13 + v11);
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void ParallelSelector<short>::~ParallelSelector(uint64_t a1)
{
  ParallelSelector<short>::~ParallelSelector(a1);
  JUMPOUT(0x19401CD90);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;

  *(_QWORD *)a1 = off_1E2D560B0;
  v3 = *(_QWORD *)(a1 + 280);
  v2 = *(_QWORD *)(a1 + 288);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(a1 + 288);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x19401CD78](*v5, 0x1000C8052888210);
        *v5 = 0;
        v3 = *(_QWORD *)(a1 + 280);
        v2 = *(_QWORD *)(a1 + 288);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(_QWORD *)(a1 + 288) = v3;
  v14 = (void **)(a1 + 536);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v6 = *(void **)(a1 + 504);
  if (v6)
  {
    *(_QWORD *)(a1 + 512) = v6;
    operator delete(v6);
  }
  v14 = (void **)(a1 + 472);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = *(void **)(a1 + 448);
  if (v7)
  {
    *(_QWORD *)(a1 + 456) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 424);
  if (v8)
  {
    *(_QWORD *)(a1 + 432) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 400);
  if (v9)
  {
    *(_QWORD *)(a1 + 408) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 376);
  if (v10)
  {
    *(_QWORD *)(a1 + 384) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(_QWORD *)(a1 + 360) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 304);
  if (v12)
  {
    *(_QWORD *)(a1 + 312) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 280);
  if (v13)
  {
    *(_QWORD *)(a1 + 288) = v13;
    operator delete(v13);
  }
  Parallel::~Parallel((Parallel *)a1);
}

void BatchNormalization<short>::targets()
{
  exitFramework(1);
}

uint64_t BatchNormalization<short>::inputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t BatchNormalization<short>::outputs(uint64_t a1)
{
  return a1 + 192;
}

void BatchNormalization<short>::deltas()
{
  exitFramework(1);
}

void BatchNormalization<short>::inputDeltas()
{
  exitFramework(1);
}

uint64_t BatchNormalization<short>::weightsAreNaN()
{
  return 0;
}

uint64_t BatchNormalization<short>::read(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  int v8;

  v6 = *(int *)(a2 + 72);
  v7 = (int *)(*(_QWORD *)a2 + v6);
  if ((unint64_t)v7 <= *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4)
  {
    v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8)
    exitFramework(3);
  VVector<float>::read((signed __int8 **)(a1 + 128), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x10, v8);
  VVector<float>::read((signed __int8 **)(a1 + 136), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x10, *(_DWORD *)(a1 + 44));
  VVector<float>::read((signed __int8 **)(a1 + 144), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x10, *(_DWORD *)(a1 + 44));
  return VVector<float>::read((signed __int8 **)(a1 + 152), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x10, *(_DWORD *)(a1 + 44));
}

void **BatchNormalization<short>::write(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int __ptr;

  __ptr = *(_DWORD *)(a1 + 44);
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  *a3 += 4;
  VVector<float>::write((void **)(a1 + 128), __stream, a3, 16, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((void **)(a1 + 136), __stream, a3, 16, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((void **)(a1 + 144), __stream, a3, 16, a5, *(_DWORD *)(a1 + 44));
  return VVector<float>::write((void **)(a1 + 152), __stream, a3, 16, a5, *(_DWORD *)(a1 + 44));
}

void BatchNormalization<short>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void *__p;
  char v106;

  std::string::basic_string[abi:ne180100]<0>(&__p, "BatchNormalization, from allocAll");
  std::vector<VVector<float>>::resize((char **)(a1 + 168), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 192), maxFeatureVectors);
  if (!*(_BYTE *)(a1 + 161))
  {
    v2 = *(unsigned int *)(a1 + 44);
    v3 = (void *)operator new[]();
    v4 = v3;
    if ((int)v2 >= 1)
      bzero(v3, 4 * v2);
    *(_QWORD *)(a1 + 128) = v4;
    v5 = *(unsigned int *)(a1 + 44);
    v6 = (void *)operator new[]();
    v7 = v6;
    if ((int)v5 >= 1)
      bzero(v6, 4 * v5);
    *(_QWORD *)(a1 + 136) = v7;
    v8 = *(unsigned int *)(a1 + 44);
    v9 = (void *)operator new[]();
    v10 = v9;
    if ((int)v8 >= 1)
      bzero(v9, 4 * v8);
    *(_QWORD *)(a1 + 144) = v10;
    v11 = *(unsigned int *)(a1 + 44);
    v12 = (void *)operator new[]();
    v13 = v12;
    if ((int)v11 >= 1)
      bzero(v12, 4 * v11);
    *(_QWORD *)(a1 + 152) = v13;
    v14 = *(_QWORD *)(a1 + 128);
    v16 = *(_QWORD **)(a1 + 296);
    v15 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v16 >= v15)
    {
      v18 = *(_QWORD *)(a1 + 288);
      v19 = ((uint64_t)v16 - v18) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        goto LABEL_120;
      v20 = v15 - v18;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v22);
      else
        v23 = 0;
      v24 = (_QWORD *)(v22 + 8 * v19);
      v25 = v22 + 8 * v23;
      *v24 = v14;
      v17 = v24 + 1;
      v27 = *(char **)(a1 + 288);
      v26 = *(char **)(a1 + 296);
      if (v26 != v27)
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v24 = v28;
        }
        while (v26 != v27);
        v26 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v24;
      *(_QWORD *)(a1 + 296) = v17;
      *(_QWORD *)(a1 + 304) = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v16 = v14;
      v17 = v16 + 1;
    }
    *(_QWORD *)(a1 + 296) = v17;
    v29 = *(_QWORD *)(a1 + 136);
    v30 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v17 >= v30)
    {
      v32 = *(_QWORD *)(a1 + 288);
      v33 = ((uint64_t)v17 - v32) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        goto LABEL_120;
      v34 = v30 - v32;
      v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1))
        v35 = v33 + 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
        v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36);
      else
        v37 = 0;
      v38 = (_QWORD *)(v36 + 8 * v33);
      v39 = v36 + 8 * v37;
      *v38 = v29;
      v31 = v38 + 1;
      v41 = *(char **)(a1 + 288);
      v40 = *(char **)(a1 + 296);
      if (v40 != v41)
      {
        do
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *--v38 = v42;
        }
        while (v40 != v41);
        v40 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v38;
      *(_QWORD *)(a1 + 296) = v31;
      *(_QWORD *)(a1 + 304) = v39;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v17 = v29;
      v31 = v17 + 1;
    }
    *(_QWORD *)(a1 + 296) = v31;
    v43 = *(_QWORD *)(a1 + 144);
    v44 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v31 >= v44)
    {
      v46 = *(_QWORD *)(a1 + 288);
      v47 = ((uint64_t)v31 - v46) >> 3;
      if ((unint64_t)(v47 + 1) >> 61)
        goto LABEL_120;
      v48 = v44 - v46;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
      else
        v51 = 0;
      v52 = (_QWORD *)(v50 + 8 * v47);
      v53 = v50 + 8 * v51;
      *v52 = v43;
      v45 = v52 + 1;
      v55 = *(char **)(a1 + 288);
      v54 = *(char **)(a1 + 296);
      if (v54 != v55)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *--v52 = v56;
        }
        while (v54 != v55);
        v54 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v52;
      *(_QWORD *)(a1 + 296) = v45;
      *(_QWORD *)(a1 + 304) = v53;
      if (v54)
        operator delete(v54);
    }
    else
    {
      *v31 = v43;
      v45 = v31 + 1;
    }
    *(_QWORD *)(a1 + 296) = v45;
    v57 = *(_QWORD *)(a1 + 152);
    v58 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v45 < v58)
    {
      *v45 = v57;
      v59 = v45 + 1;
LABEL_74:
      *(_QWORD *)(a1 + 296) = v59;
      goto LABEL_75;
    }
    v60 = *(_QWORD *)(a1 + 288);
    v61 = ((uint64_t)v45 - v60) >> 3;
    if (!((unint64_t)(v61 + 1) >> 61))
    {
      v62 = v58 - v60;
      v63 = v62 >> 2;
      if (v62 >> 2 <= (unint64_t)(v61 + 1))
        v63 = v61 + 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
        v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v64);
      else
        v65 = 0;
      v66 = (_QWORD *)(v64 + 8 * v61);
      v67 = v64 + 8 * v65;
      *v66 = v57;
      v59 = v66 + 1;
      v69 = *(char **)(a1 + 288);
      v68 = *(char **)(a1 + 296);
      if (v68 != v69)
      {
        do
        {
          v70 = *((_QWORD *)v68 - 1);
          v68 -= 8;
          *--v66 = v70;
        }
        while (v68 != v69);
        v68 = *(char **)(a1 + 288);
      }
      *(_QWORD *)(a1 + 288) = v66;
      *(_QWORD *)(a1 + 296) = v59;
      *(_QWORD *)(a1 + 304) = v67;
      if (v68)
        operator delete(v68);
      goto LABEL_74;
    }
LABEL_120:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_75:
  if (maxFeatureVectors >= 1)
  {
    v71 = 0;
    do
    {
      v72 = *(unsigned int *)(a1 + 44);
      v73 = (void *)operator new[]();
      v74 = v73;
      if ((int)v72 >= 1)
        bzero(v73, 4 * v72);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v71) = v74;
      v76 = *(_QWORD **)(a1 + 296);
      v75 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v76 >= v75)
      {
        v78 = *(_QWORD *)(a1 + 288);
        v79 = ((uint64_t)v76 - v78) >> 3;
        if ((unint64_t)(v79 + 1) >> 61)
          goto LABEL_120;
        v80 = v75 - v78;
        v81 = v80 >> 2;
        if (v80 >> 2 <= (unint64_t)(v79 + 1))
          v81 = v79 + 1;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
          v82 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v82 = v81;
        if (v82)
          v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v82);
        else
          v83 = 0;
        v84 = (_QWORD *)(v82 + 8 * v79);
        *v84 = v74;
        v77 = v84 + 1;
        v86 = *(char **)(a1 + 288);
        v85 = *(char **)(a1 + 296);
        if (v85 != v86)
        {
          do
          {
            v87 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *--v84 = v87;
          }
          while (v85 != v86);
          v85 = *(char **)(a1 + 288);
        }
        *(_QWORD *)(a1 + 288) = v84;
        *(_QWORD *)(a1 + 296) = v77;
        *(_QWORD *)(a1 + 304) = v82 + 8 * v83;
        if (v85)
          operator delete(v85);
      }
      else
      {
        *v76 = v74;
        v77 = v76 + 1;
      }
      *(_QWORD *)(a1 + 296) = v77;
      ++v71;
    }
    while (v71 < maxFeatureVectors);
    if (maxFeatureVectors >= 1)
    {
      v88 = 0;
      do
      {
        v89 = *(unsigned int *)(a1 + 44);
        v90 = (void *)operator new[]();
        v91 = v90;
        if ((int)v89 >= 1)
          bzero(v90, 4 * v89);
        *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v88) = v91;
        v93 = *(_QWORD **)(a1 + 296);
        v92 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v93 >= v92)
        {
          v95 = *(_QWORD *)(a1 + 288);
          v96 = ((uint64_t)v93 - v95) >> 3;
          if ((unint64_t)(v96 + 1) >> 61)
            goto LABEL_120;
          v97 = v92 - v95;
          v98 = v97 >> 2;
          if (v97 >> 2 <= (unint64_t)(v96 + 1))
            v98 = v96 + 1;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
            v99 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v99 = v98;
          if (v99)
            v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v99);
          else
            v100 = 0;
          v101 = (_QWORD *)(v99 + 8 * v96);
          *v101 = v91;
          v94 = v101 + 1;
          v103 = *(char **)(a1 + 288);
          v102 = *(char **)(a1 + 296);
          if (v102 != v103)
          {
            do
            {
              v104 = *((_QWORD *)v102 - 1);
              v102 -= 8;
              *--v101 = v104;
            }
            while (v102 != v103);
            v102 = *(char **)(a1 + 288);
          }
          *(_QWORD *)(a1 + 288) = v101;
          *(_QWORD *)(a1 + 296) = v94;
          *(_QWORD *)(a1 + 304) = v99 + 8 * v100;
          if (v102)
            operator delete(v102);
        }
        else
        {
          *v93 = v91;
          v94 = v93 + 1;
        }
        *(_QWORD *)(a1 + 296) = v94;
        ++v88;
      }
      while (v88 < maxFeatureVectors);
    }
  }
  if (v106 < 0)
    operator delete(__p);
}

void sub_1915892CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BatchNormalization<short>::cleanupAllBuffers(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = (_QWORD *)result;
  v3 = *(_QWORD *)(result + 288);
  v2 = *(_QWORD *)(result + 296);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(result + 296);
  }
  else
  {
    v4 = 0;
    do
    {
      result = *(_QWORD *)(v3 + 8 * v4);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C8052888210);
        v3 = v1[36];
        v2 = v1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v1[37] = v3;
  v1[22] = v1[21];
  v1[25] = v1[24];
  return result;
}

uint64_t BatchNormalization<short>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void BatchNormalization<short>::backward()
{
  exitFramework(5);
}

int *BatchNormalization<short>::forward(int *result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  float v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    v6 = result;
    v7 = 0;
    do
    {
      memmove(*(void **)(*((_QWORD *)v6 + 21) + 8 * v7), *(const void **)(*a2 + 8 * v7), 4 * v6[11]);
      v8 = v6[11];
      v9 = *(const void **)(*((_QWORD *)v6 + 21) + 8 * v7);
      if (v8 >= 1)
      {
        v10 = *((float *)v6 + 12);
        v11 = (float *)*((_QWORD *)v6 + 16);
        v12 = (float *)*((_QWORD *)v6 + 17);
        v13 = *(float **)(*((_QWORD *)v6 + 21) + 8 * v7);
        v14 = v6[11];
        v15 = (float *)*((_QWORD *)v6 + 18);
        v16 = (float *)*((_QWORD *)v6 + 19);
        do
        {
          v17 = *v11++;
          v18 = v17;
          v19 = *v12++;
          v20 = sqrtf(v10 + v19);
          v21 = *v15++;
          v22 = v21;
          v23 = *v16++;
          *v13 = v23 + (float)((float)((float)(*v13 - v18) / v20) * v22);
          ++v13;
          --v14;
        }
        while (v14);
      }
      result = (int *)memmove(*(void **)(*((_QWORD *)v6 + 24) + 8 * v7++), v9, 4 * v8);
    }
    while (v7 != v4);
  }
  return result;
}

_QWORD *BatchNormalization<short>::setMaster(_QWORD *a1, void *lpsrc)
{
  _QWORD *result;

  if (!result)
    __cxa_bad_cast();
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void BatchNormalization<short>::computeError()
{
  exitFramework(5);
}

void BatchNormalization<short>::log2Probability()
{
  exitFramework(5);
}

void BatchNormalization<short>::~BatchNormalization(uint64_t a1)
{
  BatchNormalization<short>::~BatchNormalization(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t BatchNormalization<short>::~BatchNormalization(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = off_1E2D56940;
  v4 = a1 + 288;
  v2 = *(void **)(a1 + 288);
  v3 = *(void **)(v4 + 8);
  if (v3 == v2)
  {
    v2 = v3;
    if (v3)
    {
LABEL_7:
      *(_QWORD *)(a1 + 296) = v2;
      operator delete(v2);
    }
  }
  else
  {
    v5 = 0;
    do
    {
      if (*((_QWORD *)v2 + v5))
      {
        MEMORY[0x19401CD78](*((_QWORD *)v2 + v5), 0x1000C8052888210);
        v2 = *(void **)(a1 + 288);
        v3 = *(void **)(a1 + 296);
      }
      ++v5;
    }
    while (v5 < ((_BYTE *)v3 - (_BYTE *)v2) >> 3);
    if (v2)
      goto LABEL_7;
  }
  *(_QWORD *)(a1 + 216) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 224));
  v6 = *(void **)(a1 + 192);
  if (v6)
  {
    *(_QWORD *)(a1 + 200) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 168);
  if (v7)
  {
    *(_QWORD *)(a1 + 176) = v7;
    operator delete(v7);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

void GRU<short>::init(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  _QWORD *v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unsigned int v182;
  _BYTE *v183;
  int v184;
  void *v185;
  _QWORD *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  int v210;
  void *v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  int v226;
  void *v227;
  _QWORD *v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  unsigned int v242;
  void *v243;
  _QWORD *v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  unsigned int v258;
  void *v259;
  _QWORD *v260;
  unint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unsigned int v274;
  void *v275;
  _QWORD *v276;
  unint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  void *v292;
  _QWORD *v293;
  unint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  unint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  void *v310;
  _QWORD *v311;
  unint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  char *v321;
  char *v322;
  uint64_t v323;
  std::vector<int>::size_type v324;
  uint64_t v325;
  void *v326;
  void *v327;
  _QWORD *v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  char *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  void *v343;
  _QWORD *v344;
  unint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  void *v359;
  _QWORD *v360;
  unint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  char *v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  void *v375;
  _QWORD *v376;
  unint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  _QWORD *v385;
  char *v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  void *v391;
  _QWORD *v392;
  unint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  char *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  void *v406;
  void *v407;
  _QWORD *v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  char *v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  void *v423;
  _QWORD *v424;
  unint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  char *v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  void *v438;
  void *v439;
  _QWORD *v440;
  unint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  char *v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  void *v454;
  void *v455;
  _QWORD *v456;
  unint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  char *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  void *v470;
  void *v471;
  _QWORD *v472;
  unint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  char *v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  void *v486;
  void *v487;
  _QWORD *v488;
  unint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  char *v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  void *v502;
  void *v503;
  _QWORD *v504;
  unint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  _QWORD *v513;
  char *v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  void *v518;
  void *v519;
  _QWORD *v520;
  unint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  _QWORD *v529;
  char *v530;
  char *v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  void *v535;
  _QWORD *v536;
  unint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  _QWORD *v545;
  char *v546;
  char *v547;
  uint64_t v548;
  _QWORD *v549;
  unint64_t v550;
  char *v551;
  char *v552;
  uint64_t v553;
  uint64_t v554;
  _QWORD *v555;
  unint64_t v556;
  _QWORD *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  _QWORD *v564;
  unint64_t v565;
  char *v566;
  char *v567;
  uint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  unint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  _QWORD *v579;
  unint64_t v580;
  char *v581;
  char *v582;
  uint64_t v583;
  _BYTE *v584;
  uint64_t v585;
  _QWORD *v586;
  unint64_t v587;
  _QWORD *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  _QWORD *v595;
  unint64_t v596;
  char *v597;
  char *v598;
  uint64_t v599;
  uint64_t v600;
  _QWORD *v601;
  unint64_t v602;
  _QWORD *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  uint64_t v609;
  _QWORD *v610;
  unint64_t v611;
  char *v612;
  char *v613;
  uint64_t v614;
  uint64_t v615;
  _QWORD *v616;
  unint64_t v617;
  _QWORD *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  uint64_t v624;
  _QWORD *v625;
  unint64_t v626;
  char *v627;
  char *v628;
  uint64_t v629;
  __int128 v630[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1216) = v4;
  v5 = *(_QWORD **)(a1 + 2048);
  v6 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(a1 + 2040);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_707;
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = v4;
    v7 = v14 + 1;
    v16 = *(char **)(a1 + 2048);
    v17 = *(char **)(a1 + 2040);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v14;
    *(_QWORD *)(a1 + 2048) = v7;
    *(_QWORD *)(a1 + 2056) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = v4;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v7;
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  v21 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  *(_QWORD *)(a1 + 1224) = v21;
  v22 = *(_QWORD **)(a1 + 2048);
  v23 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v22 >= v23)
  {
    v25 = *(_QWORD *)(a1 + 2040);
    v26 = ((uint64_t)v22 - v25) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      goto LABEL_707;
    v27 = v23 - v25;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    else
      v30 = 0;
    v31 = (_QWORD *)(v29 + 8 * v26);
    v32 = v29 + 8 * v30;
    *v31 = v21;
    v24 = v31 + 1;
    v33 = *(char **)(a1 + 2048);
    v34 = *(char **)(a1 + 2040);
    if (v33 != v34)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
      v33 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v31;
    *(_QWORD *)(a1 + 2048) = v24;
    *(_QWORD *)(a1 + 2056) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v22 = v21;
    v24 = v22 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v24;
  v36 = *(unsigned int *)(a1 + 52);
  v37 = (void *)operator new[]();
  v38 = v37;
  if ((int)v36 >= 1)
    bzero(v37, 4 * v36);
  *(_QWORD *)(a1 + 1232) = v38;
  v39 = *(_QWORD **)(a1 + 2048);
  v40 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v39 >= v40)
  {
    v42 = *(_QWORD *)(a1 + 2040);
    v43 = ((uint64_t)v39 - v42) >> 3;
    if ((unint64_t)(v43 + 1) >> 61)
      goto LABEL_707;
    v44 = v40 - v42;
    v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1))
      v45 = v43 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v46);
    else
      v47 = 0;
    v48 = (_QWORD *)(v46 + 8 * v43);
    v49 = v46 + 8 * v47;
    *v48 = v38;
    v41 = v48 + 1;
    v50 = *(char **)(a1 + 2048);
    v51 = *(char **)(a1 + 2040);
    if (v50 != v51)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v52;
      }
      while (v50 != v51);
      v50 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v48;
    *(_QWORD *)(a1 + 2048) = v41;
    *(_QWORD *)(a1 + 2056) = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v39 = v38;
    v41 = v39 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v41;
  if (*(_BYTE *)(a1 + 42) || (v53 = *(unsigned __int8 *)(a1 + 2088), *(_BYTE *)(a1 + 2088)))
  {
    v54 = 3;
    v53 = 6;
  }
  else
  {
    v54 = 0;
  }
  if (!*(_DWORD *)(a1 + 2036))
  {
    v55 = *(_QWORD *)(a1 + 2096);
    if (v55 && (v56 = *(_DWORD *)(v55 + 40), v56 >= 1))
    {
      if (v56 == 6)
      {
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(v55 + 112 + 8 * v53);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(v55 + 112 + 8 * (v53 | 1));
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(v55 + 112 + 8 * (v53 + 2));
      }
      else
      {
        if (v56 != 4)
          exitFramework(45);
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(v55 + 8 * v53 + 112);
      }
      v61 = v55 + 112;
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(v61 + 8 * (v53 + 3));
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(v61 + 8 * (v53 + 4));
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(v61 + 8 * (v53 + 5));
    }
    else if (!*(_BYTE *)(a1 + 2033))
    {
      MMatrix<short>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v57 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 232) = *(_QWORD *)&v630[0];
      v58 = *(_QWORD **)(a1 + 2072);
      v59 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v58 >= v59)
      {
        v62 = *(_QWORD *)(a1 + 2064);
        v63 = ((uint64_t)v58 - v62) >> 3;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_708;
        v64 = v59 - v62;
        v65 = v64 >> 2;
        if (v64 >> 2 <= (unint64_t)(v63 + 1))
          v65 = v63 + 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
          v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v66);
        else
          v67 = 0;
        v68 = (_QWORD *)(v66 + 8 * v63);
        v69 = v66 + 8 * v67;
        *v68 = v57;
        v60 = v68 + 1;
        v70 = *(char **)(a1 + 2072);
        v71 = *(char **)(a1 + 2064);
        if (v70 != v71)
        {
          do
          {
            v72 = *((_QWORD *)v70 - 1);
            v70 -= 8;
            *--v68 = v72;
          }
          while (v70 != v71);
          v70 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v68;
        *(_QWORD *)(a1 + 2072) = v60;
        *(_QWORD *)(a1 + 2080) = v69;
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v58 = v57;
        v60 = v58 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v60;
      MMatrix<short>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v73 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 240) = *(_QWORD *)&v630[0];
      v74 = *(_QWORD **)(a1 + 2072);
      v75 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v74 >= v75)
      {
        v77 = *(_QWORD *)(a1 + 2064);
        v78 = ((uint64_t)v74 - v77) >> 3;
        if ((unint64_t)(v78 + 1) >> 61)
          goto LABEL_708;
        v79 = v75 - v77;
        v80 = v79 >> 2;
        if (v79 >> 2 <= (unint64_t)(v78 + 1))
          v80 = v78 + 1;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
          v81 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v81 = v80;
        if (v81)
          v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v81);
        else
          v82 = 0;
        v83 = (_QWORD *)(v81 + 8 * v78);
        v84 = v81 + 8 * v82;
        *v83 = v73;
        v76 = v83 + 1;
        v85 = *(char **)(a1 + 2072);
        v86 = *(char **)(a1 + 2064);
        if (v85 != v86)
        {
          do
          {
            v87 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *--v83 = v87;
          }
          while (v85 != v86);
          v85 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v83;
        *(_QWORD *)(a1 + 2072) = v76;
        *(_QWORD *)(a1 + 2080) = v84;
        if (v85)
          operator delete(v85);
      }
      else
      {
        *v74 = v73;
        v76 = v74 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v76;
      MMatrix<short>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v88 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 248) = *(_QWORD *)&v630[0];
      v89 = *(_QWORD **)(a1 + 2072);
      v90 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v89 >= v90)
      {
        v92 = *(_QWORD *)(a1 + 2064);
        v93 = ((uint64_t)v89 - v92) >> 3;
        if ((unint64_t)(v93 + 1) >> 61)
          goto LABEL_708;
        v94 = v90 - v92;
        v95 = v94 >> 2;
        if (v94 >> 2 <= (unint64_t)(v93 + 1))
          v95 = v93 + 1;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
          v96 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v96 = v95;
        if (v96)
          v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v96);
        else
          v97 = 0;
        v98 = (_QWORD *)(v96 + 8 * v93);
        v99 = v96 + 8 * v97;
        *v98 = v88;
        v91 = v98 + 1;
        v100 = *(char **)(a1 + 2072);
        v101 = *(char **)(a1 + 2064);
        if (v100 != v101)
        {
          do
          {
            v102 = *((_QWORD *)v100 - 1);
            v100 -= 8;
            *--v98 = v102;
          }
          while (v100 != v101);
          v100 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v98;
        *(_QWORD *)(a1 + 2072) = v91;
        *(_QWORD *)(a1 + 2080) = v99;
        if (v100)
          operator delete(v100);
      }
      else
      {
        *v89 = v88;
        v91 = v89 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v91;
      MMatrix<short>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v103 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 256) = *(_QWORD *)&v630[0];
      v104 = *(_QWORD **)(a1 + 2072);
      v105 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v104 >= v105)
      {
        v107 = *(_QWORD *)(a1 + 2064);
        v108 = ((uint64_t)v104 - v107) >> 3;
        if ((unint64_t)(v108 + 1) >> 61)
          goto LABEL_708;
        v109 = v105 - v107;
        v110 = v109 >> 2;
        if (v109 >> 2 <= (unint64_t)(v108 + 1))
          v110 = v108 + 1;
        if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
          v111 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v111 = v110;
        if (v111)
          v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v111);
        else
          v112 = 0;
        v113 = (_QWORD *)(v111 + 8 * v108);
        v114 = v111 + 8 * v112;
        *v113 = v103;
        v106 = v113 + 1;
        v115 = *(char **)(a1 + 2072);
        v116 = *(char **)(a1 + 2064);
        if (v115 != v116)
        {
          do
          {
            v117 = *((_QWORD *)v115 - 1);
            v115 -= 8;
            *--v113 = v117;
          }
          while (v115 != v116);
          v115 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v113;
        *(_QWORD *)(a1 + 2072) = v106;
        *(_QWORD *)(a1 + 2080) = v114;
        if (v115)
          operator delete(v115);
      }
      else
      {
        *v104 = v103;
        v106 = v104 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v106;
      MMatrix<short>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v118 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 264) = *(_QWORD *)&v630[0];
      v119 = *(_QWORD **)(a1 + 2072);
      v120 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v119 >= v120)
      {
        v122 = *(_QWORD *)(a1 + 2064);
        v123 = ((uint64_t)v119 - v122) >> 3;
        if ((unint64_t)(v123 + 1) >> 61)
          goto LABEL_708;
        v124 = v120 - v122;
        v125 = v124 >> 2;
        if (v124 >> 2 <= (unint64_t)(v123 + 1))
          v125 = v123 + 1;
        if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
          v126 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v126 = v125;
        if (v126)
          v126 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v126);
        else
          v127 = 0;
        v128 = (_QWORD *)(v126 + 8 * v123);
        v129 = v126 + 8 * v127;
        *v128 = v118;
        v121 = v128 + 1;
        v130 = *(char **)(a1 + 2072);
        v131 = *(char **)(a1 + 2064);
        if (v130 != v131)
        {
          do
          {
            v132 = *((_QWORD *)v130 - 1);
            v130 -= 8;
            *--v128 = v132;
          }
          while (v130 != v131);
          v130 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v128;
        *(_QWORD *)(a1 + 2072) = v121;
        *(_QWORD *)(a1 + 2080) = v129;
        if (v130)
          operator delete(v130);
      }
      else
      {
        *v119 = v118;
        v121 = v119 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v121;
      MMatrix<short>::MMatrix(v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v133 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 272) = *(_QWORD *)&v630[0];
      v134 = *(_QWORD **)(a1 + 2072);
      v135 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v134 >= v135)
      {
        v137 = *(_QWORD *)(a1 + 2064);
        v138 = ((uint64_t)v134 - v137) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_708;
        v139 = v135 - v137;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v141);
        else
          v142 = 0;
        v143 = (_QWORD *)(v141 + 8 * v138);
        v144 = v141 + 8 * v142;
        *v143 = v133;
        v136 = v143 + 1;
        v145 = *(char **)(a1 + 2072);
        v146 = *(char **)(a1 + 2064);
        if (v145 != v146)
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v143 = v147;
          }
          while (v145 != v146);
          v145 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v143;
        *(_QWORD *)(a1 + 2072) = v136;
        *(_QWORD *)(a1 + 2080) = v144;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v134 = v133;
        v136 = v134 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v136;
    }
    if (*(_BYTE *)(a1 + 2033))
      goto LABEL_166;
    v183 = *(_BYTE **)(a1 + 2096);
    if (!v183)
      goto LABEL_166;
    if (v183[244] && v183[245])
    {
      *(_QWORD *)(a1 + 280) = *(_QWORD *)&v183[8 * v54 + 248];
      *(_QWORD *)(a1 + 288) = *(_QWORD *)&v183[8 * v54 + 256];
      *(_QWORD *)(a1 + 296) = *(_QWORD *)&v183[8 * v54 + 264];
    }
    else
    {
      VVector<short>::VVector((uint64_t *)v630, *(_DWORD *)(a1 + 52));
      v195 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 280) = *(_QWORD *)&v630[0];
      v196 = *(_QWORD **)(a1 + 2072);
      v197 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v196 >= v197)
      {
        v199 = *(_QWORD *)(a1 + 2064);
        v200 = ((uint64_t)v196 - v199) >> 3;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_708;
        v201 = v197 - v199;
        v202 = v201 >> 2;
        if (v201 >> 2 <= (unint64_t)(v200 + 1))
          v202 = v200 + 1;
        if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
          v203 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v203);
        else
          v204 = 0;
        v549 = (_QWORD *)(v203 + 8 * v200);
        v550 = v203 + 8 * v204;
        *v549 = v195;
        v198 = v549 + 1;
        v551 = *(char **)(a1 + 2072);
        v552 = *(char **)(a1 + 2064);
        if (v551 != v552)
        {
          do
          {
            v553 = *((_QWORD *)v551 - 1);
            v551 -= 8;
            *--v549 = v553;
          }
          while (v551 != v552);
          v551 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v549;
        *(_QWORD *)(a1 + 2072) = v198;
        *(_QWORD *)(a1 + 2080) = v550;
        if (v551)
          operator delete(v551);
      }
      else
      {
        *v196 = v195;
        v198 = v196 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v198;
      VVector<short>::VVector((uint64_t *)v630, *(_DWORD *)(a1 + 52));
      v554 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 288) = *(_QWORD *)&v630[0];
      v555 = *(_QWORD **)(a1 + 2072);
      v556 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v555 >= v556)
      {
        v558 = *(_QWORD *)(a1 + 2064);
        v559 = ((uint64_t)v555 - v558) >> 3;
        if ((unint64_t)(v559 + 1) >> 61)
          goto LABEL_708;
        v560 = v556 - v558;
        v561 = v560 >> 2;
        if (v560 >> 2 <= (unint64_t)(v559 + 1))
          v561 = v559 + 1;
        if ((unint64_t)v560 >= 0x7FFFFFFFFFFFFFF8)
          v562 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v562 = v561;
        if (v562)
          v562 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v562);
        else
          v563 = 0;
        v564 = (_QWORD *)(v562 + 8 * v559);
        v565 = v562 + 8 * v563;
        *v564 = v554;
        v557 = v564 + 1;
        v566 = *(char **)(a1 + 2072);
        v567 = *(char **)(a1 + 2064);
        if (v566 != v567)
        {
          do
          {
            v568 = *((_QWORD *)v566 - 1);
            v566 -= 8;
            *--v564 = v568;
          }
          while (v566 != v567);
          v566 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v564;
        *(_QWORD *)(a1 + 2072) = v557;
        *(_QWORD *)(a1 + 2080) = v565;
        if (v566)
          operator delete(v566);
      }
      else
      {
        *v555 = v554;
        v557 = v555 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v557;
      VVector<short>::VVector((uint64_t *)v630, *(_DWORD *)(a1 + 52));
      v569 = *(_QWORD *)&v630[0];
      *(_QWORD *)(a1 + 296) = *(_QWORD *)&v630[0];
      v570 = *(_QWORD **)(a1 + 2072);
      v571 = *(_QWORD *)(a1 + 2080);
      if ((unint64_t)v570 >= v571)
      {
        v573 = *(_QWORD *)(a1 + 2064);
        v574 = ((uint64_t)v570 - v573) >> 3;
        if ((unint64_t)(v574 + 1) >> 61)
          goto LABEL_708;
        v575 = v571 - v573;
        v576 = v575 >> 2;
        if (v575 >> 2 <= (unint64_t)(v574 + 1))
          v576 = v574 + 1;
        if ((unint64_t)v575 >= 0x7FFFFFFFFFFFFFF8)
          v577 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v577 = v576;
        if (v577)
          v577 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v577);
        else
          v578 = 0;
        v579 = (_QWORD *)(v577 + 8 * v574);
        v580 = v577 + 8 * v578;
        *v579 = v569;
        v572 = v579 + 1;
        v581 = *(char **)(a1 + 2072);
        v582 = *(char **)(a1 + 2064);
        if (v581 != v582)
        {
          do
          {
            v583 = *((_QWORD *)v581 - 1);
            v581 -= 8;
            *--v579 = v583;
          }
          while (v581 != v582);
          v581 = *(char **)(a1 + 2064);
        }
        *(_QWORD *)(a1 + 2064) = v579;
        *(_QWORD *)(a1 + 2072) = v572;
        *(_QWORD *)(a1 + 2080) = v580;
        if (v581)
          operator delete(v581);
      }
      else
      {
        *v570 = v569;
        v572 = v570 + 1;
      }
      *(_QWORD *)(a1 + 2072) = v572;
      v183 = *(_BYTE **)(a1 + 2096);
    }
    if (v183[376])
    {
      v584 = v183 + 384;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)&v584[8 * v54];
      *(_QWORD *)(a1 + 312) = *(_QWORD *)&v584[8 * v54 + 8];
      *(_QWORD *)(a1 + 320) = *(_QWORD *)&v584[8 * v54 + 16];
LABEL_166:
      *(_QWORD *)(a1 + 328) = a1 + 232;
      *(_QWORD *)(a1 + 336) = a1 + 240;
      *(_QWORD *)(a1 + 344) = a1 + 248;
      *(_QWORD *)(a1 + 352) = a1 + 256;
      *(_QWORD *)(a1 + 360) = a1 + 264;
      *(_QWORD *)(a1 + 368) = a1 + 272;
      *(_QWORD *)(a1 + 376) = a1 + 280;
      *(_QWORD *)(a1 + 384) = a1 + 288;
      *(_QWORD *)(a1 + 392) = a1 + 296;
      *(_QWORD *)(a1 + 400) = a1 + 304;
      *(_QWORD *)(a1 + 408) = a1 + 312;
      *(_QWORD *)(a1 + 416) = a1 + 320;
      goto LABEL_167;
    }
    VVector<short>::VVector((uint64_t *)v630, *(_DWORD *)(a1 + 52));
    v585 = *(_QWORD *)&v630[0];
    *(_QWORD *)(a1 + 304) = *(_QWORD *)&v630[0];
    v586 = *(_QWORD **)(a1 + 2072);
    v587 = *(_QWORD *)(a1 + 2080);
    if ((unint64_t)v586 >= v587)
    {
      v589 = *(_QWORD *)(a1 + 2064);
      v590 = ((uint64_t)v586 - v589) >> 3;
      if ((unint64_t)(v590 + 1) >> 61)
        goto LABEL_708;
      v591 = v587 - v589;
      v592 = v591 >> 2;
      if (v591 >> 2 <= (unint64_t)(v590 + 1))
        v592 = v590 + 1;
      if ((unint64_t)v591 >= 0x7FFFFFFFFFFFFFF8)
        v593 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v593 = v592;
      if (v593)
        v593 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v593);
      else
        v594 = 0;
      v595 = (_QWORD *)(v593 + 8 * v590);
      v596 = v593 + 8 * v594;
      *v595 = v585;
      v588 = v595 + 1;
      v597 = *(char **)(a1 + 2072);
      v598 = *(char **)(a1 + 2064);
      if (v597 != v598)
      {
        do
        {
          v599 = *((_QWORD *)v597 - 1);
          v597 -= 8;
          *--v595 = v599;
        }
        while (v597 != v598);
        v597 = *(char **)(a1 + 2064);
      }
      *(_QWORD *)(a1 + 2064) = v595;
      *(_QWORD *)(a1 + 2072) = v588;
      *(_QWORD *)(a1 + 2080) = v596;
      if (v597)
        operator delete(v597);
    }
    else
    {
      *v586 = v585;
      v588 = v586 + 1;
    }
    *(_QWORD *)(a1 + 2072) = v588;
    VVector<short>::VVector((uint64_t *)v630, *(_DWORD *)(a1 + 52));
    v600 = *(_QWORD *)&v630[0];
    *(_QWORD *)(a1 + 312) = *(_QWORD *)&v630[0];
    v601 = *(_QWORD **)(a1 + 2072);
    v602 = *(_QWORD *)(a1 + 2080);
    if ((unint64_t)v601 >= v602)
    {
      v604 = *(_QWORD *)(a1 + 2064);
      v605 = ((uint64_t)v601 - v604) >> 3;
      if ((unint64_t)(v605 + 1) >> 61)
        goto LABEL_708;
      v606 = v602 - v604;
      v607 = v606 >> 2;
      if (v606 >> 2 <= (unint64_t)(v605 + 1))
        v607 = v605 + 1;
      if ((unint64_t)v606 >= 0x7FFFFFFFFFFFFFF8)
        v608 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v608 = v607;
      if (v608)
        v608 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v608);
      else
        v609 = 0;
      v610 = (_QWORD *)(v608 + 8 * v605);
      v611 = v608 + 8 * v609;
      *v610 = v600;
      v603 = v610 + 1;
      v612 = *(char **)(a1 + 2072);
      v613 = *(char **)(a1 + 2064);
      if (v612 != v613)
      {
        do
        {
          v614 = *((_QWORD *)v612 - 1);
          v612 -= 8;
          *--v610 = v614;
        }
        while (v612 != v613);
        v612 = *(char **)(a1 + 2064);
      }
      *(_QWORD *)(a1 + 2064) = v610;
      *(_QWORD *)(a1 + 2072) = v603;
      *(_QWORD *)(a1 + 2080) = v611;
      if (v612)
        operator delete(v612);
    }
    else
    {
      *v601 = v600;
      v603 = v601 + 1;
    }
    *(_QWORD *)(a1 + 2072) = v603;
    VVector<short>::VVector((uint64_t *)v630, *(_DWORD *)(a1 + 52));
    v615 = *(_QWORD *)&v630[0];
    *(_QWORD *)(a1 + 320) = *(_QWORD *)&v630[0];
    v616 = *(_QWORD **)(a1 + 2072);
    v617 = *(_QWORD *)(a1 + 2080);
    if ((unint64_t)v616 < v617)
    {
      *v616 = v615;
      v618 = v616 + 1;
LABEL_706:
      *(_QWORD *)(a1 + 2072) = v618;
      goto LABEL_166;
    }
    v619 = *(_QWORD *)(a1 + 2064);
    v620 = ((uint64_t)v616 - v619) >> 3;
    if (!((unint64_t)(v620 + 1) >> 61))
    {
      v621 = v617 - v619;
      v622 = v621 >> 2;
      if (v621 >> 2 <= (unint64_t)(v620 + 1))
        v622 = v620 + 1;
      if ((unint64_t)v621 >= 0x7FFFFFFFFFFFFFF8)
        v623 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v623 = v622;
      if (v623)
        v623 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v623);
      else
        v624 = 0;
      v625 = (_QWORD *)(v623 + 8 * v620);
      v626 = v623 + 8 * v624;
      *v625 = v615;
      v618 = v625 + 1;
      v627 = *(char **)(a1 + 2072);
      v628 = *(char **)(a1 + 2064);
      if (v627 != v628)
      {
        do
        {
          v629 = *((_QWORD *)v627 - 1);
          v627 -= 8;
          *--v625 = v629;
        }
        while (v627 != v628);
        v627 = *(char **)(a1 + 2064);
      }
      *(_QWORD *)(a1 + 2064) = v625;
      *(_QWORD *)(a1 + 2072) = v618;
      *(_QWORD *)(a1 + 2080) = v626;
      if (v627)
        operator delete(v627);
      goto LABEL_706;
    }
LABEL_708:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_167:
  v148 = *(unsigned int *)(a1 + 52);
  v149 = (void *)operator new[]();
  v150 = v149;
  if ((int)v148 >= 1)
    bzero(v149, 4 * v148);
  *(_QWORD *)(a1 + 584) = v150;
  v151 = *(_QWORD **)(a1 + 2048);
  v152 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v151 >= v152)
  {
    v154 = *(_QWORD *)(a1 + 2040);
    v155 = ((uint64_t)v151 - v154) >> 3;
    if ((unint64_t)(v155 + 1) >> 61)
      goto LABEL_707;
    v156 = v152 - v154;
    v157 = v156 >> 2;
    if (v156 >> 2 <= (unint64_t)(v155 + 1))
      v157 = v155 + 1;
    if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
      v158 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v158 = v157;
    if (v158)
      v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v158);
    else
      v159 = 0;
    v160 = (_QWORD *)(v158 + 8 * v155);
    v161 = v158 + 8 * v159;
    *v160 = v150;
    v153 = v160 + 1;
    v162 = *(char **)(a1 + 2048);
    v163 = *(char **)(a1 + 2040);
    if (v162 != v163)
    {
      do
      {
        v164 = *((_QWORD *)v162 - 1);
        v162 -= 8;
        *--v160 = v164;
      }
      while (v162 != v163);
      v162 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v160;
    *(_QWORD *)(a1 + 2048) = v153;
    *(_QWORD *)(a1 + 2056) = v161;
    if (v162)
      operator delete(v162);
  }
  else
  {
    *v151 = v150;
    v153 = v151 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v153;
  v165 = *(unsigned int *)(a1 + 52);
  v166 = (void *)operator new[]();
  v167 = v166;
  if ((int)v165 >= 1)
    bzero(v166, 4 * v165);
  *(_QWORD *)(a1 + 592) = v167;
  v168 = *(_QWORD **)(a1 + 2048);
  v169 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v168 >= v169)
  {
    v171 = *(_QWORD *)(a1 + 2040);
    v172 = ((uint64_t)v168 - v171) >> 3;
    if ((unint64_t)(v172 + 1) >> 61)
      goto LABEL_707;
    v173 = v169 - v171;
    v174 = v173 >> 2;
    if (v173 >> 2 <= (unint64_t)(v172 + 1))
      v174 = v172 + 1;
    if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
      v175 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v175 = v174;
    if (v175)
      v175 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v175);
    else
      v176 = 0;
    v177 = (_QWORD *)(v175 + 8 * v172);
    v178 = v175 + 8 * v176;
    *v177 = v167;
    v170 = v177 + 1;
    v179 = *(char **)(a1 + 2048);
    v180 = *(char **)(a1 + 2040);
    if (v179 != v180)
    {
      do
      {
        v181 = *((_QWORD *)v179 - 1);
        v179 -= 8;
        *--v177 = v181;
      }
      while (v179 != v180);
      v179 = *(char **)(a1 + 2040);
    }
    *(_QWORD *)(a1 + 2040) = v177;
    *(_QWORD *)(a1 + 2048) = v170;
    *(_QWORD *)(a1 + 2056) = v178;
    if (v179)
      operator delete(v179);
  }
  else
  {
    *v168 = v167;
    v170 = v168 + 1;
  }
  *(_QWORD *)(a1 + 2048) = v170;
  if (!*(_BYTE *)(a1 + 2032))
  {
    if (*(_DWORD *)(a1 + 56))
    {
      v182 = *(unsigned __int8 *)(a1 + 40) + 1;
      SparseMatrix<float>::SparseMatrix((unsigned int *)v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 760), v630);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v630);
      SparseMatrix<float>::SparseMatrix((unsigned int *)v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 880), v630);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v630);
      SparseMatrix<float>::SparseMatrix((unsigned int *)v630, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v182);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 1000), v630);
      SparseMatrix<float>::~SparseMatrix((uint64_t)v630);
    }
    else
    {
      v184 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v185 = (void *)operator new[]();
      bzero(v185, 4 * v184);
      *(_QWORD *)(a1 + 1120) = v185;
      v186 = *(_QWORD **)(a1 + 2048);
      v187 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v186 >= v187)
      {
        v189 = *(_QWORD *)(a1 + 2040);
        v190 = ((uint64_t)v186 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61)
          goto LABEL_707;
        v191 = v187 - v189;
        v192 = v191 >> 2;
        if (v191 >> 2 <= (unint64_t)(v190 + 1))
          v192 = v190 + 1;
        if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
          v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v193);
        else
          v194 = 0;
        v205 = (_QWORD *)(v193 + 8 * v190);
        v206 = v193 + 8 * v194;
        *v205 = v185;
        v188 = v205 + 1;
        v207 = *(char **)(a1 + 2048);
        v208 = *(char **)(a1 + 2040);
        if (v207 != v208)
        {
          do
          {
            v209 = *((_QWORD *)v207 - 1);
            v207 -= 8;
            *--v205 = v209;
          }
          while (v207 != v208);
          v207 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v205;
        *(_QWORD *)(a1 + 2048) = v188;
        *(_QWORD *)(a1 + 2056) = v206;
        if (v207)
          operator delete(v207);
      }
      else
      {
        *v186 = v185;
        v188 = v186 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v188;
      v210 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v211 = (void *)operator new[]();
      bzero(v211, 4 * v210);
      *(_QWORD *)(a1 + 1128) = v211;
      v212 = *(_QWORD **)(a1 + 2048);
      v213 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v212 >= v213)
      {
        v215 = *(_QWORD *)(a1 + 2040);
        v216 = ((uint64_t)v212 - v215) >> 3;
        if ((unint64_t)(v216 + 1) >> 61)
          goto LABEL_707;
        v217 = v213 - v215;
        v218 = v217 >> 2;
        if (v217 >> 2 <= (unint64_t)(v216 + 1))
          v218 = v216 + 1;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          v219 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v219 = v218;
        if (v219)
          v219 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v219);
        else
          v220 = 0;
        v221 = (_QWORD *)(v219 + 8 * v216);
        v222 = v219 + 8 * v220;
        *v221 = v211;
        v214 = v221 + 1;
        v223 = *(char **)(a1 + 2048);
        v224 = *(char **)(a1 + 2040);
        if (v223 != v224)
        {
          do
          {
            v225 = *((_QWORD *)v223 - 1);
            v223 -= 8;
            *--v221 = v225;
          }
          while (v223 != v224);
          v223 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v221;
        *(_QWORD *)(a1 + 2048) = v214;
        *(_QWORD *)(a1 + 2056) = v222;
        if (v223)
          operator delete(v223);
      }
      else
      {
        *v212 = v211;
        v214 = v212 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v214;
      v226 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v227 = (void *)operator new[]();
      bzero(v227, 4 * v226);
      *(_QWORD *)(a1 + 1136) = v227;
      v228 = *(_QWORD **)(a1 + 2048);
      v229 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v228 >= v229)
      {
        v231 = *(_QWORD *)(a1 + 2040);
        v232 = ((uint64_t)v228 - v231) >> 3;
        if ((unint64_t)(v232 + 1) >> 61)
          goto LABEL_707;
        v233 = v229 - v231;
        v234 = v233 >> 2;
        if (v233 >> 2 <= (unint64_t)(v232 + 1))
          v234 = v232 + 1;
        if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFF8)
          v235 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v235 = v234;
        if (v235)
          v235 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v235);
        else
          v236 = 0;
        v237 = (_QWORD *)(v235 + 8 * v232);
        v238 = v235 + 8 * v236;
        *v237 = v227;
        v230 = v237 + 1;
        v239 = *(char **)(a1 + 2048);
        v240 = *(char **)(a1 + 2040);
        if (v239 != v240)
        {
          do
          {
            v241 = *((_QWORD *)v239 - 1);
            v239 -= 8;
            *--v237 = v241;
          }
          while (v239 != v240);
          v239 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v237;
        *(_QWORD *)(a1 + 2048) = v230;
        *(_QWORD *)(a1 + 2056) = v238;
        if (v239)
          operator delete(v239);
      }
      else
      {
        *v228 = v227;
        v230 = v228 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v230;
    }
    v242 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v243 = (void *)operator new[]();
    bzero(v243, 4 * v242);
    *(_QWORD *)(a1 + 1152) = v243;
    v244 = *(_QWORD **)(a1 + 2048);
    v245 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v244 >= v245)
    {
      v247 = *(_QWORD *)(a1 + 2040);
      v248 = ((uint64_t)v244 - v247) >> 3;
      if ((unint64_t)(v248 + 1) >> 61)
        goto LABEL_707;
      v249 = v245 - v247;
      v250 = v249 >> 2;
      if (v249 >> 2 <= (unint64_t)(v248 + 1))
        v250 = v248 + 1;
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF8)
        v251 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v251 = v250;
      if (v251)
        v251 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v251);
      else
        v252 = 0;
      v253 = (_QWORD *)(v251 + 8 * v248);
      v254 = v251 + 8 * v252;
      *v253 = v243;
      v246 = v253 + 1;
      v255 = *(char **)(a1 + 2048);
      v256 = *(char **)(a1 + 2040);
      if (v255 != v256)
      {
        do
        {
          v257 = *((_QWORD *)v255 - 1);
          v255 -= 8;
          *--v253 = v257;
        }
        while (v255 != v256);
        v255 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v253;
      *(_QWORD *)(a1 + 2048) = v246;
      *(_QWORD *)(a1 + 2056) = v254;
      if (v255)
        operator delete(v255);
    }
    else
    {
      *v244 = v243;
      v246 = v244 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v246;
    v258 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v259 = (void *)operator new[]();
    bzero(v259, 4 * v258);
    *(_QWORD *)(a1 + 1144) = v259;
    v260 = *(_QWORD **)(a1 + 2048);
    v261 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v260 >= v261)
    {
      v263 = *(_QWORD *)(a1 + 2040);
      v264 = ((uint64_t)v260 - v263) >> 3;
      if ((unint64_t)(v264 + 1) >> 61)
        goto LABEL_707;
      v265 = v261 - v263;
      v266 = v265 >> 2;
      if (v265 >> 2 <= (unint64_t)(v264 + 1))
        v266 = v264 + 1;
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFF8)
        v267 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v267 = v266;
      if (v267)
        v267 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v267);
      else
        v268 = 0;
      v269 = (_QWORD *)(v267 + 8 * v264);
      v270 = v267 + 8 * v268;
      *v269 = v259;
      v262 = v269 + 1;
      v271 = *(char **)(a1 + 2048);
      v272 = *(char **)(a1 + 2040);
      if (v271 != v272)
      {
        do
        {
          v273 = *((_QWORD *)v271 - 1);
          v271 -= 8;
          *--v269 = v273;
        }
        while (v271 != v272);
        v271 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v269;
      *(_QWORD *)(a1 + 2048) = v262;
      *(_QWORD *)(a1 + 2056) = v270;
      if (v271)
        operator delete(v271);
    }
    else
    {
      *v260 = v259;
      v262 = v260 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v262;
    v274 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
    v275 = (void *)operator new[]();
    bzero(v275, 4 * v274);
    *(_QWORD *)(a1 + 1160) = v275;
    v276 = *(_QWORD **)(a1 + 2048);
    v277 = *(_QWORD *)(a1 + 2056);
    if ((unint64_t)v276 >= v277)
    {
      v279 = *(_QWORD *)(a1 + 2040);
      v280 = ((uint64_t)v276 - v279) >> 3;
      if ((unint64_t)(v280 + 1) >> 61)
        goto LABEL_707;
      v281 = v277 - v279;
      v282 = v281 >> 2;
      if (v281 >> 2 <= (unint64_t)(v280 + 1))
        v282 = v280 + 1;
      if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8)
        v283 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v283 = v282;
      if (v283)
        v283 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v283);
      else
        v284 = 0;
      v285 = (_QWORD *)(v283 + 8 * v280);
      v286 = v283 + 8 * v284;
      *v285 = v275;
      v278 = v285 + 1;
      v287 = *(char **)(a1 + 2048);
      v288 = *(char **)(a1 + 2040);
      if (v287 != v288)
      {
        do
        {
          v289 = *((_QWORD *)v287 - 1);
          v287 -= 8;
          *--v285 = v289;
        }
        while (v287 != v288);
        v287 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v285;
      *(_QWORD *)(a1 + 2048) = v278;
      *(_QWORD *)(a1 + 2056) = v286;
      if (v287)
        operator delete(v287);
    }
    else
    {
      *v276 = v275;
      v278 = v276 + 1;
    }
    *(_QWORD *)(a1 + 2048) = v278;
  }
  std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 64), maxFeatureVectors);
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 208), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 496), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 520), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 544), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 424), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 448), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 472), maxFeatureVectors);
  if (*(_BYTE *)(a1 + 2032))
    goto LABEL_338;
  std::vector<VVector<float>>::resize((char **)(a1 + 728), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 632), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 608), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 704), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 680), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 656), maxFeatureVectors);
  v290 = *(unsigned int *)(a1 + 52);
  v291 = (void *)operator new[]();
  v292 = v291;
  if ((int)v290 >= 1)
    bzero(v291, 4 * v290);
  *(_QWORD *)(a1 + 752) = v292;
  v293 = *(_QWORD **)(a1 + 2048);
  v294 = *(_QWORD *)(a1 + 2056);
  if ((unint64_t)v293 >= v294)
  {
    v296 = *(_QWORD *)(a1 + 2040);
    v297 = ((uint64_t)v293 - v296) >> 3;
    if (!((unint64_t)(v297 + 1) >> 61))
    {
      v298 = v294 - v296;
      v299 = v298 >> 2;
      if (v298 >> 2 <= (unint64_t)(v297 + 1))
        v299 = v297 + 1;
      if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF8)
        v300 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v300 = v299;
      if (v300)
        v300 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v300);
      else
        v301 = 0;
      v302 = (_QWORD *)(v300 + 8 * v297);
      v303 = v300 + 8 * v301;
      *v302 = v292;
      v295 = v302 + 1;
      v304 = *(char **)(a1 + 2048);
      v305 = *(char **)(a1 + 2040);
      if (v304 != v305)
      {
        do
        {
          v306 = *((_QWORD *)v304 - 1);
          v304 -= 8;
          *--v302 = v306;
        }
        while (v304 != v305);
        v304 = *(char **)(a1 + 2040);
      }
      *(_QWORD *)(a1 + 2040) = v302;
      *(_QWORD *)(a1 + 2048) = v295;
      *(_QWORD *)(a1 + 2056) = v303;
      if (v304)
        operator delete(v304);
      goto LABEL_337;
    }
LABEL_707:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  *v293 = v292;
  v295 = v293 + 1;
LABEL_337:
  *(_QWORD *)(a1 + 2048) = v295;
LABEL_338:
  if (maxFeatureVectors >= 1)
  {
    v307 = 0;
    do
    {
      v308 = *(unsigned int *)(a1 + 48);
      v309 = (void *)operator new[]();
      v310 = v309;
      if ((int)v308 >= 1)
        bzero(v309, 4 * v308);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v307) = v310;
      v311 = *(_QWORD **)(a1 + 2048);
      v312 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v311 >= v312)
      {
        v314 = *(_QWORD *)(a1 + 2040);
        v315 = ((uint64_t)v311 - v314) >> 3;
        if ((unint64_t)(v315 + 1) >> 61)
          goto LABEL_707;
        v316 = v312 - v314;
        v317 = v316 >> 2;
        if (v316 >> 2 <= (unint64_t)(v315 + 1))
          v317 = v315 + 1;
        if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
          v318 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v318 = v317;
        if (v318)
          v318 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v318);
        else
          v319 = 0;
        v320 = (_QWORD *)(v318 + 8 * v315);
        *v320 = v310;
        v313 = v320 + 1;
        v321 = *(char **)(a1 + 2048);
        v322 = *(char **)(a1 + 2040);
        if (v321 != v322)
        {
          do
          {
            v323 = *((_QWORD *)v321 - 1);
            v321 -= 8;
            *--v320 = v323;
          }
          while (v321 != v322);
          v321 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v320;
        *(_QWORD *)(a1 + 2048) = v313;
        *(_QWORD *)(a1 + 2056) = v318 + 8 * v319;
        if (v321)
          operator delete(v321);
      }
      else
      {
        *v311 = v310;
        v313 = v311 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v313;
      if (*(_BYTE *)(a1 + 40))
        v324 = 2;
      else
        v324 = 1;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 208) + 24 * v307), v324);
      v325 = *(unsigned int *)(a1 + 52);
      v326 = (void *)operator new[]();
      v327 = v326;
      if ((int)v325 >= 1)
        bzero(v326, 4 * v325);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v307) = v327;
      v328 = *(_QWORD **)(a1 + 2048);
      v329 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v328 >= v329)
      {
        v331 = *(_QWORD *)(a1 + 2040);
        v332 = ((uint64_t)v328 - v331) >> 3;
        if ((unint64_t)(v332 + 1) >> 61)
          goto LABEL_707;
        v333 = v329 - v331;
        v334 = v333 >> 2;
        if (v333 >> 2 <= (unint64_t)(v332 + 1))
          v334 = v332 + 1;
        if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8)
          v335 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v335 = v334;
        if (v335)
          v335 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v335);
        else
          v336 = 0;
        v337 = (_QWORD *)(v335 + 8 * v332);
        *v337 = v327;
        v330 = v337 + 1;
        v338 = *(char **)(a1 + 2048);
        v339 = *(char **)(a1 + 2040);
        if (v338 != v339)
        {
          do
          {
            v340 = *((_QWORD *)v338 - 1);
            v338 -= 8;
            *--v337 = v340;
          }
          while (v338 != v339);
          v338 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v337;
        *(_QWORD *)(a1 + 2048) = v330;
        *(_QWORD *)(a1 + 2056) = v335 + 8 * v336;
        if (v338)
          operator delete(v338);
      }
      else
      {
        *v328 = v327;
        v330 = v328 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v330;
      v341 = *(unsigned int *)(a1 + 52);
      v342 = (void *)operator new[]();
      v343 = v342;
      if ((int)v341 >= 1)
        bzero(v342, 4 * v341);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v307) = v343;
      v344 = *(_QWORD **)(a1 + 2048);
      v345 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v344 >= v345)
      {
        v347 = *(_QWORD *)(a1 + 2040);
        v348 = ((uint64_t)v344 - v347) >> 3;
        if ((unint64_t)(v348 + 1) >> 61)
          goto LABEL_707;
        v349 = v345 - v347;
        v350 = v349 >> 2;
        if (v349 >> 2 <= (unint64_t)(v348 + 1))
          v350 = v348 + 1;
        if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFF8)
          v351 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v351 = v350;
        if (v351)
          v351 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v351);
        else
          v352 = 0;
        v353 = (_QWORD *)(v351 + 8 * v348);
        *v353 = v343;
        v346 = v353 + 1;
        v354 = *(char **)(a1 + 2048);
        v355 = *(char **)(a1 + 2040);
        if (v354 != v355)
        {
          do
          {
            v356 = *((_QWORD *)v354 - 1);
            v354 -= 8;
            *--v353 = v356;
          }
          while (v354 != v355);
          v354 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v353;
        *(_QWORD *)(a1 + 2048) = v346;
        *(_QWORD *)(a1 + 2056) = v351 + 8 * v352;
        if (v354)
          operator delete(v354);
      }
      else
      {
        *v344 = v343;
        v346 = v344 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v346;
      v357 = *(unsigned int *)(a1 + 52);
      v358 = (void *)operator new[]();
      v359 = v358;
      if ((int)v357 >= 1)
        bzero(v358, 4 * v357);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v307) = v359;
      v360 = *(_QWORD **)(a1 + 2048);
      v361 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v360 >= v361)
      {
        v363 = *(_QWORD *)(a1 + 2040);
        v364 = ((uint64_t)v360 - v363) >> 3;
        if ((unint64_t)(v364 + 1) >> 61)
          goto LABEL_707;
        v365 = v361 - v363;
        v366 = v365 >> 2;
        if (v365 >> 2 <= (unint64_t)(v364 + 1))
          v366 = v364 + 1;
        if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFF8)
          v367 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v367 = v366;
        if (v367)
          v367 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v367);
        else
          v368 = 0;
        v369 = (_QWORD *)(v367 + 8 * v364);
        *v369 = v359;
        v362 = v369 + 1;
        v370 = *(char **)(a1 + 2048);
        v371 = *(char **)(a1 + 2040);
        if (v370 != v371)
        {
          do
          {
            v372 = *((_QWORD *)v370 - 1);
            v370 -= 8;
            *--v369 = v372;
          }
          while (v370 != v371);
          v370 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v369;
        *(_QWORD *)(a1 + 2048) = v362;
        *(_QWORD *)(a1 + 2056) = v367 + 8 * v368;
        if (v370)
          operator delete(v370);
      }
      else
      {
        *v360 = v359;
        v362 = v360 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v362;
      v373 = *(unsigned int *)(a1 + 52);
      v374 = (void *)operator new[]();
      v375 = v374;
      if ((int)v373 >= 1)
        bzero(v374, 4 * v373);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v307) = v375;
      v376 = *(_QWORD **)(a1 + 2048);
      v377 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v376 >= v377)
      {
        v379 = *(_QWORD *)(a1 + 2040);
        v380 = ((uint64_t)v376 - v379) >> 3;
        if ((unint64_t)(v380 + 1) >> 61)
          goto LABEL_707;
        v381 = v377 - v379;
        v382 = v381 >> 2;
        if (v381 >> 2 <= (unint64_t)(v380 + 1))
          v382 = v380 + 1;
        if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8)
          v383 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v383 = v382;
        if (v383)
          v383 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v383);
        else
          v384 = 0;
        v385 = (_QWORD *)(v383 + 8 * v380);
        *v385 = v375;
        v378 = v385 + 1;
        v386 = *(char **)(a1 + 2048);
        v387 = *(char **)(a1 + 2040);
        if (v386 != v387)
        {
          do
          {
            v388 = *((_QWORD *)v386 - 1);
            v386 -= 8;
            *--v385 = v388;
          }
          while (v386 != v387);
          v386 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v385;
        *(_QWORD *)(a1 + 2048) = v378;
        *(_QWORD *)(a1 + 2056) = v383 + 8 * v384;
        if (v386)
          operator delete(v386);
      }
      else
      {
        *v376 = v375;
        v378 = v376 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v378;
      v389 = *(unsigned int *)(a1 + 52);
      v390 = (void *)operator new[]();
      v391 = v390;
      if ((int)v389 >= 1)
        bzero(v390, 4 * v389);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v307) = v391;
      v392 = *(_QWORD **)(a1 + 2048);
      v393 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v392 >= v393)
      {
        v395 = *(_QWORD *)(a1 + 2040);
        v396 = ((uint64_t)v392 - v395) >> 3;
        if ((unint64_t)(v396 + 1) >> 61)
          goto LABEL_707;
        v397 = v393 - v395;
        v398 = v397 >> 2;
        if (v397 >> 2 <= (unint64_t)(v396 + 1))
          v398 = v396 + 1;
        if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFF8)
          v399 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v399 = v398;
        if (v399)
          v399 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v399);
        else
          v400 = 0;
        v401 = (_QWORD *)(v399 + 8 * v396);
        *v401 = v391;
        v394 = v401 + 1;
        v402 = *(char **)(a1 + 2048);
        v403 = *(char **)(a1 + 2040);
        if (v402 != v403)
        {
          do
          {
            v404 = *((_QWORD *)v402 - 1);
            v402 -= 8;
            *--v401 = v404;
          }
          while (v402 != v403);
          v402 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v401;
        *(_QWORD *)(a1 + 2048) = v394;
        *(_QWORD *)(a1 + 2056) = v399 + 8 * v400;
        if (v402)
          operator delete(v402);
      }
      else
      {
        *v392 = v391;
        v394 = v392 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v394;
      v405 = *(unsigned int *)(a1 + 52);
      v406 = (void *)operator new[]();
      v407 = v406;
      if ((int)v405 >= 1)
        bzero(v406, 4 * v405);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * v307) = v407;
      v408 = *(_QWORD **)(a1 + 2048);
      v409 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v408 >= v409)
      {
        v411 = *(_QWORD *)(a1 + 2040);
        v412 = ((uint64_t)v408 - v411) >> 3;
        if ((unint64_t)(v412 + 1) >> 61)
          goto LABEL_707;
        v413 = v409 - v411;
        v414 = v413 >> 2;
        if (v413 >> 2 <= (unint64_t)(v412 + 1))
          v414 = v412 + 1;
        if ((unint64_t)v413 >= 0x7FFFFFFFFFFFFFF8)
          v415 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v415 = v414;
        if (v415)
          v415 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v415);
        else
          v416 = 0;
        v417 = (_QWORD *)(v415 + 8 * v412);
        *v417 = v407;
        v410 = v417 + 1;
        v418 = *(char **)(a1 + 2048);
        v419 = *(char **)(a1 + 2040);
        if (v418 != v419)
        {
          do
          {
            v420 = *((_QWORD *)v418 - 1);
            v418 -= 8;
            *--v417 = v420;
          }
          while (v418 != v419);
          v418 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v417;
        *(_QWORD *)(a1 + 2048) = v410;
        *(_QWORD *)(a1 + 2056) = v415 + 8 * v416;
        if (v418)
          operator delete(v418);
      }
      else
      {
        *v408 = v407;
        v410 = v408 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v410;
      v421 = *(unsigned int *)(a1 + 52);
      v422 = (void *)operator new[]();
      v423 = v422;
      if ((int)v421 >= 1)
        bzero(v422, 4 * v421);
      *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * v307) = v423;
      v424 = *(_QWORD **)(a1 + 2048);
      v425 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v424 >= v425)
      {
        v427 = *(_QWORD *)(a1 + 2040);
        v428 = ((uint64_t)v424 - v427) >> 3;
        if ((unint64_t)(v428 + 1) >> 61)
          goto LABEL_707;
        v429 = v425 - v427;
        v430 = v429 >> 2;
        if (v429 >> 2 <= (unint64_t)(v428 + 1))
          v430 = v428 + 1;
        if ((unint64_t)v429 >= 0x7FFFFFFFFFFFFFF8)
          v431 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v431 = v430;
        if (v431)
          v431 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v431);
        else
          v432 = 0;
        v433 = (_QWORD *)(v431 + 8 * v428);
        *v433 = v423;
        v426 = v433 + 1;
        v434 = *(char **)(a1 + 2048);
        v435 = *(char **)(a1 + 2040);
        if (v434 != v435)
        {
          do
          {
            v436 = *((_QWORD *)v434 - 1);
            v434 -= 8;
            *--v433 = v436;
          }
          while (v434 != v435);
          v434 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v433;
        *(_QWORD *)(a1 + 2048) = v426;
        *(_QWORD *)(a1 + 2056) = v431 + 8 * v432;
        if (v434)
          operator delete(v434);
      }
      else
      {
        *v424 = v423;
        v426 = v424 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v426;
      v437 = *(unsigned int *)(a1 + 52);
      v438 = (void *)operator new[]();
      v439 = v438;
      if ((int)v437 >= 1)
        bzero(v438, 4 * v437);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v307) = v439;
      v440 = *(_QWORD **)(a1 + 2048);
      v441 = *(_QWORD *)(a1 + 2056);
      if ((unint64_t)v440 >= v441)
      {
        v443 = *(_QWORD *)(a1 + 2040);
        v444 = ((uint64_t)v440 - v443) >> 3;
        if ((unint64_t)(v444 + 1) >> 61)
          goto LABEL_707;
        v445 = v441 - v443;
        v446 = v445 >> 2;
        if (v445 >> 2 <= (unint64_t)(v444 + 1))
          v446 = v444 + 1;
        if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFF8)
          v447 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v447 = v446;
        if (v447)
          v447 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v447);
        else
          v448 = 0;
        v449 = (_QWORD *)(v447 + 8 * v444);
        *v449 = v439;
        v442 = v449 + 1;
        v450 = *(char **)(a1 + 2048);
        v451 = *(char **)(a1 + 2040);
        if (v450 != v451)
        {
          do
          {
            v452 = *((_QWORD *)v450 - 1);
            v450 -= 8;
            *--v449 = v452;
          }
          while (v450 != v451);
          v450 = *(char **)(a1 + 2040);
        }
        *(_QWORD *)(a1 + 2040) = v449;
        *(_QWORD *)(a1 + 2048) = v442;
        *(_QWORD *)(a1 + 2056) = v447 + 8 * v448;
        if (v450)
          operator delete(v450);
      }
      else
      {
        *v440 = v439;
        v442 = v440 + 1;
      }
      *(_QWORD *)(a1 + 2048) = v442;
      if (!*(_BYTE *)(a1 + 2032))
      {
        v453 = *(unsigned int *)(a1 + 52);
        v454 = (void *)operator new[]();
        v455 = v454;
        if ((int)v453 >= 1)
          bzero(v454, 4 * v453);
        *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v307) = v455;
        v456 = *(_QWORD **)(a1 + 2048);
        v457 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v456 >= v457)
        {
          v459 = *(_QWORD *)(a1 + 2040);
          v460 = ((uint64_t)v456 - v459) >> 3;
          if ((unint64_t)(v460 + 1) >> 61)
            goto LABEL_707;
          v461 = v457 - v459;
          v462 = v461 >> 2;
          if (v461 >> 2 <= (unint64_t)(v460 + 1))
            v462 = v460 + 1;
          if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFF8)
            v463 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v463 = v462;
          if (v463)
            v463 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v463);
          else
            v464 = 0;
          v465 = (_QWORD *)(v463 + 8 * v460);
          *v465 = v455;
          v458 = v465 + 1;
          v466 = *(char **)(a1 + 2048);
          v467 = *(char **)(a1 + 2040);
          if (v466 != v467)
          {
            do
            {
              v468 = *((_QWORD *)v466 - 1);
              v466 -= 8;
              *--v465 = v468;
            }
            while (v466 != v467);
            v466 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v465;
          *(_QWORD *)(a1 + 2048) = v458;
          *(_QWORD *)(a1 + 2056) = v463 + 8 * v464;
          if (v466)
            operator delete(v466);
        }
        else
        {
          *v456 = v455;
          v458 = v456 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v458;
        v469 = *(unsigned int *)(a1 + 52);
        v470 = (void *)operator new[]();
        v471 = v470;
        if ((int)v469 >= 1)
          bzero(v470, 4 * v469);
        *(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v307) = v471;
        v472 = *(_QWORD **)(a1 + 2048);
        v473 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v472 >= v473)
        {
          v475 = *(_QWORD *)(a1 + 2040);
          v476 = ((uint64_t)v472 - v475) >> 3;
          if ((unint64_t)(v476 + 1) >> 61)
            goto LABEL_707;
          v477 = v473 - v475;
          v478 = v477 >> 2;
          if (v477 >> 2 <= (unint64_t)(v476 + 1))
            v478 = v476 + 1;
          if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8)
            v479 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v479 = v478;
          if (v479)
            v479 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v479);
          else
            v480 = 0;
          v481 = (_QWORD *)(v479 + 8 * v476);
          *v481 = v471;
          v474 = v481 + 1;
          v482 = *(char **)(a1 + 2048);
          v483 = *(char **)(a1 + 2040);
          if (v482 != v483)
          {
            do
            {
              v484 = *((_QWORD *)v482 - 1);
              v482 -= 8;
              *--v481 = v484;
            }
            while (v482 != v483);
            v482 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v481;
          *(_QWORD *)(a1 + 2048) = v474;
          *(_QWORD *)(a1 + 2056) = v479 + 8 * v480;
          if (v482)
            operator delete(v482);
        }
        else
        {
          *v472 = v471;
          v474 = v472 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v474;
        v485 = *(unsigned int *)(a1 + 48);
        v486 = (void *)operator new[]();
        v487 = v486;
        if ((int)v485 >= 1)
          bzero(v486, 4 * v485);
        *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v307) = v487;
        v488 = *(_QWORD **)(a1 + 2048);
        v489 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v488 >= v489)
        {
          v491 = *(_QWORD *)(a1 + 2040);
          v492 = ((uint64_t)v488 - v491) >> 3;
          if ((unint64_t)(v492 + 1) >> 61)
            goto LABEL_707;
          v493 = v489 - v491;
          v494 = v493 >> 2;
          if (v493 >> 2 <= (unint64_t)(v492 + 1))
            v494 = v492 + 1;
          if ((unint64_t)v493 >= 0x7FFFFFFFFFFFFFF8)
            v495 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v495 = v494;
          if (v495)
            v495 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v495);
          else
            v496 = 0;
          v497 = (_QWORD *)(v495 + 8 * v492);
          *v497 = v487;
          v490 = v497 + 1;
          v498 = *(char **)(a1 + 2048);
          v499 = *(char **)(a1 + 2040);
          if (v498 != v499)
          {
            do
            {
              v500 = *((_QWORD *)v498 - 1);
              v498 -= 8;
              *--v497 = v500;
            }
            while (v498 != v499);
            v498 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v497;
          *(_QWORD *)(a1 + 2048) = v490;
          *(_QWORD *)(a1 + 2056) = v495 + 8 * v496;
          if (v498)
            operator delete(v498);
        }
        else
        {
          *v488 = v487;
          v490 = v488 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v490;
        v501 = *(unsigned int *)(a1 + 52);
        v502 = (void *)operator new[]();
        v503 = v502;
        if ((int)v501 >= 1)
          bzero(v502, 4 * v501);
        *(_QWORD *)(*(_QWORD *)(a1 + 704) + 8 * v307) = v503;
        v504 = *(_QWORD **)(a1 + 2048);
        v505 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v504 >= v505)
        {
          v507 = *(_QWORD *)(a1 + 2040);
          v508 = ((uint64_t)v504 - v507) >> 3;
          if ((unint64_t)(v508 + 1) >> 61)
            goto LABEL_707;
          v509 = v505 - v507;
          v510 = v509 >> 2;
          if (v509 >> 2 <= (unint64_t)(v508 + 1))
            v510 = v508 + 1;
          if ((unint64_t)v509 >= 0x7FFFFFFFFFFFFFF8)
            v511 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v511 = v510;
          if (v511)
            v511 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v511);
          else
            v512 = 0;
          v513 = (_QWORD *)(v511 + 8 * v508);
          *v513 = v503;
          v506 = v513 + 1;
          v514 = *(char **)(a1 + 2048);
          v515 = *(char **)(a1 + 2040);
          if (v514 != v515)
          {
            do
            {
              v516 = *((_QWORD *)v514 - 1);
              v514 -= 8;
              *--v513 = v516;
            }
            while (v514 != v515);
            v514 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v513;
          *(_QWORD *)(a1 + 2048) = v506;
          *(_QWORD *)(a1 + 2056) = v511 + 8 * v512;
          if (v514)
            operator delete(v514);
        }
        else
        {
          *v504 = v503;
          v506 = v504 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v506;
        v517 = *(unsigned int *)(a1 + 52);
        v518 = (void *)operator new[]();
        v519 = v518;
        if ((int)v517 >= 1)
          bzero(v518, 4 * v517);
        *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * v307) = v519;
        v520 = *(_QWORD **)(a1 + 2048);
        v521 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v520 >= v521)
        {
          v523 = *(_QWORD *)(a1 + 2040);
          v524 = ((uint64_t)v520 - v523) >> 3;
          if ((unint64_t)(v524 + 1) >> 61)
            goto LABEL_707;
          v525 = v521 - v523;
          v526 = v525 >> 2;
          if (v525 >> 2 <= (unint64_t)(v524 + 1))
            v526 = v524 + 1;
          if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFF8)
            v527 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v527 = v526;
          if (v527)
            v527 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v527);
          else
            v528 = 0;
          v529 = (_QWORD *)(v527 + 8 * v524);
          *v529 = v519;
          v522 = v529 + 1;
          v530 = *(char **)(a1 + 2048);
          v531 = *(char **)(a1 + 2040);
          if (v530 != v531)
          {
            do
            {
              v532 = *((_QWORD *)v530 - 1);
              v530 -= 8;
              *--v529 = v532;
            }
            while (v530 != v531);
            v530 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v529;
          *(_QWORD *)(a1 + 2048) = v522;
          *(_QWORD *)(a1 + 2056) = v527 + 8 * v528;
          if (v530)
            operator delete(v530);
        }
        else
        {
          *v520 = v519;
          v522 = v520 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v522;
        v533 = *(unsigned int *)(a1 + 52);
        v534 = (void *)operator new[]();
        v535 = v534;
        if ((int)v533 >= 1)
          bzero(v534, 4 * v533);
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + 8 * v307) = v535;
        v536 = *(_QWORD **)(a1 + 2048);
        v537 = *(_QWORD *)(a1 + 2056);
        if ((unint64_t)v536 >= v537)
        {
          v539 = *(_QWORD *)(a1 + 2040);
          v540 = ((uint64_t)v536 - v539) >> 3;
          if ((unint64_t)(v540 + 1) >> 61)
            goto LABEL_707;
          v541 = v537 - v539;
          v542 = v541 >> 2;
          if (v541 >> 2 <= (unint64_t)(v540 + 1))
            v542 = v540 + 1;
          if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFF8)
            v543 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v543 = v542;
          if (v543)
            v543 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v543);
          else
            v544 = 0;
          v545 = (_QWORD *)(v543 + 8 * v540);
          *v545 = v535;
          v538 = v545 + 1;
          v546 = *(char **)(a1 + 2048);
          v547 = *(char **)(a1 + 2040);
          if (v546 != v547)
          {
            do
            {
              v548 = *((_QWORD *)v546 - 1);
              v546 -= 8;
              *--v545 = v548;
            }
            while (v546 != v547);
            v546 = *(char **)(a1 + 2040);
          }
          *(_QWORD *)(a1 + 2040) = v545;
          *(_QWORD *)(a1 + 2048) = v538;
          *(_QWORD *)(a1 + 2056) = v543 + 8 * v544;
          if (v546)
            operator delete(v546);
        }
        else
        {
          *v536 = v535;
          v538 = v536 + 1;
        }
        *(_QWORD *)(a1 + 2048) = v538;
      }
      ++v307;
    }
    while (v307 < maxFeatureVectors);
  }
}

