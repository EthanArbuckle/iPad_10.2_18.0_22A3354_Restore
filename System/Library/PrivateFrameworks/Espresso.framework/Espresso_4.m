uint64_t E5RT::ExecutionStreamImpl::GetStreamId(E5RT::ExecutionStreamImpl *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730532>(uint64_t a1, const void **a2, uint64_t a3)
{
  E5RT::ExecutionOperationTelemetryEmitter *v6;
  int v7;
  dispatch_semaphore_t v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *exception;
  uint64_t ExecutionIdentifier;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t ErrorCode;
  uint64_t ErrorMessage;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[4];
  NSObject *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  __int128 v38;
  __int128 v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37[1] = 0x2B23406400000000;
  v38 = 0u;
  v39 = 0u;
  kdebug_trace();
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v32, "ExecuteStreamSyncImpl");
    std::string::basic_string[abi:ne180100]<0>(v42, "No operations have been encoded to the execution stream.");
    E5RT::Status::Status(v28, 2, v42);
    E5RT::E5RTError::E5RTError(exception, &v32, v28);
  }
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    ExecutionIdentifier = E5RT::ExecuteOptions::GetExecutionIdentifier(a2);
    E5RT::ExecutionOperationTelemetryEmitter::Create(ExecutionIdentifier, &v32);
    v6 = (E5RT::ExecutionOperationTelemetryEmitter *)v32;
    v17 = *(unsigned __int8 *)(a1 + 101);
    atomic_store(1u, (unsigned __int8 *)(a1 + 80));
    if (v17)
    {
LABEL_4:
      v8 = dispatch_semaphore_create(0);
      v32 = 0;
      *(_QWORD *)&v33 = &v32;
      *((_QWORD *)&v33 + 1) = 0x3812000000;
      *(_QWORD *)&v34 = sub_190F5C98C;
      *((_QWORD *)&v34 + 1) = sub_190F5C998;
      v35 = 0;
      E5RT::Status::Status((E5RT::Status *)&v36);
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = sub_190F5C9A0;
      v29[3] = &unk_1E2DCB480;
      v31 = &v32;
      v9 = v8;
      v30 = v9;
      v43 = 0;
      v42[0] = &unk_1E2DAE9B0;
      v42[1] = MEMORY[0x19401D648](v29);
      v43 = v42;
      v41 = v40;
      (*(void (**)(uint64_t, _QWORD *))(v42[0] + 24))((uint64_t)v42, v40);
      E5RT::ExecutionStreamImpl::SubmitStreamAsync(a1, v40);
      v10 = v41;
      if (v41 == v40)
      {
        v11 = 4;
        v10 = v40;
      }
      else
      {
        if (!v41)
          goto LABEL_9;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_9:
      dispatch_semaphore_wait(v9, 0xFFFFFFFFFFFFFFFFLL);
      if (!E5RT::Status::Success((E5RT::Status *)(v33 + 48)))
      {
        v24 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v28, "ExecuteStreamSyncImpl");
        ErrorCode = E5RT::Status::GetErrorCode((E5RT::Status *)(v33 + 48));
        ErrorMessage = E5RT::Status::GetErrorMessage((E5RT::Status *)(v33 + 48));
        E5RT::Status::Status(&v27, ErrorCode, ErrorMessage);
        E5RT::E5RTError::E5RTError(v24, v28, &v27);
      }
      v12 = v43;
      if (v43 == v42)
      {
        v13 = 4;
        v12 = v42;
      }
      else
      {
        if (!v43)
        {
LABEL_15:

          _Block_object_dispose(&v32, 8);
          E5RT::Status::~Status((E5RT::Status *)&v36);

          goto LABEL_16;
        }
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
      goto LABEL_15;
    }
  }
  else
  {
    v6 = 0;
    v7 = *(unsigned __int8 *)(a1 + 101);
    atomic_store(1u, (unsigned __int8 *)(a1 + 80));
    if (v7)
      goto LABEL_4;
  }
  v18 = *(uint64_t **)a1;
  v19 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v19)
  {
    do
    {
      (*(void (**)(uint64_t, const void **))(*(_QWORD *)*v18 + 96))(*v18, a2);
      if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
      {
        E5RT::ExecutionStreamOperationInternal::GetTelemetryContainer(*v18, &v32);
        v21 = v32;
        v32 = 0;
        v37[0] = v21;
        E5RT::ExecutionOperationTelemetryEmitter::AddContainer(v6, v37);
        v22 = v37[0];
        v37[0] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v23 = v32;
        v32 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      if (*(_QWORD *)(a3 + 24) && *v18 != *(_QWORD *)(*(_QWORD *)(a1 + 8) - 16))
      {
        v32 = 0x2B2340A800000000;
        v33 = 0u;
        v34 = 0u;
        kdebug_trace();
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
        E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&v32);
      }
      v18 += 2;
    }
    while (v18 != v19);
  }
LABEL_16:
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    E5RT::ExecutionOperationTelemetryEmitter::EmitToOSSignpost(v6);
    E5RT::ExecutionOperationTelemetryEmitter::EmitToCoreAnalytics(v6);
  }
  if (v6)
    (*(void (**)(E5RT::ExecutionOperationTelemetryEmitter *))(*(_QWORD *)v6 + 8))(v6);
  return kdebug_trace();
}

void sub_190F5ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a27);
  _Unwind_Resume(a1);
}

void sub_190F5ADE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a22);
  if (v33)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a33);
    _Unwind_Resume(a1);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a33);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::ExecutionStreamImpl::ExecuteStreamSync(E5RT::ExecutionStreamImpl *this, const void **a2)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730532>((uint64_t)this, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_190F5B080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *E5RT::ExecutionStreamImpl::StepStreamSync(E5RT::ExecuteOptions *a1, _QWORD *a2)
{
  const void **v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (const void **)E5RT::ExecuteOptions::SharedDefaultOption(a1);
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v9 = 0;
  }
  E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730536>((uint64_t)a1, v4, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_190F5B1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*(_QWORD *)a13 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730536>(uint64_t a1, const void **a2, uint64_t a3)
{
  E5RT::ExecutionOperationTelemetryEmitter *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *exception;
  uint64_t ExecutionIdentifier;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  _BYTE v21[8];
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v22 = 0x2B23406800000000;
  v23 = 0u;
  v24 = 0u;
  kdebug_trace();
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v16, "ExecuteStreamSyncImpl");
    std::string::basic_string[abi:ne180100]<0>(v20, "No operations have been encoded to the execution stream.");
    E5RT::Status::Status(v21, 2, v20);
    E5RT::E5RTError::E5RTError(exception, &v16, v21);
  }
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    ExecutionIdentifier = E5RT::ExecuteOptions::GetExecutionIdentifier(a2);
    E5RT::ExecutionOperationTelemetryEmitter::Create(ExecutionIdentifier, &v16);
    v6 = (E5RT::ExecutionOperationTelemetryEmitter *)v16;
    atomic_store(1u, (unsigned __int8 *)(a1 + 80));
    v7 = *(uint64_t **)a1;
    v8 = *(uint64_t **)(a1 + 8);
    if (*(uint64_t **)a1 == v8)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    atomic_store(1u, (unsigned __int8 *)(a1 + 80));
    v7 = *(uint64_t **)a1;
    v8 = *(uint64_t **)(a1 + 8);
    if (*(uint64_t **)a1 == v8)
      goto LABEL_17;
  }
  do
  {
    (*(void (**)(uint64_t, const void **))(*(_QWORD *)*v7 + 96))(*v7, a2);
    if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
    {
      E5RT::ExecutionStreamOperationInternal::GetTelemetryContainer(*v7, &v16);
      v10 = v16;
      v16 = 0;
      v19 = v10;
      E5RT::ExecutionOperationTelemetryEmitter::AddContainer(v6, &v19);
      v11 = v19;
      v19 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v16;
      v16 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    if (*(_QWORD *)(a3 + 24) && *v7 != *(_QWORD *)(*(_QWORD *)(a1 + 8) - 16))
    {
      v16 = 0x2B2340A800000000;
      v17 = 0u;
      v18 = 0u;
      kdebug_trace();
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&v16);
    }
    v7 += 2;
  }
  while (v7 != v8);
LABEL_17:
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    E5RT::ExecutionOperationTelemetryEmitter::EmitToOSSignpost(v6);
    E5RT::ExecutionOperationTelemetryEmitter::EmitToCoreAnalytics(v6);
  }
  if (v6)
    (*(void (**)(E5RT::ExecutionOperationTelemetryEmitter *))(*(_QWORD *)v6 + 8))(v6);
  return kdebug_trace();
}

void sub_190F5B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F5B4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a10);
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a27);
    _Unwind_Resume(a1);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a27);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::PreWireInUseAllocations(E5RT::ExecutionStreamImpl *this)
{
  _QWORD *i;
  _QWORD *v3;

  kdebug_trace();
  v3 = *(_QWORD **)this;
  for (i = (_QWORD *)*((_QWORD *)this + 1); v3 != i; v3 += 2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 88))(*v3);
  return kdebug_trace();
}

void sub_190F5B67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::SetANEExecutionPriority(uint64_t result, int a2)
{
  uint64_t **v2;
  uint64_t v3;

  *(_DWORD *)(result + 96) = a2;
  v2 = *(uint64_t ***)(result + 40);
  if (v2)
  {
    v3 = result;
    do
    {
      result = (*(uint64_t (**)(uint64_t *, _QWORD))(*v2[2] + 144))(v2[2], *(unsigned int *)(v3 + 96));
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return result;
}

void E5RT::ExecutionStreamImpl::SubmitStreamAsync(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  E5RT::ExecutionStreamOperationInternal **v9;
  E5RT::ExecutionStreamOperationInternal **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  E5RT::ExecutionStreamOperationInternal *v43;
  E5RT::AsyncEvent *CompletionAsyncEventRef;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *exception;
  std::__shared_weak_count *v52;
  _BYTE v53[24];
  _BYTE *v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  BOOL v59;
  _QWORD v60[3];
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[3];
  _QWORD *v64;
  char v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  BOOL v71;
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 72) + 1;
  *(_QWORD *)(a1 + 72) = v4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  *(_BYTE *)(a1 + 100) = 1;
  v5 = (_QWORD *)a2[3];
  v6 = (char *)operator new(0x68uLL);
  v7 = (std::__shared_weak_count *)v6;
  *((_QWORD *)v6 + 1) = 0;
  v8 = (unint64_t *)(v6 + 8);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DCB4B0;
  *(_OWORD *)(v6 + 24) = xmmword_191A79CE0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  v52 = (std::__shared_weak_count *)v6;
  v9 = *(E5RT::ExecutionStreamOperationInternal ***)a1;
  v10 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 8);
  v11 = (uint64_t)v10 - *(_QWORD *)a1;
  if (v10 != *(E5RT::ExecutionStreamOperationInternal ***)a1)
  {
    LOBYTE(v63[0]) = 0;
    v65 = 0;
    if (!v5)
      goto LABEL_67;
    v12 = v11 >> 4;
    v56 = v4;
    *(_QWORD *)&v57 = v6 + 24;
    *((_QWORD *)&v57 + 1) = v6;
    do
      v13 = __ldxr(v8);
    while (__stxr(v13 + 1, v8));
    v58 = v12;
    v59 = v5 != 0;
    v14 = v60;
    if (v5 == a2)
    {
      v61 = v60;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v60);
    }
    else
    {
      v61 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
    v15 = *(_QWORD *)(a1 + 64);
    v62 = v15;
    if (v65)
    {
      v69 = v57;
      v57 = 0uLL;
      v68 = v56;
      v70 = v58;
      v71 = v59;
      v16 = v72;
      if (v61)
      {
        if (v61 == v60)
        {
          v73 = v72;
          (*(void (**)(_QWORD *, _QWORD *))(v60[0] + 24))(v60, v72);
          v15 = v62;
        }
        else
        {
          v73 = v61;
          v61 = 0;
        }
      }
      else
      {
        v73 = 0;
      }
      v74 = v15;
      v67 = 0;
      v18 = operator new(0x58uLL);
      v19 = v18;
      v20 = v68;
      v21 = v73;
      *v18 = &off_1E2DCB500;
      v18[1] = v20;
      *((_OWORD *)v18 + 1) = v69;
      v69 = 0uLL;
      v18[4] = v70;
      *((_BYTE *)v18 + 40) = v71;
      if (v21)
      {
        if (v21 == v72)
        {
          v18[9] = v18 + 6;
          (*(void (**)(_QWORD *))(v72[0] + 24))(v72);
          v15 = v74;
        }
        else
        {
          v18[9] = v21;
          v73 = 0;
        }
      }
      else
      {
        v18[9] = 0;
      }
      v19[10] = v15;
      v67 = v19;
      std::__function::__value_func<void ()(E5RT::ExecutionStreamOperationInternal const*,std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](v66, v63);
      v22 = v67;
      if (v67 == v66)
      {
        v23 = 4;
        v22 = v66;
      }
      else
      {
        if (!v67)
          goto LABEL_29;
        v23 = 5;
      }
      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_29:
      if (v73 == v72)
      {
        v24 = 4;
      }
      else
      {
        if (!v73)
        {
LABEL_34:
          v25 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
          if (!*((_QWORD *)&v69 + 1))
            goto LABEL_38;
          v26 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
            v28 = v61;
            if (v61 != v60)
              goto LABEL_39;
          }
          else
          {
LABEL_38:
            v28 = v61;
            if (v61 != v60)
            {
LABEL_39:
              if (!v28)
                goto LABEL_61;
              v29 = 5;
              v14 = v28;
LABEL_60:
              (*(void (**)(_QWORD *))(*v14 + 8 * v29))(v14);
LABEL_61:
              if (*((_QWORD *)&v57 + 1))
              {
                v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
                do
                  v40 = __ldaxr(v39);
                while (__stlxr(v40 - 1, v39));
                if (!v40)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v57 + 1) + 16))(*((_QWORD *)&v57 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v57 + 1));
                }
              }
              v9 = *(E5RT::ExecutionStreamOperationInternal ***)a1;
              v10 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 8);
LABEL_67:
              if (v9 != v10)
              {
                while (1)
                {
                  v43 = *v9;
                  if (!*v9)
                  {
                    exception = __cxa_allocate_exception(0x18uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v68, "SubmitStreamAsync");
                    std::string::basic_string[abi:ne180100]<0>(&v56, "Async execution is not supported with program function encodes. Use Execution stream operations instead.");
                    E5RT::Status::Status(v66, 2, &v56);
                    E5RT::E5RTError::E5RTError(exception, &v68, v66);
                  }
                  CompletionAsyncEventRef = (E5RT::AsyncEvent *)E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEventRef(*v9);
                  if (E5RT::ExecutionStreamOperationInternal::HasInternalCompletionEventBound(v43))
                  {
                    E5RT::AsyncEvent::GetActiveFutureValue(CompletionAsyncEventRef);
                    E5RT::AsyncEvent::SetActiveFutureValue(CompletionAsyncEventRef);
                  }
                  v45 = *(_QWORD *)(a1 + 64);
                  v53[0] = 0;
                  v55 = 0;
                  if (v65)
                    break;
LABEL_82:
                  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v43 + 112))(v43, v45, v4, v53);
                  if (v55)
                  {
                    v41 = v54;
                    if (v54 == v53)
                    {
                      v41 = v53;
                      v42 = 4;
                    }
                    else
                    {
                      if (!v54)
                        goto LABEL_71;
                      v42 = 5;
                    }
                    (*(void (**)(void))(*v41 + 8 * v42))();
                  }
LABEL_71:
                  v9 += 2;
                  if (v9 == v10)
                    goto LABEL_86;
                }
                v46 = (uint64_t)v64;
                if (v64)
                {
                  if (v64 == v63)
                  {
                    v54 = v53;
                    (*(void (**)(_QWORD *, _BYTE *))(v63[0] + 24))(v63, v53);
                    goto LABEL_81;
                  }
                  v46 = (*(uint64_t (**)(void))(*v64 + 16))();
                }
                v54 = (_BYTE *)v46;
LABEL_81:
                v55 = 1;
                goto LABEL_82;
              }
LABEL_86:
              if (v65)
              {
                v47 = v64;
                if (v64 == v63)
                {
                  v48 = 4;
                  v47 = v63;
                }
                else
                {
                  if (!v64)
                    goto LABEL_92;
                  v48 = 5;
                }
                (*(void (**)(void))(*v47 + 8 * v48))();
              }
LABEL_92:
              v7 = v52;
              if (!v52)
                return;
              goto LABEL_93;
            }
          }
LABEL_59:
          v29 = 4;
          goto LABEL_60;
        }
        v24 = 5;
        v16 = v73;
      }
      (*(void (**)(_QWORD *))(*v16 + 8 * v24))(v16);
      goto LABEL_34;
    }
    v69 = v57;
    v57 = 0uLL;
    v68 = v56;
    v70 = v58;
    v71 = v59;
    v17 = v72;
    if (v61)
    {
      if (v61 == v60)
      {
        v73 = v72;
        (*(void (**)(_QWORD *, _QWORD *))(v60[0] + 24))(v60, v72);
        v15 = v62;
      }
      else
      {
        v73 = v61;
        v61 = 0;
      }
    }
    else
    {
      v73 = 0;
    }
    v74 = v15;
    v64 = 0;
    v30 = operator new(0x58uLL);
    v31 = v30;
    v32 = v68;
    v33 = v73;
    *v30 = &off_1E2DCB500;
    v30[1] = v32;
    *((_OWORD *)v30 + 1) = v69;
    v69 = 0uLL;
    v30[4] = v70;
    *((_BYTE *)v30 + 40) = v71;
    if (v33)
    {
      if (v33 == v72)
      {
        v30[9] = v30 + 6;
        (*(void (**)(_QWORD *))(v72[0] + 24))(v72);
        v34 = v73;
        v31[10] = v74;
        v64 = v31;
        if (v34 != v72)
          goto LABEL_48;
      }
      else
      {
        v30[9] = v33;
        v73 = 0;
        v30[10] = v15;
        v64 = v30;
        v34 = v73;
        if (v73 != v72)
        {
LABEL_48:
          if (!v34)
          {
LABEL_53:
            v36 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
            if (*((_QWORD *)&v69 + 1))
            {
              v37 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v65 = 1;
            v28 = v61;
            if (v61 != v60)
              goto LABEL_39;
            goto LABEL_59;
          }
          v35 = 5;
          v17 = v34;
LABEL_52:
          (*(void (**)(_QWORD *))(*v17 + 8 * v35))(v17);
          goto LABEL_53;
        }
      }
    }
    else
    {
      v30[9] = 0;
      v30[10] = v15;
      v64 = v30;
      v34 = v73;
      if (v73 != v72)
        goto LABEL_48;
    }
    v35 = 4;
    goto LABEL_52;
  }
  if (!v5)
    goto LABEL_92;
  std::function<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::operator()((uint64_t)a2, *(_QWORD *)(a1 + 64), v4);
LABEL_93:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v50 = __ldaxr(p_shared_owners);
  while (__stlxr(v50 - 1, p_shared_owners));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_190F5BE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  if (a9)
    (*(void (**)(void))(*(_QWORD *)a9 + 8))();
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_190F5C094(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 40);
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t E5RT::ExecutionStreamImpl::GetInternalAsyncComputeRequestIdForLastSubmit(E5RT::ExecutionStreamImpl *this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetInternalAsyncComputeRequestIdForLastSubmit");
    std::string::basic_string[abi:ne180100]<0>(v3, "No async submits have been made to the stream yet.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F5C1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::ExecutionStreamConfigOptions *sub_190F5C240()
{
  E5RT::ExecutionStreamConfigOptions *result;
  E5RT::ExecutionStreamConfigOptions *v1;

  result = E5RT::ExecutionStreamConfigOptions::Create(&v1);
  qword_1EE214838 = (uint64_t)v1;
  return result;
}

uint64_t E5RT::ExecutionStreamImpl::ResetConfigOptions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  void *exception;
  _QWORD v5[3];
  _BYTE v6[8];
  _QWORD v7[3];

  v2 = atomic_load((unsigned __int8 *)(this + 80));
  if ((v2 & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "ResetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v5, "Config Options cannot be reset before the stream is reset.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  v3 = *(_QWORD *)(this + 88);
  if (v3)
    *(_QWORD *)(this + 88) = 0;
  *a2 = v3;
  return this;
}

void sub_190F5C320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::SetConfigOptions(uint64_t result, uint64_t *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  void *exception;
  void *v6;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v7, "configOptions is NULL.");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  v2 = atomic_load((unsigned __int8 *)(result + 80));
  if ((v2 & 1) != 0)
  {
    v6 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v7, "Config Options cannot be set before the stream is reset.");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(v6, v9, v8);
  }
  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(result + 88);
  *(_QWORD *)(result + 88) = v3;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_190F5C4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_190F5C5A8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F5C5BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB408;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F5C5F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB408;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_190F5C614(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  _OWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v3 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v31 = *a2;
  v4 = v31;
  *((_QWORD *)&v31 + 1) = v3;
  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) == 13)
  {
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    E5RT::Ops::JitCallOperation::GetCalleeOperation(v4, &v34);
    if (v3)
    {
      v15 = (unint64_t *)&v3->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
    v18 = *(uint64_t **)v17;
    v19 = *(uint64_t **)(v17 + 8);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(a1 + 16);
      v21 = (std::__shared_weak_count *)v18[1];
      v32 = *v18;
      v33 = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = *(_QWORD *)(v20 + 24);
      if (!v24)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(v24, &v32);
      v25 = v33;
      if (v33)
      {
        v26 = (unint64_t *)&v33->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v18 += 2;
    }
    v28 = v35;
    if (v35)
    {
      v29 = (unint64_t *)&v35->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    v6 = *(uint64_t **)(v5 + 8);
    if ((unint64_t)v6 >= *(_QWORD *)(v5 + 16))
    {
      v9 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>(v5, &v31);
    }
    else
    {
      *v6 = v4;
      v6[1] = (uint64_t)v3;
      if (v3)
      {
        v7 = (unint64_t *)&v3->__shared_owners_;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = v6 + 2;
    }
    *(_QWORD *)(v5 + 8) = v9;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_190F5C82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a10)
  {
    v17 = (unint64_t *)&a10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F5C914(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT19ExecutionStreamImpl15EncodeOperationENSt3__110shared_ptrINS_24ExecutionStreamOperationEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT19ExecutionStreamImpl15EncodeOperationENSt3__110shared_ptrINS_24ExecutionStreamOperationEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT19ExecutionStreamImpl15EncodeOperationENSt3__110shared_ptrINS_24ExecutionStreamOperationEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT19ExecutionStreamImpl15EncodeOperationENSt3__110shared_ptrINS_24ExecutionStreamOperationEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F5C980()
{
  return &unk_1E2DCB468;
}

uint64_t sub_190F5C98C(uint64_t a1, uint64_t a2)
{
  return E5RT::Status::Status(a1 + 48, a2 + 48);
}

void sub_190F5C998(uint64_t a1)
{
  E5RT::Status::~Status((E5RT::Status *)(a1 + 48));
}

intptr_t sub_190F5C9A0(uint64_t a1, uint64_t a2, uint64_t a3, E5RT::E5RTError **a4)
{
  const E5RT::Status *Status;
  __int128 *v7;

  if (!*a4)
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  Status = (const E5RT::Status *)E5RT::E5RTError::GetStatus(*a4);
  E5RT::Status::Status((E5RT::Status *)&v7, Status);
  E5RT::Status::operator=((std::string **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), &v7);
  E5RT::Status::~Status((E5RT::Status *)&v7);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_190F5CA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::Status::~Status((E5RT::Status *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::~__func(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &unk_1E2DAE9B0;
  result = MEMORY[0x19401D648](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a4;
  *a4 = 0;
  v7 = v5;
  (*(void (**)(void))(v4 + 16))();
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190F5CB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A79F09)
    return a1 + 8;
  if (((v3 & 0x8000000191A79F09 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A79F09))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A79F09 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::target_type()
{
}

void sub_190F5CBE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DCB4B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_190F5CBF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DCB4B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void sub_190F5CC24(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 32));
}

_QWORD *sub_190F5CC60(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E2DCB500;
  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_190F5CD04(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E2DCB500;
  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F5CDA8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = operator new(0x58uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *v2 = &off_1E2DCB500;
  v2[1] = v4;
  v6 = *(_QWORD *)(a1 + 24);
  v2[2] = v5;
  v2[3] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v2[4] = *(_QWORD *)(a1 + 32);
  *((_BYTE *)v2 + 40) = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 72);
  if (!v9)
    goto LABEL_7;
  if (v9 != a1 + 48)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_7:
    v10 = *(_QWORD *)(a1 + 80);
    v3[9] = v9;
    v3[10] = v10;
    return v3;
  }
  v3[9] = v3 + 6;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v3[10] = *(_QWORD *)(a1 + 80);
  return v3;
}

void sub_190F5CE68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    sub_190F5D49C(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190F5CE88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E2DCB500;
  *(_QWORD *)(a2 + 8) = v4;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a2 + 32) = v9;
  result = *(_QWORD *)(a1 + 72);
  if (!result)
    goto LABEL_7;
  if (result != a1 + 48)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_7:
    *(_QWORD *)(a2 + 72) = result;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
    return result;
  }
  *(_QWORD *)(a2 + 72) = a2 + 48;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  return result;
}

void sub_190F5CF40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
    sub_190F5D49C(v3);
  _Unwind_Resume(exception_object);
}

void sub_190F5CF58(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_190F5CFE4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = __p + 48;
  v3 = (char *)*((_QWORD *)__p + 9);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 3);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(__p);
  }
  else
  {
LABEL_10:
    operator delete(__p);
  }
}

void sub_190F5D07C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a3;
  *a3 = 0;
  if (*(_BYTE *)(a1 + 40) && v4)
  {
    v12 = (std::mutex *)(*(_QWORD *)(a1 + 16) + 8);
    std::mutex::lock(v12);
    v13 = *(_QWORD *)(a1 + 16);
    if (!*(_QWORD *)(v13 + 72))
    {
      *(_QWORD *)(v13 + 72) = v4;
      v4 = 0;
    }
    std::mutex::unlock(v12);
  }
  v5 = *(unint64_t **)(a1 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (v6 == *(_QWORD *)(a1 + 32) - 1)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(v7 + 72);
    if (v8)
      *(_QWORD *)(v7 + 72) = 0;
    v9 = *(_QWORD *)(a1 + 8);
    v14 = v8;
    v15 = v9;
    v10 = *(_QWORD *)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v16, &v15, &v14);
    v11 = v14;
    v14 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_190F5D180(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_190F5D19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    if (!v10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F5D1E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT19ExecutionStreamImpl17SubmitStreamAsyncENSt3__18functionIFvyyNS1_10unique_ptrINS_9E5RTError"
                     "ENS1_14default_deleteIS4_EEEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT19ExecutionStreamImpl17SubmitStreamAsyncENSt3__18functionIFvyyNS1_10unique_ptrINS"
                                "_9E5RTErrorENS1_14default_deleteIS4_EEEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT19ExecutionStreamImpl17SubmitStreamAsyncENSt3__18functionIFvyyNS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS4_EEEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT19ExecutionStreamImpl17SubmitStreamAsyncENSt3__18functionIFvyyNS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS4_EEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F5D24C()
{
  return &unk_1E2DCB560;
}

_QWORD *std::__function::__value_func<void ()(E5RT::ExecutionStreamOperationInternal const*,std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_190F5D3EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void OUTLINED_FUNCTION_0(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

void sub_190F5D400(std::__shared_weak_count **a1, uint64_t a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  int v10;

  v7 = *a1;
  if (*a1)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      OUTLINED_FUNCTION_8(p_shared_owners);
    while (v10);
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

void sub_190F5D464(std::__shared_weak_count **a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  uint64_t v3;
  int v4;

  v1 = *a1;
  if (*a1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      OUTLINED_FUNCTION_8(p_shared_owners);
    while (v4);
    if (!v3)
    {
      OUTLINED_FUNCTION_31();
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  OUTLINED_FUNCTION_2();
}

void sub_190F5D49C(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  uint64_t v3;
  int v4;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    OUTLINED_FUNCTION_8(p_shared_owners);
  while (v4);
  if (v3)
  {
    OUTLINED_FUNCTION_2();
  }
  else
  {
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_0(a1);
  }
}

void E5RT::ExecutionStreamOperation::~ExecutionStreamOperation(E5RT::ExecutionStreamOperation *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::ExecutionStreamOperation::GetOpName(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetOpName(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::BindDependentAsyncEvents(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

void E5RT::ExecutionStreamOperation::BindCompletionAsyncEvent(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v2 + 56))(v2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_190F5D5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperation::GetDependentAsyncEvents(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::GetCompletionAsyncEvent@<X0>(E5RT::ExecutionStreamOperation *this@<X0>, _QWORD *a2@<X8>)
{
  return E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*((_QWORD *)this + 1), a2);
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPortRef(uint64_t a1, uint64_t a2)
{
  return E5RT::ExecutionStreamOperationInternal::GetInputPortRef(*(_QWORD *)(a1 + 8), a2);
}

{
  return E5RT::ExecutionStreamOperationInternal::GetInputPortRef(*(_QWORD *)(a1 + 8), a2);
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPortRef(uint64_t a1, uint64_t a2)
{
  return E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(*(_QWORD *)(a1 + 8), a2);
}

{
  return E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(*(_QWORD *)(a1 + 8), a2);
}

uint64_t E5RT::ExecutionStreamOperation::GetInOutPortRef(uint64_t a1, uint64_t a2)
{
  return E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(*(_QWORD *)(a1 + 8), a2);
}

{
  return E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(*(_QWORD *)(a1 + 8), a2);
}

uint64_t *E5RT::ExecutionStreamOperation::GetDependentAsyncEventRef(uint64_t a1, unsigned __int8 *a2)
{
  return E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEventRef(*(_QWORD *)(a1 + 8), a2);
}

uint64_t E5RT::ExecutionStreamOperation::GetCompletionAsyncEventRef(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEventRef(this[1]);
}

{
  return E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEventRef(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::GetConfigOptions(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetConfigOptions(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::ResetConfigOptions(E5RT::ExecutionStreamOperation *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
}

uint64_t E5RT::ExecutionStreamOperation::SetConfigOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 136))(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190F5D680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void E5RT::ExecutionStreamOperation::SerializeInferenceFrameData(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  E5RT::ExecutionStreamOperationInternal::SerializeInferenceFrameData(v4, (const void **)v7, (uint64_t)__p, a4);
  if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v7[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v8) < 0)
    goto LABEL_5;
}

void sub_190F5D73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::copy((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperation::SerializeInferenceFrameDataPerSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v3 + 152))(v3, v6, __p);
  if ((SHIBYTE(v5) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v6[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v7) < 0)
    goto LABEL_5;
}

void sub_190F5D800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::copy((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::OperandDescriptor const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::OperandDescriptor const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::OperandDescriptor const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7A235)
    return a1 + 24;
  if (((v3 & 0x8000000191A7A235 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7A235))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7A235 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::copy(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(E5RT::ExecutionStreamOperationInternal *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  void *v8;
  void **v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  void **v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  void **v25;
  void **v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;

  *(_QWORD *)this = off_1E2D5B1F8;
  kdebug_trace_string();
  v2 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (_QWORD *)*((_QWORD *)this + 19);
  while (v7)
  {
    v10 = v7;
    v7 = (_QWORD *)*v7;
    v11 = (std::__shared_weak_count *)v10[3];
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    operator delete(v10);
  }
  v8 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v8)
    operator delete(v8);
  v9 = (void **)*((_QWORD *)this + 14);
  if (v9)
  {
    do
    {
      while (1)
      {
        v14 = (void **)*v9;
        v15 = (std::__shared_weak_count *)v9[6];
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (*((char *)v9 + 39) < 0)
          break;
        operator delete(v9);
        v9 = v14;
        if (!v14)
          goto LABEL_31;
      }
      operator delete(v9[2]);
      operator delete(v9);
      v9 = v14;
    }
    while (v14);
  }
LABEL_31:
  v18 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v18)
    operator delete(v18);
  v19 = (void **)*((_QWORD *)this + 9);
  if (v19)
  {
    do
    {
      while (1)
      {
        v20 = (void **)*v19;
        v21 = (std::__shared_weak_count *)v19[6];
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (*((char *)v19 + 39) < 0)
          break;
        operator delete(v19);
        v19 = v20;
        if (!v20)
          goto LABEL_43;
      }
      operator delete(v19[2]);
      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
LABEL_43:
  v24 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v24)
    operator delete(v24);
  v25 = (void **)*((_QWORD *)this + 4);
  if (v25)
  {
    do
    {
      while (1)
      {
        v26 = (void **)*v25;
        v27 = (std::__shared_weak_count *)v25[6];
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (*((char *)v25 + 39) < 0)
          break;
        operator delete(v25);
        v25 = v26;
        if (!v26)
          goto LABEL_55;
      }
      operator delete(v25[2]);
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
LABEL_55:
  v30 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v30)
    operator delete(v30);
  E5RT::ExecutionStreamOperation::~ExecutionStreamOperation(this);
}

uint64_t E5RT::ExecutionStreamOperationInternal::PreWireMemoryObjects(uint64_t this)
{
  *(_BYTE *)(this + 248) |= 8u;
  return this;
}

void sub_190F5DBEC(_QWORD *a1, uint64_t **a2)
{
  uint64_t **v2;
  E5RT::BufferObject *v4;
  int BufferType;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  unsigned int v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  void *v18;
  void *exception;
  std::string __p;
  std::string v21;
  std::string v22;
  std::string v23;
  __int128 v24;
  std::string::size_type v25;
  void *v26;
  std::__shared_weak_count *v27;

  if (a2)
  {
    v2 = a2;
    while (1)
    {
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v2[5], &v26);
      if (v26 && !E5RT::MemoryObject::TryAsSurface(v26))
      {
        if (!E5RT::MemoryObject::TryAsBuffer(v26))
        {
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v24, "operator()");
          std::string::basic_string[abi:ne180100]<0>(&v23, "Found memory object with invalid type.");
          E5RT::Status::Status(&v22, 2, &v23);
          E5RT::E5RTError::E5RTError(exception, &v24, &v22);
        }
        v4 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(v26);
        BufferType = E5RT::BufferObject::GetBufferType(v4);
        if (((a1[29] >> BufferType) & 1) == 0)
          break;
      }
      v6 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v2 = (uint64_t **)*v2;
      if (!v2)
        return;
    }
    std::to_string(&v21, BufferType);
    v9 = std::string::insert(&v21, 0, "BufferType = ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v22, " not supported for opcode = ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
    std::to_string(&__p, v13);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v25 = v16->__r_.__value_.__r.__words[2];
    v24 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_29;
      }
    }
    else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v23, "operator()");
      E5RT::Status::Status(&v22, 2, &v24);
      E5RT::E5RTError::E5RTError(v18, &v23, &v22);
    }
LABEL_24:
    operator delete(v21.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
}

void sub_190F5DE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  E5RT::Status::~Status((E5RT::Status *)&a21);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v35 - 57) < 0)
      {
        operator delete(*(void **)(v35 - 80));
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 48);
        _Unwind_Resume(a1);
      }
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v5 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 64))(a1, &v5, 0);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_190F5E0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::ExecuteSync(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

void E5RT::ExecutionStreamOperationInternal::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  E5RT::AsyncEvent *v8;
  uint64_t ActiveFutureValue;
  uint64_t **i;
  unint64_t LastSignaledValue;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  E5RT::AsyncEvent *v15;
  uint64_t v16;
  E5RT::AsyncTask *v17;
  uint64_t (***v18)();
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t (**v26)();
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t (**v31)();
  uint64_t (**v32)();
  uint64_t (**v33)();
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AsyncComputeScheduler;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  E5RT::AsyncTask *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  E5RT::AsyncTask *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (***v54)();
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  int v59;
  void *exception;
  void *v61;
  E5RT::AsyncTask *v62;
  E5RT::AsyncTask *v63;
  _QWORD v64[2];
  void *v65[2];
  void *__p[2];
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[24];
  _BYTE *v72;
  char v73;
  uint64_t (**v74)();
  _QWORD v75[3];
  _QWORD *v76;
  char v77;
  _QWORD v78[3];
  uint64_t (***v79)();
  char v80;
  _QWORD v81[3];
  uint64_t (***v82)();
  uint64_t (**v83)();
  _QWORD v84[2];
  uint64_t (***v85)();
  _QWORD *v86;
  unsigned __int8 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 248) & 7) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v83, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(&v74, "Cannot async submit workload for an operation hasn't been encoded yet.");
    E5RT::Status::Status(&v68, 2, &v74);
    E5RT::E5RTError::E5RTError(exception, &v83, &v68);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v68 = 0x2B2340B000000000;
  v69 = 0u;
  v70 = 0u;
  kdebug_trace();
  v8 = *(E5RT::AsyncEvent **)(a1 + 176);
  if (!v8)
  {
    v61 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v83, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(&v74, "Completion AsyncEvent (internal or client bound) is required for async submit.");
    E5RT::Status::Status(v65, 11, &v74);
    E5RT::E5RTError::E5RTError(v61, &v83, v65);
  }
  ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue(v8);
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)__p = 0u;
  v67 = 1065353216;
  for (i = *(uint64_t ***)(a1 + 152); i; i = (uint64_t **)*i)
  {
    LastSignaledValue = E5RT::AsyncEvent::GetLastSignaledValue((E5RT::AsyncEvent *)i[2]);
    if (LastSignaledValue < E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)i[2]))
    {
      v12 = E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)i[2]);
      v74 = (uint64_t (**)())i[2];
      v83 = (uint64_t (**)())&v74;
      std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>((uint64_t)v65, (uint64_t *)&v74, (uint64_t)&std::piecewise_construct, &v83)[3] = v12;
    }
  }
  v13 = E5RT::AsyncEvent::GetLastSignaledValue(*(E5RT::AsyncEvent **)(a1 + 176));
  v14 = *(_QWORD *)(a1 + 256);
  if (v13 < v14)
  {
    v74 = *(uint64_t (***)())(a1 + 176);
    v83 = (uint64_t (**)())&v74;
    std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>((uint64_t)v65, (uint64_t *)&v74, (uint64_t)&std::piecewise_construct, &v83)[3] = v14;
  }
  v15 = *(E5RT::AsyncEvent **)(a1 + 176);
  v16 = E5RT::AsyncEvent::GetActiveFutureValue(v15);
  v64[0] = v15;
  v64[1] = v16;
  v17 = (E5RT::AsyncTask *)operator new();
  v83 = &off_1E2DCB5A0;
  v84[0] = a1;
  v84[1] = ActiveFutureValue;
  v85 = &v83;
  E5RT::AsyncTask::AsyncTask(v17, &v83, v65, v64, a3, a2, a1 + 192);
  v63 = v17;
  v18 = v85;
  if (v85 == &v83)
  {
    v19 = 4;
    v18 = &v83;
  }
  else
  {
    if (!v85)
      goto LABEL_15;
    v19 = 5;
  }
  v18 = (uint64_t (***)())(*v18)[v19]();
LABEL_15:
  LOBYTE(v78[0]) = 0;
  v80 = 0;
  if (!*(_BYTE *)(a4 + 32))
    goto LABEL_66;
  v74 = (uint64_t (**)())a1;
  v20 = v75;
  LOBYTE(v75[0]) = 0;
  v77 = 0;
  v21 = *(_QWORD *)(a4 + 24);
  if (!v21)
    goto LABEL_19;
  if (v21 != a4)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_19:
    v76 = (_QWORD *)v21;
    goto LABEL_21;
  }
  v76 = v75;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 24))(a4, v75);
LABEL_21:
  v77 = 1;
  if (v80)
  {
    v83 = v74;
    v22 = v84;
    LOBYTE(v84[0]) = 0;
    v87 = 0;
    if (v76)
    {
      if (v76 == v75)
      {
        v86 = v84;
        (*(void (**)(_QWORD *, _QWORD *))(v75[0] + 24))(v75, v84);
      }
      else
      {
        v86 = v76;
        v76 = 0;
      }
    }
    else
    {
      v86 = 0;
    }
    v87 = 1;
    v82 = 0;
    v24 = operator new(0x38uLL);
    v25 = v24;
    v26 = v83;
    v27 = v86;
    *v24 = &off_1E2DCB620;
    v24[1] = v26;
    *((_BYTE *)v24 + 16) = 0;
    *((_BYTE *)v24 + 48) = 0;
    if (v27)
    {
      if (v27 == v84)
      {
        v24[5] = v24 + 2;
        (*(void (**)(_QWORD *))(v84[0] + 24))(v84);
      }
      else
      {
        v24[5] = v27;
        v86 = 0;
      }
    }
    else
    {
      v24[5] = 0;
    }
    *((_BYTE *)v25 + 48) = 1;
    v82 = (uint64_t (***)())v25;
    std::__function::__value_func<void ()(std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](v81, v78);
    v18 = v82;
    if (v82 == v81)
    {
      v28 = 4;
      v18 = (uint64_t (***)())v81;
    }
    else
    {
      if (!v82)
        goto LABEL_40;
      v28 = 5;
    }
    v18 = (uint64_t (***)())(*v18)[v28]();
LABEL_40:
    if (!v87)
      goto LABEL_46;
    if (v86 == v84)
    {
      v29 = 4;
    }
    else
    {
      if (!v86)
        goto LABEL_46;
      v29 = 5;
      v22 = v86;
    }
    v18 = (uint64_t (***)())(*(uint64_t (**)(_QWORD *))(*v22 + 8 * v29))(v22);
LABEL_46:
    if (!v77)
      goto LABEL_66;
    goto LABEL_61;
  }
  v83 = v74;
  v23 = v84;
  LOBYTE(v84[0]) = 0;
  v87 = 0;
  if (v76)
  {
    if (v76 == v75)
    {
      v86 = v84;
      (*(void (**)(_QWORD *, _QWORD *))(v75[0] + 24))(v75, v84);
    }
    else
    {
      v86 = v76;
      v76 = 0;
    }
  }
  else
  {
    v86 = 0;
  }
  v87 = 1;
  v79 = 0;
  v18 = (uint64_t (***)())operator new(0x38uLL);
  v30 = v18;
  v31 = v83;
  v32 = (uint64_t (**)())v86;
  *v18 = &off_1E2DCB620;
  v18[1] = v31;
  *((_BYTE *)v18 + 16) = 0;
  v33 = (uint64_t (**)())(v18 + 2);
  *((_BYTE *)v18 + 48) = 0;
  if (v32)
  {
    if (v32 == v84)
    {
      v18[5] = v33;
      v18 = (uint64_t (***)())(*(uint64_t (**)(_QWORD *))(v84[0] + 24))(v84);
      v59 = v87;
      *((_BYTE *)v30 + 48) = 1;
      v79 = v30;
      if (!v59)
        goto LABEL_60;
      goto LABEL_55;
    }
    v34 = &v86;
    v18[5] = v32;
  }
  else
  {
    v34 = v18 + 5;
  }
  *v34 = 0;
  *((_BYTE *)v18 + 48) = 1;
  v79 = v18;
LABEL_55:
  if (v86 == v84)
  {
    v35 = 4;
  }
  else
  {
    if (!v86)
      goto LABEL_60;
    v35 = 5;
    v23 = v86;
  }
  v18 = (uint64_t (***)())(*(uint64_t (**)(_QWORD *, uint64_t (**)()))(*v23 + 8 * v35))(v23, v33);
LABEL_60:
  v80 = 1;
  if (!v77)
    goto LABEL_66;
LABEL_61:
  if (v76 == v75)
  {
    v36 = 4;
  }
  else
  {
    if (!v76)
      goto LABEL_66;
    v36 = 5;
    v20 = v76;
  }
  v18 = (uint64_t (***)())(*(uint64_t (**)(_QWORD *))(*v20 + 8 * v36))(v20);
LABEL_66:
  AsyncComputeScheduler = E5RT::AsyncComputeScheduler::GetAsyncComputeScheduler((E5RT::AsyncComputeScheduler *)v18);
  v62 = v17;
  v63 = 0;
  v71[0] = 0;
  v73 = 0;
  if (!v80)
    goto LABEL_73;
  v38 = (uint64_t)v79;
  if (v79)
  {
    if (v79 == v78)
    {
      v72 = v71;
      (*(void (**)(_QWORD *, _BYTE *))(v78[0] + 24))(v78, v71);
      goto LABEL_72;
    }
    v38 = (*v79)[2]();
  }
  v72 = (_BYTE *)v38;
LABEL_72:
  v73 = 1;
LABEL_73:
  E5RT::AsyncComputeScheduler::SubmitAsyncCompute(AsyncComputeScheduler, &v62, (uint64_t)v71, 10000, 1);
  if (!v73)
    goto LABEL_79;
  v42 = v72;
  if (v72 == v71)
  {
    v43 = 4;
    v42 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_79;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_79:
  v44 = v62;
  v62 = 0;
  if (!v44)
    goto LABEL_92;
  if (*((char *)v44 + 127) < 0)
    operator delete(*((void **)v44 + 13));
  v45 = (_QWORD *)*((_QWORD *)v44 + 6);
  if (v45)
  {
    do
    {
      v46 = (_QWORD *)*v45;
      operator delete(v45);
      v45 = v46;
    }
    while (v46);
  }
  v47 = (void *)*((_QWORD *)v44 + 4);
  *((_QWORD *)v44 + 4) = 0;
  if (v47)
    operator delete(v47);
  v48 = (E5RT::AsyncTask *)*((_QWORD *)v44 + 3);
  if (v48 == v44)
  {
    v49 = 4;
    v48 = v44;
    goto LABEL_90;
  }
  if (v48)
  {
    v49 = 5;
LABEL_90:
    (*(void (**)(E5RT::AsyncTask *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 8 * v49))(v48, v39, v40, v41);
  }
  MEMORY[0x19401CD90](v44, 0x10B2C404C099A3DLL);
LABEL_92:
  v50 = E5RT::AsyncEvent::GetActiveFutureValue(*(E5RT::AsyncEvent **)(a1 + 176));
  E5RT::ExecutionStreamOperationInternal::UpdateLastCompletionValue(a1, v50);
  if (!v80)
    goto LABEL_98;
  v54 = v79;
  if (v79 == v78)
  {
    v55 = 4;
    v54 = (uint64_t (***)())v78;
  }
  else
  {
    if (!v79)
      goto LABEL_98;
    v55 = 5;
  }
  ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))(*v54)[v55])(v54, v51, v52, v53);
LABEL_98:
  v56 = __p[0];
  if (__p[0])
  {
    do
    {
      v57 = (_QWORD *)*v56;
      operator delete(v56);
      v56 = v57;
    }
    while (v57);
  }
  v58 = v65[0];
  v65[0] = 0;
  if (v58)
    operator delete(v58);
  if (E5RT::g_trace_analysis_level >= v68)
    kdebug_trace();
}

void sub_190F5E8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::ExecutionStreamOperationInternal::UpdateLastCompletionValue(uint64_t this, unint64_t a2)
{
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (*(_QWORD *)(this + 256) > a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "UpdateLastCompletionValue");
    std::string::basic_string[abi:ne180100]<0>(v3, "Cannot roll back completion event values.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  *(_QWORD *)(this + 256) = a2;
  return this;
}

void sub_190F5EC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(E5RT::ExecutionStreamOperationInternal *this)
{
  return (*((unsigned __int8 *)this + 248) >> 3) & 1;
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasInternalCompletionEventBound(E5RT::ExecutionStreamOperationInternal *this)
{
  return (*((unsigned __int8 *)this + 248) >> 4) & 1;
}

uint64_t E5RT::ExecutionStreamOperationInternal::IsCompositeOp(E5RT::ExecutionStreamOperationInternal *this)
{
  return 0;
}

void E5RT::ExecutionStreamOperationInternal::GetPrimitiveOperations(E5RT::ExecutionStreamOperationInternal *this)
{
  unsigned int v1;
  std::string *v2;
  __int128 v3;
  void *exception;
  _BYTE v5[8];
  std::string v6;
  __int128 v7;
  std::string::size_type v8;
  std::string v9;

  v1 = (*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)this + 32))(this);
  std::to_string(&v9, v1);
  std::operator+<char>();
  v2 = std::string::append(&v6, " is not a composite op.");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v8 = v2->__r_.__value_.__r.__words[2];
  v7 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  exception = __cxa_allocate_exception(0x18uLL);
  strcpy((char *)&v6, "GetPrimitiveOperations");
  *((_BYTE *)&v6.__r_.__value_.__s + 23) = 22;
  E5RT::Status::Status(v5, 2, &v7);
  E5RT::E5RTError::E5RTError(exception, &v6, v5);
}

void sub_190F5EDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0)
        operator delete(a18);
      if (*(char *)(v25 - 33) < 0)
        operator delete(*(void **)(v25 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void E5RT::ExecutionStreamOperationInternal::ReshapeOperationInternal(uint64_t a1)
{
  unsigned int v1;
  std::string *v2;
  __int128 v3;
  void *exception;
  uint64_t v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;
  std::string v9;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::to_string(&v9, v1);
  std::operator+<char>();
  v2 = std::string::append(&v6, " does not support reshape.");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v8 = v2->__r_.__value_.__r.__words[2];
  v7 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  exception = __cxa_allocate_exception(0x18uLL);
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_191A71250;
  strcpy(v6.__r_.__value_.__l.__data_, "ReshapeOperationInternal");
  E5RT::Status::Status(&v5, 2, &v7);
  E5RT::E5RTError::E5RTError(exception, &v6, &v5);
}

void sub_190F5EF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
        operator delete(a16);
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetInputPortRef(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *exception;
  _QWORD v5[3];
  _BYTE v6[8];
  _QWORD v7[3];

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>((_QWORD *)(a1 + 16), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetInputPortRef");
    std::string::basic_string[abi:ne180100]<0>(v5, "Unable to find input port with given name.");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[5];
}

void sub_190F5F094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *exception;
  _QWORD v5[3];
  _BYTE v6[8];
  _QWORD v7[3];

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>((_QWORD *)(a1 + 56), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetOutputPortRef");
    std::string::basic_string[abi:ne180100]<0>(v5, "Unable to find output port with given name.");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[5];
}

void sub_190F5F1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *exception;
  _QWORD v5[3];
  _BYTE v6[8];
  _QWORD v7[3];

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetInOutPortRef");
    std::string::basic_string[abi:ne180100]<0>(v5, "Unable to find inout port with given name.");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[5];
}

void sub_190F5F2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOpSupportedBufferTypes(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 232;
}

uint64_t *E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEventRef(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t **v2;
  unsigned __int8 *EventName;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  v2 = *(uint64_t ***)(a1 + 152);
  if (!v2)
  {
LABEL_19:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "GetDependentAsyncEventRef");
    std::string::basic_string[abi:ne180100]<0>(v12, "Unable to find bound dependent async event with given name.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  while (1)
  {
    EventName = (unsigned __int8 *)E5RT::AsyncEvent::GetEventName((E5RT::AsyncEvent *)v2[2]);
    v5 = EventName[23];
    if ((v5 & 0x80u) == 0)
      v6 = EventName[23];
    else
      v6 = *((_QWORD *)EventName + 1);
    v7 = a2[23];
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *((_QWORD *)a2 + 1);
    if (v6 == v7)
      break;
LABEL_4:
    v2 = (uint64_t **)*v2;
    if (!v2)
      goto LABEL_19;
  }
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(unsigned __int8 **)a2;
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)EventName, v9, *((_QWORD *)EventName + 1)))
      return v2[2];
    goto LABEL_4;
  }
  if (EventName[23])
  {
    while (*EventName == *v9)
    {
      ++EventName;
      ++v9;
      if (!--v5)
        return v2[2];
    }
    goto LABEL_4;
  }
  return v2[2];
}

void sub_190F5F474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEventRef(E5RT::ExecutionStreamOperationInternal *this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  result = *((_QWORD *)this + 22);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetCompletionAsyncEventRef");
    std::string::basic_string[abi:ne180100]<0>(v3, "No completion event bound to operation.");
    E5RT::Status::Status(v4, 1, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F5F588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::ExecutionStreamOperationConfigOptions *sub_190F5F5FC()
{
  E5RT::ExecutionStreamOperationConfigOptions *result;
  E5RT::ExecutionStreamOperationConfigOptions *v1;

  result = E5RT::ExecutionStreamOperationConfigOptions::Create(&v1);
  qword_1EE214848 = (uint64_t)v1;
  return result;
}

uint64_t E5RT::ExecutionStreamOperationInternal::ResetConfigOptions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  if ((*(_BYTE *)(this + 248) & 7) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "ResetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v4, "Cannot reset ConfigOptions for an ES operation while it is encoded to a stream.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  v2 = *(_QWORD *)(this + 272);
  if (v2)
    *(_QWORD *)(this + 272) = 0;
  *a2 = v2;
  return this;
}

void sub_190F5F6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::SetConfigOptions(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *exception;
  void *v5;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[3];

  v2 = *a2;
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v6, "ConfigOptions provided is null.");
    E5RT::Status::Status(v7, 1, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  if ((*(_BYTE *)(result + 248) & 7) == 2)
  {
    v5 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v6, "Cannot set new ConfigOptions to an ES operation while it is encoded to a stream.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(v5, v8, v7);
  }
  *a2 = 0;
  v3 = *(_QWORD *)(result + 272);
  *(_QWORD *)(result + 272) = v2;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

void sub_190F5F8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetStreamConfigOptions(E5RT::ExecutionStreamOperationInternal *this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  result = *((_QWORD *)this + 28);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetStreamConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v3, "No stream config options found. Please file a Radar.");
    E5RT::Status::Status(v4, 11, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F5FA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasDynamicInOutPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((unsigned __int8 *)this + 290);
}

void E5RT::ExecutionStreamOperationInternal::SerializeInferenceFrameData(uint64_t a1, const void **a2, uint64_t a3, int a4)
{
  int v4;
  size_t v5;
  unint64_t v6;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  int v23;
  size_t v24;
  unint64_t v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  char v37;
  std::string::size_type *v38;
  std::__fs::filesystem::path *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  std::string::size_type *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  id v48;
  uint64_t *i;
  void *v50;
  _QWORD *v51;
  void *v52;
  id v53;
  uint64_t *j;
  void *v55;
  _QWORD *v56;
  void *v57;
  id v58;
  uint64_t *k;
  void *v60;
  _QWORD *v61;
  void *v62;
  id v63;
  id v64;
  _QWORD *v65;
  void *v66;
  E5RT::Ops::PreCompiledComputeOperation *v67;
  char *FunctionName;
  unint64_t v69;
  std::string::size_type v70;
  char *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  void *v76;
  void *v77;
  id v78;
  id v79;
  void *v80;
  id v81;
  std::string *v82;
  __int128 v83;
  void *v84;
  std::string *v85;
  __int128 v86;
  void *exception;
  void *v88;
  void *v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  void *v100;
  id v101;
  id v102;
  std::string v103;
  _BYTE v104[8];
  std::__fs::filesystem::path v105;
  std::string pn;
  std::string __dst[17];
  uint64_t v108;
  std::string v109;
  _BYTE v110[160];
  std::string v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = v5 + 1;
  if (v5 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 >= 0x17)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    v11 = (std::string *)operator new(v12 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v5 + 1;
    __dst[0].__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  else
  {
    memset(__dst, 0, 24);
    v11 = __dst;
    *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v5 + 1;
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v14 = a2;
  else
    v14 = *a2;
  memmove(v11, v14, v5);
LABEL_15:
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v5) = 47;
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a3;
  else
    v16 = *(const std::string::value_type **)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::string::append(__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v109.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v109, "e5-frames.json");
  v21 = v20->__r_.__value_.__r.__words[0];
  v111.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v105.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 7);
  v105.__pn_.__r_.__value_.__r.__words[0] = v21;
  v105.__pn_.__r_.__value_.__l.__size_ = v111.__r_.__value_.__r.__words[0];
  *((_BYTE *)&v105.__pn_.__r_.__value_.__s + 23) = v22;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v109.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
  }
  else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_23:
  v23 = *((char *)a2 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)a2 + 23);
  else
    v24 = (size_t)a2[1];
  v25 = v24 + 1;
  if (v24 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v25 >= 0x17)
  {
    v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v27 = v25 | 7;
    v28 = v27 + 1;
    v26 = (std::string *)operator new(v27 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v24 + 1;
    __dst[0].__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  }
  else
  {
    memset(__dst, 0, 24);
    v26 = __dst;
    *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v24 + 1;
    if (!v24)
      goto LABEL_37;
  }
  if (v23 >= 0)
    v29 = a2;
  else
    v29 = *a2;
  memmove(v26, v29, v24);
LABEL_37:
  *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v24) = 47;
  v30 = *(char *)(a3 + 23);
  if (v30 >= 0)
    v31 = (const std::string::value_type *)a3;
  else
    v31 = *(const std::string::value_type **)a3;
  if (v30 >= 0)
    v32 = *(unsigned __int8 *)(a3 + 23);
  else
    v32 = *(_QWORD *)(a3 + 8);
  v33 = std::string::append(__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v109.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v109, "e5-data.bin");
  v36 = v35->__r_.__value_.__r.__words[0];
  pn.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)pn.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
  v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v111.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)pn.__r_.__value_.__r.__words + 7);
  v111.__r_.__value_.__r.__words[0] = v36;
  v111.__r_.__value_.__l.__size_ = pn.__r_.__value_.__r.__words[0];
  *((_BYTE *)&v111.__r_.__value_.__s + 23) = v37;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v109.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
  }
  else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_45:
  v100 = (void *)objc_opt_new();
  v38 = (std::string::size_type *)MEMORY[0x1E0DE4F48];
  if (a4)
  {
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(__dst, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      __dst[0] = v111;
    std::ofstream::basic_ofstream(&v109);
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst[0].__r_.__value_.__l.__data_);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&v109 + *(_QWORD *)(v109.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v109 + *(_QWORD *)(v109.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
    if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
    else
      pn = v105.__pn_;
    std::ofstream::basic_ofstream(__dst);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)__dst + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__dst[1].__r_.__value_.__r.__words[1]+ *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) | 4);
    v45 = v38;
    v46 = *v38;
    __dst[0].__r_.__value_.__r.__words[0] = v46;
    v47 = v45[3];
    *(std::string::size_type *)((char *)__dst[0].__r_.__value_.__r.__words + *(_QWORD *)(v46 - 24)) = v47;
    MEMORY[0x19401C8BC](&__dst[0].__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x19401CCD0](&v108);
    v109.__r_.__value_.__r.__words[0] = v46;
    *(std::string::size_type *)((char *)v109.__r_.__value_.__r.__words + *(_QWORD *)(v46 - 24)) = v47;
    MEMORY[0x19401C8BC](&v109.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x19401CCD0](v110);
  }
  else
  {
    std::__fs::filesystem::__status(&v105, 0);
    if (v109.__r_.__value_.__s.__data_[0] && v109.__r_.__value_.__s.__data_[0] != 255)
    {
      if ((v105.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v105;
      else
        v39 = (std::__fs::filesystem::path *)v105.__pn_.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v41)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v109, "SerializeInferenceFrameData");
        if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v103, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
        else
          v103 = v105.__pn_;
        v90 = std::string::insert(&v103, 0, "Unable to load ");
        v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        pn.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        v92 = std::string::append(&pn, " to NSData");
        v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        __dst[0].__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(v104, 2, __dst);
        E5RT::E5RTError::E5RTError(exception, &v109, v104);
      }
      v102 = 0;
      objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v41, 0, &v102);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      if (v102)
      {
        v88 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v109, "SerializeInferenceFrameData");
        if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v103, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
        else
          v103 = v105.__pn_;
        v94 = std::string::insert(&v103, 0, "Unable to load data in ");
        v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        pn.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        v96 = std::string::append(&pn, " as valid JSON");
        v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        __dst[0].__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(v104, 2, __dst);
        E5RT::E5RTError::E5RTError(v88, &v109, v104);
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "frames");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "valueForKey:", v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v44)
      {
        v89 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v109, "SerializeInferenceFrameData");
        if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&pn, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
        else
          pn = v105.__pn_;
        v98 = std::string::insert(&pn, 0, "Cannot find 'frames' key in ");
        v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        __dst[0].__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v103, 2, __dst);
        E5RT::E5RTError::E5RTError(v89, &v109, &v103);
      }
      objc_msgSend(v100, "addObjectsFromArray:", v44);

    }
  }
  v48 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  for (i = *(uint64_t **)(a1 + 32); i; i = (uint64_t *)*i)
  {
    sub_190F60ED4((E5RT::IOPort *)i[5], (uint64_t)&v111);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = i + 2;
    if (*((char *)i + 39) < 0)
      v51 = (_QWORD *)*v51;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "setObject:forKey:", v50, v52);

  }
  v53 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  for (j = *(uint64_t **)(a1 + 72); j; j = (uint64_t *)*j)
  {
    sub_190F60ED4((E5RT::IOPort *)j[5], (uint64_t)&v111);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = j + 2;
    if (*((char *)j + 39) < 0)
      v56 = (_QWORD *)*v56;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v56);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "setObject:forKey:", v55, v57);

  }
  v58 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  for (k = *(uint64_t **)(a1 + 112); k; k = (uint64_t *)*k)
  {
    sub_190F60ED4((E5RT::IOPort *)k[5], (uint64_t)&v111);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = k + 2;
    if (*((char *)k + 39) < 0)
      v61 = (_QWORD *)*v61;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "setObject:forKey:", v60, v62);

  }
  v63 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v63, "setObject:forKey:", v48, CFSTR("inputPorts"));
  objc_msgSend(v63, "setObject:forKey:", v53, CFSTR("outputPorts"));
  objc_msgSend(v63, "setObject:forKey:", v58, CFSTR("inOutPorts"));
  objc_msgSend(v100, "addObject:", v63);
  v64 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v65 = (_QWORD *)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    v65 = (_QWORD *)*v65;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "setObject:forKeyedSubscript:", v66, CFSTR("name"));

  objc_msgSend(v64, "setObject:forKeyedSubscript:", v100, CFSTR("frames"));
  if (v67)
  {
    FunctionName = E5RT::Ops::PreCompiledComputeOperation::GetFunctionName(v67);
    v70 = v69;
    if (v69 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v71 = FunctionName;
    if (v69 >= 0x17)
    {
      v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v69 | 7) != 0x17)
        v73 = v69 | 7;
      v74 = v73 + 1;
      v72 = operator new(v73 + 1);
      v109.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      v109.__r_.__value_.__l.__size_ = v70;
    }
    else
    {
      *((_BYTE *)&v109.__r_.__value_.__s + 23) = v69;
      v72 = &v109;
      if (!v69)
      {
LABEL_97:
        v72[v70] = 0;
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = &v109;
        else
          v75 = (std::string *)v109.__r_.__value_.__r.__words[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "setObject:forKeyedSubscript:", v76, CFSTR("functionName"));

        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
        goto LABEL_102;
      }
    }
    memmove(v72, v71, v70);
    goto LABEL_97;
  }
LABEL_102:
  v101 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v64, 3, &v101);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = v101;
  if (v78)
  {
    v80 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v109, "SerializeInferenceFrameData");
    objc_msgSend(v78, "localizedDescription");
    v81 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&pn, (char *)objc_msgSend(v81, "UTF8String", v81));
    v82 = std::string::insert(&pn, 0, "Error serializing IOPorts to JSON: ");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    __dst[0].__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(&v103, 2, __dst);
    E5RT::E5RTError::E5RTError(v80, &v109, &v103);
  }
  std::ofstream::basic_ofstream(&v109);
  if (*(_DWORD *)((char *)&v109 + *(_QWORD *)(v109.__r_.__value_.__r.__words[0] - 24) + 32))
  {
    v84 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "SerializeInferenceFrameData");
    if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v103, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
    else
      v103 = v105.__pn_;
    v85 = std::string::insert(&v103, 0, "Error opening file to serialize inference frames: ");
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    pn.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v104, 2, &pn);
    E5RT::E5RTError::E5RTError(v84, __dst, v104);
  }
  v79 = objc_retainAutorelease(v77);
  objc_msgSend(v79, "bytes");
  objc_msgSend(v79, "length");
  std::ostream::write();
  v109.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
  *(std::string::size_type *)((char *)v109.__r_.__value_.__r.__words
                            + *(_QWORD *)(v109.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                               + 24);
  MEMORY[0x19401C8BC](&v109.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v110);

  if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_108:
    operator delete(v105.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_108;
}

void sub_190F607CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_190F60E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 416);
  _Unwind_Resume(a1);
}

id sub_190F60ED4(E5RT::IOPort *a1, uint64_t a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  const __CFString *v8;
  id v9;
  char *v10;
  void *v11;
  void *v12;
  std::__fs::filesystem::path::__string_view v13;
  _BYTE *v14;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  void **v17;
  void *v18;
  E5RT::BufferObject *v19;
  E5RT::BufferObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void (**v29)(E5RT::IOSurfaceObject *__hidden);
  void *exception;
  std::string *v32;
  __int128 v33;
  std::string v34;
  void *__p[2];
  std::string::size_type v36;
  _BYTE v37[8];
  id v38;
  char v39;
  _BYTE __dst[32];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  E5RT *v48;
  _QWORD v49[51];
  _QWORD v50[20];

  v50[19] = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  E5RT::IOPort::GetPortDescriptor(a1, &v48);
  E5RT::GetOperandDescriptorInformation(v48, (uint64_t)&v38);
  v5 = (std::__shared_weak_count *)v49[0];
  if (v49[0])
  {
    v6 = (unint64_t *)(v49[0] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v39)
    v8 = CFSTR("Tensor");
  else
    v8 = CFSTR("Surface");
  objc_msgSend(v4, "setObject:forKey:", v8, CFSTR("PortType"));
  objc_msgSend(v4, "setObject:forKey:", v38, CFSTR("Description"));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__dst, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    *(_QWORD *)&__dst[16] = *(_QWORD *)(a2 + 16);
  }
  std::ofstream::basic_ofstream(&v48);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (*(_DWORD *)((char *)&v49[3] + *((_QWORD *)v48 - 3)))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "SerializeIOPort");
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v34 = *(std::string *)a2;
    v32 = std::string::insert(&v34, 0, "Error opening file to serialize IOPort data: ");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v36 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v37, 2, __p);
    E5RT::E5RTError::E5RTError(exception, __dst, v37);
  }
  v9 = objc_alloc(MEMORY[0x1E0CB37E8]);
  v10 = (char *)&v49[-1] + *((_QWORD *)v48 - 3);
  if ((v10[32] & 5) != 0)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    memset(__dst, 0, sizeof(__dst));
    v47 = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v10 + 5) + 32))(__dst, *((_QWORD *)v10 + 5), 0, 1, 16);
  }
  v11 = (void *)objc_msgSend(v9, "initWithUnsignedLongLong:");
  v12 = (void *)MEMORY[0x1E0CB3940];
  v13 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a2);
  if (v13.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13.__size_ >= 0x17)
  {
    v15 = (v13.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13.__size_ | 7) != 0x17)
      v15 = v13.__size_ | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&__dst[8] = v13.__size_;
    *(_QWORD *)&__dst[16] = v16 | 0x8000000000000000;
    *(_QWORD *)__dst = v14;
    goto LABEL_25;
  }
  __dst[23] = v13.__size_;
  v14 = __dst;
  if (v13.__size_)
LABEL_25:
    memmove(v14, v13.__data_, v13.__size_);
  v14[v13.__size_] = 0;
  *(_OWORD *)__p = *(_OWORD *)__dst;
  v36 = *(_QWORD *)&__dst[16];
  if (__dst[23] >= 0)
    v17 = __p;
  else
    v17 = *(void ***)__dst;
  objc_msgSend(v12, "stringWithUTF8String:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v18, CFSTR("File"));

  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  objc_msgSend(v4, "setObject:forKey:", v11, CFSTR("Offset"));
  E5RT::IOPort::GetMemoryObject(a1, __dst);
  v19 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*(void **)__dst);
  v20 = v19;
  v21 = *(std::__shared_weak_count **)&__dst[8];
  if (*(_QWORD *)&__dst[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (v20)
        goto LABEL_36;
LABEL_38:
      E5RT::IOPort::GetMemoryObject(a1, __dst);
      v24 = E5RT::MemoryObject::TryAsSurface(*(void **)__dst);
      v25 = (uint64_t)v24;
      v26 = *(std::__shared_weak_count **)&__dst[8];
      if (!*(_QWORD *)&__dst[8])
        goto LABEL_42;
      v27 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        if (!v25)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        if (!v24)
          goto LABEL_44;
      }
      v29 = E5RT::SurfaceObject::GetHandle<__IOSurface *>(v25);
      IOSurfaceGetBaseAddress((IOSurfaceRef)v29);
      IOSurfaceGetAllocSize((IOSurfaceRef)v29);
      std::ostream::write();
      goto LABEL_44;
    }
  }
  if (!v19)
    goto LABEL_38;
LABEL_36:
  E5RT::BufferObject::GetDataSpan(v20);
  std::ostream::write();
LABEL_44:

  v48 = (E5RT *)*MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)&v49[-1] + *((_QWORD *)v48 - 3)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x19401C8BC](v49);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v50);

  return v4;
}

void sub_190F613C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  void *v46;
  void *v47;

  std::ofstream::~ofstream(&a46);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperationInternal::SerializeInferenceFrameDataPerSegment(uint64_t a1)
{
  unsigned int v1;
  std::string *v2;
  __int128 v3;
  void *exception;
  uint64_t v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;
  std::string v9;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::to_string(&v9, v1);
  std::operator+<char>();
  v2 = std::string::append(&v6, " is not a composite op.");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v8 = v2->__r_.__value_.__r.__words[2];
  v7 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  exception = __cxa_allocate_exception(0x18uLL);
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_191A72440;
  strcpy(v6.__r_.__value_.__l.__data_, "SerializeInferenceFrameDataPerSegment");
  E5RT::Status::Status(&v5, 2, &v7);
  E5RT::E5RTError::E5RTError(exception, &v6, &v5);
}

void sub_190F61634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
        operator delete(a16);
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetTelemetryContainer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 240);
  *(_QWORD *)(this + 240) = 0;
  *a2 = v2;
  return this;
}

uint64_t E5RT::ExecutionStreamOperationInternal::SetTelemetryContainer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL sub_190F616F8(uint64_t *a1)
{
  uint64_t *v1;
  E5RT::IOPortPriv *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  _BOOL8 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  E5RT::IOPortPriv *v22;
  std::__shared_weak_count *v23;
  std::string v24;
  E5RT::IOPortPriv *v25;
  std::__shared_weak_count *v26;

  if (a1)
  {
    v1 = a1;
    do
    {
      if (*((char *)v1 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)v1[2], v1[3]);
        v2 = (E5RT::IOPortPriv *)v1[5];
        v3 = (std::__shared_weak_count *)v1[6];
        v25 = v2;
        v26 = v3;
        if (!v3)
        {
LABEL_12:
          v22 = v2;
          v23 = 0;
          goto LABEL_13;
        }
      }
      else
      {
        v24 = *(std::string *)(v1 + 2);
        v2 = (E5RT::IOPortPriv *)v1[5];
        v3 = (std::__shared_weak_count *)v1[6];
        v25 = v2;
        v26 = v3;
        if (!v3)
          goto LABEL_12;
      }
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      v2 = v25;
      v22 = v25;
      v23 = v26;
      if (v26)
      {
        v6 = (unint64_t *)&v26->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
LABEL_13:
      E5RT::IOPortPriv::GetMaxPortDescriptor(v2, &v20);
      v9 = v20;
      v8 = v21;
      v10 = v20 != 0;
      if (!v21)
        goto LABEL_17;
      v11 = (unint64_t *)&v21->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        v13 = v23;
        if (!v23)
          goto LABEL_23;
      }
      else
      {
LABEL_17:
        v13 = v23;
        if (!v23)
          goto LABEL_23;
      }
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
LABEL_23:
      v16 = v26;
      if (v26)
      {
        v17 = (unint64_t *)&v26->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_29;
LABEL_28:
          operator delete(v24.__r_.__value_.__l.__data_);
          goto LABEL_29;
        }
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_28;
LABEL_29:
      if (v9)
        return v10;
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  return 0;
}

void sub_190F6189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,32ul>,true,BOOL,std::__identity,0>(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  int8x16_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t result;
  unint64_t v11;
  int8x8_t *v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int8x16_t *v20;
  uint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int8x16_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8x8_t v31;
  uint8x8_t v32;

  v5 = (int8x16_t *)a1;
  v6 = a4 - (unint64_t)a2;
  v7 = v6 + 8 * (a3 - (_QWORD)a1);
  if (*a5)
  {
    if (a2)
    {
      if (64 - a2 >= v7)
        v8 = v6 + 8 * (a3 - (_QWORD)a1);
      else
        v8 = 64 - a2;
      v5 = (int8x16_t *)(a1 + 1);
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *a1));
      v9.i16[0] = vaddlv_u8(v9);
      result = v9.u32[0];
      v7 -= v8;
      v11 = v7 - 64;
      if (v7 >= 0x40)
        goto LABEL_7;
    }
    else
    {
      result = 0;
      v11 = v7 - 64;
      if (v7 >= 0x40)
      {
LABEL_7:
        if (v11 >= 0xC0)
        {
          v17 = (v11 >> 6) + 1;
          v12 = (int8x8_t *)v5 + (v17 & 0x7FFFFFFFFFFFFFCLL);
          v7 -= (v17 & 0x7FFFFFFFFFFFFFCLL) << 6;
          v18 = 0uLL;
          v19 = (int64x2_t)(unint64_t)result;
          v20 = v5 + 1;
          v21 = v17 & 0x7FFFFFFFFFFFFFCLL;
          do
          {
            v19 = (int64x2_t)vpadalq_u32((uint64x2_t)v19, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v20[-1]))));
            v18 = (int64x2_t)vpadalq_u32((uint64x2_t)v18, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v20))));
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          result = vaddvq_s64(vaddq_s64(v18, v19));
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFCLL))
            goto LABEL_22;
        }
        else
        {
          v12 = (int8x8_t *)v5;
        }
        do
        {
          v22 = *v12++;
          v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          result += v23.u32[0];
          v7 -= 64;
        }
        while (v7 > 0x3F);
LABEL_22:
        if (!v7)
          return result;
        v24 = *(_QWORD *)v12 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
        goto LABEL_32;
      }
    }
    v12 = (int8x8_t *)v5;
    goto LABEL_22;
  }
  if (a2)
  {
    if (64 - a2 >= v7)
      v13 = v6 + 8 * (a3 - (_QWORD)a1);
    else
      v13 = 64 - a2;
    v5 = (int8x16_t *)(a1 + 1);
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v13)) & (-1 << a2) & ~*a1));
    v14.i16[0] = vaddlv_u8(v14);
    result = v14.u32[0];
    v7 -= v13;
    v15 = v7 - 64;
    if (v7 >= 0x40)
      goto LABEL_14;
LABEL_25:
    v16 = (uint64_t *)v5;
    goto LABEL_30;
  }
  result = 0;
  v15 = v7 - 64;
  if (v7 < 0x40)
    goto LABEL_25;
LABEL_14:
  if (v15 >= 0xC0)
  {
    v25 = (v15 >> 6) + 1;
    v16 = &v5->i64[v25 & 0x7FFFFFFFFFFFFFCLL];
    v7 -= (v25 & 0x7FFFFFFFFFFFFFCLL) << 6;
    v26 = 0uLL;
    v27 = (int64x2_t)(unint64_t)result;
    v28 = v5 + 1;
    v29 = v25 & 0x7FFFFFFFFFFFFFCLL;
    do
    {
      v27 = (int64x2_t)vpadalq_u32((uint64x2_t)v27, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(v28[-1])))));
      v26 = (int64x2_t)vpadalq_u32((uint64x2_t)v26, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(*v28)))));
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    result = vaddvq_s64(vaddq_s64(v26, v27));
    if (v25 == (v25 & 0x7FFFFFFFFFFFFFCLL))
      goto LABEL_30;
  }
  else
  {
    v16 = (uint64_t *)v5;
  }
  do
  {
    v30 = *v16++;
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)~v30);
    v31.i16[0] = vaddlv_u8(v31);
    result += v31.u32[0];
    v7 -= 64;
  }
  while (v7 > 0x3F);
LABEL_30:
  if (!v7)
    return result;
  v24 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v7) & ~*v16;
LABEL_32:
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v32.i16[0] = vaddlv_u8(v32);
  result += v32.u32[0];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_190F61E74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_190F61E8C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F61EA0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB5A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F61ED8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB5A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F61EF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_190F61F08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_"
                     "10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionI"
                                "FvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F61F74()
{
  return &unk_1E2DCB600;
}

uint64_t sub_190F61F80(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E2DCB620;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void sub_190F61FE4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E2DCB620;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F62058(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E2DCB620;
  v2[1] = v3;
  *((_BYTE *)v2 + 16) = 0;
  v4 = (char *)(v2 + 2);
  *((_BYTE *)v2 + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      if (v5 == a1 + 16)
      {
        v2[5] = v4;
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
        goto LABEL_7;
      }
      v5 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v4);
    }
    v2[5] = v5;
LABEL_7:
    *((_BYTE *)v2 + 48) = 1;
  }
  return v2;
}

void sub_190F620EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    sub_190F6253C(v1, (_QWORD *)(v1 + 16));
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190F62114(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E2DCB620;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = a2 + 16;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(result + 48))
  {
    v5 = *(_QWORD *)(result + 40);
    if (v5)
    {
      if (v5 == result + 16)
      {
        *(_QWORD *)(a2 + 40) = v4;
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
        goto LABEL_8;
      }
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5 + 16))(*(_QWORD *)(result + 40), v4);
    }
    else
    {
      result = 0;
    }
    *(_QWORD *)(a2 + 40) = result;
LABEL_8:
    *(_BYTE *)(a2 + 48) = 1;
  }
  return result;
}

void sub_190F621A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    sub_190F6253C(v1, (_QWORD *)(v1 + 16));
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F621C0(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 48))
  {
    v1 = result + 16;
    result = *(_QWORD *)(result + 40);
    if (result == v1)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
    }
    else if (result)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
  }
  return result;
}

void sub_190F62204(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

uint64_t sub_190F6225C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  *a2 = 0;
  if (!*(_BYTE *)(a1 + 48))
    std::__throw_bad_optional_access[abi:ne180100]();
  v3 = *(_QWORD *)(a1 + 8);
  v6 = v2;
  v7 = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v7, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190F622DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10)
    (*(void (**)(void))(*(_QWORD *)a10 + 8))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F62314(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_"
                     "10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionI"
                                "FvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F62380()
{
  return &unk_1E2DCB680;
}

_QWORD *std::__function::__value_func<void ()(std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_190F62520(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t sub_190F6252C@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

uint64_t sub_190F6253C(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 40);
  if (v2 == a2)
    return sub_190F6252C(a2, 4);
  if (v2)
    return sub_190F6252C(*(_QWORD **)(result + 40), 5);
  return result;
}

_QWORD *E5RT::IOPort::IOPort(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D5BF08;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D5BF08;
  result[1] = v2;
  return result;
}

void E5RT::IOPort::~IOPort(E5RT::IOPort *this)
{
  E5RT::IOPortImpl *v2;

  v2 = (E5RT::IOPortImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5BF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  E5RT::IOPortImpl *v2;

  v2 = (E5RT::IOPortImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5BF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  E5RT::IOPortImpl *v2;

  v2 = (E5RT::IOPortImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5BF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x19401CD90]();
  }
  JUMPOUT(0x19401CD90);
}

void E5RT::IOPortPriv::~IOPortPriv(E5RT::IOPortPriv *this)
{
  E5RT::IOPortImpl *v2;

  v2 = (E5RT::IOPortImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5BF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  E5RT::IOPortImpl *v2;

  v2 = (E5RT::IOPortImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5BF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x19401CD90]();
  }
  JUMPOUT(0x19401CD90);
}

char **E5RT::IOPortPriv::SetSupportedBufferTypes(uint64_t a1, char **a2)
{
  return E5RT::IOPortImpl::SetSupportedBufferTypes(*(_QWORD *)(a1 + 8), a2);
}

uint64_t E5RT::IOPortPriv::IsBoundMemoryObjectInternal(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::IsBoundMemoryObjectInternal(this[1]);
}

BOOL E5RT::IOPortPriv::IsDynamicBounded(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::IsDynamicBounded(this[1]);
}

_QWORD *E5RT::IOPort::IOPort(_QWORD *this)
{
  *this = &off_1E2D5BF08;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E2D5BF08;
  this[1] = 0;
  return this;
}

uint64_t E5RT::IOPort::GetMemoryObjectRef(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::GetMemoryObjectRef(this[1]);
}

{
  return E5RT::IOPortImpl::GetMemoryObjectRef(this[1]);
}

void **E5RT::IOPort::GetSupportedBufferTypes(void ***this)
{
  return E5RT::IOPortImpl::GetSupportedBufferTypes(this[1]);
}

void E5RT_Private::SetMaxPortDescriptor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *exception;
  std::__shared_weak_count *v21;
  _QWORD v22[3];
  char v23[8];
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  v26 = *a1;
  v27 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v24, "SetMaxPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v22, "Invalid dynamic type.");
    E5RT::Status::Status(v23, 2, v22);
    E5RT::E5RTError::E5RTError(exception, &v24, v23);
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v21 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = *(uint64_t **)(v2 + 8);
    v24 = v6;
    v25 = v7;
    do
      v11 = __ldxr(v8);
    while (__stxr(v11 + 1, v8));
  }
  else
  {
    v10 = *(uint64_t **)(v2 + 8);
    v24 = *a2;
    v25 = 0;
  }
  E5RT::IOPortImpl::SetMaxPortDescriptor(v10, (uint64_t)&v24);
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_190F6294C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void sub_190F62970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;
  uint64_t v26;

  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void E5RT_Private::GetMaxPortDescriptor(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *exception;
  _QWORD v9[3];
  _BYTE v10[8];
  _QWORD v11[5];

  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  v11[3] = *a1;
  v11[4] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "GetMaxPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v9, "Invalid dynamic type.");
    E5RT::Status::Status(v10, 2, v9);
    E5RT::E5RTError::E5RTError(exception, v11, v10);
  }
  E5RT::IOPortImpl::GetMaxPortDescriptor(*(_QWORD *)(v2 + 8), a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_190F62AF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_190F62B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::ExecuteOptions *E5RT::ExecuteOptions::ExecuteOptions(E5RT::ExecuteOptions *this)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  __int128 __p;
  uint64_t v12;
  void *v13[2];
  void *v14[2];
  int v15;
  unsigned __int8 v16;
  char **v17;

  *(_QWORD *)E5RT::ConfigOptions::ConfigOptions(this) = &off_1E2D36518;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 1065353216;
  v16 = 0;
  *(_QWORD *)&__p = &E5RT::ExecuteOptions::setResourceTelemetry;
  v2 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v13, (uint64_t)&E5RT::ExecuteOptions::setResourceTelemetry, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v2 + 32, &v16);
  __p = 0uLL;
  v12 = 0;
  v17 = &E5RT::ExecuteOptions::executiontIdentifier;
  v3 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v13, (uint64_t)&E5RT::ExecuteOptions::executiontIdentifier, (uint64_t)&std::piecewise_construct, (_OWORD **)&v17);
  std::any::operator=[abi:ne180100]<std::string,std::string,void>((uint64_t)v3 + 32, &__p);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
  v4 = (_QWORD *)operator new();
  E5RT::ConfigOptionsImpl::ConfigOptionsImpl((uint64_t)v4, (uint64_t *)v13);
  *v4 = &off_1E2DCB718;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v14[0];
  if (v14[0])
  {
    do
    {
      v9 = (_QWORD *)*v6;
      v10 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6[4];
      if (v10)
        v10(0, v6 + 4, 0, 0, 0);
      operator delete(v6);
      v6 = v9;
    }
    while (v9);
  }
  v7 = v13[0];
  v13[0] = 0;
  if (v7)
    operator delete(v7);
  return this;
}

void sub_190F62CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  E5RT::ConfigOptions *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a5);
  v7 = v6;
  MEMORY[0x19401CD90](v7, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v5);
  _Unwind_Resume(a1);
}

void sub_190F62D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  E5RT::ConfigOptions *v16;

  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  E5RT::ConfigOptions::~ConfigOptions(v16);
  _Unwind_Resume(a1);
}

void E5RT::ExecuteOptions::~ExecuteOptions(E5RT::ExecuteOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::ExecuteOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

uint64_t E5RT::ExecuteOptions::GetEnableResourceTelemetry(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "setResourceTelemetry<BOOL>", 26);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecuteOptions::SetEnableResourceTelemetry(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "setResourceTelemetry<BOOL>", 26, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190F62EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::ExecuteOptions::GetExecutionIdentifier(const void **this)
{
  void *v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "executiontIdentifier<std::string>", 33);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

void E5RT::ExecuteOptions::SetExecutionIdentifier(uint64_t a1, uint64_t a2)
{
  const void *v3;
  void *v4;
  void (*v5)(int);
  std::string v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    v5 = 0;
    v6.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_6:
  v5 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  (*(void (**)(void *, const char *, uint64_t, void (**)(int)))(*(_QWORD *)v4 + 24))(v4, "executiontIdentifier<std::string>", 33, &v5);
  if (v5)
    v5(0);
}

void sub_190F630C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

E5RT::ExecuteOptions *E5RT::ExecuteOptions::Create@<X0>(E5RT::ExecuteOptions **a1@<X8>)
{
  E5RT::ExecuteOptions *v3;
  E5RT::ExecuteOptions *result;

  v3 = (E5RT::ExecuteOptions *)operator new();
  E5RT::ExecuteOptions::ExecuteOptions(v3);
  *a1 = v3;
  result = (E5RT::ExecuteOptions *)operator new();
  *(_QWORD *)result = &unk_1E2D366C8;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_190F63174(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_190F63190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecuteOptions::SharedDefaultOption(E5RT::ExecuteOptions *this)
{
  if (qword_1EE214860 != -1)
    dispatch_once(&qword_1EE214860, &unk_1E2DCB6E8);
  return qword_1EE214858;
}

E5RT::ExecuteOptions *sub_190F63200()
{
  E5RT::ExecuteOptions *v0;
  E5RT::ExecuteOptions *result;

  v0 = (E5RT::ExecuteOptions *)operator new();
  result = E5RT::ExecuteOptions::ExecuteOptions(v0);
  qword_1EE214858 = (uint64_t)v0;
  return result;
}

void sub_190F63240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_190F63268(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_pointer<E5RT::ExecuteOptions *,std::shared_ptr<E5RT::ExecuteOptions>::__shared_ptr_default_delete<E5RT::ExecuteOptions,E5RT::ExecuteOptions>,std::allocator<E5RT::ExecuteOptions>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecuteOptions *,std::shared_ptr<E5RT::ExecuteOptions>::__shared_ptr_default_delete<E5RT::ExecuteOptions,E5RT::ExecuteOptions>,std::allocator<E5RT::ExecuteOptions>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecuteOptions *,std::shared_ptr<E5RT::ExecuteOptions>::__shared_ptr_default_delete<E5RT::ExecuteOptions,E5RT::ExecuteOptions>,std::allocator<E5RT::ExecuteOptions>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7A6DBLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A7A6DBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7A6DBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7A6DBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImpl::AneInferenceOperationImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)a1 = off_1E2D5BDA0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a4;
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 56, a5);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 96, a6);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_190F633C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F633EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(E5RT::Ops::Impl::AneInferenceOperationImpl *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;

  *(_QWORD *)this = off_1E2D5BDA0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void **)*((_QWORD *)this + 14);
      if (!v5)
        goto LABEL_8;
      while (1)
      {
LABEL_23:
        v15 = (void **)*v5;
        if (*((char *)v5 + 63) < 0)
        {
          operator delete(v5[5]);
          if (*((char *)v5 + 39) < 0)
LABEL_27:
            operator delete(v5[2]);
        }
        else if (*((char *)v5 + 39) < 0)
        {
          goto LABEL_27;
        }
        operator delete(v5);
        v5 = v15;
        if (!v15)
          goto LABEL_8;
      }
    }
  }
  v5 = (void **)*((_QWORD *)this + 14);
  if (v5)
    goto LABEL_23;
LABEL_8:
  v6 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    operator delete(v6);
  v7 = (void **)*((_QWORD *)this + 9);
  if (v7)
  {
    do
    {
      v16 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0)
LABEL_33:
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_33;
      }
      operator delete(v7);
      v7 = v16;
    }
    while (v16);
  }
  v8 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    operator delete(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v12)
      return;
  }
  else
  {
LABEL_17:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v12)
      return;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void E5RT::Ops::Impl::AneInferenceOperationImpl::ReshapeOperationInternal()
{
  void *exception;
  char *v1;
  __int128 v2;
  _BYTE v3[8];
  char *v4;
  __int128 v5;

  exception = __cxa_allocate_exception(0x18uLL);
  v4 = (char *)operator new(0x20uLL);
  v5 = xmmword_191A71250;
  strcpy(v4, "ReshapeOperationInternal");
  v1 = (char *)operator new(0x30uLL);
  v2 = xmmword_191A6F7A0;
  strcpy(v1, "Reshape is not implemented for ANE driver.");
  E5RT::Status::Status(v3, 2, &v1);
  E5RT::E5RTError::E5RTError(exception, &v4, v3);
}

void sub_190F636A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v23)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_190F63704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F636F4);
}

void sub_190F63728(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptionsImpl::GetOverrideComputeGPUDevice(E5RT::PrecompiledComputeOpCreateOptionsImpl *this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetOverrideComputeGPUDevice");
    std::string::basic_string[abi:ne180100]<0>(v3, "Override ComputeGPUDevice not yet specified.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F637DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::PrecompiledComputeOpCreateOptions::PrecompiledComputeOpCreateOptions(_QWORD *this)
{
  *this = &off_1E2D5B2A8;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E2D5B2A8;
  this[1] = 0;
  return this;
}

_QWORD *E5RT::PrecompiledComputeOpCreateOptions::PrecompiledComputeOpCreateOptions(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D5B2A8;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D5B2A8;
  result[1] = v2;
  return result;
}

E5RT::PrecompiledComputeOpCreateOptionsImpl **std::unique_ptr<E5RT::PrecompiledComputeOpCreateOptionsImpl>::~unique_ptr[abi:ne180100](E5RT::PrecompiledComputeOpCreateOptionsImpl **a1)
{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

std::string *E5RT::PrecompiledComputeOpCreateOptions::SetLibraryPath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 8) + 40), a2);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetLibraryPath(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *((_QWORD *)this + 1) + 40;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetOverrideComputeGPUDevice(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + 72) = a2;
  return result;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetOverrideComputeGPUDevice(E5RT::PrecompiledComputeOpCreateOptionsImpl **this)
{
  return E5RT::PrecompiledComputeOpCreateOptionsImpl::GetOverrideComputeGPUDevice(this[1]);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetIOSurfaceMemoryPoolId(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 8) + 80) = a2;
  return this;
}

void E5RT::PrecompiledComputeOpCreateOptions::SetDynamicCallables(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 + 88 != a2)
  {
    *(_DWORD *)(v2 + 120) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)(v2 + 88), *(uint64_t **)(a2 + 16), 0);
  }
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetMutableMILWeightPaths(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *((_QWORD *)this + 1) + 128;
}

void E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 + 128 != a2)
  {
    *(_DWORD *)(v2 + 160) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)(v2 + 128), *(uint64_t **)(a2 + 16), 0);
  }
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 208) = a2;
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 208);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableGPUQuantOps(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 209) = a2;
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalEnableGPUQuantOps(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 209);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableMPSGraphParallelEncode(uint64_t this, int a2)
{
  uint64_t v2;

  v2 = 4;
  if (!a2)
    v2 = 1;
  *(_QWORD *)(*(_QWORD *)(this + 8) + 216) = v2;
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalMPSGraphMaximumNumberOfEncodingThreads(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 8) + 216) = a2;
  return this;
}

BOOL E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalEnableMPSGraphParallelEncode(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 216) > 1uLL;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalMPSGraphMaximumNumberOfEncodingThreads(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 216);
}

void E5RT::PrecompiledComputeOpCreateOptionsPriv::SetMachoToSharedResourceURI(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 + 168 != a2)
  {
    *(_DWORD *)(v2 + 200) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)(v2 + 168), *(uint64_t **)(a2 + 16), 0);
  }
}

uint64_t E5RT::PrecompiledComputeOpCreateOptionsPriv::GetMachoToSharedResourceURI@<X0>(E5RT::PrecompiledComputeOpCreateOptionsPriv *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,std::string>::unordered_map(a2, *((_QWORD *)this + 1) + 168);
}

void E5RT::PrecompiledComputeOpCreateOptionsPriv::~PrecompiledComputeOpCreateOptionsPriv(E5RT::PrecompiledComputeOpCreateOptionsPriv *this)
{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;

  v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5B2A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;

  v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5B2A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x19401CD90]();
  }
  JUMPOUT(0x19401CD90);
}

void E5RT::IOPortImpl::~IOPortImpl(E5RT::IOPortImpl *this)
{
  void *v2;
  void **v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void **)*((_QWORD *)this + 9);
  if (v3)
  {
    do
    {
      v11 = (void **)*v3;
      if (*((char *)v3 + 39) < 0)
        operator delete(v3[2]);
      operator delete(v3);
      v3 = v11;
    }
    while (v11);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_19;
  }
  else
  {
LABEL_10:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_19;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_19:
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

uint64_t E5RT::IOPortImpl::GetMemoryObjectRef(E5RT::IOPortImpl *this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  result = *(_QWORD *)this;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetMemoryObjectRef");
    std::string::basic_string[abi:ne180100]<0>(v3, "No memory object bound to port.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  result = *(_QWORD *)this;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetMemoryObjectRef");
    std::string::basic_string[abi:ne180100]<0>(v3, "No memory object bound to port.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F63D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_190F63E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::IOPortImpl::SetMaxPortDescriptor(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  E5RT::TensorDescriptor *v9;
  E5RT::TensorDescriptor *v10;
  _BOOL4 v11;
  E5RT::TensorDescriptor *v12;
  unint64_t Rank;
  E5RT::TensorDescriptor *v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *exception;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[3];
  _BYTE v33[8];
  _QWORD v34[3];

  if (*((_BYTE *)a1 + 48))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "SetMaxPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v32, "Max port descriptor cannot be changed while port is locked.");
    E5RT::Status::Status(v33, 2, v32);
    E5RT::E5RTError::E5RTError(exception, v34, v33);
  }
  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v5)
  {
    v26 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "SetMaxPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v32, "Max port descriptor cannot be changed while memory object is bound to port.");
    E5RT::Status::Status(v33, 2, v32);
    E5RT::E5RTError::E5RTError(v26, v34, v33);
  }
  if (*(_QWORD *)a2)
  {
    if (!*((_BYTE *)a1 + 96))
    {
      v27 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v34, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v32, "A max port descriptor can only be set on a dynamic port.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v27, v34, v33);
    }
    if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(*(void **)a2))
    {
      v31 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v34, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v32, "SetMaxPortDescriptor is only supported for tensor IO.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v31, v34, v33);
    }
    if (!E5RT::OperandDescriptor::TryAsTensorDescriptor((void *)a1[2]))
    {
      v28 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v34, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v32, "The max descriptor must be of the same type as current descriptor.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v28, v34, v33);
    }
    v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)a1[2]);
    E5RT::TensorDescriptor::GetTensorDataType(v9, (E5RT::TensorDataType *)v34);
    v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)a2);
    E5RT::TensorDescriptor::GetTensorDataType(v10, (E5RT::TensorDataType *)v32);
    v11 = E5RT::operator!=((uint64_t)v34, (uint64_t)v32);
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v32);
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v34);
    if (v11)
    {
      v29 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v34, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v32, "The max descriptor must have the same datatype as the current descriptor.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v29, v34, v33);
    }
    v12 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)a1[2]);
    Rank = E5RT::TensorDescriptor::GetRank(v12);
    v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)a2);
    if (Rank != E5RT::TensorDescriptor::GetRank(v14))
    {
      v30 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v34, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v32, "The max descriptor must have the same rank as the current descriptor.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v30, v34, v33);
    }
    v16 = *(void **)a2;
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (std::__shared_weak_count *)a1[5];
    a1[4] = (uint64_t)v16;
    a1[5] = v15;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    v22 = (std::__shared_weak_count *)a1[5];
    a1[4] = 0;
    a1[5] = 0;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_190F643A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPortImpl::IsBoundMemoryObjectInternal(E5RT::IOPortImpl *this)
{
  return *((unsigned __int8 *)this + 98);
}

BOOL E5RT::IOPortImpl::IsDynamicBounded(E5RT::IOPortImpl *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _BOOL8 v5;
  unint64_t v6;

  if (!*((_BYTE *)this + 96))
    return 0;
  v1 = *((_QWORD *)this + 4);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    return v1 != 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  v5 = v1 != 0;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v5;
}

void **E5RT::IOPortImpl::GetSupportedBufferTypes(void **this)
{
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(this[2]))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetSupportedBufferTypes");
    std::string::basic_string[abi:ne180100]<0>(v4, "GetSupportedBufferTypes is only supported for Buffer object");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return this + 13;
}

void sub_190F646C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

char **E5RT::IOPortImpl::SetSupportedBufferTypes(uint64_t a1, char **a2)
{
  char **result;

  result = (char **)(a1 + 104);
  if (result != a2)
    return (char **)std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>(result, *a2, a2[1], (a2[1] - *a2) >> 2);
  return result;
}

_QWORD *std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void E5RT::AllocateAndBindMemory(E5RT::IOPort *a1, unsigned int a2)
{
  E5RT::TensorDescriptorImpl **v4;
  unint64_t Size;
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;
  char *v8;
  E5RT::SurfaceDescriptor *v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  E5RT::OperandDescriptor *v29;
  std::__shared_weak_count *v30;

  E5RT::IOPort::GetPortDescriptor(a1, &v29);
  if (!v29)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to a port descriptor.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v27 = 0;
  v28 = 0;
  if (E5RT::OperandDescriptor::TryAsTensorDescriptor(v29))
  {
    v4 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(v29);
    Size = E5RT::TensorDescriptor::GetSize(v4);
    E5RT::BufferObject::AllocMemory(Size, a2, &v26);
    v6 = v26;
    if (v26)
    {
      v7 = (std::__shared_weak_count *)operator new();
      goto LABEL_8;
    }
LABEL_10:
    v27 = v6;
    v28 = 0;
    v24 = v6;
    v25 = 0;
    goto LABEL_13;
  }
  if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v29))
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Found an unsupported descriptor type.");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor(v29);
  E5RT::SurfaceObject::AllocSurface(v9, 0, &v26);
  v6 = v26;
  if (!v26)
    goto LABEL_10;
  v7 = (std::__shared_weak_count *)operator new();
LABEL_8:
  v10 = v26;
  v7->__vftable = (std::__shared_weak_count_vtbl *)(v8 + 16);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v10;
  v27 = v6;
  v28 = v7;
  v24 = v6;
  v25 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
LABEL_13:
  E5RT::IOPort::BindMemoryObject((uint64_t)a1, (uint64_t)&v24);
  v13 = v25;
  if (v25)
  {
    v14 = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v28;
  if (!v28)
    goto LABEL_22;
  v17 = (unint64_t *)&v28->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = v30;
    if (!v30)
      return;
  }
  else
  {
LABEL_22:
    v19 = v30;
    if (!v30)
      return;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_190F64AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  __cxa_free_exception(v13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v14 - 32);
  _Unwind_Resume(a1);
}

void sub_190F64B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (a5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5 - 32);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5 - 32);
  _Unwind_Resume(a1);
}

void E5RT::CreateBoundPortForTensor(E5RT::TensorDataType::Impl **this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X2>, unsigned int a4@<W3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count_vtbl *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error *exception;
  std::runtime_error *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v44 = 0;
  v45 = 0;
  if (*a3 == a3[1])
  {
    E5RT::TensorDescriptor::CreateTensorDesc(this, a2, &v43);
    v11 = v43;
    if ((_QWORD)v43)
    {
      v12 = (std::__shared_weak_count *)operator new();
      v13 = (std::__shared_weak_count_vtbl *)v43;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12[1].__vftable = v13;
      *(_QWORD *)&v43 = 0;
      v10 = v45;
      v44 = v11;
      v45 = v12;
      if (!v10)
        goto LABEL_17;
    }
    else
    {
      *(_QWORD *)&v43 = 0;
      v10 = v45;
      v44 = 0;
      v45 = 0;
      if (!v10)
        goto LABEL_17;
    }
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
  }
  else
  {
    E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments(this, a2, a3, &v43);
    v7 = v43;
    if ((_QWORD)v43)
    {
      v8 = (std::__shared_weak_count *)operator new();
      v9 = (std::__shared_weak_count_vtbl *)v43;
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8[1].__vftable = v9;
      *(_QWORD *)&v43 = 0;
      v10 = v45;
      v44 = v7;
      v45 = v8;
      if (!v10)
        goto LABEL_17;
    }
    else
    {
      *(_QWORD *)&v43 = 0;
      v10 = v45;
      v44 = 0;
      v45 = 0;
      if (!v10)
        goto LABEL_17;
    }
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
  }
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_17:
  v17 = v43;
  *(_QWORD *)&v43 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (!v44)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in creating a tensor descriptor.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = operator new(0x28uLL);
  v18[1] = 0;
  v18[2] = 0;
  *v18 = &off_1E2DB5C10;
  std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::TensorDescriptor> &>((uint64_t)&v41, (uint64_t)(v18 + 3), &v44);
  *(_QWORD *)&v43 = v18 + 3;
  *((_QWORD *)&v43 + 1) = v18;
  E5RT::TensorDescriptor::AllocateMemory(v44, a4, 1uLL, &v40);
  v19 = v40;
  v41 = v40;
  if (!v40)
  {
    v42 = 0;
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Failed in allocating memory for a tensor.");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v20 = (std::__shared_weak_count *)operator new();
  v21 = v40;
  v20->__shared_owners_ = 0;
  v22 = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3190;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = v21;
  v42 = v20;
  v38 = v19;
  v39 = v20;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  E5RT::IOPort::BindMemoryObject((uint64_t)(v18 + 3), (uint64_t)&v38);
  v24 = v39;
  if (v39)
  {
    v25 = (unint64_t *)&v39->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *a5 = v43;
  v43 = 0uLL;
  v27 = v42;
  if (v42)
  {
    v28 = (unint64_t *)&v42->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_37;
  v31 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = v45;
    if (!v45)
      return;
  }
  else
  {
LABEL_37:
    v33 = v45;
    if (!v45)
      return;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_190F64F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (a15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v15 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void E5RT::CreateBoundPortForSurface(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count_vtbl *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count_vtbl *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  E5RT::SurfaceDescriptor *v34;
  std::__shared_weak_count *v35;

  E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(a1, a2, a3, &v33);
  v34 = (E5RT::SurfaceDescriptor *)v33;
  if (!(_QWORD)v33)
  {
    v35 = 0;
LABEL_28:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in creating a surface descriptor.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = (std::__shared_weak_count *)operator new();
  v6 = (std::__shared_weak_count_vtbl *)v33;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC32A8;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v6;
  v35 = v5;
  if (!v34)
    goto LABEL_28;
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E2DB5C10;
  v8 = (uint64_t)(v7 + 3);
  std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::SurfaceDescriptor> &>((uint64_t)&v31, (uint64_t)(v7 + 3), (uint64_t *)&v34);
  *(_QWORD *)&v33 = v7 + 3;
  *((_QWORD *)&v33 + 1) = v7;
  E5RT::SurfaceObject::AllocSurface(v34, 0, &v30);
  v9 = v30;
  v31 = v30;
  if (!v30)
  {
    v32 = 0;
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Failed in allocating memory for a surface.");
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = (std::__shared_weak_count *)operator new();
  v11 = v30;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3200;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = v11;
  v32 = v10;
  v28 = v9;
  v29 = v10;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  E5RT::IOPort::BindMemoryObject(v8, (uint64_t)&v28);
  v14 = v29;
  if (v29)
  {
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *a4 = v33;
  v33 = 0uLL;
  v17 = v32;
  if (v32)
  {
    v18 = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_190F65374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5 - 48);
  _Unwind_Resume(a1);
}

void sub_190F65414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F6540CLL);
}

void E5RT::InitializePortRandomly(E5RT *this, E5RT::IOPort *a2, uint64_t a3)
{
  E5RT *v6;
  const E5RT::TensorDescriptor *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  E5RT *v11;
  const E5RT::SurfaceDescriptor *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::runtime_error *v20;
  std::runtime_error *v21;
  E5RT::MemoryObject *v22;
  std::__shared_weak_count *v23;
  E5RT::OperandDescriptor *v24;
  std::__shared_weak_count *v25;

  E5RT::IOPort::GetPortDescriptor(this, &v24);
  if (!v24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to a port descriptor.");
    goto LABEL_27;
  }
  if (E5RT::OperandDescriptor::TryAsTensorDescriptor(v24))
  {
    v6 = (E5RT *)E5RT::OperandDescriptor::TensorDescriptor(v24);
    E5RT::IOPort::GetMemoryObject(this, &v22);
    v7 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::TryAsBuffer(v22);
    v8 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (!v7)
    {
      v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v20, "Found a null pointer to a tensor memory object.");
      __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    E5RT::InitializeTensorRandomly(v6, v7, a2, a3);
    goto LABEL_18;
  }
  if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v24))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found an unsupported descriptor type.");
LABEL_27:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = (E5RT *)E5RT::OperandDescriptor::SurfaceDescriptor(v24);
  E5RT::IOPort::GetMemoryObject(this, &v22);
  v12 = (const E5RT::SurfaceDescriptor *)E5RT::MemoryObject::TryAsSurface(v22);
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v12)
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Found a null pointer to a surface memory object.");
    __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::InitializeSurfaceRandomly(v11, v12, a2, a3);
LABEL_18:
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_190F6568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_190F656E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F65710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F65724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F65738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F6574C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7A7E9)
    return a1 + 24;
  if (((v3 & 0x8000000191A7A7E9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7A7E9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7A7E9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::TensorDescriptor> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  E5RT::IOPortPriv::IOPortPriv(a2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190F65908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::SurfaceDescriptor  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceDescriptor  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7A882)
    return a1 + 24;
  if (((v3 & 0x8000000191A7A882 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7A882))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7A882 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::SurfaceDescriptor> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  E5RT::IOPortPriv::IOPortPriv(a2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190F65AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCB748;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F65B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_operation_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCB948;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F65C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffers(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCB9C8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F65D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBA48;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F65E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encode(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBAC8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F65EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBB48;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F65FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_device(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBBC8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F66088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_device(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBC48;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F6615C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBCC8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F66230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBD48;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F66304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_dynamic_callables(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBDC8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F663D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_copy_dynamic_callables(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBE48;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F664AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_paths(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBEC8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F66580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_paths(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBF48;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F66654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mpsgraph_type_inference(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCBFC8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F6672C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_ops(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC048;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F66804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encode(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC0C8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F668DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC148;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F669B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_of_encoding_threads(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC1C8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F66A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F66AC0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F66AD4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCB748;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F66B14(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB748;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F66B3C(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  size_t v11;
  __int128 *p_p;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  __int128 __p;
  unint64_t v25;
  void *__dst;
  __int128 v27;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        v2 = (_QWORD *)operator new();
        *v2 = 0;
        v2[1] = 0;
        v3 = *(const char **)(a1 + 16);
        v4 = strlen(v3);
        if (v4 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v5 = v4;
        if (v4 >= 0x17)
        {
          v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v4 | 7) != 0x17)
            v7 = v4 | 7;
          v8 = v7 + 1;
          p_dst = (void **)operator new(v7 + 1);
          *(_QWORD *)&v27 = v5;
          *((_QWORD *)&v27 + 1) = v8 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v27) = v4;
          p_dst = &__dst;
          if (!v4)
          {
LABEL_12:
            *((_BYTE *)p_dst + v5) = 0;
            v9 = *(const char **)(a1 + 24);
            v10 = strlen(v9);
            if (v10 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v11 = v10;
            if (v10 >= 0x17)
            {
              v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v10 | 7) != 0x17)
                v13 = v10 | 7;
              v14 = v13 + 1;
              p_p = (__int128 *)operator new(v13 + 1);
              *((_QWORD *)&__p + 1) = v11;
              v25 = v14 | 0x8000000000000000;
              *(_QWORD *)&__p = p_p;
            }
            else
            {
              HIBYTE(v25) = v10;
              p_p = &__p;
              if (!v10)
              {
LABEL_20:
                *((_BYTE *)p_p + v11) = 0;
                E5RT::PrecompiledComputeOpCreateOptions::Create((E5RT::SharedResourceManager *)&__dst, (uint64_t)&__p, &v23);
                v15 = v23;
                if (v23)
                {
                  v16 = (_QWORD *)operator new();
                  v17 = v23;
                  *v16 = &unk_1E2D36700;
                  v16[1] = 0;
                  v16[2] = 0;
                  v16[3] = v17;
                  v23 = 0;
                  v18 = (std::__shared_weak_count *)v2[1];
                  *v2 = v15;
                  v2[1] = v16;
                  if (!v18)
                    goto LABEL_28;
                }
                else
                {
                  v23 = 0;
                  v18 = (std::__shared_weak_count *)v2[1];
                  *v2 = 0;
                  v2[1] = 0;
                  if (!v18)
                    goto LABEL_28;
                }
                p_shared_owners = (unint64_t *)&v18->__shared_owners_;
                do
                  v20 = __ldaxr(p_shared_owners);
                while (__stlxr(v20 - 1, p_shared_owners));
                if (!v20)
                {
                  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                  std::__shared_weak_count::__release_weak(v18);
                }
LABEL_28:
                v21 = v23;
                v23 = 0;
                if (v21)
                  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
                if (SHIBYTE(v25) < 0)
                {
                  operator delete((void *)__p);
                  if ((SHIBYTE(v27) & 0x80000000) == 0)
                    goto LABEL_32;
                }
                else if ((SHIBYTE(v27) & 0x80000000) == 0)
                {
LABEL_32:
                  result = 0;
                  **(_QWORD **)(a1 + 8) = v2;
                  return result;
                }
                operator delete(__dst);
                goto LABEL_32;
              }
            }
            memmove(p_p, v9, v11);
            goto LABEL_20;
          }
        }
        memmove(p_dst, v3, v5);
        goto LABEL_12;
      }
      __dst = operator new(0x38uLL);
      v27 = xmmword_191A726A0;
      strcpy((char *)__dst, "Invalid Function Argument: function_name is NULL.");
      HIBYTE(v25) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
    }
    else
    {
      __dst = operator new(0x38uLL);
      v27 = xmmword_191A6FF80;
      strcpy((char *)__dst, "Invalid Function Argument: e5_library_path is NULL.");
      HIBYTE(v25) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
    }
  }
  else
  {
    __dst = operator new(0x30uLL);
    v27 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v25) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  if (SHIBYTE(v25) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v27) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190F66F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F67028(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_precompiled_compute_op_create_options_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z49e5rt_precompiled_compute_op_create_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_precompiled_compute_op_create_options_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_precompiled_compute_op_create_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F67094()
{
  return &unk_1E2DCB7A8;
}

void std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7A9D8)
    return a1 + 24;
  if (((v3 & 0x8000000191A7A9D8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7A9D8))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7A9D8 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_190F67164()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F67178(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB7C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F671B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB7C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F671D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t result;
  void *__p[2];
  char v20;
  void *v21;
  __int128 v22;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      v3 = *(_QWORD *)(a1 + 16);
      v5 = *(void **)v3;
      v4 = *(_QWORD *)(v3 + 8);
      v21 = v5;
      *(_QWORD *)&v22 = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      E5RT::PrecompiledComputeOpCreateOptions::Create(&v21, __p);
      v8 = __p[0];
      if (__p[0])
      {
        v9 = (_QWORD *)operator new();
        v10 = __p[0];
        *v9 = &unk_1E2D36700;
        v9[1] = 0;
        v9[2] = 0;
        v9[3] = v10;
        __p[0] = 0;
        v11 = (std::__shared_weak_count *)v2[1];
        *v2 = v8;
        v2[1] = v9;
        if (!v11)
          goto LABEL_14;
      }
      else
      {
        __p[0] = 0;
        v11 = (std::__shared_weak_count *)v2[1];
        *v2 = 0;
        v2[1] = 0;
        if (!v11)
        {
LABEL_14:
          v14 = __p[0];
          __p[0] = 0;
          if (v14)
            (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
          v15 = (std::__shared_weak_count *)v22;
          if ((_QWORD)v22)
          {
            v16 = (unint64_t *)(v22 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          result = 0;
          **(_QWORD **)(a1 + 8) = v2;
          return result;
        }
      }
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_14;
    }
    v21 = operator new(0x38uLL);
    v22 = xmmword_191A6FF70;
    strcpy((char *)v21, "Invalid Function Argument: program_function is NULL.");
    v20 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v21, (uint64_t *)__p);
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21);
    return 1;
  }
  else
  {
    v21 = operator new(0x30uLL);
    v22 = xmmword_191A6F7A0;
    strcpy((char *)v21, "Invalid Function Argument: handle is NULL.");
    v20 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v21, (uint64_t *)__p);
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21);
    return 1;
  }
}

void sub_190F6748C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F67570(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_precompiled_compute_op_create_options_create_with_program_functionE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z71e5rt_precompiled_compute_op_create_options_create_with_program_functionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_precompiled_compute_op_create_options_create_with_program_functionE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_precompiled_compute_op_create_options_create_with_program_functionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F675DC()
{
  return &unk_1E2DCB828;
}

void sub_190F675EC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F67600(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCB848;
  result[1] = v3;
  return result;
}

uint64_t sub_190F67634(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCB848;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F67650(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190F67820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F67860(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z50e5rt_precompiled_compute_op_create_options_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z50e5rt_precompiled_compute_op_create_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z50e5rt_precompiled_compute_op_create_options_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50e5rt_precompiled_compute_op_create_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F678CC()
{
  return &unk_1E2DCB8A8;
}

void sub_190F678DC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F678F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB8C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F67928(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB8C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F67948(uint64_t a1)
{
  uint64_t *v1;
  const void *v2;
  uint64_t v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  std::string __dst;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *v1;
      v4 = strlen(*(const char **)(a1 + 16));
      if (v4 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v5 = v4;
      if (v4 >= 0x17)
      {
        v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v7 = v4 | 7;
        v8 = v7 + 1;
        p_dst = (std::string *)operator new(v7 + 1);
        __dst.__r_.__value_.__l.__size_ = v5;
        __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
        p_dst = &__dst;
        if (!v4)
          goto LABEL_11;
      }
      memcpy(p_dst, v2, v5);
LABEL_11:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      E5RT::PrecompiledComputeOpCreateOptions::SetOperationName(v3, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      return 0;
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A6FF90;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: op_name is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A6F7A0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return 1;
}

void sub_190F67B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190F67B80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z61e5rt_precompiled_compute_op_create_options_set_operation_nameE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z61e5rt_precompiled_compute_op_create_options_set_operation_nameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z61e5rt_precompiled_compute_op_create_options_set_operation_nameE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z61e5rt_precompiled_compute_op_create_options_set_operation_nameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F67BEC()
{
  return &unk_1E2DCB928;
}

void sub_190F67BFC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F67C10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB948;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F67C48(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB948;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F67C68(uint64_t a1)
{
  E5RT::PrecompiledComputeOpCreateOptions **v1;
  uint64_t OperationName;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      OperationName = E5RT::PrecompiledComputeOpCreateOptions::GetOperationName(*v1);
      result = 0;
      if (*(char *)(OperationName + 23) < 0)
        OperationName = *(_QWORD *)OperationName;
      **(_QWORD **)(a1 + 16) = OperationName;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FF90;
      strcpy((char *)v7, "Invalid Function Argument: op_name is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F67DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F67E34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z61e5rt_precompiled_compute_op_create_options_get_operation_nameE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z61e5rt_precompiled_compute_op_create_options_get_operation_nameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z61e5rt_precompiled_compute_op_create_options_get_operation_nameE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z61e5rt_precompiled_compute_op_create_options_get_operation_nameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F67EA0()
{
  return &unk_1E2DCB9A8;
}

void sub_190F67EB0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F67EC4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB9C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F67EFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB9C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F67F1C(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetAllocateIntermediateBuffers(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F67FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F68030(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z76e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffersE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z76e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffersE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z76e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffersE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z76e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffersE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6809C()
{
  return &unk_1E2DCBA28;
}

void sub_190F680AC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F680C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBA48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F680F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBA48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F68118(uint64_t a1)
{
  E5RT::PrecompiledComputeOpCreateOptions **v1;
  char IntermediateBuffers;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      IntermediateBuffers = E5RT::PrecompiledComputeOpCreateOptions::GetAllocateIntermediateBuffers(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = IntermediateBuffers;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A71380;
      strcpy((char *)v7, "Invalid Function Argument: allocate is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F68294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F682D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z76e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffersE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z76e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffersE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z76e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffersE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z76e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffersE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F68340()
{
  return &unk_1E2DCBAA8;
}

void sub_190F68350()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F68364(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBAC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F6839C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBAC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F683BC(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetLazyPrepareOpForEncode(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F68494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F684D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z73e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encodeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z73e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encodeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6853C()
{
  return &unk_1E2DCBB28;
}

void sub_190F6854C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F68560(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBB48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F68598(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBB48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F685B8(uint64_t a1)
{
  E5RT::PrecompiledComputeOpCreateOptions **v1;
  char LazyPrepareOpForEncode;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      LazyPrepareOpForEncode = E5RT::PrecompiledComputeOpCreateOptions::GetLazyPrepareOpForEncode(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = LazyPrepareOpForEncode;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: lazy is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F68734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F68774(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z73e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encodeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z73e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encodeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F687E0()
{
  return &unk_1E2DCBBA8;
}

void sub_190F687F0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F68804(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBBC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F6883C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBBC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F6885C(uint64_t a1)
{
  E5RT::PrecompiledComputeOpCreateOptions **v1;
  _QWORD *v3;
  uint64_t OverrideComputeGPUDevice;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  void *exception;
  _BYTE v9[8];
  _BYTE __p[24];
  _BYTE v11[24];

  v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD **)(a1 + 16);
    if (v3)
    {
      if (*v3)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v11[23] = 10;
        strcpy(v11, "operator()");
        *(_QWORD *)__p = operator new(0x28uLL);
        *(_OWORD *)&__p[8] = xmmword_191A7A8C0;
        strcpy(*(char **)__p, "*override_gpu_device is not NULL.");
        E5RT::Status::Status(v9, 1, __p);
        E5RT::E5RTError::E5RTError(exception, v11, v9);
      }
      OverrideComputeGPUDevice = E5RT::PrecompiledComputeOpCreateOptions::TryGetOverrideComputeGPUDevice(*v1);
      if (OverrideComputeGPUDevice)
      {
        v5 = OverrideComputeGPUDevice;
        v6 = (_QWORD *)operator new();
        e5rt_compute_gpu_device::e5rt_compute_gpu_device(v6, v5);
        result = 0;
        **(_QWORD **)(a1 + 16) = v6;
      }
      else
      {
        return 2;
      }
    }
    else
    {
      *(_QWORD *)v11 = operator new(0x38uLL);
      *(_OWORD *)&v11[8] = xmmword_191A6F7E0;
      strcpy(*(char **)v11, "Invalid Function Argument: override_gpu_device is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v11, (uint64_t *)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if ((v11[23] & 0x80000000) != 0)
        operator delete(*(void **)v11);
      return 1;
    }
  }
  else
  {
    *(_QWORD *)v11 = operator new(0x30uLL);
    *(_OWORD *)&v11[8] = xmmword_191A6F7A0;
    strcpy(*(char **)v11, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v11, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v11[23] & 0x80000000) != 0)
      operator delete(*(void **)v11);
    return 1;
  }
  return result;
}

void sub_190F68ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F68B90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z77e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_deviceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z77e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_deviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z77e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_deviceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z77e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_deviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F68BFC()
{
  return &unk_1E2DCBC28;
}

void sub_190F68C0C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F68C20(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F68C58(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F68C78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  void *__p[2];
  char v5;
  void *v6;
  __int128 v7;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *(uint64_t **)(a1 + 16);
    if (v2)
    {
      E5RT::PrecompiledComputeOpCreateOptions::SetOverrideComputeGPUDevice(*v1, *v2);
      return 0;
    }
    else
    {
      v6 = operator new(0x38uLL);
      v7 = xmmword_191A6F7E0;
      strcpy((char *)v6, "Invalid Function Argument: override_gpu_device is NULL.");
      v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
      if (v5 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v7) < 0)
        operator delete(v6);
      return 1;
    }
  }
  else
  {
    v6 = operator new(0x30uLL);
    v7 = xmmword_191A6F7A0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6);
    return 1;
  }
}

void sub_190F68DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F68E30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z74e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_deviceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z74e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_deviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z74e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_deviceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z74e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_deviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F68E9C()
{
  return &unk_1E2DCBCA8;
}

void sub_190F68EAC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F68EC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBCC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F68EF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBCC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F68F18(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetIOSurfaceMemoryPoolId(*v1, *(_QWORD *)(a1 + 16));
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F68FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F69024(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_idE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z71e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_idE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_idE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_idE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F69090()
{
  return &unk_1E2DCBD28;
}

void sub_190F690A0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F690B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBD48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F690EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBD48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F6910C(uint64_t a1)
{
  E5RT::PrecompiledComputeOpCreateOptions **v1;
  uint64_t IOSurfaceMemoryPoolId;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      IOSurfaceMemoryPoolId = E5RT::PrecompiledComputeOpCreateOptions::GetIOSurfaceMemoryPoolId(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = IOSurfaceMemoryPoolId;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FF90;
      strcpy((char *)v7, "Invalid Function Argument: pool_id is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F69288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F692C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_idE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z71e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_idE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_idE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_idE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F69334()
{
  return &unk_1E2DCBDA8;
}

void sub_190F69344()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F69358(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBDC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F69390(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBDC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F693B0(uint64_t a1)
{
  const __CFDictionary *v2;
  void **v3;
  void *v4;
  void **v6;
  void *__p[4];
  int v8;
  uint64_t v9[2];
  char v10;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const __CFDictionary **)(a1 + 16);
    if (v2)
    {
      memset(__p, 0, sizeof(__p));
      v8 = 1065353216;
      CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)sub_190F69694, __p);
      E5RT::PrecompiledComputeOpCreateOptions::SetDynamicCallables(**(_QWORD **)(a1 + 8), (uint64_t)__p);
      v3 = (void **)__p[2];
      if (!__p[2])
      {
LABEL_4:
        v4 = __p[0];
        __p[0] = 0;
        if (v4)
          operator delete(v4);
        return 0;
      }
      while (1)
      {
        v6 = (void **)*v3;
        if (*((char *)v3 + 63) < 0)
        {
          operator delete(v3[5]);
          if (*((char *)v3 + 39) < 0)
LABEL_12:
            operator delete(v3[2]);
        }
        else if (*((char *)v3 + 39) < 0)
        {
          goto LABEL_12;
        }
        operator delete(v3);
        v3 = v6;
        if (!v6)
          goto LABEL_4;
      }
    }
    __p[0] = operator new(0x38uLL);
    *(_OWORD *)&__p[1] = xmmword_191A6FFA0;
    strcpy((char *)__p[0], "Invalid Function Argument: dynamic_callables is NULL.");
    v10 = 10;
    strcpy((char *)v9, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, v9);
    if (v10 < 0)
      operator delete((void *)v9[0]);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 1;
  }
  else
  {
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_191A6F7A0;
    strcpy((char *)__p[0], "Invalid Function Argument: handle is NULL.");
    v10 = 10;
    strcpy((char *)v9, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, v9);
    if (v10 < 0)
      operator delete((void *)v9[0]);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 1;
  }
}

void sub_190F695AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F6961C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z64e5rt_precompiled_compute_op_create_options_set_dynamic_callablesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z64e5rt_precompiled_compute_op_create_options_set_dynamic_callablesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z64e5rt_precompiled_compute_op_create_options_set_dynamic_callablesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z64e5rt_precompiled_compute_op_create_options_set_dynamic_callablesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F69688()
{
  return &unk_1E2DCBE28;
}

void sub_190F69694(const __CFString *a1, CFURLRef anURL, uint64_t a3)
{
  const __CFString *v5;
  CFStringEncoding SystemEncoding;
  char *v7;
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  CFStringEncoding v13;
  char *v14;
  size_t v15;
  std::string::size_type v16;
  void *p_str;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  std::string __str;
  void *__dst[2];
  unint64_t v23;
  void *v24;
  void **v25;

  v5 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  v24 = 0;
  SystemEncoding = CFStringGetSystemEncoding();
  v7 = sub_190F698D0(a1, SystemEncoding, (char **)&v24);
  v8 = strlen(v7);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    v23 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v23) = v8;
  v10 = __dst;
  if (v8)
LABEL_8:
    memmove(v10, v7, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v10) = 0;
  free(v24);
  v24 = 0;
  v13 = CFStringGetSystemEncoding();
  v14 = sub_190F698D0(v5, v13, (char **)&v24);
  v15 = strlen(v14);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    p_str = operator new(v18 + 1);
    __str.__r_.__value_.__l.__size_ = v16;
    __str.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
    goto LABEL_16;
  }
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v15;
  p_str = &__str;
  if (v15)
LABEL_16:
    memmove(p_str, v14, v16);
  *((_BYTE *)p_str + v16) = 0;
  free(v24);
  v25 = __dst;
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&v25);
  std::string::operator=((std::string *)(v20 + 5), &__str);
  CFRelease(v5);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23) < 0)
    goto LABEL_21;
}

void sub_190F69884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

char *sub_190F698D0(CFStringRef theString, CFStringEncoding encoding, char **a3)
{
  const char *CStringPtr;
  char *v7;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v10;

  if (a3)
    *a3 = 0;
  if (theString)
  {
    CStringPtr = CFStringGetCStringPtr(theString, encoding);
    v7 = (char *)CStringPtr;
    if (!a3 || CStringPtr)
      return v7;
    Length = CFStringGetLength(theString);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length + 1, encoding);
    if (MaximumSizeForEncoding != -1)
    {
      v10 = MaximumSizeForEncoding;
      v7 = (char *)malloc_type_malloc(MaximumSizeForEncoding, 0x4D39200DuLL);
      if (!v7)
        return v7;
      if (CFStringGetCString(theString, v7, v10, encoding))
      {
        *a3 = v7;
        return v7;
      }
      free(v7);
    }
  }
  return 0;
}

void sub_190F699A4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F699B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBE48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F699F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBE48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F69A10(uint64_t a1)
{
  E5RT::PrecompiledComputeOpCreateOptions **v1;
  uint64_t DynamicCallables;
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  uint64_t *i;
  uint64_t result;
  const __CFString *v8;
  CFURLRef v9;
  const char *v10;
  const char *v11;
  CFStringRef v12;
  void *__p[2];
  char v14;
  void *v15;
  __int128 v16;

  v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      DynamicCallables = E5RT::PrecompiledComputeOpCreateOptions::GetDynamicCallables(*v1);
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      for (i = *(uint64_t **)(DynamicCallables + 16); i; i = (uint64_t *)*i)
      {
        v10 = (const char *)(i + 2);
        if (*((char *)i + 39) < 0)
          v10 = *(const char **)v10;
        v11 = (const char *)(i + 5);
        v12 = CFStringCreateWithCString(v4, v10, 0x8000100u);
        if (*((char *)i + 63) < 0)
          v11 = *(const char **)v11;
        v8 = CFStringCreateWithCString(v4, v11, 0x8000100u);
        v9 = CFURLCreateWithFileSystemPath(v4, v8, kCFURLPOSIXPathStyle, 0);
        CFDictionaryAddValue(Mutable, v12, v9);
        CFRelease(v12);
        CFRelease(v8);
        CFRelease(v9);
      }
      result = 0;
      **(_QWORD **)(a1 + 16) = Mutable;
      return result;
    }
    v15 = operator new(0x38uLL);
    v16 = xmmword_191A6FFA0;
    strcpy((char *)v15, "Invalid Function Argument: dynamic_callables is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  }
  else
  {
    v15 = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)v15, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15);
  return 1;
}

void sub_190F69C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_190F69C7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z65e5rt_precompiled_compute_op_create_options_copy_dynamic_callablesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z65e5rt_precompiled_compute_op_create_options_copy_dynamic_callablesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z65e5rt_precompiled_compute_op_create_options_copy_dynamic_callablesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z65e5rt_precompiled_compute_op_create_options_copy_dynamic_callablesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F69CE8()
{
  return &unk_1E2DCBEA8;
}

void sub_190F69CF8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F69D0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBEC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F69D44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBEC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F69D64(uint64_t a1)
{
  const __CFDictionary *v2;
  void **v3;
  void *v4;
  void **v6;
  void *__p[4];
  int v8;
  uint64_t v9[2];
  char v10;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const __CFDictionary **)(a1 + 16);
    if (v2)
    {
      memset(__p, 0, sizeof(__p));
      v8 = 1065353216;
      CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)sub_190F69694, __p);
      E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths(**(_QWORD **)(a1 + 8), (uint64_t)__p);
      v3 = (void **)__p[2];
      if (!__p[2])
      {
LABEL_4:
        v4 = __p[0];
        __p[0] = 0;
        if (v4)
          operator delete(v4);
        return 0;
      }
      while (1)
      {
        v6 = (void **)*v3;
        if (*((char *)v3 + 63) < 0)
        {
          operator delete(v3[5]);
          if (*((char *)v3 + 39) < 0)
LABEL_12:
            operator delete(v3[2]);
        }
        else if (*((char *)v3 + 39) < 0)
        {
          goto LABEL_12;
        }
        operator delete(v3);
        v3 = v6;
        if (!v6)
          goto LABEL_4;
      }
    }
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_191A6FF90;
    strcpy((char *)__p[0], "Invalid Function Argument: weights is NULL.");
    v10 = 10;
    strcpy((char *)v9, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, v9);
    if (v10 < 0)
      operator delete((void *)v9[0]);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 1;
  }
  else
  {
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_191A6F7A0;
    strcpy((char *)__p[0], "Invalid Function Argument: handle is NULL.");
    v10 = 10;
    strcpy((char *)v9, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, v9);
    if (v10 < 0)
      operator delete((void *)v9[0]);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 1;
  }
}

void sub_190F69F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F69FC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_pathsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z71e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_pathsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_pathsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_pathsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6A034()
{
  return &unk_1E2DCBF28;
}

void sub_190F6A044()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F6A058(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBF48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F6A090(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBF48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F6A0B0(uint64_t a1)
{
  E5RT::PrecompiledComputeOpCreateOptions **v1;
  uint64_t MutableMILWeightPaths;
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  uint64_t *i;
  uint64_t result;
  const __CFString *v8;
  CFURLRef v9;
  const char *v10;
  const char *v11;
  CFStringRef v12;
  void *__p[2];
  char v14;
  void *v15;
  __int128 v16;

  v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      MutableMILWeightPaths = E5RT::PrecompiledComputeOpCreateOptions::GetMutableMILWeightPaths(*v1);
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      for (i = *(uint64_t **)(MutableMILWeightPaths + 16); i; i = (uint64_t *)*i)
      {
        v10 = (const char *)(i + 2);
        if (*((char *)i + 39) < 0)
          v10 = *(const char **)v10;
        v11 = (const char *)(i + 5);
        v12 = CFStringCreateWithCString(v4, v10, 0x8000100u);
        if (*((char *)i + 63) < 0)
          v11 = *(const char **)v11;
        v8 = CFStringCreateWithCString(v4, v11, 0x8000100u);
        v9 = CFURLCreateWithFileSystemPath(v4, v8, kCFURLPOSIXPathStyle, 0);
        CFDictionaryAddValue(Mutable, v12, v9);
        CFRelease(v12);
        CFRelease(v8);
        CFRelease(v9);
      }
      result = 0;
      **(_QWORD **)(a1 + 16) = Mutable;
      return result;
    }
    v15 = operator new(0x30uLL);
    v16 = xmmword_191A6FF90;
    strcpy((char *)v15, "Invalid Function Argument: weights is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  }
  else
  {
    v15 = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)v15, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15);
  return 1;
}

void sub_190F6A2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_190F6A314(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z72e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_pathsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z72e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_pathsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z72e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_pathsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z72e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_pathsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6A380()
{
  return &unk_1E2DCBFA8;
}

void sub_190F6A390()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F6A3A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCBFC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F6A3DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCBFC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F6A3FC(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F6A4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F6A510(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z104e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z104e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mps"
                                "graph_type_inferenceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z104e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z104e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6A57C()
{
  return &unk_1E2DCC028;
}

void sub_190F6A58C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F6A5A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F6A5D8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F6A5F8(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableGPUQuantOps(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F6A6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F6A70C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z80e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_opsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z80e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_opsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z80e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_opsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z80e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_opsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6A778()
{
  return &unk_1E2DCC0A8;
}

void sub_190F6A788()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F6A79C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC0C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F6A7D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC0C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F6A7F4(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableMPSGraphParallelEncode(*v1, *(unsigned __int8 *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F6A8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F6A908(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z91e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encodeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z91e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z91e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encodeE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z91e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6A974()
{
  return &unk_1E2DCC128;
}

void sub_190F6A984()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F6A998(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC148;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F6A9D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC148;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F6A9F0(uint64_t a1)
{
  E5RT::PrecompiledComputeOpCreateOptions **v1;
  BOOL ExperimentalEnableMPSGraphParallelEncode;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ExperimentalEnableMPSGraphParallelEncode = E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalEnableMPSGraphParallelEncode(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ExperimentalEnableMPSGraphParallelEncode;
    }
    else
    {
      v7 = operator new(0x40uLL);
      v8 = xmmword_191A6F7F0;
      strcpy((char *)v7, "Invalid Function Argument: enable_parallel_encode is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F6AB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F6ABB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z91e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encodeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z91e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z91e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encodeE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z91e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6AC20()
{
  return &unk_1E2DCC1A8;
}

void sub_190F6AC30()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F6AC44(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC1C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F6AC7C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC1C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F6AC9C(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalMPSGraphMaximumNumberOfEncodingThreads(*v1, *(_QWORD *)(a1 + 16));
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F6AD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F6ADA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z103e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_of_encoding_threadsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z103e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_"
                                "of_encoding_threadsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z103e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_of_encoding_threadsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z103e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_of_encoding_threadsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F6AE14()
{
  return &unk_1E2DCC228;
}

void sub_190F6AE20()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 40));
}

void OUTLINED_FUNCTION_50()
{
  void *v0;

  operator delete(v0);
}

void OUTLINED_FUNCTION_5()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 16));
}

void Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(void **a1)
{
  void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    operator delete(v2);
}

void sub_190F6AE68(uint64_t a1)
{
  uint64_t v1;
  int v3;

  do
  {
    sub_190F6AE38();
    if (v3 < 0)
      sub_190F6AE20();
    if (*(char *)(a1 + 39) < 0)
      OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_50();
    a1 = v1;
  }
  while (v1);
  OUTLINED_FUNCTION_2();
}

void E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel::~InterleavedTransposeGatherNdKernel(void **this)
{
  *this = off_1E2D5B330;
  if ((*((char *)this + 143) & 0x80000000) == 0)
  {
    if ((*((char *)this + 119) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(this[12]);
    if ((*((char *)this + 95) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_8:
    operator delete(this[9]);
    E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)this);
    return;
  }
  operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    goto LABEL_7;
LABEL_3:
  if (*((char *)this + 95) < 0)
    goto LABEL_8;
LABEL_4:
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)this);
}

{
  *this = off_1E2D5B330;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0)
      {
LABEL_4:
        E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)this);
        JUMPOUT(0x19401CD90);
      }
LABEL_7:
      operator delete(this[9]);
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0)
    goto LABEL_4;
  goto LABEL_7;
}

uint64_t E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel::InterleavedTransposeGatherNdKernel(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, int a5, char a6)
{
  std::string *v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;

  E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)a1);
  v12->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E2D5B330;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12 + 3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    v12[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v12[3].__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v14 = *a3;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 96) = v14;
  }
  v15 = (std::string *)(a1 + 120);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v16 = *a4;
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  *(_DWORD *)(a1 + 144) = a5;
  *(_BYTE *)(a1 + 148) = a6;
  return a1;
}

void sub_190F6B088(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[119] < 0)
  {
    operator delete(*v3);
    if ((v1[95] & 0x80000000) == 0)
    {
LABEL_3:
      E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((v1[95] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)v1);
  _Unwind_Resume(a1);
}

void sub_190F6B0E4(_Unwind_Exception *a1)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel *v1;

  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel::Launch(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  const void **v6;
  E5RT::BufferObject *v7;
  E5RT::BufferObject *v8;
  E5RT::TensorDescriptor *TensorDescriptor;
  E5RT::TensorDescriptor *v10;
  unint64_t Rank;
  E5RT::TensorDescriptor *v12;
  uint64_t TensorShape;
  uint64_t v14;
  const void *v15;
  size_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  int *DataSpan;
  E5RT::TensorDescriptor *v44;
  _BYTE *v45;
  unint64_t i;
  int v47;
  void *exception;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t j;
  uint64_t v57;
  _WORD *v58;
  uint64_t v59;
  signed int v60;
  int v61;
  uint64_t v62;
  uint64_t n;
  int v64;
  int v65;
  uint64_t ii;
  signed int v67;
  _BYTE *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t jj;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _WORD *v84;
  uint64_t v85;
  uint64_t m;
  int v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t k;
  int v102;
  _WORD *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  int32x4_t v108;
  int32x4_t *v109;
  uint64_t v110;
  int v111;
  int *v112;
  int v113;
  uint64_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t *v117;
  unint64_t v118;
  int32x4_t *v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  _BYTE *v124;
  uint64_t v125;
  int v126;
  signed int v127;
  uint64_t v128;
  int *v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t kk;
  int v135;
  _DWORD *v136;
  uint64_t v137;
  void *v138;
  void *v139;
  void *v140;
  uint64_t v141;
  E5RT::BufferObject *Buffer;
  E5RT::BufferObject *TensorStrides;
  int NumComponents;
  void *__p;
  void *v146;
  _QWORD v147[3];
  char v148[8];
  char v149[32];

  v6 = (const void **)(a1 + 96);
  E5RT::Ops::E5MinimalCpu::BaseKernel::CheckName(a1, a1 + 96, a2);
  E5RT::Ops::E5MinimalCpu::BaseKernel::CheckName(a1, a1 + 72, a2);
  E5RT::Ops::E5MinimalCpu::BaseKernel::CheckName(a1, a1 + 120, a3);
  Buffer = (E5RT::BufferObject *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(a1, v6, a2);
  v7 = (E5RT::BufferObject *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(a1, (const void **)(a1 + 72), a2);
  v8 = (E5RT::BufferObject *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(a1, (const void **)(a1 + 120), a3);
  TensorDescriptor = (E5RT::TensorDescriptor *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetTensorDescriptor(a1, v6, a2);
  v10 = (E5RT::TensorDescriptor *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetTensorDescriptor(a1, (const void **)(a1 + 72), a2);
  Rank = E5RT::TensorDescriptor::GetRank(v10);
  v12 = (E5RT::TensorDescriptor *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetTensorDescriptor(a1, (const void **)(a1 + 120), a3);
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v12);
  v146 = 0;
  v15 = *(const void **)TensorShape;
  v14 = *(_QWORD *)(TensorShape + 8);
  v16 = v14 - *(_QWORD *)TensorShape;
  if (v14 == *(_QWORD *)TensorShape)
  {
    v17 = 0;
    __p = 0;
    if (Rank)
      goto LABEL_4;
LABEL_9:
    v18 = 0;
    v19 = -8;
    v20 = MEMORY[0xFFFFFFFFFFFFFFF8];
    v21 = -16;
    goto LABEL_10;
  }
  if ((v16 & 0x8000000000000000) != 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v17 = operator new(v14 - *(_QWORD *)TensorShape);
  v146 = v17;
  memcpy(v17, v15, v16);
  __p = 0;
  if (!Rank)
    goto LABEL_9;
LABEL_4:
  if ((Rank & 0x8000000000000000) != 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v18 = operator new(8 * Rank);
  __p = v18;
  memcpy(v18, v17, 8 * Rank);
  v19 = (uint64_t)&v18[Rank - 1];
  v20 = *(_QWORD *)v19;
  if (v18 == (_QWORD *)v19)
  {
    v22 = 1;
    goto LABEL_16;
  }
  v21 = v19 - (_QWORD)v18 - 8;
  if (v21 < 8)
  {
    v22 = 1;
    v23 = v18;
    do
    {
LABEL_13:
      v29 = *v23++;
      v22 *= v29;
    }
    while (v23 != (uint64_t *)v19);
    goto LABEL_16;
  }
LABEL_10:
  v24 = (v21 >> 3) + 1;
  v23 = &v18[v24 & 0x3FFFFFFFFFFFFFFELL];
  v25 = v18 + 1;
  v26 = 1;
  v27 = v24 & 0x3FFFFFFFFFFFFFFELL;
  v28 = 1;
  do
  {
    v26 *= *(v25 - 1);
    v28 *= *v25;
    v25 += 2;
    v27 -= 2;
  }
  while (v27);
  v22 = v28 * v26;
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_13;
LABEL_16:
  v30 = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(TensorDescriptor);
  v31 = (uint64_t *)v30[1];
  v32 = (uint64_t *)(*v30 + 8 * v20);
  if (v32 == v31)
  {
    v35 = 1;
    goto LABEL_24;
  }
  v33 = 8 * v20 + *v30;
  v34 = (unint64_t)v31 - v33 - 8;
  if (v34 < 8)
  {
    v35 = 1;
    do
    {
LABEL_23:
      v41 = *v32++;
      v35 *= v41;
    }
    while (v32 != v31);
    goto LABEL_24;
  }
  v36 = (v34 >> 3) + 1;
  v32 += v36 & 0x3FFFFFFFFFFFFFFELL;
  v37 = (_QWORD *)(v33 + 8);
  v38 = 1;
  v39 = v36 & 0x3FFFFFFFFFFFFFFELL;
  v40 = 1;
  do
  {
    v38 *= *(v37 - 1);
    v40 *= *v37;
    v37 += 2;
    v39 -= 2;
  }
  while (v39);
  v35 = v40 * v38;
  if (v36 != (v36 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_23;
LABEL_24:
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(TensorDescriptor);
  NumComponents = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
  DataSpan = (int *)E5RT::BufferObject::GetDataSpan(v7);
  v141 = E5RT::BufferObject::GetDataSpan(Buffer);
  v44 = TensorDescriptor;
  v45 = (_BYTE *)E5RT::BufferObject::GetDataSpan(v8);
  for (i = 0; i < E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)v10); ++i)
  {
    v47 = DataSpan[i];
    if (v47 >= *(_DWORD *)(a1 + 144))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v149, "Launch");
      std::string::basic_string[abi:ne180100]<0>(v147, "Gather op index out of bound.");
      E5RT::Status::Status(v148, 4, v147);
      E5RT::E5RTError::E5RTError(exception, v149, v148);
    }
  }
  TensorStrides = (E5RT::BufferObject *)E5RT::TensorDescriptor::GetTensorStrides(v44);
  if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)TensorDataTypeRef) == 4)
  {
    if (E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) == 2)
    {
      if (v22)
      {
        v49 = *(_DWORD *)(a1 + 144);
        v50 = *(unsigned __int8 *)(a1 + 148);
        v51 = *(_QWORD *)(*((_QWORD *)TensorStrides + 1) - 8) >> 1;
        if (v20 < 2)
        {
          if (v35)
          {
            v81 = 0;
            v82 = 2 * v51;
            do
            {
              v83 = sub_190F6C028((uint64_t)DataSpan, 0, v49, v50 != 0);
              v84 = (_WORD *)(v141
                            + 2 * ((v83 / NumComponents * **(_DWORD **)TensorStrides) >> 1)
                            + 2 * (v83 % NumComponents));
              v85 = v35;
              do
              {
                *(_WORD *)v45 = *v84;
                v45 += 2;
                v84 = (_WORD *)((char *)v84 + v82);
                --v85;
              }
              while (v85);
              DataSpan += v20;
              ++v81;
            }
            while (v81 != v22);
          }
          else
          {
            do
            {
              sub_190F6C028((uint64_t)DataSpan, 0, v49, v50 != 0);
              DataSpan += v20;
              --v22;
            }
            while (v22);
          }
        }
        else if (v50)
        {
          v52 = 0;
          v53 = 2 * v51;
          do
          {
            v54 = sub_190F6C028((uint64_t)DataSpan, 0, v49, 1);
            v55 = (v54 / NumComponents * **(_DWORD **)TensorStrides) >> 1;
            for (j = 1; j != v20; ++j)
            {
              v57 = DataSpan[j];
              if ((int)v57 >= v49 || (v57 & 0x80000000) != 0)
              {
                v105 = __cxa_allocate_exception(0x18uLL);
                v149[23] = 16;
                strcpy(v149, "GetAndCheckIndex");
                HIBYTE(v147[2]) = 19;
                strcpy((char *)v147, "index out of bound.");
                E5RT::Status::Status(v148, 4, v147);
                E5RT::E5RTError::E5RTError(v105, v149, v148);
              }
              v55 += (unint64_t)(*(_QWORD *)(*(_QWORD *)TensorStrides + 8 * j) * v57) >> 1;
            }
            if (v35)
            {
              v58 = (_WORD *)(v141 + 2 * v55 + 2 * (v54 % NumComponents));
              v59 = v35;
              do
              {
                *(_WORD *)v45 = *v58;
                v45 += 2;
                v58 = (_WORD *)((char *)v58 + v53);
                --v59;
              }
              while (v59);
            }
            DataSpan += v20;
            ++v52;
          }
          while (v52 != v22);
        }
        else
        {
          v95 = 0;
          v96 = *(int **)TensorStrides;
          v97 = **(_DWORD **)TensorStrides;
          v98 = 2 * v51;
          do
          {
            v99 = *DataSpan;
            if (*DataSpan >= v49 || v99 < 0)
            {
              if (v99 >= 0)
                v99 = v49;
              else
                v99 = 0;
            }
            v100 = (v99 / NumComponents * v97) >> 1;
            for (k = 1; k != v20; ++k)
            {
              v102 = DataSpan[k];
              if (v102 >= v49 || v102 < 0)
              {
                if (v102 >= 0)
                  v102 = v49;
                else
                  v102 = 0;
              }
              v100 += (unint64_t)(*(_QWORD *)&v96[2 * k] * v102) >> 1;
            }
            if (v35)
            {
              v103 = (_WORD *)(v141 + 2 * v100 + 2 * (v99 % NumComponents));
              v104 = v35;
              do
              {
                *(_WORD *)v45 = *v103;
                v45 += 2;
                v103 = (_WORD *)((char *)v103 + v98);
                --v104;
              }
              while (v104);
            }
            DataSpan += v20;
            ++v95;
          }
          while (v95 != v22);
        }
      }
      goto LABEL_159;
    }
LABEL_166:
    v140 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v149, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v147, "Not implemented");
    E5RT::Status::Status(v148, 2, v147);
    E5RT::E5RTError::E5RTError(v140, v149, v148);
  }
  if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)TensorDataTypeRef) != 1)
    goto LABEL_166;
  if (E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) == 1)
  {
    if (v22)
    {
      v60 = *(_DWORD *)(a1 + 144);
      v61 = *(unsigned __int8 *)(a1 + 148);
      v62 = *(_QWORD *)(*((_QWORD *)TensorStrides + 1) - 8);
      if (v20 < 2)
      {
        if (v35)
        {
          for (m = 0; m != v22; ++m)
          {
            v87 = sub_190F6C028((uint64_t)DataSpan, 0, v60, v61 != 0);
            v88 = (_BYTE *)(v141 + v87 / NumComponents * **(_DWORD **)TensorStrides + v87 % NumComponents);
            v89 = v35;
            do
            {
              *v45++ = *v88;
              v88 += v62;
              --v89;
            }
            while (v89);
            DataSpan += v20;
          }
        }
        else
        {
          do
          {
            sub_190F6C028((uint64_t)DataSpan, 0, v60, v61 != 0);
            DataSpan += v20;
            --v22;
          }
          while (v22);
        }
      }
      else if (v61)
      {
        for (n = 0; n != v22; ++n)
        {
          v64 = sub_190F6C028((uint64_t)DataSpan, 0, v60, 1);
          v65 = v64 / NumComponents * **(_DWORD **)TensorStrides;
          for (ii = 1; ii != v20; ++ii)
          {
            v67 = DataSpan[ii];
            if (v67 >= v60 || v67 < 0)
            {
              v138 = __cxa_allocate_exception(0x18uLL);
              v149[23] = 16;
              strcpy(v149, "GetAndCheckIndex");
              HIBYTE(v147[2]) = 19;
              strcpy((char *)v147, "index out of bound.");
              E5RT::Status::Status(v148, 4, v147);
              E5RT::E5RTError::E5RTError(v138, v149, v148);
            }
            v65 += v67 * *(_QWORD *)(*(_QWORD *)TensorStrides + 8 * ii);
          }
          if (v35)
          {
            v68 = (_BYTE *)(v141 + v65 + v64 % NumComponents);
            v69 = v35;
            do
            {
              *v45++ = *v68;
              v68 += v62;
              --v69;
            }
            while (v69);
          }
          DataSpan += v20;
        }
      }
      else
      {
        v106 = 0;
        v107 = (v20 - 1) & 0xFFFFFFFFFFFFFFF8;
        v108 = vdupq_n_s32(v60);
        v109 = (int32x4_t *)(DataSpan + 5);
        v110 = 4 * v20;
        do
        {
          v111 = *DataSpan;
          if (*DataSpan >= v60 || v111 < 0)
          {
            if (v111 >= 0)
              v111 = v60;
            else
              v111 = 0;
          }
          v112 = *(int **)TensorStrides;
          v113 = v111 / NumComponents * **(_DWORD **)TensorStrides;
          if (v20 < 9)
          {
            v114 = 1;
            goto LABEL_125;
          }
          v115 = 0uLL;
          v116 = (int32x4_t)(v111 / NumComponents * **(_DWORD **)TensorStrides);
          v117 = (int32x4_t *)(v112 + 10);
          v118 = (v20 - 1) & 0xFFFFFFFFFFFFFFF8;
          v119 = v109;
          do
          {
            v121 = v117[-2];
            v120 = v117[-1];
            v123 = *v117;
            v122 = v117[1];
            v117 += 4;
            v116 = vmlaq_s32(v116, (int32x4_t)vandq_s8((int8x16_t)vcgezq_s32(v119[-1]), (int8x16_t)vminq_s32(v119[-1], v108)), vuzp1q_s32(v121, v120));
            v115 = vmlaq_s32(v115, (int32x4_t)vandq_s8((int8x16_t)vcgezq_s32(*v119), (int8x16_t)vminq_s32(*v119, v108)), vuzp1q_s32(v123, v122));
            v119 += 2;
            v118 -= 8;
          }
          while (v118);
          v113 = vaddvq_s32(vaddq_s32(v115, v116));
          v114 = v107 | 1;
          if (v20 - 1 != v107)
          {
            do
            {
LABEL_125:
              while (1)
              {
                v126 = DataSpan[v114];
                if (v126 >= v60 || v126 < 0)
                  break;
                v113 += v126 * *(_QWORD *)&v112[2 * v114++];
                if (v20 == v114)
                  goto LABEL_121;
              }
              if (v126 >= 0)
                v127 = v60;
              else
                v127 = 0;
              v113 += v127 * *(_QWORD *)&v112[2 * v114++];
            }
            while (v20 != v114);
          }
LABEL_121:
          if (v35)
          {
            v124 = (_BYTE *)(v141 + v113 + v111 % NumComponents);
            v125 = v35;
            do
            {
              *v45++ = *v124;
              v124 += v62;
              --v125;
            }
            while (v125);
          }
          DataSpan = (int *)((char *)DataSpan + v110);
          ++v106;
          v109 = (int32x4_t *)((char *)v109 + v110);
        }
        while (v106 != v22);
      }
    }
  }
  else
  {
    if (E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) != 4)
      goto LABEL_166;
    if (v22)
    {
      v70 = *(_DWORD *)(a1 + 144);
      v71 = *(unsigned __int8 *)(a1 + 148);
      v72 = *(_QWORD *)(*((_QWORD *)TensorStrides + 1) - 8) >> 2;
      if (v20 < 2)
      {
        if (v35)
        {
          v90 = 0;
          v91 = 4 * v72;
          do
          {
            v92 = sub_190F6C028((uint64_t)DataSpan, 0, v70, v71 != 0);
            v93 = (_DWORD *)(v141
                           + 4 * ((v92 / NumComponents * **(_DWORD **)TensorStrides) >> 2)
                           + 4 * (v92 % NumComponents));
            v94 = v35;
            do
            {
              *(_DWORD *)v45 = *v93;
              v45 += 4;
              v93 = (_DWORD *)((char *)v93 + v91);
              --v94;
            }
            while (v94);
            DataSpan += v20;
            ++v90;
          }
          while (v90 != v22);
        }
        else
        {
          do
          {
            sub_190F6C028((uint64_t)DataSpan, 0, v70, v71 != 0);
            DataSpan += v20;
            --v22;
          }
          while (v22);
        }
      }
      else if (v71)
      {
        v73 = 0;
        v74 = 4 * v72;
        do
        {
          v75 = sub_190F6C028((uint64_t)DataSpan, 0, v70, 1);
          v76 = (v75 / NumComponents * **(_DWORD **)TensorStrides) >> 2;
          for (jj = 1; jj != v20; ++jj)
          {
            v78 = DataSpan[jj];
            if ((int)v78 >= v70 || (v78 & 0x80000000) != 0)
            {
              v139 = __cxa_allocate_exception(0x18uLL);
              v149[23] = 16;
              strcpy(v149, "GetAndCheckIndex");
              HIBYTE(v147[2]) = 19;
              strcpy((char *)v147, "index out of bound.");
              E5RT::Status::Status(v148, 4, v147);
              E5RT::E5RTError::E5RTError(v139, v149, v148);
            }
            v76 += (unint64_t)(*(_QWORD *)(*(_QWORD *)TensorStrides + 8 * jj) * v78) >> 2;
          }
          if (v35)
          {
            v79 = (_DWORD *)(v141 + 4 * v76 + 4 * (v75 % NumComponents));
            v80 = v35;
            do
            {
              *(_DWORD *)v45 = *v79;
              v45 += 4;
              v79 = (_DWORD *)((char *)v79 + v74);
              --v80;
            }
            while (v80);
          }
          DataSpan += v20;
          ++v73;
        }
        while (v73 != v22);
      }
      else
      {
        v128 = 0;
        v129 = *(int **)TensorStrides;
        v130 = **(_DWORD **)TensorStrides;
        v131 = 4 * v72;
        do
        {
          v132 = *DataSpan;
          if (*DataSpan >= v70 || v132 < 0)
          {
            if (v132 >= 0)
              v132 = v70;
            else
              v132 = 0;
          }
          v133 = (v132 / NumComponents * v130) >> 2;
          for (kk = 1; kk != v20; ++kk)
          {
            v135 = DataSpan[kk];
            if (v135 >= v70 || v135 < 0)
            {
              if (v135 >= 0)
                v135 = v70;
              else
                v135 = 0;
            }
            v133 += (unint64_t)(*(_QWORD *)&v129[2 * kk] * v135) >> 2;
          }
          if (v35)
          {
            v136 = (_DWORD *)(v141 + 4 * v133 + 4 * (v132 % NumComponents));
            v137 = v35;
            do
            {
              *(_DWORD *)v45 = *v136;
              v45 += 4;
              v136 = (_DWORD *)((char *)v136 + v131);
              --v137;
            }
            while (v137);
          }
          DataSpan += v20;
          ++v128;
        }
        while (v128 != v22);
      }
    }
  }
LABEL_159:
  if (__p)
    operator delete(__p);
  if (v146)
    operator delete(v146);
}

void sub_190F6BED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;

  E5RT::Status::~Status((E5RT::Status *)&a25);
  if (a24 < 0)
    operator delete(__p);
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v32 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v32)
  {
LABEL_6:
    if (a13)
      operator delete(a13);
    if (a16)
      operator delete(a16);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

uint64_t sub_190F6C028(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;
  void *exception;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[3];

  result = *(unsigned int *)(a1 + 4 * a2);
  if ((int)result >= a3 || (result & 0x80000000) != 0)
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "GetAndCheckIndex");
      std::string::basic_string[abi:ne180100]<0>(v6, "index out of bound.");
      E5RT::Status::Status(v7, 4, v6);
      E5RT::E5RTError::E5RTError(exception, v8, v7);
    }
    if ((int)result >= 0)
      return a3;
    else
      return 0;
  }
  return result;
}

void sub_190F6C0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::IOSurfaceSharedAsyncEvent::~IOSurfaceSharedAsyncEvent(void **this)
{
  *this = off_1E2D5B180;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);

  }
  else
  {

  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

{
  *this = off_1E2D5B180;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
  JUMPOUT(0x19401CD90);
}

_QWORD *E5RT::IOSurfaceSharedAsyncEvent::IOSurfaceSharedAsyncEvent(_QWORD *a1, __int128 *a2, void *a3)
{
  id v5;
  id v6;
  std::string *v7;
  __int128 v8;

  v5 = a3;
  E5RT::AsyncEventImpl::AsyncEventImpl(a1);
  *a1 = off_1E2D5B180;
  v6 = v5;
  a1[1] = v6;
  v7 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    a1[4] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[5] = 0;

  return a1;
}

void sub_190F6C29C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void sub_190F6C2BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void E5RT::AsyncEvent::CreateEvent<IOSurfaceSharedEvent * {__strong}>(__int128 *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = a2;
  v6 = (_QWORD *)operator new();
  E5RT::IOSurfaceSharedAsyncEvent::IOSurfaceSharedAsyncEvent(v6, a1, v5);
  v7 = (_QWORD *)operator new();
  v9 = v6;
  E5RT::AsyncEvent::AsyncEvent(v7, (uint64_t *)&v9);
  *a3 = v7;
  v8 = (uint64_t)v9;
  v9 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);

}

void sub_190F6C374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  MEMORY[0x19401CD90](v11, 0xA1C40BD48D6D6);

  _Unwind_Resume(a1);
}

void sub_190F6C3B4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  _Unwind_Resume(a1);
}

void sub_190F6C3D4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0x1093C4041A044FELL);

  _Unwind_Resume(a1);
}

void sub_190F6C3FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::GetEventName(E5RT::IOSurfaceSharedAsyncEvent *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::GetLastSignaledValue(id *this)
{
  return objc_msgSend(this[1], "signaledValue");
}

unint64_t E5RT::IOSurfaceSharedAsyncEvent::SetActiveFutureValue(id *this, unint64_t a2)
{
  unint64_t result;
  void *exception;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[3];

  result = objc_msgSend(this[1], "signaledValue");
  if (result > a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "SetActiveFutureValue");
    std::string::basic_string[abi:ne180100]<0>(v6, "Future value has been signaled.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  this[5] = (id)a2;
  return result;
}

void sub_190F6C4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::SyncWait(id *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void *v7;
  void *exception;
  _QWORD v9[3];
  _BYTE v10[8];
  _QWORD v11[3];

  if ((E5RT::IsIOSurfaceSharedEventAvailable((E5RT *)this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "SyncWait");
    std::string::basic_string[abi:ne180100]<0>(v9, "Shared events are not available.");
    E5RT::Status::Status(v10, 11, v9);
    E5RT::E5RTError::E5RTError(exception, v11, v10);
  }
  result = objc_msgSend(this[1], "waitUntilSignaledValue:timeoutMS:", a2, a3);
  if ((result & 1) == 0)
  {
    v7 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "SyncWait");
    std::string::basic_string[abi:ne180100]<0>(v9, "IOSurface shared event sync wait timed out.");
    E5RT::Status::Status(v10, 10, v9);
    E5RT::E5RTError::E5RTError(v7, v11, v10);
  }
  return result;
}

void sub_190F6C674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a17);
LABEL_6:
  if ((v23 & 1) != 0)
    __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void E5RT::IOSurfaceSharedAsyncEvent::AsyncNotify(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  E5RT *v8;
  void *v9;
  void *v10;
  E5RT *v11;
  void *v12;
  void *v13;
  void *exception;
  _QWORD v15[4];
  E5RT *v16;
  _QWORD v17[3];
  char v18[8];
  _QWORD v19[3];

  v7 = a3;
  v8 = a4;
  if ((E5RT::IsIOSurfaceSharedEventAvailable(v8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "AsyncNotify");
    std::string::basic_string[abi:ne180100]<0>(v17, "Shared events are not available.");
    E5RT::Status::Status(v18, 11, v17);
    E5RT::E5RTError::E5RTError(exception, v19, v18);
  }
  if (!v7)
  {
    v12 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "AsyncNotify");
    std::string::basic_string[abi:ne180100]<0>(v17, "Invalid listener queue.");
    E5RT::Status::Status(v18, 1, v17);
    E5RT::E5RTError::E5RTError(v12, v19, v18);
  }
  if (!v8)
  {
    v13 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "AsyncNotify");
    std::string::basic_string[abi:ne180100]<0>(v17, "Invalid notification task.");
    E5RT::Status::Status(v18, 1, v17);
    E5RT::E5RTError::E5RTError(v13, v19, v18);
  }
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEC0]), "initWithDispatchQueue:", v7);
  v10 = *(void **)(a1 + 8);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190F6CA4C;
  v15[3] = &unk_1E2DCC240;
  v11 = v8;
  v16 = v11;
  objc_msgSend(v10, "notifyListener:atValue:block:", v9, a2, v15);

}

void sub_190F6C950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  int v29;

  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v29 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

uint64_t sub_190F6CA4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::Signal(E5RT::IOSurfaceSharedAsyncEvent *this, unint64_t a2)
{
  void *exception;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  __int128 v15;
  std::string::size_type v16;
  _BYTE v17[8];
  _QWORD v18[3];

  if (objc_msgSend(*((id *)this + 1), "signaledValue") >= a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "Signal");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": Potential duplicate signaler. Value has already been signaled to ", (const void **)this + 2, &v13);
    std::to_string(&v12, a2);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v12;
    else
      v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v13, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v14, ".");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v16 = v10->__r_.__value_.__r.__words[2];
    v15 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v17, 2, &v15);
    E5RT::E5RTError::E5RTError(exception, v18, v17);
  }
  return objc_msgSend(*((id *)this + 1), "setSignaledValue:", a2);
}

void sub_190F6CB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  E5RT::Status::~Status((E5RT::Status *)(v35 - 64));
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if (*(char *)(v35 - 33) < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a15);
  if (*(char *)(v35 - 33) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v35 - 56));
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t E5RT::MILProgramUtils::BuildE5RTTensorComponentSize(int a1)
{
  int v1;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  v1 = a1 - 4;
  if ((a1 - 4) >= 0xD || ((0x1CE3u >> v1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "BuildE5RTTensorComponentSize");
    std::string::basic_string[abi:ne180100]<0>(v4, "IRDataType is not supported by E5RT");
    E5RT::Status::Status(v5, 6, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return qword_191A7BED0[v1];
}

void sub_190F6CD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::MILProgramUtils::CreateOperandDescriptorFromIRValueType(E5RT::MILProgramUtils *this@<X0>, const MIL::IRValueType *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::IRValueType *WrappedType;
  MIL::IRMemoryLayoutValueType *v5;
  MIL::IRStateValueType *v6;
  uint64_t v7;
  MIL::IRDimension ***v8;
  MIL::IRMemoryLayoutValueType *v9;
  MIL::IRTensorBufferValueType *v10;
  int DataType;
  int v12;
  int v13;
  uint64_t v14;
  MIL::IRDimension ***Shape;
  uint64_t *InterleaveFactors;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  MIL::IRConstantProperty *v22;
  int UInt8ScalarValue;
  int v24;
  void *v25;
  void *v26;
  unint64_t v27;
  char v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t *Strides;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  unint64_t v36;
  MIL::IRConstantProperty *v37;
  uint64_t Int64ScalarValue;
  void *v39;
  void *v40;
  void *exception;
  void *v42;
  void *v43;
  void *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  void *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  uint64_t v54[3];
  std::string v55;
  std::string v56;
  __int128 v57;
  std::string::size_type v58;
  _BYTE v59[8];
  _QWORD *v60;
  _QWORD *v61;
  char *v62;

  WrappedType = this;
  if (!(*(uint64_t (**)(E5RT::MILProgramUtils *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
  {
    while (1)
    {
      if (MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType))
      {
        v5 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType);
        if (MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v5))
          break;
      }
      if (!MIL::IRValueType::TryCastAsStateType(WrappedType))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v60, "CreateOperandDescriptorFromIRValueType");
        std::string::basic_string[abi:ne180100]<0>(&v57, "Found unsupported IRValueType.");
        E5RT::Status::Status(&v56, 2, &v57);
        E5RT::E5RTError::E5RTError(exception, &v60, &v56);
      }
      v6 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(WrappedType);
      WrappedType = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v6);
      if ((*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)WrappedType + 24))(WrappedType))
        goto LABEL_6;
    }
    v9 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(WrappedType);
    v10 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v9);
    DataType = MIL::IRTensorBufferValueType::GetDataType(v10);
    v12 = DataType - 4;
    if ((DataType - 4) >= 0xD || ((0x1CE3u >> v12) & 1) == 0)
    {
      v42 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v60, "BuildE5RTComponentDtype");
      std::string::basic_string[abi:ne180100]<0>(&v57, "IRDataType is not supported by E5RT");
      E5RT::Status::Status(&v56, 6, &v57);
      E5RT::E5RTError::E5RTError(v42, &v60, &v56);
    }
    v13 = dword_191A7BF38[v12];
    v14 = E5RT::MILProgramUtils::BuildE5RTTensorComponentSize(DataType);
    Shape = (MIL::IRDimension ***)MIL::IRTensorBufferValueType::GetShape(v10);
    InterleaveFactors = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(v10);
    v17 = *InterleaveFactors;
    if (InterleaveFactors[1] == *InterleaveFactors)
    {
      v20 = 0;
      v21 = 1;
    }
    else
    {
      v18 = InterleaveFactors;
      v19 = 0;
      v20 = 0;
      v21 = 1;
      do
      {
        v22 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v17 + 8 * v19));
        UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue(v22);
        if (UInt8ScalarValue != 1)
        {
          v24 = v21;
          v21 = UInt8ScalarValue;
          v20 = v19;
          if (v24 != 1)
          {
            v25 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&v60, "CreateOperandDescriptorFromIRTensorBufferValueType");
            std::string::basic_string[abi:ne180100]<0>(&v57, "Only one interleave factor of larger than 1 is supported.");
            E5RT::Status::Status(&v56, 6, &v57);
            E5RT::E5RTError::E5RTError(v25, &v60, &v56);
          }
        }
        ++v19;
        v17 = *v18;
      }
      while (v19 < (v18[1] - *v18) >> 3);
    }
    sub_190F6F298(v54, *Shape, Shape[1]);
    if (v21 > 1u)
    {
      v27 = *(_QWORD *)(v54[0] + 8 * v20);
      if (v27 == -1)
      {
        v40 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v60, "CreateOperandDescriptorFromIRTensorBufferValueType");
        std::string::basic_string[abi:ne180100]<0>(&v57, "Interleave dimension cannot be unknown.");
        E5RT::Status::Status(&v56, 6, &v57);
        E5RT::E5RTError::E5RTError(v40, &v60, &v56);
      }
      *(_QWORD *)(v54[0] + 8 * v20) = vcvtps_u32_f32((float)v27 / (float)v21);
    }
    if (v21 > 8u || ((1 << v21) & 0x116) == 0)
    {
      v49 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v60, "GetE5RTPackType");
      std::to_string(&v55, v21);
      v50 = std::string::insert(&v55, 0, "Unsupported interleave (");
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      v52 = std::string::append(&v56, ").");
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v58 = v52->__r_.__value_.__r.__words[2];
      v57 = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v59, 6, &v57);
      E5RT::E5RTError::E5RTError(v49, &v60, v59);
    }
    switch(v14)
    {
      case 4:
        v28 = v21 - 1;
        if ((v21 - 1) < 4u)
        {
          v29 = &unk_191A7BF90;
          goto LABEL_43;
        }
        v30 = 11;
        break;
      case 2:
        v28 = v21 - 1;
        if ((v21 - 1) < 4u)
        {
          v29 = &unk_191A7BF80;
          goto LABEL_43;
        }
        v30 = 10;
        break;
      case 1:
        v28 = v21 - 1;
        if ((v21 - 1) < 4u)
        {
          v29 = &unk_191A7BF70;
LABEL_43:
          v30 = v29[v28];
          break;
        }
        v30 = 9;
        break;
      default:
        v44 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v60, "GetE5RTPackType");
        std::to_string(&v55, 3uLL);
        v45 = std::string::insert(&v55, 0, "Unsupported component size (");
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v47 = std::string::append(&v56, ").");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v58 = v47->__r_.__value_.__r.__words[2];
        v57 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(v59, 6, &v57);
        E5RT::E5RTError::E5RTError(v44, &v60, v59);
    }
    E5RT::TensorDataType::TensorDataType(&v57, v13, v30);
    Strides = (uint64_t *)MIL::IRTensorBufferValueType::GetStrides(v10);
    v33 = *Strides;
    v32 = Strides[1];
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v34 = v32 - v33;
    if (v32 != v33)
    {
      if (v34 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v35 = operator new(v32 - v33);
      v60 = v35;
      v62 = (char *)&v35[v34 >> 3];
      bzero(v35, v34);
      v36 = 0;
      v61 = (_QWORD *)((char *)v35 + v34);
      do
      {
        v37 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v33 + 8 * v36));
        Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v37);
        v60[v36++] = Int64ScalarValue * v14;
        v33 = *Strides;
      }
      while (v36 < (Strides[1] - *Strides) >> 3);
    }
    E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides((E5RT::TensorDataType::Impl **)&v57, v54, &v60, &v56);
    *a3 = v56.__r_.__value_.__r.__words[0];
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v57);
    v26 = (void *)v54[0];
    if (v54[0])
    {
      v54[1] = v54[0];
      goto LABEL_26;
    }
    return;
  }
LABEL_6:
  v7 = MIL::IRValueType::AsTensorType(WrappedType);
  v8 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7) & 1) == 0)
  {
    v39 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "CreateOperandDescriptorFromIRTensorValueType");
    std::string::basic_string[abi:ne180100]<0>(&v57, "Found variadic shape.");
    E5RT::Status::Status(&v56, 2, &v57);
    E5RT::E5RTError::E5RTError(v39, &v60, &v56);
  }
  sub_190F6F298(&v60, *v8, v8[1]);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7))
  {
    case 4u:
      E5RT::TensorDataType::TensorDataType(&v57, 4, 3u);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v57, (uint64_t *)&v60, &v56);
      break;
    case 5u:
      E5RT::TensorDataType::TensorDataType(&v57, 4, 6u);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v57, (uint64_t *)&v60, &v56);
      break;
    case 9u:
      E5RT::TensorDataType::TensorDataType(&v57, 1, 0);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v57, (uint64_t *)&v60, &v56);
      break;
    case 0xAu:
      E5RT::TensorDataType::TensorDataType(&v57, 1, 3u);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v57, (uint64_t *)&v60, &v56);
      break;
    case 0xBu:
      E5RT::TensorDataType::TensorDataType(&v57, 1, 6u);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v57, (uint64_t *)&v60, &v56);
      break;
    case 0xEu:
      E5RT::TensorDataType::TensorDataType(&v57, 0, 0);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v57, (uint64_t *)&v60, &v56);
      break;
    case 0xFu:
      E5RT::TensorDataType::TensorDataType(&v57, 0, 3u);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v57, (uint64_t *)&v60, &v56);
      break;
    case 0x10u:
      E5RT::TensorDataType::TensorDataType(&v57, 0, 6u);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v57, (uint64_t *)&v60, &v56);
      break;
    default:
      v43 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v57, "CreateOperandDescriptorFromIRTensorValueType");
      std::string::basic_string[abi:ne180100]<0>(&v56, "IRDataType is not supported by E5RT");
      E5RT::Status::Status(&v55, 6, &v56);
      E5RT::E5RTError::E5RTError(v43, &v57, &v55);
  }
  *a3 = v56.__r_.__value_.__r.__words[0];
  v56.__r_.__value_.__r.__words[0] = 0;
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v57);
  v26 = v60;
  if (v60)
  {
    v61 = v60;
LABEL_26:
    operator delete(v26);
  }
}

void sub_190F6D6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  void *v32;
  char v33;
  uint64_t v34;

  E5RT::Status::~Status((E5RT::Status *)&a32);
  if (a30 < 0)
  {
    operator delete(__p);
    if (a23 < 0)
    {
LABEL_5:
      operator delete(a18);
      if (a17 < 0)
      {
LABEL_8:
        operator delete(a12);
        if (*(char *)(v34 - 81) < 0)
        {
LABEL_13:
          operator delete(*(void **)(v34 - 104));
          if ((v33 & 1) == 0)
            goto LABEL_15;
          goto LABEL_14;
        }
LABEL_11:
        if ((v33 & 1) == 0)
        {
LABEL_15:
          if (a9)
          {
            operator delete(a9);
            _Unwind_Resume(a1);
          }
          _Unwind_Resume(a1);
        }
LABEL_14:
        __cxa_free_exception(v32);
        goto LABEL_15;
      }
LABEL_10:
      if (*(char *)(v34 - 81) < 0)
        goto LABEL_13;
      goto LABEL_11;
    }
  }
  else if (a23 < 0)
  {
    goto LABEL_5;
  }
  if (a17 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void E5RT::MILProgramUtils::~MILProgramUtils(E5RT::MILProgramUtils *this)
{
  char *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  E5RT::MILProgramUtils::MILFunctionIOInfo *v6;

  v2 = (char *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (E5RT::MILProgramUtils::MILFunctionIOInfo *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v6)
      {
        E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v6);
        MEMORY[0x19401CD90]();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t std::unordered_map<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  E5RT::MILProgramUtils::MILFunctionIOInfo *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (E5RT::MILProgramUtils::MILFunctionIOInfo *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v6)
      {
        E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v6);
        MEMORY[0x19401CD90]();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void E5RT::MILProgramUtils::InitMILProgramUtils(E5RT::MILProgramUtils *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  const MIL::IRValueType *v9;
  uint64_t v10;
  unint64_t v11;
  MIL::IRValueType *v12;
  uint64_t v13;
  const MIL::IRValueType *v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  __int128 v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  int v28;
  size_t v29;
  const void *v30;
  _QWORD *v31;
  const void *v32;
  const void *v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  int v38;
  _BOOL4 v39;
  int v40;
  _BOOL4 v41;
  _QWORD *v42;
  std::string *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t **v66;
  int v67;
  size_t v68;
  const void *v69;
  _QWORD *v70;
  const void *v71;
  const void *v72;
  int v73;
  size_t v74;
  const void *v75;
  size_t v76;
  int v77;
  _BOOL4 v78;
  int v79;
  _BOOL4 v80;
  _QWORD *v81;
  std::string *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  _BYTE *v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  E5RT::MILProgramUtils *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  __int128 v108;
  std::string *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t **v113;
  uint64_t **v114;
  int v115;
  size_t v116;
  const std::string::value_type *v117;
  _QWORD *v118;
  const void *v119;
  const void *v120;
  int v121;
  size_t v122;
  const void *v123;
  size_t v124;
  int v125;
  _BOOL4 v126;
  int v127;
  _BOOL4 v128;
  _QWORD *v129;
  std::string *v130;
  __int128 v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  _BYTE *v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  E5RT::MILProgramUtils::MILFunctionIOInfo *v148;
  char *v149;
  uint64_t v150;
  uint64_t *v151;
  _QWORD *v152;
  uint64_t *v153;
  void *__p[3];
  uint64_t v155;
  __int128 *v156;

  v2 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 72))(*(_QWORD *)this) + 16);
  if (v2)
  {
    v149 = (char *)this + 8;
    while (1)
    {
      v151 = v2;
      v3 = v2[5];
      v4 = operator new();
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_QWORD *)v4 = v4 + 8;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 24) = v4 + 32;
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 48) = v4 + 56;
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_QWORD *)(v4 + 136) = 0;
      v155 = v4;
      v150 = v3;
      v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v3);
      v6 = (_QWORD *)*v5;
      v152 = v5 + 1;
      if ((_QWORD *)*v5 != v5 + 1)
        break;
LABEL_5:
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v150 + 160))(__p, v150);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 48))(v150);
      v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
      v10 = *v8;
      if (v8[1] != *v8)
      {
        v11 = 0;
        v153 = v8;
        do
        {
          v104 = (E5RT::MILProgramUtils *)*((_QWORD *)__p[0] + v11);
          v105 = v10 + 24 * v11;
          v106 = v155;
          v107 = *(_QWORD *)(v155 + 104);
          if (v107 >= *(_QWORD *)(v155 + 112))
          {
            v109 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v155 + 96), v105);
          }
          else
          {
            if (*(char *)(v105 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(v155 + 104), *(const std::string::value_type **)v105, *(_QWORD *)(v105 + 8));
            }
            else
            {
              v108 = *(_OWORD *)v105;
              *(_QWORD *)(v107 + 16) = *(_QWORD *)(v105 + 16);
              *(_OWORD *)v107 = v108;
            }
            v109 = (std::string *)(v107 + 24);
            *(_QWORD *)(v106 + 104) = v107 + 24;
          }
          *(_QWORD *)(v106 + 104) = v109;
          E5RT::MILProgramUtils::CreateOperandDescriptorFromIRValueType(v104, v9, &v156);
          v110 = v155;
          v112 = (uint64_t **)(v155 + 32);
          v111 = *(uint64_t **)(v155 + 32);
          v113 = (uint64_t **)(v155 + 32);
          v114 = (uint64_t **)(v155 + 32);
          if (v111)
          {
            v115 = *(char *)(v105 + 23);
            if (v115 >= 0)
              v116 = *(unsigned __int8 *)(v105 + 23);
            else
              v116 = *(_QWORD *)(v105 + 8);
            if (v115 >= 0)
              v117 = (const std::string::value_type *)v105;
            else
              v117 = *(const std::string::value_type **)v105;
            while (1)
            {
              while (1)
              {
                v114 = (uint64_t **)v111;
                v120 = (const void *)v111[4];
                v118 = v111 + 4;
                v119 = v120;
                v121 = *((char *)v118 + 23);
                if (v121 >= 0)
                  v122 = *((unsigned __int8 *)v118 + 23);
                else
                  v122 = v118[1];
                if (v121 >= 0)
                  v123 = v118;
                else
                  v123 = v119;
                if (v122 >= v116)
                  v124 = v116;
                else
                  v124 = v122;
                v125 = memcmp(v117, v123, v124);
                v126 = v116 < v122;
                if (v125)
                  v126 = v125 < 0;
                if (!v126)
                  break;
                v111 = *v114;
                v113 = v114;
                if (!*v114)
                  goto LABEL_185;
              }
              v127 = memcmp(v123, v117, v124);
              v128 = v122 < v116;
              if (v127)
                v128 = v127 < 0;
              if (!v128)
                break;
              v111 = v114[1];
              if (!v111)
              {
                v113 = v114 + 1;
                goto LABEL_185;
              }
            }
            v102 = v153;
            v103 = (uint64_t)v114[7];
            v114[7] = (uint64_t *)v156;
            if (!v103)
              goto LABEL_153;
          }
          else
          {
LABEL_185:
            v129 = operator new(0x40uLL);
            v130 = (std::string *)(v129 + 4);
            if (*(char *)(v105 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v130, *(const std::string::value_type **)v105, *(_QWORD *)(v105 + 8));
            }
            else
            {
              v131 = *(_OWORD *)v105;
              v129[6] = *(_QWORD *)(v105 + 16);
              *(_OWORD *)&v130->__r_.__value_.__l.__data_ = v131;
            }
            v129[7] = 0;
            *v129 = 0;
            v129[1] = 0;
            v129[2] = v114;
            *v113 = v129;
            v132 = **(_QWORD **)(v110 + 24);
            v133 = v129;
            if (v132)
            {
              *(_QWORD *)(v110 + 24) = v132;
              v133 = *v113;
            }
            v134 = *v112;
            v48 = v133 == *v112;
            *((_BYTE *)v133 + 24) = v48;
            v102 = v153;
            if (!v48)
            {
              do
              {
                v135 = v133[2];
                if (*(_BYTE *)(v135 + 24))
                  break;
                v136 = *(uint64_t **)(v135 + 16);
                v137 = *v136;
                if (*v136 == v135)
                {
                  v140 = v136[1];
                  if (!v140 || (v141 = *(unsigned __int8 *)(v140 + 24), v138 = (_BYTE *)(v140 + 24), v141))
                  {
                    if (*(uint64_t **)v135 == v133)
                    {
                      *(_BYTE *)(v135 + 24) = 1;
                      *((_BYTE *)v136 + 24) = 0;
                      v144 = *(_QWORD *)(v135 + 8);
                      *v136 = v144;
                      if (v144)
                        goto LABEL_205;
                    }
                    else
                    {
                      v142 = *(uint64_t **)(v135 + 8);
                      v143 = *v142;
                      *(_QWORD *)(v135 + 8) = *v142;
                      if (v143)
                      {
                        *(_QWORD *)(v143 + 16) = v135;
                        v136 = *(uint64_t **)(v135 + 16);
                      }
                      v142[2] = (uint64_t)v136;
                      *(_QWORD *)(*(_QWORD *)(v135 + 16) + 8 * (**(_QWORD **)(v135 + 16) != v135)) = v142;
                      *v142 = v135;
                      *(_QWORD *)(v135 + 16) = v142;
                      v136 = (uint64_t *)v142[2];
                      v135 = *v136;
                      *((_BYTE *)v142 + 24) = 1;
                      *((_BYTE *)v136 + 24) = 0;
                      v144 = *(_QWORD *)(v135 + 8);
                      *v136 = v144;
                      if (v144)
LABEL_205:
                        *(_QWORD *)(v144 + 16) = v136;
                    }
                    *(_QWORD *)(v135 + 16) = v136[2];
                    *(_QWORD *)(v136[2] + 8 * (*(_QWORD *)v136[2] != (_QWORD)v136)) = v135;
                    *(_QWORD *)(v135 + 8) = v136;
LABEL_211:
                    v136[2] = v135;
                    break;
                  }
                }
                else if (!v137 || (v139 = *(unsigned __int8 *)(v137 + 24), v138 = (_BYTE *)(v137 + 24), v139))
                {
                  if (*(uint64_t **)v135 == v133)
                  {
                    v146 = v133[1];
                    *(_QWORD *)v135 = v146;
                    if (v146)
                    {
                      *(_QWORD *)(v146 + 16) = v135;
                      v136 = *(uint64_t **)(v135 + 16);
                    }
                    v133[2] = (uint64_t)v136;
                    *(_QWORD *)(*(_QWORD *)(v135 + 16) + 8 * (**(_QWORD **)(v135 + 16) != v135)) = v133;
                    v133[1] = v135;
                    *(_QWORD *)(v135 + 16) = v133;
                    v136 = (uint64_t *)v133[2];
                    *((_BYTE *)v133 + 24) = 1;
                    *((_BYTE *)v136 + 24) = 0;
                    v135 = v136[1];
                    v145 = *(uint64_t **)v135;
                    v136[1] = *(_QWORD *)v135;
                    if (v145)
LABEL_209:
                      v145[2] = (uint64_t)v136;
                  }
                  else
                  {
                    *(_BYTE *)(v135 + 24) = 1;
                    *((_BYTE *)v136 + 24) = 0;
                    v135 = v136[1];
                    v145 = *(uint64_t **)v135;
                    v136[1] = *(_QWORD *)v135;
                    if (v145)
                      goto LABEL_209;
                  }
                  *(_QWORD *)(v135 + 16) = v136[2];
                  *(_QWORD *)(v136[2] + 8 * (*(_QWORD *)v136[2] != (_QWORD)v136)) = v135;
                  *(_QWORD *)v135 = v136;
                  goto LABEL_211;
                }
                *(_BYTE *)(v135 + 24) = 1;
                v133 = v136;
                *((_BYTE *)v136 + 24) = v136 == v134;
                *v138 = 1;
              }
              while (v136 != v134);
            }
            ++*(_QWORD *)(v110 + 40);
            v103 = v129[7];
            v129[7] = v156;
            if (!v103)
              goto LABEL_153;
          }
          (*(void (**)(uint64_t *))(*(_QWORD *)v103 + 8))((uint64_t *)v103);
LABEL_153:
          ++v11;
          v10 = *v102;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v102[1] - *v102) >> 3) > v11);
      }
      v156 = (__int128 *)(v151 + 2);
      v147 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v149, (uint64_t)(v151 + 2), (uint64_t)&std::piecewise_construct, &v156);
      v148 = (E5RT::MILProgramUtils::MILFunctionIOInfo *)v147[5];
      v147[5] = v155;
      if (v148)
      {
        E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v148);
        MEMORY[0x19401CD90]();
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v2 = (uint64_t *)*v151;
      if (!*v151)
        return;
    }
    while (1)
    {
      v12 = (MIL::IRValueType *)v6[7];
      v13 = MIL::IRValueType::TryCastAsStateType(v12);
      v15 = (__int128 *)(v6 + 4);
      v16 = v155;
      if (v13)
      {
        v17 = *(_QWORD *)(v155 + 128);
        if (v17 >= *(_QWORD *)(v155 + 136))
        {
          v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v155 + 120), (uint64_t)(v6 + 4));
        }
        else
        {
          if (*((char *)v6 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v155 + 128), (const std::string::value_type *)v6[4], v6[5]);
          }
          else
          {
            v18 = *v15;
            *(_QWORD *)(v17 + 16) = v6[6];
            *(_OWORD *)v17 = v18;
          }
          v21 = (std::string *)(v17 + 24);
          *(_QWORD *)(v16 + 128) = v17 + 24;
        }
        *(_QWORD *)(v16 + 128) = v21;
        E5RT::MILProgramUtils::CreateOperandDescriptorFromIRValueType(v12, v14, __p);
        v23 = v155;
        v25 = (uint64_t **)(v155 + 56);
        v24 = *(uint64_t **)(v155 + 56);
        v26 = (uint64_t **)(v155 + 56);
        v27 = (uint64_t **)(v155 + 56);
        if (v24)
        {
          v28 = *((char *)v6 + 55);
          if (v28 >= 0)
            v29 = *((unsigned __int8 *)v6 + 55);
          else
            v29 = v6[5];
          if (v28 >= 0)
            v30 = v6 + 4;
          else
            v30 = (const void *)v6[4];
          while (1)
          {
            while (1)
            {
              v27 = (uint64_t **)v24;
              v33 = (const void *)v24[4];
              v31 = v24 + 4;
              v32 = v33;
              v34 = *((char *)v31 + 23);
              if (v34 >= 0)
                v35 = *((unsigned __int8 *)v31 + 23);
              else
                v35 = v31[1];
              if (v34 >= 0)
                v36 = v31;
              else
                v36 = v32;
              if (v35 >= v29)
                v37 = v29;
              else
                v37 = v35;
              v38 = memcmp(v30, v36, v37);
              v39 = v29 < v35;
              if (v38)
                v39 = v38 < 0;
              if (!v39)
                break;
              v24 = *v27;
              v26 = v27;
              if (!*v27)
                goto LABEL_44;
            }
            v40 = memcmp(v36, v30, v37);
            v41 = v35 < v29;
            if (v40)
              v41 = v40 < 0;
            if (!v41)
              break;
            v24 = v27[1];
            if (!v24)
            {
              v26 = v27 + 1;
              goto LABEL_44;
            }
          }
          v49 = v152;
          v60 = (uint64_t)v27[7];
          v27[7] = (uint64_t *)__p[0];
          if (!v60)
            goto LABEL_133;
        }
        else
        {
LABEL_44:
          v42 = operator new(0x40uLL);
          v43 = (std::string *)(v42 + 4);
          if (*((char *)v6 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v43, (const std::string::value_type *)v6[4], v6[5]);
          }
          else
          {
            v44 = *v15;
            v42[6] = v6[6];
            *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
          }
          v42[7] = 0;
          *v42 = 0;
          v42[1] = 0;
          v42[2] = v27;
          *v26 = v42;
          v45 = **(_QWORD **)(v23 + 48);
          v46 = v42;
          if (v45)
          {
            *(_QWORD *)(v23 + 48) = v45;
            v46 = *v26;
          }
          v47 = *v25;
          v48 = v46 == *v25;
          *((_BYTE *)v46 + 24) = v48;
          v49 = v152;
          if (!v48)
          {
            do
            {
              v50 = v46[2];
              if (*(_BYTE *)(v50 + 24))
                break;
              v51 = *(uint64_t **)(v50 + 16);
              v52 = *v51;
              if (*v51 == v50)
              {
                v55 = v51[1];
                if (!v55 || (v56 = *(unsigned __int8 *)(v55 + 24), v53 = (_BYTE *)(v55 + 24), v56))
                {
                  if (*(uint64_t **)v50 == v46)
                  {
                    *(_BYTE *)(v50 + 24) = 1;
                    *((_BYTE *)v51 + 24) = 0;
                    v59 = *(_QWORD *)(v50 + 8);
                    *v51 = v59;
                    if (v59)
                      goto LABEL_64;
                  }
                  else
                  {
                    v57 = *(uint64_t **)(v50 + 8);
                    v58 = *v57;
                    *(_QWORD *)(v50 + 8) = *v57;
                    if (v58)
                    {
                      *(_QWORD *)(v58 + 16) = v50;
                      v51 = *(uint64_t **)(v50 + 16);
                    }
                    v57[2] = (uint64_t)v51;
                    *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * (**(_QWORD **)(v50 + 16) != v50)) = v57;
                    *v57 = v50;
                    *(_QWORD *)(v50 + 16) = v57;
                    v51 = (uint64_t *)v57[2];
                    v50 = *v51;
                    *((_BYTE *)v57 + 24) = 1;
                    *((_BYTE *)v51 + 24) = 0;
                    v59 = *(_QWORD *)(v50 + 8);
                    *v51 = v59;
                    if (v59)
LABEL_64:
                      *(_QWORD *)(v59 + 16) = v51;
                  }
                  *(_QWORD *)(v50 + 16) = v51[2];
                  *(_QWORD *)(v51[2] + 8 * (*(_QWORD *)v51[2] != (_QWORD)v51)) = v50;
                  *(_QWORD *)(v50 + 8) = v51;
LABEL_72:
                  v51[2] = v50;
                  break;
                }
              }
              else if (!v52 || (v54 = *(unsigned __int8 *)(v52 + 24), v53 = (_BYTE *)(v52 + 24), v54))
              {
                if (*(uint64_t **)v50 == v46)
                {
                  v100 = v46[1];
                  *(_QWORD *)v50 = v100;
                  if (v100)
                  {
                    *(_QWORD *)(v100 + 16) = v50;
                    v51 = *(uint64_t **)(v50 + 16);
                  }
                  v46[2] = (uint64_t)v51;
                  *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * (**(_QWORD **)(v50 + 16) != v50)) = v46;
                  v46[1] = v50;
                  *(_QWORD *)(v50 + 16) = v46;
                  v51 = (uint64_t *)v46[2];
                  *((_BYTE *)v46 + 24) = 1;
                  *((_BYTE *)v51 + 24) = 0;
                  v50 = v51[1];
                  v61 = *(uint64_t **)v50;
                  v51[1] = *(_QWORD *)v50;
                  if (v61)
LABEL_70:
                    v61[2] = (uint64_t)v51;
                }
                else
                {
                  *(_BYTE *)(v50 + 24) = 1;
                  *((_BYTE *)v51 + 24) = 0;
                  v50 = v51[1];
                  v61 = *(uint64_t **)v50;
                  v51[1] = *(_QWORD *)v50;
                  if (v61)
                    goto LABEL_70;
                }
                *(_QWORD *)(v50 + 16) = v51[2];
                *(_QWORD *)(v51[2] + 8 * (*(_QWORD *)v51[2] != (_QWORD)v51)) = v50;
                *(_QWORD *)v50 = v51;
                goto LABEL_72;
              }
              *(_BYTE *)(v50 + 24) = 1;
              v46 = v51;
              *((_BYTE *)v51 + 24) = v51 == v47;
              *v53 = 1;
            }
            while (v51 != v47);
          }
          ++*(_QWORD *)(v23 + 64);
          v60 = v42[7];
          v42[7] = __p[0];
          if (!v60)
            goto LABEL_133;
        }
      }
      else
      {
        v19 = *(_QWORD *)(v155 + 80);
        if (v19 >= *(_QWORD *)(v155 + 88))
        {
          v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v155 + 72), (uint64_t)(v6 + 4));
        }
        else
        {
          if (*((char *)v6 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v155 + 80), (const std::string::value_type *)v6[4], v6[5]);
          }
          else
          {
            v20 = *v15;
            *(_QWORD *)(v19 + 16) = v6[6];
            *(_OWORD *)v19 = v20;
          }
          v22 = (std::string *)(v19 + 24);
          *(_QWORD *)(v16 + 80) = v19 + 24;
        }
        *(_QWORD *)(v16 + 80) = v22;
        E5RT::MILProgramUtils::CreateOperandDescriptorFromIRValueType(v12, v14, __p);
        v62 = v155;
        v64 = (uint64_t **)(v155 + 8);
        v63 = *(uint64_t **)(v155 + 8);
        v65 = (uint64_t **)(v155 + 8);
        v66 = (uint64_t **)(v155 + 8);
        if (v63)
        {
          v67 = *((char *)v6 + 55);
          if (v67 >= 0)
            v68 = *((unsigned __int8 *)v6 + 55);
          else
            v68 = v6[5];
          if (v67 >= 0)
            v69 = v6 + 4;
          else
            v69 = (const void *)v6[4];
          while (1)
          {
            while (1)
            {
              v66 = (uint64_t **)v63;
              v72 = (const void *)v63[4];
              v70 = v63 + 4;
              v71 = v72;
              v73 = *((char *)v70 + 23);
              if (v73 >= 0)
                v74 = *((unsigned __int8 *)v70 + 23);
              else
                v74 = v70[1];
              if (v73 >= 0)
                v75 = v70;
              else
                v75 = v71;
              if (v74 >= v68)
                v76 = v68;
              else
                v76 = v74;
              v77 = memcmp(v69, v75, v76);
              v78 = v68 < v74;
              if (v77)
                v78 = v77 < 0;
              if (!v78)
                break;
              v63 = *v66;
              v65 = v66;
              if (!*v66)
                goto LABEL_102;
            }
            v79 = memcmp(v75, v69, v76);
            v80 = v74 < v68;
            if (v79)
              v80 = v79 < 0;
            if (!v80)
              break;
            v63 = v66[1];
            if (!v63)
            {
              v65 = v66 + 1;
              goto LABEL_102;
            }
          }
          v49 = v152;
          v60 = (uint64_t)v66[7];
          v66[7] = (uint64_t *)__p[0];
          if (!v60)
            goto LABEL_133;
        }
        else
        {
LABEL_102:
          v81 = operator new(0x40uLL);
          v82 = (std::string *)(v81 + 4);
          if (*((char *)v6 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v82, (const std::string::value_type *)v6[4], v6[5]);
          }
          else
          {
            v83 = *v15;
            v81[6] = v6[6];
            *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
          }
          v81[7] = 0;
          *v81 = 0;
          v81[1] = 0;
          v81[2] = v66;
          *v65 = v81;
          v84 = **(_QWORD **)v62;
          v85 = v81;
          if (v84)
          {
            *(_QWORD *)v62 = v84;
            v85 = *v65;
          }
          v86 = *v64;
          v48 = v85 == *v64;
          *((_BYTE *)v85 + 24) = v48;
          v49 = v152;
          if (!v48)
          {
            do
            {
              v87 = v85[2];
              if (*(_BYTE *)(v87 + 24))
                break;
              v88 = *(uint64_t **)(v87 + 16);
              v89 = *v88;
              if (*v88 == v87)
              {
                v92 = v88[1];
                if (!v92 || (v93 = *(unsigned __int8 *)(v92 + 24), v90 = (_BYTE *)(v92 + 24), v93))
                {
                  if (*(uint64_t **)v87 == v85)
                  {
                    *(_BYTE *)(v87 + 24) = 1;
                    *((_BYTE *)v88 + 24) = 0;
                    v96 = *(_QWORD *)(v87 + 8);
                    *v88 = v96;
                    if (v96)
                      goto LABEL_122;
                  }
                  else
                  {
                    v94 = *(uint64_t **)(v87 + 8);
                    v95 = *v94;
                    *(_QWORD *)(v87 + 8) = *v94;
                    if (v95)
                    {
                      *(_QWORD *)(v95 + 16) = v87;
                      v88 = *(uint64_t **)(v87 + 16);
                    }
                    v94[2] = (uint64_t)v88;
                    *(_QWORD *)(*(_QWORD *)(v87 + 16) + 8 * (**(_QWORD **)(v87 + 16) != v87)) = v94;
                    *v94 = v87;
                    *(_QWORD *)(v87 + 16) = v94;
                    v88 = (uint64_t *)v94[2];
                    v87 = *v88;
                    *((_BYTE *)v94 + 24) = 1;
                    *((_BYTE *)v88 + 24) = 0;
                    v96 = *(_QWORD *)(v87 + 8);
                    *v88 = v96;
                    if (v96)
LABEL_122:
                      *(_QWORD *)(v96 + 16) = v88;
                  }
                  *(_QWORD *)(v87 + 16) = v88[2];
                  *(_QWORD *)(v88[2] + 8 * (*(_QWORD *)v88[2] != (_QWORD)v88)) = v87;
                  *(_QWORD *)(v87 + 8) = v88;
LABEL_130:
                  v88[2] = v87;
                  break;
                }
              }
              else if (!v89 || (v91 = *(unsigned __int8 *)(v89 + 24), v90 = (_BYTE *)(v89 + 24), v91))
              {
                if (*(uint64_t **)v87 == v85)
                {
                  v101 = v85[1];
                  *(_QWORD *)v87 = v101;
                  if (v101)
                  {
                    *(_QWORD *)(v101 + 16) = v87;
                    v88 = *(uint64_t **)(v87 + 16);
                  }
                  v85[2] = (uint64_t)v88;
                  *(_QWORD *)(*(_QWORD *)(v87 + 16) + 8 * (**(_QWORD **)(v87 + 16) != v87)) = v85;
                  v85[1] = v87;
                  *(_QWORD *)(v87 + 16) = v85;
                  v88 = (uint64_t *)v85[2];
                  *((_BYTE *)v85 + 24) = 1;
                  *((_BYTE *)v88 + 24) = 0;
                  v87 = v88[1];
                  v97 = *(uint64_t **)v87;
                  v88[1] = *(_QWORD *)v87;
                  if (v97)
LABEL_128:
                    v97[2] = (uint64_t)v88;
                }
                else
                {
                  *(_BYTE *)(v87 + 24) = 1;
                  *((_BYTE *)v88 + 24) = 0;
                  v87 = v88[1];
                  v97 = *(uint64_t **)v87;
                  v88[1] = *(_QWORD *)v87;
                  if (v97)
                    goto LABEL_128;
                }
                *(_QWORD *)(v87 + 16) = v88[2];
                *(_QWORD *)(v88[2] + 8 * (*(_QWORD *)v88[2] != (_QWORD)v88)) = v87;
                *(_QWORD *)v87 = v88;
                goto LABEL_130;
              }
              *(_BYTE *)(v87 + 24) = 1;
              v85 = v88;
              *((_BYTE *)v88 + 24) = v88 == v86;
              *v90 = 1;
            }
            while (v88 != v86);
          }
          ++*(_QWORD *)(v62 + 16);
          v60 = v81[7];
          v81[7] = __p[0];
          if (!v60)
            goto LABEL_133;
        }
      }
      (*(void (**)(uint64_t *))(*(_QWORD *)v60 + 8))((uint64_t *)v60);
LABEL_133:
      v98 = (_QWORD *)v6[1];
      if (v98)
      {
        do
        {
          v99 = v98;
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (_QWORD *)v6[2];
          v48 = *v99 == (_QWORD)v6;
          v6 = v99;
        }
        while (!v48);
      }
      v6 = v99;
      if (v99 == v49)
        goto LABEL_5;
    }
  }
}

void sub_190F6E880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100]((E5RT::MILProgramUtils::MILFunctionIOInfo **)va);
  _Unwind_Resume(a1);
}

void sub_190F6E894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100]((E5RT::MILProgramUtils::MILFunctionIOInfo **)va);
  _Unwind_Resume(a1);
}

void sub_190F6E8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  *(_QWORD *)(v9 + 80) = v8;
  std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100]((E5RT::MILProgramUtils::MILFunctionIOInfo **)va);
  _Unwind_Resume(a1);
}

void sub_190F6E8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, E5RT::MILProgramUtils::MILFunctionIOInfo *a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  operator delete(v18);
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100](&a16);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

E5RT::MILProgramUtils::MILFunctionIOInfo **std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100](E5RT::MILProgramUtils::MILFunctionIOInfo **a1)
{
  E5RT::MILProgramUtils::MILFunctionIOInfo *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

E5RT::MILProgramUtils *E5RT::MILProgramUtils::MILProgramUtils(E5RT::MILProgramUtils *this, const std::__fs::filesystem::path *a2)
{
  std::__shared_weak_count *MILContext;
  std::__shared_weak_count *v5;
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::string pn;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  MILContext = (std::__shared_weak_count *)MIL::Opsets::Common::CreateMILContext(this);
  v21 = v20;
  if (v20)
  {
    MILContext = (std::__shared_weak_count *)operator new();
    v5 = MILContext;
    v6 = v20;
    MILContext->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    MILContext->__shared_owners_ = 0;
    MILContext->__shared_weak_owners_ = 0;
    MILContext[1].__vftable = v6;
  }
  else
  {
    v5 = 0;
  }
  v22 = v5;
  MIL::ParserOptions::Make((MIL::ParserOptions *)MILContext);
  v7 = v20;
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  else
    pn = a2->__pn_;
  (*((void (**)(std::__shared_weak_count_vtbl *, std::string *, uint64_t))v7->~__shared_weak_count + 4))(v7, &pn, 1);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t))v20->~__shared_weak_count + 8))(v20, 1);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  v10 = *(_QWORD *)this;
  *(_QWORD *)this = v18;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  E5RT::MILProgramUtils::InitMILProgramUtils(this);
  v13 = v20;
  v20 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return this;
}

void sub_190F6EC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t *v20;
  uint64_t v22;

  if (a19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
    std::unordered_map<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>::~unordered_map[abi:ne180100]((uint64_t)(v20 + 1));
    v22 = *v20;
    *v20 = 0;
    if (!v22)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::unordered_map<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>::~unordered_map[abi:ne180100]((uint64_t)(v20 + 1));
    v22 = *v20;
    *v20 = 0;
    if (!v22)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

E5RT::MILProgramUtils *E5RT::MILProgramUtils::MILProgramUtils(E5RT::MILProgramUtils *this, const std::__fs::filesystem::path *a2, char a3)
{
  std::__shared_weak_count *MILContext;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count_vtbl *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::string pn;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  MILContext = (std::__shared_weak_count *)MIL::Opsets::Common::CreateMILContext(this);
  v23 = v22;
  if (v22)
  {
    MILContext = (std::__shared_weak_count *)operator new();
    v7 = MILContext;
    v8 = v22;
    MILContext->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    MILContext->__shared_owners_ = 0;
    MILContext->__shared_weak_owners_ = 0;
    MILContext[1].__vftable = v8;
  }
  else
  {
    v7 = 0;
  }
  v24 = v7;
  MIL::ParserOptions::Make((MIL::ParserOptions *)MILContext);
  v9 = v22;
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  else
    pn = a2->__pn_;
  (*((void (**)(std::__shared_weak_count_vtbl *, std::string *, uint64_t))v9->~__shared_weak_count + 4))(v9, &pn, 1);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t))v22->~__shared_weak_count + 8))(v22, 1);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  v12 = *(_QWORD *)this;
  *(_QWORD *)this = v20;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v7)
    goto LABEL_18;
  v13 = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    if ((a3 & 1) != 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if ((a3 & 1) == 0)
LABEL_19:
    E5RT::MILProgramUtils::InitMILProgramUtils(this);
LABEL_20:
  v15 = v22;
  v22 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return this;
}

void sub_190F6EF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t *v20;
  uint64_t v22;

  if (a19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
    std::unordered_map<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>::~unordered_map[abi:ne180100]((uint64_t)(v20 + 1));
    v22 = *v20;
    *v20 = 0;
    if (!v22)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::unordered_map<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>::~unordered_map[abi:ne180100]((uint64_t)(v20 + 1));
    v22 = *v20;
    *v20 = 0;
    if (!v22)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

void E5RT::MILProgramUtils::GetFunctionNames(E5RT::MILProgramUtils *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  const std::string::value_type *v5;
  __int128 v6;
  std::vector<std::string>::pointer end;
  char *v8;
  int v9;
  void **v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  void *exception;
  void *v17[2];
  void *__p;
  std::vector<std::string>::size_type __n;
  _BYTE v20[8];
  std::string v21;

  v2 = *(_QWORD *)this;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "GetFunctionNames");
    std::string::basic_string[abi:ne180100]<0>(&v21, "The program is not initialized.");
    E5RT::Status::Status(v20, 6, &v21);
    E5RT::E5RTError::E5RTError(exception, v17, v20);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((uint64_t)v17, v4);
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, __n);
  v5 = (const std::string::value_type *)__p;
  if (__p)
  {
    do
    {
      if (v5[39] < 0)
        std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      else
        v21 = *(std::string *)(v5 + 16);
      end = a2->__end_;
      if (end < a2->__end_cap_.__value_)
      {
        v6 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = v21.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v6;
        a2->__end_ = end + 1;
      }
      else
      {
        v8 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)&a2->__begin_, (uint64_t)&v21);
        v9 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
        a2->__end_ = (std::vector<std::string>::pointer)v8;
        if (v9 < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      v5 = *(const std::string::value_type **)v5;
    }
    while (v5);
    v10 = (void **)__p;
    if (__p)
    {
      do
      {
        while (1)
        {
          v11 = (void **)*v10;
          v12 = (std::__shared_weak_count *)v10[6];
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          if (*((char *)v10 + 39) < 0)
            break;
          operator delete(v10);
          v10 = v11;
          if (!v11)
            goto LABEL_22;
        }
        operator delete(v10[2]);
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
  }
LABEL_22:
  v15 = v17[0];
  v17[0] = 0;
  if (v15)
    operator delete(v15);
}

void sub_190F6F1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void **v20;

  std::vector<std::string>::~vector[abi:ne180100](v20);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190F6F20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a23 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v24 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::MILProgramUtils::GetMILProgram(E5RT::MILProgramUtils *this)
{
  return *(_QWORD *)this;
}

void sub_190F6F298(_QWORD *a1, MIL::IRDimension **a2, MIL::IRDimension **a3)
{
  MIL::IRDimension **v4;
  uint64_t v6;
  MIL::IRDimension *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _OWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    while (1)
    {
      v7 = *v4;
      if (!(*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)*v4 + 24))(*v4))
        break;
      v9 = (char *)a1[1];
      v8 = a1[2];
      if ((unint64_t)v9 >= v8)
      {
        v10 = (_QWORD *)*a1;
        v11 = (uint64_t)&v9[-*a1];
        v12 = v11 >> 3;
        v13 = (v11 >> 3) + 1;
        if (v13 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v14 = v8 - (_QWORD)v10;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v16 = operator new(8 * v15);
          v17 = &v16[8 * v12];
          *v17 = -1;
          v6 = (uint64_t)(v17 + 1);
          if (v9 == (char *)v10)
          {
LABEL_36:
            *a1 = v17;
            a1[1] = v6;
            a1[2] = &v16[8 * v15];
            if (!v10)
              goto LABEL_4;
LABEL_46:
            operator delete(v10);
            goto LABEL_4;
          }
        }
        else
        {
          v16 = 0;
          v17 = (_QWORD *)(8 * v12);
          *(_QWORD *)(8 * v12) = -1;
          v6 = 8 * v12 + 8;
          if (v9 == (char *)v10)
            goto LABEL_36;
        }
        v30 = v9 - 8 - (char *)v10;
        if (v30 < 0x58)
          goto LABEL_54;
        if ((unint64_t)(v9 - &v16[v11]) < 0x20)
          goto LABEL_54;
        v31 = (v30 >> 3) + 1;
        v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        v33 = &v9[-v32];
        v17 = (_QWORD *)((char *)v17 - v32);
        v34 = &v16[8 * v12 - 16];
        v35 = v9 - 16;
        v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v37 = *(_OWORD *)v35;
          *(v34 - 1) = *((_OWORD *)v35 - 1);
          *v34 = v37;
          v34 -= 2;
          v35 -= 32;
          v36 -= 4;
        }
        while (v36);
        v9 = v33;
        if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_54:
          do
          {
            v38 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *--v17 = v38;
          }
          while (v9 != (char *)v10);
        }
        goto LABEL_36;
      }
      *(_QWORD *)v9 = -1;
      v6 = (uint64_t)(v9 + 8);
LABEL_4:
      a1[1] = v6;
      if (++v4 == a3)
        return;
    }
    v18 = MIL::IRDimension::AsConstant(v7);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
    v20 = v19;
    v22 = (uint64_t *)a1[1];
    v21 = a1[2];
    if ((unint64_t)v22 < v21)
    {
      *v22 = v19;
      v6 = (uint64_t)(v22 + 1);
      goto LABEL_4;
    }
    v10 = (_QWORD *)*a1;
    v23 = (uint64_t)v22 - *a1;
    v24 = v23 >> 3;
    v25 = (v23 >> 3) + 1;
    if (v25 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v26 = v21 - (_QWORD)v10;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = operator new(8 * v27);
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v20;
      v6 = (uint64_t)(v29 + 1);
      if (v22 == v10)
      {
LABEL_45:
        *a1 = v29;
        a1[1] = v6;
        a1[2] = &v28[8 * v27];
        if (v10)
          goto LABEL_46;
        goto LABEL_4;
      }
    }
    else
    {
      v28 = 0;
      v29 = (uint64_t *)(8 * v24);
      *(_QWORD *)(8 * v24) = v20;
      v6 = 8 * v24 + 8;
      if (v22 == v10)
        goto LABEL_45;
    }
    v39 = (char *)(v22 - 1) - (char *)v10;
    if (v39 < 0x58)
      goto LABEL_55;
    if ((unint64_t)((char *)v22 - &v28[v23]) < 0x20)
      goto LABEL_55;
    v40 = (v39 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v22[v41 / 0xFFFFFFFFFFFFFFF8];
    v29 = (uint64_t *)((char *)v29 - v41);
    v43 = &v28[8 * v24 - 16];
    v44 = v22 - 2;
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 4;
      v45 -= 4;
    }
    while (v45);
    v22 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        v47 = *--v22;
        *--v29 = v47;
      }
      while (v22 != v10);
    }
    goto LABEL_45;
  }
}

void sub_190F6F5B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(E5RT::MILProgramUtils::MILFunctionIOInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *((_QWORD *)this + 16);
    v4 = (void *)*((_QWORD *)this + 15);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    v6 = *((_QWORD *)this + 13);
    v7 = (void *)*((_QWORD *)this + 12);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v5;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = *((_QWORD *)this + 10);
    v10 = (void *)*((_QWORD *)this + 9);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v8;
    operator delete(v10);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy((uint64_t)this + 48, *((char **)this + 7));
  std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy((uint64_t)this, *((char **)this + 1));
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy(uint64_t a1, char *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190F6FBC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F6FBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  E5RT::MILProgramUtils::MILFunctionIOInfo *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(E5RT::MILProgramUtils::MILFunctionIOInfo **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
      {
        E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v3);
        MEMORY[0x19401CD90]();
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::MILContext  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191AD10C0)
    return a1 + 24;
  if (((v3 & 0x8000000191AD10C0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191AD10C0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191AD10C0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_190F6FE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F6FE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x38uLL);
  v45[0] = v25;
  v45[1] = a1 + 16;
  v46 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v27 = *(_QWORD *)(a3 + 32);
  v25[5] = *(_QWORD *)(a3 + 24);
  v25[6] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_71:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v42 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v42 & v10;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v10));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_60;
    }
LABEL_84:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v43 >= v11)
          v43 %= v11;
      }
      else
      {
        v43 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_95;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_84;
LABEL_60:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_95:
  v14 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190F702BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F702D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  std::string *v9;
  uint64_t v10;
  std::string *begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v13;
  uint64_t MILProgram;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *InputPorts;
  _QWORD *OutputPorts;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  E5RT::IOPortImpl **v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  E5RT::IOPortImpl **v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *PortDescriptorRef;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *exception;
  std::string *v52;
  __int128 v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  std::string v58;
  __int128 v59;
  std::string::size_type v60;
  _BYTE v61[8];
  std::vector<std::string> v62;
  std::string __p;
  _BYTE v64[48];

  *(_QWORD *)a1 = a2;
  v4 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  memset(&__p, 0, sizeof(__p));
  v8 = *(_BYTE *)(v4 + 23);
  if (v8 >= 0)
    v9 = (std::string *)v4;
  else
    v9 = *(std::string **)v4;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v4 + 23);
  else
    v10 = *(_QWORD *)(v4 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__p, v9, (std::string *)((char *)v9 + v10));
  E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)v64, (const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  E5RT::MILProgramUtils::GetFunctionNames((E5RT::MILProgramUtils *)v64, &v62);
  begin = v62.__begin_;
  if (v62.__begin_)
  {
    end = v62.__end_;
    v13 = v62.__begin_;
    if (v62.__end_ != v62.__begin_)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != begin);
      v13 = v62.__begin_;
    }
    v62.__end_ = begin;
    operator delete(v13);
  }
  MILProgram = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)v64);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)MILProgram + 72))(MILProgram);
  v16 = v15;
  if (*(_QWORD *)(v15 + 24) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
    std::to_string(&v58, *(_QWORD *)(v16 + 24));
    v52 = std::string::insert(&v58, 0, "There should be be exactly 1 function. Getting ");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v60 = v52->__r_.__value_.__r.__words[2];
    v59 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v61, 2, &v59);
    E5RT::E5RTError::E5RTError(exception, &__p, v61);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 40);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v20 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 128))(v17) + 16) != v20[3] + InputPorts[3])
  {
    v54 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
    std::string::basic_string[abi:ne180100]<0>(&v59, "Input count doesn't match ordered E5 input count.");
    E5RT::Status::Status(&v58, 1, &v59);
    E5RT::E5RTError::E5RTError(v54, &__p, &v58);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v17 + 160))(&__p, v17);
  v21 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
  v22 = OutputPorts[3];
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21 != v22)
  {
    v55 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
    std::string::basic_string[abi:ne180100]<0>(&v59, "Output count doesn't match ordered E5 output count.");
    E5RT::Status::Status(&v58, 1, &v59);
    E5RT::E5RTError::E5RTError(v55, &__p, &v58);
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    v56 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
    std::string::basic_string[abi:ne180100]<0>(&v59, "Op params not specified.");
    E5RT::Status::Status(&v58, 1, &v59);
    E5RT::E5RTError::E5RTError(v56, &__p, &v58);
  }
  v23 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 128))(v17);
  v24 = v23 + 1;
  v25 = (_QWORD *)*v23;
  if ((_QWORD *)*v23 != v23 + 1)
  {
    do
    {
      v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v25 + 4));
      if (!v36)
      {
        v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v20, (uint64_t)(v25 + 4));
        if (!v36)
          goto LABEL_63;
      }
      v37 = (E5RT::IOPortImpl **)v36[5];
      v38 = (std::__shared_weak_count *)v36[6];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
      }
      if (!v37)
      {
LABEL_63:
        v57 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v59, "Input port corresponding to E5 input in ordered list not found.");
        E5RT::Status::Status(&v58, 2, &v59);
        E5RT::E5RTError::E5RTError(v57, &__p, &v58);
      }
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(v37);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        v47 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v59, "Surface ports aren't supported with E5MinimalCpu inference yet.");
        E5RT::Status::Status(&v58, 2, &v59);
        E5RT::E5RTError::E5RTError(v47, &__p, &v58);
      }
      if (!v38)
        goto LABEL_47;
      v42 = (unint64_t *)&v38->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
        v44 = (_QWORD *)v25[1];
        if (!v44)
        {
          do
          {
LABEL_51:
            v45 = (_QWORD *)v25[2];
            v46 = *v45 == (_QWORD)v25;
            v25 = v45;
          }
          while (!v46);
          goto LABEL_35;
        }
      }
      else
      {
LABEL_47:
        v44 = (_QWORD *)v25[1];
        if (!v44)
          goto LABEL_51;
      }
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
LABEL_35:
      v25 = v45;
    }
    while (v45 != v24);
  }
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  v27 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
  v28 = *v27;
  v29 = v27[1];
  if (*v27 != v29)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v28))
      {
        v48 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v59, "Output port corresponding to E5 output in ordered list not found.");
        E5RT::Status::Status(&v58, 2, &v59);
        E5RT::E5RTError::E5RTError(v48, &__p, &v58);
      }
      v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v28);
      if (!v30)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v31 = (E5RT::IOPortImpl **)v30[5];
      if (!v31)
      {
        v49 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v59, "Invalid output port.");
        E5RT::Status::Status(&v58, 1, &v59);
        E5RT::E5RTError::E5RTError(v49, &__p, &v58);
      }
      v32 = (void *)E5RT::IOPort::GetPortDescriptorRef(v31);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v32))
      {
        v50 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v59, "Output surface ports aren't supported with MPS Graph inference yet.");
        E5RT::Status::Status(&v58, 2, &v59);
        E5RT::E5RTError::E5RTError(v50, &__p, &v58);
      }
      v28 += 24;
    }
    while (v28 != v29);
  }
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)MILProgram + 40))(MILProgram);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  E5RT::Ops::E5MinimalCpuOperation::Impl::CreateKernel(a1, v33, v34);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)v64);
  return a1;
}

void sub_190F70A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *v34;
  int v35;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
    operator delete(__p);
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v35 & 1) == 0)
      goto LABEL_20;
  }
  else if (!v35)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v34);
LABEL_20:
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a32);
  v37 = *(std::__shared_weak_count **)(v32 + 32);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)(v32 + 16);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::E5MinimalCpuOperation::Impl::CreateKernel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t ArgumentName;
  __int128 v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  MIL::IRValue *ArgumentValue;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  std::string::size_type v19;
  MIL::IRValue *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  std::string::size_type v24;
  MIL::IRValue *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  MIL::IRValueType *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  __int128 v49;
  MIL::IRNamedValueType ***v50;
  uint64_t Name;
  __int128 v52;
  MIL::IRValueType *ParameterType;
  uint64_t v54;
  MIL::IRDimension ***v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  char *v64;
  char *v65;
  void *v66;
  void *exception;
  std::string *v68;
  __int128 v69;
  void *v70;
  std::string *v71;
  __int128 v72;
  char v73[32];
  std::string v74;
  std::string v75;
  std::string __p;
  _QWORD *v77;
  char *v78;

  E5Common::MinimalCpu::MatchAllPatterns(a2, a3, (uint64_t)&v77);
  v5 = v77;
  if (v78 - (char *)v77 != 32)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CreateKernel");
    std::to_string(&v74, (v78 - (char *)v77) >> 5);
    v68 = std::string::insert(&v74, 0, "E5MinimalCpu only allows a single matched pattern, got ");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v73, 2, &v75);
    E5RT::E5RTError::E5RTError(exception, &__p, v73);
  }
  v6 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
  switch(*(_DWORD *)v5)
  {
    case 0:
      v7 = *(_QWORD *)(**v6 + 16 * *(_QWORD *)(v5[1] + 16));
      *((_BYTE *)&v75.__r_.__value_.__s + 23) = 1;
      LOWORD(v75.__r_.__value_.__l.__data_) = 120;
      ArgumentName = MIL::IROperation::GetArgumentName();
      if (*(char *)(ArgumentName + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)ArgumentName, *(_QWORD *)(ArgumentName + 8));
      }
      else
      {
        v9 = *(_OWORD *)ArgumentName;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(ArgumentName + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      *((_BYTE *)&v74.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v74, "input");
      v48 = MIL::IROperation::GetArgumentName();
      if (*(char *)(v48 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
      }
      else
      {
        v49 = *(_OWORD *)v48;
        v75.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v49;
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      v50 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
      Name = MIL::IRNamedValueType::GetName(**v50);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
      }
      else
      {
        v52 = *(_OWORD *)Name;
        v74.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v52;
      }
      v73[23] = 1;
      strcpy(v73, "x");
      ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      v54 = MIL::IRValueType::AsTensorType(ParameterType);
      v55 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 96))(v54);
      v56 = MIL::IRDimension::AsConstant(**v55);
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56);
      v73[23] = 16;
      strcpy(v73, "validate_indices");
      MIL::IROperation::GetParameterValue();
      v58 = MIL::IRValue::GetScalar<BOOL>();
      v59 = operator new(0xB0uLL);
      v59[1] = 0;
      v59[2] = 0;
      *v59 = &off_1E2DB60E0;
      v60 = E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel::InterleavedTransposeGatherNdKernel(v59 + 3, &__p, &v75, &v74, v57, v58);
      v61 = *(std::__shared_weak_count **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v60;
      *(_QWORD *)(a1 + 32) = v59;
      if (!v61)
        goto LABEL_60;
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(p_shared_owners);
      while (__stlxr(v63 - 1, p_shared_owners));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
        if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_61:
          if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_62;
          goto LABEL_66;
        }
      }
      else
      {
LABEL_60:
        if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_61;
      }
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_62:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_70;
        goto LABEL_67;
      }
LABEL_66:
      operator delete(v75.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_70;
LABEL_67:
      operator delete(__p.__r_.__value_.__l.__data_);
      v44 = (char *)v77;
      if (v77)
      {
LABEL_71:
        v64 = v78;
        v65 = v44;
        if (v78 != v44)
        {
          do
          {
            v66 = (void *)*((_QWORD *)v64 - 3);
            if (v66)
            {
              *((_QWORD *)v64 - 2) = v66;
              operator delete(v66);
            }
            v64 -= 32;
          }
          while (v64 != v44);
          v65 = (char *)v77;
        }
        v78 = v44;
        operator delete(v65);
      }
      return;
    case 1:
      v45 = operator new(0x60uLL);
      v45[1] = 0;
      v45[2] = 0;
      *v45 = &off_1E2D365E8;
      E5RT::Ops::E5MinimalCpu::ReadStateKernel::ReadStateKernel((E5RT::Ops::E5MinimalCpu::ReadStateKernel *)(v45 + 3));
      v11 = *(std::__shared_weak_count **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v46;
      *(_QWORD *)(a1 + 32) = v45;
      if (!v11)
        goto LABEL_70;
      v47 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldaxr(v47);
      while (__stlxr(v14 - 1, v47));
      goto LABEL_42;
    case 2:
      v10 = operator new(0x60uLL);
      v10[1] = 0;
      v10[2] = 0;
      *v10 = &off_1E2D36620;
      E5RT::Ops::E5MinimalCpu::WriteStateKernel::WriteStateKernel((E5RT::Ops::E5MinimalCpu::WriteStateKernel *)(v10 + 3));
      v11 = *(std::__shared_weak_count **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v10;
      if (!v11)
        goto LABEL_70;
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
LABEL_42:
      if (v14)
        goto LABEL_70;
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v44 = (char *)v77;
      if (!v77)
        return;
      goto LABEL_71;
    case 3:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "input");
      ArgumentValue = (MIL::IRValue *)MIL::IROperation::GetArgumentValue();
      v16 = MIL::IRValue::AsTensor(ArgumentValue);
      v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__p, "path");
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v17, (uint64_t)&__p);
      if (!v18)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v20 = (MIL::IRValue *)v18[5];
      v19 = v18[6];
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      v75.__r_.__value_.__l.__size_ = v19;
      if (v19)
      {
        v21 = (unint64_t *)(v19 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "offset");
      v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v17, (uint64_t)&__p);
      if (!v23)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v25 = (MIL::IRValue *)v23[5];
      v24 = v23[6];
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v74.__r_.__value_.__l.__size_ = v24;
      if (v24)
      {
        v26 = (unint64_t *)(v24 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      MIL::IRValue::AsTensor(v20);
      MIL::IRValue::GetScalar<std::string>();
      MIL::IRValue::AsTensor(v25);
      v28 = MIL::IRValue::GetScalar<unsigned long long>();
      v29 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)ArgumentValue + 32))(ArgumentValue);
      v30 = MIL::IRValueType::AsTensorType(v29);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 88))(v30);
      v32 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3);
      v33 = *v32;
      if (v32[1] == *v32)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v34 = operator new(0x98uLL);
      v34[1] = 0;
      v34[2] = 0;
      *v34 = &off_1E2D36358;
      v35 = E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel::TensorToTensorBufferLoadingWeightsKernel(v34 + 3, &__p, v28, v31, v33);
      v36 = *(std::__shared_weak_count **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v35;
      *(_QWORD *)(a1 + 32) = v34;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v74.__r_.__value_.__l.__size_)
        goto LABEL_33;
      v39 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)v74.__r_.__value_.__l.__size_ + 16))(v74.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v74.__r_.__value_.__l.__size_);
        size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
        if (!v75.__r_.__value_.__l.__size_)
          goto LABEL_70;
      }
      else
      {
LABEL_33:
        size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
        if (!v75.__r_.__value_.__l.__size_)
          goto LABEL_70;
      }
      v42 = (unint64_t *)&size->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
        v44 = (char *)v77;
        if (v77)
          goto LABEL_71;
        return;
      }
LABEL_70:
      v44 = (char *)v77;
      if (!v77)
        return;
      goto LABEL_71;
    default:
      v70 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "CreateKernel");
      std::to_string(&v74, *(_DWORD *)v5);
      v71 = std::string::insert(&v74, 0, "Pattern not recognized: ");
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v73, 2, &v75);
      E5RT::E5RTError::E5RTError(v70, &__p, v73);
  }
}

void sub_190F7159C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a28 < 0)
  {
    operator delete(a23);
    if (a21 < 0)
    {
LABEL_3:
      operator delete(__p);
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_3;
  }
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if (!v36)
    {
LABEL_10:
      std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100]((void **)(v37 - 72));
      _Unwind_Resume(a1);
    }
LABEL_9:
    __cxa_free_exception(v35);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a30);
  if ((v36 & 1) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void **std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void E5RT::Ops::E5MinimalCpuOperation::Impl::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  uint64_t InputPorts;
  uint64_t v5;
  _QWORD *i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *j;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  void *PortDescriptorRef;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void **v34;
  void **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *exception;
  _QWORD v44[3];
  _BYTE v45[8];
  void *v46[2];
  void *__p[2];
  int v48;
  E5RT::OperandDescriptor *v49;
  std::__shared_weak_count *v50;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v49, "Cannot reshape an op that is Encoded to a stream on E5MinimalCPU.");
    E5RT::Status::Status(v44, 2, &v49);
    E5RT::E5RTError::E5RTError(exception, v46, v44);
  }
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  v5 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*a1);
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)__p = 0u;
  v48 = 1065353216;
  for (i = *(_QWORD **)(InputPorts + 16); i; i = (_QWORD *)*i)
  {
    v49 = (E5RT::OperandDescriptor *)(i + 2);
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v46, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v49);
    v9 = i[5];
    v8 = i[6];
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (std::__shared_weak_count *)v7[6];
    v7[5] = v9;
    v7[6] = v8;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  for (j = *(_QWORD **)(v5 + 16); j; j = (_QWORD *)*j)
  {
    v49 = (E5RT::OperandDescriptor *)(j + 2);
    v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v46, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v49);
    v18 = j[5];
    v17 = j[6];
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = (std::__shared_weak_count *)v16[6];
    v16[5] = v18;
    v16[6] = v17;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = (uint64_t **)(a2 + 16);
  while (1)
  {
    v24 = (uint64_t **)*v24;
    if (!v24)
      break;
    v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v46, (uint64_t)(v24 + 2));
    v26 = v25;
    if (!v25)
    {
      v40 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v49, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v44, "Unknown operand name given for reshaping on E5MinimalCPU.");
      E5RT::Status::Status(v45, 2, v44);
      E5RT::E5RTError::E5RTError(v40, &v49, v45);
    }
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v25[5]);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      v41 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v49, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v44, "E5MinimalCPU op cannot reshape a surface descriptor.");
      E5RT::Status::Status(v45, 2, v44);
      E5RT::E5RTError::E5RTError(v41, &v49, v45);
    }
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v24[5]))
    {
      v42 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v49, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v44, "Unsupported surface descriptor given for reshaping on E5MinimalCPU.");
      E5RT::Status::Status(v45, 2, v44);
      E5RT::E5RTError::E5RTError(v42, &v49, v45);
    }
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v26[5], &v49);
    v28 = E5RT::OperandDescriptor::TensorDescriptor(v49);
    v29 = v50;
    if (v50)
    {
      v30 = (unint64_t *)&v50->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v24[5]);
    if (E5RT::operator!=((uint64_t)v28, (uint64_t)v32))
    {
      v33 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v49, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v44, "E5MinimalCPU cannot reshape a tensor. The operand shapes should be static.");
      E5RT::Status::Status(v45, 2, v44);
      E5RT::E5RTError::E5RTError(v33, &v49, v45);
    }
  }
  v34 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v35 = (void **)*v34;
        v36 = (std::__shared_weak_count *)v34[6];
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (*((char *)v34 + 39) < 0)
          break;
        operator delete(v34);
        v34 = v35;
        if (!v35)
          goto LABEL_46;
      }
      operator delete(v34[2]);
      operator delete(v34);
      v34 = v35;
    }
    while (v35);
  }
LABEL_46:
  v39 = v46[0];
  v46[0] = 0;
  if (v39)
    operator delete(v39);
}

void sub_190F71DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  void **v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0)
    {
LABEL_8:
      v29 = a18;
      if (a18)
      {
        do
        {
          while (1)
          {
            v30 = (void **)*v29;
            v31 = (std::__shared_weak_count *)v29[6];
            if (v31)
            {
              p_shared_owners = (unint64_t *)&v31->__shared_owners_;
              do
                v33 = __ldaxr(p_shared_owners);
              while (__stlxr(v33 - 1, p_shared_owners));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            if (*((char *)v29 + 39) < 0)
              break;
            operator delete(v29);
            v29 = v30;
            if (!v30)
              goto LABEL_18;
          }
          operator delete(v29[2]);
          operator delete(v29);
          v29 = v30;
        }
        while (v30);
      }
LABEL_18:
      v34 = a16;
      a16 = 0;
      if (v34)
        operator delete(v34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::E5MinimalCpuOperation(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26[2];

  v8 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal(a1, a2, a4, a5, a6);
  *v8 = &off_1E2D5B860;
  v9 = v8 + 37;
  v8[37] = 0;
  v10 = operator new();
  v11 = v10;
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  v26[0] = v12;
  v26[1] = (uint64_t)v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  E5RT::Ops::E5MinimalCpuOperation::Impl::Impl(v10, a1, v26);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = *v9;
  *v9 = v11;
  if (v18)
  {
    v19 = *(std::__shared_weak_count **)(v18 + 32);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)(v18 + 16);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    MEMORY[0x19401CD90](v18, 0x60C40F1115F62);
  }
  *(_QWORD *)(a1 + 232) |= 3uLL;
  return a1;
}

void sub_190F72164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::ExecutionStreamOperationInternal *v9;
  uint64_t *v10;
  uint64_t v11;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x19401CD90](v11, 0x60C40F1115F62);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::E5MinimalCpuOperation::Impl>>::~propagate_const(v10);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v9);
  _Unwind_Resume(a1);
}

void sub_190F721A0(_Unwind_Exception *a1)
{
  E5RT::ExecutionStreamOperationInternal *v1;
  uint64_t *v2;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::E5MinimalCpuOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::E5MinimalCpuOperation::Impl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40F1115F62);
  }
  return a1;
}

void E5RT::Ops::E5MinimalCpuOperation::~E5MinimalCpuOperation(E5RT::Ops::E5MinimalCpuOperation *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E2D5B860;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40F1115F62);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E2D5B860;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40F1115F62);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::GetOpCode(E5RT::Ops::E5MinimalCpuOperation *this)
{
  return 8;
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::EncodeOperation(E5RT::Ops::E5MinimalCpuOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  return kdebug_trace();
}

void sub_190F724C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::ExecuteSync(E5RT::Ops::E5MinimalCpuOperation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t InputPorts;
  uint64_t OutputPorts;
  uint64_t v6;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  v2 = *((_QWORD *)this + 37);
  v3 = *(_QWORD *)(v2 + 24);
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)v2);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v2);
  v6 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, InputPorts, OutputPorts, v6);
  return kdebug_trace();
}

void sub_190F725A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal ***a1, uint64_t a2)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  kdebug_trace();
  E5RT::Ops::E5MinimalCpuOperation::Impl::ReshapeOperationInternal(a1[37], a2);
  return kdebug_trace();
}

void sub_190F72640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::PrepareOpForEncode(E5RT::Ops::E5MinimalCpuOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190F726D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB60E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB60E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::WriteStateKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D36620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::WriteStateKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D36620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::WriteStateKernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::ReadStateKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D365E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::ReadStateKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D365E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::ReadStateKernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D36358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D36358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void E5RT::ProgramFunctionPriv::GetExternInputPorts(E5RT::ProgramFunctionPriv *this)
{
  void *exception;
  char *v2;
  __int128 v3;
  _BYTE v4[8];
  char v5[32];

  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 19;
  strcpy(v5, "GetExternInputPorts");
  v2 = (char *)operator new(0x68uLL);
  v3 = xmmword_191A7C1A0;
  strcpy(v2, "ProgramFunction GetExternInputPorts() is no longer supported. Switch to ExecutionStreamOperation.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_190F728F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_190F72954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F72944);
}

void E5RT::ProgramFunctionPriv::GetExternOutputPorts(E5RT::ProgramFunctionPriv *this)
{
  void *exception;
  char *v2;
  __int128 v3;
  _BYTE v4[8];
  char v5[32];

  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 20;
  strcpy(v5, "GetExternOutputPorts");
  v2 = (char *)operator new(0x68uLL);
  v3 = xmmword_191A7C1B0;
  strcpy(v2, "ProgramFunction GetExternOutputPorts() is no longer supported. Switch to ExecutionStreamOperation.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_190F72A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_190F72AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F72A98);
}

uint64_t E5RT::ProgramFunctionPriv::GetFunctionName(E5RT::ProgramFunctionPriv *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

void E5RT::ProgramFunctionPriv::LoadForExecution(E5RT::ProgramFunctionPriv *this)
{
  void *exception;
  char *v2;
  __int128 v3;
  _BYTE v4[8];
  char v5[32];

  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 16;
  strcpy(v5, "LoadForExecution");
  v2 = (char *)operator new(0x60uLL);
  v3 = xmmword_191A7C1C0;
  strcpy(v2, "ProgramFunction LoadForExecution() is no longer supported. Switch to ExecutionStreamOperation.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_190F72BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_190F72C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F72BF0);
}

__CFDictionary *E5RT::ProgramFunctionPriv::GetFunctionMetadata(E5RT::ProgramFunctionPriv *this)
{
  _QWORD *v2;
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  uint64_t v6;
  const char *v7;
  CFStringRef v8;
  uint64_t v9;
  const char *v10;
  CFStringRef v11;
  CFMutableArrayRef v12;
  __CFArray *v13;
  _QWORD **v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const CFDictionaryKeyCallBacks *v18;
  const CFDictionaryValueCallBacks *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __CFDictionary *v24;
  int v25;
  const __CFString *v26;
  const __CFString *v27;
  uint64_t v28;
  const char *v29;
  CFStringRef v30;
  unint64_t *v31;
  unint64_t v32;
  void *v34;
  void *exception;
  void *v36;
  void *v37;
  void *v38;
  __CFDictionary *theDict;
  _BYTE v40[8];
  _QWORD v41[2];
  _QWORD v42[3];
  _QWORD v43[3];

  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (v2[1] - *v2 != 16)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v43, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v42, "Execution of functions with multiple blocks not supported yet.");
    E5RT::Status::Status(v41, 8, v42);
    E5RT::E5RTError::E5RTError(exception, v43, v41);
  }
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v36 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v43, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v42, "Error allocating function metadata dictionary.");
    E5RT::Status::Status(v41, 3, v42);
    E5RT::E5RTError::E5RTError(v36, v43, v41);
  }
  v5 = Mutable;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  if (*(char *)(v6 + 23) >= 0)
    v7 = (const char *)v6;
  else
    v7 = *(const char **)v6;
  v8 = CFStringCreateWithCString(v3, v7, 0x8000100u);
  CFDictionarySetValue(v5, CFSTR("FunctionName"), v8);
  CFRelease(v8);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if (*(char *)(v9 + 23) >= 0)
    v10 = (const char *)v9;
  else
    v10 = *(const char **)v9;
  v11 = CFStringCreateWithCString(v3, v10, 0x8000100u);
  CFDictionarySetValue(v5, CFSTR("UserVersion"), v11);
  CFRelease(v11);
  v12 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  if (!v12)
  {
    v37 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v43, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v42, "Error allocating op metadata array.");
    E5RT::Status::Status(v41, 3, v42);
    E5RT::E5RTError::E5RTError(v37, v43, v41);
  }
  v13 = v12;
  theDict = v5;
  v14 = (_QWORD **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v14 + 16))(**v14);
  v16 = *(uint64_t **)v15;
  v17 = *(uint64_t **)(v15 + 8);
  if (*(uint64_t **)v15 != v17)
  {
    v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v20 = *v16;
      v21 = (std::__shared_weak_count *)v16[1];
      v41[0] = *v16;
      v41[1] = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v24 = CFDictionaryCreateMutable(v3, 0, v18, v19);
      if (!v24)
      {
        v34 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v43, "GetFunctionMetadata");
        std::string::basic_string[abi:ne180100]<0>(v42, "Error allocating op metadata dictionary.");
        E5RT::Status::Status(v40, 3, v42);
        E5RT::E5RTError::E5RTError(v34, v43, v40);
      }
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v26 = CFSTR("BnnsCpuInference");
      switch(v25)
      {
        case 0:
        case 6:
        case 9:
          v38 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v43, "GetFunctionMetadata");
          std::string::basic_string[abi:ne180100]<0>(v42, "Unexpected opcode type encountered.");
          E5RT::Status::Status(v40, 9, v42);
          E5RT::E5RTError::E5RTError(v38, v43, v40);
        case 1:
          CFDictionarySetValue(v24, CFSTR("OpCode"), CFSTR("AneInference"));
          v27 = CFSTR("ANE");
          goto LABEL_28;
        case 2:
          v26 = CFSTR("CpuInference");
          goto LABEL_27;
        case 3:
          v26 = CFSTR("Cast");
          goto LABEL_27;
        case 4:
          v26 = CFSTR("Quant");
          goto LABEL_27;
        case 5:
          v26 = CFSTR("Dequant");
          goto LABEL_27;
        case 7:
          v26 = CFSTR("MlcCpuInference");
          goto LABEL_27;
        case 8:
          CFDictionarySetValue(v24, CFSTR("OpCode"), CFSTR("MPSGraphInference"));
          v27 = CFSTR("GPU");
          goto LABEL_28;
        case 11:
          CFDictionarySetValue(v24, CFSTR("OpCode"), CFSTR("EirInference"));
          v27 = CFSTR("EIR");
          goto LABEL_28;
        case 12:
          goto LABEL_27;
        case 13:
          CFDictionarySetValue(v24, CFSTR("OpCode"), CFSTR("JitCall"));
          v27 = CFSTR("JIT");
          goto LABEL_28;
        case 14:
          v26 = CFSTR("E5MinimalCpu");
LABEL_27:
          CFDictionarySetValue(v24, CFSTR("OpCode"), v26);
          v27 = CFSTR("CPU");
LABEL_28:
          CFDictionarySetValue(v24, CFSTR("ComputeBackend"), v27);
          break;
        default:
          break;
      }
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      if (*(char *)(v28 + 23) >= 0)
        v29 = (const char *)v28;
      else
        v29 = *(const char **)v28;
      v30 = CFStringCreateWithCString(v3, v29, 0x8000100u);
      CFDictionarySetValue(v24, CFSTR("OpName"), v30);
      CFRelease(v30);
      CFArrayAppendValue(v13, v24);
      CFRelease(v24);
      if (v21)
      {
        v31 = (unint64_t *)&v21->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v16 += 2;
    }
    while (v16 != v17);
  }
  CFDictionarySetValue(theDict, CFSTR("Ops"), v13);
  CFRelease(v13);
  return theDict;
}

void sub_190F73230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v28)
  {
LABEL_8:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t E5RT::ProgramFunctionPriv::GetInputPortDescriptors(E5RT::ProgramFunctionPriv *this)
{
  return (uint64_t)this + 24;
}

uint64_t E5RT::ProgramFunctionPriv::GetOutputPortDescriptors(E5RT::ProgramFunctionPriv *this)
{
  return (uint64_t)this + 64;
}

uint64_t E5RT::ProgramFunctionPriv::GetInOutPortDescriptors(E5RT::ProgramFunctionPriv *this)
{
  return (uint64_t)this + 104;
}

void E5RT::ProgramFunctionPriv::GetMutableWeightSymbolNames(E5RT::ProgramFunctionPriv *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v3;
  uint64_t v4;
  const void **v5;
  const void **v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (_QWORD **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 16))(**v3);
  v5 = *(const void ***)v4;
  v6 = *(const void ***)(v4 + 8);
  while (v5 != v6)
  {
    if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v5 + 16))(*v5) != 1)
      goto LABEL_2;
    E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v5, &v15);
    v8 = v15;
    v7 = v16;
    if (!v16)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v11 = *(_QWORD *)(v8 + 56);
      v12 = *(_QWORD *)(v8 + 64);
      if (v11 == v12)
        goto LABEL_2;
    }
    else
    {
LABEL_9:
      v11 = *(_QWORD *)(v8 + 56);
      v12 = *(_QWORD *)(v8 + 64);
      if (v11 == v12)
        goto LABEL_2;
    }
    v13 = *(std::string **)(a2 + 8);
    do
    {
      while ((unint64_t)v13 >= *(_QWORD *)(a2 + 16))
      {
        v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, v11);
        *(_QWORD *)(a2 + 8) = v13;
        v11 += 24;
        if (v11 == v12)
          goto LABEL_2;
      }
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v11;
        v13->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *(_QWORD *)(a2 + 8) = ++v13;
      *(_QWORD *)(a2 + 8) = v13;
      v11 += 24;
    }
    while (v11 != v12);
LABEL_2:
    v5 += 2;
  }
}

void sub_190F7354C(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F73560(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F73574(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F73588(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F7359C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_190F735B4(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::ComputeGPUDevice::ComputeGPUDevice(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::ComputeDevice::ComputeDevice(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D5ACC8;
  result[1] = v4;
  return result;
}

{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::ComputeDevice::ComputeDevice(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D5ACC8;
  result[1] = v4;
  return result;
}

void E5RT::ComputeGPUDevice::~ComputeGPUDevice(E5RT::ComputeGPUDevice *this)
{
  id *v2;

  v2 = (id *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5ACC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {

    MEMORY[0x19401CD90](v2, 0x80C40B8603338);
  }
  E5RT::ComputeDevice::~ComputeDevice(this);
}

{
  id *v2;

  v2 = (id *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5ACC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {

    MEMORY[0x19401CD90](v2, 0x80C40B8603338);
  }
  E5RT::ComputeDevice::~ComputeDevice(this);
}

{
  id *v2;

  v2 = (id *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5ACC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {

    MEMORY[0x19401CD90](v2, 0x80C40B8603338);
  }
  E5RT::ComputeDevice::~ComputeDevice(this);
  JUMPOUT(0x19401CD90);
}

id E5RT::ComputeGPUDevice::GetMTLDevice(id **this)
{
  return *this[1];
}

uint64_t E5RT::ComputeGPUDevice::GetAllAvailableComputeGPUDevices(E5RT::ComputeGPUDevice *this)
{
  if (qword_1EE214870 != -1)
    dispatch_once(&qword_1EE214870, &unk_1E2DCC260);
  return qword_1EE214868;
}

void sub_190F737C0()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char **v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  id v32;
  void *v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  v0[2] = 0;
  *v0 = 0;
  v1 = &unk_1EE214000;
  qword_1EE214868 = (uint64_t)v0;
  v2 = MTLCreateSystemDefaultDevice();
  v3 = v2;
  if (v2)
  {
    v34[0] = v2;
    v32 = v2;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 0;
    v33 = v4;
    while (1)
    {
      if (v5 >= objc_msgSend(v4, "count"))
      {

        goto LABEL_30;
      }
      objc_msgSend(v4, "objectAtIndexedSubscript:", v5);
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = (_QWORD *)operator new();
      *v7 = v6;
      v8 = (_QWORD *)operator new();
      E5RT::ComputeDevice::ComputeDevice(v8);
      *v8 = &off_1E2D5ACC8;
      v8[1] = v7;
      v9 = (char **)v1[269];
      v11 = v9[1];
      v10 = (unint64_t)v9[2];
      if ((unint64_t)v11 < v10)
      {
        *(_QWORD *)v11 = v8;
        v9[1] = v11 + 8;
        goto LABEL_3;
      }
      v12 = v1;
      v13 = *v9;
      v14 = v11 - *v9;
      v15 = v14 >> 3;
      v16 = (v14 >> 3) + 1;
      if (v16 >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v17 = v10 - (_QWORD)v13;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v16;
      if (v18)
      {
        if (v18 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v19 = operator new(8 * v18);
        v20 = &v19[8 * v15];
        *(_QWORD *)v20 = v8;
        v21 = (uint64_t)(v20 + 8);
        if (v11 == v13)
        {
LABEL_19:
          v1 = v12;
          v4 = v33;
          *v9 = v20;
          v9[1] = (char *)v21;
          v9[2] = &v19[8 * v18];
          if (!v11)
            goto LABEL_28;
LABEL_27:
          operator delete(v11);
          goto LABEL_28;
        }
      }
      else
      {
        v19 = 0;
        v20 = (char *)(8 * v15);
        *(_QWORD *)(8 * v15) = v8;
        v21 = 8 * v15 + 8;
        if (v11 == v13)
          goto LABEL_19;
      }
      v22 = v11 - 8 - v13;
      if (v22 < 0x58)
        break;
      v23 = v11 - &v19[v14];
      v1 = v12;
      v4 = v33;
      if (v23 < 0x20)
        goto LABEL_25;
      v24 = (v22 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v26 = &v11[-v25];
      v20 -= v25;
      v27 = &v19[8 * v15 - 16];
      v28 = (__int128 *)(v11 - 16);
      v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *v28;
        *(v27 - 1) = *(v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 2;
        v29 -= 4;
      }
      while (v29);
      v11 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_25;
LABEL_26:
      v11 = *v9;
      *v9 = v20;
      v9[1] = (char *)v21;
      v9[2] = &v19[8 * v18];
      if (v11)
        goto LABEL_27;
LABEL_28:
      v3 = v32;
      v9[1] = (char *)v21;
LABEL_3:
      ++v5;
    }
    v1 = v12;
    v4 = v33;
    do
    {
LABEL_25:
      v31 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      *((_QWORD *)v20 - 1) = v31;
      v20 -= 8;
    }
    while (v11 != v13);
    goto LABEL_26;
  }
LABEL_30:

}

void sub_190F73AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id **std::unique_ptr<E5RT::ComputeGPUDeviceImpl>::~unique_ptr[abi:ne180100](id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x19401CD90](v2, 0x80C40B8603338);
  }
  return a1;
}

uint64_t E5RT::ComputeGPUDevice::GetComputeGPUDeviceForMTLDevice(void *a1)
{
  id v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v1 = a1;
  if (qword_1EE214870 == -1)
  {
    v2 = *(uint64_t **)qword_1EE214868;
    v3 = *(uint64_t **)(qword_1EE214868 + 8);
    if (*(uint64_t **)qword_1EE214868 != v3)
      goto LABEL_3;
LABEL_5:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "GetComputeGPUDeviceForMTLDevice");
    std::string::basic_string[abi:ne180100]<0>(v7, "Unable to find ComputeGPUDevice for given MTLDevice");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  dispatch_once(&qword_1EE214870, &unk_1E2DCC260);
  v2 = *(uint64_t **)qword_1EE214868;
  v3 = *(uint64_t **)(qword_1EE214868 + 8);
  if (*(uint64_t **)qword_1EE214868 == v3)
    goto LABEL_5;
LABEL_3:
  while (1)
  {
    v4 = *v2;
    if (**(id **)(*v2 + 8) == v1)
      break;
    if (++v2 == v3)
      goto LABEL_5;
  }

  return v4;
}

void sub_190F73CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t E5RT::ProgramLibraryImpl::ProgramLibraryImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  E5RT::ProgramLibraryImpl::InitializeProgramLibrary((E5RT::ProgramLibraryImpl *)a1);
  return a1;
}

void sub_190F73DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13)
{
  uint64_t v13;
  void **v14;
  char v16;

  if (*(char *)(v13 + 87) < 0)
    operator delete(*v14);
  sub_190F74B7C();
  if ((v16 & 1) == 0)
    ((void (*)(char *, uint64_t))off_1E2DCC280[a13])(&a12, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(a1);
}

__CFDictionary *E5RT::ProgramLibraryImpl::GetFunctionMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  E5RT::ProgramFunctionPriv *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __CFDictionary *result;
  __CFDictionary *v9;
  unint64_t *v10;
  unint64_t v11;
  void *exception;
  void *v13;
  _BYTE v14[8];
  _QWORD v15[2];
  _QWORD v16[3];
  _QWORD v17[3];

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>((_QWORD *)(a1 + 24), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v16, "No such function in program library.");
    E5RT::Status::Status(v15, 1, v16);
    E5RT::E5RTError::E5RTError(exception, v17, v15);
  }
  v3 = v2;
  v4 = (E5RT::ProgramFunctionPriv *)v2[5];
  v5 = (std::__shared_weak_count *)v3[6];
  v15[0] = v4;
  v15[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v4)
  {
    v13 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v16, "Invalid dynamic type.");
    E5RT::Status::Status(v14, 2, v16);
    E5RT::E5RTError::E5RTError(v13, v17, v14);
  }
  result = E5RT::ProgramFunctionPriv::GetFunctionMetadata(v4);
  v9 = result;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v9;
    }
  }
  return result;
}

void sub_190F73F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

__CFDictionary *E5RT::ProgramLibraryImpl::GetBuildInfo(E5RT::ProgramLibraryImpl *this)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  CFStringRef v10;
  const char *v11;
  CFStringRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *exception;
  _QWORD v18[3];
  _BYTE v19[8];
  uint64_t v20;
  std::__shared_weak_count *v21;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "GetBuildInfo");
    std::string::basic_string[abi:ne180100]<0>(v18, "Error allocating function build info dictionary.");
    E5RT::Status::Status(v19, 3, v18);
    E5RT::E5RTError::E5RTError(exception, &v20, v19);
  }
  v4 = Mutable;
  if (this)
  {
    v5 = *((_DWORD *)this + 4);
    if (!v5)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)this + 48))(&v20);
      v6 = v20;
      if (!v20)
        goto LABEL_16;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = MEMORY[0x10];
  }
  if (v5 != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(*(const void **)this);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 48))(&v20);
  v6 = v20;
  if (v20)
  {
LABEL_9:
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) + 16;
    while (1)
    {
      v8 = *(_QWORD *)v8;
      if (!v8)
        break;
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
      v10 = CFStringCreateWithCString(v2, v9, 0x8000100u);
      v11 = (const char *)(v8 + 40);
      if (*(char *)(v8 + 63) < 0)
        v11 = *(const char **)v11;
      v12 = CFStringCreateWithCString(v2, v11, 0x8000100u);
      CFDictionarySetValue(v4, v10, v12);
      CFRelease(v10);
      CFRelease(v12);
    }
  }
LABEL_16:
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v4;
}

void sub_190F7428C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F742A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F742B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

__CFDictionary *E5RT::ProgramLibraryImpl::GetSegmentationAnalytics(E5RT::ProgramLibraryImpl *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::string *v5;
  const std::__fs::filesystem::path *v6;
  __CFDictionary *result;
  __CFDictionary *v8;
  std::string __p;
  std::string v10;
  std::__fs::filesystem::path v11;

  if (this)
  {
    v1 = *((_DWORD *)this + 4);
    if (!v1)
    {
      v2 = *(_QWORD *)this;
      goto LABEL_7;
    }
  }
  else
  {
    v1 = MEMORY[0x10];
  }
  if (v1 != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(*(const void **)this);
LABEL_7:
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  memset(&v10, 0, sizeof(v10));
  v4 = *(unsigned __int8 *)(v3 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::string *)v3;
  else
    v5 = *(std::string **)v3;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(v3 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v10, v5, (std::string *)((char *)v5 + v4));
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)"analytics.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v10, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
LABEL_14:
  result = E5RT::ParseSegmentationAnalytics(&v11, v6);
  v8 = result;
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    return v8;
  }
  return result;
}

void sub_190F74460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::ProgramLibraryImpl::GetFunctionRef(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *exception;
  _QWORD v5[3];
  _BYTE v6[8];
  _QWORD v7[3];

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>((_QWORD *)(a1 + 24), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetFunctionRef");
    std::string::basic_string[abi:ne180100]<0>(v5, "Provided function name does not exist in program library.");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[5];
}

void sub_190F74554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::ProgramLibrary::ProgramLibrary(_QWORD *this)
{
  *this = &off_1E2D5A000;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E2D5A000;
  this[1] = 0;
  return this;
}

_QWORD *E5RT::ProgramLibrary::ProgramLibrary(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D5A000;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D5A000;
  result[1] = v2;
  return result;
}

void E5RT::ProgramLibrary::~ProgramLibrary(E5RT::ProgramLibrary *this)
{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5A000;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5A000;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5A000;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x19401CD90]();
  }
  JUMPOUT(0x19401CD90);
}

__CFDictionary *E5RT::ProgramLibrary::GetFunctionMetadata(uint64_t a1, uint64_t a2)
{
  return E5RT::ProgramLibraryImpl::GetFunctionMetadata(*(_QWORD *)(a1 + 8), a2);
}

__CFDictionary *E5RT::ProgramLibrary::GetBuildInfo(E5RT::ProgramLibraryImpl **this)
{
  return E5RT::ProgramLibraryImpl::GetBuildInfo(this[1]);
}

uint64_t E5RT::ProgramLibrary::GetFunctionRef(uint64_t a1, uint64_t a2)
{
  return E5RT::ProgramLibraryImpl::GetFunctionRef(*(_QWORD *)(a1 + 8), a2);
}

{
  return E5RT::ProgramLibraryImpl::GetFunctionRef(*(_QWORD *)(a1 + 8), a2);
}

__CFDictionary *E5RT::ProgramLibrary::GetSegmentationAnalytics(E5RT::ProgramLibraryImpl **this)
{
  return E5RT::ProgramLibraryImpl::GetSegmentationAnalytics(this[1]);
}

_QWORD *E5RT::ProgramLibraryPriv::ProgramLibraryPriv(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v8;

  *a1 = &off_1E2D5AF30;
  a1[1] = 0;
  v4 = operator new();
  v5 = *a2;
  *a2 = 0;
  v8 = v5;
  E5RT::ProgramLibraryImpl::ProgramLibraryImpl(v4, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v6 = (void **)a1[1];
  a1[1] = v4;
  if (v6)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v6);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void sub_190F747E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  E5RT::ProgramLibrary *v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  MEMORY[0x19401CD90](v11, 0x10F2C401C59B653);
  E5RT::ProgramLibrary::~ProgramLibrary(v10);
  _Unwind_Resume(a1);
}

void sub_190F74828(_Unwind_Exception *a1)
{
  E5RT::ProgramLibrary *v1;

  E5RT::ProgramLibrary::~ProgramLibrary(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT_Private::GetE5BundlePathFromProgramLibrary(E5RT_Private *this, const E5RT::ProgramLibrary *a2)
{
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  if (*(void (***)(E5RT::ProgramLibraryPriv *__hidden))this != &off_1E2D5AF30)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetE5BundlePathFromProgramLibrary");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid program library pointer provided.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return *((_QWORD *)this + 1) + 64;
}

void sub_190F74940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIKN4E5RT9E5ProgramENS_14default_deleteISB_EEEENS_10shared_ptrINS9_14SharedResourceEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSE_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIKN4E5RT9E5ProgramENS_14default_deleteISB_EEEENS_10shared_ptrINS9_14SharedResourceEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSE_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::E5Function const> &,std::allocator<E5RT::ProgramFunctionPriv>,0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2DB60A8;
  v3 = a1 + 3;
  v4 = (std::__shared_weak_count *)a2[1];
  v11 = *a2;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  E5RT::ProgramFunctionPriv::ProgramFunctionPriv(v3, &v11);
  v7 = v12;
  if (!v12)
    return a1;
  v8 = (unint64_t *)&v12->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_190F74AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;

  if (a10)
    sub_190F74BFC(a10);
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB60A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB60A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t OUTLINED_FUNCTION_32()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

BOOL sub_190F74B68()
{
  int *v0;
  int *v1;
  int v2;

  v2 = *v1;
  *v0 = *v1;
  return v2 == -1;
}

void sub_190F74B7C()
{
  void **v0;
  char *v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  int v6;
  void *v7;

  sub_190F74B54();
  if (v1)
  {
    do
    {
      v2 = *(char **)v1;
      v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 6);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          OUTLINED_FUNCTION_8(p_shared_owners);
        while (v6);
        if (!v5)
        {
          OUTLINED_FUNCTION_32();
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (v1[39] < 0)
        operator delete(*((void **)v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
  v7 = *v0;
  *v0 = 0;
  if (v7)
    operator delete(v7);
  sub_190F74B68();
  OUTLINED_FUNCTION_21();
}

void sub_190F74BFC(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  uint64_t v3;
  int v4;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    OUTLINED_FUNCTION_8(p_shared_owners);
  while (v4);
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

E5RT::OnDeviceAOTCompilerInterface *E5RT::OnDeviceAOTCompilerInterface::OnDeviceAOTCompilerInterface(E5RT::OnDeviceAOTCompilerInterface *this)
{
  std::string v3;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  E5RT::GetCurrentPlatformName(this, &v3);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(std::string *)this = v3;
  return this;
}

void sub_190F74C98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void E5RT::OnDeviceAOTCompilerInterface::MakeAOTCompilerOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  Espresso::AOT::AOTCompilerOptions *v12;
  char EnableProfiling;
  uint64_t *PreferredCpuBackends;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  _QWORD *v22;
  uint64_t CustomAneCompilerOptions;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *MilEntryPoints;
  uint64_t ComputeDeviceTypesAllowed;
  uint64_t *v29;
  uint64_t *v30;
  const std::string::value_type *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  void *exception;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  _BYTE v41[24];
  int v42;
  _BYTE v43[24];
  int v44;
  _BYTE v45[24];
  int v46;
  _BYTE v47[24];
  int v48;
  _BYTE v49[24];
  int v50;
  _BYTE v51[24];
  int v52;
  std::string v53;
  int v54;
  _QWORD v55[3];
  char v56[8];
  std::string v57;
  std::string v58;
  int v59;
  std::string __p;
  _BYTE v61[24];
  int v62;
  std::string v63;
  int v64;
  _BYTE v65[24];
  int v66;
  _BYTE v67[24];
  int v68;
  _QWORD v69[2];
  char v70;
  int v71;
  _QWORD v72[2];
  char v73;
  int v74;
  std::string v75;
  int v76;
  std::string v77;
  std::string v78;
  int v79;
  __n128 v80;
  char v81;
  std::string v82;
  std::string v83;
  _BYTE v84[24];
  int v85;
  _BYTE v86[48];

  v12 = (Espresso::AOT::AOTCompilerOptions *)operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(v12);
  *a6 = (uint64_t)v12;
  v86[47] = 2;
  strcpy(&v86[24], "e5");
  v86[23] = 21;
  strcpy(v86, "on-device-compilation");
  v84[0] = 1;
  v85 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)&v86[24], (__int128 *)v86, (uint64_t)v84);
  if (v85 != -1)
    ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v85])(&v77, v84);
  v85 = -1;
  if ((v86[23] & 0x80000000) == 0)
  {
    if ((v86[47] & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    operator delete(*(void **)&v86[24]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  operator delete(*(void **)v86);
  if ((v86[47] & 0x80000000) != 0)
    goto LABEL_8;
LABEL_5:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_6:
    v83 = *(std::string *)a2;
    goto LABEL_10;
  }
LABEL_9:
  std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_10:
  Espresso::AOT::AOTCompilerOptions::SetInput((uint64_t)v12, (__n128 *)&v83);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v83.__r_.__value_.__l.__data_);
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
LABEL_12:
    v82 = *(std::string *)a3;
    goto LABEL_15;
  }
  std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_15:
  Espresso::AOT::AOTCompilerOptions::SetOutput((uint64_t)v12, (__n128 *)&v82);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  Espresso::AOT::AOTCompilerOptions::SetMILProgram((uint64_t)v12, a5);
  v81 = 2;
  strcpy((char *)&v80, "e5");
  Espresso::AOT::AOTCompilerOptions::SetBackend((uint64_t)v12, &v80);
  if (v81 < 0)
    operator delete((void *)v80.n128_u64[0]);
  v86[47] = 2;
  strcpy(&v86[23], "\te5");
  strcpy(v86, "platforms");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v77 = *(std::string *)a1;
  v78 = v77;
  memset(&v77, 0, sizeof(v77));
  v79 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)&v86[24], (__int128 *)v86, (uint64_t)&v78);
  if (v79 != -1)
    ((void (*)(std::string *, std::string *))off_1E2DCC290[v79])(&__p, &v78);
  v79 = -1;
  if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v86[23] & 0x80000000) == 0)
      goto LABEL_26;
LABEL_32:
    operator delete(*(void **)v86);
    if ((v86[47] & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_33;
  }
  operator delete(v77.__r_.__value_.__l.__data_);
  if ((v86[23] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_26:
  if ((v86[47] & 0x80000000) == 0)
    goto LABEL_27;
LABEL_33:
  operator delete(*(void **)&v86[24]);
LABEL_27:
  EnableProfiling = E5RT::E5CompilerOptions::GetEnableProfiling(a4);
  Espresso::AOT::AOTCompilerOptions::SetBuildForProfiling((uint64_t)v12, EnableProfiling);
  PreferredCpuBackends = (uint64_t *)E5RT::E5CompilerOptions::GetPreferredCpuBackends(a4);
  v86[23] = 1;
  strcpy(v86, ",");
  E5Common::StringUtils::Join((uint64_t)v86, PreferredCpuBackends);
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  v86[23] = 3;
  strcpy(v86, "cpu");
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v77, "preferred-backend");
  if ((v86[47] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)&v86[24], *(std::string::size_type *)&v86[32]);
  else
    v75 = *(std::string *)&v86[24];
  v76 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)v86, (__int128 *)&v77, (uint64_t)&v75);
  if (v76 != -1)
    ((void (*)(std::string *, std::string *))off_1E2DCC290[v76])(&__p, &v75);
  v76 = -1;
  if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v86[23] & 0x80000000) == 0)
      goto LABEL_39;
LABEL_64:
    operator delete(*(void **)v86);
    v16 = *PreferredCpuBackends;
    v15 = PreferredCpuBackends[1];
    if (*PreferredCpuBackends != v15)
      goto LABEL_40;
LABEL_65:
    if (v16 != v15)
      goto LABEL_67;
    goto LABEL_66;
  }
  operator delete(v77.__r_.__value_.__l.__data_);
  if ((v86[23] & 0x80000000) != 0)
    goto LABEL_64;
LABEL_39:
  v16 = *PreferredCpuBackends;
  v15 = PreferredCpuBackends[1];
  if (*PreferredCpuBackends == v15)
    goto LABEL_65;
LABEL_40:
  v17 = (unsigned __int16 *)v16;
  while ((*((char *)v17 + 23) & 0x80000000) == 0)
  {
    v18 = v17;
    if (*((_BYTE *)v17 + 23) == 3)
      goto LABEL_46;
LABEL_41:
    v17 += 12;
    if (v17 == (unsigned __int16 *)v15)
    {
      v17 = (unsigned __int16 *)v15;
      goto LABEL_54;
    }
  }
  v18 = *(unsigned __int16 **)v17;
  if (*((_QWORD *)v17 + 1) != 3)
    goto LABEL_41;
LABEL_46:
  v19 = *v18;
  v20 = *((unsigned __int8 *)v18 + 2);
  if (v19 != 27757 || v20 != 99)
    goto LABEL_41;
LABEL_54:
  while (2)
  {
    if (*(char *)(v16 + 23) < 0)
    {
      v22 = *(_QWORD **)v16;
      if (*(_QWORD *)(v16 + 8) == 8)
      {
LABEL_58:
        if (*v22 == 0x736E6E622F636C6DLL)
          goto LABEL_61;
      }
    }
    else
    {
      v22 = (_QWORD *)v16;
      if (*(_BYTE *)(v16 + 23) == 8)
        goto LABEL_58;
    }
    v16 += 24;
    if (v16 != v15)
      continue;
    break;
  }
  v16 = v15;
LABEL_61:
  if (v17 == (unsigned __int16 *)v15)
  {
LABEL_66:
    if (v16 != v15)
      goto LABEL_67;
    goto LABEL_75;
  }
LABEL_67:
  v86[23] = 2;
  strcpy(v86, "e5");
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v77, "cpu-target-arch");
  v72[0] = 0x34366D7261;
  v73 = 5;
  v74 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)v86, (__int128 *)&v77, (uint64_t)v72);
  if (v74 != -1)
    ((void (*)(std::string *, _QWORD *))off_1E2DCC290[v74])(&__p, v72);
  v74 = -1;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v77.__r_.__value_.__l.__data_);
    if ((v86[23] & 0x80000000) != 0)
      goto LABEL_183;
  }
  else
  {
    if ((v86[23] & 0x80000000) == 0)
      goto LABEL_71;
LABEL_183:
    operator delete(*(void **)v86);
  }
LABEL_71:
  v86[23] = 2;
  strcpy(v86, "e5");
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v77, "cpu-target-os");
  v69[0] = 7565161;
  v70 = 3;
  v71 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)v86, (__int128 *)&v77, (uint64_t)v69);
  if (v71 != -1)
    ((void (*)(std::string *, _QWORD *))off_1E2DCC290[v71])(&__p, v69);
  v71 = -1;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v77.__r_.__value_.__l.__data_);
    if ((v86[23] & 0x80000000) != 0)
      goto LABEL_185;
  }
  else
  {
    if ((v86[23] & 0x80000000) == 0)
      goto LABEL_75;
LABEL_185:
    operator delete(*(void **)v86);
  }
LABEL_75:
  if (E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(a4))
  {
    v86[23] = 3;
    strcpy(v86, "cpu");
    *((_BYTE *)&v77.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&v77, "use-fast-reshape");
    v67[0] = 1;
    v68 = 0;
    Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)v86, (__int128 *)&v77, (uint64_t)v67);
    if (v68 != -1)
      ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v68])(&__p, v67);
    v68 = -1;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v77.__r_.__value_.__l.__data_);
      if ((v86[23] & 0x80000000) != 0)
        goto LABEL_187;
    }
    else
    {
      if ((v86[23] & 0x80000000) == 0)
        goto LABEL_80;
LABEL_187:
      operator delete(*(void **)v86);
    }
  }
LABEL_80:
  if (E5RT::E5CompilerOptions::GetForceClassicAotOldHw(a4))
  {
    v86[23] = 2;
    strcpy(v86, "e5");
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v77.__r_.__value_.__r.__words[1] = xmmword_191A71250;
    strcpy(v77.__r_.__value_.__l.__data_, "force-classic-aot-old-hw");
    v65[0] = 1;
    v66 = 0;
    Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)v86, (__int128 *)&v77, (uint64_t)v65);
    if (v66 != -1)
      ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v66])(&__p, v65);
    v66 = -1;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v77.__r_.__value_.__l.__data_);
      if ((v86[23] & 0x80000000) != 0)
        goto LABEL_189;
    }
    else
    {
      if ((v86[23] & 0x80000000) == 0)
        goto LABEL_85;
LABEL_189:
      operator delete(*(void **)v86);
    }
  }
LABEL_85:
  CustomAneCompilerOptions = E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(a4);
  v24 = *(unsigned __int8 *)(CustomAneCompilerOptions + 23);
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(CustomAneCompilerOptions + 8);
  if (v24)
  {
    v86[23] = 3;
    strcpy(v86, "ane");
    *((_BYTE *)&v77.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v77, "options");
    v25 = E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(a4);
    if (*(char *)(v25 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
    }
    else
    {
      v26 = *(_OWORD *)v25;
      v63.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 16);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v26;
    }
    v64 = 3;
    Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)v86, (__int128 *)&v77, (uint64_t)&v63);
    if (v64 != -1)
      ((void (*)(std::string *, std::string *))off_1E2DCC290[v64])(&__p, &v63);
    v64 = -1;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v77.__r_.__value_.__l.__data_);
      if ((v86[23] & 0x80000000) != 0)
        goto LABEL_107;
    }
    else
    {
      if ((v86[23] & 0x80000000) == 0)
        goto LABEL_95;
LABEL_107:
      operator delete(*(void **)v86);
    }
  }
LABEL_95:
  v86[23] = 8;
  strcpy(v86, "mpsgraph");
  strcpy((char *)&v77, "disable-type-inference");
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 22;
  v61[0] = E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(a4);
  v62 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)v86, (__int128 *)&v77, (uint64_t)v61);
  if (v62 != -1)
    ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v62])(&__p, v61);
  v62 = -1;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v77.__r_.__value_.__l.__data_);
    if ((v86[23] & 0x80000000) != 0)
      goto LABEL_105;
  }
  else
  {
    if ((v86[23] & 0x80000000) == 0)
      goto LABEL_99;
LABEL_105:
    operator delete(*(void **)v86);
  }
LABEL_99:
  MilEntryPoints = (uint64_t *)E5RT::E5CompilerOptions::GetMilEntryPoints(a4);
  if (MilEntryPoints[1] != *MilEntryPoints)
  {
    *((_BYTE *)&v77.__r_.__value_.__s + 23) = 1;
    LOWORD(v77.__r_.__value_.__l.__data_) = 44;
    E5Common::StringUtils::Join((uint64_t)&v77, MilEntryPoints);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    *((_BYTE *)&v77.__r_.__value_.__s + 23) = 3;
    LODWORD(v77.__r_.__value_.__l.__data_) = 7104877;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "entry-points");
    if ((v86[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v86, *(std::string::size_type *)&v86[8]);
    else
      v58 = *(std::string *)v86;
    v59 = 3;
    Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)&v77, (__int128 *)&__p, (uint64_t)&v58);
    if (v59 != -1)
      ((void (*)(std::string *, std::string *))off_1E2DCC290[v59])(&v57, &v58);
    v59 = -1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_180;
LABEL_113:
      if ((v86[23] & 0x80000000) != 0)
LABEL_181:
        operator delete(*(void **)v86);
    }
    else
    {
      if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_113;
LABEL_180:
      operator delete(v77.__r_.__value_.__l.__data_);
      if ((v86[23] & 0x80000000) != 0)
        goto LABEL_181;
    }
  }
  v86[23] = 0;
  v86[0] = 0;
  ComputeDeviceTypesAllowed = E5RT::E5CompilerOptions::GetComputeDeviceTypesAllowed(a4);
  v29 = *(uint64_t **)ComputeDeviceTypesAllowed;
  v30 = *(uint64_t **)(ComputeDeviceTypesAllowed + 8);
  if (*(uint64_t **)ComputeDeviceTypesAllowed != v30)
  {
    while (2)
    {
      v32 = *v29;
      if (*v29 == 4)
      {
        v31 = "ane,";
LABEL_117:
        std::string::append((std::string *)v86, v31);
      }
      else
      {
        if (v32 == 2)
        {
          v31 = "gpu,";
          goto LABEL_117;
        }
        if (v32 == 1)
        {
          v31 = "cpu,";
          goto LABEL_117;
        }
      }
      if (++v29 == v30)
        break;
      continue;
    }
  }
  if ((v86[23] & 0x80000000) == 0)
  {
    if (v86[23])
    {
      v33 = --v86[23];
      v34 = v86;
      goto LABEL_129;
    }
LABEL_190:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v57, ", ");
    v37 = std::string::insert(&v57, 0, "MakeAOTCompilerOptions");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&__p, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/E5ML/E5RT/ComputeRuntime/Src/OnDeviceAOTCompilerInterface.cpp");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v55, "No compute device types specified in E5 compiler options.");
    E5RT::Status::Status(v56, 1, v55);
    E5RT::E5RTError::E5RTError(exception, &v77, v56);
  }
  if (!*(_QWORD *)&v86[8])
    goto LABEL_190;
  v33 = *(_QWORD *)&v86[8] - 1;
  v34 = *(_BYTE **)v86;
  --*(_QWORD *)&v86[8];
LABEL_129:
  v34[v33] = 0;
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v77, "e5");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__p, "compute-units");
  if ((v86[23] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v86, *(std::string::size_type *)&v86[8]);
  else
    v53 = *(std::string *)v86;
  v54 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)&v77, (__int128 *)&__p, (uint64_t)&v53);
  if (v54 != -1)
    ((void (*)(std::string *, std::string *))off_1E2DCC290[v54])(&v57, &v53);
  v54 = -1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_164;
  }
  else
  {
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_136;
LABEL_164:
    operator delete(v77.__r_.__value_.__l.__data_);
  }
LABEL_136:
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v77, "experimental");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_191A72420;
  strcpy(__p.__r_.__value_.__l.__data_, "disable-data-dependent-shape");
  v51[0] = E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(a4);
  v52 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)&v77, (__int128 *)&__p, (uint64_t)v51);
  if (v52 != -1)
    ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v52])(&v57, v51);
  v52 = -1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_166;
  }
  else
  {
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_140;
LABEL_166:
    operator delete(v77.__r_.__value_.__l.__data_);
  }
LABEL_140:
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v77, "experimental");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_191A72440;
  strcpy(__p.__r_.__value_.__l.__data_, "enable-default-function-for-range-dim");
  v49[0] = E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(a4);
  v50 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)v12, (__int128 *)&v77, (__int128 *)&__p, (uint64_t)v49);
  if (v50 != -1)
    ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v50])(&v57, v49);
  v50 = -1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_168;
  }
  else
  {
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_144;
LABEL_168:
    operator delete(v77.__r_.__value_.__l.__data_);
  }
LABEL_144:
  v35 = *a6;
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v77, "experimental");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_191A7C2C0;
  strcpy(__p.__r_.__value_.__l.__data_, "match-e5-minimal-cpu-patterns");
  v47[0] = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(a4);
  v48 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption(v35, (__int128 *)&v77, (__int128 *)&__p, (uint64_t)v47);
  if (v48 != -1)
    ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v48])(&v57, v47);
  v48 = -1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_170;
  }
  else
  {
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_148;
LABEL_170:
    operator delete(v77.__r_.__value_.__l.__data_);
  }
LABEL_148:
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v77, "experimental");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_191A72DA0;
  strcpy(__p.__r_.__value_.__l.__data_, "match-e5-minimal-cpu-patterns-for-states");
  v45[0] = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(a4);
  v46 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption(v35, (__int128 *)&v77, (__int128 *)&__p, (uint64_t)v45);
  if (v46 != -1)
    ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v46])(&v57, v45);
  v46 = -1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_172;
  }
  else
  {
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_152;
LABEL_172:
    operator delete(v77.__r_.__value_.__l.__data_);
  }
LABEL_152:
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v77, "experimental");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&__p, "move-read-state-ops");
  v43[0] = E5RT::E5CompilerOptions::GetExperimentalMoveReadStateOps(a4);
  v44 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption(v35, (__int128 *)&v77, (__int128 *)&__p, (uint64_t)v43);
  if (v44 != -1)
    ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v44])(&v57, v43);
  v44 = -1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_174;
  }
  else
  {
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_156;
LABEL_174:
    operator delete(v77.__r_.__value_.__l.__data_);
  }
LABEL_156:
  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v77, "experimental");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__p, "shrink-quant-group");
  v41[0] = E5RT::E5CompilerOptions::GetExperimentalShrinkQuantGroup(a4);
  v42 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption(v35, (__int128 *)&v77, (__int128 *)&__p, (uint64_t)v41);
  if (v42 != -1)
    ((void (*)(std::string *, _BYTE *))off_1E2DCC290[v42])(&v57, v41);
  v42 = -1;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_160;
LABEL_176:
    operator delete(v77.__r_.__value_.__l.__data_);
    if ((v86[23] & 0x80000000) != 0)
      goto LABEL_177;
LABEL_161:
    if ((v86[47] & 0x80000000) == 0)
      return;
LABEL_178:
    operator delete(*(void **)&v86[24]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_176;
LABEL_160:
  if ((v86[23] & 0x80000000) == 0)
    goto LABEL_161;
LABEL_177:
  operator delete(*(void **)v86);
  if ((v86[47] & 0x80000000) != 0)
    goto LABEL_178;
}

void sub_190F75EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  Espresso::AOT::AOTCompilerOptions **v54;
  uint64_t v55;

  if (a54 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (*(char *)(v55 - 105) < 0)
    operator delete(*(void **)(v55 - 128));
  if (*(char *)(v55 - 81) < 0)
    operator delete(*(void **)(v55 - 104));
  std::unique_ptr<Espresso::AOT::AOTCompilerOptions>::~unique_ptr[abi:ne180100](v54);
  _Unwind_Resume(a1);
}

uint64_t std::variant<BOOL,int,float,std::string>::~variant[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E2DCC290[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

Espresso::AOT::AOTCompilerOptions **std::unique_ptr<Espresso::AOT::AOTCompilerOptions>::~unique_ptr[abi:ne180100](Espresso::AOT::AOTCompilerOptions **a1)
{
  Espresso::AOT::AOTCompilerOptions *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

uint64_t E5RT::OnDeviceAOTCompilerInterface::Compile(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4, uint64_t a5)
{
  void **v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  Espresso::AOT::AOTCompilerOptions *v15;
  void **v17;
  void **v18;
  void *__p[2];
  void *v20;
  _BYTE v21[136];
  char v22[8];
  uint64_t v23;
  _QWORD v24[2];
  void **v25;
  const Espresso::AOT::AOTCompilerOptions *v26[2];
  __int128 v27;
  __int128 v28;

  v26[1] = (const Espresso::AOT::AOTCompilerOptions *)0x2B23829400000000;
  v27 = 0u;
  v28 = 0u;
  kdebug_trace();
  E5RT::OnDeviceAOTCompilerInterface::MakeAOTCompilerOptions(a1, a2, a3, a4, a5, (uint64_t *)v26);
  Espresso::AOT::GetToolchainInfo((uint64_t)v24);
  Espresso::AOT::E5AOTCompilerBackendFactory::E5AOTCompilerBackendFactory((Espresso::AOT::E5AOTCompilerBackendFactory *)v22);
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v21, v26[0]);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, (uint64_t)v24);
  Espresso::AOT::E5AOTCompilerBackendFactory::Instantiate((const Espresso::AOT::AOTCompilerOptions *)v21, (uint64_t)__p, &v23);
  v10 = (void **)v20;
  if (v20)
  {
    do
    {
      v17 = (void **)*v10;
      if (*((char *)v10 + 63) < 0)
      {
        operator delete(v10[5]);
        if (*((char *)v10 + 39) < 0)
LABEL_17:
          operator delete(v10[2]);
      }
      else if (*((char *)v10 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v10);
      v10 = v17;
    }
    while (v17);
  }
  v11 = __p[0];
  __p[0] = 0;
  if (v11)
    operator delete(v11);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v21);
  Espresso::AOT::E5AOTCompilerBackendFactory::~E5AOTCompilerBackendFactory((Espresso::AOT::E5AOTCompilerBackendFactory *)v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  v12 = v23;
  v23 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v25;
  if (v25)
  {
    do
    {
      v18 = (void **)*v13;
      if (*((char *)v13 + 63) < 0)
      {
        operator delete(v13[5]);
        if (*((char *)v13 + 39) < 0)
LABEL_23:
          operator delete(v13[2]);
      }
      else if (*((char *)v13 + 39) < 0)
      {
        goto LABEL_23;
      }
      operator delete(v13);
      v13 = v18;
    }
    while (v18);
  }
  v14 = (void *)v24[0];
  v24[0] = 0;
  if (v14)
    operator delete(v14);
  v15 = v26[0];
  v26[0] = 0;
  if (v15)
  {
    Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v15);
    MEMORY[0x19401CD90]();
  }
  return kdebug_trace();
}

void sub_190F76500(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 144);
  *(_QWORD *)(v1 - 144) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1 - 136);
  std::unique_ptr<Espresso::AOT::AOTCompilerOptions>::~unique_ptr[abi:ne180100]((Espresso::AOT::AOTCompilerOptions **)(v1 - 96));
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_190F76574(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<Espresso::AOT::AOTCompilerOptions>::~unique_ptr[abi:ne180100]((Espresso::AOT::AOTCompilerOptions **)(v1 - 96));
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_190F76590(_Unwind_Exception *a1)
{
  uint64_t v1;

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 88));
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJbifSD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t E5RT::SharedResourcePriv<_ANEModel * {__strong}>::~SharedResourcePriv(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint8_t v14[16];
  _BYTE __p[12];
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E2D5AFF0;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "modelURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "path");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(*(id *)(a1 + 32), "programHandle");
  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "unloadModel:options:qos:error:", *(_QWORD *)(a1 + 32), v2, 21, 0);

  if ((v7 & 1) == 0)
  {
    v18 = 4;
    strcpy(__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v8 = objc_claimAutoreleasedReturnValue();
    if (v18 < 0)
      operator delete(*(void **)__p);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_190F77A0C(objc_msgSend(objc_retainAutorelease(v4), "UTF8String"), v14, v8);

  }
  v18 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v18 < 0)
  {
    operator delete(*(void **)__p);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
LABEL_11:
    v11 = objc_msgSend(objc_retainAutorelease(v4), "UTF8String");
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v11;
    v16 = 2048;
    v17 = v5;
    _os_log_impl(&dword_190DAF000, v10, OS_LOG_TYPE_INFO, "Unloaded ANE Model at path = %s with programHandle = 0x%llx\n", __p, 0x16u);
  }
LABEL_12:

  v12 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_190F767F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void E5RT::SharedResourcePriv<_ANEModel * {__strong}>::~SharedResourcePriv(uint64_t a1)
{
  E5RT::SharedResourcePriv<_ANEModel * {__strong}>::~SharedResourcePriv(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>::~SharedResourcePriv(uint64_t a1)
{
  E5RT::AneDeviceManager *AneDeviceManager;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = &off_1E2D5AF50;
  AneDeviceManager = (E5RT::AneDeviceManager *)E5RT::AneDeviceManager::GetAneDeviceManager((E5RT::AneDeviceManager *)a1);
  E5RT::AneDeviceManager::GetAneDevice(AneDeviceManager, 0, 0, &v7);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 32));
  v3 = v8;
  if (!v8)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>::~SharedResourcePriv(uint64_t a1)
{
  E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>::~SharedResourcePriv(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>::~SharedResourcePriv(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E2D5AF78;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>::~SharedResourcePriv(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E2D5AF78;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::SharedResourcePriv<E5RT::E5Program &>::~SharedResourcePriv(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E2D5AFA0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void E5RT::SharedResourcePriv<E5RT::E5Program &>::~SharedResourcePriv(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E2D5AFA0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>::~SharedResourcePriv(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2D5AFC8;
  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

{
  void *v2;

  *(_QWORD *)a1 = off_1E2D5AFC8;
  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>::~SharedResourcePriv(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2D5AFC8;
  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x19401CD90);
}

_QWORD *E5RT::SharedResource::SharedResource(_QWORD *this)
{
  *this = off_1E2D5A020;
  return this;
}

id E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(const void *a1)
{
  id *v1;

  if (!v1)
    __cxa_bad_cast();
  return v1[4];
}

void E5RT::SharedResourceFactory::GetANEDriverProgram(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Span;
  E5RT::AneDeviceManager *Length;
  E5RT::AneDeviceManager *AneDeviceManager;
  uint64_t v7;
  char *v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];
  uint64_t v17;
  std::__shared_weak_count *v18;
  _BYTE v19[64];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  E5Common::AutoMmapPtr::AutoMmapPtr(v19, a1, 1, 1, 0);
  Span = E5Common::AutoMmapPtr::GetSpan((E5Common::AutoMmapPtr *)v19);
  Length = (E5RT::AneDeviceManager *)E5Common::AutoMmapPtr::GetLength((E5Common::AutoMmapPtr *)v19);
  AneDeviceManager = (E5RT::AneDeviceManager *)E5RT::AneDeviceManager::GetAneDeviceManager(Length);
  E5RT::AneDeviceManager::GetAneDevice(AneDeviceManager, 0, 0, &v17);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, E5RT::AneDeviceManager *))(*(_QWORD *)v17 + 32))(v17, Span, Length);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "GetANEDriverProgram");
    std::string::basic_string[abi:ne180100]<0>(v14, "Failed to load ANE Program.");
    E5RT::Status::Status(v15, 9, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v8 = (char *)operator new(0x48uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB5F90;
  *((_QWORD *)v8 + 3) = &off_1E2D5AF50;
  v9 = (std::string *)(v8 + 32);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a1 + 16);
  }
  *((_QWORD *)v8 + 7) = v7;
  *((_DWORD *)v8 + 16) = 1;
  *a2 = v8 + 24;
  a2[1] = v8;
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)v19);
}

void sub_190F76DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)&a18);
  _Unwind_Resume(a1);
}

void sub_190F76E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va1);
  _Unwind_Resume(a1);
}

void sub_190F76E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va);
  _Unwind_Resume(a1);
}

void sub_190F76E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va);
  _Unwind_Resume(a1);
}

void sub_190F76E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va);
  _Unwind_Resume(a1);
}

void sub_190F76E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va);
  _Unwind_Resume(a1);
}

void sub_190F76E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
      E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void E5RT::SharedResourceFactory::GetBnnsGraphIr(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Opsets::Common *v5;
  bnns *v6;
  std::__shared_weak_count *v7;
  bnns *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  bnns *v23;
  std::__shared_weak_count *v24;
  bnns *v25;
  uint64_t v26;
  uint64_t v27;

  v5 = a2;
  MIL::Opsets::Common::CreateMILContext(v5);
  v6 = v25;
  v26 = (uint64_t)v25;
  if (v25)
  {
    v7 = (std::__shared_weak_count *)operator new();
    v8 = v25;
    v7->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
    v27 = (uint64_t)v7;
    v23 = v6;
    v24 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v27 = 0;
    v23 = 0;
    v24 = 0;
  }
  E5Common::RegisterBnnsOpsets(&v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v27;
  v22[0] = v26;
  v22[1] = v27;
  if (v27)
  {
    v15 = (unint64_t *)(v27 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  E5RT::SharedResourceFactory::GetBnnsGraphIr(a1, v5, v22, a3);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = (std::__shared_weak_count *)v27;
  if (!v27)
    goto LABEL_23;
  v20 = (unint64_t *)(v27 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);

  }
  else
  {
LABEL_23:

  }
}

void sub_190F7709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void E5RT::SharedResourceFactory::GetMPSGraphExecutable(std::string *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  std::string::size_type size;
  std::string *v7;
  void *v8;
  id v9;
  std::__fs::filesystem::path::__string_view v10;
  std::string *v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  std::basic_string_view<_CharT, _Traits>::size_type v13;
  std::__fs::filesystem::path::__string_view v14;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  unint64_t v20;
  void **v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t MILProgram;
  void *v26;
  id v27;
  std::string::size_type v28;
  std::string::size_type v29;
  void *v30;
  uint64_t *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  char *v36;
  void *exception;
  _BYTE v38[8];
  std::string __dst[2];
  std::__fs::filesystem::path v40;
  void *__p[2];
  char v42;
  std::__fs::filesystem::path v43;
  id v44;

  v5 = a2;
  v44 = 0;
  memset(&v43, 0, sizeof(v43));
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = a1;
  else
    v7 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&v43.__pn_, v7, (std::string *)((char *)v7 + size));
  v42 = 4;
  strcpy((char *)__p, "main");
  objc_msgSend(v5, "objectForKeyedSubscript:", E5Common::kMpsgGraphFunctionNameStrKey[0]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", E5Common::kMpsgGraphFunctionNameStrKey[0]);
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x19401C808](__p, objc_msgSend(v9, "UTF8String"));

  }
  v10 = std::__fs::filesystem::path::__extension(&v43);
  if (v10.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v10.__size_ >= 0x17)
  {
    v12 = (v10.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10.__size_ | 7) != 0x17)
      v12 = v10.__size_ | 7;
    v13 = v12 + 1;
    v11 = (std::string *)operator new(v12 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v10.__size_;
    __dst[0].__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    goto LABEL_15;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v10.__size_;
  v11 = __dst;
  if (v10.__size_)
LABEL_15:
    memmove(v11, v10.__data_, v10.__size_);
  v11->__r_.__value_.__s.__data_[v10.__size_] = 0;
  v40 = (std::__fs::filesystem::path)__dst[0];
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__dst, (std::string *)".mpsgraphpackage", (std::string *)"");
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14.__data_ = (const std::string_view::value_type *)__dst;
  else
    v14.__data_ = (const std::string_view::value_type *)__dst[0].__r_.__value_.__r.__words[0];
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14.__size_ = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
  else
    v14.__size_ = __dst[0].__r_.__value_.__l.__size_;
  v15 = std::__fs::filesystem::path::__compare(&v40, v14);
  if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_59:
    operator delete(v40.__pn_.__r_.__value_.__l.__data_);
    if (v15)
      goto LABEL_25;
LABEL_60:
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = (uint64_t *)a1;
    else
      v31 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    E5Common::CreateMpsGraphCompilationDescriptor((uint64_t *)__p, v5);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC7628]), "initWithMPSGraphPackageAtURL:compilationDescriptor:", v33, v34);
    v35 = v44;
    v44 = v26;

    goto LABEL_67;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_24:
  if (!v15)
    goto LABEL_60;
LABEL_25:
  memset(&v40, 0, sizeof(v40));
  v16 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v16 & 0x80u) == 0)
    v17 = a1;
  else
    v17 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v16 & 0x80u) != 0)
    v16 = a1->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&v40.__pn_, v17, (std::string *)((char *)v17 + v16));
  E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)__dst, &v40, 1);
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__pn_.__r_.__value_.__l.__data_);
  E5RT::MILProgramUtils::GetFunctionNames((E5RT::MILProgramUtils *)__dst, (std::vector<std::string> *)&v40);
  v19 = v40.__pn_.__r_.__value_.__l.__size_;
  v18 = v40.__pn_.__r_.__value_.__r.__words[0];
  if (v40.__pn_.__r_.__value_.__r.__words[0] != v40.__pn_.__r_.__value_.__l.__size_)
  {
    if (v42 >= 0)
      v20 = v42;
    else
      v20 = (unint64_t)__p[1];
    if (v42 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    while (1)
    {
      v22 = *(unsigned __int8 *)(v18 + 23);
      if ((v22 & 0x80u) == 0)
        v23 = (void *)*(unsigned __int8 *)(v18 + 23);
      else
        v23 = *(void **)(v18 + 8);
      if (v23 == (void *)v20)
      {
        if ((v22 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v18, v21, *(_QWORD *)(v18 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v18 + 23))
            break;
          v24 = 0;
          while (*(unsigned __int8 *)(v18 + v24) == *((unsigned __int8 *)v21 + v24))
          {
            if (v22 == ++v24)
              goto LABEL_50;
          }
        }
      }
      v18 += 24;
      if (v18 == v19)
        goto LABEL_51;
    }
  }
LABEL_50:
  if (v18 == v19)
LABEL_51:
    MEMORY[0x19401C808](__p, "main");
  MILProgram = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)__dst);
  E5Common::CreateMPSGraphExecutableFromMIL(MILProgram, (uint64_t *)__p, v5);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v44;
  v44 = v26;

  v28 = v40.__pn_.__r_.__value_.__r.__words[0];
  if (v40.__pn_.__r_.__value_.__r.__words[0])
  {
    v29 = v40.__pn_.__r_.__value_.__l.__size_;
    v30 = (void *)v40.__pn_.__r_.__value_.__r.__words[0];
    if (v40.__pn_.__r_.__value_.__l.__size_ != v40.__pn_.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v29 - 1) < 0)
          operator delete(*(void **)(v29 - 24));
        v29 -= 24;
      }
      while (v29 != v28);
      v30 = (void *)v40.__pn_.__r_.__value_.__r.__words[0];
    }
    v40.__pn_.__r_.__value_.__l.__size_ = v28;
    operator delete(v30);
  }
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)__dst);
LABEL_67:
  if (!v26)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "GetMPSGraphExecutable");
    std::operator+<char>();
    E5RT::Status::Status(v38, 13, &v40);
    E5RT::E5RTError::E5RTError(exception, __dst, v38);
  }
  LODWORD(__dst[0].__r_.__value_.__l.__data_) = 4;
  v36 = (char *)operator new(0x48uLL);
  std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,MPSGraphExecutable * {__strong}&,E5RT::SharedResourceType,std::allocator<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>,0>((uint64_t)v36, (__int128 *)a1, &v44, (int *)__dst);
  *a3 = v36 + 24;
  a3[1] = v36;
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
LABEL_72:
    operator delete(v43.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_70;
  }
  if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_72;
LABEL_70:

}

void sub_190F775CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  if (a31 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v34 - 73) & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v34 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v34 - 96));

  _Unwind_Resume(a1);
}

uint64_t E5RT::SharedResourcePriv<_ANEModel * {__strong}>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::SharedResourcePriv<E5RT::E5Program &>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,_ANEModel * {__strong}&,E5RT::SharedResourceType,std::allocator<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>,0>(uint64_t a1, __int128 *a2, id *a3, int *a4)
{
  int v6;
  id v7;
  std::string *v8;
  __int128 v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E2DB6070;
  v6 = *a4;
  v7 = *a3;
  *(_QWORD *)(a1 + 24) = &off_1E2D5AFF0;
  v8 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 56) = v7;
  *(_DWORD *)(a1 + 64) = v6;

  return a1;
}

void sub_190F77804(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5RT::E5Program &>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5RT::E5Program &>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5RT::E5Program &>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,MPSGraphExecutable * {__strong}&,E5RT::SharedResourceType,std::allocator<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>,0>(uint64_t a1, __int128 *a2, id *a3, int *a4)
{
  int v6;
  id v7;
  std::string *v8;
  __int128 v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E2DB6038;
  v6 = *a4;
  v7 = *a3;
  *(_QWORD *)(a1 + 24) = off_1E2D5AFC8;
  v8 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 56) = v7;
  *(_DWORD *)(a1 + 64) = v6;

  return a1;
}

void sub_190F779A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_190F77A0C(uint64_t a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "ANE Model unload failed. (Program path : %s)", buf, 0xCu);
}

uint64_t e5rt_e5_compiler_config_options_create(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCC2C0;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F77AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_config_options_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCC340;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F77BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_config_options_set_cache_bundle_location(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC3C0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F77C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_config_options_get_cache_bundle_location(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC440;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F77D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeable(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC4C0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F77E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC540;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F77F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F77F50()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F77F64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCC2C0;
  result[1] = v3;
  return result;
}

uint64_t sub_190F77F98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCC2C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F77FB4(uint64_t a1)
{
  uint64_t *v2;
  E5RT::E5CompilerConfigOptions *v3;
  uint64_t v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (uint64_t *)operator new();
    *v2 = 0;
    v3 = (E5RT::E5CompilerConfigOptions *)operator new();
    E5RT::E5CompilerConfigOptions::E5CompilerConfigOptions(v3);
    v4 = *v2;
    *v2 = (uint64_t)v3;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = 0;
    **(_QWORD **)(a1 + 8) = v2;
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F780E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F78170(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z38e5rt_e5_compiler_config_options_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z38e5rt_e5_compiler_config_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38e5rt_e5_compiler_config_options_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38e5rt_e5_compiler_config_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F781DC()
{
  return &unk_1E2DCC320;
}

void sub_190F781EC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F78200(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCC340;
  result[1] = v3;
  return result;
}

uint64_t sub_190F78234(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCC340;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F78250(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *v2;
      *v2 = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      MEMORY[0x19401CD90](v2, 0x20C4093837F09);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6FF90;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F783F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F78430(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_e5_compiler_config_options_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39e5rt_e5_compiler_config_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_e5_compiler_config_options_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_e5_compiler_config_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7849C()
{
  return &unk_1E2DCC3A0;
}

void sub_190F784AC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F784C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC3C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F784F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC3C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F78518(uint64_t a1)
{
  uint64_t *v1;
  const void *v2;
  uint64_t v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  void *__dst;
  __int128 v13;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *v1;
      v4 = strlen(*(const char **)(a1 + 16));
      if (v4 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v5 = v4;
      if (v4 >= 0x17)
      {
        v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v7 = v4 | 7;
        v8 = v7 + 1;
        p_dst = (void **)operator new(v7 + 1);
        *(_QWORD *)&v13 = v5;
        *((_QWORD *)&v13 + 1) = v8 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v13) = v4;
        p_dst = &__dst;
        if (!v4)
          goto LABEL_11;
      }
      memcpy(p_dst, v2, v5);
LABEL_11:
      *((_BYTE *)p_dst + v5) = 0;
      E5RT::E5CompilerConfigOptions::SetBundleCacheLocation(v3, (uint64_t)&__dst);
      if (SHIBYTE(v13) < 0)
        operator delete(__dst);
      return 0;
    }
    __dst = operator new(0x30uLL);
    v13 = xmmword_191A72DA0;
    strcpy((char *)__dst, "Invalid Function Argument: path is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    __dst = operator new(0x30uLL);
    v13 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190F78700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190F78750(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z57e5rt_e5_compiler_config_options_set_cache_bundle_locationE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z57e5rt_e5_compiler_config_options_set_cache_bundle_locationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z57e5rt_e5_compiler_config_options_set_cache_bundle_locationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z57e5rt_e5_compiler_config_options_set_cache_bundle_locationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F787BC()
{
  return &unk_1E2DCC420;
}

void sub_190F787CC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F787E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC440;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F78818(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC440;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F78838(uint64_t a1)
{
  const void ***v1;
  uint64_t BundleCacheLocation;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      BundleCacheLocation = E5RT::E5CompilerConfigOptions::GetBundleCacheLocation(*v1);
      result = 0;
      if (*(char *)(BundleCacheLocation + 23) < 0)
        BundleCacheLocation = *(_QWORD *)BundleCacheLocation;
      **(_QWORD **)(a1 + 16) = BundleCacheLocation;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: path is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F789C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F78A04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z57e5rt_e5_compiler_config_options_get_cache_bundle_locationE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z57e5rt_e5_compiler_config_options_get_cache_bundle_locationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z57e5rt_e5_compiler_config_options_get_cache_bundle_locationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z57e5rt_e5_compiler_config_options_get_cache_bundle_locationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F78A70()
{
  return &unk_1E2DCC4A0;
}

void sub_190F78A80()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F78A94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC4C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F78ACC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC4C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F78AEC(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerConfigOptions::SetBundleCacheAPFSPurgeable(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F78BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F78C00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z63e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeableE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z63e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeableE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z63e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeableE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z63e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeableE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F78C6C()
{
  return &unk_1E2DCC520;
}

void sub_190F78C7C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F78C90(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC540;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F78CC8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC540;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F78CE8(uint64_t a1)
{
  const void ***v1;
  char BundleCacheAPFSPurgeable;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      BundleCacheAPFSPurgeable = E5RT::E5CompilerConfigOptions::GetBundleCacheAPFSPurgeable(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = BundleCacheAPFSPurgeable;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: purgeable is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F78E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F78EA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z63e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeableE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z63e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeableE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z63e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeableE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z63e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeableE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F78F10()
{
  return &unk_1E2DCC5A0;
}

double sub_190F78F1C()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 850045863;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_QWORD *)(v0 + 112) = 0;
  qword_1EE214878 = v0;
  return result;
}

void E5RT::SharedResourceManager::AddResource(uint64_t a1, void *a2, uint64_t *a3)
{
  std::mutex *v6;
  uint64_t *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  int v13;
  void *exception;
  char *v15;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD v25[3];
  char v26[8];
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;

  v6 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::find<std::string>((_QWORD *)a1, (uint64_t)a2);
  v8 = v7;
  v27 = 0;
  v28 = 0;
  if (!v7)
  {
    v11 = 0;
    goto LABEL_16;
  }
  v9 = (std::__shared_weak_count *)v7[6];
  if (v9 && (v10 = std::__shared_weak_count::lock(v9)) != 0)
  {
    v11 = v10;
    v12 = v8[5];
    v27 = v12;
    v28 = v11;
    if (v12)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      if (v13 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "AddResource");
        std::string::basic_string[abi:ne180100]<0>(v25, "Invalid resource type. A shared resource of a different type with the specified URI already exists.");
        E5RT::Status::Status(v26, 2, v25);
        E5RT::E5RTError::E5RTError(exception, __p, v26);
      }
      goto LABEL_16;
    }
  }
  else
  {
    v11 = 0;
    v27 = 0;
    v28 = 0;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove((_QWORD *)a1, v8, (uint64_t)__p);
  v15 = (char *)__p[0];
  __p[0] = 0;
  if (v15)
  {
    if (v30)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
      if (v16)
        std::__shared_weak_count::__release_weak(v16);
      if (v15[39] < 0)
        operator delete(*((void **)v15 + 2));
    }
    operator delete(v15);
  }
LABEL_16:
  __p[0] = a2;
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (uint64_t)a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  v19 = *a3;
  v18 = a3[1];
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 16);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (std::__shared_weak_count *)v17[6];
  v17[5] = v19;
  v17[6] = v18;
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::mutex::unlock(v6);
}

void sub_190F79174(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_190F79188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::mutex *v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v6);
  _Unwind_Resume(a1);
}

void sub_190F791A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::mutex *v27;
  void *v28;
  int v29;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      std::mutex::unlock(v27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void E5RT::SharedResourceManager::GenerateConcatenatedSortedURIs(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  const void **v6;
  __int128 v7;
  const void **v8;
  __int128 v9;
  int v10;
  size_t size;
  unint64_t v12;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  const void **v22;
  const void **v23;
  void *v24;
  uint64_t v25;
  std::string v26;
  void *__p;
  const void **v28;
  uint64_t v29;
  std::string v30;
  std::string v31;
  std::string __dst;
  _QWORD v33[5];

  v33[2] = *MEMORY[0x1E0C80C00];
  __p = 0;
  v28 = 0;
  v29 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v3 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (_BYTE *)__p) >> 3));
  if (v28 == __p)
    v4 = 0;
  else
    v4 = v3;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)__p, v28, (uint64_t)&__dst, v4, 1);
  v5 = (char *)__p;
  v6 = v28;
  v25 = a2;
  if (*((char *)__p + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)__p, *((_QWORD *)__p + 1));
  }
  else
  {
    v7 = *(_OWORD *)__p;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)__p + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  }
  v8 = (const void **)(v5 + 24);
  if (v5 + 24 != (char *)v6)
  {
    do
    {
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      else
        v31 = v26;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v8, (std::string::size_type)v8[1]);
      }
      else
      {
        v9 = *(_OWORD *)v8;
        v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        size = v31.__r_.__value_.__l.__size_;
      v12 = size + 1;
      if (size + 1 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        p_dst = (std::string *)operator new(v14 + 1);
        __dst.__r_.__value_.__l.__size_ = size + 1;
        __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 1;
        if (!size)
          goto LABEL_30;
      }
      if (v10 >= 0)
        v16 = &v31;
      else
        v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
      memmove(p_dst, v16, size);
LABEL_30:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 58;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v30;
      else
        v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      else
        v18 = v30.__r_.__value_.__l.__size_;
      v19 = std::string::append(&__dst, (const std::string::value_type *)v17, v18);
      v20 = v19->__r_.__value_.__r.__words[0];
      v33[0] = v19->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_38;
      }
      else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_38;
      }
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_38:
      v26.__r_.__value_.__r.__words[0] = v20;
      v26.__r_.__value_.__l.__size_ = v33[0];
      *(std::string::size_type *)((char *)&v26.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v33 + 7);
      *((_BYTE *)&v26.__r_.__value_.__s + 23) = v21;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
LABEL_44:
          operator delete(v31.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_44;
      }
      v8 += 3;
    }
    while (v8 != v6);
  }
  *(_OWORD *)v25 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  v22 = (const void **)__p;
  *(_QWORD *)(v25 + 16) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  memset(&v26, 0, sizeof(v26));
  if (v22)
  {
    v23 = v28;
    v24 = v22;
    if (v28 != v22)
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete((void *)*(v23 - 3));
        v23 -= 3;
      }
      while (v23 != v22);
      v24 = __p;
    }
    v28 = v22;
    operator delete(v24);
  }
}

void sub_190F79558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_190F7956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_190F79584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:
      std::vector<std::string>::~vector[abi:ne180100](&a17);
      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
        std::__shared_weak_count::__release_weak(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t e5rt_buffer_object_create_from_data_pointer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCC660;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F79748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_create_as_alias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCC760;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190F79844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_get_size(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC8E0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F79918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_get_data_ptr(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC960;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F799EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_get_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC9E0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F79AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_create_from_mtlbuffer(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v8[0] = &off_1E2DCCA60;
  v8[1] = a1;
  v8[2] = v3;
  v9 = v8;
  v4 = E5RT::ExceptionSafeExecute((uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return v4;
}

void sub_190F79BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_get_mtlbuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCCAE0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F79C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F79CCC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F79CE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCC5E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F79D20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC5E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F79D48(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = 0;
    E5RT::BufferObject::AllocMemory(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24), &v13);
    v3 = v13;
    if (v13)
    {
      v4 = (_QWORD *)operator new();
      v5 = v13;
      *v4 = &unk_1E2DC3190;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = v5;
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = v3;
      v2[1] = v4;
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = 0;
      v2[1] = 0;
      if (!v6)
      {
LABEL_10:
        v9 = v13;
        v13 = 0;
        if (v9)
          (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
        result = 0;
        **(_QWORD **)(a1 + 8) = v2;
        return result;
      }
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_10;
  }
  v13 = operator new(0x30uLL);
  v14 = xmmword_191A6F7A0;
  strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
  v12 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
  return 1;
}

void sub_190F79EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F79FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_buffer_object_allocE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z24e5rt_buffer_object_allocE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_buffer_object_allocE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_buffer_object_allocE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7A010()
{
  return &unk_1E2DCC640;
}

void sub_190F7A020()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7A034(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCC660;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F7A074(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC660;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7A09C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      E5RT::BufferObject::CreateBufferFromHandle<E5RT::HeapAllocatedBufferHandle>(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v13);
      v3 = v13;
      if (v13)
      {
        v4 = (_QWORD *)operator new();
        v5 = v13;
        *v4 = &unk_1E2DC3190;
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = v5;
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = v3;
        v2[1] = v4;
        if (!v6)
          goto LABEL_11;
      }
      else
      {
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = 0;
        v2[1] = 0;
        if (!v6)
        {
LABEL_11:
          v9 = v13;
          v13 = 0;
          if (v9)
            (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
          result = 0;
          **(_QWORD **)(a1 + 8) = v2;
          return result;
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      goto LABEL_11;
    }
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A72DA0;
    strcpy((char *)v13, "Invalid Function Argument: data is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
  else
  {
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A6F7A0;
    strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
}

void sub_190F7A2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7A39C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_buffer_object_create_from_data_pointerE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z43e5rt_buffer_object_create_from_data_pointerE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_buffer_object_create_from_data_pointerE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_buffer_object_create_from_data_pointerE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7A408()
{
  return &unk_1E2DCC6C0;
}

void sub_190F7A418()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7A42C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC6E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7A464(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC6E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7A484(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = 0;
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>(*(__IOSurface **)(a1 + 16), &v13);
    v3 = v13;
    if (v13)
    {
      v4 = (_QWORD *)operator new();
      v5 = v13;
      *v4 = &unk_1E2DC3190;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = v5;
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = v3;
      v2[1] = v4;
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = 0;
      v2[1] = 0;
      if (!v6)
      {
LABEL_10:
        v9 = v13;
        v13 = 0;
        if (v9)
          (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
        result = 0;
        **(_QWORD **)(a1 + 8) = v2;
        return result;
      }
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_10;
  }
  v13 = operator new(0x30uLL);
  v14 = xmmword_191A6F7A0;
  strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
  v12 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
  return 1;
}

void sub_190F7A634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7A6DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_buffer_object_create_from_iosurfaceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_buffer_object_create_from_iosurfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_buffer_object_create_from_iosurfaceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_buffer_object_create_from_iosurfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7A748()
{
  return &unk_1E2DCC740;
}

void sub_190F7A758()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7A76C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCC760;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F7A7AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC760;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7A7D4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  E5RT::BufferObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v19;
  void *v20;
  __int128 v21;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v4 = *(E5RT::BufferObject **)v2;
      v3 = *(std::__shared_weak_count **)(v2 + 8);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v7 = (_QWORD *)operator new();
      *v7 = 0;
      v7[1] = 0;
      E5RT::BufferObject::CreateBufferAlias(v4, &v20);
      v8 = v20;
      if (v20)
      {
        v9 = (_QWORD *)operator new();
        v10 = v20;
        *v9 = &unk_1E2DC3190;
        v9[1] = 0;
        v9[2] = 0;
        v9[3] = v10;
        v20 = 0;
        v11 = (std::__shared_weak_count *)v7[1];
        *v7 = v8;
        v7[1] = v9;
        if (!v11)
          goto LABEL_14;
      }
      else
      {
        v20 = 0;
        v11 = (std::__shared_weak_count *)v7[1];
        *v7 = 0;
        v7[1] = 0;
        if (!v11)
        {
LABEL_14:
          v14 = v20;
          v20 = 0;
          if (v14)
            (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
          **(_QWORD **)(a1 + 8) = v7;
          if (v3)
          {
            v15 = (unint64_t *)&v3->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }
          }
          return 0;
        }
      }
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_14;
    }
    v20 = operator new(0x38uLL);
    v21 = xmmword_191A726A0;
    strcpy((char *)v20, "Invalid Function Argument: parent_handle is NULL.");
    v19 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v20, (uint64_t *)__p);
  }
  else
  {
    v20 = operator new(0x30uLL);
    v21 = xmmword_191A6F7A0;
    strcpy((char *)v20, "Invalid Function Argument: handle is NULL.");
    v19 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v20, (uint64_t *)__p);
  }
  if (v19 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20);
  return 1;
}

void sub_190F7AA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7AB40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_buffer_object_create_as_aliasE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_buffer_object_create_as_aliasE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_buffer_object_create_as_aliasE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_buffer_object_create_as_aliasE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7ABAC()
{
  return &unk_1E2DCC7C0;
}

void sub_190F7ABBC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F7ABD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCC7E0;
  result[1] = v3;
  return result;
}

uint64_t sub_190F7AC04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCC7E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F7AC20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190F7ADF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7AE30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z26e5rt_buffer_object_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z26e5rt_buffer_object_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z26e5rt_buffer_object_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z26e5rt_buffer_object_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7AE9C()
{
  return &unk_1E2DCC840;
}

void sub_190F7AEAC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7AEC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC860;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7AEF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC860;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7AF18(uint64_t a1)
{
  uint64_t *v1;
  void (**v3)(E5RT::IOBufferObject *__hidden);
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = E5RT::BufferObject::GetHandle<__IOSurface *>(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = v3;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FF90;
      strcpy((char *)v7, "Invalid Function Argument: surface is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7B094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7B0D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_buffer_object_get_iosurfaceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_buffer_object_get_iosurfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_buffer_object_get_iosurfaceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_buffer_object_get_iosurfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7B140()
{
  return &unk_1E2DCC8C0;
}

void sub_190F7B150()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7B164(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC8E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7B19C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC8E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7B1BC(uint64_t a1)
{
  E5RT::BufferObject **v1;
  uint64_t Size;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::BufferObject ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      Size = E5RT::BufferObject::GetSize(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = Size;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: size is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7B338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7B378(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_buffer_object_get_sizeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z27e5rt_buffer_object_get_sizeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_buffer_object_get_sizeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_buffer_object_get_sizeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7B3E4()
{
  return &unk_1E2DCC940;
}

void sub_190F7B3F4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7B408(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC960;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7B440(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC960;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7B460(uint64_t a1)
{
  E5RT::BufferObject **v1;
  uint64_t DataSpan;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::BufferObject ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      DataSpan = E5RT::BufferObject::GetDataSpan(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = DataSpan;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: data is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7B5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7B61C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_buffer_object_get_data_ptrE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z31e5rt_buffer_object_get_data_ptrE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_buffer_object_get_data_ptrE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_buffer_object_get_data_ptrE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7B688()
{
  return &unk_1E2DCC9C0;
}

void sub_190F7B698()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7B6AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCC9E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7B6E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCC9E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7B704(uint64_t a1)
{
  E5RT::BufferObject **v1;
  int BufferType;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::BufferObject ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      BufferType = E5RT::BufferObject::GetBufferType(*v1);
      result = 0;
      **(_DWORD **)(a1 + 16) = BufferType;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: type is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7B880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7B8C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_buffer_object_get_typeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z27e5rt_buffer_object_get_typeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_buffer_object_get_typeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_buffer_object_get_typeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7B92C()
{
  return &unk_1E2DCCA40;
}

uint64_t sub_190F7B938(uint64_t a1)
{

  return a1;
}

void sub_190F7B960(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F7B998(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E2DCCA60;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id sub_190F7B9DC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E2DCCA60;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void sub_190F7BA10(uint64_t a1)
{

}

void sub_190F7BA18(id *a1)
{

  operator delete(a1);
}

uint64_t sub_190F7BA40(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = 0;
    E5RT::BufferObject::CreateBufferFromHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>(*(void **)(a1 + 16), &v13);
    v3 = v13;
    if (v13)
    {
      v4 = (_QWORD *)operator new();
      v5 = v13;
      *v4 = &unk_1E2DC3190;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = v5;
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = v3;
      v2[1] = v4;
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = 0;
      v2[1] = 0;
      if (!v6)
      {
LABEL_10:
        v9 = v13;
        v13 = 0;
        if (v9)
          (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
        result = 0;
        **(_QWORD **)(a1 + 8) = v2;
        return result;
      }
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_10;
  }
  v13 = operator new(0x30uLL);
  v14 = xmmword_191A6F7A0;
  strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
  v12 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
  return 1;
}

void sub_190F7BBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7BC98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_buffer_object_create_from_mtlbufferE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_buffer_object_create_from_mtlbufferE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_buffer_object_create_from_mtlbufferE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_buffer_object_create_from_mtlbufferE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7BD04()
{
  return &unk_1E2DCCAC0;
}

void sub_190F7BD14()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7BD28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCCAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7BD60(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCCAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7BD80(uint64_t a1)
{
  uint64_t *v1;
  id v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      E5RT::BufferObject::GetHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>(*v1);
      v3 = (id)objc_claimAutoreleasedReturnValue();
      result = 0;
      **(_QWORD **)(a1 + 16) = v3;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: buffer is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7BF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7BF44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_buffer_object_get_mtlbufferE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_buffer_object_get_mtlbufferE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_buffer_object_get_mtlbufferE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_buffer_object_get_mtlbufferE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7BFB0()
{
  return &unk_1E2DCCB40;
}

uint64_t e5rt_operand_desc_retain_from_tensor_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCCB60;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7C074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_operand_desc_retain_from_surface_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCCBE0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7C148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_operand_desc_is_tensor_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCCC60;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7C21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_operand_desc_is_surface_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCCCE0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7C2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_operand_desc_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCCD60;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F7C3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F7C400()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7C414(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCCB60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7C44C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCCB60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7C46C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  char v10;
  void *v11;
  __int128 v12;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      v3 = *(uint64_t **)(a1 + 16);
      v5 = *v3;
      v4 = v3[1];
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      *v2 = v5;
      v2[1] = v4;
      **(_QWORD **)(a1 + 8) = v2;
      return 0;
    }
    else
    {
      v11 = operator new(0x30uLL);
      v12 = xmmword_191A6F7B0;
      strcpy((char *)v11, "Invalid Function Argument: tensor_desc is NULL.");
      v10 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v12) < 0)
        operator delete(v11);
      return 1;
    }
  }
  else
  {
    v11 = operator new(0x30uLL);
    v12 = xmmword_191A6F7A0;
    strcpy((char *)v11, "Invalid Function Argument: handle is NULL.");
    v10 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11);
    return 1;
  }
}

void sub_190F7C628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7C668(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_operand_desc_retain_from_tensor_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z41e5rt_operand_desc_retain_from_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_operand_desc_retain_from_tensor_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_operand_desc_retain_from_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7C6D4()
{
  return &unk_1E2DCCBC0;
}

void sub_190F7C6E4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7C6F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCCBE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7C730(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCCBE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7C750(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  char v10;
  void *v11;
  __int128 v12;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      v3 = *(uint64_t **)(a1 + 16);
      v5 = *v3;
      v4 = v3[1];
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      *v2 = v5;
      v2[1] = v4;
      **(_QWORD **)(a1 + 8) = v2;
      return 0;
    }
    else
    {
      v11 = operator new(0x38uLL);
      v12 = xmmword_191A764A0;
      strcpy((char *)v11, "Invalid Function Argument: surface_desc is NULL.");
      v10 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v12) < 0)
        operator delete(v11);
      return 1;
    }
  }
  else
  {
    v11 = operator new(0x30uLL);
    v12 = xmmword_191A6F7A0;
    strcpy((char *)v11, "Invalid Function Argument: handle is NULL.");
    v10 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11);
    return 1;
  }
}

void sub_190F7C90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7C94C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_operand_desc_retain_from_surface_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z42e5rt_operand_desc_retain_from_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_operand_desc_retain_from_surface_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_operand_desc_retain_from_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7C9B8()
{
  return &unk_1E2DCCC40;
}

void sub_190F7C9C8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7C9DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCCC60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7CA14(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCCC60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7CA34(uint64_t a1)
{
  void **v1;
  void *v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(void ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = E5RT::OperandDescriptor::TryAsTensorDescriptor(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = v3 != 0;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: answer is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7CBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7CBF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_operand_desc_is_tensor_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_operand_desc_is_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_operand_desc_is_tensor_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_operand_desc_is_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7CC64()
{
  return &unk_1E2DCCCC0;
}

void sub_190F7CC74()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7CC88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCCCE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7CCC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCCCE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7CCE0(uint64_t a1)
{
  void **v1;
  void *v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(void ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = E5RT::OperandDescriptor::TryAsSurfaceDescriptor(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = v3 != 0;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: answer is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7CE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7CEA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_operand_desc_is_surface_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z33e5rt_operand_desc_is_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_operand_desc_is_surface_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_operand_desc_is_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7CF10()
{
  return &unk_1E2DCCD40;
}

void sub_190F7CF20()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F7CF34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCCD60;
  result[1] = v3;
  return result;
}

uint64_t sub_190F7CF68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCCD60;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F7CF84(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x60C405C6656D0);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190F7D154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7D194(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_operand_desc_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z25e5rt_operand_desc_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_operand_desc_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_operand_desc_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7D200()
{
  return &unk_1E2DCCDC0;
}

uint64_t e5rt_surface_desc_create(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCCDE0;
  v8[1] = a1;
  *((_DWORD *)v8 + 4) = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190F7D2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_create_with_strides(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x38uLL);
  *v12 = &off_1E2DCCE60;
  v12[1] = a1;
  v12[2] = a5;
  v12[3] = a6;
  *((_DWORD *)v12 + 8) = a2;
  v12[5] = a3;
  v12[6] = a4;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F7D3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_create_with_strides_and_slices(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v14 = operator new(0x40uLL);
  *v14 = &off_1E2DCCEE0;
  v14[1] = a1;
  v14[2] = a5;
  v14[3] = a6;
  *((_DWORD *)v14 + 8) = a2;
  v14[5] = a3;
  v14[6] = a4;
  v14[7] = a7;
  v20 = v14;
  v15 = E5RT::ExceptionSafeExecute((uint64_t)v19);
  v16 = v20;
  if (v20 == v19)
  {
    v17 = 4;
    v16 = v19;
    goto LABEL_5;
  }
  if (v20)
  {
    v17 = 5;
LABEL_5:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  return v15;
}

void sub_190F7D500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_create_with_slices(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = operator new(0x30uLL);
  *v10 = &off_1E2DCCF60;
  v10[1] = a1;
  *((_DWORD *)v10 + 4) = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v16 = v10;
  v11 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

void sub_190F7D60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_create_from_operand_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCCFE0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7D6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_get_width(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD060;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7D7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_get_height(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD0E0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7D888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_get_plane_count(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD160;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7D95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_get_slice_count(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD1E0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7DA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_get_format(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD260;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7DB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_get_custom_row_strides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCD2E0;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F7DBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_format_to_cvpb_4cc(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD360;
  v6[1] = a2;
  v6[2] = a1;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7DCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_cvpb_4cc_to_surface_format(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD3E0;
  v6[1] = a2;
  v6[2] = a1;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F7DDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_desc_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCD460;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F7DE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F7DEB8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7DECC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCCDE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F7DF0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCCDE0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7DF34(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = 0;
    E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v13);
    v3 = v13;
    if (v13)
    {
      v4 = (_QWORD *)operator new();
      v5 = v13;
      *v4 = &unk_1E2DC32A8;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = v5;
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = v3;
      v2[1] = v4;
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = 0;
      v2[1] = 0;
      if (!v6)
      {
LABEL_10:
        v9 = v13;
        v13 = 0;
        if (v9)
          (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
        result = 0;
        **(_QWORD **)(a1 + 8) = v2;
        return result;
      }
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_10;
  }
  v13 = operator new(0x30uLL);
  v14 = xmmword_191A6F7A0;
  strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
  v12 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
  return 1;
}

void sub_190F7E0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7E190(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_surface_desc_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z24e5rt_surface_desc_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_surface_desc_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_surface_desc_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7E1FC()
{
  return &unk_1E2DCCE40;
}

void sub_190F7E20C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7E220(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DCCE60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_190F7E268(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCCE60;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7E298(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  char v14;
  void *__p;
  __int128 v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      v16 = 0uLL;
      __p = 0;
      if (v3)
      {
        if (v3 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        __p = operator new(8 * v3);
        *((_QWORD *)&v16 + 1) = (char *)__p + 8 * v3;
        memcpy(__p, v2, 8 * v3);
        *(_QWORD *)&v16 = *((_QWORD *)&v16 + 1);
      }
      v4 = (_QWORD *)operator new();
      *v4 = 0;
      v4[1] = 0;
      E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*(_DWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &__p, v13);
      v5 = v13[0];
      if (v13[0])
      {
        v6 = (_QWORD *)operator new();
        v7 = v13[0];
        *v6 = &unk_1E2DC32A8;
        v6[1] = 0;
        v6[2] = 0;
        v6[3] = v7;
        v13[0] = 0;
        v8 = (std::__shared_weak_count *)v4[1];
        *v4 = v5;
        v4[1] = v6;
        if (!v8)
          goto LABEL_14;
      }
      else
      {
        v13[0] = 0;
        v8 = (std::__shared_weak_count *)v4[1];
        *v4 = 0;
        v4[1] = 0;
        if (!v8)
        {
LABEL_14:
          v11 = v13[0];
          v13[0] = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          **(_QWORD **)(a1 + 8) = v4;
          if (__p)
          {
            *(_QWORD *)&v16 = __p;
            operator delete(__p);
          }
          return 0;
        }
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      goto LABEL_14;
    }
    __p = operator new(0x40uLL);
    v16 = xmmword_191A7D3F0;
    strcpy((char *)__p, "Invalid Function Argument: bytes_per_row_strides is NULL.");
    v14 = 10;
    strcpy((char *)v13, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v13);
    if (v14 < 0)
      operator delete((void *)v13[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 1;
  }
  else
  {
    __p = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)v13, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v13);
    if (v14 < 0)
      operator delete((void *)v13[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 1;
  }
}

void sub_190F7E554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7E614(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z37e5rt_surface_desc_create_with_stridesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z37e5rt_surface_desc_create_with_stridesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z37e5rt_surface_desc_create_with_stridesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z37e5rt_surface_desc_create_with_stridesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7E680()
{
  return &unk_1E2DCCEC0;
}

void sub_190F7E690()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7E6A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E2DCCEE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_190F7E6F4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E2DCCEE0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7E72C(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  char v14;
  void *__p;
  __int128 v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      v16 = 0uLL;
      __p = 0;
      if (v3)
      {
        if (v3 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        __p = operator new(8 * v3);
        *((_QWORD *)&v16 + 1) = (char *)__p + 8 * v3;
        memcpy(__p, v2, 8 * v3);
        *(_QWORD *)&v16 = *((_QWORD *)&v16 + 1);
      }
      v4 = (_QWORD *)operator new();
      *v4 = 0;
      v4[1] = 0;
      E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*(_DWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &__p, *(_QWORD *)(a1 + 56), v13);
      v5 = v13[0];
      if (v13[0])
      {
        v6 = (_QWORD *)operator new();
        v7 = v13[0];
        *v6 = &unk_1E2DC32A8;
        v6[1] = 0;
        v6[2] = 0;
        v6[3] = v7;
        v13[0] = 0;
        v8 = (std::__shared_weak_count *)v4[1];
        *v4 = v5;
        v4[1] = v6;
        if (!v8)
          goto LABEL_14;
      }
      else
      {
        v13[0] = 0;
        v8 = (std::__shared_weak_count *)v4[1];
        *v4 = 0;
        v4[1] = 0;
        if (!v8)
        {
LABEL_14:
          v11 = v13[0];
          v13[0] = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          **(_QWORD **)(a1 + 8) = v4;
          if (__p)
          {
            *(_QWORD *)&v16 = __p;
            operator delete(__p);
          }
          return 0;
        }
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      goto LABEL_14;
    }
    __p = operator new(0x40uLL);
    v16 = xmmword_191A7D3F0;
    strcpy((char *)__p, "Invalid Function Argument: bytes_per_row_strides is NULL.");
    v14 = 10;
    strcpy((char *)v13, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v13);
    if (v14 < 0)
      operator delete((void *)v13[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 1;
  }
  else
  {
    __p = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)v13, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v13);
    if (v14 < 0)
      operator delete((void *)v13[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 1;
  }
}

void sub_190F7E9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7EAAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_surface_desc_create_with_strides_and_slicesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z48e5rt_surface_desc_create_with_strides_and_slicesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_surface_desc_create_with_strides_and_slicesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_surface_desc_create_with_strides_and_slicesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7EB18()
{
  return &unk_1E2DCCF40;
}

void sub_190F7EB28()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7EB3C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCCF60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F7EB84(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCCF60;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7EBB4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = 0;
    E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), &v13);
    v3 = v13;
    if (v13)
    {
      v4 = (_QWORD *)operator new();
      v5 = v13;
      *v4 = &unk_1E2DC32A8;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = v5;
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = v3;
      v2[1] = v4;
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = 0;
      v2[1] = 0;
      if (!v6)
      {
LABEL_10:
        v9 = v13;
        v13 = 0;
        if (v9)
          (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
        result = 0;
        **(_QWORD **)(a1 + 8) = v2;
        return result;
      }
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_10;
  }
  v13 = operator new(0x30uLL);
  v14 = xmmword_191A6F7A0;
  strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
  v12 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
  return 1;
}

void sub_190F7ED6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7EE14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z36e5rt_surface_desc_create_with_slicesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z36e5rt_surface_desc_create_with_slicesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36e5rt_surface_desc_create_with_slicesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36e5rt_surface_desc_create_with_slicesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7EE80()
{
  return &unk_1E2DCCFC0;
}

void sub_190F7EE90()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7EEA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCCFE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7EEDC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCCFE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7EEFC(uint64_t a1)
{
  E5RT::OperandDescriptor **v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  __int128 v13;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(E5RT::OperandDescriptor ***)(a1 + 16);
    if (v2)
    {
      E5RT::OperandDescriptor::SurfaceDescriptor(*v2);
      v3 = (_QWORD *)operator new();
      *v3 = 0;
      v3[1] = 0;
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(void **)v4;
      if (*(_QWORD *)v4
      {
        v6 = *(_QWORD *)(v4 + 8);
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
      }
      else
      {
        v6 = 0;
      }
      *v3 = v5;
      v3[1] = v6;
      **(_QWORD **)(a1 + 8) = v3;
      return 0;
    }
    v12 = operator new(0x38uLL);
    v13 = xmmword_191A764A0;
    strcpy((char *)v12, "Invalid Function Argument: operand_desc is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
  }
  else
  {
    v12 = operator new(0x30uLL);
    v13 = xmmword_191A6F7A0;
    strcpy((char *)v12, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12);
  return 1;
}

void sub_190F7F0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_190F7F108(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_surface_desc_create_from_operand_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z42e5rt_surface_desc_create_from_operand_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_surface_desc_create_from_operand_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_surface_desc_create_from_operand_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7F174()
{
  return &unk_1E2DCD040;
}

void sub_190F7F184()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7F198(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD060;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7F1D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD060;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7F1F0(uint64_t a1)
{
  E5RT::SurfaceDescriptor **v1;
  uint64_t SurfaceWidth;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = SurfaceWidth;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: width is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7F36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7F3AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_surface_desc_get_widthE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z27e5rt_surface_desc_get_widthE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_surface_desc_get_widthE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_surface_desc_get_widthE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7F418()
{
  return &unk_1E2DCD0C0;
}

void sub_190F7F428()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7F43C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD0E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7F474(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD0E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7F494(uint64_t a1)
{
  E5RT::SurfaceDescriptor **v1;
  uint64_t SurfaceHeight;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = SurfaceHeight;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: height is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7F610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7F650(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_surface_desc_get_heightE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z28e5rt_surface_desc_get_heightE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_surface_desc_get_heightE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_surface_desc_get_heightE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7F6BC()
{
  return &unk_1E2DCD140;
}

void sub_190F7F6CC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7F6E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD160;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7F718(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD160;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7F738(uint64_t a1)
{
  E5RT::SurfaceDescriptor **v1;
  uint64_t SurfacePlaneCount;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      SurfacePlaneCount = E5RT::SurfaceDescriptor::GetSurfacePlaneCount(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = SurfacePlaneCount;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7B0;
      strcpy((char *)v7, "Invalid Function Argument: plane_count is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7F8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7F8F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_surface_desc_get_plane_countE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z33e5rt_surface_desc_get_plane_countE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_surface_desc_get_plane_countE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_surface_desc_get_plane_countE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7F960()
{
  return &unk_1E2DCD1C0;
}

void sub_190F7F970()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7F984(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD1E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7F9BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD1E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7F9DC(uint64_t a1)
{
  E5RT::SurfaceDescriptor **v1;
  uint64_t SurfaceSliceCount;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      SurfaceSliceCount = E5RT::SurfaceDescriptor::GetSurfaceSliceCount(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = SurfaceSliceCount;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7B0;
      strcpy((char *)v7, "Invalid Function Argument: slice_count is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7FB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7FB98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_surface_desc_get_slice_countE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z33e5rt_surface_desc_get_slice_countE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_surface_desc_get_slice_countE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_surface_desc_get_slice_countE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7FC04()
{
  return &unk_1E2DCD240;
}

void sub_190F7FC14()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7FC28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD260;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F7FC60(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD260;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7FC80(uint64_t a1)
{
  E5RT::SurfaceDescriptor **v1;
  int SurfaceFormat;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(*v1);
      result = 0;
      **(_DWORD **)(a1 + 16) = SurfaceFormat;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: format is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F7FDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F7FE3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_surface_desc_get_formatE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z28e5rt_surface_desc_get_formatE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_surface_desc_get_formatE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_surface_desc_get_formatE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F7FEA8()
{
  return &unk_1E2DCD2C0;
}

void sub_190F7FEB8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F7FECC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCD2E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F7FF0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD2E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F7FF34(uint64_t a1)
{
  E5RT::SurfaceDescriptor **v1;
  _QWORD *CustomRowStrides;
  _QWORD *v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        CustomRowStrides = (_QWORD *)E5RT::SurfaceDescriptor::TryGetCustomRowStrides(*v1);
        **(_QWORD **)(a1 + 16) = (uint64_t)(CustomRowStrides[1] - *CustomRowStrides) >> 3;
        v4 = (_QWORD *)E5RT::SurfaceDescriptor::TryGetCustomRowStrides(**(E5RT::SurfaceDescriptor ***)(a1 + 8));
        result = 0;
        **(_QWORD **)(a1 + 24) = *v4;
      }
      else
      {
        v8 = operator new(0x40uLL);
        v9 = xmmword_191A7D3F0;
        strcpy((char *)v8, "Invalid Function Argument: bytes_per_row_strides is NULL.");
        v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v9) < 0)
          operator delete(v8);
        return 1;
      }
    }
    else
    {
      v8 = operator new(0x40uLL);
      v9 = xmmword_191A7D400;
      strcpy((char *)v8, "Invalid Function Argument: bytes_per_row_strides_count is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F80184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F801C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_surface_desc_get_custom_row_stridesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_surface_desc_get_custom_row_stridesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_surface_desc_get_custom_row_stridesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_surface_desc_get_custom_row_stridesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F80234()
{
  return &unk_1E2DCD340;
}

void sub_190F80244()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F80258(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD360;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F80290(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD360;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F802B0(uint64_t a1)
{
  **(_DWORD **)(a1 + 8) = E5RT::SurfaceFormatToCVPB4cc(*(_DWORD *)(a1 + 16));
  return 0;
}

uint64_t sub_190F802E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_surface_format_to_cvpb_4ccE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z31e5rt_surface_format_to_cvpb_4ccE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_surface_format_to_cvpb_4ccE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_surface_format_to_cvpb_4ccE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8034C()
{
  return &unk_1E2DCD3C0;
}

void sub_190F8035C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F80370(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD3E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F803A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD3E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F803C8(uint64_t a1)
{
  **(_DWORD **)(a1 + 8) = E5RT::CVPB4ccToSurfaceFormat((E5RT *)*(unsigned int *)(a1 + 16));
  return 0;
}

uint64_t sub_190F803F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_cvpb_4cc_to_surface_formatE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z31e5rt_cvpb_4cc_to_surface_formatE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_cvpb_4cc_to_surface_formatE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_cvpb_4cc_to_surface_formatE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F80464()
{
  return &unk_1E2DCD440;
}

void sub_190F80474()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F80488(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCD460;
  result[1] = v3;
  return result;
}

uint64_t sub_190F804BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCD460;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F804D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x60C405C6656D0);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190F806A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F806E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_surface_desc_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z25e5rt_surface_desc_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_surface_desc_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_surface_desc_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F80754()
{
  return &unk_1E2DCD4C0;
}

uint64_t e5rt_surface_object_alloc(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCD4E0;
  v6[1] = a1;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F80820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_object_create_from_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD560;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F808F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_create_surface_object_from_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD560;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F809C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_object_get_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD5E0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F80A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_surface_object_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCD660;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F80B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F80BAC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F80BC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCD4E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F80C00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD4E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F80C28(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      E5RT::SurfaceObject::AllocSurface(**(E5RT::SurfaceDescriptor ***)(a1 + 16), *(_DWORD *)(a1 + 24), &v13);
      v3 = v13;
      if (v13)
      {
        v4 = (_QWORD *)operator new();
        v5 = v13;
        *v4 = &unk_1E2DC3200;
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = v5;
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = v3;
        v2[1] = v4;
        if (!v6)
          goto LABEL_11;
      }
      else
      {
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = 0;
        v2[1] = 0;
        if (!v6)
        {
LABEL_11:
          v9 = v13;
          v13 = 0;
          if (v9)
            (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
          result = 0;
          **(_QWORD **)(a1 + 8) = v2;
          return result;
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      goto LABEL_11;
    }
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A72DA0;
    strcpy((char *)v13, "Invalid Function Argument: desc is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
  else
  {
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A6F7A0;
    strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
}

void sub_190F80E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F80F30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_surface_object_allocE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z25e5rt_surface_object_allocE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_surface_object_allocE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_surface_object_allocE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F80F9C()
{
  return &unk_1E2DCD540;
}

void sub_190F80FAC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F80FC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F80FF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F81018(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      E5RT::SurfaceObject::CreateSurfaceFromHandle<__IOSurface *>(*(E5RT::IOSurfaceObject **)(a1 + 16), &v13);
      v3 = v13;
      if (v13)
      {
        v4 = (_QWORD *)operator new();
        v5 = v13;
        *v4 = &unk_1E2DC3200;
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = v5;
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = v3;
        v2[1] = v4;
        if (!v6)
          goto LABEL_11;
      }
      else
      {
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = 0;
        v2[1] = 0;
        if (!v6)
        {
LABEL_11:
          v9 = v13;
          v13 = 0;
          if (v9)
            (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
          result = 0;
          **(_QWORD **)(a1 + 8) = v2;
          return result;
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      goto LABEL_11;
    }
    v13 = operator new(0x38uLL);
    v14 = xmmword_191A6FF70;
    strcpy((char *)v13, "Invalid Function Argument: iosurface_handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
  else
  {
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A6F7A0;
    strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
}

void sub_190F81278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F81324(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_surface_object_create_from_iosurfaceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z41e5rt_surface_object_create_from_iosurfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_surface_object_create_from_iosurfaceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_surface_object_create_from_iosurfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F81390()
{
  return &unk_1E2DCD5C0;
}

void sub_190F813A0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F813B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD5E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F813EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD5E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8140C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(_QWORD **)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = E5RT::SurfaceObject::GetHandle<__IOSurface *>(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = v3;
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A6FF70;
      strcpy((char *)v7, "Invalid Function Argument: iosurface_handle is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F81594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F815D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_surface_object_get_iosurfaceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z33e5rt_surface_object_get_iosurfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_surface_object_get_iosurfaceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_surface_object_get_iosurfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F81640()
{
  return &unk_1E2DCD640;
}

void sub_190F81650()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F81664(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCD660;
  result[1] = v3;
  return result;
}

uint64_t sub_190F81698(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCD660;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F816B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190F81884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F818C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_surface_object_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z27e5rt_surface_object_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_surface_object_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_surface_object_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F81930()
{
  return &unk_1E2DCD6C0;
}

const char *Espresso::AOT::GetBackendName(unsigned int a1)
{
  const char *result;
  std::logic_error *exception;
  std::string *v5;
  __int128 v6;
  std::string v7;
  std::string v8;

  result = "e5";
  switch(a1)
  {
    case 0u:
      return result;
    case 1u:
      result = "nano";
      break;
    case 2u:
      result = "ane";
      break;
    case 3u:
      result = "classic_cpu";
      break;
    case 4u:
      result = "mlc";
      break;
    case 5u:
      result = "mps_graph";
      break;
    case 6u:
      result = "eir";
      break;
    case 7u:
      result = "jit_call";
      break;
    case 8u:
      result = "bnns";
      break;
    case 9u:
      result = "e5_minimal_cpu";
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v7, a1);
      v5 = std::string::insert(&v7, 0, "Unsupported backend identifier: ");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v8);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_190F81B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::GetBackendIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  std::logic_error *exception;
  std::string *v10;
  __int128 v11;
  std::string __dst;
  std::string v13;
  _QWORD v14[2];

  v14[0] = a1;
  v14[1] = a2;
  switch(a2)
  {
    case 2:
      if (*(_WORD *)a1 != 13669)
        goto LABEL_44;
      return 0;
    case 3:
      if (*(_WORD *)a1 == 28257 && *(_BYTE *)(a1 + 2) == 101)
      {
        result = 2;
      }
      else if (*(_WORD *)a1 == 27757 && *(_BYTE *)(a1 + 2) == 99)
      {
        result = 4;
      }
      else
      {
        if (*(_WORD *)a1 != 26981 || *(_BYTE *)(a1 + 2) != 114)
        {
LABEL_44:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v14);
          v10 = std::string::insert(&__dst, 0, "Unsupported backend: ");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v13.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, &v13);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        result = 6;
      }
      break;
    case 4:
      if (*(_DWORD *)a1 == 1869504878)
      {
        result = 1;
      }
      else
      {
        if (*(_DWORD *)a1 != 1936617058)
          goto LABEL_44;
        result = 8;
      }
      break;
    case 8:
      if (*(_QWORD *)a1 != 0x6C6C61635F74696ALL)
        goto LABEL_44;
      return 7;
    case 9:
      if (*(_QWORD *)a1 != 0x706172675F73706DLL || *(_BYTE *)(a1 + 8) != 104)
        goto LABEL_44;
      return 5;
    case 11:
      if (*(_QWORD *)a1 != 0x5F63697373616C63 || *(_QWORD *)(a1 + 3) != 0x7570635F63697373)
        goto LABEL_44;
      return 3;
    case 14:
      if (*(_QWORD *)a1 != 0x6D696E696D5F3565 || *(_QWORD *)(a1 + 6) != 0x7570635F6C616D69)
        goto LABEL_44;
      return 9;
    default:
      goto LABEL_44;
  }
  return result;
}

void sub_190F81E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t e5rt_tensor_desc_dtype_validate_spec(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E2DCD9E0;
  v7[1] = a3;
  v7[2] = a1 | (unint64_t)(a2 << 32);
  v8 = v7;
  v3 = E5RT::ExceptionSafeExecute((uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_190F81F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_dtype_are_equal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCDA60;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F82078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F820B4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F820C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD6E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F82100(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD6E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F82120(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  void *__p[2];
  char v5;
  void *v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (_QWORD *)operator new();
    E5RT::TensorDataType::TensorDataType(v2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
    result = 0;
    **(_QWORD **)(a1 + 8) = v2;
  }
  else
  {
    v6 = operator new(0x30uLL);
    v7 = xmmword_191A6F7A0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6);
    return 1;
  }
  return result;
}

void sub_190F82214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F82264(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_tensor_desc_dtype_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z29e5rt_tensor_desc_dtype_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_tensor_desc_dtype_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_tensor_desc_dtype_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F822D0()
{
  return &unk_1E2DCD740;
}

void sub_190F822E0()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F822F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCD760;
  result[1] = v3;
  return result;
}

uint64_t sub_190F82328(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCD760;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F82344(uint64_t a1)
{
  E5RT::TensorDataType **v1;
  uint64_t result;
  void *__p[2];
  char v5;
  void *v6;
  __int128 v7;

  v1 = *(E5RT::TensorDataType ***)(a1 + 8);
  if (v1)
  {
    if (*v1)
    {
      E5RT::TensorDataType::~TensorDataType(*v1);
      MEMORY[0x19401CD90]();
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v6 = operator new(0x30uLL);
      v7 = xmmword_191A6FF90;
      strcpy((char *)v6, "Invalid Function Argument: *handle is NULL.");
      v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
      if (v5 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v7) < 0)
        operator delete(v6);
      return 1;
    }
  }
  else
  {
    v6 = operator new(0x30uLL);
    v7 = xmmword_191A6F7A0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6);
    return 1;
  }
  return result;
}

void sub_190F824CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8250C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z30e5rt_tensor_desc_dtype_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z30e5rt_tensor_desc_dtype_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z30e5rt_tensor_desc_dtype_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z30e5rt_tensor_desc_dtype_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F82578()
{
  return &unk_1E2DCD7C0;
}

void sub_190F82588()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8259C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD7E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F825D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD7E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F825F4(uint64_t a1)
{
  E5RT::TensorDataType::Impl **v2;
  char NumComponents;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v2 = *(E5RT::TensorDataType::Impl ***)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      NumComponents = E5RT::TensorDataType::GetNumComponents(v2);
      result = 0;
      **(_BYTE **)(a1 + 16) = NumComponents;
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A6F7D0;
      strcpy((char *)v7, "Invalid Function Argument: num_components is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F82774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F827B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_tensor_desc_dtype_get_num_componentsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z41e5rt_tensor_desc_dtype_get_num_componentsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_tensor_desc_dtype_get_num_componentsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_tensor_desc_dtype_get_num_componentsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F82820()
{
  return &unk_1E2DCD840;
}

void sub_190F82830()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F82844(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD860;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F8287C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD860;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8289C(uint64_t a1)
{
  E5RT::TensorDataType::Impl **v2;
  unsigned int ElementSize;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v2 = *(E5RT::TensorDataType::Impl ***)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ElementSize = E5RT::TensorDataType::GetElementSize(v2);
      result = 0;
      **(_QWORD **)(a1 + 16) = ElementSize;
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A764A0;
      strcpy((char *)v7, "Invalid Function Argument: element_size is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F82A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F82A58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_tensor_desc_dtype_get_element_sizeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39e5rt_tensor_desc_dtype_get_element_sizeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_tensor_desc_dtype_get_element_sizeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_tensor_desc_dtype_get_element_sizeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F82AC4()
{
  return &unk_1E2DCD8C0;
}

void sub_190F82AD4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F82AE8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD8E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F82B20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD8E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F82B40(uint64_t a1)
{
  E5RT::TensorDataType::Impl **v2;
  unsigned int ComponentSize;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v2 = *(E5RT::TensorDataType::Impl ***)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ComponentSize = E5RT::TensorDataType::GetComponentSize(v2);
      result = 0;
      **(_QWORD **)(a1 + 16) = ComponentSize;
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A6F7D0;
      strcpy((char *)v7, "Invalid Function Argument: component_size is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F82CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F82D04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_tensor_desc_dtype_get_component_sizeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z41e5rt_tensor_desc_dtype_get_component_sizeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_tensor_desc_dtype_get_component_sizeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_tensor_desc_dtype_get_component_sizeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F82D70()
{
  return &unk_1E2DCD940;
}

void sub_190F82D80()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F82D94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD960;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F82DCC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD960;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F82DEC(uint64_t a1)
{
  E5RT::TensorDataType *v2;
  int ComponentDataType;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v2 = *(E5RT::TensorDataType **)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ComponentDataType = E5RT::TensorDataType::GetComponentDataType(v2);
      result = 0;
      **(_DWORD **)(a1 + 16) = ComponentDataType;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: dtype is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F82F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F82FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_tensor_desc_dtype_get_component_dtypeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z42e5rt_tensor_desc_dtype_get_component_dtypeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_tensor_desc_dtype_get_component_dtypeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_tensor_desc_dtype_get_component_dtypeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F83010()
{
  return &unk_1E2DCD9C0;
}

void sub_190F83020()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F83034(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCD9E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F8306C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCD9E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8308C(uint64_t a1)
{
  char v2;
  uint64_t result;
  void *__p[2];
  char v5;
  void *v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = E5RT::TensorDataType::ValidateDataTypeSpec(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
    result = 0;
    **(_BYTE **)(a1 + 8) = v2;
  }
  else
  {
    v6 = operator new(0x30uLL);
    v7 = xmmword_191A6FFC0;
    strcpy((char *)v6, "Invalid Function Argument: valid is NULL.");
    v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6);
    return 1;
  }
  return result;
}

void sub_190F8316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F831A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z36e5rt_tensor_desc_dtype_validate_specE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z36e5rt_tensor_desc_dtype_validate_specE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36e5rt_tensor_desc_dtype_validate_specE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36e5rt_tensor_desc_dtype_validate_specE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F83214()
{
  return &unk_1E2DCDA40;
}

void sub_190F83224()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F83238(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCDA60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F83278(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCDA60;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F832A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        v4 = E5RT::operator==(v2, v3);
        result = 0;
        **(_BYTE **)(a1 + 24) = v4;
      }
      else
      {
        v8 = operator new(0x30uLL);
        v9 = xmmword_191A6FFC0;
        strcpy((char *)v8, "Invalid Function Argument: equal is NULL.");
        v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v9) < 0)
          operator delete(v8);
        return 1;
      }
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6FF90;
      strcpy((char *)v8, "Invalid Function Argument: handle2 is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6FF90;
    strcpy((char *)v8, "Invalid Function Argument: handle1 is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F834B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F834FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_desc_dtype_are_equalE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_tensor_desc_dtype_are_equalE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_desc_dtype_are_equalE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_desc_dtype_are_equalE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F83568()
{
  return &unk_1E2DCDAC0;
}

void sub_190F83578()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8358C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCDAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F835C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCDAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F835E4(uint64_t a1)
{
  E5RT::TensorDataType *v2;
  int ComponentPack;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v2 = *(E5RT::TensorDataType **)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ComponentPack = E5RT::TensorDataType::GetComponentPack(v2);
      result = 0;
      **(_DWORD **)(a1 + 16) = ComponentPack;
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A6F7D0;
      strcpy((char *)v7, "Invalid Function Argument: component_pack is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F83764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F837A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_tensor_desc_dtype_get_component_packE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z41e5rt_tensor_desc_dtype_get_component_packE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_tensor_desc_dtype_get_component_packE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_tensor_desc_dtype_get_component_packE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F83810()
{
  return &unk_1E2DCDB40;
}

unint64_t E5RT::GetPlatformBuildVersion@<X0>(_QWORD *a1@<X8>)
{
  const char *v3;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (qword_1EE214890 != -1)
    dispatch_once(&qword_1EE214890, &unk_1E2DCDB50);
  v3 = (const char *)objc_msgSend((id)qword_1EE214898, "UTF8String");
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a1, v3, v5);
  *((_BYTE *)a1 + v5) = 0;
  return result;
}

void sub_190F838FC()
{
  uint64_t v0;
  void *v1;

  v0 = MGGetStringAnswer();
  v1 = (void *)qword_1EE214898;
  qword_1EE214898 = v0;

}

uint64_t sub_190F83924()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!(_DWORD)result)
    byte_1EE214888 = v2 != 0;
  return result;
}

uint64_t E5RT::GetPlatformFromANEInformation(E5RT *this)
{
  if (qword_1EE2148B8 == -1)
  {
    if (!byte_1EE21488A)
      return 0;
  }
  else
  {
    dispatch_once(&qword_1EE2148B8, &unk_1E2DCDBB0);
    if (!byte_1EE21488A)
      return 0;
  }
  if (qword_1EE2148A8 == -1)
  {
    if ((byte_1EE214889 & 1) != 0)
      return 0;
  }
  else
  {
    dispatch_once(&qword_1EE2148A8, &unk_1E2DCDB90);
    if ((byte_1EE214889 & 1) != 0)
      return 0;
  }
  return qword_1EE2148B0;
}

void sub_190F83A44()
{
  void *v0;
  void *v1;
  void *v2;
  __CFString *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CFDF48], "aneSubType");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFDF48], "aneSubTypeVariant");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFDF48], "aneSubTypeProductVariant");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringByAppendingString:", v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingString:", v1);
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (CFStringCompare(v3, CFSTR("h11"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 32800;
LABEL_31:
    v4[278] = v5;
    goto LABEL_32;
  }
  if (CFStringCompare(v3, CFSTR("m9"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 32774;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h12"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 32816;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h13"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33025;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h13g"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33027;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h14"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33040;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h14g"), 0) == kCFCompareEqualTo)
    goto LABEL_23;
  if (CFStringCompare(v3, CFSTR("h15"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33056;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h15g"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33058;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h16"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33072;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h16g"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33074;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h17"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33088;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("h14g.n301"), 0) == kCFCompareEqualTo)
  {
LABEL_23:
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33042;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("m11"), 0) == kCFCompareEqualTo)
  {
    v4 = (_QWORD *)&unk_1EE214000;
    v5 = 33552;
    goto LABEL_31;
  }
  if (CFStringCompare(v3, CFSTR("m10"), 0) == kCFCompareEqualTo)
  {
    v4 = &unk_1EE214000;
    v5 = 33537;
    goto LABEL_31;
  }
  byte_1EE214889 = 1;
LABEL_32:

}

void sub_190F83CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_190F83D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_190F83D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_190F83D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_190F83D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void E5RT::GetCurrentPlatformName(E5RT *this@<X0>, std::string *a2@<X8>)
{
  E5Common::E5PlatformManager *PlatformFromANEInformation;
  char v4;
  E5Common::E5PlatformManager *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  E5Common::E5PlatformManager *v9;
  int v10;

  if (qword_1EE2148A0 != -1)
  {
    dispatch_once(&qword_1EE2148A0, &unk_1E2DCDB70);
    if (!byte_1EE214888)
      goto LABEL_3;
LABEL_14:
    PlatformFromANEInformation = (E5Common::E5PlatformManager *)E5RT::GetPlatformFromANEInformation(this);
    goto LABEL_6;
  }
  if (byte_1EE214888)
    goto LABEL_14;
LABEL_3:
  if (E5RT::GetChipID(void)::onceToken != -1)
    dispatch_once(&E5RT::GetChipID(void)::onceToken, &unk_1E2DCDBD0);
  PlatformFromANEInformation = E5RT::GetPlatformFromChipID((E5RT *)E5RT::GetChipID(void)::chipID);
LABEL_6:
  if (v4)
    v5 = PlatformFromANEInformation;
  else
    v5 = 0;
  v9 = v5;
  v10 = 0;
  v6 = E5Common::E5PlatformManager::Instance(PlatformFromANEInformation);
  v7 = (*(uint64_t (**)(uint64_t, E5Common::E5PlatformManager **))(*(_QWORD *)v6 + 24))(v6, &v9);
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v9);
}

void sub_190F83E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_190F83E9C()
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CFDF48], "hasANE");
  byte_1EE21488A = result;
  return result;
}

uint64_t sub_190F83EC0()
{
  uint64_t result;

  result = MGGetSInt64Answer();
  E5RT::GetChipID(void)::chipID = result;
  return result;
}

uint64_t e5rt_tensor_desc_create_with_alignments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = operator new(0x30uLL);
  *v10 = &off_1E2DCDC80;
  v10[1] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a5;
  v10[5] = a4;
  v16 = v10;
  v11 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

void sub_190F83FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_create_with_strides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = operator new(0x30uLL);
  *v10 = &off_1E2DCDD00;
  v10[1] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a5;
  v10[5] = a4;
  v16 = v10;
  v11 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

void sub_190F840C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_create_from_operand_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCDD80;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F84194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_create_memory_object(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCDE80;
  v8[1] = a1;
  v8[2] = a4;
  *((_DWORD *)v8 + 6) = a2;
  v8[4] = a3;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190F84294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_get_rank(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCE000;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F84368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_get_byte_offset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCE100;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a4;
  v8[4] = a3;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190F84464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_get_dimension_length(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCE200;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F84558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_get_dimension_stride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCE280;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F8464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_create_slice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCE300;
  v8[1] = a1;
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190F84748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_create_slice_with_lengths(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = operator new(0x30uLL);
  *v10 = &off_1E2DCE380;
  v10[1] = a1;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a2;
  v10[5] = a5;
  v16 = v10;
  v11 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

void sub_190F84850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_get_num_elements(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCE400;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F84924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_has_known_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCE480;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F849F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F84A34()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F84A48(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCDC00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F84A88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCDC00;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F84AB0(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  char v14;
  void *__p;
  __int128 v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        v3 = *(_QWORD *)(a1 + 32);
        v16 = 0uLL;
        __p = 0;
        if (v3)
        {
          if (v3 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          __p = operator new(8 * v3);
          *((_QWORD *)&v16 + 1) = (char *)__p + 8 * v3;
          memcpy(__p, v2, 8 * v3);
          *(_QWORD *)&v16 = *((_QWORD *)&v16 + 1);
        }
        v4 = (_QWORD *)operator new();
        *v4 = 0;
        v4[1] = 0;
        E5RT::TensorDescriptor::CreateTensorDesc(*(E5RT::TensorDataType::Impl ***)(a1 + 24), (uint64_t *)&__p, v13);
        v5 = v13[0];
        if (v13[0])
        {
          v6 = (_QWORD *)operator new();
          v7 = v13[0];
          *v6 = &unk_1E2DC3270;
          v6[1] = 0;
          v6[2] = 0;
          v6[3] = v7;
          v13[0] = 0;
          v8 = (std::__shared_weak_count *)v4[1];
          *v4 = v5;
          v4[1] = v6;
          if (!v8)
            goto LABEL_15;
        }
        else
        {
          v13[0] = 0;
          v8 = (std::__shared_weak_count *)v4[1];
          *v4 = 0;
          v4[1] = 0;
          if (!v8)
          {
LABEL_15:
            v11 = v13[0];
            v13[0] = 0;
            if (v11)
              (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            **(_QWORD **)(a1 + 8) = v4;
            if (__p)
            {
              *(_QWORD *)&v16 = __p;
              operator delete(__p);
            }
            return 0;
          }
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        goto LABEL_15;
      }
      __p = operator new(0x30uLL);
      v16 = xmmword_191A6FFC0;
      strcpy((char *)__p, "Invalid Function Argument: dtype is NULL.");
      v14 = 10;
      strcpy((char *)v13, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v13);
      if (v14 < 0)
        operator delete((void *)v13[0]);
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      return 1;
    }
    else
    {
      __p = operator new(0x30uLL);
      v16 = xmmword_191A6FF90;
      strcpy((char *)__p, "Invalid Function Argument: lengths is NULL.");
      v14 = 10;
      strcpy((char *)v13, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v13);
      if (v14 < 0)
        operator delete((void *)v13[0]);
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      return 1;
    }
  }
  else
  {
    __p = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)v13, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v13);
    if (v14 < 0)
      operator delete((void *)v13[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 1;
  }
}

void sub_190F84E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F84EC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_tensor_desc_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z23e5rt_tensor_desc_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_tensor_desc_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_tensor_desc_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F84F34()
{
  return &unk_1E2DCDC60;
}

void sub_190F84F44()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F84F58(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCDC80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F84FA0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCDC80;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F84FD0(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  void *v19;
  __int128 v20;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *(const void **)(a1 + 24);
      if (v3)
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v4 = *(_QWORD *)(a1 + 40);
          v20 = 0uLL;
          v19 = 0;
          if (v4)
          {
            if (v4 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v5 = (char *)operator new(8 * v4);
            v6 = &v5[8 * v4];
            v19 = v5;
            *((_QWORD *)&v20 + 1) = v6;
            memcpy(v5, v2, 8 * v4);
            *(_QWORD *)&v20 = v6;
            *(_QWORD *)&__p = operator new(8 * v4);
            v18 = __p + 8 * v4;
            memcpy((void *)__p, v3, 8 * v4);
            *((_QWORD *)&__p + 1) = v18;
          }
          else
          {
            __p = 0uLL;
            v18 = 0;
          }
          v7 = (_QWORD *)operator new();
          *v7 = 0;
          v7[1] = 0;
          E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments(*(E5RT::TensorDataType::Impl ***)(a1 + 32), (uint64_t *)&v19, &__p, &v16);
          v8 = v16;
          if (v16)
          {
            v9 = (_QWORD *)operator new();
            v10 = v16;
            *v9 = &unk_1E2DC3270;
            v9[1] = 0;
            v9[2] = 0;
            v9[3] = v10;
            v16 = 0;
            v11 = (std::__shared_weak_count *)v7[1];
            *v7 = v8;
            v7[1] = v9;
            if (!v11)
              goto LABEL_17;
          }
          else
          {
            v16 = 0;
            v11 = (std::__shared_weak_count *)v7[1];
            *v7 = 0;
            v7[1] = 0;
            if (!v11)
            {
LABEL_17:
              v14 = v16;
              v16 = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
              **(_QWORD **)(a1 + 8) = v7;
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (v19)
              {
                *(_QWORD *)&v20 = v19;
                operator delete(v19);
              }
              return 0;
            }
          }
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          goto LABEL_17;
        }
        v19 = operator new(0x30uLL);
        v20 = xmmword_191A6FFC0;
        strcpy((char *)v19, "Invalid Function Argument: dtype is NULL.");
        HIBYTE(v18) = 10;
        strcpy((char *)&__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
      }
      else
      {
        v19 = operator new(0x30uLL);
        v20 = xmmword_191A6F7C0;
        strcpy((char *)v19, "Invalid Function Argument: alignments is NULL.");
        HIBYTE(v18) = 10;
        strcpy((char *)&__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
      }
    }
    else
    {
      v19 = operator new(0x30uLL);
      v20 = xmmword_191A6FF90;
      strcpy((char *)v19, "Invalid Function Argument: lengths is NULL.");
      HIBYTE(v18) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
    }
  }
  else
  {
    v19 = operator new(0x30uLL);
    v20 = xmmword_191A6F7A0;
    strcpy((char *)v19, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
  }
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
  return 1;
}

void sub_190F85384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F85468(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_tensor_desc_create_with_alignmentsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39e5rt_tensor_desc_create_with_alignmentsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_tensor_desc_create_with_alignmentsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_tensor_desc_create_with_alignmentsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F854D4()
{
  return &unk_1E2DCDCE0;
}

void sub_190F854E4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F854F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCDD00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F85540(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCDD00;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F85570(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  void *v19;
  __int128 v20;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *(const void **)(a1 + 24);
      if (v3)
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v4 = *(_QWORD *)(a1 + 40);
          v20 = 0uLL;
          v19 = 0;
          if (v4)
          {
            if (v4 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v5 = (char *)operator new(8 * v4);
            v6 = &v5[8 * v4];
            v19 = v5;
            *((_QWORD *)&v20 + 1) = v6;
            memcpy(v5, v2, 8 * v4);
            *(_QWORD *)&v20 = v6;
            *(_QWORD *)&__p = operator new(8 * v4);
            v18 = __p + 8 * v4;
            memcpy((void *)__p, v3, 8 * v4);
            *((_QWORD *)&__p + 1) = v18;
          }
          else
          {
            __p = 0uLL;
            v18 = 0;
          }
          v7 = (_QWORD *)operator new();
          *v7 = 0;
          v7[1] = 0;
          E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(*(E5RT::TensorDataType::Impl ***)(a1 + 32), (uint64_t *)&v19, &__p, &v16);
          v8 = v16;
          if (v16)
          {
            v9 = (_QWORD *)operator new();
            v10 = v16;
            *v9 = &unk_1E2DC3270;
            v9[1] = 0;
            v9[2] = 0;
            v9[3] = v10;
            v16 = 0;
            v11 = (std::__shared_weak_count *)v7[1];
            *v7 = v8;
            v7[1] = v9;
            if (!v11)
              goto LABEL_17;
          }
          else
          {
            v16 = 0;
            v11 = (std::__shared_weak_count *)v7[1];
            *v7 = 0;
            v7[1] = 0;
            if (!v11)
            {
LABEL_17:
              v14 = v16;
              v16 = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
              **(_QWORD **)(a1 + 8) = v7;
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (v19)
              {
                *(_QWORD *)&v20 = v19;
                operator delete(v19);
              }
              return 0;
            }
          }
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          goto LABEL_17;
        }
        v19 = operator new(0x30uLL);
        v20 = xmmword_191A6FFC0;
        strcpy((char *)v19, "Invalid Function Argument: dtype is NULL.");
        HIBYTE(v18) = 10;
        strcpy((char *)&__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
      }
      else
      {
        v19 = operator new(0x30uLL);
        v20 = xmmword_191A6FF90;
        strcpy((char *)v19, "Invalid Function Argument: strides is NULL.");
        HIBYTE(v18) = 10;
        strcpy((char *)&__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
      }
    }
    else
    {
      v19 = operator new(0x30uLL);
      v20 = xmmword_191A6FF90;
      strcpy((char *)v19, "Invalid Function Argument: lengths is NULL.");
      HIBYTE(v18) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
    }
  }
  else
  {
    v19 = operator new(0x30uLL);
    v20 = xmmword_191A6F7A0;
    strcpy((char *)v19, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
  }
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
  return 1;
}

void sub_190F85924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F85A08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z36e5rt_tensor_desc_create_with_stridesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z36e5rt_tensor_desc_create_with_stridesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36e5rt_tensor_desc_create_with_stridesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36e5rt_tensor_desc_create_with_stridesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F85A74()
{
  return &unk_1E2DCDD60;
}

void sub_190F85A84()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F85A98(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCDD80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F85AD0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCDD80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F85AF0(uint64_t a1)
{
  E5RT::OperandDescriptor **v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  __int128 v13;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(E5RT::OperandDescriptor ***)(a1 + 16);
    if (v2)
    {
      E5RT::OperandDescriptor::TensorDescriptor(*v2);
      v3 = (_QWORD *)operator new();
      *v3 = 0;
      v3[1] = 0;
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(void **)v4;
      if (*(_QWORD *)v4
      {
        v6 = *(_QWORD *)(v4 + 8);
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
      }
      else
      {
        v6 = 0;
      }
      *v3 = v5;
      v3[1] = v6;
      **(_QWORD **)(a1 + 8) = v3;
      return 0;
    }
    v12 = operator new(0x38uLL);
    v13 = xmmword_191A764A0;
    strcpy((char *)v12, "Invalid Function Argument: operand_desc is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
  }
  else
  {
    v12 = operator new(0x30uLL);
    v13 = xmmword_191A6F7A0;
    strcpy((char *)v12, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12);
  return 1;
}

void sub_190F85CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_190F85CFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_tensor_desc_create_from_operand_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z41e5rt_tensor_desc_create_from_operand_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_tensor_desc_create_from_operand_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_tensor_desc_create_from_operand_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F85D68()
{
  return &unk_1E2DCDDE0;
}

void sub_190F85D78()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F85D8C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCDE00;
  result[1] = v3;
  return result;
}

uint64_t sub_190F85DC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCDE00;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F85DDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x60C405C6656D0);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190F85FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F85FEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_tensor_desc_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z24e5rt_tensor_desc_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_tensor_desc_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_tensor_desc_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F86058()
{
  return &unk_1E2DCDE60;
}

void sub_190F86068()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8607C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCDE80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F860BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCDE80;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F860E4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      E5RT::TensorDescriptor::AllocateMemory(**(_QWORD **)(a1 + 8), *(_DWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v13);
      v3 = v13;
      if (v13)
      {
        v4 = (_QWORD *)operator new();
        v5 = v13;
        *v4 = &unk_1E2DC3190;
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = v5;
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = v3;
        v2[1] = v4;
        if (!v6)
          goto LABEL_11;
      }
      else
      {
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = 0;
        v2[1] = 0;
        if (!v6)
        {
LABEL_11:
          v9 = v13;
          v13 = 0;
          if (v9)
            (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
          result = 0;
          **(_QWORD **)(a1 + 16) = v2;
          return result;
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      goto LABEL_11;
    }
    v13 = operator new(0x38uLL);
    v14 = xmmword_191A726A0;
    strcpy((char *)v13, "Invalid Function Argument: buffer_handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
  else
  {
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A6F7A0;
    strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
}

void sub_190F86348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F863F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z36e5rt_tensor_desc_alloc_buffer_objectE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z36e5rt_tensor_desc_alloc_buffer_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36e5rt_tensor_desc_alloc_buffer_objectE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36e5rt_tensor_desc_alloc_buffer_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F86460()
{
  return &unk_1E2DCDEE0;
}

void sub_190F86470()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F86484(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCDF00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F864BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCDF00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F864DC(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  const E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
      v4 = (E5RT::TensorDataType *)operator new();
      E5RT::TensorDataType::TensorDataType(v4, TensorDataTypeRef);
      result = 0;
      **(_QWORD **)(a1 + 16) = v4;
    }
    else
    {
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A764A0;
      strcpy((char *)v8, "Invalid Function Argument: dtype_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F8668C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_190F866CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xA0C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t sub_190F866F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_tensor_desc_retain_dtypeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z29e5rt_tensor_desc_retain_dtypeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_tensor_desc_retain_dtypeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_tensor_desc_retain_dtypeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8675C()
{
  return &unk_1E2DCDF60;
}

void sub_190F8676C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F86780(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCDF80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F867B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCDF80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F867D8(uint64_t a1)
{
  E5RT::TensorDescriptorImpl ***v1;
  uint64_t Size;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::TensorDescriptorImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      Size = E5RT::TensorDescriptor::GetSize(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = Size;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: size is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F86954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F86994(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_tensor_desc_get_sizeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z25e5rt_tensor_desc_get_sizeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_tensor_desc_get_sizeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_tensor_desc_get_sizeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F86A00()
{
  return &unk_1E2DCDFE0;
}

void sub_190F86A10()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F86A24(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCE000;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F86A5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE000;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F86A7C(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  unint64_t Rank;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      Rank = E5RT::TensorDescriptor::GetRank(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = Rank;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: rank is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F86BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F86C38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_tensor_desc_get_rankE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z25e5rt_tensor_desc_get_rankE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_tensor_desc_get_rankE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_tensor_desc_get_rankE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F86CA4()
{
  return &unk_1E2DCE060;
}

void sub_190F86CB4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F86CC8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCE080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F86D08(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE080;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F86D30(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  unint64_t Rank;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        **(_QWORD **)(a1 + 24) = *(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(*v1);
        Rank = E5RT::TensorDescriptor::GetRank(**(E5RT::TensorDescriptor ***)(a1 + 8));
        result = 0;
        **(_QWORD **)(a1 + 16) = Rank;
      }
      else
      {
        v7 = operator new(0x30uLL);
        v8 = xmmword_191A6FFC0;
        strcpy((char *)v7, "Invalid Function Argument: shape is NULL.");
        v6 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v8) < 0)
          operator delete(v7);
        return 1;
      }
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: rank is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F86F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F86FA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z26e5rt_tensor_desc_get_shapeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z26e5rt_tensor_desc_get_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z26e5rt_tensor_desc_get_shapeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z26e5rt_tensor_desc_get_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F87014()
{
  return &unk_1E2DCE0E0;
}

void sub_190F87024()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F87038(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCE100;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F87078(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE100;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F870A0(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6[2];
  char v7;
  void *__p;
  __int128 v9;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        v3 = *(_QWORD *)(a1 + 32);
        if (v3 == E5RT::TensorDescriptor::GetRank(*v1))
        {
          v4 = *(_QWORD *)(a1 + 32);
          v9 = 0uLL;
          __p = 0;
          if (v4)
          {
            if (v4 >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            __p = operator new(8 * v4);
            *((_QWORD *)&v9 + 1) = (char *)__p + 8 * v4;
            bzero(__p, 8 * v4);
            *(_QWORD *)&v9 = *((_QWORD *)&v9 + 1);
            memmove(__p, *(const void **)(a1 + 16), 8 * v4);
          }
          **(_QWORD **)(a1 + 24) = E5RT::TensorDescriptor::GetByteOffset(**(_QWORD **)(a1 + 8), (uint64_t *)&__p);
          if (__p)
          {
            *(_QWORD *)&v9 = __p;
            operator delete(__p);
          }
          return 0;
        }
        __p = operator new(0x40uLL);
        v9 = xmmword_191A717E0;
        strcpy((char *)__p, "Invalid Function Argument: rank does not match tensor shape.");
        v7 = 10;
        strcpy((char *)v6, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__p, v6);
      }
      else
      {
        __p = operator new(0x30uLL);
        v9 = xmmword_191A6F7A0;
        strcpy((char *)__p, "Invalid Function Argument: offset is NULL.");
        v7 = 10;
        strcpy((char *)v6, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__p, v6);
      }
    }
    else
    {
      __p = operator new(0x30uLL);
      v9 = xmmword_191A71380;
      strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
      v7 = 10;
      strcpy((char *)v6, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v6);
    }
  }
  else
  {
    __p = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)v6, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v6);
  }
  if (v7 < 0)
    operator delete((void *)v6[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  return 1;
}

void sub_190F87360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F873B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_desc_get_byte_offsetE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_tensor_desc_get_byte_offsetE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_desc_get_byte_offsetE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_desc_get_byte_offsetE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8741C()
{
  return &unk_1E2DCE160;
}

void sub_190F8742C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F87440(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCE180;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F87480(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE180;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F874A8(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  unint64_t Rank;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        **(_QWORD **)(a1 + 24) = *(_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(*v1);
        Rank = E5RT::TensorDescriptor::GetRank(**(E5RT::TensorDescriptor ***)(a1 + 8));
        result = 0;
        **(_QWORD **)(a1 + 16) = Rank;
      }
      else
      {
        v7 = operator new(0x30uLL);
        v8 = xmmword_191A6FF90;
        strcpy((char *)v7, "Invalid Function Argument: strides is NULL.");
        v6 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v8) < 0)
          operator delete(v7);
        return 1;
      }
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A72DA0;
      strcpy((char *)v7, "Invalid Function Argument: rank is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F876DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F87720(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_tensor_desc_get_stridesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z28e5rt_tensor_desc_get_stridesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_tensor_desc_get_stridesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_tensor_desc_get_stridesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8778C()
{
  return &unk_1E2DCE1E0;
}

void sub_190F8779C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F877B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCE200;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F877F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE200;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F87818(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  unint64_t v3;
  E5RT::TensorDimension *v4;
  uint64_t Length;
  uint64_t result;
  void *__p[2];
  char v8;
  void *v9;
  __int128 v10;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= E5RT::TensorDescriptor::GetRank(*v1))
      {
        v9 = operator new(0x38uLL);
        v10 = xmmword_191A71370;
        strcpy((char *)v9, "Invalid Function Argument: Dimension index is invalid.");
        v8 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
        if (v8 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v10) < 0)
          operator delete(v9);
        return 1;
      }
      else
      {
        v4 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[](**(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 24));
        Length = E5RT::TensorDimension::GetLength(v4);
        result = 0;
        **(_QWORD **)(a1 + 16) = Length;
      }
    }
    else
    {
      v9 = operator new(0x30uLL);
      v10 = xmmword_191A6F7A0;
      strcpy((char *)v9, "Invalid Function Argument: length is NULL.");
      v8 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v10) < 0)
        operator delete(v9);
      return 1;
    }
  }
  else
  {
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7A0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9);
    return 1;
  }
  return result;
}

void sub_190F87A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F87A98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z37e5rt_tensor_desc_get_dimension_lengthE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z37e5rt_tensor_desc_get_dimension_lengthE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z37e5rt_tensor_desc_get_dimension_lengthE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z37e5rt_tensor_desc_get_dimension_lengthE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F87B04()
{
  return &unk_1E2DCE260;
}

void sub_190F87B14()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F87B28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCE280;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F87B68(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE280;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F87B90(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  unint64_t v3;
  E5RT::TensorDimension *v4;
  uint64_t Stride;
  uint64_t result;
  void *__p[2];
  char v8;
  void *v9;
  __int128 v10;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= E5RT::TensorDescriptor::GetRank(*v1))
      {
        v9 = operator new(0x38uLL);
        v10 = xmmword_191A71370;
        strcpy((char *)v9, "Invalid Function Argument: Dimension index is invalid.");
        v8 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
        if (v8 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v10) < 0)
          operator delete(v9);
        return 1;
      }
      else
      {
        v4 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[](**(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 24));
        Stride = E5RT::TensorDimension::GetStride(v4);
        result = 0;
        **(_QWORD **)(a1 + 16) = Stride;
      }
    }
    else
    {
      v9 = operator new(0x30uLL);
      v10 = xmmword_191A6F7A0;
      strcpy((char *)v9, "Invalid Function Argument: stride is NULL.");
      v8 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v10) < 0)
        operator delete(v9);
      return 1;
    }
  }
  else
  {
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7A0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9);
    return 1;
  }
  return result;
}

void sub_190F87DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F87E10(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z37e5rt_tensor_desc_get_dimension_strideE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z37e5rt_tensor_desc_get_dimension_strideE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z37e5rt_tensor_desc_get_dimension_strideE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z37e5rt_tensor_desc_get_dimension_strideE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F87E7C()
{
  return &unk_1E2DCE2E0;
}

void sub_190F87E8C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F87EA0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCE300;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F87EE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE300;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F87F08(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  char v14;
  void *__p;
  __int128 v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        v3 = *(_QWORD *)(a1 + 32);
        v16 = 0uLL;
        __p = 0;
        if (v3)
        {
          if (v3 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          __p = operator new(8 * v3);
          *((_QWORD *)&v16 + 1) = (char *)__p + 8 * v3;
          memcpy(__p, v2, 8 * v3);
          *(_QWORD *)&v16 = *((_QWORD *)&v16 + 1);
        }
        v4 = (_QWORD *)operator new();
        *v4 = 0;
        v4[1] = 0;
        E5RT::TensorDescriptor::CreateTensorDescSlice(**(_QWORD **)(a1 + 8), (uint64_t *)&__p, v13);
        v5 = v13[0];
        if (v13[0])
        {
          v6 = (_QWORD *)operator new();
          v7 = v13[0];
          *v6 = &unk_1E2DC3270;
          v6[1] = 0;
          v6[2] = 0;
          v6[3] = v7;
          v13[0] = 0;
          v8 = (std::__shared_weak_count *)v4[1];
          *v4 = v5;
          v4[1] = v6;
          if (!v8)
            goto LABEL_15;
        }
        else
        {
          v13[0] = 0;
          v8 = (std::__shared_weak_count *)v4[1];
          *v4 = 0;
          v4[1] = 0;
          if (!v8)
          {
LABEL_15:
            v11 = v13[0];
            v13[0] = 0;
            if (v11)
              (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            **(_QWORD **)(a1 + 24) = v4;
            if (__p)
            {
              *(_QWORD *)&v16 = __p;
              operator delete(__p);
            }
            return 0;
          }
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        goto LABEL_15;
      }
      __p = operator new(0x38uLL);
      v16 = xmmword_191A764A0;
      strcpy((char *)__p, "Invalid Function Argument: slice_handle is NULL.");
      v14 = 10;
      strcpy((char *)v13, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v13);
      if (v14 < 0)
        operator delete((void *)v13[0]);
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      return 1;
    }
    else
    {
      __p = operator new(0x30uLL);
      v16 = xmmword_191A6FF90;
      strcpy((char *)__p, "Invalid Function Argument: offsets is NULL.");
      v14 = 10;
      strcpy((char *)v13, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v13);
      if (v14 < 0)
        operator delete((void *)v13[0]);
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      return 1;
    }
  }
  else
  {
    __p = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)v13, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v13);
    if (v14 < 0)
      operator delete((void *)v13[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 1;
  }
}

void sub_190F88260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F88324(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_tensor_desc_create_sliceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z29e5rt_tensor_desc_create_sliceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_tensor_desc_create_sliceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_tensor_desc_create_sliceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F88390()
{
  return &unk_1E2DCE360;
}

void sub_190F883A0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F883B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCE380;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F883FC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE380;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8842C(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  void *v19;
  __int128 v20;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *(const void **)(a1 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(a1 + 32);
        v20 = 0uLL;
        v19 = 0;
        if (v4)
        {
          if (v4 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v5 = (char *)operator new(8 * v4);
          v6 = &v5[8 * v4];
          v19 = v5;
          *((_QWORD *)&v20 + 1) = v6;
          memcpy(v5, v2, 8 * v4);
          *(_QWORD *)&v20 = v6;
          *(_QWORD *)&__p = operator new(8 * v4);
          v18 = __p + 8 * v4;
          memcpy((void *)__p, v3, 8 * v4);
          *((_QWORD *)&__p + 1) = v18;
        }
        else
        {
          __p = 0uLL;
          v18 = 0;
        }
        v7 = (_QWORD *)operator new();
        *v7 = 0;
        v7[1] = 0;
        E5RT::TensorDescriptor::CreateTensorDescSlice(**(_QWORD **)(a1 + 8), (uint64_t)&v19, (uint64_t *)&__p, &v16);
        v8 = v16;
        if (v16)
        {
          v9 = (_QWORD *)operator new();
          v10 = v16;
          *v9 = &unk_1E2DC3270;
          v9[1] = 0;
          v9[2] = 0;
          v9[3] = v10;
          v16 = 0;
          v11 = (std::__shared_weak_count *)v7[1];
          *v7 = v8;
          v7[1] = v9;
          if (!v11)
            goto LABEL_16;
        }
        else
        {
          v16 = 0;
          v11 = (std::__shared_weak_count *)v7[1];
          *v7 = 0;
          v7[1] = 0;
          if (!v11)
          {
LABEL_16:
            v14 = v16;
            v16 = 0;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            **(_QWORD **)(a1 + 40) = v7;
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (v19)
            {
              *(_QWORD *)&v20 = v19;
              operator delete(v19);
            }
            return 0;
          }
        }
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_16;
      }
      v19 = operator new(0x30uLL);
      v20 = xmmword_191A6FF90;
      strcpy((char *)v19, "Invalid Function Argument: lengths is NULL.");
      HIBYTE(v18) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
    }
    else
    {
      v19 = operator new(0x30uLL);
      v20 = xmmword_191A6FF90;
      strcpy((char *)v19, "Invalid Function Argument: offsets is NULL.");
      HIBYTE(v18) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
    }
  }
  else
  {
    v19 = operator new(0x30uLL);
    v20 = xmmword_191A6F7A0;
    strcpy((char *)v19, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v19, (uint64_t *)&__p);
  }
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
  return 1;
}

void sub_190F88774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F88854(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_tensor_desc_create_slice_with_lengthsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z42e5rt_tensor_desc_create_slice_with_lengthsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_tensor_desc_create_slice_with_lengthsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_tensor_desc_create_slice_with_lengthsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F888C0()
{
  return &unk_1E2DCE3E0;
}

void sub_190F888D0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F888E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCE400;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F8891C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE400;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8893C(uint64_t a1)
{
  E5RT::TensorDescriptorImpl ***v1;
  uint64_t NumElements;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::TensorDescriptorImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      NumElements = E5RT::TensorDescriptor::GetNumElements(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = NumElements;
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A764A0;
      strcpy((char *)v7, "Invalid Function Argument: num_elements is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F88AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F88AF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_tensor_desc_get_num_elementsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z33e5rt_tensor_desc_get_num_elementsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_tensor_desc_get_num_elementsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_tensor_desc_get_num_elementsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F88B64()
{
  return &unk_1E2DCE460;
}

void sub_190F88B74()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F88B88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCE480;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F88BC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE480;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F88BE0(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  char HasKnownShape;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      HasKnownShape = E5RT::TensorDescriptor::HasKnownShape(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = HasKnownShape;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: known is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F88D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F88D9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_desc_has_known_shapeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_tensor_desc_has_known_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_desc_has_known_shapeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_desc_has_known_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F88E08()
{
  return &unk_1E2DCE4E0;
}

uint64_t e5rt_tensor_utils_get_fp32_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x38uLL);
  *v12 = &off_1E2DCE500;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  *((_BYTE *)v12 + 40) = a5;
  v12[6] = a6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F88EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_set_fp32_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x30uLL);
  *v12 = &off_1E2DCE580;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  *((_BYTE *)v12 + 40) = a5;
  *((float *)v12 + 11) = a6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F8900C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_get_fp16_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x38uLL);
  *v12 = &off_1E2DCE600;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  *((_BYTE *)v12 + 40) = a5;
  v12[6] = a6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F89120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_set_fp16_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  unsigned __int16 v6;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v6 = a6.n128_u16[0];
  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x30uLL);
  *v12 = &off_1E2DCE680;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  *((_BYTE *)v12 + 40) = a5;
  *((_WORD *)v12 + 21) = v6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F8923C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_get_u8_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x38uLL);
  *v12 = &off_1E2DCE700;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  *((_BYTE *)v12 + 40) = a5;
  v12[6] = a6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F89350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_set_u8_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x30uLL);
  *v12 = &off_1E2DCE780;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  *((_BYTE *)v12 + 40) = a5;
  *((_BYTE *)v12 + 41) = a6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F89464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_get_s8_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x38uLL);
  *v12 = &off_1E2DCE800;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  *((_BYTE *)v12 + 40) = a5;
  v12[6] = a6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F89578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_set_s8_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x30uLL);
  *v12 = &off_1E2DCE880;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  *((_BYTE *)v12 + 40) = a5;
  *((_BYTE *)v12 + 41) = a6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190F8968C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_copy_tensor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCE900;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190F89788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_are_tensors_equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = operator new(0x30uLL);
  *v10 = &off_1E2DCE980;
  v10[1] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v16 = v10;
  v11 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

void sub_190F89890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_cast_from_fp32_to_fp16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCEA00;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190F8998C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_cast_from_fp16_to_fp32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCEA80;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190F89A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_quantize_from_fp32_to_u8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  float *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  _BYTE v15[24];
  float *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = (float *)operator new(0x30uLL);
  *(_QWORD *)v10 = &off_1E2DCEB00;
  *((_QWORD *)v10 + 1) = a1;
  *((_QWORD *)v10 + 2) = a2;
  *((_QWORD *)v10 + 3) = a3;
  *((_QWORD *)v10 + 4) = a4;
  v10[10] = a5;
  v16 = v10;
  v11 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  v12 = v16;
  if (v16 == (float *)v15)
  {
    v13 = 4;
    v12 = (float *)v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  return v11;
}

void sub_190F89B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_dequantize_from_s8_to_fp32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  float *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  _BYTE v15[24];
  float *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = (float *)operator new(0x30uLL);
  *(_QWORD *)v10 = &off_1E2DCEB80;
  *((_QWORD *)v10 + 1) = a1;
  *((_QWORD *)v10 + 2) = a2;
  *((_QWORD *)v10 + 3) = a3;
  *((_QWORD *)v10 + 4) = a4;
  v10[10] = a5;
  v16 = v10;
  v11 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  v12 = v16;
  if (v16 == (float *)v15)
  {
    v13 = 4;
    v12 = (float *)v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  return v11;
}

void sub_190F89CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_utils_dequantize_from_u8_to_fp32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  float *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  _BYTE v15[24];
  float *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = (float *)operator new(0x30uLL);
  *(_QWORD *)v10 = &off_1E2DCEC00;
  *((_QWORD *)v10 + 1) = a1;
  *((_QWORD *)v10 + 2) = a2;
  *((_QWORD *)v10 + 3) = a3;
  *((_QWORD *)v10 + 4) = a4;
  v10[10] = a5;
  v16 = v10;
  v11 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  v12 = v16;
  if (v16 == (float *)v15)
  {
    v13 = 4;
    v12 = (float *)v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  return v11;
}

void sub_190F89DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F89DE8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F89DFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DCE500;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_190F89E44(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE500;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F89E74(uint64_t a1)
{
  E5RT::BufferObject **v1;
  E5RT::TensorDescriptor **v2;
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t TensorDataTypeRef;
  void *v9;
  uint64_t v10[2];
  char v11;
  uint64_t v12[2];
  char v13;
  void *__p;
  __int128 v15;

  v2 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  v1 = *(E5RT::BufferObject ***)(a1 + 16);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_DWORD **)(a1 + 48);
  v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v2)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6F7B0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_24:
    if (v13 < 0)
      operator delete((void *)v12[0]);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 1;
    v9 = __p;
    goto LABEL_17;
  }
  if (!v1)
  {
    __p = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v3)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A71380;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v6)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6FFC0;
    strcpy((char *)__p, "Invalid Function Argument: value is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v2);
  if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef))
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_191A6F7F0;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_16:
        v9 = (void *)v10[0];
LABEL_17:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_16;
    }
    return 1;
  }
  __p = 0;
  v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v4);
    *((_QWORD *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(_QWORD *)&v15 = *((_QWORD *)&v15 + 1);
  }
  *v6 = *(_DWORD *)E5RT::TensorElementAt<float>(*v2, (uint64_t *)&__p, v5, *v1);
  if (__p)
  {
    *(_QWORD *)&v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_190F8A1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8A224(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_tensor_utils_get_fp32_elementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_tensor_utils_get_fp32_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_tensor_utils_get_fp32_elementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_tensor_utils_get_fp32_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8A290()
{
  return &unk_1E2DCE560;
}

void sub_190F8A2A0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8A2B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCE580;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F8A2FC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE580;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8A32C(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  E5RT::BufferObject **v2;
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t TensorDataTypeRef;
  void *v9;
  uint64_t v10[2];
  char v11;
  uint64_t v12[2];
  char v13;
  void *__p;
  __int128 v15;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  v2 = *(E5RT::BufferObject ***)(a1 + 16);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 44);
  v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v1)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6F7B0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_21:
    if (v13 < 0)
      operator delete((void *)v12[0]);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 1;
    v9 = __p;
    goto LABEL_16;
  }
  if (!v2)
  {
    __p = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_21;
  }
  if (!v3)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A71380;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_21;
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
  if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef))
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_191A6F7F0;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_15:
        v9 = (void *)v10[0];
LABEL_16:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_15;
    }
    return 1;
  }
  __p = 0;
  v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v4);
    *((_QWORD *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(_QWORD *)&v15 = *((_QWORD *)&v15 + 1);
  }
  *(_DWORD *)E5RT::TensorElementAt<float>(*v1, (uint64_t *)&__p, v5, *v2) = v6;
  if (__p)
  {
    *(_QWORD *)&v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_190F8A5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8A668(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_tensor_utils_set_fp32_elementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_tensor_utils_set_fp32_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_tensor_utils_set_fp32_elementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_tensor_utils_set_fp32_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8A6D4()
{
  return &unk_1E2DCE5E0;
}

void sub_190F8A6E4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8A6F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DCE600;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_190F8A740(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE600;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8A770(uint64_t a1)
{
  E5RT::BufferObject **v1;
  E5RT::TensorDescriptor **v2;
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  _WORD *v6;
  uint64_t TensorDataTypeRef;
  void *v9;
  uint64_t v10[2];
  char v11;
  uint64_t v12[2];
  char v13;
  void *__p;
  __int128 v15;

  v2 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  v1 = *(E5RT::BufferObject ***)(a1 + 16);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_WORD **)(a1 + 48);
  v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v2)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6F7B0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_24:
    if (v13 < 0)
      operator delete((void *)v12[0]);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 1;
    v9 = __p;
    goto LABEL_17;
  }
  if (!v1)
  {
    __p = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v3)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A71380;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v6)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6FFC0;
    strcpy((char *)__p, "Invalid Function Argument: value is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v2);
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(TensorDataTypeRef))
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_191A6F7F0;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_16:
        v9 = (void *)v10[0];
LABEL_17:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_16;
    }
    return 1;
  }
  __p = 0;
  v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v4);
    *((_QWORD *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(_QWORD *)&v15 = *((_QWORD *)&v15 + 1);
  }
  *v6 = *(_WORD *)_ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(*v2, (uint64_t *)&__p, v5, *v1);
  if (__p)
  {
    *(_QWORD *)&v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_190F8AAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8AB20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_tensor_utils_get_fp16_elementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_tensor_utils_get_fp16_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_tensor_utils_get_fp16_elementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_tensor_utils_get_fp16_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8AB8C()
{
  return &unk_1E2DCE660;
}

void sub_190F8AB9C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8ABB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCE680;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F8ABF8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE680;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8AC28(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  E5RT::BufferObject **v2;
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;
  uint64_t TensorDataTypeRef;
  void *v9;
  uint64_t v10[2];
  char v11;
  uint64_t v12[2];
  char v13;
  void *__p;
  __int128 v15;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  v2 = *(E5RT::BufferObject ***)(a1 + 16);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_WORD *)(a1 + 42);
  v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v1)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6F7B0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_21:
    if (v13 < 0)
      operator delete((void *)v12[0]);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 1;
    v9 = __p;
    goto LABEL_16;
  }
  if (!v2)
  {
    __p = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_21;
  }
  if (!v3)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A71380;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_21;
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(TensorDataTypeRef))
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_191A6F7F0;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_15:
        v9 = (void *)v10[0];
LABEL_16:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_15;
    }
    return 1;
  }
  __p = 0;
  v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v4);
    *((_QWORD *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(_QWORD *)&v15 = *((_QWORD *)&v15 + 1);
  }
  *(_WORD *)_ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(*v1, (uint64_t *)&__p, v5, *v2) = v6;
  if (__p)
  {
    *(_QWORD *)&v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_190F8AEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8AF64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_tensor_utils_set_fp16_elementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_tensor_utils_set_fp16_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_tensor_utils_set_fp16_elementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_tensor_utils_set_fp16_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8AFD0()
{
  return &unk_1E2DCE6E0;
}

void sub_190F8AFE0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8AFF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DCE700;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_190F8B03C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE700;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8B06C(uint64_t a1)
{
  E5RT::BufferObject **v1;
  E5RT::TensorDescriptor **v2;
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t TensorDataTypeRef;
  void *v9;
  uint64_t v10[2];
  char v11;
  uint64_t v12[2];
  char v13;
  void *__p;
  __int128 v15;

  v2 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  v1 = *(E5RT::BufferObject ***)(a1 + 16);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_BYTE **)(a1 + 48);
  v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v2)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6F7B0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_24:
    if (v13 < 0)
      operator delete((void *)v12[0]);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 1;
    v9 = __p;
    goto LABEL_17;
  }
  if (!v1)
  {
    __p = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v3)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A71380;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v6)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6FFC0;
    strcpy((char *)__p, "Invalid Function Argument: value is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v2);
  if (!E5RT::TensorDataType::IsType<unsigned char>(TensorDataTypeRef))
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_191A6F7F0;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_16:
        v9 = (void *)v10[0];
LABEL_17:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_16;
    }
    return 1;
  }
  __p = 0;
  v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v4);
    *((_QWORD *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(_QWORD *)&v15 = *((_QWORD *)&v15 + 1);
  }
  *v6 = *(_BYTE *)E5RT::TensorElementAt<unsigned char>(*v2, (uint64_t *)&__p, v5, *v1);
  if (__p)
  {
    *(_QWORD *)&v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_190F8B3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8B41C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_utils_get_u8_elementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_tensor_utils_get_u8_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_utils_get_u8_elementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_utils_get_u8_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8B488()
{
  return &unk_1E2DCE760;
}

void sub_190F8B498()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8B4AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCE780;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F8B4F4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE780;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8B524(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  E5RT::BufferObject **v2;
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t TensorDataTypeRef;
  void *v9;
  uint64_t v10[2];
  char v11;
  uint64_t v12[2];
  char v13;
  void *__p;
  __int128 v15;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  v2 = *(E5RT::BufferObject ***)(a1 + 16);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 41);
  v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v1)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6F7B0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_22:
    if (v13 < 0)
      operator delete((void *)v12[0]);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 1;
    v9 = __p;
    goto LABEL_16;
  }
  if (!v2)
  {
    __p = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_22;
  }
  if (!v3)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A71380;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_22;
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
  if (!E5RT::TensorDataType::IsType<unsigned char>(TensorDataTypeRef))
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_191A6F7F0;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_15:
        v9 = (void *)v10[0];
LABEL_16:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_15;
    }
    return 1;
  }
  __p = 0;
  v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v4);
    *((_QWORD *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(_QWORD *)&v15 = *((_QWORD *)&v15 + 1);
  }
  *(_BYTE *)E5RT::TensorElementAt<unsigned char>(*v1, (uint64_t *)&__p, v5, *v2) = v6;
  if (__p)
  {
    *(_QWORD *)&v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_190F8B7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8B860(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_utils_set_u8_elementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_tensor_utils_set_u8_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_utils_set_u8_elementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_utils_set_u8_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8B8CC()
{
  return &unk_1E2DCE7E0;
}

void sub_190F8B8DC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8B8F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DCE800;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_190F8B938(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE800;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8B968(uint64_t a1)
{
  E5RT::BufferObject **v1;
  E5RT::TensorDescriptor **v2;
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t TensorDataTypeRef;
  void *v9;
  uint64_t v10[2];
  char v11;
  uint64_t v12[2];
  char v13;
  void *__p;
  __int128 v15;

  v2 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  v1 = *(E5RT::BufferObject ***)(a1 + 16);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_BYTE **)(a1 + 48);
  v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v2)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6F7B0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_24:
    if (v13 < 0)
      operator delete((void *)v12[0]);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 1;
    v9 = __p;
    goto LABEL_17;
  }
  if (!v1)
  {
    __p = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v3)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A71380;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v6)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6FFC0;
    strcpy((char *)__p, "Invalid Function Argument: value is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v2);
  if (!E5RT::TensorDataType::IsType<signed char>(TensorDataTypeRef))
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_191A6F7F0;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_16:
        v9 = (void *)v10[0];
LABEL_17:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_16;
    }
    return 1;
  }
  __p = 0;
  v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v4);
    *((_QWORD *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(_QWORD *)&v15 = *((_QWORD *)&v15 + 1);
  }
  *v6 = *(_BYTE *)E5RT::TensorElementAt<signed char>(*v2, (uint64_t *)&__p, v5, *v1);
  if (__p)
  {
    *(_QWORD *)&v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_190F8BCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8BD18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_utils_get_s8_elementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_tensor_utils_get_s8_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_utils_get_s8_elementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_utils_get_s8_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8BD84()
{
  return &unk_1E2DCE860;
}

void sub_190F8BD94()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8BDA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCE880;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F8BDF0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE880;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8BE20(uint64_t a1)
{
  E5RT::TensorDescriptor **v1;
  E5RT::BufferObject **v2;
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t TensorDataTypeRef;
  void *v9;
  uint64_t v10[2];
  char v11;
  uint64_t v12[2];
  char v13;
  void *__p;
  __int128 v15;

  v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  v2 = *(E5RT::BufferObject ***)(a1 + 16);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 41);
  v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v1)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A6F7B0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_22:
    if (v13 < 0)
      operator delete((void *)v12[0]);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 1;
    v9 = __p;
    goto LABEL_16;
  }
  if (!v2)
  {
    __p = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_22;
  }
  if (!v3)
  {
    __p = operator new(0x30uLL);
    v15 = xmmword_191A71380;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_22;
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
  if (!E5RT::TensorDataType::IsType<signed char>(TensorDataTypeRef))
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_191A6F7F0;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_15:
        v9 = (void *)v10[0];
LABEL_16:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_15;
    }
    return 1;
  }
  __p = 0;
  v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v4);
    *((_QWORD *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(_QWORD *)&v15 = *((_QWORD *)&v15 + 1);
  }
  *(_BYTE *)E5RT::TensorElementAt<signed char>(*v1, (uint64_t *)&__p, v5, *v2) = v6;
  if (__p)
  {
    *(_QWORD *)&v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_190F8C0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8C15C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_utils_set_s8_elementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_tensor_utils_set_s8_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_utils_set_s8_elementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_utils_set_s8_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8C1C8()
{
  return &unk_1E2DCE8E0;
}

void sub_190F8C1D8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8C1EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCE900;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F8C22C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCE900;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8C254(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, E5RT::BufferObject *a5)
{
  E5RT **v5;
  const E5RT::TensorDescriptor **v6;
  const E5RT::BufferObject **v7;
  const E5RT::TensorDescriptor **v8;
  void *__p[2];
  char v11;
  void *v12;
  __int128 v13;

  v5 = (E5RT **)a1[1];
  if (v5)
  {
    v6 = (const E5RT::TensorDescriptor **)a1[2];
    if (v6)
    {
      v7 = (const E5RT::BufferObject **)a1[3];
      if (v7)
      {
        v8 = (const E5RT::TensorDescriptor **)a1[4];
        if (v8)
        {
          E5RT::CopyTensorFromSrcToDest(*v5, *v6, *v7, *v8, a5);
          return 0;
        }
        else
        {
          v12 = operator new(0x38uLL);
          v13 = xmmword_191A6FFA0;
          strcpy((char *)v12, "Invalid Function Argument: dst_buffer_handle is NULL.");
          v11 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
          if (v11 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v13) < 0)
            operator delete(v12);
          return 1;
        }
      }
      else
      {
        v12 = operator new(0x38uLL);
        v13 = xmmword_191A6FF80;
        strcpy((char *)v12, "Invalid Function Argument: dst_desc_handle is NULL.");
        v11 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
        if (v11 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v13) < 0)
          operator delete(v12);
        return 1;
      }
    }
    else
    {
      v12 = operator new(0x38uLL);
      v13 = xmmword_191A6FFA0;
      strcpy((char *)v12, "Invalid Function Argument: src_buffer_handle is NULL.");
      v11 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v13) < 0)
        operator delete(v12);
      return 1;
    }
  }
  else
  {
    v12 = operator new(0x38uLL);
    v13 = xmmword_191A6FF80;
    strcpy((char *)v12, "Invalid Function Argument: src_desc_handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
    return 1;
  }
}

void sub_190F8C534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8C57C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_tensor_utils_copy_tensorE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z29e5rt_tensor_utils_copy_tensorE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_tensor_utils_copy_tensorE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_tensor_utils_copy_tensorE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8C5E8()
{
  return &unk_1E2DCE960;
}

void sub_190F8C5F8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8C60C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCE980;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F8C654(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCE980;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8C684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const E5RT::BufferObject *a5)
{
  E5RT **v5;
  const E5RT::TensorDescriptor **v7;
  const E5RT::BufferObject **v8;
  const E5RT::TensorDescriptor **v9;
  char v10;
  uint64_t result;
  void *__p[2];
  char v13;
  void *v14;
  __int128 v15;

  v5 = *(E5RT ***)(a1 + 8);
  if (v5)
  {
    v7 = *(const E5RT::TensorDescriptor ***)(a1 + 16);
    if (v7)
    {
      v8 = *(const E5RT::BufferObject ***)(a1 + 24);
      if (v8)
      {
        v9 = *(const E5RT::TensorDescriptor ***)(a1 + 32);
        if (v9)
        {
          if (*(_QWORD *)(a1 + 40))
          {
            v10 = E5RT::AreTensorsEqual(*v5, *v7, *v8, *v9, a5);
            result = 0;
            **(_BYTE **)(a1 + 40) = v10;
          }
          else
          {
            v14 = operator new(0x28uLL);
            v15 = xmmword_191A78120;
            strcpy((char *)v14, "Invalid Function Argument: yes is NULL.");
            v13 = 10;
            strcpy((char *)__p, "operator()");
            E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
            if (v13 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v15) < 0)
              operator delete(v14);
            return 1;
          }
        }
        else
        {
          v14 = operator new(0x38uLL);
          v15 = xmmword_191A6F7D0;
          strcpy((char *)v14, "Invalid Function Argument: buffer_handle1 is NULL.");
          v13 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
          if (v13 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v15) < 0)
            operator delete(v14);
          return 1;
        }
      }
      else
      {
        v14 = operator new(0x38uLL);
        v15 = xmmword_191A764A0;
        strcpy((char *)v14, "Invalid Function Argument: desc_handle1 is NULL.");
        v13 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
        if (v13 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v15) < 0)
          operator delete(v14);
        return 1;
      }
    }
    else
    {
      v14 = operator new(0x38uLL);
      v15 = xmmword_191A6F7D0;
      strcpy((char *)v14, "Invalid Function Argument: buffer_handle0 is NULL.");
      v13 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
      if (v13 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v15) < 0)
        operator delete(v14);
      return 1;
    }
  }
  else
  {
    v14 = operator new(0x38uLL);
    v15 = xmmword_191A764A0;
    strcpy((char *)v14, "Invalid Function Argument: desc_handle0 is NULL.");
    v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
    if (v13 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v15) < 0)
      operator delete(v14);
    return 1;
  }
  return result;
}

void sub_190F8C9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8CA48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z35e5rt_tensor_utils_are_tensors_equalE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z35e5rt_tensor_utils_are_tensors_equalE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35e5rt_tensor_utils_are_tensors_equalE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35e5rt_tensor_utils_are_tensors_equalE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8CAB4()
{
  return &unk_1E2DCE9E0;
}

void sub_190F8CAC4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8CAD8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCEA00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F8CB18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCEA00;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8CB40(_QWORD *a1)
{
  E5RT::TensorDescriptor **v1;
  E5RT::BufferObject **v2;
  E5RT::TensorDescriptor **v3;
  E5RT::BufferObject **v4;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = (E5RT::TensorDescriptor **)a1[1];
  if (v1)
  {
    v2 = (E5RT::BufferObject **)a1[2];
    if (v2)
    {
      v3 = (E5RT::TensorDescriptor **)a1[3];
      if (v3)
      {
        v4 = (E5RT::BufferObject **)a1[4];
        if (v4)
        {
          _ZN4E5RT10TensorCastIDF16_fEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(*v3, *v4, *v1, *v2);
          return 0;
        }
        else
        {
          v8 = operator new(0x38uLL);
          v9 = xmmword_191A6FFA0;
          strcpy((char *)v8, "Invalid Function Argument: dst_buffer_handle is NULL.");
          v7 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
          if (v7 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v9) < 0)
            operator delete(v8);
          return 1;
        }
      }
      else
      {
        v8 = operator new(0x38uLL);
        v9 = xmmword_191A6FF80;
        strcpy((char *)v8, "Invalid Function Argument: dst_desc_handle is NULL.");
        v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v9) < 0)
          operator delete(v8);
        return 1;
      }
    }
    else
    {
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A6FFA0;
      strcpy((char *)v8, "Invalid Function Argument: src_buffer_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x38uLL);
    v9 = xmmword_191A6FF80;
    strcpy((char *)v8, "Invalid Function Argument: src_desc_handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
}

void sub_190F8CE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8CE68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_tensor_utils_cast_from_fp32_to_fp16E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_tensor_utils_cast_from_fp32_to_fp16E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_tensor_utils_cast_from_fp32_to_fp16E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_tensor_utils_cast_from_fp32_to_fp16E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8CED4()
{
  return &unk_1E2DCEA60;
}

void sub_190F8CEE4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8CEF8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCEA80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190F8CF38(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCEA80;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8CF60(_QWORD *a1)
{
  E5RT::TensorDescriptor **v1;
  E5RT::BufferObject **v2;
  E5RT::TensorDescriptor **v3;
  E5RT::BufferObject **v4;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = (E5RT::TensorDescriptor **)a1[1];
  if (v1)
  {
    v2 = (E5RT::BufferObject **)a1[2];
    if (v2)
    {
      v3 = (E5RT::TensorDescriptor **)a1[3];
      if (v3)
      {
        v4 = (E5RT::BufferObject **)a1[4];
        if (v4)
        {
          _ZN4E5RT10TensorCastIfDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(*v3, *v4, *v1, *v2);
          return 0;
        }
        else
        {
          v8 = operator new(0x38uLL);
          v9 = xmmword_191A6FFA0;
          strcpy((char *)v8, "Invalid Function Argument: dst_buffer_handle is NULL.");
          v7 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
          if (v7 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v9) < 0)
            operator delete(v8);
          return 1;
        }
      }
      else
      {
        v8 = operator new(0x38uLL);
        v9 = xmmword_191A6FF80;
        strcpy((char *)v8, "Invalid Function Argument: dst_desc_handle is NULL.");
        v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v9) < 0)
          operator delete(v8);
        return 1;
      }
    }
    else
    {
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A6FFA0;
      strcpy((char *)v8, "Invalid Function Argument: src_buffer_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x38uLL);
    v9 = xmmword_191A6FF80;
    strcpy((char *)v8, "Invalid Function Argument: src_desc_handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
}

void sub_190F8D240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8D288(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_tensor_utils_cast_from_fp16_to_fp32E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_tensor_utils_cast_from_fp16_to_fp32E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_tensor_utils_cast_from_fp16_to_fp32E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_tensor_utils_cast_from_fp16_to_fp32E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8D2F4()
{
  return &unk_1E2DCEAE0;
}

void sub_190F8D304()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8D318(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCEB00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F8D360(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCEB00;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8D390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  E5RT::TensorDescriptor *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  E5RT::TensorDescriptor *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t TensorDataTypeRef;
  uint64_t v13;
  const E5RT::BufferObject *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  _BYTE v21[8];
  _BYTE __p[24];
  _BYTE v23[24];

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3)
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v4 = *(E5RT::TensorDescriptor **)v3;
          v5 = *(std::__shared_weak_count **)(v3 + 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldxr(p_shared_owners);
            while (__stxr(v7 + 1, p_shared_owners));
            v1 = *(_QWORD *)(a1 + 8);
          }
          v9 = *(E5RT::TensorDescriptor **)v1;
          v8 = *(std::__shared_weak_count **)(v1 + 8);
          if (v8)
          {
            v10 = (unint64_t *)&v8->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v4);
          if (!E5RT::TensorDataType::IsType<unsigned char>(TensorDataTypeRef)
            || (v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v9), !E5RT::TensorDataType::IsType<float>(v13)))
          {
            exception = __cxa_allocate_exception(0x18uLL);
            v23[23] = 10;
            strcpy(v23, "operator()");
            *(_QWORD *)__p = operator new(0x40uLL);
            *(_OWORD *)&__p[8] = xmmword_191A7A8D0;
            strcpy(*(char **)__p, "Src tensor must be float and dst tensor must be uint8_t.");
            E5RT::Status::Status(v21, 1, __p);
            E5RT::E5RTError::E5RTError(exception, v23, v21);
          }
          E5RT::TensorQuantize(**(E5RT ***)(a1 + 24), **(const E5RT::TensorDescriptor ***)(a1 + 32), **(E5RT::BufferObject ***)(a1 + 8), **(const E5RT::TensorDescriptor ***)(a1 + 16), v14, *(float *)(a1 + 40));
          if (v8)
          {
            v15 = (unint64_t *)&v8->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          if (v5)
          {
            v17 = (unint64_t *)&v5->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          return 0;
        }
        *(_QWORD *)v23 = operator new(0x38uLL);
        *(_OWORD *)&v23[8] = xmmword_191A6FFA0;
        strcpy(*(char **)v23, "Invalid Function Argument: dst_buffer_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
      }
      else
      {
        *(_QWORD *)v23 = operator new(0x38uLL);
        *(_OWORD *)&v23[8] = xmmword_191A6FF80;
        strcpy(*(char **)v23, "Invalid Function Argument: dst_desc_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
      }
    }
    else
    {
      *(_QWORD *)v23 = operator new(0x38uLL);
      *(_OWORD *)&v23[8] = xmmword_191A6FFA0;
      strcpy(*(char **)v23, "Invalid Function Argument: src_buffer_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
    }
  }
  else
  {
    *(_QWORD *)v23 = operator new(0x38uLL);
    *(_OWORD *)&v23[8] = xmmword_191A6FF80;
    strcpy(*(char **)v23, "Invalid Function Argument: src_desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v23[23] & 0x80000000) != 0)
    operator delete(*(void **)v23);
  return 1;
}

void sub_190F8D778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8D87C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_tensor_utils_quantize_from_fp32_to_u8E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z42e5rt_tensor_utils_quantize_from_fp32_to_u8E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_tensor_utils_quantize_from_fp32_to_u8E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_tensor_utils_quantize_from_fp32_to_u8E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8D8E8()
{
  return &unk_1E2DCEB60;
}

void sub_190F8D8F8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8D90C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCEB80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F8D954(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCEB80;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8D984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  E5RT::TensorDescriptor *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  E5RT::TensorDescriptor *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t TensorDataTypeRef;
  uint64_t v13;
  const E5RT::BufferObject *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  _BYTE v21[8];
  _BYTE __p[24];
  _BYTE v23[24];

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3)
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v4 = *(E5RT::TensorDescriptor **)v3;
          v5 = *(std::__shared_weak_count **)(v3 + 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldxr(p_shared_owners);
            while (__stxr(v7 + 1, p_shared_owners));
            v1 = *(_QWORD *)(a1 + 8);
          }
          v9 = *(E5RT::TensorDescriptor **)v1;
          v8 = *(std::__shared_weak_count **)(v1 + 8);
          if (v8)
          {
            v10 = (unint64_t *)&v8->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v4);
          if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef)
            || (v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v9), !E5RT::TensorDataType::IsType<signed char>(v13)))
          {
            exception = __cxa_allocate_exception(0x18uLL);
            v23[23] = 10;
            strcpy(v23, "operator()");
            *(_QWORD *)__p = operator new(0x38uLL);
            *(_OWORD *)&__p[8] = xmmword_191A6F7E0;
            strcpy(*(char **)__p, "Src tensor must be int8_t and dst tensor must be float.");
            E5RT::Status::Status(v21, 1, __p);
            E5RT::E5RTError::E5RTError(exception, v23, v21);
          }
          E5RT::TensorDequantize(**(E5RT ***)(a1 + 24), **(const E5RT::TensorDescriptor ***)(a1 + 32), **(E5RT::BufferObject ***)(a1 + 8), **(const E5RT::TensorDescriptor ***)(a1 + 16), v14, *(float *)(a1 + 40));
          if (v8)
          {
            v15 = (unint64_t *)&v8->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          if (v5)
          {
            v17 = (unint64_t *)&v5->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          return 0;
        }
        *(_QWORD *)v23 = operator new(0x38uLL);
        *(_OWORD *)&v23[8] = xmmword_191A6FFA0;
        strcpy(*(char **)v23, "Invalid Function Argument: dst_buffer_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
      }
      else
      {
        *(_QWORD *)v23 = operator new(0x38uLL);
        *(_OWORD *)&v23[8] = xmmword_191A6FF80;
        strcpy(*(char **)v23, "Invalid Function Argument: dst_desc_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
      }
    }
    else
    {
      *(_QWORD *)v23 = operator new(0x38uLL);
      *(_OWORD *)&v23[8] = xmmword_191A6FFA0;
      strcpy(*(char **)v23, "Invalid Function Argument: src_buffer_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
    }
  }
  else
  {
    *(_QWORD *)v23 = operator new(0x38uLL);
    *(_OWORD *)&v23[8] = xmmword_191A6FF80;
    strcpy(*(char **)v23, "Invalid Function Argument: src_desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v23[23] & 0x80000000) != 0)
    operator delete(*(void **)v23);
  return 1;
}

void sub_190F8DD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8DE70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_tensor_utils_dequantize_from_s8_to_fp32E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z44e5rt_tensor_utils_dequantize_from_s8_to_fp32E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_tensor_utils_dequantize_from_s8_to_fp32E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_tensor_utils_dequantize_from_s8_to_fp32E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8DEDC()
{
  return &unk_1E2DCEBE0;
}

void sub_190F8DEEC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F8DF00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DCEC00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_190F8DF48(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DCEC00;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F8DF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  E5RT::TensorDescriptor *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  E5RT::TensorDescriptor *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t TensorDataTypeRef;
  uint64_t v13;
  const E5RT::BufferObject *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  _BYTE v21[8];
  _BYTE __p[24];
  _BYTE v23[24];

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3)
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v4 = *(E5RT::TensorDescriptor **)v3;
          v5 = *(std::__shared_weak_count **)(v3 + 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldxr(p_shared_owners);
            while (__stxr(v7 + 1, p_shared_owners));
            v1 = *(_QWORD *)(a1 + 8);
          }
          v9 = *(E5RT::TensorDescriptor **)v1;
          v8 = *(std::__shared_weak_count **)(v1 + 8);
          if (v8)
          {
            v10 = (unint64_t *)&v8->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v4);
          if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef)
            || (v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v9), !E5RT::TensorDataType::IsType<unsigned char>(v13)))
          {
            exception = __cxa_allocate_exception(0x18uLL);
            v23[23] = 10;
            strcpy(v23, "operator()");
            *(_QWORD *)__p = operator new(0x40uLL);
            *(_OWORD *)&__p[8] = xmmword_191A7A8D0;
            strcpy(*(char **)__p, "Src tensor must be uint8_t and dst tensor must be float.");
            E5RT::Status::Status(v21, 1, __p);
            E5RT::E5RTError::E5RTError(exception, v23, v21);
          }
          E5RT::TensorDequantize(**(E5RT ***)(a1 + 24), **(const E5RT::TensorDescriptor ***)(a1 + 32), **(E5RT::BufferObject ***)(a1 + 8), **(const E5RT::TensorDescriptor ***)(a1 + 16), v14, *(float *)(a1 + 40));
          if (v8)
          {
            v15 = (unint64_t *)&v8->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          if (v5)
          {
            v17 = (unint64_t *)&v5->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          return 0;
        }
        *(_QWORD *)v23 = operator new(0x38uLL);
        *(_OWORD *)&v23[8] = xmmword_191A6FFA0;
        strcpy(*(char **)v23, "Invalid Function Argument: dst_memory_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
      }
      else
      {
        *(_QWORD *)v23 = operator new(0x38uLL);
        *(_OWORD *)&v23[8] = xmmword_191A6FF80;
        strcpy(*(char **)v23, "Invalid Function Argument: dst_desc_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
      }
    }
    else
    {
      *(_QWORD *)v23 = operator new(0x38uLL);
      *(_OWORD *)&v23[8] = xmmword_191A6FFA0;
      strcpy(*(char **)v23, "Invalid Function Argument: src_memory_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
    }
  }
  else
  {
    *(_QWORD *)v23 = operator new(0x38uLL);
    *(_OWORD *)&v23[8] = xmmword_191A6FF80;
    strcpy(*(char **)v23, "Invalid Function Argument: src_desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v23, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v23[23] & 0x80000000) != 0)
    operator delete(*(void **)v23);
  return 1;
}

void sub_190F8E360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F8E464(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_tensor_utils_dequantize_from_u8_to_fp32E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z44e5rt_tensor_utils_dequantize_from_u8_to_fp32E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_tensor_utils_dequantize_from_u8_to_fp32E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_tensor_utils_dequantize_from_u8_to_fp32E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F8E4D0()
{
  return &unk_1E2DCEC60;
}

void (**E5RT::BufferObject::GetHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>(uint64_t a1))(E5RT::MTLBufferObject *__hidden this)
{
  void (***v1)(E5RT::MTLBufferObject *__hidden);
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  v1 = E5RT::BufferObjectImpl::TryAsMTLBufferObject(*(void (****)(E5RT::MTLBufferObject *__hidden))(a1 + 8));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetHandle");
    std::string::basic_string[abi:ne180100]<0>(v4, "Buffer object is not backed by a MTLBuffer.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return v1[1];
}

void sub_190F8E584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::BufferObject::CreateBufferFromHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *exception;
  void *v9;
  _QWORD *v10;
  _QWORD v11[3];
  _BYTE v12[8];
  _QWORD v13[3];

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "CreateBufferFromHandle");
    std::string::basic_string[abi:ne180100]<0>(v11, "MTLBuffer is nil.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  if (!objc_msgSend(v3, "length"))
  {
    v9 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "CreateBufferFromHandle");
    std::string::basic_string[abi:ne180100]<0>(v11, "MTLBuffer length is zero.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(v9, v13, v12);
  }
  v5 = (_QWORD *)operator new();
  E5RT::MTLBufferObject::MTLBufferObject(v5, v4);
  v6 = (_QWORD *)operator new();
  v13[0] = 0;
  v10 = v5;
  E5RT::BufferObject::BufferObject(v6, (uint64_t *)&v10);
  *a2 = v6;
  v7 = (uint64_t)v10;
  v10 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

}

void sub_190F8E790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  MEMORY[0x19401CD90](v7, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::MTLBufferObject>::~unique_ptr[abi:ne180100]((id **)va);

  _Unwind_Resume(a1);
}

void sub_190F8E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::MTLBufferObject>::~unique_ptr[abi:ne180100]((id **)va);

  _Unwind_Resume(a1);
}

void sub_190F8E7F0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0x81C40803F642BLL);

  _Unwind_Resume(a1);
}

void sub_190F8E818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F8E828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F8E838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v24)
  {
LABEL_8:

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

id **std::unique_ptr<E5RT::MTLBufferObject>::~unique_ptr[abi:ne180100](id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::MTLBufferObject::~MTLBufferObject(id *this)
{

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

{

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
  JUMPOUT(0x19401CD90);
}

E5RT::MTLBufferObject *E5RT::MTLBufferObject::MTLBufferObject(E5RT::MTLBufferObject *this, uint64_t a2)
{
  _QWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *exception;
  void *v11;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  v4 = E5RT::BufferObjectImpl::BufferObjectImpl(this);
  *v4 = &off_1E2D5ABF8;
  v4[1] = 0;
  v5 = MTLCreateSystemDefaultDevice();
  v6 = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "MTLBufferObject");
    std::string::basic_string[abi:ne180100]<0>(v12, "Cannot create MTLBufferObject on a system without a Metal device.");
    E5RT::Status::Status(v13, 2, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  v7 = objc_msgSend(v5, "newBufferWithLength:options:", a2, 0);
  v8 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v7;

  if (!*((_QWORD *)this + 1))
  {
    v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "MTLBufferObject");
    std::string::basic_string[abi:ne180100]<0>(v12, "MTLBuffer create failed.");
    E5RT::Status::Status(v13, 3, v12);
    E5RT::E5RTError::E5RTError(v11, v14, v13);
  }

  return this;
}

void sub_190F8EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  id *v22;
  void *v23;

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v22);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::MTLBufferObject::MTLBufferObject(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v3 = a2;
  E5RT::BufferObjectImpl::BufferObjectImpl(a1);
  *a1 = &off_1E2D5ABF8;
  v4 = v3;
  a1[1] = v4;
  if ((objc_msgSend(v4, "resourceOptions") & 0x20) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "MTLBufferObject");
    std::string::basic_string[abi:ne180100]<0>(v7, "MTLBuffer is private to GPU. BufferObect requires for access by CPU as well.");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }

  return a1;
}

void sub_190F8ECC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  id *v23;

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v23);
  _Unwind_Resume(a1);
}

void E5RT::MTLBufferObject::CreateBufferAliasImpl(E5RT::MTLBufferObject *this)
{
  void *exception;
  char *v2;
  __int128 v3;
  _BYTE v4[8];
  char v5[32];

  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 21;
  strcpy(v5, "CreateBufferAliasImpl");
  v2 = (char *)operator new(0x40uLL);
  v3 = xmmword_191A7A8D0;
  strcpy(v2, "MTLBufferObject does not currently support alias buffer.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_190F8EE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_190F8EE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F8EE74);
}

uint64_t E5RT::MTLBufferObject::GetSize(id *this)
{
  return objc_msgSend(this[1], "length");
}

uint64_t E5RT::MTLBufferObject::GetDataSpan(id *this)
{
  uint64_t v2;

  v2 = objc_msgSend(this[1], "contents");
  if (objc_msgSend(this[1], "length"))
    return v2;
  else
    return 0;
}

{
  uint64_t v2;

  v2 = objc_msgSend(this[1], "contents");
  if (objc_msgSend(this[1], "length"))
    return v2;
  else
    return 0;
}

uint64_t E5RT::MTLBufferObject::GetType(E5RT::MTLBufferObject *this)
{
  return 2;
}

_QWORD *E5RT::BufferObject::BufferObject(E5RT::BufferObject *this)
{
  _QWORD *result;

  result = E5RT::MemoryObject::MemoryObject(this);
  *result = &off_1E2D59C08;
  result[1] = 0;
  return result;
}

{
  _QWORD *result;

  result = E5RT::MemoryObject::MemoryObject(this);
  *result = &off_1E2D59C08;
  result[1] = 0;
  return result;
}

CFTypeRef **std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100](CFTypeRef **a1)
{
  CFTypeRef *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::IOBufferObject::~IOBufferObject(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

E5RT::HeapAllocatedBufferObject **std::unique_ptr<E5RT::HeapAllocatedBufferObject>::~unique_ptr[abi:ne180100](E5RT::HeapAllocatedBufferObject **a1)
{
  E5RT::HeapAllocatedBufferObject *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::HeapAllocatedBufferObject::~HeapAllocatedBufferObject(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::BufferObjectPriv::~BufferObjectPriv(E5RT::BufferObjectPriv *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59C08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59C08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  E5RT::MemoryObject::~MemoryObject(this);
  JUMPOUT(0x19401CD90);
}

void (***E5RT::BufferObjectImpl::TryAsHeapAllocatedBufferObject(void (***this)(E5RT::HeapAllocatedBufferObject *__hidden this)))(E5RT::HeapAllocatedBufferObject *__hidden this)
{
  if (!this || *this != &off_1E2D5B138)
    return 0;
  return this;
}

void (***E5RT::BufferObjectImpl::TryAsMTLBufferObject(void (***this)(E5RT::MTLBufferObject *__hidden this)))(E5RT::MTLBufferObject *__hidden this)
{
  if (!this || *this != &off_1E2D5ABF8)
    return 0;
  return this;
}

void E5Common::Utils::GetConstantShape(E5Common::Utils *this@<X0>, const MIL::IRValueType *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  int64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  MIL::IRDimension *v10;
  uint64_t v11;
  _BYTE *v12;
  void *__p;
  _BYTE *v14;

  E5Common::Utils::GetMILShape(this, a2, &__p);
  v4 = __p;
  v5 = v14 - (_BYTE *)__p;
  if (v14 != __p)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v14 - (_BYTE *)__p);
    v7 = &v6[8 * (v5 >> 3)];
    bzero(v6, v5);
    v8 = 0;
    v9 = &v6[v5];
    while (1)
    {
      v10 = (MIL::IRDimension *)v4[v8];
      if ((*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)v10 + 24))(v10))
        break;
      v11 = MIL::IRDimension::AsConstant(v10);
      *(_QWORD *)&v6[8 * v8++] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
      v4 = __p;
      if (v8 >= (v14 - (_BYTE *)__p) >> 3)
        goto LABEL_8;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    operator delete(v6);
    v12 = __p;
    if (!__p)
      return;
LABEL_9:
    v14 = v12;
    operator delete(v12);
    return;
  }
  v6 = 0;
  v9 = 0;
  v7 = 0;
LABEL_8:
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 24) = 1;
  v12 = __p;
  if (__p)
    goto LABEL_9;
}

void sub_190F8F2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v14;

  if (__p)
  {
    operator delete(__p);
    v14 = a12;
    if (!a12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v14 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t E5Common::Utils::GetMILShape@<X0>(E5Common::Utils *this@<X0>, const MIL::IRValueType *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::IRValueType *WrappedType;
  MIL::IRMemoryLayoutValueType *v5;
  MIL::IRMemoryLayoutValueType *v6;
  MIL::IRStateValueType *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  MIL::IRMemoryLayoutValueType *v15;
  MIL::IRTensorBufferValueType *v16;
  MIL::IRMemoryLayoutValueType *v17;
  MIL::IRPixelBufferValueType *v18;
  std::logic_error *exception;

  WrappedType = this;
  if ((*(uint64_t (**)(E5Common::Utils *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
  {
LABEL_8:
    v8 = MIL::IRValueType::AsTensorType(WrappedType);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v11 = *(const void **)result;
    v10 = *(_QWORD *)(result + 8);
    v12 = v10 - *(_QWORD *)result;
    if (v10 == *(_QWORD *)result)
      return result;
    if (v12 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  else
  {
    while (1)
    {
      if (MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType))
      {
        v5 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType);
        if (MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v5))
        {
          v15 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(WrappedType);
          v16 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v15);
          result = MIL::IRTensorBufferValueType::GetShape(v16);
          a3[1] = 0;
          a3[2] = 0;
          *a3 = 0;
          v11 = *(const void **)result;
          v10 = *(_QWORD *)(result + 8);
          v12 = v10 - *(_QWORD *)result;
          if (v10 == *(_QWORD *)result)
            return result;
          if (v12 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          goto LABEL_10;
        }
      }
      if (MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType))
      {
        v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType);
        if (MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v6))
          break;
      }
      if (!MIL::IRValueType::TryCastAsStateType(WrappedType))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported IRValueType in GetMILShape.");
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v7 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(WrappedType);
      WrappedType = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v7);
      if ((*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)WrappedType + 24))(WrappedType))
        goto LABEL_8;
    }
    v17 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(WrappedType);
    v18 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v17);
    result = MIL::IRPixelBufferValueType::GetShape(v18);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v11 = *(const void **)result;
    v10 = *(_QWORD *)(result + 8);
    v12 = v10 - *(_QWORD *)result;
    if (v10 == *(_QWORD *)result)
      return result;
    if (v12 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_10:
  v13 = (char *)operator new(v10 - *(_QWORD *)result);
  *a3 = v13;
  a3[1] = v13;
  v14 = &v13[8 * (v12 >> 3)];
  a3[2] = v14;
  result = (uint64_t)memcpy(v13, v11, v12);
  a3[1] = v14;
  return result;
}

void sub_190F8F4C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_190F8F4E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5Common::Utils::GetConstantStrides(E5Common::Utils *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *Strides;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  MIL::IRProperty *v13;
  MIL::IRConstantProperty *v14;

  Strides = (uint64_t *)MIL::IRTensorBufferValueType::GetStrides(this);
  v6 = *Strides;
  v5 = Strides[1];
  v7 = v5 - *Strides;
  if (v5 == *Strides)
  {
    v9 = 0;
    v12 = 0;
    v10 = 0;
LABEL_8:
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = Strides;
    v9 = (char *)operator new(v5 - v6);
    v10 = &v9[8 * (v7 >> 3)];
    bzero(v9, v7);
    v11 = 0;
    v12 = &v9[v7];
    while (1)
    {
      v13 = *(MIL::IRProperty **)(v6 + 8 * v11);
      if (MIL::IRProperty::TryAsUnknown(v13))
        break;
      v14 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v13);
      *(_QWORD *)&v9[8 * v11++] = MIL::IRConstantProperty::GetInt64ScalarValue(v14);
      v6 = *v8;
      if (v11 >= (v8[1] - *v8) >> 3)
        goto LABEL_8;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    operator delete(v9);
  }
}

void sub_190F8F604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void E5Common::Utils::GetConstantInterleaves(E5Common::Utils *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *InterleaveFactors;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  MIL::IRProperty *v12;
  MIL::IRConstantProperty *v13;

  InterleaveFactors = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(this);
  v5 = *InterleaveFactors;
  v6 = InterleaveFactors[1] - *InterleaveFactors;
  if (v6)
  {
    if (v6 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = InterleaveFactors;
    v8 = v6 >> 3;
    v9 = (char *)operator new(v6 >> 3);
    v10 = &v9[v8];
    bzero(v9, v8);
    v11 = 0;
    while (1)
    {
      v12 = *(MIL::IRProperty **)(v5 + 8 * v11);
      if (MIL::IRProperty::TryAsUnknown(v12))
        break;
      v13 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v12);
      v9[v11++] = MIL::IRConstantProperty::GetUInt8ScalarValue(v13);
      v5 = *v7;
      if (v11 >= (v7[1] - *v7) >> 3)
        goto LABEL_8;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    operator delete(v9);
  }
  else
  {
    v9 = 0;
    v10 = 0;
LABEL_8:
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void sub_190F8F730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL E5Common::Utils::IsTensor(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) != 0;
}

uint64_t E5Common::Utils::IsTensorBuffer(E5Common::Utils *this, const MIL::IRValueType *a2)
{
  uint64_t result;
  MIL::IRMemoryLayoutValueType *v4;

  result = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  if (result)
  {
    v4 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(this);
    return MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v4) != 0;
  }
  return result;
}

uint64_t E5Common::Utils::IsPixelBuffer(E5Common::Utils *this, const MIL::IRValueType *a2)
{
  uint64_t result;
  MIL::IRMemoryLayoutValueType *v4;

  result = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  if (result)
  {
    v4 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(this);
    return MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v4) != 0;
  }
  return result;
}

BOOL E5Common::Utils::IsState(E5Common::Utils *this, const MIL::IRValueType *a2)
{
  return MIL::IRValueType::TryCastAsStateType(this) != 0;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

void E5Common::Utils::AddIntendedBackend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t Attribute;
  std::__shared_weak_count *v9;
  std::string::size_type v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string::size_type v13;
  void **v14;
  void **v15;
  std::logic_error *exception;
  std::__shared_weak_count *v17;
  void *v18[2];
  char v19;
  void *__p[2];
  char v21;
  std::string v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v5 = **v4;
  for (i = (*v4)[1]; v5 != i; v5 += 16)
  {
    v21 = 15;
    strcpy((char *)__p, "IntendedBackend");
    Attribute = MIL::IRObject::TryGetAttribute();
    if (v21 < 0)
      operator delete(__p[0]);
    if (Attribute)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Op is already configured with IntendedBackends.");
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v22 = *(std::string *)a3;
    std::vector<std::string>::vector[abi:ne180100](__p, (uint64_t)&v22, 1uLL);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    E5Common::Utils::MILListFromCpp<std::string>((__int128 **)__p, (void **)&v22.__r_.__value_.__l.__data_);
    v19 = 15;
    strcpy((char *)v18, "IntendedBackend");
    if (v22.__r_.__value_.__r.__words[0])
    {
      v9 = (std::__shared_weak_count *)operator new();
      v10 = v22.__r_.__value_.__r.__words[0];
      v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C50;
      v9->__shared_owners_ = 0;
      v9->__shared_weak_owners_ = 0;
      v9[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
    }
    else
    {
      v9 = 0;
    }
    v17 = v9;
    v22.__r_.__value_.__r.__words[0] = 0;
    MIL::IRObject::SetAttribute();
    if (!v17)
      goto LABEL_21;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (v19 < 0)
      {
LABEL_31:
        operator delete(v18[0]);
        v13 = v22.__r_.__value_.__r.__words[0];
        v22.__r_.__value_.__r.__words[0] = 0;
        if (!v13)
          goto LABEL_24;
LABEL_23:
        (*(void (**)(std::string::size_type))(*(_QWORD *)v13 + 8))(v13);
        goto LABEL_24;
      }
    }
    else
    {
LABEL_21:
      if (v19 < 0)
        goto LABEL_31;
    }
    v13 = v22.__r_.__value_.__r.__words[0];
    v22.__r_.__value_.__r.__words[0] = 0;
    if (v13)
      goto LABEL_23;
LABEL_24:
    v14 = (void **)__p[0];
    if (__p[0])
    {
      v15 = (void **)__p[1];
      v7 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v15 - 1) < 0)
            operator delete(*(v15 - 3));
          v15 -= 3;
        }
        while (v15 != v14);
        v7 = __p[0];
      }
      __p[1] = v14;
      operator delete(v7);
    }
  }
}

void sub_190F8FAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190F8FADC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_190F8FAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  uint64_t v24;

  if (a16 < 0)
  {
    operator delete(__p);
    v24 = a23;
    a23 = 0;
    if (v24)
      goto LABEL_3;
  }
  else
  {
    v24 = a23;
    a23 = 0;
    if (v24)
    {
LABEL_3:
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      std::vector<std::string>::~vector[abi:ne180100](&a17);
      _Unwind_Resume(a1);
    }
  }
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void sub_190F8FB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_190F8FB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MILListFromCpp<std::string>(__int128 **a1@<X1>, void **a2@<X8>)
{
  uint64_t Scalar;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  char *v10;
  std::__shared_weak_count_vtbl *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **v16;
  void **v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p;
  void **v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  void *v30;
  char *v31;
  unint64_t v32;
  std::string v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRListValueType::Make();
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        v33.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
      }
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v33, 1uLL);
      Espresso::MILUtil::MakeTensorValue<std::string>(&v27, Scalar, &__p);
      v28 = v27;
      if (v27)
      {
        v8 = (std::__shared_weak_count *)operator new();
        v9 = v27;
        v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v8->__shared_owners_ = 0;
        v8->__shared_weak_owners_ = 0;
        v8[1].__vftable = v9;
        v29 = v8;
        v27 = 0;
        v10 = v31;
        if ((unint64_t)v31 < v32)
          goto LABEL_9;
      }
      else
      {
        v8 = 0;
        v29 = 0;
        v27 = 0;
        v10 = v31;
        if ((unint64_t)v31 < v32)
        {
LABEL_9:
          *(_QWORD *)v10 = v28;
          *((_QWORD *)v10 + 1) = v8;
          v28 = 0;
          v29 = 0;
          v31 = v10 + 16;
          v11 = v27;
          v27 = 0;
          if (!v11)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
      v12 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)&v30, (uint64_t)&v28);
      v13 = v29;
      v31 = v12;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
          v11 = v27;
          v27 = 0;
          if (!v11)
            goto LABEL_18;
LABEL_17:
          (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
          goto LABEL_18;
        }
      }
      v11 = v27;
      v27 = 0;
      if (v11)
        goto LABEL_17;
LABEL_18:
      v16 = (void **)__p;
      if (__p)
      {
        v17 = v26;
        v18 = __p;
        if (v26 != __p)
        {
          do
          {
            if (*((char *)v17 - 1) < 0)
              operator delete(*(v17 - 3));
            v17 -= 3;
          }
          while (v17 != v16);
          v18 = __p;
        }
        v26 = v16;
        operator delete(v18);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != v6);
  }
  MIL::IRListValueType::MakeValue();
  *a2 = __p;
  v19 = (char *)v30;
  if (v30)
  {
    v20 = v31;
    v21 = v30;
    if (v31 != v30)
    {
      do
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = v30;
    }
    v31 = v19;
    operator delete(v21);
  }
}

void sub_190F8FE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_190F8FEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v25;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  v25 = a13;
  a13 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  std::vector<std::string>::~vector[abi:ne180100](&a10);
  if (a24 < 0)
    operator delete(__p);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MakeIRValueFromPropertyVec(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  MIL::IRConstantProperty *v12;
  uint64_t v13;
  _OWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  int8x16x4_t *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  uint64_t v33;
  int8x16x4_t *v34;
  std::logic_error *v35;
  std::logic_error *exception;
  std::logic_error *v37;
  _QWORD *v38;
  void *__p;
  _QWORD *__pa;
  char *v41;
  char *v42;

  v4 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "There must be at least one property in the vector.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v5 = v3 - v4;
  if (v3 - v4 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v41 = (char *)operator new(v3 - v4);
  bzero(v41, v5);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v42 = &v41[v5];
  do
  {
    if (MIL::IRProperty::TryAsUnknown(*(MIL::IRProperty **)(v4 + 8 * v10)))
    {
      v11 = (unint64_t)v41;
      *(_QWORD *)&v41[8 * v10] = -1;
      v9 = 1;
    }
    else
    {
      v12 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(*a1 + 8 * v10));
      if (MIL::IRConstantProperty::GetScalarDataType(v12) == 14)
      {
        v11 = (unint64_t)v41;
        *(_QWORD *)&v41[8 * v10] = MIL::IRConstantProperty::GetUInt8ScalarValue(v12);
        ++v8;
      }
      else
      {
        if (MIL::IRConstantProperty::GetScalarDataType(v12) != 12)
        {
          v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v35, "Unsupported IRConstantProperty dtype.");
          v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v35, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v11 = (unint64_t)v41;
        *(_QWORD *)&v41[8 * v10] = MIL::IRConstantProperty::GetInt64ScalarValue(v12);
        ++v7;
      }
    }
    ++v10;
    v4 = *a1;
  }
  while (v10 < (a1[1] - *a1) >> 3);
  if (v8 && v7)
  {
    v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v37, "All constant properties must have the same dtype.");
    goto LABEL_57;
  }
  if (v8 != 0 && (v9 & 1) != 0)
  {
    v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v37, "Unknown properties are not supported for uint8 dtypes.");
LABEL_57:
    v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v37, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (v8)
  {
    __p = 0;
    v13 = (uint64_t)&v42[-v11];
    if (v42 == (char *)v11)
    {
      v14 = 0;
      v15 = 0;
LABEL_29:
      v38 = operator new(8uLL);
      *v38 = v15 - (char *)v14;
      MIL::IRTensorValueType::Make();
      if (v38)
        operator delete(v38);
      MIL::IRTensorValueType::MakeUInt8Value();
      *a2 = v38;
      if (v38)
      {
        v23 = (_QWORD *)operator new();
        *v23 = &unk_1E2DC2BE0;
        v23[1] = 0;
        v23[2] = 0;
        v23[3] = v38;
        a2[1] = v23;
        v24 = __p;
        if (!__p)
          goto LABEL_34;
      }
      else
      {
        a2[1] = 0;
        v24 = __p;
        if (!__p)
        {
LABEL_34:
          v22 = v41;
          if (!v41)
            return;
          goto LABEL_35;
        }
      }
      operator delete(v24);
      goto LABEL_34;
    }
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = operator new(v13 >> 3);
    v15 = (char *)v14 + (v13 >> 3);
    __p = v14;
    bzero(v14, v13 >> 3);
    v16 = v13 - 8;
    if ((unint64_t)(v13 - 8) < 0x38
      || (v17 = v16 >> 3, (unint64_t)v14 < v11 + (v16 & 0xFFFFFFFFFFFFFFF8) + 8)
      && v11 < (unint64_t)v14 + v17 + 1)
    {
      v18 = v14;
      v19 = (char *)v11;
      goto LABEL_21;
    }
    v25 = v17 + 1;
    if (v16 >= 0xF8)
    {
      v26 = v25 & 0x3FFFFFFFFFFFFFE0;
      v27 = (int8x16x4_t *)(v11 + 128);
      v28 = v14 + 1;
      v29 = v25 & 0x3FFFFFFFFFFFFFE0;
      do
      {
        *(_QWORD *)&v30 = vqtbl4q_s8(v27[-2], (int8x16_t)xmmword_191A7F960).u64[0];
        *(_QWORD *)&v31 = vqtbl4q_s8(*v27, (int8x16_t)xmmword_191A7F960).u64[0];
        *((_QWORD *)&v30 + 1) = vqtbl4q_s8(v27[-1], (int8x16_t)xmmword_191A7F960).u64[0];
        *((_QWORD *)&v31 + 1) = vqtbl4q_s8(v27[1], (int8x16_t)xmmword_191A7F960).u64[0];
        *(v28 - 1) = v30;
        *v28 = v31;
        v27 += 4;
        v28 += 2;
        v29 -= 32;
      }
      while (v29);
      if (v25 == v26)
        goto LABEL_29;
      if ((v25 & 0x18) == 0)
      {
        v19 = (char *)(v11 + 8 * v26);
        v18 = (char *)v14 + v26;
        do
        {
LABEL_21:
          v20 = *(_QWORD *)v19;
          v19 += 8;
          *v18++ = v20;
        }
        while (v19 != v42);
        goto LABEL_29;
      }
    }
    else
    {
      v26 = 0;
    }
    v18 = (char *)v14 + (v25 & 0x3FFFFFFFFFFFFFF8);
    v19 = (char *)(v11 + 8 * (v25 & 0x3FFFFFFFFFFFFFF8));
    v32 = (_QWORD *)((char *)v14 + v26);
    v33 = v26 - (v25 & 0x3FFFFFFFFFFFFFF8);
    v34 = (int8x16x4_t *)(v11 + 8 * v26);
    do
    {
      *v32++ = vqtbl4q_s8(*v34++, (int8x16_t)xmmword_191A7F970).u64[0];
      v33 += 8;
    }
    while (v33);
    if (v25 == (v25 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_29;
    goto LABEL_21;
  }
  __pa = operator new(8uLL);
  *__pa = (uint64_t)&v42[-v11] >> 3;
  MIL::IRTensorValueType::Make();
  if (__pa)
    operator delete(__pa);
  MIL::IRTensorValueType::MakeInt64Value();
  *a2 = __pa;
  if (__pa)
  {
    v21 = (_QWORD *)operator new();
    *v21 = &unk_1E2DC2BE0;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = __pa;
    a2[1] = v21;
    v22 = v41;
    if (!v41)
      return;
    goto LABEL_35;
  }
  a2[1] = 0;
  v22 = v41;
  if (v41)
LABEL_35:
    operator delete(v22);
}

void sub_190F90438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a13)
    (*(void (**)(void *))(*(_QWORD *)a13 + 8))(a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::IRValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<MIL::IRValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191AD1A6CLL)
    return a1 + 24;
  if (((v3 & 0x8000000191AD1A6CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191AD1A6CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191AD1A6CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<MIL::IRTensorValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191AD1948)
    return a1 + 24;
  if (((v3 & 0x8000000191AD1948 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191AD1948))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191AD1948 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t E5Common::MinimalCpu::IsTensorToTensorBufferLoadingWeights(uint64_t a1, uint64_t a2)
{
  MIL::IROperation ****v3;
  char *v4;
  MIL::IROperation ****v5;
  uint64_t v6;
  char *v7;
  const std::string::value_type **v8;
  const std::string::value_type **v9;
  __int128 v10;
  __int128 v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  const std::string::value_type **v18;
  MIL::IROperation *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  MIL::IRValueType *OutputType;
  MIL::IRMemoryLayoutValueType *v24;
  E5Common::Utils *v25;
  const MIL::IRValueType *v26;
  int64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v40;
  std::__shared_weak_count *v41;
  char v42;
  std::string v43;
  char v44;
  void *__p;
  const std::string::value_type **v46;
  char v47;
  char v48;

  v3 = (MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v4 = (char *)**v3;
  if ((char *)(*v3)[1] - v4 != 16)
    return 0;
  v5 = v3;
  v6 = *(_QWORD *)v4;
  v7 = (char *)operator new(0x19uLL);
  strcpy(v7, "tensor_to_tensor_buffer");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&__p, a1);
  v8 = (const std::string::value_type **)__p;
  v9 = v46;
  if (__p == v46)
  {
    v12 = 0;
    if (!__p)
      goto LABEL_32;
LABEL_23:
    v18 = v46;
    if (v46 == v8)
    {
      v46 = v8;
      operator delete(v8);
      operator delete(v7);
      if (v12)
        goto LABEL_33;
    }
    else
    {
      do
      {
        if (*((char *)v18 - 1) < 0)
          operator delete((void *)*(v18 - 3));
        v18 -= 3;
      }
      while (v18 != v8);
      v46 = v8;
      operator delete(__p);
      operator delete(v7);
      if (v12)
        goto LABEL_33;
    }
    return 0;
  }
  do
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v43, *v8, (std::string::size_type)v8[1]);
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v43.__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v10;
    }
    MIL::MILContext::GetOpset();
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    std::string::__init_copy_ctor_external(&v43, v7, 0x17uLL);
    MIL::IROpset::TryGetOperatorSharedPtr();
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v6 + 80))(&v43, v6);
    v11 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
    v12 = v40 == v43.__r_.__value_.__l.__data_;
    if (!v43.__r_.__value_.__l.__size_)
      goto LABEL_14;
    v13 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
      v15 = v41;
      if (!v41)
        goto LABEL_20;
    }
    else
    {
LABEL_14:
      v15 = v41;
      if (!v41)
        goto LABEL_20;
    }
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_20:
    if (v40 == (void *)v11)
      break;
    v8 += 3;
  }
  while (v8 != v9);
  v8 = (const std::string::value_type **)__p;
  if (__p)
    goto LABEL_23;
LABEL_32:
  operator delete(v7);
  if (!v12)
    return 0;
LABEL_33:
  v19 = ***v5;
  v47 = 5;
  strcpy((char *)&__p, "input");
  v20 = (*(uint64_t (**)(MIL::IROperation *, void **, _QWORD))(*(_QWORD *)v19 + 128))(v19, &__p, 0);
  v21 = v20;
  if (v47 < 0)
  {
    operator delete(__p);
    if (v21)
      goto LABEL_37;
    return v21;
  }
  if (!v20)
    return v21;
LABEL_37:
  v22 = MIL::IRValue::AsTensor((MIL::IRValue *)v21);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 96))(v22))
    return 0;
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(***v5);
  v24 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
  v25 = (E5Common::Utils *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v24);
  E5Common::Utils::GetConstantShape(v25, v26, (uint64_t)&__p);
  if (v48)
  {
    E5Common::Utils::GetConstantStrides(v25, (uint64_t)&v43);
    if (v44)
    {
      E5Common::Utils::GetConstantInterleaves(v25, (uint64_t)&v40);
      if (!v42)
        goto LABEL_60;
      v27 = (char *)v46 - (_BYTE *)__p;
      v28 = ((char *)v46 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v28 - 4) < 0xFFFFFFFFFFFFFFFELL || v27 == 24 && *((_QWORD *)__p + 1) != 1)
        goto LABEL_60;
      v29 = (std::__shared_weak_count *)v40;
      v30 = *(unsigned __int8 *)v40;
      if (v30 == 1)
      {
        v21 = 0;
        goto LABEL_62;
      }
      v32 = v28 - 1;
      v33 = *(_QWORD *)(v43.__r_.__value_.__r.__words[0] + 8 * (v28 - 1));
      if (v33 == v30
        && (v34 = v28 - 2,
            v35 = *(_QWORD *)(v43.__r_.__value_.__r.__words[0] + 8 * v34),
            v35 == *((_QWORD *)__p + v32) * v33)
        && (v27 != 24 || *(_QWORD *)v43.__r_.__value_.__l.__data_ == *((_QWORD *)__p + v34) * v35))
      {
        v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 88))(v37);
        v21 = v38 == 9 || (v38 & 0xFFFFFFFE) == 4;
      }
      else
      {
LABEL_60:
        v21 = 0;
      }
      v29 = (std::__shared_weak_count *)v40;
      if (v40)
      {
LABEL_62:
        v41 = v29;
        operator delete(v29);
      }
    }
    else
    {
      v21 = 0;
    }
    if (v43.__r_.__value_.__r.__words[0])
    {
      v43.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
      operator delete(v43.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v21 = 0;
  }
  if (__p)
  {
    v46 = (const std::string::value_type **)__p;
    operator delete(__p);
  }
  return v21;
}

void sub_190F90B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a13;
    if (!a13)
    {
LABEL_3:
      v27 = a20;
      if (!a20)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v27);
      goto LABEL_8;
    }
  }
  else
  {
    v26 = a13;
    if (!a13)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a20;
  if (!a20)
    goto LABEL_8;
  goto LABEL_7;
}

void E5Common::MinimalCpu::MatchTensorToTensorBufferLoadingWeightsAndAddIntendedBackend(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = v4;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v20, a1, v5);
      if (v20)
      {
        v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 120))(v20);
        v9 = v8 + 1;
        v10 = (_QWORD *)*v8;
        if ((_QWORD *)*v8 != v8 + 1)
          break;
      }
LABEL_6:
      v11 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v5 += 24;
      if (v5 == v6)
        return;
    }
    while (1)
    {
      if (E5Common::MinimalCpu::IsTensorToTensorBufferLoadingWeights(v7, v10[7])
        && (v14 = v10[7],
            v19 = 14,
            strcpy((char *)__p, "e5_minimal_cpu"),
            E5Common::Utils::AddIntendedBackend(v7, v14, (uint64_t)__p),
            v19 < 0))
      {
        operator delete(__p[0]);
        v15 = (_QWORD *)v10[1];
        if (!v15)
        {
          do
          {
LABEL_18:
            v16 = (_QWORD *)v10[2];
            v17 = *v16 == (_QWORD)v10;
            v10 = v16;
          }
          while (!v17);
          goto LABEL_11;
        }
      }
      else
      {
        v15 = (_QWORD *)v10[1];
        if (!v15)
          goto LABEL_18;
      }
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
LABEL_11:
      v10 = v16;
      if (v16 == v9)
        goto LABEL_6;
    }
  }
}

void sub_190F90D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void E5RT::IOSurfaceObject::~IOSurfaceObject(E5RT::IOSurfaceObject *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
  JUMPOUT(0x19401CD90);
}

void E5RT::IOSurfaceObject::AllocIOSurfaceObjectImpl(E5RT::IOSurfaceObject *this@<X0>, _QWORD *a2@<X8>)
{
  void *v5;
  void *v6;
  unsigned int SurfaceFormat;
  void *v8;
  uint64_t CustomRowStrides;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t SurfaceSliceCount;
  unsigned int v15;
  void *v16;
  size_t SurfaceWidth;
  size_t SurfaceHeight;
  unsigned int v19;
  OSType v20;
  _QWORD *v21;
  IOSurfaceRef IOSurface;
  void *exception;
  _QWORD v24[3];
  _BYTE v25[8];
  _QWORD v26[3];
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forKey:", MEMORY[0x1E0C9AA70], *MEMORY[0x1E0CA8FF0]);
  v6 = (void *)MEMORY[0x1E0CB37E8];
  SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  objc_msgSend(v6, "numberWithUnsignedInt:", E5RT::SurfaceFormatToCVPB4cc(SurfaceFormat));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forKey:", v8, *MEMORY[0x1E0CA9040]);

  CustomRowStrides = E5RT::SurfaceDescriptor::TryGetCustomRowStrides(this);
  if (*(_QWORD *)CustomRowStrides != *(_QWORD *)(CustomRowStrides + 8))
  {
    if (E5RT::SurfaceDescriptor::GetSurfacePlaneCount(this) == 1)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", **(_QWORD **)CustomRowStrides);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setValue:forKey:", v10, *MEMORY[0x1E0CA8F98]);
    }
    else
    {
      v10 = (void *)objc_opt_new();
      v11 = *(_QWORD **)CustomRowStrides;
      v12 = *(_QWORD **)(CustomRowStrides + 8);
      if (*(_QWORD **)CustomRowStrides != v12)
      {
        do
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *v11);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "addObject:", v13);

          ++v11;
        }
        while (v11 != v12);
      }
      objc_msgSend(v5, "setValue:forKey:", v10, *MEMORY[0x1E0CA8F98]);
    }

  }
  SurfaceSliceCount = E5RT::SurfaceDescriptor::GetSurfaceSliceCount(this);
  v15 = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  if (E5RT::IsMultiSliceFormat(v15))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", SurfaceSliceCount);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setValue:forKey:", v16, *MEMORY[0x1E0CA9018]);

  }
  SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(this);
  SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(this);
  v19 = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  v20 = E5RT::SurfaceFormatToCVPB4cc(v19);
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], SurfaceWidth, SurfaceHeight, v20, (CFDictionaryRef)v5, &pixelBufferOut))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "AllocIOSurfaceObjectImpl");
    std::string::basic_string[abi:ne180100]<0>(v24, "Failed to allocate IOSurface for surface.");
    E5RT::Status::Status(v25, 3, v24);
    E5RT::E5RTError::E5RTError(exception, v26, v25);
  }
  v21 = (_QWORD *)operator new();
  E5RT::SurfaceObjectImpl::SurfaceObjectImpl(v21);
  *v21 = &off_1E2D5ABD0;
  v21[1] = 0;
  *a2 = v21;
  IOSurface = CVPixelBufferGetIOSurface(pixelBufferOut);
  v21[1] = IOSurface;
  CFRetain(IOSurface);
  CVPixelBufferRelease(pixelBufferOut);

}

void sub_190F910E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F910FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F91110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F91120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F91134(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0xA1C40BD48D6D6);

  _Unwind_Resume(a1);
}

void sub_190F9115C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F91170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F91180(_Unwind_Exception *a1)
{
  void *v1;
  E5RT::AsyncEventImpl **v2;

  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void sub_190F91198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F911A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F911B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F911C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F911DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F911F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::AsyncEventImpl **std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100](E5RT::AsyncEventImpl **a1)
{
  E5RT::AsyncEventImpl *v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (const void *)*((_QWORD *)v2 + 1);
    if (v3)
      CFRelease(v3);
    E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

CFTypeRef E5RT::IOSurfaceObject::CreateIOSurfaceObjectImplFromHandle@<X0>(E5RT::IOSurfaceObject *this@<X0>, _QWORD *a2@<X8>)
{
  E5RT *PixelFormat;
  _QWORD *v6;
  void *exception;
  _QWORD v9[3];
  _BYTE v10[8];
  _QWORD v11[3];

  if (!this)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "CreateIOSurfaceObjectImplFromHandle");
    std::string::basic_string[abi:ne180100]<0>(v9, "Invalid IOSurface.");
    E5RT::Status::Status(v10, 1, v9);
    E5RT::E5RTError::E5RTError(exception, v11, v10);
  }
  PixelFormat = (E5RT *)IOSurfaceGetPixelFormat(this);
  E5RT::CVPB4ccToSurfaceFormat(PixelFormat);
  v6 = (_QWORD *)operator new();
  E5RT::SurfaceObjectImpl::SurfaceObjectImpl(v6);
  *a2 = v6;
  *v6 = &off_1E2D5ABD0;
  v6[1] = this;
  return CFRetain(this);
}

void sub_190F913A8(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl **v1;

  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F913BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_190F913E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::IOSurfaceObject::ValidateSurfaceObjectMatchesWithDescriptor(E5RT::IOSurfaceObject *this, const E5RT::SurfaceDescriptor *a2)
{
  __IOSurface *v3;
  size_t PlaneCount;
  uint64_t SurfacePlaneCount;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  E5RT *PixelFormat;
  unsigned int v11;
  uint64_t *CustomRowStrides;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t SurfaceSliceCount;
  void *v20;
  void *exception;
  size_t v22;
  unint64_t SurfaceWidth;
  unint64_t SurfaceHeight;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD v33[3];
  _BYTE v34[8];
  _QWORD v35[3];

  v3 = (__IOSurface *)*((_QWORD *)this + 1);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v33, "IOSurface not allocated.");
    E5RT::Status::Status(v34, 1, v33);
    E5RT::E5RTError::E5RTError(exception, v35, v34);
  }
  PlaneCount = IOSurfaceGetPlaneCount(v3);
  SurfacePlaneCount = E5RT::SurfaceDescriptor::GetSurfacePlaneCount(a2);
  v7 = SurfacePlaneCount;
  if (PlaneCount != SurfacePlaneCount && (SurfacePlaneCount != 1 || PlaneCount))
  {
    v29 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's plane count does not match with provided Surface Descriptor.");
    E5RT::Status::Status(v34, 2, v33);
    E5RT::E5RTError::E5RTError(v29, v35, v34);
  }
  if (IOSurfaceGetPlaneCount(*((IOSurfaceRef *)this + 1)) >= 2)
  {
    if (IOSurfaceGetPlaneCount(*((IOSurfaceRef *)this + 1)))
    {
      v22 = 0;
      do
      {
        SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(a2);
        if (SurfaceWidth % IOSurfaceGetWidthOfPlane(*((IOSurfaceRef *)this + 1), v22))
        {
          v31 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
          std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's width of plane does not match with provided Surface Descriptor.");
          E5RT::Status::Status(v34, 2, v33);
          E5RT::E5RTError::E5RTError(v31, v35, v34);
        }
        SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(a2);
        if (SurfaceHeight % IOSurfaceGetHeightOfPlane(*((IOSurfaceRef *)this + 1), v22))
        {
          v32 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
          std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's height of plane does not match with provided Surface Descriptor.");
          E5RT::Status::Status(v34, 2, v33);
          E5RT::E5RTError::E5RTError(v32, v35, v34);
        }
        ++v22;
      }
      while (IOSurfaceGetPlaneCount(*((IOSurfaceRef *)this + 1)) > v22);
    }
  }
  else
  {
    v8 = E5RT::SurfaceDescriptor::GetSurfaceWidth(a2);
    if (v8 != IOSurfaceGetWidth(*((IOSurfaceRef *)this + 1)))
    {
      v25 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's width does not match with provided Surface Descriptor.");
      E5RT::Status::Status(v34, 2, v33);
      E5RT::E5RTError::E5RTError(v25, v35, v34);
    }
    v9 = E5RT::SurfaceDescriptor::GetSurfaceHeight(a2);
    if (v9 != IOSurfaceGetHeight(*((IOSurfaceRef *)this + 1)))
    {
      v26 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's height does not match with provided Surface Descriptor.");
      E5RT::Status::Status(v34, 2, v33);
      E5RT::E5RTError::E5RTError(v26, v35, v34);
    }
  }
  PixelFormat = (E5RT *)IOSurfaceGetPixelFormat(*((IOSurfaceRef *)this + 1));
  v11 = E5RT::CVPB4ccToSurfaceFormat(PixelFormat);
  if (E5RT::SurfaceDescriptor::GetSurfaceFormat(a2) != v11)
  {
    v27 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's format does not match with provided Surface Descriptor.");
    E5RT::Status::Status(v34, 2, v33);
    E5RT::E5RTError::E5RTError(v27, v35, v34);
  }
  CustomRowStrides = (uint64_t *)E5RT::SurfaceDescriptor::TryGetCustomRowStrides(a2);
  v13 = *CustomRowStrides;
  v14 = CustomRowStrides[1];
  if (*CustomRowStrides != v14)
  {
    if (v7 != (v14 - v13) >> 3)
    {
      v28 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v33, "Invalid custom per row stride configuration. Length of custom strides is not equal to plane count.");
      E5RT::Status::Status(v34, 2, v33);
      E5RT::E5RTError::E5RTError(v28, v35, v34);
    }
    v15 = CustomRowStrides;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + 8 * v16);
      if (v17 != IOSurfaceGetBytesPerRowOfPlane(*((IOSurfaceRef *)this + 1), v16))
      {
        v20 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
        std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's custom row strides does not match with provided Surface Descriptor.");
        E5RT::Status::Status(v34, 2, v33);
        E5RT::E5RTError::E5RTError(v20, v35, v34);
      }
      ++v16;
      v13 = *v15;
    }
    while (v16 < (v15[1] - *v15) >> 3);
  }
  result = E5RT::IsMultiSliceFormat(v11);
  if ((_DWORD)result)
  {
    SurfaceSliceCount = E5RT::SurfaceDescriptor::GetSurfaceSliceCount(a2);
    result = IOSurfaceGetSliceCount();
    if (result != SurfaceSliceCount)
    {
      v30 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v33, "Invalid slice count: IOSurface slice count does not match with provided Surface Descriptor.");
      E5RT::Status::Status(v34, 2, v33);
      E5RT::E5RTError::E5RTError(v30, v35, v34);
    }
  }
  return result;
}

void sub_190F91A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_9;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_9:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_9;
}

void (**E5RT::SurfaceObject::GetHandle<__IOSurface *>(uint64_t a1))(E5RT::IOSurfaceObject *__hidden this)
{
  void (***v1)(E5RT::IOSurfaceObject *__hidden);
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  v1 = E5RT::SurfaceObjectImpl::TryAsIOSurfaceObject(*(void (****)(E5RT::IOSurfaceObject *__hidden))(a1 + 8));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetHandle");
    std::string::basic_string[abi:ne180100]<0>(v4, "FormattedBuffer object is not backed by an IOSurface.");
    E5RT::Status::Status(v5, 1, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return v1[1];
}

void sub_190F91CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::SurfaceObject::CreateSurfaceFromHandle<__IOSurface *>@<X0>(E5RT::IOSurfaceObject *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  E5RT::AsyncEventImpl *v5;
  const void *v6;
  uint64_t v7;
  E5RT::AsyncEventImpl *v8;
  E5RT::AsyncEventImpl *v9;

  E5RT::IOSurfaceObject::CreateIOSurfaceObjectImplFromHandle(a1, &v9);
  v3 = (_QWORD *)operator new();
  v8 = v9;
  v9 = 0;
  E5RT::SurfaceObject::SurfaceObject(v3, (uint64_t *)&v8);
  *a2 = v3;
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    v6 = (const void *)*((_QWORD *)v5 + 1);
    if (v6)
      CFRelease(v6);
    E5RT::AsyncEventImpl::~AsyncEventImpl(v5);
    return MEMORY[0x19401CD90](v7, 0xA1C40BD48D6D6);
  }
  return result;
}

void sub_190F91DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  MEMORY[0x19401CD90](v2, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100]((E5RT::AsyncEventImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190F91E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100]((E5RT::AsyncEventImpl **)va);
  _Unwind_Resume(a1);
}

void E5RT::MemoryObject::~MemoryObject(E5RT::MemoryObject *this)
{
  JUMPOUT(0x19401CD90);
}

void sub_190F91F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::MemoryObject::Surface(E5RT::MemoryObject *this)
{
  void *result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "Surface");
    std::string::basic_string[abi:ne180100]<0>(v3, "Bad cast failure.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

{
  void *result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "Surface");
    std::string::basic_string[abi:ne180100]<0>(v3, "Bad cast failure.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F9206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_190F92198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

id E5RT::GetSurfaceInformation(E5RT *this, const E5RT::SurfaceDescriptor *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int SurfaceFormat;
  const char *v8;
  void *v9;
  void *v10;
  _QWORD *CustomRowStrides;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  _QWORD v17[6];
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", E5RT::SurfaceDescriptor::GetSurfaceWidth(this));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", E5RT::SurfaceDescriptor::GetSurfaceHeight(this));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", E5RT::SurfaceDescriptor::GetSurfacePlaneCount(this));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", E5RT::SurfaceDescriptor::GetSurfaceSliceCount(this));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  if (SurfaceFormat <= 0x21)
    v8 = E5RT_FB::EnumNamesSurfaceFormat(void)::names[SurfaceFormat];
  else
    v8 = "";
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  CustomRowStrides = (_QWORD *)E5RT::SurfaceDescriptor::TryGetCustomRowStrides(this);
  v12 = (_QWORD *)*CustomRowStrides;
  v13 = (_QWORD *)CustomRowStrides[1];
  if ((_QWORD *)*CustomRowStrides != v13)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", *v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addObject:", v14);

      ++v12;
    }
    while (v12 != v13);
  }
  v17[0] = CFSTR("Width");
  v17[1] = CFSTR("Height");
  v18[0] = v3;
  v18[1] = v4;
  v17[2] = CFSTR("Planes");
  v17[3] = CFSTR("Format");
  v18[2] = v5;
  v18[3] = v9;
  v17[4] = CFSTR("BytesPerRowStrides");
  v17[5] = CFSTR("Slices");
  v18[4] = v10;
  v18[5] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_190F92414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id E5RT::GetTensorDataTypeInformation(E5RT *this, const E5RT::TensorDataType *a2)
{
  int ComponentDataType;
  int ComponentSize;
  uint64_t NumComponents;
  __CFString *v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  std::runtime_error *exception;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  ComponentDataType = E5RT::TensorDataType::GetComponentDataType(this);
  ComponentSize = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType::Impl **)this);
  NumComponents = E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)this);
  v6 = &stru_1E2DD80E0;
  if (ComponentDataType == 4)
  {
    v7 = CFSTR("Float32");
    if (ComponentSize != 4)
      v7 = &stru_1E2DD80E0;
    if (ComponentSize == 2)
      v6 = CFSTR("Float16");
    else
      v6 = (__CFString *)v7;
  }
  else if (ComponentDataType == 1)
  {
    if ((ComponentSize - 1) < 4u)
      v6 = off_1E2DCEDA8[(char)(ComponentSize - 1)];
  }
  else if (!ComponentDataType && (ComponentSize - 1) < 4u)
  {
    v6 = off_1E2DCED88[(char)(ComponentSize - 1)];
  }
  if (-[__CFString isEqualToString:](v6, "isEqualToString:", &stru_1E2DD80E0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown tensor component data type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12[0] = CFSTR("ComponentDataType");
  v12[1] = CFSTR("Interleave");
  v13[0] = v6;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", NumComponents);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[1] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_190F9261C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_190F92630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id E5RT::GetTensorInformation(E5RT *this, const E5RT::TensorDescriptor *a2)
{
  const E5RT::TensorDataType *v3;
  void *v4;
  int HasKnownShape;
  __CFString *v6;
  __CFString *v7;
  void *v8;
  uint64_t TensorShape;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t TensorStrides;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v20;
  void *v21;
  _BYTE v22[16];
  _QWORD v23[6];
  _QWORD v24[7];

  v24[6] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", E5RT::TensorDescriptor::GetRank(this));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (E5RT::TensorDescriptor::HasKnownShape(this))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)this));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = &unk_1E2DED9B8;
  }
  E5RT::TensorDescriptor::GetTensorDataType(this, (E5RT::TensorDataType *)v22);
  E5RT::GetTensorDataTypeInformation((E5RT *)v22, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v22);
  HasKnownShape = E5RT::TensorDescriptor::HasKnownShape(this);
  v6 = CFSTR("NO");
  if (HasKnownShape)
    v6 = CFSTR("YES");
  v7 = v6;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = *(_QWORD **)TensorShape;
  v10 = *(_QWORD **)(TensorShape + 8);
  if (*(_QWORD **)TensorShape != v10)
  {
    do
    {
      if (*v11 == -1)
      {
        v12 = &unk_1E2DED9B8;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v8, "addObject:", v12);

      ++v11;
    }
    while (v11 != v10);
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(this);
  v16 = *(_QWORD **)TensorStrides;
  v15 = *(_QWORD **)(TensorStrides + 8);
  if (*(_QWORD **)TensorStrides != v15)
  {
    do
    {
      v17 = &unk_1E2DED9B8;
      if (*v16 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v13, "addObject:", v17);

      ++v16;
    }
    while (v16 != v15);
  }
  v23[0] = CFSTR("Rank");
  v23[1] = CFSTR("Size");
  v24[0] = v21;
  v24[1] = v20;
  v23[2] = CFSTR("DataType");
  v23[3] = CFSTR("Shape");
  v24[2] = v4;
  v24[3] = v8;
  v23[4] = CFSTR("Strides");
  v23[5] = CFSTR("HasKnownShape");
  v24[4] = v13;
  v24[5] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 6);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

void sub_190F928CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t E5RT::GetOperandDescriptorInformation@<X0>(E5RT *this@<X0>, uint64_t a2@<X8>)
{
  E5RT *v5;
  const E5RT::TensorDescriptor *v6;
  uint64_t result;
  E5RT *v8;
  const E5RT::SurfaceDescriptor *v9;

  v5 = (E5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(this);
  if (v5)
  {
    E5RT::GetTensorInformation(v5, v6);
    result = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    v8 = (E5RT *)E5RT::OperandDescriptor::SurfaceDescriptor(this);
    E5RT::GetSurfaceInformation(v8, v9);
    result = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

void E5RT::GetTensorDescriptor(E5RT *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  id v8;
  uint64_t i;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t j;
  void *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  void *v88;
  uint64_t v89;
  id v90;
  id v91;
  const char *v92;
  size_t v93;
  size_t v94;
  void **p_dst;
  uint64_t v96;
  uint64_t v97;
  std::string::size_type v98;
  void **v99;
  unsigned int v100;
  int v102;
  int v103;
  int v106;
  int v107;
  int v111;
  int v112;
  unint64_t v114;
  void *v115;
  unint64_t v116;
  unint64_t v117;
  _DWORD *v118;
  unsigned int v119;
  void *v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  std::string::size_type size;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  void *exception;
  void *v132;
  _QWORD *v133;
  E5RT *v134;
  uint64_t v135;
  id v136;
  id v137;
  id obj;
  void *__p[2];
  char v140;
  E5RT::TensorDataType::Impl *v141[2];
  void *v142;
  void *v143;
  uint64_t *v144;
  void *v145;
  void *v146;
  uint64_t *v147;
  _BYTE v148[32];
  __int128 v149;
  __int128 v150;
  void **__dst;
  size_t v152;
  int64_t v153;
  std::string v154;
  std::string v155;
  std::string v156;
  _OWORD v157[8];
  uint64_t v158;

  v133 = a2;
  v158 = *MEMORY[0x1E0C80C00];
  BYTE7(v157[1]) = 5;
  strcpy((char *)v157, "Shape");
  v134 = this;
  sub_190F93CE8(v134, (uint64_t *)v157);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v157[1]) < 0)
    operator delete(*(void **)&v157[0]);
  v146 = 0;
  v147 = 0;
  v145 = 0;
  memset(v148, 0, sizeof(v148));
  v149 = 0u;
  v150 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v148, v157, 16);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = **(id **)&v148[16];
    v136 = **(id **)&v148[16];
    while (1)
    {
      for (i = 0; i != v4; ++i)
      {
        if (**(id **)&v148[16] != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*(_QWORD *)&v148[8] + 8 * i);
        if (!objc_msgSend(v10, "isEqualToNumber:", &unk_1E2DED9B8, v133, v134))
        {
          v18 = objc_msgSend(v10, "unsignedIntegerValue");
          v19 = v18;
          if (v7 < v6)
          {
            *v7++ = v18;
            continue;
          }
          v20 = (char *)v7 - (char *)v5;
          v21 = v7 - v5;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
          {
            v146 = v7;
            v147 = v6;
            v145 = v5;
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v6 - (char *)v5) >> 2 > v22)
            v22 = ((char *)v6 - (char *)v5) >> 2;
          if ((unint64_t)((char *)v6 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
          {
            if (v23 >> 61)
            {
              v146 = v7;
              v147 = v6;
              v145 = v5;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v24 = operator new(8 * v23);
            v25 = (uint64_t *)&v24[8 * v21];
            *v25 = v19;
            v26 = v25 + 1;
            if (v7 == v5)
              goto LABEL_45;
LABEL_42:
            v30 = (char *)(v7 - 1) - (char *)v5;
            if (v30 < 0x168)
            {
              v31 = v7;
              goto LABEL_44;
            }
            if (&v24[v20 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v24[v20 - 8])
            {
              v31 = v7;
              goto LABEL_44;
            }
            if ((uint64_t *)((char *)v7 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
            {
              v31 = v7;
              goto LABEL_44;
            }
            if ((unint64_t)((char *)v5 - v24) < 0x20)
            {
              v31 = v7;
              goto LABEL_44;
            }
            v39 = (v30 >> 3) + 1;
            v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
            v31 = &v7[v40 / 0xFFFFFFFFFFFFFFF8];
            v25 = (uint64_t *)((char *)v25 - v40);
            v41 = &v24[v20 - 16];
            v42 = v7 - 2;
            v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              *v41 = v44;
              v41 -= 2;
              v42 -= 4;
              v43 -= 4;
            }
            while (v43);
            if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_44:
                v32 = *--v31;
                *--v25 = v32;
              }
              while (v31 != v5);
            }
          }
          else
          {
            v24 = 0;
            v25 = (uint64_t *)(8 * v21);
            *v25 = v19;
            v26 = v25 + 1;
            if (v7 != v5)
              goto LABEL_42;
          }
LABEL_45:
          v6 = (uint64_t *)&v24[8 * v23];
          if (v5)
            operator delete(v5);
          v5 = v25;
          v7 = v26;
          goto LABEL_48;
        }
        if (v7 < v6)
        {
          *v7++ = -1;
          continue;
        }
        v11 = (char *)v7 - (char *)v5;
        v12 = v7 - v5;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
        {
          v146 = v7;
          v147 = v6;
          v145 = v5;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v6 - (char *)v5) >> 2 > v13)
          v13 = ((char *)v6 - (char *)v5) >> 2;
        if ((unint64_t)((char *)v6 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          if (v14 >> 61)
          {
            v146 = v7;
            v147 = v6;
            v145 = v5;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v15 = operator new(8 * v14);
          v16 = (uint64_t *)&v15[8 * v12];
          *v16 = -1;
          v17 = (uint64_t)(v16 + 1);
          if (v7 == v5)
            goto LABEL_38;
        }
        else
        {
          v15 = 0;
          v16 = (uint64_t *)(8 * v12);
          *(_QWORD *)(8 * v12) = -1;
          v17 = 8 * v12 + 8;
          if (v7 == v5)
            goto LABEL_38;
        }
        v27 = (char *)(v7 - 1) - (char *)v5;
        if (v27 >= 0x168)
        {
          if (&v15[v11 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v15[v11 - 8])
          {
            v28 = v7;
          }
          else if ((uint64_t *)((char *)v7 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
          {
            v28 = v7;
          }
          else if ((unint64_t)((char *)v5 - v15) >= 0x20)
          {
            v33 = (v27 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v28 = &v7[v34 / 0xFFFFFFFFFFFFFFF8];
            v16 = (uint64_t *)((char *)v16 - v34);
            v35 = &v15[v11 - 16];
            v36 = v7 - 2;
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              *v35 = v38;
              v35 -= 2;
              v36 -= 4;
              v37 -= 4;
            }
            while (v37);
            if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_38;
          }
          else
          {
            v28 = v7;
          }
        }
        else
        {
          v28 = v7;
        }
        do
        {
          v29 = *--v28;
          *--v16 = v29;
        }
        while (v28 != v5);
LABEL_38:
        v6 = (uint64_t *)&v15[8 * v14];
        if (v5)
          operator delete(v5);
        v5 = v16;
        v7 = (uint64_t *)v17;
LABEL_48:
        v8 = v136;
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v148, v157, 16);
      if (!v4)
      {
        v146 = v7;
        v147 = v6;
        v145 = v5;
        break;
      }
    }
  }

  BYTE7(v157[1]) = 7;
  strcpy((char *)v157, "Strides");
  sub_190F93CE8(v134, (uint64_t *)v157);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v157[1]) < 0)
    operator delete(*(void **)&v157[0]);
  v46 = v45;
  v143 = 0;
  v144 = 0;
  v142 = 0;
  memset(v148, 0, sizeof(v148));
  v149 = 0u;
  v150 = 0u;
  v137 = v46;
  v47 = objc_msgSend(v137, "countByEnumeratingWithState:objects:count:", v148, v157, 16);
  if (v47)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = **(_QWORD **)&v148[16];
    v135 = **(_QWORD **)&v148[16];
    while (1)
    {
      for (j = 0; j != v47; ++j)
      {
        if (**(_QWORD **)&v148[16] != v51)
          objc_enumerationMutation(v137);
        v53 = *(void **)(*(_QWORD *)&v148[8] + 8 * j);
        if (objc_msgSend(v53, "isEqualToNumber:", &unk_1E2DED9B8, v133))
        {
          if (v50 < v49)
          {
            *v50++ = 0x7FFFFFFFFFFFFFFFLL;
            continue;
          }
          v54 = (char *)v50 - (char *)v48;
          v55 = v50 - v48;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
          {
            v143 = v50;
            v144 = v49;
            v142 = v48;
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v49 - (char *)v48) >> 2 > v56)
            v56 = ((char *)v49 - (char *)v48) >> 2;
          if ((unint64_t)((char *)v49 - (char *)v48) >= 0x7FFFFFFFFFFFFFF8)
            v57 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          if (v57)
          {
            if (v57 >> 61)
            {
              v143 = v50;
              v144 = v49;
              v142 = v48;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v58 = operator new(8 * v57);
            v59 = (uint64_t *)&v58[8 * v55];
            *v59 = 0x7FFFFFFFFFFFFFFFLL;
            v60 = v59 + 1;
            if (v50 == v48)
              goto LABEL_108;
LABEL_105:
            v70 = (char *)(v50 - 1) - (char *)v48;
            if (v70 < 0x168)
            {
              v71 = v50;
              goto LABEL_107;
            }
            if (&v58[v54 - 8 - (v70 & 0xFFFFFFFFFFFFFFF8)] > &v58[v54 - 8])
            {
              v71 = v50;
              goto LABEL_107;
            }
            if ((uint64_t *)((char *)v50 - (v70 & 0xFFFFFFFFFFFFFFF8) - 8) > v50 - 1)
            {
              v71 = v50;
              goto LABEL_107;
            }
            if ((unint64_t)((char *)v48 - v58) < 0x20)
            {
              v71 = v50;
              goto LABEL_107;
            }
            v76 = (v70 >> 3) + 1;
            v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            v71 = &v50[v77 / 0xFFFFFFFFFFFFFFF8];
            v59 = (uint64_t *)((char *)v59 - v77);
            v78 = &v58[v54 - 16];
            v79 = v50 - 2;
            v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *(_OWORD *)v79;
              *(v78 - 1) = *((_OWORD *)v79 - 1);
              *v78 = v81;
              v78 -= 2;
              v79 -= 4;
              v80 -= 4;
            }
            while (v80);
            if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_107:
                v72 = *--v71;
                *--v59 = v72;
              }
              while (v71 != v48);
            }
          }
          else
          {
            v58 = 0;
            v59 = (uint64_t *)(8 * v55);
            *v59 = 0x7FFFFFFFFFFFFFFFLL;
            v60 = v59 + 1;
            if (v50 != v48)
              goto LABEL_105;
          }
LABEL_108:
          v49 = (uint64_t *)&v58[8 * v57];
          if (v48)
            operator delete(v48);
          v48 = v59;
          v50 = v60;
          continue;
        }
        v61 = objc_msgSend(v53, "integerValue");
        v62 = v61;
        if (v50 < v49)
        {
          *v50++ = v61;
          continue;
        }
        v63 = (char *)v50 - (char *)v48;
        v64 = v50 - v48;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61)
        {
          v143 = v50;
          v144 = v49;
          v142 = v48;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v49 - (char *)v48) >> 2 > v65)
          v65 = ((char *)v49 - (char *)v48) >> 2;
        if ((unint64_t)((char *)v49 - (char *)v48) >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
        {
          if (v66 >> 61)
          {
            v143 = v50;
            v144 = v49;
            v142 = v48;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v67 = operator new(8 * v66);
          v68 = (uint64_t *)&v67[8 * v64];
          *v68 = v62;
          v69 = v68 + 1;
          if (v50 == v48)
            goto LABEL_115;
        }
        else
        {
          v67 = 0;
          v68 = (uint64_t *)(8 * v64);
          *v68 = v62;
          v69 = v68 + 1;
          if (v50 == v48)
            goto LABEL_115;
        }
        v73 = (char *)(v50 - 1) - (char *)v48;
        if (v73 >= 0x168)
        {
          if (&v67[v63 - 8 - (v73 & 0xFFFFFFFFFFFFFFF8)] > &v67[v63 - 8])
          {
            v74 = v50;
          }
          else if ((uint64_t *)((char *)v50 - (v73 & 0xFFFFFFFFFFFFFFF8) - 8) > v50 - 1)
          {
            v74 = v50;
          }
          else if ((unint64_t)((char *)v48 - v67) >= 0x20)
          {
            v82 = (v73 >> 3) + 1;
            v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v74 = &v50[v83 / 0xFFFFFFFFFFFFFFF8];
            v68 = (uint64_t *)((char *)v68 - v83);
            v84 = &v67[v63 - 16];
            v85 = v50 - 2;
            v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v87 = *(_OWORD *)v85;
              *(v84 - 1) = *((_OWORD *)v85 - 1);
              *v84 = v87;
              v84 -= 2;
              v85 -= 4;
              v86 -= 4;
            }
            while (v86);
            if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_115;
          }
          else
          {
            v74 = v50;
          }
        }
        else
        {
          v74 = v50;
        }
        do
        {
          v75 = *--v74;
          *--v68 = v75;
        }
        while (v74 != v48);
LABEL_115:
        v49 = (uint64_t *)&v67[8 * v66];
        if (v48)
          operator delete(v48);
        v48 = v68;
        v50 = v69;
        v51 = v135;
      }
      v47 = objc_msgSend(v137, "countByEnumeratingWithState:objects:count:", v148, v157, 16);
      if (!v47)
      {
        v143 = v50;
        v144 = v49;
        v142 = v48;
        break;
      }
    }
  }

  BYTE7(v157[1]) = 4;
  strcpy((char *)v157, "Size");
  sub_190F93CE8(v134, (uint64_t *)v157);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = objc_msgSend(v88, "unsignedIntegerValue");

  if (SBYTE7(v157[1]) < 0)
    operator delete(*(void **)&v157[0]);
  v140 = 8;
  strcpy((char *)__p, "DataType");
  sub_190F93CE8(v134, (uint64_t *)__p);
  v90 = (id)objc_claimAutoreleasedReturnValue();
  BYTE7(v157[1]) = 17;
  strcpy((char *)v157, "ComponentDataType");
  sub_190F93CE8(v90, (uint64_t *)v157);
  v91 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v92 = (const char *)objc_msgSend(v91, "UTF8String");
  v93 = strlen(v92);
  if (v93 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v94 = v93;
  if (v93 >= 0x17)
  {
    v96 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v96 = v93 | 7;
    v97 = v96 + 1;
    p_dst = (void **)operator new(v96 + 1);
    v152 = v94;
    v153 = v97 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v153) = v93;
    p_dst = (void **)&__dst;
    if (!v93)
      goto LABEL_150;
  }
  memmove(p_dst, v92, v94);
LABEL_150:
  *((_BYTE *)p_dst + v94) = 0;

  if (SBYTE7(v157[1]) < 0)
    operator delete(*(void **)&v157[0]);
  v98 = HIBYTE(v153);
  v99 = (void **)&__dst;
  if (v153 < 0)
  {
    v99 = __dst;
    v98 = v152;
  }
  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
  v156.__r_.__value_.__l.__size_ = v98;
  switch(v98)
  {
    case 4uLL:
      if (*(_DWORD *)v99 != 947154505)
        goto LABEL_241;
      v100 = 1;
      goto LABEL_191;
    case 5uLL:
      if (*(_DWORD *)v99 == 829713993 && *((_BYTE *)v99 + 4) == 54)
      {
        v100 = 1;
        v114 = 16;
        goto LABEL_197;
      }
      if (*(_DWORD *)v99 == 863268425 && *((_BYTE *)v99 + 4) == 50)
      {
        v100 = 1;
        goto LABEL_196;
      }
      v111 = *(_DWORD *)v99;
      v112 = *((unsigned __int8 *)v99 + 4);
      if (v111 != 1953384789 || v112 != 56)
        goto LABEL_241;
      v100 = 0;
LABEL_191:
      v114 = 8;
      goto LABEL_197;
    case 6uLL:
      if (*(_DWORD *)v99 == 1953384789 && *((_WORD *)v99 + 2) == 13873)
      {
        v100 = 0;
        v114 = 16;
        goto LABEL_197;
      }
      v102 = *(_DWORD *)v99;
      v103 = *((unsigned __int16 *)v99 + 2);
      if (v102 != 1953384789 || v103 != 12851)
        goto LABEL_241;
      v100 = 0;
      goto LABEL_196;
    case 7uLL:
      if (*(_DWORD *)v99 == 1634692166 && *(_DWORD *)((char *)v99 + 3) == 909210721)
      {
        v100 = 4;
        v114 = 16;
      }
      else
      {
        v106 = *(_DWORD *)v99;
        v107 = *(_DWORD *)((char *)v99 + 3);
        if (v106 != 1634692166 || v107 != 842232929)
        {
LABEL_241:
          std::string::basic_string<std::string_view,0>(v148, (uint64_t)&v156);
          v129 = std::string::insert((std::string *)v148, 0, "Invalid component data type: ");
          v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          *(_QWORD *)&v157[1] = *((_QWORD *)&v129->__r_.__value_.__l + 2);
          v157[0] = v130;
          v129->__r_.__value_.__l.__size_ = 0;
          v129->__r_.__value_.__r.__words[2] = 0;
          v129->__r_.__value_.__r.__words[0] = 0;
          if ((v148[23] & 0x80000000) != 0)
            operator delete(*(void **)v148);
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "ParseComponentDataType");
          E5RT::Status::Status(&v155, 1, v157);
          E5RT::E5RTError::E5RTError(exception, v148, &v155);
        }
        v100 = 4;
LABEL_196:
        v114 = 32;
      }
LABEL_197:
      BYTE7(v157[1]) = 10;
      strcpy((char *)v157, "Interleave");
      sub_190F93CE8(v90, (uint64_t *)v157);
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      v116 = objc_msgSend(v115, "unsignedIntegerValue");

      if (SBYTE7(v157[1]) < 0)
      {
        operator delete(*(void **)&v157[0]);
        if (v114 != 32)
          goto LABEL_199;
LABEL_204:
        v117 = v116 - 1;
        if (v116 - 1 >= 8 || ((0x8Bu >> v117) & 1) == 0)
          goto LABEL_229;
        v118 = &unk_191A7FA0C;
        goto LABEL_210;
      }
      if (v114 == 32)
        goto LABEL_204;
LABEL_199:
      if (v114 != 16)
      {
        v117 = v116 - 1;
        if (v116 - 1 < 8 && ((0x8Bu >> v117) & 1) != 0)
        {
          v118 = &unk_191A7F9CC;
          goto LABEL_210;
        }
LABEL_229:
        std::to_string(&v155, v114);
        v121 = std::string::insert(&v155, 0, "Invalid component pack: size ");
        v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
        v156.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v122;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        v123 = std::string::append(&v156, ", interleave: ");
        v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        *(_QWORD *)&v148[16] = *((_QWORD *)&v123->__r_.__value_.__l + 2);
        *(_OWORD *)v148 = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v154, v116);
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v125 = &v154;
        else
          v125 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        else
          size = v154.__r_.__value_.__l.__size_;
        v127 = std::string::append((std::string *)v148, (const std::string::value_type *)v125, size);
        v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        *(_QWORD *)&v157[1] = *((_QWORD *)&v127->__r_.__value_.__l + 2);
        v157[0] = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v154.__r_.__value_.__l.__data_);
          if ((v148[23] & 0x80000000) == 0)
            goto LABEL_237;
        }
        else if ((v148[23] & 0x80000000) == 0)
        {
LABEL_237:
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_238;
          goto LABEL_246;
        }
        operator delete(*(void **)v148);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_238:
          operator delete(v156.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_248:
            v132 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(v148, "ParseComponentPack");
            E5RT::Status::Status(&v156, 1, v157);
            E5RT::E5RTError::E5RTError(v132, v148, &v156);
          }
LABEL_247:
          operator delete(v155.__r_.__value_.__l.__data_);
          goto LABEL_248;
        }
LABEL_246:
        if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_248;
        goto LABEL_247;
      }
      v117 = v116 - 1;
      if (v116 - 1 >= 8 || ((0x8Bu >> v117) & 1) == 0)
        goto LABEL_229;
      v118 = &unk_191A7F9EC;
LABEL_210:
      v119 = v118[v117];
      if ((E5RT::TensorDataType::ValidateDataTypeSpec(v100, v119) & 1) == 0)
      {
        v120 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v157, "ParseTensorDataType");
        std::string::basic_string[abi:ne180100]<0>(v148, "Invalid component data type/pack");
        E5RT::Status::Status(&v156, 2, v148);
        E5RT::E5RTError::E5RTError(v120, v157, &v156);
      }
      E5RT::TensorDataType::TensorDataType(v141, v100, v119);
      if (SHIBYTE(v153) < 0)
        operator delete(__dst);

      if (v140 < 0)
        operator delete(__p[0]);
      E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesAndSize(v141, (uint64_t *)&v145, &v142, v89, v133);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v141);
      if (v142)
      {
        v143 = v142;
        operator delete(v142);
      }

      if (v145)
      {
        v146 = v145;
        operator delete(v145);
      }

      return;
    default:
      goto LABEL_241;
  }
}

void sub_190F9399C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  int v63;
  void *v64;
  void *v65;
  uint64_t v66;

  E5RT::Status::~Status((E5RT::Status *)&a58);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v63 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v63)
  {
LABEL_6:
    if (*(char *)(v66 - 217) < 0)
      operator delete(*(void **)(v66 - 240));
    if (a45 < 0)
      operator delete(a40);

    if (a19 < 0)
      operator delete(a14);
    if (a22)
      operator delete(a22);

    if (a25)
      operator delete(a25);

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v65);
  goto LABEL_6;
}

id sub_190F93CE8(void *a1, uint64_t *a2)
{
  id v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  std::string *v8;
  __int128 v9;
  void *exception;
  uint64_t v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  v3 = a1;
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    std::operator+<char>();
    v8 = std::string::append(&v12, " in dictionary");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14 = v8->__r_.__value_.__r.__words[2];
    v13 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "GetExpectedValueFromDictionary");
    E5RT::Status::Status(&v11, 1, &v13);
    E5RT::E5RTError::E5RTError(exception, &v12, &v11);
  }

  return v6;
}

void sub_190F93E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
      {
        operator delete(a16);

        _Unwind_Resume(a1);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void E5RT::GetSurfaceDescriptor(E5RT *this@<X0>, _QWORD *a2@<X8>)
{
  E5RT *v4;
  id v5;
  const char *v6;
  size_t v7;
  size_t v8;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  char **v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  void *v46;
  unint64_t v47;
  void *exception;
  uint64_t v49;
  uint64_t v50;
  E5RT *v51;
  char **v52;
  _QWORD *v53;
  uint64_t v54;
  id obj;
  uint64_t v56;
  void *__p[2];
  char v58;
  void *v59;
  void *v60;
  char *v61;
  char v62[8];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE __s1[120];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = this;
  v58 = 6;
  strcpy((char *)__p, "Format");
  sub_190F93CE8(v4, (uint64_t *)__p);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = (const char *)objc_msgSend(v5, "UTF8String");
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v9 = operator new(v12 + 1);
    *(_QWORD *)&__s1[8] = v8;
    *(_QWORD *)&__s1[16] = v13 | 0x8000000000000000;
    *(_QWORD *)__s1 = v9;
  }
  else
  {
    __s1[23] = v7;
    v9 = __s1;
    if (!v7)
    {
      __s1[0] = 0;
      v10 = __s1[23];
      if ((__s1[23] & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_14;
    }
  }
  memmove(v9, v6, v8);
  v9[v8] = 0;
  v10 = __s1[23];
  if ((__s1[23] & 0x80000000) == 0)
  {
LABEL_5:
    v11 = 0;
    while (strlen(E5RT_FB::EnumNamesSurfaceFormat(void)::names[v11]) != v10
         || memcmp(__s1, E5RT_FB::EnumNamesSurfaceFormat(void)::names[v11], v10))
    {
      if (++v11 == 34)
        goto LABEL_77;
    }
    goto LABEL_19;
  }
LABEL_14:
  v14 = *(_QWORD *)&__s1[8];
  if (*(_QWORD *)&__s1[8] == -1)
    goto LABEL_77;
  v11 = 0;
  v15 = *(const void **)__s1;
  while (strlen(E5RT_FB::EnumNamesSurfaceFormat(void)::names[v11]) != v14
       || memcmp(v15, E5RT_FB::EnumNamesSurfaceFormat(void)::names[v11], v14))
  {
    if (++v11 == 34)
      goto LABEL_77;
  }
LABEL_19:
  v16 = &E5RT_FB::EnumNamesSurfaceFormat(void)::names[v11];
  if (v16 == (char **)&unk_1E2DCED80)
  {
LABEL_77:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v63, "GetSurfaceFormatFromStr");
    std::operator+<char>();
    E5RT::Status::Status(v62, 2, &v59);
    E5RT::E5RTError::E5RTError(exception, &v63, v62);
  }
  if ((v10 & 0x80) != 0)
    operator delete(*(void **)__s1);

  if (v58 < 0)
    operator delete(__p[0]);
  __s1[23] = 5;
  strcpy(__s1, "Width");
  sub_190F93CE8(v4, (uint64_t *)__s1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "unsignedIntegerValue");

  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  __s1[23] = 6;
  strcpy(__s1, "Height");
  sub_190F93CE8(v4, (uint64_t *)__s1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "unsignedIntegerValue");

  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  __s1[23] = 18;
  strcpy(__s1, "BytesPerRowStrides");
  sub_190F93CE8(v4, (uint64_t *)__s1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  v52 = v16;
  v53 = a2;
  v22 = v21;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  obj = v22;
  v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, __s1, 16);
  if (v23)
  {
    v49 = v20;
    v50 = v18;
    v51 = v4;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v56 = *(_QWORD *)v64;
    while (1)
    {
      v29 = 0;
      v54 = v23;
      do
      {
        while (1)
        {
          if (*(_QWORD *)v64 != v56)
            objc_enumerationMutation(obj);
          v30 = objc_msgSend(*(id *)(*((_QWORD *)&v63 + 1) + 8 * v29), "unsignedIntegerValue");
          v31 = v30;
          if ((unint64_t)v25 >= v28)
            break;
          *v25++ = v30;
          if (++v29 == v23)
            goto LABEL_65;
        }
        v32 = v25 - v27;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
        {
          v59 = v26;
          v60 = v25;
          v61 = v24;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v28 - (_QWORD)v27) >> 2 > v33)
          v33 = (uint64_t)(v28 - (_QWORD)v27) >> 2;
        if (v28 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
        {
          if (v34 >> 61)
          {
            v59 = v26;
            v60 = v25;
            v61 = v24;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v35 = operator new(8 * v34);
          v26 = (uint64_t *)&v35[8 * v32];
          *v26 = v31;
          v36 = (uint64_t)(v26 + 1);
          if (v25 == v27)
            goto LABEL_51;
        }
        else
        {
          v35 = 0;
          v26 = (uint64_t *)(8 * v32);
          *(_QWORD *)(8 * v32) = v31;
          v36 = 8 * v32 + 8;
          if (v25 == v27)
            goto LABEL_51;
        }
        v37 = (char *)(v25 - 1) - (char *)v27;
        if (v37 < 0x168)
        {
          v38 = v25;
          goto LABEL_50;
        }
        if (&v35[(char *)v25 - (char *)v27 - 8 - (v37 & 0xFFFFFFFFFFFFFFF8)] > &v35[(char *)v25 - (char *)v27 - 8])
        {
          v38 = v25;
          do
          {
LABEL_50:
            v39 = *--v38;
            *--v26 = v39;
          }
          while (v38 != v27);
          goto LABEL_51;
        }
        if ((uint64_t *)((char *)v25 - (v37 & 0xFFFFFFFFFFFFFFF8) - 8) > v25 - 1)
        {
          v38 = v25;
          goto LABEL_50;
        }
        if ((unint64_t)((char *)v27 - v35) < 0x20)
        {
          v38 = v25;
          goto LABEL_50;
        }
        v40 = (v37 >> 3) + 1;
        v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v38 = &v25[v41 / 0xFFFFFFFFFFFFFFF8];
        v26 = (uint64_t *)((char *)v26 - v41);
        v42 = &v35[8 * v32 - 16];
        v43 = v25 - 2;
        v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *(_OWORD *)v43;
          *(v42 - 1) = *((_OWORD *)v43 - 1);
          *v42 = v45;
          v42 -= 2;
          v43 -= 4;
          v44 -= 4;
        }
        while (v44);
        if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_50;
LABEL_51:
        v24 = &v35[8 * v34];
        if (v27)
          operator delete(v27);
        v27 = v26;
        v28 = (unint64_t)v24;
        v25 = (uint64_t *)v36;
        v23 = v54;
        ++v29;
      }
      while (v29 != v54);
LABEL_65:
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, __s1, 16);
      if (!v23)
      {
        v59 = v26;
        v60 = v25;
        v61 = v24;
        v18 = v50;
        v4 = v51;
        v20 = v49;
        break;
      }
    }
  }

  __s1[23] = 6;
  strcpy(__s1, "Slices");
  sub_190F93CE8(v4, (uint64_t *)__s1);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v46, "unsignedIntegerValue");

  if ((__s1[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__s1);
    if (v59 != v60)
      goto LABEL_69;
  }
  else if (v59 != v60)
  {
LABEL_69:
    E5RT::SurfaceDescriptor::CreateSurfaceDescriptor((unint64_t)((char *)v52 - (char *)E5RT_FB::EnumNamesSurfaceFormat(void)::names) >> 3, v18, v20, &v59, v47, v53);
    goto LABEL_72;
  }
  E5RT::SurfaceDescriptor::CreateSurfaceDescriptor((unint64_t)((char *)v52 - (char *)E5RT_FB::EnumNamesSurfaceFormat(void)::names) >> 3, v18, v20, v47, v53);
LABEL_72:
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }

}

void sub_190F94588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void E5RT::OperandDescriptor::~OperandDescriptor(E5RT::OperandDescriptor *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::OperandDescriptor::operator==(const void *a1, const void *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v8;
  uint64_t v9;
  void *v10;

  if (a1)
  {
    if (v4)
    {
      v5 = (uint64_t)v4;
      if (v6)
        return E5RT::operator==(v5, (uint64_t)v6);
    }
    else
    {
      if (v8)
      {
        v9 = (uint64_t)v8;
        if (v10)
          return E5RT::SurfaceDescriptor::operator==(v9, (uint64_t)v10);
      }
    }
  }
  return 0;
}

uint64_t E5RT::OperandDescriptor::operator!=(const void *a1, const void *a2)
{
  return E5RT::OperandDescriptor::operator==(a1, a2) ^ 1;
}

_QWORD *E5RT::SurfaceDescriptor::SurfaceDescriptor(E5RT::SurfaceDescriptor *this)
{
  _QWORD *result;

  result = E5RT::OperandDescriptor::OperandDescriptor(this);
  *result = &off_1E2D5AE60;
  result[1] = 0;
  return result;
}

{
  _QWORD *result;

  result = E5RT::OperandDescriptor::OperandDescriptor(this);
  *result = &off_1E2D5AE60;
  result[1] = 0;
  return result;
}

_QWORD *E5RT::SurfaceDescriptor::SurfaceDescriptor(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::OperandDescriptor::OperandDescriptor(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D5AE60;
  result[1] = v4;
  return result;
}

{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::OperandDescriptor::OperandDescriptor(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D5AE60;
  result[1] = v4;
  return result;
}

uint64_t E5RT::SurfaceDescriptor::GetSurfacePlaneCount(E5RT::SurfaceDescriptor *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16);
}

uint64_t E5RT::SurfaceDescriptor::GetSurfaceSliceCount(E5RT::SurfaceDescriptor *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

uint64_t E5RT::SurfaceDescriptor::GetSurfaceFormat(E5RT::SurfaceDescriptor *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 32);
}

uint64_t E5RT::SurfaceDescriptor::TryGetCustomRowStrides(E5RT::SurfaceDescriptor *this)
{
  return *((_QWORD *)this + 1) + 40;
}

uint64_t E5RT::SurfaceDescriptor::GetCustomRowStrides(E5RT::SurfaceDescriptor *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void *exception;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[3];

  v1 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  result = v1 + 40;
  if (v3 == v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetCustomRowStrides");
    std::string::basic_string[abi:ne180100]<0>(v6, "SurfaceDescriptor was not created with any custom row strides");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  return result;
}

void sub_190F94A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

BOOL E5RT::SurfaceDescriptor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  return *(_QWORD *)v2 == *(_QWORD *)v3
      && *(_QWORD *)(v2 + 8) == *(_QWORD *)(v3 + 8)
      && *(_QWORD *)(v2 + 16) == *(_QWORD *)(v3 + 16)
      && *(_QWORD *)(v2 + 24) == *(_QWORD *)(v3 + 24)
      && *(_DWORD *)(v2 + 32) == *(_DWORD *)(v3 + 32);
}

BOOL E5RT::SurfaceDescriptor::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  return *(_QWORD *)v2 != *(_QWORD *)v3
      || *(_QWORD *)(v2 + 8) != *(_QWORD *)(v3 + 8)
      || *(_QWORD *)(v2 + 16) != *(_QWORD *)(v3 + 16)
      || *(_QWORD *)(v2 + 24) != *(_QWORD *)(v3 + 24)
      || *(_DWORD *)(v2 + 32) != *(_DWORD *)(v3 + 32);
}

uint64_t *std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x19401CD90](v2, 0x1010C40037D6C11);
  }
  return a1;
}

_QWORD *E5RT::SurfaceDescriptor::CreateSurfaceDescriptor@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  void *exception;
  void *v14;
  _QWORD v15[3];
  _BYTE v16[8];
  _QWORD v17[3];

  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "CreateSurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v15, "Invalid surface dimensions. Specified width or height must not be 0.");
    E5RT::Status::Status(v16, 1, v15);
    E5RT::E5RTError::E5RTError(exception, v17, v16);
  }
  if (*a4 == a4[1])
  {
    v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "CreateSurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v15, "Invalid custom per row stride. Expect an array of strides. Received empty array.");
    E5RT::Status::Status(v16, 1, v15);
    E5RT::E5RTError::E5RTError(v14, v17, v16);
  }
  v10 = operator new();
  E5RT::SurfaceDescriptorImpl::SurfaceDescriptorImpl(v10, a1, a2, a3, (uint64_t)a4, 1uLL);
  v11 = (_QWORD *)operator new();
  v17[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v11);
  *v11 = &off_1E2D5AE60;
  v11[1] = v10;
  *a5 = v11;
  return result;
}

void sub_190F94D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_190F94DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F94DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1010C40037D6C11);
  _Unwind_Resume(a1);
}

void sub_190F94E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
      goto LABEL_8;
  }
  else if (v23)
  {
LABEL_8:
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  void *exception;
  _QWORD v13[3];
  _BYTE v14[8];
  void *__p;
  void *v16;
  uint64_t v17;

  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CreateSurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v13, "Invalid surface dimensions. Specified width or height must not be 0.");
    E5RT::Status::Status(v14, 1, v13);
    E5RT::E5RTError::E5RTError(exception, &__p, v14);
  }
  __p = 0;
  v16 = 0;
  v17 = 0;
  v10 = operator new();
  E5RT::SurfaceDescriptorImpl::SurfaceDescriptorImpl(v10, a1, a2, a3, (uint64_t)&__p, a4);
  v11 = (_QWORD *)operator new();
  v13[0] = 0;
  E5RT::OperandDescriptor::OperandDescriptor(v11);
  *v11 = &off_1E2D5AE60;
  v11[1] = v10;
  *a5 = v11;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_190F95014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v22, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100]((uint64_t *)&a10);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_190F950D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::SurfaceDescriptor::CreateSurfaceDescriptor@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  void *exception;
  void *v16;
  _QWORD v17[3];
  _BYTE v18[8];
  _QWORD v19[3];

  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "CreateSurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v17, "Invalid surface dimensions. Specified width or height must not be 0.");
    E5RT::Status::Status(v18, 1, v17);
    E5RT::E5RTError::E5RTError(exception, v19, v18);
  }
  if (*a4 == a4[1])
  {
    v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "CreateSurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v17, "Invalid custom per row stride. Expect an array of strides. Received empty array.");
    E5RT::Status::Status(v18, 1, v17);
    E5RT::E5RTError::E5RTError(v16, v19, v18);
  }
  v12 = operator new();
  E5RT::SurfaceDescriptorImpl::SurfaceDescriptorImpl(v12, a1, a2, a3, (uint64_t)a4, a5);
  v13 = (_QWORD *)operator new();
  v19[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v13);
  *v13 = &off_1E2D5AE60;
  v13[1] = v12;
  *a6 = v13;
  return result;
}

void sub_190F952C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_190F952F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F9530C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1010C40037D6C11);
  _Unwind_Resume(a1);
}

void sub_190F95330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
      goto LABEL_8;
  }
  else if (v23)
  {
LABEL_8:
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

id E5Common::CreateMpsGraphCompilationDescriptor(uint64_t *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  unsigned int v17;

  v3 = a2;
  v4 = (void *)objc_opt_new();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setEntryFunctionName:", v6);

  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kMpsgGraphDynamicCallableStrKey[0]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kMpsgGraphDynamicCallableStrKey[0]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setCallables:", v8);

    }
    objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kMpsgGraphDisableTypeInferenceStrKey[0]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kMpsgGraphDisableTypeInferenceStrKey[0]);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "BOOLValue");

      if (v11)
        objc_msgSend(v4, "disableTypeInference");
    }
  }
  objc_msgSend(v4, "setOptimizationLevel:", 0);
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kMpsgGraphEnableGPUQuantOpsStrKey[0]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kMpsgGraphEnableGPUQuantOpsStrKey[0]);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "BOOLValue");

      if (v14)
        objc_msgSend(v4, "enableGPUQuantOps");
    }
    objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kMpsgGraphMaximumNumberOfEncodingThreadsStrKey[0]);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kMpsgGraphMaximumNumberOfEncodingThreadsStrKey[0]);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "unsignedIntValue");

      if (v17 >= 2)
        objc_msgSend(v4, "setEnableParallelEncode:", 1);
    }
  }

  return v4;
}

void sub_190F955C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_190F95618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F95630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F95648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F95660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F95670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id E5Common::CreateMPSGraphExecutableFromMIL(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = a3;
  v6 = (void *)objc_opt_new();
  objc_msgSend(v6, "setCompilerOptions:", 1439);
  if (v5)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", E5Common::kMpsgGraphEnableShaderProfilingStrKey[0]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
      objc_msgSend(v6, "setCompilerOptions:", objc_msgSend(v6, "compilerOptions") | 0x40);
  }
  E5Common::CreateMpsGraphCompilationDescriptor(a2, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setCompilationDescriptor:", v8);

  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC7628]), "initWithMILProgram:executableDescriptor:", a1, v6);
  return v9;
}

void sub_190F95758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F95770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F95780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F95794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t E5RT::SurfaceFormatToCVPB4cc(unsigned int a1)
{
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (a1 >= 0x22)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "SurfaceFormatToCVPB4cc");
    std::string::basic_string[abi:ne180100]<0>(v3, "Invalid surface format");
    E5RT::Status::Status(v4, 1, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return *(unsigned int *)&aF024800largbab[4 * a1];
}

void sub_190F95854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::CVPB4ccToSurfaceFormat(E5RT *this)
{
  uint64_t v1;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  if ((int)this > 875836517)
  {
    if ((int)this > 1751410031)
    {
      if ((int)this > 2016686639)
      {
        if ((int)this <= 2084718400)
        {
          if ((_DWORD)this != 2016686640 && (_DWORD)this != 2019963440)
            goto LABEL_91;
          return 14;
        }
        else
        {
          switch((_DWORD)this)
          {
            case 0x7C424741:
              return 25;
            case 0x7C4C3068:
              return 21;
            case 0x7C526841:
              return 29;
            default:
              goto LABEL_91;
          }
        }
      }
      else if ((int)this <= 1882468911)
      {
        if ((_DWORD)this == 1751410032)
        {
          return 9;
        }
        else
        {
          if ((_DWORD)this != 1751411059)
            goto LABEL_91;
          return 10;
        }
      }
      else
      {
        if ((_DWORD)this != 1882468912 && (_DWORD)this != 1885745712 && (_DWORD)this != 1886859824)
          goto LABEL_91;
        return 15;
      }
    }
    else if ((int)this > 1278226535)
    {
      if ((int)this <= 1380401728)
      {
        if ((_DWORD)this == 1278226536)
        {
          return 7;
        }
        else
        {
          if ((_DWORD)this != 1278226742)
            goto LABEL_91;
          return 16;
        }
      }
      else
      {
        switch((_DWORD)this)
        {
          case 0x52474241:
            return 3;
          case 0x52476641:
            return 12;
          case 0x52476841:
            return 11;
          default:
            goto LABEL_91;
        }
      }
    }
    else if ((int)this <= 1111970368)
    {
      if ((_DWORD)this != 875836518 && (_DWORD)this != 875836534)
        goto LABEL_91;
      return 5;
    }
    else
    {
      switch((_DWORD)this)
      {
        case 0x42475241:
          return 2;
        case 0x4C303038:
          return 1;
        case 0x4C303066:
          return 13;
        default:
          goto LABEL_91;
      }
    }
  }
  if ((int)this <= 759967847)
  {
    if ((int)this > 642527541)
    {
      if ((int)this <= 706956391)
      {
        if ((_DWORD)this == 642527542)
        {
          return 17;
        }
        else
        {
          if ((_DWORD)this != 642934849)
            goto LABEL_91;
          return 26;
        }
      }
      else
      {
        switch((_DWORD)this)
        {
          case 0x2A234C68:
            return 32;
          case 0x2A264C68:
            return 33;
          case 0x2D424741:
            return 23;
          default:
            goto LABEL_91;
        }
      }
    }
    if ((int)this <= 641234479)
    {
      if ((_DWORD)this == 32)
        return 8;
      if ((_DWORD)this != 641230384)
        goto LABEL_91;
    }
    else if ((_DWORD)this != 641234480)
    {
      if ((_DWORD)this != 641877825)
      {
        if ((_DWORD)this == 642527336)
          return 18;
LABEL_91:
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v6, "CVPB4ccToSurfaceFormat");
        std::string::basic_string[abi:ne180100]<0>(v4, "Invalid format 4cc.");
        E5RT::Status::Status(v5, 1, v4);
        E5RT::E5RTError::E5RTError(exception, v6, v5);
      }
      return 22;
    }
    return 30;
  }
  if ((int)this > 843264055)
  {
    if ((int)this <= 843264103)
    {
      if ((_DWORD)this == 843264056)
      {
        return 4;
      }
      else
      {
        if ((_DWORD)this != 843264102)
          goto LABEL_91;
        return 6;
      }
    }
    else
    {
      if ((_DWORD)this != 843264104)
      {
        v1 = 0;
        if ((_DWORD)this == 875704422 || (_DWORD)this == 875704438)
          return v1;
        goto LABEL_91;
      }
      return 31;
    }
  }
  else if ((int)this <= 792872768)
  {
    if ((_DWORD)this == 759967848)
    {
      return 19;
    }
    else
    {
      if ((_DWORD)this != 760375361)
        goto LABEL_91;
      return 27;
    }
  }
  else
  {
    switch((_DWORD)this)
    {
      case 0x2F424741:
        return 24;
      case 0x2F4C3068:
        return 20;
      case 0x2F526841:
        return 28;
      default:
        goto LABEL_91;
    }
  }
}

void sub_190F96058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_190F960DC()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  *v0 = &off_1E2D56DA0;
  sub_190F96188();
  sub_190F9EA28();
  qword_1EE2148C0 = (uint64_t)v0;
}

void sub_190F96140(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v4;
  void *v5;

  v4 = *(_QWORD **)(v1 + 24);
  if (v4)
    sub_190FA4FB8(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
    operator delete(v5);
  MEMORY[0x19401CD90](v1, 0x10A1C40B4CCAB04);
  _Unwind_Resume(a1);
}

void sub_190F96188()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  _QWORD *v13;
  std::string *v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  _QWORD *v21;
  std::string *v22;
  __int128 v23;
  _QWORD *v24;
  std::string *v25;
  __int128 v26;
  _QWORD *v27;
  std::string *v28;
  __int128 v29;
  _QWORD *v30;
  std::string *v31;
  __int128 v32;
  _QWORD *v33;
  std::string *v34;
  __int128 v35;
  _QWORD *v36;
  std::string *v37;
  __int128 v38;
  _QWORD *v39;
  std::string *v40;
  __int128 v41;
  _QWORD *v42;
  std::string *v43;
  __int128 v44;
  _QWORD *v45;
  std::string *v46;
  __int128 v47;
  _QWORD *v48;
  std::string *v49;
  __int128 v50;
  _QWORD *v51;
  std::string *v52;
  __int128 v53;
  _QWORD *v54;
  std::string *v55;
  __int128 v56;
  _QWORD *v57;
  std::string *v58;
  __int128 v59;
  _QWORD *v60;
  std::string *v61;
  __int128 v62;
  _QWORD *v63;
  std::string *v64;
  __int128 v65;
  _QWORD *v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  _QWORD *v77;
  std::string *v78;
  __int128 v79;
  _QWORD *v80;
  std::string *v81;
  __int128 v82;
  _QWORD *v83;
  std::string *v84;
  __int128 v85;
  _QWORD *v86;
  std::string *v87;
  __int128 v88;
  _QWORD *v89;
  std::string *v90;
  __int128 v91;
  _QWORD *v92;
  std::string *v93;
  __int128 v94;
  _QWORD *v95;
  std::string *v96;
  __int128 v97;
  _QWORD *v98;
  std::string *v99;
  __int128 v100;
  _QWORD *v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  _QWORD *v112;
  std::string *v113;
  __int128 v114;
  _QWORD *v115;
  std::string *v116;
  __int128 v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint8x8_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  const std::string::value_type **v133;
  const std::string::value_type **v134;
  float v135;
  float v136;
  uint64_t v137;
  _QWORD *v138;
  _BOOL4 v139;
  unint64_t v140;
  unint64_t v141;
  size_t prime;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  void *v146;
  uint64_t v147;
  _QWORD *v148;
  size_t v149;
  size_t v150;
  size_t v151;
  _QWORD *i;
  size_t v153;
  uint64_t v154;
  unint64_t v155;
  uint8x8_t v156;
  uint64_t v157;
  _QWORD *v158;
  void *v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  size_t v164;
  E5RT::AsyncEventImpl *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  void **v169;
  void **v170;
  void *v171;
  void **v172;
  void **v173;
  void **v174;
  void **v175;
  void **v176;
  void **v177;
  void **v178;
  void **v179;
  void **v180;
  void **v181;
  void **v182;
  void **v183;
  void **v184;
  void **v185;
  void **v186;
  void **v187;
  void **v188;
  void **v189;
  void **v190;
  void **v191;
  void **v192;
  void **v193;
  void **v194;
  void **v195;
  void **v196;
  void **v197;
  void **v198;
  void **v199;
  void **v200;
  void **v201;
  void **v202;
  void **v203;
  void **v204;
  void **v205;
  void **v206;
  void **v207;
  void **v208;
  void **v209;
  void **v210;
  void **v211;
  void **v212;
  void **v213;
  void **v214;
  void **v215;
  void **v216;
  void **v217;
  void **v218;
  void **v219;
  void **v220;
  void **v221;
  void **v222;
  void **v223;
  void **v224;
  void **v225;
  void **v226;
  void **v227;
  void **v228;
  void **v229;
  void **v230;
  void **v231;
  void **v232;
  void **v233;
  void **v234;
  void **v235;
  void **v236;
  void **v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  std::string v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  void *__p[3];
  __int128 v247;
  std::string v248;
  __int128 v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  void *v253[3];
  __int128 v254;
  std::string::value_type v255[8];
  char v256;
  std::string v257;
  std::string v258;
  std::string v259;
  std::string::value_type v260[8];
  char v261;
  std::string v262;
  std::string v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  void *v268[3];
  __int128 v269;
  std::string v270;
  __int128 v271;
  uint64_t v272;
  __int128 v273;
  uint64_t v274;
  void *v275[3];
  __int128 v276;
  std::string v277;
  __int128 v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  void *v282[3];
  __int128 v283;
  std::string v284;
  __int128 v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  void *v289[3];
  __int128 v290;
  std::string v291;
  __int128 v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  void *v296[3];
  __int128 v297;
  std::string v298;
  __int128 v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  void *v303[3];
  __int128 v304;
  std::string v305;
  __int128 v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  void *v310[3];
  __int128 v311;
  std::string v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  void *v317[3];
  __int128 v318;
  std::string v319;
  __int128 v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  void *v324[3];
  __int128 v325;
  std::string::value_type v326[8];
  char v327;
  std::string v328;
  std::string v329;
  std::string v330;
  std::string::value_type __s[8];
  char v332;
  std::string v333;
  std::string v334;
  __int128 v335;
  uint64_t v336;
  __int128 v337;
  uint64_t v338;
  void *v339[3];
  __int128 v340;
  std::string v341;
  __int128 v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  void *v346[3];
  __int128 v347;
  std::string v348;
  __int128 v349;
  uint64_t v350;
  __int128 v351;
  uint64_t v352;
  void *v353[3];
  __int128 v354;
  std::string v355;
  __int128 v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  void *v360[3];
  __int128 v361;
  std::string v362;
  __int128 v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  void *v367[3];
  __int128 v368;
  std::string v369;
  __int128 v370;
  uint64_t v371;
  __int128 v372;
  uint64_t v373;
  void *v374[3];
  __int128 v375;
  std::string v376;
  __int128 v377;
  uint64_t v378;
  __int128 v379;
  uint64_t v380;
  void *v381[3];
  __int128 v382;
  std::string v383;
  __int128 v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;
  void *v388[3];
  __int128 v389;
  std::string v390;
  __int128 v391;
  uint64_t v392;
  __int128 v393;
  uint64_t v394;
  void *v395[3];
  __int128 v396;
  std::string v397;
  __int128 v398;
  uint64_t v399;
  __int128 v400;
  uint64_t v401;
  void *v402[3];
  __int128 v403;
  std::string v404;
  __int128 v405;
  uint64_t v406;
  __int128 v407;
  uint64_t v408;
  void *v409[3];
  __int128 v410;
  std::string v411;
  __int128 v412;
  uint64_t v413;
  __int128 v414;
  uint64_t v415;
  void *v416[3];
  __int128 v417;
  std::string v418;
  __int128 v419;
  uint64_t v420;
  __int128 v421;
  uint64_t v422;
  void *v423[3];
  __int128 v424;
  std::string v425;
  __int128 v426;
  uint64_t v427;
  __int128 v428;
  uint64_t v429;
  void *v430[3];
  __int128 v431;
  std::string v432;
  __int128 v433;
  uint64_t v434;
  __int128 v435;
  uint64_t v436;
  void *v437[3];
  __int128 v438;
  std::string v439;
  __int128 v440;
  uint64_t v441;
  __int128 v442;
  uint64_t v443;
  void *v444[3];
  __int128 v445;
  std::string v446;
  __int128 v447;
  uint64_t v448;
  __int128 v449;
  uint64_t v450;
  void *v451[3];
  __int128 v452;
  std::string v453;
  __int128 v454;
  uint64_t v455;
  __int128 v456;
  uint64_t v457;
  void *v458[3];
  __int128 v459;
  std::string v460;
  __int128 v461;
  uint64_t v462;
  __int128 v463;
  uint64_t v464;
  void *v465[3];
  __int128 v466;
  std::string v467;
  __int128 v468;
  uint64_t v469;
  __int128 v470;
  uint64_t v471;
  void *v472[3];
  __int128 v473;
  void *v474[2];
  uint64_t v475;
  __int128 v476;
  uint64_t v477;
  void *v478[2];
  uint64_t v479;
  __int128 v480;
  __int128 v481;
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  void *v485[3];
  __int128 v486;
  void *v487[2];
  uint64_t v488;
  __int128 v489;
  uint64_t v490;
  void *v491[2];
  uint64_t v492;
  __int128 v493;
  void *v494;
  char v495;
  __int128 v496;
  std::string::size_type v497;
  void *v498[2];
  char v499;
  void *v500;
  char v501;
  __int128 v502;
  std::string::size_type v503;
  void *v504[2];
  char v505;
  void *v506[2];
  char v507;
  void *v508[2];
  std::string::size_type v509;
  __int128 v510;
  std::string::size_type v511;
  void *v512[2];
  char v513;
  void *v514[2];
  char v515;
  __int128 v516;
  std::string::size_type v517;
  void *v518[2];
  char v519;
  void *v520;
  char v521;
  __int128 v522;
  std::string::size_type v523;
  void *v524[2];
  char v525;
  void *v526[2];
  char v527;
  void *v528[2];
  char v529;
  __int128 v530;
  std::string::size_type v531;
  void *v532[2];
  char v533;
  void *v534[2];
  char v535;
  __int128 v536;
  std::string::size_type v537;
  void *v538[2];
  char v539;
  void *v540[2];
  char v541;
  __int128 v542;
  std::string::size_type v543;
  void *v544[2];
  char v545;
  void *v546[2];
  char v547;
  __int128 v548;
  std::string::size_type v549;
  void *v550[2];
  char v551;
  void *v552[2];
  char v553;
  void *v554[2];
  char v555;
  __int128 v556;
  std::string::size_type v557;
  void *v558[2];
  char v559;
  void *v560;
  char v561;
  __int128 v562;
  std::string::size_type v563;
  void *v564[2];
  char v565;
  void *v566[2];
  char v567;
  void *v568[2];
  std::string::size_type v569;
  __int128 v570;
  std::string::size_type v571;
  void *v572[2];
  char v573;
  __int128 v574;
  std::string::size_type v575;
  void *v576[2];
  char v577;
  void *v578[2];
  char v579;
  __int128 v580;
  std::string::size_type v581;
  void *v582[2];
  char v583;
  void *v584[2];
  char v585;
  __int128 v586;
  std::string::size_type v587;
  void *v588[2];
  char v589;
  void *v590[2];
  char v591;
  __int128 v592;
  std::string::size_type v593;
  void *v594[2];
  char v595;
  void *v596;
  char v597;
  __int128 v598;
  std::string::size_type v599;
  void *v600[2];
  char v601;
  void *v602[2];
  char v603;
  void *v604[2];
  char v605;
  __int128 v606;
  std::string::size_type v607;
  void *v608[2];
  char v609;
  void *v610[2];
  char v611;
  __int128 v612;
  std::string::size_type v613;
  void *v614[2];
  char v615;
  void *v616[2];
  char v617;
  __int128 v618;
  std::string::size_type v619;
  void *v620[2];
  char v621;
  void *v622[2];
  char v623;
  __int128 v624;
  std::string::size_type v625;
  void *v626[2];
  char v627;
  void *v628;
  char v629;
  __int128 v630;
  std::string::size_type v631;
  void *v632[2];
  char v633;
  void *v634[2];
  char v635;
  void *v636;
  char v637;
  __int128 v638;
  std::string::size_type v639;
  void *v640[2];
  char v641;
  void *v642[2];
  char v643;
  void *v644[2];
  char v645;
  __int128 v646;
  std::string::size_type v647;
  void *v648[2];
  char v649;
  void *v650;
  char v651;
  __int128 v652;
  std::string::size_type v653;
  void *v654[2];
  char v655;
  void *v656[2];
  char v657;
  void *v658;
  char v659;
  __int128 v660;
  std::string::size_type v661;
  void *v662[2];
  char v663;
  void *v664[2];
  char v665;
  void *v666;
  char v667;
  __int128 v668;
  std::string::size_type v669;
  void *v670[2];
  char v671;
  void *v672[2];
  char v673;
  __int128 v674;
  std::string::size_type v675;
  void *v676;
  char v677;
  void *v678[2];
  char v679;
  void *v680[2];
  char v681;
  __int128 v682;
  std::string::size_type v683;
  void *v684;
  char v685;
  void *v686[2];
  char v687;
  void *v688;
  char v689;
  __int128 v690;
  std::string::size_type v691;
  void *v692[2];
  char v693;
  __int128 v694;
  std::string::size_type v695;
  void *v696;
  char v697;
  void *v698[2];
  char v699;
  void *v700[2];
  char v701;
  _OWORD v702[2];
  uint64_t v703;
  __int128 v704;
  uint64_t v705;
  __int128 v706;
  uint64_t v707;
  __int128 v708;
  __int128 v709;
  uint64_t v710;
  __int128 v711;
  uint64_t v712;
  __int128 v713;
  void *v714;
  __int128 v715;
  __int128 v716;
  uint64_t v717;
  __int128 v718;
  uint64_t v719;
  __int128 v720;
  uint64_t v721;
  __int128 v722;
  __int128 v723;
  uint64_t v724;
  __int128 v725;
  uint64_t v726;
  __int128 v727;
  void *v728;
  __int128 v729;
  __int128 v730;
  uint64_t v731;
  __int128 v732;
  uint64_t v733;
  __int128 v734;
  void *v735;
  __int128 v736;
  __int128 v737;
  uint64_t v738;
  __int128 v739;
  uint64_t v740;
  __int128 v741;
  void *v742;
  __int128 v743;
  __int128 v744;
  uint64_t v745;
  __int128 v746;
  uint64_t v747;
  __int128 v748;
  void *v749;
  __int128 v750;
  __int128 v751;
  uint64_t v752;
  __int128 v753;
  uint64_t v754;
  __int128 v755;
  void *v756;
  __int128 v757;
  __int128 v758;
  uint64_t v759;
  __int128 v760;
  uint64_t v761;
  __int128 v762;
  void *v763;
  __int128 v764;
  __int128 v765;
  uint64_t v766;
  __int128 v767;
  uint64_t v768;
  __int128 v769;
  void *v770;
  __int128 v771;
  __int128 v772;
  uint64_t v773;
  __int128 v774;
  uint64_t v775;
  __int128 v776;
  void *v777;
  __int128 v778;
  __int128 v779;
  uint64_t v780;
  __int128 v781;
  uint64_t v782;
  __int128 v783;
  void *v784;
  __int128 v785;
  __int128 v786;
  uint64_t v787;
  __int128 v788;
  uint64_t v789;
  __int128 v790;
  void *v791;
  __int128 v792;
  __int128 v793;
  uint64_t v794;
  __int128 v795;
  uint64_t v796;
  __int128 v797;
  void *v798;
  __int128 v799;
  __int128 v800;
  uint64_t v801;
  __int128 v802;
  uint64_t v803;
  __int128 v804;
  void *v805;
  __int128 v806;
  __int128 v807;
  uint64_t v808;
  __int128 v809;
  uint64_t v810;
  __int128 v811;
  void *v812;
  __int128 v813;
  __int128 v814;
  uint64_t v815;
  __int128 v816;
  uint64_t v817;
  __int128 v818;
  void *v819;
  __int128 v820;
  __int128 v821;
  uint64_t v822;
  __int128 v823;
  uint64_t v824;
  __int128 v825;
  void *v826;
  __int128 v827;
  __int128 v828;
  uint64_t v829;
  __int128 v830;
  uint64_t v831;
  __int128 v832;
  void *v833;
  __int128 v834;
  __int128 v835;
  uint64_t v836;
  __int128 v837;
  uint64_t v838;
  __int128 v839;
  void *v840;
  __int128 v841;
  __int128 v842;
  uint64_t v843;
  __int128 v844;
  uint64_t v845;
  __int128 v846;
  void *v847;
  __int128 v848;
  __int128 v849;
  uint64_t v850;
  __int128 v851;
  uint64_t v852;
  __int128 v853;
  void *v854;
  __int128 v855;
  __int128 v856;
  uint64_t v857;
  __int128 v858;
  uint64_t v859;
  __int128 v860;
  void *v861;
  __int128 v862;
  __int128 v863;
  uint64_t v864;
  __int128 v865;
  uint64_t v866;
  __int128 v867;
  void *v868;
  __int128 v869;
  __int128 v870;
  uint64_t v871;
  __int128 v872;
  uint64_t v873;
  __int128 v874;
  void *v875;
  __int128 v876;
  __int128 v877;
  uint64_t v878;
  __int128 v879;
  uint64_t v880;
  __int128 v881;
  void *v882;
  __int128 v883;
  __int128 v884;
  uint64_t v885;
  __int128 v886;
  uint64_t v887;
  __int128 v888;
  void *v889;
  __int128 v890;
  __int128 v891;
  uint64_t v892;
  __int128 v893;
  uint64_t v894;
  __int128 v895;
  void *v896;
  __int128 v897;
  __int128 v898;
  uint64_t v899;
  __int128 v900;
  uint64_t v901;
  __int128 v902;
  void *v903;
  __int128 v904;
  __int128 v905;
  uint64_t v906;
  __int128 v907;
  uint64_t v908;
  __int128 v909;
  void *v910;
  __int128 v911;
  __int128 v912;
  uint64_t v913;
  __int128 v914;
  uint64_t v915;
  __int128 v916;
  void *v917;
  __int128 v918;
  __int128 v919;
  uint64_t v920;
  __int128 v921;
  uint64_t v922;
  __int128 v923;
  void *v924;
  __int128 v925;
  __int128 v926;
  uint64_t v927;
  __int128 v928;
  uint64_t v929;
  __int128 v930;
  void *v931;
  __int128 v932;
  __int128 v933;
  uint64_t v934;
  __int128 v935;
  uint64_t v936;
  __int128 v937;
  void *v938;
  _QWORD v939[4];

  v240 = MEMORY[0x1E0C80A78]();
  v939[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v493 = 0;
  DWORD2(v493) = 0;
  HIBYTE(v488) = 0;
  LOBYTE(v487[0]) = 0;
  HIBYTE(v490) = 11;
  strcpy((char *)&v489, "Unsupported");
  v701 = 9;
  strcpy((char *)v700, "universal");
  v0 = std::vector<std::string>::vector[abi:ne180100](v491, (uint64_t)v700, 1uLL);
  v702[0] = v493;
  v702[1] = *(_OWORD *)v487;
  v1 = v488;
  v487[1] = 0;
  v487[0] = 0;
  v488 = 0;
  v704 = v489;
  v703 = v1;
  v705 = v490;
  v489 = 0uLL;
  v490 = 0;
  v706 = *(_OWORD *)v491;
  v707 = v492;
  *v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  *(_QWORD *)&v486 = 32786;
  DWORD2(v486) = 0;
  HIBYTE(v482) = 0;
  LOBYTE(v481) = 0;
  HIBYTE(v484) = 11;
  strcpy((char *)&v483, "Unsupported");
  v699 = 5;
  strcpy((char *)v698, "intel");
  v2 = std::vector<std::string>::vector[abi:ne180100](v485, (uint64_t)v698, 1uLL);
  v708 = v486;
  v709 = v481;
  v710 = v482;
  v481 = 0uLL;
  v482 = 0;
  v711 = v483;
  v3 = v484;
  v483 = 0uLL;
  v484 = 0;
  v713 = *(_OWORD *)v485;
  v712 = v3;
  v714 = v485[2];
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_QWORD *)&v480 = 256;
  DWORD2(v480) = 0;
  HIBYTE(v475) = 0;
  LOBYTE(v474[0]) = 0;
  HIBYTE(v477) = 11;
  strcpy((char *)&v476, "Unsupported");
  v697 = 3;
  LODWORD(v696) = 7629162;
  v4 = std::vector<std::string>::vector[abi:ne180100](v478, (uint64_t)&v696, 1uLL);
  v715 = v480;
  v716 = *(_OWORD *)v474;
  v5 = v475;
  v474[1] = 0;
  v474[0] = 0;
  v475 = 0;
  v718 = v476;
  v717 = v5;
  v719 = v477;
  v476 = 0uLL;
  v477 = 0;
  v720 = *(_OWORD *)v478;
  v721 = v479;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_QWORD *)&v473 = 32774;
  DWORD2(v473) = 0;
  HIBYTE(v469) = 2;
  strcpy((char *)&v468, "M9");
  HIBYTE(v471) = 11;
  strcpy((char *)&v470, "Unsupported");
  v693 = 2;
  strcpy((char *)v692, "M9");
  std::to_string(&v467, 8006);
  v6 = std::string::insert(&v467, 0, "t");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v695 = v6->__r_.__value_.__r.__words[2];
  v694 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::vector<std::string>::vector[abi:ne180100](v472, (uint64_t)v692, 2uLL);
  v722 = v473;
  v723 = v468;
  v724 = v469;
  v9 = v470;
  v10 = v471;
  v470 = 0uLL;
  v471 = 0;
  v468 = 0uLL;
  v469 = 0;
  v725 = v9;
  v727 = *(_OWORD *)v472;
  v726 = v10;
  v728 = v472[2];
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  *(_QWORD *)&v466 = 33537;
  DWORD2(v466) = 0;
  HIBYTE(v462) = 3;
  LODWORD(v461) = 3158349;
  HIBYTE(v464) = 11;
  strcpy((char *)&v463, "Unsupported");
  v689 = 3;
  LODWORD(v688) = 3158349;
  std::to_string(&v460, 8301);
  v11 = std::string::insert(&v460, 0, "t");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v691 = v11->__r_.__value_.__r.__words[2];
  v690 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::vector<std::string>::vector[abi:ne180100](v465, (uint64_t)&v688, 2uLL);
  v732 = v463;
  v731 = v462;
  v733 = v464;
  v729 = v466;
  v730 = v461;
  v461 = 0uLL;
  v462 = 0;
  v463 = 0uLL;
  v464 = 0;
  v734 = *(_OWORD *)v465;
  v735 = v465[2];
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  *(_QWORD *)&v459 = 28672;
  DWORD2(v459) = 0;
  HIBYTE(v455) = 2;
  strcpy((char *)&v454, "H7");
  HIBYTE(v457) = 11;
  strcpy((char *)&v456, "Unsupported");
  v681 = 2;
  strcpy((char *)v680, "H7");
  std::to_string(&v453, 7000);
  v14 = std::string::insert(&v453, 0, "t");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v683 = v14->__r_.__value_.__r.__words[2];
  v682 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v685 = 3;
  v687 = 4;
  LODWORD(v684) = 5257032;
  strcpy((char *)v686, "fiji");
  v16 = std::vector<std::string>::vector[abi:ne180100](v458, (uint64_t)v680, 4uLL);
  v736 = v459;
  v737 = v454;
  v738 = v455;
  v17 = v456;
  v18 = v457;
  v456 = 0uLL;
  v457 = 0;
  v454 = 0uLL;
  v455 = 0;
  v739 = v17;
  v741 = *(_OWORD *)v458;
  v740 = v18;
  v742 = v458[2];
  *v16 = 0;
  v16[1] = 0;
  v16[2] = 0;
  *(_QWORD *)&v452 = 32784;
  DWORD2(v452) = 0;
  HIBYTE(v448) = 2;
  strcpy((char *)&v447, "H9");
  HIBYTE(v450) = 11;
  strcpy((char *)&v449, "Unsupported");
  v673 = 2;
  strcpy((char *)v672, "H9");
  std::to_string(&v446, 8010);
  v19 = std::string::insert(&v446, 0, "t");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v675 = v19->__r_.__value_.__r.__words[2];
  v674 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v677 = 3;
  v679 = 6;
  LODWORD(v676) = 5257544;
  strcpy((char *)v678, "cayman");
  v21 = std::vector<std::string>::vector[abi:ne180100](v451, (uint64_t)v672, 4uLL);
  v745 = v448;
  v746 = v449;
  v747 = v450;
  v743 = v452;
  v744 = v447;
  v447 = 0uLL;
  v448 = 0;
  v449 = 0uLL;
  v450 = 0;
  v748 = *(_OWORD *)v451;
  v749 = v451[2];
  *v21 = 0;
  v21[1] = 0;
  v21[2] = 0;
  *(_QWORD *)&v445 = 32785;
  DWORD2(v445) = 0;
  HIBYTE(v441) = 2;
  strcpy((char *)&v440, "H9");
  HIBYTE(v443) = 11;
  strcpy((char *)&v442, "Unsupported");
  v667 = 3;
  LODWORD(v666) = 4667720;
  std::to_string(&v439, 8011);
  v22 = std::string::insert(&v439, 0, "t");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v669 = v22->__r_.__value_.__r.__words[2];
  v668 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v671 = 4;
  strcpy((char *)v670, "myst");
  v24 = std::vector<std::string>::vector[abi:ne180100](v444, (uint64_t)&v666, 3uLL);
  v751 = v440;
  v752 = v441;
  v754 = v443;
  v750 = v445;
  v440 = 0uLL;
  v441 = 0;
  v753 = v442;
  v442 = 0uLL;
  v443 = 0;
  v755 = *(_OWORD *)v444;
  v756 = v444[2];
  *v24 = 0;
  v24[1] = 0;
  v24[2] = 0;
  *(_QWORD *)&v438 = 32789;
  DWORD2(v438) = 0;
  HIBYTE(v434) = 3;
  LODWORD(v433) = 3158344;
  HIBYTE(v436) = 4;
  strcpy((char *)&v435, "H10P");
  v659 = 3;
  LODWORD(v658) = 3158344;
  std::to_string(&v432, 8015);
  v25 = std::string::insert(&v432, 0, "t");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v661 = v25->__r_.__value_.__r.__words[2];
  v660 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v663 = 4;
  v665 = 4;
  strcpy((char *)v662, "skye");
  strcpy((char *)v664, "H10P");
  v27 = std::vector<std::string>::vector[abi:ne180100](v437, (uint64_t)&v658, 4uLL);
  v759 = v434;
  v760 = v435;
  v761 = v436;
  v757 = v438;
  v758 = v433;
  v433 = 0uLL;
  v434 = 0;
  v435 = 0uLL;
  v436 = 0;
  v762 = *(_OWORD *)v437;
  v763 = v437[2];
  *v27 = 0;
  v27[1] = 0;
  v27[2] = 0;
  *(_QWORD *)&v431 = 32800;
  DWORD2(v431) = 0;
  HIBYTE(v427) = 3;
  LODWORD(v426) = 3223880;
  HIBYTE(v429) = 4;
  strcpy((char *)&v428, "H11P");
  v651 = 3;
  LODWORD(v650) = 3223880;
  std::to_string(&v425, 8020);
  v28 = std::string::insert(&v425, 0, "t");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v653 = v28->__r_.__value_.__r.__words[2];
  v652 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v655 = 6;
  strcpy((char *)v654, "cyprus");
  v657 = 4;
  strcpy((char *)v656, "H11P");
  v30 = std::vector<std::string>::vector[abi:ne180100](v430, (uint64_t)&v650, 4uLL);
  v765 = v426;
  v766 = v427;
  v768 = v429;
  v764 = v431;
  v426 = 0uLL;
  v427 = 0;
  v767 = v428;
  v428 = 0uLL;
  v429 = 0;
  v769 = *(_OWORD *)v430;
  v770 = v430[2];
  *v30 = 0;
  v30[1] = 0;
  v30[2] = 0;
  *(_QWORD *)&v424 = 32807;
  DWORD2(v424) = 0;
  HIBYTE(v420) = 3;
  LODWORD(v419) = 3223880;
  HIBYTE(v422) = 4;
  strcpy((char *)&v421, "H11G");
  v645 = 4;
  strcpy((char *)v644, "H11G");
  std::to_string(&v418, 8027);
  v31 = std::string::insert(&v418, 0, "t");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v647 = v31->__r_.__value_.__r.__words[2];
  v646 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v649 = 5;
  strcpy((char *)v648, "aruba");
  v33 = std::vector<std::string>::vector[abi:ne180100](v423, (uint64_t)v644, 3uLL);
  v773 = v420;
  v774 = v421;
  v775 = v422;
  v771 = v424;
  v772 = v419;
  v419 = 0uLL;
  v420 = 0;
  v421 = 0uLL;
  v422 = 0;
  v776 = *(_OWORD *)v423;
  v777 = v423[2];
  *v33 = 0;
  v33[1] = 0;
  v33[2] = 0;
  *(_QWORD *)&v417 = 32816;
  DWORD2(v417) = 0;
  HIBYTE(v413) = 3;
  LODWORD(v412) = 3289416;
  HIBYTE(v415) = 4;
  strcpy((char *)&v414, "H12P");
  v637 = 3;
  LODWORD(v636) = 3289416;
  std::to_string(&v411, 8030);
  v34 = std::string::insert(&v411, 0, "t");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v639 = v34->__r_.__value_.__r.__words[2];
  v638 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v641 = 4;
  v643 = 4;
  strcpy((char *)v640, "cebu");
  strcpy((char *)v642, "H12P");
  v36 = std::vector<std::string>::vector[abi:ne180100](v416, (uint64_t)&v636, 4uLL);
  v779 = v412;
  v780 = v413;
  v782 = v415;
  v778 = v417;
  v412 = 0uLL;
  v413 = 0;
  v781 = v414;
  v414 = 0uLL;
  v415 = 0;
  v783 = *(_OWORD *)v416;
  v784 = v416[2];
  *v36 = 0;
  v36[1] = 0;
  v36[2] = 0;
  *(_QWORD *)&v410 = 33025;
  DWORD2(v410) = 0;
  HIBYTE(v406) = 3;
  LODWORD(v405) = 3354952;
  HIBYTE(v408) = 4;
  strcpy((char *)&v407, "H13P");
  v629 = 3;
  LODWORD(v628) = 3354952;
  std::to_string(&v404, 8101);
  v37 = std::string::insert(&v404, 0, "t");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v631 = v37->__r_.__value_.__r.__words[2];
  v630 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v633 = 6;
  strcpy((char *)v632, "sicily");
  v635 = 4;
  strcpy((char *)v634, "H13P");
  v39 = std::vector<std::string>::vector[abi:ne180100](v409, (uint64_t)&v628, 4uLL);
  v787 = v406;
  v788 = v407;
  v789 = v408;
  v785 = v410;
  v786 = v405;
  v405 = 0uLL;
  v406 = 0;
  v407 = 0uLL;
  v408 = 0;
  v790 = *(_OWORD *)v409;
  v791 = v409[2];
  *v39 = 0;
  v39[1] = 0;
  v39[2] = 0;
  *(_QWORD *)&v403 = 33027;
  DWORD2(v403) = 0;
  HIBYTE(v399) = 3;
  LODWORD(v398) = 3354952;
  HIBYTE(v401) = 4;
  strcpy((char *)&v400, "H13G");
  v623 = 4;
  strcpy((char *)v622, "H13G");
  std::to_string(&v397, 8103);
  v40 = std::string::insert(&v397, 0, "t");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v625 = v40->__r_.__value_.__r.__words[2];
  v624 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v627 = 5;
  strcpy((char *)v626, "tonga");
  v42 = std::vector<std::string>::vector[abi:ne180100](v402, (uint64_t)v622, 3uLL);
  v793 = v398;
  v794 = v399;
  v796 = v401;
  v792 = v403;
  v398 = 0uLL;
  v399 = 0;
  v795 = v400;
  v400 = 0uLL;
  v401 = 0;
  v797 = *(_OWORD *)v402;
  v798 = v402[2];
  *v42 = 0;
  v42[1] = 0;
  v42[2] = 0;
  *(_QWORD *)&v396 = 24576;
  DWORD2(v396) = 0;
  HIBYTE(v392) = 3;
  LODWORD(v391) = 3354952;
  HIBYTE(v394) = 4;
  strcpy((char *)&v393, "H13S");
  v617 = 4;
  strcpy((char *)v616, "H13S");
  std::to_string(&v390, 6000);
  v43 = std::string::insert(&v390, 0, "t");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v619 = v43->__r_.__value_.__r.__words[2];
  v618 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v621 = 5;
  strcpy((char *)v620, "jades");
  v45 = std::vector<std::string>::vector[abi:ne180100](v395, (uint64_t)v616, 3uLL);
  v801 = v392;
  v802 = v393;
  v803 = v394;
  v799 = v396;
  v800 = v391;
  v391 = 0uLL;
  v392 = 0;
  v393 = 0uLL;
  v394 = 0;
  v804 = *(_OWORD *)v395;
  v805 = v395[2];
  *v45 = 0;
  v45[1] = 0;
  v45[2] = 0;
  *(_QWORD *)&v389 = 24577;
  DWORD2(v389) = 0;
  HIBYTE(v385) = 3;
  LODWORD(v384) = 3354952;
  HIBYTE(v387) = 4;
  strcpy((char *)&v386, "H13C");
  v611 = 4;
  strcpy((char *)v610, "H13C");
  std::to_string(&v383, 6001);
  v46 = std::string::insert(&v383, 0, "t");
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v613 = v46->__r_.__value_.__r.__words[2];
  v612 = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v615 = 5;
  strcpy((char *)v614, "jadec");
  v48 = std::vector<std::string>::vector[abi:ne180100](v388, (uint64_t)v610, 3uLL);
  v807 = v384;
  v808 = v385;
  v810 = v387;
  v806 = v389;
  v384 = 0uLL;
  v385 = 0;
  v809 = v386;
  v386 = 0uLL;
  v387 = 0;
  v811 = *(_OWORD *)v388;
  v812 = v388[2];
  *v48 = 0;
  v48[1] = 0;
  v48[2] = 0;
  *(_QWORD *)&v382 = 24578;
  DWORD2(v382) = 0;
  HIBYTE(v378) = 3;
  LODWORD(v377) = 3354952;
  HIBYTE(v380) = 4;
  strcpy((char *)&v379, "H13D");
  v605 = 4;
  strcpy((char *)v604, "H13D");
  std::to_string(&v376, 6002);
  v49 = std::string::insert(&v376, 0, "t");
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v607 = v49->__r_.__value_.__r.__words[2];
  v606 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  v609 = 5;
  strcpy((char *)v608, "jaded");
  v51 = std::vector<std::string>::vector[abi:ne180100](v381, (uint64_t)v604, 3uLL);
  v815 = v378;
  v816 = v379;
  v817 = v380;
  v813 = v382;
  v814 = v377;
  v377 = 0uLL;
  v378 = 0;
  v379 = 0uLL;
  v380 = 0;
  v818 = *(_OWORD *)v381;
  v819 = v381[2];
  *v51 = 0;
  v51[1] = 0;
  v51[2] = 0;
  *(_QWORD *)&v375 = 33040;
  DWORD2(v375) = 0;
  HIBYTE(v371) = 3;
  LODWORD(v370) = 3420488;
  HIBYTE(v373) = 4;
  strcpy((char *)&v372, "H14P");
  v597 = 3;
  LODWORD(v596) = 3420488;
  std::to_string(&v369, 8110);
  v52 = std::string::insert(&v369, 0, "t");
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v599 = v52->__r_.__value_.__r.__words[2];
  v598 = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v601 = 5;
  strcpy((char *)v600, "ellis");
  v603 = 4;
  strcpy((char *)v602, "H14P");
  v54 = std::vector<std::string>::vector[abi:ne180100](v374, (uint64_t)&v596, 4uLL);
  v821 = v370;
  v822 = v371;
  v824 = v373;
  v820 = v375;
  v370 = 0uLL;
  v371 = 0;
  v823 = v372;
  v372 = 0uLL;
  v373 = 0;
  v825 = *(_OWORD *)v374;
  v826 = v374[2];
  *v54 = 0;
  v54[1] = 0;
  v54[2] = 0;
  *(_QWORD *)&v368 = 33042;
  DWORD2(v368) = 0;
  HIBYTE(v364) = 3;
  LODWORD(v363) = 3420488;
  HIBYTE(v366) = 4;
  strcpy((char *)&v365, "H14G");
  v591 = 4;
  strcpy((char *)v590, "H14G");
  std::to_string(&v362, 8112);
  v55 = std::string::insert(&v362, 0, "t");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v593 = v55->__r_.__value_.__r.__words[2];
  v592 = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v595 = 6;
  strcpy((char *)v594, "staten");
  v57 = std::vector<std::string>::vector[abi:ne180100](v367, (uint64_t)v590, 3uLL);
  v829 = v364;
  v830 = v365;
  v831 = v366;
  v827 = v368;
  v828 = v363;
  v363 = 0uLL;
  v364 = 0;
  v365 = 0uLL;
  v366 = 0;
  v832 = *(_OWORD *)v367;
  v833 = v367[2];
  *v57 = 0;
  v57[1] = 0;
  v57[2] = 0;
  *(_QWORD *)&v361 = 24608;
  DWORD2(v361) = 0;
  HIBYTE(v357) = 3;
  LODWORD(v356) = 3420488;
  HIBYTE(v359) = 4;
  strcpy((char *)&v358, "H14S");
  v585 = 4;
  strcpy((char *)v584, "H14S");
  std::to_string(&v355, 6020);
  v58 = std::string::insert(&v355, 0, "t");
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v587 = v58->__r_.__value_.__r.__words[2];
  v586 = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v589 = 7;
  strcpy((char *)v588, "rhodess");
  v60 = std::vector<std::string>::vector[abi:ne180100](v360, (uint64_t)v584, 3uLL);
  v835 = v356;
  v836 = v357;
  v838 = v359;
  v834 = v361;
  v356 = 0uLL;
  v357 = 0;
  v837 = v358;
  v358 = 0uLL;
  v359 = 0;
  v839 = *(_OWORD *)v360;
  v840 = v360[2];
  *v60 = 0;
  v60[1] = 0;
  v60[2] = 0;
  *(_QWORD *)&v354 = 24609;
  DWORD2(v354) = 0;
  HIBYTE(v350) = 3;
  LODWORD(v349) = 3420488;
  HIBYTE(v352) = 4;
  strcpy((char *)&v351, "H14C");
  v579 = 4;
  strcpy((char *)v578, "H14C");
  std::to_string(&v348, 6021);
  v61 = std::string::insert(&v348, 0, "t");
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v581 = v61->__r_.__value_.__r.__words[2];
  v580 = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  v583 = 7;
  strcpy((char *)v582, "rhodesc");
  v63 = std::vector<std::string>::vector[abi:ne180100](v353, (uint64_t)v578, 3uLL);
  v843 = v350;
  v844 = v351;
  v845 = v352;
  v841 = v354;
  v842 = v349;
  v349 = 0uLL;
  v350 = 0;
  v351 = 0uLL;
  v352 = 0;
  v846 = *(_OWORD *)v353;
  v847 = v353[2];
  *v63 = 0;
  v63[1] = 0;
  v63[2] = 0;
  *(_QWORD *)&v347 = 24610;
  DWORD2(v347) = 0;
  HIBYTE(v343) = 3;
  LODWORD(v342) = 3420488;
  HIBYTE(v345) = 4;
  strcpy((char *)&v344, "H14D");
  v573 = 4;
  strcpy((char *)v572, "H14D");
  std::to_string(&v341, 6022);
  v64 = std::string::insert(&v341, 0, "t");
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v575 = v64->__r_.__value_.__r.__words[2];
  v574 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v577 = 7;
  strcpy((char *)v576, "rhodesd");
  v66 = std::vector<std::string>::vector[abi:ne180100](v346, (uint64_t)v572, 3uLL);
  v849 = v342;
  v850 = v343;
  v852 = v345;
  v848 = v347;
  v342 = 0uLL;
  v343 = 0;
  v851 = v344;
  v344 = 0uLL;
  v345 = 0;
  v853 = *(_OWORD *)v346;
  v854 = v346[2];
  *v66 = 0;
  v66[1] = 0;
  v66[2] = 0;
  *(_QWORD *)&v340 = 33042;
  DWORD2(v340) = 1311977521;
  HIBYTE(v336) = 3;
  LODWORD(v335) = 3420488;
  HIBYTE(v338) = 4;
  strcpy((char *)&v337, "H14G");
  *((_BYTE *)&v333.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v333, "H14G");
  v67 = std::string::append(&v333, ".");
  v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v334.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  v332 = 4;
  strcpy(__s, "N301");
  v69 = std::string::append(&v334, __s, 4uLL);
  v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  v569 = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)v568 = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v328, 8112);
  v71 = std::string::insert(&v328, 0, "t");
  v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v329.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v329.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  v73 = std::string::append(&v329, ".");
  v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v330.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  v327 = 4;
  strcpy(v326, "N301");
  v75 = std::string::append(&v330, v326, 4uLL);
  v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  v571 = v75->__r_.__value_.__r.__words[2];
  v570 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  v77 = std::vector<std::string>::vector[abi:ne180100](v339, (uint64_t)v568, 2uLL);
  v857 = v336;
  v858 = v337;
  v859 = v338;
  v855 = v340;
  v856 = v335;
  v335 = 0uLL;
  v336 = 0;
  v337 = 0uLL;
  v338 = 0;
  v860 = *(_OWORD *)v339;
  v861 = v339[2];
  *v77 = 0;
  v77[1] = 0;
  v77[2] = 0;
  *(_QWORD *)&v325 = 33056;
  DWORD2(v325) = 0;
  HIBYTE(v321) = 3;
  LODWORD(v320) = 3486024;
  HIBYTE(v323) = 4;
  strcpy((char *)&v322, "H15P");
  v561 = 3;
  LODWORD(v560) = 3486024;
  std::to_string(&v319, 8120);
  v78 = std::string::insert(&v319, 0, "t");
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v563 = v78->__r_.__value_.__r.__words[2];
  v562 = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  v565 = 5;
  strcpy((char *)v564, "crete");
  v567 = 4;
  strcpy((char *)v566, "H15P");
  v80 = std::vector<std::string>::vector[abi:ne180100](v324, (uint64_t)&v560, 4uLL);
  v863 = v320;
  v864 = v321;
  v866 = v323;
  v862 = v325;
  v320 = 0uLL;
  v321 = 0;
  v865 = v322;
  v322 = 0uLL;
  v323 = 0;
  v867 = *(_OWORD *)v324;
  v868 = v324[2];
  *v80 = 0;
  v80[1] = 0;
  v80[2] = 0;
  *(_QWORD *)&v318 = 24624;
  DWORD2(v318) = 0;
  HIBYTE(v314) = 3;
  LODWORD(v313) = 3486024;
  HIBYTE(v316) = 4;
  strcpy((char *)&v315, "H15S");
  v555 = 4;
  strcpy((char *)v554, "H15S");
  std::to_string(&v312, 6030);
  v81 = std::string::insert(&v312, 0, "t");
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v557 = v81->__r_.__value_.__r.__words[2];
  v556 = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  v559 = 5;
  strcpy((char *)v558, "lobos");
  v83 = std::vector<std::string>::vector[abi:ne180100](v317, (uint64_t)v554, 3uLL);
  v871 = v314;
  v872 = v315;
  v873 = v316;
  v869 = v318;
  v870 = v313;
  v313 = 0uLL;
  v314 = 0;
  v315 = 0uLL;
  v316 = 0;
  v874 = *(_OWORD *)v317;
  v875 = v317[2];
  *v83 = 0;
  v83[1] = 0;
  v83[2] = 0;
  *(_QWORD *)&v311 = 24625;
  DWORD2(v311) = 0;
  HIBYTE(v307) = 3;
  LODWORD(v306) = 3486024;
  HIBYTE(v309) = 4;
  strcpy((char *)&v308, "H15C");
  v547 = 4;
  strcpy((char *)v546, "H15C");
  std::to_string(&v305, 6031);
  v84 = std::string::insert(&v305, 0, "t");
  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v549 = v84->__r_.__value_.__r.__words[2];
  v548 = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  v551 = 5;
  strcpy((char *)v550, "palma");
  v553 = 6;
  strcpy((char *)v552, "palmac");
  v86 = std::vector<std::string>::vector[abi:ne180100](v310, (uint64_t)v546, 4uLL);
  v877 = v306;
  v878 = v307;
  v880 = v309;
  v876 = v311;
  v306 = 0uLL;
  v307 = 0;
  v879 = v308;
  v308 = 0uLL;
  v309 = 0;
  v881 = *(_OWORD *)v310;
  v882 = v310[2];
  *v86 = 0;
  v86[1] = 0;
  v86[2] = 0;
  *(_QWORD *)&v304 = 24626;
  DWORD2(v304) = 0;
  HIBYTE(v300) = 3;
  LODWORD(v299) = 3486024;
  HIBYTE(v302) = 4;
  strcpy((char *)&v301, "H15D");
  v541 = 4;
  strcpy((char *)v540, "H15D");
  std::to_string(&v298, 6032);
  v87 = std::string::insert(&v298, 0, "t");
  v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v543 = v87->__r_.__value_.__r.__words[2];
  v542 = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  v545 = 6;
  strcpy((char *)v544, "palmad");
  v89 = std::vector<std::string>::vector[abi:ne180100](v303, (uint64_t)v540, 3uLL);
  v885 = v300;
  v886 = v301;
  v887 = v302;
  v883 = v304;
  v884 = v299;
  v299 = 0uLL;
  v300 = 0;
  v301 = 0uLL;
  v302 = 0;
  v888 = *(_OWORD *)v303;
  v889 = v303[2];
  *v89 = 0;
  v89[1] = 0;
  v89[2] = 0;
  *(_QWORD *)&v297 = 24628;
  DWORD2(v297) = 0;
  HIBYTE(v293) = 3;
  LODWORD(v292) = 3486024;
  HIBYTE(v295) = 4;
  strcpy((char *)&v294, "H15M");
  v535 = 4;
  strcpy((char *)v534, "H15M");
  std::to_string(&v291, 6034);
  v90 = std::string::insert(&v291, 0, "t");
  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v537 = v90->__r_.__value_.__r.__words[2];
  v536 = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  v539 = 6;
  strcpy((char *)v538, "palmam");
  v92 = std::vector<std::string>::vector[abi:ne180100](v296, (uint64_t)v534, 3uLL);
  v891 = v292;
  v892 = v293;
  v894 = v295;
  v890 = v297;
  v292 = 0uLL;
  v293 = 0;
  v893 = v294;
  v294 = 0uLL;
  v295 = 0;
  v895 = *(_OWORD *)v296;
  v896 = v296[2];
  *v92 = 0;
  v92[1] = 0;
  v92[2] = 0;
  *(_QWORD *)&v290 = 33058;
  DWORD2(v290) = 0;
  HIBYTE(v286) = 3;
  LODWORD(v285) = 3486024;
  HIBYTE(v288) = 4;
  strcpy((char *)&v287, "H15G");
  v529 = 4;
  strcpy((char *)v528, "H15G");
  std::to_string(&v284, 8122);
  v93 = std::string::insert(&v284, 0, "t");
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v531 = v93->__r_.__value_.__r.__words[2];
  v530 = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v533 = 5;
  strcpy((char *)v532, "ibiza");
  v95 = std::vector<std::string>::vector[abi:ne180100](v289, (uint64_t)v528, 3uLL);
  v899 = v286;
  v900 = v287;
  v901 = v288;
  v897 = v290;
  v898 = v285;
  v285 = 0uLL;
  v286 = 0;
  v287 = 0uLL;
  v288 = 0;
  v902 = *(_OWORD *)v289;
  v903 = v289[2];
  *v95 = 0;
  v95[1] = 0;
  v95[2] = 0;
  *(_QWORD *)&v283 = 33072;
  DWORD2(v283) = 0;
  HIBYTE(v279) = 3;
  LODWORD(v278) = 3551560;
  HIBYTE(v281) = 4;
  strcpy((char *)&v280, "H16P");
  v521 = 3;
  LODWORD(v520) = 3551560;
  std::to_string(&v277, 8130);
  v96 = std::string::insert(&v277, 0, "t");
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v523 = v96->__r_.__value_.__r.__words[2];
  v522 = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  v525 = 4;
  v527 = 4;
  strcpy((char *)v524, "coll");
  strcpy((char *)v526, "H16P");
  v98 = std::vector<std::string>::vector[abi:ne180100](v282, (uint64_t)&v520, 4uLL);
  v905 = v278;
  v906 = v279;
  v908 = v281;
  v904 = v283;
  v278 = 0uLL;
  v279 = 0;
  v907 = v280;
  v280 = 0uLL;
  v281 = 0;
  v909 = *(_OWORD *)v282;
  v910 = v282[2];
  *v98 = 0;
  v98[1] = 0;
  v98[2] = 0;
  *(_QWORD *)&v276 = 33074;
  DWORD2(v276) = 0;
  HIBYTE(v272) = 3;
  LODWORD(v271) = 3551560;
  HIBYTE(v274) = 4;
  strcpy((char *)&v273, "H16G");
  v515 = 4;
  strcpy((char *)v514, "H16G");
  std::to_string(&v270, 8132);
  v99 = std::string::insert(&v270, 0, "t");
  v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  v517 = v99->__r_.__value_.__r.__words[2];
  v516 = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  v519 = 5;
  strcpy((char *)v518, "donan");
  v101 = std::vector<std::string>::vector[abi:ne180100](v275, (uint64_t)v514, 3uLL);
  v913 = v272;
  v914 = v273;
  v915 = v274;
  v911 = v276;
  v912 = v271;
  v271 = 0uLL;
  v272 = 0;
  v273 = 0uLL;
  v274 = 0;
  v916 = *(_OWORD *)v275;
  v917 = v275[2];
  *v101 = 0;
  v101[1] = 0;
  v101[2] = 0;
  *(_QWORD *)&v269 = 33074;
  DWORD2(v269) = 1163414356;
  HIBYTE(v265) = 3;
  LODWORD(v264) = 3551560;
  HIBYTE(v267) = 4;
  strcpy((char *)&v266, "H16G");
  *((_BYTE *)&v262.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v262, "H16G");
  v102 = std::string::append(&v262, ".");
  v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v261 = 7;
  strcpy(v260, "Exclave");
  v104 = std::string::append(&v263, v260, 7uLL);
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v509 = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)v508 = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v257, 8132);
  v106 = std::string::insert(&v257, 0, "t");
  v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  v108 = std::string::append(&v258, ".");
  v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  v259.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  v256 = 7;
  strcpy(v255, "Exclave");
  v110 = std::string::append(&v259, v255, 7uLL);
  v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  v511 = v110->__r_.__value_.__r.__words[2];
  v510 = v111;
  v110->__r_.__value_.__l.__size_ = 0;
  v110->__r_.__value_.__r.__words[2] = 0;
  v110->__r_.__value_.__r.__words[0] = 0;
  v513 = 13;
  strcpy((char *)v512, "donan-exclave");
  v112 = std::vector<std::string>::vector[abi:ne180100](v268, (uint64_t)v508, 3uLL);
  v919 = v264;
  v920 = v265;
  v922 = v267;
  v918 = v269;
  v264 = 0uLL;
  v265 = 0;
  v921 = v266;
  v266 = 0uLL;
  v267 = 0;
  v923 = *(_OWORD *)v268;
  v924 = v268[2];
  *v112 = 0;
  v112[1] = 0;
  v112[2] = 0;
  *(_QWORD *)&v254 = 33088;
  DWORD2(v254) = 0;
  HIBYTE(v250) = 3;
  LODWORD(v249) = 3617096;
  HIBYTE(v252) = 4;
  strcpy((char *)&v251, "H17P");
  v501 = 3;
  LODWORD(v500) = 3617096;
  std::to_string(&v248, 8140);
  v113 = std::string::insert(&v248, 0, "t");
  v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
  v503 = v113->__r_.__value_.__r.__words[2];
  v502 = v114;
  v113->__r_.__value_.__l.__size_ = 0;
  v113->__r_.__value_.__r.__words[2] = 0;
  v113->__r_.__value_.__r.__words[0] = 0;
  v505 = 6;
  strcpy((char *)v504, "tahiti");
  v507 = 4;
  strcpy((char *)v506, "H17P");
  v115 = std::vector<std::string>::vector[abi:ne180100](v253, (uint64_t)&v500, 4uLL);
  v927 = v250;
  v928 = v251;
  v929 = v252;
  v925 = v254;
  v926 = v249;
  v249 = 0uLL;
  v250 = 0;
  v251 = 0uLL;
  v252 = 0;
  v930 = *(_OWORD *)v253;
  v931 = v253[2];
  *v115 = 0;
  v115[1] = 0;
  v115[2] = 0;
  *(_QWORD *)&v247 = 33552;
  DWORD2(v247) = 0;
  HIBYTE(v243) = 3;
  LODWORD(v242) = 3223885;
  HIBYTE(v245) = 11;
  strcpy((char *)&v244, "Unsupported");
  v495 = 3;
  LODWORD(v494) = 3223885;
  std::to_string(&v241, 8310);
  v116 = std::string::insert(&v241, 0, "t");
  v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  v497 = v116->__r_.__value_.__r.__words[2];
  v496 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  v499 = 6;
  strcpy((char *)v498, "caicos");
  v118 = std::vector<std::string>::vector[abi:ne180100](__p, (uint64_t)&v494, 3uLL);
  v119 = 0;
  v932 = v247;
  v933 = v242;
  v934 = v243;
  v242 = 0uLL;
  v243 = 0;
  v935 = v244;
  v936 = v245;
  v244 = 0uLL;
  v245 = 0;
  v937 = *(_OWORD *)__p;
  v938 = __p[2];
  *v118 = 0;
  v118[1] = 0;
  v120 = v240;
  v118[2] = 0;
  *(_OWORD *)v240 = 0u;
  v121 = (_QWORD *)(v240 + 24);
  *(_DWORD *)(v240 + 32) = 1065353216;
  *(_OWORD *)(v240 + 16) = 0u;
  v238 = (_QWORD *)(v240 + 16);
  do
  {
    while (1)
    {
      v122 = (char *)v702 + 88 * v119;
      v123 = std::hash<E5Common::PlatformIdentifier>::operator()((uint64_t)v121, (uint64_t)v122);
      v124 = v123;
      v125 = *(_QWORD *)(v120 + 8);
      v239 = v119;
      if (!v125)
        break;
      v126 = (uint8x8_t)vcnt_s8((int8x8_t)v125);
      v126.i16[0] = vaddlv_u8(v126);
      if (v126.u32[0] > 1uLL)
      {
        v120 = v123;
        if (v123 >= v125)
          v120 = v123 % v125;
      }
      else
      {
        v120 = (v125 - 1) & v123;
      }
      v127 = *(_QWORD **)(*(_QWORD *)v240 + 8 * v120);
      if (!v127)
        break;
      v128 = (_QWORD *)*v127;
      if (!*v127)
        break;
      if (v126.u32[0] < 2uLL)
      {
        while (1)
        {
          v130 = v128[1];
          if (v130 == v124)
          {
            if (E5Common::PlatformIdentifier::operator==((uint64_t)(v128 + 2), (uint64_t)v702 + 88 * v119))
              goto LABEL_2;
          }
          else if ((v130 & (v125 - 1)) != v120)
          {
            goto LABEL_24;
          }
          v128 = (_QWORD *)*v128;
          if (!v128)
            goto LABEL_24;
        }
      }
      while (1)
      {
        v129 = v128[1];
        if (v129 == v124)
          break;
        if (v129 >= v125)
          v129 %= v125;
        if (v129 != v120)
          goto LABEL_24;
LABEL_13:
        v128 = (_QWORD *)*v128;
        if (!v128)
          goto LABEL_24;
      }
      if (!E5Common::PlatformIdentifier::operator==((uint64_t)(v128 + 2), (uint64_t)v702 + 88 * v119))
        goto LABEL_13;
LABEL_2:
      v120 = v240;
      ++v119;
      if (v239 == 33)
        goto LABEL_103;
    }
LABEL_24:
    v131 = (char *)operator new(0x68uLL);
    v132 = v131;
    *(_QWORD *)v131 = 0;
    *((_QWORD *)v131 + 1) = v124;
    *((_OWORD *)v131 + 1) = *(_OWORD *)v122;
    v133 = (const std::string::value_type **)&v702[1] + 11 * v119;
    if (v122[39] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v131 + 32), *v133, *((_QWORD *)&v702[1] + 11 * v119 + 1));
    }
    else
    {
      *((_OWORD *)v131 + 2) = *(_OWORD *)v133;
      *((_QWORD *)v131 + 6) = *((_QWORD *)&v702[2] + 11 * v119);
    }
    v134 = (const std::string::value_type **)&v704 + 11 * v119;
    if (v122[63] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v132 + 56), *v134, *((_QWORD *)&v704 + 11 * v119 + 1));
    }
    else
    {
      *(_OWORD *)(v132 + 56) = *(_OWORD *)v134;
      *((_QWORD *)v132 + 9) = *(&v705 + 11 * v119);
    }
    *((_QWORD *)v132 + 10) = 0;
    *((_QWORD *)v132 + 11) = 0;
    *((_QWORD *)v132 + 12) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v132 + 10, *((_QWORD *)&v706 + 11 * v119), *((_QWORD *)&v706 + 11 * v119 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v706 + 11 * v119 + 1) - *((_QWORD *)&v706 + 11 * v119)) >> 3));
    v135 = (float)(unint64_t)(*(_QWORD *)(v240 + 24) + 1);
    v136 = *(float *)(v240 + 32);
    if (!v125 || (float)(v136 * (float)v125) < v135)
    {
      v139 = (v125 & (v125 - 1)) == 0;
      if (v125 < 3)
        v139 = 0;
      v140 = (2 * v125) | !v139;
      v141 = vcvtps_u32_f32(v135 / v136);
      if (v140 <= v141)
        prime = v141;
      else
        prime = v140;
      if (prime == 1)
      {
        prime = 2;
        v143 = v240;
        v144 = v124;
      }
      else
      {
        v143 = v240;
        v144 = v124;
        if ((prime & (prime - 1)) != 0)
          prime = std::__next_prime(prime);
      }
      v125 = *(_QWORD *)(v143 + 8);
      if (prime <= v125)
      {
        if (prime >= v125)
          goto LABEL_80;
        v155 = vcvtps_u32_f32((float)*(unint64_t *)(v143 + 24) / *(float *)(v143 + 32));
        if (v125 < 3 || (v156 = (uint8x8_t)vcnt_s8((int8x8_t)v125), v156.i16[0] = vaddlv_u8(v156), v156.u32[0] > 1uLL))
        {
          v155 = std::__next_prime(v155);
        }
        else
        {
          v157 = 1 << -(char)__clz(v155 - 1);
          if (v155 >= 2)
            v155 = v157;
        }
        if (prime <= v155)
          prime = v155;
        if (prime >= v125)
        {
          v125 = *(_QWORD *)(v143 + 8);
          v160 = v125 - 1;
          if ((v125 & (v125 - 1)) != 0)
            goto LABEL_93;
          goto LABEL_81;
        }
        if (!prime)
        {
          v159 = *(void **)v143;
          *(_QWORD *)v143 = 0;
          if (v159)
            operator delete(v159);
          v125 = 0;
          *(_QWORD *)(v143 + 8) = 0;
          v160 = -1;
          goto LABEL_81;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v145 = operator new(8 * prime);
      v146 = *(void **)v143;
      *(_QWORD *)v143 = v145;
      if (v146)
        operator delete(v146);
      v147 = 0;
      *(_QWORD *)(v143 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)v143 + 8 * v147++) = 0;
      while (prime != v147);
      v148 = (_QWORD *)*v238;
      if (!*v238)
      {
LABEL_92:
        v125 = prime;
        v160 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
LABEL_93:
          if (v144 >= v125)
          {
            v120 = v144 % v125;
            v137 = *(_QWORD *)v240;
            v138 = *(_QWORD **)(*(_QWORD *)v240 + 8 * (v144 % v125));
            if (!v138)
              goto LABEL_82;
          }
          else
          {
            v120 = v144;
            v137 = *(_QWORD *)v240;
            v138 = *(_QWORD **)(*(_QWORD *)v240 + 8 * v144);
            if (!v138)
              goto LABEL_82;
          }
          goto LABEL_33;
        }
LABEL_81:
        v120 = v160 & v144;
        v137 = *(_QWORD *)v240;
        v138 = *(_QWORD **)(*(_QWORD *)v240 + 8 * (v160 & v144));
        if (!v138)
          goto LABEL_82;
LABEL_33:
        *(_QWORD *)v132 = *v138;
        goto LABEL_101;
      }
      v149 = v148[1];
      v150 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v151 = v149 & v150;
        *(_QWORD *)(*(_QWORD *)v143 + 8 * v151) = v238;
        for (i = (_QWORD *)*v148; *v148; i = (_QWORD *)*v148)
        {
          v153 = i[1] & v150;
          if (v153 == v151)
          {
            v148 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)v143 + 8 * v153))
          {
            *v148 = *i;
            v154 = 8 * v153;
            *i = **(_QWORD **)(*(_QWORD *)v143 + v154);
            **(_QWORD **)(*(_QWORD *)v143 + v154) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v143 + 8 * v153) = v148;
            v148 = i;
            v151 = v153;
          }
        }
        goto LABEL_92;
      }
      if (v149 < prime)
      {
        *(_QWORD *)(*(_QWORD *)v143 + 8 * v149) = v238;
        v158 = (_QWORD *)*v148;
        if (*v148)
          goto LABEL_87;
        goto LABEL_79;
      }
      v149 %= prime;
      *(_QWORD *)(*(_QWORD *)v143 + 8 * v149) = v238;
      v158 = (_QWORD *)*v148;
      if (!*v148)
      {
LABEL_79:
        v125 = prime;
LABEL_80:
        v160 = v125 - 1;
        if ((v125 & (v125 - 1)) != 0)
          goto LABEL_93;
        goto LABEL_81;
      }
      while (1)
      {
LABEL_87:
        v164 = v158[1];
        if (v164 >= prime)
          v164 %= prime;
        if (v164 == v149)
          goto LABEL_86;
        if (*(_QWORD *)(*(_QWORD *)v143 + 8 * v164))
        {
          *v148 = *v158;
          v163 = 8 * v164;
          *v158 = **(_QWORD **)(*(_QWORD *)v143 + v163);
          **(_QWORD **)(*(_QWORD *)v143 + v163) = v158;
          v158 = v148;
LABEL_86:
          v148 = v158;
          v158 = (_QWORD *)*v158;
          if (!v158)
            goto LABEL_92;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v143 + 8 * v164) = v148;
          v148 = v158;
          v158 = (_QWORD *)*v158;
          v149 = v164;
          if (!v158)
            goto LABEL_92;
        }
      }
    }
    v137 = *(_QWORD *)v240;
    v138 = *(_QWORD **)(*(_QWORD *)v240 + 8 * v120);
    if (v138)
      goto LABEL_33;
LABEL_82:
    *(_QWORD *)v132 = *v238;
    *v238 = v132;
    *(_QWORD *)(v137 + 8 * v120) = v238;
    if (!*(_QWORD *)v132)
      goto LABEL_102;
    v161 = *(_QWORD *)(*(_QWORD *)v132 + 8);
    if ((v125 & (v125 - 1)) != 0)
    {
      v162 = (_QWORD *)v240;
      if (v161 >= v125)
        v161 %= v125;
    }
    else
    {
      v161 &= v125 - 1;
      v162 = (_QWORD *)v240;
    }
    v138 = (_QWORD *)(*v162 + 8 * v161);
LABEL_101:
    *v138 = v132;
LABEL_102:
    ++*v121;
    v120 = v240;
    ++v119;
  }
  while (v239 != 33);
LABEL_103:
  v165 = (E5RT::AsyncEventImpl *)v939;
  do
  {
    while (1)
    {
      v166 = *((_QWORD *)v165 - 3);
      if (v166)
      {
        v167 = *((_QWORD *)v165 - 2);
        v168 = (void *)*((_QWORD *)v165 - 3);
        if (v167 != v166)
        {
          do
          {
            if (*(char *)(v167 - 1) < 0)
              operator delete(*(void **)(v167 - 24));
            v167 -= 24;
          }
          while (v167 != v166);
          v168 = (void *)*((_QWORD *)v165 - 3);
        }
        *((_QWORD *)v165 - 2) = v166;
        operator delete(v168);
      }
      if ((*((char *)v165 - 25) & 0x80000000) == 0)
        break;
      operator delete(*((void **)v165 - 6));
      if (*((char *)v165 - 49) < 0)
        goto LABEL_116;
LABEL_105:
      v165 = (E5RT::AsyncEventImpl *)((char *)v165 - 88);
      E5RT::AsyncEventImpl::~AsyncEventImpl(v165);
      if (v165 == (E5RT::AsyncEventImpl *)v702)
        goto LABEL_117;
    }
    if ((*((char *)v165 - 49) & 0x80000000) == 0)
      goto LABEL_105;
LABEL_116:
    operator delete(*((void **)v165 - 9));
    v165 = (E5RT::AsyncEventImpl *)((char *)v165 - 88);
    E5RT::AsyncEventImpl::~AsyncEventImpl(v165);
  }
  while (v165 != (E5RT::AsyncEventImpl *)v702);
LABEL_117:
  v169 = (void **)__p[0];
  if (__p[0])
  {
    v170 = (void **)__p[1];
    v171 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v170 - 1) < 0)
          operator delete(*(v170 - 3));
        v170 -= 3;
      }
      while (v170 != v169);
      v171 = __p[0];
    }
    __p[1] = v169;
    operator delete(v171);
  }
  if (SHIBYTE(v245) < 0)
  {
    operator delete((void *)v244);
    if (SHIBYTE(v243) < 0)
      goto LABEL_477;
LABEL_127:
    if ((v499 & 0x80000000) == 0)
      goto LABEL_128;
LABEL_478:
    operator delete(v498[0]);
    if (SHIBYTE(v497) < 0)
      goto LABEL_479;
LABEL_129:
    if ((v495 & 0x80000000) == 0)
      goto LABEL_130;
LABEL_480:
    operator delete(v494);
    if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_481;
LABEL_131:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v247);
    v172 = (void **)v253[0];
    if (v253[0])
      goto LABEL_132;
LABEL_482:
    if ((SHIBYTE(v252) & 0x80000000) == 0)
      goto LABEL_483;
LABEL_134:
    operator delete((void *)v251);
    if ((SHIBYTE(v250) & 0x80000000) == 0)
      goto LABEL_484;
LABEL_135:
    operator delete((void *)v249);
    if ((v507 & 0x80000000) == 0)
      goto LABEL_485;
LABEL_136:
    operator delete(v506[0]);
    if ((v505 & 0x80000000) == 0)
      goto LABEL_486;
LABEL_137:
    operator delete(v504[0]);
    if ((SHIBYTE(v503) & 0x80000000) == 0)
      goto LABEL_487;
LABEL_138:
    operator delete((void *)v502);
    if ((v501 & 0x80000000) == 0)
      goto LABEL_488;
LABEL_139:
    operator delete(v500);
    if ((SHIBYTE(v248.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_489;
LABEL_140:
    operator delete(v248.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v254);
    v174 = (void **)v268[0];
    if (v268[0])
      goto LABEL_490;
LABEL_141:
    if (SHIBYTE(v267) < 0)
      goto LABEL_492;
    goto LABEL_142;
  }
  if ((SHIBYTE(v243) & 0x80000000) == 0)
    goto LABEL_127;
LABEL_477:
  operator delete((void *)v242);
  if (v499 < 0)
    goto LABEL_478;
LABEL_128:
  if ((SHIBYTE(v497) & 0x80000000) == 0)
    goto LABEL_129;
LABEL_479:
  operator delete((void *)v496);
  if (v495 < 0)
    goto LABEL_480;
LABEL_130:
  if ((SHIBYTE(v241.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_131;
LABEL_481:
  operator delete(v241.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v247);
  v172 = (void **)v253[0];
  if (!v253[0])
    goto LABEL_482;
LABEL_132:
  v173 = (void **)v253[1];
  if (v253[1] != v172)
  {
    do
    {
      if (*((char *)v173 - 1) < 0)
        operator delete(*(v173 - 3));
      v173 -= 3;
    }
    while (v173 != v172);
    v253[1] = v172;
    operator delete(v253[0]);
    if ((SHIBYTE(v252) & 0x80000000) == 0)
      goto LABEL_483;
    goto LABEL_134;
  }
  v253[1] = v172;
  operator delete(v172);
  if (SHIBYTE(v252) < 0)
    goto LABEL_134;
LABEL_483:
  if (SHIBYTE(v250) < 0)
    goto LABEL_135;
LABEL_484:
  if (v507 < 0)
    goto LABEL_136;
LABEL_485:
  if (v505 < 0)
    goto LABEL_137;
LABEL_486:
  if (SHIBYTE(v503) < 0)
    goto LABEL_138;
LABEL_487:
  if (v501 < 0)
    goto LABEL_139;
LABEL_488:
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_140;
LABEL_489:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v254);
  v174 = (void **)v268[0];
  if (!v268[0])
    goto LABEL_141;
LABEL_490:
  v222 = (void **)v268[1];
  if (v268[1] != v174)
  {
    do
    {
      if (*((char *)v222 - 1) < 0)
        operator delete(*(v222 - 3));
      v222 -= 3;
    }
    while (v222 != v174);
    v268[1] = v174;
    operator delete(v268[0]);
    if ((SHIBYTE(v267) & 0x80000000) == 0)
      goto LABEL_142;
LABEL_492:
    operator delete((void *)v266);
    if ((SHIBYTE(v265) & 0x80000000) == 0)
      goto LABEL_143;
LABEL_493:
    operator delete((void *)v264);
    if (v513 < 0)
      goto LABEL_494;
LABEL_144:
    if ((SHIBYTE(v511) & 0x80000000) == 0)
      goto LABEL_145;
LABEL_495:
    operator delete((void *)v510);
    if (SHIBYTE(v509) < 0)
      goto LABEL_496;
LABEL_146:
    if ((v256 & 0x80000000) == 0)
      goto LABEL_147;
LABEL_497:
    operator delete(*(void **)v255);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_498;
LABEL_148:
    if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_149;
LABEL_499:
    operator delete(v258.__r_.__value_.__l.__data_);
    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_500;
LABEL_150:
    if ((v261 & 0x80000000) == 0)
      goto LABEL_151;
LABEL_501:
    operator delete(*(void **)v260);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_502;
LABEL_152:
    if ((SHIBYTE(v262.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_153;
LABEL_503:
    operator delete(v262.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v269);
    v175 = (void **)v275[0];
    if (!v275[0])
      goto LABEL_504;
LABEL_154:
    v176 = (void **)v275[1];
    if (v275[1] == v175)
    {
      v275[1] = v175;
      operator delete(v175);
      if ((SHIBYTE(v274) & 0x80000000) == 0)
        goto LABEL_505;
    }
    else
    {
      do
      {
        if (*((char *)v176 - 1) < 0)
          operator delete(*(v176 - 3));
        v176 -= 3;
      }
      while (v176 != v175);
      v275[1] = v175;
      operator delete(v275[0]);
      if ((SHIBYTE(v274) & 0x80000000) == 0)
        goto LABEL_505;
    }
LABEL_156:
    operator delete((void *)v273);
    if ((SHIBYTE(v272) & 0x80000000) == 0)
      goto LABEL_506;
LABEL_157:
    operator delete((void *)v271);
    if ((v519 & 0x80000000) == 0)
      goto LABEL_507;
LABEL_158:
    operator delete(v518[0]);
    if ((SHIBYTE(v517) & 0x80000000) == 0)
      goto LABEL_508;
LABEL_159:
    operator delete((void *)v516);
    if ((v515 & 0x80000000) == 0)
      goto LABEL_509;
LABEL_160:
    operator delete(v514[0]);
    if ((SHIBYTE(v270.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_510;
LABEL_161:
    operator delete(v270.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v276);
    v177 = (void **)v282[0];
    if (v282[0])
      goto LABEL_511;
LABEL_162:
    if (SHIBYTE(v281) < 0)
      goto LABEL_513;
    goto LABEL_163;
  }
  v268[1] = v174;
  operator delete(v174);
  if (SHIBYTE(v267) < 0)
    goto LABEL_492;
LABEL_142:
  if (SHIBYTE(v265) < 0)
    goto LABEL_493;
LABEL_143:
  if ((v513 & 0x80000000) == 0)
    goto LABEL_144;
LABEL_494:
  operator delete(v512[0]);
  if (SHIBYTE(v511) < 0)
    goto LABEL_495;
LABEL_145:
  if ((SHIBYTE(v509) & 0x80000000) == 0)
    goto LABEL_146;
LABEL_496:
  operator delete(v508[0]);
  if (v256 < 0)
    goto LABEL_497;
LABEL_147:
  if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_148;
LABEL_498:
  operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_499;
LABEL_149:
  if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_150;
LABEL_500:
  operator delete(v257.__r_.__value_.__l.__data_);
  if (v261 < 0)
    goto LABEL_501;
LABEL_151:
  if ((SHIBYTE(v263.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_152;
LABEL_502:
  operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_503;
LABEL_153:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v269);
  v175 = (void **)v275[0];
  if (v275[0])
    goto LABEL_154;
LABEL_504:
  if (SHIBYTE(v274) < 0)
    goto LABEL_156;
LABEL_505:
  if (SHIBYTE(v272) < 0)
    goto LABEL_157;
LABEL_506:
  if (v519 < 0)
    goto LABEL_158;
LABEL_507:
  if (SHIBYTE(v517) < 0)
    goto LABEL_159;
LABEL_508:
  if (v515 < 0)
    goto LABEL_160;
LABEL_509:
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_161;
LABEL_510:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v276);
  v177 = (void **)v282[0];
  if (!v282[0])
    goto LABEL_162;
LABEL_511:
  v223 = (void **)v282[1];
  if (v282[1] != v177)
  {
    do
    {
      if (*((char *)v223 - 1) < 0)
        operator delete(*(v223 - 3));
      v223 -= 3;
    }
    while (v223 != v177);
    v282[1] = v177;
    operator delete(v282[0]);
    if ((SHIBYTE(v281) & 0x80000000) == 0)
      goto LABEL_163;
LABEL_513:
    operator delete((void *)v280);
    if ((SHIBYTE(v279) & 0x80000000) == 0)
      goto LABEL_164;
LABEL_514:
    operator delete((void *)v278);
    if (v527 < 0)
      goto LABEL_515;
LABEL_165:
    if ((v525 & 0x80000000) == 0)
      goto LABEL_166;
LABEL_516:
    operator delete(v524[0]);
    if (SHIBYTE(v523) < 0)
      goto LABEL_517;
LABEL_167:
    if ((v521 & 0x80000000) == 0)
      goto LABEL_168;
LABEL_518:
    operator delete(v520);
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_519;
LABEL_169:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v283);
    v178 = (void **)v289[0];
    if (v289[0])
      goto LABEL_170;
LABEL_520:
    if ((SHIBYTE(v288) & 0x80000000) == 0)
      goto LABEL_521;
LABEL_172:
    operator delete((void *)v287);
    if ((SHIBYTE(v286) & 0x80000000) == 0)
      goto LABEL_522;
LABEL_173:
    operator delete((void *)v285);
    if ((v533 & 0x80000000) == 0)
      goto LABEL_523;
LABEL_174:
    operator delete(v532[0]);
    if ((SHIBYTE(v531) & 0x80000000) == 0)
      goto LABEL_524;
LABEL_175:
    operator delete((void *)v530);
    if ((v529 & 0x80000000) == 0)
      goto LABEL_525;
LABEL_176:
    operator delete(v528[0]);
    if ((SHIBYTE(v284.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_526;
LABEL_177:
    operator delete(v284.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v290);
    v180 = (void **)v296[0];
    if (v296[0])
      goto LABEL_527;
LABEL_178:
    if (SHIBYTE(v295) < 0)
      goto LABEL_529;
    goto LABEL_179;
  }
  v282[1] = v177;
  operator delete(v177);
  if (SHIBYTE(v281) < 0)
    goto LABEL_513;
LABEL_163:
  if (SHIBYTE(v279) < 0)
    goto LABEL_514;
LABEL_164:
  if ((v527 & 0x80000000) == 0)
    goto LABEL_165;
LABEL_515:
  operator delete(v526[0]);
  if (v525 < 0)
    goto LABEL_516;
LABEL_166:
  if ((SHIBYTE(v523) & 0x80000000) == 0)
    goto LABEL_167;
LABEL_517:
  operator delete((void *)v522);
  if (v521 < 0)
    goto LABEL_518;
LABEL_168:
  if ((SHIBYTE(v277.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_169;
LABEL_519:
  operator delete(v277.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v283);
  v178 = (void **)v289[0];
  if (!v289[0])
    goto LABEL_520;
LABEL_170:
  v179 = (void **)v289[1];
  if (v289[1] != v178)
  {
    do
    {
      if (*((char *)v179 - 1) < 0)
        operator delete(*(v179 - 3));
      v179 -= 3;
    }
    while (v179 != v178);
    v289[1] = v178;
    operator delete(v289[0]);
    if ((SHIBYTE(v288) & 0x80000000) == 0)
      goto LABEL_521;
    goto LABEL_172;
  }
  v289[1] = v178;
  operator delete(v178);
  if (SHIBYTE(v288) < 0)
    goto LABEL_172;
LABEL_521:
  if (SHIBYTE(v286) < 0)
    goto LABEL_173;
LABEL_522:
  if (v533 < 0)
    goto LABEL_174;
LABEL_523:
  if (SHIBYTE(v531) < 0)
    goto LABEL_175;
LABEL_524:
  if (v529 < 0)
    goto LABEL_176;
LABEL_525:
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_177;
LABEL_526:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v290);
  v180 = (void **)v296[0];
  if (!v296[0])
    goto LABEL_178;
LABEL_527:
  v224 = (void **)v296[1];
  if (v296[1] != v180)
  {
    do
    {
      if (*((char *)v224 - 1) < 0)
        operator delete(*(v224 - 3));
      v224 -= 3;
    }
    while (v224 != v180);
    v296[1] = v180;
    operator delete(v296[0]);
    if ((SHIBYTE(v295) & 0x80000000) == 0)
      goto LABEL_179;
LABEL_529:
    operator delete((void *)v294);
    if ((SHIBYTE(v293) & 0x80000000) == 0)
      goto LABEL_180;
LABEL_530:
    operator delete((void *)v292);
    if (v539 < 0)
      goto LABEL_531;
LABEL_181:
    if ((SHIBYTE(v537) & 0x80000000) == 0)
      goto LABEL_182;
LABEL_532:
    operator delete((void *)v536);
    if (v535 < 0)
      goto LABEL_533;
LABEL_183:
    if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_184;
LABEL_534:
    operator delete(v291.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v297);
    v181 = (void **)v303[0];
    if (!v303[0])
      goto LABEL_535;
LABEL_185:
    v182 = (void **)v303[1];
    if (v303[1] == v181)
    {
      v303[1] = v181;
      operator delete(v181);
      if ((SHIBYTE(v302) & 0x80000000) == 0)
        goto LABEL_536;
    }
    else
    {
      do
      {
        if (*((char *)v182 - 1) < 0)
          operator delete(*(v182 - 3));
        v182 -= 3;
      }
      while (v182 != v181);
      v303[1] = v181;
      operator delete(v303[0]);
      if ((SHIBYTE(v302) & 0x80000000) == 0)
        goto LABEL_536;
    }
LABEL_187:
    operator delete((void *)v301);
    if ((SHIBYTE(v300) & 0x80000000) == 0)
      goto LABEL_537;
LABEL_188:
    operator delete((void *)v299);
    if ((v545 & 0x80000000) == 0)
      goto LABEL_538;
LABEL_189:
    operator delete(v544[0]);
    if ((SHIBYTE(v543) & 0x80000000) == 0)
      goto LABEL_539;
LABEL_190:
    operator delete((void *)v542);
    if ((v541 & 0x80000000) == 0)
      goto LABEL_540;
LABEL_191:
    operator delete(v540[0]);
    if ((SHIBYTE(v298.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_541;
LABEL_192:
    operator delete(v298.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v304);
    v183 = (void **)v310[0];
    if (v310[0])
      goto LABEL_542;
LABEL_193:
    if (SHIBYTE(v309) < 0)
      goto LABEL_544;
    goto LABEL_194;
  }
  v296[1] = v180;
  operator delete(v180);
  if (SHIBYTE(v295) < 0)
    goto LABEL_529;
LABEL_179:
  if (SHIBYTE(v293) < 0)
    goto LABEL_530;
LABEL_180:
  if ((v539 & 0x80000000) == 0)
    goto LABEL_181;
LABEL_531:
  operator delete(v538[0]);
  if (SHIBYTE(v537) < 0)
    goto LABEL_532;
LABEL_182:
  if ((v535 & 0x80000000) == 0)
    goto LABEL_183;
LABEL_533:
  operator delete(v534[0]);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_534;
LABEL_184:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v297);
  v181 = (void **)v303[0];
  if (v303[0])
    goto LABEL_185;
LABEL_535:
  if (SHIBYTE(v302) < 0)
    goto LABEL_187;
LABEL_536:
  if (SHIBYTE(v300) < 0)
    goto LABEL_188;
LABEL_537:
  if (v545 < 0)
    goto LABEL_189;
LABEL_538:
  if (SHIBYTE(v543) < 0)
    goto LABEL_190;
LABEL_539:
  if (v541 < 0)
    goto LABEL_191;
LABEL_540:
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_192;
LABEL_541:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v304);
  v183 = (void **)v310[0];
  if (!v310[0])
    goto LABEL_193;
LABEL_542:
  v225 = (void **)v310[1];
  if (v310[1] != v183)
  {
    do
    {
      if (*((char *)v225 - 1) < 0)
        operator delete(*(v225 - 3));
      v225 -= 3;
    }
    while (v225 != v183);
    v310[1] = v183;
    operator delete(v310[0]);
    if ((SHIBYTE(v309) & 0x80000000) == 0)
      goto LABEL_194;
LABEL_544:
    operator delete((void *)v308);
    if ((SHIBYTE(v307) & 0x80000000) == 0)
      goto LABEL_195;
LABEL_545:
    operator delete((void *)v306);
    if (v553 < 0)
      goto LABEL_546;
LABEL_196:
    if ((v551 & 0x80000000) == 0)
      goto LABEL_197;
LABEL_547:
    operator delete(v550[0]);
    if (SHIBYTE(v549) < 0)
      goto LABEL_548;
LABEL_198:
    if ((v547 & 0x80000000) == 0)
      goto LABEL_199;
LABEL_549:
    operator delete(v546[0]);
    if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_550;
LABEL_200:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v311);
    v184 = (void **)v317[0];
    if (v317[0])
      goto LABEL_201;
LABEL_551:
    if ((SHIBYTE(v316) & 0x80000000) == 0)
      goto LABEL_552;
LABEL_203:
    operator delete((void *)v315);
    if ((SHIBYTE(v314) & 0x80000000) == 0)
      goto LABEL_553;
LABEL_204:
    operator delete((void *)v313);
    if ((v559 & 0x80000000) == 0)
      goto LABEL_554;
LABEL_205:
    operator delete(v558[0]);
    if ((SHIBYTE(v557) & 0x80000000) == 0)
      goto LABEL_555;
LABEL_206:
    operator delete((void *)v556);
    if ((v555 & 0x80000000) == 0)
      goto LABEL_556;
LABEL_207:
    operator delete(v554[0]);
    if ((SHIBYTE(v312.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_557;
LABEL_208:
    operator delete(v312.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v318);
    v186 = (void **)v324[0];
    if (v324[0])
      goto LABEL_558;
LABEL_209:
    if (SHIBYTE(v323) < 0)
      goto LABEL_560;
    goto LABEL_210;
  }
  v310[1] = v183;
  operator delete(v183);
  if (SHIBYTE(v309) < 0)
    goto LABEL_544;
LABEL_194:
  if (SHIBYTE(v307) < 0)
    goto LABEL_545;
LABEL_195:
  if ((v553 & 0x80000000) == 0)
    goto LABEL_196;
LABEL_546:
  operator delete(v552[0]);
  if (v551 < 0)
    goto LABEL_547;
LABEL_197:
  if ((SHIBYTE(v549) & 0x80000000) == 0)
    goto LABEL_198;
LABEL_548:
  operator delete((void *)v548);
  if (v547 < 0)
    goto LABEL_549;
LABEL_199:
  if ((SHIBYTE(v305.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_200;
LABEL_550:
  operator delete(v305.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v311);
  v184 = (void **)v317[0];
  if (!v317[0])
    goto LABEL_551;
LABEL_201:
  v185 = (void **)v317[1];
  if (v317[1] != v184)
  {
    do
    {
      if (*((char *)v185 - 1) < 0)
        operator delete(*(v185 - 3));
      v185 -= 3;
    }
    while (v185 != v184);
    v317[1] = v184;
    operator delete(v317[0]);
    if ((SHIBYTE(v316) & 0x80000000) == 0)
      goto LABEL_552;
    goto LABEL_203;
  }
  v317[1] = v184;
  operator delete(v184);
  if (SHIBYTE(v316) < 0)
    goto LABEL_203;
LABEL_552:
  if (SHIBYTE(v314) < 0)
    goto LABEL_204;
LABEL_553:
  if (v559 < 0)
    goto LABEL_205;
LABEL_554:
  if (SHIBYTE(v557) < 0)
    goto LABEL_206;
LABEL_555:
  if (v555 < 0)
    goto LABEL_207;
LABEL_556:
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_208;
LABEL_557:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v318);
  v186 = (void **)v324[0];
  if (!v324[0])
    goto LABEL_209;
LABEL_558:
  v226 = (void **)v324[1];
  if (v324[1] != v186)
  {
    do
    {
      if (*((char *)v226 - 1) < 0)
        operator delete(*(v226 - 3));
      v226 -= 3;
    }
    while (v226 != v186);
    v324[1] = v186;
    operator delete(v324[0]);
    if ((SHIBYTE(v323) & 0x80000000) == 0)
      goto LABEL_210;
LABEL_560:
    operator delete((void *)v322);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
      goto LABEL_211;
LABEL_561:
    operator delete((void *)v320);
    if (v567 < 0)
      goto LABEL_562;
LABEL_212:
    if ((v565 & 0x80000000) == 0)
      goto LABEL_213;
LABEL_563:
    operator delete(v564[0]);
    if (SHIBYTE(v563) < 0)
      goto LABEL_564;
LABEL_214:
    if ((v561 & 0x80000000) == 0)
      goto LABEL_215;
LABEL_565:
    operator delete(v560);
    if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_566;
LABEL_216:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v325);
    v187 = (void **)v339[0];
    if (v339[0])
      goto LABEL_217;
LABEL_567:
    if ((SHIBYTE(v338) & 0x80000000) == 0)
      goto LABEL_568;
LABEL_219:
    operator delete((void *)v337);
    if ((SHIBYTE(v336) & 0x80000000) == 0)
      goto LABEL_569;
LABEL_220:
    operator delete((void *)v335);
    if ((SHIBYTE(v571) & 0x80000000) == 0)
      goto LABEL_570;
LABEL_221:
    operator delete((void *)v570);
    if ((SHIBYTE(v569) & 0x80000000) == 0)
      goto LABEL_571;
LABEL_222:
    operator delete(v568[0]);
    if ((v327 & 0x80000000) == 0)
      goto LABEL_572;
LABEL_223:
    operator delete(*(void **)v326);
    if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_573;
LABEL_224:
    operator delete(v330.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v329.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_574;
LABEL_225:
    operator delete(v329.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v328.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_575;
LABEL_226:
    operator delete(v328.__r_.__value_.__l.__data_);
    if ((v332 & 0x80000000) == 0)
      goto LABEL_576;
LABEL_227:
    operator delete(*(void **)__s);
    if ((SHIBYTE(v334.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_577;
LABEL_228:
    operator delete(v334.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v333.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_578;
LABEL_229:
    operator delete(v333.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v340);
    v189 = (void **)v346[0];
    if (v346[0])
      goto LABEL_579;
LABEL_230:
    if (SHIBYTE(v345) < 0)
      goto LABEL_581;
    goto LABEL_231;
  }
  v324[1] = v186;
  operator delete(v186);
  if (SHIBYTE(v323) < 0)
    goto LABEL_560;
LABEL_210:
  if (SHIBYTE(v321) < 0)
    goto LABEL_561;
LABEL_211:
  if ((v567 & 0x80000000) == 0)
    goto LABEL_212;
LABEL_562:
  operator delete(v566[0]);
  if (v565 < 0)
    goto LABEL_563;
LABEL_213:
  if ((SHIBYTE(v563) & 0x80000000) == 0)
    goto LABEL_214;
LABEL_564:
  operator delete((void *)v562);
  if (v561 < 0)
    goto LABEL_565;
LABEL_215:
  if ((SHIBYTE(v319.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_216;
LABEL_566:
  operator delete(v319.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v325);
  v187 = (void **)v339[0];
  if (!v339[0])
    goto LABEL_567;
LABEL_217:
  v188 = (void **)v339[1];
  if (v339[1] != v187)
  {
    do
    {
      if (*((char *)v188 - 1) < 0)
        operator delete(*(v188 - 3));
      v188 -= 3;
    }
    while (v188 != v187);
    v339[1] = v187;
    operator delete(v339[0]);
    if ((SHIBYTE(v338) & 0x80000000) == 0)
      goto LABEL_568;
    goto LABEL_219;
  }
  v339[1] = v187;
  operator delete(v187);
  if (SHIBYTE(v338) < 0)
    goto LABEL_219;
LABEL_568:
  if (SHIBYTE(v336) < 0)
    goto LABEL_220;
LABEL_569:
  if (SHIBYTE(v571) < 0)
    goto LABEL_221;
LABEL_570:
  if (SHIBYTE(v569) < 0)
    goto LABEL_222;
LABEL_571:
  if (v327 < 0)
    goto LABEL_223;
LABEL_572:
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_224;
LABEL_573:
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_225;
LABEL_574:
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_226;
LABEL_575:
  if (v332 < 0)
    goto LABEL_227;
LABEL_576:
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_228;
LABEL_577:
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_229;
LABEL_578:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v340);
  v189 = (void **)v346[0];
  if (!v346[0])
    goto LABEL_230;
LABEL_579:
  v227 = (void **)v346[1];
  if (v346[1] != v189)
  {
    do
    {
      if (*((char *)v227 - 1) < 0)
        operator delete(*(v227 - 3));
      v227 -= 3;
    }
    while (v227 != v189);
    v346[1] = v189;
    operator delete(v346[0]);
    if ((SHIBYTE(v345) & 0x80000000) == 0)
      goto LABEL_231;
LABEL_581:
    operator delete((void *)v344);
    if ((SHIBYTE(v343) & 0x80000000) == 0)
      goto LABEL_232;
LABEL_582:
    operator delete((void *)v342);
    if (v577 < 0)
      goto LABEL_583;
LABEL_233:
    if ((SHIBYTE(v575) & 0x80000000) == 0)
      goto LABEL_234;
LABEL_584:
    operator delete((void *)v574);
    if (v573 < 0)
      goto LABEL_585;
LABEL_235:
    if ((SHIBYTE(v341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_236;
LABEL_586:
    operator delete(v341.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v347);
    v190 = (void **)v353[0];
    if (!v353[0])
      goto LABEL_587;
LABEL_237:
    v191 = (void **)v353[1];
    if (v353[1] == v190)
    {
      v353[1] = v190;
      operator delete(v190);
      if ((SHIBYTE(v352) & 0x80000000) == 0)
        goto LABEL_588;
    }
    else
    {
      do
      {
        if (*((char *)v191 - 1) < 0)
          operator delete(*(v191 - 3));
        v191 -= 3;
      }
      while (v191 != v190);
      v353[1] = v190;
      operator delete(v353[0]);
      if ((SHIBYTE(v352) & 0x80000000) == 0)
        goto LABEL_588;
    }
LABEL_239:
    operator delete((void *)v351);
    if ((SHIBYTE(v350) & 0x80000000) == 0)
      goto LABEL_589;
LABEL_240:
    operator delete((void *)v349);
    if ((v583 & 0x80000000) == 0)
      goto LABEL_590;
LABEL_241:
    operator delete(v582[0]);
    if ((SHIBYTE(v581) & 0x80000000) == 0)
      goto LABEL_591;
LABEL_242:
    operator delete((void *)v580);
    if ((v579 & 0x80000000) == 0)
      goto LABEL_592;
LABEL_243:
    operator delete(v578[0]);
    if ((SHIBYTE(v348.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_593;
LABEL_244:
    operator delete(v348.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v354);
    v192 = (void **)v360[0];
    if (v360[0])
      goto LABEL_594;
LABEL_245:
    if (SHIBYTE(v359) < 0)
      goto LABEL_596;
    goto LABEL_246;
  }
  v346[1] = v189;
  operator delete(v189);
  if (SHIBYTE(v345) < 0)
    goto LABEL_581;
LABEL_231:
  if (SHIBYTE(v343) < 0)
    goto LABEL_582;
LABEL_232:
  if ((v577 & 0x80000000) == 0)
    goto LABEL_233;
LABEL_583:
  operator delete(v576[0]);
  if (SHIBYTE(v575) < 0)
    goto LABEL_584;
LABEL_234:
  if ((v573 & 0x80000000) == 0)
    goto LABEL_235;
LABEL_585:
  operator delete(v572[0]);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_586;
LABEL_236:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v347);
  v190 = (void **)v353[0];
  if (v353[0])
    goto LABEL_237;
LABEL_587:
  if (SHIBYTE(v352) < 0)
    goto LABEL_239;
LABEL_588:
  if (SHIBYTE(v350) < 0)
    goto LABEL_240;
LABEL_589:
  if (v583 < 0)
    goto LABEL_241;
LABEL_590:
  if (SHIBYTE(v581) < 0)
    goto LABEL_242;
LABEL_591:
  if (v579 < 0)
    goto LABEL_243;
LABEL_592:
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_244;
LABEL_593:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v354);
  v192 = (void **)v360[0];
  if (!v360[0])
    goto LABEL_245;
LABEL_594:
  v228 = (void **)v360[1];
  if (v360[1] != v192)
  {
    do
    {
      if (*((char *)v228 - 1) < 0)
        operator delete(*(v228 - 3));
      v228 -= 3;
    }
    while (v228 != v192);
    v360[1] = v192;
    operator delete(v360[0]);
    if ((SHIBYTE(v359) & 0x80000000) == 0)
      goto LABEL_246;
LABEL_596:
    operator delete((void *)v358);
    if ((SHIBYTE(v357) & 0x80000000) == 0)
      goto LABEL_247;
LABEL_597:
    operator delete((void *)v356);
    if (v589 < 0)
      goto LABEL_598;
LABEL_248:
    if ((SHIBYTE(v587) & 0x80000000) == 0)
      goto LABEL_249;
LABEL_599:
    operator delete((void *)v586);
    if (v585 < 0)
      goto LABEL_600;
LABEL_250:
    if ((SHIBYTE(v355.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_251;
LABEL_601:
    operator delete(v355.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v361);
    v193 = (void **)v367[0];
    if (!v367[0])
      goto LABEL_602;
LABEL_252:
    v194 = (void **)v367[1];
    if (v367[1] == v193)
    {
      v367[1] = v193;
      operator delete(v193);
      if ((SHIBYTE(v366) & 0x80000000) == 0)
        goto LABEL_603;
    }
    else
    {
      do
      {
        if (*((char *)v194 - 1) < 0)
          operator delete(*(v194 - 3));
        v194 -= 3;
      }
      while (v194 != v193);
      v367[1] = v193;
      operator delete(v367[0]);
      if ((SHIBYTE(v366) & 0x80000000) == 0)
        goto LABEL_603;
    }
LABEL_254:
    operator delete((void *)v365);
    if ((SHIBYTE(v364) & 0x80000000) == 0)
      goto LABEL_604;
LABEL_255:
    operator delete((void *)v363);
    if ((v595 & 0x80000000) == 0)
      goto LABEL_605;
LABEL_256:
    operator delete(v594[0]);
    if ((SHIBYTE(v593) & 0x80000000) == 0)
      goto LABEL_606;
LABEL_257:
    operator delete((void *)v592);
    if ((v591 & 0x80000000) == 0)
      goto LABEL_607;
LABEL_258:
    operator delete(v590[0]);
    if ((SHIBYTE(v362.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_608;
LABEL_259:
    operator delete(v362.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v368);
    v195 = (void **)v374[0];
    if (v374[0])
      goto LABEL_609;
LABEL_260:
    if (SHIBYTE(v373) < 0)
      goto LABEL_611;
    goto LABEL_261;
  }
  v360[1] = v192;
  operator delete(v192);
  if (SHIBYTE(v359) < 0)
    goto LABEL_596;
LABEL_246:
  if (SHIBYTE(v357) < 0)
    goto LABEL_597;
LABEL_247:
  if ((v589 & 0x80000000) == 0)
    goto LABEL_248;
LABEL_598:
  operator delete(v588[0]);
  if (SHIBYTE(v587) < 0)
    goto LABEL_599;
LABEL_249:
  if ((v585 & 0x80000000) == 0)
    goto LABEL_250;
LABEL_600:
  operator delete(v584[0]);
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_601;
LABEL_251:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v361);
  v193 = (void **)v367[0];
  if (v367[0])
    goto LABEL_252;
LABEL_602:
  if (SHIBYTE(v366) < 0)
    goto LABEL_254;
LABEL_603:
  if (SHIBYTE(v364) < 0)
    goto LABEL_255;
LABEL_604:
  if (v595 < 0)
    goto LABEL_256;
LABEL_605:
  if (SHIBYTE(v593) < 0)
    goto LABEL_257;
LABEL_606:
  if (v591 < 0)
    goto LABEL_258;
LABEL_607:
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_259;
LABEL_608:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v368);
  v195 = (void **)v374[0];
  if (!v374[0])
    goto LABEL_260;
LABEL_609:
  v229 = (void **)v374[1];
  if (v374[1] != v195)
  {
    do
    {
      if (*((char *)v229 - 1) < 0)
        operator delete(*(v229 - 3));
      v229 -= 3;
    }
    while (v229 != v195);
    v374[1] = v195;
    operator delete(v374[0]);
    if ((SHIBYTE(v373) & 0x80000000) == 0)
      goto LABEL_261;
LABEL_611:
    operator delete((void *)v372);
    if ((SHIBYTE(v371) & 0x80000000) == 0)
      goto LABEL_262;
LABEL_612:
    operator delete((void *)v370);
    if (v603 < 0)
      goto LABEL_613;
LABEL_263:
    if ((v601 & 0x80000000) == 0)
      goto LABEL_264;
LABEL_614:
    operator delete(v600[0]);
    if (SHIBYTE(v599) < 0)
      goto LABEL_615;
LABEL_265:
    if ((v597 & 0x80000000) == 0)
      goto LABEL_266;
LABEL_616:
    operator delete(v596);
    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_617;
LABEL_267:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v375);
    v196 = (void **)v381[0];
    if (v381[0])
      goto LABEL_268;
LABEL_618:
    if ((SHIBYTE(v380) & 0x80000000) == 0)
      goto LABEL_619;
LABEL_270:
    operator delete((void *)v379);
    if ((SHIBYTE(v378) & 0x80000000) == 0)
      goto LABEL_620;
LABEL_271:
    operator delete((void *)v377);
    if ((v609 & 0x80000000) == 0)
      goto LABEL_621;
LABEL_272:
    operator delete(v608[0]);
    if ((SHIBYTE(v607) & 0x80000000) == 0)
      goto LABEL_622;
LABEL_273:
    operator delete((void *)v606);
    if ((v605 & 0x80000000) == 0)
      goto LABEL_623;
LABEL_274:
    operator delete(v604[0]);
    if ((SHIBYTE(v376.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_624;
LABEL_275:
    operator delete(v376.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v382);
    v198 = (void **)v388[0];
    if (v388[0])
      goto LABEL_625;
LABEL_276:
    if (SHIBYTE(v387) < 0)
      goto LABEL_627;
    goto LABEL_277;
  }
  v374[1] = v195;
  operator delete(v195);
  if (SHIBYTE(v373) < 0)
    goto LABEL_611;
LABEL_261:
  if (SHIBYTE(v371) < 0)
    goto LABEL_612;
LABEL_262:
  if ((v603 & 0x80000000) == 0)
    goto LABEL_263;
LABEL_613:
  operator delete(v602[0]);
  if (v601 < 0)
    goto LABEL_614;
LABEL_264:
  if ((SHIBYTE(v599) & 0x80000000) == 0)
    goto LABEL_265;
LABEL_615:
  operator delete((void *)v598);
  if (v597 < 0)
    goto LABEL_616;
LABEL_266:
  if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_267;
LABEL_617:
  operator delete(v369.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v375);
  v196 = (void **)v381[0];
  if (!v381[0])
    goto LABEL_618;
LABEL_268:
  v197 = (void **)v381[1];
  if (v381[1] != v196)
  {
    do
    {
      if (*((char *)v197 - 1) < 0)
        operator delete(*(v197 - 3));
      v197 -= 3;
    }
    while (v197 != v196);
    v381[1] = v196;
    operator delete(v381[0]);
    if ((SHIBYTE(v380) & 0x80000000) == 0)
      goto LABEL_619;
    goto LABEL_270;
  }
  v381[1] = v196;
  operator delete(v196);
  if (SHIBYTE(v380) < 0)
    goto LABEL_270;
LABEL_619:
  if (SHIBYTE(v378) < 0)
    goto LABEL_271;
LABEL_620:
  if (v609 < 0)
    goto LABEL_272;
LABEL_621:
  if (SHIBYTE(v607) < 0)
    goto LABEL_273;
LABEL_622:
  if (v605 < 0)
    goto LABEL_274;
LABEL_623:
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_275;
LABEL_624:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v382);
  v198 = (void **)v388[0];
  if (!v388[0])
    goto LABEL_276;
LABEL_625:
  v230 = (void **)v388[1];
  if (v388[1] != v198)
  {
    do
    {
      if (*((char *)v230 - 1) < 0)
        operator delete(*(v230 - 3));
      v230 -= 3;
    }
    while (v230 != v198);
    v388[1] = v198;
    operator delete(v388[0]);
    if ((SHIBYTE(v387) & 0x80000000) == 0)
      goto LABEL_277;
LABEL_627:
    operator delete((void *)v386);
    if ((SHIBYTE(v385) & 0x80000000) == 0)
      goto LABEL_278;
LABEL_628:
    operator delete((void *)v384);
    if (v615 < 0)
      goto LABEL_629;
LABEL_279:
    if ((SHIBYTE(v613) & 0x80000000) == 0)
      goto LABEL_280;
LABEL_630:
    operator delete((void *)v612);
    if (v611 < 0)
      goto LABEL_631;
LABEL_281:
    if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_282;
LABEL_632:
    operator delete(v383.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v389);
    v199 = (void **)v395[0];
    if (!v395[0])
      goto LABEL_633;
LABEL_283:
    v200 = (void **)v395[1];
    if (v395[1] == v199)
    {
      v395[1] = v199;
      operator delete(v199);
      if ((SHIBYTE(v394) & 0x80000000) == 0)
        goto LABEL_634;
    }
    else
    {
      do
      {
        if (*((char *)v200 - 1) < 0)
          operator delete(*(v200 - 3));
        v200 -= 3;
      }
      while (v200 != v199);
      v395[1] = v199;
      operator delete(v395[0]);
      if ((SHIBYTE(v394) & 0x80000000) == 0)
        goto LABEL_634;
    }
LABEL_285:
    operator delete((void *)v393);
    if ((SHIBYTE(v392) & 0x80000000) == 0)
      goto LABEL_635;
LABEL_286:
    operator delete((void *)v391);
    if ((v621 & 0x80000000) == 0)
      goto LABEL_636;
LABEL_287:
    operator delete(v620[0]);
    if ((SHIBYTE(v619) & 0x80000000) == 0)
      goto LABEL_637;
LABEL_288:
    operator delete((void *)v618);
    if ((v617 & 0x80000000) == 0)
      goto LABEL_638;
LABEL_289:
    operator delete(v616[0]);
    if ((SHIBYTE(v390.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_639;
LABEL_290:
    operator delete(v390.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v396);
    v201 = (void **)v402[0];
    if (v402[0])
      goto LABEL_640;
LABEL_291:
    if (SHIBYTE(v401) < 0)
      goto LABEL_642;
    goto LABEL_292;
  }
  v388[1] = v198;
  operator delete(v198);
  if (SHIBYTE(v387) < 0)
    goto LABEL_627;
LABEL_277:
  if (SHIBYTE(v385) < 0)
    goto LABEL_628;
LABEL_278:
  if ((v615 & 0x80000000) == 0)
    goto LABEL_279;
LABEL_629:
  operator delete(v614[0]);
  if (SHIBYTE(v613) < 0)
    goto LABEL_630;
LABEL_280:
  if ((v611 & 0x80000000) == 0)
    goto LABEL_281;
LABEL_631:
  operator delete(v610[0]);
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_632;
LABEL_282:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v389);
  v199 = (void **)v395[0];
  if (v395[0])
    goto LABEL_283;
LABEL_633:
  if (SHIBYTE(v394) < 0)
    goto LABEL_285;
LABEL_634:
  if (SHIBYTE(v392) < 0)
    goto LABEL_286;
LABEL_635:
  if (v621 < 0)
    goto LABEL_287;
LABEL_636:
  if (SHIBYTE(v619) < 0)
    goto LABEL_288;
LABEL_637:
  if (v617 < 0)
    goto LABEL_289;
LABEL_638:
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_290;
LABEL_639:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v396);
  v201 = (void **)v402[0];
  if (!v402[0])
    goto LABEL_291;
LABEL_640:
  v231 = (void **)v402[1];
  if (v402[1] != v201)
  {
    do
    {
      if (*((char *)v231 - 1) < 0)
        operator delete(*(v231 - 3));
      v231 -= 3;
    }
    while (v231 != v201);
    v402[1] = v201;
    operator delete(v402[0]);
    if ((SHIBYTE(v401) & 0x80000000) == 0)
      goto LABEL_292;
LABEL_642:
    operator delete((void *)v400);
    if ((SHIBYTE(v399) & 0x80000000) == 0)
      goto LABEL_293;
LABEL_643:
    operator delete((void *)v398);
    if (v627 < 0)
      goto LABEL_644;
LABEL_294:
    if ((SHIBYTE(v625) & 0x80000000) == 0)
      goto LABEL_295;
LABEL_645:
    operator delete((void *)v624);
    if (v623 < 0)
      goto LABEL_646;
LABEL_296:
    if ((SHIBYTE(v397.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_297;
LABEL_647:
    operator delete(v397.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v403);
    v202 = (void **)v409[0];
    if (!v409[0])
      goto LABEL_648;
LABEL_298:
    v203 = (void **)v409[1];
    if (v409[1] == v202)
    {
      v409[1] = v202;
      operator delete(v202);
      if ((SHIBYTE(v408) & 0x80000000) == 0)
        goto LABEL_649;
    }
    else
    {
      do
      {
        if (*((char *)v203 - 1) < 0)
          operator delete(*(v203 - 3));
        v203 -= 3;
      }
      while (v203 != v202);
      v409[1] = v202;
      operator delete(v409[0]);
      if ((SHIBYTE(v408) & 0x80000000) == 0)
        goto LABEL_649;
    }
LABEL_300:
    operator delete((void *)v407);
    if ((SHIBYTE(v406) & 0x80000000) == 0)
      goto LABEL_650;
LABEL_301:
    operator delete((void *)v405);
    if ((v635 & 0x80000000) == 0)
      goto LABEL_651;
LABEL_302:
    operator delete(v634[0]);
    if ((v633 & 0x80000000) == 0)
      goto LABEL_652;
LABEL_303:
    operator delete(v632[0]);
    if ((SHIBYTE(v631) & 0x80000000) == 0)
      goto LABEL_653;
LABEL_304:
    operator delete((void *)v630);
    if ((v629 & 0x80000000) == 0)
      goto LABEL_654;
LABEL_305:
    operator delete(v628);
    if ((SHIBYTE(v404.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_655;
LABEL_306:
    operator delete(v404.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v410);
    v204 = (void **)v416[0];
    if (v416[0])
      goto LABEL_656;
LABEL_307:
    if (SHIBYTE(v415) < 0)
      goto LABEL_658;
    goto LABEL_308;
  }
  v402[1] = v201;
  operator delete(v201);
  if (SHIBYTE(v401) < 0)
    goto LABEL_642;
LABEL_292:
  if (SHIBYTE(v399) < 0)
    goto LABEL_643;
LABEL_293:
  if ((v627 & 0x80000000) == 0)
    goto LABEL_294;
LABEL_644:
  operator delete(v626[0]);
  if (SHIBYTE(v625) < 0)
    goto LABEL_645;
LABEL_295:
  if ((v623 & 0x80000000) == 0)
    goto LABEL_296;
LABEL_646:
  operator delete(v622[0]);
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_647;
LABEL_297:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v403);
  v202 = (void **)v409[0];
  if (v409[0])
    goto LABEL_298;
LABEL_648:
  if (SHIBYTE(v408) < 0)
    goto LABEL_300;
LABEL_649:
  if (SHIBYTE(v406) < 0)
    goto LABEL_301;
LABEL_650:
  if (v635 < 0)
    goto LABEL_302;
LABEL_651:
  if (v633 < 0)
    goto LABEL_303;
LABEL_652:
  if (SHIBYTE(v631) < 0)
    goto LABEL_304;
LABEL_653:
  if (v629 < 0)
    goto LABEL_305;
LABEL_654:
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_306;
LABEL_655:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v410);
  v204 = (void **)v416[0];
  if (!v416[0])
    goto LABEL_307;
LABEL_656:
  v232 = (void **)v416[1];
  if (v416[1] != v204)
  {
    do
    {
      if (*((char *)v232 - 1) < 0)
        operator delete(*(v232 - 3));
      v232 -= 3;
    }
    while (v232 != v204);
    v416[1] = v204;
    operator delete(v416[0]);
    if ((SHIBYTE(v415) & 0x80000000) == 0)
      goto LABEL_308;
LABEL_658:
    operator delete((void *)v414);
    if ((SHIBYTE(v413) & 0x80000000) == 0)
      goto LABEL_309;
LABEL_659:
    operator delete((void *)v412);
    if (v643 < 0)
      goto LABEL_660;
LABEL_310:
    if ((v641 & 0x80000000) == 0)
      goto LABEL_311;
LABEL_661:
    operator delete(v640[0]);
    if (SHIBYTE(v639) < 0)
      goto LABEL_662;
LABEL_312:
    if ((v637 & 0x80000000) == 0)
      goto LABEL_313;
LABEL_663:
    operator delete(v636);
    if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_664;
LABEL_314:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v417);
    v205 = (void **)v423[0];
    if (v423[0])
      goto LABEL_315;
LABEL_665:
    if ((SHIBYTE(v422) & 0x80000000) == 0)
      goto LABEL_666;
LABEL_317:
    operator delete((void *)v421);
    if ((SHIBYTE(v420) & 0x80000000) == 0)
      goto LABEL_667;
LABEL_318:
    operator delete((void *)v419);
    if ((v649 & 0x80000000) == 0)
      goto LABEL_668;
LABEL_319:
    operator delete(v648[0]);
    if ((SHIBYTE(v647) & 0x80000000) == 0)
      goto LABEL_669;
LABEL_320:
    operator delete((void *)v646);
    if ((v645 & 0x80000000) == 0)
      goto LABEL_670;
LABEL_321:
    operator delete(v644[0]);
    if ((SHIBYTE(v418.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_671;
LABEL_322:
    operator delete(v418.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v424);
    v207 = (void **)v430[0];
    if (v430[0])
      goto LABEL_672;
LABEL_323:
    if (SHIBYTE(v429) < 0)
      goto LABEL_674;
    goto LABEL_324;
  }
  v416[1] = v204;
  operator delete(v204);
  if (SHIBYTE(v415) < 0)
    goto LABEL_658;
LABEL_308:
  if (SHIBYTE(v413) < 0)
    goto LABEL_659;
LABEL_309:
  if ((v643 & 0x80000000) == 0)
    goto LABEL_310;
LABEL_660:
  operator delete(v642[0]);
  if (v641 < 0)
    goto LABEL_661;
LABEL_311:
  if ((SHIBYTE(v639) & 0x80000000) == 0)
    goto LABEL_312;
LABEL_662:
  operator delete((void *)v638);
  if (v637 < 0)
    goto LABEL_663;
LABEL_313:
  if ((SHIBYTE(v411.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_314;
LABEL_664:
  operator delete(v411.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v417);
  v205 = (void **)v423[0];
  if (!v423[0])
    goto LABEL_665;
LABEL_315:
  v206 = (void **)v423[1];
  if (v423[1] != v205)
  {
    do
    {
      if (*((char *)v206 - 1) < 0)
        operator delete(*(v206 - 3));
      v206 -= 3;
    }
    while (v206 != v205);
    v423[1] = v205;
    operator delete(v423[0]);
    if ((SHIBYTE(v422) & 0x80000000) == 0)
      goto LABEL_666;
    goto LABEL_317;
  }
  v423[1] = v205;
  operator delete(v205);
  if (SHIBYTE(v422) < 0)
    goto LABEL_317;
LABEL_666:
  if (SHIBYTE(v420) < 0)
    goto LABEL_318;
LABEL_667:
  if (v649 < 0)
    goto LABEL_319;
LABEL_668:
  if (SHIBYTE(v647) < 0)
    goto LABEL_320;
LABEL_669:
  if (v645 < 0)
    goto LABEL_321;
LABEL_670:
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_322;
LABEL_671:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v424);
  v207 = (void **)v430[0];
  if (!v430[0])
    goto LABEL_323;
LABEL_672:
  v233 = (void **)v430[1];
  if (v430[1] != v207)
  {
    do
    {
      if (*((char *)v233 - 1) < 0)
        operator delete(*(v233 - 3));
      v233 -= 3;
    }
    while (v233 != v207);
    v430[1] = v207;
    operator delete(v430[0]);
    if ((SHIBYTE(v429) & 0x80000000) == 0)
      goto LABEL_324;
LABEL_674:
    operator delete((void *)v428);
    if ((SHIBYTE(v427) & 0x80000000) == 0)
      goto LABEL_325;
LABEL_675:
    operator delete((void *)v426);
    if (v657 < 0)
      goto LABEL_676;
LABEL_326:
    if ((v655 & 0x80000000) == 0)
      goto LABEL_327;
LABEL_677:
    operator delete(v654[0]);
    if (SHIBYTE(v653) < 0)
      goto LABEL_678;
LABEL_328:
    if ((v651 & 0x80000000) == 0)
      goto LABEL_329;
LABEL_679:
    operator delete(v650);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_680;
LABEL_330:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v431);
    v208 = (void **)v437[0];
    if (v437[0])
      goto LABEL_331;
LABEL_681:
    if ((SHIBYTE(v436) & 0x80000000) == 0)
      goto LABEL_682;
LABEL_333:
    operator delete((void *)v435);
    if ((SHIBYTE(v434) & 0x80000000) == 0)
      goto LABEL_683;
LABEL_334:
    operator delete((void *)v433);
    if ((v665 & 0x80000000) == 0)
      goto LABEL_684;
LABEL_335:
    operator delete(v664[0]);
    if ((v663 & 0x80000000) == 0)
      goto LABEL_685;
LABEL_336:
    operator delete(v662[0]);
    if ((SHIBYTE(v661) & 0x80000000) == 0)
      goto LABEL_686;
LABEL_337:
    operator delete((void *)v660);
    if ((v659 & 0x80000000) == 0)
      goto LABEL_687;
LABEL_338:
    operator delete(v658);
    if ((SHIBYTE(v432.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_688;
LABEL_339:
    operator delete(v432.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v438);
    v210 = (void **)v444[0];
    if (v444[0])
      goto LABEL_689;
LABEL_340:
    if (SHIBYTE(v443) < 0)
      goto LABEL_691;
    goto LABEL_341;
  }
  v430[1] = v207;
  operator delete(v207);
  if (SHIBYTE(v429) < 0)
    goto LABEL_674;
LABEL_324:
  if (SHIBYTE(v427) < 0)
    goto LABEL_675;
LABEL_325:
  if ((v657 & 0x80000000) == 0)
    goto LABEL_326;
LABEL_676:
  operator delete(v656[0]);
  if (v655 < 0)
    goto LABEL_677;
LABEL_327:
  if ((SHIBYTE(v653) & 0x80000000) == 0)
    goto LABEL_328;
LABEL_678:
  operator delete((void *)v652);
  if (v651 < 0)
    goto LABEL_679;
LABEL_329:
  if ((SHIBYTE(v425.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_330;
LABEL_680:
  operator delete(v425.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v431);
  v208 = (void **)v437[0];
  if (!v437[0])
    goto LABEL_681;
LABEL_331:
  v209 = (void **)v437[1];
  if (v437[1] != v208)
  {
    do
    {
      if (*((char *)v209 - 1) < 0)
        operator delete(*(v209 - 3));
      v209 -= 3;
    }
    while (v209 != v208);
    v437[1] = v208;
    operator delete(v437[0]);
    if ((SHIBYTE(v436) & 0x80000000) == 0)
      goto LABEL_682;
    goto LABEL_333;
  }
  v437[1] = v208;
  operator delete(v208);
  if (SHIBYTE(v436) < 0)
    goto LABEL_333;
LABEL_682:
  if (SHIBYTE(v434) < 0)
    goto LABEL_334;
LABEL_683:
  if (v665 < 0)
    goto LABEL_335;
LABEL_684:
  if (v663 < 0)
    goto LABEL_336;
LABEL_685:
  if (SHIBYTE(v661) < 0)
    goto LABEL_337;
LABEL_686:
  if (v659 < 0)
    goto LABEL_338;
LABEL_687:
  if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_339;
LABEL_688:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v438);
  v210 = (void **)v444[0];
  if (!v444[0])
    goto LABEL_340;
LABEL_689:
  v234 = (void **)v444[1];
  if (v444[1] != v210)
  {
    do
    {
      if (*((char *)v234 - 1) < 0)
        operator delete(*(v234 - 3));
      v234 -= 3;
    }
    while (v234 != v210);
    v444[1] = v210;
    operator delete(v444[0]);
    if ((SHIBYTE(v443) & 0x80000000) == 0)
      goto LABEL_341;
LABEL_691:
    operator delete((void *)v442);
    if ((SHIBYTE(v441) & 0x80000000) == 0)
      goto LABEL_342;
LABEL_692:
    operator delete((void *)v440);
    if (v671 < 0)
      goto LABEL_693;
LABEL_343:
    if ((SHIBYTE(v669) & 0x80000000) == 0)
      goto LABEL_344;
LABEL_694:
    operator delete((void *)v668);
    if (v667 < 0)
      goto LABEL_695;
LABEL_345:
    if ((SHIBYTE(v439.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_346;
LABEL_696:
    operator delete(v439.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v445);
    v211 = (void **)v451[0];
    if (!v451[0])
      goto LABEL_697;
LABEL_347:
    v212 = (void **)v451[1];
    if (v451[1] == v211)
    {
      v451[1] = v211;
      operator delete(v211);
      if ((SHIBYTE(v450) & 0x80000000) == 0)
        goto LABEL_698;
    }
    else
    {
      do
      {
        if (*((char *)v212 - 1) < 0)
          operator delete(*(v212 - 3));
        v212 -= 3;
      }
      while (v212 != v211);
      v451[1] = v211;
      operator delete(v451[0]);
      if ((SHIBYTE(v450) & 0x80000000) == 0)
        goto LABEL_698;
    }
LABEL_349:
    operator delete((void *)v449);
    if ((SHIBYTE(v448) & 0x80000000) == 0)
      goto LABEL_699;
LABEL_350:
    operator delete((void *)v447);
    if ((v679 & 0x80000000) == 0)
      goto LABEL_700;
LABEL_351:
    operator delete(v678[0]);
    if ((v677 & 0x80000000) == 0)
      goto LABEL_701;
LABEL_352:
    operator delete(v676);
    if ((SHIBYTE(v675) & 0x80000000) == 0)
      goto LABEL_702;
LABEL_353:
    operator delete((void *)v674);
    if ((v673 & 0x80000000) == 0)
      goto LABEL_703;
LABEL_354:
    operator delete(v672[0]);
    if ((SHIBYTE(v446.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_704;
LABEL_355:
    operator delete(v446.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v452);
    v213 = (void **)v458[0];
    if (v458[0])
      goto LABEL_705;
LABEL_356:
    if (SHIBYTE(v457) < 0)
      goto LABEL_707;
    goto LABEL_357;
  }
  v444[1] = v210;
  operator delete(v210);
  if (SHIBYTE(v443) < 0)
    goto LABEL_691;
LABEL_341:
  if (SHIBYTE(v441) < 0)
    goto LABEL_692;
LABEL_342:
  if ((v671 & 0x80000000) == 0)
    goto LABEL_343;
LABEL_693:
  operator delete(v670[0]);
  if (SHIBYTE(v669) < 0)
    goto LABEL_694;
LABEL_344:
  if ((v667 & 0x80000000) == 0)
    goto LABEL_345;
LABEL_695:
  operator delete(v666);
  if (SHIBYTE(v439.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_696;
LABEL_346:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v445);
  v211 = (void **)v451[0];
  if (v451[0])
    goto LABEL_347;
LABEL_697:
  if (SHIBYTE(v450) < 0)
    goto LABEL_349;
LABEL_698:
  if (SHIBYTE(v448) < 0)
    goto LABEL_350;
LABEL_699:
  if (v679 < 0)
    goto LABEL_351;
LABEL_700:
  if (v677 < 0)
    goto LABEL_352;
LABEL_701:
  if (SHIBYTE(v675) < 0)
    goto LABEL_353;
LABEL_702:
  if (v673 < 0)
    goto LABEL_354;
LABEL_703:
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_355;
LABEL_704:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v452);
  v213 = (void **)v458[0];
  if (!v458[0])
    goto LABEL_356;
LABEL_705:
  v235 = (void **)v458[1];
  if (v458[1] != v213)
  {
    do
    {
      if (*((char *)v235 - 1) < 0)
        operator delete(*(v235 - 3));
      v235 -= 3;
    }
    while (v235 != v213);
    v458[1] = v213;
    operator delete(v458[0]);
    if ((SHIBYTE(v457) & 0x80000000) == 0)
      goto LABEL_357;
LABEL_707:
    operator delete((void *)v456);
    if ((SHIBYTE(v455) & 0x80000000) == 0)
      goto LABEL_358;
LABEL_708:
    operator delete((void *)v454);
    if (v687 < 0)
      goto LABEL_709;
LABEL_359:
    if ((v685 & 0x80000000) == 0)
      goto LABEL_360;
LABEL_710:
    operator delete(v684);
    if (SHIBYTE(v683) < 0)
      goto LABEL_711;
LABEL_361:
    if ((v681 & 0x80000000) == 0)
      goto LABEL_362;
LABEL_712:
    operator delete(v680[0]);
    if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_713;
LABEL_363:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v459);
    v214 = (void **)v465[0];
    if (v465[0])
      goto LABEL_364;
LABEL_714:
    if ((SHIBYTE(v464) & 0x80000000) == 0)
      goto LABEL_715;
LABEL_366:
    operator delete((void *)v463);
    if ((SHIBYTE(v462) & 0x80000000) == 0)
      goto LABEL_716;
LABEL_367:
    operator delete((void *)v461);
    if ((SHIBYTE(v691) & 0x80000000) == 0)
      goto LABEL_717;
LABEL_368:
    operator delete((void *)v690);
    if ((v689 & 0x80000000) == 0)
      goto LABEL_718;
LABEL_369:
    operator delete(v688);
    if ((SHIBYTE(v460.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_719;
LABEL_370:
    operator delete(v460.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v466);
    v216 = (void **)v472[0];
    if (v472[0])
      goto LABEL_720;
LABEL_371:
    if (SHIBYTE(v471) < 0)
      goto LABEL_722;
    goto LABEL_372;
  }
  v458[1] = v213;
  operator delete(v213);
  if (SHIBYTE(v457) < 0)
    goto LABEL_707;
LABEL_357:
  if (SHIBYTE(v455) < 0)
    goto LABEL_708;
LABEL_358:
  if ((v687 & 0x80000000) == 0)
    goto LABEL_359;
LABEL_709:
  operator delete(v686[0]);
  if (v685 < 0)
    goto LABEL_710;
LABEL_360:
  if ((SHIBYTE(v683) & 0x80000000) == 0)
    goto LABEL_361;
LABEL_711:
  operator delete((void *)v682);
  if (v681 < 0)
    goto LABEL_712;
LABEL_362:
  if ((SHIBYTE(v453.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_363;
LABEL_713:
  operator delete(v453.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v459);
  v214 = (void **)v465[0];
  if (!v465[0])
    goto LABEL_714;
LABEL_364:
  v215 = (void **)v465[1];
  if (v465[1] != v214)
  {
    do
    {
      if (*((char *)v215 - 1) < 0)
        operator delete(*(v215 - 3));
      v215 -= 3;
    }
    while (v215 != v214);
    v465[1] = v214;
    operator delete(v465[0]);
    if ((SHIBYTE(v464) & 0x80000000) == 0)
      goto LABEL_715;
    goto LABEL_366;
  }
  v465[1] = v214;
  operator delete(v214);
  if (SHIBYTE(v464) < 0)
    goto LABEL_366;
LABEL_715:
  if (SHIBYTE(v462) < 0)
    goto LABEL_367;
LABEL_716:
  if (SHIBYTE(v691) < 0)
    goto LABEL_368;
LABEL_717:
  if (v689 < 0)
    goto LABEL_369;
LABEL_718:
  if (SHIBYTE(v460.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_370;
LABEL_719:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v466);
  v216 = (void **)v472[0];
  if (!v472[0])
    goto LABEL_371;
LABEL_720:
  v236 = (void **)v472[1];
  if (v472[1] != v216)
  {
    do
    {
      if (*((char *)v236 - 1) < 0)
        operator delete(*(v236 - 3));
      v236 -= 3;
    }
    while (v236 != v216);
    v472[1] = v216;
    operator delete(v472[0]);
    if ((SHIBYTE(v471) & 0x80000000) == 0)
      goto LABEL_372;
LABEL_722:
    operator delete((void *)v470);
    if ((SHIBYTE(v469) & 0x80000000) == 0)
      goto LABEL_373;
LABEL_723:
    operator delete((void *)v468);
    if (SHIBYTE(v695) < 0)
      goto LABEL_724;
LABEL_374:
    if ((v693 & 0x80000000) == 0)
      goto LABEL_375;
LABEL_725:
    operator delete(v692[0]);
    if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_726;
LABEL_376:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v473);
    v217 = (void **)v478[0];
    if (v478[0])
      goto LABEL_377;
LABEL_727:
    if ((SHIBYTE(v477) & 0x80000000) == 0)
      goto LABEL_728;
LABEL_379:
    operator delete((void *)v476);
    if ((SHIBYTE(v475) & 0x80000000) == 0)
      goto LABEL_729;
LABEL_380:
    operator delete(v474[0]);
    if ((v697 & 0x80000000) == 0)
      goto LABEL_730;
LABEL_381:
    operator delete(v696);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v480);
    v219 = (void **)v485[0];
    if (v485[0])
      goto LABEL_731;
LABEL_382:
    if (SHIBYTE(v484) < 0)
      goto LABEL_733;
    goto LABEL_383;
  }
  v472[1] = v216;
  operator delete(v216);
  if (SHIBYTE(v471) < 0)
    goto LABEL_722;
LABEL_372:
  if (SHIBYTE(v469) < 0)
    goto LABEL_723;
LABEL_373:
  if ((SHIBYTE(v695) & 0x80000000) == 0)
    goto LABEL_374;
LABEL_724:
  operator delete((void *)v694);
  if (v693 < 0)
    goto LABEL_725;
LABEL_375:
  if ((SHIBYTE(v467.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_376;
LABEL_726:
  operator delete(v467.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v473);
  v217 = (void **)v478[0];
  if (!v478[0])
    goto LABEL_727;
LABEL_377:
  v218 = (void **)v478[1];
  if (v478[1] != v217)
  {
    do
    {
      if (*((char *)v218 - 1) < 0)
        operator delete(*(v218 - 3));
      v218 -= 3;
    }
    while (v218 != v217);
    v478[1] = v217;
    operator delete(v478[0]);
    if ((SHIBYTE(v477) & 0x80000000) == 0)
      goto LABEL_728;
    goto LABEL_379;
  }
  v478[1] = v217;
  operator delete(v217);
  if (SHIBYTE(v477) < 0)
    goto LABEL_379;
LABEL_728:
  if (SHIBYTE(v475) < 0)
    goto LABEL_380;
LABEL_729:
  if (v697 < 0)
    goto LABEL_381;
LABEL_730:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v480);
  v219 = (void **)v485[0];
  if (!v485[0])
    goto LABEL_382;
LABEL_731:
  v237 = (void **)v485[1];
  if (v485[1] != v219)
  {
    do
    {
      if (*((char *)v237 - 1) < 0)
        operator delete(*(v237 - 3));
      v237 -= 3;
    }
    while (v237 != v219);
    v485[1] = v219;
    operator delete(v485[0]);
    if ((SHIBYTE(v484) & 0x80000000) == 0)
      goto LABEL_383;
LABEL_733:
    operator delete((void *)v483);
    if ((SHIBYTE(v482) & 0x80000000) == 0)
      goto LABEL_384;
LABEL_734:
    operator delete((void *)v481);
    if (v699 < 0)
      goto LABEL_735;
LABEL_385:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v486);
    v220 = (void **)v491[0];
    if (v491[0])
      goto LABEL_386;
LABEL_736:
    if ((SHIBYTE(v490) & 0x80000000) == 0)
      goto LABEL_737;
LABEL_388:
    operator delete((void *)v489);
    if ((SHIBYTE(v488) & 0x80000000) == 0)
      goto LABEL_738;
LABEL_389:
    operator delete(v487[0]);
    if (v701 < 0)
      goto LABEL_390;
    goto LABEL_739;
  }
  v485[1] = v219;
  operator delete(v219);
  if (SHIBYTE(v484) < 0)
    goto LABEL_733;
LABEL_383:
  if (SHIBYTE(v482) < 0)
    goto LABEL_734;
LABEL_384:
  if ((v699 & 0x80000000) == 0)
    goto LABEL_385;
LABEL_735:
  operator delete(v698[0]);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v486);
  v220 = (void **)v491[0];
  if (!v491[0])
    goto LABEL_736;
LABEL_386:
  v221 = (void **)v491[1];
  if (v491[1] != v220)
  {
    do
    {
      if (*((char *)v221 - 1) < 0)
        operator delete(*(v221 - 3));
      v221 -= 3;
    }
    while (v221 != v220);
    v491[1] = v220;
    operator delete(v491[0]);
    if ((SHIBYTE(v490) & 0x80000000) == 0)
      goto LABEL_737;
    goto LABEL_388;
  }
  v491[1] = v220;
  operator delete(v220);
  if (SHIBYTE(v490) < 0)
    goto LABEL_388;
LABEL_737:
  if (SHIBYTE(v488) < 0)
    goto LABEL_389;
LABEL_738:
  if ((v701 & 0x80000000) == 0)
    goto LABEL_739;
LABEL_390:
  operator delete(v700[0]);
LABEL_739:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v493);
}

void sub_190F9B724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, E5RT::AsyncEventImpl *a10, E5RT::AsyncEventImpl *a11, uint64_t a12, E5RT::AsyncEventImpl *a13, E5RT::AsyncEventImpl *a14, uint64_t a15, uint64_t a16, unint64_t *a17, E5RT::AsyncEventImpl *a18, E5RT::AsyncEventImpl *a19, E5RT::AsyncEventImpl *a20,E5RT::AsyncEventImpl *a21,E5RT::AsyncEventImpl *a22,E5RT::AsyncEventImpl *a23,E5RT::AsyncEventImpl *a24,E5RT::AsyncEventImpl *a25,E5RT::AsyncEventImpl *a26,E5RT::AsyncEventImpl *a27,E5RT::AsyncEventImpl *a28,E5RT::AsyncEventImpl *a29,E5RT::AsyncEventImpl *a30,E5RT::AsyncEventImpl *a31,E5RT::AsyncEventImpl *a32,E5RT::AsyncEventImpl *a33,E5RT::AsyncEventImpl *a34,E5RT::AsyncEventImpl *a35,E5RT::AsyncEventImpl *a36,E5RT::AsyncEventImpl *a37,E5RT::AsyncEventImpl *a38,E5RT::AsyncEventImpl *a39,E5RT::AsyncEventImpl *a40,E5RT::AsyncEventImpl *a41,E5RT::AsyncEventImpl *a42,E5RT::AsyncEventImpl *a43,uint64_t a44,E5RT::AsyncEventImpl *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  char a70;
  void *a72;
  char a73;
  void *a74;
  E5RT::AsyncEventImpl *v74;

  if (SLOBYTE(STACK[0x115F]) < 0)
  {
    operator delete((void *)STACK[0x1148]);
    if ((SLOBYTE(STACK[0x1147]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x1147]) & 0x80000000) == 0)
  {
LABEL_3:
    if ((SLOBYTE(STACK[0x112F]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  operator delete((void *)STACK[0x1130]);
  if ((SLOBYTE(STACK[0x112F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (a54 < 0)
      operator delete(a49);
    if (a66 < 0)
      operator delete(a61);
    if (a60 < 0)
      operator delete(a55);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a70);
    Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&a74);
    if (SLOBYTE(STACK[0x11BF]) < 0)
    {
      operator delete((void *)STACK[0x11A8]);
      if ((SLOBYTE(STACK[0x11A7]) & 0x80000000) == 0)
        goto LABEL_16;
    }
    else if ((SLOBYTE(STACK[0x11A7]) & 0x80000000) == 0)
    {
LABEL_16:
      if (SLOBYTE(STACK[0x118F]) < 0)
        goto LABEL_17;
      goto LABEL_21;
    }
    operator delete((void *)STACK[0x1190]);
    if (SLOBYTE(STACK[0x118F]) < 0)
    {
LABEL_17:
      operator delete((void *)STACK[0x1178]);
      if ((SLOBYTE(STACK[0x1177]) & 0x80000000) == 0)
      {
LABEL_23:
        if (a73 < 0)
          operator delete(a72);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x210]);
        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x2D8]);
        if (SLOBYTE(STACK[0x1207]) < 0)
        {
          operator delete((void *)STACK[0x11F0]);
          if ((SLOBYTE(STACK[0x11EF]) & 0x80000000) == 0)
            goto LABEL_27;
        }
        else if ((SLOBYTE(STACK[0x11EF]) & 0x80000000) == 0)
        {
LABEL_27:
          if ((SLOBYTE(STACK[0x11D7]) & 0x80000000) == 0)
            goto LABEL_29;
          goto LABEL_28;
        }
        operator delete((void *)STACK[0x11D8]);
        if ((SLOBYTE(STACK[0x11D7]) & 0x80000000) == 0)
        {
LABEL_29:
          if (SLOBYTE(STACK[0x237]) < 0)
          {
            operator delete((void *)STACK[0x220]);
            if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
              goto LABEL_31;
          }
          else if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
          {
LABEL_31:
            if (SLOBYTE(STACK[0x267]) < 0)
              goto LABEL_32;
            goto LABEL_38;
          }
          operator delete((void *)STACK[0x270]);
          if (SLOBYTE(STACK[0x267]) < 0)
          {
LABEL_32:
            operator delete((void *)STACK[0x250]);
            if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
              goto LABEL_33;
            goto LABEL_39;
          }
LABEL_38:
          if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
          {
LABEL_33:
            if (SLOBYTE(STACK[0x2A7]) < 0)
              goto LABEL_34;
            goto LABEL_40;
          }
LABEL_39:
          operator delete((void *)STACK[0x238]);
          if (SLOBYTE(STACK[0x2A7]) < 0)
          {
LABEL_34:
            operator delete((void *)STACK[0x290]);
            if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
            {
LABEL_42:
              if (SLOBYTE(STACK[0x2BF]) < 0)
                operator delete((void *)STACK[0x2A8]);
              E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x320]);
              Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x348]);
              if (SLOBYTE(STACK[0x124F]) < 0)
              {
                operator delete((void *)STACK[0x1238]);
                if ((SLOBYTE(STACK[0x1237]) & 0x80000000) == 0)
                  goto LABEL_46;
              }
              else if ((SLOBYTE(STACK[0x1237]) & 0x80000000) == 0)
              {
LABEL_46:
                if ((SLOBYTE(STACK[0x121F]) & 0x80000000) == 0)
                  goto LABEL_48;
                goto LABEL_47;
              }
              operator delete((void *)STACK[0x1220]);
              if ((SLOBYTE(STACK[0x121F]) & 0x80000000) == 0)
              {
LABEL_48:
                if (SLOBYTE(STACK[0x347]) < 0)
                  operator delete((void *)STACK[0x330]);
                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x390]);
                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x3B8]);
                if (SLOBYTE(STACK[0x12AF]) < 0)
                {
                  operator delete((void *)STACK[0x1298]);
                  if ((SLOBYTE(STACK[0x1297]) & 0x80000000) == 0)
                    goto LABEL_58;
                }
                else if ((SLOBYTE(STACK[0x1297]) & 0x80000000) == 0)
                {
LABEL_58:
                  if (SLOBYTE(STACK[0x127F]) < 0)
                    goto LABEL_59;
                  goto LABEL_63;
                }
                operator delete((void *)STACK[0x1280]);
                if (SLOBYTE(STACK[0x127F]) < 0)
                {
LABEL_59:
                  operator delete((void *)STACK[0x1268]);
                  if ((SLOBYTE(STACK[0x1267]) & 0x80000000) == 0)
                  {
LABEL_65:
                    if (SLOBYTE(STACK[0x3B7]) < 0)
                      operator delete((void *)STACK[0x3A0]);
                    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x400]);
                    Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x428]);
                    if (SLOBYTE(STACK[0x12F7]) < 0)
                    {
                      operator delete((void *)STACK[0x12E0]);
                      if ((SLOBYTE(STACK[0x12DF]) & 0x80000000) == 0)
                        goto LABEL_69;
                    }
                    else if ((SLOBYTE(STACK[0x12DF]) & 0x80000000) == 0)
                    {
LABEL_69:
                      if ((SLOBYTE(STACK[0x12C7]) & 0x80000000) == 0)
                        goto LABEL_71;
                      goto LABEL_70;
                    }
                    operator delete((void *)STACK[0x12C8]);
                    if ((SLOBYTE(STACK[0x12C7]) & 0x80000000) == 0)
                    {
LABEL_71:
                      if (SLOBYTE(STACK[0x427]) < 0)
                        operator delete((void *)STACK[0x410]);
                      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x470]);
                      Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x498]);
                      if (SLOBYTE(STACK[0x133F]) < 0)
                      {
                        operator delete((void *)STACK[0x1328]);
                        if ((SLOBYTE(STACK[0x1327]) & 0x80000000) == 0)
                          goto LABEL_78;
                      }
                      else if ((SLOBYTE(STACK[0x1327]) & 0x80000000) == 0)
                      {
LABEL_78:
                        if ((SLOBYTE(STACK[0x130F]) & 0x80000000) == 0)
                          goto LABEL_80;
                        goto LABEL_79;
                      }
                      operator delete((void *)STACK[0x1310]);
                      if ((SLOBYTE(STACK[0x130F]) & 0x80000000) == 0)
                      {
LABEL_80:
                        if (SLOBYTE(STACK[0x497]) < 0)
                          operator delete((void *)STACK[0x480]);
                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x4E0]);
                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x508]);
                        if (SLOBYTE(STACK[0x1387]) < 0)
                        {
                          operator delete((void *)STACK[0x1370]);
                          if ((SLOBYTE(STACK[0x136F]) & 0x80000000) == 0)
                            goto LABEL_87;
                        }
                        else if ((SLOBYTE(STACK[0x136F]) & 0x80000000) == 0)
                        {
LABEL_87:
                          if ((SLOBYTE(STACK[0x1357]) & 0x80000000) == 0)
                            goto LABEL_89;
                          goto LABEL_88;
                        }
                        operator delete((void *)STACK[0x1358]);
                        if ((SLOBYTE(STACK[0x1357]) & 0x80000000) == 0)
                        {
LABEL_89:
                          if (SLOBYTE(STACK[0x507]) < 0)
                            operator delete((void *)STACK[0x4F0]);
                          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x550]);
                          Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x578]);
                          if (SLOBYTE(STACK[0x13E7]) < 0)
                          {
                            operator delete((void *)STACK[0x13D0]);
                            if ((SLOBYTE(STACK[0x13CF]) & 0x80000000) == 0)
                              goto LABEL_96;
                          }
                          else if ((SLOBYTE(STACK[0x13CF]) & 0x80000000) == 0)
                          {
LABEL_96:
                            if (SLOBYTE(STACK[0x13B7]) < 0)
                              goto LABEL_97;
                            goto LABEL_101;
                          }
                          operator delete((void *)STACK[0x13B8]);
                          if (SLOBYTE(STACK[0x13B7]) < 0)
                          {
LABEL_97:
                            operator delete((void *)STACK[0x13A0]);
                            if ((SLOBYTE(STACK[0x139F]) & 0x80000000) == 0)
                            {
LABEL_103:
                              if (SLOBYTE(STACK[0x577]) < 0)
                                operator delete((void *)STACK[0x560]);
                              E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x5C0]);
                              Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x5E8]);
                              if (SLOBYTE(STACK[0x142F]) < 0)
                              {
                                operator delete((void *)STACK[0x1418]);
                                if ((SLOBYTE(STACK[0x1417]) & 0x80000000) == 0)
                                  goto LABEL_107;
                              }
                              else if ((SLOBYTE(STACK[0x1417]) & 0x80000000) == 0)
                              {
LABEL_107:
                                if ((SLOBYTE(STACK[0x13FF]) & 0x80000000) == 0)
                                  goto LABEL_109;
                                goto LABEL_108;
                              }
                              operator delete((void *)STACK[0x1400]);
                              if ((SLOBYTE(STACK[0x13FF]) & 0x80000000) == 0)
                              {
LABEL_109:
                                if (SLOBYTE(STACK[0x5E7]) < 0)
                                  operator delete((void *)STACK[0x5D0]);
                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x630]);
                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x658]);
                                if (SLOBYTE(STACK[0x148F]) < 0)
                                {
                                  operator delete((void *)STACK[0x1478]);
                                  if ((SLOBYTE(STACK[0x1477]) & 0x80000000) == 0)
                                    goto LABEL_116;
                                }
                                else if ((SLOBYTE(STACK[0x1477]) & 0x80000000) == 0)
                                {
LABEL_116:
                                  if (SLOBYTE(STACK[0x145F]) < 0)
                                    goto LABEL_117;
                                  goto LABEL_121;
                                }
                                operator delete((void *)STACK[0x1460]);
                                if (SLOBYTE(STACK[0x145F]) < 0)
                                {
LABEL_117:
                                  operator delete((void *)STACK[0x1448]);
                                  if ((SLOBYTE(STACK[0x1447]) & 0x80000000) == 0)
                                  {
LABEL_123:
                                    if (SLOBYTE(STACK[0x657]) < 0)
                                      operator delete((void *)STACK[0x640]);
                                    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x6A0]);
                                    Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x768]);
                                    if (SLOBYTE(STACK[0x14BF]) < 0)
                                      operator delete((void *)STACK[0x14A8]);
                                    if (SLOBYTE(STACK[0x14A7]) < 0)
                                      operator delete((void *)STACK[0x1490]);
                                    if (SLOBYTE(STACK[0x6C7]) < 0)
                                    {
                                      operator delete((void *)STACK[0x6B0]);
                                      if ((SLOBYTE(STACK[0x717]) & 0x80000000) == 0)
                                        goto LABEL_131;
                                    }
                                    else if ((SLOBYTE(STACK[0x717]) & 0x80000000) == 0)
                                    {
LABEL_131:
                                      if (SLOBYTE(STACK[0x6F7]) < 0)
                                        goto LABEL_132;
                                      goto LABEL_138;
                                    }
                                    operator delete((void *)STACK[0x700]);
                                    if (SLOBYTE(STACK[0x6F7]) < 0)
                                    {
LABEL_132:
                                      operator delete((void *)STACK[0x6E0]);
                                      if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0)
                                        goto LABEL_133;
                                      goto LABEL_139;
                                    }
LABEL_138:
                                    if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0)
                                    {
LABEL_133:
                                      if (SLOBYTE(STACK[0x737]) < 0)
                                        goto LABEL_134;
                                      goto LABEL_140;
                                    }
LABEL_139:
                                    operator delete((void *)STACK[0x6C8]);
                                    if (SLOBYTE(STACK[0x737]) < 0)
                                    {
LABEL_134:
                                      operator delete((void *)STACK[0x720]);
                                      if ((SLOBYTE(STACK[0x767]) & 0x80000000) == 0)
                                      {
LABEL_142:
                                        if (SLOBYTE(STACK[0x74F]) < 0)
                                          operator delete((void *)STACK[0x738]);
                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x7B0]);
                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x7D8]);
                                        if (SLOBYTE(STACK[0x150F]) < 0)
                                        {
                                          operator delete((void *)STACK[0x14F8]);
                                          if ((SLOBYTE(STACK[0x14F7]) & 0x80000000) == 0)
                                            goto LABEL_146;
                                        }
                                        else if ((SLOBYTE(STACK[0x14F7]) & 0x80000000) == 0)
                                        {
LABEL_146:
                                          if ((SLOBYTE(STACK[0x14DF]) & 0x80000000) == 0)
                                            goto LABEL_148;
                                          goto LABEL_147;
                                        }
                                        operator delete((void *)STACK[0x14E0]);
                                        if ((SLOBYTE(STACK[0x14DF]) & 0x80000000) == 0)
                                        {
LABEL_148:
                                          if (SLOBYTE(STACK[0x7D7]) < 0)
                                            operator delete((void *)STACK[0x7C0]);
                                          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x820]);
                                          Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x848]);
                                          if (SLOBYTE(STACK[0x1557]) < 0)
                                          {
                                            operator delete((void *)STACK[0x1540]);
                                            if ((SLOBYTE(STACK[0x153F]) & 0x80000000) == 0)
                                              goto LABEL_155;
                                          }
                                          else if ((SLOBYTE(STACK[0x153F]) & 0x80000000) == 0)
                                          {
LABEL_155:
                                            if ((SLOBYTE(STACK[0x1527]) & 0x80000000) == 0)
                                              goto LABEL_157;
                                            goto LABEL_156;
                                          }
                                          operator delete((void *)STACK[0x1528]);
                                          if ((SLOBYTE(STACK[0x1527]) & 0x80000000) == 0)
                                          {
LABEL_157:
                                            if (SLOBYTE(STACK[0x847]) < 0)
                                              operator delete((void *)STACK[0x830]);
                                            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x890]);
                                            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x8B8]);
                                            if (SLOBYTE(STACK[0x159F]) < 0)
                                            {
                                              operator delete((void *)STACK[0x1588]);
                                              if ((SLOBYTE(STACK[0x1587]) & 0x80000000) == 0)
                                                goto LABEL_164;
                                            }
                                            else if ((SLOBYTE(STACK[0x1587]) & 0x80000000) == 0)
                                            {
LABEL_164:
                                              if ((SLOBYTE(STACK[0x156F]) & 0x80000000) == 0)
                                                goto LABEL_166;
                                              goto LABEL_165;
                                            }
                                            operator delete((void *)STACK[0x1570]);
                                            if ((SLOBYTE(STACK[0x156F]) & 0x80000000) == 0)
                                            {
LABEL_166:
                                              if (SLOBYTE(STACK[0x8B7]) < 0)
                                                operator delete((void *)STACK[0x8A0]);
                                              E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x900]);
                                              Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x928]);
                                              if (SLOBYTE(STACK[0x15E7]) < 0)
                                              {
                                                operator delete((void *)STACK[0x15D0]);
                                                if ((SLOBYTE(STACK[0x15CF]) & 0x80000000) == 0)
                                                  goto LABEL_173;
                                              }
                                              else if ((SLOBYTE(STACK[0x15CF]) & 0x80000000) == 0)
                                              {
LABEL_173:
                                                if ((SLOBYTE(STACK[0x15B7]) & 0x80000000) == 0)
                                                  goto LABEL_175;
                                                goto LABEL_174;
                                              }
                                              operator delete((void *)STACK[0x15B8]);
                                              if ((SLOBYTE(STACK[0x15B7]) & 0x80000000) == 0)
                                              {
LABEL_175:
                                                if (SLOBYTE(STACK[0x927]) < 0)
                                                  operator delete((void *)STACK[0x910]);
                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x970]);
                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x998]);
                                                if (SLOBYTE(STACK[0x1647]) < 0)
                                                {
                                                  operator delete((void *)STACK[0x1630]);
                                                  if ((SLOBYTE(STACK[0x162F]) & 0x80000000) == 0)
                                                    goto LABEL_182;
                                                }
                                                else if ((SLOBYTE(STACK[0x162F]) & 0x80000000) == 0)
                                                {
LABEL_182:
                                                  if (SLOBYTE(STACK[0x1617]) < 0)
                                                    goto LABEL_183;
                                                  goto LABEL_187;
                                                }
                                                operator delete((void *)STACK[0x1618]);
                                                if (SLOBYTE(STACK[0x1617]) < 0)
                                                {
LABEL_183:
                                                  operator delete((void *)STACK[0x1600]);
                                                  if ((SLOBYTE(STACK[0x15FF]) & 0x80000000) == 0)
                                                  {
LABEL_189:
                                                    if (SLOBYTE(STACK[0x997]) < 0)
                                                      operator delete((void *)STACK[0x980]);
                                                    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x9E0]);
                                                    Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xA08]);
                                                    if (SLOBYTE(STACK[0x168F]) < 0)
                                                    {
                                                      operator delete((void *)STACK[0x1678]);
                                                      if ((SLOBYTE(STACK[0x1677]) & 0x80000000) == 0)
                                                        goto LABEL_193;
                                                    }
                                                    else if ((SLOBYTE(STACK[0x1677]) & 0x80000000) == 0)
                                                    {
LABEL_193:
                                                      if ((SLOBYTE(STACK[0x165F]) & 0x80000000) == 0)
                                                        goto LABEL_195;
                                                      goto LABEL_194;
                                                    }
                                                    operator delete((void *)STACK[0x1660]);
                                                    if ((SLOBYTE(STACK[0x165F]) & 0x80000000) == 0)
                                                    {
LABEL_195:
                                                      if (SLOBYTE(STACK[0xA07]) < 0)
                                                        operator delete((void *)STACK[0x9F0]);
                                                      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xA50]);
                                                      Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xA78]);
                                                      if (SLOBYTE(STACK[0x16D7]) < 0)
                                                      {
                                                        operator delete((void *)STACK[0x16C0]);
                                                        if ((SLOBYTE(STACK[0x16BF]) & 0x80000000) == 0)
                                                          goto LABEL_202;
                                                      }
                                                      else if ((SLOBYTE(STACK[0x16BF]) & 0x80000000) == 0)
                                                      {
LABEL_202:
                                                        if ((SLOBYTE(STACK[0x16A7]) & 0x80000000) == 0)
                                                          goto LABEL_204;
                                                        goto LABEL_203;
                                                      }
                                                      operator delete((void *)STACK[0x16A8]);
                                                      if ((SLOBYTE(STACK[0x16A7]) & 0x80000000) == 0)
                                                      {
LABEL_204:
                                                        if (SLOBYTE(STACK[0xA77]) < 0)
                                                          operator delete((void *)STACK[0xA60]);
                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xAC0]);
                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xAE8]);
                                                        if (SLOBYTE(STACK[0x171F]) < 0)
                                                        {
                                                          operator delete((void *)STACK[0x1708]);
                                                          if ((SLOBYTE(STACK[0x1707]) & 0x80000000) == 0)
                                                            goto LABEL_211;
                                                        }
                                                        else if ((SLOBYTE(STACK[0x1707]) & 0x80000000) == 0)
                                                        {
LABEL_211:
                                                          if ((SLOBYTE(STACK[0x16EF]) & 0x80000000) == 0)
                                                            goto LABEL_213;
                                                          goto LABEL_212;
                                                        }
                                                        operator delete((void *)STACK[0x16F0]);
                                                        if ((SLOBYTE(STACK[0x16EF]) & 0x80000000) == 0)
                                                        {
LABEL_213:
                                                          if (SLOBYTE(STACK[0xAE7]) < 0)
                                                            operator delete((void *)STACK[0xAD0]);
                                                          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xB30]);
                                                          Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xB58]);
                                                          if (SLOBYTE(STACK[0x1767]) < 0)
                                                          {
                                                            operator delete((void *)STACK[0x1750]);
                                                            if ((SLOBYTE(STACK[0x174F]) & 0x80000000) == 0)
                                                              goto LABEL_220;
                                                          }
                                                          else if ((SLOBYTE(STACK[0x174F]) & 0x80000000) == 0)
                                                          {
LABEL_220:
                                                            if ((SLOBYTE(STACK[0x1737]) & 0x80000000) == 0)
                                                              goto LABEL_222;
                                                            goto LABEL_221;
                                                          }
                                                          operator delete((void *)STACK[0x1738]);
                                                          if ((SLOBYTE(STACK[0x1737]) & 0x80000000) == 0)
                                                          {
LABEL_222:
                                                            if (SLOBYTE(STACK[0xB57]) < 0)
                                                              operator delete((void *)STACK[0xB40]);
                                                            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xBA0]);
                                                            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xBC8]);
                                                            if (SLOBYTE(STACK[0x17C7]) < 0)
                                                            {
                                                              operator delete((void *)STACK[0x17B0]);
                                                              if ((SLOBYTE(STACK[0x17AF]) & 0x80000000) == 0)
                                                                goto LABEL_229;
                                                            }
                                                            else if ((SLOBYTE(STACK[0x17AF]) & 0x80000000) == 0)
                                                            {
LABEL_229:
                                                              if (SLOBYTE(STACK[0x1797]) < 0)
                                                                goto LABEL_230;
                                                              goto LABEL_234;
                                                            }
                                                            operator delete((void *)STACK[0x1798]);
                                                            if (SLOBYTE(STACK[0x1797]) < 0)
                                                            {
LABEL_230:
                                                              operator delete((void *)STACK[0x1780]);
                                                              if ((SLOBYTE(STACK[0x177F]) & 0x80000000) == 0)
                                                              {
LABEL_236:
                                                                if (SLOBYTE(STACK[0xBC7]) < 0)
                                                                  operator delete((void *)STACK[0xBB0]);
                                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xC10]);
                                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xC38]);
                                                                if (SLOBYTE(STACK[0x1827]) < 0)
                                                                {
                                                                  operator delete((void *)STACK[0x1810]);
                                                                  if ((SLOBYTE(STACK[0x180F]) & 0x80000000) == 0)
                                                                    goto LABEL_240;
                                                                }
                                                                else if ((SLOBYTE(STACK[0x180F]) & 0x80000000) == 0)
                                                                {
LABEL_240:
                                                                  if (SLOBYTE(STACK[0x17F7]) < 0)
                                                                    goto LABEL_241;
                                                                  goto LABEL_245;
                                                                }
                                                                operator delete((void *)STACK[0x17F8]);
                                                                if (SLOBYTE(STACK[0x17F7]) < 0)
                                                                {
LABEL_241:
                                                                  operator delete((void *)STACK[0x17E0]);
                                                                  if ((SLOBYTE(STACK[0x17DF]) & 0x80000000) == 0)
                                                                  {
LABEL_247:
                                                                    if (SLOBYTE(STACK[0xC37]) < 0)
                                                                      operator delete((void *)STACK[0xC20]);
                                                                    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xC80]);
                                                                    Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xCA8]);
                                                                    if (SLOBYTE(STACK[0x186F]) < 0)
                                                                    {
                                                                      operator delete((void *)STACK[0x1858]);
                                                                      if ((SLOBYTE(STACK[0x1857]) & 0x80000000) == 0)
                                                                        goto LABEL_251;
                                                                    }
                                                                    else if ((SLOBYTE(STACK[0x1857]) & 0x80000000) == 0)
                                                                    {
LABEL_251:
                                                                      if ((SLOBYTE(STACK[0x183F]) & 0x80000000) == 0)
                                                                        goto LABEL_253;
                                                                      goto LABEL_252;
                                                                    }
                                                                    operator delete((void *)STACK[0x1840]);
                                                                    if ((SLOBYTE(STACK[0x183F]) & 0x80000000) == 0)
                                                                    {
LABEL_253:
                                                                      if (SLOBYTE(STACK[0xCA7]) < 0)
                                                                        operator delete((void *)STACK[0xC90]);
                                                                      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xCF0]);
                                                                      Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xD18]);
                                                                      if (SLOBYTE(STACK[0x18CF]) < 0)
                                                                      {
                                                                        operator delete((void *)STACK[0x18B8]);
                                                                        if ((SLOBYTE(STACK[0x18B7]) & 0x80000000) == 0)
                                                                          goto LABEL_260;
                                                                      }
                                                                      else if ((SLOBYTE(STACK[0x18B7]) & 0x80000000) == 0)
                                                                      {
LABEL_260:
                                                                        if (SLOBYTE(STACK[0x189F]) < 0)
                                                                          goto LABEL_261;
                                                                        goto LABEL_265;
                                                                      }
                                                                      operator delete((void *)STACK[0x18A0]);
                                                                      if (SLOBYTE(STACK[0x189F]) < 0)
                                                                      {
LABEL_261:
                                                                        operator delete((void *)STACK[0x1888]);
                                                                        if ((SLOBYTE(STACK[0x1887]) & 0x80000000) == 0)
                                                                        {
LABEL_267:
                                                                          if (SLOBYTE(STACK[0xD17]) < 0)
                                                                            operator delete((void *)STACK[0xD00]);
                                                                          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xD60]);
                                                                          Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xD88]);
                                                                          if (SLOBYTE(STACK[0x192F]) < 0)
                                                                          {
                                                                            operator delete((void *)STACK[0x1918]);
                                                                            if ((SLOBYTE(STACK[0x1917]) & 0x80000000) == 0)
                                                                              goto LABEL_271;
                                                                          }
                                                                          else if ((SLOBYTE(STACK[0x1917]) & 0x80000000) == 0)
                                                                          {
LABEL_271:
                                                                            if (SLOBYTE(STACK[0x18FF]) < 0)
                                                                              goto LABEL_272;
                                                                            goto LABEL_276;
                                                                          }
                                                                          operator delete((void *)STACK[0x1900]);
                                                                          if (SLOBYTE(STACK[0x18FF]) < 0)
                                                                          {
LABEL_272:
                                                                            operator delete((void *)STACK[0x18E8]);
                                                                            if ((SLOBYTE(STACK[0x18E7]) & 0x80000000) == 0)
                                                                            {
LABEL_278:
                                                                              if (SLOBYTE(STACK[0xD87]) < 0)
                                                                                operator delete((void *)STACK[0xD70]);
                                                                              E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xDD0]);
                                                                              Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xDF8]);
                                                                              if (SLOBYTE(STACK[0x1977]) < 0)
                                                                              {
                                                                                operator delete((void *)STACK[0x1960]);
                                                                                if ((SLOBYTE(STACK[0x195F]) & 0x80000000) == 0)
                                                                                  goto LABEL_282;
                                                                              }
                                                                              else if ((SLOBYTE(STACK[0x195F]) & 0x80000000) == 0)
                                                                              {
LABEL_282:
                                                                                if ((SLOBYTE(STACK[0x1947]) & 0x80000000) == 0)
                                                                                  goto LABEL_284;
                                                                                goto LABEL_283;
                                                                              }
                                                                              operator delete((void *)STACK[0x1948]);
                                                                              if ((SLOBYTE(STACK[0x1947]) & 0x80000000) == 0)
                                                                              {
LABEL_284:
                                                                                if (SLOBYTE(STACK[0xDF7]) < 0)
                                                                                  operator delete((void *)STACK[0xDE0]);
                                                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xE40]);
                                                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xE68]);
                                                                                if (SLOBYTE(STACK[0x19D7]) < 0)
                                                                                {
                                                                                  operator delete((void *)STACK[0x19C0]);
                                                                                  if ((SLOBYTE(STACK[0x19BF]) & 0x80000000) == 0)
                                                                                    goto LABEL_291;
                                                                                }
                                                                                else if ((SLOBYTE(STACK[0x19BF]) & 0x80000000) == 0)
                                                                                {
LABEL_291:
                                                                                  if (SLOBYTE(STACK[0x19A7]) < 0)
                                                                                    goto LABEL_292;
                                                                                  goto LABEL_296;
                                                                                }
                                                                                operator delete((void *)STACK[0x19A8]);
                                                                                if (SLOBYTE(STACK[0x19A7]) < 0)
                                                                                {
LABEL_292:
                                                                                  operator delete((void *)STACK[0x1990]);
                                                                                  if ((SLOBYTE(STACK[0x198F]) & 0x80000000) == 0)
                                                                                  {
LABEL_298:
                                                                                    if (SLOBYTE(STACK[0xE67]) < 0)
                                                                                      operator delete((void *)STACK[0xE50]);
                                                                                    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xEB0]);
                                                                                    Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xED8]);
                                                                                    if (SLOBYTE(STACK[0x1A37]) < 0)
                                                                                    {
                                                                                      operator delete((void *)STACK[0x1A20]);
                                                                                      if ((SLOBYTE(STACK[0x1A1F]) & 0x80000000) == 0)
                                                                                        goto LABEL_302;
                                                                                    }
                                                                                    else if ((SLOBYTE(STACK[0x1A1F]) & 0x80000000) == 0)
                                                                                    {
LABEL_302:
                                                                                      if (SLOBYTE(STACK[0x1A07]) < 0)
                                                                                        goto LABEL_303;
                                                                                      goto LABEL_307;
                                                                                    }
                                                                                    operator delete((void *)STACK[0x1A08]);
                                                                                    if (SLOBYTE(STACK[0x1A07]) < 0)
                                                                                    {
LABEL_303:
                                                                                      operator delete((void *)STACK[0x19F0]);
                                                                                      if ((SLOBYTE(STACK[0x19EF]) & 0x80000000) == 0)
                                                                                      {
LABEL_309:
                                                                                        if (SLOBYTE(STACK[0xED7]) < 0)
                                                                                          operator delete((void *)STACK[0xEC0]);
                                                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xF20]);
                                                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xF48]);
                                                                                        if (SLOBYTE(STACK[0x1A67]) < 0)
                                                                                          operator delete((void *)STACK[0x1A50]);
                                                                                        if (SLOBYTE(STACK[0x1A4F]) < 0)
                                                                                          operator delete((void *)STACK[0x1A38]);
                                                                                        if (SLOBYTE(STACK[0xF47]) < 0)
                                                                                          operator delete((void *)STACK[0xF30]);
                                                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xF90]);
                                                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xFB8]);
                                                                                        v74 = (E5RT::AsyncEventImpl *)a17;
                                                                                        if (SLOBYTE(STACK[0x1A97]) < 0)
                                                                                          operator delete((void *)STACK[0x1A80]);
                                                                                        if (SLOBYTE(STACK[0x1A7F]) < 0)
                                                                                          operator delete((void *)STACK[0x1A68]);
                                                                                        if (SLOBYTE(STACK[0xFB7]) < 0)
                                                                                          operator delete((void *)STACK[0xFA0]);
                                                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x1000]);
                                                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x1010]);
                                                                                        if (SLOBYTE(STACK[0x1AAF]) < 0)
                                                                                          operator delete((void *)STACK[0x1A98]);
                                                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x1058]);
                                                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x1068]);
                                                                                        if (SLOBYTE(STACK[0x1AC7]) < 0)
                                                                                          operator delete((void *)STACK[0x1AB0]);
                                                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x10B0]);
                                                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x10C0]);
                                                                                        if (SLOBYTE(STACK[0x1ADF]) < 0)
                                                                                          operator delete((void *)STACK[0x1AC8]);
                                                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x1108]);
                                                                                        if (&STACK[0x1AE0] != a17)
                                                                                        {
                                                                                          do
                                                                                          {
                                                                                            v74 = (E5RT::AsyncEventImpl *)((char *)v74 - 88);
                                                                                            sub_190FA3B70(v74);
                                                                                          }
                                                                                          while (v74 != (E5RT::AsyncEventImpl *)&STACK[0x1AE0]);
                                                                                        }
                                                                                        _Unwind_Resume(a1);
                                                                                      }
LABEL_308:
                                                                                      operator delete((void *)STACK[0x19D8]);
                                                                                      goto LABEL_309;
                                                                                    }
LABEL_307:
                                                                                    if ((SLOBYTE(STACK[0x19EF]) & 0x80000000) == 0)
                                                                                      goto LABEL_309;
                                                                                    goto LABEL_308;
                                                                                  }
LABEL_297:
                                                                                  operator delete((void *)STACK[0x1978]);
                                                                                  goto LABEL_298;
                                                                                }
LABEL_296:
                                                                                if ((SLOBYTE(STACK[0x198F]) & 0x80000000) == 0)
                                                                                  goto LABEL_298;
                                                                                goto LABEL_297;
                                                                              }
LABEL_283:
                                                                              operator delete((void *)STACK[0x1930]);
                                                                              goto LABEL_284;
                                                                            }
LABEL_277:
                                                                            operator delete((void *)STACK[0x18D0]);
                                                                            goto LABEL_278;
                                                                          }
LABEL_276:
                                                                          if ((SLOBYTE(STACK[0x18E7]) & 0x80000000) == 0)
                                                                            goto LABEL_278;
                                                                          goto LABEL_277;
                                                                        }
LABEL_266:
                                                                        operator delete((void *)STACK[0x1870]);
                                                                        goto LABEL_267;
                                                                      }
LABEL_265:
                                                                      if ((SLOBYTE(STACK[0x1887]) & 0x80000000) == 0)
                                                                        goto LABEL_267;
                                                                      goto LABEL_266;
                                                                    }
LABEL_252:
                                                                    operator delete((void *)STACK[0x1828]);
                                                                    goto LABEL_253;
                                                                  }
LABEL_246:
                                                                  operator delete((void *)STACK[0x17C8]);
                                                                  goto LABEL_247;
                                                                }
LABEL_245:
                                                                if ((SLOBYTE(STACK[0x17DF]) & 0x80000000) == 0)
                                                                  goto LABEL_247;
                                                                goto LABEL_246;
                                                              }
LABEL_235:
                                                              operator delete((void *)STACK[0x1768]);
                                                              goto LABEL_236;
                                                            }
LABEL_234:
                                                            if ((SLOBYTE(STACK[0x177F]) & 0x80000000) == 0)
                                                              goto LABEL_236;
                                                            goto LABEL_235;
                                                          }
LABEL_221:
                                                          operator delete((void *)STACK[0x1720]);
                                                          goto LABEL_222;
                                                        }
LABEL_212:
                                                        operator delete((void *)STACK[0x16D8]);
                                                        goto LABEL_213;
                                                      }
LABEL_203:
                                                      operator delete((void *)STACK[0x1690]);
                                                      goto LABEL_204;
                                                    }
LABEL_194:
                                                    operator delete((void *)STACK[0x1648]);
                                                    goto LABEL_195;
                                                  }
LABEL_188:
                                                  operator delete((void *)STACK[0x15E8]);
                                                  goto LABEL_189;
                                                }
LABEL_187:
                                                if ((SLOBYTE(STACK[0x15FF]) & 0x80000000) == 0)
                                                  goto LABEL_189;
                                                goto LABEL_188;
                                              }
LABEL_174:
                                              operator delete((void *)STACK[0x15A0]);
                                              goto LABEL_175;
                                            }
LABEL_165:
                                            operator delete((void *)STACK[0x1558]);
                                            goto LABEL_166;
                                          }
LABEL_156:
                                          operator delete((void *)STACK[0x1510]);
                                          goto LABEL_157;
                                        }
LABEL_147:
                                        operator delete((void *)STACK[0x14C8]);
                                        goto LABEL_148;
                                      }
LABEL_141:
                                      operator delete((void *)STACK[0x750]);
                                      goto LABEL_142;
                                    }
LABEL_140:
                                    if ((SLOBYTE(STACK[0x767]) & 0x80000000) == 0)
                                      goto LABEL_142;
                                    goto LABEL_141;
                                  }
LABEL_122:
                                  operator delete((void *)STACK[0x1430]);
                                  goto LABEL_123;
                                }
LABEL_121:
                                if ((SLOBYTE(STACK[0x1447]) & 0x80000000) == 0)
                                  goto LABEL_123;
                                goto LABEL_122;
                              }
LABEL_108:
                              operator delete((void *)STACK[0x13E8]);
                              goto LABEL_109;
                            }
LABEL_102:
                            operator delete((void *)STACK[0x1388]);
                            goto LABEL_103;
                          }
LABEL_101:
                          if ((SLOBYTE(STACK[0x139F]) & 0x80000000) == 0)
                            goto LABEL_103;
                          goto LABEL_102;
                        }
LABEL_88:
                        operator delete((void *)STACK[0x1340]);
                        goto LABEL_89;
                      }
LABEL_79:
                      operator delete((void *)STACK[0x12F8]);
                      goto LABEL_80;
                    }
LABEL_70:
                    operator delete((void *)STACK[0x12B0]);
                    goto LABEL_71;
                  }
LABEL_64:
                  operator delete((void *)STACK[0x1250]);
                  goto LABEL_65;
                }
LABEL_63:
                if ((SLOBYTE(STACK[0x1267]) & 0x80000000) == 0)
                  goto LABEL_65;
                goto LABEL_64;
              }
LABEL_47:
              operator delete((void *)STACK[0x1208]);
              goto LABEL_48;
            }
LABEL_41:
            operator delete((void *)STACK[0x2C0]);
            goto LABEL_42;
          }
LABEL_40:
          if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_41;
        }
LABEL_28:
        operator delete((void *)STACK[0x11C0]);
        goto LABEL_29;
      }
LABEL_22:
      operator delete((void *)STACK[0x1160]);
      goto LABEL_23;
    }
LABEL_21:
    if ((SLOBYTE(STACK[0x1177]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_4:
  operator delete((void *)STACK[0x1118]);
  goto LABEL_5;
}

void sub_190F9EA28()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  float v11;
  float v12;
  _QWORD *v13;
  uint64_t *v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  _QWORD *i;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t *v38;
  _QWORD *v39[3];
  _QWORD *v40[3];
  uint64_t v41;
  _QWORD *v42;
  _QWORD **v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD **v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49[3];
  _QWORD *v50[3];
  uint64_t v51;
  _QWORD *v52;
  _QWORD **v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD **v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59[3];
  _QWORD *v60[3];
  uint64_t v61;
  _QWORD *v62;
  _QWORD **v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD **v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69[3];
  _QWORD *v70[3];
  uint64_t v71;
  _QWORD *v72;
  _QWORD **v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD **v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79[3];
  _QWORD *v80[3];
  uint64_t v81;
  _QWORD *v82;
  _QWORD **v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD **v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89[3];
  _QWORD *v90[3];
  uint64_t v91;
  _QWORD *v92;
  _QWORD **v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD **v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99[3];
  _QWORD *v100[3];
  uint64_t v101;
  _QWORD *v102;
  _QWORD **v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD **v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109[3];
  _QWORD *v110[3];
  uint64_t v111;
  _QWORD *v112;
  _QWORD **v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD **v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119[3];
  _QWORD *v120[3];
  uint64_t v121;
  _QWORD *v122;
  _QWORD **v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD **v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129[3];
  _QWORD *v130[3];
  uint64_t v131;
  _QWORD *v132;
  _QWORD **v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD **v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139[3];
  _QWORD *v140[3];
  uint64_t v141;
  _QWORD *v142;
  _QWORD **v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD **v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149[3];
  _QWORD *v150[3];
  uint64_t v151;
  _QWORD *v152;
  _QWORD **v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD **v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159[3];
  _QWORD *v160[3];
  uint64_t v161;
  _QWORD *v162;
  _QWORD **v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD **v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169[3];
  _QWORD *v170[3];
  uint64_t v171;
  _QWORD *v172;
  _QWORD **v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD **v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179[3];
  _QWORD *v180[3];
  uint64_t v181;
  _QWORD *v182;
  _QWORD **v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD **v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189[3];
  _QWORD *v190[3];
  uint64_t v191;
  _QWORD *v192;
  _QWORD **v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD **v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199[3];
  _QWORD *v200[3];
  uint64_t v201;
  _QWORD *v202;
  _QWORD **v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD **v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209[3];
  _QWORD *v210[3];
  uint64_t v211;
  _QWORD *v212;
  _QWORD **v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD **v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219[3];
  _QWORD *v220[3];
  uint64_t v221;
  _QWORD *v222;
  _QWORD **v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD **v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229[3];
  _QWORD *v230[3];
  uint64_t v231;
  _QWORD *v232;
  _QWORD **v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD **v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239[3];
  _QWORD *v240[3];
  uint64_t v241;
  _QWORD *v242;
  _QWORD **v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD **v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249[3];
  _QWORD *v250[3];
  uint64_t v251;
  _QWORD *v252;
  _QWORD **v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD **v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259[3];
  _QWORD *v260[3];
  uint64_t v261;
  uint64_t v262;
  _QWORD **v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD **v266;
  _QWORD *v267;
  _QWORD *v268;
  _OWORD v269[6];
  _OWORD v270[6];
  _OWORD v271[6];
  _OWORD v272[6];
  _OWORD v273[6];
  _OWORD v274[6];
  _OWORD v275[6];
  _OWORD v276[6];
  _OWORD v277[6];
  _OWORD v278[6];
  _OWORD v279[6];
  _OWORD v280[6];
  _OWORD v281[6];
  _OWORD v282[6];
  _OWORD v283[6];
  _OWORD v284[6];
  _OWORD v285[6];
  _OWORD v286[6];
  _OWORD v287[6];
  _OWORD v288[6];
  _OWORD v289[6];
  _OWORD v290[6];
  _OWORD v291[6];
  _OWORD v292[6];
  _OWORD v293[6];
  _OWORD v294[6];
  _OWORD v295[6];
  _OWORD v296[6];
  _OWORD v297[6];
  _OWORD v298[6];
  _OWORD v299[6];
  _OWORD v300[6];
  _OWORD v301[6];
  _OWORD v302[6];
  _OWORD v303[6];
  _OWORD v304[6];
  _OWORD v305[6];
  _OWORD v306[6];
  _OWORD v307[6];
  _OWORD v308[6];
  _OWORD v309[6];
  _OWORD v310[6];
  _OWORD v311[6];
  _OWORD v312[6];
  _OWORD v313[6];
  _OWORD v314[6];
  uint64_t v315;
  _QWORD **v316;
  _QWORD *v317[2];
  _QWORD **v318;
  _QWORD *v319[3];
  _QWORD **v320;
  _QWORD *v321[2];
  _QWORD **v322;
  _QWORD *v323[3];
  _QWORD **v324;
  _QWORD *v325[2];
  _QWORD **v326;
  _QWORD *v327[3];
  _QWORD **v328;
  _QWORD *v329[2];
  _QWORD **v330;
  _QWORD *v331[3];
  _QWORD **v332;
  _QWORD *v333[2];
  _QWORD **v334;
  _QWORD *v335[3];
  _QWORD **v336;
  _QWORD *v337[2];
  _QWORD **v338;
  _QWORD *v339[3];
  _QWORD **v340;
  _QWORD *v341[2];
  _QWORD **v342;
  _QWORD *v343[3];
  _QWORD **v344;
  _QWORD *v345[2];
  _QWORD **v346;
  _QWORD *v347[3];
  _QWORD **v348;
  _QWORD *v349[2];
  _QWORD **v350;
  _QWORD *v351[3];
  _QWORD **v352;
  _QWORD *v353[2];
  _QWORD **v354;
  _QWORD *v355[3];
  _QWORD **v356;
  _QWORD *v357[2];
  _QWORD **v358;
  _QWORD *v359[3];
  _QWORD **v360;
  _QWORD *v361[2];
  _QWORD **v362;
  _QWORD *v363[3];
  _QWORD **v364;
  _QWORD *v365[2];
  _QWORD **v366;
  _QWORD *v367[3];
  _QWORD **v368;
  _QWORD *v369[2];
  _QWORD **v370;
  _QWORD *v371[3];
  _QWORD **v372;
  _QWORD *v373[2];
  _QWORD **v374;
  _QWORD *v375[3];
  _QWORD **v376;
  _QWORD *v377[2];
  _QWORD **v378;
  _QWORD *v379[3];
  _QWORD **v380;
  _QWORD *v381[2];
  _QWORD **v382;
  _QWORD *v383[3];
  _QWORD **v384;
  _QWORD *v385[2];
  _QWORD **v386;
  _QWORD *v387[3];
  _QWORD **v388;
  _QWORD *v389[2];
  _QWORD **v390;
  _QWORD *v391[3];
  _QWORD **v392;
  _QWORD *v393[2];
  _QWORD **v394;
  _QWORD *v395[3];
  _QWORD **v396;
  _QWORD *v397[2];
  _QWORD **v398;
  _QWORD *v399[3];
  _QWORD **v400;
  _QWORD *v401[2];
  _QWORD **v402;
  _QWORD *v403[3];
  _QWORD **v404;
  _QWORD *v405[2];
  _QWORD **v406;
  _QWORD *v407[5];

  v0 = MEMORY[0x1E0C80A78]();
  v407[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v314[2] = xmmword_191A7FE20;
  v314[3] = unk_191A7FE30;
  v314[4] = xmmword_191A7FE40;
  v314[5] = unk_191A7FE50;
  v314[0] = xmmword_191A7FE00;
  v261 = 0;
  v314[1] = unk_191A7FE10;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v260, (unsigned int *)v314, 6);
  v313[2] = xmmword_191A7FE80;
  v313[3] = unk_191A7FE90;
  v313[4] = xmmword_191A7FEA0;
  v313[5] = unk_191A7FEB0;
  v313[0] = xmmword_191A7FE60;
  v313[1] = unk_191A7FE70;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v259, (unsigned int *)v313, 6);
  sub_190FA3CC8(&v262, &v261, (uint64_t)v260, (uint64_t)v259);
  v315 = v262;
  v316 = v263;
  v317[0] = v264;
  v317[1] = v265;
  if (v265)
  {
    v264[2] = v317;
    v263 = &v264;
    v264 = 0;
    v265 = 0;
  }
  else
  {
    v316 = v317;
  }
  v318 = v266;
  v319[0] = v267;
  v319[1] = v268;
  if (v268)
  {
    v267[2] = v319;
    v266 = &v267;
    v267 = 0;
    v268 = 0;
  }
  else
  {
    v318 = v319;
  }
  v312[2] = xmmword_191A7FEE0;
  v312[3] = unk_191A7FEF0;
  v312[4] = xmmword_191A7FF00;
  v312[5] = unk_191A7FF10;
  v312[0] = xmmword_191A7FEC0;
  v251 = 24576;
  v312[1] = unk_191A7FED0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v250, (unsigned int *)v312, 6);
  v311[2] = xmmword_191A80000;
  v311[3] = unk_191A80010;
  v311[4] = xmmword_191A80020;
  v311[5] = unk_191A80030;
  v311[0] = xmmword_191A7FFE0;
  v311[1] = unk_191A7FFF0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v249, (unsigned int *)v311, 6);
  sub_190FA3CC8((uint64_t *)&v252, &v251, (uint64_t)v250, (uint64_t)v249);
  v319[2] = v252;
  v320 = v253;
  v321[0] = v254;
  v321[1] = v255;
  if (v255)
  {
    v254[2] = v321;
    v253 = &v254;
    v254 = 0;
    v255 = 0;
  }
  else
  {
    v320 = v321;
  }
  v322 = v256;
  v323[0] = v257;
  v323[1] = v258;
  if (v258)
  {
    v257[2] = v323;
    v256 = &v257;
    v257 = 0;
    v258 = 0;
  }
  else
  {
    v322 = v323;
  }
  v310[2] = xmmword_191A7FF40;
  v310[3] = unk_191A7FF50;
  v310[4] = xmmword_191A7FF60;
  v310[5] = unk_191A7FF70;
  v310[0] = xmmword_191A7FF20;
  v241 = 24577;
  v310[1] = unk_191A7FF30;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v240, (unsigned int *)v310, 6);
  v309[2] = xmmword_191A80000;
  v309[3] = unk_191A80010;
  v309[4] = xmmword_191A80020;
  v309[5] = unk_191A80030;
  v309[0] = xmmword_191A7FFE0;
  v309[1] = unk_191A7FFF0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v239, (unsigned int *)v309, 6);
  sub_190FA3CC8((uint64_t *)&v242, &v241, (uint64_t)v240, (uint64_t)v239);
  v323[2] = v242;
  v324 = v243;
  v325[0] = v244;
  v325[1] = v245;
  if (v245)
  {
    v244[2] = v325;
    v243 = &v244;
    v244 = 0;
    v245 = 0;
  }
  else
  {
    v324 = v325;
  }
  v326 = v246;
  v327[0] = v247;
  v327[1] = v248;
  if (v248)
  {
    v247[2] = v327;
    v246 = &v247;
    v247 = 0;
    v248 = 0;
  }
  else
  {
    v326 = v327;
  }
  v308[2] = xmmword_191A7FFA0;
  v308[3] = unk_191A7FFB0;
  v308[4] = xmmword_191A7FFC0;
  v308[5] = unk_191A7FFD0;
  v308[0] = xmmword_191A7FF80;
  v231 = 24578;
  v308[1] = unk_191A7FF90;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v230, (unsigned int *)v308, 6);
  v307[2] = xmmword_191A80000;
  v307[3] = unk_191A80010;
  v307[4] = xmmword_191A80020;
  v307[5] = unk_191A80030;
  v307[0] = xmmword_191A7FFE0;
  v307[1] = unk_191A7FFF0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v229, (unsigned int *)v307, 6);
  sub_190FA3CC8((uint64_t *)&v232, &v231, (uint64_t)v230, (uint64_t)v229);
  v327[2] = v232;
  v328 = v233;
  v329[0] = v234;
  v329[1] = v235;
  if (v235)
  {
    v234[2] = v329;
    v233 = &v234;
    v234 = 0;
    v235 = 0;
  }
  else
  {
    v328 = v329;
  }
  v330 = v236;
  v331[0] = v237;
  v331[1] = v238;
  if (v238)
  {
    v237[2] = v331;
    v236 = &v237;
    v237 = 0;
    v238 = 0;
  }
  else
  {
    v330 = v331;
  }
  v306[2] = xmmword_191A80060;
  v306[3] = unk_191A80070;
  v306[4] = xmmword_191A80080;
  v306[5] = unk_191A80090;
  v306[0] = xmmword_191A80040;
  v221 = 24608;
  v306[1] = unk_191A80050;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v220, (unsigned int *)v306, 6);
  v305[2] = xmmword_191A805A0;
  v305[3] = unk_191A805B0;
  v305[4] = xmmword_191A805C0;
  v305[5] = unk_191A805D0;
  v305[0] = xmmword_191A80580;
  v305[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v219, (unsigned int *)v305, 6);
  sub_190FA3CC8((uint64_t *)&v222, &v221, (uint64_t)v220, (uint64_t)v219);
  v331[2] = v222;
  v332 = v223;
  v333[0] = v224;
  v333[1] = v225;
  if (v225)
  {
    v224[2] = v333;
    v223 = &v224;
    v224 = 0;
    v225 = 0;
  }
  else
  {
    v332 = v333;
  }
  v334 = v226;
  v335[0] = v227;
  v335[1] = v228;
  if (v228)
  {
    v227[2] = v335;
    v226 = &v227;
    v227 = 0;
    v228 = 0;
  }
  else
  {
    v334 = v335;
  }
  v304[2] = xmmword_191A800C0;
  v304[3] = unk_191A800D0;
  v304[4] = xmmword_191A800E0;
  v304[5] = unk_191A800F0;
  v304[0] = xmmword_191A800A0;
  v211 = 24609;
  v304[1] = unk_191A800B0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v210, (unsigned int *)v304, 6);
  v303[2] = xmmword_191A805A0;
  v303[3] = unk_191A805B0;
  v303[4] = xmmword_191A805C0;
  v303[5] = unk_191A805D0;
  v303[0] = xmmword_191A80580;
  v303[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v209, (unsigned int *)v303, 6);
  sub_190FA3CC8((uint64_t *)&v212, &v211, (uint64_t)v210, (uint64_t)v209);
  v335[2] = v212;
  v336 = v213;
  v337[0] = v214;
  v337[1] = v215;
  if (v215)
  {
    v214[2] = v337;
    v213 = &v214;
    v214 = 0;
    v215 = 0;
  }
  else
  {
    v336 = v337;
  }
  v338 = v216;
  v339[0] = v217;
  v339[1] = v218;
  if (v218)
  {
    v217[2] = v339;
    v216 = &v217;
    v217 = 0;
    v218 = 0;
  }
  else
  {
    v338 = v339;
  }
  v302[2] = xmmword_191A80120;
  v302[3] = unk_191A80130;
  v302[4] = xmmword_191A80140;
  v302[5] = unk_191A80150;
  v302[0] = xmmword_191A80100;
  v201 = 24610;
  v302[1] = unk_191A80110;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v200, (unsigned int *)v302, 6);
  v301[2] = xmmword_191A805A0;
  v301[3] = unk_191A805B0;
  v301[4] = xmmword_191A805C0;
  v301[5] = unk_191A805D0;
  v301[0] = xmmword_191A80580;
  v301[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v199, (unsigned int *)v301, 6);
  sub_190FA3CC8((uint64_t *)&v202, &v201, (uint64_t)v200, (uint64_t)v199);
  v339[2] = v202;
  v340 = v203;
  v341[0] = v204;
  v341[1] = v205;
  if (v205)
  {
    v204[2] = v341;
    v203 = &v204;
    v204 = 0;
    v205 = 0;
  }
  else
  {
    v340 = v341;
  }
  v342 = v206;
  v343[0] = v207;
  v343[1] = v208;
  if (v208)
  {
    v207[2] = v343;
    v206 = &v207;
    v207 = 0;
    v208 = 0;
  }
  else
  {
    v342 = v343;
  }
  v191 = 24624;
  v300[2] = xmmword_191A80180;
  v300[3] = unk_191A80190;
  v300[4] = xmmword_191A801A0;
  v300[5] = unk_191A801B0;
  v300[0] = xmmword_191A80160;
  v300[1] = unk_191A80170;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v190, (unsigned int *)v300, 6);
  v299[2] = xmmword_191A805A0;
  v299[3] = unk_191A805B0;
  v299[4] = xmmword_191A805C0;
  v299[5] = unk_191A805D0;
  v299[0] = xmmword_191A80580;
  v299[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v189, (unsigned int *)v299, 6);
  sub_190FA3CC8((uint64_t *)&v192, &v191, (uint64_t)v190, (uint64_t)v189);
  v343[2] = v192;
  v344 = v193;
  v345[0] = v194;
  v345[1] = v195;
  if (v195)
  {
    v194[2] = v345;
    v193 = &v194;
    v194 = 0;
    v195 = 0;
  }
  else
  {
    v344 = v345;
  }
  v346 = v196;
  v347[0] = v197;
  v347[1] = v198;
  if (v198)
  {
    v197[2] = v347;
    v196 = &v197;
    v197 = 0;
    v198 = 0;
  }
  else
  {
    v346 = v347;
  }
  v181 = 24625;
  v298[2] = xmmword_191A801E0;
  v298[3] = unk_191A801F0;
  v298[4] = xmmword_191A80200;
  v298[5] = unk_191A80210;
  v298[0] = xmmword_191A801C0;
  v298[1] = unk_191A801D0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v180, (unsigned int *)v298, 6);
  v297[2] = xmmword_191A805A0;
  v297[3] = unk_191A805B0;
  v297[4] = xmmword_191A805C0;
  v297[5] = unk_191A805D0;
  v297[0] = xmmword_191A80580;
  v297[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v179, (unsigned int *)v297, 6);
  sub_190FA3CC8((uint64_t *)&v182, &v181, (uint64_t)v180, (uint64_t)v179);
  v347[2] = v182;
  v348 = v183;
  v349[0] = v184;
  v349[1] = v185;
  if (v185)
  {
    v184[2] = v349;
    v183 = &v184;
    v184 = 0;
    v185 = 0;
  }
  else
  {
    v348 = v349;
  }
  v350 = v186;
  v351[0] = v187;
  v351[1] = v188;
  if (v188)
  {
    v187[2] = v351;
    v186 = &v187;
    v187 = 0;
    v188 = 0;
  }
  else
  {
    v350 = v351;
  }
  v171 = 24626;
  v296[2] = xmmword_191A801E0;
  v296[3] = unk_191A801F0;
  v296[4] = xmmword_191A80200;
  v296[5] = unk_191A80210;
  v296[0] = xmmword_191A801C0;
  v296[1] = unk_191A801D0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v170, (unsigned int *)v296, 6);
  v295[2] = xmmword_191A805A0;
  v295[3] = unk_191A805B0;
  v295[4] = xmmword_191A805C0;
  v295[5] = unk_191A805D0;
  v295[0] = xmmword_191A80580;
  v295[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v169, (unsigned int *)v295, 6);
  sub_190FA3CC8((uint64_t *)&v172, &v171, (uint64_t)v170, (uint64_t)v169);
  v351[2] = v172;
  v352 = v173;
  v353[0] = v174;
  v353[1] = v175;
  if (v175)
  {
    v174[2] = v353;
    v173 = &v174;
    v174 = 0;
    v175 = 0;
  }
  else
  {
    v352 = v353;
  }
  v354 = v176;
  v355[0] = v177;
  v355[1] = v178;
  if (v178)
  {
    v177[2] = v355;
    v176 = &v177;
    v177 = 0;
    v178 = 0;
  }
  else
  {
    v354 = v355;
  }
  v161 = 24628;
  v294[2] = xmmword_191A801E0;
  v294[3] = unk_191A801F0;
  v294[4] = xmmword_191A80200;
  v294[5] = unk_191A80210;
  v294[0] = xmmword_191A801C0;
  v294[1] = unk_191A801D0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v160, (unsigned int *)v294, 6);
  v293[2] = xmmword_191A805A0;
  v293[3] = unk_191A805B0;
  v293[4] = xmmword_191A805C0;
  v293[5] = unk_191A805D0;
  v293[0] = xmmword_191A80580;
  v293[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v159, (unsigned int *)v293, 6);
  sub_190FA3CC8((uint64_t *)&v162, &v161, (uint64_t)v160, (uint64_t)v159);
  v355[2] = v162;
  v356 = v163;
  v357[0] = v164;
  v357[1] = v165;
  if (v165)
  {
    v164[2] = v357;
    v163 = &v164;
    v164 = 0;
    v165 = 0;
  }
  else
  {
    v356 = v357;
  }
  v358 = v166;
  v359[0] = v167;
  v359[1] = v168;
  if (v168)
  {
    v167[2] = v359;
    v166 = &v167;
    v167 = 0;
    v168 = 0;
  }
  else
  {
    v358 = v359;
  }
  v151 = 33074;
  v292[2] = xmmword_191A80540;
  v292[3] = unk_191A80550;
  v292[4] = xmmword_191A80560;
  v292[5] = unk_191A80570;
  v292[0] = xmmword_191A80520;
  v292[1] = unk_191A80530;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v150, (unsigned int *)v292, 6);
  v291[2] = xmmword_191A805A0;
  v291[3] = unk_191A805B0;
  v291[4] = xmmword_191A805C0;
  v291[5] = unk_191A805D0;
  v291[0] = xmmword_191A80580;
  v291[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v149, (unsigned int *)v291, 6);
  sub_190FA3CC8((uint64_t *)&v152, &v151, (uint64_t)v150, (uint64_t)v149);
  v359[2] = v152;
  v360 = v153;
  v361[0] = v154;
  v361[1] = v155;
  if (v155)
  {
    v154[2] = v361;
    v153 = &v154;
    v154 = 0;
    v155 = 0;
  }
  else
  {
    v360 = v361;
  }
  v362 = v156;
  v363[0] = v157;
  v363[1] = v158;
  if (v158)
  {
    v157[2] = v363;
    v156 = &v157;
    v157 = 0;
    v158 = 0;
  }
  else
  {
    v362 = v363;
  }
  v141 = 24640;
  v290[2] = xmmword_191A80180;
  v290[3] = unk_191A80190;
  v290[4] = xmmword_191A801A0;
  v290[5] = unk_191A801B0;
  v290[0] = xmmword_191A80160;
  v290[1] = unk_191A80170;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v140, (unsigned int *)v290, 6);
  v289[2] = xmmword_191A805A0;
  v289[3] = unk_191A805B0;
  v289[4] = xmmword_191A805C0;
  v289[5] = unk_191A805D0;
  v289[0] = xmmword_191A80580;
  v289[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v139, (unsigned int *)v289, 6);
  sub_190FA3CC8((uint64_t *)&v142, &v141, (uint64_t)v140, (uint64_t)v139);
  v363[2] = v142;
  v364 = v143;
  v365[0] = v144;
  v365[1] = v145;
  if (v145)
  {
    v144[2] = v365;
    v143 = &v144;
    v144 = 0;
    v145 = 0;
  }
  else
  {
    v364 = v365;
  }
  v366 = v146;
  v367[0] = v147;
  v367[1] = v148;
  if (v148)
  {
    v147[2] = v367;
    v146 = &v147;
    v147 = 0;
    v148 = 0;
  }
  else
  {
    v366 = v367;
  }
  v131 = 24641;
  v288[2] = xmmword_191A801E0;
  v288[3] = unk_191A801F0;
  v288[4] = xmmword_191A80200;
  v288[5] = unk_191A80210;
  v288[0] = xmmword_191A801C0;
  v288[1] = unk_191A801D0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v130, (unsigned int *)v288, 6);
  v287[2] = xmmword_191A805A0;
  v287[3] = unk_191A805B0;
  v287[4] = xmmword_191A805C0;
  v287[5] = unk_191A805D0;
  v287[0] = xmmword_191A80580;
  v287[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v129, (unsigned int *)v287, 6);
  sub_190FA3CC8((uint64_t *)&v132, &v131, (uint64_t)v130, (uint64_t)v129);
  v367[2] = v132;
  v368 = v133;
  v369[0] = v134;
  v369[1] = v135;
  if (v135)
  {
    v134[2] = v369;
    v133 = &v134;
    v134 = 0;
    v135 = 0;
  }
  else
  {
    v368 = v369;
  }
  v370 = v136;
  v371[0] = v137;
  v371[1] = v138;
  if (v138)
  {
    v137[2] = v371;
    v136 = &v137;
    v137 = 0;
    v138 = 0;
  }
  else
  {
    v370 = v371;
  }
  v286[2] = xmmword_191A80240;
  v286[3] = unk_191A80250;
  v286[4] = xmmword_191A80260;
  v286[5] = unk_191A80270;
  v286[0] = xmmword_191A80220;
  v121 = 32816;
  v286[1] = unk_191A80230;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v120, (unsigned int *)v286, 6);
  v285[2] = xmmword_191A80300;
  v285[3] = unk_191A80310;
  v285[4] = xmmword_191A80320;
  v285[5] = unk_191A80330;
  v285[0] = xmmword_191A802E0;
  v285[1] = unk_191A802F0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v119, (unsigned int *)v285, 6);
  sub_190FA3CC8((uint64_t *)&v122, &v121, (uint64_t)v120, (uint64_t)v119);
  v371[2] = v122;
  v372 = v123;
  v373[0] = v124;
  v373[1] = v125;
  if (v125)
  {
    v124[2] = v373;
    v123 = &v124;
    v124 = 0;
    v125 = 0;
  }
  else
  {
    v372 = v373;
  }
  v374 = v126;
  v375[0] = v127;
  v375[1] = v128;
  if (v128)
  {
    v127[2] = v375;
    v126 = &v127;
    v127 = 0;
    v128 = 0;
  }
  else
  {
    v374 = v375;
  }
  v284[2] = xmmword_191A802A0;
  v284[3] = unk_191A802B0;
  v284[4] = xmmword_191A802C0;
  v284[5] = unk_191A802D0;
  v284[0] = xmmword_191A80280;
  v111 = 33025;
  v284[1] = unk_191A80290;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v110, (unsigned int *)v284, 6);
  v283[2] = xmmword_191A80300;
  v283[3] = unk_191A80310;
  v283[4] = xmmword_191A80320;
  v283[5] = unk_191A80330;
  v283[0] = xmmword_191A802E0;
  v283[1] = unk_191A802F0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v109, (unsigned int *)v283, 6);
  sub_190FA3CC8((uint64_t *)&v112, &v111, (uint64_t)v110, (uint64_t)v109);
  v375[2] = v112;
  v376 = v113;
  v377[0] = v114;
  v377[1] = v115;
  if (v115)
  {
    v114[2] = v377;
    v113 = &v114;
    v114 = 0;
    v115 = 0;
  }
  else
  {
    v376 = v377;
  }
  v378 = v116;
  v379[0] = v117;
  v379[1] = v118;
  if (v118)
  {
    v117[2] = v379;
    v116 = &v117;
    v117 = 0;
    v118 = 0;
  }
  else
  {
    v378 = v379;
  }
  v282[2] = xmmword_191A80360;
  v282[3] = unk_191A80370;
  v282[4] = xmmword_191A80380;
  v282[5] = unk_191A80390;
  v282[0] = xmmword_191A80340;
  v101 = 33027;
  v282[1] = unk_191A80350;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v100, (unsigned int *)v282, 6);
  v281[2] = xmmword_191A805A0;
  v281[3] = unk_191A805B0;
  v281[4] = xmmword_191A805C0;
  v281[5] = unk_191A805D0;
  v281[0] = xmmword_191A80580;
  v281[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v99, (unsigned int *)v281, 6);
  sub_190FA3CC8((uint64_t *)&v102, &v101, (uint64_t)v100, (uint64_t)v99);
  v379[2] = v102;
  v380 = v103;
  v381[0] = v104;
  v381[1] = v105;
  if (v105)
  {
    v104[2] = v381;
    v103 = &v104;
    v104 = 0;
    v105 = 0;
  }
  else
  {
    v380 = v381;
  }
  v382 = v106;
  v383[0] = v107;
  v383[1] = v108;
  if (v108)
  {
    v107[2] = v383;
    v106 = &v107;
    v107 = 0;
    v108 = 0;
  }
  else
  {
    v382 = v383;
  }
  v280[2] = xmmword_191A803C0;
  v280[3] = unk_191A803D0;
  v280[4] = xmmword_191A803E0;
  v280[5] = unk_191A803F0;
  v280[0] = xmmword_191A803A0;
  v91 = 33040;
  v280[1] = unk_191A803B0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v90, (unsigned int *)v280, 6);
  v279[2] = xmmword_191A80420;
  v279[3] = unk_191A80430;
  v279[4] = xmmword_191A80440;
  v279[5] = unk_191A80450;
  v279[0] = xmmword_191A80400;
  v279[1] = unk_191A80410;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v89, (unsigned int *)v279, 6);
  sub_190FA3CC8((uint64_t *)&v92, &v91, (uint64_t)v90, (uint64_t)v89);
  v383[2] = v92;
  v384 = v93;
  v385[0] = v94;
  v385[1] = v95;
  if (v95)
  {
    v94[2] = v385;
    v93 = &v94;
    v94 = 0;
    v95 = 0;
  }
  else
  {
    v384 = v385;
  }
  v386 = v96;
  v387[0] = v97;
  v387[1] = v98;
  if (v98)
  {
    v97[2] = v387;
    v96 = &v97;
    v97 = 0;
    v98 = 0;
  }
  else
  {
    v386 = v387;
  }
  v81 = 33042;
  v278[2] = xmmword_191A80480;
  v278[3] = unk_191A80490;
  v278[4] = xmmword_191A804A0;
  v278[5] = unk_191A804B0;
  v278[0] = xmmword_191A80460;
  v278[1] = unk_191A80470;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v80, (unsigned int *)v278, 6);
  v277[2] = xmmword_191A805A0;
  v277[3] = unk_191A805B0;
  v277[4] = xmmword_191A805C0;
  v277[5] = unk_191A805D0;
  v277[0] = xmmword_191A80580;
  v277[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v79, (unsigned int *)v277, 6);
  sub_190FA3CC8((uint64_t *)&v82, &v81, (uint64_t)v80, (uint64_t)v79);
  v387[2] = v82;
  v388 = v83;
  v389[0] = v84;
  v389[1] = v85;
  if (v85)
  {
    v84[2] = v389;
    v83 = &v84;
    v84 = 0;
    v85 = 0;
  }
  else
  {
    v388 = v389;
  }
  v390 = v86;
  v391[0] = v87;
  v391[1] = v88;
  if (v88)
  {
    v87[2] = v391;
    v86 = &v87;
    v87 = 0;
    v88 = 0;
  }
  else
  {
    v390 = v391;
  }
  v71 = 33056;
  v276[2] = xmmword_191A804E0;
  v276[3] = unk_191A804F0;
  v276[4] = xmmword_191A80500;
  v276[5] = unk_191A80510;
  v276[0] = xmmword_191A804C0;
  v276[1] = unk_191A804D0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v70, (unsigned int *)v276, 6);
  v275[2] = xmmword_191A80660;
  v275[3] = unk_191A80670;
  v275[4] = xmmword_191A80680;
  v275[5] = unk_191A80690;
  v275[0] = xmmword_191A80640;
  v275[1] = unk_191A80650;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v69, (unsigned int *)v275, 6);
  sub_190FA3CC8((uint64_t *)&v72, &v71, (uint64_t)v70, (uint64_t)v69);
  v391[2] = v72;
  v392 = v73;
  v393[0] = v74;
  v393[1] = v75;
  if (v75)
  {
    v74[2] = v393;
    v73 = &v74;
    v74 = 0;
    v75 = 0;
  }
  else
  {
    v392 = v393;
  }
  v394 = v76;
  v395[0] = v77;
  v395[1] = v78;
  if (v78)
  {
    v77[2] = v395;
    v76 = &v77;
    v77 = 0;
    v78 = 0;
  }
  else
  {
    v394 = v395;
  }
  v61 = 33058;
  v274[2] = xmmword_191A80540;
  v274[3] = unk_191A80550;
  v274[4] = xmmword_191A80560;
  v274[5] = unk_191A80570;
  v274[0] = xmmword_191A80520;
  v274[1] = unk_191A80530;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v60, (unsigned int *)v274, 6);
  v273[2] = xmmword_191A805A0;
  v273[3] = unk_191A805B0;
  v273[4] = xmmword_191A805C0;
  v273[5] = unk_191A805D0;
  v273[0] = xmmword_191A80580;
  v273[1] = unk_191A80590;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v59, (unsigned int *)v273, 6);
  sub_190FA3CC8((uint64_t *)&v62, &v61, (uint64_t)v60, (uint64_t)v59);
  v395[2] = v62;
  v396 = v63;
  v397[0] = v64;
  v397[1] = v65;
  if (v65)
  {
    v64[2] = v397;
    v63 = &v64;
    v64 = 0;
    v65 = 0;
  }
  else
  {
    v396 = v397;
  }
  v398 = v66;
  v399[0] = v67;
  v399[1] = v68;
  if (v68)
  {
    v67[2] = v399;
    v66 = &v67;
    v67 = 0;
    v68 = 0;
  }
  else
  {
    v398 = v399;
  }
  v51 = 33072;
  v272[2] = xmmword_191A80600;
  v272[3] = unk_191A80610;
  v272[4] = xmmword_191A80620;
  v272[5] = unk_191A80630;
  v272[0] = xmmword_191A805E0;
  v272[1] = unk_191A805F0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v50, (unsigned int *)v272, 6);
  v271[2] = xmmword_191A80660;
  v271[3] = unk_191A80670;
  v271[4] = xmmword_191A80680;
  v271[5] = unk_191A80690;
  v271[0] = xmmword_191A80640;
  v271[1] = unk_191A80650;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v49, (unsigned int *)v271, 6);
  sub_190FA3CC8((uint64_t *)&v52, &v51, (uint64_t)v50, (uint64_t)v49);
  v399[2] = v52;
  v400 = v53;
  v401[0] = v54;
  v401[1] = v55;
  if (v55)
  {
    v54[2] = v401;
    v53 = &v54;
    v54 = 0;
    v55 = 0;
  }
  else
  {
    v400 = v401;
  }
  v402 = v56;
  v403[0] = v57;
  v403[1] = v58;
  if (v58)
  {
    v57[2] = v403;
    v56 = &v57;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    v402 = v403;
  }
  v41 = 33088;
  v270[2] = xmmword_191A80600;
  v270[3] = unk_191A80610;
  v270[4] = xmmword_191A80620;
  v270[5] = unk_191A80630;
  v270[0] = xmmword_191A805E0;
  v270[1] = unk_191A805F0;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v40, (unsigned int *)v270, 6);
  v269[2] = xmmword_191A80660;
  v269[3] = unk_191A80670;
  v269[4] = xmmword_191A80680;
  v269[5] = unk_191A80690;
  v269[0] = xmmword_191A80640;
  v269[1] = unk_191A80650;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v39, (unsigned int *)v269, 6);
  v1 = (unint64_t)&v42;
  sub_190FA3CC8((uint64_t *)&v42, &v41, (uint64_t)v40, (uint64_t)v39);
  v403[2] = v42;
  v404 = v43;
  v405[0] = v44;
  v405[1] = v45;
  if (v45)
  {
    v44[2] = v405;
    v43 = &v44;
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v404 = v405;
  }
  v406 = v46;
  v407[0] = v47;
  v407[1] = v48;
  if (v48)
  {
    v47[2] = v407;
    v46 = &v47;
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v406 = v407;
  }
  v2 = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v38 = (uint64_t *)(v0 + 16);
  *(_OWORD *)v0 = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    v3 = *(&v315 + 7 * v2);
    v4 = *(_QWORD *)(v0 + 8);
    if (v4)
    {
      v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        v1 = *(&v315 + 7 * v2);
        if (v4 <= v3)
          v1 = v3 % v4;
      }
      else
      {
        v1 = (v4 - 1) & v3;
      }
      v6 = *(_QWORD **)(*(_QWORD *)v0 + 8 * v1);
      if (v6)
      {
        v7 = (_QWORD *)*v6;
        if (v7)
        {
          if (v5.u32[0] < 2uLL)
          {
            while (1)
            {
              v9 = v7[1];
              if (v9 == v3)
              {
                if (v7[2] == v3)
                  goto LABEL_233;
              }
              else if ((v9 & (v4 - 1)) != v1)
              {
                goto LABEL_160;
              }
              v7 = (_QWORD *)*v7;
              if (!v7)
                goto LABEL_160;
            }
          }
          do
          {
            v8 = v7[1];
            if (v8 == v3)
            {
              if (v7[2] == v3)
                goto LABEL_233;
            }
            else
            {
              if (v8 >= v4)
                v8 %= v4;
              if (v8 != v1)
                break;
            }
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
      }
    }
LABEL_160:
    v10 = (uint64_t *)operator new(0x48uLL);
    *v10 = 0;
    v10[1] = v3;
    v10[2] = v3;
    v10[4] = 0;
    v10[3] = (uint64_t)(v10 + 4);
    v10[5] = 0;
    std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(v10 + 3, (unsigned int *)*(&v315 + 7 * v2 + 1), (unsigned int *)&v317[7 * v2]);
    v10[7] = 0;
    v10[8] = 0;
    v10[6] = (uint64_t)(v10 + 7);
    std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(v10 + 6, (unsigned int *)v319[7 * v2 - 1], (unsigned int *)&v319[7 * v2]);
    v11 = (float)(unint64_t)(*(_QWORD *)(v0 + 24) + 1);
    v12 = *(float *)(v0 + 32);
    if (!v4 || (float)(v12 * (float)v4) < v11)
    {
      v15 = (v4 & (v4 - 1)) == 0;
      if (v4 < 3)
        v15 = 0;
      v16 = (2 * v4) | !v15;
      v17 = vcvtps_u32_f32(v11 / v12);
      if (v16 <= v17)
        prime = v17;
      else
        prime = v16;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v4 = *(_QWORD *)(v0 + 8);
      if (prime <= v4)
      {
        if (prime >= v4)
          goto LABEL_210;
        v29 = vcvtps_u32_f32((float)*(unint64_t *)(v0 + 24) / *(float *)(v0 + 32));
        if (v4 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
        {
          v29 = std::__next_prime(v29);
        }
        else
        {
          v31 = 1 << -(char)__clz(v29 - 1);
          if (v29 >= 2)
            v29 = v31;
        }
        if (prime <= v29)
          prime = v29;
        if (prime >= v4)
        {
          v4 = *(_QWORD *)(v0 + 8);
          v34 = v4 - 1;
          if ((v4 & (v4 - 1)) == 0)
            goto LABEL_211;
LABEL_223:
          if (v4 <= v3)
          {
            v1 = v3 % v4;
            v13 = *(_QWORD **)v0;
            v14 = *(uint64_t **)(*(_QWORD *)v0 + 8 * (v3 % v4));
            if (!v14)
              goto LABEL_212;
          }
          else
          {
            v1 = v3;
            v13 = *(_QWORD **)v0;
            v14 = *(uint64_t **)(*(_QWORD *)v0 + 8 * v3);
            if (!v14)
              goto LABEL_212;
          }
LABEL_163:
          *v10 = *v14;
LABEL_231:
          *v14 = (uint64_t)v10;
          goto LABEL_232;
        }
        if (!prime)
        {
          v33 = *(_QWORD **)v0;
          *(_QWORD *)v0 = 0;
          if (v33)
            operator delete(v33);
          v4 = 0;
          *(_QWORD *)(v0 + 8) = 0;
          v34 = -1;
          goto LABEL_211;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * prime);
      v20 = *(_QWORD **)v0;
      *(_QWORD *)v0 = v19;
      if (v20)
        operator delete(v20);
      v21 = 0;
      *(_QWORD *)(v0 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)v0 + 8 * v21++) = 0;
      while (prime != v21);
      v22 = (_QWORD *)*v38;
      if (!*v38)
      {
LABEL_222:
        v4 = prime;
        v34 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_223;
LABEL_211:
        v1 = v34 & v3;
        v13 = *(_QWORD **)v0;
        v14 = *(uint64_t **)(*(_QWORD *)v0 + 8 * (v34 & v3));
        if (!v14)
          goto LABEL_212;
        goto LABEL_163;
      }
      v23 = v22[1];
      v24 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v25 = v23 & v24;
        *(_QWORD *)(*(_QWORD *)v0 + 8 * v25) = v38;
        for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
        {
          v27 = i[1] & v24;
          if (v27 == v25)
          {
            v22 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)v0 + 8 * v27))
          {
            *v22 = *i;
            v28 = 8 * v27;
            *i = **(_QWORD **)(*(_QWORD *)v0 + v28);
            **(_QWORD **)(*(_QWORD *)v0 + v28) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v0 + 8 * v27) = v22;
            v22 = i;
            v25 = v27;
          }
        }
        goto LABEL_222;
      }
      if (v23 < prime)
      {
        *(_QWORD *)(*(_QWORD *)v0 + 8 * v23) = v38;
        v32 = (_QWORD *)*v22;
        if (*v22)
          goto LABEL_217;
        goto LABEL_209;
      }
      v23 %= prime;
      *(_QWORD *)(*(_QWORD *)v0 + 8 * v23) = v38;
      v32 = (_QWORD *)*v22;
      if (!*v22)
      {
LABEL_209:
        v4 = prime;
LABEL_210:
        v34 = v4 - 1;
        if ((v4 & (v4 - 1)) != 0)
          goto LABEL_223;
        goto LABEL_211;
      }
      while (1)
      {
LABEL_217:
        v37 = v32[1];
        if (v37 >= prime)
          v37 %= prime;
        if (v37 == v23)
          goto LABEL_216;
        if (*(_QWORD *)(*(_QWORD *)v0 + 8 * v37))
        {
          *v22 = *v32;
          v36 = 8 * v37;
          *v32 = **(_QWORD **)(*(_QWORD *)v0 + v36);
          **(_QWORD **)(*(_QWORD *)v0 + v36) = v32;
          v32 = v22;
LABEL_216:
          v22 = v32;
          v32 = (_QWORD *)*v32;
          if (!v32)
            goto LABEL_222;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v0 + 8 * v37) = v22;
          v22 = v32;
          v32 = (_QWORD *)*v32;
          v23 = v37;
          if (!v32)
            goto LABEL_222;
        }
      }
    }
    v13 = *(_QWORD **)v0;
    v14 = *(uint64_t **)(*(_QWORD *)v0 + 8 * v1);
    if (v14)
      goto LABEL_163;
LABEL_212:
    *v10 = *v38;
    *v38 = (uint64_t)v10;
    v13[v1] = v38;
    if (*v10)
    {
      v35 = *(_QWORD *)(*v10 + 8);
      if ((v4 & (v4 - 1)) != 0)
      {
        if (v35 >= v4)
          v35 %= v4;
      }
      else
      {
        v35 &= v4 - 1;
      }
      v14 = (uint64_t *)(*(_QWORD *)v0 + 8 * v35);
      goto LABEL_231;
    }
LABEL_232:
    ++*(_QWORD *)(v0 + 24);
LABEL_233:
    ++v2;
  }
  while (v2 != 23);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v406, v407[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v404, v405[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v402, v403[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v400, v401[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v398, v399[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v396, v397[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v394, v395[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v392, v393[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v390, v391[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v388, v389[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v386, v387[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v384, v385[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v382, v383[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v380, v381[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v378, v379[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v376, v377[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v374, v375[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v372, v373[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v370, v371[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v368, v369[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v366, v367[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v364, v365[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v362, v363[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v360, v361[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v358, v359[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v356, v357[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v354, v355[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v352, v353[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v350, v351[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v348, v349[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v346, v347[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v344, v345[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v342, v343[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v340, v341[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v338, v339[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v336, v337[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v334, v335[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v332, v333[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v330, v331[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v328, v329[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v326, v327[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v324, v325[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v322, v323[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v320, v321[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v318, v319[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v316, v317[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v46, v47);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v43, v44);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v39, v39[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v40, v40[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v56, v57);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v53, v54);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v49, v49[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v50, v50[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v66, v67);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v63, v64);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v59, v59[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v60, v60[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v76, v77);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v73, v74);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v69, v69[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v70, v70[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v86, v87);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v83, v84);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v79, v79[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v80, v80[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v96, v97);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v93, v94);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v89, v89[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v90, v90[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v106, v107);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v103, v104);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v99, v99[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v100, v100[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v116, v117);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v113, v114);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v109, v109[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v110, v110[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v126, v127);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v123, v124);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v119, v119[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v120, v120[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v136, v137);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v133, v134);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v129, v129[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v130, v130[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v146, v147);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v143, v144);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v139, v139[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v140, v140[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v156, v157);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v153, v154);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v149, v149[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v150, v150[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v166, v167);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v163, v164);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v159, v159[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v160, v160[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v176, v177);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v173, v174);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v169, v169[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v170, v170[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v186, v187);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v183, v184);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v179, v179[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v180, v180[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v196, v197);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v193, v194);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v189, v189[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v190, v190[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v206, v207);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v203, v204);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v199, v199[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v200, v200[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v216, v217);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v213, v214);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v209, v209[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v210, v210[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v226, v227);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v223, v224);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v219, v219[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v220, v220[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v236, v237);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v233, v234);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v229, v229[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v230, v230[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v246, v247);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v243, v244);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v239, v239[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v240, v240[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v256, v257);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v253, v254);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v249, v249[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v250, v250[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v266, v267);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v263, v264);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v259, v259[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v260, v260[1]);
}

void sub_190FA17EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t *a25)
{
  unint64_t *v26;

  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x458], (_QWORD *)STACK[0x460]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x478], (_QWORD *)STACK[0x480]);
  sub_190FA3E14((uint64_t)&STACK[0x518]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x4D8], (_QWORD *)STACK[0x4E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x4F8], (_QWORD *)STACK[0x500]);
  sub_190FA3E14((uint64_t)&STACK[0x598]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x558], (_QWORD *)STACK[0x560]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x578], (_QWORD *)STACK[0x580]);
  sub_190FA3E14((uint64_t)&STACK[0x618]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x5D8], (_QWORD *)STACK[0x5E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x5F8], (_QWORD *)STACK[0x600]);
  sub_190FA3E14((uint64_t)&STACK[0x698]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x658], (_QWORD *)STACK[0x660]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x678], (_QWORD *)STACK[0x680]);
  sub_190FA3E14((uint64_t)&STACK[0x718]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x6D8], (_QWORD *)STACK[0x6E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x6F8], (_QWORD *)STACK[0x700]);
  sub_190FA3E14((uint64_t)&STACK[0x798]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x758], (_QWORD *)STACK[0x760]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x778], (_QWORD *)STACK[0x780]);
  sub_190FA3E14((uint64_t)&STACK[0x818]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x7D8], (_QWORD *)STACK[0x7E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x7F8], (_QWORD *)STACK[0x800]);
  sub_190FA3E14((uint64_t)&STACK[0x898]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x858], (_QWORD *)STACK[0x860]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x878], (_QWORD *)STACK[0x880]);
  sub_190FA3E14((uint64_t)&STACK[0x918]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x8D8], (_QWORD *)STACK[0x8E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x8F8], (_QWORD *)STACK[0x900]);
  sub_190FA3E14((uint64_t)&STACK[0x998]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x958], (_QWORD *)STACK[0x960]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x978], (_QWORD *)STACK[0x980]);
  sub_190FA3E14((uint64_t)&STACK[0xA18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x9D8], (_QWORD *)STACK[0x9E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x9F8], (_QWORD *)STACK[0xA00]);
  sub_190FA3E14((uint64_t)&STACK[0xA98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xA58], (_QWORD *)STACK[0xA60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xA78], (_QWORD *)STACK[0xA80]);
  sub_190FA3E14((uint64_t)&STACK[0xB18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xAD8], (_QWORD *)STACK[0xAE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xAF8], (_QWORD *)STACK[0xB00]);
  sub_190FA3E14((uint64_t)&STACK[0xB98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xB58], (_QWORD *)STACK[0xB60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xB78], (_QWORD *)STACK[0xB80]);
  sub_190FA3E14((uint64_t)&STACK[0xC18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xBD8], (_QWORD *)STACK[0xBE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xBF8], (_QWORD *)STACK[0xC00]);
  sub_190FA3E14((uint64_t)&STACK[0xC98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xC58], (_QWORD *)STACK[0xC60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xC78], (_QWORD *)STACK[0xC80]);
  sub_190FA3E14((uint64_t)&STACK[0xD18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xCD8], (_QWORD *)STACK[0xCE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xCF8], (_QWORD *)STACK[0xD00]);
  sub_190FA3E14((uint64_t)&STACK[0xD98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xD58], (_QWORD *)STACK[0xD60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xD78], (_QWORD *)STACK[0xD80]);
  sub_190FA3E14((uint64_t)&STACK[0xE18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xDD8], (_QWORD *)STACK[0xDE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xDF8], (_QWORD *)STACK[0xE00]);
  sub_190FA3E14((uint64_t)&STACK[0xE98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xE58], (_QWORD *)STACK[0xE60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xE78], (_QWORD *)STACK[0xE80]);
  sub_190FA3E14((uint64_t)&STACK[0xF18]);
  v26 = a25;
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xED8], (_QWORD *)STACK[0xEE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xEF8], (_QWORD *)STACK[0xF00]);
  sub_190FA3E14((uint64_t)&STACK[0xF98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xF58], (_QWORD *)STACK[0xF60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xF78], (_QWORD *)STACK[0xF80]);
  if (&STACK[0x2110] != a25)
  {
    do
    {
      v26 -= 7;
      sub_190FA3E14((uint64_t)v26);
    }
    while (v26 != &STACK[0x2110]);
  }
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::~E5PlatformManagerImpl(E5PlatformManagerImpl *this)
{
  E5PlatformManagerImpl::~E5PlatformManagerImpl(this);
  JUMPOUT(0x19401CD90);
}

{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD **)*((_QWORD *)this + 8);
  if (v2)
  {
    do
    {
      v3 = *v2;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v2 + 6), v2[7]);
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      sub_190FA3B70((E5RT::AsyncEventImpl *)(v5 + 2));
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    operator delete(v7);
}

BOOL E5PlatformManagerImpl::IsSupported(uint64_t a1, uint64_t a2)
{
  return sub_190FA42D8((_QWORD *)(a1 + 8), a2) != 0;
}

uint64_t E5PlatformManagerImpl::CanonicalPlatformNameForId(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::runtime_error *exception;

  v2 = sub_190FA42D8((_QWORD *)(a1 + 8), a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid platform id");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return v2[10];
}

void sub_190FA2104(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *E5PlatformManagerImpl::PlatformNamesForId(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::runtime_error *exception;

  v2 = sub_190FA42D8((_QWORD *)(a1 + 8), a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid platform id");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return v2 + 10;
}

void sub_190FA2170(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 E5PlatformManagerImpl::PlatformIdForName@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  char v8;
  std::string::size_type size;
  unint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  std::string *p_s1;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  BOOL v21;
  __n128 result;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v25;
  std::string __s1;

  v5 = (__n128 *)(a1 + 24);
  do
  {
    do
    {
      v5 = (__n128 *)v5->n128_u64[0];
      if (!v5)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(exception, &__s1);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v6 = (unsigned __int8 *)v5[5].n128_u64[0];
      v7 = (unsigned __int8 *)v5[5].n128_u64[1];
    }
    while (v6 == v7);
    do
    {
      E5Common::StringUtils::ToLower(v6, (uint64_t)&__s1);
      E5Common::StringUtils::ToLower(a2, (uint64_t)__p);
      v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        size = __s1.__r_.__value_.__l.__size_;
      v10 = v25;
      v11 = (char)v25;
      if ((v25 & 0x80u) != 0)
        v10 = (unint64_t)__p[1];
      if (size != v10)
      {
        v21 = 0;
        if (((char)v25 & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_30;
      }
      if ((v25 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        v21 = memcmp(__s1.__r_.__value_.__l.__data_, v12, __s1.__r_.__value_.__l.__size_) == 0;
        goto LABEL_25;
      }
      if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          v16 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          v15 = v16;
          v18 = *(unsigned __int8 *)v12;
          v12 = (void **)((char *)v12 + 1);
          v17 = v18;
          v20 = v13-- != 0;
          v21 = v15 == v17;
        }
        while (v15 == v17 && v20);
LABEL_25:
        if ((v11 & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_30;
      }
      v21 = 1;
      if (((char)v25 & 0x80000000) == 0)
      {
LABEL_26:
        if ((v8 & 0x80) == 0)
          goto LABEL_27;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(__p[0]);
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_27:
        if (v21)
          goto LABEL_34;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(__s1.__r_.__value_.__l.__data_);
      if (v21)
        goto LABEL_34;
LABEL_32:
      v6 += 24;
    }
    while (v6 != v7);
    v6 = v7;
LABEL_34:
    ;
  }
  while (v6 == (unsigned __int8 *)v5[5].n128_u64[1]);
  result = v5[1];
  *a3 = result;
  return result;
}

void sub_190FA2348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

_QWORD *E5PlatformManagerImpl::PlatformIdsForFamilyName@<X0>(_QWORD *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *i;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  for (i = (unsigned __int8 *)result[3]; i; i = *(unsigned __int8 **)i)
  {
    if ((char)i[55] < 0)
    {
      if (*((_QWORD *)i + 5))
      {
LABEL_8:
        result = (_QWORD *)sub_190FA4410(i + 32, a2);
        if ((_DWORD)result)
          result = std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>(a3, (uint64_t)(i + 16), (_OWORD *)i + 1);
      }
    }
    else if (i[55])
    {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_190FA2428(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::ParsePlatformNames(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  void *v8;
  __n128 __p;
  char v10;
  void *v11;
  unsigned __int8 *v12;

  v10 = 1;
  __p.n128_u16[0] = 44;
  E5Common::StringUtils::Split(a2, (char *)&__p, (uint64_t)&v11);
  if (v10 < 0)
    operator delete((void *)__p.n128_u64[0]);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = (unsigned __int8 *)v11;
  v6 = v12;
  if (v11 != v12)
  {
    do
    {
      E5PlatformManagerImpl::PlatformIdForName(a1, v5, &__p);
      std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>(a3, (uint64_t)&__p, &__p);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__p);
      v5 += 24;
    }
    while (v5 != v6);
    v5 = (unsigned __int8 *)v11;
  }
  if (v5)
  {
    v7 = v12;
    v8 = v5;
    if (v12 != v5)
    {
      do
      {
        if ((char)*(v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 -= 24;
      }
      while (v7 != v5);
      v8 = v11;
    }
    v12 = v5;
    operator delete(v8);
  }
}

void sub_190FA2538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5PlatformManagerImpl::ParsePlatformFamilyNames(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  size_t v9;
  unint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  void **p_s1;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  _BOOL4 v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  unsigned __int8 *v26;
  void *v27;
  void *__p[2];
  __int128 v29;
  int v30;
  void *v31;
  unsigned __int8 *v32;
  void *v33[2];
  unsigned __int8 v34;
  void *__s1;
  size_t __n;
  unsigned __int8 v37;

  BYTE7(v29) = 1;
  LOWORD(__p[0]) = 44;
  E5Common::StringUtils::Split(a2, (char *)__p, (uint64_t)&v31);
  if (SBYTE7(v29) < 0)
    operator delete(__p[0]);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = (unsigned __int8 *)v31;
  v6 = v32;
  if (v31 == v32)
    goto LABEL_49;
  while (2)
  {
    *(_OWORD *)__p = 0u;
    v29 = 0u;
    v30 = 1065353216;
    v7 = *(unsigned __int8 **)(a1 + 24);
    if (!v7)
    {
      __p[0] = 0;
      goto LABEL_5;
    }
    do
    {
      if ((char)v7[55] < 0)
      {
        if (!*((_QWORD *)v7 + 5))
          goto LABEL_8;
LABEL_13:
        E5Common::StringUtils::ToLower(v7 + 32, (uint64_t)&__s1);
        E5Common::StringUtils::ToLower(v5, (uint64_t)v33);
        v8 = v37;
        if ((v37 & 0x80u) == 0)
          v9 = v37;
        else
          v9 = __n;
        v10 = v34;
        v11 = (char)v34;
        if ((v34 & 0x80u) != 0)
          v10 = (unint64_t)v33[1];
        if (v9 != v10)
        {
          v21 = 0;
          if (((char)v34 & 0x80000000) == 0)
            goto LABEL_35;
          goto LABEL_39;
        }
        if ((v34 & 0x80u) == 0)
          v12 = v33;
        else
          v12 = (void **)v33[0];
        if ((char)v37 < 0)
        {
          v21 = memcmp(__s1, v12, __n) == 0;
        }
        else
        {
          if (!v37)
          {
            v21 = 1;
            if (((char)v34 & 0x80000000) == 0)
            {
LABEL_35:
              if ((v8 & 0x80) == 0)
                goto LABEL_36;
              goto LABEL_40;
            }
LABEL_39:
            operator delete(v33[0]);
            if ((v37 & 0x80) == 0)
            {
LABEL_36:
              if (!v21)
                goto LABEL_8;
LABEL_41:
              std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>((uint64_t)__p, (uint64_t)(v7 + 16), (_OWORD *)v7 + 1);
              goto LABEL_8;
            }
LABEL_40:
            operator delete(__s1);
            if (!v21)
              goto LABEL_8;
            goto LABEL_41;
          }
          v13 = v37 - 1;
          p_s1 = &__s1;
          do
          {
            v16 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            v15 = v16;
            v18 = *(unsigned __int8 *)v12;
            v12 = (void **)((char *)v12 + 1);
            v17 = v18;
            v20 = v13-- != 0;
            v21 = v15 == v17;
          }
          while (v15 == v17 && v20);
        }
        if ((v11 & 0x80000000) == 0)
          goto LABEL_35;
        goto LABEL_39;
      }
      if (v7[55])
        goto LABEL_13;
LABEL_8:
      v7 = *(unsigned __int8 **)v7;
    }
    while (v7);
    v22 = (uint64_t *)v29;
    if ((_QWORD)v29)
    {
      do
      {
        std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>(a3, (uint64_t)(v22 + 2), (_OWORD *)v22 + 1);
        v22 = (uint64_t *)*v22;
      }
      while (v22);
      v23 = (_QWORD *)v29;
      if ((_QWORD)v29)
      {
        do
        {
          v24 = (_QWORD *)*v23;
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v23 + 2));
          operator delete(v23);
          v23 = v24;
        }
        while (v24);
      }
    }
    v25 = __p[0];
    __p[0] = 0;
    if (v25)
      operator delete(v25);
LABEL_5:
    v5 += 24;
    if (v5 != v6)
      continue;
    break;
  }
  v5 = (unsigned __int8 *)v31;
LABEL_49:
  if (v5)
  {
    v26 = v32;
    v27 = v5;
    if (v32 != v5)
    {
      do
      {
        if ((char)*(v26 - 1) < 0)
          operator delete(*((void **)v26 - 3));
        v26 -= 24;
      }
      while (v26 != v5);
      v27 = v31;
    }
    v32 = v5;
    operator delete(v27);
  }
}

void sub_190FA2800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5PlatformManagerImpl::GetSupportedPlatforms(E5PlatformManagerImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  char *v10;
  char **v11;
  BOOL v12;
  std::runtime_error *exception;
  char **v14;
  char *v15[2];
  const void **v16;

  v15[0] = 0;
  v15[1] = 0;
  v14 = v15;
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = (_QWORD *)((char *)this + 8);
    do
    {
      v5 = sub_190FA42D8(v4, (uint64_t)(v3 + 2));
      if (!v5)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid platform id");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v16 = (const void **)v5[10];
      v6 = std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v14, v16, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
      v7 = (uint64_t *)v3[2];
      *((_DWORD *)v6 + 16) = *((_DWORD *)v3 + 6);
      v6[7] = v7;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    v8 = (uint64_t *)v14;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    if (v8 != (uint64_t *)v15)
    {
      do
      {
        v9 = sub_190FA42D8(v4, (uint64_t)(v8 + 7));
        if (!v9)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)a2, *(_QWORD *)(a2 + 8), (std::string *)v9[10], (std::string *)v9[11], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[11] - v9[10]) >> 3));
        v10 = (char *)v8[1];
        if (v10)
        {
          do
          {
            v11 = (char **)v10;
            v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (char **)v8[2];
            v12 = *v11 == (char *)v8;
            v8 = (uint64_t *)v11;
          }
          while (!v12);
        }
        v8 = (uint64_t *)v11;
      }
      while (v11 != v15);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_190FA29DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_190FA29F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11)
{
  void *v11;

  __cxa_free_exception(v11);
  std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_190FA2A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  void **v11;

  std::vector<std::string>::~vector[abi:ne180100](v11);
  std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_190FA2A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::GetSupportedPlatformFamilies(E5PlatformManagerImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  std::string *v4;
  __int128 v5;
  char v6;
  std::string *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type size;
  uint64_t v12;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (v2)
  {
    v4 = 0;
    do
    {
      v6 = *((_BYTE *)v2 + 55);
      if (v6 < 0)
      {
        if (v2[5])
        {
LABEL_12:
          v7 = v4;
          if (*(std::string **)a2 != v4)
          {
            if (v6 >= 0)
              v8 = *((unsigned __int8 *)v2 + 55);
            else
              v8 = v2[5];
            if (v6 >= 0)
              v9 = (unsigned __int8 *)(v2 + 4);
            else
              v9 = (unsigned __int8 *)v2[4];
            v7 = *(std::string **)a2;
            while (1)
            {
              v10 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
              if ((v10 & 0x80u) == 0)
                size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
              else
                size = v7->__r_.__value_.__l.__size_;
              if (size == v8)
              {
                if ((v10 & 0x80) != 0)
                {
                  if (!memcmp(v7->__r_.__value_.__l.__data_, v9, v7->__r_.__value_.__l.__size_))
                    break;
                }
                else
                {
                  if (!*((_BYTE *)&v7->__r_.__value_.__s + 23))
                    break;
                  v12 = 0;
                  while (v7->__r_.__value_.__s.__data_[v12] == v9[v12])
                  {
                    if (v10 == ++v12)
                      goto LABEL_31;
                  }
                }
              }
              if (++v7 == v4)
                goto LABEL_32;
            }
          }
LABEL_31:
          if (v7 == v4)
          {
LABEL_32:
            if ((unint64_t)v4 < *(_QWORD *)(a2 + 16))
            {
              if (v6 < 0)
              {
                std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v2[4], v2[5]);
              }
              else
              {
                v5 = *((_OWORD *)v2 + 2);
                v4->__r_.__value_.__r.__words[2] = v2[6];
                *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
              }
              *(_QWORD *)(a2 + 8) = ++v4;
            }
            else
            {
              v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)(v2 + 4));
            }
            *(_QWORD *)(a2 + 8) = v4;
          }
        }
      }
      else if (*((_BYTE *)v2 + 55))
      {
        goto LABEL_12;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_190FA2BC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_190FA2BD8(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::GetSupportedPlatformIds(E5PlatformManagerImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  __int128 v4;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = (uint64_t *)*((_QWORD *)this + 3); i; i = (uint64_t *)*i)
  {
    v4 = *((_OWORD *)i + 1);
    std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier>(a2, (uint64_t)&v4, &v4);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v4);
  }
}

void sub_190FA2C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::GetCostModelIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  std::runtime_error *exception;

  v5 = (_QWORD *)(a1 + 8);
  if (!sub_190FA42D8((_QWORD *)(a1 + 8), a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid platform id");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = sub_190FA42D8(v5, a2);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((char *)v6 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v6[7], v6[8]);
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 7);
    a3->__r_.__value_.__r.__words[2] = v6[9];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_190FA2D24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double E5PlatformManagerImpl::GetMaxGFlops(uint64_t a1, unint64_t *a2, unsigned int *a3)
{
  unsigned int v3;
  int8x8_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  int8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *i;
  unsigned int v20;
  unint64_t v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD **v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  BOOL v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *j;
  unsigned int v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;

  v3 = *a3;
  if (*a3 == 7)
  {
    v13 = *(int8x8_t *)(a1 + 56);
    if (!*(_QWORD *)&v13)
      goto LABEL_169;
    v14 = **(_QWORD ***)(a1 + 48);
    if (!v14)
      goto LABEL_169;
    v15 = (_QWORD *)*v14;
    if (!v15)
      goto LABEL_169;
    v16 = (uint8x8_t)vcnt_s8(v13);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] < 2uLL)
    {
      v17 = *(_QWORD *)&v13 - 1;
      while (1)
      {
        v18 = v15[1];
        if (v18)
        {
          if ((v18 & v17) != 0)
            goto LABEL_169;
        }
        else if (!v15[2])
        {
          goto LABEL_34;
        }
        v15 = (_QWORD *)*v15;
        if (!v15)
          goto LABEL_169;
      }
    }
    while (1)
    {
      v21 = v15[1];
      if (v21)
      {
        if (v21 < *(_QWORD *)&v13 || v21 % *(_QWORD *)&v13)
          goto LABEL_169;
      }
      else if (!v15[2])
      {
LABEL_34:
        for (i = (uint64_t *)v15[4]; i; i = (uint64_t *)i[1])
        {
          while (1)
          {
            v20 = *((_DWORD *)i + 8);
            if (v20 < 4)
              break;
            i = (uint64_t *)*i;
            if (!i)
              goto LABEL_160;
          }
          if (v20 == 3)
            return *((double *)i + 5) * 0.5;
        }
        goto LABEL_160;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_169;
    }
  }
  if (v3 != 6)
  {
    v22 = *(int8x8_t *)(a1 + 56);
    if (!*(_QWORD *)&v22)
      goto LABEL_169;
    v23 = *a2;
    v24 = (uint8x8_t)vcnt_s8(v22);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = *a2;
      if (*(_QWORD *)&v22 <= v23)
        v25 = v23 % *(_QWORD *)&v22;
    }
    else
    {
      v25 = (*(_QWORD *)&v22 - 1) & v23;
    }
    v27 = *(_QWORD ***)(a1 + 48);
    v28 = v27[v25];
    if (!v28)
      goto LABEL_123;
    v29 = (_QWORD *)*v28;
    if (!*v28)
      goto LABEL_123;
    v30 = *(_QWORD *)&v22 - 1;
    if (v24.u32[0] < 2uLL)
    {
      while (1)
      {
        v31 = v29[1];
        if (v31 == v23)
        {
          if (v29[2] == v23)
            goto LABEL_70;
        }
        else if ((v31 & v30) != v25)
        {
          goto LABEL_123;
        }
        v29 = (_QWORD *)*v29;
        if (!v29)
          goto LABEL_123;
      }
    }
    while (1)
    {
      v32 = v29[1];
      if (v32 == v23)
      {
        if (v29[2] == v23)
        {
LABEL_70:
          if (v24.u32[0] > 1uLL)
          {
            v33 = *a2;
            if (*(_QWORD *)&v22 <= v23)
              v33 = v23 % *(_QWORD *)&v22;
          }
          else
          {
            v33 = v30 & v23;
          }
          v34 = v27[v33];
          if (!v34)
            goto LABEL_169;
          v35 = (_QWORD *)*v34;
          if (!v35)
            goto LABEL_169;
          if (v24.u32[0] < 2uLL)
          {
            while (1)
            {
              v36 = v35[1];
              if (v36 == v23)
              {
                if (v35[2] == v23)
                  goto LABEL_82;
              }
              else if ((v36 & v30) != v33)
              {
                goto LABEL_169;
              }
              v35 = (_QWORD *)*v35;
              if (!v35)
                goto LABEL_169;
            }
          }
          while (1)
          {
            v45 = v35[1];
            if (v45 == v23)
            {
              if (v35[2] == v23)
              {
LABEL_82:
                v39 = v35[4];
                v37 = v35 + 4;
                v38 = v39;
                if (!v39)
                  goto LABEL_93;
                v40 = v37;
                do
                {
                  v41 = *(_DWORD *)(v38 + 32);
                  v42 = v41 >= v3;
                  if (v41 >= v3)
                    v43 = (uint64_t *)v38;
                  else
                    v43 = (uint64_t *)(v38 + 8);
                  if (v42)
                    v40 = (_QWORD *)v38;
                  v38 = *v43;
                }
                while (*v43);
                if (v40 == v37 || v3 < *((_DWORD *)v40 + 8))
LABEL_93:
                  v40 = v37;
                if (v24.u32[0] > 1uLL)
                {
                  v44 = *a2;
                  if (*(_QWORD *)&v22 <= v23)
                    v44 = v23 % *(_QWORD *)&v22;
                }
                else
                {
                  v44 = v30 & v23;
                }
                v46 = v27[v44];
                if (!v46)
                  goto LABEL_169;
                v47 = (_QWORD *)*v46;
                if (!v47)
                  goto LABEL_169;
                if (v24.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v48 = v47[1];
                    if (v48 == v23)
                    {
                      if (v47[2] == v23)
                        goto LABEL_113;
                    }
                    else if ((v48 & v30) != v44)
                    {
                      goto LABEL_169;
                    }
                    v47 = (_QWORD *)*v47;
                    if (!v47)
                      goto LABEL_169;
                  }
                }
                while (1)
                {
                  v50 = v47[1];
                  if (v50 == v23)
                  {
                    if (v47[2] == v23)
                    {
LABEL_113:
                      if (v40 != v47 + 4)
                      {
                        if (v24.u32[0] > 1uLL)
                        {
                          v49 = *a2;
                          if (*(_QWORD *)&v22 <= v23)
                            v49 = v23 % *(_QWORD *)&v22;
                        }
                        else
                        {
                          v49 = v30 & v23;
                        }
                        v57 = v27[v49];
                        if (v57)
                        {
                          v58 = (_QWORD *)*v57;
                          if (v58)
                          {
                            if (v24.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v59 = v58[1];
                                if (v59 == v23)
                                {
                                  if (v58[2] == v23)
                                    goto LABEL_154;
                                }
                                else if ((v59 & v30) != v49)
                                {
                                  goto LABEL_169;
                                }
                                v58 = (_QWORD *)*v58;
                                if (!v58)
                                  goto LABEL_169;
                              }
                            }
                            do
                            {
                              v61 = v58[1];
                              if (v61 == v23)
                              {
                                if (v58[2] == v23)
                                {
LABEL_154:
                                  for (j = (uint64_t *)v58[4]; j; j = (uint64_t *)j[1])
                                  {
                                    while (1)
                                    {
                                      v60 = *((_DWORD *)j + 8);
                                      if (v3 >= v60)
                                        break;
                                      j = (uint64_t *)*j;
                                      if (!j)
                                        goto LABEL_160;
                                    }
                                    if (v60 >= v3)
                                      return *((double *)j + 5);
                                  }
LABEL_160:
                                  std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                                }
                              }
                              else
                              {
                                if (v61 >= *(_QWORD *)&v22)
                                  v61 %= *(_QWORD *)&v22;
                                if (v61 != v49)
                                  break;
                              }
                              v58 = (_QWORD *)*v58;
                            }
                            while (v58);
                          }
                        }
LABEL_169:
                        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                      }
LABEL_123:
                      if (*v27)
                      {
                        v51 = (_QWORD *)**v27;
                        if (v51)
                        {
                          if (v24.u32[0] < 2uLL)
                          {
                            v52 = *(_QWORD *)&v22 - 1;
                            while (1)
                            {
                              v53 = v51[1];
                              if (v53)
                              {
                                if ((v53 & v52) != 0)
                                  goto LABEL_169;
                              }
                              else if (!v51[2])
                              {
                                goto LABEL_131;
                              }
                              v51 = (_QWORD *)*v51;
                              if (!v51)
                                goto LABEL_169;
                            }
                          }
                          while (1)
                          {
                            v56 = v51[1];
                            if (v56)
                            {
                              if (v56 < *(_QWORD *)&v22 || v56 % *(_QWORD *)&v22)
                                goto LABEL_169;
                            }
                            else if (!v51[2])
                            {
LABEL_131:
                              j = (uint64_t *)v51[4];
                              if (!j)
                                goto LABEL_160;
                              while (1)
                              {
                                while (1)
                                {
                                  v55 = *((_DWORD *)j + 8);
                                  if (v3 >= v55)
                                    break;
                                  j = (uint64_t *)*j;
                                  if (!j)
                                    goto LABEL_160;
                                }
                                if (v55 >= v3)
                                  return *((double *)j + 5);
                                j = (uint64_t *)j[1];
                                if (!j)
                                  goto LABEL_160;
                              }
                            }
                            v51 = (_QWORD *)*v51;
                            if (!v51)
                              goto LABEL_169;
                          }
                        }
                      }
                      goto LABEL_169;
                    }
                  }
                  else
                  {
                    if (v50 >= *(_QWORD *)&v22)
                      v50 %= *(_QWORD *)&v22;
                    if (v50 != v44)
                      goto LABEL_169;
                  }
                  v47 = (_QWORD *)*v47;
                  if (!v47)
                    goto LABEL_169;
                }
              }
            }
            else
            {
              if (v45 >= *(_QWORD *)&v22)
                v45 %= *(_QWORD *)&v22;
              if (v45 != v33)
                goto LABEL_169;
            }
            v35 = (_QWORD *)*v35;
            if (!v35)
              goto LABEL_169;
          }
        }
      }
      else
      {
        if (v32 >= *(_QWORD *)&v22)
          v32 %= *(_QWORD *)&v22;
        if (v32 != v25)
          goto LABEL_123;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_123;
    }
  }
  v4 = *(int8x8_t *)(a1 + 56);
  if (!*(_QWORD *)&v4)
    goto LABEL_169;
  v5 = **(_QWORD ***)(a1 + 48);
  if (!v5)
    goto LABEL_169;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_169;
  v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9)
      {
        if ((v9 & v8) != 0)
          goto LABEL_169;
      }
      else if (!v6[2])
      {
        goto LABEL_12;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_169;
    }
  }
  while (1)
  {
    v12 = v6[1];
    if (!v12)
      break;
    if (v12 < *(_QWORD *)&v4 || v12 % *(_QWORD *)&v4)
      goto LABEL_169;
LABEL_20:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_169;
  }
  if (v6[2])
    goto LABEL_20;
LABEL_12:
  v10 = (uint64_t *)v6[4];
  if (!v10)
    goto LABEL_160;
  while (1)
  {
    while (1)
    {
      v11 = *((_DWORD *)v10 + 8);
      if (v11 < 3)
        break;
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_160;
    }
    if (v11 == 2)
      return *((double *)v10 + 5);
    v10 = (uint64_t *)v10[1];
    if (!v10)
      goto LABEL_160;
  }
}

double E5PlatformManagerImpl::GetMaxGBBW(uint64_t a1, unint64_t *a2, unsigned int *a3)
{
  unsigned int v3;
  int8x8_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  int8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *i;
  unsigned int v20;
  unint64_t v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD **v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  BOOL v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *j;
  unsigned int v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;

  v3 = *a3;
  if (*a3 == 7)
  {
    v13 = *(int8x8_t *)(a1 + 56);
    if (!*(_QWORD *)&v13)
      goto LABEL_169;
    v14 = **(_QWORD ***)(a1 + 48);
    if (!v14)
      goto LABEL_169;
    v15 = (_QWORD *)*v14;
    if (!v15)
      goto LABEL_169;
    v16 = (uint8x8_t)vcnt_s8(v13);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] < 2uLL)
    {
      v17 = *(_QWORD *)&v13 - 1;
      while (1)
      {
        v18 = v15[1];
        if (v18)
        {
          if ((v18 & v17) != 0)
            goto LABEL_169;
        }
        else if (!v15[2])
        {
          goto LABEL_34;
        }
        v15 = (_QWORD *)*v15;
        if (!v15)
          goto LABEL_169;
      }
    }
    while (1)
    {
      v21 = v15[1];
      if (v21)
      {
        if (v21 < *(_QWORD *)&v13 || v21 % *(_QWORD *)&v13)
          goto LABEL_169;
      }
      else if (!v15[2])
      {
LABEL_34:
        for (i = (uint64_t *)v15[7]; i; i = (uint64_t *)i[1])
        {
          while (1)
          {
            v20 = *((_DWORD *)i + 8);
            if (v20 < 4)
              break;
            i = (uint64_t *)*i;
            if (!i)
              goto LABEL_160;
          }
          if (v20 == 3)
            return *((double *)i + 5) * 0.5;
        }
        goto LABEL_160;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_169;
    }
  }
  if (v3 != 6)
  {
    v22 = *(int8x8_t *)(a1 + 56);
    if (!*(_QWORD *)&v22)
      goto LABEL_169;
    v23 = *a2;
    v24 = (uint8x8_t)vcnt_s8(v22);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = *a2;
      if (*(_QWORD *)&v22 <= v23)
        v25 = v23 % *(_QWORD *)&v22;
    }
    else
    {
      v25 = (*(_QWORD *)&v22 - 1) & v23;
    }
    v27 = *(_QWORD ***)(a1 + 48);
    v28 = v27[v25];
    if (!v28)
      goto LABEL_123;
    v29 = (_QWORD *)*v28;
    if (!*v28)
      goto LABEL_123;
    v30 = *(_QWORD *)&v22 - 1;
    if (v24.u32[0] < 2uLL)
    {
      while (1)
      {
        v31 = v29[1];
        if (v31 == v23)
        {
          if (v29[2] == v23)
            goto LABEL_70;
        }
        else if ((v31 & v30) != v25)
        {
          goto LABEL_123;
        }
        v29 = (_QWORD *)*v29;
        if (!v29)
          goto LABEL_123;
      }
    }
    while (1)
    {
      v32 = v29[1];
      if (v32 == v23)
      {
        if (v29[2] == v23)
        {
LABEL_70:
          if (v24.u32[0] > 1uLL)
          {
            v33 = *a2;
            if (*(_QWORD *)&v22 <= v23)
              v33 = v23 % *(_QWORD *)&v22;
          }
          else
          {
            v33 = v30 & v23;
          }
          v34 = v27[v33];
          if (!v34)
            goto LABEL_169;
          v35 = (_QWORD *)*v34;
          if (!v35)
            goto LABEL_169;
          if (v24.u32[0] < 2uLL)
          {
            while (1)
            {
              v36 = v35[1];
              if (v36 == v23)
              {
                if (v35[2] == v23)
                  goto LABEL_82;
              }
              else if ((v36 & v30) != v33)
              {
                goto LABEL_169;
              }
              v35 = (_QWORD *)*v35;
              if (!v35)
                goto LABEL_169;
            }
          }
          while (1)
          {
            v45 = v35[1];
            if (v45 == v23)
            {
              if (v35[2] == v23)
              {
LABEL_82:
                v39 = v35[7];
                v37 = v35 + 7;
                v38 = v39;
                if (!v39)
                  goto LABEL_93;
                v40 = v37;
                do
                {
                  v41 = *(_DWORD *)(v38 + 32);
                  v42 = v41 >= v3;
                  if (v41 >= v3)
                    v43 = (uint64_t *)v38;
                  else
                    v43 = (uint64_t *)(v38 + 8);
                  if (v42)
                    v40 = (_QWORD *)v38;
                  v38 = *v43;
                }
                while (*v43);
                if (v40 == v37 || v3 < *((_DWORD *)v40 + 8))
LABEL_93:
                  v40 = v37;
                if (v24.u32[0] > 1uLL)
                {
                  v44 = *a2;
                  if (*(_QWORD *)&v22 <= v23)
                    v44 = v23 % *(_QWORD *)&v22;
                }
                else
                {
                  v44 = v30 & v23;
                }
                v46 = v27[v44];
                if (!v46)
                  goto LABEL_169;
                v47 = (_QWORD *)*v46;
                if (!v47)
                  goto LABEL_169;
                if (v24.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v48 = v47[1];
                    if (v48 == v23)
                    {
                      if (v47[2] == v23)
                        goto LABEL_113;
                    }
                    else if ((v48 & v30) != v44)
                    {
                      goto LABEL_169;
                    }
                    v47 = (_QWORD *)*v47;
                    if (!v47)
                      goto LABEL_169;
                  }
                }
                while (1)
                {
                  v50 = v47[1];
                  if (v50 == v23)
                  {
                    if (v47[2] == v23)
                    {
LABEL_113:
                      if (v40 != v47 + 7)
                      {
                        if (v24.u32[0] > 1uLL)
                        {
                          v49 = *a2;
                          if (*(_QWORD *)&v22 <= v23)
                            v49 = v23 % *(_QWORD *)&v22;
                        }
                        else
                        {
                          v49 = v30 & v23;
                        }
                        v57 = v27[v49];
                        if (v57)
                        {
                          v58 = (_QWORD *)*v57;
                          if (v58)
                          {
                            if (v24.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v59 = v58[1];
                                if (v59 == v23)
                                {
                                  if (v58[2] == v23)
                                    goto LABEL_154;
                                }
                                else if ((v59 & v30) != v49)
                                {
                                  goto LABEL_169;
                                }
                                v58 = (_QWORD *)*v58;
                                if (!v58)
                                  goto LABEL_169;
                              }
                            }
                            do
                            {
                              v61 = v58[1];
                              if (v61 == v23)
                              {
                                if (v58[2] == v23)
                                {
LABEL_154:
                                  for (j = (uint64_t *)v58[7]; j; j = (uint64_t *)j[1])
                                  {
                                    while (1)
                                    {
                                      v60 = *((_DWORD *)j + 8);
                                      if (v3 >= v60)
                                        break;
                                      j = (uint64_t *)*j;
                                      if (!j)
                                        goto LABEL_160;
                                    }
                                    if (v60 >= v3)
                                      return *((double *)j + 5);
                                  }
LABEL_160:
                                  std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                                }
                              }
                              else
                              {
                                if (v61 >= *(_QWORD *)&v22)
                                  v61 %= *(_QWORD *)&v22;
                                if (v61 != v49)
                                  break;
                              }
                              v58 = (_QWORD *)*v58;
                            }
                            while (v58);
                          }
                        }
LABEL_169:
                        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                      }
LABEL_123:
                      if (*v27)
                      {
                        v51 = (_QWORD *)**v27;
                        if (v51)
                        {
                          if (v24.u32[0] < 2uLL)
                          {
                            v52 = *(_QWORD *)&v22 - 1;
                            while (1)
                            {
                              v53 = v51[1];
                              if (v53)
                              {
                                if ((v53 & v52) != 0)
                                  goto LABEL_169;
                              }
                              else if (!v51[2])
                              {
                                goto LABEL_131;
                              }
                              v51 = (_QWORD *)*v51;
                              if (!v51)
                                goto LABEL_169;
                            }
                          }
                          while (1)
                          {
                            v56 = v51[1];
                            if (v56)
                            {
                              if (v56 < *(_QWORD *)&v22 || v56 % *(_QWORD *)&v22)
                                goto LABEL_169;
                            }
                            else if (!v51[2])
                            {
LABEL_131:
                              j = (uint64_t *)v51[7];
                              if (!j)
                                goto LABEL_160;
                              while (1)
                              {
                                while (1)
                                {
                                  v55 = *((_DWORD *)j + 8);
                                  if (v3 >= v55)
                                    break;
                                  j = (uint64_t *)*j;
                                  if (!j)
                                    goto LABEL_160;
                                }
                                if (v55 >= v3)
                                  return *((double *)j + 5);
                                j = (uint64_t *)j[1];
                                if (!j)
                                  goto LABEL_160;
                              }
                            }
                            v51 = (_QWORD *)*v51;
                            if (!v51)
                              goto LABEL_169;
                          }
                        }
                      }
                      goto LABEL_169;
                    }
                  }
                  else
                  {
                    if (v50 >= *(_QWORD *)&v22)
                      v50 %= *(_QWORD *)&v22;
                    if (v50 != v44)
                      goto LABEL_169;
                  }
                  v47 = (_QWORD *)*v47;
                  if (!v47)
                    goto LABEL_169;
                }
              }
            }
            else
            {
              if (v45 >= *(_QWORD *)&v22)
                v45 %= *(_QWORD *)&v22;
              if (v45 != v33)
                goto LABEL_169;
            }
            v35 = (_QWORD *)*v35;
            if (!v35)
              goto LABEL_169;
          }
        }
      }
      else
      {
        if (v32 >= *(_QWORD *)&v22)
          v32 %= *(_QWORD *)&v22;
        if (v32 != v25)
          goto LABEL_123;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_123;
    }
  }
  v4 = *(int8x8_t *)(a1 + 56);
  if (!*(_QWORD *)&v4)
    goto LABEL_169;
  v5 = **(_QWORD ***)(a1 + 48);
  if (!v5)
    goto LABEL_169;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_169;
  v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9)
      {
        if ((v9 & v8) != 0)
          goto LABEL_169;
      }
      else if (!v6[2])
      {
        goto LABEL_12;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_169;
    }
  }
  while (1)
  {
    v12 = v6[1];
    if (!v12)
      break;
    if (v12 < *(_QWORD *)&v4 || v12 % *(_QWORD *)&v4)
      goto LABEL_169;
LABEL_20:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_169;
  }
  if (v6[2])
    goto LABEL_20;
LABEL_12:
  v10 = (uint64_t *)v6[7];
  if (!v10)
    goto LABEL_160;
  while (1)
  {
    while (1)
    {
      v11 = *((_DWORD *)v10 + 8);
      if (v11 < 3)
        break;
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_160;
    }
    if (v11 == 2)
      return *((double *)v10 + 5);
    v10 = (uint64_t *)v10[1];
    if (!v10)
      goto LABEL_160;
  }
}

uint64_t E5PlatformManagerImpl::GetBasePlatform(uint64_t a1, uint64_t a2)
{
  char v3;
  void *exception;
  _QWORD v5[3];
  _BYTE v6[8];
  _QWORD v7[3];

  if (a2 <= 32773)
  {
    if (a2 >= 24576)
    {
      switch(a2)
      {
        case 24576:
        case 24577:
        case 24578:
          return 33025;
        case 24579:
        case 24580:
        case 24581:
        case 24582:
        case 24583:
        case 24584:
        case 24585:
        case 24586:
        case 24587:
        case 24588:
        case 24589:
        case 24590:
        case 24591:
        case 24592:
        case 24593:
        case 24594:
        case 24595:
        case 24596:
        case 24597:
        case 24598:
        case 24599:
        case 24600:
        case 24601:
        case 24602:
        case 24603:
        case 24604:
        case 24605:
        case 24606:
        case 24607:
        case 24611:
        case 24612:
        case 24613:
        case 24614:
        case 24615:
        case 24616:
        case 24617:
        case 24618:
        case 24619:
        case 24620:
        case 24621:
        case 24622:
        case 24623:
        case 24627:
        case 24629:
        case 24630:
        case 24631:
        case 24632:
        case 24633:
        case 24634:
        case 24635:
        case 24636:
        case 24637:
        case 24638:
        case 24639:
          goto LABEL_22;
        case 24608:
        case 24609:
        case 24610:
          return 33040;
        case 24624:
        case 24625:
        case 24626:
        case 24628:
          return 33056;
        case 24640:
        case 24641:
          return 33072;
        default:
          if (a2 != 28672)
            goto LABEL_22;
          return a2;
      }
    }
    if (!a2 || a2 == 256)
      return a2;
LABEL_22:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetBasePlatform");
    std::string::basic_string[abi:ne180100]<0>(v5, "Unsupported platform");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  if (a2 > 33024)
  {
    switch(a2)
    {
      case 33025:
      case 33027:
        return 33025;
      case 33026:
      case 33028:
      case 33029:
      case 33030:
      case 33031:
      case 33032:
      case 33033:
      case 33034:
      case 33035:
      case 33036:
      case 33037:
      case 33038:
      case 33039:
      case 33041:
      case 33043:
      case 33044:
      case 33045:
      case 33046:
      case 33047:
      case 33048:
      case 33049:
      case 33050:
      case 33051:
      case 33052:
      case 33053:
      case 33054:
      case 33055:
      case 33057:
      case 33059:
      case 33060:
      case 33061:
      case 33062:
      case 33063:
      case 33064:
      case 33065:
      case 33066:
      case 33067:
      case 33068:
      case 33069:
      case 33070:
      case 33071:
      case 33073:
      case 33075:
      case 33076:
      case 33077:
      case 33078:
      case 33079:
      case 33080:
      case 33081:
      case 33082:
      case 33083:
      case 33084:
      case 33085:
      case 33086:
      case 33087:
        goto LABEL_22;
      case 33040:
      case 33042:
        return 33040;
      case 33056:
      case 33058:
        return 33056;
      case 33072:
      case 33074:
        return 33072;
      case 33088:
        return a2;
      default:
        if (a2 != 33537 && a2 != 33552)
          goto LABEL_22;
        return a2;
    }
  }
  v3 = a2 - 6;
  if ((unint64_t)(a2 - 32774) > 0x2A)
    goto LABEL_22;
  if (((1 << v3) & 0x40000009C01) != 0)
    return a2;
  if (((1 << v3) & 0x204000000) == 0)
    goto LABEL_22;
  return 32800;
}

void sub_190FA3AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_190FA3B70(E5RT::AsyncEventImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_QWORD *)this + 9);
    v4 = (void *)*((_QWORD *)this + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    if ((*((char *)this + 39) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_14:
    operator delete(*((void **)this + 2));
    E5RT::AsyncEventImpl::~AsyncEventImpl(this);
    return;
  }
  if (*((char *)this + 39) < 0)
    goto LABEL_14;
LABEL_11:
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

void Espresso::AOT::AbstractMILCompiler::Options::~Options(Espresso::AOT::AbstractMILCompiler::Options *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    goto LABEL_13;
}

void sub_190FA3CC8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9[2];
  unsigned int *v10;
  _QWORD *v11[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = (unsigned int *)v9;
  std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>((uint64_t *)&v8, *(unsigned int **)a3, (unsigned int *)(a3 + 8));
  v11[0] = 0;
  v11[1] = 0;
  v10 = (unsigned int *)v11;
  std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>((uint64_t *)&v10, *(unsigned int **)a4, (unsigned int *)(a4 + 8));
  v7 = *a2;
  a1[2] = 0;
  *a1 = v7;
  a1[1] = (uint64_t)(a1 + 2);
  a1[3] = 0;
  std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(a1 + 1, v8, (unsigned int *)v9);
  a1[5] = 0;
  a1[4] = (uint64_t)(a1 + 5);
  a1 += 4;
  a1[2] = 0;
  std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(a1, v10, (unsigned int *)v11);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v10, v11[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_190FA3DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;

  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v9, *v11);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v10, *v12);
  sub_190FA3E50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190FA3DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;

  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v13, a13);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_190FA3DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_190FA3E14(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_190FA3E50(uint64_t a1)
{
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::__find_equal<Espresso::AOT::BackendIdentifier>(v7, v8, v18, &v17, v6 + 8);
      if (*result)
      {
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x30uLL);
        v11[2] = *((_OWORD *)v6 + 2);
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::__find_equal<Espresso::AOT::BackendIdentifier>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

_QWORD **std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](_QWORD **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  _OWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  uint64_t *v13;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      v7 = std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::__find_equal<Espresso::AOT::BackendIdentifier>(a1, v4, &v13, &v12, a2);
      if (!*v7)
      {
        v8 = operator new(0x30uLL);
        v8[2] = *(_OWORD *)a2;
        v9 = v13;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        *v7 = (uint64_t)v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = (_OWORD *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_190FA421C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_190FA42D8(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = std::hash<E5Common::PlatformIdentifier>::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v10)
    return 0;
  v9 = (_QWORD *)*v10;
  if (*v10)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v13 = v9[1];
        if (v6 == v13)
        {
          if (E5Common::PlatformIdentifier::operator==((uint64_t)(v9 + 2), a2))
            return v9;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        v9 = (_QWORD *)*v9;
        if (!v9)
          return v9;
      }
    }
    do
    {
      v12 = v9[1];
      if (v6 == v12)
      {
        if (E5Common::PlatformIdentifier::operator==((uint64_t)(v9 + 2), a2))
          return v9;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v8)
          return 0;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  return v9;
}

BOOL sub_190FA4410(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  size_t v4;
  unint64_t v5;
  int v6;
  void **v7;
  uint64_t v8;
  void **p_s1;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _BOOL8 v16;
  void *__p[2];
  unsigned __int8 v19;
  void *__s1;
  size_t __n;
  unsigned __int8 v22;

  E5Common::StringUtils::ToLower(a1, (uint64_t)&__s1);
  E5Common::StringUtils::ToLower(a2, (uint64_t)__p);
  v3 = v22;
  if ((v22 & 0x80u) == 0)
    v4 = v22;
  else
    v4 = __n;
  v5 = v19;
  v6 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  if (v4 != v5)
  {
    v16 = 0;
    if (((char)v19 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_26;
  }
  if ((v19 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((char)v22 < 0)
  {
    v16 = memcmp(__s1, v7, __n) == 0;
    goto LABEL_22;
  }
  if (v22)
  {
    v8 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      v11 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v10 = v11;
      v13 = *(unsigned __int8 *)v7;
      v7 = (void **)((char *)v7 + 1);
      v12 = v13;
      v15 = v8-- != 0;
      v16 = v10 == v12;
    }
    while (v10 == v12 && v15);
LABEL_22:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_26:
    operator delete(__p[0]);
    if ((v22 & 0x80) == 0)
      return v16;
    goto LABEL_27;
  }
  v16 = 1;
  if ((char)v19 < 0)
    goto LABEL_26;
LABEL_23:
  if ((v3 & 0x80) == 0)
    return v16;
LABEL_27:
  operator delete(__s1);
  return v16;
}

void sub_190FA4524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::hash<E5Common::PlatformIdentifier>::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (E5Common::PlatformIdentifier::operator==((uint64_t)(v13 + 2), a2))
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (E5Common::PlatformIdentifier::operator==((uint64_t)(v13 + 2), a2))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v10 && (float)(v18 * (float)v10) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      *v13 = *v20;
LABEL_61:
      *v20 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v25)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v25)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < *(_QWORD *)&v25)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v20)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v20)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v20)
        goto LABEL_26;
    }
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v19 + 8 * v3) = v16;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*v7;
  return v13;
}

void sub_190FA48D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<E5Common::PlatformIdentifier,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<E5Common::PlatformIdentifier,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<E5Common::PlatformIdentifier,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<E5Common::PlatformIdentifier,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x48uLL);
    v24 = (std::string *)(v23 + 4);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_190FA4AB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy(a1, *((_QWORD *)a2 + 1));
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a2 + 56));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::hash<E5Common::PlatformIdentifier>::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (E5Common::PlatformIdentifier::operator==((uint64_t)(v13 + 2), a2))
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (E5Common::PlatformIdentifier::operator==((uint64_t)(v13 + 2), a2))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v10 && (float)(v18 * (float)v10) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      *v13 = *v20;
LABEL_61:
      *v20 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v25)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v25)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < *(_QWORD *)&v25)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v20)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v20)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v20)
        goto LABEL_26;
    }
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v19 + 8 * v3) = v16;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*v7;
  return v13;
}

void sub_190FA4E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<E5Common::PlatformIdentifier,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<E5Common::PlatformIdentifier,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_190FA4FB8(_QWORD *a1)
{
  _QWORD *v2;

  do
  {
    v2 = (_QWORD *)*a1;
    sub_190FA3B70((E5RT::AsyncEventImpl *)(a1 + 2));
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

_QWORD *E5RT::SurfaceObject::SurfaceObject(E5RT::SurfaceObject *this)
{
  _QWORD *result;

  result = E5RT::MemoryObject::MemoryObject(this);
  *result = &off_1E2D59E00;
  result[1] = 0;
  return result;
}

{
  _QWORD *result;

  result = E5RT::MemoryObject::MemoryObject(this);
  *result = &off_1E2D59E00;
  result[1] = 0;
  return result;
}

_QWORD *E5RT::SurfaceObject::SurfaceObject(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::MemoryObject::MemoryObject(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D59E00;
  result[1] = v4;
  return result;
}

{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::MemoryObject::MemoryObject(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D59E00;
  result[1] = v4;
  return result;
}

void E5RT::SurfaceObject::~SurfaceObject(E5RT::SurfaceObject *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59E00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59E00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59E00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  E5RT::MemoryObject::~MemoryObject(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::SurfaceObject::AllocSurface@<X0>(E5RT::SurfaceDescriptor *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  E5RT::IOSurfaceObject *v6;
  E5RT::IOSurfaceObject *v7;
  void *exception;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  E5RT::IOSurfaceObject *v13[3];
  _BYTE v14[8];

  if (a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "AllocSurface");
    std::string::basic_string[abi:ne180100]<0>(v13, "Invalid storage type.");
    E5RT::Status::Status(v14, 1, v13);
    E5RT::E5RTError::E5RTError(exception, &v10, v14);
  }
  E5RT::SurfaceDescriptor::GetSurfaceFormat(a1);
  E5RT::SurfaceDescriptor::GetSurfaceWidth(a1);
  E5RT::SurfaceDescriptor::GetSurfaceHeight(a1);
  v10 = 0x2B23404400000000;
  v11 = 0u;
  v12 = 0u;
  kdebug_trace();
  E5RT::IOSurfaceObject::AllocIOSurfaceObjectImpl(a1, v13);
  v5 = (_QWORD *)operator new();
  v6 = v13[0];
  v13[0] = 0;
  E5RT::MemoryObject::MemoryObject(v5);
  *v5 = &off_1E2D59E00;
  v5[1] = v6;
  *a3 = v5;
  v7 = v13[0];
  v13[0] = 0;
  if (v7)
  {
    E5RT::IOSurfaceObject::~IOSurfaceObject(v7);
    MEMORY[0x19401CD90]();
  }
  return kdebug_trace();
}

void sub_190FA52E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v4 = v2;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x19401CD90](v3, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100]((E5RT::AsyncEventImpl **)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190FA5340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::SurfaceObject::ValidateSurfaceObjectMatchesWithDescriptor(E5RT::SurfaceObject *this, const E5RT::SurfaceDescriptor *a2)
{
  return (*(uint64_t (**)(_QWORD, const E5RT::SurfaceDescriptor *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2);
}

_QWORD *E5RT::SurfaceObjectImpl::SurfaceObjectImpl(_QWORD *this)
{
  *this = off_1E2D5AE80;
  return this;
}

void (***E5RT::SurfaceObjectImpl::TryAsIOSurfaceObject(void (***this)(E5RT::IOSurfaceObject *__hidden this)))(E5RT::IOSurfaceObject *__hidden this)
{
  if (!this || *this != &off_1E2D5ABD0)
    return 0;
  return this;
}

uint64_t E5RT::InitializeSurfaceRandomly(E5RT *this, const E5RT::SurfaceDescriptor *a2, E5RT::SurfaceObject *a3, unsigned int a4)
{
  unsigned int v5;
  int SurfaceFormat;
  uint64_t SurfaceHeight;
  void *v10;
  __IOSurface *v11;
  size_t v12;
  void *v13;
  __IOSurface *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t i;
  unsigned __int8 v18;
  uint32_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  __IOSurface *v25;
  size_t v26;
  void *v27;
  __IOSurface *v28;
  uint64_t v29;
  size_t v30;
  _DWORD *v39;
  int *v40;
  _QWORD *v41;
  float v42;
  unsigned __int8 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  _DWORD *v49;
  int *v50;
  _QWORD *v51;
  int v52;
  int v53;
  uint32_t v54;
  uint64_t j;
  void *exception;
  void *v57;
  float v58;
  float v59;
  std::random_device v60[6];
  char v61[8];
  std::string __token;

  if (a4 < a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__token, "InitializeSurfaceRandomly");
    std::string::basic_string[abi:ne180100]<0>(v60, "Max should be >= min.");
    E5RT::Status::Status(v61, 1, v60);
    E5RT::E5RTError::E5RTError(exception, &__token, v61);
  }
  v5 = a3;
  SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  if ((SurfaceFormat - 1) < 2)
    goto LABEL_5;
  if (SurfaceFormat != 7)
  {
    if (SurfaceFormat != 4)
    {
      v57 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__token, "InitializeSurfaceRandomly");
      std::string::basic_string[abi:ne180100]<0>(v60, "Unsupported surface format for random initialization.");
      E5RT::Status::Status(v61, 1, v60);
      E5RT::E5RTError::E5RTError(v57, &__token, v61);
    }
LABEL_5:
    SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(this);
    v10 = E5RT::MemoryObject::Surface(a2);
    v11 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v10);
    v12 = IOSurfaceGetBytesPerRow(v11) * SurfaceHeight;
    v13 = E5RT::MemoryObject::Surface(a2);
    v14 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v13);
    result = (uint64_t)IOSurfaceGetBaseAddress(v14);
    if (v12)
    {
      v16 = result;
      for (i = 0; i != v12; ++i)
      {
        v18 = atomic_load((unsigned __int8 *)&qword_1EE215298);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1EE215298))
        {
          *((_BYTE *)&__token.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&__token, "/dev/urandom");
          std::random_device::random_device(v60, &__token);
          if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__token.__r_.__value_.__l.__data_);
          v19 = arc4random();
          dword_1EE2152A8 = v19;
          v20 = 5;
          v21 = 1;
          do
          {
            v22 = 1812433253 * (v19 ^ (v19 >> 30));
            v19 = v22 + v21;
            *((_DWORD *)&qword_1EE215298 + v20) = v20 + v22 - 4;
            ++v21;
            ++v20;
          }
          while (v20 != 628);
          qword_1EE215C68 = 0;
          std::random_device::~random_device(v60);
          __cxa_guard_release(&qword_1EE215298);
        }
        __token.__r_.__value_.__s.__data_[0] = v5;
        __token.__r_.__value_.__s.__data_[1] = a4;
        result = std::uniform_int_distribution<unsigned char>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&__token, (uint64_t)&dword_1EE2152A8, (unsigned __int8 *)&__token);
        *(_BYTE *)(v16 + i) = result;
      }
    }
    return result;
  }
  v23 = E5RT::SurfaceDescriptor::GetSurfaceHeight(this);
  v24 = E5RT::MemoryObject::Surface(a2);
  v25 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v24);
  v26 = IOSurfaceGetBytesPerRow(v25) * v23;
  v27 = E5RT::MemoryObject::Surface(a2);
  v28 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v27);
  result = (uint64_t)IOSurfaceGetBaseAddress(v28);
  if (v26 >= 2)
  {
    v29 = 0;
    v30 = v26 >> 1;
    _S0 = (float)v5;
    __asm { FCVT            H0, S0 }
    _S1 = (float)a4;
    __asm
    {
      FCVT            H1, S1
      FCVT            S0, H0
      FCVT            S1, H1
    }
    v39 = &unk_1EE214000;
    v40 = &dword_1EE2148D0;
    v41 = &unk_1EE215000;
    v42 = _S1 - _S0;
    do
    {
      v43 = atomic_load((unsigned __int8 *)&qword_1EE2152A0);
      if ((v43 & 1) == 0)
      {
        v48 = result;
        v58 = _S0;
        v59 = v42;
        v49 = v39;
        v50 = v40;
        v51 = v41;
        v52 = __cxa_guard_acquire(&qword_1EE2152A0);
        _S0 = v58;
        v42 = v59;
        v41 = v51;
        v40 = v50;
        v39 = v49;
        v53 = v52;
        result = v48;
        if (v53)
        {
          *((_BYTE *)&__token.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&__token, "/dev/urandom");
          std::random_device::random_device(v60, &__token);
          if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__token.__r_.__value_.__l.__data_);
          v54 = arc4random();
          v49[564] = v54;
          for (j = 1; j != 624; ++j)
          {
            v54 = j + 1812433253 * (v54 ^ (v54 >> 30));
            v50[j] = v54;
          }
          v51[82] = 0;
          std::random_device::~random_device(v60);
          __cxa_guard_release(&qword_1EE2152A0);
          v41 = v51;
          v40 = v50;
          result = v48;
          _S0 = v58;
          v42 = v59;
          v39 = v49;
        }
      }
      v44 = *((_QWORD *)v40 + 312);
      v45 = (v44 + 1) % 0x270uLL;
      v46 = v44;
      LODWORD(v44) = v40[(v44 + 397) % 0x270uLL] ^ ((v40[v45] & 0x7FFFFFFE | v40[v44] & 0x80000000) >> 1) ^ (v40[v45] << 31 >> 31) & 0x9908B0DF;
      v40[v46] = v44;
      *((_QWORD *)v40 + 312) = v45;
      LODWORD(v44) = ((v44 ^ (v44 >> 11)) << 7) & 0x9D2C5680 ^ v44 ^ (v44 >> 11);
      _S2 = _S0
          + (float)(v42
                  * (float)((float)(((_DWORD)v44 << 15) & 0xEFC60000 ^ v44 ^ ((((_DWORD)v44 << 15) & 0xEFC60000 ^ v44) >> 18))
                          * 2.3283e-10));
      __asm { FCVT            H2, S2 }
      *(_WORD *)(result + 2 * v29++) = LOWORD(_S2);
    }
    while (v29 != v30);
  }
  return result;
}

void sub_190FA5914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::random_device a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::random_device::~random_device(&a10);
  __cxa_guard_abort(&qword_1EE2152A0);
  _Unwind_Resume(a1);
}

void sub_190FA594C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::random_device a10)
{
  std::random_device::~random_device(&a10);
  __cxa_guard_abort(&qword_1EE215298);
  _Unwind_Resume(a1);
}

void sub_190FA596C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_1EE215298);
  _Unwind_Resume(a1);
}

void sub_190FA5994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
      goto LABEL_8;
  }
  else if (v23)
  {
LABEL_8:
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::uniform_int_distribution<unsigned char>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v3 = a3[1];
  v4 = *a3;
  if (v3 == v4)
    return v3;
  v5 = v3 - v4 + 1;
  if (v3 - v4 != -1)
  {
    v6 = __clz(v5);
    v7 = 31;
    if (((v5 << v6) & 0x7FFFFFFF) != 0)
      v7 = 32;
    v8 = v7 - v6;
    v9 = v8 >> 5;
    if ((v8 & 0x1F) != 0)
      ++v9;
    if (v9 <= v8)
      v10 = 0xFFFFFFFF >> -(v8 / v9);
    else
      v10 = 0;
    v11 = *(_QWORD *)(a2 + 2496);
    do
    {
      v12 = 4 * v11;
      v13 = v11 + 397;
      v11 = (v11 + 1) % 0x270;
      v14 = *(_DWORD *)(a2 + 4 * (v13 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v11) & 0x7FFFFFFE | *(_DWORD *)(a2 + v12) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v11) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v12) = v14;
      v15 = ((v14 ^ (v14 >> 11)) << 7) & 0x9D2C5680 ^ v14 ^ (v14 >> 11);
      v16 = ((v15 << 15) & 0xEFC60000 ^ v15 ^ (((v15 << 15) & 0xEFC60000 ^ v15) >> 18)) & v10;
    }
    while (v16 >= v5);
    *(_QWORD *)(a2 + 2496) = v11;
    LOBYTE(v3) = v4 + v16;
    return v3;
  }
  v18 = *(_QWORD *)(a2 + 2496);
  v19 = (v18 + 1) % 0x270uLL;
  v20 = *(_DWORD *)(a2 + 4 * ((v18 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v19) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v18) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v19) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + 4 * v18) = v20;
  *(_QWORD *)(a2 + 2496) = v19;
  v21 = ((v20 ^ (v20 >> 11)) << 7) & 0x9D2C5680 ^ v20 ^ (v20 >> 11);
  return (v21 ^ (((v21 << 15) & 0x3C40000 ^ v21) >> 18));
}

uint64_t E5RT::TensorDataType::ValidateDataTypeSpec(unsigned int a1, unsigned int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;

  if (a2 >= 0xA)
    v2 = 1;
  else
    v2 = (0x1F8u >> a2) & 1;
  if (a1 == 4)
    v3 = v2;
  else
    v3 = 1;
  if (a1 - 2 >= 2)
    v4 = v3;
  else
    v4 = 0;
  if (a1 >= 2)
    return v4;
  else
    return 1;
}

_QWORD *E5RT::TensorDataType::Impl::Impl(_QWORD *this, const E5RT::TensorDataType::Impl *a2)
{
  *this = *(_QWORD *)a2;
  return this;
}

{
  *this = *(_QWORD *)a2;
  return this;
}

_QWORD *E5RT::TensorDataType::Impl::Impl(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

uint64_t E5RT::TensorDataType::Impl::GetElementSize(E5RT::TensorDataType::Impl *this)
{
  uint64_t v1;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  v1 = *((int *)this + 1);
  if (v1 >= 0xC)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetElementSize");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid element size.");
    E5RT::Status::Status(v5, 6, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return byte_191A806FE[v1];
}

void sub_190FA5D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDataType::Impl::GetComponentSize(E5RT::TensorDataType::Impl *this)
{
  uint64_t v1;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  v1 = *((int *)this + 1);
  if (v1 >= 0xC)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetComponentSize");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid component size.");
    E5RT::Status::Status(v5, 6, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return byte_191A8070A[v1];
}

void sub_190FA5E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDataType::Impl::GetComponentDataType(E5RT::TensorDataType::Impl *this)
{
  return *(unsigned int *)this;
}

uint64_t E5RT::TensorDataType::Impl::GetComponentPack(E5RT::TensorDataType::Impl *this)
{
  return *((unsigned int *)this + 1);
}

BOOL E5RT::TensorDataType::Impl::IsType<float>(E5RT::TensorDataType::Impl *a1)
{
  return *(_DWORD *)a1 == 4 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 4;
}

BOOL _ZNK4E5RT14TensorDataType4Impl6IsTypeIDF16_EEbv(E5RT::TensorDataType::Impl *a1)
{
  return *(_DWORD *)a1 == 4 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 2;
}

BOOL E5RT::TensorDataType::Impl::IsType<unsigned char>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 1;
}

BOOL E5RT::TensorDataType::Impl::IsType<BOOL>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 1;
}

BOOL E5RT::TensorDataType::Impl::IsType<signed char>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 1;
}

BOOL E5RT::TensorDataType::Impl::IsType<unsigned short>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 2;
}

BOOL E5RT::TensorDataType::Impl::IsType<short>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 2;
}

BOOL E5RT::TensorDataType::Impl::IsType<unsigned int>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 4;
}

BOOL E5RT::TensorDataType::Impl::IsType<int>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 4;
}

void sub_190FA6154(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

void sub_190FA62C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::TensorDataType::TensorDataType(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2D5A048;
  a1[1] = 0;
  v3 = *(int **)(a2 + 8);
  v4 = *v3;
  v5 = v3[1];
  v6 = (_DWORD *)operator new();
  E5RT::TensorDataType::Impl::Impl(v6, v4, v5);
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
    MEMORY[0x19401CD90](v7, 0x1000C4000313F17);
  return a1;
}

{
  int *v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2D5A048;
  a1[1] = 0;
  v3 = *(int **)(a2 + 8);
  v4 = *v3;
  v5 = v3[1];
  v6 = (_DWORD *)operator new();
  E5RT::TensorDataType::Impl::Impl(v6, v4, v5);
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
    MEMORY[0x19401CD90](v7, 0x1000C4000313F17);
  return a1;
}

void sub_190FA6394(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

void sub_190FA6464(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

BOOL E5RT::TensorDataType::IsType<float>(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return *(_DWORD *)v1 == 4 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 4;
}

BOOL _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return *(_DWORD *)v1 == 4 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 2;
}

BOOL E5RT::TensorDataType::IsType<BOOL>(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 1;
}

BOOL E5RT::TensorDataType::IsType<unsigned char>(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 1;
}

BOOL E5RT::TensorDataType::IsType<signed char>(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 1;
}

BOOL E5RT::TensorDataType::IsType<unsigned short>(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 2;
}

BOOL E5RT::TensorDataType::IsType<short>(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 2;
}

BOOL E5RT::TensorDataType::IsType<unsigned int>(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 4;
}

BOOL E5RT::TensorDataType::IsType<int>(uint64_t a1)
{
  E5RT::TensorDataType::Impl *v1;

  v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 4;
}

BOOL E5RT::operator==(uint64_t a1, uint64_t a2)
{
  E5RT::TensorDataType::Impl *v3;
  int NumComponents;
  int ComponentSize;

  v3 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  if (*(_DWORD *)v3 != **(_DWORD **)(a2 + 8))
    return 0;
  NumComponents = E5RT::TensorDataType::Impl::GetNumComponents(v3);
  if (NumComponents != E5RT::TensorDataType::Impl::GetNumComponents(*(E5RT::TensorDataType::Impl **)(a2 + 8)))
    return 0;
  ComponentSize = E5RT::TensorDataType::Impl::GetComponentSize(*(E5RT::TensorDataType::Impl **)(a1 + 8));
  return ComponentSize == E5RT::TensorDataType::Impl::GetComponentSize(*(E5RT::TensorDataType::Impl **)(a2 + 8));
}

void (**E5RT::BufferObject::GetHandle<E5RT::HeapAllocatedBufferHandle>(uint64_t a1))(E5RT::HeapAllocatedBufferObject *__hidden this)
{
  void (***v1)(E5RT::HeapAllocatedBufferObject *__hidden);
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  v1 = E5RT::BufferObjectImpl::TryAsHeapAllocatedBufferObject(*(void (****)(E5RT::HeapAllocatedBufferObject *__hidden))(a1 + 8));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetHandle");
    std::string::basic_string[abi:ne180100]<0>(v4, "Buffer object is not backed by an HeapAllocated.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return v1[2];
}

void sub_190FA67F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::BufferObject::CreateBufferFromHandle<E5RT::HeapAllocatedBufferHandle>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  void *exception;
  uint64_t v10;
  _QWORD v11[3];
  _BYTE v12[8];
  _QWORD v13[3];

  if (!a1 || !a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "CreateBufferFromHandle");
    std::string::basic_string[abi:ne180100]<0>(v11, "Invalid heap allocated handle.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  v6 = operator new();
  E5RT::BufferObjectImpl::BufferObjectImpl((_QWORD *)v6);
  *(_QWORD *)v6 = &off_1E2D5B138;
  *(_BYTE *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = (_QWORD *)operator new();
  v13[0] = 0;
  v10 = v6;
  E5RT::BufferObject::BufferObject(v7, &v10);
  *a3 = v7;
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190FA69A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  MEMORY[0x19401CD90](v6, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::HeapAllocatedBufferObject>::~unique_ptr[abi:ne180100]((E5RT::HeapAllocatedBufferObject **)va);
  _Unwind_Resume(a1);
}

void sub_190FA69E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::HeapAllocatedBufferObject>::~unique_ptr[abi:ne180100]((E5RT::HeapAllocatedBufferObject **)va);
  _Unwind_Resume(a1);
}

void sub_190FA69F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x19401CD90](v2, 0x1081C408B6691DALL);
  _Unwind_Resume(a1);
}

void sub_190FA6A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::HeapAllocatedBufferObject::~HeapAllocatedBufferObject(E5RT::HeapAllocatedBufferObject *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x19401CD78](v2, 0x1000C8077774924);
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x19401CD78](v2, 0x1000C8077774924);
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
  JUMPOUT(0x19401CD90);
}

E5RT::HeapAllocatedBufferObject *E5RT::HeapAllocatedBufferObject::HeapAllocatedBufferObject(E5RT::HeapAllocatedBufferObject *this, size_t a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;

  v4 = E5RT::BufferObjectImpl::BufferObjectImpl(this);
  *v4 = &off_1E2D5B138;
  *((_BYTE *)v4 + 8) = 0;
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = 0;
  v5 = (void *)operator new[]();
  bzero(v5, a2);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v5;
  if (v6)
  {
    MEMORY[0x19401CD78](v6, 0x1000C8077774924);
    v5 = (void *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = a2;
  return this;
}

void sub_190FA6BBC(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 4);
  *((_QWORD *)v1 + 4) = 0;
  if (v3)
    MEMORY[0x19401CD78](v3, 0x1000C8077774924);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void E5RT::HeapAllocatedBufferObject::CreateBufferAliasImpl(E5RT::HeapAllocatedBufferObject *this)
{
  void *exception;
  char *v2;
  __int128 v3;
  _BYTE v4[8];
  char v5[32];

  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 21;
  strcpy(v5, "CreateBufferAliasImpl");
  v2 = (char *)operator new(0x38uLL);
  v3 = xmmword_191A6FF70;
  strcpy(v2, "HeapAllocatedBuffer does not supported alias buffer.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_190FA6CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_190FA6D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190FA6D08);
}

uint64_t E5RT::HeapAllocatedBufferObject::GetSize(E5RT::HeapAllocatedBufferObject *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t E5RT::HeapAllocatedBufferObject::GetDataSpan(E5RT::HeapAllocatedBufferObject *this)
{
  if (*((_QWORD *)this + 3))
    return *((_QWORD *)this + 2);
  else
    return 0;
}

{
  if (*((_QWORD *)this + 3))
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t E5RT::HeapAllocatedBufferObject::GetType(E5RT::HeapAllocatedBufferObject *this)
{
  return 1;
}

uint64_t E5RT::TensorDescriptorImpl::TensorDescriptorImpl(uint64_t a1, uint64_t *a2, E5RT::TensorDataType *a3, uint64_t a4)
{
  void **v6;
  void **v7;
  E5RT::TensorDataType::Impl **v8;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  __n128 v38[2];
  uint64_t v39;

  *(_OWORD *)(a1 + 48) = 0u;
  v6 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = (void **)(a1 + 24);
  v8 = (E5RT::TensorDataType::Impl **)(a1 + 72);
  *(_OWORD *)a1 = 0u;
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)(a1 + 72), a3);
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = a4;
  *(_QWORD *)(a1 + 128) = 0;
  LODWORD(a4) = E5RT::TensorDataType::GetElementSize(v8);
  v39 = 1;
  v10 = *a2;
  v11 = a2[1];
  v12 = v11 - *a2;
  v13 = v12 >> 3;
  v14 = *(_BYTE **)(a1 + 24);
  if (v12 >> 3 <= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v14) >> 3))
    goto LABEL_13;
  if (v12 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v15 = *(_BYTE **)(a1 + 32);
  v16 = (char *)operator new(v12);
  v17 = v15 - v14;
  v18 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFF8];
  v19 = v18;
  if (v15 != v14)
  {
    if ((unint64_t)(v17 - 8) < 0x58)
    {
      v19 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        v28 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v19 - 1) = v28;
        v19 -= 8;
      }
      while (v15 != v14);
      goto LABEL_11;
    }
    v19 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v15 - &v16[v17 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_10;
    v20 = v17 >> 3;
    v21 = ((unint64_t)(v17 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v15[-v22];
    v19 = &v18[-v22];
    v24 = &v16[8 * v20 - 16];
    v25 = (__int128 *)(v15 - 16);
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *((_OWORD *)v24 - 1) = *(v25 - 1);
      *(_OWORD *)v24 = v27;
      v24 -= 32;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    v15 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = &v16[8 * v13];
  if (v14)
    operator delete(v14);
LABEL_13:
  std::vector<E5RT::TensorDimensionImpl>::reserve((_QWORD *)a1, v13);
  a4 = a4;
  *(_QWORD *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = a4;
  *(_BYTE *)(a1 + 104) = 1;
  if (v11 != v10)
  {
    v29 = a2[1];
    if (v29 == *a2)
    {
      v32 = 1;
    }
    else
    {
      v30 = 0;
      v31 = 1;
      v32 = 1;
      do
      {
        v33 = v31 * a4;
        if (v32)
          a4 = v33;
        else
          a4 = 0x7FFFFFFFFFFFFFFFLL;
        v34 = *(_QWORD *)(v29 - 8);
        v29 -= 8;
        v39 = v34;
        v35 = *(_QWORD *)a1;
        E5RT::TensorDimensionImpl::TensorDimensionImpl(v38, v30, v34, a4);
        std::vector<E5RT::TensorDimensionImpl>::emplace<E5RT::TensorDimensionImpl>((unint64_t *)a1, v35, v38);
        E5RT::TensorDimensionImpl::~TensorDimensionImpl((E5RT::TensorDimensionImpl *)v38);
        std::vector<unsigned long>::insert(v7, *v7, (char *)&v39);
        v36 = *v6;
        v38[0].n128_u64[0] = a4;
        std::vector<long>::insert(v6, v36, v38);
        v31 = v39;
        *(_QWORD *)(a1 + 88) *= v39;
        v32 = *(unsigned __int8 *)(a1 + 104);
        if (*(_BYTE *)(a1 + 104) && v31 == -1)
        {
          v32 = 0;
          *(_BYTE *)(a1 + 104) = 0;
        }
        ++v30;
      }
      while (v29 != *a2);
    }
    *(_QWORD *)(a1 + 96) = **(_QWORD **)(a1 + 48) * **(_QWORD **)(a1 + 24);
    if (!v32)
    {
      *(_QWORD *)(a1 + 88) = -1;
      *(_QWORD *)(a1 + 96) = -1;
    }
  }
  E5RT::TensorDescriptorImpl::ValidateUnknownDimensions(a1);
  return a1;
}

void sub_190FA7024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, E5RT::TensorDataType *a10, char a11)
{
  uint64_t v11;
  void **v12;
  void **v13;
  void *v15;
  void *v16;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a9);
  E5RT::TensorDataType::~TensorDataType(a10);
  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v11 + 56) = v15;
    operator delete(v15);
    v16 = *v12;
    if (!*v12)
    {
LABEL_3:
      std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100]((void **)v11);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v16 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 32) = v16;
  operator delete(v16);
  std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100]((void **)v11);
  _Unwind_Resume(a1);
}

void **std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 40;
      v6 = v3 - 40;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 40;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t E5RT::TensorDescriptorImpl::TensorDescriptorImpl(uint64_t a1, uint64_t *a2, _QWORD *a3, E5RT::TensorDataType *a4, uint64_t a5, uint64_t a6)
{
  void **v12;
  void **v13;
  E5RT::TensorDataType::Impl **v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *exception;
  void *v46;
  E5RT::TensorDataType *v47;
  unsigned int ElementSize;
  __n128 v49[2];
  _QWORD v50[3];
  char v51[8];
  uint64_t v52;

  *(_OWORD *)(a1 + 48) = 0u;
  v12 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  v13 = (void **)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v14 = (E5RT::TensorDataType::Impl **)E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)(a1 + 72), a4);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 96) = a5;
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = a6;
  *(_QWORD *)(a1 + 128) = 0;
  ElementSize = E5RT::TensorDataType::GetElementSize(v14);
  v47 = a4;
  v52 = 1;
  v16 = *a2;
  v15 = a2[1];
  v17 = v15 - *a2;
  v18 = v17 >> 3;
  v19 = *(_BYTE **)(a1 + 24);
  if (v17 >> 3 <= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v19) >> 3))
    goto LABEL_13;
  if (v17 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v20 = *(_BYTE **)(a1 + 32);
  v21 = (char *)operator new(v17);
  v22 = v20 - v19;
  v23 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
  v24 = v23;
  if (v20 != v19)
  {
    if ((unint64_t)(v22 - 8) < 0x58)
    {
      v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        v33 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v24 - 1) = v33;
        v24 -= 8;
      }
      while (v20 != v19);
      goto LABEL_11;
    }
    v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v20 - &v21[v22 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_10;
    v25 = v22 >> 3;
    v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
    v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    v28 = &v20[-v27];
    v24 = &v23[-v27];
    v29 = &v21[8 * v25 - 16];
    v30 = (__int128 *)(v20 - 16);
    v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = *v30;
      *((_OWORD *)v29 - 1) = *(v30 - 1);
      *(_OWORD *)v29 = v32;
      v29 -= 32;
      v30 -= 2;
      v31 -= 4;
    }
    while (v31);
    v20 = v28;
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 32) = v23;
  *(_QWORD *)(a1 + 40) = &v21[8 * v18];
  if (v19)
    operator delete(v19);
LABEL_13:
  std::vector<E5RT::TensorDimensionImpl>::reserve((_QWORD *)a1, v18);
  *(_QWORD *)(a1 + 88) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  if (v15 == v16)
  {
    v42 = E5RT::TensorDataType::GetElementSize((E5RT::TensorDataType::Impl **)v47);
    v43 = *(_QWORD *)(a1 + 96);
    if (v43)
      goto LABEL_24;
LABEL_29:
    *(_QWORD *)(a1 + 96) = v42;
    if (*(_BYTE *)(a1 + 104))
      goto LABEL_26;
LABEL_30:
    *(_QWORD *)(a1 + 88) = -1;
    *(_QWORD *)(a1 + 96) = -1;
    goto LABEL_26;
  }
  v34 = 0;
  v35 = v18 - 1;
  v36 = 1;
  v37 = ElementSize;
  do
  {
    v38 = *(_QWORD *)(*a3 + 8 * v35);
    if (!v38)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v49, "TensorDescriptorImpl");
      std::string::basic_string[abi:ne180100]<0>(v50, "Axis alignment cannot be 0.");
      E5RT::Status::Status(v51, 1, v50);
      E5RT::E5RTError::E5RTError(exception, v49, v51);
    }
    if (v36)
      v37 = (v38 + v52 * v37 - 1) / v38 * v38;
    else
      v37 = 0x7FFFFFFFFFFFFFFFLL;
    v52 = *(_QWORD *)(*a2 + 8 * v35);
    v39 = *(_QWORD *)a1;
    E5RT::TensorDimensionImpl::TensorDimensionImpl(v49, v34, v52, v37);
    std::vector<E5RT::TensorDimensionImpl>::emplace<E5RT::TensorDimensionImpl>((unint64_t *)a1, v39, v49);
    E5RT::TensorDimensionImpl::~TensorDimensionImpl((E5RT::TensorDimensionImpl *)v49);
    std::vector<unsigned long>::insert(v13, *v13, (char *)&v52);
    v40 = *v12;
    v49[0].n128_u64[0] = v37;
    std::vector<long>::insert(v12, v40, v49);
    v41 = v52;
    *(_QWORD *)(a1 + 88) *= v52;
    v36 = *(unsigned __int8 *)(a1 + 104);
    if (*(_BYTE *)(a1 + 104) && v41 == -1)
    {
      v36 = 0;
      *(_BYTE *)(a1 + 104) = 0;
    }
    --v35;
    ++v34;
  }
  while (v35 < v18);
  v42 = *(_QWORD *)*v12 * *(_QWORD *)*v13;
  v43 = *(_QWORD *)(a1 + 96);
  if (!v43)
    goto LABEL_29;
LABEL_24:
  if (v43 < v42)
  {
    v46 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "TensorDescriptorImpl");
    std::string::basic_string[abi:ne180100]<0>(v50, "size must be big enough to host the tensor");
    E5RT::Status::Status(v51, 1, v50);
    E5RT::E5RTError::E5RTError(v46, v49, v51);
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_30;
LABEL_26:
  E5RT::TensorDescriptorImpl::ValidateUnknownDimensions(a1);
  return a1;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  E5RT::TensorDataType::Impl **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t ElementSize;
  unint64_t v38;
  void *exception;
  void *v41;
  void *v42;
  void *v43;
  __n128 v44[2];
  _QWORD v45[3];
  char v46[8];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v13 = *a2;
  v12 = a2[1];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 24) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 40) = v16;
    bzero(v15, v14 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a1 + 32) = v16;
  }
  v18 = *a2;
  v17 = a2[1];
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a1 + 48) = v20;
    v21 = &v20[8 * (v19 >> 3)];
    *(_QWORD *)(a1 + 64) = v21;
    bzero(v20, v19 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a1 + 56) = v21;
  }
  v22 = (E5RT::TensorDataType::Impl **)E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)(a1 + 72), a4);
  *(_QWORD *)(a1 + 96) = a5;
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = a6;
  LODWORD(a5) = E5RT::TensorDataType::GetElementSize(v22);
  v24 = *a2;
  v23 = a2[1];
  v25 = (v23 - *a2) >> 3;
  std::vector<E5RT::TensorDimensionImpl>::reserve((_QWORD *)a1, v25);
  *(_QWORD *)(a1 + 88) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  if (v23 == v24)
  {
    ElementSize = E5RT::TensorDataType::GetElementSize((E5RT::TensorDataType::Impl **)a4);
    v38 = *(_QWORD *)(a1 + 96);
    if (v38)
      goto LABEL_23;
LABEL_30:
    *(_QWORD *)(a1 + 96) = ElementSize;
    if (*(_BYTE *)(a1 + 104))
      goto LABEL_25;
LABEL_31:
    *(_QWORD *)(a1 + 88) = -1;
    *(_QWORD *)(a1 + 96) = -1;
    goto LABEL_25;
  }
  v26 = 0;
  v27 = v25 - 1;
  v28 = 1;
  v29 = 1;
  a5 = a5;
  do
  {
    v30 = *(_QWORD *)(*a3 + 8 * v27);
    if (v30 <= 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "TensorDescriptorImpl");
      std::string::basic_string[abi:ne180100]<0>(v45, "Negative strides not supported yet.");
      E5RT::Status::Status(v46, 1, v45);
      E5RT::E5RTError::E5RTError(exception, v44, v46);
    }
    if (v28)
    {
      v31 = v29 * a5;
      if (a5 == 0x7FFFFFFFFFFFFFFFLL)
        v31 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v31 = 0x7FFFFFFFFFFFFFFFLL;
      if (v30 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v42 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v44, "TensorDescriptorImpl");
        std::string::basic_string[abi:ne180100]<0>(v45, "Invalid stride specified. Stride must be unknown if any inner dimension length is unknown.");
        E5RT::Status::Status(v46, 1, v45);
        E5RT::E5RTError::E5RTError(v42, v44, v46);
      }
    }
    if (v31 > v30)
    {
      v41 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "TensorDescriptorImpl");
      std::string::basic_string[abi:ne180100]<0>(v45, "Specified stride is insufficient to pack elements along axis.");
      E5RT::Status::Status(v46, 1, v45);
      E5RT::E5RTError::E5RTError(v41, v44, v46);
    }
    a5 = *(_QWORD *)(*a3 + 8 * v27);
    v29 = *(_QWORD *)(*a2 + 8 * v27);
    v32 = *(_QWORD *)a1;
    E5RT::TensorDimensionImpl::TensorDimensionImpl(v44, v26, v29, a5);
    std::vector<E5RT::TensorDimensionImpl>::emplace<E5RT::TensorDimensionImpl>((unint64_t *)a1, v32, v44);
    E5RT::TensorDimensionImpl::~TensorDimensionImpl((E5RT::TensorDimensionImpl *)v44);
    v33 = *(_QWORD **)(a1 + 24);
    v34 = v27;
    v33[v34] = v29;
    v35 = *(_QWORD **)(a1 + 48);
    v35[v34] = a5;
    *(_QWORD *)(a1 + 88) *= v29;
    v28 = *(unsigned __int8 *)(a1 + 104);
    if (v29 == -1 && v28 != 0)
    {
      v28 = 0;
      *(_BYTE *)(a1 + 104) = 0;
    }
    --v27;
    ++v26;
  }
  while (v27 < v25);
  ElementSize = *v35 * *v33;
  v38 = *(_QWORD *)(a1 + 96);
  if (!v38)
    goto LABEL_30;
LABEL_23:
  if (v38 < ElementSize)
  {
    v43 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v44, "TensorDescriptorImpl");
    std::string::basic_string[abi:ne180100]<0>(v45, "size must be big enough to host the tensor");
    E5RT::Status::Status(v46, 1, v45);
    E5RT::E5RTError::E5RTError(v43, v44, v46);
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_31;
LABEL_25:
  E5RT::TensorDescriptorImpl::ValidateUnknownDimensions(a1);
  return a1;
}

void sub_190FA7518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  E5RT::TensorDataType *v31;
  void *v33;
  void *v34;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a12);
  E5RT::TensorDataType::~TensorDataType(v31);
  v33 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v33;
    operator delete(v33);
    v34 = *v29;
    if (!*v29)
    {
LABEL_3:
      std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100]((void **)v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = *v29;
    if (!*v29)
      goto LABEL_3;
  }
  *(_QWORD *)(v28 + 32) = v34;
  operator delete(v34);
  std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100]((void **)v28);
  _Unwind_Resume(a1);
}

void sub_190FA7AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, E5RT::TensorDataType *a11, void **a12, void **a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void **v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  void *v33;
  char *v34;
  char *v35;
  void *v36;
  char *v37;
  char *v38;
  void (**v39)(char *);
  BOOL v40;

  v29 = (std::__shared_weak_count *)v27[16];
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  E5RT::TensorDataType::~TensorDataType(a11);
  v32 = *a12;
  if (*a12)
  {
    v27[7] = v32;
    operator delete(v32);
    v33 = *a13;
    if (!*a13)
    {
LABEL_8:
      v34 = (char *)*v27;
      if (!*v27)
        goto LABEL_9;
      goto LABEL_12;
    }
  }
  else
  {
    v33 = *a13;
    if (!*a13)
      goto LABEL_8;
  }
  v27[4] = v33;
  operator delete(v33);
  v34 = (char *)*v27;
  if (!*v27)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_12:
  v35 = (char *)v27[1];
  v36 = v34;
  if (v35 != v34)
  {
    v37 = v35 - 40;
    v38 = v35 - 40;
    do
    {
      v39 = *(void (***)(char *))v38;
      v38 -= 40;
      (*v39)(v37);
      v40 = v37 == v34;
      v37 = v38;
    }
    while (!v40);
    v36 = *v27;
  }
  v27[1] = v34;
  operator delete(v36);
  _Unwind_Resume(a1);
}

uint64_t E5RT::TensorDescriptorImpl::operator[](_QWORD *a1, unint64_t a2)
{
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "operator[]");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid ND axis index (>= tensor rank).");
    E5RT::Status::Status(v5, 1, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return *a1 + 40 * a2;
}

void sub_190FA7D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDescriptorImpl::GetNumElements(E5RT::TensorDescriptorImpl *this)
{
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!*((_BYTE *)this + 104))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetNumElements");
    std::string::basic_string[abi:ne180100]<0>(v3, "Tensor number of elements cannot be queried because all dimensions are not known.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return *((_QWORD *)this + 11);
}

void sub_190FA7E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDescriptorImpl::GetByteOffset(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v9;
  void *exception;
  void *v11;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  if (!*(_BYTE *)(a1 + 104))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "GetByteOffset");
    std::string::basic_string[abi:ne180100]<0>(v12, "Tensor byte offset cannot be queried because all dimensions are not known.");
    E5RT::Status::Status(v13, 2, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  v3 = *a2;
  v2 = a2[1];
  v4 = (v2 - *a2) >> 3;
  if (v4 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
  {
    v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "GetByteOffset");
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid co-ordinate specification.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(v11, v14, v13);
  }
  if (v2 == v3)
    return 0;
  v5 = 0;
  v6 = 0;
  if (v4 <= 1)
    v4 = 1;
  do
  {
    v7 = *(_QWORD *)(v3 + 8 * v5);
    if (v7 >= *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v5))
    {
      v9 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v14, "GetByteOffset");
      std::string::basic_string[abi:ne180100]<0>(v12, "Invalid element co-ordinate");
      E5RT::Status::Status(v13, 4, v12);
      E5RT::E5RTError::E5RTError(v9, v14, v13);
    }
    v6 += *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v5++) * v7;
  }
  while (v4 != v5);
  return v6;
}

void sub_190FA8114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if ((v23 & 1) != 0)
    __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::TensorDescriptor::TensorDescriptor(E5RT::TensorDescriptor *this)
{
  _QWORD *result;

  result = E5RT::OperandDescriptor::OperandDescriptor(this);
  *result = &off_1E2D5AD70;
  result[1] = 0;
  return result;
}

{
  _QWORD *result;

  result = E5RT::OperandDescriptor::OperandDescriptor(this);
  *result = &off_1E2D5AD70;
  result[1] = 0;
  return result;
}

_QWORD *E5RT::TensorDescriptor::TensorDescriptor(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::OperandDescriptor::OperandDescriptor(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D5AD70;
  result[1] = v4;
  return result;
}

{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::OperandDescriptor::OperandDescriptor(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D5AD70;
  result[1] = v4;
  return result;
}

uint64_t E5RT::TensorDescriptor::operator[](uint64_t a1, unint64_t a2)
{
  return E5RT::TensorDescriptorImpl::operator[](*(_QWORD **)(a1 + 8), a2);
}

uint64_t E5RT::TensorDescriptor::GetComponentAxis(E5RT::TensorDescriptor *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 112);
}

uint64_t E5RT::TensorDescriptor::GetNumElements(E5RT::TensorDescriptorImpl **this)
{
  return E5RT::TensorDescriptorImpl::GetNumElements(this[1]);
}

uint64_t E5RT::TensorDescriptor::GetByteOffset(uint64_t a1, uint64_t *a2)
{
  return E5RT::TensorDescriptorImpl::GetByteOffset(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *E5RT::TensorDescriptor::CreateTensorDescSlice@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  void *v17;
  void *exception;
  void *v19;
  _QWORD v20[3];
  _BYTE v21[8];
  _QWORD v22[3];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unint64_t **)a2;
  v6 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v7 = *(unint64_t **)(v4 + 24);
  v8 = *(_QWORD **)(v4 + 32);
  if (v6 != v8 - v7)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "CreateTensorDescSlice");
    std::string::basic_string[abi:ne180100]<0>(v20, "Invalid offset vector.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  v9 = (unint64_t *)*a3;
  if (v6 != (a3[1] - *a3) >> 3)
  {
    v19 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "CreateTensorDescSlice");
    std::string::basic_string[abi:ne180100]<0>(v20, "Invalid length vector.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(v19, v22, v21);
  }
  if (v8 != v7)
  {
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v7++;
      v13 = v12 >= v10;
      v14 = v12 - v10;
      if (!v13)
      {
        v16 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v22, "CreateTensorDescSlice");
        std::string::basic_string[abi:ne180100]<0>(v20, "Invalid offset component.");
        E5RT::Status::Status(v21, 1, v20);
        E5RT::E5RTError::E5RTError(v16, v22, v21);
      }
      if (*v9 > v14)
      {
        v17 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v22, "CreateTensorDescSlice");
        std::string::basic_string[abi:ne180100]<0>(v20, "Invalid length component.");
        E5RT::Status::Status(v21, 1, v20);
        E5RT::E5RTError::E5RTError(v17, v22, v21);
      }
      ++v9;
      --v6;
    }
    while (v6);
  }
  return E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides((E5RT::TensorDataType::Impl **)(v4 + 72), a3, (_QWORD *)(v4 + 48), a4);
}

void sub_190FA859C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if ((v23 & 1) != 0)
    __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides@<X0>(E5RT::TensorDataType::Impl **this@<X2>, uint64_t *a2@<X0>, _QWORD *a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a3[1] - *a3 != a2[1] - *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "CreateTensorDescriptorWithStrides");
    std::string::basic_string[abi:ne180100]<0>(v12, "Stride and length must be specified for all dimensions.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  v8 = operator new();
  E5RT::TensorDescriptorImpl::TensorDescriptorImpl(v8, a2, a3, (E5RT::TensorDataType *)this, 0, 0);
  v9 = (_QWORD *)operator new();
  v14[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v9);
  *v9 = &off_1E2D5AD70;
  v9[1] = v8;
  *a4 = v9;
  return result;
}

void sub_190FA87E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  uint64_t v14;

  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_190FA881C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190FA8830(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x19401CD90](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_190FA8858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::TensorDescriptor::CreateTensorDescSlice(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  void *v18;
  void *exception;
  _QWORD v20[3];
  char v21[8];
  _QWORD v22[3];
  char *v23;
  char *v24;
  char *v25;

  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v5 + 24);
  v6 = *(_QWORD *)(v5 + 32);
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  if (v6 == v7)
  {
    v10 = 0;
    if (v9 == (a2[1] - *a2) >> 3)
      goto LABEL_12;
LABEL_15:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "CreateTensorDescSlice");
    std::string::basic_string[abi:ne180100]<0>(v20, "Invalid offset vector.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (v8 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v10 = (char *)operator new(v6 - v7);
  v23 = v10;
  v25 = &v10[8 * v9];
  bzero(v10, v8 & 0xFFFFFFFFFFFFFFF8);
  v24 = v25;
  v11 = *a2;
  if (v9 != (a2[1] - *a2) >> 3)
    goto LABEL_15;
  v12 = 0;
  if (v9 <= 1)
    v13 = 1;
  else
    v13 = v9;
  do
  {
    v14 = *(_QWORD *)(v11 + 8 * v12);
    v15 = *(_QWORD *)(v7 + 8 * v12);
    v16 = v15 >= v14;
    v17 = v15 - v14;
    if (!v16)
    {
      v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v22, "CreateTensorDescSlice");
      std::string::basic_string[abi:ne180100]<0>(v20, "Invalid offset component.");
      E5RT::Status::Status(v21, 1, v20);
      E5RT::E5RTError::E5RTError(v18, v22, v21);
    }
    *(_QWORD *)&v10[8 * v12++] = v17;
  }
  while (v13 != v12);
LABEL_12:
  E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides((E5RT::TensorDataType::Impl **)(v5 + 72), (uint64_t *)&v23, (_QWORD *)(v5 + 48), a3);
  if (v10)
    operator delete(v10);
}

void sub_190FA8ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

E5RT::TensorDescriptorImpl **std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](E5RT::TensorDescriptorImpl **a1)
{
  E5RT::TensorDescriptorImpl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

_QWORD *E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments@<X0>(E5RT::TensorDataType::Impl **this@<X2>, uint64_t *a2@<X0>, _QWORD *a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a3[1] - *a3 != a2[1] - *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "CreateTensorDescriptorWithAlignments");
    std::string::basic_string[abi:ne180100]<0>(v12, "Alignment and length must be specified for all dimensions.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  v8 = operator new();
  E5RT::TensorDescriptorImpl::TensorDescriptorImpl(v8, a2, a3, (E5RT::TensorDataType *)this, 0, 0);
  v9 = (_QWORD *)operator new();
  v14[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v9);
  *v9 = &off_1E2D5AD70;
  v9[1] = v8;
  *a4 = v9;
  return result;
}

void sub_190FA8D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  uint64_t v14;

  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_190FA8D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190FA8DB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x19401CD90](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_190FA8DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignmentsAndSize@<X0>(E5RT::TensorDataType::Impl **this@<X3>, uint64_t *a2@<X0>, _QWORD *a3@<X1>, uint64_t a4@<X2>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a3[1] - *a3 != a2[1] - *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "CreateTensorDescriptorWithAlignmentsAndSize");
    std::string::basic_string[abi:ne180100]<0>(v14, "Alignment and length must be specified for all dimensions.");
    E5RT::Status::Status(v15, 1, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v10 = operator new();
  E5RT::TensorDescriptorImpl::TensorDescriptorImpl(v10, a2, a3, (E5RT::TensorDataType *)this, a4, 0);
  v11 = (_QWORD *)operator new();
  v16[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v11);
  *v11 = &off_1E2D5AD70;
  v11[1] = v10;
  *a5 = v11;
  return result;
}

void sub_190FA8F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  uint64_t v14;

  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_190FA8FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190FA8FE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x19401CD90](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_190FA9008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesComponentAxis@<X0>(E5RT::TensorDataType::Impl **this@<X2>, uint64_t *a2@<X0>, _QWORD *a3@<X1>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a3[1] - *a3 != a2[1] - *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "CreateTensorDescriptorWithStridesComponentAxis");
    std::string::basic_string[abi:ne180100]<0>(v14, "Stride and length must be specified for all dimensions.");
    E5RT::Status::Status(v15, 1, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v10 = operator new();
  E5RT::TensorDescriptorImpl::TensorDescriptorImpl(v10, a2, a3, (E5RT::TensorDataType *)this, 0, a4);
  v11 = (_QWORD *)operator new();
  v16[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v11);
  *v11 = &off_1E2D5AD70;
  v11[1] = v10;
  *a5 = v11;
  return result;
}

void sub_190FA91C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  uint64_t v14;

  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_190FA91FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190FA9210(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x19401CD90](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_190FA9238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesSizeComponentAxis@<X0>(E5RT::TensorDataType::Impl **this@<X3>, uint64_t *a2@<X0>, _QWORD *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  void *exception;
  _QWORD v16[3];
  _BYTE v17[8];
  _QWORD v18[3];

  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a3[1] - *a3 != a2[1] - *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "CreateTensorDescriptorWithStridesSizeComponentAxis");
    std::string::basic_string[abi:ne180100]<0>(v16, "Stride and length must be specified for all dimensions.");
    E5RT::Status::Status(v17, 1, v16);
    E5RT::E5RTError::E5RTError(exception, v18, v17);
  }
  v12 = operator new();
  E5RT::TensorDescriptorImpl::TensorDescriptorImpl(v12, a2, a3, (E5RT::TensorDataType *)this, a4, a5);
  v13 = (_QWORD *)operator new();
  v18[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v13);
  *v13 = &off_1E2D5AD70;
  v13[1] = v12;
  *a6 = v13;
  return result;
}

void sub_190FA9404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  uint64_t v14;

  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_190FA9438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190FA944C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x19401CD90](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_190FA9474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::TensorDescriptor::SetDefaultTensorShape(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v2 = *(_QWORD *)(a1 + 8);
  std::allocate_shared[abi:ne180100]<std::vector<unsigned long>,std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const&,void>(a2, &v10);
  v3 = v10;
  v10 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 128);
  *(_OWORD *)(v2 + 120) = v3;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (!*((_QWORD *)&v10 + 1))
      return;
  }
  else
  {
LABEL_5:
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (!*((_QWORD *)&v10 + 1))
      return;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::TensorDescriptor::TryGetDefaultTensorShape@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(v2 + 120);
  v3 = *(_QWORD *)(v2 + 128);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

uint64_t E5RT::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;
  size_t v7;
  const void *v8;
  const void *v9;
  size_t v10;
  const void *v11;

  if (E5RT::operator!=(*(_QWORD *)(a1 + 8) + 72, *(_QWORD *)(a2 + 8) + 72))
    return 0;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (const void *)v4[3];
  v7 = v4[4] - (_QWORD)v6;
  v8 = (const void *)v5[3];
  if (v7 != v5[4] - (_QWORD)v8)
    return 0;
  if (!memcmp(v6, v8, v7)
    && (v9 = (const void *)v4[6], v10 = v4[7] - (_QWORD)v9, v11 = (const void *)v5[6], v10 == v5[7] - (_QWORD)v11)
    && !memcmp(v9, v11, v10))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t E5RT::operator!=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;
  size_t v7;
  const void *v8;
  const void *v9;
  size_t v10;
  const void *v11;
  uint64_t result;

  if (E5RT::operator!=(*(_QWORD *)(a1 + 8) + 72, *(_QWORD *)(a2 + 8) + 72))
    return 1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (const void *)v4[3];
  v7 = v4[4] - (_QWORD)v6;
  v8 = (const void *)v5[3];
  if (v7 != v5[4] - (_QWORD)v8)
    return 1;
  if (memcmp(v6, v8, v7))
    return 1;
  v9 = (const void *)v4[6];
  v10 = v4[7] - (_QWORD)v9;
  v11 = (const void *)v5[6];
  if (v10 != v5[7] - (_QWORD)v11)
    return 1;
  result = memcmp(v9, v11, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<unsigned long>,std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;

  result = operator new(0x30uLL);
  v5 = result;
  result[2] = 0;
  result[3] = 0;
  v6 = result + 3;
  *result = &unk_1E2D36658;
  result[1] = 0;
  result[4] = 0;
  result[5] = 0;
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v8)
  {
    if (v8 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    v5[3] = v9;
    v10 = &v9[8 * (v8 >> 3)];
    v5[5] = v10;
    result = memcpy(v9, v7, v8);
    v5[4] = v10;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_190FA9794(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<unsigned long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D36658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D36658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<std::vector<unsigned long>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<E5RT::TensorDimensionImpl>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<E5RT::TensorDimensionImpl>::emplace_back<E5RT::TensorDimensionImpl>(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __n128 *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 *v22;
  __n128 v23;
  void (***v24)(_QWORD, __n128);
  void (***v25)(_QWORD, __n128);
  void (***v26)(_QWORD, __n128);
  void (***v27)(_QWORD, __n128);
  void (**v28)(_QWORD, __n128);
  BOOL v29;

  v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    v6 = *(__n128 **)a1;
    v5 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      v12 = 0x999999999999999ALL * (((char *)v4 - (char *)v6) >> 3);
      if (v4 == v6)
        v12 = 1;
      if (v12 >= 0x666666666666667)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = v12 >> 2;
      v14 = 40 * v12;
      v15 = (char *)operator new(40 * v12);
      v16 = v15;
      v17 = (__n128 *)&v15[40 * v13];
      v18 = &v15[v14];
      if (v4 == v5)
      {
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v18;
      }
      else
      {
        v19 = ((char *)v4 - (char *)v5) / 40;
        v20 = (char *)v17 + 40 * v19;
        v21 = 40 * v19;
        v22 = v17;
        do
        {
          v23 = E5RT::TensorDimensionImpl::TensorDimensionImpl(v22, v5);
          v22 = (__n128 *)((char *)v22 + 40);
          v5 = (__n128 *)((char *)v5 + 40);
          v21 -= 40;
        }
        while (v21);
        v6 = *(__n128 **)a1;
        v24 = *(void (****)(_QWORD, __n128))(a1 + 8);
        v25 = *(void (****)(_QWORD, __n128))(a1 + 16);
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 24) = v18;
        if (v25 != v24)
        {
          v26 = v25 - 5;
          v27 = v26;
          do
          {
            v28 = *v27;
            v27 -= 5;
            (*v28)(v26, v23);
            v29 = v26 == v24;
            v26 = v27;
          }
          while (!v29);
        }
      }
      if (v6)
        operator delete(v6);
      v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -v9;
      if (v5 == v4)
      {
        v11 = (__n128 *)((char *)v5 - 40 * v9);
      }
      else
      {
        do
        {
          E5RT::TensorDimensionImpl::operator=((__n128 *)((char *)v5 + 40 * v10), v5);
          v5 = (__n128 *)((char *)v5 + 40);
        }
        while (v5 != v4);
        v4 = *(__n128 **)(a1 + 8);
        v11 = (__n128 *)((char *)v5 + 40 * v10);
      }
      *(_QWORD *)(a1 + 8) = (char *)v4 + 40 * v10;
      *(_QWORD *)(a1 + 16) = v11;
      v4 = v11;
    }
  }
  E5RT::TensorDimensionImpl::TensorDimensionImpl(v4, a2);
  *(_QWORD *)(a1 + 16) += 40;
}

void sub_190FA9A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<E5RT::TensorDimensionImpl>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(E5RT::TensorDescriptorImpl *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void *v9;
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  void (**v12)(_QWORD);
  BOOL v13;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDescriptorImpl *)((char *)this + 72));
    v5 = (void *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDescriptorImpl *)((char *)this + 72));
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
LABEL_6:
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
  v7 = *(void (****)(_QWORD))this;
  if (*(_QWORD *)this)
  {
    v8 = (void (***)(_QWORD))*((_QWORD *)this + 1);
    v9 = *(void **)this;
    if (v8 != v7)
    {
      v10 = v8 - 5;
      v11 = v8 - 5;
      do
      {
        v12 = *v11;
        v11 -= 5;
        (*v12)(v10);
        v13 = v10 == v7;
        v10 = v11;
      }
      while (!v13);
      v9 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v7;
    operator delete(v9);
  }
}

_QWORD *E5RT::TensorDimension::TensorDimension(_QWORD *this)
{
  *this = &off_1E2D5AC40;
  return this;
}

{
  *this = &off_1E2D5AC40;
  return this;
}

void E5RT::TensorDimensionImpl::~TensorDimensionImpl(E5RT::TensorDimensionImpl *this)
{
  JUMPOUT(0x19401CD90);
}

void E5RT::TensorDimension::~TensorDimension(E5RT::TensorDimension *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::TensorDimension::GetDimIndex(E5RT::TensorDimension *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16);
}

uint64_t E5RT::TensorDimension::GetLength(E5RT::TensorDimension *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

uint64_t E5RT::TensorDimension::GetStride(E5RT::TensorDimension *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32);
}

void E5RT::ElementwiseOperationImplementation<float,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  char *DataSpan;
  char *v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  _QWORD *v69;
  char *v70;
  void *v71;
  uint64_t v72;
  void *exception;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t NumElements;
  _QWORD *v104;
  unsigned int NumComponents;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  E5RT::TensorDataType::Impl *v111[2];
  _QWORD v112[3];
  _QWORD v113[3];
  _QWORD v114[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  ElementSize = E5RT::TensorDataType::GetElementSize(v111);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v107 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_35;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_37;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_36;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        v60 = v20[v19];
        v61 = v23[v19];
        v62 = 4 * NumComponents * v26;
        if (NumElements / v26 <= 1)
          v63 = 1;
        else
          v63 = NumElements / v26;
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    v52 = *(_QWORD *)(v25 + 8 * v19);
    v53 = v52 * v28;
    v54 = v30 * v52;
    v55 = Rank - 3;
    while (1)
    {
      v56 = v20[v55];
      v57 = v56 - v53;
      v58 = v23[v55];
      if (v57 != v58 - v54)
        break;
      v59 = *(_QWORD *)(v25 + 8 * v55);
      v54 = v58 * v59;
      v53 = v59 * v56;
      v33 = v55-- <= 0;
      if (v33)
        goto LABEL_27;
    }
    if (v21 < 1)
      goto LABEL_36;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_37:
    v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_36;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v23[v35];
      v50 = 4 * NumComponents * v47;
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_35:
  if (Rank)
    goto LABEL_36;
  v64 = 0;
LABEL_41:
  v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v67 = *(const void **)v65;
  v66 = *(_QWORD *)(v65 + 8);
  v68 = v66 - *(_QWORD *)v65;
  if (v66 == *(_QWORD *)v65)
  {
    v104 = 0;
    v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = operator new(v66 - *(_QWORD *)v65);
    v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    v109 = v70;
  }
  v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      v72 = *(_QWORD *)(a5 + 24);
      if (!v72)
        goto LABEL_89;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104)
        break;
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      if (v104[v75])
      {
        v76 = 0;
        v77 = *(_QWORD *)(*TensorStrides + 8 * v75);
        v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          v79 = *(_QWORD *)(a5 + 24);
          if (!v79)
            goto LABEL_89;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75])
            goto LABEL_53;
        }
      }
      break;
    case 2uLL:
      sub_190FAA64C((_QWORD *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_190FAA928(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_190FAAC18(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      v81 = (_QWORD *)*TensorStrides;
      v82 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
LABEL_82:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        v84 = v80 >> 3;
        v85 = (v80 >> 3) - 5;
        v86 = (v80 >> 3) - 1;
        v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            v88 = 0;
            v89 = v86;
            v90 = v81[v89];
            v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              v92 = *(_QWORD *)(a5 + 24);
              if (!v92)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85])
                goto LABEL_53;
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v101 = v85;
          v102 = v104[v85];
          v95 = v81[v85];
          v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            v97 = v87;
            v98 = NumElements / v87;
            do
            {
              sub_190FAAC18(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_190FAA4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a16;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FAA64C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FAA8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FAA928(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FAA64C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FAABA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FAAC18(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FAA928(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FAAE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_fEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FABA38((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FABD14(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FAC004(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FAC004(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FAB84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FABA38(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FABCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FABD14(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FABA38(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FABF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FAC004(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FABD14(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FAC27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FACE24((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FAD100(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FAD3F0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FAD3F0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FACC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FACE24(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FAD08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FAD100(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FACE24(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FAD37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FAD3F0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FAD100(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FAD668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FAE210((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FAE4EC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FAE7DC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FAE7DC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FAE024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FAE210(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FAE478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FAE4EC(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FAE210(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FAE768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FAE7DC(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FAE4EC(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FAEA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FAF5FC((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FAF8D8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FAFBC8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FAFBC8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FAF410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FAF5FC(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FAF864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FAF8D8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FAF5FC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FAFB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FAFBC8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FAF8D8(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FAFE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FB09E8((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FB0CC4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FB0FB4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FB0FB4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FB07FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FB09E8(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FB0C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FB0CC4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FB09E8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FB0F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FB0FB4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FB0CC4(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FB122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FB1DD4((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FB20B0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FB23A0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FB23A0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FB1BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FB1DD4(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FB203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FB20B0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FB1DD4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FB232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FB23A0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FB20B0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FB2618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FB31C0((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FB349C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FB378C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FB378C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FB2FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FB31C0(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FB3428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FB349C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FB31C0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FB3718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FB378C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FB349C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FB3A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIfDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FB45AC((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FB4888(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FB4B78(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FB4B78(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FB43C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FB45AC(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FB4814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FB4888(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FB45AC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FB4B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FB4B78(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FB4888(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FB4DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_DF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  char *DataSpan;
  char *v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  _QWORD *v69;
  char *v70;
  void *v71;
  uint64_t v72;
  void *exception;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t NumElements;
  _QWORD *v104;
  unsigned int NumComponents;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  E5RT::TensorDataType::Impl *v111[2];
  _QWORD v112[3];
  _QWORD v113[3];
  _QWORD v114[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  ElementSize = E5RT::TensorDataType::GetElementSize(v111);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v107 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_35;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_37;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_36;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        v60 = v20[v19];
        v61 = v23[v19];
        v62 = 2 * NumComponents * v26;
        if (NumElements / v26 <= 1)
          v63 = 1;
        else
          v63 = NumElements / v26;
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    v52 = *(_QWORD *)(v25 + 8 * v19);
    v53 = v52 * v28;
    v54 = v30 * v52;
    v55 = Rank - 3;
    while (1)
    {
      v56 = v20[v55];
      v57 = v56 - v53;
      v58 = v23[v55];
      if (v57 != v58 - v54)
        break;
      v59 = *(_QWORD *)(v25 + 8 * v55);
      v54 = v58 * v59;
      v53 = v59 * v56;
      v33 = v55-- <= 0;
      if (v33)
        goto LABEL_27;
    }
    if (v21 < 1)
      goto LABEL_36;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_37:
    v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_36;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v23[v35];
      v50 = 2 * NumComponents * v47;
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_35:
  if (Rank)
    goto LABEL_36;
  v64 = 0;
LABEL_41:
  v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v67 = *(const void **)v65;
  v66 = *(_QWORD *)(v65 + 8);
  v68 = v66 - *(_QWORD *)v65;
  if (v66 == *(_QWORD *)v65)
  {
    v104 = 0;
    v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = operator new(v66 - *(_QWORD *)v65);
    v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    v109 = v70;
  }
  v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      v72 = *(_QWORD *)(a5 + 24);
      if (!v72)
        goto LABEL_89;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104)
        break;
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      if (v104[v75])
      {
        v76 = 0;
        v77 = *(_QWORD *)(*TensorStrides + 8 * v75);
        v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          v79 = *(_QWORD *)(a5 + 24);
          if (!v79)
            goto LABEL_89;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75])
            goto LABEL_53;
        }
      }
      break;
    case 2uLL:
      sub_190FB58C4((_QWORD *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_190FB5BA0(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_190FB5E90(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      v81 = (_QWORD *)*TensorStrides;
      v82 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
LABEL_82:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        v84 = v80 >> 3;
        v85 = (v80 >> 3) - 5;
        v86 = (v80 >> 3) - 1;
        v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            v88 = 0;
            v89 = v86;
            v90 = v81[v89];
            v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              v92 = *(_QWORD *)(a5 + 24);
              if (!v92)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85])
                goto LABEL_53;
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v101 = v85;
          v102 = v104[v85];
          v95 = v81[v85];
          v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            v97 = v87;
            v98 = NumElements / v87;
            do
            {
              sub_190FB5E90(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_190FB5734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a16;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FB58C4(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FB5B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FB5BA0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FB58C4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FB5E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FB5E90(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FB5BA0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FB6108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIjDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FB6CB0((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FB6F8C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FB727C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FB727C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FB6AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FB6CB0(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FB6F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FB6F8C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FB6CB0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FB7208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FB727C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FB6F8C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FB74F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIiDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FB809C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FB8378(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FB8668(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FB8668(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FB7EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FB809C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FB8304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FB8378(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FB809C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FB85F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FB8668(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FB8378(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FB88E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationItDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FB9488((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FB9764(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FB9A54(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FB9A54(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FB929C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FB9488(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FB96F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FB9764(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FB9488(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FB99E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FB9A54(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FB9764(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FB9CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIsDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FBA874((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FBAB50(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FBAE40(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FBAE40(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FBA688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FBA874(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FBAADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FBAB50(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FBA874(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FBADCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FBAE40(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FBAB50(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FBB0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIhDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FBBC60((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FBBF3C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FBC22C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FBC22C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FBBA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FBBC60(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FBBEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FBBF3C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FBBC60(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FBC1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FBC22C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FBBF3C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FBC4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIaDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FBD04C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FBD328(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FBD618(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FBD618(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FBCE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FBD04C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FBD2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FBD328(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FBD04C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FBD5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FBD618(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FBD328(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FBD890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FBE438((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FBE714(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FBEA04(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FBEA04(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FBE24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FBE438(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FBE6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FBE714(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FBE438(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FBE990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FBEA04(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FBE714(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FBEC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_jEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FBF824((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FBFB00(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FBFDF0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FBFDF0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FBF638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FBF824(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FBFA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FBFB00(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FBF824(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FBFD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FBFDF0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FBFB00(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC0068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  char *DataSpan;
  char *v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  _QWORD *v69;
  char *v70;
  void *v71;
  uint64_t v72;
  void *exception;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t NumElements;
  _QWORD *v104;
  unsigned int NumComponents;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  E5RT::TensorDataType::Impl *v111[2];
  _QWORD v112[3];
  _QWORD v113[3];
  _QWORD v114[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  ElementSize = E5RT::TensorDataType::GetElementSize(v111);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v107 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_35;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_37;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_36;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        v60 = v20[v19];
        v61 = v23[v19];
        v62 = 4 * NumComponents * v26;
        if (NumElements / v26 <= 1)
          v63 = 1;
        else
          v63 = NumElements / v26;
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    v52 = *(_QWORD *)(v25 + 8 * v19);
    v53 = v52 * v28;
    v54 = v30 * v52;
    v55 = Rank - 3;
    while (1)
    {
      v56 = v20[v55];
      v57 = v56 - v53;
      v58 = v23[v55];
      if (v57 != v58 - v54)
        break;
      v59 = *(_QWORD *)(v25 + 8 * v55);
      v54 = v58 * v59;
      v53 = v59 * v56;
      v33 = v55-- <= 0;
      if (v33)
        goto LABEL_27;
    }
    if (v21 < 1)
      goto LABEL_36;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_37:
    v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_36;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v23[v35];
      v50 = 4 * NumComponents * v47;
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_35:
  if (Rank)
    goto LABEL_36;
  v64 = 0;
LABEL_41:
  v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v67 = *(const void **)v65;
  v66 = *(_QWORD *)(v65 + 8);
  v68 = v66 - *(_QWORD *)v65;
  if (v66 == *(_QWORD *)v65)
  {
    v104 = 0;
    v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = operator new(v66 - *(_QWORD *)v65);
    v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    v109 = v70;
  }
  v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      v72 = *(_QWORD *)(a5 + 24);
      if (!v72)
        goto LABEL_89;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104)
        break;
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      if (v104[v75])
      {
        v76 = 0;
        v77 = *(_QWORD *)(*TensorStrides + 8 * v75);
        v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          v79 = *(_QWORD *)(a5 + 24);
          if (!v79)
            goto LABEL_89;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75])
            goto LABEL_53;
        }
      }
      break;
    case 2uLL:
      sub_190FC0B3C((_QWORD *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_190FC0E18(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_190FC1108(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      v81 = (_QWORD *)*TensorStrides;
      v82 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
LABEL_82:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        v84 = v80 >> 3;
        v85 = (v80 >> 3) - 5;
        v86 = (v80 >> 3) - 1;
        v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            v88 = 0;
            v89 = v86;
            v90 = v81[v89];
            v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              v92 = *(_QWORD *)(a5 + 24);
              if (!v92)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85])
                goto LABEL_53;
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v101 = v85;
          v102 = v104[v85];
          v95 = v81[v85];
          v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            v97 = v87;
            v98 = NumElements / v87;
            do
            {
              sub_190FC1108(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_190FC09AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a16;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FC0B3C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FC0DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FC0E18(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FC0B3C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FC1094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FC1108(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FC0E18(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC1380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FC1F28((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FC2204(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FC24F4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FC24F4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FC1D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FC1F28(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FC2190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FC2204(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FC1F28(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FC2480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FC24F4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FC2204(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC276C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FC3314((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FC35F0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FC38E0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FC38E0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FC3128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FC3314(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FC357C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FC35F0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FC3314(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FC386C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FC38E0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FC35F0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC3B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FC4700((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FC49DC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FC4CCC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FC4CCC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FC4514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FC4700(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FC4968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FC49DC(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FC4700(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FC4C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FC4CCC(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FC49DC(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC4F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FC5AEC((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FC5DC8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FC60B8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FC60B8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FC5900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FC5AEC(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FC5D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FC5DC8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FC5AEC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FC6044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FC60B8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FC5DC8(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC6330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FC6ED8((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FC71B4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FC74A4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FC74A4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FC6CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FC6ED8(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FC7140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FC71B4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FC6ED8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FC7430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FC74A4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FC71B4(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC771C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FC82C4((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FC85A0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FC8890(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FC8890(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FC80D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FC82C4(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FC852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FC85A0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FC82C4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FC881C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FC8890(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FC85A0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC8B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_iEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FC96B0((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FC998C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FC9C7C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FC9C7C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FC94C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FC96B0(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FC9918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FC998C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FC96B0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FC9C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FC9C7C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FC998C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FC9EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FCAA9C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FCAD78(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FCB068(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FCB068(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FCA8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FCAA9C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FCAD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FCAD78(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FCAA9C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FCAFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FCB068(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FCAD78(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FCB2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  char *DataSpan;
  char *v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  _QWORD *v69;
  char *v70;
  void *v71;
  uint64_t v72;
  void *exception;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t NumElements;
  _QWORD *v104;
  unsigned int NumComponents;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  E5RT::TensorDataType::Impl *v111[2];
  _QWORD v112[3];
  _QWORD v113[3];
  _QWORD v114[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  ElementSize = E5RT::TensorDataType::GetElementSize(v111);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v107 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_35;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_37;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_36;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        v60 = v20[v19];
        v61 = v23[v19];
        v62 = 4 * NumComponents * v26;
        if (NumElements / v26 <= 1)
          v63 = 1;
        else
          v63 = NumElements / v26;
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    v52 = *(_QWORD *)(v25 + 8 * v19);
    v53 = v52 * v28;
    v54 = v30 * v52;
    v55 = Rank - 3;
    while (1)
    {
      v56 = v20[v55];
      v57 = v56 - v53;
      v58 = v23[v55];
      if (v57 != v58 - v54)
        break;
      v59 = *(_QWORD *)(v25 + 8 * v55);
      v54 = v58 * v59;
      v53 = v59 * v56;
      v33 = v55-- <= 0;
      if (v33)
        goto LABEL_27;
    }
    if (v21 < 1)
      goto LABEL_36;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_37:
    v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_36;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v23[v35];
      v50 = 4 * NumComponents * v47;
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_35:
  if (Rank)
    goto LABEL_36;
  v64 = 0;
LABEL_41:
  v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v67 = *(const void **)v65;
  v66 = *(_QWORD *)(v65 + 8);
  v68 = v66 - *(_QWORD *)v65;
  if (v66 == *(_QWORD *)v65)
  {
    v104 = 0;
    v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = operator new(v66 - *(_QWORD *)v65);
    v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    v109 = v70;
  }
  v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      v72 = *(_QWORD *)(a5 + 24);
      if (!v72)
        goto LABEL_89;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104)
        break;
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      if (v104[v75])
      {
        v76 = 0;
        v77 = *(_QWORD *)(*TensorStrides + 8 * v75);
        v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          v79 = *(_QWORD *)(a5 + 24);
          if (!v79)
            goto LABEL_89;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75])
            goto LABEL_53;
        }
      }
      break;
    case 2uLL:
      sub_190FCBDB4((_QWORD *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_190FCC090(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_190FCC380(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      v81 = (_QWORD *)*TensorStrides;
      v82 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
LABEL_82:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        v84 = v80 >> 3;
        v85 = (v80 >> 3) - 5;
        v86 = (v80 >> 3) - 1;
        v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            v88 = 0;
            v89 = v86;
            v90 = v81[v89];
            v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              v92 = *(_QWORD *)(a5 + 24);
              if (!v92)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85])
                goto LABEL_53;
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v101 = v85;
          v102 = v104[v85];
          v95 = v81[v85];
          v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            v97 = v87;
            v98 = NumElements / v87;
            do
            {
              sub_190FCC380(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_190FCBC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a16;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FCBDB4(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FCC01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FCC090(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FCBDB4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FCC30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FCC380(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FCC090(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FCC5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FCD1A0((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FCD47C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FCD76C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FCD76C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FCCFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FCD1A0(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FCD408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FCD47C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FCD1A0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FCD6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FCD76C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FCD47C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

