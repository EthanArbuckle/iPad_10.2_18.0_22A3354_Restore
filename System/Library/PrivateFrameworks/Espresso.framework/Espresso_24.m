void sub_1917756EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40)
{
  void *v40;
  void *v41;
  uint64_t v42;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a40);

  a40 = (void **)&a33;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a40);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 216);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 184);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_pool_kernel::compile(Espresso::ANECompilerEngine::mix_pool_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_pool_kernel::compile((Espresso::ANECompilerEngine::mix_pool_kernel *)((char *)this - 432), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_pool_kernel::~mix_pool_kernel(void **this)
{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(this - 54);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
}

{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(this - 54);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_pool_kernel *>(_QWORD *a1, _BYTE *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  float v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  _WORD *v31;
  int v32;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  _WORD *v47;
  int v48;
  int v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t weights_file_index;
  void *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  const void **v79;
  uint64_t v80;
  char v81;
  std::string::size_type v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  const std::string::value_type *v87;
  __int128 v88;
  __CFString *v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  int *v112;
  int v113;
  uint64_t i;
  float v115;
  int v116;
  _WORD *v117;
  int v118;
  std::runtime_error *exception;
  int *v121;
  uint64_t j;
  int v123;
  float v124;
  float *v125;
  unsigned int v126;
  unsigned int v127;
  float v128;
  Espresso *v129;
  const char *v130;
  float v131;
  NSObject *v133;
  double v134;
  uint64_t v135;
  _WORD *v136;
  int v137;
  _QWORD v140[2];
  __int128 v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144[2];
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  char v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  _BYTE buf[18];
  __int16 v166;
  int v167;
  __int16 v168;
  double v169;
  std::vector<std::string> v170;
  void *__p;
  char v172;
  id v173;
  __CFString *v174;
  id v175;
  std::string __str;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v155);
  v162 = 0;
  v163 = 0;
  v164 = 0x100000000;
  v10 = a1[62];
  v9 = (std::__shared_weak_count *)a1[63];
  v153 = v10;
  v154 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v10 && !*(_BYTE *)((*(uint64_t (**)(_QWORD *))(a1[54] + 104))(a1 + 54) + 40))
  {
    v13 = *(float *)(*(_QWORD *)a4 + 112);
    v145 = v10;
    v146 = v9;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (std::__shared_weak_count *)a1[65];
    v144[0] = a1[64];
    v144[1] = (uint64_t)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v145, v144, (uint64_t)&v147, v13);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = v146;
    if (v146)
    {
      v22 = (unint64_t *)&v146->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v153;
    v25 = *(unsigned int *)(v153 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v142, 2 * v25, 1, 1, 1);
    v26 = (int)v25;
    v141 = 0uLL;
    v27 = v25;
    v28 = a1[64];
    if (v28)
      v27 = *(_DWORD *)(v28 + 8);
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v25);
      v112 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      v113 = v25 - 1;
      if ((int)v25 >= 1)
      {
        for (i = 0; i != v25; ++i)
        {
          v115 = *(float *)(*(_QWORD *)(v24 + 16) + i * 4);
          *(float *)&v116 = ldexp(1.0, -v151) * v115;
          v112[i] = v116;
        }
      }
      if ((_DWORD)v25)
      {
        v117 = *(_WORD **)(v142 + 16);
        do
        {
          v118 = *v112++;
          _S0 = v118;
          __asm { FCVT            H0, S0 }
          *v117++ = _S0;
          --v26;
        }
        while (v26);
      }
      v140[0] = 0;
      v140[1] = 0;
      if (a1[64])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v140, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v141, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v121 = *(int **)(v140[0] + 16);
        if (v27 >= 1)
        {
          for (j = 0; j != v27; ++j)
          {
            if (v113 >= (int)j)
              v123 = j;
            else
              v123 = v113;
            v124 = *(float *)(*(_QWORD *)(v149 + 16) + 4 * j) * *(float *)(*(_QWORD *)(v147 + 16) + 4 * v123);
            v125 = (float *)&v121[j];
            *v125 = v124;
            v127 = v151;
            v126 = v152;
            v128 = ldexp(1.0, v152 - v151) * v124;
            *v125 = v128;
            v131 = ldexp(1.0, v127 - v126) * v128;
            if (v131 < -127.0 || v131 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v129, v130);
              v133 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
              {
                v134 = *(float *)&v121[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v131;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v152;
                v166 = 1024;
                v167 = v151;
                v168 = 2048;
                v169 = v134;
                _os_log_error_impl(&dword_190DAF000, v133, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v27)
        {
          v135 = v27;
          v136 = *(_WORD **)(v141 + 16);
          do
          {
            v137 = *v121++;
            _S0 = v137;
            __asm { FCVT            H0, S0 }
            *v136++ = _S0;
            --v135;
          }
          while (v135);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v29 = v152;
    if ((_DWORD)v25)
    {
      v30 = *(int **)(v147 + 16);
      v31 = *(_WORD **)(v142 + 16);
      do
      {
        v32 = *v30++;
        _S0 = v32;
        __asm { FCVT            H0, S0 }
        *v31++ = _S0;
        --v26;
      }
      while (v26);
    }
    if (v28)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v27, 1, 1, 1);
      v38 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v141 = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v27)
      {
        v45 = v27;
        v46 = *(int **)(v149 + 16);
        v47 = *(_WORD **)(v141 + 16);
        do
        {
          v48 = *v46++;
          _S0 = v48;
          __asm { FCVT            H0, S0 }
          *v47++ = _S0;
          --v45;
        }
        while (v45);
      }
    }
    v50 = a2[552];
    v51 = v142;
    v52 = v143;
    if (v143)
    {
      v53 = (unint64_t *)&v143->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v51 + 16), *(int *)(v51 + 8));
    if (v52)
    {
      v56 = (unint64_t *)&v52->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v58 = (void *)objc_opt_new();
    if (a5 && a2[121])
    {
      v59 = *(id *)(*a5 + 128);

      v58 = v59;
    }
    v60 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v25);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v61, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v62, CFSTR("ScaleOffset"));

    v63 = (void *)MEMORY[0x1E0CB37E8];
    if (v50)
      weights_file_index = 0;
    else
    objc_msgSend(v63, "numberWithUnsignedLong:", weights_file_index);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v65, CFSTR("ScaleIndex"));

    objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v151);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v66, CFSTR("ScaleShift"));

    if (a1[64])
    {
      if (*((_QWORD *)&v141 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v141 + 16), *(int *)(v141 + 8));
      if (*((_QWORD *)&v141 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1[64] + 8));
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v72, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v69);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v73, CFSTR("BiasOffset"));

      v74 = (void *)MEMORY[0x1E0CB37E8];
      if (v50)
        v75 = 0;
      else
      objc_msgSend(v74, "numberWithUnsignedLong:", v75);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v76, CFSTR("BiasIndex"));

      objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v29);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "setObject:forKeyedSubscript:", v77, CFSTR("BiasShift"));

    }
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v60, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    v78 = a5[1];
    if (v78 == *a5)
      goto LABEL_93;
    v79 = (const void **)(v78 - 144);
    v80 = *(unsigned __int8 *)(v78 - 121);
    v81 = v80;
    v82 = *(_QWORD *)(v78 - 136);
    if ((v80 & 0x80u) == 0)
      v83 = *(unsigned __int8 *)(v78 - 121);
    else
      v83 = *(_QWORD *)(v78 - 136);
    v84 = HIBYTE(v167);
    if (v167 < 0)
      v84 = *(_QWORD *)&buf[8];
    if (v83 != v84)
      goto LABEL_87;
    if (v167 >= 0)
      v85 = buf;
    else
      v85 = *(unsigned __int8 **)buf;
    if ((char)v80 < 0)
    {
      v87 = (const std::string::value_type *)*v79;
      if (memcmp(*v79, v85, *(_QWORD *)(v78 - 136)))
        goto LABEL_90;
    }
    else if ((_BYTE)v80)
    {
      v86 = (unsigned __int8 *)(v78 - 144);
      while (*v86 == *v85)
      {
        ++v86;
        ++v85;
        if (!--v80)
          goto LABEL_86;
      }
      goto LABEL_87;
    }
LABEL_86:
    std::string::append((std::string *)(v78 - 144), "__@pre_scale_bias");
    v81 = *(_BYTE *)(v78 - 121);
LABEL_87:
    if ((v81 & 0x80) == 0)
    {
      v88 = *(_OWORD *)v79;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v78 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v88;
      goto LABEL_91;
    }
    v87 = *(const std::string::value_type **)(v78 - 144);
    v82 = *(_QWORD *)(v78 - 136);
LABEL_90:
    std::string::__init_copy_ctor_external(&__str, v87, v82);
LABEL_91:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v170, &__str, &v177, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_93:
    v89 = v174;
    v174 = CFSTR("GOC");

    objc_storeStrong(&v175, v58);
    if (a2[121])
      v90 = a5 != 0;
    else
      v90 = 0;
    if (!v90)
    {
      if (a5)
      {
        v91 = a5[2];
        v92 = a5[1];
        if (v92 >= v91)
        {
          v94 = 0x8E38E38E38E38E39 * ((uint64_t)(v92 - *a5) >> 4);
          if (v94 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v95 = 0x8E38E38E38E38E39 * ((uint64_t)(v91 - *a5) >> 4);
          v96 = 2 * v95;
          if (2 * v95 <= v94 + 1)
            v96 = v94 + 1;
          if (v95 >= 0xE38E38E38E38E3)
            v97 = 0x1C71C71C71C71C7;
          else
            v97 = v96;
          *((_QWORD *)&v177 + 1) = a5 + 2;
          if (v97)
            v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v97);
          else
            v98 = 0;
          __str.__r_.__value_.__r.__words[0] = v97;
          __str.__r_.__value_.__l.__size_ = v97 + 144 * v94;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(_QWORD *)&v177 = v97 + 144 * v98;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          v93 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          v93 = v92 + 144;
          a5[1] = v92 + 144;
        }
        a5[1] = v93;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v172 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v167) < 0)
      operator delete(*(void **)buf);

    if (*((_QWORD *)&v141 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
      }
    }
    v101 = v143;
    if (v143)
    {
      v102 = (unint64_t *)&v143->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = v150;
    if (v150)
    {
      v105 = (unint64_t *)&v150->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = v148;
    if (v148)
    {
      v108 = (unint64_t *)&v148->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v9 = v154;
  }
  if (v9)
  {
    v110 = (unint64_t *)&v9->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v160 < 0)
    operator delete(v159);
  *(_QWORD *)buf = &v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v156 < 0)
    operator delete(v155);
}

void sub_1917765A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,id a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a35);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_pool_kernel::separated_pool_workaround_compatible(Espresso::ANECompilerEngine *a1, uint64_t a2)
{
  _BOOL8 result;
  int v4;
  int v5;

  result = Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(a1, (Espresso::net *)a2);
  if (result)
  {
    if (*(_DWORD *)a2)
      return 0;
    if (*(_DWORD *)(a2 + 28) != 1)
      return 0;
    if (*(_DWORD *)(a2 + 32))
      return 0;
    v4 = *(_DWORD *)(a2 + 16);
    if (v4 != *(_DWORD *)(a2 + 4))
      return 0;
    result = 0;
    v5 = *(_DWORD *)(a2 + 20);
    if (v5 != v4 || v5 != *(_DWORD *)(a2 + 8))
      return result;
    if (*(_WORD *)(a2 + 36) != 1)
      return 0;
    return (v4 - 5) < 0x3B && *(_DWORD *)(a2 + 56) == 0;
  }
  return result;
}

__n128 Espresso::ANECompilerEngine::mix_pool3d_kernel::mix_pool3d_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v5 = a1 + 280;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)v5 = xmmword_191A8AA80;
  *(_OWORD *)(v5 + 16) = xmmword_191A93320;
  *(_DWORD *)(v5 + 32) = 0;
  *(_WORD *)(v6 + 316) = 1;
  *(_OWORD *)(v5 + 38) = 0u;
  *(_QWORD *)(v5 + 52) = 0;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v6 + 480) = 0u;
  *(_OWORD *)(v6 + 496) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_BYTE *)(v6 + 400) = 0;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_BYTE *)(v6 + 472) = 0;
  *(_DWORD *)(v6 + 512) = 1065353216;
  *(_WORD *)(v6 + 520) = 0;
  *(_BYTE *)(v6 + 522) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 244) = _D1;
  *(_BYTE *)(v6 + 532) = 0;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_BYTE *)(v6 + 552) = v7;
  *(_QWORD *)v6 = &off_1E2D777B8;
  *(_QWORD *)(v6 + 344) = &unk_1E2D77918;
  result = *(__n128 *)a3;
  v14 = *(_OWORD *)(a3 + 16);
  v15 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v5 + 44) = *(_OWORD *)(a3 + 44);
  *(_OWORD *)(v5 + 16) = v14;
  *(_OWORD *)(v5 + 32) = v15;
  *(__n128 *)v5 = result;
  return result;
}

void sub_19177690C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191776974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191776A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_191776B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_191776BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_191776C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_191776F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19177708C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19177715C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_191777390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1917774D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs(uint64_t a1, uint64_t a2, const std::string *a3, int a4, int a5, void *a6, unsigned int **a7, std::string *a8)
{
  void *v16;
  void *v17;
  unsigned int *v18;
  unsigned int *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  std::string v27;
  uint64_t v28;
  std::vector<std::string> v29;
  int v30;
  void *__p;
  char v32;
  int v33;
  id v34;
  std::string __str;
  __int128 v36;

  *((_QWORD *)&v36 + 1) = *MEMORY[0x1E0C80C00];
  v26 = a6;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)&v27, a8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v29, &__str, &v36, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::operator=(&v27, a3);
  v30 = a4;
  v33 = a5;
  objc_storeStrong(&v34, a6);
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)a1, (id *)&v27.__r_.__value_.__l.__data_);
  v16 = (void *)objc_opt_new();
  v17 = (void *)objc_opt_new();
  v19 = *a7;
  v18 = a7[1];
  if (*a7 != v18)
  {
    do
    {
      v20 = (void *)objc_opt_new();
      v21 = v20;
      v22 = *v19;
      if (v22 >= 5
        || (objc_msgSend(v20, "setObject:forKeyedSubscript:", off_1E2DD6090[v22], CFSTR("TransposeSourceDimension")),
            v23 = v19[1],
            v23 > 4))
      {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
      }
      objc_msgSend(v21, "setObject:forKeyedSubscript:", off_1E2DD6090[v23], CFSTR("TransposeDestinationDimension"));
      objc_msgSend(v17, "addObject:", v21);

      v19 += 2;
    }
    while (v19 != v18);
  }
  objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("TransposeDimensions"));
  v24 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = CFSTR("Transpose");

  v25 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v16;

  if (v32 < 0)
    operator delete(__p);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);

}

void sub_191777758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_list va;

  va_start(va, a4);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::~layer_graph_info_t((id *)va);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::fill_unpaired_transposes(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  int v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  _BYTE *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    v2 = 0;
    v3 = 0;
    LODWORD(v54) = 0;
    WORD2(v54) = 0;
    v55 = 1;
    v56 = 0;
    v57 = 2;
    v58 = 0;
    v59 = 3;
    v60 = 0;
    v61 = 4;
    v62 = 0;
    v52 = 0;
    v53 = 0;
    v4 = &v52;
    v51 = &v52;
    while (1)
    {
      v5 = &v54 + v3;
      v6 = &v52;
      if (v4 == &v52)
        goto LABEL_9;
      v7 = v2;
      v8 = &v52;
      if (v2)
      {
        do
        {
          v6 = (uint64_t **)v7;
          v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          v6 = (uint64_t **)v8[2];
          v9 = *v6 == (uint64_t *)v8;
          v8 = v6;
        }
        while (v9);
      }
      v10 = *(_DWORD *)v5;
      if (*((_DWORD *)v6 + 7) < *(_DWORD *)v5)
      {
LABEL_9:
        v11 = v2 ? v6 : &v52;
        v12 = v2 ? v6 + 1 : &v52;
      }
      else
      {
        v11 = &v52;
        v12 = &v52;
        if (v2)
        {
          v12 = &v52;
          while (1)
          {
            while (1)
            {
              v11 = (uint64_t **)v2;
              v14 = *((_DWORD *)v2 + 7);
              if (v10 >= v14)
                break;
              v2 = *v11;
              v12 = v11;
              if (!*v11)
                goto LABEL_16;
            }
            if (v14 >= v10)
              break;
            v12 = v11 + 1;
            v2 = v11[1];
            if (!v2)
              goto LABEL_16;
          }
        }
      }
      if (!*v12)
      {
LABEL_16:
        v13 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v13 + 28) = *v5;
        *v13 = 0;
        v13[1] = 0;
        v13[2] = (uint64_t)v11;
        *v12 = v13;
        if (*v51)
        {
          v51 = (uint64_t **)*v51;
          v13 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v52, v13);
        ++v53;
      }
      if (++v3 == 5)
        break;
      v4 = v51;
      v2 = v52;
    }
    v15 = *(uint64_t **)a1;
    v16 = *(uint64_t **)(a1 + 8);
    if (*(uint64_t **)a1 != v16)
    {
      do
      {
        v17 = *v15;
        v54 = v17;
        *((_BYTE *)std::__tree<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::__map_value_compare<Espresso::ANECompilerEngine::NamedAxis,std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::less<Espresso::ANECompilerEngine::NamedAxis>,true>,std::allocator<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<Espresso::ANECompilerEngine::NamedAxis,std::piecewise_construct_t const&,std::tuple<Espresso::ANECompilerEngine::NamedAxis const&>,std::tuple<>>((uint64_t **)&v51, v17, &v54)+ 32) = 1;
        *((_BYTE *)std::__tree<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::__map_value_compare<Espresso::ANECompilerEngine::NamedAxis,std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::less<Espresso::ANECompilerEngine::NamedAxis>,true>,std::allocator<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<Espresso::ANECompilerEngine::NamedAxis,std::piecewise_construct_t const&,std::tuple<Espresso::ANECompilerEngine::NamedAxis const&>,std::tuple<>>((uint64_t **)&v51, SHIDWORD(v17), (_DWORD *)&v54 + 1)+ 33) = 1;
        ++v15;
      }
      while (v15 != v16);
    }
    v18 = (uint64_t *)v51;
    if (v51 != &v52)
    {
      do
      {
        v20 = (char *)v18 + 33;
        v19 = *((unsigned __int8 *)v18 + 33);
        v21 = *((unsigned __int8 *)v18 + 32);
        if (v21 | v19 && v21 != v19)
        {
          v22 = (uint64_t *)v51;
          if (v51 == &v52)
            goto LABEL_90;
          v23 = *((unsigned int *)v18 + 7);
          while (*((unsigned __int8 *)v22 + 32) == v21 || *((unsigned __int8 *)v22 + 33) == v19)
          {
            v24 = (uint64_t *)v22[1];
            if (v24)
            {
              do
              {
                v25 = (uint64_t **)v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                v25 = (uint64_t **)v22[2];
                v9 = *v25 == v22;
                v22 = (uint64_t *)v25;
              }
              while (!v9);
            }
            v22 = (uint64_t *)v25;
            if (v25 == &v52)
              goto LABEL_90;
          }
          if (v22 == (uint64_t *)&v52)
LABEL_90:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Flow conservation violated with requested transpose.");
          v26 = *((unsigned int *)v22 + 7);
          v28 = *(uint64_t **)(a1 + 8);
          v27 = *(_QWORD *)(a1 + 16);
          if (*((_BYTE *)v18 + 32))
          {
            if ((unint64_t)v28 >= v27)
            {
              v31 = ((uint64_t)v28 - *(_QWORD *)a1) >> 3;
              if ((unint64_t)(v31 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v32 = v27 - *(_QWORD *)a1;
              v33 = v32 >> 2;
              if (v32 >> 2 <= (unint64_t)(v31 + 1))
                v33 = v31 + 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v33;
              if (v34)
                v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v34);
              else
                v35 = 0;
              v41 = (uint64_t *)(v34 + 8 * v31);
              *v41 = v26 | (v23 << 32);
              v29 = v41 + 1;
              v43 = *(uint64_t **)a1;
              v42 = *(uint64_t **)(a1 + 8);
              if (v42 != *(uint64_t **)a1)
              {
                do
                {
                  v44 = *--v42;
                  *--v41 = v44;
                }
                while (v42 != v43);
                v42 = *(uint64_t **)a1;
              }
              *(_QWORD *)a1 = v41;
              *(_QWORD *)(a1 + 8) = v29;
              *(_QWORD *)(a1 + 16) = v34 + 8 * v35;
              if (v42)
                operator delete(v42);
            }
            else
            {
              *v28 = v26 | (v23 << 32);
              v29 = v28 + 1;
            }
            *(_QWORD *)(a1 + 8) = v29;
            *((_BYTE *)v22 + 32) = 1;
          }
          else
          {
            if ((unint64_t)v28 >= v27)
            {
              v36 = ((uint64_t)v28 - *(_QWORD *)a1) >> 3;
              if ((unint64_t)(v36 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v37 = v27 - *(_QWORD *)a1;
              v38 = v37 >> 2;
              if (v37 >> 2 <= (unint64_t)(v36 + 1))
                v38 = v36 + 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
                v39 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v39 = v38;
              if (v39)
                v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v39);
              else
                v40 = 0;
              v45 = (uint64_t *)(v39 + 8 * v36);
              *v45 = v23 | (v26 << 32);
              v30 = v45 + 1;
              v47 = *(uint64_t **)a1;
              v46 = *(uint64_t **)(a1 + 8);
              if (v46 != *(uint64_t **)a1)
              {
                do
                {
                  v48 = *--v46;
                  *--v45 = v48;
                }
                while (v46 != v47);
                v46 = *(uint64_t **)a1;
              }
              *(_QWORD *)a1 = v45;
              *(_QWORD *)(a1 + 8) = v30;
              *(_QWORD *)(a1 + 16) = v39 + 8 * v40;
              if (v46)
                operator delete(v46);
            }
            else
            {
              *v28 = v23 | (v26 << 32);
              v30 = v28 + 1;
            }
            v20 = (char *)v22 + 33;
            *(_QWORD *)(a1 + 8) = v30;
            *((_BYTE *)v18 + 32) = 1;
          }
          *v20 = 1;
        }
        v49 = (uint64_t *)v18[1];
        if (v49)
        {
          do
          {
            v50 = (uint64_t **)v49;
            v49 = (uint64_t *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (uint64_t **)v18[2];
            v9 = *v50 == v18;
            v18 = (uint64_t *)v50;
          }
          while (!v9);
        }
        v18 = (uint64_t *)v50;
      }
      while (v50 != &v52);
    }
    std::__tree<int>::destroy(v52);
  }
}

void sub_191777C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<int>::destroy(a11);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::__map_value_compare<Espresso::ANECompilerEngine::NamedAxis,std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::less<Espresso::ANECompilerEngine::NamedAxis>,true>,std::allocator<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<Espresso::ANECompilerEngine::NamedAxis,std::piecewise_construct_t const&,std::tuple<Espresso::ANECompilerEngine::NamedAxis const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((_WORD *)v9 + 16) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void Espresso::ANECompilerEngine::get_transpose_for_squeeze(uint64_t a1, uint64_t __val, unint64_t a3, unsigned int a4, uint64_t a5)
{
  std::string *v6;
  std::string::size_type v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::string __p;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  if (a3 - 6 <= 0xFFFFFFFFFFFFFFFALL)
  {
    std::to_string(&__p, a3);
    v6 = std::string::insert(&__p, 0, "get_transpose_for_squeeze: dynamic model or invalid input rank ");
    goto LABEL_3;
  }
  if (a3 == 5)
  {
    if (a4 < 2)
    {
      if (a4 != 1)
      {
        switch(__val)
        {
          case 0:
            *(_DWORD *)(a5 + 16) = 3;
            v10 = 0x200000004;
            goto LABEL_15;
          case 1:
            *(_DWORD *)(a5 + 16) = 2;
            *(_DWORD *)(a5 + 8) = 4;
            goto LABEL_43;
          case 2:
            goto LABEL_43;
          case 3:
            *(_DWORD *)(a5 + 4) = 4;
            v11 = 1;
            goto LABEL_39;
          case 4:
            *(_QWORD *)a5 = 0x400000001;
            goto LABEL_42;
          default:
            goto LABEL_34;
        }
      }
      switch(__val)
      {
        case 0:
          goto LABEL_43;
        case 1:
          *(_QWORD *)(a5 + 12) = 0x300000004;
          goto LABEL_43;
        case 2:
          *(_QWORD *)(a5 + 8) = 0x400000003;
          v11 = 2;
LABEL_39:
          *(_DWORD *)(a5 + 16) = v11;
          goto LABEL_43;
        case 3:
          *(_OWORD *)(a5 + 4) = xmmword_191A938E0;
          goto LABEL_43;
        case 4:
          *(_OWORD *)a5 = xmmword_191A938F0;
LABEL_42:
          *(_DWORD *)(a5 + 16) = 0;
          goto LABEL_43;
        default:
          goto LABEL_34;
      }
    }
    std::to_string(&__p, a4);
    v6 = std::string::insert(&__p, 0, "get_transpose_for_squeeze: dynamic model or invalid layout when squeeze rank 5 tensor, got ");
    goto LABEL_3;
  }
  if (!__val || a3 != 4)
  {
    if (!__val || a3 != 3)
    {
      if (__val && a3 == 2)
      {
        if (__val != 1)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid Squeeze Dimensions");
        *(_QWORD *)a5 = 1;
      }
      goto LABEL_43;
    }
    if (__val == 2)
    {
      *(_QWORD *)a5 = 0x200000001;
      *(_DWORD *)(a5 + 8) = 0;
    }
    else
    {
      if (__val != 1)
        goto LABEL_34;
      *(_QWORD *)(a5 + 4) = 0x100000002;
    }
LABEL_43:
    *(_BYTE *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
    return;
  }
  switch(__val)
  {
    case 3:
      *(_OWORD *)a5 = xmmword_191A938D0;
      goto LABEL_43;
    case 2:
      *(_QWORD *)(a5 + 4) = 0x300000002;
      *(_DWORD *)(a5 + 12) = 1;
      goto LABEL_43;
    case 1:
      v10 = 0x200000003;
LABEL_15:
      *(_QWORD *)(a5 + 8) = v10;
      goto LABEL_43;
  }
LABEL_34:
  std::to_string(&__p, __val);
  v6 = std::string::insert(&__p, 0, "get_transpose_for_squeeze: invalid dimensions ");
LABEL_3:
  v7 = v6->__r_.__value_.__r.__words[0];
  v13[0] = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v13 + 7);
  v9 = v13[0];
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 31) = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1917780B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::format_validation_violations(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Errors were: [", 14);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v3 = (uint64_t **)(a2 + 16);
  while (1)
  {
    v3 = (uint64_t **)*v3;
    if (!v3)
      break;
    if ((v11 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v11 & 0x80u) == 0)
      v5 = v11;
    else
      v5 = (uint64_t)__p[1];
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
    v7 = (const char *)objc_msgSend(objc_retainAutorelease(v3[2]), "UTF8String");
    v8 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    MEMORY[0x19401C808](__p, ", ");
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]", 1);
  std::stringbuf::str();
  if ((char)v11 < 0)
    operator delete(__p[0]);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401CCD0](&v14);
}

void sub_191778258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::CodegenTransposeUnit(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  const char *v10;
  std::string v11;
  __int128 v12;
  int64_t v13;
  unint64_t *v14[3];

  Espresso::ANECompilerEngine::DecomposeTranspose(v14, a2, a4);
  v6 = *(unsigned int *)(a3 + 104);
  if (v6 >= 6 || ((0x37u >> v6) & 1) == 0)
  {
    std::to_string(&v11, *(_DWORD *)(a3 + 104));
    v8 = std::string::insert(&v11, 0, "Unsupported argument for transpose compute path: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13 = v8->__r_.__value_.__r.__words[2];
    v12 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v13 >= 0)
      v10 = (const char *)&v12;
    else
      v10 = (const char *)v12;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v10);
  }
  v7 = *(_QWORD *)(a3 + 48);
  if (*(_QWORD *)(a3 + 56) == v7)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs(a1, v7, (const std::string *)a3, *(_DWORD *)(a3 + 72), v6, off_1E2DD60B8[v6], (unsigned int **)v14, (std::string *)(a3 + 80));
  if (v14[0])
    operator delete(v14[0]);
}

void sub_191778380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  v23 = *(void **)(v21 - 40);
  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::get_constant_input(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  const void *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28[2];
  unint64_t v29;

  v29 = 0;
  v5 = *a2;
  if (*(_QWORD *)(*a2 + 40) == *(_QWORD *)(*a2 + 32))
    goto LABEL_36;
  v7 = a3 + 24 * a4;
  while (1)
  {
    v28[0] = (uint64_t *)&v29;
    v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5 + 96, &v29, (uint64_t)&std::piecewise_construct, v28);
    v9 = v8[3];
    v10 = v8[4] - v9;
    if (v10)
      break;
LABEL_24:
    ++v29;
    v5 = *a2;
    if (v29 >= (uint64_t)(*(_QWORD *)(*a2 + 40) - *(_QWORD *)(*a2 + 32)) >> 4)
      goto LABEL_36;
  }
  v11 = 0;
  v12 = v10 / 24;
  v13 = *(char *)(v7 + 23);
  v14 = v13 >= 0 ? *(unsigned __int8 *)(v7 + 23) : *(_QWORD *)(v7 + 8);
  v15 = v12 <= 1 ? 1 : v12;
  while (1)
  {
    v16 = (unsigned __int8 *)(v9 + 24 * v11);
    v17 = v16[23];
    if ((v17 & 0x80u) == 0)
      v18 = v16[23];
    else
      v18 = *((_QWORD *)v16 + 1);
    if (v18 != v14)
      goto LABEL_23;
    v19 = v13 >= 0 ? (unsigned __int8 *)v7 : *(unsigned __int8 **)v7;
    if ((v17 & 0x80) != 0)
      break;
    if (!v16[23])
      goto LABEL_26;
    while (*v16 == *v19)
    {
      ++v16;
      ++v19;
      if (!--v17)
        goto LABEL_26;
    }
LABEL_23:
    if (++v11 == v15)
      goto LABEL_24;
  }
  if (memcmp(*(const void **)v16, v19, *((_QWORD *)v16 + 1)))
    goto LABEL_23;
LABEL_26:
  v20 = *(_QWORD *)(*(_QWORD *)(*a2 + 32) + 16 * v29);
  v21 = *(const void **)(v20 + 64);
  if (!v21
  {
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v23 = *(uint64_t **)(v20 + 72);
  v28[0] = v22;
  v28[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(a1, v22 + 43);
  if (v23)
  {
    v26 = (unint64_t *)(v23 + 1);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(uint64_t *))(*v23 + 16))(v23);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v23);
    }
  }
}

void sub_1917785D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::get_primary_weights_file_index(Espresso::ANECompilerEngine *this, Espresso::ANECompilerEngine::compiler *a2, const void *a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 552))
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", a2, a3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(*((id *)this + 27), "count");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("net.weights.%lu"), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v6;
  v12[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)*((_QWORD *)this + 27);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, v9);

  return v5;
}

void sub_191778738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::`anonymous namespace'::get_weights_file_index(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.force_single_weight_file"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
    return 0;
  else
    return a1;
}

void sub_19177881C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_lut_to_f16_weights(uint64_t *a1, void *a2, uint64_t a3, char *a4, unsigned __int8 *a5, char a6, uint64_t a7)
{
  id v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int *v19;
  int v20;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  int v67;
  char v68;
  char *v69;
  char v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  size_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  char v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  void *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  unsigned int v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned __int8 *v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void *__p;
  char *v135;
  char *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _QWORD v140[3];
  _QWORD *v141;
  __int128 v142;
  __int128 *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v14 = a1[4];
  v13 = (std::__shared_weak_count *)a1[5];
  v130 = v14;
  v131 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v129, 2 * *(_DWORD *)(v14 + 8), 1, 1, 1);
  v17 = *(int *)(v14 + 8);
  if ((_DWORD)v17)
  {
    v18 = *(_WORD **)(v129 + 16);
    v19 = *(int **)(v14 + 16);
    do
    {
      v20 = *v19++;
      _S0 = v20;
      __asm { FCVT            H0, S0 }
      *v18++ = _S0;
      --v17;
    }
    while (v17);
  }
  v128 = v129;
  v129 = 0uLL;
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v140, a3);
  v25 = v12;
  v26 = *a1;
  v27 = a1[1];
  *(_QWORD *)&v139 = *a1;
  *((_QWORD *)&v139 + 1) = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *((_DWORD *)a1 + 39);
  v127 = (unsigned __int8 *)v30;
  v31 = *((int *)a1 + 33) * (uint64_t)*((int *)a1 + 32) * *((int *)a1 + 34) * *((int *)a1 + 35);
  if (v30 != 8)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v142, *(_DWORD *)(v26 + 8), 1, 1, 1);
    v32 = v142;
    Espresso::bit_packer::cast_indexes_to_n_bits_anec_format(*(_QWORD *)(v139 + 16), (const unsigned __int8 *)v30, *(Espresso::bit_packer **)(v142 + 16), (unsigned __int8 *)v30, v31);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v139, v32, *((uint64_t *)&v142 + 1));
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  v138 = v128;
  if (*((_QWORD *)&v128 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = v142;
  v142 = 0uLL;
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  v128 = v38;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v137 = v139;
  if (*((_QWORD *)&v139 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = v142;
  v142 = 0uLL;
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  v139 = v50;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  Espresso::swap_zero_to_first_position_anec_format(*(Espresso **)(v128 + 16), (unsigned __int8 *)2, *(_QWORD *)(v139 + 16), (unsigned __int8 *)v31, v30, 1);
  v60 = v139;
  v61 = (uint64_t)v141;
  if (!v141)
    goto LABEL_55;
  if (v141 != v140)
  {
    v61 = (*(uint64_t (**)(_QWORD *))(*v141 + 16))(v141);
LABEL_55:
    v143 = (__int128 *)v61;
    goto LABEL_57;
  }
  v143 = &v142;
  (*(void (**)(_QWORD *, __int128 *))(v140[0] + 24))(v140, &v142);
LABEL_57:
  v62 = Espresso::ANECompilerEngine::try_write_sparsified_lut_kernel(v60, v30, v31, v128, 2u, (uint64_t)CFSTR("Float16"), a5, a7, v25, (uint64_t)&v142);
  v64 = v63;
  v65 = v143;
  if (v143 == &v142)
  {
    v66 = 4;
    v65 = &v142;
  }
  else
  {
    if (!v143)
      goto LABEL_62;
    v66 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v65 + 8 * v66))();
LABEL_62:
  if (v62 == 1)
  {
    if ((a6 & 1) == 0)
      goto LABEL_100;
    if ((v64 & 0x8000000000000000) == 0)
    {
      v67 = v64 == 0;
      goto LABEL_97;
    }
LABEL_69:
    __p = 0;
    v135 = 0;
    v136 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&__p, 2uLL);
    v68 = 1;
    v69 = v135;
    do
    {
      v70 = v68;
      if (v69 >= v136)
      {
        v72 = (unint64_t)__p;
        v73 = v69 - (_BYTE *)__p;
        v74 = v69 - (_BYTE *)__p + 1;
        if (v74 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v75 = v136 - (_BYTE *)__p;
        if (2 * (v136 - (_BYTE *)__p) > (unint64_t)v74)
          v74 = 2 * v75;
        if (v75 >= 0x3FFFFFFFFFFFFFFFLL)
          v76 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
          v77 = (char *)operator new(v76);
        else
          v77 = 0;
        v78 = &v77[v73];
        v79 = &v77[v73];
        *v79 = 0;
        v71 = v79 + 1;
        if (v69 != (char *)v72)
        {
          v80 = &v69[~v72];
          do
          {
            v81 = *--v69;
            (v80--)[(_QWORD)v77] = v81;
          }
          while (v69 != (char *)v72);
          v69 = (char *)__p;
          v78 = v77;
        }
        __p = v78;
        v135 = v71;
        v136 = &v77[v76];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v69 = 0;
        v71 = v69 + 1;
      }
      v68 = 0;
      v135 = v71;
      v69 = v71;
    }
    while ((v70 & 1) != 0);
    v82 = *(int *)(v128 + 8);
    if ((_DWORD)v82)
    {
      v83 = 2;
      do
      {
        v84 = *(unsigned __int16 *)(*(_QWORD *)(v128 + 16) + v83 - 2);
        v85 = *(unsigned __int16 *)__p;
        v67 = v84 != v85;
        _CF = v84 == v85 || v83 >= v82;
        v83 += 2;
      }
      while (!_CF);
      if (!__p)
        goto LABEL_97;
    }
    else
    {
      v67 = 1;
      if (!__p)
      {
LABEL_97:
        if (v30 + v67 == 9)
          v30 = 8;
        else
          v30 += v67;
        goto LABEL_100;
      }
    }
    v135 = (char *)__p;
    operator delete(__p);
    goto LABEL_97;
  }
  if (v62 == 2)
    goto LABEL_136;
  if ((a6 & 1) != 0)
    goto LABEL_69;
LABEL_100:
  objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("Palette256"), CFSTR("KernelMode"));
  if (v30 == 2)
  {
    v87 = *a4;
    if ((*a4 & 2) != 0)
    {
      objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("Palette4"), CFSTR("KernelMode"));
      v88 = 4;
      v89 = 2;
      goto LABEL_115;
    }
    goto LABEL_108;
  }
  if (v30 != 1)
  {
    if (v30 > 4)
    {
      if (v30 > 6)
      {
LABEL_113:
        objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("Palette256"), CFSTR("KernelMode"));
        v88 = 256;
        v89 = 8;
        goto LABEL_115;
      }
      v87 = *a4;
LABEL_112:
      if ((v87 & 8) != 0)
      {
        objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("Palette64"), CFSTR("KernelMode"));
        v88 = 64;
        v89 = 6;
        goto LABEL_115;
      }
      goto LABEL_113;
    }
    v87 = *a4;
LABEL_108:
    if ((v87 & 4) != 0)
    {
      objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("Palette16"), CFSTR("KernelMode"));
      v88 = 16;
      v89 = 4;
      goto LABEL_115;
    }
    goto LABEL_112;
  }
  v87 = *a4;
  if ((*a4 & 1) == 0)
    goto LABEL_108;
  objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("Palette2"), CFSTR("KernelMode"));
  v88 = 2;
  v89 = 1;
LABEL_115:
  if ((unsigned __int8 *)v89 != v127)
  {
    if (((v89 * v31) & 7) != 0)
      v90 = ((unint64_t)(v89 * v31) >> 3) + 1;
    else
      v90 = (unint64_t)(v89 * v31) >> 3;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, v90, 1, 1, 1);
    v91 = __p;
    Espresso::bit_packer::change_index_bitwidth_anec_to_anec(*(_QWORD *)(v139 + 16), v127, *((Espresso::bit_packer **)__p + 2), (unsigned __int8 *)v89, v31);
    v92 = (std::__shared_weak_count *)v135;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v139, (uint64_t)v91, (uint64_t)v135);
    if (v88 != (unint64_t)*(int *)(v128 + 8) >> 1)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v132, 2 * v88, 1, 1, 1);
      v93 = v132;
      v94 = *(_DWORD *)(v128 + 8);
      if (v94 >= *(_DWORD *)(v132 + 8))
        v94 = *(_DWORD *)(v132 + 8);
      memcpy(*(void **)(v132 + 16), *(const void **)(v128 + 16), (int)v94);
      v95 = v133;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v128, v93, (uint64_t)v133);
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v92 = (std::__shared_weak_count *)v135;
    }
    if (v92)
    {
      v98 = (unint64_t *)&v92->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  v100 = *(int *)(v139 + 8);
  __p = *(void **)(v139 + 16);
  v132 = v100;
  if (!v141)
    std::__throw_bad_function_call[abi:ne180100]();
  v101 = (*(uint64_t (**)(_QWORD *, void **, uint64_t *))(*v141 + 48))(v141, &__p, &v132);
  v103 = v102;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v101);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setObject:forKeyedSubscript:", v104, CFSTR("KernelOffset"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v103);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setObject:forKeyedSubscript:", v105, CFSTR("KernelIndex"));

  v106 = *(int *)(v128 + 8);
  __p = *(void **)(v128 + 16);
  v132 = v106;
  if (!v141)
    std::__throw_bad_function_call[abi:ne180100]();
  v107 = (*(uint64_t (**)(_QWORD *, void **, uint64_t *))(*v141 + 48))(v141, &__p, &v132);
  v109 = v108;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v107);
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setObject:forKeyedSubscript:", v110, CFSTR("KernelPaletteLUTOffset"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v109);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setObject:forKeyedSubscript:", v111, CFSTR("KernelPaletteLUTIndex"));

LABEL_136:
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }

  v115 = v141;
  if (v141 == v140)
  {
    v116 = 4;
    v115 = v140;
    goto LABEL_145;
  }
  if (v141)
  {
    v116 = 5;
LABEL_145:
    (*(void (**)(void))(*v115 + 8 * v116))();
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }

}

void sub_1917792CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  void *v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);

  v34 = *(_QWORD **)(v32 - 136);
  if (v34 == (_QWORD *)(v32 - 160))
  {
    v35 = 4;
    v34 = (_QWORD *)(v32 - 160);
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_6:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t Espresso::bit_packer::cast_indexes_to_n_bits_anec_format(uint64_t this, const unsigned __int8 *a2, Espresso::bit_packer *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unsigned __int8 v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;

  if (a5)
  {
    v9 = this;
    v10 = 0;
    v11 = 0;
    v12 = a2;
    do
    {
      v13 = v10 & 7;
      v14 = (8 - v13);
      if (v14 >= v12)
        v15 = v12;
      else
        v15 = (8 - v13);
      if (v14 >= v12)
        v16 = v12;
      else
        v16 = 8 - (v10 & 7);
      v17 = (((255 << (8 - v16)) >> v13) & *(unsigned __int8 *)(v9 + (v10 >> 3))) >> (8 - (v10 & 7) - v16);
      if (v12 > v14)
      {
        v18 = v12 - v16;
        v19 = v18;
        v20 = v15 + v10;
        v21 = (_DWORD)v17 << v18;
        v22 = v20 >> 3;
        v23 = v20 & 7;
        if (v19 >= 8 - v23)
          LOBYTE(v19) = 8 - v23;
        v17 = ((((255 << (8 - v19)) >> v23) & *(unsigned __int8 *)(v9 + v22)) >> (8 - v23 - v19)) | v21;
      }
      if (a4 == (unsigned __int8 *)8)
        *((_BYTE *)a3 + v11) = v17;
      else
        this = Espresso::bit_packer::set_pack_starts_from_lsb_val((uint64_t)a3, (unsigned __int8 *)v17, v11, (uint64_t)a4);
      ++v11;
      v10 += (unint64_t)a2;
    }
    while (a5 != v11);
  }
  return this;
}

_QWORD *Espresso::ANECompilerEngine::`anonymous namespace'::copy_blob_if_data_not_owned(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;
  void *v7;

  v2 = result;
  v3 = *a2;
  if (*(_BYTE *)(*a2 + 24))
  {
    v4 = a2[1];
    *result = v3;
    result[1] = v4;
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = (char *)operator new(0x58uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_1E2DBED50;
    *((_QWORD *)v5 + 3) = &off_1E2DA1250;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    v6 = *(int *)(v3 + 8);
    *((_DWORD *)v5 + 8) = v6;
    v7 = Espresso::kern_alloc_uninitialized((Espresso *)v6);
    bzero(v7, v6);
    *((_QWORD *)v5 + 5) = v7;
    v5[48] = 1;
    *v2 = v5 + 24;
    v2[1] = v5;
    return memcpy(v7, *(const void **)(v3 + 16), *(int *)(v3 + 8));
  }
  return result;
}

void sub_191779674(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::bit_packer::change_index_bitwidth_anec_to_anec(uint64_t this, const unsigned __int8 *a2, Espresso::bit_packer *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned int v15;

  if (a5)
  {
    v8 = a2;
    v9 = this;
    v10 = 0;
    v11 = 0;
    v12 = a2;
    do
    {
      v13 = 8 - (v10 & 7);
      v14 = v8;
      if (v13 < v8)
        v14 = 8 - (v10 & 7);
      v15 = ((0xFFu >> (8 - v14) << (v10 & 7)) & *(unsigned __int8 *)(v9 + (v10 >> 3))) >> (v10 & 7);
      if (v13 < v8)
        v15 |= ((0xFFu >> (8 - (v8 - v14))) & *(unsigned __int8 *)((v10 >> 3) + v9 + 1)) << v14;
      this = Espresso::bit_packer::set_pack_starts_from_lsb_val((uint64_t)a3, (unsigned __int8 *)v15, v11++, (uint64_t)a4);
      v10 += v12;
    }
    while (a5 != v11);
  }
  return this;
}

void Espresso::ANECompilerEngine::add_lut_to_uint8_weights(uint64_t *a1, void *a2, uint64_t a3, char *a4, unsigned __int8 *a5, char a6, uint64_t a7)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  const unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  void *v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  __int128 v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t i;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  __int128 *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  unsigned int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  _QWORD *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t *v166;
  _BYTE v167[24];
  _BYTE *v168;
  __int128 v169;
  char *v170;
  __int128 *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v14 = a1[8];
  v13 = a1[9];
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)&v144 = v14;
  *((_QWORD *)&v144 + 1) = v13;
  v145 = 0;
  v146 = 0;
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v162, a3);
  v17 = v12;
  v18 = *a1;
  v19 = a1[1];
  *(_QWORD *)&v153 = *a1;
  *((_QWORD *)&v153 + 1) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *((_DWORD *)a1 + 39);
  v23 = (const unsigned __int8 *)v22;
  v24 = *((int *)a1 + 33) * (uint64_t)*((int *)a1 + 32) * *((int *)a1 + 34) * *((int *)a1 + 35);
  if (v22 != 8)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v169, *(_DWORD *)(v18 + 8), 1, 1, 1);
    v25 = v169;
    Espresso::bit_packer::cast_indexes_to_n_bits_anec_format(*(_QWORD *)(v153 + 16), (const unsigned __int8 *)v22, *(Espresso::bit_packer **)(v169 + 16), (unsigned __int8 *)v22, v24);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v153, v25, *((uint64_t *)&v169 + 1));
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v152 = v144;
  if (*((_QWORD *)&v144 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = v169;
  v169 = 0uLL;
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  v144 = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v151 = v153;
  if (*((_QWORD *)&v153 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = v169;
  v169 = 0uLL;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  v153 = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  Espresso::swap_zero_to_first_position_anec_format(*(Espresso **)(v144 + 16), (unsigned __int8 *)1, *(_QWORD *)(v153 + 16), (unsigned __int8 *)v24, v22, 0);
  v53 = v153;
  v54 = (uint64_t)v163;
  if (!v163)
    goto LABEL_52;
  if (v163 != v162)
  {
    v54 = (*(uint64_t (**)(void))(*v163 + 16))();
LABEL_52:
    v168 = (_BYTE *)v54;
    goto LABEL_54;
  }
  v168 = v167;
  (*(void (**)(_QWORD *, _BYTE *))(v162[0] + 24))(v162, v167);
LABEL_54:
  v55 = Espresso::ANECompilerEngine::try_write_sparsified_lut_kernel(v53, v22, v24, v144, 1u, (uint64_t)CFSTR("UInt8"), a5, a7, v17, (uint64_t)v167);
  v57 = v56;
  v58 = v168;
  if (v168 == v167)
  {
    v59 = 4;
    v58 = v167;
  }
  else
  {
    if (!v168)
      goto LABEL_59;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_59:
  if (v55 == 1)
  {
    if ((a6 & 1) == 0)
      goto LABEL_93;
    if ((v57 & 0x8000000000000000) == 0)
    {
      if (!v57)
        ++v22;
      goto LABEL_92;
    }
  }
  else
  {
    if (v55 == 2)
      goto LABEL_174;
    if ((a6 & 1) == 0)
      goto LABEL_93;
  }
  v169 = 0uLL;
  v170 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v169, 1uLL);
  v60 = (char *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1) >= (unint64_t)v170)
  {
    v62 = v169;
    v63 = *((_QWORD *)&v169 + 1) - v169;
    v64 = *((_QWORD *)&v169 + 1) - v169 + 1;
    if (v64 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v65 = (unint64_t)&v170[-v169];
    if (2 * (uint64_t)&v170[-v169] > (unint64_t)v64)
      v64 = 2 * v65;
    if (v65 >= 0x3FFFFFFFFFFFFFFFLL)
      v66 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
      v67 = operator new(v66);
    else
      v67 = 0;
    v68 = (char *)v67 + v66;
    *((_BYTE *)v67 + v63) = 0;
    v61 = (uint64_t)v67 + v63 + 1;
    if (v60 == (char *)v62)
    {
      v67 = (char *)v67 + v63;
    }
    else
    {
      v69 = &v60[~v62];
      do
      {
        v70 = *--v60;
        (v69--)[(_QWORD)v67] = v70;
      }
      while (v60 != (char *)v62);
      v60 = (char *)v169;
    }
    *(_QWORD *)&v169 = v67;
    *((_QWORD *)&v169 + 1) = v61;
    v170 = v68;
    if (v60)
      operator delete(v60);
  }
  else
  {
    **((_BYTE **)&v169 + 1) = 0;
    v61 = (uint64_t)(v60 + 1);
  }
  *((_QWORD *)&v169 + 1) = v61;
  v71 = *(int *)(v144 + 8);
  if ((_DWORD)v71)
  {
    v72 = *(unsigned __int8 **)(v144 + 16);
    while (1)
    {
      v73 = *v72++;
      if (v73 == *(unsigned __int8 *)v169)
        break;
      if (!--v71)
        goto LABEL_90;
    }
  }
  else
  {
LABEL_90:
    ++v22;
    if (!(_QWORD)v169)
      goto LABEL_92;
  }
  *((_QWORD *)&v169 + 1) = v169;
  operator delete((void *)v169);
LABEL_92:
  if (v22 == 9)
    goto LABEL_94;
LABEL_93:
  if (v22 == 8)
  {
LABEL_94:
    v143 = v153;
    v153 = 0uLL;
    v74 = v144;
    v144 = 0uLL;
    std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v164, (uint64_t)v162);
    v75 = v17;
    v149 = 0;
    v150 = 0;
    v147 = 0;
    v148 = 0;
    std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v169, (uint64_t)&v164);
    v76 = v75;
    v159 = v143;
    v156 = 0;
    v157 = 0;
    v158 = v74;
    v154 = 0;
    v155 = 0;
    v77 = *(unsigned int *)(v143 + 8);
    v78 = operator new();
    *(_QWORD *)v78 = &off_1E2DA1250;
    *(_OWORD *)(v78 + 32) = 0u;
    *(_OWORD *)(v78 + 48) = 0u;
    *(_DWORD *)(v78 + 8) = v77;
    v79 = Espresso::kern_alloc_uninitialized((Espresso *)(int)v77);
    bzero(v79, (int)v77);
    *(_QWORD *)(v78 + 16) = v79;
    *(_BYTE *)(v78 + 24) = 1;
    if ((_DWORD)v77)
    {
      for (i = 0; i != v77; ++i)
        *(_BYTE *)(*(_QWORD *)(v78 + 16) + i) = *(_BYTE *)(*(_QWORD *)(v74 + 16)
                                                         + *(unsigned __int8 *)(*(_QWORD *)(v143 + 16) + i));
    }
    if (*((_QWORD *)&v74 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v74 + 1) + 16))(*((_QWORD *)&v74 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v74 + 1));
      }
    }
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
    if (*((_QWORD *)&v159 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("Dense"), CFSTR("KernelMode"));
    v86 = *(_QWORD *)(v78 + 16);
    v160 = *(int *)(v78 + 8);
    v161 = v86;
    if (!v171)
      std::__throw_bad_function_call[abi:ne180100]();
    v87 = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t *))(*(_QWORD *)v171 + 48))(v171, &v161, &v160);
    v89 = v88;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v87);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v90, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v89);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v91, CFSTR("KernelIndex"));

    objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("UInt8"), CFSTR("KernelType"));
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);

    v92 = v171;
    if (v171 == &v169)
    {
      v93 = 4;
      v92 = &v169;
    }
    else
    {
      if (!v171)
      {
LABEL_117:
        v97 = v155;
        if (v155)
        {
          v98 = (unint64_t *)&v155->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        v100 = v157;
        if (v157)
        {
          v101 = (unint64_t *)&v157->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }

        v103 = v166;
        if (v166 == &v164)
        {
          v104 = 4;
          v103 = &v164;
        }
        else
        {
          if (!v166)
            goto LABEL_132;
          v104 = 5;
        }
        (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_132:
        if (v148)
        {
          v105 = &v148->__shared_owners_;
          do
            v106 = __ldaxr((unint64_t *)v105);
          while (__stlxr(v106 - 1, (unint64_t *)v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        if (v150)
        {
          v107 = &v150->__shared_owners_;
          do
            v108 = __ldaxr((unint64_t *)v107);
          while (__stlxr(v108 - 1, (unint64_t *)v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        goto LABEL_174;
      }
      v93 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
    goto LABEL_117;
  }
  objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette256"), CFSTR("KernelMode"));
  if (v22 == 2)
  {
    v94 = *a4;
    if ((*a4 & 2) != 0)
    {
      objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette4"), CFSTR("KernelMode"));
      v95 = 4;
      v96 = 2;
      goto LABEL_153;
    }
    goto LABEL_146;
  }
  if (v22 != 1)
  {
    if (v22 > 4)
    {
      if (v22 > 6)
      {
LABEL_151:
        objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette256"), CFSTR("KernelMode"));
        v95 = 256;
        v96 = 8;
        goto LABEL_153;
      }
      v94 = *a4;
LABEL_150:
      if ((v94 & 8) != 0)
      {
        objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette64"), CFSTR("KernelMode"));
        v95 = 64;
        v96 = 6;
        goto LABEL_153;
      }
      goto LABEL_151;
    }
    v94 = *a4;
LABEL_146:
    if ((v94 & 4) != 0)
    {
      objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette16"), CFSTR("KernelMode"));
      v95 = 16;
      v96 = 4;
      goto LABEL_153;
    }
    goto LABEL_150;
  }
  v94 = *a4;
  if ((*a4 & 1) == 0)
    goto LABEL_146;
  objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette2"), CFSTR("KernelMode"));
  v95 = 2;
  v96 = 1;
LABEL_153:
  if ((const unsigned __int8 *)v96 != v23)
  {
    if (((v96 * v24) & 7) != 0)
      v109 = ((unint64_t)(v96 * v24) >> 3) + 1;
    else
      v109 = (unint64_t)(v96 * v24) >> 3;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v169, v109, 1, 1, 1);
    v110 = v169;
    Espresso::bit_packer::change_index_bitwidth_anec_to_anec(*(_QWORD *)(v153 + 16), v23, *(Espresso::bit_packer **)(v169 + 16), (unsigned __int8 *)v96, v24);
    v111 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v153, v110, *((uint64_t *)&v169 + 1));
    if (v95 != *(_DWORD *)(v144 + 8))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v164, v95, 1, 1, 1);
      v112 = v164;
      v113 = *(_DWORD *)(v144 + 8);
      if (v113 >= *(_DWORD *)(v164 + 8))
        v113 = *(_DWORD *)(v164 + 8);
      memcpy(*(void **)(v164 + 16), *(const void **)(v144 + 16), (int)v113);
      v114 = v165;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v144, v112, (uint64_t)v165);
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    }
    if (v111)
    {
      v117 = (unint64_t *)&v111->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
  }
  objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("UInt8"), CFSTR("KernelType"));
  v119 = *(int *)(v153 + 8);
  *(_QWORD *)&v169 = *(_QWORD *)(v153 + 16);
  v164 = v119;
  if (!v163)
    std::__throw_bad_function_call[abi:ne180100]();
  v120 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t *))(*v163 + 48))(v163, &v169, &v164);
  v122 = v121;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v120);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v123, CFSTR("KernelOffset"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v122);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v124, CFSTR("KernelIndex"));

  v125 = *(int *)(v144 + 8);
  *(_QWORD *)&v169 = *(_QWORD *)(v144 + 16);
  v164 = v125;
  if (!v163)
    std::__throw_bad_function_call[abi:ne180100]();
  v126 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t *))(*v163 + 48))(v163, &v169, &v164);
  v128 = v127;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v126);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v129, CFSTR("KernelPaletteLUTOffset"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v128);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v130, CFSTR("KernelPaletteLUTIndex"));

LABEL_174:
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }

  v134 = v163;
  if (v163 == v162)
  {
    v135 = 4;
    v134 = v162;
    goto LABEL_183;
  }
  if (v163)
  {
    v135 = 5;
LABEL_183:
    (*(void (**)(void))(*v134 + 8 * v135))();
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v146;
  if (v146)
  {
    v140 = (unint64_t *)&v146->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }

}

void sub_19177A4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char *a40)
{
  void *v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);

  v43 = a40;
  if (a40 == &a37)
  {
    v44 = 4;
    v43 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_6;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_6:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_lut_to_int8_weights(uint64_t *a1, void *a2, uint64_t a3, char *a4, unsigned __int8 *a5, char a6, uint64_t a7)
{
  id v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  const unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  void *v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  __int128 v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t i;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  __int128 *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  unsigned int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  _QWORD *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t *v166;
  _BYTE v167[24];
  _BYTE *v168;
  __int128 v169;
  char *v170;
  __int128 *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a1[6];
  v14 = *(_DWORD *)(v13 + 8);
  v15 = (char *)operator new(0x58uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E2DBED50;
  v16 = *(_QWORD *)(v13 + 16);
  *((_QWORD *)v15 + 3) = &off_1E2DA1250;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((_DWORD *)v15 + 8) = v14;
  *((_QWORD *)v15 + 5) = v16;
  v15[48] = 0;
  *(_QWORD *)&v144 = v15 + 24;
  *((_QWORD *)&v144 + 1) = v15;
  v145 = 0;
  v146 = 0;
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v162, a3);
  v17 = v12;
  v18 = *a1;
  v19 = a1[1];
  *(_QWORD *)&v153 = *a1;
  *((_QWORD *)&v153 + 1) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *((_DWORD *)a1 + 39);
  v23 = (const unsigned __int8 *)v22;
  v24 = *((int *)a1 + 33) * (uint64_t)*((int *)a1 + 32) * *((int *)a1 + 34) * *((int *)a1 + 35);
  if (v22 != 8)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v169, *(_DWORD *)(v18 + 8), 1, 1, 1);
    v25 = v169;
    Espresso::bit_packer::cast_indexes_to_n_bits_anec_format(*(_QWORD *)(v153 + 16), (const unsigned __int8 *)v22, *(Espresso::bit_packer **)(v169 + 16), (unsigned __int8 *)v22, v24);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v153, v25, *((uint64_t *)&v169 + 1));
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v152 = v144;
  if (*((_QWORD *)&v144 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = v169;
  v169 = 0uLL;
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  v144 = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v151 = v153;
  if (*((_QWORD *)&v153 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = v169;
  v169 = 0uLL;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  v153 = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  Espresso::swap_zero_to_first_position_anec_format(*(Espresso **)(v144 + 16), (unsigned __int8 *)1, *(_QWORD *)(v153 + 16), (unsigned __int8 *)v24, v22, 0);
  v53 = v153;
  v54 = (uint64_t)v163;
  if (!v163)
    goto LABEL_49;
  if (v163 != v162)
  {
    v54 = (*(uint64_t (**)(_QWORD *))(*v163 + 16))(v163);
LABEL_49:
    v168 = (_BYTE *)v54;
    goto LABEL_51;
  }
  v168 = v167;
  (*(void (**)(_QWORD *, _BYTE *))(v162[0] + 24))(v162, v167);
LABEL_51:
  v55 = Espresso::ANECompilerEngine::try_write_sparsified_lut_kernel(v53, v22, v24, v144, 1u, (uint64_t)CFSTR("Int8"), a5, a7, v17, (uint64_t)v167);
  v57 = v56;
  v58 = v168;
  if (v168 == v167)
  {
    v59 = 4;
    v58 = v167;
  }
  else
  {
    if (!v168)
      goto LABEL_56;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_56:
  if (v55 == 1)
  {
    if ((a6 & 1) == 0)
      goto LABEL_90;
    if ((v57 & 0x8000000000000000) == 0)
    {
      if (!v57)
        ++v22;
      goto LABEL_89;
    }
  }
  else
  {
    if (v55 == 2)
      goto LABEL_171;
    if ((a6 & 1) == 0)
      goto LABEL_90;
  }
  v169 = 0uLL;
  v170 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v169, 1uLL);
  v60 = (char *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1) >= (unint64_t)v170)
  {
    v62 = v169;
    v63 = *((_QWORD *)&v169 + 1) - v169;
    v64 = *((_QWORD *)&v169 + 1) - v169 + 1;
    if (v64 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v65 = (unint64_t)&v170[-v169];
    if (2 * (uint64_t)&v170[-v169] > (unint64_t)v64)
      v64 = 2 * v65;
    if (v65 >= 0x3FFFFFFFFFFFFFFFLL)
      v66 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
      v67 = operator new(v66);
    else
      v67 = 0;
    v68 = (char *)v67 + v66;
    *((_BYTE *)v67 + v63) = 0;
    v61 = (uint64_t)v67 + v63 + 1;
    if (v60 == (char *)v62)
    {
      v67 = (char *)v67 + v63;
    }
    else
    {
      v69 = &v60[~v62];
      do
      {
        v70 = *--v60;
        (v69--)[(_QWORD)v67] = v70;
      }
      while (v60 != (char *)v62);
      v60 = (char *)v169;
    }
    *(_QWORD *)&v169 = v67;
    *((_QWORD *)&v169 + 1) = v61;
    v170 = v68;
    if (v60)
      operator delete(v60);
  }
  else
  {
    **((_BYTE **)&v169 + 1) = 0;
    v61 = (uint64_t)(v60 + 1);
  }
  *((_QWORD *)&v169 + 1) = v61;
  v71 = *(int *)(v144 + 8);
  if ((_DWORD)v71)
  {
    v72 = *(unsigned __int8 **)(v144 + 16);
    while (1)
    {
      v73 = *v72++;
      if (v73 == *(unsigned __int8 *)v169)
        break;
      if (!--v71)
        goto LABEL_87;
    }
  }
  else
  {
LABEL_87:
    ++v22;
    if (!(_QWORD)v169)
      goto LABEL_89;
  }
  *((_QWORD *)&v169 + 1) = v169;
  operator delete((void *)v169);
LABEL_89:
  if (v22 == 9)
    goto LABEL_91;
LABEL_90:
  if (v22 == 8)
  {
LABEL_91:
    v143 = v153;
    v153 = 0uLL;
    v74 = v144;
    v144 = 0uLL;
    std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v164, (uint64_t)v162);
    v75 = v17;
    v149 = 0;
    v150 = 0;
    v147 = 0;
    v148 = 0;
    std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v169, (uint64_t)&v164);
    v76 = v75;
    v159 = v143;
    v156 = 0;
    v157 = 0;
    v158 = v74;
    v154 = 0;
    v155 = 0;
    v77 = *(unsigned int *)(v143 + 8);
    v78 = operator new();
    *(_QWORD *)v78 = &off_1E2DA1250;
    *(_OWORD *)(v78 + 32) = 0u;
    *(_OWORD *)(v78 + 48) = 0u;
    *(_DWORD *)(v78 + 8) = v77;
    v79 = Espresso::kern_alloc_uninitialized((Espresso *)(int)v77);
    bzero(v79, (int)v77);
    *(_QWORD *)(v78 + 16) = v79;
    *(_BYTE *)(v78 + 24) = 1;
    if ((_DWORD)v77)
    {
      for (i = 0; i != v77; ++i)
        *(_BYTE *)(*(_QWORD *)(v78 + 16) + i) = *(_BYTE *)(*(_QWORD *)(v74 + 16)
                                                         + *(unsigned __int8 *)(*(_QWORD *)(v143 + 16) + i));
    }
    if (*((_QWORD *)&v74 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v74 + 1) + 16))(*((_QWORD *)&v74 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v74 + 1));
      }
    }
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
    if (*((_QWORD *)&v159 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("Dense"), CFSTR("KernelMode"));
    v86 = *(_QWORD *)(v78 + 16);
    v160 = *(int *)(v78 + 8);
    v161 = v86;
    if (!v171)
      std::__throw_bad_function_call[abi:ne180100]();
    v87 = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t *))(*(_QWORD *)v171 + 48))(v171, &v161, &v160);
    v89 = v88;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v87);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v90, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v89);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v91, CFSTR("KernelIndex"));

    objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);

    v92 = v171;
    if (v171 == &v169)
    {
      v93 = 4;
      v92 = &v169;
    }
    else
    {
      if (!v171)
      {
LABEL_114:
        v97 = v155;
        if (v155)
        {
          v98 = (unint64_t *)&v155->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        v100 = v157;
        if (v157)
        {
          v101 = (unint64_t *)&v157->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }

        v103 = v166;
        if (v166 == &v164)
        {
          v104 = 4;
          v103 = &v164;
        }
        else
        {
          if (!v166)
            goto LABEL_129;
          v104 = 5;
        }
        (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_129:
        if (v148)
        {
          v105 = &v148->__shared_owners_;
          do
            v106 = __ldaxr((unint64_t *)v105);
          while (__stlxr(v106 - 1, (unint64_t *)v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        if (v150)
        {
          v107 = &v150->__shared_owners_;
          do
            v108 = __ldaxr((unint64_t *)v107);
          while (__stlxr(v108 - 1, (unint64_t *)v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        goto LABEL_171;
      }
      v93 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
    goto LABEL_114;
  }
  objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette256"), CFSTR("KernelMode"));
  if (v22 == 2)
  {
    v94 = *a4;
    if ((*a4 & 2) != 0)
    {
      objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette4"), CFSTR("KernelMode"));
      v95 = 4;
      v96 = 2;
      goto LABEL_150;
    }
    goto LABEL_143;
  }
  if (v22 != 1)
  {
    if (v22 > 4)
    {
      if (v22 > 6)
      {
LABEL_148:
        objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette256"), CFSTR("KernelMode"));
        v95 = 256;
        v96 = 8;
        goto LABEL_150;
      }
      v94 = *a4;
LABEL_147:
      if ((v94 & 8) != 0)
      {
        objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette64"), CFSTR("KernelMode"));
        v95 = 64;
        v96 = 6;
        goto LABEL_150;
      }
      goto LABEL_148;
    }
    v94 = *a4;
LABEL_143:
    if ((v94 & 4) != 0)
    {
      objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette16"), CFSTR("KernelMode"));
      v95 = 16;
      v96 = 4;
      goto LABEL_150;
    }
    goto LABEL_147;
  }
  v94 = *a4;
  if ((*a4 & 1) == 0)
    goto LABEL_143;
  objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Palette2"), CFSTR("KernelMode"));
  v95 = 2;
  v96 = 1;
LABEL_150:
  if ((const unsigned __int8 *)v96 != v23)
  {
    if (((v96 * v24) & 7) != 0)
      v109 = ((unint64_t)(v96 * v24) >> 3) + 1;
    else
      v109 = (unint64_t)(v96 * v24) >> 3;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v169, v109, 1, 1, 1);
    v110 = v169;
    Espresso::bit_packer::change_index_bitwidth_anec_to_anec(*(_QWORD *)(v153 + 16), v23, *(Espresso::bit_packer **)(v169 + 16), (unsigned __int8 *)v96, v24);
    v111 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v153, v110, *((uint64_t *)&v169 + 1));
    if (v95 != *(_DWORD *)(v144 + 8))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v164, v95, 1, 1, 1);
      v112 = v164;
      v113 = *(_DWORD *)(v144 + 8);
      if (v113 >= *(_DWORD *)(v164 + 8))
        v113 = *(_DWORD *)(v164 + 8);
      memcpy(*(void **)(v164 + 16), *(const void **)(v144 + 16), (int)v113);
      v114 = v165;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v144, v112, (uint64_t)v165);
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    }
    if (v111)
    {
      v117 = (unint64_t *)&v111->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
  }
  objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
  v119 = *(int *)(v153 + 8);
  *(_QWORD *)&v169 = *(_QWORD *)(v153 + 16);
  v164 = v119;
  if (!v163)
    std::__throw_bad_function_call[abi:ne180100]();
  v120 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t *))(*v163 + 48))(v163, &v169, &v164);
  v122 = v121;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v120);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v123, CFSTR("KernelOffset"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v122);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v124, CFSTR("KernelIndex"));

  v125 = *(int *)(v144 + 8);
  *(_QWORD *)&v169 = *(_QWORD *)(v144 + 16);
  v164 = v125;
  if (!v163)
    std::__throw_bad_function_call[abi:ne180100]();
  v126 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t *))(*v163 + 48))(v163, &v169, &v164);
  v128 = v127;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v126);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v129, CFSTR("KernelPaletteLUTOffset"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v128);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v130, CFSTR("KernelPaletteLUTIndex"));

LABEL_171:
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }

  v134 = v163;
  if (v163 == v162)
  {
    v135 = 4;
    v134 = v162;
    goto LABEL_180;
  }
  if (v163)
  {
    v135 = 5;
LABEL_180:
    (*(void (**)(void))(*v134 + 8 * v135))();
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v146;
  if (v146)
  {
    v140 = (unint64_t *)&v146->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }

}

void sub_19177B474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  v30 = *(_QWORD **)(v28 - 200);
  if (v30 == (_QWORD *)(v28 - 224))
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 224);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_vector_broadcasting(uint64_t a1, id *a2, uint64_t a3, const std::string *a4, unsigned int *a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  __CFString *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  std::string v28;
  uint64_t v29;
  std::vector<std::string> v30;
  void *__p;
  char v32;
  id v33;
  __CFString *v34;
  id v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[3];
  const __CFString *v43;
  void *v44;
  std::string __str;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v28.__r_.__value_.__l.__data_, a2);
  std::string::operator=(&v28, a4);
  v43 = CFSTR("BroadcastInfo");
  v41[0] = CFSTR("Height");
  v40[0] = CFSTR("Dimension");
  v40[1] = CFSTR("Size");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5[1]);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v41[1] = v27;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = v9;
  v38[1] = CFSTR("Size");
  v39[0] = CFSTR("Channel");
  v38[0] = CFSTR("Dimension");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5[2]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v39[1] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[1] = v11;
  v36[1] = CFSTR("Size");
  v37[0] = CFSTR("Batch");
  v36[0] = CFSTR("Dimension");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5[4] * a5[3]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v42[2] = v13;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v42, 3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v15, "mutableCopy");
  v17 = v35;
  v35 = v16;

  v18 = v34;
  v34 = CFSTR("Broadcast");

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __str = *(std::string *)a3;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v30, &__str, &v46, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  if (v20 >= v19)
  {
    v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v20 - *(_QWORD *)a1) >> 4);
    if (v22 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v23 = 0x8E38E38E38E38E39 * ((uint64_t)(v19 - *(_QWORD *)a1) >> 4);
    v24 = 2 * v23;
    if (2 * v23 <= v22 + 1)
      v24 = v22 + 1;
    if (v23 >= 0xE38E38E38E38E3)
      v25 = 0x1C71C71C71C71C7;
    else
      v25 = v24;
    *((_QWORD *)&v46 + 1) = a1 + 16;
    if (v25)
      v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v25);
    else
      v26 = 0;
    __str.__r_.__value_.__r.__words[0] = v25;
    __str.__r_.__value_.__l.__size_ = v25 + 144 * v22;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    *(_QWORD *)&v46 = v25 + 144 * v26;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v28);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)a1, &__str);
    v21 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)(a1 + 8), (uint64_t)&v28);
    v21 = v20 + 144;
    *(_QWORD *)(a1 + 8) = v21;
  }
  *(_QWORD *)(a1 + 8) = v21;

  if (v32 < 0)
    operator delete(__p);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_19177BA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::gather_nd_kernel::~gather_nd_kernel(Espresso::MPSGraphEngine::Kernels::gather_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::gather_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  int64x2_t *v25;
  std::__shared_weak_count *v26;
  std::string v27;
  std::string v28;
  std::string __p;
  _BYTE v30[24];
  _BYTE v31[32];
  std::__shared_weak_count *v32;
  int64x2_t *v33;
  std::__shared_weak_count *v34;
  void **v35;

  v4 = a3[1] - *a3;
  if (v4 != 128)
  {
    v16 = *(std::__shared_weak_count **)(a2 + 8);
    v33 = *(int64x2_t **)a2;
    v34 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      v4 = a3[1] - *a3;
    }
    std::to_string(&v27, v4 >> 6);
    v19 = std::string::insert(&v27, 0, "[Dispatch::MPSGraph::gather_nd_kernel] unsupported: number of inputs must be 2, received ");
    v28 = *v19;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v28, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v33, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v20 = v32;
    if (v32)
    {
      v21 = (unint64_t *)&v32->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v35 = (void **)v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v35);
    v35 = (void **)v30;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v13 = v34;
    if (!v34)
      return 0;
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v15 = __ldaxr(v23);
    while (__stlxr(v15 - 1, v23));
    goto LABEL_40;
  }
  v5 = *(_DWORD *)(a1 + 288);
  if (!v5)
    return 1;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v25 = *(int64x2_t **)a2;
  v26 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v5 = *(_DWORD *)(a1 + 288);
  }
  std::to_string(&v27, v5);
  v9 = std::string::insert(&v27, 0, "[Dispatch::MPSGraph::gather_nd_kernel] unsupported: batch_dims must be 0, received ");
  v28 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v28, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v25, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v10 = v32;
  if (v32)
  {
    v11 = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v35 = (void **)v31;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v35);
  v35 = (void **)v30;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v13 = v26;
  if (v26)
  {
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_40:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 0;
}

void sub_19177BE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a24);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t Espresso::sequential_builder::sequential_builder(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  v7 = (_QWORD *)(a1 + 96);
  v8 = (_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 96), *a4, a4[1]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, *a2, a2[1]);
  *(_DWORD *)(a1 + 128) = a3;
  if (*(char *)(a1 + 79) < 0)
  {
    **(_BYTE **)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 79) = 0;
  }
  if (!*v7)
  {
    Espresso::abstract_engine_factory::shared(&v16);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v7, &v16);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 80, &v16);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 80) + 16), *a2, a2[1]);
  return a1;
}

void sub_19177C044(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2, *(_QWORD **)(v1 + 24));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::sequential_builder::sequential_builder(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  v9 = (_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 192) = 0;
  v10 = (_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 96), *a5, a5[1]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v10, *a3, a3[1]);
  *(_DWORD *)(a1 + 128) = a4;
  if (*(char *)(a1 + 79) < 0)
  {
    **(_BYTE **)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 79) = 0;
  }
  if (!*v9)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v9, &v15);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 80), *a2, a2[1]);
  if (*(_QWORD *)(a1 + 80))
    Espresso::sequential_builder::init_net_shape((Espresso::sequential_builder *)a1);
  return a1;
}

void sub_19177C1EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2, *(_QWORD **)(v1 + 24));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::init_net_shape(Espresso::sequential_builder *this)
{
  _QWORD *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 *i;
  uint64_t **v8;
  char *v9;
  __int128 v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  std::string __p;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string *p_p;

  if (!*(_QWORD *)this)
  {
    v2 = operator new(0x48uLL);
    v2[1] = 0;
    v2[2] = 0;
    v2[4] = 0;
    v2[3] = v2 + 4;
    *v2 = &off_1E2DB7068;
    v2[8] = 0;
    v2[7] = 0;
    v2[5] = 0;
    v2[6] = v2 + 7;
    *(_QWORD *)&v3 = v2 + 3;
    *((_QWORD *)&v3 + 1) = v2;
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    *(_OWORD *)this = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    for (i = *(__int128 **)(*((_QWORD *)this + 10) + 152); i; i = *(__int128 **)i)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, i + 1);
      Espresso::abstract_blob_container::shape((char *)v15, v20);
      v8 = *(uint64_t ***)this;
      p_p = &__p;
      v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, &__p, (__int128 **)&p_p);
      v10 = v15[1];
      *(_OWORD *)(v9 + 56) = v15[0];
      *(_OWORD *)(v9 + 72) = v10;
      *((_QWORD *)v9 + 11) = v16;
      v11 = (void *)*((_QWORD *)v9 + 12);
      if (v11)
      {
        *((_QWORD *)v9 + 13) = v11;
        operator delete(v11);
        *((_QWORD *)v9 + 12) = 0;
        *((_QWORD *)v9 + 13) = 0;
        *((_QWORD *)v9 + 14) = 0;
      }
      *((_OWORD *)v9 + 6) = v17;
      *((_QWORD *)v9 + 14) = v18;
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19177C3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::network_shape>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::network_shape>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::network_shape>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 48, *(char **)(a1 + 56));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v2, *(char **)(a1 + 32));
}

void Espresso::sequential_builder::add_kernel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, std::string **a5, std::string **a6)
{
  const char *v12;
  const char *v13;
  const char *v14;

  if (*(_BYTE *)(a1 + 184))
  {
    if (*(char *)(a3 + 23) >= 0)
      v12 = (const char *)a3;
    else
      v12 = *(const char **)a3;
    if (*(char *)(a4 + 23) >= 0)
      v13 = (const char *)a4;
    else
      v13 = *(const char **)a4;
    v14 = (const char *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v14 = *(const char **)v14;
    printf("\t[sequential_builder::add_kernel] %s %s dbg: %s\n", v12, v13, v14);
  }
  Espresso::sequential_builder::add_layer_to_network(a1, a2, (const std::string *)a3, (const std::string *)a4, (const std::string *)(a1 + 56), a5, a6);
}

void Espresso::sequential_builder::add_layer_to_network(uint64_t a1, uint64_t *a2, const std::string *a3, const std::string *a4, const std::string *a5, std::string **a6, std::string **a7)
{
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  int64x2_t *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  int64x2_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  int64x2_t *v48;

  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  v15 = (unint64_t *)(v14 + 8);
  *(_QWORD *)v14 = &off_1E2DBF0D0;
  *((_QWORD *)v14 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_QWORD *)v14 + 2) = 0;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((_QWORD *)v14 + 30) = 0;
  *(_QWORD *)&v44 = v14 + 24;
  *((_QWORD *)&v44 + 1) = v14;
  *((_DWORD *)v14 + 9) = *(_DWORD *)(a1 + 128);
  v16 = *(_QWORD *)(*a2 + 8);
  if (!v16)
    v16 = *(_QWORD *)(a1 + 112);
  *((_DWORD *)v14 + 8) = (***(uint64_t (****)(_QWORD))(v16 + 8))(*(_QWORD *)(v16 + 8));
  std::string::operator=((std::string *)(v14 + 64), a3);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v14 + 11, *a2, a2[1]);
  std::string::operator=((std::string *)(v14 + 40), a4);
  std::string::operator=((std::string *)(v14 + 224), a5);
  v17 = *(int64x2_t **)(a1 + 80);
  v18 = (_QWORD *)v17[2].i64[1];
  v19 = v17[3].u64[0];
  if ((unint64_t)v18 >= v19)
  {
    v23 = v17[2].i64[0];
    v24 = ((uint64_t)v18 - v23) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v26 = v19 - v23;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v48 = v17 + 3;
    v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v27);
    v30 = &v28[16 * v24];
    *(_OWORD *)v30 = v44;
    if (*((_QWORD *)&v44 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v34 = (_QWORD *)v17[2].i64[0];
    v33 = (_QWORD *)v17[2].i64[1];
    if (v33 == v34)
    {
      v37 = vdupq_n_s64((unint64_t)v33);
      v35 = &v28[16 * v24];
    }
    else
    {
      v35 = &v28[16 * v24];
      do
      {
        v36 = *((_OWORD *)v33 - 1);
        v33 -= 2;
        *((_OWORD *)v35 - 1) = v36;
        v35 -= 16;
        *v33 = 0;
        v33[1] = 0;
      }
      while (v33 != v34);
      v37 = v17[2];
    }
    v21 = v30 + 16;
    v17[2].i64[0] = (uint64_t)v35;
    v17[2].i64[1] = (uint64_t)(v30 + 16);
    v46 = v37;
    v38 = v17[3].i64[0];
    v17[3].i64[0] = (uint64_t)&v28[16 * v29];
    v47 = v38;
    v45 = v37.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v45);
    v22 = *(int64x2_t **)(a1 + 80);
  }
  else
  {
    *v18 = v44;
    v18[1] = v14;
    do
      v20 = __ldxr(v15);
    while (__stxr(v20 + 1, v15));
    v21 = v18 + 2;
    v22 = v17;
  }
  v17[2].i64[1] = (uint64_t)v21;
  v45 = (((v22[2].i64[1] - v22[2].i64[0]) << 28) - 0x100000000) >> 32;
  v39 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v22[3].i64[1], v45, &v45);
  v40 = *(_QWORD *)(a1 + 80);
  v45 = (((*(_QWORD *)(v40 + 40) - *(_QWORD *)(v40 + 32)) << 28) - 0x100000000) >> 32;
  v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v40 + 96, v45, &v45);
  if (v39 + 3 != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v39 + 3), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  if (v41 + 3 != a7)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v41 + 3), *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a7[1] - (char *)*a7) >> 3));
  if (*((_QWORD *)&v44 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 16))(*((_QWORD *)&v44 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44 + 1));
    }
  }
}

void sub_19177C828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_kernel_dbg(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string **a6, std::string **a7)
{
  const char *v14;
  const char *v15;
  const char *v16;

  if (*(_BYTE *)(a1 + 184))
  {
    if (*(char *)(a3 + 23) >= 0)
      v14 = (const char *)a3;
    else
      v14 = *(const char **)a3;
    if (*(char *)(a4 + 23) >= 0)
      v15 = (const char *)a4;
    else
      v15 = *(const char **)a4;
    if (*(char *)(a5 + 23) >= 0)
      v16 = (const char *)a5;
    else
      v16 = *(const char **)a5;
    printf("\t[sequential_builder::add_kernel_dbg] %s %s dbg: %s\n", v14, v15, v16);
  }
  Espresso::sequential_builder::add_layer_to_network(a1, a2, (const std::string *)a3, (const std::string *)a4, (const std::string *)a5, a6, a7);
}

void Espresso::sequential_builder::build_from_data_shape(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  std::string __p;
  char **v16;
  char *v17[2];
  std::string *p_p;

  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(v5 + 40) != *(_QWORD *)(v5 + 32))
  {
    v7 = 0;
    while (1)
    {
      __p.__r_.__value_.__r.__words[0] = v7;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5 + 56, v7, &__p);
      if (v8[4] != v8[3])
        break;
      ++v7;
      v5 = *(_QWORD *)(a1 + 80);
      if (v7 >= (uint64_t)(*(_QWORD *)(v5 + 40) - *(_QWORD *)(v5 + 32)) >> 4)
        goto LABEL_13;
    }
    v9 = *(_QWORD *)(a1 + 80) + 56;
    p_p = (std::string *)v7;
    v10 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v7, &p_p)[3];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    }
    p_p = &__p;
    v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v16, &__p, (__int128 **)&p_p);
    v13 = *(_OWORD *)a2;
    v14 = *((_OWORD *)a2 + 1);
    *((_QWORD *)v12 + 11) = *((_QWORD *)a2 + 4);
    *(_OWORD *)(v12 + 72) = v14;
    *(_OWORD *)(v12 + 56) = v13;
    if (v12 + 56 != a2)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v12 + 96, *((char **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_13:
  Espresso::sequential_builder::build_from_shapes(a1, (uint64_t)&v16, a3);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v16, v17[0]);
}

void sub_19177CA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, char *a17)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::build_from_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  Espresso::sequential_builder::build_from_shapes(a1, a2, 0, &v11);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(_QWORD *)(a1 + 88);
  *a3 = *(_QWORD *)(a1 + 80);
  a3[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
}

void Espresso::sequential_builder::build_from_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  Espresso *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51[2];
  _QWORD *v52;
  char *v53;
  char *v54[3];
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;

  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(std::__shared_weak_count **)(a1 + 88);
  v55 = v8;
  v56 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD **)(v8 + 32);
  v13 = *(_QWORD **)(v8 + 40);
  if (v12 != v13)
  {
    v14 = 0;
    while (1)
    {
      v15 = (char *)v12[1];
      v52 = (_QWORD *)*v12;
      v53 = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v55 + 32) + 16 * v14);
      v19 = (_QWORD *)(v18 + 40);
      v20 = *(char *)(v18 + 63);
      if (v20 < 0)
      {
        if (*(_QWORD *)(v18 + 48) != 13)
          goto LABEL_18;
        v19 = (_QWORD *)*v19;
      }
      else if (v20 != 13)
      {
        goto LABEL_18;
      }
      v21 = (_QWORD *)*v19;
      v22 = *(_QWORD *)((char *)v19 + 5);
      v23 = v21 == (_QWORD *)0x6E6F635F64616F6CLL && v22 == 0x746E6174736E6F63;
      if (!v23)
      {
LABEL_18:
        if (v15)
          goto LABEL_19;
        goto LABEL_24;
      }
      v57 = v14;
      v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55 + 56, v14, &v57);
      std::vector<std::string>::__clear[abi:ne180100](v26 + 3);
      if (v15)
      {
LABEL_19:
        v24 = (unint64_t *)(v15 + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          (*(void (**)(char *))(*(_QWORD *)v15 + 16))(v15);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
        }
      }
LABEL_24:
      ++v14;
      v12 += 2;
      if (v12 == v13)
      {
        v9 = v56;
        break;
      }
    }
  }
  if (v9)
  {
    v27 = (unint64_t *)&v9->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  Espresso::net::_tag_inputs_and_outputs(*(Espresso::net **)(a1 + 80));
  v29 = *(_QWORD *)(a1 + 80);
  v30 = *(_QWORD **)(v29 + 232);
  if (v30 != (_QWORD *)(v29 + 240))
  {
    do
    {
      v31 = v30 + 4;
      if ((_QWORD *)(a2 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, v30 + 4))
      {
        if (*((char *)v30 + 55) < 0)
          v31 = (_QWORD *)*v31;
        v52 = v31;
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("shape of input %s missed", &v52);
      }
      v32 = (_QWORD *)v30[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v30[2];
          v23 = *v33 == (_QWORD)v30;
          v30 = v33;
        }
        while (!v23);
      }
      v30 = v33;
    }
    while (v33 != (_QWORD *)(v29 + 240));
  }
  v34 = *(std::__shared_weak_count **)(a1 + 88);
  v51[0] = v29;
  v51[1] = (uint64_t)v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  Espresso::compute_network_shape_starting_from_data_shapes(v51, a2, (uint64_t)&v52);
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v39 = *(Espresso **)(a1 + 80);
  if (a3)
  {
    v40 = *(std::__shared_weak_count **)(a1 + 88);
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    Espresso::shape_network_recursive(v39, (Espresso::net *)&v52, 0, 1);
    if (v40)
    {
      v43 = (unint64_t *)&v40->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      goto LABEL_61;
    }
  }
  else
  {
    v40 = *(std::__shared_weak_count **)(a1 + 88);
    if (v40)
    {
      v45 = (unint64_t *)&v40->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    Espresso::shape_network_recursive(v39, (Espresso::net *)&v52, 0, 0);
    if (v40)
    {
      v47 = (unint64_t *)&v40->__shared_owners_;
      do
        v44 = __ldaxr(v47);
      while (__stlxr(v44 - 1, v47));
LABEL_61:
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  v48 = *(_QWORD *)(a1 + 88);
  *a4 = *(_QWORD *)(a1 + 80);
  a4[1] = v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v54, v54[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v52, v53);
}

void sub_19177CEB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  Espresso::network_shape::~network_shape((char **)va1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::infer_shapes_and_build(Espresso::sequential_builder *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  __int128 *v7;
  char *v8;
  __int128 v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t j;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  std::string::size_type v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  unint64_t i;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  std::string __p;
  uint64_t v44;
  std::__shared_weak_count *v45;
  char **v46;
  char *v47[2];
  char **v48;
  char *v49[2];
  unint64_t *p_i;
  __int128 *v51[2];

  v46 = v47;
  v47[0] = 0;
  v49[0] = 0;
  v49[1] = 0;
  v47[1] = 0;
  v48 = v49;
  v6 = (_QWORD *)*((_QWORD *)this + 10);
  v7 = (__int128 *)v6[19];
  v36 = a3;
  if (v7)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v7 + 1);
      Espresso::abstract_blob_container::shape((char *)&v38, v44);
      v51[0] = (__int128 *)&__p;
      v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v46, &__p, v51);
      v9 = v39;
      *(_OWORD *)(v8 + 56) = v38;
      *(_OWORD *)(v8 + 72) = v9;
      *((_QWORD *)v8 + 11) = v40;
      v10 = (void *)*((_QWORD *)v8 + 12);
      if (v10)
      {
        *((_QWORD *)v8 + 13) = v10;
        operator delete(v10);
        *((_QWORD *)v8 + 12) = 0;
        *((_QWORD *)v8 + 13) = 0;
        *((_QWORD *)v8 + 14) = 0;
      }
      *((_OWORD *)v8 + 6) = v41;
      *((_QWORD *)v8 + 14) = v42;
      v11 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v7 = *(__int128 **)v7;
    }
    while (v7);
    v6 = (_QWORD *)*((_QWORD *)this + 10);
  }
  for (i = a2; i < (uint64_t)(v6[5] - v6[4]) >> 4; v6 = (_QWORD *)*((_QWORD *)this + 10))
  {
    *(_QWORD *)&v38 = &i;
    v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v6 + 12), &i, (uint64_t)&std::piecewise_construct, (uint64_t **)&v38);
    v16 = (_QWORD *)v14[3];
    v15 = (_QWORD *)v14[4];
    while (v16 != v15)
    {
      if (v47 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v46, v16))
      {
        v38 = 0uLL;
        *(_QWORD *)&v39 = 0;
        v17 = *((_QWORD *)this + 10) + 56;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&i;
        v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v17, &i, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        v20 = (_QWORD *)v18[3];
        v19 = (_QWORD *)v18[4];
        while (v20 != v19)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
          v21 = (__int128 *)(std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v46, v20, (__int128 **)&__p)+ 56);
          v22 = *((_QWORD *)&v38 + 1);
          if (*((_QWORD *)&v38 + 1) >= (unint64_t)v39)
          {
            v23 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v38, v21);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v38, v21);
            v23 = v22 + 64;
          }
          *((_QWORD *)&v38 + 1) = v23;
          v20 += 3;
        }
        v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 32) + 16 * i) + 64);
        (*(void (**)(std::string *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v24 + 64))(&__p, v24, &v38);
        v25 = 0;
        v26 = 0;
        for (j = 0; ; ++j)
        {
          v28 = *((_QWORD *)this + 10) + 96;
          p_i = &i;
          v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v28, &i, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_i);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[4] - v29[3]) >> 3) <= j)
            break;
          v30 = *((_QWORD *)this + 10) + 96;
          p_i = &i;
          v31 = (uint64_t *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v30, &i, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_i)[3]+ v26);
          if (v47 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v46, v31))
          {
            v32 = __p.__r_.__value_.__r.__words[0];
            p_i = (unint64_t *)v31;
            v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v46, v31, (__int128 **)&p_i);
            v34 = *(_OWORD *)(v32 + v25);
            v35 = *(_OWORD *)(v32 + v25 + 16);
            *((_QWORD *)v33 + 11) = *(_QWORD *)(v32 + v25 + 32);
            *(_OWORD *)(v33 + 72) = v35;
            *(_OWORD *)(v33 + 56) = v34;
            if ((char *)(v32 + v25) != v33 + 56)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v33 + 96, *(char **)(v32 + v25 + 40), *(_QWORD *)(v32 + v25 + 48), (uint64_t)(*(_QWORD *)(v32 + v25 + 48) - *(_QWORD *)(v32 + v25 + 40)) >> 2);
          }
          v26 += 24;
          v25 += 64;
        }
        v51[0] = (__int128 *)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        break;
      }
      v16 += 3;
    }
    ++i;
  }
  Espresso::sequential_builder::build_from_shapes((uint64_t)this, (uint64_t)&v46, 1, v36);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v48, v49[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v46, v47[0]);
}

void sub_19177D2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25)
{
  Espresso::network_shape::~network_shape(&a25);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::build_from_network_shape(Espresso::sequential_builder *this@<X0>, const Espresso::network_shape *a2@<X1>, _QWORD *a3@<X8>)
{
  Espresso *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v5 = (Espresso *)*((_QWORD *)this + 10);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Espresso::shape_network_recursive(v5, a2, 0, 0);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = *((_QWORD *)this + 11);
  *a3 = *((_QWORD *)this + 10);
  a3[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
}

void sub_19177D3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_layer_from_network(uint64_t a1, _QWORD **a2, int a3, const std::string **a4)
{
  Espresso::sequential_builder::copy_layer_from_network(a1, *a2, a3, a4);
}

void Espresso::sequential_builder::copy_layer_from_network(uint64_t a1, _QWORD *a2, unint64_t a3, const std::string **a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  std::string *v27;

  v23 = 0uLL;
  v24 = 0;
  Espresso::map_const_get<std::unordered_map<unsigned long,std::vector<std::string>>>(&v25, a2 + 7, a3, 0, 0);
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  memset(&v22, 0, sizeof(v22));
  Espresso::map_const_get<std::unordered_map<unsigned long,std::vector<std::string>>>(&v23, a2 + 12, a3, 0, 0);
  v27 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v8 = a2[4] + 16 * a3;
  v9 = *(_QWORD *)v8;
  v10 = *(std::__shared_weak_count **)(*(_QWORD *)v8 + 72);
  v20 = *(_QWORD *)(*(_QWORD *)v8 + 64);
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v9 = *(_QWORD *)v8;
  }
  if (*(char *)(v9 + 223) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v9 + 200), *(_QWORD *)(v9 + 208));
  else
    v22 = *(std::string *)(v9 + 200);
  v18 = v25;
  v19 = v26;
  v26 = 0;
  v25 = 0uLL;
  v16 = v23;
  v17 = v24;
  v23 = 0uLL;
  v24 = 0;
  Espresso::sequential_builder::add_kernel_dbg(a1, &v20, v9 + 40, v9 + 16, (uint64_t)&v22, (std::string **)&v18, (std::string **)&v16);
  v27 = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = (std::string *)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  *(_QWORD *)&v23 = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
}

void sub_19177D5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v26 - 80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void Espresso::map_const_get<std::unordered_map<unsigned long,std::vector<std::string>>>(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(a2, a3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v8)
  {
    v9 = v8[3];
    v10 = v8[4];
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
    v12 = a1;
  }
  else
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((a5 - a4) >> 3);
    v12 = a1;
    v9 = a4;
    v10 = a5;
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v12, v9, v10, v11);
}

std::string *`anonymous namespace'::perform_substitutions(std::string *this, std::string *a2, const std::string **a3, const char *a4)
{
  std::string *i;
  const std::string *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  std::string::size_type size;
  unsigned __int8 *v12;
  int v13;
  const std::string *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;

  if (this != a2)
  {
    for (i = this; i != a2; ++i)
    {
      v8 = *a3;
      v9 = (unsigned __int8 **)a3[1];
      while (v8 != (const std::string *)v9)
      {
        v10 = HIBYTE(i->__r_.__value_.__r.__words[2]);
        if ((v10 & 0x80u) == 0)
          size = HIBYTE(i->__r_.__value_.__r.__words[2]);
        else
          size = i->__r_.__value_.__l.__size_;
        v12 = (unsigned __int8 *)HIBYTE(v8->__r_.__value_.__r.__words[2]);
        v13 = (char)v12;
        if ((char)v12 < 0)
          v12 = (unsigned __int8 *)v8->__r_.__value_.__l.__size_;
        if ((unsigned __int8 *)size == v12)
        {
          if (v13 >= 0)
            v14 = v8;
          else
            v14 = (const std::string *)v8->__r_.__value_.__r.__words[0];
          if ((v10 & 0x80) != 0)
          {
            this = (std::string *)memcmp(i->__r_.__value_.__l.__data_, v14, i->__r_.__value_.__l.__size_);
            if ((_DWORD)this)
              goto LABEL_27;
LABEL_21:
            v16 = (const char *)&v8[1];
            this = std::string::operator=(i, v8 + 1);
            if (a4)
            {
              v17 = (const char *)v8;
              if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                v17 = (const char *)v8->__r_.__value_.__r.__words[0];
              if (SHIBYTE(v8[1].__r_.__value_.__r.__words[2]) < 0)
                v16 = *(const char **)v16;
              this = (std::string *)printf("[%s] %s -> %s\n", a4, v17, v16);
            }
            goto LABEL_27;
          }
          if (!*((_BYTE *)&i->__r_.__value_.__s + 23))
            goto LABEL_21;
          v15 = 0;
          while (i->__r_.__value_.__s.__data_[v15] == v14->__r_.__value_.__s.__data_[v15])
          {
            if (v10 == ++v15)
              goto LABEL_21;
          }
        }
LABEL_27:
        v8 += 2;
      }
    }
  }
  return this;
}

void Espresso::sequential_builder::add_layer_from_network(Espresso::sequential_builder *this, Espresso::net *a2, unint64_t a3)
{
  const std::string *v3[3];
  const std::string **v4;

  memset(v3, 0, sizeof(v3));
  Espresso::sequential_builder::add_layer_from_network((uint64_t)this, (uint64_t)a2, a3, v3);
  v4 = v3;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_19177D864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

std::string *Espresso::sequential_builder::add_layer_from_network(uint64_t a1, uint64_t a2, unint64_t a3, const std::string **a4)
{
  int64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  int64x2_t v38;
  uint64_t v39;
  int64x2_t *v40;

  v36 = a3;
  v7 = *(int64x2_t **)(a1 + 80);
  v8 = *(_QWORD *)(a2 + 32) + 16 * a3;
  v9 = (_OWORD *)v7[2].i64[1];
  v10 = v7[3].u64[0];
  if ((unint64_t)v9 >= v10)
  {
    v12 = v7[2].i64[0];
    v13 = ((uint64_t)v9 - v12) >> 4;
    if ((unint64_t)(v13 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = v10 - v12;
    v15 = v14 >> 3;
    if (v14 >> 3 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v40 = v7 + 3;
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
    v19 = &v17[16 * v13];
    *(_OWORD *)v19 = *(_OWORD *)v8;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    v21 = (_QWORD *)v7[2].i64[0];
    v20 = (_QWORD *)v7[2].i64[1];
    if (v20 == v21)
    {
      v24 = vdupq_n_s64((unint64_t)v20);
      v22 = &v17[16 * v13];
    }
    else
    {
      v22 = &v17[16 * v13];
      do
      {
        v23 = *((_OWORD *)v20 - 1);
        v20 -= 2;
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 16;
        *v20 = 0;
        v20[1] = 0;
      }
      while (v20 != v21);
      v24 = v7[2];
    }
    v11 = v19 + 16;
    v7[2].i64[0] = (uint64_t)v22;
    v7[2].i64[1] = (uint64_t)(v19 + 16);
    v38 = v24;
    v25 = v7[3].i64[0];
    v7[3].i64[0] = (uint64_t)&v17[16 * v18];
    v39 = v25;
    v37 = (unint64_t *)v24.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v37);
  }
  else
  {
    *v9 = *(_OWORD *)v8;
    v11 = v9 + 1;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
  }
  v7[2].i64[1] = (uint64_t)v11;
  v26 = *(_QWORD *)(a1 + 80);
  v35 = ((uint64_t)(*(_QWORD *)(v26 + 40) - *(_QWORD *)(v26 + 32)) >> 4) - 1;
  v27 = v35;
  v28 = v26 + 56;
  v37 = &v36;
  v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,unsigned long &,std::vector<std::string>>(v28, v27, v27, (uint64_t)(v29 + 3));
  v30 = *(_QWORD *)(a1 + 80) + 96;
  v37 = &v36;
  v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 96, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,unsigned long &,std::vector<std::string>>(v30, v27, v27, (uint64_t)(v31 + 3));
  v32 = *(_QWORD *)(a1 + 80) + 56;
  v37 = (unint64_t *)&v35;
  v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v32, (unint64_t *)&v35, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,unsigned long &,std::vector<std::string>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = a2;
  *((_QWORD *)v14 + 2) = a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v14 + 5) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2)
        v4 = a2 % v9;
      else
        v4 = a2;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19177DC88(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_network(uint64_t a1, _QWORD *a2, const std::string **a3)
{
  _QWORD *v4;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = (_QWORD *)*a2;
  if (v4[5] != v4[4])
  {
    v7 = 0;
    do
    {
      v8 = (std::__shared_weak_count *)a2[1];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      Espresso::sequential_builder::copy_layer_from_network(a1, v4, v7, a3);
      if (v8)
      {
        v11 = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      ++v7;
      v4 = (_QWORD *)*a2;
    }
    while (v7 < (uint64_t)(*(_QWORD *)(*a2 + 40) - *(_QWORD *)(*a2 + 32)) >> 4);
  }
}

void sub_19177DD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **Espresso::sequential_builder::get_aux_elementwise_op_name@<X0>(int __val@<W1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  uint64_t **v17;
  std::string *p_p;
  std::string::size_type size;
  std::string *v20;
  uint64_t **result;
  std::string __p;
  std::string v23;
  std::string v24;
  std::string v25;
  int v26;

  v26 = __val;
  v7 = *(_QWORD *)(a2 + 24);
  v5 = a2 + 24;
  v6 = v7;
  v8 = (uint64_t **)(v5 - 8);
  if (!v7)
    goto LABEL_11;
  v9 = v5;
  do
  {
    v10 = *(_DWORD *)(v6 + 32);
    v11 = v10 < __val;
    if (v10 >= __val)
      v12 = (uint64_t *)v6;
    else
      v12 = (uint64_t *)(v6 + 8);
    if (!v11)
      v9 = v6;
    v6 = *v12;
  }
  while (*v12);
  if (v9 == v5 || *(_DWORD *)(v9 + 32) > __val)
LABEL_11:
    std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)(v5 - 8), __val, &v26)[5] = 0;
  std::to_string(&v23, __val);
  v13 = std::string::insert(&v23, 0, "op_of_type_");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v24, "/");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v8, __val, &v26);
  std::to_string(&__p, (unint64_t)v17[5]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v25, (const std::string::value_type *)p_p, size);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  result = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v8, __val, &v26);
  result[5] = (uint64_t *)((char *)result[5] + 1);
  return result;
}

void sub_19177DF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  _Unwind_Resume(exception_object);
}

__n128 Espresso::sequential_builder::elementwise_op@<Q0>(unsigned int __val@<W3>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t i;
  __n128 result;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  void *__p[2];
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string v28;
  char v29;
  int v30;
  int v31;
  std::string **v32;
  char v33;
  std::string v34;
  uint64_t v35;
  std::string v36;
  std::string v37;
  __int128 v38;

  *((_QWORD *)&v38 + 1) = *MEMORY[0x1E0C80C00];
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a5 + 23))
      goto LABEL_7;
LABEL_5:
    if (!*a2)
      goto LABEL_10;
    v12 = *a2;
    if ((_QWORD *)(v12 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a2, (_QWORD *)a5))goto LABEL_10;
    goto LABEL_7;
  }
  if (*(_QWORD *)(a5 + 8))
    goto LABEL_5;
LABEL_7:
  Espresso::sequential_builder::get_aux_elementwise_op_name(__val, (uint64_t)a2, &v28);
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  *(std::string *)a5 = v28;
LABEL_10:
  v28.__r_.__value_.__l.__size_ = 1065353216;
  v28.__r_.__value_.__r.__words[2] = 897988541;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28.__r_.__value_.__r.__words[0] = __val;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v36 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v37 = *(std::string *)a4;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  v34.__r_.__value_.__s.__data_[8] = 0;
  v21 = (std::string *)operator new(0x30uLL);
  v22 = v21;
  v23 = v21 + 2;
  v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v23, (__int128 *)&v36, &v38, v21);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v34 = *(std::string *)a5;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v32 = &v18;
  v33 = 0;
  v18 = (std::string *)operator new(0x18uLL);
  v19 = v18;
  v20 = v18 + 1;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (__int128 *)&v34, (__int128 *)&v35, v18);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v26, a2, (uint64_t)__p, a5, (uint64_t)&v28, (uint64_t)v21, (uint64_t)v22, (uint64_t *)&v18);
  v13 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v32 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v37.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v36 + i * 8 + 24));
  }
  if (v25 < 0)
    operator delete(__p[0]);
  result = *(__n128 *)a5;
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(_QWORD *)(a6 + 16) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  return result;
}

void sub_19177E298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  a32 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  v39 = 0;
  v40 = v37 - 128;
  while (1)
  {
    if (*(char *)(v40 + v39 + 47) < 0)
      operator delete(*(void **)(v40 + v39 + 24));
    v39 -= 24;
    if (v39 == -48)
    {
      if (a20 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::sequential_builder::by_constant_op(unsigned int __val@<W2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string v26;
  char v27;
  int v28;
  int v29;
  std::string **v30;
  char v31;
  std::string v32;
  uint64_t v33;
  std::string v34;
  __int128 v35;

  *(_QWORD *)&v35 = *MEMORY[0x1E0C80C00];
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a4 + 23))
      goto LABEL_7;
LABEL_5:
    if (!*a2)
      goto LABEL_10;
    v12 = *a2;
    if ((_QWORD *)(v12 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a2, (_QWORD *)a4))goto LABEL_10;
    goto LABEL_7;
  }
  if (*(_QWORD *)(a4 + 8))
    goto LABEL_5;
LABEL_7:
  Espresso::sequential_builder::get_aux_elementwise_op_name(__val, (uint64_t)a2, &v26);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v26;
LABEL_10:
  *(std::string::size_type *)((char *)&v26.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
  HIDWORD(v26.__r_.__value_.__r.__words[2]) = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26.__r_.__value_.__r.__words[0] = __val;
  *(float *)&v26.__r_.__value_.__r.__words[1] = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v34 = *(std::string *)a3;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  v32.__r_.__value_.__s.__data_[8] = 0;
  v19 = (std::string *)operator new(0x18uLL);
  v20 = v19;
  v21 = v19 + 1;
  v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (__int128 *)&v34, &v35, v19);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v32 = *(std::string *)a4;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v30 = &v16;
  v31 = 0;
  v16 = (std::string *)operator new(0x18uLL);
  v17 = v16;
  v18 = v16 + 1;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v32, (__int128 *)&v33, v16);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v24, a2, (uint64_t)__p, a4, (uint64_t)&v26, (uint64_t)v19, (uint64_t)v20, (uint64_t *)&v16);
  v13 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v30 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(__p[0]);
  *(_OWORD *)a5 = *(_OWORD *)a4;
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
}

void sub_19177E624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  *(_QWORD *)(v30 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::rsqrt(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, unsigned int a5@<S0>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string v24;
  char v25;
  int v26;
  int v27;
  std::string **v28;
  char v29;
  std::string v30;
  uint64_t v31;
  std::string v32;
  __int128 v33;

  *(_QWORD *)&v33 = *MEMORY[0x1E0C80C00];
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a3 + 23))
      goto LABEL_7;
LABEL_5:
    if (!*a1)
      goto LABEL_10;
    v10 = *a1;
    if ((_QWORD *)(v10 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a1, (_QWORD *)a3))goto LABEL_10;
    goto LABEL_7;
  }
  if (*(_QWORD *)(a3 + 8))
    goto LABEL_5;
LABEL_7:
  Espresso::sequential_builder::get_aux_elementwise_op_name(12, (uint64_t)a1, &v24);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = v24;
LABEL_10:
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v24.__r_.__value_.__r.__words[0] = 12;
  v24.__r_.__value_.__l.__size_ = 1065353216;
  v24.__r_.__value_.__r.__words[2] = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v32 = *(std::string *)a2;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  v30.__r_.__value_.__s.__data_[8] = 0;
  v17 = (std::string *)operator new(0x18uLL);
  v18 = v17;
  v19 = v17 + 1;
  v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (__int128 *)&v32, &v33, v17);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v30 = *(std::string *)a3;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v28 = &v14;
  v29 = 0;
  v14 = (std::string *)operator new(0x18uLL);
  v15 = v14;
  v16 = v14 + 1;
  v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, (__int128 *)&v30, (__int128 *)&v31, v14);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v22, a1, (uint64_t)__p, a3, (uint64_t)&v24, (uint64_t)v17, (uint64_t)v18, (uint64_t *)&v14);
  v11 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v28 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(__p[0]);
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
}

void sub_19177E978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  *(_QWORD *)(v30 - 128) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 128));
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::constant_like(Espresso::sequential_builder *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t **v10;
  char *v11;
  uint64_t **v12;
  unint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  std::string __p;
  __int128 v20[2];
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  std::string v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  Espresso::sequential_builder::init_net_shape(a1);
  v10 = *(uint64_t ***)a1;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, a2, (__int128 **)&v25);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a3 + 23))
      goto LABEL_6;
LABEL_5:
    v12 = *(uint64_t ***)a1;
    if (v12 + 1 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*(_QWORD *)a1, (_QWORD *)a3))goto LABEL_10;
    goto LABEL_6;
  }
  if (*(_QWORD *)(a3 + 8))
    goto LABEL_5;
LABEL_6:
  v13 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = v13 + 1;
  std::to_string(&v25, v13);
  v14 = std::string::insert(&v25, 0, "constant_like_op/");
  v15 = v14->__r_.__value_.__r.__words[0];
  v26[0] = v14->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  v17 = v26[0];
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v17;
  *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v26 + 7);
  *(_BYTE *)(a3 + 23) = v16;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
LABEL_10:
  v18 = *(_OWORD *)(v11 + 72);
  v20[0] = *(_OWORD *)(v11 + 56);
  v20[1] = v18;
  v21 = *((_QWORD *)v11 + 11);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v22, *((const void **)v11 + 12), *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - *((_QWORD *)v11 + 12)) >> 2);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  Espresso::sequential_builder::constant((uint64_t *)a1, v20, (uint64_t)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_19177EBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 Espresso::sequential_builder::constant@<Q0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  __int128 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  std::string::size_type v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __n128 result;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::string v30;
  float v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  std::string **v37;
  char v38;
  std::string v39;
  __int128 v40;

  *(_QWORD *)&v40 = *MEMORY[0x1E0C80C00];
  v31 = a5;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 4);
  v10 = *((_DWORD *)a2 + 5);
  if (v9 == 1)
    v11 = 4;
  else
    v11 = 5;
  if (v10 == -1)
    v10 = v11;
  v34 = v10;
  v35 = 0;
  v32 = v8;
  v33 = v9;
  v36 = 0;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a3 + 23))
      goto LABEL_12;
LABEL_10:
    if (!*a1)
      goto LABEL_16;
    v12 = *a1;
    if ((_QWORD *)(v12 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a1, (_QWORD *)a3))goto LABEL_16;
    goto LABEL_12;
  }
  if (*(_QWORD *)(a3 + 8))
    goto LABEL_10;
LABEL_12:
  v13 = a1[24];
  a1[24] = v13 + 1;
  std::to_string(&v30, v13);
  v14 = std::string::insert(&v30, 0, "constant_op/");
  v15 = v14->__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  v17 = v39.__r_.__value_.__r.__words[0];
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v17;
  *(_QWORD *)(a3 + 15) = *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(a3 + 23) = v16;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(&v30, "fill");
  v25 = 0;
  v26 = 0;
  v27 = 0;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v39 = *(std::string *)a3;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v37 = &v22;
  v38 = 0;
  v22 = (std::string *)operator new(0x18uLL);
  v23 = v22;
  v24 = v22 + 1;
  v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v24, (__int128 *)&v39, &v40, v22);
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v28, a1, (uint64_t)&v30, a3, (uint64_t)&v31, v25, v26, (uint64_t *)&v22);
  v18 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v37 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  result = *(__n128 *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  return result;
}

void sub_19177EEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  *(_QWORD *)(v22 - 80) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 80));
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::load_global_op(std::string *__str@<X2>, std::string *this@<X3>, uint64_t *a3@<X0>, uint64_t *a4@<X1>, uint64_t a5@<X8>)
{
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string v27;
  char v28;
  __int128 v29;
  unint64_t v30;
  int v31;
  std::string **v32;
  char v33;
  std::string v34;
  __int128 v35;

  *(_QWORD *)&v35 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
LABEL_3:
    std::string::operator=(this, __str);
LABEL_4:
  Espresso::net::get_global(&v27, a3[10], (unsigned __int8 *)__str);
  v10 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  if (v27.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v27.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if ((_QWORD)v10)
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = __str;
    else
      v16 = (std::string *)__str->__r_.__value_.__r.__words[0];
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("global already exists: %s", &v27);
  }
  Espresso::net::set_global(a3[10], (__int128 *)__str, a4);
  memset(&v27, 0, sizeof(v27));
  v28 = 0;
  v29 = xmmword_191A935B0;
  v30 = 0xFFFFFFFF00000001;
  v31 = 7;
  std::string::operator=(&v27, __str);
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v34 = *this;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v32 = &v17;
  v33 = 0;
  v17 = (std::string *)operator new(0x18uLL);
  v18 = v17;
  v19 = v17 + 1;
  v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (__int128 *)&v34, &v35, v17);
  Espresso::sequential_builder::add<Espresso::load_global_params_t>(&v25, a3, (uint64_t)__p, (uint64_t)this, (uint64_t)&v27, v20, v21, (uint64_t *)&v17);
  v13 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v32 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v24 < 0)
    operator delete(__p[0]);
  *(_OWORD *)a5 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a5 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_19177F1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  *(_QWORD *)(v28 - 96) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 96));
  if (a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::store_global_op(std::string *__str@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19[3];
  std::string *v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  std::string v30;
  void **v31;
  char v32;
  std::string v33;
  __int128 v34;

  *(_QWORD *)&v34 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a4 + 23) < 0)
  {
    if (*(_QWORD *)(a4 + 8))
      goto LABEL_17;
  }
  else if (*(_BYTE *)(a4 + 23))
  {
    goto LABEL_17;
  }
  std::operator+<char>();
  std::to_string(&v30, (uint64_t)(*(_QWORD *)(a2[10] + 40) - *(_QWORD *)(a2[10] + 32)) >> 4);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v30;
  else
    v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    size = v30.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v25, (const std::string::value_type *)v10, size);
  v13 = v12->__r_.__value_.__r.__words[0];
  v33.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  v15 = v33.__r_.__value_.__r.__words[0];
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v15;
  *(_QWORD *)(a4 + 15) = *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(a4 + 23) = v14;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
LABEL_17:
  memset(&v25, 0, sizeof(v25));
  v26 = 0;
  v27 = xmmword_191A8AA80;
  v28 = 0x100000001;
  v29 = 0;
  std::string::operator=(&v25, __str);
  std::string::basic_string[abi:ne180100]<0>(&v30, "store_global");
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v33 = *(std::string *)a3;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v31 = (void **)&v20;
  v32 = 0;
  v20 = (std::string *)operator new(0x18uLL);
  v21 = v20;
  v22 = v20 + 1;
  v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, (__int128 *)&v33, &v34, v20);
  memset(v19, 0, sizeof(v19));
  Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v23, a2, (uint64_t)&v30, a4, (uint64_t)&v25, (uint64_t)v20, (uint64_t)v21, v19);
  v16 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v31 = (void **)v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
  v31 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  *(_OWORD *)a5 = *(_OWORD *)a4;
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_19177F534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

__n128 Espresso::sequential_builder::reduce@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  size_t v12;
  std::string *v13;
  const std::string::value_type *v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __n128 result;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  std::string v39;
  std::string **v40;
  char v41;
  std::string v42;
  uint64_t v43;
  std::string v44;
  __int128 v45;

  *(_QWORD *)&v45 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a5 + 23) < 0)
  {
    if (*(_QWORD *)(a5 + 8))
      goto LABEL_29;
  }
  else if (*(_BYTE *)(a5 + 23))
  {
    goto LABEL_29;
  }
  if (*(char *)(a2 + 23) >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = &v39;
  std::string::basic_string[abi:ne180100]((uint64_t)&v39, v12 + 9);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const std::string::value_type *)a2;
    else
      v14 = *(const std::string::value_type **)a2;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "/reduce_(");
  std::to_string(&v44, a3);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v44;
  else
    v15 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    size = v44.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v39, (const std::string::value_type *)v15, size);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v35, ")");
  v20 = v19->__r_.__value_.__r.__words[0];
  v42.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  v22 = v42.__r_.__value_.__r.__words[0];
  *(_QWORD *)a5 = v20;
  *(_QWORD *)(a5 + 8) = v22;
  *(_QWORD *)(a5 + 15) = *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(a5 + 23) = v21;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
LABEL_29:
  v36 = 0;
  v37 = 0xFFFFFFFF00000000;
  v38 = 0;
  v35.__r_.__value_.__r.__words[0] = a3 | 0x358637BD00000000;
  *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = a4 | 0x100000000uLL;
  std::string::basic_string[abi:ne180100]<0>(&v39, "reduce");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v44 = *(std::string *)a2;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  v42.__r_.__value_.__s.__data_[8] = 0;
  v30 = (std::string *)operator new(0x18uLL);
  v31 = v30;
  v32 = v30 + 1;
  v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32, (__int128 *)&v44, &v45, v30);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v42 = *(std::string *)a5;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v40 = &v27;
  v41 = 0;
  v27 = (std::string *)operator new(0x18uLL);
  v28 = v27;
  v29 = v27 + 1;
  v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v29, (__int128 *)&v42, (__int128 *)&v43, v27);
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v33, a1, (uint64_t)&v39, a5, (uint64_t)&v35, (uint64_t)v30, (uint64_t)v31, (uint64_t *)&v27);
  v23 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v40 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  result = *(__n128 *)a5;
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(_QWORD *)(a6 + 16) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  return result;
}

void sub_19177F978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  uint64_t v33;

  *(_QWORD *)(v33 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 144));
  if (*(char *)(v33 - 89) < 0)
    operator delete(*(void **)(v33 - 112));
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 Espresso::sequential_builder::placeholder@<Q0>(Espresso::sequential_builder *a1@<X0>, char *a2@<X1>, std::string::size_type a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  std::string __p;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  Espresso::sequential_builder::init_net_shape(a1);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a3 + 23))
      goto LABEL_7;
LABEL_5:
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1
      || (_QWORD *)(v8 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*(_QWORD *)a1, (_QWORD *)a3))
    {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (*(_QWORD *)(a3 + 8))
    goto LABEL_5;
LABEL_7:
  v9 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v9 + 1;
  std::to_string(&__p, v9);
  v10 = std::string::insert(&__p, 0, "placeholder/");
  v11 = v10->__r_.__value_.__r.__words[0];
  v19[0] = v10->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  v13 = v19[0];
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v19 + 7);
  *(_BYTE *)(a3 + 23) = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = *(_QWORD *)a1;
LABEL_12:
  __p.__r_.__value_.__r.__words[0] = a3;
  v14 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v8, (_QWORD *)a3, (__int128 **)&__p);
  v15 = *(_OWORD *)a2;
  v16 = *((_OWORD *)a2 + 1);
  *((_QWORD *)v14 + 11) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(v14 + 72) = v16;
  *(_OWORD *)(v14 + 56) = v15;
  if (v14 + 56 != a2)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v14 + 96, *((char **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  result = *(__n128 *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  return result;
}

void sub_19177FBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_shape_from_kernel(uint64_t *a1, uint64_t a2, __int128 **a3, uint64_t *a4)
{
  __int128 *v7;
  __int128 *v8;
  uint64_t **v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  char *v17;
  Espresso *v18;
  const char *v19;
  unint64_t v20;
  int v21;
  int v22;
  NSObject *v23;
  __int128 *v24;
  char *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  int v30;
  std::string::size_type v31;
  std::string *v32;
  std::string *p_p;
  std::string __p;
  std::string v35;
  __int128 *v36[2];
  int v37;
  __int128 *v38[2];
  int v39;
  __int128 *v40[3];
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE buf[12];
  __int16 v45;
  std::string *v46;
  __int16 v47;
  std::string *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v7 = *a3;
  v8 = a3[1];
  while (v7 != v8)
  {
    v9 = (uint64_t **)*a1;
    v40[0] = v7;
    v10 = (__int128 *)(std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v7, v40)+ 56);
    v11 = v42;
    if (v42 >= v43)
    {
      v12 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(&v41, v10);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v41, v10);
      v12 = v11 + 64;
    }
    v42 = v12;
    v7 = (__int128 *)((char *)v7 + 24);
  }
  (*(void (**)(__int128 **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a2 + 64))(v40, a2, &v41);
  v13 = *a4;
  if (a4[1] != *a4)
  {
    v14 = 0;
    while (1)
    {
      v15 = (__int128 *)(v13 + 24 * v14);
      v16 = *a1;
      if ((_QWORD *)(v16 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a1, v15))break;
LABEL_20:
      v24 = v40[0];
      v38[0] = v15;
      v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v16, v15, v38);
      v26 = &v24[4 * v14];
      v27 = *v26;
      v28 = v26[1];
      *((_QWORD *)v25 + 11) = *((_QWORD *)v26 + 4);
      *(_OWORD *)(v25 + 72) = v28;
      *(_OWORD *)(v25 + 56) = v27;
      if (v25 + 56 != (char *)v26)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v25 + 96, *((char **)v26 + 5), *((_QWORD *)v26 + 6), (uint64_t)(*((_QWORD *)v26 + 6) - *((_QWORD *)v26 + 5)) >> 2);
      ++v14;
      v13 = *a4;
      if (v14 >= 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3))
        goto LABEL_34;
    }
    v36[0] = v15;
    v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v16, v15, v36);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v38, (const Espresso::layer_shape *)(v17 + 56), 0);
    v18 = (Espresso *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v36, (const Espresso::layer_shape *)&v40[0][4 * v14], 0);
    if (v37 == v39)
    {
      if (!v39)
      {
LABEL_19:
        v16 = *a1;
        goto LABEL_20;
      }
      if (LODWORD(v38[0]) == LODWORD(v36[0]))
      {
        v20 = 0;
        while (v39 - 1 != v20)
        {
          v21 = *((_DWORD *)v38 + v20 + 1);
          v22 = *((_DWORD *)v36 + ++v20);
          if (v21 != v22)
          {
            if (v20 >= v39)
              goto LABEL_19;
            goto LABEL_17;
          }
        }
        goto LABEL_19;
      }
    }
LABEL_17:
    Espresso::espresso_os_log_subsystem(v18, v19);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v29 = v15;
      if (*((char *)v15 + 23) < 0)
        v29 = *(__int128 **)v15;
      Espresso::layer_nd_shape::repr(&v35, (uint64_t)v38);
      v30 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
      v31 = v35.__r_.__value_.__r.__words[0];
      Espresso::layer_nd_shape::repr(&__p, (uint64_t)v36);
      v32 = &v35;
      if (v30 < 0)
        v32 = (std::string *)v31;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v29;
      v45 = 2080;
      v46 = v32;
      v47 = 2080;
      v48 = p_p;
      _os_log_error_impl(&dword_190DAF000, v23, OS_LOG_TYPE_ERROR, "Overwriting shape of blob %s: %s -> %s", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
    }

    goto LABEL_19;
  }
LABEL_34:
  *(_QWORD *)buf = v40;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v41;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_19177FF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  *(_QWORD *)(v29 - 144) = &a29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  _Unwind_Resume(a1);
}

char *Espresso::sequential_builder::blob_shape(Espresso::sequential_builder *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v6;
  __int128 *v7;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    Espresso::sequential_builder::init_net_shape(a1);
    v3 = *(_QWORD *)a1;
  }
  if ((_QWORD *)(v3 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v3, (_QWORD *)a2))
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (__int128 *)a2;
    else
      v6 = *(__int128 **)a2;
    v7 = v6;
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("shape of blob %s is missing", &v7);
  }
  v7 = (__int128 *)a2;
  return std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v3, (_QWORD *)a2, &v7)+ 56;
}

void Espresso::sequential_builder::build_and_insert_in_network(Espresso::sequential_builder *a1, __int128 **a2, int a3, uint64_t a4)
{
  __int128 *i;
  char *v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12[3];
  char *v13[3];
  __int128 *v14;

  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v12, a2 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v13, a2 + 26);
  for (i = *(__int128 **)(a4 + 16); i; i = *(__int128 **)i)
  {
    v14 = i + 1;
    v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (_QWORD *)i + 2, &v14);
    v10 = *(__int128 *)((char *)i + 40);
    v11 = *(__int128 *)((char *)i + 56);
    *((_QWORD *)v9 + 11) = *((_QWORD *)i + 9);
    *(_OWORD *)(v9 + 72) = v11;
    *(_OWORD *)(v9 + 56) = v10;
    if (v9 + 32 != (char *)(i + 1))
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9 + 96, *((char **)i + 10), *((_QWORD *)i + 11), (uint64_t)(*((_QWORD *)i + 11) - *((_QWORD *)i + 10)) >> 2);
  }
  Espresso::sequential_builder::build_and_insert_in_network(a1, (Espresso::net *)a2, a3, (Espresso::network_shape *)v12, 1);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v13, v13[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v12, (char *)v12[1]);
}

void sub_19178010C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Espresso::network_shape::~network_shape((char **)va);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::build_and_insert_in_network(Espresso::sequential_builder *this, Espresso::net *a2, int a3, Espresso::network_shape *a4, int a5)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  Espresso::net *v12;
  std::__shared_weak_count *v13;

  Espresso::sequential_builder::build_from_network_shape(this, a4, &v12);
  insert_network_layers(a2, v12, a3);
  if (a5)
  {
    *((_BYTE *)a2 + 180) = 0;
    Espresso::shape_network_recursive(a2, a4, 0, 0);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1917801F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void insert_network_layers(Espresso::net *a1, Espresso::net *a2, int a3)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int64x2_t *v15;
  __int128 v16;
  _OWORD v17[3];
  unint64_t v18;
  int64x2_t v19;
  unint64_t v20;
  unint64_t *v21;

  v19 = 0uLL;
  v20 = 0;
  v18 = 0;
  if (*((_QWORD *)a2 + 5) != *((_QWORD *)a2 + 4))
  {
    v4 = (char *)a2 + 96;
    v5 = (char *)a2 + 56;
    do
    {
      LODWORD(v15) = 0;
      v16 = 0u;
      memset(v17, 0, sizeof(v17));
      v21 = &v18;
      v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v4, &v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&v21);
      if ((_QWORD *)((char *)&v17[1] + 8) != v6 + 3)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v17[1] + 8, (std::string *)v6[3], (std::string *)v6[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[4] - v6[3]) >> 3));
      v21 = &v18;
      v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v5, &v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&v21);
      if (v17 != (_OWORD *)(v7 + 3))
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v17, (std::string *)v7[3], (std::string *)v7[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[4] - v7[3]) >> 3));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v16, *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v18), *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v18 + 8));
      v8 = v19.i64[1];
      if (v19.i64[1] >= v20)
      {
        v9 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v19, (uint64_t)&v15);
      }
      else
      {
        std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v19.i64[1], (uint64_t)&v15);
        v9 = v8 + 72;
      }
      v19.i64[1] = v9;
      v21 = (unint64_t *)&v17[1] + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      v21 = (unint64_t *)v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
      if (*((_QWORD *)&v16 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v18;
    }
    while (v18 < (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  }
  LODWORD(v15) = a3;
  Espresso::net::insert_layers((uint64_t)a1, (int *)&v15, v19.i64);
  v15 = &v19;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_1917803F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  a12 = (void **)&a22;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::insert_in_network_without_build(Espresso::net **this, Espresso::net *a2, int a3)
{
  insert_network_layers(a2, this[10], a3);
}

char *Espresso::sequential_builder::get_blob_numerical_properties(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;
  void *v6;
  _QWORD *v7;
  __int128 *v9;

  v4 = *(_QWORD *)(a1 + 80);
  if ((_QWORD *)(v4 + 360) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v4 + 352, a2))
  {
    v9 = a2;
    v5 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v4 + 352), a2, (uint64_t)&std::piecewise_construct, &v9);
    *((_DWORD *)v5 + 14) = 1065353216;
    *(_QWORD *)(v5 + 60) = 0xFFFFFFFF00000000;
    *((_DWORD *)v5 + 17) = 1;
    v7 = v5 + 72;
    v6 = (void *)*((_QWORD *)v5 + 9);
    if (v6)
    {
      *((_QWORD *)v5 + 10) = v6;
      operator delete(v6);
    }
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    v4 = *(_QWORD *)(a1 + 80);
  }
  v9 = a2;
  return std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v4 + 352), a2, (uint64_t)&std::piecewise_construct, &v9)+ 56;
}

void Espresso::sequential_builder::clear_supported_4cc_formats(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a2 + 16);
}

void Espresso::sequential_builder::add_supported_4cc_format(uint64_t a1, _QWORD *a2, int a3)
{
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;

  v5 = (char *)a2[3];
  v6 = a2[4];
  if ((unint64_t)v5 >= v6)
  {
    v8 = (char *)a2[2];
    v9 = (v5 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)v8;
    v11 = (uint64_t)(v6 - (_QWORD)v8) >> 1;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    v12 = v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v13);
      v8 = (char *)a2[2];
      v5 = (char *)a2[3];
    }
    else
    {
      v14 = 0;
    }
    v15 = (_DWORD *)(v13 + 4 * v9);
    v16 = v13 + 4 * v14;
    *v15 = a3;
    v7 = v15 + 1;
    while (v5 != v8)
    {
      v17 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *--v15 = v17;
    }
    a2[2] = v15;
    a2[3] = v7;
    a2[4] = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v5 = a3;
    v7 = v5 + 4;
  }
  a2[3] = v7;
}

void Espresso::CVAEngine::CVACompiler::~CVACompiler(std::__shared_weak_count **this)
{
  Espresso::CVAEngine::CVACompiler::~CVACompiler(this);
  JUMPOUT(0x19401CD90);
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *this = (std::__shared_weak_count *)&off_1E2DA6CC0;
  Espresso::CVAEngine::CVACompiler::reset((Espresso::CVAEngine::CVACompiler *)this);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 29));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 27));
  v3 = (void **)(this + 24);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(this[22]);
  v3 = (void **)(this + 18);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  *this = (std::__shared_weak_count *)off_1E2D5FD08;
  v2 = this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void Espresso::CVAEngine::CVACompiler::build(int64x2_t *this, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  unint64_t i;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void (***v51)(Espresso::CVAEngine::pool_kernel *__hidden);
  unint64_t *v52;
  unint64_t v53;
  _DWORD *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int j;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *size;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  const __CFAllocator *v72;
  __CFDictionary *Mutable;
  std::__shared_weak_count *v74;
  CFMutableArrayRef v75;
  uint64_t v76;
  _QWORD *v77;
  __CFArray *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::string *v85;
  CFStringRef v86;
  const void *v87;
  const void *v88;
  int v89;
  int v90;
  __CFDictionary *v91;
  const void *v92;
  const void *v93;
  CFNumberRef v94;
  const void *v95;
  CFNumberRef v96;
  const void *v97;
  CFNumberRef v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  BOOL v103;
  __CFArray *v104;
  std::string::size_type *v105;
  std::string::size_type *v106;
  std::string::size_type v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  const void *v113;
  std::string::size_type *v114;
  std::string::size_type *v115;
  std::string::size_type v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  std::string *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  BOOL v134;
  unsigned int v135;
  char *v136;
  __int128 *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t k;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::string *v158;
  _QWORD *v160;
  _QWORD v161[7];
  std::string *v162;
  std::string **v163;
  uint64_t v164;
  uint64_t v165;
  std::string v166;
  int v167;
  std::string v168;
  uint64_t (*v169)(uint64_t, uint64_t);
  void (*v170)(uint64_t);
  dispatch_semaphore_t v171;
  _QWORD *v172;
  std::__shared_weak_count *v173;
  __int128 v174;
  std::string *valuePtr;
  int v176;
  int v177[3];

  if (this[5].i32[0])
    return;
  LODWORD(v4) = a4;
  LODWORD(i) = a3;
  if (this[3].i32[2] >= 1)
    printf("[CVACompiler::build] %d %d\n", a3, a4);
  Espresso::CVAEngine::CVACompiler::reset((Espresso::CVAEngine::CVACompiler *)this);
  if ((v4 & 0x80000000) != 0)
    v4 = (*(_QWORD *)(this[3].i64[0] + 40) - *(_QWORD *)(this[3].i64[0] + 32)) >> 4;
  this[5].i32[3] = i;
  this[6].i32[0] = v4;
  this[7].i32[2] = 0;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v174 = v7;
  *((_QWORD *)&v174 + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v7[16] = this;
  if ((int)v4 > (int)i)
  {
    for (i = (int)i; (_DWORD)v4 != (_DWORD)i; ++i)
    {
      this[5].i32[2] = i;
      if (this[14].i64[1])
      {
        v11 = *(_QWORD *)(this[3].i64[0] + 32);
        v12 = (_OWORD *)this[12].i64[1];
        v13 = this[13].u64[0];
        if ((unint64_t)v12 >= v13)
        {
          v19 = this[12].i64[0];
          v20 = ((uint64_t)v12 - v19) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v22 = v13 - v19;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v170 = (void (*)(uint64_t))&this[13];
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v23);
          v26 = &v24[16 * v20];
          v27 = *(_OWORD *)(v11 + 16 * i);
          *(_OWORD *)v26 = v27;
          if (*((_QWORD *)&v27 + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v31 = (_QWORD *)this[12].i64[0];
          v30 = (_QWORD *)this[12].i64[1];
          if (v30 == v31)
          {
            v34 = vdupq_n_s64((unint64_t)v30);
            v32 = &v24[16 * v20];
          }
          else
          {
            v32 = &v24[16 * v20];
            do
            {
              v33 = *((_OWORD *)v30 - 1);
              v30 -= 2;
              *((_OWORD *)v32 - 1) = v33;
              v32 -= 16;
              *v30 = 0;
              v30[1] = 0;
            }
            while (v30 != v31);
            v34 = this[12];
          }
          v17 = v26 + 16;
          this[12].i64[0] = (uint64_t)v32;
          this[12].i64[1] = (uint64_t)(v26 + 16);
          *(int64x2_t *)&v168.__r_.__value_.__r.__words[1] = v34;
          v42 = (uint64_t (*)(uint64_t, uint64_t))this[13].i64[0];
          this[13].i64[0] = (uint64_t)&v24[16 * v25];
          v169 = v42;
          v168.__r_.__value_.__r.__words[0] = v34.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v168);
        }
        else
        {
          v14 = *(_OWORD *)(v11 + 16 * i);
          *v12 = v14;
          if (*((_QWORD *)&v14 + 1))
          {
            v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          v17 = v12 + 1;
        }
        this[12].i64[1] = (uint64_t)v17;
        continue;
      }
      if (this[4].i32[2] < 1)
      {
        v18 = 1;
      }
      else if (this[4].i32[1] == (_DWORD)i)
      {
        v18 = this[4].i32[2];
      }
      else
      {
        v18 = 0;
      }
      v35 = this[3].i64[0] + 96;
      v168.__r_.__value_.__r.__words[0] = i;
      this[6].i64[1] = (uint64_t)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35, i, &v168)+ 3);
      v36 = this[3].i64[0] + 56;
      v168.__r_.__value_.__r.__words[0] = i;
      this[7].i64[0] = (uint64_t)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v36, i, &v168)+ 3);
      v37 = this[3].i64[0] + 56;
      v168.__r_.__value_.__r.__words[0] = i;
      v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, i, &v168);
      if (v38[4] == v38[3])
      {
LABEL_71:
        if (v18)
          goto LABEL_72;
        continue;
      }
      v39 = this[3].i64[0] + 56;
      v166.__r_.__value_.__r.__words[0] = i;
      v40 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v39, i, &v166)[3];
      if (*((char *)v40 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
      }
      else
      {
        v41 = *v40;
        v168.__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
        *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v41;
      }
      v43 = this[3].i64[0] + 136;
      v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
      v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, (unsigned __int8 *)&v168, (__int128 **)&v166);
      v45 = *((_QWORD *)v44 + 5);
      v46 = (std::__shared_weak_count *)*((_QWORD *)v44 + 6);
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(p_shared_owners);
        while (__stxr(v48 + 1, p_shared_owners));
      }
      if (!v45 || !*(_DWORD *)(v45 + 116))
        goto LABEL_65;
      v49 = *(_QWORD *)(*(_QWORD *)(this[3].i64[0] + 32) + 16 * i);
      v51 = *(void (****)(Espresso::CVAEngine::pool_kernel *__hidden))(v49 + 64);
      v50 = *(std::__shared_weak_count **)(v49 + 72);
      if (v50)
      {
        v52 = (unint64_t *)&v50->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      if (!v51)
      {
LABEL_61:
        if (!v50)
          goto LABEL_65;
        goto LABEL_62;
      }
      if (v54)
      {
        if (!v50)
        {
          v54[160] = -128;
          if (!v46)
            goto LABEL_70;
          goto LABEL_66;
        }
        v55 = (unint64_t *)&v50->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
        v54[160] = -128;
        do
          v57 = __ldaxr(v55);
        while (__stlxr(v57 - 1, v55));
        if (!v57)
          goto LABEL_59;
      }
      else
      {
        if (*v51 != &off_1E2DA6D18)
          goto LABEL_61;
        if (!v50)
        {
          *((_DWORD *)v51 + 116) = -128;
          if (!v46)
            goto LABEL_70;
          goto LABEL_66;
        }
        v69 = (unint64_t *)&v50->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
        *((_DWORD *)v51 + 116) = -128;
        do
          v71 = __ldaxr(v69);
        while (__stlxr(v71 - 1, v69));
        if (!v71)
        {
LABEL_59:
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
LABEL_62:
      v58 = (unint64_t *)&v50->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        if (!v46)
          goto LABEL_70;
        goto LABEL_66;
      }
LABEL_65:
      if (!v46)
        goto LABEL_70;
LABEL_66:
      v60 = (unint64_t *)&v46->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
LABEL_70:
      if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_71;
      operator delete(v168.__r_.__value_.__l.__data_);
      if (v18)
      {
LABEL_72:
        for (j = 0; j != v18; ++j)
        {
          v63 = *(_QWORD *)(*(_QWORD *)(this[3].i64[0] + 32) + 16 * i);
          *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v174;
          if (*((_QWORD *)&v174 + 1))
          {
            v64 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          (*(void (**)(uint64_t, std::string *, unint64_t))(*(_QWORD *)v63 + 8))(v63, &v168, i);
          size = (std::__shared_weak_count *)v168.__r_.__value_.__l.__size_;
          if (v168.__r_.__value_.__l.__size_)
          {
            v67 = (unint64_t *)(v168.__r_.__value_.__l.__size_ + 8);
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
      }
    }
  }
  v72 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v74 = (std::__shared_weak_count *)operator new(0x20uLL);
  v74->__shared_owners_ = 0;
  v74->__shared_weak_owners_ = 0;
  v74->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1980;
  v74[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v172 = &v74[1].__vftable;
  v173 = v74;
  v75 = CFArrayCreateMutable(v72, 0, MEMORY[0x1E0C9B378]);
  v76 = this[3].i64[0];
  v77 = *(_QWORD **)(v76 + 232);
  v160 = (_QWORD *)(v76 + 240);
  if (v77 != (_QWORD *)(v76 + 240))
  {
    v78 = v75;
    do
    {
      if (*((char *)v77 + 55) < 0)
        std::string::__init_copy_ctor_external(&v168, (const std::string::value_type *)v77[4], v77[5]);
      else
        v168 = *(std::string *)(v77 + 4);
      LOBYTE(v169) = *((_BYTE *)v77 + 56);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v166, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
      else
        v166 = v168;
      v79 = this[3].i64[0] + 136;
      valuePtr = &v166;
      v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v79, (unsigned __int8 *)&v166, (__int128 **)&valuePtr);
      v81 = *((_QWORD *)v80 + 5);
      v82 = (std::__shared_weak_count *)*((_QWORD *)v80 + 6);
      v162 = (std::string *)v81;
      v163 = (std::string **)v82;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = &v166;
      else
        v85 = (std::string *)v166.__r_.__value_.__r.__words[0];
      v86 = CFStringCreateWithCString(v72, (const char *)v85, 0);
      CFArrayAppendValue(v78, v86);
      v87 = (const void *)getkCVANetInputs();
      CFDictionaryAddValue(Mutable, v87, v78);
      CFRelease(v78);
      v88 = (const void *)getkCVANetFormatUInt8();
      v89 = *(_DWORD *)(v81 + 12);
      v90 = *(_DWORD *)(v81 + 16);
      LODWORD(valuePtr) = *(_DWORD *)(v81 + 8);
      v176 = v90;
      v177[0] = v89;
      v91 = CFDictionaryCreateMutable(v72, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v92 = (const void *)getkCVANetInputType[0]();
      CFDictionaryAddValue(v91, v92, v88);
      v93 = (const void *)getkCVANetInputWidth[0]();
      v94 = CFNumberCreate(v72, kCFNumberSInt32Type, &valuePtr);
      CFDictionaryAddValue(v91, v93, v94);
      CFRelease(v94);
      v95 = (const void *)getkCVANetInputHeight[0]();
      v96 = CFNumberCreate(v72, kCFNumberSInt32Type, v177);
      CFDictionaryAddValue(v91, v95, v96);
      CFRelease(v96);
      v97 = (const void *)getkCVANetInputChannels[0]();
      v98 = CFNumberCreate(v72, kCFNumberSInt32Type, &v176);
      CFDictionaryAddValue(v91, v97, v98);
      CFRelease(v98);
      CFDictionaryAddValue(Mutable, v86, v91);
      CFRelease(v91);
      CFRelease(v86);
      if (v82)
      {
        v99 = (unint64_t *)&v82->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      v101 = (_QWORD *)v77[1];
      if (v101)
      {
        do
        {
          v102 = v101;
          v101 = (_QWORD *)*v101;
        }
        while (v101);
      }
      else
      {
        do
        {
          v102 = (_QWORD *)v77[2];
          v103 = *v102 == (_QWORD)v77;
          v77 = v102;
        }
        while (!v103);
      }
      v77 = v102;
    }
    while (v102 != v160);
  }
  v104 = CFArrayCreateMutable(v72, 0, MEMORY[0x1E0C9B378]);
  v105 = (std::string::size_type *)this[9].i64[0];
  v106 = (std::string::size_type *)this[9].i64[1];
  while (v105 != v106)
  {
    v107 = *v105;
    v108 = (std::__shared_weak_count *)v105[1];
    v168.__r_.__value_.__r.__words[0] = *v105;
    v168.__r_.__value_.__l.__size_ = (std::string::size_type)v108;
    if (v108)
    {
      v109 = (unint64_t *)&v108->__shared_owners_;
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
    }
    CFArrayAppendValue(v104, *(const void **)(v107 + 48));
    if (v108)
    {
      v111 = (unint64_t *)&v108->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    v105 += 2;
  }
  v113 = (const void *)getkCVANetUnits();
  CFDictionaryAddValue(Mutable, v113, v104);
  CFRelease(v104);
  v114 = (std::string::size_type *)this[9].i64[0];
  v115 = (std::string::size_type *)this[9].i64[1];
  while (v114 != v115)
  {
    v116 = *v114;
    v117 = (std::__shared_weak_count *)v114[1];
    v168.__r_.__value_.__r.__words[0] = *v114;
    v168.__r_.__value_.__l.__size_ = (std::string::size_type)v117;
    if (v117)
    {
      v118 = (unint64_t *)&v117->__shared_owners_;
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    CFDictionaryAddValue(Mutable, *(const void **)(v116 + 48), *(const void **)(v116 + 8));
    if (v117)
    {
      v120 = (unint64_t *)&v117->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v114 += 2;
  }
  v122 = *(_QWORD *)(this[2].i64[0] + 168);
  v168.__r_.__value_.__r.__words[0] = 0;
  v168.__r_.__value_.__l.__size_ = (std::string::size_type)&v168;
  v168.__r_.__value_.__r.__words[2] = 0x3032000000;
  v169 = __Block_byref_object_copy__13230;
  v170 = __Block_byref_object_dispose__13231;
  v171 = dispatch_semaphore_create(0);
  v166.__r_.__value_.__r.__words[0] = 0;
  v166.__r_.__value_.__l.__size_ = (std::string::size_type)&v166;
  v166.__r_.__value_.__r.__words[2] = 0x2020000000;
  v167 = 0;
  v162 = 0;
  v163 = &v162;
  v164 = 0x2020000000;
  v165 = 0;
  v161[0] = MEMORY[0x1E0C809B0];
  v161[1] = 3221225472;
  v161[2] = ___ZN8Espresso9CVAEngine11CVACompiler5buildERKNSt3__110shared_ptrINS_14abstract_batchEEEii_block_invoke;
  v161[3] = &unk_1E2DD60F0;
  v161[4] = &v166;
  v161[5] = &v162;
  v161[6] = &v168;
  v123 = (void *)MEMORY[0x19401D648](v161);
  LODWORD(v122) = softLinkCVANetPipeAddNetwork(v122, CFSTR("network"), Mutable, v123);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v168.__r_.__value_.__l.__size_ + 40), 0xFFFFFFFFFFFFFFFFLL);
  v124 = v163[3];
  if (*(_DWORD *)(v166.__r_.__value_.__l.__size_ + 24) | v122)
  {
    v158 = v124;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v158);
    valuePtr = (std::string *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("CVA Error: %s", &valuePtr);
  }
  if (v124)
    CFRelease(v124);

  _Block_object_dispose(&v162, 8);
  _Block_object_dispose(&v166, 8);
  _Block_object_dispose(&v168, 8);

  v125 = this[3].i64[0];
  v126 = *(_QWORD **)(v125 + 232);
  v127 = (_QWORD *)(v125 + 240);
  if (v126 != (_QWORD *)(v125 + 240))
  {
    do
    {
      if (*((char *)v126 + 55) < 0)
        std::string::__init_copy_ctor_external(&v168, (const std::string::value_type *)v126[4], v126[5]);
      else
        v168 = *(std::string *)(v126 + 4);
      LOBYTE(v169) = *((_BYTE *)v126 + 56);
      v128 = this[3].i64[0] + 136;
      v162 = &v168;
      v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v128, (unsigned __int8 *)&v168, (__int128 **)&v162);
      v137 = (__int128 *)*((_QWORD *)v136 + 5);
      v138 = (std::__shared_weak_count *)*((_QWORD *)v136 + 6);
      v166.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
      v166.__r_.__value_.__l.__size_ = (std::string::size_type)v138;
      if (v138)
      {
        v139 = (unint64_t *)&v138->__shared_owners_;
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
      }
      if (v137 && *(void (***)(Espresso::CVAEngine::blob_container *__hidden))v137 == &off_1E2DA7008)
      {
        v162 = (std::string *)v137;
        v163 = (std::string **)v138;
        if (v138)
        {
          v146 = (unint64_t *)&v138->__shared_owners_;
          do
            v147 = __ldxr(v146);
          while (__stxr(v147 + 1, v146));
        }
        Espresso::CVAEngine::blob_container::force_allocate((CVPixelBufferRef)v137, v129, v130, v131, v132, v133, v134, v135);
        if (v138)
        {
          v148 = (unint64_t *)&v138->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
      }
      v141 = (std::__shared_weak_count *)v166.__r_.__value_.__l.__size_;
      if (v166.__r_.__value_.__l.__size_)
      {
        v142 = (unint64_t *)(v166.__r_.__value_.__l.__size_ + 8);
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      v144 = (_QWORD *)v126[1];
      if (v144)
      {
        do
        {
          v145 = v144;
          v144 = (_QWORD *)*v144;
        }
        while (v144);
      }
      else
      {
        do
        {
          v145 = (_QWORD *)v126[2];
          v103 = *v145 == (_QWORD)v126;
          v126 = v145;
        }
        while (!v103);
      }
      v126 = v145;
    }
    while (v145 != v127);
  }
  this[5].i64[0] = 1;
  v151 = this[9].i64[0];
  for (k = this[9].i64[1]; k != v151; k = std::shared_ptr<void>::~shared_ptr[abi:ne180100](k - 16))
    ;
  this[9].i64[1] = v151;
  (*(void (**)(int64x2_t *, uint64_t))(this->i64[0] + 24))(this, a2);
  v152 = v173;
  if (v173)
  {
    v153 = (unint64_t *)&v173->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
  if (*((_QWORD *)&v174 + 1))
  {
    v156 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
}

void sub_191781364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 120);
  _Unwind_Resume(a1);
}

void sub_1917813C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  JUMPOUT(0x1917815DCLL);
}

void sub_1917813E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a34 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 120);
  _Unwind_Resume(a1);
}

void sub_19178140C()
{
  JUMPOUT(0x1917815DCLL);
}

void sub_19178141C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

void sub_191781424(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  JUMPOUT(0x1917815D4);
}

void sub_19178142C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(a29);
  JUMPOUT(0x1917815D4);
}

void sub_191781434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 120);
  _Unwind_Resume(a1);
}

void sub_19178144C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::string *a17, uint64_t a18, std::string *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::string::value_type *a25,std::string::size_type a26,int a27,__int16 a28,char a29,unsigned __int8 a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v37;
  char *v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  const std::string::value_type *v43;
  const std::string::value_type *v44;
  int v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::runtime_error *exception;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (a2 == 1)
  {
    v37 = __cxa_begin_catch(a1);
    v38 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
    std::string::basic_string[abi:ne180100]<0>(&a32, v38);
    std::string::append((std::string *)&a32, "[Error layer: ");
    std::to_string((std::string *)&a25, v33);
    if ((a30 & 0x80u) == 0)
      v39 = (const std::string::value_type *)&a25;
    else
      v39 = a25;
    if ((a30 & 0x80u) == 0)
      v40 = a30;
    else
      v40 = a26;
    std::string::append((std::string *)&a32, v39, v40);
    if ((char)a30 < 0)
      operator delete(a25);
    std::string::append((std::string *)&a32, ": ");
    v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 48) + 32) + v34);
    v44 = *(const std::string::value_type **)(v41 + 16);
    v42 = v41 + 16;
    v43 = v44;
    v45 = *(char *)(v42 + 23);
    if (v45 >= 0)
      v46 = (const std::string::value_type *)v42;
    else
      v46 = v43;
    if (v45 >= 0)
      v47 = *(unsigned __int8 *)(v42 + 23);
    else
      v47 = *(_QWORD *)(v42 + 8);
    std::string::append((std::string *)&a32, v46, v47);
    std::string::append((std::string *)&a32, "]");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const std::string *)&a32);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  JUMPOUT(0x1917815DCLL);
}

void sub_191781554(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;

  __cxa_free_exception(v37);
  if (a37 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1917815DCLL);
}

void sub_1917815A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1917815B4);
}

void Espresso::CVAEngine::CVACompiler::__forward(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *i;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  std::string::size_type v10;
  __CVBuffer *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  CFStringRef v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const __CFString *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  void *v40;
  const __CFString *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  CFStringRef *v48;
  char *v49;
  char *v50;
  std::__shared_weak_count *size;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (***v63)(uint64_t *__return_ptr, _QWORD);
  std::string::size_type v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::runtime_error *exception;
  std::runtime_error *v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  std::runtime_error *v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  uint64_t v111;
  std::string::size_type v112;
  char *v113;
  const __CFAllocator *alloc;
  _QWORD *v115;
  char *v117;
  _QWORD v118[5];
  uint64_t v119[2];
  __int128 v120;
  __int128 v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  _QWORD v127[7];
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  int v131;
  std::string v132;
  uint64_t (*v133)(uint64_t, uint64_t);
  void (*v134)(uint64_t);
  dispatch_semaphore_t v135;
  int64x2_t v136;
  char *v137;

  if (!*(_DWORD *)(a1 + 80))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Network not built");
    goto LABEL_136;
  }
  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v1 + 144))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HX context not setup");
    goto LABEL_136;
  }
  v2 = *(_QWORD *)(v1 + 168);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "netpipe not setup");
LABEL_136:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v111 = v2;
  v136 = 0uLL;
  v137 = 0;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD **)(v3 + 232);
  v115 = (_QWORD *)(v3 + 240);
  if (v4 == (_QWORD *)(v3 + 240))
  {
    i = 0;
    v6 = 0;
  }
  else
  {
    i = 0;
    v6 = 0;
    v7 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&v132, (const std::string::value_type *)v4[4], v4[5]);
      else
        v132 = *(std::string *)(v4 + 4);
      LOBYTE(v133) = *((_BYTE *)v4 + 56);
      v8 = *(_QWORD *)(a1 + 48) + 136;
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
      v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)&v132, (__int128 **)&v126);
      v11 = (__CVBuffer *)*((_QWORD *)v9 + 5);
      v10 = *((_QWORD *)v9 + 6);
      v128 = (uint64_t)v11;
      v129 = (uint64_t *)v10;
      if (v10)
      {
        v12 = (unint64_t *)(v10 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v132;
      else
        v14 = (std::string *)v132.__r_.__value_.__r.__words[0];
      v15 = CFStringCreateWithCString(alloc, (const char *)v14, 0);
      v117 = i;
      v16 = operator new(0x20uLL);
      v24 = v16;
      v16[1] = 0;
      v16[2] = 0;
      v16[3] = v15;
      v25 = v16 + 3;
      *v16 = &off_1E2DC19B8;
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 3);
      v126.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
      v26 = (_QWORD *)v136.i64[1];
      if (v136.i64[1] >= (unint64_t)v137)
      {
        v112 = v10;
        v113 = v7;
        v28 = v15;
        v29 = (_QWORD *)v136.i64[0];
        v30 = (v136.i64[1] - v136.i64[0]) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v32 = (uint64_t)&v137[-v136.i64[0]];
        if ((uint64_t)&v137[-v136.i64[0]] >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v34 = (char *)operator new(16 * v33);
        v35 = &v34[16 * v30];
        *(_QWORD *)v35 = v25;
        *((_QWORD *)v35 + 1) = v24;
        if (v26 == v29)
        {
          v38 = vdupq_n_s64((unint64_t)v26);
          v36 = &v34[16 * v30];
          v15 = v28;
        }
        else
        {
          v36 = &v34[16 * v30];
          v15 = v28;
          do
          {
            v37 = *((_OWORD *)v26 - 1);
            v26 -= 2;
            *((_OWORD *)v36 - 1) = v37;
            v36 -= 16;
            *v26 = 0;
            v26[1] = 0;
          }
          while (v26 != v29);
          v38 = v136;
        }
        v10 = v112;
        v27 = v35 + 16;
        v136.i64[0] = (uint64_t)v36;
        v136.i64[1] = (uint64_t)(v35 + 16);
        v137 = &v34[16 * v33];
        v39 = v38.i64[1];
        v40 = (void *)v38.i64[0];
        for (i = v117; (void *)v39 != v40; v39 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 16))
          ;
        v7 = v113;
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)v136.i64[1] = v25;
        v26[1] = v16;
        v27 = v26 + 2;
        i = v117;
      }
      v136.i64[1] = (uint64_t)v27;
      if (v11 && *(void (***)(Espresso::CVAEngine::blob_container *__hidden))v11 == &off_1E2DA7008)
      {
        v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v126.__r_.__value_.__l.__size_ = v10;
        if (v10)
        {
          v46 = (unint64_t *)(v10 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
      }
      else
      {
        v11 = 0;
        *(_OWORD *)&v126.__r_.__value_.__l.__data_ = 0uLL;
      }
      Espresso::CVAEngine::blob_container::force_allocate(v11, v17, v18, v19, v20, v21, v22, v23);
      v41 = (const __CFString *)*((_QWORD *)v11 + 21);
      if (v6 >= v7)
      {
        v42 = (v6 - i) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v7 - i) >> 3 > v43)
          v43 = (v7 - i) >> 3;
        if ((unint64_t)(v7 - i) >= 0x7FFFFFFFFFFFFFF0)
          v44 = 0xFFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          if (v44 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v45 = (char *)operator new(16 * v44);
        }
        else
        {
          v45 = 0;
        }
        v48 = (CFStringRef *)&v45[16 * v42];
        *v48 = v15;
        v48[1] = v41;
        if (v6 == i)
        {
          v50 = &v45[16 * v42];
        }
        else
        {
          v49 = &v45[16 * v42];
          do
          {
            v50 = v49 - 16;
            *((_OWORD *)v49 - 1) = *((_OWORD *)v6 - 1);
            v6 -= 16;
            v49 -= 16;
          }
          while (v6 != i);
        }
        v7 = &v45[16 * v44];
        v6 = (char *)(v48 + 2);
        if (i)
          operator delete(i);
        i = v50;
      }
      else
      {
        *(_QWORD *)v6 = v15;
        *((_QWORD *)v6 + 1) = v41;
        v6 += 16;
      }
      size = (std::__shared_weak_count *)v126.__r_.__value_.__l.__size_;
      if (v126.__r_.__value_.__l.__size_)
      {
        v52 = (unint64_t *)(v126.__r_.__value_.__l.__size_ + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v54 = (std::__shared_weak_count *)v129;
      if (v129)
      {
        v55 = (unint64_t *)(v129 + 1);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v57 = (_QWORD *)v4[1];
      if (v57)
      {
        do
        {
          v58 = v57;
          v57 = (_QWORD *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (_QWORD *)v4[2];
          v59 = *v58 == (_QWORD)v4;
          v4 = v58;
        }
        while (!v59);
      }
      v4 = v58;
    }
    while (v58 != v115);
  }
  v132.__r_.__value_.__r.__words[0] = 0;
  v132.__r_.__value_.__l.__size_ = (std::string::size_type)&v132;
  v132.__r_.__value_.__r.__words[2] = 0x3032000000;
  v133 = __Block_byref_object_copy__13230;
  v134 = __Block_byref_object_dispose__13231;
  v135 = dispatch_semaphore_create(0);
  v128 = 0;
  v129 = &v128;
  v130 = 0x2020000000;
  v131 = 0;
  v60 = MEMORY[0x1E0C809B0];
  v127[0] = MEMORY[0x1E0C809B0];
  v127[1] = 3221225472;
  v127[2] = ___ZN8Espresso9CVAEngine11CVACompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke;
  v127[3] = &unk_1E2DD6118;
  v127[5] = &v132;
  v127[6] = a1;
  v127[4] = &v128;
  if (softLinkCVANetPipeProcessNetwork(v111, CFSTR("network"), (unint64_t)(v6 - i) >> 4, i, v127))
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v123, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVACompiler.mm");
    v94 = std::string::insert(&v123, 0, "CVA EXPECT_EQ failed ");
    v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    v96 = std::string::append(&v124, ":");
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v122, 412);
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = &v122;
    else
      v98 = (std::string *)v122.__r_.__value_.__r.__words[0];
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
    else
      v99 = v122.__r_.__value_.__l.__size_;
    v100 = std::string::append(&v125, (const std::string::value_type *)v98, v99);
    v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v126.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v93, &v126);
    __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v132.__r_.__value_.__l.__size_ + 40), 0xFFFFFFFFFFFFFFFFLL);
  if (*((_DWORD *)v129 + 6))
  {
    v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v123, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVACompiler.mm");
    v103 = std::string::insert(&v123, 0, "CVA EXPECT_EQ failed ");
    v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    v105 = std::string::append(&v124, ":");
    v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v122, 416);
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v107 = &v122;
    else
      v107 = (std::string *)v122.__r_.__value_.__r.__words[0];
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v108 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
    else
      v108 = v122.__r_.__value_.__l.__size_;
    v109 = std::string::append(&v125, (const std::string::value_type *)v107, v108);
    v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    v126.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v102, &v126);
    __cxa_throw(v102, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  _Block_object_dispose(&v128, 8);
  _Block_object_dispose(&v132, 8);

  v61 = *(_QWORD *)(a1 + 192);
  if (*(_QWORD *)(a1 + 200) != v61)
  {
    v62 = *(_QWORD *)(*(_QWORD *)v61 + 64);
    v63 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v62 + 8);
    v64 = *(_QWORD *)(v62 + 16);
    v132.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    v132.__r_.__value_.__l.__size_ = v64;
    if (v64)
    {
      v65 = (unint64_t *)(v64 + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v67 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 80);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 216) + 88) != v67)
    {
      v68 = 0;
      do
      {
        v69 = *(_OWORD *)(v67 + 16 * v68);
        v121 = v69;
        if (*((_QWORD *)&v69 + 1))
        {
          v70 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        Espresso::sync_copy_to_host(&v128, &v121);
        v72 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
        if (*((_QWORD *)&v121 + 1))
        {
          v73 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v75 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 104) + 16 * v68);
        v120 = v75;
        if (*((_QWORD *)&v75 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        v78 = (std::__shared_weak_count *)v129;
        v119[0] = v128;
        v119[1] = (uint64_t)v129;
        if (v129)
        {
          v79 = (unint64_t *)(v129 + 1);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        Espresso::sync_copy_from_host(v75, *((std::__shared_weak_count **)&v120 + 1), v119);
        if (v78)
        {
          p_shared_owners = (unint64_t *)&v78->__shared_owners_;
          do
            v82 = __ldaxr(p_shared_owners);
          while (__stlxr(v82 - 1, p_shared_owners));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v83 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
        if (*((_QWORD *)&v120 + 1))
        {
          v84 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v86 = (std::__shared_weak_count *)v129;
        if (v129)
        {
          v87 = (unint64_t *)(v129 + 1);
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        ++v68;
        v67 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 80);
      }
      while (v68 < (*(_QWORD *)(*(_QWORD *)(a1 + 216) + 88) - v67) >> 4);
      v63 = (void (***)(uint64_t *__return_ptr, _QWORD))v132.__r_.__value_.__r.__words[0];
    }
    v118[0] = v60;
    v118[1] = 3221225472;
    v118[2] = ___ZN8Espresso9CVAEngine11CVACompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke_2;
    v118[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v118[4] = a1;
    Espresso::abstract_context::compute_batch_sync(v63, v118);
    v89 = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
    if (v132.__r_.__value_.__l.__size_)
    {
      v90 = (unint64_t *)(v132.__r_.__value_.__l.__size_ + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
  }
  if (*(int *)(a1 + 56) >= 1)
    puts("[CVACompiler __forward]");
  v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  if (i)
    operator delete(i);
}

void sub_191781FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  int v59;
  void *v60;
  uint64_t v61;

  if (a58 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a51 < 0)
    operator delete(a46);
  if (a44 < 0)
    operator delete(a39);
  if (a38 < 0)
  {
    operator delete(a33);
    if ((v59 & 1) == 0)
    {
LABEL_14:
      _Block_object_dispose((const void *)(v61 - 224), 8);
      _Block_object_dispose((const void *)(v61 - 192), 8);

      *(_QWORD *)(v61 - 192) = v61 - 144;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 192));
      if (v60)
        operator delete(v60);
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v58);
  goto LABEL_14;
}

uint64_t __Block_byref_object_copy__13230(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13231(uint64_t a1)
{

}

intptr_t ___ZN8Espresso9CVAEngine11CVACompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke(intptr_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  intptr_t v7;
  uint64_t i;
  uint64_t v10;
  __CVBuffer *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  std::__shared_weak_count *v16;
  void (***v17)(Espresso::CVAEngine::blob_container *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v19;
  __CVBuffer *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p;
  std::__shared_weak_count *v29;
  char v30;
  void (***v31)(Espresso::CVAEngine::blob_container *__hidden);
  std::__shared_weak_count *v32;
  void **p_p;

  v5 = *(_QWORD *)(result + 48);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v7 = result;
    if (a4)
    {
      for (i = 0; i != a4; ++i)
      {
        v10 = a5 + 32 * i;
        v11 = *(__CVBuffer **)(v10 + 24);
        v12 = *(id *)v10;
        v13 = *(_QWORD *)(v5 + 48);
        v14 = objc_retainAutorelease(v12);
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v14, "UTF8String"));
        p_p = &__p;
        v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 136, (unsigned __int8 *)&__p, (__int128 **)&p_p);
        v17 = (void (***)(Espresso::CVAEngine::blob_container *__hidden))*((_QWORD *)v15 + 5);
        v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
        v31 = v17;
        v32 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        if (v30 < 0)
        {
          operator delete(__p);
          if (!v17)
            goto LABEL_12;
        }
        else if (!v17)
        {
          goto LABEL_12;
        }
        if (*v17 == &off_1E2DA7008)
        {
          __p = v17;
          v29 = v16;
          if (v16)
          {
            v26 = (unint64_t *)&v16->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          goto LABEL_13;
        }
LABEL_12:
        v16 = 0;
        v17 = 0;
        __p = 0;
        v29 = 0;
LABEL_13:
        CVPixelBufferRetain(v11);
        v20 = (__CVBuffer *)v17[21];
        if (v20)
          CVPixelBufferRelease(v20);
        v17[21] = (void (**)(Espresso::CVAEngine::blob_container *__hidden))v11;
        if (v16)
        {
          v21 = (unint64_t *)&v16->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v23 = v32;
        if (v32)
        {
          v24 = (unint64_t *)&v32->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }

      }
    }
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 40));
  }
  return result;
}

void sub_1917823A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso9CVAEngine11CVACompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(v2 + 192);
  if (*(_QWORD *)(v2 + 200) != v3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)a2 + 48) = v6;
      result = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v3 + v5) + 8))(*(_QWORD *)(v3 + v5), a2, v6++);
      v3 = *(_QWORD *)(v2 + 192);
      v5 += 16;
    }
    while (v6 < (*(_QWORD *)(v2 + 200) - v3) >> 4);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFString const*>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC19B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFString const*>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC19B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFString const*>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 24));
}

uint64_t initCVANetPipeProcessNetwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  uint64_t v10;

  v9 = a5;
  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13242);
  softLinkCVANetPipeProcessNetwork = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeProcessNetwork");
  v10 = softLinkCVANetPipeProcessNetwork(a1, a2, a3, a4, v9);

  return v10;
}

void sub_1917826C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::CVAEngine::CVACompiler::reset(Espresso::CVAEngine::CVACompiler *this)
{
  __int128 v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  void **v25;

  v2 = 0uLL;
  v17 = 0u;
  v18 = 0;
  v19 = &v20;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    v4 = *((_QWORD *)this + 19);
    v5 = v3;
    if ((void *)v4 != v3)
    {
      do
        v4 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v3);
      v5 = (void *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v3;
    operator delete(v5);
    v2 = v17;
    v6 = v18;
  }
  else
  {
    v6 = 0;
  }
  v8 = (char *)this + 176;
  v7 = (_QWORD *)*((_QWORD *)this + 22);
  *((_OWORD *)this + 9) = v2;
  *((_QWORD *)this + 20) = v6;
  v18 = 0;
  v17 = 0uLL;
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(v7);
  v9 = v20;
  *((_QWORD *)this + 21) = v19;
  *((_QWORD *)this + 22) = v9;
  v10 = *((_QWORD *)&v20 + 1);
  *((_QWORD *)this + 23) = *((_QWORD *)&v20 + 1);
  if (v10)
  {
    *(_QWORD *)(v9 + 16) = v8;
    v19 = &v20;
    v20 = 0uLL;
  }
  else
  {
    *((_QWORD *)this + 21) = v8;
  }
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)this + 24);
  *((_OWORD *)this + 12) = v21;
  *((_QWORD *)this + 26) = v22;
  *(_QWORD *)&v22 = 0;
  v21 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 216, (__int128 *)((char *)&v22 + 8));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 232, (__int128 *)((char *)&v23 + 8));
  v11 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v23;
  if ((_QWORD)v23)
  {
    v15 = (unint64_t *)(v23 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v25 = (void **)&v21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v25);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy((_QWORD *)v20);
  v25 = (void **)&v17;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v25);
}

uint64_t initValkCVANetInputs(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13242);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputs");
  if (v0)
  {
    result = *v0;
    constantValkCVANetInputs = result;
  }
  else
  {
    result = constantValkCVANetInputs;
  }
  getkCVANetInputs = kCVANetInputsFunction;
  return result;
}

uint64_t kCVANetInputsFunction(void)
{
  return constantValkCVANetInputs;
}

uint64_t initValkCVANetFormatUInt8()
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13242);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetFormatUInt8");
  if (v0)
  {
    result = *v0;
    constantValkCVANetFormatUInt8 = result;
  }
  else
  {
    result = constantValkCVANetFormatUInt8;
  }
  getkCVANetFormatUInt8 = kCVANetFormatUInt8Function;
  return result;
}

uint64_t kCVANetFormatUInt8Function()
{
  return constantValkCVANetFormatUInt8;
}

uint64_t initValkCVANetUnits(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13242);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnits");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnits = result;
  }
  else
  {
    result = constantValkCVANetUnits;
  }
  getkCVANetUnits = kCVANetUnitsFunction;
  return result;
}

uint64_t kCVANetUnitsFunction(void)
{
  return constantValkCVANetUnits;
}

intptr_t ___ZN8Espresso9CVAEngine11CVACompiler5buildERKNSt3__110shared_ptrINS_14abstract_batchEEEii_block_invoke(_QWORD *a1, int a2, uint64_t a3)
{
  const void *v4;

  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = a3;
  v4 = *(const void **)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v4)
    CFRetain(v4);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1[6] + 8) + 40));
}

uint64_t initCVANetPipeAddNetwork(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;

  v7 = a4;
  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13242);
  softLinkCVANetPipeAddNetwork = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeAddNetwork");
  v8 = softLinkCVANetPipeAddNetwork(a1, a2, a3, v7);

  return v8;
}

void sub_191782B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFDictionary *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFDictionary *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFDictionary *>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 24));
}

void Espresso::CVAEngine::CVACompiler::add_operation(int64x2_t *a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  **(_DWORD **)a2 = a1[5].i32[2];
  v5 = (char *)a1[9].i64[1];
  v4 = a1[10].u64[0];
  if ((unint64_t)v5 >= v4)
  {
    v10 = (char *)a1[9].i64[0];
    v11 = (v5 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = (char *)a1[9].i64[0];
      v5 = (char *)a1[9].i64[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = a1[9];
    }
    v9 = v16 + 16;
    a1[9].i64[0] = (uint64_t)v20;
    a1[9].i64[1] = (uint64_t)(v16 + 16);
    a1[10].i64[0] = (uint64_t)&v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[9].i64[1] = (uint64_t)v9;
}

void Espresso::ANECompilerEngine::mix_conv3d_kernel::~mix_conv3d_kernel(Espresso::ANECompilerEngine::mix_conv3d_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D77330;
  v2 = (void **)((char *)this + 424);
  *((_QWORD *)this + 53) = &unk_1E2D77518;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D77330;
  v2 = (void **)((char *)this + 424);
  *((_QWORD *)this + 53) = &unk_1E2D77518;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_conv3d_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int32x2_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  __int128 v21[2];
  void *__p;
  void *v23;

  Espresso::generic_conv3d_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(a1[53] + 128))(v21, a1 + 53);
  v11 = (std::__shared_weak_count *)a1[2];
  v20[0] = a1[1];
  v20[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(_QWORD *))(a1[53] + 136))(a1 + 53);
  Espresso::set_conv_quantized_weight_helper(v15, v16, v17, v14, a3, (char *)a4, a5, a6, (uint64_t)(a1 + 51), v21, v20, v14, 1);
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 53, (uint64_t *)a3, a4, a5);
}

void sub_191782F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::__shared_weak_count *Espresso::ANECompilerEngine::mix_conv3d_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  const Espresso::net *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  const Espresso::net *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  __int128 v39;
  const Espresso::net *v40;
  uint64_t v41;
  int v42;
  char *v43;
  Espresso::ANECompilerEngine *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int64x2_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *size;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  std::string *v77;
  void *v78;
  char v79;
  int v80;
  _QWORD v81[2];
  int64x2_t *v82;
  std::__shared_weak_count *v83;
  std::string *v84;
  void *v85;
  _BYTE v86[15];
  char v87;
  std::string v88;
  _OWORD v89[2];
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  const Espresso::net *v94;
  std::__shared_weak_count *v95;
  void **v96;
  int v97;
  int v98;
  int v99;
  _OWORD v100[2];
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  const Espresso::net *v105;
  std::__shared_weak_count *v106;
  __int128 v107;
  int v108;
  char v109;
  std::string __p;
  _QWORD v111[3];
  _BYTE v112[32];
  std::__shared_weak_count *v113;
  int64x2_t *v114;
  std::__shared_weak_count *v115;
  const Espresso::net *v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  int v119;
  _QWORD v120[5];

  v120[2] = *MEMORY[0x1E0C80C00];
  v6 = a3[6];
  v116 = 0;
  v117 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v117 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v116 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v114 = *(int64x2_t **)a2;
    v115 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v107, "conv3d not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v107, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v114, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v14 = v113;
    if (v113)
    {
      v15 = (unint64_t *)&v113->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v96 = (void **)v112;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v96);
    v96 = (void **)v111;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v96);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v109 < 0)
      operator delete((void *)v107);
    v17 = v115;
    if (v115)
    {
      v18 = (unint64_t *)&v115->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v17 = 0;
    }
    goto LABEL_98;
  }
  v21 = v116;
  v20 = v117;
  v105 = v116;
  v106 = v117;
  if (v117)
  {
    v22 = (unint64_t *)&v117->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *a3;
  v25 = *(_QWORD *)(*a3 + 32);
  v26 = *(_OWORD *)(*a3 + 16);
  v100[0] = *(_OWORD *)*a3;
  v100[1] = v26;
  v101 = v25;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v102, *(const void **)(v24 + 40), *(_QWORD *)(v24 + 48), (uint64_t)(*(_QWORD *)(v24 + 48) - *(_QWORD *)(v24 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v107, v21, (const Espresso::layer_shape *)v100, 1);
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  if (v20)
  {
    v27 = (unint64_t *)&v20->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v30 = v116;
  v29 = v117;
  v94 = v116;
  v95 = v117;
  if (v117)
  {
    v31 = (unint64_t *)&v117->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = a3[3];
  v34 = *(_QWORD *)(v33 + 32);
  v35 = *(_OWORD *)(v33 + 16);
  v89[0] = *(_OWORD *)v33;
  v89[1] = v35;
  v90 = v34;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, *(const void **)(v33 + 40), *(_QWORD *)(v33 + 48), (uint64_t)(*(_QWORD *)(v33 + 48) - *(_QWORD *)(v33 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v96, v30, (const Espresso::layer_shape *)v89, 1);
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = *(__int128 **)(*(_QWORD *)a3[6] + 224 * a3[9] + 136);
  if (*((char *)v38 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
  }
  else
  {
    v39 = *v38;
    v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v39;
  }
  v40 = v116;
  v41 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v116 + 45), &v88);
  if (*((_DWORD *)a3 + 16) <= 1u)
    v42 = 1;
  else
    v42 = *((_DWORD *)a3 + 16);
  if (v41)
  {
    v84 = &v88;
    v43 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v40 + 44, &v88, (uint64_t)&std::piecewise_construct, (__int128 **)&v84);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v43 + 56);
    v111[0] = 0;
    v111[1] = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v43 + 9), *((_QWORD *)v43 + 10), (uint64_t)(*((_QWORD *)v43 + 10) - *((_QWORD *)v43 + 9)) >> 2);
    v42 = LODWORD(__p.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(__p.__r_.__value_.__r.__words[1]);
    if (__p.__r_.__value_.__r.__words[2])
    {
      v111[0] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
  }
  v44 = v9;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v107, v44))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v96, v44))
    {
      v45 = *(unsigned __int16 *)(a1 + 368);
      if (v45 <= 2)
      {
        v46 = *(unsigned __int16 *)(a1 + 370);
        if (v46 <= 2)
        {
          v47 = *(unsigned __int16 *)(a1 + 372);
          if (v47 < 3)
          {
            v69 = 29;
            if (v42 != 4 && v42 != 2)
            {
              if (v42 != 1)
              {
                LOBYTE(v84) = 0;
                std::string::basic_string[abi:ne180100]<0>(&v85, "Unsupported compute path");
                goto LABEL_64;
              }
              v69 = 13;
            }
            if (v47 == 1)
              v70 = 15;
            else
              v70 = 16;
            v71 = *(_DWORD *)(a1 + 320);
            if (v71 <= v69 && (v72 = *(_DWORD *)(a1 + 324), v72 <= 29) && (v73 = *(_DWORD *)(a1 + 328), v73 <= v70))
            {
              v119 = *(_DWORD *)(a1 + 364);
              v118 = *(_OWORD *)(a1 + 348);
              v74 = v108;
              v75 = HIDWORD(v107);
              v80 = DWORD2(v107);
              Espresso::padding_params_t::get_final_lrtbfb((int32x4_t *)&__p, (int16x4_t *)&v118, v108, SHIDWORD(v107), SDWORD2(v107), v99, v98, v97, v45, v46, v47, v71, v72, v73);
              if (SLODWORD(__p.__r_.__value_.__l.__data_) >= v71
                || SHIDWORD(__p.__r_.__value_.__r.__words[0]) >= v71
                || SLODWORD(__p.__r_.__value_.__r.__words[1]) >= v72
                || SHIDWORD(__p.__r_.__value_.__r.__words[1]) >= v72
                || SHIDWORD(__p.__r_.__value_.__r.__words[2]) >= v73
                || (HIDWORD(__p.__r_.__value_.__r.__words[0]) | LODWORD(__p.__r_.__value_.__l.__data_) | LODWORD(__p.__r_.__value_.__r.__words[1]) | HIDWORD(__p.__r_.__value_.__r.__words[1]) | LODWORD(__p.__r_.__value_.__r.__words[2]) | HIDWORD(__p.__r_.__value_.__r.__words[2])) < 0
                || SLODWORD(__p.__r_.__value_.__r.__words[2]) >= v73)
              {
                LOBYTE(v84) = 0;
                std::string::basic_string[abi:ne180100]<0>(&v85, "Padding size exceed ANE limit");
              }
              else if (*(_WORD *)(a1 + 350) || *(float *)(a1 + 352) == 0.0)
              {
                v76 = *(_DWORD *)(a1 + 384);
                if ((v76 - 4097) > 0xFFFFEFFF)
                {
                  if (v76 >= 2 && SDWORD1(v107) % v76)
                  {
                    LOBYTE(v84) = 0;
                    std::string::basic_string[abi:ne180100]<0>(&v85, "Number of input channels is not uniformly distributed across all input groups.");
                  }
                  else if (HIDWORD(__p.__r_.__value_.__r.__words[0]) + LODWORD(__p.__r_.__value_.__l.__data_) + v74 >= v71
                         && HIDWORD(__p.__r_.__value_.__r.__words[1]) + LODWORD(__p.__r_.__value_.__r.__words[1]) + v75 >= v72
                         && HIDWORD(__p.__r_.__value_.__r.__words[2]) + LODWORD(__p.__r_.__value_.__r.__words[2]) + v80 >= v73)
                  {
                    LOBYTE(v84) = 1;
                    std::string::basic_string[abi:ne180100]<0>(&v85, "Success");
                  }
                  else
                  {
                    LOBYTE(v84) = 0;
                    std::string::basic_string[abi:ne180100]<0>(&v85, "Kernel size is larger than input plus padding.");
                  }
                }
                else
                {
                  std::to_string(&__p, v76);
                  v77 = std::string::insert(&__p, 0, "Unsupported number of groups : ");
                  v78 = (void *)v77->__r_.__value_.__r.__words[0];
                  v120[0] = v77->__r_.__value_.__l.__size_;
                  *(_QWORD *)((char *)v120 + 7) = *(std::string::size_type *)((char *)&v77->__r_.__value_.__r.__words[1]
                                                                            + 7);
                  v79 = HIBYTE(v77->__r_.__value_.__r.__words[2]);
                  v77->__r_.__value_.__l.__size_ = 0;
                  v77->__r_.__value_.__r.__words[2] = 0;
                  v77->__r_.__value_.__r.__words[0] = 0;
                  LOBYTE(v84) = 0;
                  *(_QWORD *)&v86[7] = *(_QWORD *)((char *)v120 + 7);
                  v85 = v78;
                  *(_QWORD *)v86 = v120[0];
                  v87 = v79;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                LOBYTE(v84) = 0;
                std::string::basic_string[abi:ne180100]<0>(&v85, "Constnt Pad fill mode with non-zero values is not supported on ANE.");
              }
            }
            else
            {
              LOBYTE(v84) = 0;
              std::string::basic_string[abi:ne180100]<0>(&v85, "Kernel size exceed ANE limit.");
            }
            goto LABEL_64;
          }
        }
      }
      LOBYTE(v84) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v85, "Stride size should be no larger than 2");
    }
    else
    {
      LOBYTE(v84) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v85, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    LOBYTE(v84) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v85, "Input blob dimensions exceed ANE limit.");
  }
LABEL_64:

  if ((_BYTE)v84)
  {
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&__p, (NSString *)(a1 + 424), v44);
    v48 = *(int64x2_t **)a2;
    v49 = *(std::__shared_weak_count **)(a2 + 8);
    v81[0] = v48;
    v81[1] = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v17 = mix_is_valid_for_engine_conv(a1 + 304, a3, (uint64_t)v81);
    if (v49)
    {
      v52 = (unint64_t *)&v49->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v55 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v57 = *(std::__shared_weak_count **)(a2 + 8);
    v82 = *(int64x2_t **)a2;
    v83 = v57;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v85, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v60 = v113;
    if (v113)
    {
      v61 = (unint64_t *)&v113->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    *(_QWORD *)&v118 = v112;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    *(_QWORD *)&v118 = v111;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v17 = v83;
    if (v83)
    {
      v63 = (unint64_t *)&v83->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v17 = 0;
    }
  }
  if (v87 < 0)
    operator delete(v85);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
LABEL_98:

  v65 = v117;
  if (v117)
  {
    v66 = (unint64_t *)&v117->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  return v17;
}

void sub_1917838B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (a26 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 160);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_conv3d_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;

  v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 1)
      goto LABEL_8;
    v4 = *(unsigned __int8 *)*a2;
  }
  else
  {
    if (v3 != 1)
      goto LABEL_8;
    v4 = *(unsigned __int8 *)a2;
  }
  if (v4 == 87 || v4 == 98)
    return 1;
LABEL_8:
  if (Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
    return 1;
  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

_QWORD *Espresso::ANECompilerEngine::mix_conv3d_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), *a2, a2[1]);
}

_QWORD *Espresso::ANECompilerEngine::mix_conv3d_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), *a2, a2[1]);
}

uint64_t Espresso::ANECompilerEngine::mix_conv3d_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 512);
  *a2 = *(_QWORD *)(this + 504);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::mix_conv3d_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 648);
  *a2 = *(_QWORD *)(this + 640);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::ANECompilerEngine::mix_conv3d_kernel::compile(Espresso::ANECompilerEngine::mix_conv3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  __int128 *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const char *v48;
  void *v49;
  std::__shared_weak_count *v50;
  void *v51;
  std::__shared_weak_count *v52;
  _OWORD v53[6];
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unsigned __int8 *v57;
  std::__shared_weak_count *v58;
  const void *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  __int128 *v63;

  v61 = 0;
  v62 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v62 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v61 = v8) == 0))
  {
    v48 = "Inconsistent state: null network";
    goto LABEL_60;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v48 = "Inconsistent state: blob_storage";
LABEL_60:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v48);
  }
  v9 = v7;
  v57 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, v57, (__int128 **)&v57);
  v11 = (const void *)*((_QWORD *)v10 + 5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v59 = v11;
  v60 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v63 = (__int128 *)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, &v63);
  v17 = (__int128 *)*((_QWORD *)v15 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v57 = (unsigned __int8 *)v17;
  v58 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v55 = v8;
  v56 = v9;
  v20 = (unint64_t *)&v9->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v22 = *((_OWORD *)this + 24);
  v53[4] = *((_OWORD *)this + 23);
  v53[5] = v22;
  v54 = *((_DWORD *)this + 100);
  v23 = *((_OWORD *)this + 20);
  v53[0] = *((_OWORD *)this + 19);
  v53[1] = v23;
  v24 = *((_OWORD *)this + 22);
  v53[2] = *((_OWORD *)this + 21);
  v53[3] = v24;
  if (v11
  {
    v51 = v25;
    v52 = v12;
    if (v12)
    {
      v26 = (unint64_t *)&v12->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (!v17)
      goto LABEL_26;
  }
  else
  {
    v51 = 0;
    v52 = 0;
    if (!v17)
    {
LABEL_26:
      v16 = 0;
      v49 = 0;
      v50 = 0;
      goto LABEL_27;
    }
  }
  if (!v28)
    goto LABEL_26;
  v49 = v28;
  v50 = v16;
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
LABEL_27:
  mix_add_conv_3d<Espresso::ANECompilerEngine::mix_conv3d_kernel *>(this, a2, &v55, (uint64_t)v53, (id *)a3, (uint64_t)&v51, &v49);
  if (v16)
  {
    v31 = (unint64_t *)&v16->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v33 = v52;
  if (v52)
  {
    v34 = (unint64_t *)&v52->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v56;
  if (v56)
  {
    v37 = (unint64_t *)&v56->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v58;
  if (v58)
  {
    v40 = (unint64_t *)&v58->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v60;
  if (v60)
  {
    v43 = (unint64_t *)&v60->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v62;
  if (v62)
  {
    v46 = (unint64_t *)&v62->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_191783E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 104);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_conv3d_kernel::compile(Espresso::ANECompilerEngine::mix_conv3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_conv3d_kernel::compile((Espresso::ANECompilerEngine::mix_conv3d_kernel *)((char *)this - 424), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_conv3d_kernel::~mix_conv3d_kernel(Espresso::ANECompilerEngine::mix_conv3d_kernel *this)
{
  Espresso::generic_conv3d_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_conv3d_kernel *)((char *)this - 424);
  *((_QWORD *)this - 53) = &off_1E2D77330;
  *(_QWORD *)this = &unk_1E2D77518;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
}

{
  Espresso::generic_conv3d_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_conv3d_kernel *)((char *)this - 424);
  *((_QWORD *)this - 53) = &off_1E2D77330;
  *(_QWORD *)this = &unk_1E2D77518;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void mix_add_conv_3d<Espresso::ANECompilerEngine::mix_conv3d_kernel *>(_QWORD *a1, _BYTE *a2, uint64_t *a3, uint64_t a4, id *a5, uint64_t a6, _QWORD *a7)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  const NSDictionary *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  const NSDictionary *v24;
  float v25;
  uint64_t v26;
  float v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  id v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  char *v51;
  int v52;
  int v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  std::__shared_weak_count *v58;
  int32x4_t v59;
  int8x16_t v60;
  unint64_t *v61;
  const unsigned __int8 *v62;
  __int32 v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  std::__shared_weak_count *v72;
  int32x4_t v73;
  int8x16_t v74;
  unint64_t *p_shared_owners;
  const unsigned __int8 *v76;
  __int32 v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  void *v82;
  uint64_t weights_file_index;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  std::__shared_weak_count *v89;
  int32x4_t v90;
  int8x16_t v91;
  unint64_t *v92;
  const unsigned __int8 *v93;
  __int32 v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  _BOOL4 v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  char v114;
  id v115;
  void *v116;
  BOOL v118;
  char v119;
  int v120;
  void *v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int v125;
  char *v126;
  int32x4_t v127;
  int8x16_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t i;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *size;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  void *v147;
  Espresso::ANECompilerEngine::compiler::build_state_t *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  unint64_t *v153;
  unint64_t v154;
  __int128 v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  void *v162;
  uint64_t v163;
  void *v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  id v172;
  int v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::string::size_type v180;
  Espresso::ANECompilerEngine::compiler::build_state_t *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  void *v191;
  void *v192;
  __int128 v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  void *v200;
  uint64_t v201;
  void *v202;
  void *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  const __CFString *v242;
  __CFString *v243;
  std::string *v244;
  std::string *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  char v261;
  float v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  int *v278;
  _WORD *v279;
  int v280;
  __int128 v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  int *v293;
  _WORD *v294;
  int v295;
  int v297;
  Espresso::ANECompilerEngine::compiler::build_state_t *v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  void *v306;
  id v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  uint64_t v312;
  void *v313;
  void *v314;
  __int128 v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  void *v322;
  void *v323;
  uint64_t v324;
  void *v325;
  void *v326;
  std::string *v327;
  std::string *v328;
  uint64_t v329;
  char v330;
  std::string::size_type v331;
  std::string::size_type v332;
  uint64_t v333;
  unsigned __int8 *v334;
  std::string *v335;
  const std::string::value_type *data;
  __int128 v337;
  __CFString *v338;
  std::string *v339;
  std::string *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t *v359;
  unint64_t v360;
  uint64_t *v361;
  unint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  const unsigned __int8 *v367;
  int *v368;
  _WORD *v369;
  uint64_t v370;
  int v371;
  Espresso::ANECompilerEngine::compiler::build_state_t *v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  void *v379;
  void *v380;
  void *v381;
  void *v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  __int128 v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  Espresso::ANECompilerEngine::compiler::build_state_t *v392;
  unint64_t *v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  __int128 v398;
  unint64_t *v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t *v402;
  unint64_t v403;
  void *v404;
  void *v405;
  void *v406;
  void *v407;
  uint64_t v408;
  id v409;
  void *v410;
  void *v411;
  void *v412;
  void *v413;
  uint64_t v414;
  void *v415;
  void *v416;
  __CFString *v417;
  std::string *v418;
  std::string *v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  void *v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  char *v432;
  std::string::size_type v433;
  __int128 v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::string::size_type v438;
  float *v439;
  float *v440;
  float *v441;
  uint64_t v442;
  float v443;
  float v444;
  float v445;
  uint64_t v446;
  const unsigned __int8 *v447;
  int *v448;
  _WORD *v449;
  uint64_t v450;
  int v451;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t *v457;
  unint64_t v458;
  void *v459;
  void *v460;
  void *v461;
  uint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  void *v475;
  void *v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  char *v483;
  unint64_t v484;
  char *v485;
  uint64_t v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  int *v490;
  uint64_t v491;
  uint64_t v492;
  const unsigned __int8 *v493;
  _WORD *v494;
  int v495;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t *v501;
  unint64_t v502;
  void *v503;
  uint64_t v504;
  void *v505;
  void *v506;
  __CFString *v507;
  std::string *v508;
  std::string *v509;
  void *v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  void *v520;
  __CFString *v521;
  std::string *v522;
  std::string *v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t *v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  int v535;
  id v536;
  uint64_t v537;
  NSString *v538;
  _BYTE *v539;
  __CFString *v540;
  std::string *v541;
  std::string *v542;
  unint64_t v543;
  unint64_t v544;
  char *v545;
  uint64_t v546;
  std::string *v547;
  std::string *v548;
  _QWORD *v549;
  std::string *v550;
  std::string *m;
  __CFString *v552;
  std::string *v553;
  std::string *v554;
  __int128 v555;
  unint64_t v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t v559;
  void *v560;
  std::string *v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  std::__shared_weak_count *v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::runtime_error *exception;
  uint64_t v599;
  int *v600;
  uint64_t j;
  float v602;
  int v603;
  _WORD *v604;
  int v605;
  std::runtime_error *v607;
  const char *v608;
  int *v609;
  uint64_t k;
  int v611;
  int v612;
  unsigned int v613;
  unsigned int v614;
  int v615;
  Espresso *v616;
  const char *v617;
  float v618;
  NSObject *v620;
  double v621;
  uint64_t v622;
  _WORD *v623;
  int v624;
  int32x4_t v626;
  id v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  char v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  _BOOL4 v639;
  Espresso::ANECompilerEngine *v640;
  _BOOL4 v641;
  unsigned int v642;
  unsigned int v643;
  unsigned int v644;
  int v645;
  unsigned int v646;
  Espresso::ANECompilerEngine::sparsity_options *v647;
  unsigned int v649;
  uint64_t v653;
  std::__shared_weak_count *v654;
  __int128 v655;
  __int128 v656;
  uint64_t v657;
  std::__shared_weak_count *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  std::__shared_weak_count *v662;
  __int128 v663;
  uint64_t v664;
  std::__shared_weak_count *v665;
  uint64_t v666;
  std::__shared_weak_count *v667;
  std::__shared_weak_count *v668;
  std::__shared_weak_count *v669;
  std::__shared_weak_count *v670;
  std::__shared_weak_count *v671;
  uint64_t v672;
  std::__shared_weak_count *v673;
  uint64_t v674;
  std::__shared_weak_count *v675;
  uint64_t v676;
  std::string *v677;
  unint64_t v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  uint64_t v692;
  std::__shared_weak_count *v693;
  __int128 v694;
  uint64_t v695;
  std::__shared_weak_count *v696;
  uint64_t v697[2];
  uint64_t v698;
  std::__shared_weak_count *v699;
  __int128 v700;
  uint64_t v701;
  std::__shared_weak_count *v702;
  unsigned int v703;
  unsigned int v704;
  __int128 v705;
  std::string __p;
  _BYTE v707[24];
  std::string *v708;
  std::string *v709;
  unint64_t v710;
  void *v711;
  char v712;
  id v713;
  __CFString *v714;
  id v715;
  unint64_t v716;
  _QWORD v717[3];
  _BYTE buf[24];
  __int128 v719;
  std::vector<std::string> v720;
  void *v721;
  char v722;
  id v723;
  __CFString *v724;
  id v725;
  _BYTE __str[32];
  unint64_t *v727;
  uint64_t v728;

  v728 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(*a7 + 168);
  v645 = a2[552];
  v646 = *(_DWORD *)(*a7 + 164);
  v12 = *(_DWORD *)(*a7 + 172);
  v11 = *(_DWORD *)(*a7 + 176);
  v13 = *(_DWORD *)(*(_QWORD *)a6 + 168);
  v636 = *(_DWORD *)(*(_QWORD *)a6 + 172);
  v637 = *(_DWORD *)(*(_QWORD *)a6 + 176);
  v689 = 0u;
  v690 = 0u;
  v687 = 0u;
  v688 = 0u;
  v685 = 0u;
  v686 = 0u;
  v683 = 0u;
  v684 = 0u;
  v681 = 0u;
  v682 = 0u;
  v679 = 0u;
  v680 = 0u;
  v14 = *(_DWORD *)(a4 + 16);
  v15 = *(__int16 *)(a4 + 70);
  if (v15 > 1)
    v14 = (v14 - 1) * v15 + 1;
  v644 = v14;
  v16 = *(__int16 *)(a4 + 72);
  if (v16 > 1)
    v17 = (*(_DWORD *)(a4 + 20) - 1) * v16 + 1;
  else
    v17 = *(_DWORD *)(a4 + 20);
  v643 = v17;
  v18 = *(__int16 *)(a4 + 74);
  if (v18 > 1)
    v19 = (*(_DWORD *)(a4 + 24) - 1) * v18 + 1;
  else
    v19 = *(_DWORD *)(a4 + 24);
  v642 = v19;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v647 = (Espresso::ANECompilerEngine::sparsity_options *)objc_claimAutoreleasedReturnValue();

  v22 = *(__int16 *)(a4 + 70) > 1 || *(__int16 *)(a4 + 72) > 1 || *(__int16 *)(a4 + 74) > 1;
  v641 = v22;
  v23 = Espresso::ANECompilerEngine::sparsity_options::force_dense_dilated_convs(v647, v21);
  v639 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(*a3 + 472, v647);
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v647, v24);
  v26 = (uint64_t)a5[6];
  if ((char *)a5[7] - v26 != (_BYTE *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*(_QWORD *)a6)
  {
    if (*(char *)(v26 + 23) < 0)
      v26 = *(_QWORD *)v26;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v26);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0)
      v599 = (uint64_t)a5;
    else
      v599 = (uint64_t)*a5;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v599);
  }
  v27 = v25;
  v632 = v12;
  v633 = v11;
  v634 = v13;
  v635 = v10;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
  v640 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v676 = 0;
  v677 = 0;
  v678 = 0;
  v28 = (void *)objc_opt_new();
  objc_msgSend(v28, "setObject:forKeyedSubscript:", CFSTR("Dense"), CFSTR("KernelMode"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v644);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setObject:forKeyedSubscript:", v29, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v643);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setObject:forKeyedSubscript:", v30, CFSTR("KernelHeight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v642);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setObject:forKeyedSubscript:", v31, CFSTR("KernelDepth"));

  v32 = *(_DWORD *)(a4 + 80);
  if (v32 >= 2 && v32 == *(_DWORD *)(a4 + 12) && v32 == *(_DWORD *)(a4 + 8))
  {
    objc_msgSend(v28, "setObject:forKeyedSubscript:", CFSTR("ChannelWiseConv"), CFSTR("Type"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("KernelGroupReuse"));
    v638 = 1;
  }
  else
  {
    objc_msgSend(v28, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
    v638 = *(_DWORD *)(a4 + 80);
    objc_msgSend(v28, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("KernelGroupReuse"));
  }
  if (v23)
  {
    v33 = v28;
    v34 = v33;
    if (*(__int16 *)(a4 + 70) > 1 || *(__int16 *)(a4 + 72) > 1 || !*(_WORD *)(a4 + 74))
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 416))(&__p, a1);
      if (!__p.__r_.__value_.__r.__words[0])
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("<rdar://problem/36840916> Need proper way of expressing dilated conv to ANEC");
      Espresso::dilated_conv_bloated_weights<float>(buf, (uint64_t)__p.__r_.__value_.__l.__data_, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 24), (__int16 *)a4);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)&v679, (uint64_t *)buf);
      v70 = *(_QWORD *)buf;
      v71 = *(_DWORD *)(*(_QWORD *)buf + 8);
      v629 = *(int32x4_t *)(*(_QWORD *)buf + 12);
      v72 = (std::__shared_weak_count *)operator new(0x58uLL);
      v73.i64[1] = 0x100000001;
      v73.i64[0] = v71 | 0x100000000;
      v74 = (int8x16_t)vmulq_s32(v629, v73);
      *(int32x2_t *)v74.i8 = vmul_s32(*(int32x2_t *)v74.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
      v72->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      v72->__shared_weak_owners_ = 0;
      v72->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v76 = *(const unsigned __int8 **)(v70 + 32);
      v72[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v72[3].std::__shared_count = 0u;
      *(_OWORD *)&v72[2].__shared_owners_ = 0u;
      v77 = 4 * v74.i32[0] * v74.i32[1];
      LODWORD(v72[1].__shared_owners_) = v77;
      v72[1].__shared_weak_owners_ = (uint64_t)v76;
      LOBYTE(v72[2].__vftable) = 0;
      *(_QWORD *)__str = v72 + 1;
      *(_QWORD *)&__str[8] = v72;
      *(_QWORD *)&v700 = v72 + 1;
      *((_QWORD *)&v700 + 1) = v72;
      do
        v78 = __ldxr(p_shared_owners);
      while (__stxr(v78 + 1, p_shared_owners));
      v79 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v76, v77);
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v79);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "setObject:forKeyedSubscript:", v81, CFSTR("KernelOffset"));

      v82 = (void *)MEMORY[0x1E0CB37E8];
      if (a2[552])
        weights_file_index = 0;
      else
      objc_msgSend(v82, "numberWithUnsignedLong:", weights_file_index);
      v136 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "setObject:forKeyedSubscript:", v136, CFSTR("KernelIndex"));

      objc_msgSend(v34, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
      v137 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v138 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      v140 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v141 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v144 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }

      v114 = 0;
      goto LABEL_174;
    }

  }
  v35 = (std::__shared_weak_count *)a3[1];
  v674 = *a3;
  v675 = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights");
  v38 = (*(uint64_t (**)(_QWORD *, uint64_t *, _QWORD *, std::string *))(a1[53] + 88))(a1 + 53, &v674, a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v39 = v675;
  if (!v675)
    goto LABEL_35;
  v40 = (unint64_t *)&v675->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if ((v38 & 0x80000000) == 0)
    {
LABEL_36:
      v42 = (std::__shared_weak_count *)a3[1];
      v672 = *a3;
      v673 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t *, _QWORD *, _BYTE *))(a1[53] + 120))(&__p, a1 + 53, &v672, a1, buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v45 = v673;
      if (v673)
      {
        v46 = (unint64_t *)&v673->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (*(uint64_t (**)(_QWORD *))(*a1 + 384))(a1);
      v49 = *(_DWORD *)(v48 + 12);
      v50 = *(_DWORD *)(a4 + 80);
      v51 = (char *)operator new(0x68uLL);
      *((_QWORD *)v51 + 1) = 0;
      *((_QWORD *)v51 + 2) = 0;
      *(_QWORD *)v51 = &off_1E2DBECE0;
      v52 = *(_DWORD *)(v48 + 24);
      v53 = *(_DWORD *)(v48 + 8);
      *((_QWORD *)v51 + 3) = &off_1E2DA1210;
      v54 = __p.__r_.__value_.__r.__words[0];
      v55 = *(_QWORD *)(v48 + 16);
      *(_OWORD *)(v51 + 72) = 0u;
      *(_OWORD *)(v51 + 88) = 0u;
      *((_QWORD *)v51 + 4) = v55;
      *((_DWORD *)v51 + 10) = v52;
      *((_DWORD *)v51 + 11) = v49 / v50;
      *((_DWORD *)v51 + 12) = v53;
      *((_QWORD *)v51 + 7) = v54;
      v51[64] = 0;
      *(_QWORD *)buf = v51 + 24;
      *(_QWORD *)&buf[8] = v51;
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)&v679, (uint64_t *)buf);
      v56 = v679;
      v57 = *(_DWORD *)(v679 + 8);
      v628 = *(int32x4_t *)(v679 + 12);
      v58 = (std::__shared_weak_count *)operator new(0x58uLL);
      v59.i64[1] = 0x100000001;
      v59.i64[0] = v57 | 0x100000000;
      v60 = (int8x16_t)vmulq_s32(v628, v59);
      *(int32x2_t *)v60.i8 = vmul_s32(*(int32x2_t *)v60.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
      v58->__shared_owners_ = 0;
      v61 = (unint64_t *)&v58->__shared_owners_;
      v58->__shared_weak_owners_ = 0;
      v58->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v62 = *(const unsigned __int8 **)(v56 + 32);
      v58[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v58[3].std::__shared_count = 0u;
      *(_OWORD *)&v58[2].__shared_owners_ = 0u;
      v63 = 4 * v60.i32[0] * v60.i32[1];
      LODWORD(v58[1].__shared_owners_) = v63;
      v58[1].__shared_weak_owners_ = (uint64_t)v62;
      LOBYTE(v58[2].__vftable) = 0;
      *(_QWORD *)__str = v58 + 1;
      *(_QWORD *)&__str[8] = v58;
      v670 = v58 + 1;
      v671 = v58;
      do
        v64 = __ldxr(v61);
      while (__stxr(v64 + 1, v61));
      v65 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v62, v63);
      do
        v66 = __ldaxr(v61);
      while (__stlxr(v66 - 1, v61));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v65);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKeyedSubscript:", v67, CFSTR("KernelOffset"));

      v68 = (void *)MEMORY[0x1E0CB37E8];
      if (v645)
        v69 = 0;
      else
      objc_msgSend(v68, "numberWithUnsignedLong:", v69);
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKeyedSubscript:", v101, CFSTR("KernelIndex"));

      objc_msgSend(v28, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
      v102 = *(std::__shared_weak_count **)&__str[8];
      v103 = v641;
      if (*(_QWORD *)&__str[8])
      {
        v104 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v106 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v107 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        goto LABEL_97;
      }
      goto LABEL_99;
    }
  }
  else
  {
LABEL_35:
    if ((v38 & 0x80000000) == 0)
      goto LABEL_36;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 416))(&__p, a1);
  v84 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v85 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 16))(*((_QWORD *)&v84 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v84 + 1));
    }
  }
  if (!(_QWORD)v84)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 416))(&__p, a1);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)&v679, (uint64_t *)&__p);
  v87 = v679;
  v88 = *(_DWORD *)(v679 + 8);
  v630 = *(int32x4_t *)(v679 + 12);
  v89 = (std::__shared_weak_count *)operator new(0x58uLL);
  v90.i64[1] = 0x100000001;
  v90.i64[0] = v88 | 0x100000000;
  v91 = (int8x16_t)vmulq_s32(v630, v90);
  *(int32x2_t *)v91.i8 = vmul_s32(*(int32x2_t *)v91.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL));
  v89->__shared_owners_ = 0;
  v92 = (unint64_t *)&v89->__shared_owners_;
  v89->__shared_weak_owners_ = 0;
  v89->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
  v93 = *(const unsigned __int8 **)(v87 + 32);
  v89[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
  v89[3].std::__shared_count = 0u;
  *(_OWORD *)&v89[2].__shared_owners_ = 0u;
  v94 = 4 * v91.i32[0] * v91.i32[1];
  LODWORD(v89[1].__shared_owners_) = v94;
  v89[1].__shared_weak_owners_ = (uint64_t)v93;
  LOBYTE(v89[2].__vftable) = 0;
  *(_QWORD *)buf = v89 + 1;
  *(_QWORD *)&buf[8] = v89;
  v668 = v89 + 1;
  v669 = v89;
  do
    v95 = __ldxr(v92);
  while (__stxr(v95 + 1, v92));
  v96 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v93, v94);
  do
    v97 = __ldaxr(v92);
  while (__stlxr(v97 - 1, v92));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v96);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setObject:forKeyedSubscript:", v98, CFSTR("KernelOffset"));

  v99 = (void *)MEMORY[0x1E0CB37E8];
  if (v645)
    v100 = 0;
  else
  objc_msgSend(v99, "numberWithUnsignedLong:", v100);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setObject:forKeyedSubscript:", v109, CFSTR("KernelIndex"));

  objc_msgSend(v28, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
  v110 = *(std::__shared_weak_count **)&buf[8];
  v103 = v641;
  if (*(_QWORD *)&buf[8])
  {
    v111 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v106 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v113 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v108 = __ldaxr(v113);
    while (__stlxr(v108 - 1, v113));
LABEL_97:
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
LABEL_99:
  if (v103 && !v23)
  {
    v115 = v28;
    v116 = v115;
    v118 = *(__int16 *)(a4 + 70) < 2 && *(__int16 *)(a4 + 72) < 2 && *(__int16 *)(a4 + 74) < 2;
    v119 = v118;
    v631 = v119;
    if (!v118)
    {
      v120 = a2[552];
      objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("KernelType"));
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)buf = 0uLL;
      v627 = v121;
      if (!objc_msgSend(v121, "isEqualToString:", CFSTR("Float32")))
      {
        if (v627)
          v608 = (const char *)objc_msgSend(objc_retainAutorelease(v627), "UTF8String");
        else
          v608 = "";
        *(_QWORD *)__str = v608;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid kernel type %s", __str);
      }
      v122 = v679;
      *(_OWORD *)__str = v679;
      if (*((_QWORD *)&v679 + 1))
      {
        v123 = (unint64_t *)(*((_QWORD *)&v679 + 1) + 8);
        do
          v124 = __ldxr(v123);
        while (__stxr(v124 + 1, v123));
      }
      if (!(_QWORD)v122)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp32 weights");
      v125 = *(_DWORD *)(v122 + 8);
      v626 = *(int32x4_t *)(v122 + 12);
      v126 = (char *)operator new(0x58uLL);
      v127.i64[1] = 0x100000001;
      v127.i64[0] = v125 | 0x100000000;
      v128 = (int8x16_t)vmulq_s32(v626, v127);
      *(int32x2_t *)v128.i8 = vmul_s32(*(int32x2_t *)v128.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL));
      *((_QWORD *)v126 + 1) = 0;
      *((_QWORD *)v126 + 2) = 0;
      *(_QWORD *)v126 = &off_1E2DBED50;
      v129 = *(_QWORD *)(v122 + 32);
      *((_QWORD *)v126 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v126 + 56) = 0u;
      *(_OWORD *)(v126 + 72) = 0u;
      *((_DWORD *)v126 + 8) = 4 * v128.i32[0] * v128.i32[1];
      *((_QWORD *)v126 + 5) = v129;
      v126[48] = 0;
      *(_QWORD *)buf = v126 + 24;
      *(_QWORD *)&buf[8] = v126;
      v130 = *(int *)(v122 + 8);
      for (i = 12; i != 28; i += 4)
        v130 *= *(int *)(v122 + i);
      Espresso::compress_dilated_conv_sparse_kernel_mask<float>((uint64_t *)&v700, (_DWORD *)v122, a4);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v700;
      if (*((_QWORD *)&v122 + 1))
      {
        v132 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v122 + 1) + 16))(*((_QWORD *)&v122 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v122 + 1));
        }
      }
      v134 = (void *)MEMORY[0x1E0CB37E8];
      if (v120)
        v135 = 0;
      else
      objc_msgSend(v134, "numberWithUnsignedLong:", v135, *(_OWORD *)&v626);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v116, "setObject:forKeyedSubscript:", v146, CFSTR("KernelIndex"));

      v147 = (void *)MEMORY[0x1E0CB37E8];
      v148 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      v149 = *(_OWORD *)buf;
      *(_OWORD *)__str = *(_OWORD *)buf;
      if (*(_QWORD *)&buf[8])
      {
        v150 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
      }
      objc_msgSend(v147, "numberWithInt:", Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v148, *(const unsigned __int8 **)(v149 + 16), *(int *)(v149 + 8)));
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v116, "setObject:forKeyedSubscript:", v152, CFSTR("KernelOffset"));

      if (*((_QWORD *)&v149 + 1))
      {
        v153 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
        }
      }
      v155 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v700 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v156 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      v158 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v148, *(const unsigned __int8 **)(v155 + 16), *(int *)(v155 + 8));
      if (*((_QWORD *)&v155 + 1))
      {
        v159 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v155 + 1) + 16))(*((_QWORD *)&v155 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v155 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v158);
      v161 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v116, "setObject:forKeyedSubscript:", v161, CFSTR("KernelMaskByteOffset"));

      v162 = (void *)MEMORY[0x1E0CB37E8];
      if (v120)
        v163 = 0;
      else
      objc_msgSend(v162, "numberWithUnsignedLong:", v163);
      v164 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v116, "setObject:forKeyedSubscript:", v164, CFSTR("KernelMaskIndex"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v130);
      v165 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v116, "setObject:forKeyedSubscript:", v165, CFSTR("KernelCoeffCount"));

      objc_msgSend(v116, "setObject:forKeyedSubscript:", CFSTR("Sparse"), CFSTR("KernelMode"));
      v166 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v167 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      v169 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v170 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }

    }
    v114 = v631 ^ 1;
LABEL_174:
    v103 = v641;
    goto LABEL_175;
  }
  v114 = 0;
LABEL_175:
  if (!v103 && v639 && (v114 & 1) == 0)
  {
    v172 = v28;
    v173 = a2[552];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    *(_OWORD *)buf = 0uLL;
    if ((_QWORD)v679)
    {
      v174 = (std::__shared_weak_count *)*((_QWORD *)&v679 + 1);
      *(_OWORD *)__str = v679;
      if (*((_QWORD *)&v679 + 1))
      {
        v175 = (unint64_t *)(*((_QWORD *)&v679 + 1) + 8);
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
      }
      v177 = Espresso::ANECompilerEngine::compress_sparse_weights<float,5>((uint64_t)__str, (uint64_t)&__p, (uint64_t)buf, v27);
      if (v174)
      {
        v178 = (unint64_t *)&v174->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v180 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
        _ZF = *(_QWORD *)buf == 0;
      else
        _ZF = 1;
      if (!_ZF)
      {
        v182 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
        v183 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        v700 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v184 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v185 = __ldxr(v184);
          while (__stxr(v185 + 1, v184));
        }
        v186 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v182, *(const unsigned __int8 **)(v180 + 16), *(int *)(v180 + 8));
        if (v183)
        {
          v187 = (unint64_t *)&v183->__shared_owners_;
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
        v189 = (void *)MEMORY[0x1E0CB37E8];
        if (v173)
          v190 = 0;
        else
        objc_msgSend(v189, "numberWithUnsignedLong:", v190);
        v191 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v191, CFSTR("KernelIndex"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v186);
        v192 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v192, CFSTR("KernelOffset"));

        v193 = *(_OWORD *)buf;
        v705 = *(_OWORD *)buf;
        if (*(_QWORD *)&buf[8])
        {
          v194 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
        }
        v196 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v182, *(const unsigned __int8 **)(v193 + 16), *(int *)(v193 + 8));
        if (*((_QWORD *)&v193 + 1))
        {
          v197 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v193 + 1) + 16))(*((_QWORD *)&v193 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v193 + 1));
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v196);
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v199, CFSTR("KernelMaskByteOffset"));

        v200 = (void *)MEMORY[0x1E0CB37E8];
        if (v173)
          v201 = 0;
        else
        objc_msgSend(v200, "numberWithUnsignedLong:", v201);
        v202 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v202, CFSTR("KernelMaskIndex"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v177);
        v203 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v203, CFSTR("KernelCoeffCount"));

        objc_msgSend(v172, "setObject:forKeyedSubscript:", CFSTR("Sparse"), CFSTR("KernelMode"));
      }
    }
    v204 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v205 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
      }
    }
    v207 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v208 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
    }

  }
  v210 = *(__int16 *)(a4 + 66);
  v211 = *(__int16 *)(a4 + 68);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 64));
  v212 = (void *)objc_claimAutoreleasedReturnValue();
  v717[0] = v212;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v210);
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  v717[1] = v213;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v211);
  v214 = (void *)objc_claimAutoreleasedReturnValue();
  v717[2] = v214;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v717, 3);
  v215 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setObject:forKeyedSubscript:", v215, CFSTR("Step"));

  v216 = *(__int16 *)(a4 + 44);
  if (v216 != 4)
  {
    if (v216 == 2)
    {
      v230 = 0;
      v231 = 0;
      v232 = 0;
      v233 = 0;
      v234 = 0;
      v235 = 0;
      goto LABEL_247;
    }
    if (v216 != 1)
    {
      v230 = *(__int16 *)(a4 + 52);
      v231 = *(__int16 *)(a4 + 54);
      v232 = *(__int16 *)(a4 + 56);
      v233 = *(__int16 *)(a4 + 58);
      v235 = *(__int16 *)(a4 + 60);
      v234 = *(__int16 *)(a4 + 62);
      goto LABEL_247;
    }
  }
  v217 = v643 - v636 + (v632 - 1) * *(__int16 *)(a4 + 66);
  v218 = v644 - v637 + (v633 - 1) * *(__int16 *)(a4 + 64);
  v219 = v217 & ~(v217 >> 31);
  v220 = v218 & ~(v218 >> 31);
  v221 = v642 - v634 + (v635 - 1) * *(__int16 *)(a4 + 68);
  v222 = v221 & ~(v221 >> 31);
  v223 = v220 >> 1;
  v224 = *(unsigned __int16 *)(a4 + 44);
  v225 = v220 - (v220 >> 1);
  v226 = v219 >> 1;
  v227 = v219 - (v219 >> 1);
  v228 = v222 >> 1;
  v229 = v222 - (v222 >> 1);
  if (v224 == 1)
    v230 = v223;
  else
    v230 = v225;
  if (v224 == 1)
    v231 = v225;
  else
    v231 = v223;
  if (v224 == 1)
    v232 = v226;
  else
    v232 = v227;
  if (v224 == 1)
    v233 = v227;
  else
    v233 = v226;
  if (v224 == 1)
    v234 = v229;
  else
    v234 = v228;
  if (v224 == 1)
    v235 = v228;
  else
    v235 = v229;
LABEL_247:
  if (v232 || (_DWORD)v233 || (_DWORD)v230 || (_DWORD)v231 || (_DWORD)v234)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
    v236 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v236, CFSTR("PadTop"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v233);
    v237 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v237, CFSTR("PadBot"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v230);
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v238, CFSTR("PadLeft"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v231);
    v239 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v239, CFSTR("PadRight"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v235);
    v240 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v240, CFSTR("PadFront"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v234);
    v241 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v241, CFSTR("PadBack"));

    if (*(_WORD *)(a4 + 46))
    {
      if (*(_WORD *)(a4 + 46) != 1)
        goto LABEL_257;
      v242 = CFSTR("Replication");
    }
    else
    {
      v242 = CFSTR("Zero");
    }
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v242, CFSTR("PaddingMode"));
  }
LABEL_257:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
  v243 = v714;
  v714 = CFSTR("Conv");

  objc_storeStrong(&v715, v28);
  v716 = __PAIR64__(v638, v646);
  v244 = v677;
  if ((unint64_t)v677 >= v678)
  {
    v246 = 0x8E38E38E38E38E39 * (((uint64_t)v677 - v676) >> 4);
    if (v246 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v247 = 0x1C71C71C71C71C72 * ((uint64_t)(v678 - v676) >> 4);
    if (v247 <= v246 + 1)
      v247 = v246 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v678 - v676) >> 4) >= 0xE38E38E38E38E3)
      v248 = 0x1C71C71C71C71C7;
    else
      v248 = v247;
    *((_QWORD *)&v719 + 1) = &v678;
    if (v248)
      v248 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v248);
    else
      v249 = 0;
    *(_QWORD *)buf = v248;
    *(_QWORD *)&buf[8] = v248 + 144 * v246;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v719 = v248 + 144 * v249;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v676, buf);
    v245 = v677;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v677, (uint64_t)&__p);
    v245 = v244 + 6;
  }
  v677 = v245;

  if (v712 < 0)
    operator delete(v711);
  *(_QWORD *)buf = &v708;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v707;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  v250 = (std::__shared_weak_count *)a3[1];
  v666 = *a3;
  v667 = v250;
  if (v250)
  {
    v251 = (unint64_t *)&v250->__shared_owners_;
    do
      v252 = __ldxr(v251);
    while (__stxr(v252 + 1, v251));
  }
  v254 = *a7;
  v253 = (std::__shared_weak_count *)a7[1];
  v664 = *a7;
  v665 = v253;
  if (v253)
  {
    v255 = (unint64_t *)&v253->__shared_owners_;
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 1, v255));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__p);
  v715 = 0;
  v714 = 0;
  v716 = 0x100000000;
  v258 = a1[61];
  v257 = (std::__shared_weak_count *)a1[62];
  *(_QWORD *)&v705 = v258;
  *((_QWORD *)&v705 + 1) = v257;
  if (v257)
  {
    v259 = (unint64_t *)&v257->__shared_owners_;
    do
      v260 = __ldxr(v259);
    while (__stxr(v260 + 1, v259));
  }
  if (!v258 || *(_BYTE *)((*(uint64_t (**)(_QWORD *))(a1[53] + 104))(a1 + 53) + 40))
  {
    v261 = 0;
    if (!v257)
      goto LABEL_415;
    goto LABEL_411;
  }
  v262 = *(float *)(v254 + 112);
  v698 = v258;
  v699 = v257;
  if (v257)
  {
    v263 = (unint64_t *)&v257->__shared_owners_;
    do
      v264 = __ldxr(v263);
    while (__stxr(v264 + 1, v263));
  }
  v265 = (std::__shared_weak_count *)a1[64];
  v697[0] = a1[63];
  v697[1] = (uint64_t)v265;
  if (v265)
  {
    v266 = (unint64_t *)&v265->__shared_owners_;
    do
      v267 = __ldxr(v266);
    while (__stxr(v267 + 1, v266));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v698, v697, (uint64_t)&v700, v262);
  if (v265)
  {
    v268 = (unint64_t *)&v265->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v270 = v699;
  if (v699)
  {
    v271 = (unint64_t *)&v699->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  v273 = v705;
  v274 = *(unsigned int *)(v705 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v695, 2 * v274, 1, 1, 1);
  v275 = (int)v274;
  v694 = 0uLL;
  v276 = v274;
  v277 = a1[63];
  if (v277)
    v276 = *(_DWORD *)(v277 + 8);
  if (!a2[384])
  {
    Espresso::blob<unsigned char,1>::make(__str, 4 * v274);
    v600 = *(int **)(*(_QWORD *)__str + 16);
    if ((int)v274 >= 1)
    {
      for (j = 0; j != v274; ++j)
      {
        v602 = *(float *)(*(_QWORD *)(v273 + 16) + j * 4);
        *(float *)&v603 = ldexp(1.0, -v703) * v602;
        v600[j] = v603;
      }
    }
    if ((_DWORD)v274)
    {
      v604 = *(_WORD **)(v695 + 16);
      do
      {
        v605 = *v600++;
        _S0 = v605;
        __asm { FCVT            H0, S0 }
        *v604++ = _S0;
        --v275;
      }
      while (v275);
    }
    v693 = 0;
    v692 = 0;
    if (a1[63])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v276);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v692, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * v276);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v694, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v609 = *(int **)(v692 + 16);
      if (v276 >= 1)
      {
        for (k = 0; k != v276; ++k)
        {
          if ((int)v274 - 1 >= (int)k)
            v611 = k;
          else
            v611 = v274 - 1;
          *(float *)&v612 = *(float *)(*(_QWORD *)(v701 + 16) + 4 * k) * *(float *)(*(_QWORD *)(v700 + 16) + 4 * v611);
          v609[k] = v612;
          v613 = v704;
          v614 = v703;
          *(float *)&v615 = ldexp(1.0, v704 - v703) * *(float *)&v612;
          v609[k] = v615;
          v618 = ldexp(1.0, v614 - v613) * *(float *)&v615;
          if (v618 < -127.0 || v618 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v616, v617);
            v620 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v620, OS_LOG_TYPE_ERROR))
            {
              v621 = *(float *)&v609[k];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v618;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v704;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v703;
              LOWORD(v719) = 2048;
              *(double *)((char *)&v719 + 2) = v621;
              _os_log_error_impl(&dword_190DAF000, v620, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (v276)
      {
        v622 = v276;
        v623 = *(_WORD **)(v694 + 16);
        do
        {
          v624 = *v609++;
          _S0 = v624;
          __asm { FCVT            H0, S0 }
          *v623++ = _S0;
          --v622;
        }
        while (v622);
      }
    }
    v607 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v607);
  }
  v649 = v704;
  if ((_DWORD)v274)
  {
    v278 = *(int **)(v700 + 16);
    v279 = *(_WORD **)(v695 + 16);
    do
    {
      v280 = *v278++;
      _S0 = v280;
      __asm { FCVT            H0, S0 }
      *v279++ = _S0;
      --v275;
    }
    while (v275);
  }
  if (v277)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v276, 1, 1, 1);
    v285 = *(_OWORD *)buf;
    *(_OWORD *)buf = 0uLL;
    v286 = (std::__shared_weak_count *)*((_QWORD *)&v694 + 1);
    v694 = v285;
    if (v286)
    {
      v287 = (unint64_t *)&v286->__shared_owners_;
      do
        v288 = __ldaxr(v287);
      while (__stlxr(v288 - 1, v287));
      if (!v288)
      {
        ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
        std::__shared_weak_count::__release_weak(v286);
      }
    }
    v289 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v290 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v291 = __ldaxr(v290);
      while (__stlxr(v291 - 1, v290));
      if (!v291)
      {
        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
        std::__shared_weak_count::__release_weak(v289);
      }
    }
    if (v276)
    {
      v292 = v276;
      v293 = *(int **)(v701 + 16);
      v294 = *(_WORD **)(v694 + 16);
      do
      {
        v295 = *v293++;
        _S0 = v295;
        __asm { FCVT            H0, S0 }
        *v294++ = _S0;
        --v292;
      }
      while (v292);
    }
  }
  v297 = a2[552];
  v298 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v299 = v695;
  v300 = v696;
  v692 = v695;
  v693 = v696;
  if (v696)
  {
    v301 = (unint64_t *)&v696->__shared_owners_;
    do
      v302 = __ldxr(v301);
    while (__stxr(v302 + 1, v301));
  }
  v303 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v298, *(const unsigned __int8 **)(v299 + 16), *(int *)(v299 + 8));
  if (v300)
  {
    v304 = (unint64_t *)&v300->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
      std::__shared_weak_count::__release_weak(v300);
    }
  }
  v306 = (void *)objc_opt_new();
  if (a2[121])
  {
    v307 = *(id *)(v676 + 128);

    v306 = v307;
  }
  v308 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v274);
  v309 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v308, "setObject:forKeyedSubscript:", v309, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v303);
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v308, "setObject:forKeyedSubscript:", v310, CFSTR("ScaleOffset"));

  v311 = (void *)MEMORY[0x1E0CB37E8];
  if (v297)
    v312 = 0;
  else
  objc_msgSend(v311, "numberWithUnsignedLong:", v312);
  v313 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v308, "setObject:forKeyedSubscript:", v313, CFSTR("ScaleIndex"));

  objc_msgSend(v308, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v703);
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v306, "setObject:forKeyedSubscript:", v314, CFSTR("ScaleShift"));

  if (a1[63])
  {
    v315 = v694;
    v691 = v694;
    if (*((_QWORD *)&v694 + 1))
    {
      v316 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
      do
        v317 = __ldxr(v316);
      while (__stxr(v317 + 1, v316));
    }
    v318 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v298, *(const unsigned __int8 **)(v315 + 16), *(int *)(v315 + 8));
    if (*((_QWORD *)&v315 + 1))
    {
      v319 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
      do
        v320 = __ldaxr(v319);
      while (__stlxr(v320 - 1, v319));
      if (!v320)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v315 + 1) + 16))(*((_QWORD *)&v315 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v315 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1[63] + 8));
    v321 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v308, "setObject:forKeyedSubscript:", v321, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v318);
    v322 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v308, "setObject:forKeyedSubscript:", v322, CFSTR("BiasOffset"));

    v323 = (void *)MEMORY[0x1E0CB37E8];
    if (v297)
      v324 = 0;
    else
    objc_msgSend(v323, "numberWithUnsignedLong:", v324);
    v325 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v308, "setObject:forKeyedSubscript:", v325, CFSTR("BiasIndex"));

    objc_msgSend(v308, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v649);
    v326 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v306, "setObject:forKeyedSubscript:", v326, CFSTR("BiasShift"));

  }
  objc_msgSend(v306, "setObject:forKeyedSubscript:", v308, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  v327 = v677;
  if (v677 != (std::string *)v676)
  {
    v328 = v677 - 6;
    v329 = HIBYTE(v677[-6].__r_.__value_.__r.__words[2]);
    v330 = v329;
    v331 = v677[-6].__r_.__value_.__l.__size_;
    if ((v329 & 0x80u) == 0)
      v332 = HIBYTE(v677[-6].__r_.__value_.__r.__words[2]);
    else
      v332 = v677[-6].__r_.__value_.__l.__size_;
    v333 = buf[23];
    if (buf[23] < 0)
      v333 = *(_QWORD *)&buf[8];
    if (v332 == v333)
    {
      if (buf[23] >= 0)
        v334 = buf;
      else
        v334 = *(unsigned __int8 **)buf;
      if ((char)v329 < 0)
      {
        data = (const std::string::value_type *)v328->__r_.__value_.__r.__words[0];
        if (memcmp(v328->__r_.__value_.__l.__data_, v334, v677[-6].__r_.__value_.__l.__size_))
          goto LABEL_369;
      }
      else if ((_BYTE)v329)
      {
        v335 = v677 - 6;
        while (v335->__r_.__value_.__s.__data_[0] == *v334)
        {
          v335 = (std::string *)((char *)v335 + 1);
          ++v334;
          if (!--v329)
            goto LABEL_365;
        }
        goto LABEL_366;
      }
LABEL_365:
      std::string::append(v327 - 6, "__@pre_scale_bias");
      v330 = HIBYTE(v327[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_366:
    if ((v330 & 0x80) == 0)
    {
      v337 = *(_OWORD *)&v328->__r_.__value_.__l.__data_;
      *(_QWORD *)&__str[16] = *((_QWORD *)&v327[-6].__r_.__value_.__l + 2);
      *(_OWORD *)__str = v337;
      goto LABEL_370;
    }
    data = v327[-6].__r_.__value_.__l.__data_;
    v331 = v327[-6].__r_.__value_.__l.__size_;
LABEL_369:
    std::string::__init_copy_ctor_external((std::string *)__str, data, v331);
LABEL_370:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v720, (std::string *)__str, (__int128 *)&__str[24], 1uLL);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
  v338 = v724;
  v724 = CFSTR("GOC");

  objc_storeStrong(&v725, v306);
  if (!a2[121])
  {
    v339 = v677;
    if ((unint64_t)v677 >= v678)
    {
      v341 = 0x8E38E38E38E38E39 * (((uint64_t)v677 - v676) >> 4);
      if (v341 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v342 = 0x1C71C71C71C71C72 * ((uint64_t)(v678 - v676) >> 4);
      if (v342 <= v341 + 1)
        v342 = v341 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v678 - v676) >> 4) >= 0xE38E38E38E38E3)
        v343 = 0x1C71C71C71C71C7;
      else
        v343 = v342;
      v727 = &v678;
      if (v343)
        v343 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v343);
      else
        v344 = 0;
      *(_QWORD *)__str = v343;
      *(_QWORD *)&__str[8] = v343 + 144 * v341;
      *(_QWORD *)&__str[16] = *(_QWORD *)&__str[8];
      *(_QWORD *)&__str[24] = v343 + 144 * v344;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__str[8], (uint64_t)buf);
      *(_QWORD *)&__str[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v676, __str);
      v340 = v677;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v677, (uint64_t)buf);
      v340 = v339 + 6;
    }
    v677 = v340;
  }

  if (v722 < 0)
    operator delete(v721);
  *(_QWORD *)__str = &v720;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  *(_QWORD *)__str = &v719;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  v345 = (std::__shared_weak_count *)*((_QWORD *)&v694 + 1);
  if (*((_QWORD *)&v694 + 1))
  {
    v346 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
    }
  }
  v348 = v696;
  if (v696)
  {
    v349 = (unint64_t *)&v696->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
  v351 = v702;
  if (v702)
  {
    v352 = (unint64_t *)&v702->__shared_owners_;
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
    }
  }
  v354 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
  if (*((_QWORD *)&v700 + 1))
  {
    v355 = (unint64_t *)(*((_QWORD *)&v700 + 1) + 8);
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
    }
  }
  v261 = 1;
  v257 = (std::__shared_weak_count *)*((_QWORD *)&v705 + 1);
  if (*((_QWORD *)&v705 + 1))
  {
LABEL_411:
    v357 = (unint64_t *)&v257->__shared_owners_;
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
LABEL_415:

  if (v712 < 0)
    operator delete(v711);
  *(_QWORD *)buf = &v708;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v707;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v665)
  {
    v359 = &v665->__shared_owners_;
    do
      v360 = __ldaxr((unint64_t *)v359);
    while (__stlxr(v360 - 1, (unint64_t *)v359));
    if (!v360)
    {
      ((void (*)(std::__shared_weak_count *))v665->__on_zero_shared)(v665);
      std::__shared_weak_count::__release_weak(v665);
    }
  }
  if (!v667)
    goto LABEL_428;
  v361 = &v667->__shared_owners_;
  do
    v362 = __ldaxr((unint64_t *)v361);
  while (__stlxr(v362 - 1, (unint64_t *)v361));
  if (!v362)
  {
    ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
    std::__shared_weak_count::__release_weak(v667);
    if ((v261 & 1) != 0)
    {
LABEL_429:
      if (*(_DWORD *)(a4 + 40))
LABEL_797:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
      goto LABEL_651;
    }
  }
  else
  {
LABEL_428:
    if ((v261 & 1) != 0)
      goto LABEL_429;
  }
  v363 = (_QWORD *)a1[51];
  if (v363 && *v363 && (v363[4] || v363[6] || v363[8] || v363[10]))
  {
    v364 = v363[10];
    if (v364)
    {
      v365 = *(int *)(v364 + 8);
      *(_OWORD *)__str = 0uLL;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, 2 * v365, 1, 1, 1);
      v366 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)__str = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v367 = *(const unsigned __int8 **)(__p.__r_.__value_.__r.__words[0] + 16);
      if ((_DWORD)v365)
      {
        v368 = *(int **)(*(_QWORD *)(a1[51] + 80) + 16);
        v369 = *(_WORD **)(__p.__r_.__value_.__r.__words[0] + 16);
        v370 = v365;
        do
        {
          v371 = *v368++;
          _S0 = v371;
          __asm { FCVT            H0, S0 }
          *v369++ = _S0;
          --v370;
        }
        while (v370);
      }
      v373 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      v663 = v366;
      if (*((_QWORD *)&v366 + 1))
      {
        v374 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
        do
          v375 = __ldxr(v374);
        while (__stxr(v375 + 1, v374));
        v367 = *(const unsigned __int8 **)(v366 + 16);
      }
      v376 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v373, v367, *(int *)(v366 + 8));
      if (*((_QWORD *)&v366 + 1))
      {
        v377 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
        do
          v378 = __ldaxr(v377);
        while (__stlxr(v378 - 1, v377));
        if (!v378)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v366 + 1) + 16))(*((_QWORD *)&v366 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v366 + 1));
        }
      }
      v379 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v365);
      v380 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v379, "setObject:forKeyedSubscript:", v380, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v376);
      v381 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v379, "setObject:forKeyedSubscript:", v381, CFSTR("ScaleOffset"));

      v382 = (void *)MEMORY[0x1E0CB37E8];
      if (v645)
        v383 = 0;
      else
      objc_msgSend(v382, "numberWithUnsignedLong:", v383);
      v424 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v379, "setObject:forKeyedSubscript:", v424, CFSTR("ScaleIndex"));

      objc_msgSend(v379, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
      if (*(_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 384))(a1))
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 408))(&v700, a1);
        if (!(_QWORD)v700)
        {
          v425 = (std::__shared_weak_count *)a3[1];
          v661 = *a3;
          v662 = v425;
          if (v425)
          {
            v426 = (unint64_t *)&v425->__shared_owners_;
            do
              v427 = __ldxr(v426);
            while (__stxr(v427 + 1, v426));
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t *, _QWORD *, _BYTE *))(a1[53] + 120))(&__p, a1 + 53, &v661, a1, buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v428 = v662;
          if (v662)
          {
            v429 = (unint64_t *)&v662->__shared_owners_;
            do
              v430 = __ldaxr(v429);
            while (__stlxr(v430 - 1, v429));
            if (!v430)
            {
              ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
              std::__shared_weak_count::__release_weak(v428);
            }
          }
          v431 = __p.__r_.__value_.__r.__words[2];
          v432 = (char *)operator new(0x58uLL);
          *((_QWORD *)v432 + 1) = 0;
          *((_QWORD *)v432 + 2) = 0;
          *(_QWORD *)v432 = &off_1E2DBEC00;
          *((_QWORD *)v432 + 3) = &off_1E2DA1190;
          v433 = __p.__r_.__value_.__r.__words[0];
          *(_OWORD *)(v432 + 56) = 0u;
          *(_OWORD *)(v432 + 72) = 0u;
          *((_DWORD *)v432 + 8) = v431 >> 2;
          *((_QWORD *)v432 + 5) = v433;
          v432[48] = 0;
          *(_QWORD *)&v434 = v432 + 24;
          *((_QWORD *)&v434 + 1) = v432;
          v435 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
          v700 = v434;
          if (v435)
          {
            v436 = (unint64_t *)&v435->__shared_owners_;
            do
              v437 = __ldaxr(v436);
            while (__stlxr(v437 - 1, v436));
            if (!v437)
            {
              ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
              std::__shared_weak_count::__release_weak(v435);
            }
          }
          if (!(_QWORD)v700)
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, 4 * v365, 1, 1, 1);
        v438 = __p.__r_.__value_.__r.__words[0];
        if ((_DWORD)v365)
        {
          v439 = *(float **)(__p.__r_.__value_.__r.__words[0] + 16);
          v440 = *(float **)(v700 + 16);
          v441 = *(float **)(*(_QWORD *)(a1[51] + 80) + 16);
          v442 = v365;
          do
          {
            v443 = *v440++;
            v444 = v443;
            v445 = *v441++;
            *v439++ = v444 / v445;
            --v442;
          }
          while (v442);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v365, 1, 1, 1);
        v446 = *(_QWORD *)buf;
        v447 = *(const unsigned __int8 **)(*(_QWORD *)buf + 16);
        if ((_DWORD)v365)
        {
          v448 = *(int **)(v438 + 16);
          v449 = *(_WORD **)(*(_QWORD *)buf + 16);
          v450 = v365;
          do
          {
            v451 = *v448++;
            _S0 = v451;
            __asm { FCVT            H0, S0 }
            *v449++ = _S0;
            --v450;
          }
          while (v450);
        }
        v453 = *(std::__shared_weak_count **)&buf[8];
        v659 = v446;
        v660 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v454 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v455 = __ldxr(v454);
          while (__stxr(v455 + 1, v454));
          v447 = *(const unsigned __int8 **)(v446 + 16);
        }
        v456 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v373, v447, *(int *)(v446 + 8));
        if (v453)
        {
          v457 = (unint64_t *)&v453->__shared_owners_;
          do
            v458 = __ldaxr(v457);
          while (__stlxr(v458 - 1, v457));
          if (!v458)
          {
            ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
            std::__shared_weak_count::__release_weak(v453);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v365);
        v459 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v379, "setObject:forKeyedSubscript:", v459, CFSTR("BiasCount"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v456);
        v460 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v379, "setObject:forKeyedSubscript:", v460, CFSTR("BiasOffset"));

        v461 = (void *)MEMORY[0x1E0CB37E8];
        if (v645)
          v462 = 0;
        else
        objc_msgSend(v461, "numberWithUnsignedLong:", v462);
        v510 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v379, "setObject:forKeyedSubscript:", v510, CFSTR("BiasIndex"));

        objc_msgSend(v379, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
        v511 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v512 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v513 = __ldaxr(v512);
          while (__stlxr(v513 - 1, v512));
          if (!v513)
          {
            ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
            std::__shared_weak_count::__release_weak(v511);
          }
        }
        v514 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v515 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v516 = __ldaxr(v515);
          while (__stlxr(v516 - 1, v515));
          if (!v516)
          {
            ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
            std::__shared_weak_count::__release_weak(v514);
          }
        }
        v517 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
        if (*((_QWORD *)&v700 + 1))
        {
          v518 = (unint64_t *)(*((_QWORD *)&v700 + 1) + 8);
          do
            v519 = __ldaxr(v518);
          while (__stlxr(v519 - 1, v518));
          if (!v519)
          {
            ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
            std::__shared_weak_count::__release_weak(v517);
          }
        }
      }
      v520 = (void *)objc_opt_new();
      objc_msgSend(v520, "setObject:forKeyedSubscript:", v379, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
      v521 = v714;
      v714 = CFSTR("GOC");

      objc_storeStrong(&v715, v520);
      v522 = v677;
      if ((unint64_t)v677 >= v678)
      {
        v524 = 0x8E38E38E38E38E39 * (((uint64_t)v677 - v676) >> 4);
        if (v524 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v525 = 0x1C71C71C71C71C72 * ((uint64_t)(v678 - v676) >> 4);
        if (v525 <= v524 + 1)
          v525 = v524 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v678 - v676) >> 4) >= 0xE38E38E38E38E3)
          v526 = 0x1C71C71C71C71C7;
        else
          v526 = v525;
        *((_QWORD *)&v719 + 1) = &v678;
        if (v526)
          v526 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v526);
        else
          v527 = 0;
        *(_QWORD *)buf = v526;
        *(_QWORD *)&buf[8] = v526 + 144 * v524;
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&v719 = v526 + 144 * v527;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
        *(_QWORD *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v676, buf);
        v523 = v677;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v677, (uint64_t)&__p);
        v523 = v522 + 6;
      }
      v677 = v523;

      if (v712 < 0)
        operator delete(v711);
      *(_QWORD *)buf = &v708;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v707;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);

      v472 = *(std::__shared_weak_count **)&__str[8];
      if (!*(_QWORD *)&__str[8])
        goto LABEL_651;
      v528 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v474 = __ldaxr(v528);
      while (__stlxr(v474 - 1, v528));
LABEL_633:
      if (!v474)
      {
        ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
        std::__shared_weak_count::__release_weak(v472);
      }
      goto LABEL_651;
    }
  }
  if (!*(_DWORD *)(a4 + 40))
  {
    if (*(_DWORD *)a4)
    {
      if (a2[121])
      {
        v409 = *(id *)(v676 + 128);
      }
      else
      {
        v409 = (id)objc_opt_new();

      }
      v475 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v646);
      v476 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v475, "setObject:forKeyedSubscript:", v476, CFSTR("BiasCount"));

      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 408))(__str, a1);
      v477 = (std::__shared_weak_count *)a3[1];
      v653 = *a3;
      v654 = v477;
      if (v477)
      {
        v478 = (unint64_t *)&v477->__shared_owners_;
        do
          v479 = __ldxr(v478);
        while (__stxr(v479 + 1, v478));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "blob_biases");
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t *, _QWORD *, std::string *))(a1[53] + 120))(buf, a1 + 53, &v653, a1, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v480 = v654;
      if (v654)
      {
        v481 = (unint64_t *)&v654->__shared_owners_;
        do
          v482 = __ldaxr(v481);
        while (__stlxr(v482 - 1, v481));
        if (!v482)
        {
          ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
          std::__shared_weak_count::__release_weak(v480);
        }
      }
      v483 = *(char **)__str;
      if (!*(_QWORD *)__str)
      {
        v484 = *(_QWORD *)&buf[16];
        v485 = (char *)operator new(0x58uLL);
        *((_QWORD *)v485 + 1) = 0;
        *((_QWORD *)v485 + 2) = 0;
        *(_QWORD *)v485 = &off_1E2DBEC00;
        *((_QWORD *)v485 + 3) = &off_1E2DA1190;
        v483 = v485 + 24;
        v486 = *(_QWORD *)buf;
        *(_OWORD *)(v485 + 56) = 0u;
        *(_OWORD *)(v485 + 72) = 0u;
        *((_DWORD *)v485 + 8) = v484 >> 2;
        *((_QWORD *)v485 + 5) = v486;
        v485[48] = 0;
        v487 = *(std::__shared_weak_count **)&__str[8];
        *(_QWORD *)__str = v485 + 24;
        *(_QWORD *)&__str[8] = v485;
        if (v487)
        {
          v488 = (unint64_t *)&v487->__shared_owners_;
          do
            v489 = __ldaxr(v488);
          while (__stlxr(v489 - 1, v488));
          if (!v489)
          {
            ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
            std::__shared_weak_count::__release_weak(v487);
          }
          v483 = *(char **)__str;
          if (!*(_QWORD *)__str)
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
      }
      v490 = (int *)*((_QWORD *)v483 + 2);
      v491 = *((int *)v483 + 2);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v700, 2 * v491, 1, 1, 1);
      v492 = v700;
      v493 = *(const unsigned __int8 **)(v700 + 16);
      if ((_DWORD)v491)
      {
        v494 = *(_WORD **)(v700 + 16);
        do
        {
          v495 = *v490++;
          _S0 = v495;
          __asm { FCVT            H0, S0 }
          *v494++ = _S0;
          --v491;
        }
        while (v491);
      }
      v497 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
      if (*((_QWORD *)&v700 + 1))
      {
        v498 = (unint64_t *)(*((_QWORD *)&v700 + 1) + 8);
        do
          v499 = __ldxr(v498);
        while (__stxr(v499 + 1, v498));
        v493 = *(const unsigned __int8 **)(v492 + 16);
      }
      v500 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v493, *(int *)(v492 + 8));
      if (v497)
      {
        v501 = (unint64_t *)&v497->__shared_owners_;
        do
          v502 = __ldaxr(v501);
        while (__stlxr(v502 - 1, v501));
        if (!v502)
        {
          ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
          std::__shared_weak_count::__release_weak(v497);
        }
      }
      v503 = (void *)MEMORY[0x1E0CB37E8];
      if (v645)
        v504 = 0;
      else
      objc_msgSend(v503, "numberWithUnsignedLong:", v504);
      v505 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v475, "setObject:forKeyedSubscript:", v505, CFSTR("BiasIndex"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v500);
      v506 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v475, "setObject:forKeyedSubscript:", v506, CFSTR("BiasOffset"));

      objc_msgSend(v475, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(v409, "setObject:forKeyedSubscript:", v475, CFSTR("BiasScaleGroupData"));
      if (!a2[121])
      {
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
        v507 = v714;
        v714 = CFSTR("GOC");

        objc_storeStrong(&v715, v409);
        v508 = v677;
        if ((unint64_t)v677 >= v678)
        {
          v509 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v676, (uint64_t)&__p);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v677, (uint64_t)&__p);
          v509 = v508 + 6;
        }
        v677 = v509;

        if (v712 < 0)
          operator delete(v711);
        *(_QWORD *)&v705 = &v708;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v705);
        *(_QWORD *)&v705 = v707;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v705);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v529 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
      if (*((_QWORD *)&v700 + 1))
      {
        v530 = (unint64_t *)(*((_QWORD *)&v700 + 1) + 8);
        do
          v531 = __ldaxr(v530);
        while (__stlxr(v531 - 1, v530));
        if (!v531)
        {
          ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
          std::__shared_weak_count::__release_weak(v529);
        }
      }
      v532 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v533 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v534 = __ldaxr(v533);
        while (__stlxr(v534 - 1, v533));
        if (!v534)
        {
          ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
          std::__shared_weak_count::__release_weak(v532);
        }
      }

    }
    goto LABEL_651;
  }
  if (a2[121])
    goto LABEL_797;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 408))(&v657, a1);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(__str, (uint64_t)&v657, v646, a2[384], 0, 0.0);
  v384 = v658;
  if (v658)
  {
    v385 = (unint64_t *)&v658->__shared_owners_;
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  v387 = *(_OWORD *)__str;
  v700 = *(_OWORD *)__str;
  if (*(_QWORD *)&__str[8])
  {
    v388 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v389 = __ldxr(v388);
    while (__stxr(v389 + 1, v388));
  }
  v705 = *(_OWORD *)&__str[16];
  if (*(_QWORD *)&__str[24])
  {
    v390 = (unint64_t *)(*(_QWORD *)&__str[24] + 8);
    do
      v391 = __ldxr(v390);
    while (__stxr(v391 + 1, v390));
  }
  v392 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v656 = v387;
  if (*((_QWORD *)&v387 + 1))
  {
    v393 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
    do
      v394 = __ldxr(v393);
    while (__stxr(v394 + 1, v393));
  }
  v395 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v392, *(const unsigned __int8 **)(v387 + 16), *(int *)(v387 + 8));
  if (*((_QWORD *)&v387 + 1))
  {
    v396 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
    do
      v397 = __ldaxr(v396);
    while (__stlxr(v397 - 1, v396));
    if (!v397)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v387 + 1) + 16))(*((_QWORD *)&v387 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v387 + 1));
    }
  }
  v398 = v705;
  v655 = v705;
  if (*((_QWORD *)&v705 + 1))
  {
    v399 = (unint64_t *)(*((_QWORD *)&v705 + 1) + 8);
    do
      v400 = __ldxr(v399);
    while (__stxr(v400 + 1, v399));
  }
  v401 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v392, *(const unsigned __int8 **)(v398 + 16), *(int *)(v398 + 8));
  if (*((_QWORD *)&v398 + 1))
  {
    v402 = (unint64_t *)(*((_QWORD *)&v398 + 1) + 8);
    do
      v403 = __ldaxr(v402);
    while (__stlxr(v403 - 1, v402));
    if (!v403)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v398 + 1) + 16))(*((_QWORD *)&v398 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v398 + 1));
    }
  }
  v404 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v646);
  v405 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v404, "setObject:forKeyedSubscript:", v405, CFSTR("BiasCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v401);
  v406 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v404, "setObject:forKeyedSubscript:", v406, CFSTR("BiasOffset"));

  v407 = (void *)MEMORY[0x1E0CB37E8];
  if (v645)
    v408 = 0;
  else
  objc_msgSend(v407, "numberWithUnsignedLong:", v408);
  v410 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v404, "setObject:forKeyedSubscript:", v410, CFSTR("BiasIndex"));

  objc_msgSend(v404, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("BiasType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v646);
  v411 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v404, "setObject:forKeyedSubscript:", v411, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v395);
  v412 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v404, "setObject:forKeyedSubscript:", v412, CFSTR("ScaleOffset"));

  v413 = (void *)MEMORY[0x1E0CB37E8];
  if (v645)
    v414 = 0;
  else
  objc_msgSend(v413, "numberWithUnsignedLong:", v414);
  v415 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v404, "setObject:forKeyedSubscript:", v415, CFSTR("ScaleIndex"));

  objc_msgSend(v404, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("ScaleType"));
  v416 = (void *)objc_opt_new();
  objc_msgSend(v416, "setObject:forKeyedSubscript:", v404, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
  v417 = v714;
  v714 = CFSTR("GOC");

  objc_storeStrong(&v715, v416);
  v418 = v677;
  if ((unint64_t)v677 >= v678)
  {
    v420 = 0x8E38E38E38E38E39 * (((uint64_t)v677 - v676) >> 4);
    if (v420 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v421 = 0x1C71C71C71C71C72 * ((uint64_t)(v678 - v676) >> 4);
    if (v421 <= v420 + 1)
      v421 = v420 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v678 - v676) >> 4) >= 0xE38E38E38E38E3)
      v422 = 0x1C71C71C71C71C7;
    else
      v422 = v421;
    *((_QWORD *)&v719 + 1) = &v678;
    if (v422)
      v422 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v422);
    else
      v423 = 0;
    *(_QWORD *)buf = v422;
    *(_QWORD *)&buf[8] = v422 + 144 * v420;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v719 = v422 + 144 * v423;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v676, buf);
    v419 = v677;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v677, (uint64_t)&__p);
    v419 = v418 + 6;
  }
  v677 = v419;

  if (v712 < 0)
    operator delete(v711);
  *(_QWORD *)buf = &v708;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v707;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  v463 = (std::__shared_weak_count *)*((_QWORD *)&v705 + 1);
  if (*((_QWORD *)&v705 + 1))
  {
    v464 = (unint64_t *)(*((_QWORD *)&v705 + 1) + 8);
    do
      v465 = __ldaxr(v464);
    while (__stlxr(v465 - 1, v464));
    if (!v465)
    {
      ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
      std::__shared_weak_count::__release_weak(v463);
    }
  }
  v466 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
  if (*((_QWORD *)&v700 + 1))
  {
    v467 = (unint64_t *)(*((_QWORD *)&v700 + 1) + 8);
    do
      v468 = __ldaxr(v467);
    while (__stlxr(v468 - 1, v467));
    if (!v468)
    {
      ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
      std::__shared_weak_count::__release_weak(v466);
    }
  }
  v469 = *(std::__shared_weak_count **)&__str[24];
  if (*(_QWORD *)&__str[24])
  {
    v470 = (unint64_t *)(*(_QWORD *)&__str[24] + 8);
    do
      v471 = __ldaxr(v470);
    while (__stlxr(v471 - 1, v470));
    if (!v471)
    {
      ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
      std::__shared_weak_count::__release_weak(v469);
    }
  }
  v472 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v473 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v474 = __ldaxr(v473);
    while (__stlxr(v474 - 1, v473));
    goto LABEL_633;
  }
LABEL_651:
  v535 = *(_DWORD *)(a4 + 28);
  if (v535 == -1)
  {
LABEL_718:
    (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(a1[53] + 32))(a1 + 53, a2, &v676);
    goto LABEL_719;
  }
  if (v535 != 1)
  {
    if (v535)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    if (a2[121])
    {
      v536 = *(id *)(v676 + 128);
    }
    else
    {
      v536 = (id)objc_opt_new();

    }
    objc_msgSend(v536, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
    if (a2[121])
      goto LABEL_717;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
    v540 = v714;
    v714 = CFSTR("Neuron");

    objc_storeStrong(&v715, v536);
    v541 = v677;
    if ((unint64_t)v677 >= v678)
    {
      v543 = 0x8E38E38E38E38E39 * (((uint64_t)v677 - v676) >> 4);
      if (v543 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v544 = 0x1C71C71C71C71C72 * ((uint64_t)(v678 - v676) >> 4);
      if (v544 <= v543 + 1)
        v544 = v543 + 1;
      v545 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v678 - v676) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v544);
      *((_QWORD *)&v719 + 1) = &v678;
      if (v545)
        v545 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v545);
      else
        v546 = 0;
      *(_QWORD *)buf = v545;
      *(_QWORD *)&buf[8] = &v545[144 * v543];
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v719 = &v545[144 * v546];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v676, buf);
      v542 = v677;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v677, (uint64_t)&__p);
      v542 = v541 + 6;
    }
    v677 = v542;

    if (v712 < 0)
      operator delete(v711);
    *(_QWORD *)buf = &v708;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v707;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_717;
    v560 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_716;
  }
  if (a2[121])
  {
    v536 = *(id *)(v676 + 128);
  }
  else
  {
    v536 = (id)objc_opt_new();

  }
  objc_msgSend(v536, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"));
  if (a2[121])
    goto LABEL_717;
  v537 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>(v537 + 472, (uint64_t)&__p, (uint64_t)buf, (std::string *)__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((__str[23] & 0x80000000) != 0)
  {
    if (*(_QWORD *)&__str[8] != 1)
      goto LABEL_682;
    v539 = *(_BYTE **)__str;
  }
  else
  {
    if (__str[23] != 1)
      goto LABEL_682;
    v539 = __str;
  }
  if (*v539 == 48)
  {
LABEL_688:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
    v552 = v714;
    v714 = CFSTR("Neuron");

    objc_storeStrong(&v715, v536);
    v553 = v677;
    if ((unint64_t)v677 >= v678)
    {
      v556 = 0x8E38E38E38E38E39 * (((uint64_t)v677 - v676) >> 4);
      if (v556 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v557 = 0x1C71C71C71C71C72 * ((uint64_t)(v678 - v676) >> 4);
      if (v557 <= v556 + 1)
        v557 = v556 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v678 - v676) >> 4) >= 0xE38E38E38E38E3)
        v558 = 0x1C71C71C71C71C7;
      else
        v558 = v557;
      *((_QWORD *)&v719 + 1) = &v678;
      if (v558)
        v558 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v558);
      else
        v559 = 0;
      *(_QWORD *)buf = v558;
      *(_QWORD *)&buf[8] = v558 + 144 * v556;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v719 = v558 + 144 * v559;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v676, buf);
      v554 = v677;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v677, (uint64_t)&__p);
      v554 = v553 + 6;
    }
    v677 = v554;

    if (v712 < 0)
      operator delete(v711);
    *(_QWORD *)buf = &v708;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v707;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((__str[23] & 0x80000000) == 0)
      goto LABEL_717;
    v560 = *(void **)__str;
LABEL_716:
    operator delete(v560);
LABEL_717:

    goto LABEL_718;
  }
LABEL_682:
  if (!Espresso::ANECompilerEngine::is_mix(v640, v538))
    goto LABEL_688;
  v547 = v677;
  v548 = v677 - 6;
  std::string::append(v677 - 6, "_pre_tanh");
  v549 = a1 + 53;
  (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(a1[53] + 32))(a1 + 53, a2, &v676);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&__p, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v550 = v708;
  for (m = v709; m != v550; --m)
  {
    if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(m[-1].__r_.__value_.__l.__data_);
  }
  v709 = v550;
  if ((unint64_t)v550 >= v710)
  {
    v561 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v708, (uint64_t)v548);
  }
  else
  {
    if (SHIBYTE(v547[-6].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v550, v547[-6].__r_.__value_.__l.__data_, v547[-6].__r_.__value_.__l.__size_);
    }
    else
    {
      v555 = *(_OWORD *)&v548->__r_.__value_.__l.__data_;
      v550->__r_.__value_.__r.__words[2] = v548->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v550->__r_.__value_.__l.__data_ = v555;
    }
    v561 = v550 + 1;
  }
  v709 = v561;
  (*(void (**)(_QWORD *, _BYTE *, std::string *))(*v549 + 48))(v549, a2, &__p);

  if (v712 < 0)
    operator delete(v711);
  *(_QWORD *)buf = &v708;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v707;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);

LABEL_719:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v676;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  v562 = (std::__shared_weak_count *)*((_QWORD *)&v690 + 1);
  if (*((_QWORD *)&v690 + 1))
  {
    v563 = (unint64_t *)(*((_QWORD *)&v690 + 1) + 8);
    do
      v564 = __ldaxr(v563);
    while (__stlxr(v564 - 1, v563));
    if (!v564)
    {
      ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
      std::__shared_weak_count::__release_weak(v562);
    }
  }
  v565 = (std::__shared_weak_count *)*((_QWORD *)&v689 + 1);
  if (*((_QWORD *)&v689 + 1))
  {
    v566 = (unint64_t *)(*((_QWORD *)&v689 + 1) + 8);
    do
      v567 = __ldaxr(v566);
    while (__stlxr(v567 - 1, v566));
    if (!v567)
    {
      ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
      std::__shared_weak_count::__release_weak(v565);
    }
  }
  v568 = (std::__shared_weak_count *)*((_QWORD *)&v688 + 1);
  if (*((_QWORD *)&v688 + 1))
  {
    v569 = (unint64_t *)(*((_QWORD *)&v688 + 1) + 8);
    do
      v570 = __ldaxr(v569);
    while (__stlxr(v570 - 1, v569));
    if (!v570)
    {
      ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
      std::__shared_weak_count::__release_weak(v568);
    }
  }
  v571 = (std::__shared_weak_count *)*((_QWORD *)&v687 + 1);
  if (*((_QWORD *)&v687 + 1))
  {
    v572 = (unint64_t *)(*((_QWORD *)&v687 + 1) + 8);
    do
      v573 = __ldaxr(v572);
    while (__stlxr(v573 - 1, v572));
    if (!v573)
    {
      ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
      std::__shared_weak_count::__release_weak(v571);
    }
  }
  v574 = (std::__shared_weak_count *)*((_QWORD *)&v686 + 1);
  if (*((_QWORD *)&v686 + 1))
  {
    v575 = (unint64_t *)(*((_QWORD *)&v686 + 1) + 8);
    do
      v576 = __ldaxr(v575);
    while (__stlxr(v576 - 1, v575));
    if (!v576)
    {
      ((void (*)(std::__shared_weak_count *))v574->__on_zero_shared)(v574);
      std::__shared_weak_count::__release_weak(v574);
    }
  }
  v577 = (std::__shared_weak_count *)*((_QWORD *)&v685 + 1);
  if (*((_QWORD *)&v685 + 1))
  {
    v578 = (unint64_t *)(*((_QWORD *)&v685 + 1) + 8);
    do
      v579 = __ldaxr(v578);
    while (__stlxr(v579 - 1, v578));
    if (!v579)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
  }
  v580 = (std::__shared_weak_count *)*((_QWORD *)&v684 + 1);
  if (*((_QWORD *)&v684 + 1))
  {
    v581 = (unint64_t *)(*((_QWORD *)&v684 + 1) + 8);
    do
      v582 = __ldaxr(v581);
    while (__stlxr(v582 - 1, v581));
    if (!v582)
    {
      ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
      std::__shared_weak_count::__release_weak(v580);
    }
  }
  v583 = (std::__shared_weak_count *)*((_QWORD *)&v683 + 1);
  if (*((_QWORD *)&v683 + 1))
  {
    v584 = (unint64_t *)(*((_QWORD *)&v683 + 1) + 8);
    do
      v585 = __ldaxr(v584);
    while (__stlxr(v585 - 1, v584));
    if (!v585)
    {
      ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
      std::__shared_weak_count::__release_weak(v583);
    }
  }
  v586 = (std::__shared_weak_count *)*((_QWORD *)&v682 + 1);
  if (*((_QWORD *)&v682 + 1))
  {
    v587 = (unint64_t *)(*((_QWORD *)&v682 + 1) + 8);
    do
      v588 = __ldaxr(v587);
    while (__stlxr(v588 - 1, v587));
    if (!v588)
    {
      ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
      std::__shared_weak_count::__release_weak(v586);
    }
  }
  v589 = (std::__shared_weak_count *)*((_QWORD *)&v681 + 1);
  if (*((_QWORD *)&v681 + 1))
  {
    v590 = (unint64_t *)(*((_QWORD *)&v681 + 1) + 8);
    do
      v591 = __ldaxr(v590);
    while (__stlxr(v591 - 1, v590));
    if (!v591)
    {
      ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
      std::__shared_weak_count::__release_weak(v589);
    }
  }
  v592 = (std::__shared_weak_count *)*((_QWORD *)&v680 + 1);
  if (*((_QWORD *)&v680 + 1))
  {
    v593 = (unint64_t *)(*((_QWORD *)&v680 + 1) + 8);
    do
      v594 = __ldaxr(v593);
    while (__stlxr(v594 - 1, v593));
    if (!v594)
    {
      ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
      std::__shared_weak_count::__release_weak(v592);
    }
  }
  v595 = (std::__shared_weak_count *)*((_QWORD *)&v679 + 1);
  if (*((_QWORD *)&v679 + 1))
  {
    v596 = (unint64_t *)(*((_QWORD *)&v679 + 1) + 8);
    do
      v597 = __ldaxr(v596);
    while (__stlxr(v597 - 1, v596));
    if (!v597)
    {
      ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
      std::__shared_weak_count::__release_weak(v595);
    }
  }
}

void sub_191787FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  STACK[0x278] = (unint64_t)&a60;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x278]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&a63);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5(uint64_t a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  _OWORD v28[3];
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[40];
  _BYTE v37[20];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x14uLL);
  v5 = v4;
  v6 = 0;
  *((_DWORD *)v4 + 4) = 4;
  *(_OWORD *)v4 = xmmword_191AC09C0;
  v7 = *a2;
  do
  {
    *(_DWORD *)&v37[v6] = *(_DWORD *)(v7 + 4 * *(int *)&v4[v6] + 8);
    v6 += 4;
  }
  while (v6 != 20);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int const*&,void>(&v27, (uint64_t)v37);
  v8 = 0;
  *(_QWORD *)&v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v9 = 1;
  do
  {
    *((_QWORD *)&v33 + v8) = (int)v9;
    v9 *= *(int *)(v7 + 8 + 4 * v8++);
  }
  while (v8 != 5);
  v10 = 0;
  *((_QWORD *)&v35 + 1) = v9;
  *(_QWORD *)&v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v11 = v27;
  v12 = v27 + 8;
  v13 = 1;
  do
  {
    *((_QWORD *)&v30 + v10) = (int)v13;
    v13 *= *(int *)(v12 + 4 * v10++);
  }
  while (v10 != 5);
  v14 = 0;
  *((_QWORD *)&v32 + 1) = v13;
  v15 = *(int *)(v7 + 8);
  while (1)
  {
    v16 = 0;
    v17 = v15;
    do
    {
      v17 *= *(int *)(v7 + 12 + v16);
      v16 += 4;
    }
    while (v16 != 16);
    if (v17 <= v14)
      break;
    v29[0] = v33;
    v29[1] = v34;
    v29[2] = v35;
    v18 = 4;
    LODWORD(v19) = v14;
    do
    {
      v20 = *((_QWORD *)v29 + v18);
      *(_DWORD *)&v36[4 * v18 + 20] = (int)v19 / v20;
      v19 = (int)v19 % v20;
      --v18;
    }
    while (v18 != -1);
    for (i = 0; i != 20; i += 4)
      *(_DWORD *)&v36[i] = *(_DWORD *)&v36[4 * *(int *)&v5[i] + 20];
    v22 = 0;
    v23 = 0;
    v28[0] = v30;
    v28[1] = v31;
    v28[2] = v32;
    do
    {
      v23 += *((_QWORD *)v28 + v22) * *(int *)&v36[4 * v22];
      ++v22;
    }
    while (v22 != 5);
    *(_DWORD *)(*(_QWORD *)(v11 + 32) + 4 * v23) = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 4 * v14++);
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, &v27);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 112), *a2, a2[1]);
  operator delete(v5);
}

void sub_191788B78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<float,5>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  int32x4_t v8;
  int8x16_t v9;
  int v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  Espresso *v16;
  const char *v17;
  NSObject *v18;
  Espresso *v19;
  const char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  int v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;
  void *__src;
  _BYTE *v34;
  uint64_t v35;
  __int128 buf;
  double v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  __src = 0;
  v34 = 0;
  v35 = 0;
  v31 = 0;
  v32 = 0;
  __p = 0;
  v8.i32[1] = 1;
  v8.i64[1] = 0x100000001;
  v8.i32[0] = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v9 = (int8x16_t)vmulq_s32(*(int32x4_t *)(*(_QWORD *)a1 + 12), v8);
  *(int32x2_t *)v9.i8 = vmul_s32(*(int32x2_t *)v9.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  v10 = v9.i32[0] * v9.i32[1];
  Espresso::compress_sparse_kernel<float>(*(float **)(*(_QWORD *)a1 + 32), v9.i32[0] * v9.i32[1], &__p, &__src);
  v12 = __src;
  v11 = v34;
  v13 = v34 - (_BYTE *)__src;
  v14 = (v34 - (_BYTE *)__src) >> 2;
  v15 = 1.0 - (float)((float)(unint64_t)v14 / (float)v10);
  Espresso::espresso_os_log_subsystem(v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    if (*(_QWORD *)a1)
      v29 = v10;
    else
      v29 = 0;
    LODWORD(buf) = 67109632;
    DWORD1(buf) = v13 >> 2;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v29;
    HIWORD(buf) = 2048;
    v37 = v15;
    _os_log_debug_impl(&dword_190DAF000, v18, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", (uint8_t *)&buf, 0x18u);
  }

  if (v15 < a4)
    goto LABEL_18;
  if (v11 == v12)
  {
    Espresso::espresso_os_log_subsystem(v19, v20);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_190DAF000, v27, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", (uint8_t *)&buf, 2u);
    }

LABEL_18:
    v14 = 0;
    goto LABEL_19;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, v13 & 0xFFFFFFFC, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a2, &buf);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a2 + 16), __src, *(int *)(*(_QWORD *)a2 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, (_DWORD)v31 - (_DWORD)__p, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &buf);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a3 + 16), __p, v31 - (_BYTE *)__p);
LABEL_19:
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    v34 = __src;
    operator delete(__src);
  }
  return v14;
}

void sub_191788E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void Espresso::compress_dilated_conv_sparse_kernel_mask<float>(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;

  v5 = *(__int16 *)(a3 + 70);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(__int16 *)(a3 + 70);
  if (v5 > 1)
    v7 = (*(_DWORD *)(a3 + 16) - 1) * v5 + 1;
  else
    v7 = *(_DWORD *)(a3 + 16);
  v8 = *(__int16 *)(a3 + 72);
  if (v8 > 1)
    v9 = (*(_DWORD *)(a3 + 20) - 1) * v8 + 1;
  else
    v9 = *(_DWORD *)(a3 + 20);
  v10 = *(__int16 *)(a3 + 74);
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = *(__int16 *)(a3 + 74);
  if (v10 > 1)
    v12 = (*(_DWORD *)(a3 + 24) - 1) * v10 + 1;
  else
    v12 = *(_DWORD *)(a3 + 24);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a1, ((a2[6] * a2[5] * v9 * v12 * v7 - 1) >> 3) + 1, 1, 1, 1);
  v13 = a2[6] * a2[5];
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = a2[2];
    v17 = a2[3];
    v18 = a2[4];
    if (v8 <= 1)
      v19 = 1;
    else
      v19 = v8;
    v20 = v12 * v7 * v19;
    do
    {
      if (v18 >= 1)
      {
        v21 = 0;
        v22 = v14;
        do
        {
          if (v17 >= 1)
          {
            v23 = 0;
            v24 = v22;
            do
            {
              if (v16 >= 1)
              {
                v25 = *a1;
                v26 = v24;
                v27 = v16;
                do
                {
                  *(_BYTE *)(*(_QWORD *)(v25 + 16) + ((unint64_t)v26 >> 3)) |= 1 << (v26 & 7);
                  v26 += v11;
                  --v27;
                }
                while (v27);
              }
              ++v23;
              v24 += v12 * v6;
            }
            while (v23 != v17);
          }
          ++v21;
          v22 += v20;
        }
        while (v21 != v18);
      }
      ++v15;
      v14 += v9 * v7 * v12;
    }
    while (v15 != v13);
  }
}

void Espresso::dilated_conv_bloated_weights<float>(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, __int16 *a6)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(a1, a3, a4, a5, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24));
  if (a6[36] <= 1)
    v9 = 1;
  else
    v9 = a6[36];
  if (a6[37] <= 1)
    v10 = 1;
  else
    v10 = a6[37];
  v11 = *(_DWORD *)(a2 + 24) * *(_DWORD *)(a2 + 20);
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = *a1;
    v16 = *(_DWORD *)(*a1 + 8);
    v17 = *(_DWORD *)(*a1 + 12) * v16;
    v18 = v17 * *(_DWORD *)(*a1 + 16);
    v19 = v17 * v10;
    v20 = v16 * v9;
    v22 = *(_DWORD *)(a2 + 12);
    v21 = *(_DWORD *)(a2 + 16);
    v23 = *(unsigned int *)(a2 + 8);
    v24 = a6[35];
    if (v24 <= 1)
      v24 = 1;
    do
    {
      if (v21 >= 1)
      {
        v25 = 0;
        v26 = v12;
        do
        {
          if (v22 >= 1)
          {
            v27 = 0;
            v28 = v26;
            do
            {
              if ((int)v23 >= 1)
              {
                v29 = *(_QWORD *)(a2 + 32);
                v30 = *(_QWORD *)(v15 + 32);
                v31 = v14;
                v32 = v28;
                v33 = v23;
                do
                {
                  v34 = *(_DWORD *)(v29 + 4 * v31++);
                  *(_DWORD *)(v30 + 4 * v32) = v34;
                  v32 += v24;
                  --v33;
                }
                while (v33);
                v14 = v31;
              }
              ++v27;
              v28 += v20;
            }
            while (v27 != v22);
          }
          ++v25;
          v26 += v19;
        }
        while (v25 != v21);
      }
      ++v13;
      v12 += v18;
    }
    while (v13 != v11);
  }
}

std::__shared_weak_count *mix_is_valid_for_engine_conv(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  const Espresso::net *v13;
  std::__shared_weak_count *v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  const Espresso::net *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int is_valid_for_engine_conv_single_dimension;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  double v78;
  BOOL v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  int v90;
  char v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::string *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  int v102;
  char v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  std::__shared_weak_count *v120;
  unint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  BOOL v128;
  int v129;
  char v130;
  BOOL v131;
  unsigned __int8 v132;
  int v133;
  char v134;
  int v135;
  char v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::string *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::string *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  int v168;
  signed int v169;
  int v170;
  signed int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::string *v187;
  __int128 v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  std::string *v193;
  std::string::size_type size;
  std::string *v195;
  __int128 v196;
  std::string *v197;
  __int128 v198;
  std::string *v199;
  std::string::size_type v200;
  std::string *v201;
  __int128 v202;
  std::string *v203;
  __int128 v204;
  std::string *v205;
  std::string::size_type v206;
  std::string *v207;
  __int128 v208;
  std::string *v209;
  __int128 v210;
  std::string *v211;
  std::string::size_type v212;
  std::string *v213;
  __int128 v214;
  std::string *v215;
  __int128 v216;
  std::string *v217;
  std::string::size_type v218;
  std::string *v219;
  __int128 v220;
  std::string *v221;
  __int128 v222;
  std::string *v223;
  std::string::size_type v224;
  std::string *v225;
  __int128 v226;
  std::string *v227;
  __int128 v228;
  std::string *v229;
  std::string::size_type v230;
  std::string *v231;
  __int128 v232;
  std::string *v233;
  __int128 v234;
  std::string *v235;
  std::string::size_type v236;
  std::string *v237;
  __int128 v238;
  std::string *v239;
  __int128 v240;
  std::string *v241;
  std::string::size_type v242;
  std::string *v243;
  __int128 v244;
  std::string *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  char v252;
  int v253;
  int v254;
  int v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::string *v259;
  __int128 v260;
  std::string *v261;
  __int128 v262;
  std::string *v263;
  std::string::size_type v264;
  std::string *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t *v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  int v283;
  int v284;
  char v285;
  int v286;
  int __val;
  int64x2_t *v289;
  std::__shared_weak_count *v290;
  int64x2_t *v291;
  std::__shared_weak_count *v292;
  std::string v293;
  std::string v294;
  std::string v295;
  std::string v296;
  std::string v297;
  std::string v298;
  std::string v299;
  std::string v300;
  std::string v301;
  std::string v302;
  std::string v303;
  std::string v304;
  std::string v305;
  std::string v306;
  std::string v307;
  std::string v308;
  std::string v309;
  std::string v310;
  std::string v311;
  std::string v312;
  std::string v313;
  std::string v314;
  std::string v315;
  std::string v316;
  std::string v317;
  std::string v318;
  std::string v319;
  std::string v320;
  std::string v321;
  int64x2_t *v322;
  std::__shared_weak_count *v323;
  int64x2_t *v324;
  std::__shared_weak_count *v325;
  int64x2_t *v326;
  std::__shared_weak_count *v327;
  int64x2_t *v328;
  std::__shared_weak_count *v329;
  std::string v330;
  std::string v331;
  int64x2_t *v332;
  std::__shared_weak_count *v333;
  _QWORD v334[2];
  void *v335[2];
  char v336;
  _QWORD v337[2];
  void *v338[2];
  char v339;
  _QWORD v340[2];
  void *v341[2];
  char v342;
  _OWORD v343[2];
  uint64_t v344;
  void *v345;
  void *v346;
  uint64_t v347;
  const Espresso::net *v348;
  std::__shared_weak_count *v349;
  void **v350;
  int v351;
  int v352;
  int v353;
  _OWORD v354[2];
  uint64_t v355;
  void *__p;
  void *v357;
  uint64_t v358;
  const Espresso::net *v359;
  std::__shared_weak_count *v360;
  __int128 v361;
  int v362;
  char v363;
  std::string v364;
  _BYTE v365[24];
  _BYTE v366[32];
  std::__shared_weak_count *v367;
  int64x2_t *v368;
  std::__shared_weak_count *v369;
  const Espresso::net *v370;
  std::__shared_weak_count *v371;
  void **v372[2];

  v5 = *(__int16 *)(a1 + 70);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v8 = *(__int16 *)(a1 + 72);
  v9 = *(_DWORD *)(a1 + 24);
  v10 = *(__int16 *)(a1 + 74);
  v11 = a2[6];
  v12 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v11 + 80));
  v13 = *(const Espresso::net **)(v11 + 72);
  v370 = v13;
  v371 = v12;
  if (!*((_BYTE *)v13 + 1281))
  {
    v80 = *(std::__shared_weak_count **)(a3 + 8);
    v368 = *(int64x2_t **)a3;
    v369 = v80;
    if (v80)
    {
      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldxr(p_shared_owners);
      while (__stxr(v82 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v361, "Cannot dispatch conv3D to ANE: no 3D operation detected in the network.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v364, &v361, (uint64_t)a2, 1);
    Espresso::emit_kernel_validation_warning(&v368, (Espresso::base_kernel::validate_for_engine_warning_t *)&v364);
    v83 = v367;
    if (v367)
    {
      v84 = (unint64_t *)&v367->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v350 = (void **)v366;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v350);
    v350 = (void **)v365;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v350);
    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v364.__r_.__value_.__l.__data_);
    if (v363 < 0)
      operator delete((void *)v361);
    v86 = v369;
    if (v369)
    {
      v87 = (unint64_t *)&v369->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    goto LABEL_417;
  }
  v14 = v12;
  v286 = (v6 - 1) * v5;
  v15 = v286 + 1;
  v284 = (v7 - 1) * v8;
  v16 = v284 + 1;
  v283 = (v9 - 1) * v10;
  __val = v283 + 1;
  v359 = v13;
  v360 = v12;
  v17 = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v19 = a2;
  v20 = *a2;
  v21 = *(_QWORD *)(*a2 + 32);
  v22 = *(_OWORD *)(*a2 + 16);
  v354[0] = *(_OWORD *)*a2;
  v354[1] = v22;
  v355 = v21;
  __p = 0;
  v358 = 0;
  v357 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v20 + 40), *(_QWORD *)(v20 + 48), (uint64_t)(*(_QWORD *)(v20 + 48) - *(_QWORD *)(v20 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v361, v13, (const Espresso::layer_shape *)v354, 1);
  if (__p)
  {
    v357 = __p;
    operator delete(__p);
  }
  do
    v23 = __ldaxr(v17);
  while (__stlxr(v23 - 1, v17));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v25 = v370;
  v24 = v371;
  v348 = v370;
  v349 = v371;
  if (v371)
  {
    v26 = (unint64_t *)&v371->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = a2[3];
  v29 = *(_QWORD *)(v28 + 32);
  v30 = *(_OWORD *)(v28 + 16);
  v343[0] = *(_OWORD *)v28;
  v343[1] = v30;
  v344 = v29;
  v345 = 0;
  v347 = 0;
  v346 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v345, *(const void **)(v28 + 40), *(_QWORD *)(v28 + 48), (uint64_t)(*(_QWORD *)(v28 + 48) - *(_QWORD *)(v28 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v350, v25, (const Espresso::layer_shape *)v343, 1);
  if (v345)
  {
    v346 = v345;
    operator delete(v345);
  }
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v341, "W");
  v33 = *(__int16 *)(a1 + 64);
  v34 = *(_DWORD *)(a1 + 12);
  v35 = *(_DWORD *)(a1 + 80);
  v36 = v362;
  v37 = *(__int16 *)(a1 + 54);
  v38 = *(__int16 *)(a1 + 52);
  v39 = v353;
  v40 = v352;
  v41 = *(std::__shared_weak_count **)(a3 + 8);
  v340[0] = *(_QWORD *)a3;
  v340[1] = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  is_valid_for_engine_conv_single_dimension = mix_is_valid_for_engine_conv_single_dimension((unsigned __int8 **)v341, v15, v33, v34, v35, v36, v39, v37, v38, v39, v40, a2, (uint64_t)v340);
  if (v41)
  {
    v45 = (unint64_t *)&v41->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v342 < 0)
    operator delete(v341[0]);
  std::string::basic_string[abi:ne180100]<0>(v338, "H");
  v47 = *(__int16 *)(a1 + 66);
  v48 = *(_DWORD *)(a1 + 12);
  v49 = *(_DWORD *)(a1 + 80);
  v50 = HIDWORD(v361);
  v51 = *(__int16 *)(a1 + 58);
  v52 = *(__int16 *)(a1 + 56);
  v53 = v352;
  v54 = v353;
  v55 = *(std::__shared_weak_count **)(a3 + 8);
  v337[0] = *(_QWORD *)a3;
  v337[1] = v55;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = mix_is_valid_for_engine_conv_single_dimension((unsigned __int8 **)v338, v16, v47, v48, v49, v50, v53, v51, v52, v54, v53, a2, (uint64_t)v337);
  if (v55)
  {
    v59 = (unint64_t *)&v55->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v339 < 0)
    operator delete(v338[0]);
  std::string::basic_string[abi:ne180100]<0>(v335, "D");
  v61 = *(__int16 *)(a1 + 68);
  v62 = *(_DWORD *)(a1 + 12);
  v63 = *(_DWORD *)(a1 + 80);
  v64 = DWORD2(v361);
  v65 = *(__int16 *)(a1 + 62);
  v66 = *(__int16 *)(a1 + 60);
  v67 = v353;
  v68 = v351;
  v69 = v352;
  v70 = *(std::__shared_weak_count **)(a3 + 8);
  v334[0] = *(_QWORD *)a3;
  v334[1] = v70;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = mix_is_valid_for_engine_conv_single_dimension((unsigned __int8 **)v335, __val, v61, v62, v63, v64, v68, v65, v66, v67, v69, a2, (uint64_t)v334);
  if (v70)
  {
    v74 = (unint64_t *)&v70->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v336 < 0)
    operator delete(v335[0]);
  if (*a2 == a2[1])
  {
    v79 = 0;
  }
  else
  {
    v76 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)*a2);
    v77 = *(_DWORD *)(a1 + 80);
    if (v77 <= 1)
      v77 = 1;
    v78 = (double)v15 * (double)(*(_DWORD *)(a1 + 12) / v77) * (double)v16 * (double)__val * (double)v76;
    *(float *)&v78 = (v78 + v78) * 0.000000001;
    v79 = *(float *)&v78 < 0.004;
  }
  v89 = *((_DWORD *)a2 + 16);
  v285 = v79;
  if (v89 == 4 || v89 == 2)
  {
    v102 = *(_DWORD *)(a1 + 8);
    v103 = (v102 & 0xF) == 0 || v79;
    if ((v103 & 1) != 0)
      goto LABEL_120;
    v104 = *(std::__shared_weak_count **)(a3 + 8);
    v328 = *(int64x2_t **)a3;
    v329 = v104;
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
      v102 = *(_DWORD *)(a1 + 8);
    }
    std::to_string(&v330, v102);
    v107 = std::string::insert(&v330, 0, "HW utilization loss: Number of channels should be multiple of 16 for best performance. Instead: oc/groups= ");
    v331 = *v107;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v364, (__int128 *)&v331, (uint64_t)a2, 1);
    Espresso::emit_kernel_validation_warning(&v328, (Espresso::base_kernel::validate_for_engine_warning_t *)&v364);
    v108 = v367;
    if (v367)
    {
      v109 = (unint64_t *)&v367->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v364.__r_.__value_.__l.__data_);
    v19 = a2;
    if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v331.__r_.__value_.__l.__data_);
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v330.__r_.__value_.__l.__data_);
    v99 = v329;
    if (!v329)
      goto LABEL_120;
    v111 = (unint64_t *)&v329->__shared_owners_;
    do
      v101 = __ldaxr(v111);
    while (__stlxr(v101 - 1, v111));
  }
  else
  {
    if (v89 != 1)
      goto LABEL_120;
    v90 = *(_DWORD *)(a1 + 8);
    v91 = v79;
    if ((v90 & 0x1F) == 0)
      v91 = 1;
    if ((v91 & 1) != 0)
      goto LABEL_120;
    v92 = *(std::__shared_weak_count **)(a3 + 8);
    v332 = *(int64x2_t **)a3;
    v333 = v92;
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
      v90 = *(_DWORD *)(a1 + 8);
    }
    std::to_string(&v330, v90);
    v95 = std::string::insert(&v330, 0, "HW utilization loss: Number of channels should be multiple of 32 for best performance. Instead: oc/groups= ");
    v331 = *v95;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v364, (__int128 *)&v331, (uint64_t)a2, 1);
    Espresso::emit_kernel_validation_warning(&v332, (Espresso::base_kernel::validate_for_engine_warning_t *)&v364);
    v96 = v367;
    if (v367)
    {
      v97 = (unint64_t *)&v367->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v364.__r_.__value_.__l.__data_);
    v19 = a2;
    if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v331.__r_.__value_.__l.__data_);
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v330.__r_.__value_.__l.__data_);
    v99 = v333;
    if (!v333)
      goto LABEL_120;
    v100 = (unint64_t *)&v333->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
  }
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
  }
LABEL_120:
  v112 = v73 & v58;
  v113 = *(_DWORD *)(a1 + 80);
  if (v113 <= 1)
    v113 = 1;
  v114 = (*(_DWORD *)(a1 + 12) - 1) / v113 + 1;
  v115 = v16 * v15 * __val * v114;
  v116 = *(std::__shared_weak_count **)(a3 + 8);
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
    v119 = *(_DWORD *)(a1 + 80);
    if (v119 <= 1)
      v119 = 1;
    v114 = (*(_DWORD *)(a1 + 12) - 1) / v119 + 1;
  }
  v120 = (std::__shared_weak_count *)(v112 & is_valid_for_engine_conv_single_dimension);
  v121 = v115;
  v122 = *((_DWORD *)v19 + 16);
  v123 = (*(_DWORD *)(a1 + 16) - 1) * *(__int16 *)(a1 + 70);
  v124 = (*(_DWORD *)(a1 + 20) - 1) * *(__int16 *)(a1 + 72);
  v125 = (*(_DWORD *)(a1 + 24) - 1) * *(__int16 *)(a1 + 74);
  v126 = *(__int16 *)(a1 + 68);
  if (v125 <= 7)
  {
    v127 = 1;
  }
  else
  {
    v126 = 2;
    v127 = 2;
  }
  v128 = v122 >= 2;
  if (v122 >= 2)
    v129 = 15;
  else
    v129 = 7;
  if (v128)
    v130 = 3;
  else
    v130 = 4;
  v131 = v123 < v129;
  v132 = v123 >= v129;
  v133 = *(__int16 *)(a1 + 64);
  if (v131)
  {
    v134 = 1;
  }
  else
  {
    v133 = 2;
    v134 = 2;
  }
  if ((v132 & ((((_BYTE)v123 + 1) & 1) == 0)) != 0)
    v135 = v123 + 2;
  else
    v135 = v123 + 1;
  v136 = v124 > 14;
  if (v124 <= 14)
    v137 = *(__int16 *)(a1 + 66);
  else
    v137 = 2;
  if (v124 > 14)
    ++v134;
  if (v124 > 14 && (((_BYTE)v124 + 1) & 1) == 0)
    v138 = v124 + 2;
  else
    v138 = v124 + 1;
  v139 = v125 + 2;
  if (v125 <= 7 || (((_BYTE)v125 + 1) & 1) != 0)
    v139 = v125 + 1;
  v140 = ((((v138 % v137 + v138) * (v135 % v133 + v135) * (v139 % v126 + v139)) << v132 << v136 << (v125 > 7)) * v114) << v130;
  v141 = v140 + 7;
  v131 = v140 < -7;
  v142 = v140 + 14;
  if (!v131)
    v142 = v141;
  v143 = (v127 << v134) + (v142 >> 3) + 2;
  v144 = v143 & 0x1F;
  if (v143 <= 0)
    v144 = -(-v143 & 0x1F);
  if (v144)
    v145 = v143 - v144 + 32;
  else
    v145 = v143;
  if (v116)
  {
    v146 = (unint64_t *)&v116->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v131 = v145 <= 0x10000;
  v148 = (uint64_t)a2;
  if (!v131)
  {
    v149 = *(std::__shared_weak_count **)(a3 + 8);
    v326 = *(int64x2_t **)a3;
    v327 = v149;
    if (v149)
    {
      v150 = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldxr(v150);
      while (__stxr(v151 + 1, v150));
    }
    std::to_string(&v330, v121);
    v152 = std::string::insert(&v330, 0, "At least one output channel should fit in HW kernel memory. Roughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
    v331 = *v152;
    v152->__r_.__value_.__l.__size_ = 0;
    v152->__r_.__value_.__r.__words[2] = 0;
    v152->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v364, (__int128 *)&v331, (uint64_t)a2, 0);
    Espresso::emit_kernel_validation_warning(&v326, (Espresso::base_kernel::validate_for_engine_warning_t *)&v364);
    v153 = v367;
    if (v367)
    {
      v154 = (unint64_t *)&v367->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v364.__r_.__value_.__l.__data_);
    v148 = (uint64_t)a2;
    if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v331.__r_.__value_.__l.__data_);
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v330.__r_.__value_.__l.__data_);
    v120 = v327;
    if (v327)
    {
      v156 = (unint64_t *)&v327->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
      v120 = 0;
    }
  }
  v158 = 0x10000;
  if (*(_DWORD *)(v148 + 64) < 2u)
    v158 = 0x8000;
  if (v158 <= v121)
  {
    v159 = *(std::__shared_weak_count **)(a3 + 8);
    v324 = *(int64x2_t **)a3;
    v325 = v159;
    if (v159)
    {
      v160 = (unint64_t *)&v159->__shared_owners_;
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 1, v160));
    }
    std::to_string(&v330, v121);
    v162 = std::string::insert(&v330, 0, "At least one output channel should fit in HW kernel memory. Roughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
    v331 = *v162;
    v162->__r_.__value_.__l.__size_ = 0;
    v162->__r_.__value_.__r.__words[2] = 0;
    v162->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v364, (__int128 *)&v331, v148, 0);
    Espresso::emit_kernel_validation_warning(&v324, (Espresso::base_kernel::validate_for_engine_warning_t *)&v364);
    v163 = v367;
    if (v367)
    {
      v164 = (unint64_t *)&v367->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v364.__r_.__value_.__l.__data_);
    v148 = (uint64_t)a2;
    if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v331.__r_.__value_.__l.__data_);
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v330.__r_.__value_.__l.__data_);
    v120 = v325;
    if (v325)
    {
      v166 = (unint64_t *)&v325->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
      v120 = 0;
    }
  }
  v168 = *(__int16 *)(a1 + 52);
  v169 = *(__int16 *)(a1 + 54);
  v170 = *(__int16 *)(a1 + 56);
  v171 = *(__int16 *)(a1 + 58);
  v172 = *(__int16 *)(a1 + 62);
  v173 = *(__int16 *)(a1 + 60);
  if (*(_QWORD *)v148 != *(_QWORD *)(v148 + 8) && *(_QWORD *)(v148 + 24) != *(_QWORD *)(v148 + 32))
  {
    v174 = *(__int16 *)(a1 + 44);
    switch(v174)
    {
      case 4:
        goto LABEL_214;
      case 2:
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v171 = 0;
        v172 = 0;
        v173 = 0;
        break;
      case 1:
LABEL_214:
        v175 = v16 + (v352 - 1) * *(__int16 *)(a1 + 66) - HIDWORD(v361);
        v176 = v15 + (v353 - 1) * *(__int16 *)(a1 + 64) - v362;
        v177 = v175 & ~(v175 >> 31);
        v178 = v176 & ~(v176 >> 31);
        v179 = __val + (v351 - 1) * *(__int16 *)(a1 + 68) - DWORD2(v361);
        v180 = v179 & ~(v179 >> 31);
        v181 = v178 - (v178 >> 1);
        v169 = v178 >> 1;
        v171 = v177 >> 1;
        v182 = v177 - (v177 >> 1);
        v183 = v180 >> 1;
        v173 = v180 - (v180 >> 1);
        if (*(_WORD *)(a1 + 44) == 1)
        {
          v168 = v169;
          v169 = v181;
          v170 = v171;
          v171 = v182;
          v172 = v173;
          v173 = v183;
        }
        else
        {
          v168 = v181;
          v170 = v182;
          v172 = v183;
        }
        break;
    }
  }
  if (v168 >= v286 + 33
    || v169 >= v286 + 33
    || v170 >= v284 + 33
    || v171 >= v284 + 33
    || v172 >= v283 + 33
    || (v169 | v168 | v170 | v171 | v172 | v173) < 0
    || v173 >= v283 + 33)
  {
    v184 = *(std::__shared_weak_count **)(a3 + 8);
    v322 = *(int64x2_t **)a3;
    v323 = v184;
    if (v184)
    {
      v185 = (unint64_t *)&v184->__shared_owners_;
      do
        v186 = __ldxr(v185);
      while (__stxr(v186 + 1, v185));
    }
    std::to_string(&v302, 32);
    v187 = std::string::insert(&v302, 0, "Padding size at left, right, top, bottom should all < (kernel_size + ");
    v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
    v303.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v303.__r_.__value_.__l.__data_ = v188;
    v187->__r_.__value_.__l.__size_ = 0;
    v187->__r_.__value_.__r.__words[2] = 0;
    v187->__r_.__value_.__r.__words[0] = 0;
    v189 = std::string::append(&v303, ") size. ");
    v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
    v304.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v190;
    v189->__r_.__value_.__l.__size_ = 0;
    v189->__r_.__value_.__r.__words[2] = 0;
    v189->__r_.__value_.__r.__words[0] = 0;
    v191 = std::string::append(&v304, "Instead get padding size (");
    v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
    v305.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v305.__r_.__value_.__l.__data_ = v192;
    v191->__r_.__value_.__l.__size_ = 0;
    v191->__r_.__value_.__r.__words[2] = 0;
    v191->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v301, *(__int16 *)(a1 + 52));
    if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v193 = &v301;
    else
      v193 = (std::string *)v301.__r_.__value_.__r.__words[0];
    if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v301.__r_.__value_.__r.__words[2]);
    else
      size = v301.__r_.__value_.__l.__size_;
    v195 = std::string::append(&v305, (const std::string::value_type *)v193, size);
    v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
    v306.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v196;
    v195->__r_.__value_.__l.__size_ = 0;
    v195->__r_.__value_.__r.__words[2] = 0;
    v195->__r_.__value_.__r.__words[0] = 0;
    v197 = std::string::append(&v306, ", ");
    v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
    v307.__r_.__value_.__r.__words[2] = v197->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v198;
    v197->__r_.__value_.__l.__size_ = 0;
    v197->__r_.__value_.__r.__words[2] = 0;
    v197->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v300, *(__int16 *)(a1 + 54));
    if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v199 = &v300;
    else
      v199 = (std::string *)v300.__r_.__value_.__r.__words[0];
    if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v200 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
    else
      v200 = v300.__r_.__value_.__l.__size_;
    v201 = std::string::append(&v307, (const std::string::value_type *)v199, v200);
    v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
    v308.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v202;
    v201->__r_.__value_.__l.__size_ = 0;
    v201->__r_.__value_.__r.__words[2] = 0;
    v201->__r_.__value_.__r.__words[0] = 0;
    v203 = std::string::append(&v308, ", ");
    v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
    v309.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v204;
    v203->__r_.__value_.__l.__size_ = 0;
    v203->__r_.__value_.__r.__words[2] = 0;
    v203->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v299, *(__int16 *)(a1 + 56));
    if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v205 = &v299;
    else
      v205 = (std::string *)v299.__r_.__value_.__r.__words[0];
    if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v206 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
    else
      v206 = v299.__r_.__value_.__l.__size_;
    v207 = std::string::append(&v309, (const std::string::value_type *)v205, v206);
    v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
    v310.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v310.__r_.__value_.__l.__data_ = v208;
    v207->__r_.__value_.__l.__size_ = 0;
    v207->__r_.__value_.__r.__words[2] = 0;
    v207->__r_.__value_.__r.__words[0] = 0;
    v209 = std::string::append(&v310, ", ");
    v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
    v311.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v210;
    v209->__r_.__value_.__l.__size_ = 0;
    v209->__r_.__value_.__r.__words[2] = 0;
    v209->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v298, *(__int16 *)(a1 + 58));
    if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v211 = &v298;
    else
      v211 = (std::string *)v298.__r_.__value_.__r.__words[0];
    if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v212 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
    else
      v212 = v298.__r_.__value_.__l.__size_;
    v213 = std::string::append(&v311, (const std::string::value_type *)v211, v212);
    v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
    v312.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v214;
    v213->__r_.__value_.__l.__size_ = 0;
    v213->__r_.__value_.__r.__words[2] = 0;
    v213->__r_.__value_.__r.__words[0] = 0;
    v215 = std::string::append(&v312, ", ");
    v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
    v313.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v313.__r_.__value_.__l.__data_ = v216;
    v215->__r_.__value_.__l.__size_ = 0;
    v215->__r_.__value_.__r.__words[2] = 0;
    v215->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v297, *(__int16 *)(a1 + 60));
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v217 = &v297;
    else
      v217 = (std::string *)v297.__r_.__value_.__r.__words[0];
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v218 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    else
      v218 = v297.__r_.__value_.__l.__size_;
    v219 = std::string::append(&v313, (const std::string::value_type *)v217, v218);
    v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
    v314.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v314.__r_.__value_.__l.__data_ = v220;
    v219->__r_.__value_.__l.__size_ = 0;
    v219->__r_.__value_.__r.__words[2] = 0;
    v219->__r_.__value_.__r.__words[0] = 0;
    v221 = std::string::append(&v314, ", ");
    v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
    v315.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v222;
    v221->__r_.__value_.__l.__size_ = 0;
    v221->__r_.__value_.__r.__words[2] = 0;
    v221->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v296, *(__int16 *)(a1 + 62));
    if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v223 = &v296;
    else
      v223 = (std::string *)v296.__r_.__value_.__r.__words[0];
    if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v224 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
    else
      v224 = v296.__r_.__value_.__l.__size_;
    v225 = std::string::append(&v315, (const std::string::value_type *)v223, v224);
    v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
    v316.__r_.__value_.__r.__words[2] = v225->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v226;
    v225->__r_.__value_.__l.__size_ = 0;
    v225->__r_.__value_.__r.__words[2] = 0;
    v225->__r_.__value_.__r.__words[0] = 0;
    v227 = std::string::append(&v316, ") and kernel size ((kernel_size - 1) * dilation_rate) (");
    v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
    v317.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v228;
    v227->__r_.__value_.__l.__size_ = 0;
    v227->__r_.__value_.__r.__words[2] = 0;
    v227->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v295, v16);
    if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v229 = &v295;
    else
      v229 = (std::string *)v295.__r_.__value_.__r.__words[0];
    if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v230 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
    else
      v230 = v295.__r_.__value_.__l.__size_;
    v231 = std::string::append(&v317, (const std::string::value_type *)v229, v230);
    v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
    v318.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v318.__r_.__value_.__l.__data_ = v232;
    v231->__r_.__value_.__l.__size_ = 0;
    v231->__r_.__value_.__r.__words[2] = 0;
    v231->__r_.__value_.__r.__words[0] = 0;
    v233 = std::string::append(&v318, ", ");
    v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
    v319.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v234;
    v233->__r_.__value_.__l.__size_ = 0;
    v233->__r_.__value_.__r.__words[2] = 0;
    v233->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v294, v15);
    if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v235 = &v294;
    else
      v235 = (std::string *)v294.__r_.__value_.__r.__words[0];
    if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v236 = HIBYTE(v294.__r_.__value_.__r.__words[2]);
    else
      v236 = v294.__r_.__value_.__l.__size_;
    v237 = std::string::append(&v319, (const std::string::value_type *)v235, v236);
    v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
    v320.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v238;
    v237->__r_.__value_.__l.__size_ = 0;
    v237->__r_.__value_.__r.__words[2] = 0;
    v237->__r_.__value_.__r.__words[0] = 0;
    v239 = std::string::append(&v320, ",");
    v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
    v321.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v240;
    v239->__r_.__value_.__l.__size_ = 0;
    v239->__r_.__value_.__r.__words[2] = 0;
    v239->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v293, __val);
    if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v241 = &v293;
    else
      v241 = (std::string *)v293.__r_.__value_.__r.__words[0];
    if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v242 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
    else
      v242 = v293.__r_.__value_.__l.__size_;
    v243 = std::string::append(&v321, (const std::string::value_type *)v241, v242);
    v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
    v330.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v244;
    v243->__r_.__value_.__l.__size_ = 0;
    v243->__r_.__value_.__r.__words[2] = 0;
    v243->__r_.__value_.__r.__words[0] = 0;
    v245 = std::string::append(&v330, ")");
    v331 = *v245;
    v245->__r_.__value_.__l.__size_ = 0;
    v245->__r_.__value_.__r.__words[2] = 0;
    v245->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v364, (__int128 *)&v331, v148, 0);
    Espresso::emit_kernel_validation_warning(&v322, (Espresso::base_kernel::validate_for_engine_warning_t *)&v364);
    v246 = v367;
    if (v367)
    {
      v247 = (unint64_t *)&v367->__shared_owners_;
      do
        v248 = __ldaxr(v247);
      while (__stlxr(v248 - 1, v247));
      if (!v248)
      {
        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
        std::__shared_weak_count::__release_weak(v246);
      }
    }
    v372[0] = (void **)v366;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v372);
    v372[0] = (void **)v365;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v372);
    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v364.__r_.__value_.__l.__data_);
    if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v331.__r_.__value_.__l.__data_);
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v330.__r_.__value_.__l.__data_);
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
    if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v321.__r_.__value_.__l.__data_);
    if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v320.__r_.__value_.__l.__data_);
    if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v294.__r_.__value_.__l.__data_);
    if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v319.__r_.__value_.__l.__data_);
    if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v318.__r_.__value_.__l.__data_);
    if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v295.__r_.__value_.__l.__data_);
    if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v317.__r_.__value_.__l.__data_);
    if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v316.__r_.__value_.__l.__data_);
    if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v296.__r_.__value_.__l.__data_);
    if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v315.__r_.__value_.__l.__data_);
    if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v314.__r_.__value_.__l.__data_);
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
    if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v313.__r_.__value_.__l.__data_);
    if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v312.__r_.__value_.__l.__data_);
    if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v298.__r_.__value_.__l.__data_);
    if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v311.__r_.__value_.__l.__data_);
    if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v310.__r_.__value_.__l.__data_);
    if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v299.__r_.__value_.__l.__data_);
    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v309.__r_.__value_.__l.__data_);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v308.__r_.__value_.__l.__data_);
    if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v300.__r_.__value_.__l.__data_);
    if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v307.__r_.__value_.__l.__data_);
    if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v306.__r_.__value_.__l.__data_);
    if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v301.__r_.__value_.__l.__data_);
    if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v305.__r_.__value_.__l.__data_);
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v303.__r_.__value_.__l.__data_);
    if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v302.__r_.__value_.__l.__data_);
    v249 = v323;
    if (v323)
    {
      v250 = (unint64_t *)&v323->__shared_owners_;
      do
        v251 = __ldaxr(v250);
      while (__stlxr(v251 - 1, v250));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
        std::__shared_weak_count::__release_weak(v249);
      }
    }
    v120 = 0;
    v148 = (uint64_t)a2;
  }
  if (*(_WORD *)(a1 + 46) != 1 && (*(_WORD *)(a1 + 46) || fabsf(*(float *)(a1 + 48)) >= 1.1755e-38))
  {
    v272 = *(std::__shared_weak_count **)(a3 + 8);
    v291 = *(int64x2_t **)a3;
    v292 = v272;
    if (v272)
    {
      v273 = (unint64_t *)&v272->__shared_owners_;
      do
        v274 = __ldxr(v273);
      while (__stxr(v274 + 1, v273));
    }
    std::string::basic_string[abi:ne180100]<0>(&v331, "only fill mode of constant with 0 value is supported for padding");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v364, (__int128 *)&v331, v148, 0);
    Espresso::emit_kernel_validation_warning(&v291, (Espresso::base_kernel::validate_for_engine_warning_t *)&v364);
    v275 = v367;
    if (v367)
    {
      v276 = (unint64_t *)&v367->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    v330.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v330);
    v330.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v330);
    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v364.__r_.__value_.__l.__data_);
    if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v331.__r_.__value_.__l.__data_);
    v269 = v292;
    if (v292)
    {
      v278 = (unint64_t *)&v292->__shared_owners_;
      do
        v271 = __ldaxr(v278);
      while (__stlxr(v271 - 1, v278));
      v120 = 0;
LABEL_415:
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
      goto LABEL_418;
    }
LABEL_417:
    v120 = 0;
    goto LABEL_418;
  }
  v252 = v285;
  if (*(_QWORD *)(v148 + 24) == *(_QWORD *)(v148 + 32))
    v252 = 1;
  if ((v252 & 1) == 0)
  {
    v253 = v353;
    if (v353 >= 2)
    {
      v254 = v352;
      if (v352 >= 2)
      {
        if (v351)
        {
          v255 = v351 + 6;
          if (v351 >= 1)
            v255 = v351 - 1;
          if ((float)((float)((float)(int)((((v353 << 6) - 64) & 0xFFFFFE00)
                                          + 512
                                          + ((((v353 << 6) - 64) & 0xFFFFFE00) + 512) * ((v352 - 1) >> 3)
                                          + ((((v353 << 6) - 64) & 0xFFFFFE00)
                                           + 512
                                           + ((((v353 << 6) - 64) & 0xFFFFFE00) + 512) * ((v352 - 1) >> 3))
                                          * (v255 >> 3))
                             + 1.0)
                     / (float)((float)(v352 * v353 * v351) + 1.0)) > 1.9)
          {
            v256 = *(std::__shared_weak_count **)(a3 + 8);
            v289 = *(int64x2_t **)a3;
            v290 = v256;
            if (v256)
            {
              v257 = (unint64_t *)&v256->__shared_owners_;
              do
                v258 = __ldxr(v257);
              while (__stxr(v258 + 1, v257));
            }
            std::to_string(&v320, v253);
            v259 = std::string::insert(&v320, 0, "HW utilization loss: HW may round up computation of output sizes to multiple of 8 or 16, but the output size is ");
            v260 = *(_OWORD *)&v259->__r_.__value_.__l.__data_;
            v321.__r_.__value_.__r.__words[2] = v259->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v260;
            v259->__r_.__value_.__l.__size_ = 0;
            v259->__r_.__value_.__r.__words[2] = 0;
            v259->__r_.__value_.__r.__words[0] = 0;
            v261 = std::string::append(&v321, "x");
            v262 = *(_OWORD *)&v261->__r_.__value_.__l.__data_;
            v330.__r_.__value_.__r.__words[2] = v261->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v262;
            v261->__r_.__value_.__l.__size_ = 0;
            v261->__r_.__value_.__r.__words[2] = 0;
            v261->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v319, v254);
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v263 = &v319;
            else
              v263 = (std::string *)v319.__r_.__value_.__r.__words[0];
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v264 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
            else
              v264 = v319.__r_.__value_.__l.__size_;
            v265 = std::string::append(&v330, (const std::string::value_type *)v263, v264);
            v331 = *v265;
            v265->__r_.__value_.__l.__size_ = 0;
            v265->__r_.__value_.__r.__words[2] = 0;
            v265->__r_.__value_.__r.__words[0] = 0;
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v364, (__int128 *)&v331, v148, 1);
            Espresso::emit_kernel_validation_warning(&v289, (Espresso::base_kernel::validate_for_engine_warning_t *)&v364);
            v266 = v367;
            if (v367)
            {
              v267 = (unint64_t *)&v367->__shared_owners_;
              do
                v268 = __ldaxr(v267);
              while (__stlxr(v268 - 1, v267));
              if (!v268)
              {
                ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                std::__shared_weak_count::__release_weak(v266);
              }
            }
            v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
            v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
            if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v364.__r_.__value_.__l.__data_);
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v331.__r_.__value_.__l.__data_);
            if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v319.__r_.__value_.__l.__data_);
            if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v330.__r_.__value_.__l.__data_);
            if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v321.__r_.__value_.__l.__data_);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v320.__r_.__value_.__l.__data_);
            v269 = v290;
            if (v290)
            {
              v270 = (unint64_t *)&v290->__shared_owners_;
              do
                v271 = __ldaxr(v270);
              while (__stlxr(v271 - 1, v270));
              goto LABEL_415;
            }
          }
        }
      }
    }
  }
LABEL_418:
  v279 = v371;
  if (v371)
  {
    v280 = (unint64_t *)&v371->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  return v120;
}

void sub_19178AB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v9 - 240));
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9 - 112);
  _Unwind_Resume(a1);
}

void sub_19178AFB8()
{
  JUMPOUT(0x19178AE20);
}

void sub_19178AFC0()
{
  JUMPOUT(0x19178AE30);
}

void sub_19178AFC8()
{
  JUMPOUT(0x19178AE40);
}

void sub_19178AFD0()
{
  JUMPOUT(0x19178AE50);
}

void sub_19178AFD8()
{
  JUMPOUT(0x19178AE60);
}

void sub_19178AFE0()
{
  JUMPOUT(0x19178AE70);
}

void sub_19178AFE8()
{
  JUMPOUT(0x19178AE80);
}

void sub_19178AFF0()
{
  JUMPOUT(0x19178AE90);
}

void sub_19178AFF8()
{
  JUMPOUT(0x19178AEA0);
}

void sub_19178B000()
{
  JUMPOUT(0x19178AEB0);
}

void sub_19178B008()
{
  JUMPOUT(0x19178AEC0);
}

void sub_19178B010()
{
  JUMPOUT(0x19178AED0);
}

void sub_19178B018()
{
  JUMPOUT(0x19178AEE0);
}

void sub_19178B020()
{
  JUMPOUT(0x19178AEF0);
}

void sub_19178B028()
{
  JUMPOUT(0x19178AF00);
}

void sub_19178B030()
{
  JUMPOUT(0x19178AF10);
}

void sub_19178B038()
{
  JUMPOUT(0x19178AF20);
}

void sub_19178B040()
{
  JUMPOUT(0x19178AF30);
}

void sub_19178B048()
{
  JUMPOUT(0x19178AF40);
}

void sub_19178B050()
{
  JUMPOUT(0x19178AF50);
}

void sub_19178B058()
{
  JUMPOUT(0x19178AF60);
}

void sub_19178B060()
{
  JUMPOUT(0x19178AF70);
}

void sub_19178B068()
{
  JUMPOUT(0x19178AF80);
}

void sub_19178B070()
{
  JUMPOUT(0x19178AF90);
}

void sub_19178B078()
{
  JUMPOUT(0x19178AFA0);
}

void sub_19178B080()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x438]);
  if (SLOBYTE(STACK[0x45F]) < 0)
    operator delete((void *)STACK[0x448]);
  JUMPOUT(0x19178AFA8);
}

void sub_19178B0D8()
{
  void *v0;

  v0 = (void *)STACK[0x4D8];
  if (STACK[0x4D8])
  {
    STACK[0x4E0] = (unint64_t)v0;
    operator delete(v0);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4F0]);
  JUMPOUT(0x19178AFA8);
}

void sub_19178B124()
{
  JUMPOUT(0x19178AFA8);
}

uint64_t mix_is_valid_for_engine_conv_single_dimension(unsigned __int8 **a1, int a2, int a3, int a4, int a5, int __val, int a7, int a8, int a9, int a10, int a11, uint64_t *a12, uint64_t a13)
{
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  int v74;
  int v75;
  int v76;
  int v77;
  int v79;
  uint64_t v80;
  int64x2_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  BOOL v85;
  unint64_t *v86;
  unint64_t v87;
  int64x2_t *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  BOOL v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  int64x2_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  BOOL v113;
  unint64_t *v114;
  unint64_t v115;
  int v116;
  int v117;
  int v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  std::string::size_type v137;
  std::string *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  int64x2_t *v162;
  unint64_t *v163;
  unint64_t v164;
  int64x2_t *v165;
  unint64_t *v166;
  unint64_t v167;
  int64x2_t *v169[2];
  int64x2_t *v170[2];
  int64x2_t *v171;
  std::__shared_weak_count *v172;
  int64x2_t *v173;
  std::__shared_weak_count *v174;
  int64x2_t *v175;
  std::__shared_weak_count *v176;
  int64x2_t *v177;
  std::__shared_weak_count *v178;
  int64x2_t *v179;
  std::__shared_weak_count *v180;
  int64x2_t *v181;
  std::__shared_weak_count *v182;
  int64x2_t *v183;
  std::__shared_weak_count *v184;
  int64x2_t *v185;
  std::__shared_weak_count *v186;
  int64x2_t *v187;
  std::__shared_weak_count *v188;
  std::string v189;
  std::string v190;
  std::string v191;
  std::string v192;
  std::string v193;
  std::string v194;
  std::string v195;
  std::string v196;
  std::string v197;
  std::string v198;
  std::string v199;
  std::string v200;
  std::string v201;
  std::string v202;
  std::string v203;
  _BYTE v204[24];
  _BYTE v205[32];
  std::__shared_weak_count *v206;
  int64x2_t *v207;
  std::__shared_weak_count *v208;
  void **v209[3];

  if ((a7 - 1) * a3 >= a9 + __val)
  {
    v40 = *(std::__shared_weak_count **)(a13 + 8);
    v207 = *(int64x2_t **)a13;
    v208 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(p_shared_owners);
      while (__stxr(v42 + 1, p_shared_owners));
    }
    std::to_string(&v193, __val);
    v43 = std::string::insert(&v193, 0, "Invalid configuration of src=");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v194.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v194, " dst=");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v195.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v192, a7);
    if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v192;
    else
      v47 = (std::string *)v192.__r_.__value_.__r.__words[0];
    if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v192.__r_.__value_.__r.__words[2]);
    else
      size = v192.__r_.__value_.__l.__size_;
    v49 = std::string::append(&v195, (const std::string::value_type *)v47, size);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v196.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = std::string::append(&v196, " stride=");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v197.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v191, a3);
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v191;
    else
      v53 = (std::string *)v191.__r_.__value_.__r.__words[0];
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
    else
      v54 = v191.__r_.__value_.__l.__size_;
    v55 = std::string::append(&v197, (const std::string::value_type *)v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v198.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v198, " N=");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v199.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v190, a2);
    if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &v190;
    else
      v59 = (std::string *)v190.__r_.__value_.__r.__words[0];
    if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
    else
      v60 = v190.__r_.__value_.__l.__size_;
    v61 = std::string::append(&v199, (const std::string::value_type *)v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v200.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v63 = std::string::append(&v200, " pad=");
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v201.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v189, a9);
    if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v189;
    else
      v65 = (std::string *)v189.__r_.__value_.__r.__words[0];
    if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
    else
      v66 = v189.__r_.__value_.__l.__size_;
    v67 = std::string::append(&v201, (const std::string::value_type *)v65, v66);
    v202 = *v67;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(&v207, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    v68 = v206;
    if (v206)
    {
      v69 = (unint64_t *)&v206->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v209[0] = (void **)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v209);
    v209[0] = (void **)v204;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v209);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v189.__r_.__value_.__l.__data_);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v190.__r_.__value_.__l.__data_);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v191.__r_.__value_.__l.__data_);
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v196.__r_.__value_.__l.__data_);
    if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v192.__r_.__value_.__l.__data_);
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v195.__r_.__value_.__l.__data_);
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v194.__r_.__value_.__l.__data_);
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193.__r_.__value_.__l.__data_);
    v36 = v208;
    if (!v208)
      return 0;
    v71 = (unint64_t *)&v208->__shared_owners_;
    do
      v38 = __ldaxr(v71);
    while (__stlxr(v38 - 1, v71));
    goto LABEL_110;
  }
  if (a9 + __val + a8 < a2)
  {
    v17 = *(std::__shared_weak_count **)(a13 + 8);
    v187 = *(int64x2_t **)a13;
    v188 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::to_string(&v197, __val);
    v20 = std::string::insert(&v197, 0, "Input width ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v198.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v198, " plus horizontal padding ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v199.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v196, a9 + a8);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v196;
    else
      v24 = (std::string *)v196.__r_.__value_.__r.__words[0];
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    else
      v25 = v196.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v199, (const std::string::value_type *)v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v200.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v200, " is less than the kernel width ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v201.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v195, a2);
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v195;
    else
      v30 = (std::string *)v195.__r_.__value_.__r.__words[0];
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
    else
      v31 = v195.__r_.__value_.__l.__size_;
    v32 = std::string::append(&v201, (const std::string::value_type *)v30, v31);
    v202 = *v32;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(&v187, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    v33 = v206;
    if (v206)
    {
      v34 = (unint64_t *)&v206->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v195.__r_.__value_.__l.__data_);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v196.__r_.__value_.__l.__data_);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
    v36 = v188;
    if (!v188)
      return 0;
    v37 = (unint64_t *)&v188->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
LABEL_110:
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    return 0;
  }
  v74 = *((char *)a1 + 23);
  if (v74 < 0)
  {
    if (a1[1] != (unsigned __int8 *)1)
      goto LABEL_310;
    v75 = **a1;
  }
  else
  {
    if (v74 != 1)
      goto LABEL_310;
    v75 = *(unsigned __int8 *)a1;
  }
  if (v75 == 72)
  {
    v77 = 29;
    v76 = 29;
    goto LABEL_135;
  }
  if (v75 == 87)
  {
    v76 = 29;
    v77 = 13;
    goto LABEL_135;
  }
  if (v75 != 68)
LABEL_310:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Dimension has to be H, W, or D");
  if (a11 < 9 && a10 < 9)
    v79 = 15;
  else
    v79 = 8;
  if (a3 == 2)
    v77 = 16;
  else
    v77 = 15;
  if (a3 == 2)
    v76 = 16;
  else
    v76 = v79;
LABEL_135:
  v80 = *((unsigned int *)a12 + 16);
  if (v80 < 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v203, "(dilated)kernel size");
    v88 = *(int64x2_t **)a13;
    v89 = *(std::__shared_weak_count **)(a13 + 8);
    v185 = *(int64x2_t **)a13;
    v186 = v89;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
    }
    v92 = Espresso::ANECompilerEngine::validate_size(a2, v77, (uint64_t)&v203, (uint64_t)a12, v88, v89);
    if (v89)
    {
      v93 = (unint64_t *)&v89->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v203.__r_.__value_.__l.__data_);
      if (v92)
        goto LABEL_192;
    }
    else if (v92)
    {
      goto LABEL_192;
    }
    v129 = *(std::__shared_weak_count **)(a13 + 8);
    v183 = *(int64x2_t **)a13;
    v184 = v129;
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
    }
    std::to_string(&v199, a2);
    v132 = std::string::insert(&v199, 0, "Invalid size Neff = ");
    v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
    v200.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v133;
    v132->__r_.__value_.__l.__size_ = 0;
    v132->__r_.__value_.__r.__words[2] = 0;
    v132->__r_.__value_.__r.__words[0] = 0;
    v134 = std::string::append(&v200, " Exceeds kernel size limit = ");
    v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
    v201.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v135;
    v134->__r_.__value_.__l.__size_ = 0;
    v134->__r_.__value_.__r.__words[2] = 0;
    v134->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v198, v77);
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v136 = &v198;
    else
      v136 = (std::string *)v198.__r_.__value_.__r.__words[0];
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v137 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
    else
      v137 = v198.__r_.__value_.__l.__size_;
    v138 = std::string::append(&v201, (const std::string::value_type *)v136, v137);
    v202 = *v138;
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(&v183, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    v139 = v206;
    if (v206)
    {
      v140 = (unint64_t *)&v206->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
    v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    v36 = v184;
    if (!v184)
      return 0;
    v142 = (unint64_t *)&v184->__shared_owners_;
    do
      v38 = __ldaxr(v142);
    while (__stlxr(v38 - 1, v142));
    goto LABEL_110;
  }
  if ((_DWORD)v80 != 2 && (_DWORD)v80 != 4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Wrong compute path for ANE: %d", v80);
  std::string::basic_string[abi:ne180100]<0>(&v203, "(dilated)kernel size");
  v81 = *(int64x2_t **)a13;
  v82 = *(std::__shared_weak_count **)(a13 + 8);
  v181 = *(int64x2_t **)a13;
  v182 = v82;
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  v85 = Espresso::ANECompilerEngine::validate_size(a2, v76, (uint64_t)&v203, (uint64_t)a12, v81, v82);
  if (v82)
  {
    v86 = (unint64_t *)&v82->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v203.__r_.__value_.__l.__data_);
    if (v85)
      goto LABEL_192;
LABEL_161:
    v95 = *(std::__shared_weak_count **)(a13 + 8);
    v179 = *(int64x2_t **)a13;
    v180 = v95;
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    std::to_string(&v199, a2);
    v98 = std::string::insert(&v199, 0, "Invalid size Neff = ");
    v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v200.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    v100 = std::string::append(&v200, " Exceeds kernel size limit = ");
    v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v201.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v198, v76);
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v102 = &v198;
    else
      v102 = (std::string *)v198.__r_.__value_.__r.__words[0];
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v103 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
    else
      v103 = v198.__r_.__value_.__l.__size_;
    v104 = std::string::append(&v201, (const std::string::value_type *)v102, v103);
    v202 = *v104;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(&v179, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    v105 = v206;
    if (v206)
    {
      v106 = (unint64_t *)&v206->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
    v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    v36 = v180;
    if (!v180)
      return 0;
    v108 = (unint64_t *)&v180->__shared_owners_;
    do
      v38 = __ldaxr(v108);
    while (__stlxr(v38 - 1, v108));
    goto LABEL_110;
  }
  if (!v85)
    goto LABEL_161;
LABEL_192:
  std::string::basic_string[abi:ne180100]<0>(&v203, "stride");
  v109 = *(int64x2_t **)a13;
  v110 = *(std::__shared_weak_count **)(a13 + 8);
  v177 = *(int64x2_t **)a13;
  v178 = v110;
  if (v110)
  {
    v111 = (unint64_t *)&v110->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v113 = Espresso::ANECompilerEngine::validate_size(a3, 2, (uint64_t)&v203, (uint64_t)a12, v109, v110);
  if (v110)
  {
    v114 = (unint64_t *)&v110->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v113)
      goto LABEL_202;
LABEL_257:
    v143 = *(std::__shared_weak_count **)(a13 + 8);
    v175 = *(int64x2_t **)a13;
    v176 = v143;
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
    }
    std::string::basic_string[abi:ne180100]<0>(&v202, "Invalid size");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(&v175, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    v146 = v206;
    if (v206)
    {
      v147 = (unint64_t *)&v206->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
    v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    v36 = v176;
    if (!v176)
      return 0;
    v149 = (unint64_t *)&v176->__shared_owners_;
    do
      v38 = __ldaxr(v149);
    while (__stlxr(v38 - 1, v149));
    goto LABEL_110;
  }
  operator delete(v203.__r_.__value_.__l.__data_);
  if (!v113)
    goto LABEL_257;
LABEL_202:
  if (a5 <= 1)
    v116 = 1;
  else
    v116 = a5;
  v117 = (a4 - 1) / v116;
  if (v117 >= 0x10000)
  {
    v118 = v117 + 1;
    v119 = *(std::__shared_weak_count **)(a13 + 8);
    v173 = *(int64x2_t **)a13;
    v174 = v119;
    if (v119)
    {
      v120 = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
    }
    std::to_string(&v200, v118);
    v122 = std::string::insert(&v200, 0, "Unsupported: input channel = ");
    v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
    v201.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v123;
    v122->__r_.__value_.__l.__size_ = 0;
    v122->__r_.__value_.__r.__words[2] = 0;
    v122->__r_.__value_.__r.__words[0] = 0;
    v124 = std::string::append(&v201, " > 65536");
    v202 = *v124;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(&v173, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    v125 = v206;
    if (v206)
    {
      v126 = (unint64_t *)&v206->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    v36 = v174;
    if (!v174)
      return 0;
    v128 = (unint64_t *)&v174->__shared_owners_;
    do
      v38 = __ldaxr(v128);
    while (__stlxr(v38 - 1, v128));
    goto LABEL_110;
  }
  if (__val > 0x4000)
  {
    v150 = *(std::__shared_weak_count **)(a13 + 8);
    v171 = *(int64x2_t **)a13;
    v172 = v150;
    if (v150)
    {
      v151 = (unint64_t *)&v150->__shared_owners_;
      do
        v152 = __ldxr(v151);
      while (__stxr(v152 + 1, v151));
    }
    std::to_string(&v200, __val);
    v153 = std::string::insert(&v200, 0, "Unsupported: input size = ");
    v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
    v201.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v154;
    v153->__r_.__value_.__l.__size_ = 0;
    v153->__r_.__value_.__r.__words[2] = 0;
    v153->__r_.__value_.__r.__words[0] = 0;
    v155 = std::string::append(&v201, " > 16384");
    v202 = *v155;
    v155->__r_.__value_.__l.__size_ = 0;
    v155->__r_.__value_.__r.__words[2] = 0;
    v155->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(&v171, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    v156 = v206;
    if (v206)
    {
      v157 = (unint64_t *)&v206->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    v36 = v172;
    if (!v172)
      return 0;
    v159 = (unint64_t *)&v172->__shared_owners_;
    do
      v38 = __ldaxr(v159);
    while (__stlxr(v38 - 1, v159));
    goto LABEL_110;
  }
  v161 = *a12;
  v160 = a12[1];
  if (a5 >= 2 && v160 - v161 == 128)
  {
    v162 = *(int64x2_t **)(a13 + 8);
    v170[0] = *(int64x2_t **)a13;
    v170[1] = v162;
    if (v162)
    {
      v163 = &v162->u64[1];
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    std::string::basic_string[abi:ne180100]<0>(&v202, "Dynamic weights not supported for group/depthwise convolutions");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(v170, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v170);
    v161 = *a12;
    v160 = a12[1];
  }
  if (v160 - v161 == 192)
  {
    v165 = *(int64x2_t **)(a13 + 8);
    v169[0] = *(int64x2_t **)a13;
    v169[1] = v165;
    if (v165)
    {
      v166 = &v165->u64[1];
      do
        v167 = __ldxr(v166);
      while (__stxr(v167 + 1, v166));
    }
    std::string::basic_string[abi:ne180100]<0>(&v202, "Dynamic biases not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v203, (__int128 *)&v202, (uint64_t)a12, 0);
    Espresso::emit_kernel_validation_warning(v169, (Espresso::base_kernel::validate_for_engine_warning_t *)&v203);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v169);
    return 0;
  }
  return 1;
}

void sub_19178C2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v2 - 232));
  if (*(char *)(v2 - 233) < 0)
    operator delete(*(void **)(v2 - 256));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19178C7BC()
{
  JUMPOUT(0x19178C74CLL);
}

void sub_19178C7C4()
{
  JUMPOUT(0x19178C75CLL);
}

void sub_19178C7CC()
{
  JUMPOUT(0x19178C76CLL);
}

void sub_19178C7D4()
{
  JUMPOUT(0x19178C77CLL);
}

void sub_19178C7DC()
{
  JUMPOUT(0x19178C78CLL);
}

void sub_19178C7E4()
{
  JUMPOUT(0x19178C79CLL);
}

void sub_19178C7EC()
{
  JUMPOUT(0x19178C7ACLL);
}

int32x4_t *Espresso::padding_params_t::get_final_lrtbfb(int32x4_t *this, int16x4_t *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  __int32 v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  *this = vmovl_s16(a2[1]);
  v14 = a2[2].i16[0];
  this[1].i32[0] = a2[2].i16[1];
  this[1].i32[1] = v14;
  v15 = a2->i16[0];
  if (v15 != 4)
  {
    if (v15 == 2)
    {
      this->i64[0] = 0;
      this->i64[1] = 0;
      this[1].i64[0] = 0;
      return this;
    }
    if (v15 != 1)
      return this;
  }
  v16 = ((a7 - 1) * a10 - a4 + a13) & ~(((a7 - 1) * a10 - a4 + a13) >> 31);
  v17 = ((a6 - 1) * a9 - a3 + a12) & ~(((a6 - 1) * a9 - a3 + a12) >> 31);
  v18 = ((a8 - 1) * a11 - a5 + a14) & ~(((a8 - 1) * a11 - a5 + a14) >> 31);
  v19 = v17 - (v17 >> 1);
  v20 = v17 >> 1;
  v21 = v16 >> 1;
  v22 = v16 - (v16 >> 1);
  v23 = v18 >> 1;
  v24 = v18 - (v18 >> 1);
  if (a2->i16[0] == 1)
  {
    this->i32[0] = v20;
    this->i32[1] = v19;
    this->i32[2] = v21;
    this->i32[3] = v22;
    this[1].i32[0] = v24;
    this[1].i32[1] = v23;
  }
  else
  {
    this->i32[0] = v19;
    this->i32[1] = v20;
    this->i32[2] = v22;
    this->i32[3] = v21;
    this[1].i32[0] = v23;
    this[1].i32[1] = v24;
  }
  return this;
}

void Espresso::ANECompilerEngine::mix_broadcast_kernel::~mix_broadcast_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::mix_broadcast_kernel::is_valid_for_engine(uint64_t a1, __int128 *a2, _OWORD **a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  void *v9;
  NSString *v10;
  uint64_t is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  const Espresso::net *v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  const Espresso::net *v24;
  unint64_t *v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::string v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  int64x2_t *v50;
  std::__shared_weak_count *v51;
  char v52[8];
  __int128 v53;
  char v54;
  _OWORD v55[2];
  uint64_t v56;
  void *__p;
  void *v58;
  uint64_t v59;
  const Espresso::net *v60;
  std::__shared_weak_count *v61;
  _DWORD v62[8];
  _OWORD v63[2];
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  const Espresso::net *v68;
  std::__shared_weak_count *v69;
  _DWORD v70[8];
  __int128 v71;
  const Espresso::net *v72;
  std::__shared_weak_count *v73;
  void **v74;

  v6 = a3[6];
  v72 = 0;
  v73 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v73 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (const Espresso::net *)*((_QWORD *)v6 + 9);
    v72 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v10))
  {
    v71 = *a2;
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::broadcast_kernel::is_valid_for_engine((int *)a1, (int64x2_t **)&v71, a3);
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    v15 = v72;
    v14 = v73;
    v68 = v72;
    v69 = v73;
    if (v73)
    {
      v16 = (unint64_t *)&v73->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *a3;
    v19 = *((_QWORD *)*a3 + 4);
    v20 = (*a3)[1];
    v63[0] = **a3;
    v63[1] = v20;
    v64 = v19;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v65, *((const void **)v18 + 5), *((_QWORD *)v18 + 6), (uint64_t)(*((_QWORD *)v18 + 6) - *((_QWORD *)v18 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v70, v15, (const Espresso::layer_shape *)v63, 1);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v14)
    {
      v21 = (unint64_t *)&v14->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v24 = v72;
    v23 = v73;
    v60 = v72;
    v61 = v73;
    if (v73)
    {
      v25 = (unint64_t *)&v73->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = a3[3];
    v28 = *((_QWORD *)v27 + 4);
    v29 = v27[1];
    v55[0] = *v27;
    v55[1] = v29;
    v56 = v28;
    __p = 0;
    v58 = 0;
    v59 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v27 + 5), *((_QWORD *)v27 + 6), (uint64_t)(*((_QWORD *)v27 + 6) - *((_QWORD *)v27 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v62, v24, (const Espresso::layer_shape *)v55, 1);
    if (__p)
    {
      v58 = __p;
      operator delete(__p);
    }
    if (v23)
    {
      v30 = (unint64_t *)&v23->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    Espresso::ANECompilerEngine::mix_broadcast_kernel::supported_by_hw((uint64_t)v52, v9, v70, v62, (__int128 *)(a1 + 280));
    if (!v52[0])
    {
      v36 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      v50 = *(int64x2_t **)a2;
      v51 = v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v46, &v53, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&v46);
      v39 = v49;
      if (v49)
      {
        v40 = (unint64_t *)&v49->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v74 = (void **)&v48;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v74);
      v74 = (void **)&v47;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v74);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      v42 = v51;
      if (v51)
      {
        v43 = (unint64_t *)&v51->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    is_valid_for_engine = v52[0] != 0;
    if (v54 < 0)
      operator delete((void *)v53);
  }

  v32 = v73;
  if (v73)
  {
    v33 = (unint64_t *)&v73->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return is_valid_for_engine;
}

void sub_19178CCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;
  uint64_t v43;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a33 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 88);
  _Unwind_Resume(a1);
}

void sub_19178CD78()
{
  JUMPOUT(0x19178CD68);
}

void Espresso::ANECompilerEngine::mix_broadcast_kernel::compile(Espresso::ANECompilerEngine::mix_broadcast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  char *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSString *v17;
  __CFString *v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int *v25;
  Espresso::ANECompilerEngine *v26;
  uint64_t v27;
  __CFString *ANECAxisForNDAxis;
  const __CFString *v29;
  int v30;
  int v31;
  void *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  float v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  _WORD *v60;
  int v61;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  int *v75;
  _WORD *v76;
  int v77;
  int v79;
  Espresso::ANECompilerEngine::compiler::build_state_t *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t weights_file_index;
  void *v95;
  void *v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  void *v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  char v112;
  std::string::size_type size;
  std::string::size_type v114;
  uint64_t v115;
  unsigned __int8 *v116;
  std::string *v117;
  const std::string::value_type *data;
  __int128 v119;
  __CFString *v120;
  std::string *v121;
  std::string *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  const char *v156;
  int *v157;
  int v158;
  uint64_t i;
  float v160;
  int v161;
  _WORD *v162;
  int v163;
  std::runtime_error *exception;
  int *v166;
  uint64_t j;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  Espresso *v173;
  const char *v174;
  float v175;
  NSObject *v177;
  double v178;
  uint64_t v179;
  _WORD *v180;
  int v181;
  Espresso::ANECompilerEngine::compiler *v183;
  float *v184;
  std::__shared_weak_count *v185;
  id obj;
  Espresso::ANECompilerEngine *v187;
  void *v189;
  void *v191[2];
  unsigned int *v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  std::string *v195;
  std::string *v196;
  unint64_t v197;
  _DWORD *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  char v205;
  id v206;
  __CFString *v207;
  id v208[3];
  std::__shared_weak_count *v209;
  const void *v210;
  std::__shared_weak_count *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  __int128 v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  __int128 v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  uint64_t v220[2];
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unsigned int v227;
  unsigned int v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  _BYTE buf[18];
  __int16 v232;
  int v233;
  __int16 v234;
  double v235;
  std::vector<std::string> v236;
  void *v237;
  char v238;
  id v239;
  __CFString *v240;
  id v241;
  std::string v242;
  _BYTE v243[24];
  _BYTE v244[32];
  void *__p;
  char v246;
  id v247;
  __CFString *v248;
  id v249;
  uint64_t v250;
  std::string __str;
  __int128 v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  v212 = 0;
  v213 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v3
    || (v5 = std::__shared_weak_count::lock(v3), (v213 = v5) == 0)
    || (v6 = *((_QWORD *)a2 + 1), (v212 = v6) == 0))
  {
    v156 = "Inconsistent state: null network";
    goto LABEL_232;
  }
  if (!*(_QWORD *)(v6 + 576))
  {
    v156 = "Inconsistent state: blob_storage";
LABEL_232:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v156);
  }
  v7 = v5;
  v242.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)v242.__r_.__value_.__l.__data_, (__int128 **)&v242);
  v9 = (const void *)*((_QWORD *)v8 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v210 = v9;
  v211 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v185 = v7;
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)a3, (__int128 **)&v242);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v184 = (float *)*((_QWORD *)v13 + 5);
  v208[2] = v184;
  v209 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v6 + 472);
  v187 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v187, v17))
  {
    Espresso::ANECompilerEngine::broadcast_kernel::compile(this, a2, a3);
    goto LABEL_213;
  }
  obj = (id)objc_opt_new();
  v183 = a2;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v200, (id *)a3);
  v18 = v207;
  v207 = CFSTR("Broadcast");

  v189 = (void *)objc_opt_new();
  if (v9
  {
    v20 = v19;
    v198 = v19;
    v199 = v10;
    if (v10)
    {
      v21 = (unint64_t *)&v10->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v20 = 0;
    v198 = 0;
    v199 = 0;
  }
  v23 = *(unsigned __int8 *)(v6 + 1281);
  *(_OWORD *)v191 = *(_OWORD *)((char *)this + 280);
  v24 = *((_DWORD *)this + 74);
  v25 = (unsigned int *)operator new(0x14uLL);
  v26 = 0;
  *(_OWORD *)v25 = *(_OWORD *)v191;
  v192 = v25;
  v25[4] = v24;
  do
  {
    v27 = v192[(_QWORD)v26];
    if ((int)v27 < 2)
      goto LABEL_44;
    if (!*((_DWORD *)this + 77))
    {
      v30 = v20[46];
      switch((int)v26)
      {
        case 0:
          goto LABEL_30;
        case 1:
          goto LABEL_31;
        case 2:
          if (v23 && v30 == 5)
            goto LABEL_37;
          goto LABEL_40;
        case 3:
          if (v23 && v30 == 5)
            goto LABEL_40;
          goto LABEL_41;
        case 4:
          if (!v23 || v30 != 5)
            goto LABEL_37;
          goto LABEL_41;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      }
    }
    ANECAxisForNDAxis = (__CFString *)Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v26, (int)v20[46], v23 != 0);
    v29 = ANECAxisForNDAxis;
    if (ANECAxisForNDAxis == CFSTR("Width"))
    {
LABEL_30:
      v31 = v20[44];
      v29 = CFSTR("Width");
      goto LABEL_42;
    }
    if (ANECAxisForNDAxis == CFSTR("Height"))
    {
LABEL_31:
      v31 = v20[43];
      v29 = CFSTR("Height");
      goto LABEL_42;
    }
    if (ANECAxisForNDAxis == CFSTR("Channel"))
    {
LABEL_40:
      v31 = v20[41];
      v29 = CFSTR("Channel");
      goto LABEL_42;
    }
    if (ANECAxisForNDAxis == CFSTR("Batch"))
    {
LABEL_41:
      v31 = v20[40];
      v29 = CFSTR("Batch");
LABEL_42:
      if ((_DWORD)v27 == v31)
        goto LABEL_44;
      goto LABEL_43;
    }
    if (ANECAxisForNDAxis == CFSTR("Depth"))
    {
LABEL_37:
      v31 = v20[42];
      v29 = CFSTR("Depth");
      goto LABEL_42;
    }
LABEL_43:
    v32 = (void *)objc_opt_new();
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v29, CFSTR("Dimension"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v27);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v33, CFSTR("Size"));

    objc_msgSend(v189, "addObject:", v32);
LABEL_44:
    v26 = (Espresso::ANECompilerEngine *)((char *)v26 + 1);
  }
  while (v26 != (Espresso::ANECompilerEngine *)5);
  if (!objc_msgSend(v189, "count"))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("dst_blob and src_blob shapes are the same, this broadcast layer should have been removed");
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v189, CFSTR("BroadcastInfo"));
  objc_storeStrong(v208, obj);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v242, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v200);
  v248 = v207;
  v249 = v208[0];
  v250 = (uint64_t)v208[1];
  v196 = 0;
  v197 = 0;
  v195 = 0;
  *(_QWORD *)buf = &v195;
  buf[8] = 0;
  v195 = (std::string *)operator new(0x90uLL);
  v196 = v195;
  v197 = (unint64_t)&v195[6];
  v196 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v197, (uint64_t)&v242, (uint64_t)&__str, (uint64_t)v195);

  if (v246 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v244;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v243;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  v194 = v7;
  v34 = (unint64_t *)&v7->__shared_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v193 = v14;
  if (v14)
  {
    v36 = (unint64_t *)&v14->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v242);
  v249 = 0;
  v248 = 0;
  v250 = 0x100000000;
  v39 = *((_QWORD *)this + 48);
  v38 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  v229 = v39;
  v230 = v38;
  if (v38)
  {
    v40 = (unint64_t *)&v38->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  if (!v39 || *(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 40) + 104))((char *)this + 320) + 40))
    goto LABEL_185;
  v42 = v184[28];
  v221 = v39;
  v222 = v38;
  if (v38)
  {
    v43 = (unint64_t *)&v38->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  v220[0] = *((_QWORD *)this + 50);
  v220[1] = (uint64_t)v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v221, v220, (uint64_t)&v223, v42);
  if (v45)
  {
    v48 = (unint64_t *)&v45->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v50 = v222;
  if (v222)
  {
    v51 = (unint64_t *)&v222->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v229;
  v54 = *(unsigned int *)(v229 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v218, 2 * v54, 1, 1, 1);
  v55 = (int)v54;
  v217 = 0uLL;
  v56 = v54;
  v57 = *((_QWORD *)this + 50);
  if (v57)
    v56 = *(_DWORD *)(v57 + 8);
  if (!*((_BYTE *)v183 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v54);
    v157 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    v158 = v54 - 1;
    if ((int)v54 >= 1)
    {
      for (i = 0; i != v54; ++i)
      {
        v160 = *(float *)(*(_QWORD *)(v53 + 16) + i * 4);
        *(float *)&v161 = ldexp(1.0, -v227) * v160;
        v157[i] = v161;
      }
    }
    if ((_DWORD)v54)
    {
      v162 = *(_WORD **)(v218 + 16);
      do
      {
        v163 = *v157++;
        _S0 = v163;
        __asm { FCVT            H0, S0 }
        *v162++ = _S0;
        --v55;
      }
      while (v55);
    }
    v215 = 0;
    v216 = 0;
    if (*((_QWORD *)this + 50))
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v56);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v215, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * v56);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v217, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v166 = *(int **)(v215 + 16);
      if (v56 >= 1)
      {
        for (j = 0; j != v56; ++j)
        {
          if (v158 >= (int)j)
            v168 = j;
          else
            v168 = v158;
          *(float *)&v169 = *(float *)(*(_QWORD *)(v225 + 16) + 4 * j) * *(float *)(*(_QWORD *)(v223 + 16) + 4 * v168);
          v166[j] = v169;
          v170 = v228;
          v171 = v227;
          *(float *)&v172 = ldexp(1.0, v228 - v227) * *(float *)&v169;
          v166[j] = v172;
          v175 = ldexp(1.0, v171 - v170) * *(float *)&v172;
          if (v175 < -127.0 || v175 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v173, v174);
            v177 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
            {
              v178 = *(float *)&v166[j];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v175;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v228;
              v232 = 1024;
              v233 = v227;
              v234 = 2048;
              v235 = v178;
              _os_log_error_impl(&dword_190DAF000, v177, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (v56)
      {
        v179 = v56;
        v180 = *(_WORD **)(v217 + 16);
        do
        {
          v181 = *v166++;
          _S0 = v181;
          __asm { FCVT            H0, S0 }
          *v180++ = _S0;
          --v179;
        }
        while (v179);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(exception);
  }
  v58 = v228;
  if ((_DWORD)v54)
  {
    v59 = *(int **)(v223 + 16);
    v60 = *(_WORD **)(v218 + 16);
    do
    {
      v61 = *v59++;
      _S0 = v61;
      __asm { FCVT            H0, S0 }
      *v60++ = _S0;
      --v55;
    }
    while (v55);
  }
  if (v57)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v56, 1, 1, 1);
    v67 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
    v217 = v67;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (v56)
    {
      v74 = v56;
      v75 = *(int **)(v225 + 16);
      v76 = *(_WORD **)(v217 + 16);
      do
      {
        v77 = *v75++;
        _S0 = v77;
        __asm { FCVT            H0, S0 }
        *v76++ = _S0;
        --v74;
      }
      while (v74);
    }
  }
  v79 = *((unsigned __int8 *)v183 + 552);
  v80 = (Espresso::ANECompilerEngine::compiler *)((char *)v183 + 128);
  v81 = v218;
  v82 = v219;
  v215 = v218;
  v216 = v219;
  if (v219)
  {
    v83 = (unint64_t *)&v219->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  v85 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v80, *(const unsigned __int8 **)(v81 + 16), *(int *)(v81 + 8));
  if (v82)
  {
    v86 = (unint64_t *)&v82->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v88 = (void *)objc_opt_new();
  if (*((_BYTE *)v183 + 121))
  {
    v89 = (id)v195[5].__r_.__value_.__l.__size_;

    v88 = v89;
  }
  v90 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v54);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "setObject:forKeyedSubscript:", v91, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v85);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "setObject:forKeyedSubscript:", v92, CFSTR("ScaleOffset"));

  v93 = (void *)MEMORY[0x1E0CB37E8];
  if (v79)
    weights_file_index = 0;
  else
  objc_msgSend(v93, "numberWithUnsignedLong:", weights_file_index);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "setObject:forKeyedSubscript:", v95, CFSTR("ScaleIndex"));

  objc_msgSend(v90, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v227);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v88, "setObject:forKeyedSubscript:", v96, CFSTR("ScaleShift"));

  if (*((_QWORD *)this + 50))
  {
    v97 = v217;
    v214 = v217;
    if (*((_QWORD *)&v217 + 1))
    {
      v98 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    v100 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v80, *(const unsigned __int8 **)(v97 + 16), *(int *)(v97 + 8));
    if (*((_QWORD *)&v97 + 1))
    {
      v101 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v97 + 1) + 16))(*((_QWORD *)&v97 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v97 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 50) + 8));
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v90, "setObject:forKeyedSubscript:", v103, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v100);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v90, "setObject:forKeyedSubscript:", v104, CFSTR("BiasOffset"));

    v105 = (void *)MEMORY[0x1E0CB37E8];
    if (v79)
      v106 = 0;
    else
    objc_msgSend(v105, "numberWithUnsignedLong:", v106);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v90, "setObject:forKeyedSubscript:", v107, CFSTR("BiasIndex"));

    objc_msgSend(v90, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v58);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v88, "setObject:forKeyedSubscript:", v108, CFSTR("BiasShift"));

  }
  objc_msgSend(v88, "setObject:forKeyedSubscript:", v90, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
  v109 = v196;
  if (v196 == v195)
    goto LABEL_146;
  v110 = v196 - 6;
  v111 = HIBYTE(v196[-6].__r_.__value_.__r.__words[2]);
  v112 = v111;
  size = v196[-6].__r_.__value_.__l.__size_;
  if ((v111 & 0x80u) == 0)
    v114 = HIBYTE(v196[-6].__r_.__value_.__r.__words[2]);
  else
    v114 = v196[-6].__r_.__value_.__l.__size_;
  v115 = HIBYTE(v233);
  if (v233 < 0)
    v115 = *(_QWORD *)&buf[8];
  if (v114 != v115)
    goto LABEL_140;
  if (v233 >= 0)
    v116 = buf;
  else
    v116 = *(unsigned __int8 **)buf;
  if ((char)v111 < 0)
  {
    data = (const std::string::value_type *)v110->__r_.__value_.__r.__words[0];
    if (memcmp(v110->__r_.__value_.__l.__data_, v116, v196[-6].__r_.__value_.__l.__size_))
    {
LABEL_143:
      std::string::__init_copy_ctor_external(&__str, data, size);
      goto LABEL_144;
    }
LABEL_139:
    std::string::append(v109 - 6, "__@pre_scale_bias");
    v112 = HIBYTE(v109[-6].__r_.__value_.__r.__words[2]);
    goto LABEL_140;
  }
  if (!(_BYTE)v111)
    goto LABEL_139;
  v117 = v196 - 6;
  while (v117->__r_.__value_.__s.__data_[0] == *v116)
  {
    v117 = (std::string *)((char *)v117 + 1);
    ++v116;
    if (!--v111)
      goto LABEL_139;
  }
LABEL_140:
  if (v112 < 0)
  {
    data = v109[-6].__r_.__value_.__l.__data_;
    size = v109[-6].__r_.__value_.__l.__size_;
    goto LABEL_143;
  }
  v119 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v109[-6].__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v119;
LABEL_144:
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v236, &__str, &v252, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_146:
  v120 = v240;
  v240 = CFSTR("GOC");

  objc_storeStrong(&v241, v88);
  if (!*((_BYTE *)v183 + 121))
  {
    v121 = v196;
    if ((unint64_t)v196 >= v197)
    {
      v123 = 0x8E38E38E38E38E39 * (((char *)v196 - (char *)v195) >> 4);
      if (v123 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v124 = 0x1C71C71C71C71C72 * ((uint64_t)(v197 - (_QWORD)v195) >> 4);
      if (v124 <= v123 + 1)
        v124 = v123 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v197 - (_QWORD)v195) >> 4) >= 0xE38E38E38E38E3)
        v125 = 0x1C71C71C71C71C7;
      else
        v125 = v124;
      *((_QWORD *)&v252 + 1) = &v197;
      if (v125)
        v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v125);
      else
        v126 = 0;
      __str.__r_.__value_.__r.__words[0] = v125;
      __str.__r_.__value_.__l.__size_ = v125 + 144 * v123;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v252 = v125 + 144 * v126;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v195, &__str);
      v122 = v196;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v196, (uint64_t)buf);
      v122 = v121 + 6;
    }
    v196 = v122;
  }

  if (v238 < 0)
    operator delete(v237);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v233) < 0)
    operator delete(*(void **)buf);

  v127 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v219;
  if (v219)
  {
    v131 = (unint64_t *)&v219->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v226;
  if (v226)
  {
    v134 = (unint64_t *)&v226->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v224;
  if (v224)
  {
    v137 = (unint64_t *)&v224->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v38 = v230;
LABEL_185:
  if (v38)
  {
    v139 = (unint64_t *)&v38->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  if (v246 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v244;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v243;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  if (v193)
  {
    v141 = (unint64_t *)&v193->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v143 = (unint64_t *)&v185->__shared_owners_;
  do
    v144 = __ldaxr(v143);
  while (__stlxr(v144 - 1, v143));
  if (!v144)
  {
    ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
    std::__shared_weak_count::__release_weak(v194);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 40) + 32))((char *)this + 320, v183, &v195);
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v242);
  operator delete(v192);
  v145 = v199;
  if (v199)
  {
    v146 = (unint64_t *)&v199->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }

  if (v205 < 0)
    operator delete(v204);
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v242);
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v242);
  if (v201 < 0)
    operator delete(v200[0]);

  v14 = v209;
LABEL_213:

  if (v14)
  {
    v148 = (unint64_t *)&v14->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v150 = v211;
  if (v211)
  {
    v151 = (unint64_t *)&v211->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v213;
  if (v213)
  {
    v154 = (unint64_t *)&v213->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
}

void sub_19178E0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,id a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  STACK[0x210] = (unint64_t)&a26;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_broadcast_kernel::compile(Espresso::ANECompilerEngine::mix_broadcast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_broadcast_kernel::compile((Espresso::ANECompilerEngine::mix_broadcast_kernel *)((char *)this - 320), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_broadcast_kernel::~mix_broadcast_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_reduce_kernel::~mix_reduce_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::mix_reduce_kernel::is_valid_for_engine(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  void *v9;
  NSString *v10;
  uint64_t is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  const Espresso::net *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  const Espresso::net *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  const Espresso::net *v42;
  char *v43;
  int v44;
  unsigned int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  void *v59[2];
  char v60;
  int64x2_t *v61;
  uint64_t v62;
  std::string v63;
  _OWORD v64[2];
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  const Espresso::net *v69;
  std::__shared_weak_count *v70;
  void **v71[4];
  _OWORD v72[2];
  uint64_t v73;
  void *__p;
  void *v75;
  uint64_t v76;
  const Espresso::net *v77;
  std::__shared_weak_count *v78;
  void *v79[2];
  char v80;
  std::string v81;
  _QWORD v82[3];
  _BYTE v83[32];
  std::__shared_weak_count *v84;
  int64x2_t *v85;
  uint64_t v86;
  __int128 v87;
  const Espresso::net *v88;
  std::__shared_weak_count *v89;
  void **v90;

  v6 = *(_QWORD *)(a3 + 48);
  v88 = 0;
  v89 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v89 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v88 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v10))
  {
    v87 = *a2;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::reduce_kernel::is_valid_for_engine(a1, (int64x2_t **)&v87, (int *)a3);
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  else
  {
    v14 = *(_QWORD *)a3;
    if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    {
      v34 = *((_QWORD *)a2 + 1);
      v85 = *(int64x2_t **)a2;
      v86 = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      std::string::basic_string[abi:ne180100]<0>(v79, "Detected zero bottom tensor");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v81, (__int128 *)v79, a3, 0);
      Espresso::emit_kernel_validation_warning(&v85, (Espresso::base_kernel::validate_for_engine_warning_t *)&v81);
      v37 = v84;
      if (v84)
      {
        v38 = (unint64_t *)&v84->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v71[0] = (void **)v83;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v71);
      v71[0] = (void **)v82;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v71);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if (v80 < 0)
        operator delete(v79[0]);
      is_valid_for_engine = v86;
      if (v86)
      {
        v40 = (unint64_t *)(v86 + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)is_valid_for_engine + 16))(is_valid_for_engine);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)is_valid_for_engine);
        }
        is_valid_for_engine = 0;
      }
    }
    else
    {
      v15 = *(_QWORD *)(a3 + 24);
      v17 = v88;
      v16 = v89;
      v77 = v88;
      v78 = v89;
      if (v89)
      {
        v18 = (unint64_t *)&v89->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(_OWORD *)(v14 + 16);
      v21 = *(_QWORD *)(v14 + 32);
      v72[0] = *(_OWORD *)v14;
      v72[1] = v20;
      v73 = v21;
      __p = 0;
      v75 = 0;
      v76 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v79, v17, (const Espresso::layer_shape *)v72, 1);
      if (__p)
      {
        v75 = __p;
        operator delete(__p);
      }
      if (v16)
      {
        v22 = (unint64_t *)&v16->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v25 = v88;
      v24 = v89;
      v69 = v88;
      v70 = v89;
      if (v89)
      {
        v26 = (unint64_t *)&v89->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(_OWORD *)(v15 + 16);
      v29 = *(_QWORD *)(v15 + 32);
      v64[0] = *(_OWORD *)v15;
      v64[1] = v28;
      v65 = v29;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, *(const void **)(v15 + 40), *(_QWORD *)(v15 + 48), (uint64_t)(*(_QWORD *)(v15 + 48) - *(_QWORD *)(v15 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v71, v25, (const Espresso::layer_shape *)v64, 1);
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      if (v24)
      {
        v30 = (unint64_t *)&v24->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v32 = *(__int128 **)(**(_QWORD **)(a3 + 48) + 224 * *(_QWORD *)(a3 + 72) + 136);
      if (*((char *)v32 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
      }
      else
      {
        v33 = *v32;
        v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v33;
      }
      v42 = v88;
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v88 + 45), &v63))
      {
        v59[0] = &v63;
        v43 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v42 + 44, &v63, (uint64_t)&std::piecewise_construct, (__int128 **)v59);
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = *(_OWORD *)(v43 + 56);
        v82[0] = 0;
        v82[1] = 0;
        v81.__r_.__value_.__r.__words[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v81.__r_.__value_.__r.__words[2], *((const void **)v43 + 9), *((_QWORD *)v43 + 10), (uint64_t)(*((_QWORD *)v43 + 10) - *((_QWORD *)v43 + 9)) >> 2);
        if (LODWORD(v81.__r_.__value_.__r.__words[1]) == -1)
          v44 = 1;
        else
          v44 = v81.__r_.__value_.__r.__words[1];
        if (v81.__r_.__value_.__r.__words[2])
        {
          v82[0] = *((_QWORD *)&v81.__r_.__value_.__l + 2);
          operator delete((void *)v81.__r_.__value_.__r.__words[2]);
        }
      }
      else
      {
        v44 = *(_DWORD *)(a3 + 64);
      }
      v45 = *(_DWORD *)(a1 + 280);
      if (v45 <= 0xC && ((1 << v45) & 0x1E13) != 0)
      {
        Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw((uint64_t)&v81, v9, v79, v71, (__int128 *)(a1 + 280), v44);
        if (SHIBYTE(v82[0]) < 0)
          operator delete((void *)v81.__r_.__value_.__l.__size_);
        is_valid_for_engine = 1;
      }
      else
      {
        v50 = *((_QWORD *)a2 + 1);
        v61 = *(int64x2_t **)a2;
        v62 = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        std::string::basic_string[abi:ne180100]<0>(v59, "Only Sum, Min, Max, Avg, Sumsq, Argmax, Argmin modes are supported for reduce");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v81, (__int128 *)v59, a3, 0);
        Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v81);
        v53 = v84;
        if (v84)
        {
          v54 = (unint64_t *)&v84->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v90 = (void **)v83;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v90);
        v90 = (void **)v82;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v90);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        if (v60 < 0)
          operator delete(v59[0]);
        is_valid_for_engine = v62;
        if (v62)
        {
          v56 = (unint64_t *)(v62 + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)is_valid_for_engine + 16))(is_valid_for_engine);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)is_valid_for_engine);
          }
          is_valid_for_engine = 0;
        }
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
    }
  }

  v46 = v89;
  if (v89)
  {
    v47 = (unint64_t *)&v89->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  return is_valid_for_engine;
}

void sub_19178E9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  uint64_t v57;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v57 - 256));
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a25 < 0)
    operator delete(a20);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v57 - 104);
  _Unwind_Resume(a1);
}

void sub_19178EADC()
{
  JUMPOUT(0x19178EACCLL);
}

void Espresso::ANECompilerEngine::mix_reduce_kernel::compile(Espresso::ANECompilerEngine::mix_reduce_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSString *v16;
  int v17;
  _OWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  __CFString *v30;
  void *v31;
  void *v32;
  void *v33;
  std::string *v34;
  std::string *v35;
  void *v36;
  __CFString *v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  __CFString *v41;
  _BOOL4 v42;
  __CFString *v43;
  _BOOL4 v44;
  __CFString *v45;
  _BOOL4 v46;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *v49;
  __CFString *v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  void *v57;
  __CFString *v58;
  std::string *v59;
  std::string *v60;
  const __CFString *v61;
  void *v62;
  char *v63;
  void *v64;
  void *v65;
  __CFString *v66;
  __CFString *v67;
  const __CFString *v68;
  void *v69;
  char *v70;
  void *v71;
  void *v72;
  char *v73;
  void *v74;
  __CFString *v75;
  char v76;
  void *v77;
  const std::string::value_type *v78;
  __CFString *v79;
  void *v80;
  int v81;
  const __CFString *v82;
  const __CFString *v83;
  __CFString *v84;
  _BOOL4 v85;
  __CFString *v86;
  _BOOL4 v87;
  const __CFString *v88;
  void *v89;
  char *v90;
  void *v91;
  void *v92;
  const __CFString *v93;
  void *v94;
  char *v95;
  void *v96;
  std::string *v97;
  std::string *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  __CFString *v104;
  void *v105;
  void *v106;
  void *v107;
  std::string *v108;
  std::string *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  const __CFString *v124;
  void *v125;
  char *v126;
  void *v127;
  std::string *v128;
  std::string *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  __CFString *v152;
  const char *v153;
  const char *v154;
  unint64_t *v155;
  uint64_t v156;
  void *v157;
  void *v158;
  void *v159;
  _QWORD v161[3];
  std::__shared_weak_count *v162;
  __int128 v163;
  _OWORD v164[2];
  __int128 v165;
  _BYTE v166[28];
  _QWORD v167[3];
  std::__shared_weak_count *v168;
  std::string v169;
  _BYTE v170[24];
  _BYTE v171[32];
  void *__p;
  char v173;
  id v174;
  __CFString *v175;
  id v176[2];
  std::vector<std::string> v177;
  char v178;
  __int128 v179;
  _OWORD v180[2];
  uint64_t v181;
  std::string *v182;
  unint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  const void *v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unsigned __int8 *v192;
  std::string __str;
  __int128 v194;
  void *v195;
  _QWORD v196[6];
  char v197;
  id v198;
  __CFString *v199;
  id v200[4];

  v200[2] = *(id *)MEMORY[0x1E0C80C00];
  v191 = 0;
  v190 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v3 || (v191 = std::__shared_weak_count::lock(v3)) == 0 || (v6 = *((_QWORD *)a2 + 1), (v190 = v6) == 0))
  {
    v153 = "Inconsistent state: null network";
    goto LABEL_239;
  }
  if (!*(_QWORD *)(v6 + 576))
  {
    v153 = "Inconsistent state: blob_storage";
LABEL_239:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v153);
  }
  v169.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)v169.__r_.__value_.__l.__data_, (__int128 **)&v169);
  v9 = (const void *)*((_QWORD *)v7 + 5);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  v188 = v9;
  v189 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v169.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)a3, (__int128 **)&v169);
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v186 = *((_QWORD *)v12 + 5);
  v187 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v6 + 472);
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  if (!Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v159, v16))
  {
    v17 = *((_DWORD *)this + 70);
    if (v9)
    {
      if (v18 && v8)
      {
        v19 = (unint64_t *)&v8->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v21 = v18[11];
        v184 = v18[10];
        v185 = v21;
        do
          v22 = __ldaxr(v19);
        while (__stlxr(v22 - 1, v19));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
LABEL_24:
        v24 = (__int128 *)((char *)this + 280);
        if ((v17 - 11) <= 1)
        {
          v181 = 0;
          v182 = 0;
          v183 = 0;
          v25 = *(_OWORD *)((char *)this + 296);
          v179 = *v24;
          v180[0] = v25;
          *(_OWORD *)((char *)v180 + 12) = *(_OWORD *)((char *)this + 308);
          v156 = v190;
          get_reduce_axes((uint64_t)&v179, DWORD2(v185), *(unsigned __int8 *)(v190 + 1281));
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v178 = 0;
          objc_msgSend(v26, "objectAtIndexedSubscript:", 0);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = (*(uint64_t (**)(const void *))(*(_QWORD *)v188 + 32))(v188);
          spatial_argmax_valid_only_after_transpose(v159, &v184, v27, v28, &v178);
          v158 = (void *)objc_claimAutoreleasedReturnValue();

          if (v178)
          {
            v157 = v26;
            memset(&v177, 0, sizeof(v177));
            v29 = (void *)objc_opt_new();
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v169.__r_.__value_.__l.__data_, (id *)a3);
            std::string::append(&v169, "__@reduce_transpose_to_c_");
            v30 = v175;
            v175 = CFSTR("Transpose");

            v31 = (void *)objc_opt_new();
            v32 = (void *)objc_opt_new();
            objc_msgSend(v32, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("TransposeSourceDimension"));
            objc_msgSend(v32, "setObject:forKeyedSubscript:", v158, CFSTR("TransposeDestinationDimension"));
            objc_msgSend(v31, "addObject:", v32);
            v33 = (void *)objc_opt_new();
            objc_msgSend(v33, "setObject:forKeyedSubscript:", v158, CFSTR("TransposeSourceDimension"));
            objc_msgSend(v33, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("TransposeDestinationDimension"));
            objc_msgSend(v31, "addObject:", v33);
            objc_msgSend(v29, "setObject:forKeyedSubscript:", v31, CFSTR("TransposeDimensions"));
            objc_storeStrong(v176, v29);
            v155 = &v183;
            v34 = v182;
            if ((unint64_t)v182 >= v183)
            {
              v52 = 0x8E38E38E38E38E39 * (((uint64_t)v182 - v181) >> 4);
              if (v52 + 1 > 0x1C71C71C71C71C7)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v53 = 0x1C71C71C71C71C72 * ((uint64_t)(v183 - v181) >> 4);
              if (v53 <= v52 + 1)
                v53 = v52 + 1;
              if (0x8E38E38E38E38E39 * ((uint64_t)(v183 - v181) >> 4) >= 0xE38E38E38E38E3)
                v54 = 0x1C71C71C71C71C7;
              else
                v54 = v53;
              *((_QWORD *)&v194 + 1) = &v183;
              if (v54)
                v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v54);
              else
                v55 = 0;
              __str.__r_.__value_.__r.__words[0] = v54;
              __str.__r_.__value_.__l.__size_ = v54 + 144 * v52;
              __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
              *(_QWORD *)&v194 = v54 + 144 * v55;
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v169);
              __str.__r_.__value_.__r.__words[2] += 144;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v181, &__str);
              v35 = v182;
              std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
            }
            else
            {
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v182, (uint64_t)&v169);
              v35 = v34 + 6;
            }
            v182 = v35;
            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__str, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
            else
              __str = v169;
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v177, &__str, &v194, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);

            if (v173 < 0)
              operator delete(__p);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v169.__r_.__value_.__l.__data_);

            v77 = (void *)objc_opt_new();
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v169.__r_.__value_.__l.__data_, (id *)a3);
            if (v17 == 11)
              v78 = "__@argmax";
            else
              v78 = "__@argmin";
            std::string::append(&v169, v78);
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v171, v177.__begin_, v177.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v177.__end_ - (char *)v177.__begin_) >> 3));
            v79 = v175;
            v175 = CFSTR("ArgMinMax");

            objc_msgSend(v157, "objectAtIndexedSubscript:", 0);
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            v81 = objc_msgSend(v158, "isEqualToString:", v80);

            if (v81)
            {
              if (v17 == 11)
                v82 = CFSTR("ChannelArgMax");
              else
                v82 = CFSTR("ChannelArgMin");
              v83 = CFSTR("Mode");
            }
            else
            {
              objc_msgSend(v157, "objectAtIndex:", 0);
              v84 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v85 = v84 == CFSTR("Width");

              if (v85)
              {
                if (v17 == 11)
                  v93 = CFSTR("SpatialArgMax");
                else
                  v93 = CFSTR("SpatialArgMin");
                objc_msgSend(v77, "setObject:forKeyedSubscript:", v93, CFSTR("Mode"), &v183);
                v94 = (void *)MEMORY[0x1E0CB37E8];
                v192 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
                v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v156 + 136, v192, (__int128 **)&v192);
                Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v95 + 5));
                objc_msgSend(v94, "numberWithInt:", LODWORD(__str.__r_.__value_.__l.__data_));
                v96 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v77, "setObject:forKeyedSubscript:", v96, CFSTR("KernelWidth"));

                if (v195)
                {
                  v196[0] = v195;
                  operator delete(v195);
                }
                objc_msgSend(v77, "setObject:forKeyedSubscript:", &unk_1E2DEDBF8, CFSTR("KernelHeight"));
                v92 = &unk_1E2DEE0B8;
              }
              else
              {
                objc_msgSend(v157, "objectAtIndex:", 0);
                v86 = (__CFString *)objc_claimAutoreleasedReturnValue();
                v87 = v86 == CFSTR("Height");

                if (!v87)
                {
LABEL_114:
                  objc_storeStrong(v176, v77);
                  v97 = v182;
                  if ((unint64_t)v182 >= v183)
                  {
                    v99 = 0x8E38E38E38E38E39 * (((uint64_t)v182 - v181) >> 4);
                    if (v99 + 1 > 0x1C71C71C71C71C7)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v100 = 0x1C71C71C71C71C72 * ((uint64_t)(v183 - v181) >> 4);
                    if (v100 <= v99 + 1)
                      v100 = v99 + 1;
                    if (0x8E38E38E38E38E39 * ((uint64_t)(v183 - v181) >> 4) >= 0xE38E38E38E38E3)
                      v101 = 0x1C71C71C71C71C7;
                    else
                      v101 = v100;
                    *((_QWORD *)&v194 + 1) = v155;
                    if (v101)
                      v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v101);
                    else
                      v102 = 0;
                    __str.__r_.__value_.__r.__words[0] = v101;
                    __str.__r_.__value_.__l.__size_ = v101 + 144 * v99;
                    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
                    *(_QWORD *)&v194 = v101 + 144 * v102;
                    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v169);
                    __str.__r_.__value_.__r.__words[2] += 144;
                    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v181, &__str);
                    v98 = v182;
                    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
                  }
                  else
                  {
                    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v182, (uint64_t)&v169);
                    v98 = v97 + 6;
                  }
                  v182 = v98;
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&__str, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
                  else
                    __str = v169;
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v177, &__str, &v194, 1uLL);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);

                  if (v173 < 0)
                    operator delete(__p);
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v169.__r_.__value_.__l.__data_);

                  v103 = (void *)objc_opt_new();
                  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v169.__r_.__value_.__l.__data_, (id *)a3);
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v171, v177.__begin_, v177.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v177.__end_ - (char *)v177.__begin_) >> 3));
                  v104 = v175;
                  v175 = CFSTR("Transpose");

                  v105 = (void *)objc_opt_new();
                  v106 = (void *)objc_opt_new();
                  objc_msgSend(v106, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("TransposeSourceDimension"));
                  objc_msgSend(v106, "setObject:forKeyedSubscript:", v158, CFSTR("TransposeDestinationDimension"));
                  objc_msgSend(v105, "addObject:", v106);
                  v107 = (void *)objc_opt_new();
                  objc_msgSend(v107, "setObject:forKeyedSubscript:", v158, CFSTR("TransposeSourceDimension"));
                  objc_msgSend(v107, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("TransposeDestinationDimension"));
                  objc_msgSend(v105, "addObject:", v107);
                  objc_msgSend(v103, "setObject:forKeyedSubscript:", v105, CFSTR("TransposeDimensions"));
                  objc_storeStrong(v176, v103);
                  v108 = v182;
                  if ((unint64_t)v182 >= v183)
                  {
                    v110 = 0x8E38E38E38E38E39 * (((uint64_t)v182 - v181) >> 4);
                    if (v110 + 1 > 0x1C71C71C71C71C7)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v111 = 0x1C71C71C71C71C72 * ((uint64_t)(v183 - v181) >> 4);
                    if (v111 <= v110 + 1)
                      v111 = v110 + 1;
                    if (0x8E38E38E38E38E39 * ((uint64_t)(v183 - v181) >> 4) >= 0xE38E38E38E38E3)
                      v112 = 0x1C71C71C71C71C7;
                    else
                      v112 = v111;
                    *((_QWORD *)&v194 + 1) = v155;
                    if (v112)
                      v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v112);
                    else
                      v113 = 0;
                    __str.__r_.__value_.__r.__words[0] = v112;
                    __str.__r_.__value_.__l.__size_ = v112 + 144 * v110;
                    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
                    *(_QWORD *)&v194 = v112 + 144 * v113;
                    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v169);
                    __str.__r_.__value_.__r.__words[2] += 144;
                    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v181, &__str);
                    v109 = v182;
                    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
                  }
                  else
                  {
                    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v182, (uint64_t)&v169);
                    v109 = v108 + 6;
                  }
                  v182 = v109;
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&__str, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
                  else
                    __str = v169;
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v177, &__str, &v194, 1uLL);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);

                  if (v173 < 0)
                    operator delete(__p);
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v169.__r_.__value_.__l.__data_);

                  v167[2] = v156;
                  v168 = v191;
                  if (v191)
                  {
                    v114 = (unint64_t *)&v191->__shared_owners_;
                    do
                      v115 = __ldxr(v114);
                    while (__stxr(v115 + 1, v114));
                  }
                  v116 = v187;
                  v167[0] = v186;
                  v167[1] = v187;
                  if (v187)
                  {
                    v117 = (unint64_t *)&v187->__shared_owners_;
                    do
                      v118 = __ldxr(v117);
                    while (__stxr(v118 + 1, v117));
                  }
                  Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_reduce_kernel *>(this, a2, (id *)a3, (uint64_t)v167, &v181);
                  if (v116)
                  {
                    v119 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v120 = __ldaxr(v119);
                    while (__stlxr(v120 - 1, v119));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  v121 = v168;
                  if (v168)
                  {
                    v122 = (unint64_t *)&v168->__shared_owners_;
                    do
                      v123 = __ldaxr(v122);
                    while (__stlxr(v123 - 1, v122));
                    if (!v123)
                    {
                      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                      std::__shared_weak_count::__release_weak(v121);
                    }
                  }
                  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 41) + 32))((char *)this + 328, a2, &v181);
                  v169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);

                  v169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
                  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
LABEL_214:
                  v13 = v187;
                  goto LABEL_215;
                }
                if (v17 == 11)
                  v88 = CFSTR("SpatialArgMax");
                else
                  v88 = CFSTR("SpatialArgMin");
                objc_msgSend(v77, "setObject:forKeyedSubscript:", v88, CFSTR("Mode"), &v183);
                objc_msgSend(v77, "setObject:forKeyedSubscript:", &unk_1E2DEDBF8, CFSTR("KernelWidth"));
                v89 = (void *)MEMORY[0x1E0CB37E8];
                v192 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
                v90 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v156 + 136, v192, (__int128 **)&v192);
                Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v90 + 5));
                objc_msgSend(v89, "numberWithInt:", HIDWORD(__str.__r_.__value_.__r.__words[0]));
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v77, "setObject:forKeyedSubscript:", v91, CFSTR("KernelHeight"));

                if (v195)
                {
                  v196[0] = v195;
                  operator delete(v195);
                }
                v92 = &unk_1E2DEE0D0;
              }
              objc_msgSend(v77, "setObject:forKeyedSubscript:", v92, CFSTR("Step"));
              objc_msgSend(v77, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadTop"));
              objc_msgSend(v77, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadBot"));
              v82 = (const __CFString *)&unk_1E2DEDC10;
              objc_msgSend(v77, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadLeft"));
              v83 = CFSTR("PadRight");
            }
            objc_msgSend(v77, "setObject:forKeyedSubscript:", v82, v83, v155);
            goto LABEL_114;
          }

          v169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
        }
        v36 = (void *)objc_opt_new();
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v169.__r_.__value_.__l.__data_, (id *)a3);
        v181 = 0;
        v182 = 0;
        v183 = 0;
        v37 = v175;
        if ((v17 - 11) > 1)
        {
          v175 = CFSTR("Reduction");

          v49 = CFSTR("Min");
          switch(v17)
          {
            case 0:
              v49 = CFSTR("Sum");
              goto LABEL_53;
            case 1:
              v49 = CFSTR("Avg");
              goto LABEL_53;
            case 4:
              v57 = (void *)objc_opt_new();
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
              v58 = v199;
              v199 = CFSTR("ElementWise");

              objc_msgSend(v57, "setObject:forKeyedSubscript:", CFSTR("Square"), CFSTR("Type"));
              objc_storeStrong(v200, v57);
              v59 = v182;
              if ((unint64_t)v182 >= v183)
              {
                v60 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v181, (uint64_t)&__str);
              }
              else
              {
                std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v182, (uint64_t)&__str);
                v60 = v59 + 6;
              }
              v182 = v60;
              v152 = v175;
              v175 = CFSTR("Reduction");

              objc_msgSend(v36, "setObject:forKeyedSubscript:", CFSTR("Sum"), CFSTR("Type"));
              if (v197 < 0)
                operator delete((void *)v196[4]);
              v177.__begin_ = (std::vector<std::string>::pointer)v196;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
              v177.__begin_ = (std::vector<std::string>::pointer)&v194;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);

              goto LABEL_54;
            case 9:
              v49 = CFSTR("Max");
              goto LABEL_53;
            case 10:
LABEL_53:
              objc_msgSend(v36, "setObject:forKeyedSubscript:", v49, CFSTR("Type"));
LABEL_54:
              v56 = *(_OWORD *)((char *)this + 296);
              v163 = *v24;
              v164[0] = v56;
              *(_OWORD *)((char *)v164 + 12) = *(_OWORD *)((char *)this + 308);
              v39 = v190;
              get_reduce_axes((uint64_t)&v163, DWORD2(v185), *(unsigned __int8 *)(v190 + 1281));
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "setObject:forKeyedSubscript:", v40, CFSTR("Dimension"));
              break;
            default:
              Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported reduce mode for reduce operation.");
          }
          goto LABEL_181;
        }
        v175 = CFSTR("ArgMinMax");

        v38 = *(_OWORD *)((char *)this + 296);
        v165 = *v24;
        *(_OWORD *)v166 = v38;
        *(_OWORD *)&v166[12] = *(_OWORD *)((char *)this + 308);
        v39 = v190;
        get_reduce_axes((uint64_t)&v165, DWORD2(v185), *(unsigned __int8 *)(v190 + 1281));
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v40, "count") == 1)
        {
          objc_msgSend(v40, "objectAtIndex:", 0);
          v41 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v42 = v41 == CFSTR("Width");

          if (v42)
          {
            if (v17 == 11)
              v61 = CFSTR("SpatialArgMax");
            else
              v61 = CFSTR("SpatialArgMin");
            objc_msgSend(v36, "setObject:forKeyedSubscript:", v61, CFSTR("Mode"));
            v62 = (void *)MEMORY[0x1E0CB37E8];
            v192 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
            v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39 + 136, v192, (__int128 **)&v192);
            Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v63 + 5));
            objc_msgSend(v62, "numberWithInt:", LODWORD(__str.__r_.__value_.__l.__data_));
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "setObject:forKeyedSubscript:", v64, CFSTR("KernelWidth"));

            if (v195)
            {
              v196[0] = v195;
              operator delete(v195);
            }
            objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDBF8, CFSTR("KernelHeight"));
            v65 = &unk_1E2DEE0E8;
          }
          else
          {
            objc_msgSend(v40, "objectAtIndex:", 0);
            v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v44 = v43 == CFSTR("Height");

            if (!v44)
            {
              objc_msgSend(v40, "objectAtIndex:", 0);
              v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v46 = v45 == CFSTR("Channel");

              if (v46)
              {
                if (v17 == 11)
                  v47 = CFSTR("ChannelArgMax");
                else
                  v47 = CFSTR("ChannelArgMin");
                v48 = CFSTR("Mode");
                goto LABEL_180;
              }
              v154 = "Unsupported reduce axis mode for arg max.";
LABEL_247:
              Espresso::throw_exception_selector<Espresso::invalid_state_error>(v154);
            }
            if (v17 == 11)
              v124 = CFSTR("SpatialArgMax");
            else
              v124 = CFSTR("SpatialArgMin");
            objc_msgSend(v36, "setObject:forKeyedSubscript:", v124, CFSTR("Mode"));
            objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDBF8, CFSTR("KernelWidth"));
            v125 = (void *)MEMORY[0x1E0CB37E8];
            v192 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
            v126 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39 + 136, v192, (__int128 **)&v192);
            Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v126 + 5));
            objc_msgSend(v125, "numberWithInt:", HIDWORD(__str.__r_.__value_.__r.__words[0]));
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "setObject:forKeyedSubscript:", v127, CFSTR("KernelHeight"));

            if (v195)
            {
              v196[0] = v195;
              operator delete(v195);
            }
            v65 = &unk_1E2DEE100;
          }
          objc_msgSend(v36, "setObject:forKeyedSubscript:", v65, CFSTR("Step"));
          objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadTop"));
          objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadBot"));
          v47 = (const __CFString *)&unk_1E2DEDC10;
          objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadLeft"));
          v48 = CFSTR("PadRight");
LABEL_180:
          objc_msgSend(v36, "setObject:forKeyedSubscript:", v47, v48);
LABEL_181:

          objc_storeStrong(v176, v36);
          v128 = v182;
          if ((unint64_t)v182 >= v183)
          {
            v130 = 0x8E38E38E38E38E39 * (((uint64_t)v182 - v181) >> 4);
            if (v130 + 1 > 0x1C71C71C71C71C7)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v131 = 0x1C71C71C71C71C72 * ((uint64_t)(v183 - v181) >> 4);
            if (v131 <= v130 + 1)
              v131 = v130 + 1;
            if (0x8E38E38E38E38E39 * ((uint64_t)(v183 - v181) >> 4) >= 0xE38E38E38E38E3)
              v132 = 0x1C71C71C71C71C7;
            else
              v132 = v131;
            *((_QWORD *)&v194 + 1) = &v183;
            if (v132)
              v132 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v132);
            else
              v133 = 0;
            __str.__r_.__value_.__r.__words[0] = v132;
            __str.__r_.__value_.__l.__size_ = v132 + 144 * v130;
            __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
            *(_QWORD *)&v194 = v132 + 144 * v133;
            std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v169);
            __str.__r_.__value_.__r.__words[2] += 144;
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v181, &__str);
            v129 = v182;
            std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
          }
          else
          {
            std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v182, (uint64_t)&v169);
            v129 = v128 + 6;
          }
          v182 = v129;
          v161[2] = v39;
          v162 = v191;
          if (v191)
          {
            v134 = (unint64_t *)&v191->__shared_owners_;
            do
              v135 = __ldxr(v134);
            while (__stxr(v135 + 1, v134));
          }
          v136 = v187;
          v161[0] = v186;
          v161[1] = v187;
          if (v187)
          {
            v137 = (unint64_t *)&v187->__shared_owners_;
            do
              v138 = __ldxr(v137);
            while (__stxr(v138 + 1, v137));
          }
          Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_reduce_kernel *>(this, a2, (id *)a3, (uint64_t)v161, &v181);
          if (v136)
          {
            v139 = (unint64_t *)&v136->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          v141 = v162;
          if (v162)
          {
            v142 = (unint64_t *)&v162->__shared_owners_;
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 41)
                                                                                             + 32))((char *)this + 328, a2, &v181);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);

          if (v173 < 0)
            operator delete(__p);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v169.__r_.__value_.__l.__data_);

          goto LABEL_214;
        }
        if (objc_msgSend(v40, "count") != 2)
        {
          v154 = "Unsupported reduce axis mode for arg max or arg min.";
          goto LABEL_247;
        }
        objc_msgSend(v40, "objectAtIndex:", 0);
        v50 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (v50 == CFSTR("Width"))
        {
          objc_msgSend(v40, "objectAtIndex:", 1);
          v66 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v51 = v66 == CFSTR("Height");

        }
        else
        {
          v51 = 0;
        }

        objc_msgSend(v40, "objectAtIndex:", 0);
        v67 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (v67 == CFSTR("Height"))
        {
          objc_msgSend(v40, "objectAtIndex:", 1);
          v75 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v76 = v75 == CFSTR("Width") || v51;

          if ((v76 & 1) != 0)
            goto LABEL_66;
        }
        else
        {

          if (v51)
          {
LABEL_66:
            if (v17 == 11)
              v68 = CFSTR("SpatialArgMax");
            else
              v68 = CFSTR("SpatialArgMin");
            objc_msgSend(v36, "setObject:forKeyedSubscript:", v68, CFSTR("Mode"));
            v69 = (void *)MEMORY[0x1E0CB37E8];
            v192 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
            v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39 + 136, v192, (__int128 **)&v192);
            Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v70 + 5));
            objc_msgSend(v69, "numberWithInt:", LODWORD(__str.__r_.__value_.__l.__data_));
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "setObject:forKeyedSubscript:", v71, CFSTR("KernelWidth"));

            if (v195)
            {
              v196[0] = v195;
              operator delete(v195);
            }
            v72 = (void *)MEMORY[0x1E0CB37E8];
            v192 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
            v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39 + 136, v192, (__int128 **)&v192);
            Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v73 + 5));
            objc_msgSend(v72, "numberWithInt:", HIDWORD(__str.__r_.__value_.__r.__words[0]));
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "setObject:forKeyedSubscript:", v74, CFSTR("KernelHeight"));

            if (v195)
            {
              v196[0] = v195;
              operator delete(v195);
            }
            objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEE118, CFSTR("Step"));
            objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadTop"));
            objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadBot"));
            objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadLeft"));
            objc_msgSend(v36, "setObject:forKeyedSubscript:", &unk_1E2DEDC10, CFSTR("PadRight"));
            goto LABEL_181;
          }
        }
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported reduce axis mode for arg max.");
      }
    }
    else
    {
      v18 = 0;
    }
    v23 = v18[11];
    v184 = v18[10];
    v185 = v23;
    goto LABEL_24;
  }
  Espresso::ANECompilerEngine::reduce_kernel::compile(this, a2, (void **)a3);
LABEL_215:

  if (v13)
  {
    v144 = (unint64_t *)&v13->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v146 = v189;
  if (v189)
  {
    v147 = (unint64_t *)&v189->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v191;
  if (v191)
  {
    v150 = (unint64_t *)&v191->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
}

void sub_1917902B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a72;
  void *v72;
  void *v73;
  uint64_t v74;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)(v74 - 240));

  a53 = (void **)&a64;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a53);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a35);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x208]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_reduce_kernel::compile(Espresso::ANECompilerEngine::mix_reduce_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_reduce_kernel::compile((Espresso::ANECompilerEngine::mix_reduce_kernel *)((char *)this - 328), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_reduce_kernel::~mix_reduce_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

id get_reduce_axes(uint64_t a1, unsigned int a2, int a3)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  id v10;
  const __CFString *v11;
  id v12;
  int v13;
  const __CFString *v14;
  const __CFString *v15;
  BOOL v16;
  _BOOL4 v17;
  const __CFString *v18;
  const __CFString *v19;

  v5 = *(_DWORD *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_58;
  v6 = *(_DWORD *)(a1 + 36);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = 0;
  v8 = v6 - v7;
  if (v8 == -1)
    v9 = 1;
  else
    v9 = *(_DWORD *)(a1 + 8);
  if (v8 == -2)
    v9 = 2;
  if (v8 == -3)
    v9 = 4;
  v5 = v8 == -4 ? 8 : v9;
  if (v8 == -5)
  {
    v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
LABEL_17:
    if (a2 > 5)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    if (((a2 == 5) & a3) != 0)
      v11 = CFSTR("Batch");
    else
      v11 = CFSTR("Depth");
  }
  else
  {
LABEL_58:
    v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v10 = v12;
    switch(v5)
    {
      case 1:
        if (a2 > 5)
          goto LABEL_54;
        v11 = CFSTR("Width");
        break;
      case 2:
        if (a2 <= 5)
          goto LABEL_40;
        goto LABEL_54;
      case 3:
        if (a2 > 5)
          goto LABEL_54;
        objc_msgSend(v12, "addObject:", CFSTR("Width"));
LABEL_40:
        v11 = CFSTR("Height");
        break;
      case 4:
        v16 = a2 == 5;
        if (a2 > 5)
          goto LABEL_54;
        goto LABEL_43;
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        return v10;
      case 7:
        if (a2 > 5)
          goto LABEL_54;
        objc_msgSend(v12, "addObject:", CFSTR("Width"));
        objc_msgSend(v10, "addObject:", CFSTR("Height"));
        v16 = a2 == 5;
LABEL_43:
        v17 = v16;
        v18 = CFSTR("Channel");
        v19 = CFSTR("Depth");
        goto LABEL_49;
      case 8:
        if (a2 > 5)
          goto LABEL_54;
        v17 = a2 == 5;
        v18 = CFSTR("Batch");
        v19 = CFSTR("Channel");
LABEL_49:
        if ((v17 & a3) != 0)
          v11 = v19;
        else
          v11 = v18;
        break;
      case 16:
        goto LABEL_17;
      default:
        if (v5 != 31)
          return v10;
        if (a2 >= 6)
LABEL_54:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
        objc_msgSend(v12, "addObject:", CFSTR("Width"));
        objc_msgSend(v10, "addObject:", CFSTR("Height"));
        v13 = (a2 == 5) & a3;
        if (v13)
          v14 = CFSTR("Depth");
        else
          v14 = CFSTR("Channel");
        objc_msgSend(v10, "addObject:", v14);
        if ((v13 & 1) != 0)
          v15 = CFSTR("Channel");
        else
          v15 = CFSTR("Batch");
        objc_msgSend(v10, "addObject:", v15);
        if ((v13 & 1) != 0)
          v11 = CFSTR("Batch");
        else
          v11 = CFSTR("Depth");
        break;
    }
  }
  objc_msgSend(v10, "addObject:", v11);
  return v10;
}

void sub_1917908EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *spatial_argmax_valid_only_after_transpose(void *a1, _DWORD *a2, void *a3, int a4, _BYTE *a5)
{
  Espresso::ANECompilerEngine *v9;
  __CFString *v10;
  NSString *v11;
  __CFString *v12;
  unsigned int v13;
  unsigned int v14;
  const __CFString *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = a1;
  v10 = a3;
  v12 = v10;
  *a5 = 1;
  if (v10 != CFSTR("Width"))
  {
    if (v10 == CFSTR("Height"))
    {
      Espresso::ANECompilerEngine::is_mix_e(v9, v11);
      v13 = a2[3];
      if (v13 >= 0x10)
      {
        if (v13 >= 0x801)
          *a5 = 0;
        v14 = a2[1];
        v15 = CFSTR("Height");
        if (v14 < 0x10)
          goto LABEL_17;
LABEL_16:
        *a5 = 0;
        goto LABEL_17;
      }
    }
LABEL_15:
    v15 = 0;
    goto LABEL_16;
  }
  Espresso::ANECompilerEngine::is_mix_e(v9, v11);
  v16 = 7;
  if (((a4 - 2) & 0xFFFFFFFD) == 0)
    v16 = 15;
  v17 = (int)a2[4];
  if (v16 >= v17)
    goto LABEL_15;
  if (v17 >= 0x801)
    *a5 = 0;
  v18 = (int)a2[1];
  v15 = CFSTR("Width");
  if (v16 < v18)
    goto LABEL_16;
LABEL_17:

  return v15;
}

void sub_191790A04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_reduce_kernel *>(_QWORD *a1, _BYTE *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  float v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  _WORD *v31;
  int v32;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  _WORD *v47;
  int v48;
  int v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t weights_file_index;
  void *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  const void **v79;
  uint64_t v80;
  char v81;
  std::string::size_type v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  const std::string::value_type *v87;
  __int128 v88;
  __CFString *v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  int *v112;
  int v113;
  uint64_t i;
  float v115;
  int v116;
  _WORD *v117;
  int v118;
  std::runtime_error *exception;
  int *v121;
  uint64_t j;
  int v123;
  float v124;
  float *v125;
  unsigned int v126;
  unsigned int v127;
  float v128;
  Espresso *v129;
  const char *v130;
  float v131;
  NSObject *v133;
  double v134;
  uint64_t v135;
  _WORD *v136;
  int v137;
  _QWORD v140[2];
  __int128 v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144[2];
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  char v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  _BYTE buf[18];
  __int16 v166;
  int v167;
  __int16 v168;
  double v169;
  std::vector<std::string> v170;
  void *__p;
  char v172;
  id v173;
  __CFString *v174;
  id v175;
  std::string __str;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v155);
  v162 = 0;
  v163 = 0;
  v164 = 0x100000000;
  v10 = a1[49];
  v9 = (std::__shared_weak_count *)a1[50];
  v153 = v10;
  v154 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v10 && !*(_BYTE *)((*(uint64_t (**)(_QWORD *))(a1[41] + 104))(a1 + 41) + 40))
  {
    v13 = *(float *)(*(_QWORD *)a4 + 112);
    v145 = v10;
    v146 = v9;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (std::__shared_weak_count *)a1[52];
    v144[0] = a1[51];
    v144[1] = (uint64_t)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v145, v144, (uint64_t)&v147, v13);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = v146;
    if (v146)
    {
      v22 = (unint64_t *)&v146->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v153;
    v25 = *(unsigned int *)(v153 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v142, 2 * v25, 1, 1, 1);
    v26 = (int)v25;
    v141 = 0uLL;
    v27 = v25;
    v28 = a1[51];
    if (v28)
      v27 = *(_DWORD *)(v28 + 8);
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v25);
      v112 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      v113 = v25 - 1;
      if ((int)v25 >= 1)
      {
        for (i = 0; i != v25; ++i)
        {
          v115 = *(float *)(*(_QWORD *)(v24 + 16) + i * 4);
          *(float *)&v116 = ldexp(1.0, -v151) * v115;
          v112[i] = v116;
        }
      }
      if ((_DWORD)v25)
      {
        v117 = *(_WORD **)(v142 + 16);
        do
        {
          v118 = *v112++;
          _S0 = v118;
          __asm { FCVT            H0, S0 }
          *v117++ = _S0;
          --v26;
        }
        while (v26);
      }
      v140[0] = 0;
      v140[1] = 0;
      if (a1[51])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v140, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v141, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v121 = *(int **)(v140[0] + 16);
        if (v27 >= 1)
        {
          for (j = 0; j != v27; ++j)
          {
            if (v113 >= (int)j)
              v123 = j;
            else
              v123 = v113;
            v124 = *(float *)(*(_QWORD *)(v149 + 16) + 4 * j) * *(float *)(*(_QWORD *)(v147 + 16) + 4 * v123);
            v125 = (float *)&v121[j];
            *v125 = v124;
            v127 = v151;
            v126 = v152;
            v128 = ldexp(1.0, v152 - v151) * v124;
            *v125 = v128;
            v131 = ldexp(1.0, v127 - v126) * v128;
            if (v131 < -127.0 || v131 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v129, v130);
              v133 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
              {
                v134 = *(float *)&v121[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v131;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v152;
                v166 = 1024;
                v167 = v151;
                v168 = 2048;
                v169 = v134;
                _os_log_error_impl(&dword_190DAF000, v133, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v27)
        {
          v135 = v27;
          v136 = *(_WORD **)(v141 + 16);
          do
          {
            v137 = *v121++;
            _S0 = v137;
            __asm { FCVT            H0, S0 }
            *v136++ = _S0;
            --v135;
          }
          while (v135);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v29 = v152;
    if ((_DWORD)v25)
    {
      v30 = *(int **)(v147 + 16);
      v31 = *(_WORD **)(v142 + 16);
      do
      {
        v32 = *v30++;
        _S0 = v32;
        __asm { FCVT            H0, S0 }
        *v31++ = _S0;
        --v26;
      }
      while (v26);
    }
    if (v28)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v27, 1, 1, 1);
      v38 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v141 = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v27)
      {
        v45 = v27;
        v46 = *(int **)(v149 + 16);
        v47 = *(_WORD **)(v141 + 16);
        do
        {
          v48 = *v46++;
          _S0 = v48;
          __asm { FCVT            H0, S0 }
          *v47++ = _S0;
          --v45;
        }
        while (v45);
      }
    }
    v50 = a2[552];
    v51 = v142;
    v52 = v143;
    if (v143)
    {
      v53 = (unint64_t *)&v143->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v51 + 16), *(int *)(v51 + 8));
    if (v52)
    {
      v56 = (unint64_t *)&v52->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v58 = (void *)objc_opt_new();
    if (a5 && a2[121])
    {
      v59 = *(id *)(*a5 + 128);

      v58 = v59;
    }
    v60 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v25);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v61, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v62, CFSTR("ScaleOffset"));

    v63 = (void *)MEMORY[0x1E0CB37E8];
    if (v50)
      weights_file_index = 0;
    else
    objc_msgSend(v63, "numberWithUnsignedLong:", weights_file_index);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v65, CFSTR("ScaleIndex"));

    objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v151);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v66, CFSTR("ScaleShift"));

    if (a1[51])
    {
      if (*((_QWORD *)&v141 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v141 + 16), *(int *)(v141 + 8));
      if (*((_QWORD *)&v141 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1[51] + 8));
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v72, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v69);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v73, CFSTR("BiasOffset"));

      v74 = (void *)MEMORY[0x1E0CB37E8];
      if (v50)
        v75 = 0;
      else
      objc_msgSend(v74, "numberWithUnsignedLong:", v75);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v76, CFSTR("BiasIndex"));

      objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v29);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "setObject:forKeyedSubscript:", v77, CFSTR("BiasShift"));

    }
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v60, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    v78 = a5[1];
    if (v78 == *a5)
      goto LABEL_93;
    v79 = (const void **)(v78 - 144);
    v80 = *(unsigned __int8 *)(v78 - 121);
    v81 = v80;
    v82 = *(_QWORD *)(v78 - 136);
    if ((v80 & 0x80u) == 0)
      v83 = *(unsigned __int8 *)(v78 - 121);
    else
      v83 = *(_QWORD *)(v78 - 136);
    v84 = HIBYTE(v167);
    if (v167 < 0)
      v84 = *(_QWORD *)&buf[8];
    if (v83 != v84)
      goto LABEL_87;
    if (v167 >= 0)
      v85 = buf;
    else
      v85 = *(unsigned __int8 **)buf;
    if ((char)v80 < 0)
    {
      v87 = (const std::string::value_type *)*v79;
      if (memcmp(*v79, v85, *(_QWORD *)(v78 - 136)))
        goto LABEL_90;
    }
    else if ((_BYTE)v80)
    {
      v86 = (unsigned __int8 *)(v78 - 144);
      while (*v86 == *v85)
      {
        ++v86;
        ++v85;
        if (!--v80)
          goto LABEL_86;
      }
      goto LABEL_87;
    }
LABEL_86:
    std::string::append((std::string *)(v78 - 144), "__@pre_scale_bias");
    v81 = *(_BYTE *)(v78 - 121);
LABEL_87:
    if ((v81 & 0x80) == 0)
    {
      v88 = *(_OWORD *)v79;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v78 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v88;
      goto LABEL_91;
    }
    v87 = *(const std::string::value_type **)(v78 - 144);
    v82 = *(_QWORD *)(v78 - 136);
LABEL_90:
    std::string::__init_copy_ctor_external(&__str, v87, v82);
LABEL_91:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v170, &__str, &v177, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_93:
    v89 = v174;
    v174 = CFSTR("GOC");

    objc_storeStrong(&v175, v58);
    if (a2[121])
      v90 = a5 != 0;
    else
      v90 = 0;
    if (!v90)
    {
      if (a5)
      {
        v91 = a5[2];
        v92 = a5[1];
        if (v92 >= v91)
        {
          v94 = 0x8E38E38E38E38E39 * ((uint64_t)(v92 - *a5) >> 4);
          if (v94 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v95 = 0x8E38E38E38E38E39 * ((uint64_t)(v91 - *a5) >> 4);
          v96 = 2 * v95;
          if (2 * v95 <= v94 + 1)
            v96 = v94 + 1;
          if (v95 >= 0xE38E38E38E38E3)
            v97 = 0x1C71C71C71C71C7;
          else
            v97 = v96;
          *((_QWORD *)&v177 + 1) = a5 + 2;
          if (v97)
            v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v97);
          else
            v98 = 0;
          __str.__r_.__value_.__r.__words[0] = v97;
          __str.__r_.__value_.__l.__size_ = v97 + 144 * v94;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(_QWORD *)&v177 = v97 + 144 * v98;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          v93 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          v93 = v92 + 144;
          a5[1] = v92 + 144;
        }
        a5[1] = v93;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v172 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v167) < 0)
      operator delete(*(void **)buf);

    if (*((_QWORD *)&v141 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
      }
    }
    v101 = v143;
    if (v143)
    {
      v102 = (unint64_t *)&v143->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = v150;
    if (v150)
    {
      v105 = (unint64_t *)&v150->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = v148;
    if (v148)
    {
      v108 = (unint64_t *)&v148->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v9 = v154;
  }
  if (v9)
  {
    v110 = (unint64_t *)&v9->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v160 < 0)
    operator delete(v159);
  *(_QWORD *)buf = &v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v156 < 0)
    operator delete(v155);
}

void sub_191791674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,id a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a35);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, __int128 *a5, int a6)
{
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;
  __int128 v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  id v18;
  NSString *v19;
  NSString *v20;
  int v21;
  __CFString *v22;
  NSString *v23;
  __CFString *v24;
  BOOL v26;
  BOOL v27;
  NSString *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  unsigned __int8 v38;
  __int128 v39;
  _OWORD v40[2];

  v37 = a2;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v37)
    || !Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v37))
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Tensor dimensions exceed ANE limits.");
    goto LABEL_9;
  }
  v11 = *((_DWORD *)a5 + 2);
  if (v11 > 0x1F || ((1 << v11) & 0x8001019E) == 0)
  {
    if (!*((_BYTE *)a5 + 40) || *((_DWORD *)a5 + 9) == -1)
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Unsupported reduce axis mode");
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  v12 = a3[6];
  if (*((_BYTE *)a5 + 40) && *((_DWORD *)a5 + 9) != -1)
  {
LABEL_7:
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "ND mode with nd_axis != -1 is not mapped to ANE.");
    goto LABEL_9;
  }
  if ((*(_DWORD *)a5 - 11) <= 1)
  {
    v13 = a3[7] == 0;
    v14 = a5[1];
    v39 = *a5;
    v40[0] = v14;
    *(_OWORD *)((char *)v40 + 12) = *(__int128 *)((char *)a5 + 28);
    get_reduce_axes((uint64_t)&v39, v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v15, "count") == 1)
    {
      objc_msgSend(v15, "objectAtIndexedSubscript:", 0);
      v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v16 == CFSTR("Channel"))
      {
        if (a3[1] >= 0x801u)
        {
          *(_BYTE *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input channel count exceeds limits.");
          v17 = CFSTR("Channel");
          goto LABEL_49;
        }
        v17 = CFSTR("Channel");
      }
      else if (v16 == CFSTR("Width") || v16 == CFSTR("Height"))
      {
        v38 = 0;
        v18 = (id)spatial_argmax_valid_only_after_transpose(v37, a3, v16, a6, &v38);
        Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v37, v19);
        v21 = v38;
        if (a3[3] >= 0x10u && !v38)
        {
          *(_BYTE *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input height count exceeds limits.");
LABEL_49:

          goto LABEL_9;
        }
        Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v37, v20);
        v29 = 7;
        if (((a6 - 2) & 0xFFFFFFFD) == 0)
          v29 = 15;
        if (v29 < (int)a3[4] && !v21)
        {
          *(_BYTE *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input width count exceeds limits.");
          goto LABEL_49;
        }
      }
      goto LABEL_51;
    }
    if (objc_msgSend(v15, "count") != 2)
    {
LABEL_52:

      goto LABEL_53;
    }
    objc_msgSend(v15, "objectAtIndexedSubscript:", 0);
    v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectAtIndexedSubscript:", 1);
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v24 = v22;
    v26 = v17 == CFSTR("Height") && v22 == CFSTR("Width");
    v27 = v22 == CFSTR("Height") && v17 == CFSTR("Width");
    if (v27 || v26)
    {
      Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v37, v23);
      if (a3[3] < 0x10u)
      {
        Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v37, v28);
        v30 = 7;
        if (((a6 - 2) & 0xFFFFFFFD) == 0)
          v30 = 15;
        if (v30 >= (int)a3[4])
        {

LABEL_51:
          goto LABEL_52;
        }
        *(_BYTE *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input width count exceeds limits.");
      }
      else
      {
        *(_BYTE *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input height count exceeds limits.");
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Unsupported reduce axis mode for arg max");
    }

    goto LABEL_49;
  }
LABEL_53:
  v31 = (int)a3[1];
  if (v31 < 4)
    goto LABEL_57;
  v32 = 2;
  if (v31 >> 1 > 2)
    v32 = v31 >> 1;
  if ((v31 & 1) == 0)
    goto LABEL_57;
  v35 = 0;
  while (v32 - 2 != v35)
  {
    v36 = v31 % (v35 + 3);
    ++v35;
    if (!v36)
    {
      v32 = v35 + 1;
      break;
    }
  }
  if (v31 >= 0x801 && v32 >= v31 >> 1)
  {
    v34 = 0;
    v33 = "ANECompiler doesn't support input channel count that is a                                         prime and ex"
          "ceeds ANE's Unicast Cin limit. This can be addressed                                         by decomposing in"
          "to multiple ops that consume non-primes.";
  }
  else
  {
LABEL_57:
    v33 = "Success";
    v34 = 1;
  }
  *(_BYTE *)a1 = v34;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), v33);
LABEL_9:

}

void sub_191791BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reshape_kernel::~mix_reshape_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_reshape_kernel::compile(NSString *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  float *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  Espresso::ANECompilerEngine *v18;
  NSString *v19;
  int32x4_t *v20;
  int32x4_t *v21;
  unint64_t *v22;
  unint64_t v23;
  int32x4_t *v24;
  unint64_t *v25;
  unint64_t v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  uint64_t v30;
  __int32 v31;
  __int32 v32;
  int v33;
  int v34;
  BOOL v35;
  std::string *v36;
  std::string *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  std::string *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  NSString v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  float v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _DWORD *v66;
  unsigned int v67;
  int *v68;
  _WORD *v69;
  int v70;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  int *v83;
  _WORD *v84;
  int v85;
  int v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  id v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t weights_file_index;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  __int128 v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  std::string *v119;
  std::string *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  std::string *v127;
  std::string *v128;
  uint64_t v129;
  char v130;
  std::string::size_type size;
  std::string::size_type v132;
  uint64_t v133;
  unsigned __int8 *v134;
  std::string *v135;
  std::string *v136;
  std::string *v137;
  std::string *v138;
  std::string *v139;
  const std::string::value_type *data;
  __int128 v141;
  __CFString *v142;
  std::string *v143;
  std::string *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  std::string *v149;
  std::string *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  std::string *v155;
  std::string *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  const char *v193;
  int *v194;
  uint64_t i;
  float v196;
  int v197;
  _WORD *v198;
  int v199;
  std::runtime_error *exception;
  int *v202;
  uint64_t j;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  Espresso *v209;
  const char *v210;
  float v211;
  NSObject *v213;
  double v214;
  uint64_t v215;
  _WORD *v216;
  int v217;
  int32x4_t v219;
  Espresso::ANECompilerEngine *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  __int128 v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  _QWORD *v226;
  _BYTE v227[32];
  void *v228;
  char v229;
  id v230;
  id v231;
  id v232;
  __int128 v233;
  __int128 v234;
  int v235;
  __int128 v236;
  __int128 v237;
  int v238;
  uint64_t v239;
  std::string *v240;
  _QWORD v241[2];
  std::__shared_weak_count *v242;
  int32x4_t *v243;
  std::__shared_weak_count *v244;
  float *v245;
  std::__shared_weak_count *v246;
  const void *v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  __int128 v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  __int128 v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  void **v257[2];
  void *v258[2];
  char v259;
  _BYTE v260[24];
  _BYTE v261[32];
  void *v262;
  char v263;
  id v264;
  id v265;
  id v266;
  uint64_t v267;
  std::string __str;
  __int128 v269;
  _BYTE v270[32];
  void *v271;
  char v272;
  id v273;
  id v274;
  id v275;
  _BYTE buf[24];
  __int128 v277;
  std::vector<std::string> v278;
  void *__p;
  char v280;
  id v281;
  __CFString *v282;
  id v283[6];

  v283[3] = *(id *)MEMORY[0x1E0C80C00];
  v249 = 0;
  v250 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v250 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v249 = v7) == 0))
  {
    v193 = "Inconsistent state: null network";
    goto LABEL_342;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v193 = "Inconsistent state: blob_storage";
LABEL_342:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v193);
  }
  v258[0] = a3[6];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v258[0], (__int128 **)v258);
  v9 = (const void *)*((_QWORD *)v8 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v247 = v9;
  v248 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v258[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)v258);
  v14 = (float *)*((_QWORD *)v13 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v245 = v14;
  v246 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  v18 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v18, v19))
  {
    Espresso::ANECompilerEngine::reshape_kernel::compile(this, a2, a3);
    goto LABEL_324;
  }
  if (v9
  {
    v21 = v20;
    v243 = v20;
    v244 = v10;
    if (v10)
    {
      v22 = (unint64_t *)&v10->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  else
  {
    v21 = 0;
    v243 = 0;
    v244 = 0;
  }
  v220 = v18;
  v241[1] = v24;
  v242 = v15;
  if (v15)
  {
    v25 = (unint64_t *)&v15->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = v21[11].i32[0];
  v28 = v21[11].i32[2];
  v29 = v21[11].i32[3];
  v30 = v24[11].u32[0];
  v31 = v24[11].i32[2];
  v32 = v24[11].i32[3];
  v33 = *(unsigned __int8 *)(v7 + 1281);
  v239 = 0;
  v240 = 0;
  v241[0] = 0;
  v219 = v24[10];
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v21[10], v219)), 0xFuLL))) & 1) != 0
    && v27 == (_DWORD)v30
    && v29 == v32
    && v28 == v31
    || ((v34 = *((_DWORD *)this + 76)) != 0 ? (v35 = 1) : (v35 = (v29 & v32) != -1), !v35))
  {
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)v258, a3, v219.u32[0], v219.u32[2], v219.u32[1], v219.u32[3], v30);
    v38 = 0x8E38E38E38E38E39 * (((uint64_t)v240 - v239) >> 4);
    if (v38 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v39 = 0x1C71C71C71C71C72 * ((v241[0] - v239) >> 4);
    if (v39 <= v38 + 1)
      v39 = v38 + 1;
    if (0x8E38E38E38E38E39 * ((v241[0] - v239) >> 4) >= 0xE38E38E38E38E3)
      v40 = 0x1C71C71C71C71C7;
    else
      v40 = v39;
    *((_QWORD *)&v277 + 1) = v241;
    if (v40)
      v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v40);
    else
      v41 = 0;
    *(_QWORD *)buf = v40;
    *(_QWORD *)&buf[8] = v40 + 16 * (((uint64_t)v240 - v239) >> 4);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v277 = v40 + 144 * v41;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v258);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v239, buf);
    v42 = v240;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    v240 = v42;

    goto LABEL_50;
  }
  if (!v34 && !v33 && (v29 & v32) != 0xFFFFFFFF)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v258, a3);
    v236 = 0u;
    v237 = 0u;
    v238 = 1065353216;
    *(_QWORD *)buf = CFSTR("Batch");
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Batch"), buf)[3] = CFSTR("Depth");
    *(_QWORD *)buf = CFSTR("Depth");
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Depth"), buf)[3] = CFSTR("Batch");
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)buf, a3, (uint64_t)&v236);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)v258, (__int128 *)buf);

    if (v280 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v36 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v121 = 0x8E38E38E38E38E39 * (((uint64_t)v240 - v239) >> 4);
      if (v121 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v122 = 0x1C71C71C71C71C72 * ((v241[0] - v239) >> 4);
      if (v122 <= v121 + 1)
        v122 = v121 + 1;
      if (0x8E38E38E38E38E39 * ((v241[0] - v239) >> 4) >= 0xE38E38E38E38E3)
        v123 = 0x1C71C71C71C71C7;
      else
        v123 = v122;
      *((_QWORD *)&v277 + 1) = v241;
      if (v123)
        v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v123);
      else
        v124 = 0;
      *(_QWORD *)buf = v123;
      *(_QWORD *)&buf[8] = v123 + 144 * v121;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v277 = v123 + 144 * v124;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v258);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v239, buf);
      v37 = v240;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v240, (uint64_t)v258);
      v37 = v36 + 6;
    }
    v240 = v37;
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)buf, a3, v219.u32[2], v219.u32[0], v219.u32[1], v219.u32[3], v30);
    v149 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v151 = 0x8E38E38E38E38E39 * (((uint64_t)v240 - v239) >> 4);
      if (v151 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v152 = 0x1C71C71C71C71C72 * ((v241[0] - v239) >> 4);
      if (v152 <= v151 + 1)
        v152 = v151 + 1;
      if (0x8E38E38E38E38E39 * ((v241[0] - v239) >> 4) >= 0xE38E38E38E38E3)
        v153 = 0x1C71C71C71C71C7;
      else
        v153 = v152;
      *((_QWORD *)&v269 + 1) = v241;
      if (v153)
        v153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v153);
      else
        v154 = 0;
      __str.__r_.__value_.__r.__words[0] = v153;
      __str.__r_.__value_.__l.__size_ = v153 + 144 * v151;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v269 = v153 + 144 * v154;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v239, &__str);
      v150 = v240;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v240, (uint64_t)buf);
      v150 = v149 + 6;
    }
    v240 = v150;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, a3);
    v233 = 0u;
    v234 = 0u;
    v235 = 1065353216;
    *(_QWORD *)&v223 = CFSTR("Batch");
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Batch"), &v223)[3] = CFSTR("Depth");
    *(_QWORD *)&v223 = CFSTR("Depth");
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Depth"), &v223)[3] = CFSTR("Batch");
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)&v223, a3, (uint64_t)&v233);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__str, &v223);

    if (v229 < 0)
      operator delete(v228);
    v257[0] = (void **)v227;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v257);
    v257[0] = (void **)&v225;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v257);
    if (SHIBYTE(v224) < 0)
      operator delete((void *)v223);
    v155 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v157 = 0x8E38E38E38E38E39 * (((uint64_t)v240 - v239) >> 4);
      if (v157 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v158 = 0x1C71C71C71C71C72 * ((v241[0] - v239) >> 4);
      if (v158 <= v157 + 1)
        v158 = v157 + 1;
      if (0x8E38E38E38E38E39 * ((v241[0] - v239) >> 4) >= 0xE38E38E38E38E3)
        v159 = 0x1C71C71C71C71C7;
      else
        v159 = v158;
      v226 = v241;
      if (v159)
        v159 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v159);
      else
        v160 = 0;
      *(_QWORD *)&v223 = v159;
      *((_QWORD *)&v223 + 1) = v159 + 144 * v157;
      v224 = *((_QWORD *)&v223 + 1);
      v225 = (std::__shared_weak_count *)(v159 + 144 * v160);
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*((std::string **)&v223 + 1), (uint64_t)&__str);
      v224 += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v239, &v223);
      v156 = v240;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v223);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v240, (uint64_t)&__str);
      v156 = v155 + 6;
    }
    v240 = v156;
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v233);

    if (v272 < 0)
      operator delete(v271);
    *(_QWORD *)&v223 = v270;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
    *(_QWORD *)&v223 = &v269;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);

    if (v280 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v236);

LABEL_50:
    if (v263 < 0)
      operator delete(v262);
    *(_QWORD *)buf = v261;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v260;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v259 < 0)
      operator delete(v258[0]);
    goto LABEL_54;
  }
  if (v33)
    _ZF = v34 == 0;
  else
    _ZF = 0;
  if (!_ZF || (v29 & v32) == -1)
  {
    if (v33)
      v104 = (v29 & v32) == -1;
    else
      v104 = 1;
    if (v34 == 1 && v104)
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v258, a3);
      v236 = 0u;
      v237 = 0u;
      v238 = 1065353216;
      *(_QWORD *)buf = CFSTR("Height");
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Height"), buf)[3] = CFSTR("Channel");
      *(_QWORD *)buf = CFSTR("Width");
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Width"), buf)[3] = CFSTR("Height");
      *(_QWORD *)buf = CFSTR("Channel");
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Channel"), buf)[3] = CFSTR("Width");
      if (v29 == 1)
      {
        *(_QWORD *)buf = CFSTR("Batch");
        std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Batch"), buf)[3] = CFSTR("Depth");
        *(_QWORD *)buf = CFSTR("Depth");
        std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Depth"), buf)[3] = CFSTR("Batch");
      }
      Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)buf, a3, (uint64_t)&v236);
      Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)v258, (__int128 *)buf);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)buf);
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v239, (uint64_t)v258);
      if (v32 == 1)
        v105 = v219.u32[0];
      else
        v105 = v219.u32[2];
      if (v32 == 1)
        v106 = v219.u32[2];
      else
        v106 = v219.u32[0];
      Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)buf, a3, v106, v105, v219.u32[3], v30, v219.u32[1]);
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v239, (uint64_t)buf);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, a3);
      v233 = 0u;
      v234 = 0u;
      v235 = 1065353216;
      *(_QWORD *)&v223 = CFSTR("Channel");
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Channel"), &v223)[3] = CFSTR("Height");
      *(_QWORD *)&v223 = CFSTR("Height");
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Height"), &v223)[3] = CFSTR("Width");
      *(_QWORD *)&v223 = CFSTR("Width");
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Width"), &v223)[3] = CFSTR("Channel");
      if (v32 == 1)
      {
        *(_QWORD *)&v223 = CFSTR("Batch");
        std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Batch"), &v223)[3] = CFSTR("Depth");
        *(_QWORD *)&v223 = CFSTR("Depth");
        std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Depth"), &v223)[3] = CFSTR("Batch");
      }
      Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)&v223, a3, (uint64_t)&v233);
      Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__str, &v223);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v223);
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v239, (uint64_t)&__str);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v233);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)buf);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v236);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(v258);
    }
  }
  else
  {
    v236 = 0u;
    v237 = 0u;
    v238 = 1065353216;
    v258[0] = CFSTR("Channel");
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Channel"), v258)[3] = CFSTR("Depth");
    v258[0] = CFSTR("Depth");
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v236, (unint64_t)CFSTR("Depth"), v258)[3] = CFSTR("Channel");
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v258, a3);
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)buf, a3, (uint64_t)&v236);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)v258, (__int128 *)buf);

    if (v280 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v119 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v120 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v239, (uint64_t)v258);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v240, (uint64_t)v258);
      v120 = v119 + 6;
    }
    v240 = v120;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)&__str, a3, v219.u32[0], v219.u32[1], v219.u32[2], v219.u32[3], v30);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)buf, (__int128 *)&__str);

    if (v272 < 0)
      operator delete(v271);
    *(_QWORD *)&v223 = v270;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
    *(_QWORD *)&v223 = &v269;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v136 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v137 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v239, (uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v240, (uint64_t)buf);
      v137 = v136 + 6;
    }
    v240 = v137;
    v233 = 0u;
    v234 = 0u;
    v235 = 1065353216;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("Channel");
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Channel"), &__str)[3] = CFSTR("Depth");
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("Depth");
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v233, (unint64_t)CFSTR("Depth"), &__str)[3] = CFSTR("Channel");
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, a3);
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)&v223, a3, (uint64_t)&v233);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__str, &v223);

    if (v229 < 0)
      operator delete(v228);
    v257[0] = (void **)v227;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v257);
    v257[0] = (void **)&v225;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v257);
    if (SHIBYTE(v224) < 0)
      operator delete((void *)v223);
    v138 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v139 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v239, (uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v240, (uint64_t)&__str);
      v139 = v138 + 6;
    }
    v240 = v139;

    if (v272 < 0)
      operator delete(v271);
    *(_QWORD *)&v223 = v270;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
    *(_QWORD *)&v223 = &v269;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v233);

    if (v280 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);

    if (v263 < 0)
      operator delete(v262);
    *(_QWORD *)buf = v261;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v260;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v259 < 0)
      operator delete(v258[0]);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v236);
  }
LABEL_54:
  v222 = v250;
  if (v250)
  {
    v43 = (unint64_t *)&v250->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v221 = v15;
  if (v15)
  {
    v45 = (unint64_t *)&v15->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v258);
  v266 = 0;
  v265 = 0;
  v267 = 0x100000000;
  v47 = this[48];
  v48 = (std::__shared_weak_count *)this[49];
  *(_QWORD *)&v236 = v47;
  *((_QWORD *)&v236 + 1) = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  if (!v47 || *(_BYTE *)((*((uint64_t (**)(char *))this[40] + 13))((char *)this + 320) + 40))
    goto LABEL_294;
  v51 = v14[28];
  *(_QWORD *)&v233 = v47;
  *((_QWORD *)&v233 + 1) = v48;
  if (v48)
  {
    v52 = (unint64_t *)&v48->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = (std::__shared_weak_count *)this[51];
  v257[0] = (void **)this[50];
  v257[1] = (void **)&v54->__vftable;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v233, (uint64_t *)v257, (uint64_t)&v223, v51);
  if (v54)
  {
    v57 = (unint64_t *)&v54->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v236;
  v63 = *(unsigned int *)(v236 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v255, 2 * v63, 1, 1, 1);
  v64 = (int)v63;
  v254 = 0uLL;
  v65 = v63;
  v66 = this[50];
  if (v66)
    v65 = v66[2];
  if (!*((_BYTE *)a2 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v63);
    v194 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    if ((int)v63 >= 1)
    {
      for (i = 0; i != v63; ++i)
      {
        v196 = *(float *)(*(_QWORD *)(v62 + 16) + i * 4);
        *(float *)&v197 = ldexp(1.0, -(int)v226) * v196;
        v194[i] = v197;
      }
    }
    if ((_DWORD)v63)
    {
      v198 = *(_WORD **)(v255 + 16);
      do
      {
        v199 = *v194++;
        _S0 = v199;
        __asm { FCVT            H0, S0 }
        *v198++ = _S0;
        --v64;
      }
      while (v64);
    }
    v252 = 0;
    v253 = 0;
    if (this[50])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v65);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v252, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * v65);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v254, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v202 = *(int **)(v252 + 16);
      if (v65 >= 1)
      {
        for (j = 0; j != v65; ++j)
        {
          if ((int)v63 - 1 >= (int)j)
            v204 = j;
          else
            v204 = v63 - 1;
          *(float *)&v205 = *(float *)(*(_QWORD *)(v224 + 16) + 4 * j) * *(float *)(*(_QWORD *)(v223 + 16) + 4 * v204);
          v202[j] = v205;
          v206 = (int)v226;
          v207 = HIDWORD(v226);
          *(float *)&v208 = ldexp(1.0, HIDWORD(v226) - (int)v226) * *(float *)&v205;
          v202[j] = v208;
          v211 = ldexp(1.0, v206 - v207) * *(float *)&v208;
          if (v211 < -127.0 || v211 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v209, v210);
            v213 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
            {
              v214 = *(float *)&v202[j];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v211;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = HIDWORD(v226);
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = (_DWORD)v226;
              LOWORD(v277) = 2048;
              *(double *)((char *)&v277 + 2) = v214;
              _os_log_error_impl(&dword_190DAF000, v213, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (v65)
      {
        v215 = v65;
        v216 = *(_WORD **)(v254 + 16);
        do
        {
          v217 = *v202++;
          _S0 = v217;
          __asm { FCVT            H0, S0 }
          *v216++ = _S0;
          --v215;
        }
        while (v215);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(exception);
  }
  v67 = HIDWORD(v226);
  if ((_DWORD)v63)
  {
    v68 = *(int **)(v223 + 16);
    v69 = *(_WORD **)(v255 + 16);
    do
    {
      v70 = *v68++;
      _S0 = v70;
      __asm { FCVT            H0, S0 }
      *v69++ = _S0;
      --v64;
    }
    while (v64);
  }
  if (v66)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v65, 1, 1, 1);
    v75 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v76 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
    v254 = v75;
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v80 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v65)
    {
      v82 = v65;
      v83 = *(int **)(v224 + 16);
      v84 = *(_WORD **)(v254 + 16);
      do
      {
        v85 = *v83++;
        _S0 = v85;
        __asm { FCVT            H0, S0 }
        *v84++ = _S0;
        --v82;
      }
      while (v82);
    }
  }
  v87 = *((unsigned __int8 *)a2 + 552);
  v88 = v255;
  v89 = v256;
  v252 = v255;
  v253 = v256;
  if (v256)
  {
    v90 = (unint64_t *)&v256->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v92 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v88 + 16), *(int *)(v88 + 8));
  if (v89)
  {
    v93 = (unint64_t *)&v89->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v95 = (void *)objc_opt_new();
  if (*((_BYTE *)a2 + 121))
  {
    v96 = *(id *)(v239 + 128);

    v95 = v96;
  }
  v97 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v63);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "setObject:forKeyedSubscript:", v98, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v92);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "setObject:forKeyedSubscript:", v99, CFSTR("ScaleOffset"));

  v100 = (void *)MEMORY[0x1E0CB37E8];
  if (v87)
    weights_file_index = 0;
  else
  objc_msgSend(v100, "numberWithUnsignedLong:", weights_file_index);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "setObject:forKeyedSubscript:", v107, CFSTR("ScaleIndex"));

  objc_msgSend(v97, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v226);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "setObject:forKeyedSubscript:", v108, CFSTR("ScaleShift"));

  if (this[50])
  {
    v109 = v254;
    v251 = v254;
    if (*((_QWORD *)&v254 + 1))
    {
      v110 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    v112 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v109 + 16), *(int *)(v109 + 8));
    if (*((_QWORD *)&v109 + 1))
    {
      v113 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v109 + 1) + 16))(*((_QWORD *)&v109 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v109 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this[50] + 2));
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v97, "setObject:forKeyedSubscript:", v115, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v112);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v97, "setObject:forKeyedSubscript:", v116, CFSTR("BiasOffset"));

    v117 = (void *)MEMORY[0x1E0CB37E8];
    if (v87)
      v118 = 0;
    else
    objc_msgSend(v117, "numberWithUnsignedLong:", v118);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v97, "setObject:forKeyedSubscript:", v125, CFSTR("BiasIndex"));

    objc_msgSend(v97, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v67);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "setObject:forKeyedSubscript:", v126, CFSTR("BiasShift"));

  }
  objc_msgSend(v95, "setObject:forKeyedSubscript:", v97, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
  v127 = v240;
  if (v240 != (std::string *)v239)
  {
    v128 = v240 - 6;
    v129 = HIBYTE(v240[-6].__r_.__value_.__r.__words[2]);
    v130 = v129;
    size = v240[-6].__r_.__value_.__l.__size_;
    if ((v129 & 0x80u) == 0)
      v132 = HIBYTE(v240[-6].__r_.__value_.__r.__words[2]);
    else
      v132 = v240[-6].__r_.__value_.__l.__size_;
    v133 = buf[23];
    if (buf[23] < 0)
      v133 = *(_QWORD *)&buf[8];
    if (v132 == v133)
    {
      if (buf[23] >= 0)
        v134 = buf;
      else
        v134 = *(unsigned __int8 **)buf;
      if ((char)v129 < 0)
      {
        data = (const std::string::value_type *)v128->__r_.__value_.__r.__words[0];
        if (memcmp(v128->__r_.__value_.__l.__data_, v134, v240[-6].__r_.__value_.__l.__size_))
          goto LABEL_213;
      }
      else if ((_BYTE)v129)
      {
        v135 = v240 - 6;
        while (v135->__r_.__value_.__s.__data_[0] == *v134)
        {
          v135 = (std::string *)((char *)v135 + 1);
          ++v134;
          if (!--v129)
            goto LABEL_209;
        }
        goto LABEL_210;
      }
LABEL_209:
      std::string::append(v127 - 6, "__@pre_scale_bias");
      v130 = HIBYTE(v127[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_210:
    if ((v130 & 0x80) == 0)
    {
      v141 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v127[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v141;
      goto LABEL_214;
    }
    data = v127[-6].__r_.__value_.__l.__data_;
    size = v127[-6].__r_.__value_.__l.__size_;
LABEL_213:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_214:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v278, &__str, &v269, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v142 = v282;
  v282 = CFSTR("GOC");

  objc_storeStrong(v283, v95);
  if (!*((_BYTE *)a2 + 121))
  {
    v143 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v145 = 0x8E38E38E38E38E39 * (((uint64_t)v240 - v239) >> 4);
      if (v145 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v146 = 0x1C71C71C71C71C72 * ((v241[0] - v239) >> 4);
      if (v146 <= v145 + 1)
        v146 = v145 + 1;
      if (0x8E38E38E38E38E39 * ((v241[0] - v239) >> 4) >= 0xE38E38E38E38E3)
        v147 = 0x1C71C71C71C71C7;
      else
        v147 = v146;
      *((_QWORD *)&v269 + 1) = v241;
      if (v147)
        v147 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v147);
      else
        v148 = 0;
      __str.__r_.__value_.__r.__words[0] = v147;
      __str.__r_.__value_.__l.__size_ = v147 + 144 * v145;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v269 = v147 + 144 * v148;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v239, &__str);
      v144 = v240;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v240, (uint64_t)buf);
      v144 = v143 + 6;
    }
    v240 = v144;
  }

  if (v280 < 0)
    operator delete(__p);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  v161 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
  if (*((_QWORD *)&v254 + 1))
  {
    v162 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v256;
  if (v256)
  {
    v165 = (unint64_t *)&v256->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v225;
  if (v225)
  {
    v168 = (unint64_t *)&v225->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v171 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
LABEL_294:
  if (v48)
  {
    v173 = (unint64_t *)&v48->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  if (v263 < 0)
    operator delete(v262);
  *(_QWORD *)buf = v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v260;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v259 < 0)
    operator delete(v258[0]);
  if (v221)
  {
    v175 = (unint64_t *)&v221->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  if (v222)
  {
    v177 = (unint64_t *)&v222->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  (*((void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))this[40] + 4))((char *)this + 320, a2, &v239);
  v258[0] = &v239;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v258);
  v179 = v242;
  v18 = v220;
  if (v242)
  {
    v180 = (unint64_t *)&v242->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = v244;
  if (v244)
  {
    v183 = (unint64_t *)&v244->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v15 = v246;
LABEL_324:

  if (v15)
  {
    v185 = (unint64_t *)&v15->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v187 = v248;
  if (v248)
  {
    v188 = (unint64_t *)&v248->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = v250;
  if (v250)
  {
    v191 = (unint64_t *)&v250->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
}

void sub_191793A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a62 = (uint64_t)&a49;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a54);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_reshape_kernel::compile(NSString *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_reshape_kernel::compile(this - 40, a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_reshape_kernel::~mix_reshape_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v13 = Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)a1, a2);
  v14 = v13[15];
  v13[15] = CFSTR("Reshape");

  v15 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v16, CFSTR("ReshapedBatch"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v17, CFSTR("ReshapedDepth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v18, CFSTR("ReshapedChannel"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a6);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v19, CFSTR("ReshapedHeight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a7);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v20, CFSTR("ReshapedWidth"));

  v21 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v15;

}

void sub_191793FEC(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_191794448(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()(uint64_t a1, id *a2, uint64_t a3)
{
  id *v5;
  id v6;
  void *v7;
  _QWORD *i;
  void *v9;
  void *v10;
  id v11;

  v5 = Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)a1, a2);
  v6 = v5[15];
  v5[15] = CFSTR("Transpose");

  v7 = (void *)objc_opt_new();
  v11 = (id)objc_opt_new();
  for (i = *(_QWORD **)(a3 + 16); i; i = (_QWORD *)*i)
  {
    v9 = (void *)objc_opt_new();
    objc_msgSend(v9, "setObject:forKeyedSubscript:", i[2], CFSTR("TransposeSourceDimension"));
    objc_msgSend(v9, "setObject:forKeyedSubscript:", i[3], CFSTR("TransposeDestinationDimension"));
    objc_msgSend(v11, "addObject:", v9);

  }
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, CFSTR("TransposeDimensions"));
  v10 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v7;

}

void sub_191794550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id *v10;
  void *v11;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(v10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::vector[abi:ne180100](_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](a1, a3);
    v6 = (_QWORD *)a1[1];
    v7 = 8 * a3;
    do
    {
      v8 = *a2++;
      *v6++ = v8;
      v7 -= 8;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_1917945F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::mix_reshape_like_kernel::~mix_reshape_like_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_reshape_like_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 328), a3, a4, a5);
}

std::__shared_weak_count *Espresso::ANECompilerEngine::mix_reshape_like_kernel::is_valid_for_engine(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  Espresso::net *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *is_valid_for_engine;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  void *v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void *__p;
  void *v59;
  uint64_t v60;
  std::string v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65;
  int64x2_t *v66;
  std::__shared_weak_count *v67;
  Espresso::net *v68;
  std::__shared_weak_count *v69;
  void **v70;

  v6 = *(_QWORD *)(a3 + 48);
  v68 = 0;
  v69 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v69 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(Espresso::net **)(v6 + 72);
    v68 = v8;
  }
  else
  {
    v8 = 0;
  }
  v61.__r_.__value_.__r.__words[0] = a3 + 72;
  v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v8 + 56, (unint64_t *)(a3 + 72), (uint64_t)&std::piecewise_construct, (uint64_t **)&v61);
  v10 = v9[3];
  if (0xAAAAAAAAAAAAAAABLL * ((v9[4] - v10) >> 3) < 2)
  {
LABEL_11:
    v15 = *(__int128 **)(a3 + 24);
    v16 = *((_QWORD *)v15 + 4);
    v17 = v15[1];
    v55 = *v15;
    v56 = v17;
    v57 = v16;
    __p = 0;
    v59 = 0;
    v60 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v15 + 5), *((_QWORD *)v15 + 6), (uint64_t)(*((_QWORD *)v15 + 6) - *((_QWORD *)v15 + 5)) >> 2);
    v49 = 0;
    LOWORD(v50) = 1;
    HIDWORD(v50) = 2;
    *(_OWORD *)v47 = v55;
    v48 = v56;
    Espresso::ANECompilerEngine::reshape_kernel::reshape_kernel((uint64_t)&v61, (_QWORD *)(a1 + 8), (uint64_t)v47);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2D784F8;
    v65 = &unk_1E2D78658;
    if (__p)
    {
      v59 = __p;
      operator delete(__p);
    }
    v47[0] = 0;
    v47[1] = 0;
    v48 = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v47, *(__int128 **)a3, *(__int128 **)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 6);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v49, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 6);
    v18 = *(std::__shared_weak_count **)(a3 + 56);
    v52 = *(_QWORD *)(a3 + 48);
    v53 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v54 = *(_OWORD *)(a3 + 64);
    v21 = (char *)v47[1];
    v22 = (char *)v47[0] + 64;
    if ((char *)v47[0] + 64 != v47[1])
    {
      while (v21 != v22)
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        if (v23)
        {
          *((_QWORD *)v21 - 2) = v23;
          operator delete(v23);
        }
        v21 -= 64;
      }
      v47[1] = v22;
    }
    v24 = a2[1];
    *(_QWORD *)&v46 = *a2;
    *((_QWORD *)&v46 + 1) = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    is_valid_for_engine = (std::__shared_weak_count *)Espresso::ANECompilerEngine::mix_reshape_kernel::is_valid_for_engine((uint64_t)&v61, &v46, (Espresso::ANECompilerEngine *)v47);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v53;
    if (v53)
    {
      v32 = (unint64_t *)&v53->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v70 = (void **)&v49;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v70);
    v70 = v47;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v70);
    Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(&v65);
    Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)&v61);
  }
  else
  {
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v10 + v11;
      v14 = (char *)(v13 + 24);
      if (*(char *)(v13 + 47) < 0)
        v14 = *(char **)v14;
      if (Espresso::net::is_blob_dynamic(v68, v14))
        break;
      ++v12;
      v10 = v9[3];
      v11 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((v9[4] - v10) >> 3) <= v12)
        goto LABEL_11;
    }
    v38 = (std::__shared_weak_count *)a2[1];
    v66 = (int64x2_t *)*a2;
    v67 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::operator+<char>();
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v61, (__int128 *)v47, a3, 0);
    Espresso::emit_kernel_validation_warning(&v66, (Espresso::base_kernel::validate_for_engine_warning_t *)&v61);
    v41 = v64;
    if (v64)
    {
      v42 = (unint64_t *)&v64->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v70 = (void **)&v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v70);
    v70 = (void **)&v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v70);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48) < 0)
      operator delete(v47[0]);
    is_valid_for_engine = v67;
    if (v67)
    {
      v44 = (unint64_t *)&v67->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))is_valid_for_engine->__on_zero_shared)(is_valid_for_engine);
        std::__shared_weak_count::__release_weak(is_valid_for_engine);
      }
      is_valid_for_engine = 0;
    }
  }
  v34 = v69;
  if (v69)
  {
    v35 = (unint64_t *)&v69->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return is_valid_for_engine;
}

void sub_191794B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a32);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 104);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reshape_like_kernel::compile(Espresso::ANECompilerEngine::mix_reshape_like_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_like kernel should have been replaced with a static reshape during transformation");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_reshape_like_kernel::compile(Espresso::ANECompilerEngine::mix_reshape_like_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_like kernel should have been replaced with a static reshape during transformation");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_reshape_like_kernel::~mix_reshape_like_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_softmax_kernel::~mix_softmax_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::mix_softmax_kernel::is_valid_for_engine(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  uint64_t is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int64x2_t *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned __int8 v56;
  std::__shared_weak_count *v57;
  const Espresso::net *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  const Espresso::net *v67;
  unint64_t *v68;
  unint64_t v69;
  _OWORD *v70;
  uint64_t v71;
  __int128 v72;
  unint64_t *v73;
  unint64_t v74;
  BOOL v75;
  const __CFString *v76;
  unsigned int v77;
  int64x2_t *v78;
  unint64_t *v79;
  unint64_t v80;
  int64x2_t **v81;
  int64x2_t *v82;
  unint64_t *v83;
  unint64_t v84;
  int64x2_t *v85;
  unint64_t *v86;
  unint64_t v87;
  int64x2_t *v88;
  unint64_t *v89;
  unint64_t v90;
  __CFString *v91;
  __int128 v92;
  int v93;
  int64x2_t *v94;
  unint64_t *v95;
  unint64_t v96;
  std::string *v97;
  uint64_t **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  int64x2_t *v109;
  std::__shared_weak_count *v110;
  std::string v111;
  std::string v112;
  int64x2_t *v113[2];
  _QWORD v114[2];
  uint64_t v115;
  uint64_t v116;
  int64x2_t *v117[2];
  int64x2_t *v118[2];
  char v119[8];
  __int128 v120;
  char v121;
  _OWORD v122[2];
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t v126;
  const Espresso::base_kernel::validate_for_engine_args_t *v127;
  std::__shared_weak_count *v128;
  _DWORD v129[8];
  _OWORD v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  uint64_t v134;
  const Espresso::base_kernel::validate_for_engine_args_t *v135;
  std::__shared_weak_count *v136;
  _DWORD v137[8];
  int64x2_t *v138[2];
  _QWORD v139[2];
  std::string __p;
  _BYTE v141[24];
  _BYTE v142[32];
  std::__shared_weak_count *v143;
  void *v144;
  void *v145;
  __int128 v146;
  std::string v147;
  __int128 v148;
  uint64_t v149;
  int64x2_t *v150[2];
  uint64_t v151[2];
  _BYTE v152[28];
  uint64_t v153;
  uint64_t v154;
  int64x2_t *v155[2];
  int64x2_t *v156;
  std::__shared_weak_count *v157;
  int64x2_t *v158;
  std::__shared_weak_count *v159;
  int64x2_t *v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  const Espresso::base_kernel::validate_for_engine_args_t *v163;
  std::__shared_weak_count *v164;
  void **v165;

  v6 = (_OWORD *)a3[6];
  v163 = 0;
  v164 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v164 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v6 + 9);
    v163 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v162 = *a2;
    v108 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::softmax_kernel::is_valid_for_engine(a1, (uint64_t)&v162, a3);
    if (v108)
    {
      p_shared_owners = (unint64_t *)&v108->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    goto LABEL_64;
  }
  if (a3[1] - *a3 != 64)
  {
    v23 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v160 = *(int64x2_t **)a2;
    v161 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    std::string::basic_string[abi:ne180100]<0>(&v147, "Softmax kernel with multiple inputs not supported on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v147, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v160, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v26 = v143;
    if (v143)
    {
      v27 = (unint64_t *)&v143->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    *(_QWORD *)v152 = v142;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    *(_QWORD *)v152 = v141;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    v20 = v161;
    if (!v161)
      goto LABEL_63;
    v29 = (unint64_t *)&v161->__shared_owners_;
    do
      v22 = __ldaxr(v29);
    while (__stlxr(v22 - 1, v29));
    goto LABEL_61;
  }
  if (a3[4] - a3[3] != 64)
  {
    v30 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v158 = *(int64x2_t **)a2;
    v159 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    std::string::basic_string[abi:ne180100]<0>(&v147, "Softmax kernel has multiple outputs not supported on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v147, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v158, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v33 = v143;
    if (v143)
    {
      v34 = (unint64_t *)&v143->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    *(_QWORD *)v152 = v142;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    *(_QWORD *)v152 = v141;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    v20 = v159;
    if (!v159)
      goto LABEL_63;
    v36 = (unint64_t *)&v159->__shared_owners_;
    do
      v22 = __ldaxr(v36);
    while (__stlxr(v22 - 1, v36));
    goto LABEL_61;
  }
  if (*(_BYTE *)(a1 + 304))
  {
    v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v156 = *(int64x2_t **)a2;
    v157 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::string::basic_string[abi:ne180100]<0>(&v147, "Softmax Cross Entropy loss not mapped to ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v147, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v156, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v17 = v143;
    if (v143)
    {
      v18 = (unint64_t *)&v143->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_QWORD *)v152 = v142;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    *(_QWORD *)v152 = v141;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    v20 = v157;
    if (!v157)
      goto LABEL_63;
    v21 = (unint64_t *)&v157->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
LABEL_61:
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_63:
    is_valid_for_engine = 0;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 306))
  {
    if (*(_DWORD *)(a1 + 300))
    {
      v41 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v155[0] = *(int64x2_t **)a2;
      v155[1] = v41;
      if (v41)
      {
        v42 = &v41->u64[1];
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      std::string::basic_string[abi:ne180100]<0>(&v147, "is_log_softmax and is_plain_sigmoid must not be enabled together.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v147, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v155, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v155);
      goto LABEL_63;
    }
    *(_QWORD *)&v152[16] = 897988541;
    v152[24] = 0;
    v154 = 0;
    *(_QWORD *)v152 = 26;
    *(_QWORD *)&v152[8] = 1065353216;
    Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel((uint64_t)&__p, (_QWORD *)(a1 + 8), (uint64_t)v152);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2D7AE38;
    v144 = &unk_1E2D7AFA8;
    v44 = *((_QWORD *)a2 + 1);
    v151[0] = *(_QWORD *)a2;
    v151[1] = v44;
    if (v44)
    {
      v45 = (unint64_t *)(v44 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = Espresso::ANECompilerEngine::mix_elementwise_kernel::is_valid_for_engine((uint64_t)&__p, v151, a3);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v151);
    if ((v47 & 1) == 0)
    {
      v88 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v150[0] = *(int64x2_t **)a2;
      v150[1] = v88;
      if (v88)
      {
        v89 = &v88->u64[1];
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      std::string::basic_string[abi:ne180100]<0>(&v111, "Elementwise log for log_softmax not supported on ANE.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v147, (__int128 *)&v111, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v150, (Espresso::base_kernel::validate_for_engine_warning_t *)&v147);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v147.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v150);
      Espresso::ANECompilerEngine::mix_elementwise_kernel::~mix_elementwise_kernel((Espresso::ANECompilerEngine::mix_elementwise_kernel *)&__p);
      goto LABEL_63;
    }
    Espresso::ANECompilerEngine::mix_elementwise_kernel::~mix_elementwise_kernel((Espresso::ANECompilerEngine::mix_elementwise_kernel *)&__p);
  }
  if (*(_DWORD *)(a1 + 300))
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_OWORD *)&v152[4] = _D0;
    v153 = 0;
    *(_QWORD *)&v152[20] = 0;
    *(_DWORD *)v152 = 3;
    Espresso::ANECompilerEngine::activation_kernel::activation_kernel((uint64_t)&__p, (_QWORD *)(a1 + 8), (uint64_t)v152);
    v145 = &unk_1E2D7A390;
    v146 = 0u;
    v53 = *((_QWORD *)a2 + 1);
    v139[0] = *(_QWORD *)a2;
    v139[1] = v53;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2D7A1C8;
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = Espresso::ANECompilerEngine::mix_activation_kernel::is_valid_for_engine((uint64_t)&__p, v139, a3);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v139);
    if ((v56 & 1) == 0)
    {
      v82 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v138[0] = *(int64x2_t **)a2;
      v138[1] = v82;
      if (v82)
      {
        v83 = &v82->u64[1];
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      std::string::basic_string[abi:ne180100]<0>(&v111, "Sigmoid not supported on ANE.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v147, (__int128 *)&v111, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v138, (Espresso::base_kernel::validate_for_engine_warning_t *)&v147);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v147.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v138);
      Espresso::ANECompilerEngine::mix_activation_kernel::~mix_activation_kernel((Espresso::ANECompilerEngine::mix_activation_kernel *)&__p);
      goto LABEL_63;
    }
    Espresso::ANECompilerEngine::mix_activation_kernel::~mix_activation_kernel((Espresso::ANECompilerEngine::mix_activation_kernel *)&__p);
  }
  v58 = v163;
  v57 = v164;
  v135 = v163;
  v136 = v164;
  if (v164)
  {
    v59 = (unint64_t *)&v164->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *a3;
  v62 = *(_QWORD *)(*a3 + 32);
  v63 = *(_OWORD *)(*a3 + 16);
  v130[0] = *(_OWORD *)*a3;
  v130[1] = v63;
  v131 = v62;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v132, *(const void **)(v61 + 40), *(_QWORD *)(v61 + 48), (uint64_t)(*(_QWORD *)(v61 + 48) - *(_QWORD *)(v61 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v137, v58, (const Espresso::layer_shape *)v130, 1);
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (v57)
  {
    v64 = (unint64_t *)&v57->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v67 = v163;
  v66 = v164;
  v127 = v163;
  v128 = v164;
  if (v164)
  {
    v68 = (unint64_t *)&v164->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v70 = (_OWORD *)a3[3];
  v71 = *((_QWORD *)v70 + 4);
  v72 = v70[1];
  v122[0] = *v70;
  v122[1] = v72;
  v123 = v71;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v124, *((const void **)v70 + 5), *((_QWORD *)v70 + 6), (uint64_t)(*((_QWORD *)v70 + 6) - *((_QWORD *)v70 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v129, v67, (const Espresso::layer_shape *)v122, 1);
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  if (v66)
  {
    v73 = (unint64_t *)&v66->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  Espresso::ANECompilerEngine::mix_softmax_kernel::supported_by_hw((uint64_t)v119, v9, v137, v129);
  if (v119[0])
  {
    ANECSoftmaxLayerDescInitialize();
    if (*(_BYTE *)(a1 + 307))
      v75 = 1;
    else
      v75 = v129[6] < 4;
    v76 = CFSTR("Channel");
    if (v75)
      v76 = CFSTR("Width");
    *(_QWORD *)v152 = 1;
    *(_QWORD *)&v152[8] = v76;
    v77 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v163, 0);
    if (v77 < 8 && ((0x97u >> v77) & 1) != 0)
    {
      v91 = off_1E2DD6178[v77];
      ANECTensorDescInitialize();
      *(_QWORD *)&v92 = v137[3];
      *((_QWORD *)&v92 + 1) = v137[4];
      v148 = v92;
      v147.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
      v149 = v137[2];
      *(_QWORD *)&v92 = v137[0];
      *((_QWORD *)&v92 + 1) = v137[1];
      *(_OWORD *)&v147.__r_.__value_.__r.__words[1] = v92;
      v115 = 0;
      v116 = 0;
      Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v114, (NSString *)(a1 + 312), v9);
      v93 = ANECValidateSoftmaxLayer();
      is_valid_for_engine = v93 == 0;
      if (v93)
      {
        v94 = (int64x2_t *)*((_QWORD *)a2 + 1);
        v113[0] = *(int64x2_t **)a2;
        v113[1] = v94;
        if (v94)
        {
          v95 = &v94->u64[1];
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        std::to_string(&v112, v93);
        v97 = std::string::insert(&v112, 0, "mix_softmax_kernel: ANECValidateSoftmaxLayer failed with status ");
        v111 = *v97;
        v97->__r_.__value_.__l.__size_ = 0;
        v97->__r_.__value_.__r.__words[2] = 0;
        v97->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v111, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v113, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v113);
        Espresso::ANECompilerEngine::violations_from_alternates<ANECSoftmaxLayerDescAlternate>((uint64_t)&v111, v115, v116);
        v98 = (uint64_t **)v111.__r_.__value_.__r.__words[2];
        if (v111.__r_.__value_.__r.__words[2])
        {
          do
          {
            v99 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
            v109 = *(int64x2_t **)a2;
            v110 = v99;
            if (v99)
            {
              v100 = (unint64_t *)&v99->__shared_owners_;
              do
                v101 = __ldxr(v100);
              while (__stxr(v101 + 1, v100));
            }
            std::string::basic_string[abi:ne180100]<0>(&v112, (char *)objc_msgSend(objc_retainAutorelease(v98[2]), "UTF8String"));
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v112, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v109, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v102 = v143;
            if (v143)
            {
              v103 = (unint64_t *)&v143->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v165 = (void **)v142;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v165);
            v165 = (void **)v141;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v165);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v112.__r_.__value_.__l.__data_);
            v105 = v110;
            if (v110)
            {
              v106 = (unint64_t *)&v110->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            v98 = (uint64_t **)*v98;
          }
          while (v98);
        }
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v111);
      }
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v114);
      goto LABEL_134;
    }
    v78 = (int64x2_t *)*((_QWORD *)a2 + 1);
    v117[0] = *(int64x2_t **)a2;
    v117[1] = v78;
    if (v78)
    {
      v79 = &v78->u64[1];
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    std::string::basic_string[abi:ne180100]<0>(&v147, "Invalid compute path for softmax input");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v147, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v117, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    v81 = v117;
  }
  else
  {
    v85 = (int64x2_t *)*((_QWORD *)a2 + 1);
    v118[0] = *(int64x2_t **)a2;
    v118[1] = v85;
    if (v85)
    {
      v86 = &v85->u64[1];
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v120, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v118, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    v81 = v118;
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  is_valid_for_engine = 0;
LABEL_134:
  if (v121 < 0)
    operator delete((void *)v120);
LABEL_64:

  v37 = v164;
  if (v164)
  {
    v38 = (unint64_t *)&v164->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return is_valid_for_engine;
}

void sub_191795900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  uint64_t v38;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a37 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 104);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_softmax_kernel::compile(Espresso::ANECompilerEngine::mix_softmax_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  float *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSString *v19;
  void *v20;
  __CFString *v21;
  const __CFString *v24;
  __CFString *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  float v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int *v51;
  _WORD *v52;
  int v53;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  int *v66;
  _WORD *v67;
  int v68;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t weights_file_index;
  void *v83;
  void *v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  std::string *v97;
  std::string *v98;
  uint64_t v99;
  char v100;
  std::string::size_type size;
  std::string::size_type v102;
  uint64_t v103;
  unsigned __int8 *v104;
  std::string *v105;
  const std::string::value_type *data;
  __int128 v107;
  __CFString *v108;
  std::string *v109;
  std::string *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  const char *v142;
  int *v143;
  uint64_t i;
  float v145;
  int v146;
  _WORD *v147;
  int v148;
  std::runtime_error *exception;
  int *v151;
  uint64_t j;
  int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  Espresso *v158;
  const char *v159;
  float v160;
  NSObject *v162;
  double v163;
  uint64_t v164;
  _WORD *v165;
  int v166;
  unsigned int v168;
  int v169;
  void *obj;
  Espresso::ANECompilerEngine *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::string *v174;
  std::string *v175;
  unint64_t v176;
  void *v177[2];
  char v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  char v182;
  int v183;
  __CFString *v184;
  __CFString *v185;
  id v186[3];
  std::__shared_weak_count *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  __int128 v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198[2];
  uint64_t v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  _BYTE buf[18];
  __int16 v210;
  int v211;
  __int16 v212;
  double v213;
  std::vector<std::string> v214;
  void *v215;
  char v216;
  id v217;
  __CFString *v218;
  id v219;
  std::string v220;
  _BYTE v221[16];
  void *__p;
  _QWORD v223[4];
  void *v224;
  char v225;
  id v226;
  __CFString *v227;
  id v228;
  uint64_t v229;
  std::string __str;
  __int128 v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
  v190 = 0;
  v191 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v191 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v190 = v8) == 0))
  {
    v142 = "Inconsistent state: null network";
    goto LABEL_202;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v142 = "Inconsistent state: blob_storage";
LABEL_202:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v142);
  }
  v9 = v7;
  v220.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v220.__r_.__value_.__l.__data_, (__int128 **)&v220);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v188 = *((_QWORD *)v10 + 5);
  v189 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v220.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)&v220);
  v15 = (float *)*((_QWORD *)v14 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v186[2] = v15;
  v187 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v171 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v171, v19))
    Espresso::throw_exception_selector<Espresso::generic_error>("softmax_kernel::compile should not be called: The layer should have been transformed");
  v20 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v177, (id *)a3);
  v21 = v185;
  v185 = CFSTR("Softmax");

  Espresso::abstract_blob_container::shape((char *)&v220, (uint64_t)v15);
  if ((SHIDWORD(v220.__r_.__value_.__r.__words[2]) >= 4 || HIDWORD(v220.__r_.__value_.__r.__words[2]) == -1)
    && *((_BYTE *)this + 307) == 0)
  {
    v24 = CFSTR("Channel");
  }
  else
  {
    v24 = CFSTR("Width");
  }
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v24, CFSTR("Dimension"));
  if (__p)
  {
    v223[0] = __p;
    operator delete(__p);
  }
  objc_msgSend(v20, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("SubtractMax"));
  objc_storeStrong(v186, v20);
  v183 = 1;
  v25 = v184;
  v184 = CFSTR("Float16");

  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v220, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v177);
  v227 = v185;
  v228 = v186[0];
  v229 = (uint64_t)v186[1];
  v175 = 0;
  v176 = 0;
  v174 = 0;
  *(_QWORD *)buf = &v174;
  buf[8] = 0;
  v174 = (std::string *)operator new(0x90uLL);
  v175 = v174;
  v176 = (unint64_t)&v174[6];
  v175 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v176, (uint64_t)&v220, (uint64_t)&__str, (uint64_t)v174);

  if (v225 < 0)
    operator delete(v224);
  *(_QWORD *)buf = v223;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v221;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  v173 = v9;
  v26 = (unint64_t *)&v9->__shared_owners_;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  v172 = v16;
  if (v16)
  {
    v28 = (unint64_t *)&v16->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v220);
  v228 = 0;
  v227 = 0;
  v229 = 0x100000000;
  v31 = *((_QWORD *)this + 47);
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  v207 = v31;
  v208 = v30;
  if (v30)
  {
    v32 = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  if (v31 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 39) + 104))((char *)this + 312) + 40))
  {
    v34 = v15[28];
    v199 = v31;
    v200 = v30;
    if (v30)
    {
      v35 = (unint64_t *)&v30->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
    v198[0] = *((_QWORD *)this + 49);
    v198[1] = (uint64_t)v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v199, v198, (uint64_t)&v201, v34);
    if (v37)
    {
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v42 = v200;
    if (v200)
    {
      v43 = (unint64_t *)&v200->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v207;
    v46 = *(unsigned int *)(v207 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v196, 2 * v46, 1, 1, 1);
    v47 = (int)v46;
    v195 = 0uLL;
    v48 = v46;
    v49 = *((_QWORD *)this + 49);
    if (v49)
      v48 = *(_DWORD *)(v49 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v46);
      v143 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v46 >= 1)
      {
        for (i = 0; i != v46; ++i)
        {
          v145 = *(float *)(*(_QWORD *)(v45 + 16) + i * 4);
          *(float *)&v146 = ldexp(1.0, -v205) * v145;
          v143[i] = v146;
        }
      }
      if ((_DWORD)v46)
      {
        v147 = *(_WORD **)(v196 + 16);
        do
        {
          v148 = *v143++;
          _S0 = v148;
          __asm { FCVT            H0, S0 }
          *v147++ = _S0;
          --v47;
        }
        while (v47);
      }
      v193 = 0;
      v194 = 0;
      if (*((_QWORD *)this + 49))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v48);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v193, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v48);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v195, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v151 = *(int **)(v193 + 16);
        if (v48 >= 1)
        {
          for (j = 0; j != v48; ++j)
          {
            if ((int)v46 - 1 >= (int)j)
              v153 = j;
            else
              v153 = v46 - 1;
            *(float *)&v154 = *(float *)(*(_QWORD *)(v203 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v201 + 16) + 4 * v153);
            v151[j] = v154;
            v155 = v206;
            v156 = v205;
            *(float *)&v157 = ldexp(1.0, v206 - v205) * *(float *)&v154;
            v151[j] = v157;
            v160 = ldexp(1.0, v156 - v155) * *(float *)&v157;
            if (v160 < -127.0 || v160 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v158, v159);
              v162 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
              {
                v163 = *(float *)&v151[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v160;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v206;
                v210 = 1024;
                v211 = v205;
                v212 = 2048;
                v213 = v163;
                _os_log_error_impl(&dword_190DAF000, v162, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v48)
        {
          v164 = v48;
          v165 = *(_WORD **)(v195 + 16);
          do
          {
            v166 = *v151++;
            _S0 = v166;
            __asm { FCVT            H0, S0 }
            *v165++ = _S0;
            --v164;
          }
          while (v164);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v50 = v206;
    if ((_DWORD)v46)
    {
      v51 = *(int **)(v201 + 16);
      v52 = *(_WORD **)(v196 + 16);
      do
      {
        v53 = *v51++;
        _S0 = v53;
        __asm { FCVT            H0, S0 }
        *v52++ = _S0;
        --v47;
      }
      while (v47);
    }
    if (v49)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v48, 1, 1, 1);
      v58 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v59 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
      v195 = v58;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v63 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (v48)
      {
        v65 = v48;
        v66 = *(int **)(v203 + 16);
        v67 = *(_WORD **)(v195 + 16);
        do
        {
          v68 = *v66++;
          _S0 = v68;
          __asm { FCVT            H0, S0 }
          *v67++ = _S0;
          --v65;
        }
        while (v65);
      }
    }
    v169 = *((unsigned __int8 *)a2 + 552);
    v70 = v196;
    v71 = v197;
    v193 = v196;
    v194 = v197;
    if (v197)
    {
      v72 = (unint64_t *)&v197->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    v74 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v70 + 16), *(int *)(v70 + 8));
    if (v71)
    {
      v75 = (unint64_t *)&v71->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    obj = (void *)objc_opt_new();
    v168 = v50;
    if (*((_BYTE *)a2 + 121))
    {
      v77 = (id)v174[5].__r_.__value_.__l.__size_;

      obj = v77;
    }
    v78 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v46);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "setObject:forKeyedSubscript:", v79, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v74);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "setObject:forKeyedSubscript:", v80, CFSTR("ScaleOffset"));

    v81 = (void *)MEMORY[0x1E0CB37E8];
    if (v169)
      weights_file_index = 0;
    else
    objc_msgSend(v81, "numberWithUnsignedLong:", weights_file_index);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "setObject:forKeyedSubscript:", v83, CFSTR("ScaleIndex"));

    objc_msgSend(v78, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v205);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v84, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 49))
    {
      v85 = v195;
      v192 = v195;
      if (*((_QWORD *)&v195 + 1))
      {
        v86 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v88 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v85 + 16), *(int *)(v85 + 8));
      if (*((_QWORD *)&v85 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 49) + 8));
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "setObject:forKeyedSubscript:", v91, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v88);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "setObject:forKeyedSubscript:", v92, CFSTR("BiasOffset"));

      v93 = (void *)MEMORY[0x1E0CB37E8];
      if (v169)
        v94 = 0;
      else
      objc_msgSend(v93, "numberWithUnsignedLong:", v94);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "setObject:forKeyedSubscript:", v95, CFSTR("BiasIndex"));

      objc_msgSend(v78, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v168);
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v96, CFSTR("BiasShift"));

    }
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v78, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    v97 = v175;
    if (v175 == v174)
      goto LABEL_123;
    v98 = v175 - 6;
    v99 = HIBYTE(v175[-6].__r_.__value_.__r.__words[2]);
    v100 = v99;
    size = v175[-6].__r_.__value_.__l.__size_;
    if ((v99 & 0x80u) == 0)
      v102 = HIBYTE(v175[-6].__r_.__value_.__r.__words[2]);
    else
      v102 = v175[-6].__r_.__value_.__l.__size_;
    v103 = HIBYTE(v211);
    if (v211 < 0)
      v103 = *(_QWORD *)&buf[8];
    if (v102 != v103)
      goto LABEL_117;
    if (v211 >= 0)
      v104 = buf;
    else
      v104 = *(unsigned __int8 **)buf;
    if ((char)v99 < 0)
    {
      data = (const std::string::value_type *)v98->__r_.__value_.__r.__words[0];
      if (memcmp(v98->__r_.__value_.__l.__data_, v104, v175[-6].__r_.__value_.__l.__size_))
        goto LABEL_120;
    }
    else if ((_BYTE)v99)
    {
      v105 = v175 - 6;
      while (v105->__r_.__value_.__s.__data_[0] == *v104)
      {
        v105 = (std::string *)((char *)v105 + 1);
        ++v104;
        if (!--v99)
          goto LABEL_116;
      }
      goto LABEL_117;
    }
LABEL_116:
    std::string::append(v97 - 6, "__@pre_scale_bias");
    v100 = HIBYTE(v97[-6].__r_.__value_.__r.__words[2]);
LABEL_117:
    if ((v100 & 0x80) == 0)
    {
      v107 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v97[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v107;
      goto LABEL_121;
    }
    data = v97[-6].__r_.__value_.__l.__data_;
    size = v97[-6].__r_.__value_.__l.__size_;
LABEL_120:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_121:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v214, &__str, &v231, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_123:
    v108 = v218;
    v218 = CFSTR("GOC");

    objc_storeStrong(&v219, obj);
    if (!*((_BYTE *)a2 + 121))
    {
      v109 = v175;
      if ((unint64_t)v175 >= v176)
      {
        v111 = 0x8E38E38E38E38E39 * (((char *)v175 - (char *)v174) >> 4);
        if (v111 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v112 = 0x1C71C71C71C71C72 * ((uint64_t)(v176 - (_QWORD)v174) >> 4);
        if (v112 <= v111 + 1)
          v112 = v111 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v176 - (_QWORD)v174) >> 4) >= 0xE38E38E38E38E3)
          v113 = 0x1C71C71C71C71C7;
        else
          v113 = v112;
        *((_QWORD *)&v231 + 1) = &v176;
        if (v113)
          v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v113);
        else
          v114 = 0;
        __str.__r_.__value_.__r.__words[0] = v113;
        __str.__r_.__value_.__l.__size_ = v113 + 144 * v111;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v231 = v113 + 144 * v114;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v174, &__str);
        v110 = v175;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v175, (uint64_t)buf);
        v110 = v109 + 6;
      }
      v175 = v110;
    }

    if (v216 < 0)
      operator delete(v215);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v211) < 0)
      operator delete(*(void **)buf);

    v115 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
    if (*((_QWORD *)&v195 + 1))
    {
      v116 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = v197;
    if (v197)
    {
      v119 = (unint64_t *)&v197->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v121 = v204;
    if (v204)
    {
      v122 = (unint64_t *)&v204->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v124 = v202;
    if (v202)
    {
      v125 = (unint64_t *)&v202->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v30 = v208;
  }
  if (v30)
  {
    v127 = (unint64_t *)&v30->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  if (v225 < 0)
    operator delete(v224);
  *(_QWORD *)buf = v223;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v221;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (v172)
  {
    v129 = (unint64_t *)&v172->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v131 = (unint64_t *)&v173->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 39) + 32))((char *)this + 312, a2, &v174);
  v220.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);

  if (v182 < 0)
    operator delete(v181);
  v220.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
  v220.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
  if (v178 < 0)
    operator delete(v177[0]);

  v133 = v187;
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v189;
  if (v189)
  {
    v137 = (unint64_t *)&v189->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v191;
  if (v191)
  {
    v140 = (unint64_t *)&v191->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
}

void sub_191796CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  void *v65;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a65 = (uint64_t)&a18;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a21);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_softmax_kernel::compile(Espresso::ANECompilerEngine::mix_softmax_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_softmax_kernel::compile((Espresso::ANECompilerEngine::mix_softmax_kernel *)((char *)this - 312), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_softmax_kernel::~mix_softmax_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_softmax_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  BOOL v7;
  _QWORD *v8;
  id v9;

  v9 = a2;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v9))
  {
    v7 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v9);
    v8 = (_QWORD *)(a1 + 8);
    if (v7)
    {
      *(_BYTE *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>(v8, "Success");
    }
    else
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>(v8, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
  }

}

void sub_191797024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECSoftmaxLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 632 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 79;
    }
    while (v6 != a2);
  }
}

void sub_1917970F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_softmax_nd_kernel::~mix_softmax_nd_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_softmax_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::mix_softmax_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 v20;
  std::__shared_weak_count *v21;
  const Espresso::net *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  const Espresso::net *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  Espresso::ANECompilerEngine *v42;
  Espresso::ANECompilerEngine *v43;
  unsigned int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __CFString *v65;
  __int128 v66;
  int v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string v81;
  std::string v82;
  int64x2_t *v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  uint64_t v88;
  void *__p;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  int64x2_t *v93;
  std::__shared_weak_count *v94;
  void **v95[6];
  int64x2_t *v96;
  std::__shared_weak_count *v97;
  char v98;
  void *v99[2];
  char v100;
  _OWORD v101[2];
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  const Espresso::base_kernel::validate_for_engine_args_t *v106;
  std::__shared_weak_count *v107;
  _DWORD v108[8];
  _OWORD v109[2];
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  const Espresso::base_kernel::validate_for_engine_args_t *v114;
  std::__shared_weak_count *v115;
  _DWORD v116[8];
  std::string v117;
  _BYTE v118[24];
  _BYTE v119[32];
  std::__shared_weak_count *v120;
  int64x2_t *v121;
  std::__shared_weak_count *v122;
  const Espresso::base_kernel::validate_for_engine_args_t *v123;
  std::__shared_weak_count *v124;
  void **v125;

  v6 = *((_QWORD *)a3 + 6);
  v123 = 0;
  v124 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v124 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v123 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v121 = *(int64x2_t **)a2;
    v122 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Softmax-ND not supported ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v117, (__int128 *)&__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v121, (Espresso::base_kernel::validate_for_engine_warning_t *)&v117);
    v14 = v120;
    if (v120)
    {
      v15 = (unint64_t *)&v120->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v95[0] = (void **)v119;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v95);
    v95[0] = (void **)v118;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v95);
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90) < 0)
      operator delete(__p);
    v17 = v122;
    if (v122)
    {
      v18 = (unint64_t *)&v122->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = 0;
    goto LABEL_92;
  }
  v22 = v123;
  v21 = v124;
  v114 = v123;
  v115 = v124;
  if (v124)
  {
    v23 = (unint64_t *)&v124->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(_QWORD *)a3;
  v26 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v27 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v109[0] = *(_OWORD *)*(_QWORD *)a3;
  v109[1] = v27;
  v110 = v26;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v111, *(const void **)(v25 + 40), *(_QWORD *)(v25 + 48), (uint64_t)(*(_QWORD *)(v25 + 48) - *(_QWORD *)(v25 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v116, v22, (const Espresso::layer_shape *)v109, 1);
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v21)
  {
    v28 = (unint64_t *)&v21->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v31 = v123;
  v30 = v124;
  v106 = v123;
  v107 = v124;
  if (v124)
  {
    v32 = (unint64_t *)&v124->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *((_QWORD *)a3 + 3);
  v35 = *(_QWORD *)(v34 + 32);
  v36 = *(_OWORD *)(v34 + 16);
  v101[0] = *(_OWORD *)v34;
  v101[1] = v36;
  v102 = v35;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v103, *(const void **)(v34 + 40), *(_QWORD *)(v34 + 48), (uint64_t)(*(_QWORD *)(v34 + 48) - *(_QWORD *)(v34 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v108, v31, (const Espresso::layer_shape *)v101, 1);
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  if (v30)
  {
    v37 = (unint64_t *)&v30->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v39 = *(_DWORD *)(*(_QWORD *)a3 + 20);
  if (v39 == -1)
  {
    if (*(_DWORD *)(*(_QWORD *)a3 + 16) == 1)
      v39 = 4;
    else
      v39 = 5;
  }
  v40 = *(_DWORD *)(a1 + 280);
  v41 = v39 & (v40 >> 31);
  v42 = (Espresso::ANECompilerEngine *)(v41 + v40);
  if (v41 + v40 < 0 || (int)v42 >= v39)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
  v43 = v9;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v116, v43))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v108, v43))
    {
      v98 = 1;
      std::string::basic_string[abi:ne180100]<0>(v99, "Success");
    }
    else
    {
      v98 = 0;
      std::string::basic_string[abi:ne180100]<0>(v99, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    v98 = 0;
    std::string::basic_string[abi:ne180100]<0>(v99, "Input blob dimensions exceed ANE limit.");
  }

  if (!v98)
  {
    v54 = *(std::__shared_weak_count **)(a2 + 8);
    v96 = *(int64x2_t **)a2;
    v97 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v117, (__int128 *)v99, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v96, (Espresso::base_kernel::validate_for_engine_warning_t *)&v117);
    v57 = v120;
    if (v120)
    {
      v58 = (unint64_t *)&v120->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    __p = v119;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = v118;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    v51 = v97;
    if (!v97)
      goto LABEL_89;
    v60 = (unint64_t *)&v97->__shared_owners_;
    do
      v53 = __ldaxr(v60);
    while (__stlxr(v53 - 1, v60));
    goto LABEL_87;
  }
  ANECSoftmaxLayerDescInitialize();
  v95[0] = (void **)1;
  v95[1] = (void **)Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v42, v39, 0);
  v44 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v123, 0);
  if (v44 < 8 && ((0x97u >> v44) & 1) != 0)
  {
    v65 = off_1E2DD6178[v44];
    ANECTensorDescInitialize();
    v88 = 0;
    __p = v65;
    *(_QWORD *)&v66 = v116[3];
    *((_QWORD *)&v66 + 1) = v116[4];
    v91 = v66;
    v92 = v116[2];
    *(_QWORD *)&v66 = v116[0];
    *((_QWORD *)&v66 + 1) = v116[1];
    v90 = v66;
    v87 = 0;
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v85, (NSString *)(a1 + 288), v43);
    v67 = ANECValidateSoftmaxLayer();
    v20 = v67 == 0;
    if (v67)
    {
      v68 = *(std::__shared_weak_count **)(a2 + 8);
      v83 = *(int64x2_t **)a2;
      v84 = v68;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      std::to_string(&v81, v67);
      v71 = std::string::insert(&v81, 0, "mix_softmax_nd_kernel: ANECValidateSoftmaxLayer failed with status ");
      v82 = *v71;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v117, (__int128 *)&v82, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&v117);
      v72 = v120;
      if (v120)
      {
        v73 = (unint64_t *)&v120->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v125 = (void **)v119;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v125);
      v125 = (void **)v118;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v125);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      v75 = v84;
      if (v84)
      {
        v76 = (unint64_t *)&v84->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
    }
    v78 = v86;
    if (v86)
    {
      v79 = (unint64_t *)&v86->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    goto LABEL_90;
  }
  v45 = *(std::__shared_weak_count **)(a2 + 8);
  v93 = *(int64x2_t **)a2;
  v94 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid compute path for softmax-nd input");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v117, (__int128 *)&__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v93, (Espresso::base_kernel::validate_for_engine_warning_t *)&v117);
  v48 = v120;
  if (v120)
  {
    v49 = (unint64_t *)&v120->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v51 = v94;
  if (v94)
  {
    v52 = (unint64_t *)&v94->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
LABEL_87:
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
LABEL_89:
  v20 = 0;
LABEL_90:
  if (v100 < 0)
    operator delete(v99[0]);
LABEL_92:

  v61 = v124;
  if (v124)
  {
    v62 = (unint64_t *)&v124->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v20;
}

void sub_1917979A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  uint64_t v54;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v54 - 232));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a53 < 0)
    operator delete(a48);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 104);
  _Unwind_Resume(a1);
}

void sub_191797B34()
{
  JUMPOUT(0x191797B24);
}

void Espresso::ANECompilerEngine::mix_softmax_nd_kernel::compile(Espresso::ANECompilerEngine::mix_softmax_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  float *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  __CFString *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  Espresso::ANECompilerEngine *v29;
  __CFString *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  float v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int *v55;
  _WORD *v56;
  int v57;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int *v71;
  _WORD *v72;
  int v73;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  id v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t weights_file_index;
  void *v88;
  void *v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  std::string *v102;
  std::string *v103;
  uint64_t v104;
  char v105;
  std::string::size_type size;
  std::string::size_type v107;
  uint64_t v108;
  unsigned __int8 *v109;
  std::string *v110;
  const std::string::value_type *data;
  __int128 v112;
  __CFString *v113;
  std::string *v114;
  std::string *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  const char *v150;
  int *v151;
  uint64_t i;
  float v153;
  int v154;
  _WORD *v155;
  int v156;
  std::runtime_error *exception;
  int *v159;
  uint64_t j;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  Espresso *v166;
  const char *v167;
  float v168;
  NSObject *v170;
  double v171;
  uint64_t v172;
  _WORD *v173;
  int v174;
  unsigned int v176;
  int v177;
  void *obj;
  std::__shared_weak_count *v179;
  std::string *v180;
  std::string *v181;
  unint64_t v182;
  void *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  char v190;
  int v191;
  __CFString *v192;
  __CFString *v193;
  id v194[3];
  std::__shared_weak_count *v195;
  const void *v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  __int128 v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  __int128 v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  uint64_t v206[2];
  uint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  _BYTE buf[18];
  __int16 v218;
  int v219;
  __int16 v220;
  double v221;
  std::vector<std::string> v222;
  void *v223;
  char v224;
  id v225;
  __CFString *v226;
  id v227;
  std::string v228;
  _BYTE v229[16];
  void *__p;
  _QWORD v231[4];
  void *v232;
  char v233;
  id v234;
  __CFString *v235;
  id v236;
  uint64_t v237;
  std::string __str;
  __int128 v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  v198 = 0;
  v199 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v199 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v198 = v8) == 0))
  {
    v150 = "Inconsistent state: null network";
    goto LABEL_211;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v150 = "Inconsistent state: blob_storage";
LABEL_211:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v150);
  }
  v9 = v7;
  v228.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v228.__r_.__value_.__l.__data_, (__int128 **)&v228);
  v11 = (const void *)*((_QWORD *)v10 + 5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v196 = v11;
  v197 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)&v228);
  v16 = (float *)*((_QWORD *)v15 + 5);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v194[2] = v16;
  v195 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v185, (id *)a3);
  v21 = v193;
  v193 = CFSTR("Softmax");

  if (!v11
  {
    v183 = 0;
    v184 = 0;
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob container type.");
  }
  v183 = v22;
  v184 = v12;
  if (v12)
  {
    v23 = (unint64_t *)&v12->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  Espresso::abstract_blob_container::shape((char *)&v228, (uint64_t)v22);
  if (LODWORD(v228.__r_.__value_.__r.__words[2]) == 1)
    v25 = 4;
  else
    v25 = 5;
  if (HIDWORD(v228.__r_.__value_.__r.__words[2]) == -1)
    v26 = v25;
  else
    v26 = HIDWORD(v228.__r_.__value_.__r.__words[2]);
  if (__p)
  {
    v231[0] = __p;
    operator delete(__p);
  }
  v27 = *((_DWORD *)this + 70);
  v28 = v26 & (v27 >> 31);
  v29 = (Espresso::ANECompilerEngine *)(v28 + v27);
  if (v28 + v27 < 0 || (int)v29 >= (int)v26)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
  objc_msgSend(v20, "setObject:forKeyedSubscript:", Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v29, v26, 0), CFSTR("Dimension"));
  objc_msgSend(v20, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("SubtractMax"));
  objc_storeStrong(v194, v20);
  v191 = 1;
  v30 = v192;
  v192 = CFSTR("Float16");

  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v228, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v185);
  v235 = v193;
  v236 = v194[0];
  v237 = (uint64_t)v194[1];
  v181 = 0;
  v182 = 0;
  v180 = 0;
  *(_QWORD *)buf = &v180;
  buf[8] = 0;
  v180 = (std::string *)operator new(0x90uLL);
  v181 = v180;
  v182 = (unint64_t)&v180[6];
  v181 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v182, (uint64_t)&v228, (uint64_t)&__str, (uint64_t)v180);

  if (v233 < 0)
    operator delete(v232);
  *(_QWORD *)buf = v231;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v229;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  v179 = v9;
  v31 = (unint64_t *)&v9->__shared_owners_;
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
  if (v17)
  {
    v33 = (unint64_t *)&v17->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v228);
  v236 = 0;
  v235 = 0;
  v237 = 0x100000000;
  v36 = *((_QWORD *)this + 44);
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v215 = v36;
  v216 = v35;
  if (v35)
  {
    v37 = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  if (v36 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 36) + 104))((char *)this + 288) + 40))
  {
    v39 = v16[28];
    v207 = v36;
    v208 = v35;
    if (v35)
    {
      v40 = (unint64_t *)&v35->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    v206[0] = *((_QWORD *)this + 46);
    v206[1] = (uint64_t)v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v207, v206, (uint64_t)&v209, v39);
    if (v42)
    {
      v45 = (unint64_t *)&v42->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v47 = v208;
    if (v208)
    {
      v48 = (unint64_t *)&v208->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v215;
    v51 = *(unsigned int *)(v215 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v204, 2 * v51, 1, 1, 1);
    v52 = (int)v51;
    v203 = 0uLL;
    v53 = v51;
    v54 = *((_QWORD *)this + 46);
    if (v54)
      v53 = *(_DWORD *)(v54 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v51);
      v151 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v51 >= 1)
      {
        for (i = 0; i != v51; ++i)
        {
          v153 = *(float *)(*(_QWORD *)(v50 + 16) + i * 4);
          *(float *)&v154 = ldexp(1.0, -v213) * v153;
          v151[i] = v154;
        }
      }
      if ((_DWORD)v51)
      {
        v155 = *(_WORD **)(v204 + 16);
        do
        {
          v156 = *v151++;
          _S0 = v156;
          __asm { FCVT            H0, S0 }
          *v155++ = _S0;
          --v52;
        }
        while (v52);
      }
      v201 = 0;
      v202 = 0;
      if (*((_QWORD *)this + 46))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v53);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v201, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v53);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v203, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v159 = *(int **)(v201 + 16);
        if (v53 >= 1)
        {
          for (j = 0; j != v53; ++j)
          {
            if ((int)v51 - 1 >= (int)j)
              v161 = j;
            else
              v161 = v51 - 1;
            *(float *)&v162 = *(float *)(*(_QWORD *)(v211 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v209 + 16) + 4 * v161);
            v159[j] = v162;
            v163 = v214;
            v164 = v213;
            *(float *)&v165 = ldexp(1.0, v214 - v213) * *(float *)&v162;
            v159[j] = v165;
            v168 = ldexp(1.0, v164 - v163) * *(float *)&v165;
            if (v168 < -127.0 || v168 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v166, v167);
              v170 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
              {
                v171 = *(float *)&v159[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v168;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v214;
                v218 = 1024;
                v219 = v213;
                v220 = 2048;
                v221 = v171;
                _os_log_error_impl(&dword_190DAF000, v170, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v53)
        {
          v172 = v53;
          v173 = *(_WORD **)(v203 + 16);
          do
          {
            v174 = *v159++;
            _S0 = v174;
            __asm { FCVT            H0, S0 }
            *v173++ = _S0;
            --v172;
          }
          while (v172);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v176 = v214;
    if ((_DWORD)v51)
    {
      v55 = *(int **)(v209 + 16);
      v56 = *(_WORD **)(v204 + 16);
      do
      {
        v57 = *v55++;
        _S0 = v57;
        __asm { FCVT            H0, S0 }
        *v56++ = _S0;
        --v52;
      }
      while (v52);
    }
    if (v54)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v53, 1, 1, 1);
      v63 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
      v203 = v63;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v68 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (v53)
      {
        v70 = v53;
        v71 = *(int **)(v211 + 16);
        v72 = *(_WORD **)(v203 + 16);
        do
        {
          v73 = *v71++;
          _S0 = v73;
          __asm { FCVT            H0, S0 }
          *v72++ = _S0;
          --v70;
        }
        while (v70);
      }
    }
    v177 = *((unsigned __int8 *)a2 + 552);
    v75 = v204;
    v76 = v205;
    v201 = v204;
    v202 = v205;
    if (v205)
    {
      v77 = (unint64_t *)&v205->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    v79 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v75 + 16), *(int *)(v75 + 8));
    if (v76)
    {
      v80 = (unint64_t *)&v76->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    obj = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v82 = (id)v180[5].__r_.__value_.__l.__size_;

      obj = v82;
    }
    v83 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v51);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v83, "setObject:forKeyedSubscript:", v84, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v79);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v83, "setObject:forKeyedSubscript:", v85, CFSTR("ScaleOffset"));

    v86 = (void *)MEMORY[0x1E0CB37E8];
    if (v177)
      weights_file_index = 0;
    else
    objc_msgSend(v86, "numberWithUnsignedLong:", weights_file_index);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v83, "setObject:forKeyedSubscript:", v88, CFSTR("ScaleIndex"));

    objc_msgSend(v83, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v213);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v89, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 46))
    {
      v90 = v203;
      v200 = v203;
      if (*((_QWORD *)&v203 + 1))
      {
        v91 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      v93 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v90 + 16), *(int *)(v90 + 8));
      if (*((_QWORD *)&v90 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v90 + 1) + 16))(*((_QWORD *)&v90 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v90 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 46) + 8));
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v83, "setObject:forKeyedSubscript:", v96, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v93);
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v83, "setObject:forKeyedSubscript:", v97, CFSTR("BiasOffset"));

      v98 = (void *)MEMORY[0x1E0CB37E8];
      if (v177)
        v99 = 0;
      else
      objc_msgSend(v98, "numberWithUnsignedLong:", v99);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v83, "setObject:forKeyedSubscript:", v100, CFSTR("BiasIndex"));

      objc_msgSend(v83, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v176);
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v101, CFSTR("BiasShift"));

    }
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v83, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    v102 = v181;
    if (v181 == v180)
      goto LABEL_126;
    v103 = v181 - 6;
    v104 = HIBYTE(v181[-6].__r_.__value_.__r.__words[2]);
    v105 = v104;
    size = v181[-6].__r_.__value_.__l.__size_;
    if ((v104 & 0x80u) == 0)
      v107 = HIBYTE(v181[-6].__r_.__value_.__r.__words[2]);
    else
      v107 = v181[-6].__r_.__value_.__l.__size_;
    v108 = HIBYTE(v219);
    if (v219 < 0)
      v108 = *(_QWORD *)&buf[8];
    if (v107 != v108)
      goto LABEL_120;
    if (v219 >= 0)
      v109 = buf;
    else
      v109 = *(unsigned __int8 **)buf;
    if ((char)v104 < 0)
    {
      data = (const std::string::value_type *)v103->__r_.__value_.__r.__words[0];
      if (memcmp(v103->__r_.__value_.__l.__data_, v109, v181[-6].__r_.__value_.__l.__size_))
        goto LABEL_123;
    }
    else if ((_BYTE)v104)
    {
      v110 = v181 - 6;
      while (v110->__r_.__value_.__s.__data_[0] == *v109)
      {
        v110 = (std::string *)((char *)v110 + 1);
        ++v109;
        if (!--v104)
          goto LABEL_119;
      }
      goto LABEL_120;
    }
LABEL_119:
    std::string::append(v102 - 6, "__@pre_scale_bias");
    v105 = HIBYTE(v102[-6].__r_.__value_.__r.__words[2]);
LABEL_120:
    if ((v105 & 0x80) == 0)
    {
      v112 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v102[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v112;
      goto LABEL_124;
    }
    data = v102[-6].__r_.__value_.__l.__data_;
    size = v102[-6].__r_.__value_.__l.__size_;
LABEL_123:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_124:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v222, &__str, &v239, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_126:
    v113 = v226;
    v226 = CFSTR("GOC");

    objc_storeStrong(&v227, obj);
    if (!*((_BYTE *)a2 + 121))
    {
      v114 = v181;
      if ((unint64_t)v181 >= v182)
      {
        v116 = 0x8E38E38E38E38E39 * (((char *)v181 - (char *)v180) >> 4);
        if (v116 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v117 = 0x1C71C71C71C71C72 * ((uint64_t)(v182 - (_QWORD)v180) >> 4);
        if (v117 <= v116 + 1)
          v117 = v116 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v182 - (_QWORD)v180) >> 4) >= 0xE38E38E38E38E3)
          v118 = 0x1C71C71C71C71C7;
        else
          v118 = v117;
        *((_QWORD *)&v239 + 1) = &v182;
        if (v118)
          v118 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v118);
        else
          v119 = 0;
        __str.__r_.__value_.__r.__words[0] = v118;
        __str.__r_.__value_.__l.__size_ = v118 + 144 * v116;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v239 = v118 + 144 * v119;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v180, &__str);
        v115 = v181;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v181, (uint64_t)buf);
        v115 = v114 + 6;
      }
      v181 = v115;
    }

    if (v224 < 0)
      operator delete(v223);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v222;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v220;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v219) < 0)
      operator delete(*(void **)buf);

    v120 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
    if (*((_QWORD *)&v203 + 1))
    {
      v121 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v123 = v205;
    if (v205)
    {
      v124 = (unint64_t *)&v205->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = v212;
    if (v212)
    {
      v127 = (unint64_t *)&v212->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v129 = v210;
    if (v210)
    {
      v130 = (unint64_t *)&v210->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v35 = v216;
  }
  if (v35)
  {
    v132 = (unint64_t *)&v35->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  if (v233 < 0)
    operator delete(v232);
  *(_QWORD *)buf = v231;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v229;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  if (v17)
  {
    v134 = (unint64_t *)&v17->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v136 = (unint64_t *)&v179->__shared_owners_;
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
    std::__shared_weak_count::__release_weak(v179);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 36) + 32))((char *)this + 288, a2, &v180);
  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
  v138 = v184;
  if (v184)
  {
    v139 = (unint64_t *)&v184->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }

  if (v190 < 0)
    operator delete(v189);
  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
  if (v186 < 0)
    operator delete(v185[0]);

  v141 = v195;
  if (v195)
  {
    v142 = (unint64_t *)&v195->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v197;
  if (v197)
  {
    v145 = (unint64_t *)&v197->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v199;
  if (v199)
  {
    v148 = (unint64_t *)&v199->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
}

void sub_191798C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,id a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a67;
  void *v67;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a67 = (void **)&a18;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a67);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a23);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_softmax_nd_kernel::compile(Espresso::ANECompilerEngine::mix_softmax_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_softmax_nd_kernel::compile((Espresso::ANECompilerEngine::mix_softmax_nd_kernel *)((char *)this - 288), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_softmax_nd_kernel::~mix_softmax_nd_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_tile_kernel::~mix_tile_kernel(Espresso::ANECompilerEngine::mix_tile_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D75E80;
  v2 = (void **)((char *)this + 304);
  *((_QWORD *)this + 38) = &unk_1E2D75FE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D75E80;
  v2 = (void **)((char *)this + 304);
  *((_QWORD *)this + 38) = &unk_1E2D75FE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_tile_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::mix_tile_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  void *v9;
  NSString *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  const Espresso::net *v27;
  int v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  unsigned int v40;
  const __CFString *v42;
  void **v43;
  int v44;
  unsigned int v45;
  const __CFString *v47;
  void **v48;
  int v49;
  unsigned int v50;
  const __CFString *v52;
  void **v53;
  __int128 v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t **v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int v89;
  int v90;
  int v91;
  int64x2_t *v92;
  std::__shared_weak_count *v93;
  std::string v94[2];
  std::string v95;
  int64x2_t *v96;
  std::__shared_weak_count *v97;
  void *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64x2_t *v104;
  uint64_t v105;
  void **v106;
  void **v107;
  void **v108;
  void **v109;
  void **v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  _OWORD v113[2];
  uint64_t v114;
  void *v115;
  void *v116;
  uint64_t v117;
  const Espresso::base_kernel::validate_for_engine_args_t *v118;
  std::__shared_weak_count *v119;
  _DWORD v120[8];
  std::string __p;
  _BYTE v122[24];
  _BYTE v123[32];
  std::__shared_weak_count *v124;
  int64x2_t *v125;
  uint64_t v126;
  int64x2_t *v127;
  std::__shared_weak_count *v128;
  const Espresso::base_kernel::validate_for_engine_args_t *v129;
  std::__shared_weak_count *v130;
  void **v131[3];

  v6 = (_OWORD *)*((_QWORD *)a3 + 6);
  v129 = 0;
  v130 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v130 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v6 + 9);
    v129 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v10))
  {
    if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 >= 0x41uLL)
    {
      v19 = *(_QWORD *)(a2 + 8);
      v125 = *(int64x2_t **)a2;
      v126 = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      std::string::basic_string[abi:ne180100]<0>(&v98, "tile_kernel: dynamic tiling is not supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v98, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v125, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v22 = v124;
      if (v124)
      {
        p_shared_owners = (unint64_t *)&v124->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v106 = (void **)v123;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v106);
      v106 = (void **)v122;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v106);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99) < 0)
        operator delete(v98);
      v15 = v126;
      if (v126)
      {
        v25 = (unint64_t *)(v126 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
        }
        v15 = 0;
      }
      goto LABEL_204;
    }
    v27 = v129;
    v28 = *((unsigned __int8 *)v129 + 1281);
    v29 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v129, 0);
    v30 = v130;
    v118 = v129;
    v119 = v130;
    if (v130)
    {
      v31 = (unint64_t *)&v130->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = *(_QWORD *)a3;
    v34 = *(_QWORD *)(*(_QWORD *)a3 + 32);
    v35 = *(_OWORD *)(*(_QWORD *)a3 + 16);
    v113[0] = *(_OWORD *)*(_QWORD *)a3;
    v113[1] = v35;
    v114 = v34;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v115, *(const void **)(v33 + 40), *(_QWORD *)(v33 + 48), (uint64_t)(*(_QWORD *)(v33 + 48) - *(_QWORD *)(v33 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v120, v27, (const Espresso::layer_shape *)v113, 1);
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    if (v30)
    {
      v36 = (unint64_t *)&v30->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v111, (NSString *)(a1 + 304), v9);
    v89 = v29;
    ANECTileLayerDescInitialize();
    if ((*(_DWORD *)(*(_QWORD *)a3 + 20) + 1) > 6)
LABEL_118:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    v38 = (void **)*(int *)(a1 + 280);
    if (CFStringCompare(CFSTR("Width"), CFSTR("Width"), 0))
    {
      if (CFStringCompare(CFSTR("Width"), CFSTR("Height"), 0))
      {
        if (CFStringCompare(CFSTR("Width"), CFSTR("Depth"), 0))
        {
          if (CFStringCompare(CFSTR("Width"), CFSTR("Channel"), 0))
          {
            if (CFStringCompare(CFSTR("Width"), CFSTR("Batch"), 0))
            {
              v91 = 0;
              goto LABEL_55;
            }
            v106 = v38;
          }
          else
          {
            v107 = v38;
          }
        }
        else
        {
          v110 = v38;
        }
      }
      else
      {
        v108 = v38;
      }
    }
    else
    {
      v109 = v38;
    }
    v91 = 1;
LABEL_55:
    if ((*(_DWORD *)(*(_QWORD *)a3 + 20) + 1) > 6)
      goto LABEL_118;
    v39 = (void **)*(int *)(a1 + 284);
    if (CFStringCompare(CFSTR("Height"), CFSTR("Width"), 0))
    {
      if (CFStringCompare(CFSTR("Height"), CFSTR("Height"), 0))
      {
        if (CFStringCompare(CFSTR("Height"), CFSTR("Depth"), 0))
        {
          if (CFStringCompare(CFSTR("Height"), CFSTR("Channel"), 0))
          {
            if (CFStringCompare(CFSTR("Height"), CFSTR("Batch"), 0))
            {
              v90 = 0;
              goto LABEL_68;
            }
            v106 = v39;
          }
          else
          {
            v107 = v39;
          }
        }
        else
        {
          v110 = v39;
        }
      }
      else
      {
        v108 = v39;
      }
    }
    else
    {
      v109 = v39;
    }
    v90 = 1;
LABEL_68:
    v40 = *(_DWORD *)(*(_QWORD *)a3 + 20);
    if (v40 == -1)
    {
      if (*(_DWORD *)(*(_QWORD *)a3 + 16) == 1)
        v40 = 4;
      else
        v40 = 5;
    }
    else if (v40 > 5)
    {
      goto LABEL_118;
    }
    if (v40 != 5 || v28 == 0)
      v42 = CFSTR("Channel");
    else
      v42 = CFSTR("Depth");
    v43 = (void **)*(int *)(a1 + 288);
    if (CFStringCompare(v42, CFSTR("Width"), 0))
    {
      if (CFStringCompare(v42, CFSTR("Height"), 0))
      {
        if (CFStringCompare(v42, CFSTR("Depth"), 0))
        {
          if (CFStringCompare(v42, CFSTR("Channel"), 0))
          {
            if (CFStringCompare(v42, CFSTR("Batch"), 0))
            {
              v44 = 0;
              goto LABEL_92;
            }
            v106 = v43;
          }
          else
          {
            v107 = v43;
          }
        }
        else
        {
          v110 = v43;
        }
      }
      else
      {
        v108 = v43;
      }
    }
    else
    {
      v109 = v43;
    }
    v44 = 1;
LABEL_92:
    v45 = *(_DWORD *)(*(_QWORD *)a3 + 20);
    if (v45 == -1)
    {
      if (*(_DWORD *)(*(_QWORD *)a3 + 16) == 1)
        v45 = 4;
      else
        v45 = 5;
    }
    else if (v45 > 5)
    {
      goto LABEL_118;
    }
    if (v45 != 5 || v28 == 0)
      v47 = CFSTR("Batch");
    else
      v47 = CFSTR("Channel");
    v48 = (void **)*(int *)(a1 + 292);
    if (CFStringCompare(v47, CFSTR("Width"), 0))
    {
      if (CFStringCompare(v47, CFSTR("Height"), 0))
      {
        if (CFStringCompare(v47, CFSTR("Depth"), 0))
        {
          if (CFStringCompare(v47, CFSTR("Channel"), 0))
          {
            if (CFStringCompare(v47, CFSTR("Batch"), 0))
            {
              v49 = 0;
              goto LABEL_116;
            }
            v106 = v48;
          }
          else
          {
            v107 = v48;
          }
        }
        else
        {
          v110 = v48;
        }
      }
      else
      {
        v108 = v48;
      }
    }
    else
    {
      v109 = v48;
    }
    v49 = 1;
LABEL_116:
    v50 = *(_DWORD *)(*(_QWORD *)a3 + 20);
    if (v50 == -1)
    {
      if (*(_DWORD *)(*(_QWORD *)a3 + 16) == 1)
        v50 = 4;
      else
        v50 = 5;
    }
    else if (v50 > 5)
    {
      goto LABEL_118;
    }
    if (v50 != 5 || v28 == 0)
      v52 = CFSTR("Depth");
    else
      v52 = CFSTR("Batch");
    v53 = (void **)*(int *)(a1 + 296);
    if (CFStringCompare(v52, CFSTR("Width"), 0))
    {
      if (CFStringCompare(v52, CFSTR("Height"), 0))
      {
        if (CFStringCompare(v52, CFSTR("Depth"), 0))
        {
          if (CFStringCompare(v52, CFSTR("Channel"), 0))
          {
            if (CFStringCompare(v52, CFSTR("Batch"), 0))
              goto LABEL_181;
            v106 = v53;
          }
          else
          {
            v107 = v53;
          }
        }
        else
        {
          v110 = v53;
        }
      }
      else
      {
        v108 = v53;
      }
    }
    else
    {
      v109 = v53;
    }
    if ((v91 & v90 & v44 & v49 & 1) != 0)
    {
      v102 = 0;
      v103 = 0;
      ANECTensorDescInitialize();
      if (v89 < 8 && ((0x97u >> v89) & 1) != 0)
      {
        v98 = off_1E2DD6178[v89];
        *(_QWORD *)&v54 = v120[3];
        *((_QWORD *)&v54 + 1) = v120[4];
        v100 = v54;
        v101 = v120[2];
        *(_QWORD *)&v54 = v120[0];
        *((_QWORD *)&v54 + 1) = v120[1];
        v99 = v54;
        v55 = ANECValidateTileLayer();
        if (!v55)
        {
          v15 = 1;
          goto LABEL_199;
        }
        v56 = *(std::__shared_weak_count **)(a2 + 8);
        v96 = *(int64x2_t **)a2;
        v97 = v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        std::to_string(&v95, v55);
        v59 = std::string::insert(&v95, 0, "tile_kernel: ANECValidateTileLayer returned status ");
        v94[0] = *v59;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v94, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v96, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        v60 = v124;
        if (v124)
        {
          v61 = (unint64_t *)&v124->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v131[0] = (void **)v123;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v131);
        v131[0] = (void **)v122;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v131);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v94[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        v63 = v97;
        if (v97)
        {
          v64 = (unint64_t *)&v97->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        Espresso::ANECompilerEngine::violations_from_alternates<ANECTileLayerDescAlternate>((uint64_t)v94, v103, v102);
        v66 = (uint64_t **)v94[0].__r_.__value_.__r.__words[2];
        if (v94[0].__r_.__value_.__r.__words[2])
        {
          do
          {
            v67 = *(std::__shared_weak_count **)(a2 + 8);
            v92 = *(int64x2_t **)a2;
            v93 = v67;
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            std::string::basic_string[abi:ne180100]<0>(&v95, (char *)objc_msgSend(objc_retainAutorelease(v66[2]), "UTF8String"));
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v95, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v92, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v70 = v124;
            if (v124)
            {
              v71 = (unint64_t *)&v124->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v131[0] = (void **)v123;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v131);
            v131[0] = (void **)v122;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v131);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v95.__r_.__value_.__l.__data_);
            v73 = v93;
            if (v93)
            {
              v74 = (unint64_t *)&v93->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v66 = (uint64_t **)*v66;
          }
          while (v66);
        }
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v94);
      }
LABEL_198:
      v15 = 0;
LABEL_199:
      v16 = v112;
      if (!v112)
        goto LABEL_204;
      v84 = (unint64_t *)&v112->__shared_owners_;
      do
        v18 = __ldaxr(v84);
      while (__stlxr(v18 - 1, v84));
      goto LABEL_202;
    }
LABEL_181:
    v76 = *(_QWORD *)(a2 + 8);
    v104 = *(int64x2_t **)a2;
    v105 = v76;
    if (v76)
    {
      v77 = (unint64_t *)(v76 + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    std::string::basic_string[abi:ne180100]<0>(&v98, "tile_kernel: tile axis is not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v98, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v104, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v79 = v124;
    if (v124)
    {
      v80 = (unint64_t *)&v124->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v94[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    v94[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99) < 0)
      operator delete(v98);
    v15 = v105;
    if (!v105)
      goto LABEL_199;
    v82 = (unint64_t *)(v105 + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
    }
    goto LABEL_198;
  }
  v11 = *(_QWORD *)(a1 + 520);
  v12 = *(std::__shared_weak_count **)(a2 + 8);
  v127 = *(int64x2_t **)a2;
  v128 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (*(uint64_t (**)(uint64_t, int64x2_t **, Espresso::ANECompilerEngine *))(*(_QWORD *)v11 + 200))(v11, &v127, a3);
  v16 = v128;
  if (v128)
  {
    v17 = (unint64_t *)&v128->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
LABEL_202:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_204:

  v85 = v130;
  if (v130)
  {
    v86 = (unint64_t *)&v130->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  return v15;
}

void sub_191799BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  uint64_t v42;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 120);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_tile_kernel::compile(Espresso::ANECompilerEngine::mix_tile_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSString *v17;
  int v18;
  unsigned int v19;
  void *v20;
  void *v21;
  void *v22;
  BOOL v23;
  const __CFString *v24;
  void *v25;
  BOOL v26;
  const __CFString *v27;
  void *v28;
  BOOL v29;
  const __CFString *v30;
  id v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const char *v40;
  Espresso::ANECompilerEngine *v41;
  void *v42;
  id *v43;
  uint64_t v44;
  _QWORD v45[4];
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  id **v49;
  char v50;
  void *v51[2];
  int v52;
  unsigned int v53;
  uint64_t v54;
  void *__p;
  _QWORD v56[6];
  char v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v47 = 0;
  v48 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v48 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v47 = v7) == 0))
  {
    v40 = "Inconsistent state: null network";
    goto LABEL_63;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v40 = "Inconsistent state: blob_storage";
LABEL_63:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v40);
  }
  v51[0] = a3[6];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v51[0], (__int128 **)v51);
  v10 = *((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v45[3] = v10;
  v46 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v51[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)v51);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v45[1] = *((_QWORD *)v13 + 5);
  v45[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  v41 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v41, v17))
  {
    (*(void (**)(_QWORD, Espresso::ANECompilerEngine::compiler *, void **))(**((_QWORD **)this + 65) + 328))(*((_QWORD *)this + 65), a2, a3);
  }
  else
  {
    v42 = (void *)objc_opt_new();
    Espresso::abstract_blob_container::shape((char *)v51, v10);
    if (v52 == 1)
      v18 = 4;
    else
      v18 = 5;
    if (v53 == -1)
      v19 = v18;
    else
      v19 = v53;
    if (__p)
    {
      v56[0] = __p;
      operator delete(__p);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19 >= 6)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    objc_msgSend(v42, "setObject:forKeyedSubscript:", v20, CFSTR("Width"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 71));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "setObject:forKeyedSubscript:", v21, CFSTR("Height"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 72));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(v7 + 1281))
      v23 = v19 == 5;
    else
      v23 = 0;
    if (v23)
      v24 = CFSTR("Depth");
    else
      v24 = CFSTR("Channel");
    objc_msgSend(v42, "setObject:forKeyedSubscript:", v22, v24);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 73));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(v7 + 1281))
      v26 = v19 == 5;
    else
      v26 = 0;
    if (v26)
      v27 = CFSTR("Channel");
    else
      v27 = CFSTR("Batch");
    objc_msgSend(v42, "setObject:forKeyedSubscript:", v25, v27);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 74));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(v7 + 1281))
      v29 = v19 == 5;
    else
      v29 = 0;
    if (v29)
      v30 = CFSTR("Batch");
    else
      v30 = CFSTR("Depth");
    objc_msgSend(v42, "setObject:forKeyedSubscript:", v28, v30);

    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v51, a3);
    v43 = 0;
    v44 = 0;
    v45[0] = 0;
    v49 = &v43;
    v50 = 0;
    v43 = (id *)operator new(0x90uLL);
    v44 = (uint64_t)v43;
    v45[0] = v43 + 18;
    v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)v45, (uint64_t)v51, (uint64_t)&v61, (uint64_t)v43);

    if (v57 < 0)
      operator delete((void *)v56[4]);
    v49 = (id **)v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    v49 = (id **)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    if (SHIBYTE(v53) < 0)
      operator delete(v51[0]);
    v31 = v43[15];
    v43[15] = CFSTR("Tile");

    objc_storeStrong(v43 + 16, v42);
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, id **))(*((_QWORD *)this + 38) + 32))((char *)this + 304, a2, &v43);
    v51[0] = &v43;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);

  }
  if (v14)
  {
    v32 = (unint64_t *)&v14->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v34 = v46;
  if (v46)
  {
    v35 = (unint64_t *)&v46->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v48;
  if (v48)
  {
    v38 = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_19179A1A8(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_tile_kernel::compile(Espresso::ANECompilerEngine::mix_tile_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_tile_kernel::compile((Espresso::ANECompilerEngine::mix_tile_kernel *)((char *)this - 304), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_tile_kernel::~mix_tile_kernel(Espresso::ANECompilerEngine::mix_tile_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_tile_kernel *)((char *)this - 304);
  *((_QWORD *)this - 38) = &off_1E2D75E80;
  *(_QWORD *)this = &unk_1E2D75FE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_tile_kernel *)((char *)this - 304);
  *((_QWORD *)this - 38) = &off_1E2D75E80;
  *(_QWORD *)this = &unk_1E2D75FE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECTileLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 624 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 78;
    }
    while (v6 != a2);
  }
}

void sub_19179A3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::~mix_instancenorm_1d_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 42);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel((Espresso::generic_instancenorm_1d_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 42);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel((Espresso::generic_instancenorm_1d_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  Espresso::generic_instancenorm_1d_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5);
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 42, a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::is_valid_for_engine(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 v20;
  std::__shared_weak_count *v21;
  const Espresso::net *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  const Espresso::net *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  Espresso::ANECompilerEngine *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int64x2_t *v53;
  std::__shared_weak_count *v54;
  char v55;
  void *v56[2];
  char v57;
  _OWORD v58[2];
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  const Espresso::net *v63;
  std::__shared_weak_count *v64;
  void **v65[4];
  _OWORD v66[2];
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  const Espresso::net *v71;
  std::__shared_weak_count *v72;
  void *__p[2];
  char v74;
  std::string v75;
  _BYTE v76[24];
  _BYTE v77[32];
  std::__shared_weak_count *v78;
  int64x2_t *v79;
  std::__shared_weak_count *v80;
  const Espresso::net *v81;
  std::__shared_weak_count *v82;
  void **v83;

  v6 = a3[6];
  v81 = 0;
  v82 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v82 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v81 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v79 = *(int64x2_t **)a2;
    v80 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Instance norm not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v79, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
    v14 = v78;
    if (v78)
    {
      v15 = (unint64_t *)&v78->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v65[0] = (void **)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v65);
    v65[0] = (void **)v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v65);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (v74 < 0)
      operator delete(__p[0]);
    v17 = v80;
    if (v80)
    {
      v18 = (unint64_t *)&v80->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = 0;
    goto LABEL_59;
  }
  v22 = v81;
  v21 = v82;
  v71 = v81;
  v72 = v82;
  if (v82)
  {
    v23 = (unint64_t *)&v82->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *a3;
  v26 = *(_QWORD *)(*a3 + 32);
  v27 = *(_OWORD *)(*a3 + 16);
  v66[0] = *(_OWORD *)*a3;
  v66[1] = v27;
  v67 = v26;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, *(const void **)(v25 + 40), *(_QWORD *)(v25 + 48), (uint64_t)(*(_QWORD *)(v25 + 48) - *(_QWORD *)(v25 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, v22, (const Espresso::layer_shape *)v66, 1);
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v21)
  {
    v28 = (unint64_t *)&v21->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v31 = v81;
  v30 = v82;
  v63 = v81;
  v64 = v82;
  if (v82)
  {
    v32 = (unint64_t *)&v82->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = a3[3];
  v35 = *(_QWORD *)(v34 + 32);
  v36 = *(_OWORD *)(v34 + 16);
  v58[0] = *(_OWORD *)v34;
  v58[1] = v36;
  v59 = v35;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v60, *(const void **)(v34 + 40), *(_QWORD *)(v34 + 48), (uint64_t)(*(_QWORD *)(v34 + 48) - *(_QWORD *)(v34 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v65, v31, (const Espresso::layer_shape *)v58, 1);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v30)
  {
    v37 = (unint64_t *)&v30->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v39 = v9;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v39))
  {
    v55 = 0;
    std::string::basic_string[abi:ne180100]<0>(v56, "Input blob dimensions exceed ANE limit.");
    goto LABEL_56;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v65, v39))
  {
    v55 = 0;
    std::string::basic_string[abi:ne180100]<0>(v56, "Output blob dimensions exceed ANE limit.");
    goto LABEL_56;
  }
  if (!a1[70])
  {
LABEL_52:
    if (a1[74])
    {
      v55 = 0;
      std::string::basic_string[abi:ne180100]<0>(v56, "tf_layernorm_transposed with biased std deviation is not implemented on ANE.");
    }
    else
    {
      v55 = 1;
      std::string::basic_string[abi:ne180100]<0>(v56, "Success");
    }
    goto LABEL_56;
  }
  if (!a1[72])
  {
    if (!a1[73])
    {
      v55 = 0;
      std::string::basic_string[abi:ne180100]<0>(v56, "Instancenorm_1d with epsilon to std deviation is not supported on ANE.");
      goto LABEL_56;
    }
    goto LABEL_52;
  }
  v55 = 0;
  std::string::basic_string[abi:ne180100]<0>(v56, "Instancenorm_1d with biased std deviation is not supported on ANE.");
LABEL_56:

  v20 = v55 != 0;
  if (!v55)
  {
    v44 = *(std::__shared_weak_count **)(a2 + 8);
    v53 = *(int64x2_t **)a2;
    v54 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (__int128 *)v56, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v53, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
    v47 = v78;
    if (v78)
    {
      v48 = (unint64_t *)&v78->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v83 = (void **)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    v83 = (void **)v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    v50 = v54;
    if (v54)
    {
      v51 = (unint64_t *)&v54->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  if (v57 < 0)
    operator delete(v56[0]);
LABEL_59:

  v40 = v82;
  if (v82)
  {
    v41 = (unint64_t *)&v82->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v20;
}

void sub_19179A9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  void *v49;
  uint64_t v50;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v50 - 88);
  _Unwind_Resume(a1);
}

void sub_19179AAAC()
{
  JUMPOUT(0x19179AA9CLL);
}

void Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::compile(Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v22;
  __CFString *v23;
  size_t size;
  std::string *v25;
  std::string *p_str;
  std::string *v27;
  std::string *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  size_t v35;
  std::string *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  size_t v43;
  std::string *v44;
  char *v45;
  size_t v46;
  std::string *v47;
  char *v48;
  void *v49;
  __CFString *v50;
  size_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t i;
  size_t v56;
  std::string *v57;
  char *v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  size_t v72;
  std::string *v73;
  char *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  size_t v80;
  std::string *v81;
  char *v82;
  size_t v83;
  std::string *v84;
  char *v85;
  void *v86;
  __CFString *v87;
  size_t v88;
  uint64_t v89;
  void *v90;
  char *v91;
  uint64_t j;
  std::string *v93;
  std::string *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  float v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int *v127;
  _WORD *v128;
  int v129;
  __int128 v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  int *v139;
  _WORD *v140;
  int v141;
  int v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  id v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  uint64_t weights_file_index;
  void *v158;
  void *v159;
  __int128 v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  void *v170;
  void *v171;
  std::string *v172;
  std::string *v173;
  uint64_t v174;
  char v175;
  std::string::size_type v176;
  std::string::size_type v177;
  uint64_t v178;
  unsigned __int8 *v179;
  std::string *v180;
  const std::string::value_type *data;
  __int128 v182;
  __CFString *v183;
  std::string *v184;
  std::string *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  const char *v217;
  int *v218;
  int v219;
  uint64_t k;
  float v221;
  int v222;
  _WORD *v223;
  int v224;
  std::runtime_error *exception;
  int *v227;
  uint64_t m;
  int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  Espresso *v234;
  const char *v235;
  float v236;
  NSObject *v238;
  double v239;
  uint64_t v240;
  _WORD *v241;
  int v242;
  unsigned int v244;
  id obj;
  std::__shared_weak_count *v246;
  std::__shared_weak_count *v247;
  std::string v248;
  std::string __str;
  std::string __p;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  char v254;
  id v255;
  __CFString *v256;
  id v257;
  uint64_t v258;
  std::string *v259;
  unint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  __int128 v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  __int128 v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  uint64_t v273[2];
  unint64_t v274;
  std::__shared_weak_count *v275;
  std::string v276;
  std::__shared_weak_count *v277;
  unsigned int v278;
  unsigned int v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  std::string v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  std::vector<std::string> v285;
  void *v286;
  char v287;
  id v288;
  __CFString *v289;
  id v290[2];
  std::string v291;
  __int128 v292;
  _BYTE v293[9];
  __int128 v294;
  _BYTE buf[18];
  __int16 v296;
  int v297;
  __int16 v298;
  double v299;
  void *v300;
  std::vector<std::string> v301;
  void *v302;
  char v303;
  id v304;
  __CFString *v305;
  id v306[6];

  v306[3] = *(id *)MEMORY[0x1E0C80C00];
  v265 = 0;
  v266 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v266 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v265 = v7) == 0))
  {
    v217 = "Inconsistent state: null network";
    goto LABEL_423;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v217 = "Inconsistent state: blob_storage";
LABEL_423:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v217);
  }
  v282.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v282.__r_.__value_.__l.__data_, (__int128 **)&v282);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v263 = *((_QWORD *)v8 + 5);
  v264 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)&v282);
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v261 = *((_QWORD *)v12 + 5);
  v262 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  obj = (id)objc_opt_new();
  v258 = 0;
  v259 = 0;
  v260 = 0;
  *((_QWORD *)&v294 + 1) = CFSTR("Width");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", (char *)&v294 + 8, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v16, CFSTR("Dimension"));

  if (*((_DWORD *)this + 70))
  {
    _S0 = *((_DWORD *)this + 71);
    __asm { FCVT            H0, S0 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v22, CFSTR("Epsilon"));

  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, (id *)a3);
  v23 = v256;
  v256 = CFSTR("InstanceNormalization");

  objc_storeStrong(&v257, obj);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __str = __p;
  std::string::basic_string[abi:ne180100]<0>(&v248, "");
  if (*((_QWORD *)this + 38) || *((_QWORD *)this + 40))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v25 = &v282;
    std::string::basic_string[abi:ne180100]((uint64_t)&v282, size + 13);
    if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v282.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      memmove(v25, p_str, size);
    }
    strcpy((char *)v25 + size, "_instancenorm");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v282;
    std::string::operator=(&v248, &__p);
  }
  v27 = v259;
  if ((unint64_t)v259 >= v260)
  {
    v29 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
    if (v29 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v30 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
    if (v30 <= v29 + 1)
      v30 = v29 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
      v31 = 0x1C71C71C71C71C7;
    else
      v31 = v30;
    v284 = (std::__shared_weak_count *)&v260;
    if (v31)
      v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v31);
    else
      v32 = 0;
    v282.__r_.__value_.__r.__words[0] = v31;
    v282.__r_.__value_.__l.__size_ = v31 + 144 * v29;
    v282.__r_.__value_.__r.__words[2] = v282.__r_.__value_.__l.__size_;
    v283 = v31 + 144 * v32;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v282.__r_.__value_.__l.__size_, (uint64_t)&__p);
    v282.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &v282);
    v28 = v259;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v282);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
    v28 = v27 + 6;
  }
  v259 = v28;
  if (*((_QWORD *)this + 38))
  {
    v282.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
    v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v282.__r_.__value_.__l.__data_, (__int128 **)&v282);
    Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v33 + 5));
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v280, *(_DWORD *)(*((_QWORD *)this + 38) + 8), 1, 1, 1);
    v34 = v280;
    memcpy(*(void **)(v280 + 24), *(const void **)(*((_QWORD *)this + 38) + 16), 4 * *(int *)(*((_QWORD *)this + 38) + 8));
    if (*((char *)this + 199) >= 0)
      v35 = *((unsigned __int8 *)this + 199);
    else
      v35 = *((_QWORD *)this + 23);
    v36 = &v276;
    std::string::basic_string[abi:ne180100]((uint64_t)&v276, v35 + 13);
    if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v276.__r_.__value_.__r.__words[0];
    if (v35)
    {
      if (*((char *)this + 199) >= 0)
        v37 = (char *)this + 176;
      else
        v37 = (char *)*((_QWORD *)this + 22);
      memmove(v36, v37, v35);
    }
    strcpy((char *)v36 + v35, "_gamma_vector");
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v282, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
    else
      v282 = v276;
    v283 = v34;
    v284 = v281;
    if (v281)
    {
      v38 = (unint64_t *)&v281->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::string&,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>((uint64_t **)a2 + 34, &v276, (uint64_t)&v276, (uint64_t)&v282);
    v40 = v284;
    if (v284)
    {
      v41 = (unint64_t *)&v284->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    if (*((char *)this + 199) >= 0)
      v43 = *((unsigned __int8 *)this + 199);
    else
      v43 = *((_QWORD *)this + 23);
    v44 = &v282;
    std::string::basic_string[abi:ne180100]((uint64_t)&v282, v43 + 13);
    if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = (std::string *)v282.__r_.__value_.__r.__words[0];
    if (v43)
    {
      if (*((char *)this + 199) >= 0)
        v45 = (char *)this + 176;
      else
        v45 = (char *)*((_QWORD *)this + 22);
      memmove(v44, v45, v43);
    }
    strcpy((char *)v44 + v43, "_gamma_vector");
    if (*((char *)this + 199) >= 0)
      v46 = *((unsigned __int8 *)this + 199);
    else
      v46 = *((_QWORD *)this + 23);
    v47 = &v291;
    std::string::basic_string[abi:ne180100]((uint64_t)&v291, v46 + 6);
    if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v47 = (std::string *)v291.__r_.__value_.__r.__words[0];
    if (v46)
    {
      if (*((char *)this + 199) >= 0)
        v48 = (char *)this + 176;
      else
        v48 = (char *)*((_QWORD *)this + 22);
      memmove(v47, v48, v46);
    }
    strcpy((char *)v47 + v46, "_gamma");
    Espresso::ANECompilerEngine::add_vector_broadcasting((uint64_t)&v258, (id *)a3, (uint64_t)&v282, &v291, (unsigned int *)buf);
    if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v291.__r_.__value_.__l.__data_);
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v282.__r_.__value_.__l.__data_, (id *)a3);
    v49 = (void *)objc_opt_new();
    v50 = v289;
    v289 = CFSTR("ScaledElementWise");

    objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Mult"), CFSTR("Type"));
    if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v291, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
    else
      v291 = v248;
    if (*((char *)this + 199) >= 0)
      v51 = *((unsigned __int8 *)this + 199);
    else
      v51 = *((_QWORD *)this + 23);
    v52 = std::string::basic_string[abi:ne180100]((uint64_t)&v292, v51 + 6);
    if (v293[0] >= 0)
      v53 = (void *)v52;
    else
      v53 = (void *)v292;
    if (v51)
    {
      if (*((char *)this + 199) >= 0)
        v54 = (char *)this + 176;
      else
        v54 = (char *)*((_QWORD *)this + 22);
      memmove(v53, v54, v51);
    }
    strcpy((char *)v53 + v51, "_gamma");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v285, &v291, &v294, 2uLL);
    for (i = 0; i != -48; i -= 24)
    {
      if ((char)v293[i] < 0)
        operator delete(*(void **)((char *)&v291 + i + 24));
    }
    if (*((_QWORD *)this + 40))
    {
      if (*((char *)this + 199) >= 0)
        v56 = *((unsigned __int8 *)this + 199);
      else
        v56 = *((_QWORD *)this + 23);
      v57 = &v291;
      std::string::basic_string[abi:ne180100]((uint64_t)&v291, v56 + 13);
      if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v57 = (std::string *)v291.__r_.__value_.__r.__words[0];
      if (v56)
      {
        if (*((char *)this + 199) >= 0)
          v58 = (char *)this + 176;
        else
          v58 = (char *)*((_QWORD *)this + 22);
        memmove(v57, v58, v56);
      }
      strcpy((char *)v57 + v56, "_gamma_scaled");
      if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v282.__r_.__value_.__l.__data_);
      v282 = v291;
      v59 = &v282;
      v60 = &v248;
    }
    else
    {
      v59 = &__str;
      v60 = &v282;
    }
    std::string::operator=(v60, v59);
    objc_storeStrong(v290, v49);
    v61 = v259;
    if ((unint64_t)v259 >= v260)
    {
      v63 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
      if (v63 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v64 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
      if (v64 <= v63 + 1)
        v64 = v63 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
        v65 = 0x1C71C71C71C71C7;
      else
        v65 = v64;
      *((_QWORD *)&v292 + 1) = &v260;
      if (v65)
        v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v65);
      else
        v66 = 0;
      v291.__r_.__value_.__r.__words[0] = v65;
      v291.__r_.__value_.__l.__size_ = v65 + 144 * v63;
      v291.__r_.__value_.__r.__words[2] = v291.__r_.__value_.__l.__size_;
      *(_QWORD *)&v292 = v65 + 144 * v66;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v291.__r_.__value_.__l.__size_, (uint64_t)&v282);
      v291.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &v291);
      v62 = v259;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v291);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&v282);
      v62 = v61 + 6;
    }
    v259 = v62;

    if (v287 < 0)
      operator delete(v286);
    v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&v285;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
    v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&v283;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v276.__r_.__value_.__l.__data_);
    v67 = v281;
    if (v281)
    {
      v68 = (unint64_t *)&v281->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v300)
    {
      v301.__begin_ = (std::vector<std::string>::pointer)v300;
      operator delete(v300);
    }
    v7 = v265;
  }
  if (*((_QWORD *)this + 40))
  {
    v282.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
    v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v282.__r_.__value_.__l.__data_, (__int128 **)&v282);
    Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v70 + 5));
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v280, *(_DWORD *)(*((_QWORD *)this + 40) + 8), 1, 1, 1);
    v71 = v280;
    memcpy(*(void **)(v280 + 24), *(const void **)(*((_QWORD *)this + 40) + 16), 4 * *(int *)(*((_QWORD *)this + 40) + 8));
    if (*((char *)this + 199) >= 0)
      v72 = *((unsigned __int8 *)this + 199);
    else
      v72 = *((_QWORD *)this + 23);
    v73 = &v276;
    std::string::basic_string[abi:ne180100]((uint64_t)&v276, v72 + 12);
    if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v73 = (std::string *)v276.__r_.__value_.__r.__words[0];
    if (v72)
    {
      if (*((char *)this + 199) >= 0)
        v74 = (char *)this + 176;
      else
        v74 = (char *)*((_QWORD *)this + 22);
      memmove(v73, v74, v72);
    }
    strcpy((char *)v73 + v72, "_beta_vector");
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v282, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
    else
      v282 = v276;
    v283 = v71;
    v284 = v281;
    if (v281)
    {
      v75 = (unint64_t *)&v281->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::string&,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>((uint64_t **)a2 + 34, &v276, (uint64_t)&v276, (uint64_t)&v282);
    v77 = v284;
    if (v284)
    {
      v78 = (unint64_t *)&v284->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    if (*((char *)this + 199) >= 0)
      v80 = *((unsigned __int8 *)this + 199);
    else
      v80 = *((_QWORD *)this + 23);
    v81 = &v282;
    std::string::basic_string[abi:ne180100]((uint64_t)&v282, v80 + 12);
    if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v81 = (std::string *)v282.__r_.__value_.__r.__words[0];
    if (v80)
    {
      if (*((char *)this + 199) >= 0)
        v82 = (char *)this + 176;
      else
        v82 = (char *)*((_QWORD *)this + 22);
      memmove(v81, v82, v80);
    }
    strcpy((char *)v81 + v80, "_beta_vector");
    if (*((char *)this + 199) >= 0)
      v83 = *((unsigned __int8 *)this + 199);
    else
      v83 = *((_QWORD *)this + 23);
    v84 = &v291;
    std::string::basic_string[abi:ne180100]((uint64_t)&v291, v83 + 5);
    if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v84 = (std::string *)v291.__r_.__value_.__r.__words[0];
    if (v83)
    {
      if (*((char *)this + 199) >= 0)
        v85 = (char *)this + 176;
      else
        v85 = (char *)*((_QWORD *)this + 22);
      memmove(v84, v85, v83);
    }
    strcpy((char *)v84 + v83, "_beta");
    Espresso::ANECompilerEngine::add_vector_broadcasting((uint64_t)&v258, (id *)a3, (uint64_t)&v282, &v291, (unsigned int *)buf);
    if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v291.__r_.__value_.__l.__data_);
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v282.__r_.__value_.__l.__data_, (id *)a3);
    v86 = (void *)objc_opt_new();
    v87 = v289;
    v289 = CFSTR("ScaledElementWise");

    objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
    if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v291, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
    else
      v291 = v248;
    if (*((char *)this + 199) >= 0)
      v88 = *((unsigned __int8 *)this + 199);
    else
      v88 = *((_QWORD *)this + 23);
    v89 = std::string::basic_string[abi:ne180100]((uint64_t)&v292, v88 + 5);
    if (v293[0] >= 0)
      v90 = (void *)v89;
    else
      v90 = (void *)v292;
    if (v88)
    {
      if (*((char *)this + 199) >= 0)
        v91 = (char *)this + 176;
      else
        v91 = (char *)*((_QWORD *)this + 22);
      memmove(v90, v91, v88);
    }
    strcpy((char *)v90 + v88, "_beta");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v285, &v291, &v294, 2uLL);
    for (j = 0; j != -48; j -= 24)
    {
      if ((char)v293[j] < 0)
        operator delete(*(void **)((char *)&v291 + j + 24));
    }
    std::string::operator=(&v282, &__str);
    objc_storeStrong(v290, v86);
    v93 = v259;
    if ((unint64_t)v259 >= v260)
    {
      v95 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
      if (v95 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v96 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
      if (v96 <= v95 + 1)
        v96 = v95 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
        v97 = 0x1C71C71C71C71C7;
      else
        v97 = v96;
      *((_QWORD *)&v292 + 1) = &v260;
      if (v97)
        v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v97);
      else
        v98 = 0;
      v291.__r_.__value_.__r.__words[0] = v97;
      v291.__r_.__value_.__l.__size_ = v97 + 144 * v95;
      v291.__r_.__value_.__r.__words[2] = v291.__r_.__value_.__l.__size_;
      *(_QWORD *)&v292 = v97 + 144 * v98;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v291.__r_.__value_.__l.__size_, (uint64_t)&v282);
      v291.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &v291);
      v94 = v259;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v291);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&v282);
      v94 = v93 + 6;
    }
    v259 = v94;

    if (v287 < 0)
      operator delete(v286);
    v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&v285;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
    v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&v283;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v276.__r_.__value_.__l.__data_);
    v99 = v281;
    if (v281)
    {
      v100 = (unint64_t *)&v281->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    if (v300)
    {
      v301.__begin_ = (std::vector<std::string>::pointer)v300;
      operator delete(v300);
    }
  }
  v247 = v266;
  if (v266)
  {
    v102 = (unint64_t *)&v266->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = v261;
  v246 = v262;
  if (v262)
  {
    v105 = (unint64_t *)&v262->__shared_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v282);
  v290[0] = 0;
  v289 = 0;
  v290[1] = (id)0x100000000;
  v108 = *((_QWORD *)this + 50);
  v107 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  v280 = v108;
  v281 = v107;
  if (v107)
  {
    v109 = (unint64_t *)&v107->__shared_owners_;
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  if (v108
    && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 42) + 104))((char *)this + 336) + 40))
  {
    v111 = *(float *)(v104 + 112);
    v274 = v108;
    v275 = v107;
    if (v107)
    {
      v112 = (unint64_t *)&v107->__shared_owners_;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    v114 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
    v273[0] = *((_QWORD *)this + 52);
    v273[1] = (uint64_t)v114;
    if (v114)
    {
      v115 = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v274, v273, (uint64_t)&v276, v111);
    if (v114)
    {
      v117 = (unint64_t *)&v114->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v119 = v275;
    if (v275)
    {
      v120 = (unint64_t *)&v275->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = v280;
    v123 = *(unsigned int *)(v280 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v271, 2 * v123, 1, 1, 1);
    v124 = (int)v123;
    v270 = 0uLL;
    v125 = v123;
    v126 = *((_QWORD *)this + 52);
    if (v126)
      v125 = *(_DWORD *)(v126 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v291, 4 * v123);
      v218 = *(int **)(v291.__r_.__value_.__r.__words[0] + 16);
      v219 = v123 - 1;
      if ((int)v123 >= 1)
      {
        for (k = 0; k != v123; ++k)
        {
          v221 = *(float *)(*(_QWORD *)(v122 + 16) + k * 4);
          *(float *)&v222 = ldexp(1.0, -v278) * v221;
          v218[k] = v222;
        }
      }
      if ((_DWORD)v123)
      {
        v223 = *(_WORD **)(v271 + 16);
        do
        {
          v224 = *v218++;
          _S0 = v224;
          __asm { FCVT            H0, S0 }
          *v223++ = _S0;
          --v124;
        }
        while (v124);
      }
      v268 = 0;
      v269 = 0;
      if (*((_QWORD *)this + 52))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v125);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v268, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v125);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v270, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v227 = *(int **)(v268 + 16);
        if (v125 >= 1)
        {
          for (m = 0; m != v125; ++m)
          {
            if (v219 >= (int)m)
              v229 = m;
            else
              v229 = v219;
            *(float *)&v230 = *(float *)(*(_QWORD *)(v276.__r_.__value_.__r.__words[2] + 16) + 4 * m)
                            * *(float *)(*(_QWORD *)(v276.__r_.__value_.__r.__words[0] + 16) + 4 * v229);
            v227[m] = v230;
            v231 = v279;
            v232 = v278;
            *(float *)&v233 = ldexp(1.0, v279 - v278) * *(float *)&v230;
            v227[m] = v233;
            v236 = ldexp(1.0, v232 - v231) * *(float *)&v233;
            if (v236 < -127.0 || v236 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v234, v235);
              v238 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
              {
                v239 = *(float *)&v227[m];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v236;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v279;
                v296 = 1024;
                v297 = v278;
                v298 = 2048;
                v299 = v239;
                _os_log_error_impl(&dword_190DAF000, v238, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v125)
        {
          v240 = v125;
          v241 = *(_WORD **)(v270 + 16);
          do
          {
            v242 = *v227++;
            _S0 = v242;
            __asm { FCVT            H0, S0 }
            *v241++ = _S0;
            --v240;
          }
          while (v240);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v244 = v279;
    if ((_DWORD)v123)
    {
      v127 = *(int **)(v276.__r_.__value_.__r.__words[0] + 16);
      v128 = *(_WORD **)(v271 + 16);
      do
      {
        v129 = *v127++;
        _S0 = v129;
        __asm { FCVT            H0, S0 }
        *v128++ = _S0;
        --v124;
      }
      while (v124);
    }
    if (v126)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v125, 1, 1, 1);
      v131 = *(_OWORD *)buf;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v132 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
      v270 = v131;
      if (v132)
      {
        v133 = (unint64_t *)&v132->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v135 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v136 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      if (v125)
      {
        v138 = v125;
        v139 = *(int **)(v276.__r_.__value_.__r.__words[2] + 16);
        v140 = *(_WORD **)(v270 + 16);
        do
        {
          v141 = *v139++;
          _S0 = v141;
          __asm { FCVT            H0, S0 }
          *v140++ = _S0;
          --v138;
        }
        while (v138);
      }
    }
    v143 = *((unsigned __int8 *)a2 + 552);
    v144 = v271;
    v145 = v272;
    v268 = v271;
    v269 = v272;
    if (v272)
    {
      v146 = (unint64_t *)&v272->__shared_owners_;
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
    }
    v148 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v144 + 16), *(int *)(v144 + 8));
    if (v145)
    {
      v149 = (unint64_t *)&v145->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    v151 = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v152 = *(id *)(v258 + 128);

      v151 = v152;
    }
    v153 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v123);
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v153, "setObject:forKeyedSubscript:", v154, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v148);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v153, "setObject:forKeyedSubscript:", v155, CFSTR("ScaleOffset"));

    v156 = (void *)MEMORY[0x1E0CB37E8];
    if (v143)
      weights_file_index = 0;
    else
    objc_msgSend(v156, "numberWithUnsignedLong:", weights_file_index);
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v153, "setObject:forKeyedSubscript:", v158, CFSTR("ScaleIndex"));

    objc_msgSend(v153, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v278);
    v159 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v151, "setObject:forKeyedSubscript:", v159, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 52))
    {
      v160 = v270;
      v267 = v270;
      if (*((_QWORD *)&v270 + 1))
      {
        v161 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
      v163 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v160 + 16), *(int *)(v160 + 8));
      if (*((_QWORD *)&v160 + 1))
      {
        v164 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v160 + 1) + 16))(*((_QWORD *)&v160 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v160 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 52) + 8));
      v166 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v153, "setObject:forKeyedSubscript:", v166, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v163);
      v167 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v153, "setObject:forKeyedSubscript:", v167, CFSTR("BiasOffset"));

      v168 = (void *)MEMORY[0x1E0CB37E8];
      if (v143)
        v169 = 0;
      else
      objc_msgSend(v168, "numberWithUnsignedLong:", v169);
      v170 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v153, "setObject:forKeyedSubscript:", v170, CFSTR("BiasIndex"));

      objc_msgSend(v153, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v244);
      v171 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v151, "setObject:forKeyedSubscript:", v171, CFSTR("BiasShift"));

    }
    objc_msgSend(v151, "setObject:forKeyedSubscript:", v153, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    v172 = v259;
    if (v259 == (std::string *)v258)
      goto LABEL_339;
    v173 = v259 - 6;
    v174 = HIBYTE(v259[-6].__r_.__value_.__r.__words[2]);
    v175 = v174;
    v176 = v259[-6].__r_.__value_.__l.__size_;
    if ((v174 & 0x80u) == 0)
      v177 = HIBYTE(v259[-6].__r_.__value_.__r.__words[2]);
    else
      v177 = v259[-6].__r_.__value_.__l.__size_;
    v178 = HIBYTE(v297);
    if (v297 < 0)
      v178 = *(_QWORD *)&buf[8];
    if (v177 != v178)
      goto LABEL_333;
    if (v297 >= 0)
      v179 = buf;
    else
      v179 = *(unsigned __int8 **)buf;
    if ((char)v174 < 0)
    {
      data = (const std::string::value_type *)v173->__r_.__value_.__r.__words[0];
      if (memcmp(v173->__r_.__value_.__l.__data_, v179, v259[-6].__r_.__value_.__l.__size_))
        goto LABEL_336;
    }
    else if ((_BYTE)v174)
    {
      v180 = v259 - 6;
      while (v180->__r_.__value_.__s.__data_[0] == *v179)
      {
        v180 = (std::string *)((char *)v180 + 1);
        ++v179;
        if (!--v174)
          goto LABEL_332;
      }
      goto LABEL_333;
    }
LABEL_332:
    std::string::append(v172 - 6, "__@pre_scale_bias");
    v175 = HIBYTE(v172[-6].__r_.__value_.__r.__words[2]);
LABEL_333:
    if ((v175 & 0x80) == 0)
    {
      v182 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
      v291.__r_.__value_.__r.__words[2] = v172[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v182;
      goto LABEL_337;
    }
    data = v172[-6].__r_.__value_.__l.__data_;
    v176 = v172[-6].__r_.__value_.__l.__size_;
LABEL_336:
    std::string::__init_copy_ctor_external(&v291, data, v176);
LABEL_337:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v301, &v291, &v292, 1uLL);
    if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v291.__r_.__value_.__l.__data_);
LABEL_339:
    v183 = v305;
    v305 = CFSTR("GOC");

    objc_storeStrong(v306, v151);
    if (!*((_BYTE *)a2 + 121))
    {
      v184 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v186 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
        if (v186 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v187 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
        if (v187 <= v186 + 1)
          v187 = v186 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
          v188 = 0x1C71C71C71C71C7;
        else
          v188 = v187;
        *((_QWORD *)&v292 + 1) = &v260;
        if (v188)
          v188 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v188);
        else
          v189 = 0;
        v291.__r_.__value_.__r.__words[0] = v188;
        v291.__r_.__value_.__l.__size_ = v188 + 144 * v186;
        v291.__r_.__value_.__r.__words[2] = v291.__r_.__value_.__l.__size_;
        *(_QWORD *)&v292 = v188 + 144 * v189;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v291.__r_.__value_.__l.__size_, (uint64_t)buf);
        v291.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &v291);
        v185 = v259;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v291);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)buf);
        v185 = v184 + 6;
      }
      v259 = v185;
    }

    if (v303 < 0)
      operator delete(v302);
    v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&v301;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
    v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&v298;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
    if (SHIBYTE(v297) < 0)
      operator delete(*(void **)buf);

    v190 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
    if (*((_QWORD *)&v270 + 1))
    {
      v191 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    v193 = v272;
    if (v272)
    {
      v194 = (unint64_t *)&v272->__shared_owners_;
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    v196 = v277;
    if (v277)
    {
      v197 = (unint64_t *)&v277->__shared_owners_;
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
        std::__shared_weak_count::__release_weak(v196);
      }
    }
    v199 = (std::__shared_weak_count *)v276.__r_.__value_.__l.__size_;
    if (v276.__r_.__value_.__l.__size_)
    {
      v200 = (unint64_t *)(v276.__r_.__value_.__l.__size_ + 8);
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 - 1, v200));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
    }
    v107 = v281;
  }
  if (v107)
  {
    v202 = (unint64_t *)&v107->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }

  if (v287 < 0)
    operator delete(v286);
  *(_QWORD *)buf = &v285;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v283;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  if (v246)
  {
    v204 = (unint64_t *)&v246->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  if (v247)
  {
    v206 = (unint64_t *)&v247->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 42) + 24))((char *)this + 336, a2, &v258);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

  if (v254 < 0)
    operator delete(v253);
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v258;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);

  v208 = v262;
  if (v262)
  {
    v209 = (unint64_t *)&v262->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = v264;
  if (v264)
  {
    v212 = (unint64_t *)&v264->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v266;
  if (v266)
  {
    v215 = (unint64_t *)&v266->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
}

void sub_19179C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,id a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,char a57)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a31);
  STACK[0x2D0] = (unint64_t)&a50;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2D0]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::compile(Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::compile((Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *)((char *)this - 336), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::~mix_instancenorm_1d_kernel(void **this)
{
  Espresso::generic_instancenorm_1d_kernel *v1;

  v1 = (Espresso::generic_instancenorm_1d_kernel *)(this - 42);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(v1);
}

{
  Espresso::generic_instancenorm_1d_kernel *v1;

  v1 = (Espresso::generic_instancenorm_1d_kernel *)(this - 42);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::string&,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char *v9;
  std::string *v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  if (!*v7)
  {
    v8 = v7;
    v9 = (char *)operator new(0x60uLL);
    v11[0] = v9;
    v11[1] = a1 + 1;
    v12 = 0;
    v10 = (std::string *)(v9 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v9 + 6) = *(_QWORD *)(a3 + 16);
    }
    *(_OWORD *)(v9 + 56) = *(_OWORD *)a4;
    *((_QWORD *)v9 + 9) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *((_OWORD *)v9 + 5) = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v13, v8, (uint64_t *)v9);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
}

void sub_19179CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_l2_normalize_kernel::~mix_l2_normalize_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_l2_normalize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::mix_l2_normalize_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unsigned __int8 *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  const Espresso::net *v30;
  int v31;
  _BOOL8 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char v38;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  const Espresso::net *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  unint64_t *v62;
  unint64_t v63;
  Espresso::ANECompilerEngine *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int64x2_t *v74;
  std::__shared_weak_count *v75;
  char v76;
  void *v77[2];
  char v78;
  _OWORD v79[2];
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  unsigned __int8 *v84;
  std::__shared_weak_count *v85;
  void **v86[4];
  _OWORD v87[2];
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  std::__shared_weak_count *v93;
  void *__p[2];
  char v95;
  int64x2_t *v96;
  std::__shared_weak_count *v97;
  int64x2_t *v98;
  std::__shared_weak_count *v99;
  std::string v100;
  _BYTE v101[24];
  _BYTE v102[32];
  std::__shared_weak_count *v103;
  int64x2_t *v104;
  std::__shared_weak_count *v105;
  unsigned __int8 *v106;
  std::__shared_weak_count *v107;
  void **v108;

  v6 = a3[6];
  v106 = 0;
  v107 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v107 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)v6 + 9);
    v106 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v8 + 472));
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v104 = *(int64x2_t **)a2;
    v105 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "l2 normalize not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v104, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
    v14 = v103;
    if (v103)
    {
      v15 = (unint64_t *)&v103->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v86[0] = (void **)v102;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v86);
    v86[0] = (void **)v101;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v86);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (v95 < 0)
      operator delete(__p[0]);
    v17 = v105;
    if (!v105)
      goto LABEL_47;
    v18 = (unint64_t *)&v105->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    goto LABEL_41;
  }
  v20 = *(_DWORD *)(a1 + 284);
  if ((v20 | 2) == 3)
  {
    v21 = *(_DWORD *)(a1 + 288);
    v22 = *((_DWORD *)*a3 + 5);
    if (v22 == -1)
    {
      if (*((_DWORD *)*a3 + 4) == 1)
        v22 = 4;
      else
        v22 = 5;
    }
    else if (v22 > 5)
    {
      goto LABEL_47;
    }
    v30 = (const Espresso::net *)v106;
    v31 = v106[1281];
    switch(v21)
    {
      case 0:
      case 1:
        goto LABEL_88;
      case 2:
        if (v22 != 5 || v31 == 0)
          v38 = 2;
        else
          v38 = 1;
        goto LABEL_70;
      case 3:
        if (v22 != 5 || v31 == 0)
          v38 = 0;
        else
          v38 = 2;
        goto LABEL_70;
      case 4:
        v38 = v22 != 5 || v106[1281] == 0;
LABEL_70:
        if (v20 != 3 || (v38 & 1) != 0)
        {
LABEL_88:
          v47 = v107;
          v92 = v106;
          v93 = v107;
          if (v107)
          {
            v48 = (unint64_t *)&v107->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          v50 = a3[3];
          v51 = *((_QWORD *)v50 + 4);
          v52 = v50[1];
          v87[0] = *v50;
          v87[1] = v52;
          v88 = v51;
          v89 = 0;
          v90 = 0;
          v91 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v89, *((const void **)v50 + 5), *((_QWORD *)v50 + 6), (uint64_t)(*((_QWORD *)v50 + 6) - *((_QWORD *)v50 + 5)) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, v30, (const Espresso::layer_shape *)v87, 1);
          if (v89)
          {
            v90 = v89;
            operator delete(v89);
          }
          if (v47)
          {
            v53 = (unint64_t *)&v47->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v56 = (const Espresso::net *)v106;
          v55 = v107;
          v84 = v106;
          v85 = v107;
          if (v107)
          {
            v57 = (unint64_t *)&v107->__shared_owners_;
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
          v59 = (uint64_t)*a3;
          v60 = *((_QWORD *)*a3 + 4);
          v61 = (*a3)[1];
          v79[0] = **a3;
          v79[1] = v61;
          v80 = v60;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v81, *(const void **)(v59 + 40), *(_QWORD *)(v59 + 48), (uint64_t)(*(_QWORD *)(v59 + 48) - *(_QWORD *)(v59 + 40)) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v86, v56, (const Espresso::layer_shape *)v79, 1);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v55)
          {
            v62 = (unint64_t *)&v55->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v64 = v9;
          if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v86, v64))
          {
            if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v64))
            {
              v76 = 1;
              std::string::basic_string[abi:ne180100]<0>(v77, "Success");
            }
            else
            {
              v76 = 0;
              std::string::basic_string[abi:ne180100]<0>(v77, "Output blob dimensions exceed ANE limit.");
            }
          }
          else
          {
            v76 = 0;
            std::string::basic_string[abi:ne180100]<0>(v77, "Input blob dimensions exceed ANE limit.");
          }

          v32 = v76 != 0;
          if (!v76)
          {
            v65 = *(std::__shared_weak_count **)(a2 + 8);
            v74 = *(int64x2_t **)a2;
            v75 = v65;
            if (v65)
            {
              v66 = (unint64_t *)&v65->__shared_owners_;
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (__int128 *)v77, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v74, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
            v68 = v103;
            if (v103)
            {
              v69 = (unint64_t *)&v103->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v108 = (void **)v102;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v108);
            v108 = (void **)v101;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v108);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
            v71 = v75;
            if (v75)
            {
              v72 = (unint64_t *)&v75->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
          }
          if (v78 < 0)
            operator delete(v77[0]);
          goto LABEL_48;
        }
        v40 = *(std::__shared_weak_count **)(a2 + 8);
        v96 = *(int64x2_t **)a2;
        v97 = v40;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Only height, width, and depth can be used for L2 normalization on requested architecture.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (__int128 *)__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v96, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
        v43 = v103;
        if (v103)
        {
          v44 = (unint64_t *)&v103->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v86[0] = (void **)v102;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v86);
        v86[0] = (void **)v101;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v86);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        if (v95 < 0)
          operator delete(__p[0]);
        v17 = v97;
        if (v97)
        {
          v46 = (unint64_t *)&v97->__shared_owners_;
          do
            v19 = __ldaxr(v46);
          while (__stlxr(v19 - 1, v46));
          goto LABEL_41;
        }
        break;
      default:
        break;
    }
  }
  else
  {
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    v98 = *(int64x2_t **)a2;
    v99 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Only MVA_L2 and MVA_SUBTRACT_MEAN_NORM_VARIANCE normalization modes are supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v98, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
    v26 = v103;
    if (v103)
    {
      v27 = (unint64_t *)&v103->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v86[0] = (void **)v102;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v86);
    v86[0] = (void **)v101;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v86);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (v95 < 0)
      operator delete(__p[0]);
    v17 = v99;
    if (v99)
    {
      v29 = (unint64_t *)&v99->__shared_owners_;
      do
        v19 = __ldaxr(v29);
      while (__stlxr(v19 - 1, v29));
LABEL_41:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
LABEL_47:
  v32 = 0;
LABEL_48:

  v33 = v107;
  if (v107)
  {
    v34 = (unint64_t *)&v107->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v32;
}

void sub_19179D5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  void *v49;
  uint64_t v50;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v50 - 72);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_l2_normalize_kernel::compile(Espresso::ANECompilerEngine::mix_l2_normalize_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  __CFString *v18;
  void *v23;
  void *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  std::string *v33;
  std::string *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const char *v47;
  void **v48;
  std::string *v49;
  std::string *v50;
  unint64_t v51;
  _QWORD *v52;
  void *__p;
  void *v54;
  void *v55[2];
  char v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char v60;
  id v61;
  __CFString *v62;
  id v63;
  uint64_t v64;
  std::string *v65;
  _QWORD v66[4];
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  v68 = 0;
  v69 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v69 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v68 = v7) == 0))
  {
    v47 = "Inconsistent state: null network";
    goto LABEL_79;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v47 = "Inconsistent state: blob_storage";
LABEL_79:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v47);
  }
  v55[0] = a3[6];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v55[0], (__int128 **)v55);
  v10 = *((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v66[3] = v10;
  v67 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v55[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)v55);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v66[1] = *((_QWORD *)v13 + 5);
  v66[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v64 = 0;
  v65 = 0;
  v66[0] = 0;
  v17 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v55, a3);
  v18 = v62;
  v62 = CFSTR("L2Normalization");

  _S0 = *((_DWORD *)this + 70);
  __asm { FCVT            H0, S0 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v23, CFSTR("Epsilon"));

  v24 = (void *)objc_opt_new();
  v25 = *((_DWORD *)this + 72);
  Espresso::abstract_blob_container::shape((char *)&v48, v10);
  if ((_DWORD)v50 == 1)
    v26 = 4;
  else
    v26 = 5;
  if (HIDWORD(v50) == -1)
    v27 = v26;
  else
    v27 = HIDWORD(v50);
  if (v27 <= 5 && (v28 = *(unsigned __int8 *)(v7 + 1281), v25 <= 4))
  {
    v29 = 4;
    switch(v25)
    {
      case 0u:
        break;
      case 1u:
        v29 = 3;
        break;
      case 2u:
        if (v27 != 5 || v28 == 0)
          v29 = 2;
        else
          v29 = 1;
        break;
      case 3u:
        if (v27 != 5 || v28 == 0)
          v29 = 0;
        else
          v29 = 2;
        break;
      case 4u:
        v29 = v27 != 5 || *(_BYTE *)(v7 + 1281) == 0;
        break;
      default:
        goto LABEL_19;
    }
    v30 = 1;
  }
  else
  {
LABEL_19:
    v29 = 0;
    v30 = 0;
  }
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  if ((v30 & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unknown axis.");
  if (v29 == 1)
  {
    objc_msgSend(v24, "addObject:", CFSTR("Depth"));
  }
  else if ((v29 & 0xFFFFFFFD) != 1)
  {
    goto LABEL_45;
  }
  objc_msgSend(v24, "addObject:", CFSTR("Height"));
LABEL_45:
  objc_msgSend(v24, "addObject:", CFSTR("Width"));
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v24, CFSTR("Dimension"));
  objc_storeStrong(&v63, v17);
  v33 = v65;
  if ((unint64_t)v65 >= v66[0])
  {
    v35 = 0x8E38E38E38E38E39 * (((uint64_t)v65 - v64) >> 4);
    if (v35 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v36 = 0x1C71C71C71C71C72 * ((v66[0] - v64) >> 4);
    if (v36 <= v35 + 1)
      v36 = v35 + 1;
    if (0x8E38E38E38E38E39 * ((v66[0] - v64) >> 4) >= 0xE38E38E38E38E3)
      v37 = 0x1C71C71C71C71C7;
    else
      v37 = v36;
    v52 = v66;
    if (v37)
      v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v37);
    else
      v38 = 0;
    v48 = (void **)v37;
    v49 = (std::string *)(v37 + 144 * v35);
    v50 = v49;
    v51 = v37 + 144 * v38;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v49, (uint64_t)v55);
    v50 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v64, &v48);
    v34 = v65;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v48);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v65, (uint64_t)v55);
    v34 = v33 + 6;
  }
  v65 = v34;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 37) + 24))((char *)this + 296, a2, &v64);

  if (v60 < 0)
    operator delete(v59);
  v48 = (void **)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v48);
  v48 = (void **)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v48);
  if (v56 < 0)
    operator delete(v55[0]);

  v55[0] = &v64;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  if (v14)
  {
    v39 = (unint64_t *)&v14->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v41 = v67;
  if (v67)
  {
    v42 = (unint64_t *)&v67->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v69;
  if (v69)
  {
    v45 = (unint64_t *)&v69->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_19179DBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  void *v18;
  void *v19;
  uint64_t v20;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&a10);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a18);
  a18 = (void **)(v20 - 152);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 96);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_l2_normalize_kernel::compile(Espresso::ANECompilerEngine::mix_l2_normalize_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_l2_normalize_kernel::compile((Espresso::ANECompilerEngine::mix_l2_normalize_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_l2_normalize_kernel::~mix_l2_normalize_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::~mix_deconv3d_kernel(Espresso::ANECompilerEngine::mix_deconv3d_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D78CF8;
  v2 = (void **)((char *)this + 424);
  *((_QWORD *)this + 53) = &unk_1E2D78EE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D78CF8;
  v2 = (void **)((char *)this + 424);
  *((_QWORD *)this + 53) = &unk_1E2D78EE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int32x2_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  __int128 v21[2];
  void *__p;
  void *v23;

  Espresso::generic_deconv3d_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(a1[53] + 128))(v21, a1 + 53);
  v11 = (std::__shared_weak_count *)a1[2];
  v20[0] = a1[1];
  v20[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(_QWORD *))(a1[53] + 136))(a1 + 53);
  Espresso::set_conv_quantized_weight_helper(v15, v16, v17, v14, a3, (char *)a4, a5, a6, (uint64_t)(a1 + 51), v21, v20, v14, 1);
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 53, (uint64_t *)a3, a4, a5);
}

void sub_19179DEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_deconv3d_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  void *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 v20;
  std::__shared_weak_count *v21;
  const Espresso::net *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  const Espresso::net *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unsigned int v43;
  id v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  const __CFString *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __CFString *v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  CFTypeRef *v80;
  unint64_t *v81;
  unint64_t v82;
  CFTypeRef *v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  void **v88;
  std::string::size_type v89;
  std::string *v90;
  void *v91;
  char v92;
  int __val;
  id v94;
  void *v95;
  int64x2_t *v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  char v100;
  void *v101;
  _BYTE v102[15];
  char v103;
  const Espresso::base_kernel::validate_for_engine_args_t *v104;
  std::__shared_weak_count *v105;
  std::string v106;
  _OWORD v107[2];
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t v111;
  const Espresso::net *v112;
  std::__shared_weak_count *v113;
  _OWORD v114[2];
  _OWORD v115[2];
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  const Espresso::net *v120;
  std::__shared_weak_count *v121;
  __int128 v122;
  __int128 v123;
  int64x2_t *v124;
  std::__shared_weak_count *v125;
  const Espresso::net *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  unsigned __int8 v129;
  std::string v130;
  std::string v131;
  std::string v132;
  _OWORD v133[2];
  int v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  _OWORD v141[2];
  _OWORD v142[2];
  __int128 v143;
  int32x2_t v144;
  std::string __p;
  _QWORD v146[3];
  char v147;
  __int128 v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  int v151;
  __int128 v152;
  int32x2_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD v158[5];

  v158[2] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a3 + 6);
  v126 = 0;
  v127 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v127 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v126 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v124 = *(int64x2_t **)a2;
    v125 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v137, "deconv3d not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v137, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v14 = v150;
    if (v150)
    {
      v15 = (unint64_t *)&v150->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *(_QWORD *)&v133[0] = &v147;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v133);
    *(_QWORD *)&v133[0] = v146;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v133);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v138) < 0)
      operator delete(v137);
    v17 = v125;
    if (v125)
    {
      v18 = (unint64_t *)&v125->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = 0;
  }
  else
  {
    v22 = v126;
    v21 = v127;
    v120 = v126;
    v121 = v127;
    if (v127)
    {
      v23 = (unint64_t *)&v127->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *(_QWORD *)a3;
    v26 = *(_QWORD *)(*(_QWORD *)a3 + 32);
    v27 = *(_OWORD *)(*(_QWORD *)a3 + 16);
    v115[0] = *(_OWORD *)*(_QWORD *)a3;
    v115[1] = v27;
    v116 = v26;
    v117 = 0;
    v118 = 0;
    v119 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v117, *(const void **)(v25 + 40), *(_QWORD *)(v25 + 48), (uint64_t)(*(_QWORD *)(v25 + 48) - *(_QWORD *)(v25 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v122, v22, (const Espresso::layer_shape *)v115, 1);
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
    if (v21)
    {
      v28 = (unint64_t *)&v21->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v31 = v126;
    v30 = v127;
    v112 = v126;
    v113 = v127;
    if (v127)
    {
      v32 = (unint64_t *)&v127->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = *((_QWORD *)a3 + 3);
    v35 = *(_QWORD *)(v34 + 32);
    v36 = *(_OWORD *)(v34 + 16);
    v107[0] = *(_OWORD *)v34;
    v107[1] = v36;
    v108 = v35;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v109, *(const void **)(v34 + 40), *(_QWORD *)(v34 + 48), (uint64_t)(*(_QWORD *)(v34 + 48) - *(_QWORD *)(v34 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v114, v31, (const Espresso::layer_shape *)v107, 1);
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
    if (v30)
    {
      v37 = (unint64_t *)&v30->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v39 = *((_QWORD *)a3 + 6);
    v40 = *(__int128 **)(*(_QWORD *)v39 + 224 * *((_QWORD *)a3 + 9) + 136);
    if (*((char *)v40 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
      v39 = *((_QWORD *)a3 + 6);
    }
    else
    {
      v41 = *v40;
      v106.__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v41;
    }
    v42 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v39 + 80));
    v104 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v39 + 72);
    v105 = v42;
    v43 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v104, 0);
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v98, (NSString *)(a1 + 424), v9);
    v44 = v9;
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v122, v44))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v114, v44))
      {
        ANECConvLayerDescInitialize();
        v45 = *(int *)(a1 + 312);
        v46 = *(_DWORD *)(a1 + 316);
        v47 = *(int *)(a1 + 384);
        v48 = v46 == (_DWORD)v47 && (_DWORD)v45 == v46;
        v49 = CFSTR("ChannelWiseDeConv");
        if (!v48)
          v49 = CFSTR("DeConv");
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        v50 = *(_QWORD *)(a1 + 408);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)Espresso::ANECompilerEngine::ane_conv_kernel_mode(v50, 0);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)Espresso::ANECompilerEngine::ane_conv_kernel_format(v50);
        v146[1] = v45;
        v146[2] = v47;
        v147 = 0;
        ANECKernelSizeInitialize();
        v51 = *(_QWORD *)(a1 + 320);
        *(_QWORD *)&v52 = (int)v51;
        *((_QWORD *)&v52 + 1) = SHIDWORD(v51);
        v148 = v52;
        v149 = *(int *)(a1 + 328);
        ANECStepInitialize();
        v53 = *(__int16 *)(a1 + 370);
        LODWORD(v150) = *(__int16 *)(a1 + 368);
        HIDWORD(v150) = v53;
        v151 = *(__int16 *)(a1 + 372);
        v154 = 0;
        ANECKernelDilationRateInitialize();
        v54 = *(__int16 *)(a1 + 376);
        v155 = *(__int16 *)(a1 + 374);
        v156 = v54;
        v157 = *(__int16 *)(a1 + 378);
        ANECPaddingInitialize();
        v142[0] = v122;
        v142[1] = v123;
        v141[0] = v114[0];
        v141[1] = v114[1];
        Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding((unsigned int *)&v143, a1 + 304, v142, v141);
        v152 = v143;
        v153 = vrev64_s32(v144);
        if (v43 < 8 && ((0x97u >> v43) & 1) != 0)
        {
          v74 = off_1E2DD6178[v43];
          ANECTensorDescInitialize();
          *(_QWORD *)&v75 = SHIDWORD(v122);
          *((_QWORD *)&v75 + 1) = (int)v123;
          v139 = v75;
          v137 = v74;
          v140 = SDWORD2(v122);
          *(_QWORD *)&v75 = (int)v122;
          *((_QWORD *)&v75 + 1) = SDWORD1(v122);
          v138 = v75;
          v136 = 0;
          v135 = 0;
          v76 = ANECValidateConvLayer();
          if (v76)
          {
            __val = v76;
            v94 = v44;
            v95 = v9;
            v77 = v136;
            v78 = v135;
            memset(v133, 0, sizeof(v133));
            v134 = 1065353216;
            if (v136)
            {
              v79 = 0;
              v80 = (CFTypeRef *)(v135 + 8);
              do
              {
                v81 = (unint64_t *)(v78 + 760 * v79);
                if (*v81)
                {
                  v82 = 0;
                  v83 = v80;
                  do
                  {
                    std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)v133, v83, v83);
                    ++v82;
                    ++v83;
                  }
                  while (v82 < *v81);
                }
                ++v79;
                v80 += 95;
              }
              while (v79 != v77);
            }
            std::to_string(&v130, __val);
            v84 = std::string::insert(&v130, 0, "ANECValidateConvLayer check failed with status ");
            v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
            v131.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v85;
            v84->__r_.__value_.__l.__size_ = 0;
            v84->__r_.__value_.__r.__words[2] = 0;
            v84->__r_.__value_.__r.__words[0] = 0;
            v86 = std::string::append(&v131, ". ");
            v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
            v132.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v87;
            v86->__r_.__value_.__l.__size_ = 0;
            v86->__r_.__value_.__r.__words[2] = 0;
            v86->__r_.__value_.__r.__words[0] = 0;
            v44 = v94;
            v9 = v95;
            Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v128, (uint64_t)v133);
            if ((v129 & 0x80u) == 0)
              v88 = v128;
            else
              v88 = (void **)v128[0];
            if ((v129 & 0x80u) == 0)
              v89 = v129;
            else
              v89 = (std::string::size_type)v128[1];
            v90 = std::string::append(&v132, (const std::string::value_type *)v88, v89);
            v91 = (void *)v90->__r_.__value_.__r.__words[0];
            v158[0] = v90->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v158 + 7) = *(std::string::size_type *)((char *)&v90->__r_.__value_.__r.__words[1] + 7);
            v92 = HIBYTE(v90->__r_.__value_.__r.__words[2]);
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            v100 = 0;
            *(_QWORD *)&v102[7] = *(_QWORD *)((char *)v158 + 7);
            v101 = v91;
            *(_QWORD *)v102 = v158[0];
            v103 = v92;
            if ((char)v129 < 0)
              operator delete(v128[0]);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v131.__r_.__value_.__l.__data_);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v130.__r_.__value_.__l.__data_);
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v133);
          }
          else
          {
            v100 = 1;
            std::string::basic_string[abi:ne180100]<0>(&v101, "Success");
          }
        }
        else
        {
          v100 = 0;
          std::string::basic_string[abi:ne180100]<0>(&v101, "Invalid compute path for deconv3d input.");
        }
      }
      else
      {
        v100 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v101, "Output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      v100 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v101, "Input blob dimensions exceed ANE limit.");
    }

    v55 = v99;
    if (v99)
    {
      v56 = (unint64_t *)&v99->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v20 = v100 != 0;
    if (!v100)
    {
      v65 = *(std::__shared_weak_count **)(a2 + 8);
      v96 = *(int64x2_t **)a2;
      v97 = v65;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v101, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v96, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v68 = v150;
      if (v150)
      {
        v69 = (unint64_t *)&v150->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v137 = &v147;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
      v137 = v146;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v71 = v97;
      if (v97)
      {
        v72 = (unint64_t *)&v97->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
    }
    if (v103 < 0)
      operator delete(v101);
    v58 = v105;
    if (v105)
    {
      v59 = (unint64_t *)&v105->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
  }

  v61 = v127;
  if (v127)
  {
    v62 = (unint64_t *)&v127->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v20;
}

void sub_19179E7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;
  void *v61;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a28 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_deconv3d_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;

  v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 1)
      goto LABEL_8;
    v4 = *(unsigned __int8 *)*a2;
  }
  else
  {
    if (v3 != 1)
      goto LABEL_8;
    v4 = *(unsigned __int8 *)a2;
  }
  if (v4 == 87 || v4 == 98)
    return 1;
LABEL_8:
  if (Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
    return 1;
  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

_QWORD *Espresso::ANECompilerEngine::mix_deconv3d_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), *a2, a2[1]);
}

_QWORD *Espresso::ANECompilerEngine::mix_deconv3d_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), *a2, a2[1]);
}

uint64_t Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 512);
  *a2 = *(_QWORD *)(this + 504);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 648);
  *a2 = *(_QWORD *)(this + 640);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::compile(Espresso::ANECompilerEngine::mix_deconv3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  __int128 *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const char *v48;
  void *v49;
  std::__shared_weak_count *v50;
  void *v51;
  std::__shared_weak_count *v52;
  _OWORD v53[6];
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unsigned __int8 *v57;
  std::__shared_weak_count *v58;
  const void *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  __int128 *v63;

  v61 = 0;
  v62 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v62 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v61 = v8) == 0))
  {
    v48 = "Inconsistent state: null network";
    goto LABEL_60;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v48 = "Inconsistent state: blob_storage";
LABEL_60:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v48);
  }
  v9 = v7;
  v57 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, v57, (__int128 **)&v57);
  v11 = (const void *)*((_QWORD *)v10 + 5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v59 = v11;
  v60 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v63 = (__int128 *)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, &v63);
  v17 = (__int128 *)*((_QWORD *)v15 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v57 = (unsigned __int8 *)v17;
  v58 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v55 = v8;
  v56 = v9;
  v20 = (unint64_t *)&v9->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v22 = *((_OWORD *)this + 24);
  v53[4] = *((_OWORD *)this + 23);
  v53[5] = v22;
  v54 = *((_DWORD *)this + 100);
  v23 = *((_OWORD *)this + 20);
  v53[0] = *((_OWORD *)this + 19);
  v53[1] = v23;
  v24 = *((_OWORD *)this + 22);
  v53[2] = *((_OWORD *)this + 21);
  v53[3] = v24;
  if (v11
  {
    v51 = v25;
    v52 = v12;
    if (v12)
    {
      v26 = (unint64_t *)&v12->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (!v17)
      goto LABEL_26;
  }
  else
  {
    v51 = 0;
    v52 = 0;
    if (!v17)
    {
LABEL_26:
      v16 = 0;
      v49 = 0;
      v50 = 0;
      goto LABEL_27;
    }
  }
  if (!v28)
    goto LABEL_26;
  v49 = v28;
  v50 = v16;
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
LABEL_27:
  mix_add_conv_3d<Espresso::ANECompilerEngine::mix_deconv3d_kernel *>(this, a2, &v55, (uint64_t)v53, (id *)a3, &v51, &v49);
  if (v16)
  {
    v31 = (unint64_t *)&v16->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v33 = v52;
  if (v52)
  {
    v34 = (unint64_t *)&v52->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v56;
  if (v56)
  {
    v37 = (unint64_t *)&v56->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v58;
  if (v58)
  {
    v40 = (unint64_t *)&v58->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v60;
  if (v60)
  {
    v43 = (unint64_t *)&v60->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v62;
  if (v62)
  {
    v46 = (unint64_t *)&v62->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_19179EDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 104);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_deconv3d_kernel::compile(Espresso::ANECompilerEngine::mix_deconv3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::compile((Espresso::ANECompilerEngine::mix_deconv3d_kernel *)((char *)this - 424), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_deconv3d_kernel::~mix_deconv3d_kernel(Espresso::ANECompilerEngine::mix_deconv3d_kernel *this)
{
  Espresso::generic_conv3d_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_deconv3d_kernel *)((char *)this - 424);
  *((_QWORD *)this - 53) = &off_1E2D78CF8;
  *(_QWORD *)this = &unk_1E2D78EE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
}

{
  Espresso::generic_conv3d_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_deconv3d_kernel *)((char *)this - 424);
  *((_QWORD *)this - 53) = &off_1E2D78CF8;
  *(_QWORD *)this = &unk_1E2D78EE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void mix_add_conv_3d<Espresso::ANECompilerEngine::mix_deconv3d_kernel *>(_QWORD *a1, _BYTE *a2, uint64_t *a3, uint64_t a4, id *a5, _QWORD *a6, _QWORD *a7)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  const NSDictionary *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  const NSDictionary *v23;
  float v24;
  uint64_t v25;
  float v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  id v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  int v51;
  int v52;
  std::string::size_type v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  std::__shared_weak_count *v57;
  int32x4_t v58;
  int8x16_t v59;
  unint64_t *v60;
  const unsigned __int8 *v61;
  __int32 v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  std::__shared_weak_count *v71;
  int32x4_t v72;
  int8x16_t v73;
  unint64_t *p_shared_owners;
  const unsigned __int8 *v75;
  __int32 v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  void *v81;
  uint64_t weights_file_index;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  std::__shared_weak_count *v88;
  int32x4_t v89;
  int8x16_t v90;
  unint64_t *v91;
  const unsigned __int8 *v92;
  __int32 v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  void *v100;
  std::__shared_weak_count *v101;
  _BOOL4 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  char v113;
  id v114;
  void *v115;
  BOOL v117;
  char v118;
  int v119;
  void *v120;
  __int128 v121;
  unint64_t *v122;
  unint64_t v123;
  unsigned int v124;
  char *v125;
  int32x4_t v126;
  int8x16_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t i;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  std::__shared_weak_count *size;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  void *v146;
  Espresso::ANECompilerEngine::compiler::build_state_t *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  unint64_t *v153;
  unint64_t v154;
  __int128 v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  void *v162;
  uint64_t v163;
  void *v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  id v172;
  int v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::string::size_type v180;
  Espresso::ANECompilerEngine::compiler::build_state_t *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  void *v191;
  void *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  void *v201;
  uint64_t v202;
  void *v203;
  void *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  __int128 v217;
  __int128 v218;
  uint64_t data_low;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  const __CFString *v230;
  __CFString *v231;
  std::string *v232;
  std::string *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  void **v246;
  unint64_t *v247;
  unint64_t v248;
  char v249;
  float v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  void **v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int *v267;
  _WORD *v268;
  int v269;
  __int128 v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  int *v282;
  _WORD *v283;
  int v284;
  int v286;
  Espresso::ANECompilerEngine::compiler::build_state_t *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  void *v295;
  id v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  uint64_t v301;
  void *v302;
  void *v303;
  __int128 v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  void *v310;
  void *v311;
  void *v312;
  uint64_t v313;
  void *v314;
  void *v315;
  std::string *v316;
  std::string *v317;
  uint64_t v318;
  char v319;
  std::string::size_type v320;
  std::string::size_type v321;
  uint64_t v322;
  unsigned __int8 *v323;
  std::string *v324;
  const std::string::value_type *data;
  __int128 v326;
  __CFString *v327;
  std::string *v328;
  std::string *v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  uint64_t *v348;
  unint64_t v349;
  uint64_t *v350;
  unint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  const unsigned __int8 *v356;
  int *v357;
  _WORD *v358;
  uint64_t v359;
  int v360;
  Espresso::ANECompilerEngine::compiler::build_state_t *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  __int128 v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t *v379;
  unint64_t v380;
  Espresso::ANECompilerEngine::compiler::build_state_t *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  void **v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t *v392;
  unint64_t v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  uint64_t v398;
  id v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  uint64_t v404;
  void *v405;
  void *v406;
  __CFString *v407;
  std::string *v408;
  std::string *v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  void *v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t v421;
  char *v422;
  std::string::size_type v423;
  __int128 v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::string::size_type v428;
  float *v429;
  float *v430;
  float *v431;
  uint64_t v432;
  float v433;
  float v434;
  float v435;
  uint64_t v436;
  const unsigned __int8 *v437;
  int *v438;
  _WORD *v439;
  uint64_t v440;
  int v441;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t *v447;
  unint64_t v448;
  void *v449;
  void *v450;
  void *v451;
  uint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  void *v465;
  void *v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::string::size_type v473;
  unint64_t v474;
  char *v475;
  uint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  int *v480;
  uint64_t v481;
  uint64_t v482;
  const unsigned __int8 *v483;
  _WORD *v484;
  int v485;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  uint64_t v490;
  unint64_t *v491;
  unint64_t v492;
  void *v493;
  uint64_t v494;
  void *v495;
  void *v496;
  __CFString *v497;
  std::string *v498;
  std::string *v499;
  void *v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  void *v510;
  __CFString *v511;
  std::string *v512;
  std::string *v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t *v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  int v525;
  id v526;
  uint64_t v527;
  NSString *v528;
  std::string *p_str;
  __CFString *v530;
  std::string *v531;
  std::string *v532;
  unint64_t v533;
  unint64_t v534;
  char *v535;
  uint64_t v536;
  std::string *v537;
  std::string *v538;
  std::string *v539;
  std::string *m;
  __CFString *v541;
  std::string *v542;
  std::string *v543;
  __int128 v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  void *v549;
  std::string *v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  std::__shared_weak_count *v584;
  unint64_t *v585;
  unint64_t v586;
  std::runtime_error *exception;
  uint64_t v588;
  int *v589;
  int v590;
  uint64_t j;
  float v592;
  int v593;
  _WORD *v594;
  int v595;
  std::runtime_error *v597;
  const char *v598;
  int *v599;
  uint64_t k;
  int v601;
  int v602;
  unsigned int v603;
  unsigned int v604;
  int v605;
  Espresso *v606;
  const char *v607;
  float v608;
  NSObject *v610;
  double v611;
  uint64_t v612;
  _WORD *v613;
  int v614;
  int32x4_t v616;
  id v617;
  int32x4_t v618;
  int32x4_t v619;
  int32x4_t v620;
  char v621;
  int v622;
  _QWORD *v623;
  _BOOL4 v624;
  Espresso::ANECompilerEngine *v625;
  _BOOL4 v626;
  int v627;
  unsigned int v628;
  Espresso::ANECompilerEngine::sparsity_options *v629;
  uint64_t v634;
  std::__shared_weak_count *v635;
  void **v636;
  std::__shared_weak_count *v637;
  __int128 v638;
  uint64_t v639;
  std::__shared_weak_count *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  std::__shared_weak_count *v644;
  __int128 v645;
  uint64_t v646;
  std::__shared_weak_count *v647;
  uint64_t v648;
  std::__shared_weak_count *v649;
  _OWORD v650[2];
  _OWORD v651[2];
  std::__shared_weak_count *v652;
  std::__shared_weak_count *v653;
  std::__shared_weak_count *v654;
  std::__shared_weak_count *v655;
  uint64_t v656;
  std::__shared_weak_count *v657;
  uint64_t v658;
  std::__shared_weak_count *v659;
  uint64_t v660;
  std::string *v661;
  unint64_t v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  uint64_t v676;
  std::__shared_weak_count *v677;
  __int128 v678;
  uint64_t v679;
  std::__shared_weak_count *v680;
  uint64_t v681[2];
  void **v682;
  std::__shared_weak_count *v683;
  __int128 v684;
  uint64_t v685;
  std::__shared_weak_count *v686;
  unsigned int v687;
  unsigned int v688;
  std::string **v689;
  std::__shared_weak_count *v690;
  std::string __p;
  _BYTE v692[24];
  std::string *v693;
  std::string *v694;
  unint64_t v695;
  void *v696;
  char v697;
  id v698;
  __CFString *v699;
  id v700;
  unint64_t v701;
  _QWORD v702[3];
  _BYTE buf[24];
  __int128 v704;
  std::vector<std::string> v705;
  void *v706;
  char v707;
  id v708;
  __CFString *v709;
  id v710;
  std::string __str;
  __int128 v712;
  uint64_t v713;

  v713 = *MEMORY[0x1E0C80C00];
  v627 = a2[552];
  v628 = *(_DWORD *)(*a7 + 164);
  v673 = 0u;
  v674 = 0u;
  v671 = 0u;
  v672 = 0u;
  v669 = 0u;
  v670 = 0u;
  v667 = 0u;
  v668 = 0u;
  v665 = 0u;
  v666 = 0u;
  v663 = 0u;
  v664 = 0u;
  v10 = *(_DWORD *)(a4 + 16);
  v11 = *(_DWORD *)(a4 + 20);
  v12 = *(_DWORD *)(a4 + 24);
  v13 = *(__int16 *)(a4 + 70);
  if (v13 > 1)
    v14 = (v10 - 1) * v13 + 1;
  else
    v14 = v10;
  v15 = *(__int16 *)(a4 + 72);
  if (v15 > 1)
    v16 = (v11 - 1) * v15 + 1;
  else
    v16 = v11;
  v17 = *(__int16 *)(a4 + 74);
  if (v17 > 1)
    v18 = (v12 - 1) * v17 + 1;
  else
    v18 = v12;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v629 = (Espresso::ANECompilerEngine::sparsity_options *)objc_claimAutoreleasedReturnValue();

  v21 = *(__int16 *)(a4 + 70) > 1 || *(__int16 *)(a4 + 72) > 1 || *(__int16 *)(a4 + 74) > 1;
  v626 = v21;
  v22 = Espresso::ANECompilerEngine::sparsity_options::force_dense_dilated_convs(v629, v20);
  v624 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(*a3 + 472, v629);
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v629, v23);
  v25 = (uint64_t)a5[6];
  if ((char *)a5[7] - v25 != (_BYTE *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*a6)
  {
    if (*(char *)(v25 + 23) < 0)
      v25 = *(_QWORD *)v25;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v25);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0)
      v588 = (uint64_t)a5;
    else
      v588 = (uint64_t)*a5;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v588);
  }
  v26 = v24;
  v623 = a6;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
  v625 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v660 = 0;
  v661 = 0;
  v662 = 0;
  v27 = (void *)objc_opt_new();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("Dense"), CFSTR("KernelMode"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v14);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v28, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v16);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v29, CFSTR("KernelHeight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v30, CFSTR("KernelDepth"));

  v31 = *(_DWORD *)(a4 + 80);
  if (v31 >= 2 && v31 == *(_DWORD *)(a4 + 12) && v31 == *(_DWORD *)(a4 + 8))
  {
    objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("ChannelWiseDeConv"), CFSTR("Type"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("KernelGroupReuse"));
    v622 = 1;
  }
  else
  {
    objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("DeConv"), CFSTR("Type"));
    v622 = *(_DWORD *)(a4 + 80);
    objc_msgSend(v27, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("KernelGroupReuse"));
  }
  if (v22)
  {
    v32 = v27;
    v33 = v32;
    if (*(__int16 *)(a4 + 70) > 1 || *(__int16 *)(a4 + 72) > 1 || !*(_WORD *)(a4 + 74))
    {
      (*(void (**)(std::string *__return_ptr))(*a1 + 416))(&__p);
      if (!__p.__r_.__value_.__r.__words[0])
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("<rdar://problem/36840916> Need proper way of expressing dilated conv to ANEC");
      Espresso::dilated_conv_bloated_weights<float>(buf, (uint64_t)__p.__r_.__value_.__l.__data_, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 24), (__int16 *)a4);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)&v663, (uint64_t *)buf);
      v69 = *(_QWORD *)buf;
      v70 = *(_DWORD *)(*(_QWORD *)buf + 8);
      v619 = *(int32x4_t *)(*(_QWORD *)buf + 12);
      v71 = (std::__shared_weak_count *)operator new(0x58uLL);
      v72.i64[1] = 0x100000001;
      v72.i64[0] = v70 | 0x100000000;
      v73 = (int8x16_t)vmulq_s32(v619, v72);
      *(int32x2_t *)v73.i8 = vmul_s32(*(int32x2_t *)v73.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
      v71->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      v71->__shared_weak_owners_ = 0;
      v71->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v75 = *(const unsigned __int8 **)(v69 + 32);
      v71[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v71[3].std::__shared_count = 0u;
      *(_OWORD *)&v71[2].__shared_owners_ = 0u;
      v76 = 4 * v73.i32[0] * v73.i32[1];
      LODWORD(v71[1].__shared_owners_) = v76;
      v71[1].__shared_weak_owners_ = (uint64_t)v75;
      LOBYTE(v71[2].__vftable) = 0;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71[1];
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
      *(_QWORD *)&v684 = v71 + 1;
      *((_QWORD *)&v684 + 1) = v71;
      do
        v77 = __ldxr(p_shared_owners);
      while (__stxr(v77 + 1, p_shared_owners));
      v78 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v75, v76);
      do
        v79 = __ldaxr(p_shared_owners);
      while (__stlxr(v79 - 1, p_shared_owners));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v78);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v80, CFSTR("KernelOffset"));

      v81 = (void *)MEMORY[0x1E0CB37E8];
      if (a2[552])
        weights_file_index = 0;
      else
      objc_msgSend(v81, "numberWithUnsignedLong:", weights_file_index);
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v135, CFSTR("KernelIndex"));

      objc_msgSend(v33, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v137 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v139 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v140 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v143 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }

      v113 = 0;
      goto LABEL_175;
    }

  }
  v34 = (std::__shared_weak_count *)a3[1];
  v658 = *a3;
  v659 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights");
  v37 = (*(uint64_t (**)(_QWORD *, uint64_t *))(a1[53] + 88))(a1 + 53, &v658);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v38 = v659;
  if (!v659)
    goto LABEL_36;
  v39 = (unint64_t *)&v659->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if ((v37 & 0x80000000) == 0)
    {
LABEL_37:
      v41 = (std::__shared_weak_count *)a3[1];
      v656 = *a3;
      v657 = v41;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t *, _QWORD *, _BYTE *))(a1[53] + 120))(&__p, a1 + 53, &v656, a1, buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v44 = v657;
      if (v657)
      {
        v45 = (unint64_t *)&v657->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (*(uint64_t (**)(_QWORD *))(*a1 + 384))(a1);
      v48 = *(_DWORD *)(v47 + 12);
      v49 = *(_DWORD *)(a4 + 80);
      v50 = (char *)operator new(0x68uLL);
      *((_QWORD *)v50 + 1) = 0;
      *((_QWORD *)v50 + 2) = 0;
      *(_QWORD *)v50 = &off_1E2DBECE0;
      v51 = *(_DWORD *)(v47 + 24);
      v52 = *(_DWORD *)(v47 + 8);
      *((_QWORD *)v50 + 3) = &off_1E2DA1210;
      v53 = __p.__r_.__value_.__r.__words[0];
      v54 = *(_QWORD *)(v47 + 16);
      *(_OWORD *)(v50 + 72) = 0u;
      *(_OWORD *)(v50 + 88) = 0u;
      *((_QWORD *)v50 + 4) = v54;
      *((_DWORD *)v50 + 10) = v51;
      *((_DWORD *)v50 + 11) = v48 / v49;
      *((_DWORD *)v50 + 12) = v52;
      *((_QWORD *)v50 + 7) = v53;
      v50[64] = 0;
      *(_QWORD *)buf = v50 + 24;
      *(_QWORD *)&buf[8] = v50;
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)&v663, (uint64_t *)buf);
      v55 = v663;
      v56 = *(_DWORD *)(v663 + 8);
      v618 = *(int32x4_t *)(v663 + 12);
      v57 = (std::__shared_weak_count *)operator new(0x58uLL);
      v58.i64[1] = 0x100000001;
      v58.i64[0] = v56 | 0x100000000;
      v59 = (int8x16_t)vmulq_s32(v618, v58);
      *(int32x2_t *)v59.i8 = vmul_s32(*(int32x2_t *)v59.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
      v57->__shared_owners_ = 0;
      v60 = (unint64_t *)&v57->__shared_owners_;
      v57->__shared_weak_owners_ = 0;
      v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v61 = *(const unsigned __int8 **)(v55 + 32);
      v57[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v57[3].std::__shared_count = 0u;
      *(_OWORD *)&v57[2].__shared_owners_ = 0u;
      v62 = 4 * v59.i32[0] * v59.i32[1];
      LODWORD(v57[1].__shared_owners_) = v62;
      v57[1].__shared_weak_owners_ = (uint64_t)v61;
      LOBYTE(v57[2].__vftable) = 0;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57[1];
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
      v654 = v57 + 1;
      v655 = v57;
      do
        v63 = __ldxr(v60);
      while (__stxr(v63 + 1, v60));
      v64 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v61, v62);
      do
        v65 = __ldaxr(v60);
      while (__stlxr(v65 - 1, v60));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v64);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "setObject:forKeyedSubscript:", v66, CFSTR("KernelOffset"));

      v67 = (void *)MEMORY[0x1E0CB37E8];
      if (v627)
        v68 = 0;
      else
      objc_msgSend(v67, "numberWithUnsignedLong:", v68);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "setObject:forKeyedSubscript:", v100, CFSTR("KernelIndex"));

      objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
      v101 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v102 = v626;
      if (__str.__r_.__value_.__l.__size_)
      {
        v103 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v105 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v106 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        goto LABEL_98;
      }
      goto LABEL_100;
    }
  }
  else
  {
LABEL_36:
    if ((v37 & 0x80000000) == 0)
      goto LABEL_37;
  }
  (*(void (**)(std::string *__return_ptr))(*a1 + 416))(&__p);
  v83 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v84 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 16))(*((_QWORD *)&v83 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v83 + 1));
    }
  }
  if (!(_QWORD)v83)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
  (*(void (**)(std::string *__return_ptr))(*a1 + 416))(&__p);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)&v663, (uint64_t *)&__p);
  v86 = v663;
  v87 = *(_DWORD *)(v663 + 8);
  v620 = *(int32x4_t *)(v663 + 12);
  v88 = (std::__shared_weak_count *)operator new(0x58uLL);
  v89.i64[1] = 0x100000001;
  v89.i64[0] = v87 | 0x100000000;
  v90 = (int8x16_t)vmulq_s32(v620, v89);
  *(int32x2_t *)v90.i8 = vmul_s32(*(int32x2_t *)v90.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
  v88->__shared_owners_ = 0;
  v91 = (unint64_t *)&v88->__shared_owners_;
  v88->__shared_weak_owners_ = 0;
  v88->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
  v92 = *(const unsigned __int8 **)(v86 + 32);
  v88[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
  v88[3].std::__shared_count = 0u;
  *(_OWORD *)&v88[2].__shared_owners_ = 0u;
  v93 = 4 * v90.i32[0] * v90.i32[1];
  LODWORD(v88[1].__shared_owners_) = v93;
  v88[1].__shared_weak_owners_ = (uint64_t)v92;
  LOBYTE(v88[2].__vftable) = 0;
  *(_QWORD *)buf = v88 + 1;
  *(_QWORD *)&buf[8] = v88;
  v652 = v88 + 1;
  v653 = v88;
  do
    v94 = __ldxr(v91);
  while (__stxr(v94 + 1, v91));
  v95 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v92, v93);
  do
    v96 = __ldaxr(v91);
  while (__stlxr(v96 - 1, v91));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v95);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v97, CFSTR("KernelOffset"));

  v98 = (void *)MEMORY[0x1E0CB37E8];
  if (v627)
    v99 = 0;
  else
  objc_msgSend(v98, "numberWithUnsignedLong:", v99);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v108, CFSTR("KernelIndex"));

  objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
  v109 = *(std::__shared_weak_count **)&buf[8];
  v102 = v626;
  if (*(_QWORD *)&buf[8])
  {
    v110 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v105 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v112 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v107 = __ldaxr(v112);
    while (__stlxr(v107 - 1, v112));
LABEL_98:
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
LABEL_100:
  if (v102 && !v22)
  {
    v114 = v27;
    v115 = v114;
    v117 = *(__int16 *)(a4 + 70) < 2 && *(__int16 *)(a4 + 72) < 2 && *(__int16 *)(a4 + 74) < 2;
    v118 = v117;
    v621 = v118;
    if (!v117)
    {
      v119 = a2[552];
      objc_msgSend(v114, "objectForKeyedSubscript:", CFSTR("KernelType"));
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v617 = v120;
      if (!objc_msgSend(v120, "isEqualToString:", CFSTR("Float32")))
      {
        if (v617)
          v598 = (const char *)objc_msgSend(objc_retainAutorelease(v617), "UTF8String");
        else
          v598 = "";
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v598;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid kernel type %s", &__str);
      }
      v121 = v663;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v663;
      if (*((_QWORD *)&v663 + 1))
      {
        v122 = (unint64_t *)(*((_QWORD *)&v663 + 1) + 8);
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      if (!(_QWORD)v121)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp32 weights");
      v124 = *(_DWORD *)(v121 + 8);
      v616 = *(int32x4_t *)(v121 + 12);
      v125 = (char *)operator new(0x58uLL);
      v126.i64[1] = 0x100000001;
      v126.i64[0] = v124 | 0x100000000;
      v127 = (int8x16_t)vmulq_s32(v616, v126);
      *(int32x2_t *)v127.i8 = vmul_s32(*(int32x2_t *)v127.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL));
      *((_QWORD *)v125 + 1) = 0;
      *((_QWORD *)v125 + 2) = 0;
      *(_QWORD *)v125 = &off_1E2DBED50;
      v128 = *(_QWORD *)(v121 + 32);
      *((_QWORD *)v125 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v125 + 56) = 0u;
      *(_OWORD *)(v125 + 72) = 0u;
      *((_DWORD *)v125 + 8) = 4 * v127.i32[0] * v127.i32[1];
      *((_QWORD *)v125 + 5) = v128;
      v125[48] = 0;
      *(_QWORD *)buf = v125 + 24;
      *(_QWORD *)&buf[8] = v125;
      v129 = *(int *)(v121 + 8);
      for (i = 12; i != 28; i += 4)
        v129 *= *(int *)(v121 + i);
      Espresso::compress_dilated_conv_sparse_kernel_mask<float>((uint64_t *)&v684, (_DWORD *)v121, a4);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v684;
      if (*((_QWORD *)&v121 + 1))
      {
        v131 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v121 + 1) + 16))(*((_QWORD *)&v121 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v121 + 1));
        }
      }
      v133 = (void *)MEMORY[0x1E0CB37E8];
      if (v119)
        v134 = 0;
      else
      objc_msgSend(v133, "numberWithUnsignedLong:", v134, *(_OWORD *)&v616);
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "setObject:forKeyedSubscript:", v145, CFSTR("KernelIndex"));

      v146 = (void *)MEMORY[0x1E0CB37E8];
      v147 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      v148 = *(_QWORD *)buf;
      v149 = *(std::__shared_weak_count **)&buf[8];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
      if (*(_QWORD *)&buf[8])
      {
        v150 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
      }
      objc_msgSend(v146, "numberWithInt:", Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v147, *(const unsigned __int8 **)(v148 + 16), *(int *)(v148 + 8)));
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "setObject:forKeyedSubscript:", v152, CFSTR("KernelOffset"));

      if (v149)
      {
        v153 = (unint64_t *)&v149->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      v155 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v684 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v156 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      v158 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v147, *(const unsigned __int8 **)(v155 + 16), *(int *)(v155 + 8));
      if (*((_QWORD *)&v155 + 1))
      {
        v159 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v155 + 1) + 16))(*((_QWORD *)&v155 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v155 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v158);
      v161 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "setObject:forKeyedSubscript:", v161, CFSTR("KernelMaskByteOffset"));

      v162 = (void *)MEMORY[0x1E0CB37E8];
      if (v119)
        v163 = 0;
      else
      objc_msgSend(v162, "numberWithUnsignedLong:", v163);
      v164 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "setObject:forKeyedSubscript:", v164, CFSTR("KernelMaskIndex"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v129);
      v165 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "setObject:forKeyedSubscript:", v165, CFSTR("KernelCoeffCount"));

      objc_msgSend(v115, "setObject:forKeyedSubscript:", CFSTR("Sparse"), CFSTR("KernelMode"));
      v166 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v167 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      v169 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v170 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }

    }
    v113 = v621 ^ 1;
LABEL_175:
    v102 = v626;
    goto LABEL_176;
  }
  v113 = 0;
LABEL_176:
  if (!v102 && v624 && (v113 & 1) == 0)
  {
    v172 = v27;
    v173 = a2[552];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    if ((_QWORD)v663)
    {
      v174 = (std::__shared_weak_count *)*((_QWORD *)&v663 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v663;
      if (*((_QWORD *)&v663 + 1))
      {
        v175 = (unint64_t *)(*((_QWORD *)&v663 + 1) + 8);
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
      }
      v177 = Espresso::ANECompilerEngine::compress_sparse_weights<float,5>((uint64_t)&__str, (uint64_t)&__p, (uint64_t)buf, v26);
      if (v174)
      {
        v178 = (unint64_t *)&v174->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v180 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
        _ZF = *(_QWORD *)buf == 0;
      else
        _ZF = 1;
      if (!_ZF)
      {
        v182 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
        v183 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        v684 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v184 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v185 = __ldxr(v184);
          while (__stxr(v185 + 1, v184));
        }
        v186 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v182, *(const unsigned __int8 **)(v180 + 16), *(int *)(v180 + 8));
        if (v183)
        {
          v187 = (unint64_t *)&v183->__shared_owners_;
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
        v189 = (void *)MEMORY[0x1E0CB37E8];
        if (v173)
          v190 = 0;
        else
        objc_msgSend(v189, "numberWithUnsignedLong:", v190);
        v191 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v191, CFSTR("KernelIndex"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v186);
        v192 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v192, CFSTR("KernelOffset"));

        v193 = *(_QWORD *)buf;
        v194 = *(std::__shared_weak_count **)&buf[8];
        v689 = *(std::string ***)buf;
        v690 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v195 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v196 = __ldxr(v195);
          while (__stxr(v196 + 1, v195));
        }
        v197 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v182, *(const unsigned __int8 **)(v193 + 16), *(int *)(v193 + 8));
        if (v194)
        {
          v198 = (unint64_t *)&v194->__shared_owners_;
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v197);
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v200, CFSTR("KernelMaskByteOffset"));

        v201 = (void *)MEMORY[0x1E0CB37E8];
        if (v173)
          v202 = 0;
        else
        objc_msgSend(v201, "numberWithUnsignedLong:", v202);
        v203 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v203, CFSTR("KernelMaskIndex"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v177);
        v204 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "setObject:forKeyedSubscript:", v204, CFSTR("KernelCoeffCount"));

        objc_msgSend(v172, "setObject:forKeyedSubscript:", CFSTR("Sparse"), CFSTR("KernelMode"));
      }
    }
    v205 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v206 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
    v208 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v209 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
    }

  }
  v211 = *(__int16 *)(a4 + 66);
  v212 = *(__int16 *)(a4 + 68);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 64));
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  v702[0] = v213;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v211);
  v214 = (void *)objc_claimAutoreleasedReturnValue();
  v702[1] = v214;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v212);
  v215 = (void *)objc_claimAutoreleasedReturnValue();
  v702[2] = v215;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v702, 3);
  v216 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v216, CFSTR("Step"));

  v217 = *(_OWORD *)(*v623 + 176);
  v651[0] = *(_OWORD *)(*v623 + 160);
  v651[1] = v217;
  v218 = *(_OWORD *)(*a7 + 176);
  v650[0] = *(_OWORD *)(*a7 + 160);
  v650[1] = v218;
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding((unsigned int *)&__p, a4, v651, v650);
  data_low = LODWORD(__p.__r_.__value_.__l.__data_);
  v220 = HIDWORD(__p.__r_.__value_.__r.__words[0]);
  v221 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  v222 = LODWORD(__p.__r_.__value_.__r.__words[2]);
  v223 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  if (*(_OWORD *)&__p.__r_.__value_.__l.__data_ != 0 || LODWORD(__p.__r_.__value_.__r.__words[2]))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
    v224 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v224, CFSTR("PadTop"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v221);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v225, CFSTR("PadBot"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", data_low);
    v226 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v226, CFSTR("PadLeft"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v220);
    v227 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v227, CFSTR("PadRight"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v223);
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v228, CFSTR("PadFront"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v222);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v229, CFSTR("PadBack"));

    if (*(_WORD *)(a4 + 46))
    {
      if (*(_WORD *)(a4 + 46) != 1)
        goto LABEL_232;
      v230 = CFSTR("Replication");
    }
    else
    {
      v230 = CFSTR("Zero");
    }
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v230, CFSTR("PaddingMode"));
  }
LABEL_232:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
  v231 = v699;
  v699 = CFSTR("Conv");

  objc_storeStrong(&v700, v27);
  v701 = __PAIR64__(v622, v628);
  v232 = v661;
  if ((unint64_t)v661 >= v662)
  {
    v234 = 0x8E38E38E38E38E39 * (((uint64_t)v661 - v660) >> 4);
    if (v234 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v235 = 0x1C71C71C71C71C72 * ((uint64_t)(v662 - v660) >> 4);
    if (v235 <= v234 + 1)
      v235 = v234 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v662 - v660) >> 4) >= 0xE38E38E38E38E3)
      v236 = 0x1C71C71C71C71C7;
    else
      v236 = v235;
    *((_QWORD *)&v704 + 1) = &v662;
    if (v236)
      v236 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v236);
    else
      v237 = 0;
    *(_QWORD *)buf = v236;
    *(_QWORD *)&buf[8] = v236 + 144 * v234;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v704 = v236 + 144 * v237;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v660, buf);
    v233 = v661;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v661, (uint64_t)&__p);
    v233 = v232 + 6;
  }
  v661 = v233;

  if (v697 < 0)
    operator delete(v696);
  *(_QWORD *)buf = &v693;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v692;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  v238 = (std::__shared_weak_count *)a3[1];
  v648 = *a3;
  v649 = v238;
  if (v238)
  {
    v239 = (unint64_t *)&v238->__shared_owners_;
    do
      v240 = __ldxr(v239);
    while (__stxr(v240 + 1, v239));
  }
  v242 = *a7;
  v241 = (std::__shared_weak_count *)a7[1];
  v646 = *a7;
  v647 = v241;
  if (v241)
  {
    v243 = (unint64_t *)&v241->__shared_owners_;
    do
      v244 = __ldxr(v243);
    while (__stxr(v244 + 1, v243));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__p);
  v700 = 0;
  v699 = 0;
  v701 = 0x100000000;
  v246 = (void **)a1[61];
  v245 = (std::__shared_weak_count *)a1[62];
  v689 = (std::string **)v246;
  v690 = v245;
  if (v245)
  {
    v247 = (unint64_t *)&v245->__shared_owners_;
    do
      v248 = __ldxr(v247);
    while (__stxr(v248 + 1, v247));
  }
  if (!v246 || *(_BYTE *)((*(uint64_t (**)(_QWORD *))(a1[53] + 104))(a1 + 53) + 40))
  {
    v249 = 0;
    if (!v245)
      goto LABEL_390;
    goto LABEL_386;
  }
  v250 = *(float *)(v242 + 112);
  v682 = v246;
  v683 = v245;
  if (v245)
  {
    v251 = (unint64_t *)&v245->__shared_owners_;
    do
      v252 = __ldxr(v251);
    while (__stxr(v252 + 1, v251));
  }
  v253 = (std::__shared_weak_count *)a1[64];
  v681[0] = a1[63];
  v681[1] = (uint64_t)v253;
  if (v253)
  {
    v254 = (unint64_t *)&v253->__shared_owners_;
    do
      v255 = __ldxr(v254);
    while (__stxr(v255 + 1, v254));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v682, v681, (uint64_t)&v684, v250);
  if (v253)
  {
    v256 = (unint64_t *)&v253->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  v258 = v683;
  if (v683)
  {
    v259 = (unint64_t *)&v683->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v261 = (void **)v689;
  v262 = *((unsigned int *)v689 + 2);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v679, 2 * v262, 1, 1, 1);
  v263 = (int)v262;
  v678 = 0uLL;
  v264 = v262;
  v265 = a1[63];
  if (v265)
    v264 = *(_DWORD *)(v265 + 8);
  if (!a2[384])
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v262);
    v589 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    v590 = v262 - 1;
    if ((int)v262 >= 1)
    {
      for (j = 0; j != v262; ++j)
      {
        v592 = *(float *)((char *)v261[2] + j * 4);
        *(float *)&v593 = ldexp(1.0, -v687) * v592;
        v589[j] = v593;
      }
    }
    if ((_DWORD)v262)
    {
      v594 = *(_WORD **)(v679 + 16);
      do
      {
        v595 = *v589++;
        _S0 = v595;
        __asm { FCVT            H0, S0 }
        *v594++ = _S0;
        --v263;
      }
      while (v263);
    }
    v677 = 0;
    v676 = 0;
    if (a1[63])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v264);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v676, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * v264);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v678, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v599 = *(int **)(v676 + 16);
      if (v264 >= 1)
      {
        for (k = 0; k != v264; ++k)
        {
          if (v590 >= (int)k)
            v601 = k;
          else
            v601 = v590;
          *(float *)&v602 = *(float *)(*(_QWORD *)(v685 + 16) + 4 * k) * *(float *)(*(_QWORD *)(v684 + 16) + 4 * v601);
          v599[k] = v602;
          v603 = v688;
          v604 = v687;
          *(float *)&v605 = ldexp(1.0, v688 - v687) * *(float *)&v602;
          v599[k] = v605;
          v608 = ldexp(1.0, v604 - v603) * *(float *)&v605;
          if (v608 < -127.0 || v608 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v606, v607);
            v610 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v610, OS_LOG_TYPE_ERROR))
            {
              v611 = *(float *)&v599[k];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v608;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v688;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v687;
              LOWORD(v704) = 2048;
              *(double *)((char *)&v704 + 2) = v611;
              _os_log_error_impl(&dword_190DAF000, v610, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (v264)
      {
        v612 = v264;
        v613 = *(_WORD **)(v678 + 16);
        do
        {
          v614 = *v599++;
          _S0 = v614;
          __asm { FCVT            H0, S0 }
          *v613++ = _S0;
          --v612;
        }
        while (v612);
      }
    }
    v597 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v597);
  }
  v266 = v688;
  if ((_DWORD)v262)
  {
    v267 = *(int **)(v684 + 16);
    v268 = *(_WORD **)(v679 + 16);
    do
    {
      v269 = *v267++;
      _S0 = v269;
      __asm { FCVT            H0, S0 }
      *v268++ = _S0;
      --v263;
    }
    while (v263);
  }
  if (v265)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v264, 1, 1, 1);
    v274 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v275 = (std::__shared_weak_count *)*((_QWORD *)&v678 + 1);
    v678 = v274;
    if (v275)
    {
      v276 = (unint64_t *)&v275->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    v278 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v279 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v280 = __ldaxr(v279);
      while (__stlxr(v280 - 1, v279));
      if (!v280)
      {
        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
        std::__shared_weak_count::__release_weak(v278);
      }
    }
    if (v264)
    {
      v281 = v264;
      v282 = *(int **)(v685 + 16);
      v283 = *(_WORD **)(v678 + 16);
      do
      {
        v284 = *v282++;
        _S0 = v284;
        __asm { FCVT            H0, S0 }
        *v283++ = _S0;
        --v281;
      }
      while (v281);
    }
  }
  v286 = a2[552];
  v287 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v288 = v679;
  v289 = v680;
  v676 = v679;
  v677 = v680;
  if (v680)
  {
    v290 = (unint64_t *)&v680->__shared_owners_;
    do
      v291 = __ldxr(v290);
    while (__stxr(v291 + 1, v290));
  }
  v292 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v287, *(const unsigned __int8 **)(v288 + 16), *(int *)(v288 + 8));
  if (v289)
  {
    v293 = (unint64_t *)&v289->__shared_owners_;
    do
      v294 = __ldaxr(v293);
    while (__stlxr(v294 - 1, v293));
    if (!v294)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  v295 = (void *)objc_opt_new();
  if (a2[121])
  {
    v296 = *(id *)(v660 + 128);

    v295 = v296;
  }
  v297 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v262);
  v298 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v297, "setObject:forKeyedSubscript:", v298, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v292);
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v297, "setObject:forKeyedSubscript:", v299, CFSTR("ScaleOffset"));

  v300 = (void *)MEMORY[0x1E0CB37E8];
  if (v286)
    v301 = 0;
  else
  objc_msgSend(v300, "numberWithUnsignedLong:", v301);
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v297, "setObject:forKeyedSubscript:", v302, CFSTR("ScaleIndex"));

  objc_msgSend(v297, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v687);
  v303 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v295, "setObject:forKeyedSubscript:", v303, CFSTR("ScaleShift"));

  if (a1[63])
  {
    v304 = v678;
    v675 = v678;
    if (*((_QWORD *)&v678 + 1))
    {
      v305 = (unint64_t *)(*((_QWORD *)&v678 + 1) + 8);
      do
        v306 = __ldxr(v305);
      while (__stxr(v306 + 1, v305));
    }
    v307 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v287, *(const unsigned __int8 **)(v304 + 16), *(int *)(v304 + 8));
    if (*((_QWORD *)&v304 + 1))
    {
      v308 = (unint64_t *)(*((_QWORD *)&v304 + 1) + 8);
      do
        v309 = __ldaxr(v308);
      while (__stlxr(v309 - 1, v308));
      if (!v309)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v304 + 1) + 16))(*((_QWORD *)&v304 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v304 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1[63] + 8));
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v297, "setObject:forKeyedSubscript:", v310, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v307);
    v311 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v297, "setObject:forKeyedSubscript:", v311, CFSTR("BiasOffset"));

    v312 = (void *)MEMORY[0x1E0CB37E8];
    if (v286)
      v313 = 0;
    else
    objc_msgSend(v312, "numberWithUnsignedLong:", v313);
    v314 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v297, "setObject:forKeyedSubscript:", v314, CFSTR("BiasIndex"));

    objc_msgSend(v297, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v266);
    v315 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v295, "setObject:forKeyedSubscript:", v315, CFSTR("BiasShift"));

  }
  objc_msgSend(v295, "setObject:forKeyedSubscript:", v297, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  v316 = v661;
  if (v661 != (std::string *)v660)
  {
    v317 = v661 - 6;
    v318 = HIBYTE(v661[-6].__r_.__value_.__r.__words[2]);
    v319 = v318;
    v320 = v661[-6].__r_.__value_.__l.__size_;
    if ((v318 & 0x80u) == 0)
      v321 = HIBYTE(v661[-6].__r_.__value_.__r.__words[2]);
    else
      v321 = v661[-6].__r_.__value_.__l.__size_;
    v322 = buf[23];
    if (buf[23] < 0)
      v322 = *(_QWORD *)&buf[8];
    if (v321 == v322)
    {
      if (buf[23] >= 0)
        v323 = buf;
      else
        v323 = *(unsigned __int8 **)buf;
      if ((char)v318 < 0)
      {
        data = (const std::string::value_type *)v317->__r_.__value_.__r.__words[0];
        if (memcmp(v317->__r_.__value_.__l.__data_, v323, v661[-6].__r_.__value_.__l.__size_))
          goto LABEL_344;
      }
      else if ((_BYTE)v318)
      {
        v324 = v661 - 6;
        while (v324->__r_.__value_.__s.__data_[0] == *v323)
        {
          v324 = (std::string *)((char *)v324 + 1);
          ++v323;
          if (!--v318)
            goto LABEL_340;
        }
        goto LABEL_341;
      }
LABEL_340:
      std::string::append(v316 - 6, "__@pre_scale_bias");
      v319 = HIBYTE(v316[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_341:
    if ((v319 & 0x80) == 0)
    {
      v326 = *(_OWORD *)&v317->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v316[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v326;
      goto LABEL_345;
    }
    data = v316[-6].__r_.__value_.__l.__data_;
    v320 = v316[-6].__r_.__value_.__l.__size_;
LABEL_344:
    std::string::__init_copy_ctor_external(&__str, data, v320);
LABEL_345:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v705, &__str, &v712, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v327 = v709;
  v709 = CFSTR("GOC");

  objc_storeStrong(&v710, v295);
  if (!a2[121])
  {
    v328 = v661;
    if ((unint64_t)v661 >= v662)
    {
      v330 = 0x8E38E38E38E38E39 * (((uint64_t)v661 - v660) >> 4);
      if (v330 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v331 = 0x1C71C71C71C71C72 * ((uint64_t)(v662 - v660) >> 4);
      if (v331 <= v330 + 1)
        v331 = v330 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v662 - v660) >> 4) >= 0xE38E38E38E38E3)
        v332 = 0x1C71C71C71C71C7;
      else
        v332 = v331;
      *((_QWORD *)&v712 + 1) = &v662;
      if (v332)
        v332 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v332);
      else
        v333 = 0;
      __str.__r_.__value_.__r.__words[0] = v332;
      __str.__r_.__value_.__l.__size_ = v332 + 144 * v330;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v712 = v332 + 144 * v333;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v660, &__str);
      v329 = v661;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v661, (uint64_t)buf);
      v329 = v328 + 6;
    }
    v661 = v329;
  }

  if (v707 < 0)
    operator delete(v706);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v705;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v704;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  v334 = (std::__shared_weak_count *)*((_QWORD *)&v678 + 1);
  if (*((_QWORD *)&v678 + 1))
  {
    v335 = (unint64_t *)(*((_QWORD *)&v678 + 1) + 8);
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  v337 = v680;
  if (v680)
  {
    v338 = (unint64_t *)&v680->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  v340 = v686;
  if (v686)
  {
    v341 = (unint64_t *)&v686->__shared_owners_;
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
  v343 = (std::__shared_weak_count *)*((_QWORD *)&v684 + 1);
  if (*((_QWORD *)&v684 + 1))
  {
    v344 = (unint64_t *)(*((_QWORD *)&v684 + 1) + 8);
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  v249 = 1;
  v245 = v690;
  if (v690)
  {
LABEL_386:
    v346 = (unint64_t *)&v245->__shared_owners_;
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
LABEL_390:

  if (v697 < 0)
    operator delete(v696);
  *(_QWORD *)buf = &v693;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v692;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v647)
  {
    v348 = &v647->__shared_owners_;
    do
      v349 = __ldaxr((unint64_t *)v348);
    while (__stlxr(v349 - 1, (unint64_t *)v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
      std::__shared_weak_count::__release_weak(v647);
    }
  }
  if (!v649)
    goto LABEL_403;
  v350 = &v649->__shared_owners_;
  do
    v351 = __ldaxr((unint64_t *)v350);
  while (__stlxr(v351 - 1, (unint64_t *)v350));
  if (!v351)
  {
    ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
    std::__shared_weak_count::__release_weak(v649);
    if ((v249 & 1) != 0)
    {
LABEL_404:
      if (*(_DWORD *)(a4 + 40))
LABEL_772:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
      goto LABEL_626;
    }
  }
  else
  {
LABEL_403:
    if ((v249 & 1) != 0)
      goto LABEL_404;
  }
  v352 = (_QWORD *)a1[51];
  if (v352 && *v352 && (v352[4] || v352[6] || v352[8] || v352[10]))
  {
    v353 = v352[10];
    if (v353)
    {
      v354 = *(int *)(v353 + 8);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, 2 * v354, 1, 1, 1);
      v355 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v356 = *(const unsigned __int8 **)(__p.__r_.__value_.__r.__words[0] + 16);
      if ((_DWORD)v354)
      {
        v357 = *(int **)(*(_QWORD *)(a1[51] + 80) + 16);
        v358 = *(_WORD **)(__p.__r_.__value_.__r.__words[0] + 16);
        v359 = v354;
        do
        {
          v360 = *v357++;
          _S0 = v360;
          __asm { FCVT            H0, S0 }
          *v358++ = _S0;
          --v359;
        }
        while (v359);
      }
      v362 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      v645 = v355;
      if (*((_QWORD *)&v355 + 1))
      {
        v363 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
        do
          v364 = __ldxr(v363);
        while (__stxr(v364 + 1, v363));
        v356 = *(const unsigned __int8 **)(v355 + 16);
      }
      v365 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v362, v356, *(int *)(v355 + 8));
      if (*((_QWORD *)&v355 + 1))
      {
        v366 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
        do
          v367 = __ldaxr(v366);
        while (__stlxr(v367 - 1, v366));
        if (!v367)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v355 + 1) + 16))(*((_QWORD *)&v355 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v355 + 1));
        }
      }
      v368 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v354);
      v369 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v368, "setObject:forKeyedSubscript:", v369, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v365);
      v370 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v368, "setObject:forKeyedSubscript:", v370, CFSTR("ScaleOffset"));

      v371 = (void *)MEMORY[0x1E0CB37E8];
      if (v627)
        v372 = 0;
      else
      objc_msgSend(v371, "numberWithUnsignedLong:", v372);
      v414 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v368, "setObject:forKeyedSubscript:", v414, CFSTR("ScaleIndex"));

      objc_msgSend(v368, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
      if (*(_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 384))(a1))
      {
        (*(void (**)(__int128 *__return_ptr))(*a1 + 408))(&v684);
        if (!(_QWORD)v684)
        {
          v415 = (std::__shared_weak_count *)a3[1];
          v643 = *a3;
          v644 = v415;
          if (v415)
          {
            v416 = (unint64_t *)&v415->__shared_owners_;
            do
              v417 = __ldxr(v416);
            while (__stxr(v417 + 1, v416));
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t *, _QWORD *, _BYTE *))(a1[53] + 120))(&__p, a1 + 53, &v643, a1, buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v418 = v644;
          if (v644)
          {
            v419 = (unint64_t *)&v644->__shared_owners_;
            do
              v420 = __ldaxr(v419);
            while (__stlxr(v420 - 1, v419));
            if (!v420)
            {
              ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
              std::__shared_weak_count::__release_weak(v418);
            }
          }
          v421 = __p.__r_.__value_.__r.__words[2];
          v422 = (char *)operator new(0x58uLL);
          *((_QWORD *)v422 + 1) = 0;
          *((_QWORD *)v422 + 2) = 0;
          *(_QWORD *)v422 = &off_1E2DBEC00;
          *((_QWORD *)v422 + 3) = &off_1E2DA1190;
          v423 = __p.__r_.__value_.__r.__words[0];
          *(_OWORD *)(v422 + 56) = 0u;
          *(_OWORD *)(v422 + 72) = 0u;
          *((_DWORD *)v422 + 8) = v421 >> 2;
          *((_QWORD *)v422 + 5) = v423;
          v422[48] = 0;
          *(_QWORD *)&v424 = v422 + 24;
          *((_QWORD *)&v424 + 1) = v422;
          v425 = (std::__shared_weak_count *)*((_QWORD *)&v684 + 1);
          v684 = v424;
          if (v425)
          {
            v426 = (unint64_t *)&v425->__shared_owners_;
            do
              v427 = __ldaxr(v426);
            while (__stlxr(v427 - 1, v426));
            if (!v427)
            {
              ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
              std::__shared_weak_count::__release_weak(v425);
            }
          }
          if (!(_QWORD)v684)
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, 4 * v354, 1, 1, 1);
        v428 = __p.__r_.__value_.__r.__words[0];
        if ((_DWORD)v354)
        {
          v429 = *(float **)(__p.__r_.__value_.__r.__words[0] + 16);
          v430 = *(float **)(v684 + 16);
          v431 = *(float **)(*(_QWORD *)(a1[51] + 80) + 16);
          v432 = v354;
          do
          {
            v433 = *v430++;
            v434 = v433;
            v435 = *v431++;
            *v429++ = v434 / v435;
            --v432;
          }
          while (v432);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v354, 1, 1, 1);
        v436 = *(_QWORD *)buf;
        v437 = *(const unsigned __int8 **)(*(_QWORD *)buf + 16);
        if ((_DWORD)v354)
        {
          v438 = *(int **)(v428 + 16);
          v439 = *(_WORD **)(*(_QWORD *)buf + 16);
          v440 = v354;
          do
          {
            v441 = *v438++;
            _S0 = v441;
            __asm { FCVT            H0, S0 }
            *v439++ = _S0;
            --v440;
          }
          while (v440);
        }
        v443 = *(std::__shared_weak_count **)&buf[8];
        v641 = v436;
        v642 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v444 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v445 = __ldxr(v444);
          while (__stxr(v445 + 1, v444));
          v437 = *(const unsigned __int8 **)(v436 + 16);
        }
        v446 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v362, v437, *(int *)(v436 + 8));
        if (v443)
        {
          v447 = (unint64_t *)&v443->__shared_owners_;
          do
            v448 = __ldaxr(v447);
          while (__stlxr(v448 - 1, v447));
          if (!v448)
          {
            ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
            std::__shared_weak_count::__release_weak(v443);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v354);
        v449 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v368, "setObject:forKeyedSubscript:", v449, CFSTR("BiasCount"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v446);
        v450 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v368, "setObject:forKeyedSubscript:", v450, CFSTR("BiasOffset"));

        v451 = (void *)MEMORY[0x1E0CB37E8];
        if (v627)
          v452 = 0;
        else
        objc_msgSend(v451, "numberWithUnsignedLong:", v452);
        v500 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v368, "setObject:forKeyedSubscript:", v500, CFSTR("BiasIndex"));

        objc_msgSend(v368, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
        v501 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v502 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v503 = __ldaxr(v502);
          while (__stlxr(v503 - 1, v502));
          if (!v503)
          {
            ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
            std::__shared_weak_count::__release_weak(v501);
          }
        }
        v504 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v505 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v506 = __ldaxr(v505);
          while (__stlxr(v506 - 1, v505));
          if (!v506)
          {
            ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
            std::__shared_weak_count::__release_weak(v504);
          }
        }
        v507 = (std::__shared_weak_count *)*((_QWORD *)&v684 + 1);
        if (*((_QWORD *)&v684 + 1))
        {
          v508 = (unint64_t *)(*((_QWORD *)&v684 + 1) + 8);
          do
            v509 = __ldaxr(v508);
          while (__stlxr(v509 - 1, v508));
          if (!v509)
          {
            ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
            std::__shared_weak_count::__release_weak(v507);
          }
        }
      }
      v510 = (void *)objc_opt_new();
      objc_msgSend(v510, "setObject:forKeyedSubscript:", v368, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
      v511 = v699;
      v699 = CFSTR("GOC");

      objc_storeStrong(&v700, v510);
      v512 = v661;
      if ((unint64_t)v661 >= v662)
      {
        v514 = 0x8E38E38E38E38E39 * (((uint64_t)v661 - v660) >> 4);
        if (v514 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v515 = 0x1C71C71C71C71C72 * ((uint64_t)(v662 - v660) >> 4);
        if (v515 <= v514 + 1)
          v515 = v514 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v662 - v660) >> 4) >= 0xE38E38E38E38E3)
          v516 = 0x1C71C71C71C71C7;
        else
          v516 = v515;
        *((_QWORD *)&v704 + 1) = &v662;
        if (v516)
          v516 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v516);
        else
          v517 = 0;
        *(_QWORD *)buf = v516;
        *(_QWORD *)&buf[8] = v516 + 144 * v514;
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&v704 = v516 + 144 * v517;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
        *(_QWORD *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v660, buf);
        v513 = v661;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v661, (uint64_t)&__p);
        v513 = v512 + 6;
      }
      v661 = v513;

      if (v697 < 0)
        operator delete(v696);
      *(_QWORD *)buf = &v693;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v692;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);

      v462 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_626;
      v518 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v464 = __ldaxr(v518);
      while (__stlxr(v464 - 1, v518));
LABEL_608:
      if (!v464)
      {
        ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
        std::__shared_weak_count::__release_weak(v462);
      }
      goto LABEL_626;
    }
  }
  if (!*(_DWORD *)(a4 + 40))
  {
    if (*(_DWORD *)a4)
    {
      if (a2[121])
      {
        v399 = *(id *)(v660 + 128);
      }
      else
      {
        v399 = (id)objc_opt_new();

      }
      v465 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v628);
      v466 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v465, "setObject:forKeyedSubscript:", v466, CFSTR("BiasCount"));

      (*(void (**)(std::string *__return_ptr))(*a1 + 408))(&__str);
      v467 = (std::__shared_weak_count *)a3[1];
      v634 = *a3;
      v635 = v467;
      if (v467)
      {
        v468 = (unint64_t *)&v467->__shared_owners_;
        do
          v469 = __ldxr(v468);
        while (__stxr(v469 + 1, v468));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "blob_biases");
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t *, _QWORD *, std::string *))(a1[53] + 120))(buf, a1 + 53, &v634, a1, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v470 = v635;
      if (v635)
      {
        v471 = (unint64_t *)&v635->__shared_owners_;
        do
          v472 = __ldaxr(v471);
        while (__stlxr(v472 - 1, v471));
        if (!v472)
        {
          ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
          std::__shared_weak_count::__release_weak(v470);
        }
      }
      v473 = __str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0])
      {
        v474 = *(_QWORD *)&buf[16];
        v475 = (char *)operator new(0x58uLL);
        *((_QWORD *)v475 + 1) = 0;
        *((_QWORD *)v475 + 2) = 0;
        *(_QWORD *)v475 = &off_1E2DBEC00;
        *((_QWORD *)v475 + 3) = &off_1E2DA1190;
        v473 = (std::string::size_type)(v475 + 24);
        v476 = *(_QWORD *)buf;
        *(_OWORD *)(v475 + 56) = 0u;
        *(_OWORD *)(v475 + 72) = 0u;
        *((_DWORD *)v475 + 8) = v474 >> 2;
        *((_QWORD *)v475 + 5) = v476;
        v475[48] = 0;
        v477 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v475 + 24);
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v475;
        if (v477)
        {
          v478 = (unint64_t *)&v477->__shared_owners_;
          do
            v479 = __ldaxr(v478);
          while (__stlxr(v479 - 1, v478));
          if (!v479)
          {
            ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
            std::__shared_weak_count::__release_weak(v477);
          }
          v473 = __str.__r_.__value_.__r.__words[0];
          if (!__str.__r_.__value_.__r.__words[0])
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
      }
      v480 = *(int **)(v473 + 16);
      v481 = *(int *)(v473 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v684, 2 * v481, 1, 1, 1);
      v482 = v684;
      v483 = *(const unsigned __int8 **)(v684 + 16);
      if ((_DWORD)v481)
      {
        v484 = *(_WORD **)(v684 + 16);
        do
        {
          v485 = *v480++;
          _S0 = v485;
          __asm { FCVT            H0, S0 }
          *v484++ = _S0;
          --v481;
        }
        while (v481);
      }
      v487 = (std::__shared_weak_count *)*((_QWORD *)&v684 + 1);
      if (*((_QWORD *)&v684 + 1))
      {
        v488 = (unint64_t *)(*((_QWORD *)&v684 + 1) + 8);
        do
          v489 = __ldxr(v488);
        while (__stxr(v489 + 1, v488));
        v483 = *(const unsigned __int8 **)(v482 + 16);
      }
      v490 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v483, *(int *)(v482 + 8));
      if (v487)
      {
        v491 = (unint64_t *)&v487->__shared_owners_;
        do
          v492 = __ldaxr(v491);
        while (__stlxr(v492 - 1, v491));
        if (!v492)
        {
          ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
          std::__shared_weak_count::__release_weak(v487);
        }
      }
      v493 = (void *)MEMORY[0x1E0CB37E8];
      if (v627)
        v494 = 0;
      else
      objc_msgSend(v493, "numberWithUnsignedLong:", v494);
      v495 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v465, "setObject:forKeyedSubscript:", v495, CFSTR("BiasIndex"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v490);
      v496 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v465, "setObject:forKeyedSubscript:", v496, CFSTR("BiasOffset"));

      objc_msgSend(v465, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(v399, "setObject:forKeyedSubscript:", v465, CFSTR("BiasScaleGroupData"));
      if (!a2[121])
      {
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
        v497 = v699;
        v699 = CFSTR("GOC");

        objc_storeStrong(&v700, v399);
        v498 = v661;
        if ((unint64_t)v661 >= v662)
        {
          v499 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v660, (uint64_t)&__p);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v661, (uint64_t)&__p);
          v499 = v498 + 6;
        }
        v661 = v499;

        if (v697 < 0)
          operator delete(v696);
        v689 = &v693;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v689);
        v689 = (std::string **)v692;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v689);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v519 = (std::__shared_weak_count *)*((_QWORD *)&v684 + 1);
      if (*((_QWORD *)&v684 + 1))
      {
        v520 = (unint64_t *)(*((_QWORD *)&v684 + 1) + 8);
        do
          v521 = __ldaxr(v520);
        while (__stlxr(v521 - 1, v520));
        if (!v521)
        {
          ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
          std::__shared_weak_count::__release_weak(v519);
        }
      }
      v522 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v523 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v524 = __ldaxr(v523);
        while (__stlxr(v524 - 1, v523));
        if (!v524)
        {
          ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
          std::__shared_weak_count::__release_weak(v522);
        }
      }

    }
    goto LABEL_626;
  }
  if (a2[121])
    goto LABEL_772;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 408))(&v639);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(&__str, (uint64_t)&v639, v628, a2[384], 0, 0.0);
  v373 = v640;
  if (v640)
  {
    v374 = (unint64_t *)&v640->__shared_owners_;
    do
      v375 = __ldaxr(v374);
    while (__stlxr(v375 - 1, v374));
    if (!v375)
    {
      ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
      std::__shared_weak_count::__release_weak(v373);
    }
  }
  v376 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  v684 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v377 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v378 = __ldxr(v377);
    while (__stxr(v378 + 1, v377));
  }
  v689 = (std::string **)__str.__r_.__value_.__r.__words[2];
  v690 = (std::__shared_weak_count *)v712;
  if ((_QWORD)v712)
  {
    v379 = (unint64_t *)(v712 + 8);
    do
      v380 = __ldxr(v379);
    while (__stxr(v380 + 1, v379));
  }
  v381 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v638 = v376;
  if (*((_QWORD *)&v376 + 1))
  {
    v382 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
    do
      v383 = __ldxr(v382);
    while (__stxr(v383 + 1, v382));
  }
  v384 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v381, *(const unsigned __int8 **)(v376 + 16), *(int *)(v376 + 8));
  if (*((_QWORD *)&v376 + 1))
  {
    v385 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v376 + 1) + 16))(*((_QWORD *)&v376 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v376 + 1));
    }
  }
  v387 = (void **)v689;
  v388 = v690;
  v636 = (void **)v689;
  v637 = v690;
  if (v690)
  {
    v389 = (unint64_t *)&v690->__shared_owners_;
    do
      v390 = __ldxr(v389);
    while (__stxr(v390 + 1, v389));
  }
  v391 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v381, (const unsigned __int8 *)v387[2], *((int *)v387 + 2));
  if (v388)
  {
    v392 = (unint64_t *)&v388->__shared_owners_;
    do
      v393 = __ldaxr(v392);
    while (__stlxr(v393 - 1, v392));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
      std::__shared_weak_count::__release_weak(v388);
    }
  }
  v394 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v628);
  v395 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v394, "setObject:forKeyedSubscript:", v395, CFSTR("BiasCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v391);
  v396 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v394, "setObject:forKeyedSubscript:", v396, CFSTR("BiasOffset"));

  v397 = (void *)MEMORY[0x1E0CB37E8];
  if (v627)
    v398 = 0;
  else
  objc_msgSend(v397, "numberWithUnsignedLong:", v398);
  v400 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v394, "setObject:forKeyedSubscript:", v400, CFSTR("BiasIndex"));

  objc_msgSend(v394, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("BiasType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v628);
  v401 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v394, "setObject:forKeyedSubscript:", v401, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v384);
  v402 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v394, "setObject:forKeyedSubscript:", v402, CFSTR("ScaleOffset"));

  v403 = (void *)MEMORY[0x1E0CB37E8];
  if (v627)
    v404 = 0;
  else
  objc_msgSend(v403, "numberWithUnsignedLong:", v404);
  v405 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v394, "setObject:forKeyedSubscript:", v405, CFSTR("ScaleIndex"));

  objc_msgSend(v394, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("ScaleType"));
  v406 = (void *)objc_opt_new();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v394, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
  v407 = v699;
  v699 = CFSTR("GOC");

  objc_storeStrong(&v700, v406);
  v408 = v661;
  if ((unint64_t)v661 >= v662)
  {
    v410 = 0x8E38E38E38E38E39 * (((uint64_t)v661 - v660) >> 4);
    if (v410 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v411 = 0x1C71C71C71C71C72 * ((uint64_t)(v662 - v660) >> 4);
    if (v411 <= v410 + 1)
      v411 = v410 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v662 - v660) >> 4) >= 0xE38E38E38E38E3)
      v412 = 0x1C71C71C71C71C7;
    else
      v412 = v411;
    *((_QWORD *)&v704 + 1) = &v662;
    if (v412)
      v412 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v412);
    else
      v413 = 0;
    *(_QWORD *)buf = v412;
    *(_QWORD *)&buf[8] = v412 + 144 * v410;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v704 = v412 + 144 * v413;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v660, buf);
    v409 = v661;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v661, (uint64_t)&__p);
    v409 = v408 + 6;
  }
  v661 = v409;

  if (v697 < 0)
    operator delete(v696);
  *(_QWORD *)buf = &v693;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v692;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  v453 = v690;
  if (v690)
  {
    v454 = (unint64_t *)&v690->__shared_owners_;
    do
      v455 = __ldaxr(v454);
    while (__stlxr(v455 - 1, v454));
    if (!v455)
    {
      ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
      std::__shared_weak_count::__release_weak(v453);
    }
  }
  v456 = (std::__shared_weak_count *)*((_QWORD *)&v684 + 1);
  if (*((_QWORD *)&v684 + 1))
  {
    v457 = (unint64_t *)(*((_QWORD *)&v684 + 1) + 8);
    do
      v458 = __ldaxr(v457);
    while (__stlxr(v458 - 1, v457));
    if (!v458)
    {
      ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
      std::__shared_weak_count::__release_weak(v456);
    }
  }
  v459 = (std::__shared_weak_count *)v712;
  if ((_QWORD)v712)
  {
    v460 = (unint64_t *)(v712 + 8);
    do
      v461 = __ldaxr(v460);
    while (__stlxr(v461 - 1, v460));
    if (!v461)
    {
      ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
      std::__shared_weak_count::__release_weak(v459);
    }
  }
  v462 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v463 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v464 = __ldaxr(v463);
    while (__stlxr(v464 - 1, v463));
    goto LABEL_608;
  }
LABEL_626:
  v525 = *(_DWORD *)(a4 + 28);
  if (v525 == -1)
  {
LABEL_693:
    (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(a1[53] + 32))(a1 + 53, a2, &v660);
    goto LABEL_694;
  }
  if (v525 != 1)
  {
    if (v525)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    if (a2[121])
    {
      v526 = *(id *)(v660 + 128);
    }
    else
    {
      v526 = (id)objc_opt_new();

    }
    objc_msgSend(v526, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
    if (a2[121])
      goto LABEL_692;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
    v530 = v699;
    v699 = CFSTR("Neuron");

    objc_storeStrong(&v700, v526);
    v531 = v661;
    if ((unint64_t)v661 >= v662)
    {
      v533 = 0x8E38E38E38E38E39 * (((uint64_t)v661 - v660) >> 4);
      if (v533 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v534 = 0x1C71C71C71C71C72 * ((uint64_t)(v662 - v660) >> 4);
      if (v534 <= v533 + 1)
        v534 = v533 + 1;
      v535 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v662 - v660) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v534);
      *((_QWORD *)&v704 + 1) = &v662;
      if (v535)
        v535 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v535);
      else
        v536 = 0;
      *(_QWORD *)buf = v535;
      *(_QWORD *)&buf[8] = &v535[144 * v533];
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v704 = &v535[144 * v536];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v660, buf);
      v532 = v661;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v661, (uint64_t)&__p);
      v532 = v531 + 6;
    }
    v661 = v532;

    if (v697 < 0)
      operator delete(v696);
    *(_QWORD *)buf = &v693;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v692;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_692;
    v549 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_691;
  }
  if (a2[121])
  {
    v526 = *(id *)(v660 + 128);
  }
  else
  {
    v526 = (id)objc_opt_new();

  }
  objc_msgSend(v526, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"));
  if (a2[121])
    goto LABEL_692;
  v527 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>(v527 + 472, (uint64_t)&__p, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1)
      goto LABEL_657;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_657;
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_663:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
    v541 = v699;
    v699 = CFSTR("Neuron");

    objc_storeStrong(&v700, v526);
    v542 = v661;
    if ((unint64_t)v661 >= v662)
    {
      v545 = 0x8E38E38E38E38E39 * (((uint64_t)v661 - v660) >> 4);
      if (v545 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v546 = 0x1C71C71C71C71C72 * ((uint64_t)(v662 - v660) >> 4);
      if (v546 <= v545 + 1)
        v546 = v545 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v662 - v660) >> 4) >= 0xE38E38E38E38E3)
        v547 = 0x1C71C71C71C71C7;
      else
        v547 = v546;
      *((_QWORD *)&v704 + 1) = &v662;
      if (v547)
        v547 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v547);
      else
        v548 = 0;
      *(_QWORD *)buf = v547;
      *(_QWORD *)&buf[8] = v547 + 144 * v545;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v704 = v547 + 144 * v548;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v660, buf);
      v543 = v661;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v661, (uint64_t)&__p);
      v543 = v542 + 6;
    }
    v661 = v543;

    if (v697 < 0)
      operator delete(v696);
    *(_QWORD *)buf = &v693;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v692;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_692;
    v549 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_691:
    operator delete(v549);
LABEL_692:

    goto LABEL_693;
  }
LABEL_657:
  if (!Espresso::ANECompilerEngine::is_mix(v625, v528))
    goto LABEL_663;
  v537 = v661;
  v538 = v661 - 6;
  std::string::append(v661 - 6, "_pre_tanh");
  (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(a1[53] + 32))(a1 + 53, a2, &v660);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&__p, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v539 = v693;
  for (m = v694; m != v539; --m)
  {
    if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(m[-1].__r_.__value_.__l.__data_);
  }
  v694 = v539;
  if ((unint64_t)v539 >= v695)
  {
    v550 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v693, (uint64_t)v538);
  }
  else
  {
    if (SHIBYTE(v537[-6].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v539, v537[-6].__r_.__value_.__l.__data_, v537[-6].__r_.__value_.__l.__size_);
    }
    else
    {
      v544 = *(_OWORD *)&v538->__r_.__value_.__l.__data_;
      v539->__r_.__value_.__r.__words[2] = v538->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v539->__r_.__value_.__l.__data_ = v544;
    }
    v550 = v539 + 1;
  }
  v694 = v550;
  (*(void (**)(_QWORD *, _BYTE *, std::string *))(a1[53] + 48))(a1 + 53, a2, &__p);

  if (v697 < 0)
    operator delete(v696);
  *(_QWORD *)buf = &v693;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v692;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

LABEL_694:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v660;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  v551 = (std::__shared_weak_count *)*((_QWORD *)&v674 + 1);
  if (*((_QWORD *)&v674 + 1))
  {
    v552 = (unint64_t *)(*((_QWORD *)&v674 + 1) + 8);
    do
      v553 = __ldaxr(v552);
    while (__stlxr(v553 - 1, v552));
    if (!v553)
    {
      ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
      std::__shared_weak_count::__release_weak(v551);
    }
  }
  v554 = (std::__shared_weak_count *)*((_QWORD *)&v673 + 1);
  if (*((_QWORD *)&v673 + 1))
  {
    v555 = (unint64_t *)(*((_QWORD *)&v673 + 1) + 8);
    do
      v556 = __ldaxr(v555);
    while (__stlxr(v556 - 1, v555));
    if (!v556)
    {
      ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
      std::__shared_weak_count::__release_weak(v554);
    }
  }
  v557 = (std::__shared_weak_count *)*((_QWORD *)&v672 + 1);
  if (*((_QWORD *)&v672 + 1))
  {
    v558 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
    do
      v559 = __ldaxr(v558);
    while (__stlxr(v559 - 1, v558));
    if (!v559)
    {
      ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
      std::__shared_weak_count::__release_weak(v557);
    }
  }
  v560 = (std::__shared_weak_count *)*((_QWORD *)&v671 + 1);
  if (*((_QWORD *)&v671 + 1))
  {
    v561 = (unint64_t *)(*((_QWORD *)&v671 + 1) + 8);
    do
      v562 = __ldaxr(v561);
    while (__stlxr(v562 - 1, v561));
    if (!v562)
    {
      ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
      std::__shared_weak_count::__release_weak(v560);
    }
  }
  v563 = (std::__shared_weak_count *)*((_QWORD *)&v670 + 1);
  if (*((_QWORD *)&v670 + 1))
  {
    v564 = (unint64_t *)(*((_QWORD *)&v670 + 1) + 8);
    do
      v565 = __ldaxr(v564);
    while (__stlxr(v565 - 1, v564));
    if (!v565)
    {
      ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
      std::__shared_weak_count::__release_weak(v563);
    }
  }
  v566 = (std::__shared_weak_count *)*((_QWORD *)&v669 + 1);
  if (*((_QWORD *)&v669 + 1))
  {
    v567 = (unint64_t *)(*((_QWORD *)&v669 + 1) + 8);
    do
      v568 = __ldaxr(v567);
    while (__stlxr(v568 - 1, v567));
    if (!v568)
    {
      ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
      std::__shared_weak_count::__release_weak(v566);
    }
  }
  v569 = (std::__shared_weak_count *)*((_QWORD *)&v668 + 1);
  if (*((_QWORD *)&v668 + 1))
  {
    v570 = (unint64_t *)(*((_QWORD *)&v668 + 1) + 8);
    do
      v571 = __ldaxr(v570);
    while (__stlxr(v571 - 1, v570));
    if (!v571)
    {
      ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
      std::__shared_weak_count::__release_weak(v569);
    }
  }
  v572 = (std::__shared_weak_count *)*((_QWORD *)&v667 + 1);
  if (*((_QWORD *)&v667 + 1))
  {
    v573 = (unint64_t *)(*((_QWORD *)&v667 + 1) + 8);
    do
      v574 = __ldaxr(v573);
    while (__stlxr(v574 - 1, v573));
    if (!v574)
    {
      ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
      std::__shared_weak_count::__release_weak(v572);
    }
  }
  v575 = (std::__shared_weak_count *)*((_QWORD *)&v666 + 1);
  if (*((_QWORD *)&v666 + 1))
  {
    v576 = (unint64_t *)(*((_QWORD *)&v666 + 1) + 8);
    do
      v577 = __ldaxr(v576);
    while (__stlxr(v577 - 1, v576));
    if (!v577)
    {
      ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
      std::__shared_weak_count::__release_weak(v575);
    }
  }
  v578 = (std::__shared_weak_count *)*((_QWORD *)&v665 + 1);
  if (*((_QWORD *)&v665 + 1))
  {
    v579 = (unint64_t *)(*((_QWORD *)&v665 + 1) + 8);
    do
      v580 = __ldaxr(v579);
    while (__stlxr(v580 - 1, v579));
    if (!v580)
    {
      ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
      std::__shared_weak_count::__release_weak(v578);
    }
  }
  v581 = (std::__shared_weak_count *)*((_QWORD *)&v664 + 1);
  if (*((_QWORD *)&v664 + 1))
  {
    v582 = (unint64_t *)(*((_QWORD *)&v664 + 1) + 8);
    do
      v583 = __ldaxr(v582);
    while (__stlxr(v583 - 1, v582));
    if (!v583)
    {
      ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
      std::__shared_weak_count::__release_weak(v581);
    }
  }
  v584 = (std::__shared_weak_count *)*((_QWORD *)&v663 + 1);
  if (*((_QWORD *)&v663 + 1))
  {
    v585 = (unint64_t *)(*((_QWORD *)&v663 + 1) + 8);
    do
      v586 = __ldaxr(v585);
    while (__stlxr(v586 - 1, v585));
    if (!v586)
    {
      ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
      std::__shared_weak_count::__release_weak(v584);
    }
  }
}

void sub_1917A2E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a67;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  STACK[0x298] = (unint64_t)&a64;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x298]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&a67);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_batch_matmul_kernel::~mix_batch_matmul_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_batch_matmul_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::mix_batch_matmul_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  void *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 v20;
  std::__shared_weak_count *v21;
  const Espresso::net *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  const Espresso::net *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  const void *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  const Espresso::net *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  id v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int64x2_t *v62;
  std::__shared_weak_count *v63;
  char v64;
  void *v65[2];
  char v66;
  _OWORD v67[2];
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  const Espresso::net *v72;
  std::__shared_weak_count *v73;
  _DWORD v74[8];
  _OWORD v75[2];
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  const Espresso::net *v80;
  std::__shared_weak_count *v81;
  void **v82[3];
  int v83;
  _OWORD v84[2];
  uint64_t v85;
  void *__p;
  void *v87;
  uint64_t v88;
  const Espresso::net *v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  char v92;
  int v93;
  int v94;
  std::string v95;
  _BYTE v96[24];
  _BYTE v97[32];
  std::__shared_weak_count *v98;
  int64x2_t *v99;
  std::__shared_weak_count *v100;
  const Espresso::net *v101;
  std::__shared_weak_count *v102;
  void **v103;

  v6 = a3[6];
  v101 = 0;
  v102 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v102 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v101 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v99 = *(int64x2_t **)a2;
    v100 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v91, "batch matmul not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v91, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v99, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
    v14 = v98;
    if (v98)
    {
      v15 = (unint64_t *)&v98->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v82[0] = (void **)v97;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v82);
    v82[0] = (void **)v96;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v82);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    if (v92 < 0)
      operator delete((void *)v91);
    v17 = v100;
    if (v100)
    {
      v18 = (unint64_t *)&v100->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = 0;
  }
  else
  {
    v22 = v101;
    v21 = v102;
    v89 = v101;
    v90 = v102;
    if (v102)
    {
      v23 = (unint64_t *)&v102->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *a3;
    v26 = *(_QWORD *)(*a3 + 32);
    v27 = *(_OWORD *)(*a3 + 16);
    v84[0] = *(_OWORD *)*a3;
    v84[1] = v27;
    v85 = v26;
    __p = 0;
    v87 = 0;
    v88 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v25 + 40), *(_QWORD *)(v25 + 48), (uint64_t)(*(_QWORD *)(v25 + 48) - *(_QWORD *)(v25 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v91, v22, (const Espresso::layer_shape *)v84, 1);
    if (__p)
    {
      v87 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v28 = (unint64_t *)&v21->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v31 = v101;
    v30 = v102;
    v80 = v101;
    v81 = v102;
    if (v102)
    {
      v32 = (unint64_t *)&v102->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = (_QWORD *)*a3;
    v35 = *(_OWORD *)(*a3 + 80);
    v75[0] = *(_OWORD *)(*a3 + 64);
    v75[1] = v35;
    v36 = (const void *)v34[13];
    v76 = v34[12];
    v77 = 0;
    v78 = 0;
    v79 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, v36, v34[14], (uint64_t)(v34[14] - (_QWORD)v36) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v82, v31, (const Espresso::layer_shape *)v75, 1);
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    if (v30)
    {
      v37 = (unint64_t *)&v30->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v40 = v101;
    v39 = v102;
    v72 = v101;
    v73 = v102;
    if (v102)
    {
      v41 = (unint64_t *)&v102->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = a3[3];
    v44 = *(_QWORD *)(v43 + 32);
    v45 = *(_OWORD *)(v43 + 16);
    v67[0] = *(_OWORD *)v43;
    v67[1] = v45;
    v68 = v44;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v69, *(const void **)(v43 + 40), *(_QWORD *)(v43 + 48), (uint64_t)(*(_QWORD *)(v43 + 48) - *(_QWORD *)(v43 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v74, v40, (const Espresso::layer_shape *)v67, 1);
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v39)
    {
      v46 = (unint64_t *)&v39->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v48 = v9;
    if (*(_BYTE *)(a1 + 280))
    {
      v64 = 0;
      std::string::basic_string[abi:ne180100]<0>(v65, "channel mode for batch matmul not supported.");
    }
    else if (v93 == v83 && v93 == v74[6])
    {
      if ((v93 - 2) >= 3)
      {
        v64 = 0;
        std::string::basic_string[abi:ne180100]<0>(v65, "Rank5 batch matmul is not supported");
      }
      else if (v94)
      {
        if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v91, v48))
        {
          if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v82, v48))
          {
            if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v74, v48))
            {
              v64 = 1;
              std::string::basic_string[abi:ne180100]<0>(v65, "Success");
            }
            else
            {
              v64 = 0;
              std::string::basic_string[abi:ne180100]<0>(v65, "Output blob dimensions exceed ANE limit.");
            }
          }
          else
          {
            v64 = 0;
            std::string::basic_string[abi:ne180100]<0>(v65, "Input1 blob dimensions exceed ANE limit.");
          }
        }
        else
        {
          v64 = 0;
          std::string::basic_string[abi:ne180100]<0>(v65, "Input0 blob dimensions exceed ANE limit.");
        }
      }
      else
      {
        v64 = 0;
        std::string::basic_string[abi:ne180100]<0>(v65, "NCDHW layout not supported with batch matmul.");
      }
    }
    else
    {
      v64 = 0;
      std::string::basic_string[abi:ne180100]<0>(v65, "Varied I/O ranks for batch matmul not supported");
    }

    v20 = v64 != 0;
    if (!v64)
    {
      v53 = *(std::__shared_weak_count **)(a2 + 8);
      v62 = *(int64x2_t **)a2;
      v63 = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, (__int128 *)v65, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v62, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
      v56 = v98;
      if (v98)
      {
        v57 = (unint64_t *)&v98->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v103 = (void **)v97;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v103);
      v103 = (void **)v96;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v103);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      v59 = v63;
      if (v63)
      {
        v60 = (unint64_t *)&v63->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }

  v49 = v102;
  if (v102)
  {
    v50 = (unint64_t *)&v102->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return v20;
}

void sub_1917A3E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  void *v56;
  uint64_t v57;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v57 - 88);
  _Unwind_Resume(a1);
}

void sub_1917A3FA0()
{
  JUMPOUT(0x1917A3F90);
}

void Espresso::ANECompilerEngine::mix_batch_matmul_kernel::compile(Espresso::ANECompilerEngine::mix_batch_matmul_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  const void *v22;
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  _BOOL4 v32;
  size_t size;
  std::string *p_str;
  std::string *v35;
  std::string::pointer data;
  __int128 v37;
  _QWORD *v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  std::string *v44;
  std::string *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  std::string::pointer v51;
  size_t v52;
  std::string *v53;
  std::string *v54;
  _QWORD *v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  std::string *v61;
  std::string *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __CFString *v67;
  uint64_t i;
  std::string *v69;
  std::string *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  float v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  int *v101;
  _WORD *v102;
  int v103;
  __int128 v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  int *v117;
  _WORD *v118;
  int v119;
  Espresso::ANECompilerEngine::compiler::build_state_t *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  id v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t weights_file_index;
  void *v135;
  void *v136;
  __int128 v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  void *v147;
  void *v148;
  std::string *v149;
  std::string *v150;
  uint64_t v151;
  char v152;
  std::string::size_type v153;
  std::string::size_type v154;
  std::string::size_type v155;
  std::string *v156;
  std::string *v157;
  const std::string::value_type *v158;
  __int128 v159;
  __CFString *v160;
  std::string *v161;
  std::string *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  __int128 v185;
  int v186;
  int v187;
  int v188;
  std::string *v189;
  std::string *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  const char *v213;
  int *v214;
  uint64_t j;
  float v216;
  int v217;
  _WORD *v218;
  int v219;
  std::runtime_error *exception;
  int *v222;
  uint64_t k;
  int v224;
  int v225;
  int v226;
  unsigned int v227;
  int v228;
  Espresso *v229;
  const char *v230;
  float v231;
  NSObject *v233;
  double v234;
  uint64_t v235;
  _WORD *v236;
  int v237;
  uint64_t v239;
  unsigned int v240;
  int v241;
  float *obj;
  id obja;
  Espresso::ANECompilerEngine::compiler *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count *v246;
  std::string v247;
  uint64_t v248;
  void *v249;
  _QWORD v250[6];
  char v251;
  id v252;
  id v253;
  id v254;
  std::string v255;
  uint64_t v256;
  std::vector<std::string> v257;
  void *v258;
  char v259;
  id v260;
  __CFString *v261;
  id v262;
  int v263;
  std::string v264;
  uint64_t v265;
  std::vector<std::string> v266;
  void *v267;
  char v268;
  int v269;
  id v270;
  id v271;
  id v272;
  unsigned int v273[3];
  uint64_t v274;
  std::string __p;
  uint64_t v276;
  std::vector<std::string> v277;
  void *v278;
  char v279;
  int v280;
  id v281;
  id v282;
  id v283;
  unsigned int v284[3];
  uint64_t v285;
  void *v286;
  std::__shared_weak_count *v287;
  void *v288;
  std::__shared_weak_count *v289;
  void *v290;
  std::__shared_weak_count *v291;
  uint64_t v292;
  std::string *v293;
  _QWORD v294[2];
  std::__shared_weak_count *v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  __int128 v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  __int128 v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  uint64_t v306[2];
  uint64_t v307;
  std::__shared_weak_count *v308;
  void **v309;
  std::__shared_weak_count *v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  unsigned int v313;
  int v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  std::string v317;
  __int128 v318;
  void *v319;
  std::vector<std::string> v320;
  void *v321;
  char v322;
  id v323;
  __CFString *v324;
  id v325;
  std::string __str;
  std::string v327;
  std::vector<std::string> v328;
  void *v329;
  char v330;
  id v331;
  id v332;
  id v333;
  uint64_t v334;
  std::string v335;
  __int128 v336;
  uint64_t v337;

  v337 = *MEMORY[0x1E0C80C00];
  v299 = 0;
  v298 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v299 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v298 = v7) == 0))
  {
    v213 = "Inconsistent state: null network";
    goto LABEL_394;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v213 = "Inconsistent state: blob_storage";
LABEL_394:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v213);
  }
  __str.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
  v9 = (const void *)*((_QWORD *)v8 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v296 = (uint64_t)v9;
  v297 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)&__str);
  v15 = (void *)*((_QWORD *)v13 + 5);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v294[1] = v15;
  v295 = v14;
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v293 = 0;
  v292 = 0;
  v294[0] = 0;
  if (v9
  {
    v290 = v18;
    v291 = v10;
    if (v10)
    {
      v19 = (unint64_t *)&v10->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v291 = 0;
    v290 = 0;
  }
  v244 = a2;
  __str.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0] + 24;
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
  v22 = (const void *)*((_QWORD *)v21 + 5);
  if (v22
  {
    v24 = (uint64_t)v23;
    v25 = (std::__shared_weak_count *)*((_QWORD *)v21 + 6);
    v288 = v23;
    v289 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v24 = 0;
    v289 = 0;
    v288 = 0;
  }
  if (v15
  {
    v29 = v28;
    v286 = v28;
    v287 = v14;
    if (v14)
    {
      v30 = (unint64_t *)&v14->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
  }
  else
  {
    v29 = 0;
    v287 = 0;
    v286 = 0;
  }
  obj = (float *)v15;
  v285 = 0x400000003;
  v32 = *((_BYTE *)this + 281) == 0;
  v284[0] = *((unsigned __int8 *)this + 281);
  v284[1] = 2;
  v284[2] = v32;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 13);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = a3;
    else
      v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
    memmove(p_str, v35, size);
  }
  strcpy((char *)p_str + size, "_transposed_x");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  data = a3[2].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)data, *((_QWORD *)data + 1));
  }
  else
  {
    v37 = *(_OWORD *)data;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)data + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v37;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v277, &__str, (__int128 *)&v327, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v38 = a3[2].__r_.__value_.__l.__data_;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v7 + 360), v38))
  {
    v317.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    v39 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 352), v38, (uint64_t)&std::piecewise_construct, (__int128 **)&v317);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)(v39 + 56);
    __str.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v327.__r_.__value_.__l.__data_ = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__str.__r_.__value_.__r.__words[2], *((const void **)v39 + 9), *((_QWORD *)v39 + 10), (uint64_t)(*((_QWORD *)v39 + 10) - *((_QWORD *)v39 + 9)) >> 2);
    if (LODWORD(__str.__r_.__value_.__r.__words[1]) == -1)
      v40 = 1;
    else
      v40 = __str.__r_.__value_.__r.__words[1];
    if (__str.__r_.__value_.__r.__words[2])
    {
      v327.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
      operator delete((void *)__str.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    v40 = 1;
  }
  v280 = v40;
  Espresso::abstract_blob_container::shape((char *)&v317, (uint64_t)v9);
  v41 = HIDWORD(v317.__r_.__value_.__r.__words[2]);
  if (LODWORD(v317.__r_.__value_.__r.__words[2]) == 1)
    v42 = 4;
  else
    v42 = 5;
  if (HIDWORD(v317.__r_.__value_.__r.__words[2]) == -1)
    v41 = v42;
  if (v41 == 5)
    v43 = 1;
  else
    v43 = -1;
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)&__str, v284, (uint64_t)&__p, v43);
  Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__p, (__int128 *)&__str);

  if (v330 < 0)
    operator delete(v329);
  v264.__r_.__value_.__r.__words[0] = (std::string::size_type)&v328;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v264);
  v264.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v264);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v319)
  {
    v320.__begin_ = (std::vector<std::string>::pointer)v319;
    operator delete(v319);
  }
  v44 = v293;
  if ((unint64_t)v293 >= v294[0])
  {
    v46 = 0x8E38E38E38E38E39 * (((uint64_t)v293 - v292) >> 4);
    if (v46 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v47 = 0x1C71C71C71C71C72 * ((v294[0] - v292) >> 4);
    if (v47 <= v46 + 1)
      v47 = v46 + 1;
    if (0x8E38E38E38E38E39 * ((v294[0] - v292) >> 4) >= 0xE38E38E38E38E3)
      v48 = 0x1C71C71C71C71C7;
    else
      v48 = v47;
    v327.__r_.__value_.__l.__size_ = (std::string::size_type)v294;
    if (v48)
      v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v48);
    else
      v49 = 0;
    __str.__r_.__value_.__r.__words[0] = v48;
    __str.__r_.__value_.__l.__size_ = v48 + 144 * v46;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    v327.__r_.__value_.__r.__words[0] = v48 + 144 * v49;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&__p);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v292, &__str);
    v45 = v293;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v293, (uint64_t)&__p);
    v45 = v44 + 6;
  }
  v293 = v45;
  v274 = 0x400000003;
  v50 = *((_BYTE *)this + 282) == 0;
  v273[0] = *((unsigned __int8 *)this + 282);
  v273[1] = 2;
  v273[2] = v50;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v264.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  v51 = a3[2].__r_.__value_.__l.__data_;
  if (v51[47] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v51 + 3), *((_QWORD *)v51 + 4));
  else
    __str = *(std::string *)(v51 + 1);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v266, &__str, (__int128 *)&v327, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    v52 = a3->__r_.__value_.__l.__size_;
  v53 = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v52 + 13);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v53 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v52)
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = a3;
    else
      v54 = (std::string *)a3->__r_.__value_.__r.__words[0];
    memmove(v53, v54, v52);
  }
  strcpy((char *)v53 + v52, "_transposed_y");
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v264.__r_.__value_.__l.__data_);
  v264 = __str;
  v55 = (_QWORD *)(a3[2].__r_.__value_.__r.__words[0] + 24);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v7 + 360), v55))
  {
    v317.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    v56 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 352), v55, (uint64_t)&std::piecewise_construct, (__int128 **)&v317);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)(v56 + 56);
    __str.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v327.__r_.__value_.__l.__data_ = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__str.__r_.__value_.__r.__words[2], *((const void **)v56 + 9), *((_QWORD *)v56 + 10), (uint64_t)(*((_QWORD *)v56 + 10) - *((_QWORD *)v56 + 9)) >> 2);
    if (LODWORD(__str.__r_.__value_.__r.__words[1]) == -1)
      v57 = 1;
    else
      v57 = __str.__r_.__value_.__r.__words[1];
    if (__str.__r_.__value_.__r.__words[2])
    {
      v327.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
      operator delete((void *)__str.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    v57 = 1;
  }
  v269 = v57;
  Espresso::abstract_blob_container::shape((char *)&v317, v24);
  v58 = HIDWORD(v317.__r_.__value_.__r.__words[2]);
  if (LODWORD(v317.__r_.__value_.__r.__words[2]) == 1)
    v59 = 4;
  else
    v59 = 5;
  if (HIDWORD(v317.__r_.__value_.__r.__words[2]) == -1)
    v58 = v59;
  if (v58 == 5)
    v60 = 1;
  else
    v60 = -1;
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)&__str, v273, (uint64_t)&v264, v60);
  Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&v264, (__int128 *)&__str);

  if (v330 < 0)
    operator delete(v329);
  v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v328;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
  v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v319)
  {
    v320.__begin_ = (std::vector<std::string>::pointer)v319;
    operator delete(v319);
  }
  v61 = v293;
  if ((unint64_t)v293 >= v294[0])
  {
    v63 = 0x8E38E38E38E38E39 * (((uint64_t)v293 - v292) >> 4);
    if (v63 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v64 = 0x1C71C71C71C71C72 * ((v294[0] - v292) >> 4);
    if (v64 <= v63 + 1)
      v64 = v63 + 1;
    if (0x8E38E38E38E38E39 * ((v294[0] - v292) >> 4) >= 0xE38E38E38E38E3)
      v65 = 0x1C71C71C71C71C7;
    else
      v65 = v64;
    v327.__r_.__value_.__l.__size_ = (std::string::size_type)v294;
    if (v65)
      v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v65);
    else
      v66 = 0;
    __str.__r_.__value_.__r.__words[0] = v65;
    __str.__r_.__value_.__l.__size_ = v65 + 144 * v63;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    v327.__r_.__value_.__r.__words[0] = v65 + 144 * v66;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v264);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v292, &__str);
    v62 = v293;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v293, (uint64_t)&v264);
    v62 = v61 + 6;
  }
  v293 = v62;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v255.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  v67 = v261;
  v261 = CFSTR("MatrixMultiplication");

  v263 = v29[43];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __str = __p;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  else
    v327 = v264;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v257, &__str, (__int128 *)&v328, 2uLL);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v327.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&__str + i * 8 + 24));
  }
  std::string::append(&v255, "matmult");
  v69 = v293;
  if ((unint64_t)v293 >= v294[0])
  {
    v71 = 0x8E38E38E38E38E39 * (((uint64_t)v293 - v292) >> 4);
    if (v71 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v72 = 0x1C71C71C71C71C72 * ((v294[0] - v292) >> 4);
    if (v72 <= v71 + 1)
      v72 = v71 + 1;
    if (0x8E38E38E38E38E39 * ((v294[0] - v292) >> 4) >= 0xE38E38E38E38E3)
      v73 = 0x1C71C71C71C71C7;
    else
      v73 = v72;
    v327.__r_.__value_.__l.__size_ = (std::string::size_type)v294;
    if (v73)
      v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v73);
    else
      v74 = 0;
    __str.__r_.__value_.__r.__words[0] = v73;
    __str.__r_.__value_.__l.__size_ = v73 + 144 * v71;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    v327.__r_.__value_.__r.__words[0] = v73 + 144 * v74;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v255);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v292, &__str);
    v70 = v293;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v293, (uint64_t)&v255);
    v70 = v69 + 6;
  }
  v293 = v70;
  v75 = (char *)this + 288;
  if (*((_QWORD *)this + 44))
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v247.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
    std::string::append(&v247, "_goc");
    v246 = v299;
    if (v299)
    {
      v76 = (unint64_t *)&v299->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v245 = v14;
    if (v14)
    {
      v78 = (unint64_t *)&v14->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__str);
    v333 = 0;
    v332 = 0;
    v334 = 0x100000000;
    v80 = *((_QWORD *)this + 44);
    v81 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    v315 = v80;
    v316 = v81;
    if (v81)
    {
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    if (!v80 || *(_BYTE *)((*(uint64_t (**)(char *))(*(_QWORD *)v75 + 104))((char *)this + 288) + 40))
      goto LABEL_291;
    v84 = obj[28];
    v307 = v80;
    v308 = v81;
    if (v81)
    {
      v85 = (unint64_t *)&v81->__shared_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    v87 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    v306[0] = *((_QWORD *)this + 46);
    v306[1] = (uint64_t)v87;
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v307, v306, (uint64_t)&v309, v84);
    if (v87)
    {
      v90 = (unint64_t *)&v87->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v92 = v308;
    if (v308)
    {
      v93 = (unint64_t *)&v308->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = v315;
    v96 = *(unsigned int *)(v315 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v304, 2 * v96, 1, 1, 1);
    v97 = (int)v96;
    v303 = 0uLL;
    v98 = v96;
    v99 = *((_QWORD *)this + 46);
    if (v99)
      v98 = *(_DWORD *)(v99 + 8);
    if (!*((_BYTE *)v244 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v335, 4 * v96);
      v214 = *(int **)(v335.__r_.__value_.__r.__words[0] + 16);
      if ((int)v96 >= 1)
      {
        for (j = 0; j != v96; ++j)
        {
          v216 = *(float *)(*(_QWORD *)(v95 + 16) + j * 4);
          *(float *)&v217 = ldexp(1.0, -v313) * v216;
          v214[j] = v217;
        }
      }
      if ((_DWORD)v96)
      {
        v218 = *(_WORD **)(v304 + 16);
        do
        {
          v219 = *v214++;
          _S0 = v219;
          __asm { FCVT            H0, S0 }
          *v218++ = _S0;
          --v97;
        }
        while (v97);
      }
      v302 = 0;
      v301 = 0;
      if (*((_QWORD *)this + 46))
      {
        Espresso::blob<unsigned char,1>::make(&v317, 4 * v98);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v301, (__int128 *)&v317);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
        Espresso::blob<unsigned char,1>::make(&v317, 2 * v98);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v303, (__int128 *)&v317);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
        v222 = *(int **)(v301 + 16);
        if (v98 >= 1)
        {
          for (k = 0; k != v98; ++k)
          {
            if ((int)v96 - 1 >= (int)k)
              v224 = k;
            else
              v224 = v96 - 1;
            *(float *)&v225 = *(float *)(*(_QWORD *)(v311 + 16) + 4 * k) * *((float *)v309[2] + v224);
            v222[k] = v225;
            v226 = v314;
            v227 = v313;
            *(float *)&v228 = ldexp(1.0, v314 - v313) * *(float *)&v225;
            v222[k] = v228;
            v231 = ldexp(1.0, v227 - v226) * *(float *)&v228;
            if (v231 < -127.0 || v231 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v229, v230);
              v233 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
              {
                v234 = *(float *)&v222[k];
                LODWORD(v317.__r_.__value_.__l.__data_) = 134218752;
                *(double *)((char *)v317.__r_.__value_.__r.__words + 4) = v231;
                WORD2(v317.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v317.__r_.__value_.__r.__words[1] + 6) = v314;
                WORD1(v317.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v317.__r_.__value_.__r.__words[2]) = v313;
                LOWORD(v318) = 2048;
                *(double *)((char *)&v318 + 2) = v234;
                _os_log_error_impl(&dword_190DAF000, v233, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", (uint8_t *)&v317, 0x22u);
              }

            }
          }
        }
        if (v98)
        {
          v235 = v98;
          v236 = *(_WORD **)(v303 + 16);
          do
          {
            v237 = *v222++;
            _S0 = v237;
            __asm { FCVT            H0, S0 }
            *v236++ = _S0;
            --v235;
          }
          while (v235);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v100 = v314;
    if ((_DWORD)v96)
    {
      v101 = (int *)v309[2];
      v102 = *(_WORD **)(v304 + 16);
      do
      {
        v103 = *v101++;
        _S0 = v103;
        __asm { FCVT            H0, S0 }
        *v102++ = _S0;
        --v97;
      }
      while (v97);
    }
    if (v99)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v317, 2 * v98, 1, 1, 1);
      v109 = *(_OWORD *)&v317.__r_.__value_.__l.__data_;
      *(_OWORD *)&v317.__r_.__value_.__l.__data_ = 0uLL;
      v110 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
      v303 = v109;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v113 = (std::__shared_weak_count *)v317.__r_.__value_.__l.__size_;
      if (v317.__r_.__value_.__l.__size_)
      {
        v114 = (unint64_t *)(v317.__r_.__value_.__l.__size_ + 8);
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      if (v98)
      {
        v116 = v98;
        v117 = *(int **)(v311 + 16);
        v118 = *(_WORD **)(v303 + 16);
        do
        {
          v119 = *v117++;
          _S0 = v119;
          __asm { FCVT            H0, S0 }
          *v118++ = _S0;
          --v116;
        }
        while (v116);
      }
    }
    LODWORD(v239) = v100;
    HIDWORD(v239) = *((unsigned __int8 *)v244 + 552);
    v121 = (Espresso::ANECompilerEngine::compiler *)((char *)v244 + 128);
    v122 = v304;
    v123 = v305;
    v301 = v304;
    v302 = v305;
    if (v305)
    {
      v124 = (unint64_t *)&v305->__shared_owners_;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    v126 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v121, *(const unsigned __int8 **)(v122 + 16), *(int *)(v122 + 8));
    if (v123)
    {
      v127 = (unint64_t *)&v123->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    obja = (id)objc_opt_new();
    if (*((_BYTE *)v244 + 121))
    {
      v129 = *(id *)(v292 + 128);

      obja = v129;
    }
    v130 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v96);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v130, "setObject:forKeyedSubscript:", v131, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v126);
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v130, "setObject:forKeyedSubscript:", v132, CFSTR("ScaleOffset"));

    v133 = (void *)MEMORY[0x1E0CB37E8];
    if (HIDWORD(v239))
      weights_file_index = 0;
    else
    objc_msgSend(v133, "numberWithUnsignedLong:", weights_file_index, v239);
    v135 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v130, "setObject:forKeyedSubscript:", v135, CFSTR("ScaleIndex"));

    objc_msgSend(v130, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v313);
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obja, "setObject:forKeyedSubscript:", v136, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 46))
    {
      v137 = v303;
      v300 = v303;
      if (*((_QWORD *)&v303 + 1))
      {
        v138 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      v140 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v121, *(const unsigned __int8 **)(v137 + 16), *(int *)(v137 + 8));
      if (*((_QWORD *)&v137 + 1))
      {
        v141 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v137 + 1) + 16))(*((_QWORD *)&v137 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v137 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 46) + 8));
      v143 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v130, "setObject:forKeyedSubscript:", v143, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v140);
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v130, "setObject:forKeyedSubscript:", v144, CFSTR("BiasOffset"));

      v145 = (void *)MEMORY[0x1E0CB37E8];
      if (v241)
        v146 = 0;
      else
      objc_msgSend(v145, "numberWithUnsignedLong:", v146);
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v130, "setObject:forKeyedSubscript:", v147, CFSTR("BiasIndex"));

      objc_msgSend(v130, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v240);
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obja, "setObject:forKeyedSubscript:", v148, CFSTR("BiasShift"));

    }
    objc_msgSend(obja, "setObject:forKeyedSubscript:", v130, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v317.__r_.__value_.__l.__data_, (id *)&v247.__r_.__value_.__l.__data_);
    v149 = v293;
    if (v293 == (std::string *)v292)
    {
LABEL_252:
      v160 = v324;
      v324 = CFSTR("GOC");

      objc_storeStrong(&v325, obja);
      if (!*((_BYTE *)v244 + 121))
      {
        v161 = v293;
        if ((unint64_t)v293 >= v294[0])
        {
          v163 = 0x8E38E38E38E38E39 * (((uint64_t)v293 - v292) >> 4);
          if (v163 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v164 = 0x1C71C71C71C71C72 * ((v294[0] - v292) >> 4);
          if (v164 <= v163 + 1)
            v164 = v163 + 1;
          if (0x8E38E38E38E38E39 * ((v294[0] - v292) >> 4) >= 0xE38E38E38E38E3)
            v165 = 0x1C71C71C71C71C7;
          else
            v165 = v164;
          *((_QWORD *)&v336 + 1) = v294;
          if (v165)
            v165 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v165);
          else
            v166 = 0;
          v335.__r_.__value_.__r.__words[0] = v165;
          v335.__r_.__value_.__l.__size_ = v165 + 144 * v163;
          v335.__r_.__value_.__r.__words[2] = v335.__r_.__value_.__l.__size_;
          *(_QWORD *)&v336 = v165 + 144 * v166;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v335.__r_.__value_.__l.__size_, (uint64_t)&v317);
          v335.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v292, &v335);
          v162 = v293;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v335);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v293, (uint64_t)&v317);
          v162 = v161 + 6;
        }
        v293 = v162;
      }

      if (v322 < 0)
        operator delete(v321);
      v335.__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v335);
      v335.__r_.__value_.__r.__words[0] = (std::string::size_type)&v318;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v335);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v317.__r_.__value_.__l.__data_);

      v167 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
      if (*((_QWORD *)&v303 + 1))
      {
        v168 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      v170 = v305;
      if (v305)
      {
        v171 = (unint64_t *)&v305->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      v173 = v312;
      if (v312)
      {
        v174 = (unint64_t *)&v312->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
      v176 = v310;
      if (v310)
      {
        v177 = (unint64_t *)&v310->__shared_owners_;
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      v81 = v316;
LABEL_291:
      if (v81)
      {
        v179 = (unint64_t *)&v81->__shared_owners_;
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }

      if (v330 < 0)
        operator delete(v329);
      v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&v328;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
      v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v245)
      {
        v181 = (unint64_t *)&v245->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
      }
      if (v246)
      {
        v183 = (unint64_t *)&v246->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (!v184)
        {
          ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
          std::__shared_weak_count::__release_weak(v246);
        }
      }

      if (v251 < 0)
        operator delete((void *)v250[4]);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v250;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v248;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v247.__r_.__value_.__l.__data_);
      goto LABEL_314;
    }
    v150 = v293 - 6;
    v151 = HIBYTE(v293[-6].__r_.__value_.__r.__words[2]);
    v152 = v151;
    v153 = v293[-6].__r_.__value_.__l.__size_;
    if ((v151 & 0x80u) == 0)
      v154 = HIBYTE(v293[-6].__r_.__value_.__r.__words[2]);
    else
      v154 = v293[-6].__r_.__value_.__l.__size_;
    v155 = HIBYTE(v317.__r_.__value_.__r.__words[2]);
    if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v155 = v317.__r_.__value_.__l.__size_;
    if (v154 != v155)
      goto LABEL_246;
    if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v156 = &v317;
    else
      v156 = (std::string *)v317.__r_.__value_.__r.__words[0];
    if ((char)v151 < 0)
    {
      v158 = (const std::string::value_type *)v150->__r_.__value_.__r.__words[0];
      if (memcmp(v150->__r_.__value_.__l.__data_, v156, v293[-6].__r_.__value_.__l.__size_))
        goto LABEL_249;
    }
    else if ((_BYTE)v151)
    {
      v157 = v293 - 6;
      while (v157->__r_.__value_.__s.__data_[0] == v156->__r_.__value_.__s.__data_[0])
      {
        v157 = (std::string *)((char *)v157 + 1);
        v156 = (std::string *)((char *)v156 + 1);
        if (!--v151)
          goto LABEL_245;
      }
      goto LABEL_246;
    }
LABEL_245:
    std::string::append(v149 - 6, "__@pre_scale_bias");
    v152 = HIBYTE(v149[-6].__r_.__value_.__r.__words[2]);
LABEL_246:
    if ((v152 & 0x80) == 0)
    {
      v159 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
      v335.__r_.__value_.__r.__words[2] = v149[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v335.__r_.__value_.__l.__data_ = v159;
      goto LABEL_250;
    }
    v158 = v149[-6].__r_.__value_.__l.__data_;
    v153 = v149[-6].__r_.__value_.__l.__size_;
LABEL_249:
    std::string::__init_copy_ctor_external(&v335, v158, v153);
LABEL_250:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v320, &v335, &v336, 1uLL);
    if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v335.__r_.__value_.__l.__data_);
    goto LABEL_252;
  }
LABEL_314:
  LODWORD(v335.__r_.__value_.__r.__words[2]) = 4;
  *(_OWORD *)&v335.__r_.__value_.__l.__data_ = xmmword_191A93500;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  if (SHIBYTE(v293[-6].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v317, v293[-6].__r_.__value_.__l.__data_, v293[-6].__r_.__value_.__l.__size_);
  }
  else
  {
    v185 = *(_OWORD *)&v293[-6].__r_.__value_.__l.__data_;
    v317.__r_.__value_.__r.__words[2] = v293[-6].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v185;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v328, &v317, &v318, 1uLL);
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  std::string::operator=(&__str, a3);
  Espresso::abstract_blob_container::shape((char *)&v247, v296);
  v186 = HIDWORD(v247.__r_.__value_.__r.__words[2]);
  if (LODWORD(v247.__r_.__value_.__r.__words[2]) == 1)
    v187 = 4;
  else
    v187 = 5;
  if (HIDWORD(v247.__r_.__value_.__r.__words[2]) == -1)
    v186 = v187;
  if (v186 == 5)
    v188 = 1;
  else
    v188 = -1;
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)&v317, (unsigned int *)&v335, (uint64_t)&__str, v188);
  Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__str, (__int128 *)&v317);

  if (v322 < 0)
    operator delete(v321);
  v309 = (void **)&v320;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v309);
  v309 = (void **)&v318;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v309);
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  if (v249)
  {
    v250[0] = v249;
    operator delete(v249);
  }
  v189 = v293;
  if ((unint64_t)v293 >= v294[0])
  {
    v191 = 0x8E38E38E38E38E39 * (((uint64_t)v293 - v292) >> 4);
    if (v191 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v192 = 0x1C71C71C71C71C72 * ((v294[0] - v292) >> 4);
    if (v192 <= v191 + 1)
      v192 = v191 + 1;
    if (0x8E38E38E38E38E39 * ((v294[0] - v292) >> 4) >= 0xE38E38E38E38E3)
      v193 = 0x1C71C71C71C71C7;
    else
      v193 = v192;
    *((_QWORD *)&v318 + 1) = v294;
    if (v193)
      v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v193);
    else
      v194 = 0;
    v317.__r_.__value_.__r.__words[0] = v193;
    v317.__r_.__value_.__l.__size_ = v193 + 144 * v191;
    v317.__r_.__value_.__r.__words[2] = v317.__r_.__value_.__l.__size_;
    *(_QWORD *)&v318 = v193 + 144 * v194;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v317.__r_.__value_.__l.__size_, (uint64_t)&__str);
    v317.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v292, &v317);
    v190 = v293;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v317);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v293, (uint64_t)&__str);
    v190 = v189 + 6;
  }
  v293 = v190;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v75 + 24))(v75, v244, &v292);

  if (v330 < 0)
    operator delete(v329);
  v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&v328;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
  v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

  if (v259 < 0)
    operator delete(v258);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v255.__r_.__value_.__l.__data_);

  if (v268 < 0)
    operator delete(v267);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v265;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v264.__r_.__value_.__l.__data_);

  if (v279 < 0)
    operator delete(v278);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v195 = v287;
  if (v287)
  {
    v196 = (unint64_t *)&v287->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = v289;
  if (v289)
  {
    v199 = (unint64_t *)&v289->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = v291;
  if (v291)
  {
    v202 = (unint64_t *)&v291->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v204 = v295;
  if (v295)
  {
    v205 = (unint64_t *)&v295->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = v297;
  if (v297)
  {
    v208 = (unint64_t *)&v297->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = v299;
  if (v299)
  {
    v211 = (unint64_t *)&v299->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
}

void sub_1917A5D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,id a55)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a19);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a37);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a55);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x220]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E8]);
  STACK[0x220] = (unint64_t)&STACK[0x2F8];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x320]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_batch_matmul_kernel::compile(Espresso::ANECompilerEngine::mix_batch_matmul_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  Espresso::ANECompilerEngine::mix_batch_matmul_kernel::compile((Espresso::ANECompilerEngine::mix_batch_matmul_kernel *)((char *)this - 288), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_batch_matmul_kernel::~mix_batch_matmul_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::~mix_furthest_point_sampling_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  void *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 v20;
  std::__shared_weak_count *v21;
  const Espresso::net *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  const Espresso::net *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  id v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int64x2_t *v53;
  std::__shared_weak_count *v54;
  char v55;
  void *v56[2];
  char v57;
  _OWORD v58[2];
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  const Espresso::net *v63;
  std::__shared_weak_count *v64;
  void **v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _OWORD v70[2];
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  const Espresso::net *v75;
  std::__shared_weak_count *v76;
  void *__p[2];
  char v78;
  int v79;
  std::string v80;
  _BYTE v81[24];
  _BYTE v82[32];
  std::__shared_weak_count *v83;
  int64x2_t *v84;
  std::__shared_weak_count *v85;
  const Espresso::net *v86;
  std::__shared_weak_count *v87;
  void **v88;

  v6 = a3[6];
  v86 = 0;
  v87 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v87 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v86 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v84 = *(int64x2_t **)a2;
    v85 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "furthest point sampling not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v80, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v84, (Espresso::base_kernel::validate_for_engine_warning_t *)&v80);
    v14 = v83;
    if (v83)
    {
      v15 = (unint64_t *)&v83->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v65 = (void **)v82;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
    v65 = (void **)v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (v78 < 0)
      operator delete(__p[0]);
    v17 = v85;
    if (v85)
    {
      v18 = (unint64_t *)&v85->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = 0;
  }
  else
  {
    v22 = v86;
    v21 = v87;
    v75 = v86;
    v76 = v87;
    if (v87)
    {
      v23 = (unint64_t *)&v87->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *a3;
    v26 = *(_QWORD *)(*a3 + 32);
    v27 = *(_OWORD *)(*a3 + 16);
    v70[0] = *(_OWORD *)*a3;
    v70[1] = v27;
    v71 = v26;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v72, *(const void **)(v25 + 40), *(_QWORD *)(v25 + 48), (uint64_t)(*(_QWORD *)(v25 + 48) - *(_QWORD *)(v25 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, v22, (const Espresso::layer_shape *)v70, 1);
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
    }
    if (v21)
    {
      v28 = (unint64_t *)&v21->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v31 = v86;
    v30 = v87;
    v63 = v86;
    v64 = v87;
    if (v87)
    {
      v32 = (unint64_t *)&v87->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = a3[3];
    v35 = *(_QWORD *)(v34 + 32);
    v36 = *(_OWORD *)(v34 + 16);
    v58[0] = *(_OWORD *)v34;
    v58[1] = v36;
    v59 = v35;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v60, *(const void **)(v34 + 40), *(_QWORD *)(v34 + 48), (uint64_t)(*(_QWORD *)(v34 + 48) - *(_QWORD *)(v34 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v65, v31, (const Espresso::layer_shape *)v58, 1);
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v30)
    {
      v37 = (unint64_t *)&v30->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v39 = v9;
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v39))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v65, v39))
      {
        if ((v79 - 6) > 0xFFFFFFFC)
        {
          if (HIDWORD(__p[1]) == 1 && LODWORD(__p[0]) == 1 && LODWORD(__p[1]) == 1)
          {
            if (HIDWORD(__p[0]) == 3)
            {
              if ((v69 - 6) > 0xFFFFFFFC)
              {
                if (v67 == 1 && (_DWORD)v65 == 1 && v66 == 1)
                {
                  if (HIDWORD(v65) == 3)
                  {
                    if (v68 == *(_DWORD *)(a1 + 280))
                    {
                      if (v68 <= 0x4000)
                      {
                        v55 = 1;
                        std::string::basic_string[abi:ne180100]<0>(v56, "Success");
                      }
                      else
                      {
                        v55 = 0;
                        std::string::basic_string[abi:ne180100]<0>(v56, "Num centroids exceeds hardware bounds.");
                      }
                    }
                    else
                    {
                      v55 = 0;
                      std::string::basic_string[abi:ne180100]<0>(v56, "Output blob width dimension must be equivalent to num_centroids.");
                    }
                  }
                  else
                  {
                    v55 = 0;
                    std::string::basic_string[abi:ne180100]<0>(v56, "Output blob channel dimension must be 3 for furthest point sampling.");
                  }
                }
                else
                {
                  v55 = 0;
                  std::string::basic_string[abi:ne180100]<0>(v56, "Output blob height, depth, and batch dimension must all be 1 for furthest point sampling");
                }
              }
              else
              {
                v55 = 0;
                std::string::basic_string[abi:ne180100]<0>(v56, "Output blob must be rank 3, 4, or 5 for furthest point sampling");
              }
            }
            else
            {
              v55 = 0;
              std::string::basic_string[abi:ne180100]<0>(v56, "Input blob channel dimension must be 3 for furthest point sampling.");
            }
          }
          else
          {
            v55 = 0;
            std::string::basic_string[abi:ne180100]<0>(v56, "Input blob height, depth, and batch dimension must all be 1 for furthest point sampling");
          }
        }
        else
        {
          v55 = 0;
          std::string::basic_string[abi:ne180100]<0>(v56, "Input blob must be rank 3, 4, or 5 for furthest point sampling");
        }
      }
      else
      {
        v55 = 0;
        std::string::basic_string[abi:ne180100]<0>(v56, "Output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      v55 = 0;
      std::string::basic_string[abi:ne180100]<0>(v56, "Input blob dimensions exceed ANE limit.");
    }

    v20 = v55 != 0;
    if (!v55)
    {
      v44 = *(std::__shared_weak_count **)(a2 + 8);
      v53 = *(int64x2_t **)a2;
      v54 = v44;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v80, (__int128 *)v56, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v53, (Espresso::base_kernel::validate_for_engine_warning_t *)&v80);
      v47 = v83;
      if (v83)
      {
        v48 = (unint64_t *)&v83->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v88 = (void **)v82;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v88);
      v88 = (void **)v81;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v88);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      v50 = v54;
      if (v54)
      {
        v51 = (unint64_t *)&v54->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    if (v57 < 0)
      operator delete(v56[0]);
  }

  v40 = v87;
  if (v87)
  {
    v41 = (unint64_t *)&v87->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v20;
}

void sub_1917A67DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  void *v49;
  uint64_t v50;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v50 - 88);
  _Unwind_Resume(a1);
}

void sub_1917A68E0()
{
  JUMPOUT(0x1917A68D0);
}

void Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::compile(Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  __CFString *v18;
  void *v19;
  int v20;
  const __CFString *v21;
  std::string *v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const char *v36;
  void *v37[2];
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  char v42;
  id v43;
  __CFString *v44;
  id v45;
  uint64_t v46;
  std::string *v47;
  _QWORD v48[4];
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void **v52;
  std::string *v53;
  std::string *v54;
  unint64_t v55;
  _QWORD *v56;

  v50 = 0;
  v51 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v51 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v50 = v7) == 0))
  {
    v36 = "Inconsistent state: null network";
    goto LABEL_49;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v36 = "Inconsistent state: blob_storage";
LABEL_49:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v36);
  }
  v8 = v7 + 136;
  v37[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v37[0], (__int128 **)v37);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v48[3] = *((_QWORD *)v9 + 5);
  v49 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v37[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v37);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v48[1] = *((_QWORD *)v13 + 5);
  v48[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (void *)objc_opt_new();
  v46 = 0;
  v47 = 0;
  v48[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v37, a3);
  v18 = v44;
  v44 = CFSTR("FurthestPointSampling");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, CFSTR("CentroidCount"));

  v20 = *((_DWORD *)this + 71);
  if (v20 == 1)
  {
    v21 = CFSTR("L1");
  }
  else
  {
    if (v20)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unknown furthest point sampling metric.");
    v21 = CFSTR("L2");
  }
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v21, CFSTR("DistanceMetric"));
  objc_storeStrong(&v45, v17);
  v22 = v47;
  if ((unint64_t)v47 >= v48[0])
  {
    v24 = 0x8E38E38E38E38E39 * (((uint64_t)v47 - v46) >> 4);
    if (v24 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = 0x1C71C71C71C71C72 * ((v48[0] - v46) >> 4);
    if (v25 <= v24 + 1)
      v25 = v24 + 1;
    if (0x8E38E38E38E38E39 * ((v48[0] - v46) >> 4) >= 0xE38E38E38E38E3)
      v26 = 0x1C71C71C71C71C7;
    else
      v26 = v25;
    v56 = v48;
    if (v26)
      v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v26);
    else
      v27 = 0;
    v52 = (void **)v26;
    v53 = (std::string *)(v26 + 144 * v24);
    v54 = v53;
    v55 = v26 + 144 * v27;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v53, (uint64_t)v37);
    v54 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v46, &v52);
    v23 = v47;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v52);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v47, (uint64_t)v37);
    v23 = v22 + 6;
  }
  v47 = v23;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 37) + 32))((char *)this + 296, a2, &v46);

  if (v42 < 0)
    operator delete(__p);
  v52 = (void **)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v52);
  v52 = (void **)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v52);
  if (v38 < 0)
    operator delete(v37[0]);
  v37[0] = &v46;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);

  if (v14)
  {
    v28 = (unint64_t *)&v14->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v30 = v49;
  if (v49)
  {
    v31 = (unint64_t *)&v49->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v51;
  if (v51)
  {
    v34 = (unint64_t *)&v51->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1917A6CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v28 - 88);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::compile(Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::compile((Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::~mix_furthest_point_sampling_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_stack_nd_kernel::~mix_stack_nd_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_stack_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::mix_stack_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  __int128 *v11;
  int v12;
  __int128 *v13;
  __int128 *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  __int128 **v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  __int128 *v79;
  __int128 *v80;
  unint64_t v81;
  __int128 v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void **v87;
  char v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  __int128 v95[2];

  *((_QWORD *)&v95[0] + 1) = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 48);
  v85 = 0;
  v86 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v86 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v85 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if ((Espresso::ANECompilerEngine::is_mix(v9, v10) & 1) != 0)
    goto LABEL_39;
  v11 = *(__int128 **)a3;
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    goto LABEL_39;
  v12 = *((_DWORD *)v11 + 5);
  if (v12 == -1)
  {
    if (*((_DWORD *)v11 + 4) != 1)
    {
LABEL_39:
      v37 = 0;
      goto LABEL_40;
    }
    v12 = 4;
  }
  else if (v12 > 4)
  {
    goto LABEL_39;
  }
  v61 = (__int128 *)(a3 + 64);
  Espresso::ANECompilerEngine::mix_stack_nd_kernel::decomposition_to_expand_dims_concat(&v82, *(_DWORD *)(a1 + 280), a1 + 8, v12, *(_DWORD *)(a3 + 64));
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v13 = *(__int128 **)a3;
  v14 = *(__int128 **)(a3 + 8);
  if (*(__int128 **)a3 == v14)
  {
    v36 = *(__int128 **)a3;
LABEL_47:
    v71 = 0;
    v72 = 0;
    v73 = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v71, v36, v13, ((char *)v13 - (char *)v36) >> 6);
    v74 = 0uLL;
    v75 = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v74, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 6);
    v42 = *(std::__shared_weak_count **)(a3 + 56);
    v76 = *(_QWORD *)(a3 + 48);
    v77 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(p_shared_owners);
      while (__stxr(v44 + 1, p_shared_owners));
    }
    v78 = *v61;
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)&v71, v79, v80, ((char *)v80 - (char *)v79) >> 6);
    (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 **))(*(_QWORD *)v83 + 64))(&v89, v83, &v79);
    std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)&v74);
    v74 = v89;
    v75 = v90;
    *(_QWORD *)&v90 = 0;
    v89 = 0uLL;
    *(_QWORD *)&v69 = &v89;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    v45 = v83;
    v46 = (std::__shared_weak_count *)a2[1];
    v62 = *a2;
    v63 = v46;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v37 = (*(uint64_t (**)(uint64_t, uint64_t *, __int128 ***))(*(_QWORD *)v45 + 200))(v45, &v62, &v71);
    v49 = v63;
    if (v63)
    {
      v50 = (unint64_t *)&v63->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v77;
    if (v77)
    {
      v53 = (unint64_t *)&v77->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    *(_QWORD *)&v89 = &v74;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    *(_QWORD *)&v89 = &v71;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  }
  else
  {
    while (1)
    {
      v71 = 0;
      v72 = 0;
      v73 = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v71, *(__int128 **)a3, *(__int128 **)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 6);
      v74 = 0uLL;
      v75 = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v74, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 6);
      v15 = *(std::__shared_weak_count **)(a3 + 56);
      v76 = *(_QWORD *)(a3 + 48);
      v77 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v78 = *v61;
      v18 = *v13;
      v19 = v13[1];
      v91 = *((_QWORD *)v13 + 4);
      v89 = v18;
      v90 = v19;
      v93 = 0;
      v94 = 0;
      v92 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v92, *((const void **)v13 + 5), *((_QWORD *)v13 + 6), (uint64_t)(*((_QWORD *)v13 + 6) - *((_QWORD *)v13 + 5)) >> 2);
      std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)&v71, &v89, v95, 1uLL);
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      v20 = v82;
      v21 = *v13;
      v22 = v13[1];
      v91 = *((_QWORD *)v13 + 4);
      v89 = v21;
      v90 = v22;
      v93 = 0;
      v94 = 0;
      v92 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v92, *((const void **)v13 + 5), *((_QWORD *)v13 + 6), (uint64_t)(*((_QWORD *)v13 + 6) - *((_QWORD *)v13 + 5)) >> 2);
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v87 = (void **)&v66;
      v88 = 0;
      v66 = (char *)operator new(0x40uLL);
      v67 = (uint64_t)v66;
      v68 = v66 + 64;
      v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v68, &v89, v95, (uint64_t)v66);
      (*(void (**)(__int128 *__return_ptr, uint64_t, char **))(*(_QWORD *)v20 + 64))(&v69, v20, &v66);
      std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)&v74);
      v74 = v69;
      v75 = v70;
      v70 = 0;
      v69 = 0uLL;
      v87 = (void **)&v69;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v87);
      v87 = (void **)&v66;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v87);
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      v23 = v80;
      if ((unint64_t)v80 >= v81)
      {
        v24 = (__int128 *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v79, (__int128 *)v74);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v79, (__int128 *)v74);
        v24 = v23 + 4;
      }
      v80 = v24;
      v25 = v82;
      v26 = (std::__shared_weak_count *)a2[1];
      v64 = *a2;
      v65 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = (*(uint64_t (**)(uint64_t, uint64_t *, __int128 ***))(*(_QWORD *)v25 + 200))(v25, &v64, &v71);
      v30 = v65;
      if (v65)
      {
        v31 = (unint64_t *)&v65->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v77;
      if (v77)
      {
        v34 = (unint64_t *)&v77->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      *(_QWORD *)&v89 = &v74;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      *(_QWORD *)&v89 = &v71;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      if ((v29 & 1) == 0)
        break;
      v13 += 4;
      if (v13 == v14)
      {
        v36 = *(__int128 **)a3;
        v13 = *(__int128 **)(a3 + 8);
        goto LABEL_47;
      }
    }
    v37 = 0;
  }
  v71 = &v79;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  v55 = v84;
  if (v84)
  {
    v56 = (unint64_t *)&v84->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
LABEL_40:

  v38 = v86;
  if (v86)
  {
    v39 = (unint64_t *)&v86->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return v37;
}

void sub_1917A747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39)
{
  void *v39;
  uint64_t v40;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((void **)&a24);
  a24 = &a34;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 208);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_stack_nd_kernel::compile(Espresso::ANECompilerEngine::mix_stack_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("stack_nd_kernel should have been transformed to expand_dims(general_concat(x))");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_stack_nd_kernel::compile(Espresso::ANECompilerEngine::mix_stack_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("stack_nd_kernel should have been transformed to expand_dims(general_concat(x))");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_stack_nd_kernel::~mix_stack_nd_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_stack_nd_kernel::decomposition_to_expand_dims_concat(_OWORD *a1, int a2, uint64_t a3, int a4, int a5)
{
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  void *__p[2];
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;

  v40 = a5;
  *a1 = 0u;
  a1[1] = 0u;
  v39 = 0;
  v38 = 0u;
  v7 = ((a4 + 1) & (a2 >> 31)) + a2;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = v7;
  Espresso::abstract_engine_factory::shared(&v27);
  v8 = v27;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  v23 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v8, a3, (uint64_t)__p, (uint64_t)&v30, &v23);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, &v29);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v26 < 0)
    operator delete(__p[0]);
  v12 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v23 = v7;
  v24 = 1;
  Espresso::abstract_engine_factory::shared(&v27);
  v15 = v27;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
  v22 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, a3, (uint64_t)__p, (uint64_t)&v23, &v22);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 1), &v29);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v26 < 0)
    operator delete(__p[0]);
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1917A7858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_space_to_depth_kernel::~mix_space_to_depth_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::ANECompilerEngine::mix_space_to_depth_kernel::is_valid_for_engine(uint64_t a1, __int128 *a2, Espresso::ANECompilerEngine *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  _BOOL8 is_valid_for_engine;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  const Espresso::net *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  const Espresso::net *v25;
  unint64_t *v26;
  unint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  Espresso::ANECompilerEngine *v34;
  int *v35;
  int v36;
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  std::string v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  int64x2_t *v56;
  std::__shared_weak_count *v57;
  char v58[8];
  void *v59[2];
  char v60;
  char v61[8];
  std::__shared_weak_count *v62;
  _OWORD v63[2];
  uint64_t v64;
  void *__p;
  void *v66;
  uint64_t v67;
  const Espresso::base_kernel::validate_for_engine_args_t *v68;
  std::__shared_weak_count *v69;
  _DWORD v70[8];
  _OWORD v71[2];
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  const Espresso::base_kernel::validate_for_engine_args_t *v76;
  std::__shared_weak_count *v77;
  _DWORD v78[7];
  int v79;
  __int128 v80;
  const Espresso::base_kernel::validate_for_engine_args_t *v81;
  std::__shared_weak_count *v82;
  void **v83;

  v6 = (_OWORD *)*((_QWORD *)a3 + 6);
  v81 = 0;
  v82 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v82 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v6 + 9);
    v81 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v80 = *a2;
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::space_to_depth_kernel::is_valid_for_engine(a1, (uint64_t)&v80, a3);
    v12 = v51;
    if (!v51)
      goto LABEL_62;
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    goto LABEL_60;
  }
  v16 = v81;
  v15 = v82;
  v76 = v81;
  v77 = v82;
  if (v82)
  {
    v17 = (unint64_t *)&v82->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)a3;
  v20 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v21 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v71[0] = *(_OWORD *)*(_QWORD *)a3;
  v71[1] = v21;
  v72 = v20;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v73, *(const void **)(v19 + 40), *(_QWORD *)(v19 + 48), (uint64_t)(*(_QWORD *)(v19 + 48) - *(_QWORD *)(v19 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v78, v16, (const Espresso::layer_shape *)v71, 1);
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v25 = v81;
  v24 = v82;
  v68 = v81;
  v69 = v82;
  if (v82)
  {
    v26 = (unint64_t *)&v82->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (_OWORD *)*((_QWORD *)a3 + 3);
  v29 = *((_QWORD *)v28 + 4);
  v30 = v28[1];
  v63[0] = *v28;
  v63[1] = v30;
  v64 = v29;
  __p = 0;
  v66 = 0;
  v67 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v28 + 5), *((_QWORD *)v28 + 6), (uint64_t)(*((_QWORD *)v28 + 6) - *((_QWORD *)v28 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v70, v25, (const Espresso::layer_shape *)v63, 1);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v33 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v81, 0);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v61, (NSString *)(a1 + 296), v9);
  v34 = v9;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v78, v34))
  {
    v58[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v59, "Input blob dimensions exceed ANE limit.");
    goto LABEL_54;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v70, v34))
  {
    v58[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v59, "Output blob dimensions exceed ANE limit.");
    goto LABEL_54;
  }
  v35 = (int *)(a1 + 280);
  if (!*(_QWORD *)(a1 + 284))
  {
    if (!v79)
    {
      v58[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v59, "NCDHW layout is not supported for SpaceToDepth");
      goto LABEL_54;
    }
    v36 = *v35;
    if ((*v35 & 1) != 0 && v36 % 3)
    {
      v58[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v59, "SpaceToDepth only supports block sizes that are multiples of 2 or 3");
      goto LABEL_54;
    }
    if (v78[4] % v36 || v78[3] % v36)
    {
      v58[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v59, "SpaceToDepth only supports input width and height that are divisible by the block size");
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 284) != 1)
  {
    Espresso::ANECompilerEngine::space_to_depth_kernel::pixel_shuffle_or_unshuffle_supported((uint64_t)v58, (uint64_t)v61, v33, v34, (uint64_t)v78, v70, v35);
    if (!v58[0])
      goto LABEL_54;
    if (v60 < 0)
      operator delete(v59[0]);
    goto LABEL_52;
  }
  if (v79)
  {
    if ((*v35 & 1) != 0 && *v35 % 3)
    {
      v58[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v59, "DepthToSpace only supports block sizes that are multiples of 2 or 3");
      goto LABEL_54;
    }
LABEL_52:
    v58[0] = 1;
    std::string::basic_string[abi:ne180100]<0>(v59, "Success");
    goto LABEL_54;
  }
  v58[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v59, "NCDHW layout is not supported for DepthToSpace");
LABEL_54:

  is_valid_for_engine = v58[0] != 0;
  if (!v58[0])
  {
    v42 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v56 = *(int64x2_t **)a2;
    v57 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v52, (__int128 *)v59, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v56, (Espresso::base_kernel::validate_for_engine_warning_t *)&v52);
    v45 = v55;
    if (v55)
    {
      v46 = (unint64_t *)&v55->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v83 = (void **)&v54;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    v83 = (void **)&v53;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    v48 = v57;
    if (v57)
    {
      v49 = (unint64_t *)&v57->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  if (v60 < 0)
    operator delete(v59[0]);
  v12 = v62;
  if (v62)
  {
    v37 = (unint64_t *)&v62->__shared_owners_;
    do
      v14 = __ldaxr(v37);
    while (__stlxr(v14 - 1, v37));
LABEL_60:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_62:

  v38 = v82;
  if (v82)
  {
    v39 = (unint64_t *)&v82->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return is_valid_for_engine;
}

void sub_1917A7EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;
  void *v45;
  uint64_t v46;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 88);
  _Unwind_Resume(a1);
}

void sub_1917A7F9C()
{
  JUMPOUT(0x1917A7F8CLL);
}

void Espresso::ANECompilerEngine::mix_space_to_depth_kernel::compile(Espresso::ANECompilerEngine::mix_space_to_depth_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  std::string *v21;
  __CFString *v22;
  void *v23;
  void *v24;
  std::string *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  const char *v39;
  void *v40[2];
  char v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  char v45;
  id v46;
  __CFString *v47;
  id v48[2];
  uint64_t v49;
  std::string *v50;
  _QWORD v51[4];
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void **v55;
  std::string *v56;
  std::string *v57;
  unint64_t v58;
  _QWORD *v59;

  v53 = 0;
  v54 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v54 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v53 = v7) == 0))
  {
    v39 = "Inconsistent state: null network";
    goto LABEL_61;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v39 = "Inconsistent state: blob_storage";
LABEL_61:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v39);
  }
  v8 = v7 + 136;
  v40[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v40[0], (__int128 **)v40);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v51[3] = *((_QWORD *)v9 + 5);
  v52 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v40[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v40);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v51[1] = *((_QWORD *)v13 + 5);
  v51[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (void *)objc_opt_new();
  v49 = 0;
  v50 = 0;
  v51[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v40, a3);
  if (*(_QWORD *)((char *)this + 284))
  {
    if (*((_DWORD *)this + 72) || *((_DWORD *)this + 71) != 1)
    {
      Espresso::ANECompilerEngine::space_to_depth_kernel::compile(this, a2, a3);
      goto LABEL_39;
    }
    v22 = v47;
    v47 = CFSTR("ChannelToSpace");

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v23, CFSTR("FactorX"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v24, CFSTR("FactorY"));

    objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E2DEDBF8, CFSTR("FactorZ"));
    objc_storeStrong(v48, v17);
    v21 = v50;
    if ((unint64_t)v50 < v51[0])
      goto LABEL_17;
    v26 = 0x8E38E38E38E38E39 * (((uint64_t)v50 - v49) >> 4);
    if (v26 + 1 <= 0x1C71C71C71C71C7)
    {
      v29 = 0x1C71C71C71C71C72 * ((v51[0] - v49) >> 4);
      if (v29 <= v26 + 1)
        v29 = v26 + 1;
      if (0x8E38E38E38E38E39 * ((v51[0] - v49) >> 4) >= 0xE38E38E38E38E3)
        v28 = 0x1C71C71C71C71C7;
      else
        v28 = v29;
      v59 = v51;
      if (!v28)
      {
        v30 = 0;
        goto LABEL_37;
      }
      goto LABEL_34;
    }
LABEL_62:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  v18 = v47;
  v47 = CFSTR("SpaceToChannel");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, CFSTR("FactorX"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v20, CFSTR("FactorY"));

  objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E2DEDBF8, CFSTR("FactorZ"));
  objc_storeStrong(v48, v17);
  v21 = v50;
  if ((unint64_t)v50 >= v51[0])
  {
    v26 = 0x8E38E38E38E38E39 * (((uint64_t)v50 - v49) >> 4);
    if (v26 + 1 <= 0x1C71C71C71C71C7)
    {
      v27 = 0x1C71C71C71C71C72 * ((v51[0] - v49) >> 4);
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if (0x8E38E38E38E38E39 * ((v51[0] - v49) >> 4) >= 0xE38E38E38E38E3)
        v28 = 0x1C71C71C71C71C7;
      else
        v28 = v27;
      v59 = v51;
      if (!v28)
      {
        v30 = 0;
        goto LABEL_37;
      }
LABEL_34:
      v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v28);
LABEL_37:
      v55 = (void **)v28;
      v56 = (std::string *)(v28 + 144 * v26);
      v57 = v56;
      v58 = v28 + 144 * v30;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v56, (uint64_t)v40);
      v57 += 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v49, &v55);
      v25 = v50;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v55);
      goto LABEL_38;
    }
    goto LABEL_62;
  }
LABEL_17:
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v50, (uint64_t)v40);
  v25 = v21 + 6;
LABEL_38:
  v50 = v25;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 37) + 32))((char *)this + 296, a2, &v49);
LABEL_39:

  if (v45 < 0)
    operator delete(__p);
  v55 = (void **)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v55);
  v55 = (void **)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v55);
  if (v41 < 0)
    operator delete(v40[0]);
  v40[0] = &v49;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);

  if (v14)
  {
    v31 = (unint64_t *)&v14->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v33 = v52;
  if (v52)
  {
    v34 = (unint64_t *)&v52->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v54;
  if (v54)
  {
    v37 = (unint64_t *)&v54->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1917A850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v28 - 104);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 120);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_space_to_depth_kernel::compile(Espresso::ANECompilerEngine::mix_space_to_depth_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_space_to_depth_kernel::compile((Espresso::ANECompilerEngine::mix_space_to_depth_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_space_to_depth_kernel::~mix_space_to_depth_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::~mix_sequence_repeat_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2, __int128 **a3)
{
  __int128 *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  __int128 *v11;
  int v12;
  __int128 *v13;
  __int128 *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  void **v69[3];
  _QWORD v70[4];
  std::__shared_weak_count *v71;
  __int128 v72;
  uint64_t v73[3];
  __int128 v74;
  uint64_t v75;
  __int128 *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void **v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  __int128 v91;

  *((_QWORD *)&v91 + 1) = *MEMORY[0x1E0C80C00];
  v6 = a3[6];
  v82 = 0;
  v83 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v83 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *((_QWORD *)v6 + 9);
    v82 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if ((Espresso::ANECompilerEngine::is_mix(v9, v10) & 1) != 0 || (v11 = *a3, (char *)a3[1] - (char *)*a3 != 64))
  {
    v36 = 0;
    goto LABEL_37;
  }
  v12 = *((_DWORD *)v11 + 5);
  if (v12 == -1)
  {
    if (*((_DWORD *)v11 + 4) == 1)
      v12 = 4;
    else
      v12 = 5;
  }
  v13 = (__int128 *)(a3 + 8);
  Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::decomposition_to_expand_dims_tile(&v79, a1, a1 + 8, v12, *((_DWORD *)a3 + 16));
  if (!(_QWORD)v79)
  {
    v44 = v80;
    v45 = (std::__shared_weak_count *)a2[1];
    v63 = *a2;
    v64 = v45;
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(p_shared_owners);
      while (__stxr(v47 + 1, p_shared_owners));
    }
    v36 = (*(uint64_t (**)(uint64_t, uint64_t *, __int128 **))(*(_QWORD *)v44 + 200))(v44, &v63, a3);
    v48 = v64;
    if (v64)
    {
      v49 = (unint64_t *)&v64->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    goto LABEL_64;
  }
  memset(v73, 0, sizeof(v73));
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v73, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
  v74 = 0uLL;
  v75 = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v74, a3[3], a3[4], ((char *)a3[4] - (char *)a3[3]) >> 6);
  v14 = a3[7];
  v76 = a3[6];
  v77 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)v14 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v78 = *v13;
  memset(v69, 0, sizeof(v69));
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v69, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
  memset(v70, 0, 24);
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v70, a3[3], a3[4], ((char *)a3[4] - (char *)a3[3]) >> 6);
  v17 = a3[7];
  v70[3] = a3[6];
  v71 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)v17 + 1;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v72 = *v13;
  v20 = *a3;
  v21 = *((_QWORD *)*a3 + 4);
  v22 = (*a3)[1];
  v85 = **a3;
  v86 = v22;
  v87 = v21;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, *((const void **)v20 + 5), *((_QWORD *)v20 + 6), (uint64_t)(*((_QWORD *)v20 + 6) - *((_QWORD *)v20 + 5)) >> 2);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>(v73, &v85, &v91, 1uLL);
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t *))(*(_QWORD *)v79 + 64))(&v85, v79, v73);
  std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)&v74);
  v74 = v85;
  v75 = v86;
  *(_QWORD *)&v86 = 0;
  v84 = (void **)&v85;
  v85 = 0uLL;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v84);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)v69, (__int128 *)v74, *((__int128 **)&v74 + 1), (uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 6);
  v23 = v79;
  v24 = (std::__shared_weak_count *)a2[1];
  v67 = *a2;
  v68 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v23 + 200))(v23, &v67, v73);
  v28 = v27;
  v29 = v68;
  if (!v68)
    goto LABEL_27;
  v30 = (unint64_t *)&v68->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if ((v28 & 1) != 0)
      goto LABEL_28;
  }
  else
  {
LABEL_27:
    if ((v27 & 1) != 0)
    {
LABEL_28:
      v32 = v80;
      v33 = (std::__shared_weak_count *)a2[1];
      v65 = *a2;
      v66 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = (*(uint64_t (**)(uint64_t, uint64_t *, void ***))(*(_QWORD *)v32 + 200))(v32, &v65, v69);
      v37 = v66;
      if (v66)
      {
        v38 = (unint64_t *)&v66->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      goto LABEL_53;
    }
  }
  v36 = 0;
LABEL_53:
  v51 = v71;
  if (v71)
  {
    v52 = (unint64_t *)&v71->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  *(_QWORD *)&v85 = v70;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  *(_QWORD *)&v85 = v69;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  v54 = v77;
  if (v77)
  {
    v55 = (unint64_t *)&v77->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v69[0] = (void **)&v74;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v69);
  v69[0] = (void **)v73;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v69);
LABEL_64:
  v57 = v81;
  if (v81)
  {
    v58 = (unint64_t *)&v81->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
LABEL_37:

  v40 = v83;
  if (v83)
  {
    v41 = (unint64_t *)&v83->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v36;
}

void sub_1917A8BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  uint64_t v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(&a16);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 184);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 200);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 168);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::compile(Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("sequence_repeat_kernel should have been transformed to tile(expand_dims(x))");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::compile(Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("sequence_repeat_kernel should have been transformed to tile(expand_dims(x))");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::~mix_sequence_repeat_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::decomposition_to_expand_dims_tile(_OWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  void *v26[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  __int128 v31;
  int v32;
  void *__p[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _DWORD v37[32];
  uint64_t v38;
  int v39;

  v39 = a5;
  *a1 = 0u;
  a1[1] = 0u;
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  if (a4 > 4)
  {
    v26[0] = 0;
    v26[1] = 0;
  }
  else
  {
    if (5 - a4 <= 1)
      v9 = 1;
    else
      v9 = 5 - a4;
    bzero(&v37[2], 4 * v9);
    v37[1] = v9;
    Espresso::abstract_engine_factory::shared(&v35);
    v10 = v35;
    std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
    LODWORD(v31) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v37, (int *)&v31);
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v26);
  v11 = (std::__shared_weak_count *)v26[1];
  if (v26[1])
  {
    v12 = (unint64_t *)((char *)v26[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (a4 <= 4)
  {
    if (v34 < 0)
      operator delete(__p[0]);
    v14 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  *(_QWORD *)&v17 = 0x100000001;
  *((_QWORD *)&v17 + 1) = 0x100000001;
  v31 = v17;
  v32 = *(_DWORD *)(a2 + 280);
  Espresso::abstract_engine_factory::shared(&v28);
  v18 = v28;
  std::string::basic_string[abi:ne180100]<0>(v26, "tile");
  v25 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v18, a3, (uint64_t)v26, (uint64_t)&v31, &v25);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 1), &v30);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v27 < 0)
    operator delete(v26[0]);
  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1917A8FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_expand_dims_kernel::~mix_expand_dims_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 52);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 52);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_expand_dims_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 416), a3, a4, a5);
}

void Espresso::ANECompilerEngine::mix_expand_dims_kernel::compile(Espresso::ANECompilerEngine::mix_expand_dims_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  const void *v16;
  unint64_t *v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const char *v37;
  const char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char v42[8];
  void *v43;
  char v44;
  __int128 v45;
  int v46;
  unsigned int v47;
  _BYTE v48[24];
  const void *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  char **v55;
  char v56;
  void *v57[2];
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  _QWORD v62[6];
  char v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v53 = 0;
  v54 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v54 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v53 = v7) == 0))
  {
    v37 = "Inconsistent state: null network";
    goto LABEL_57;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v37 = "Inconsistent state: blob_storage";
LABEL_57:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v37);
  }
  v8 = v7 + 136;
  v57[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v57[0], (__int128 **)v57);
  v11 = *((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v51 = v11;
  v52 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v57[0] = a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v57);
  v16 = (const void *)*((_QWORD *)v14 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v49 = v16;
  v50 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  Espresso::abstract_blob_container::shape((char *)v57, v11);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)v57, 0);
  if (__p)
  {
    v62[0] = __p;
    operator delete(__p);
  }
  v47 = 0;
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = v19[47];
    do
      v23 = __ldaxr(v20);
    while (__stlxr(v23 - 1, v20));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v22 = v19[47];
  }
  v47 = v22;
  Espresso::abstract_blob_container::shape((char *)v57, v51);
  v24 = v59;
  if (v58 == 1)
    v25 = 4;
  else
    v25 = 5;
  if (v59 == -1)
    v24 = v25;
  v26 = v24;
  if (__p)
  {
    v62[0] = __p;
    operator delete(__p);
  }
  v45 = xmmword_191A761E0;
  v46 = 4;
  Espresso::ANECompilerEngine::mix_expand_dims_kernel::gen_transpose_params_for_expand_dims((uint64_t)v42, (uint64_t)this, (uint64_t)v48, &v47, v26, (uint64_t)&v45);
  if (!v42[0])
  {
    if (v44 >= 0)
      v38 = (const char *)&v43;
    else
      v38 = (const char *)v43;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v38);
  }
  LODWORD(v27) = *((_DWORD *)this + 71);
  if ((int)v27 <= 1)
    v27 = 1;
  else
    v27 = v27;
  if (v27 + v26 >= 6)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("expand_dims kernel: Requested expand_dims would generate a tensor with >5 dims.");
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)v57, (unsigned int *)&v45, (uint64_t)a3, 1);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v55 = &v39;
  v56 = 0;
  v39 = (char *)operator new(0x90uLL);
  v40 = (uint64_t)v39;
  v41 = v39 + 144;
  v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v41, (uint64_t)v57, (uint64_t)&v67, (uint64_t)v39);

  if (v63 < 0)
    operator delete((void *)v62[4]);
  v55 = (char **)v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55 = (char **)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (SHIBYTE(v59) < 0)
    operator delete(v57[0]);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, char **))(*((_QWORD *)this + 52) + 32))((char *)this + 416, a2, &v39);
  v57[0] = &v39;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v57);
  if (v44 < 0)
    operator delete(v43);
  v28 = v50;
  if (v50)
  {
    v29 = (unint64_t *)&v50->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v52;
  if (v52)
  {
    v32 = (unint64_t *)&v52->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v54;
  if (v54)
  {
    v35 = (unint64_t *)&v54->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1917A94A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_expand_dims_kernel::compile(Espresso::ANECompilerEngine::mix_expand_dims_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_expand_dims_kernel::compile((Espresso::ANECompilerEngine::mix_expand_dims_kernel *)((char *)this - 416), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_expand_dims_kernel::~mix_expand_dims_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 52);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 52);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_squeeze_kernel::~mix_squeeze_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 53);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 53);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_squeeze_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 424), a3, a4, a5);
}

void Espresso::ANECompilerEngine::mix_squeeze_kernel::compile(Espresso::ANECompilerEngine::mix_squeeze_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  const void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  const char *v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char v39[8];
  void *v40;
  char v41;
  __int128 v42;
  int v43;
  unsigned int v44;
  _BYTE v45[24];
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  char **v52;
  char v53;
  void *v54[2];
  int v55;
  int v56;
  uint64_t v57;
  void *__p;
  _QWORD v59[6];
  char v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v50 = 0;
  v51 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v51 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v50 = v7) == 0))
  {
    v34 = "Inconsistent state: null network";
    goto LABEL_54;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v34 = "Inconsistent state: blob_storage";
LABEL_54:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v34);
  }
  v8 = v7 + 136;
  v54[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v54[0], (__int128 **)v54);
  v11 = (const void *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v48 = (uint64_t)v11;
  v49 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v54[0] = a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v54);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v46 = *((_QWORD *)v14 + 5);
  v47 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  Espresso::abstract_blob_container::shape((char *)v54, (uint64_t)v11);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v45, (const Espresso::layer_shape *)v54, 0);
  if (__p)
  {
    v59[0] = __p;
    operator delete(__p);
  }
  v44 = 0;
  if (v10)
  {
    v19 = (unint64_t *)&v10->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = v18[47];
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 - 1, v19));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v21 = v18[47];
  }
  v44 = v21;
  Espresso::abstract_blob_container::shape((char *)v54, v48);
  if (v55 == 1)
    v23 = 4;
  else
    v23 = 5;
  if (v56 == -1)
    v24 = v23;
  else
    v24 = v56;
  if (__p)
  {
    v59[0] = __p;
    operator delete(__p);
  }
  v42 = xmmword_191A761E0;
  v43 = 4;
  Espresso::ANECompilerEngine::mix_squeeze_kernel::gen_transpose_params_for_squeeze((uint64_t)v39, (uint64_t)this, (uint64_t)v45, &v44, v24, (uint64_t)&v42);
  if (!v39[0])
  {
    if (v41 >= 0)
      v35 = (const char *)&v40;
    else
      v35 = (const char *)v40;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v35);
  }
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)v54, (unsigned int *)&v42, (uint64_t)a3, 1);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v52 = &v36;
  v53 = 0;
  v36 = (char *)operator new(0x90uLL);
  v37 = (uint64_t)v36;
  v38 = v36 + 144;
  v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v38, (uint64_t)v54, (uint64_t)&v64, (uint64_t)v36);

  if (v60 < 0)
    operator delete((void *)v59[4]);
  v52 = (char **)v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  v52 = (char **)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (SHIBYTE(v56) < 0)
    operator delete(v54[0]);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, char **))(*((_QWORD *)this + 53) + 32))((char *)this + 424, a2, &v36);
  v54[0] = &v36;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  if (v41 < 0)
    operator delete(v40);
  v25 = v47;
  if (v47)
  {
    v26 = (unint64_t *)&v47->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v49;
  if (v49)
  {
    v29 = (unint64_t *)&v49->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v51;
  if (v51)
  {
    v32 = (unint64_t *)&v51->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1917A9A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_squeeze_kernel::compile(Espresso::ANECompilerEngine::mix_squeeze_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_squeeze_kernel::compile((Espresso::ANECompilerEngine::mix_squeeze_kernel *)((char *)this - 424), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_squeeze_kernel::~mix_squeeze_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 53);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 53);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_crop_kernel::~mix_crop_kernel(Espresso::ANECompilerEngine::mix_crop_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D73D20;
  v2 = (void **)((char *)this + 296);
  *((_QWORD *)this + 37) = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D73D20;
  v2 = (void **)((char *)this + 296);
  *((_QWORD *)this + 37) = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::mix_crop_kernel::is_valid_for_engine(_DWORD *a1, __int128 *a2, _OWORD **a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  uint64_t is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  const Espresso::net *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  _OWORD *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  const Espresso::net *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  int v42;
  int v44;
  int v45;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v67;
  int64x2_t *v68;
  std::__shared_weak_count *v69;
  int64x2_t *v70;
  std::__shared_weak_count *v71;
  char v72[8];
  void *v73[2];
  char v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  _OWORD v80[2];
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  const Espresso::net *v85;
  std::__shared_weak_count *v86;
  void **v87[4];
  _OWORD v88[2];
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  const Espresso::net *v93;
  std::__shared_weak_count *v94;
  __int128 __p;
  int v96;
  char v97;
  std::string v98;
  _BYTE v99[24];
  _BYTE v100[32];
  std::__shared_weak_count *v101;
  int64x2_t *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;

  v6 = a3[6];
  v105 = 0;
  v106 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v106 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *((_QWORD *)v6 + 9);
    v105 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v104 = *a2;
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::crop_kernel::is_valid_for_engine(a1, (uint64_t)&v104, a3);
    if (v67)
    {
      p_shared_owners = (unint64_t *)&v67->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    goto LABEL_99;
  }
  v14 = a3[6];
  if (*(_QWORD *)(*v14 + 224 * (_QWORD)a3[9] + 144) - *(_QWORD *)(*v14 + 224 * (_QWORD)a3[9] + 136) != 24)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v102 = *(int64x2_t **)a2;
    v103 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ANE crop kernel doesn't support more than 1 input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v98, &__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(&v102, (Espresso::base_kernel::validate_for_engine_warning_t *)&v98);
    v21 = v101;
    if (v101)
    {
      v22 = (unint64_t *)&v101->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v87[0] = (void **)v100;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v87);
    v87[0] = (void **)v99;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v87);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (v97 < 0)
      operator delete((void *)__p);
    v24 = v103;
    if (v103)
    {
      v25 = (unint64_t *)&v103->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    goto LABEL_98;
  }
  v93 = 0;
  v94 = 0;
  v15 = (std::__shared_weak_count *)v14[10];
  if (v15)
  {
    v16 = std::__shared_weak_count::lock(v15);
    v94 = v16;
    if (v16)
    {
      v17 = (const Espresso::net *)v14[9];
      v93 = v17;
      goto LABEL_34;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
LABEL_34:
  v27 = *a3;
  v28 = *((_QWORD *)*a3 + 4);
  v29 = (*a3)[1];
  v88[0] = **a3;
  v88[1] = v29;
  v89 = v28;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v90, *((const void **)v27 + 5), *((_QWORD *)v27 + 6), (uint64_t)(*((_QWORD *)v27 + 6) - *((_QWORD *)v27 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&__p, v17, (const Espresso::layer_shape *)v88, 1);
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (v16)
  {
    v30 = (unint64_t *)&v16->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v32 = a3[6];
  v85 = 0;
  v86 = 0;
  v33 = (std::__shared_weak_count *)*((_QWORD *)v32 + 10);
  if (v33)
  {
    v34 = std::__shared_weak_count::lock(v33);
    v86 = v34;
    if (v34)
    {
      v35 = (const Espresso::net *)*((_QWORD *)v32 + 9);
      v85 = v35;
      goto LABEL_46;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = 0;
LABEL_46:
  v36 = a3[3];
  v37 = *((_QWORD *)v36 + 4);
  v38 = v36[1];
  v80[0] = *v36;
  v80[1] = v38;
  v81 = v37;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v82, *((const void **)v36 + 5), *((_QWORD *)v36 + 6), (uint64_t)(*((_QWORD *)v36 + 6) - *((_QWORD *)v36 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v87, v35, (const Espresso::layer_shape *)v80, 1);
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v41 = a1[70];
  v42 = a1[71];
  if (v41 > 0 || v42 >= 1)
  {
    v78 = 1;
    v79 = 1;
    v75 = 0;
    v76 = v41;
    v77 = v96 - v42;
    Espresso::ANECompilerEngine::mix_slice_kernel::supported_by_hw((uint64_t)v72, v9, (uint64_t)&__p, (uint64_t)v87, &v75, (NSString *)*((unsigned int *)a3 + 16));
    if (!v72[0])
    {
      v47 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      v70 = *(int64x2_t **)a2;
      v71 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v98, (__int128 *)v73, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v70, (Espresso::base_kernel::validate_for_engine_warning_t *)&v98);
      v50 = v101;
      if (v101)
      {
        v51 = (unint64_t *)&v101->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v107 = (void **)v100;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v107);
      v107 = (void **)v99;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v107);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      v53 = v71;
      if (!v71)
        goto LABEL_96;
      v54 = (unint64_t *)&v71->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      goto LABEL_94;
    }
    if (v74 < 0)
      operator delete(v73[0]);
  }
  v44 = a1[72];
  v45 = a1[73];
  is_valid_for_engine = 1;
  if (v44 <= 0 && v45 < 1)
    goto LABEL_99;
  v78 = 1;
  v79 = 1;
  v75 = 1;
  v76 = v44;
  v77 = HIDWORD(__p) - v45;
  Espresso::ANECompilerEngine::mix_slice_kernel::supported_by_hw((uint64_t)v72, v9, (uint64_t)&__p, (uint64_t)v87, &v75, (NSString *)*((unsigned int *)a3 + 16));
  if (!v72[0])
  {
    v56 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v68 = *(int64x2_t **)a2;
    v69 = v56;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v98, (__int128 *)v73, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v68, (Espresso::base_kernel::validate_for_engine_warning_t *)&v98);
    v59 = v101;
    if (v101)
    {
      v60 = (unint64_t *)&v101->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v107 = (void **)v100;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v107);
    v107 = (void **)v99;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v107);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    v53 = v69;
    if (!v69)
      goto LABEL_96;
    v62 = (unint64_t *)&v69->__shared_owners_;
    do
      v55 = __ldaxr(v62);
    while (__stlxr(v55 - 1, v62));
LABEL_94:
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
LABEL_96:
    if (v74 < 0)
      operator delete(v73[0]);
LABEL_98:
    is_valid_for_engine = 0;
    goto LABEL_99;
  }
  if (v74 < 0)
    operator delete(v73[0]);
LABEL_99:

  v63 = v106;
  if (v106)
  {
    v64 = (unint64_t *)&v106->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  return is_valid_for_engine;
}

void sub_1917AA254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;
  uint64_t v56;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v56 - 240));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a22 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 88);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_crop_kernel::compile(Espresso::ANECompilerEngine::mix_crop_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  Espresso::ANECompilerEngine *v8;
  NSString *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;

  v12 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (v6 && (v12 = std::__shared_weak_count::lock(v6)) != 0)
    v7 = *((_QWORD *)a2 + 1);
  else
    v7 = 0;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  v8 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (!Espresso::ANECompilerEngine::is_mix(v8, v9))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("h13 crop kernel should have been mapped to slice");
  Espresso::ANECompilerEngine::crop_kernel::compile(this, a2, a3);

  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1917AA438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_crop_kernel::compile(Espresso::ANECompilerEngine::mix_crop_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_crop_kernel::compile((Espresso::ANECompilerEngine::mix_crop_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_crop_kernel::~mix_crop_kernel(Espresso::ANECompilerEngine::mix_crop_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_crop_kernel *)((char *)this - 296);
  *((_QWORD *)this - 37) = &off_1E2D73D20;
  *(_QWORD *)this = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_crop_kernel *)((char *)this - 296);
  *((_QWORD *)this - 37) = &off_1E2D73D20;
  *(_QWORD *)this = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_flatten_kernel::~mix_flatten_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::mix_flatten_kernel::is_valid_for_engine(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  uint64_t is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  const Espresso::net *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  const Espresso::net *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  Espresso::ANECompilerEngine *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  int64x2_t *v51;
  std::__shared_weak_count *v52;
  char v53;
  void *v54[2];
  char v55;
  _OWORD v56[2];
  uint64_t v57;
  void *__p;
  void *v59;
  uint64_t v60;
  const Espresso::net *v61;
  std::__shared_weak_count *v62;
  _DWORD v63[8];
  _OWORD v64[2];
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  const Espresso::net *v69;
  std::__shared_weak_count *v70;
  _DWORD v71[8];
  __int128 v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void **v75;

  v6 = a3[6];
  v73 = 0;
  v74 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v74 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v73 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v72 = *a2;
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::flatten_kernel::is_valid_for_engine(a1, (int64x2_t **)&v72, a3);
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    goto LABEL_49;
  }
  v14 = a3[6];
  v69 = 0;
  v70 = 0;
  v15 = *(std::__shared_weak_count **)(v14 + 80);
  if (v15)
  {
    v16 = std::__shared_weak_count::lock(v15);
    v70 = v16;
    if (v16)
    {
      v17 = *(const Espresso::net **)(v14 + 72);
      v69 = v17;
      goto LABEL_16;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
LABEL_16:
  v18 = a3[3];
  v19 = *(_QWORD *)(v18 + 32);
  v20 = *(_OWORD *)(v18 + 16);
  v64[0] = *(_OWORD *)v18;
  v64[1] = v20;
  v65 = v19;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, *(const void **)(v18 + 40), *(_QWORD *)(v18 + 48), (uint64_t)(*(_QWORD *)(v18 + 48) - *(_QWORD *)(v18 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v71, v17, (const Espresso::layer_shape *)v64, 1);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v23 = a3[6];
  v61 = 0;
  v62 = 0;
  v24 = *(std::__shared_weak_count **)(v23 + 80);
  if (!v24)
  {
    v25 = 0;
    goto LABEL_27;
  }
  v25 = std::__shared_weak_count::lock(v24);
  v62 = v25;
  if (!v25)
  {
LABEL_27:
    v26 = 0;
    goto LABEL_28;
  }
  v26 = *(const Espresso::net **)(v23 + 72);
  v61 = v26;
LABEL_28:
  v27 = *a3;
  v28 = *(_QWORD *)(*a3 + 32);
  v29 = *(_OWORD *)(*a3 + 16);
  v56[0] = *(_OWORD *)*a3;
  v56[1] = v29;
  v57 = v28;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v27 + 40), *(_QWORD *)(v27 + 48), (uint64_t)(*(_QWORD *)(v27 + 48) - *(_QWORD *)(v27 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v63, v26, (const Espresso::layer_shape *)v56, 1);
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v30 = (unint64_t *)&v25->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v32 = v9;
  if (*(_DWORD *)(a1 + 284))
  {
    v53 = 0;
    std::string::basic_string[abi:ne180100]<0>(v54, "Only support flatten into innermost dimension");
  }
  else if (v63[7] == -1)
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v63, v32)
      && Espresso::ANECompilerEngine::blob_shape_ane_compatible(v71, v32))
    {
      if (*(_DWORD *)(a1 + 280) >= 3u)
      {
        v53 = 0;
        std::string::basic_string[abi:ne180100]<0>(v54, "Unsupported flatten mode");
      }
      else
      {
        v53 = 1;
        std::string::basic_string[abi:ne180100]<0>(v54, "Success");
      }
    }
    else
    {
      v53 = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    v53 = 0;
    std::string::basic_string[abi:ne180100]<0>(v54, "Only 4D tensor is supported");
  }

  is_valid_for_engine = v53 != 0;
  if (!v53)
  {
    v37 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v51 = *(int64x2_t **)a2;
    v52 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v47, (__int128 *)v54, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&v47);
    v40 = v50;
    if (v50)
    {
      v41 = (unint64_t *)&v50->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v75 = (void **)&v49;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v75);
    v75 = (void **)&v48;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v75);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v43 = v52;
    if (v52)
    {
      v44 = (unint64_t *)&v52->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  if (v55 < 0)
    operator delete(v54[0]);
LABEL_49:

  v33 = v74;
  if (v74)
  {
    v34 = (unint64_t *)&v74->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return is_valid_for_engine;
}

void sub_1917AAA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;
  void *v43;
  uint64_t v44;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 88);
  _Unwind_Resume(a1);
}

void sub_1917AAAC8()
{
  JUMPOUT(0x1917AAAB8);
}

void Espresso::ANECompilerEngine::mix_flatten_kernel::compile(std::__shared_weak_count **this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v3;
  uint64_t v6;
  char *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  float *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSString *v17;
  int32x4_t *v18;
  int32x4_t *v19;
  unint64_t *v20;
  unint64_t v21;
  int32x4_t *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  __CFString *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id *v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __CFString *v39;
  int v40;
  const __CFString *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::string *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  float v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t shared_owners_low;
  uint64_t v70;
  int shared_owners;
  std::__shared_weak_count *v72;
  uint64_t v73;
  int *v74;
  _WORD *v75;
  int v76;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  int *v90;
  _WORD *v91;
  int v92;
  int v94;
  Espresso::ANECompilerEngine::compiler::build_state_t *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  id v104;
  int v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t weights_file_index;
  void *v111;
  void *v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  void *v123;
  void *v124;
  std::string *v125;
  std::string *v126;
  uint64_t v127;
  char v128;
  std::string::size_type size;
  std::string::size_type v130;
  uint64_t v131;
  unsigned __int8 *v132;
  std::string *v133;
  const std::string::value_type *data;
  __int128 v135;
  __CFString *v136;
  std::string *v137;
  std::string *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  const char *v173;
  int *v174;
  int v175;
  uint64_t i;
  float v177;
  int v178;
  _WORD *v179;
  int v180;
  std::runtime_error *exception;
  int *v183;
  uint64_t j;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  Espresso *v190;
  const char *v191;
  float v192;
  NSObject *v194;
  double v195;
  uint64_t v196;
  _WORD *v197;
  int v198;
  int32x4_t v200;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v201;
  int32x4_t v202;
  Espresso::ANECompilerEngine *v203;
  Espresso::ANECompilerEngine::compiler *v204;
  std::__shared_weak_count *v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::string *v211;
  _QWORD v212[2];
  std::__shared_weak_count *v213;
  const void *v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  __int128 v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  __int128 v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  uint64_t v224[2];
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unsigned int v231;
  unsigned int v232;
  std::__shared_weak_count *v233;
  std::__shared_weak_count *v234;
  void *v235[2];
  char v236;
  _BYTE v237[24];
  _BYTE v238[32];
  void *__p;
  char v240;
  id v241;
  __CFString *v242;
  id v243[2];
  _BYTE buf[24];
  __int128 v245;
  std::vector<std::string> v246;
  void *v247;
  char v248;
  id v249;
  __CFString *v250;
  id v251;
  std::string __str;
  __int128 v253;
  uint64_t v254;

  v254 = *MEMORY[0x1E0C80C00];
  v216 = 0;
  v217 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v3 || (v217 = std::__shared_weak_count::lock(v3)) == 0 || (v6 = *((_QWORD *)a2 + 1), (v216 = v6) == 0))
  {
    v173 = "Inconsistent state: null network";
    goto LABEL_239;
  }
  if (!*(_QWORD *)(v6 + 576))
  {
    v173 = "Inconsistent state: blob_storage";
LABEL_239:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v173);
  }
  v235[0] = a3[6];
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)v235[0], (__int128 **)v235);
  v8 = (const void *)*((_QWORD *)v7 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  v214 = v8;
  v215 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v204 = a2;
  v235[0] = a3;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)a3, (__int128 **)v235);
  v13 = (float *)*((_QWORD *)v12 + 5);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v212[1] = v13;
  v213 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v6 + 472);
  v203 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v203, v17))
  {
    Espresso::ANECompilerEngine::flatten_kernel::compile((Espresso::ANECompilerEngine::flatten_kernel *)this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
    goto LABEL_221;
  }
  v210 = 0;
  v211 = 0;
  v212[0] = 0;
  if (v8
  {
    v19 = v18;
    v209 = v9;
    if (v9)
    {
      v20 = (unint64_t *)&v9->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v19 = 0;
    v209 = 0;
  }
  v208 = v14;
  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = v22[11].u32[0];
  v202 = v22[10];
  v201 = (Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3;
  if (*((_DWORD *)this + 70) == 2)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v235, a3);
    v26 = (void *)objc_opt_new();
    v27 = v242;
    v242 = CFSTR("Reshape");

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v25);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v28, CFSTR("ReshapedWidth"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v202.u32[3]);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v29, CFSTR("ReshapedHeight"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v202.u32[2]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v30, CFSTR("ReshapedDepth"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v202.u32[1]);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v31, CFSTR("ReshapedChannel"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v202.u32[0]);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v32, CFSTR("ReshapedBatch"));

    objc_storeStrong(v243, v26);
    v42 = 0x8E38E38E38E38E39 * (((uint64_t)v211 - v210) >> 4);
    if (v42 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v43 = 0x1C71C71C71C71C72 * ((v212[0] - v210) >> 4);
    if (v43 <= v42 + 1)
      v43 = v42 + 1;
    if (0x8E38E38E38E38E39 * ((v212[0] - v210) >> 4) >= 0xE38E38E38E38E3)
      v44 = 0x1C71C71C71C71C7;
    else
      v44 = v43;
    *((_QWORD *)&v245 + 1) = v212;
    if (v44)
    {
LABEL_38:
      v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v44);
      goto LABEL_50;
    }
    v45 = 0;
  }
  else
  {
    v33 = a3;
    v35 = v22[11].i32[2];
    v34 = v22[11].i32[3];
    v200 = v19[10];
    v36 = v19[11].i32[0];
    v37 = v19[11].i32[2];
    v38 = v19[11].i32[3];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v235, v33);
    v26 = (void *)objc_opt_new();
    v39 = v242;
    v242 = CFSTR("Flatten");

    v40 = *((_DWORD *)this + 70);
    if (!v40
      || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v200, v202)), 0xFuLL))) & 1) != 0
      && v36 == (_DWORD)v25
      && v38 == v34
      && v37 == v35)
    {
      v41 = CFSTR("NCHW");
    }
    else
    {
      if (v40 != 1)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported flatten mode");
      v41 = CFSTR("NHWC");
    }
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v41, CFSTR("Mode"), *(_OWORD *)&v200);
    objc_storeStrong(v243, v26);
    v46 = 0x8E38E38E38E38E39 * (((uint64_t)v211 - v210) >> 4);
    if (v46 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v47 = 0x1C71C71C71C71C72 * ((v212[0] - v210) >> 4);
    if (v47 <= v46 + 1)
      v47 = v46 + 1;
    if (0x8E38E38E38E38E39 * ((v212[0] - v210) >> 4) >= 0xE38E38E38E38E3)
      v44 = 0x1C71C71C71C71C7;
    else
      v44 = v47;
    *((_QWORD *)&v245 + 1) = v212;
    if (v44)
      goto LABEL_38;
    v45 = 0;
  }
LABEL_50:
  *(_QWORD *)buf = v44;
  *(_QWORD *)&buf[8] = v44 + 16 * (((uint64_t)v211 - v210) >> 4);
  *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
  *(_QWORD *)&v245 = v44 + 144 * v45;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v235);
  *(_QWORD *)&buf[16] += 144;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v210, buf);
  v48 = v211;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  v211 = v48;

  if (v240 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v238;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v237;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v236 < 0)
    operator delete(v235[0]);
  v207 = v217;
  if (v217)
  {
    v49 = (unint64_t *)&v217->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v206 = v14;
  if (v14)
  {
    v51 = (unint64_t *)&v14->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v235);
  v242 = 0;
  v243[0] = 0;
  v243[1] = (id)0x100000000;
  v53 = this[44];
  v54 = this[45];
  v233 = v53;
  v234 = v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  if (!v53 || *(_BYTE *)(((uint64_t (*)(char *))this[36][4].__shared_owners_)((char *)this + 288) + 40))
    goto LABEL_191;
  v57 = v13[28];
  v225 = v53;
  v226 = v54;
  if (v54)
  {
    v58 = (unint64_t *)&v54->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = this[47];
  v224[0] = (uint64_t)this[46];
  v224[1] = (uint64_t)v60;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v225, v224, (uint64_t)&v227, v57);
  if (v60)
  {
    v63 = (unint64_t *)&v60->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v65 = v226;
  if (v226)
  {
    v66 = (unint64_t *)&v226->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v233;
  shared_owners_low = LODWORD(v233->__shared_owners_);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v222, 2 * shared_owners_low, 1, 1, 1);
  v70 = (int)shared_owners_low;
  v221 = 0uLL;
  shared_owners = shared_owners_low;
  v72 = this[46];
  if (v72)
    shared_owners = v72->__shared_owners_;
  if (!*((_BYTE *)v204 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * shared_owners_low);
    v174 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    v175 = shared_owners_low - 1;
    if ((int)shared_owners_low >= 1)
    {
      for (i = 0; i != shared_owners_low; ++i)
      {
        v177 = *(float *)(v68->__shared_weak_owners_ + i * 4);
        *(float *)&v178 = ldexp(1.0, -v231) * v177;
        v174[i] = v178;
      }
    }
    if ((_DWORD)shared_owners_low)
    {
      v179 = *(_WORD **)(v222 + 16);
      do
      {
        v180 = *v174++;
        _S0 = v180;
        __asm { FCVT            H0, S0 }
        *v179++ = _S0;
        --v70;
      }
      while (v70);
    }
    v219 = 0;
    v220 = 0;
    if (this[46])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * shared_owners);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v219, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * shared_owners);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v221, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v183 = *(int **)(v219 + 16);
      if (shared_owners >= 1)
      {
        for (j = 0; j != shared_owners; ++j)
        {
          if (v175 >= (int)j)
            v185 = j;
          else
            v185 = v175;
          *(float *)&v186 = *(float *)(*(_QWORD *)(v229 + 16) + 4 * j) * *(float *)(*(_QWORD *)(v227 + 16) + 4 * v185);
          v183[j] = v186;
          v187 = v232;
          v188 = v231;
          *(float *)&v189 = ldexp(1.0, v232 - v231) * *(float *)&v186;
          v183[j] = v189;
          v192 = ldexp(1.0, v188 - v187) * *(float *)&v189;
          if (v192 < -127.0 || v192 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v190, v191);
            v194 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
            {
              v195 = *(float *)&v183[j];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v192;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v232;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v231;
              LOWORD(v245) = 2048;
              *(double *)((char *)&v245 + 2) = v195;
              _os_log_error_impl(&dword_190DAF000, v194, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (shared_owners)
      {
        v196 = shared_owners;
        v197 = *(_WORD **)(v221 + 16);
        do
        {
          v198 = *v183++;
          _S0 = v198;
          __asm { FCVT            H0, S0 }
          *v197++ = _S0;
          --v196;
        }
        while (v196);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(exception);
  }
  v73 = v232;
  if ((_DWORD)shared_owners_low)
  {
    v74 = *(int **)(v227 + 16);
    v75 = *(_WORD **)(v222 + 16);
    do
    {
      v76 = *v74++;
      _S0 = v76;
      __asm { FCVT            H0, S0 }
      *v75++ = _S0;
      --v70;
    }
    while (v70);
  }
  if (v72)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * shared_owners, 1, 1, 1);
    v82 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
    v221 = v82;
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v87 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (shared_owners)
    {
      v89 = shared_owners;
      v90 = *(int **)(v229 + 16);
      v91 = *(_WORD **)(v221 + 16);
      do
      {
        v92 = *v90++;
        _S0 = v92;
        __asm { FCVT            H0, S0 }
        *v91++ = _S0;
        --v89;
      }
      while (v89);
    }
  }
  v94 = *((unsigned __int8 *)v204 + 552);
  v95 = (Espresso::ANECompilerEngine::compiler *)((char *)v204 + 128);
  v96 = v222;
  v97 = v223;
  v219 = v222;
  v220 = v223;
  if (v223)
  {
    v98 = (unint64_t *)&v223->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  v100 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v95, *(const unsigned __int8 **)(v96 + 16), *(int *)(v96 + 8));
  if (v97)
  {
    v101 = (unint64_t *)&v97->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v103 = (void *)objc_opt_new();
  if (*((_BYTE *)v204 + 121))
  {
    v104 = *(id *)(v210 + 128);

    v105 = v94;
    v103 = v104;
  }
  else
  {
    v105 = v94;
  }
  v106 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", shared_owners_low);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v106, "setObject:forKeyedSubscript:", v107, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v100);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v106, "setObject:forKeyedSubscript:", v108, CFSTR("ScaleOffset"));

  v109 = (void *)MEMORY[0x1E0CB37E8];
  if (v105)
    weights_file_index = 0;
  else
  objc_msgSend(v109, "numberWithUnsignedLong:", weights_file_index);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v106, "setObject:forKeyedSubscript:", v111, CFSTR("ScaleIndex"));

  objc_msgSend(v106, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v231);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v103, "setObject:forKeyedSubscript:", v112, CFSTR("ScaleShift"));

  if (this[46])
  {
    v113 = v221;
    v218 = v221;
    if (*((_QWORD *)&v221 + 1))
    {
      v114 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
    }
    v116 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v95, *(const unsigned __int8 **)(v113 + 16), *(int *)(v113 + 8));
    if (*((_QWORD *)&v113 + 1))
    {
      v117 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", LODWORD(this[46]->__shared_owners_));
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "setObject:forKeyedSubscript:", v119, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v116);
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "setObject:forKeyedSubscript:", v120, CFSTR("BiasOffset"));

    v121 = (void *)MEMORY[0x1E0CB37E8];
    if (v105)
      v122 = 0;
    else
    objc_msgSend(v121, "numberWithUnsignedLong:", v122);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "setObject:forKeyedSubscript:", v123, CFSTR("BiasIndex"));

    objc_msgSend(v106, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v73);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v103, "setObject:forKeyedSubscript:", v124, CFSTR("BiasShift"));

  }
  objc_msgSend(v103, "setObject:forKeyedSubscript:", v106, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)v201);
  v125 = v211;
  if (v211 != (std::string *)v210)
  {
    v126 = v211 - 6;
    v127 = HIBYTE(v211[-6].__r_.__value_.__r.__words[2]);
    v128 = v127;
    size = v211[-6].__r_.__value_.__l.__size_;
    if ((v127 & 0x80u) == 0)
      v130 = HIBYTE(v211[-6].__r_.__value_.__r.__words[2]);
    else
      v130 = v211[-6].__r_.__value_.__l.__size_;
    v131 = buf[23];
    if (buf[23] < 0)
      v131 = *(_QWORD *)&buf[8];
    if (v130 == v131)
    {
      if (buf[23] >= 0)
        v132 = buf;
      else
        v132 = *(unsigned __int8 **)buf;
      if ((char)v127 < 0)
      {
        data = (const std::string::value_type *)v126->__r_.__value_.__r.__words[0];
        if (memcmp(v126->__r_.__value_.__l.__data_, v132, v211[-6].__r_.__value_.__l.__size_))
          goto LABEL_149;
      }
      else if ((_BYTE)v127)
      {
        v133 = v211 - 6;
        while (v133->__r_.__value_.__s.__data_[0] == *v132)
        {
          v133 = (std::string *)((char *)v133 + 1);
          ++v132;
          if (!--v127)
            goto LABEL_145;
        }
        goto LABEL_146;
      }
LABEL_145:
      std::string::append(v125 - 6, "__@pre_scale_bias");
      v128 = HIBYTE(v125[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_146:
    if ((v128 & 0x80) == 0)
    {
      v135 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v125[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v135;
      goto LABEL_150;
    }
    data = v125[-6].__r_.__value_.__l.__data_;
    size = v125[-6].__r_.__value_.__l.__size_;
LABEL_149:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_150:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v246, &__str, &v253, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v136 = v250;
  v250 = CFSTR("GOC");

  objc_storeStrong(&v251, v103);
  if (!*((_BYTE *)v204 + 121))
  {
    v137 = v211;
    if ((unint64_t)v211 >= v212[0])
    {
      v139 = 0x8E38E38E38E38E39 * (((uint64_t)v211 - v210) >> 4);
      if (v139 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v140 = 0x1C71C71C71C71C72 * ((v212[0] - v210) >> 4);
      if (v140 <= v139 + 1)
        v140 = v139 + 1;
      if (0x8E38E38E38E38E39 * ((v212[0] - v210) >> 4) >= 0xE38E38E38E38E3)
        v141 = 0x1C71C71C71C71C7;
      else
        v141 = v140;
      *((_QWORD *)&v253 + 1) = v212;
      if (v141)
        v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v141);
      else
        v142 = 0;
      __str.__r_.__value_.__r.__words[0] = v141;
      __str.__r_.__value_.__l.__size_ = v141 + 144 * v139;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v253 = v141 + 144 * v142;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v210, &__str);
      v138 = v211;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v211, (uint64_t)buf);
      v138 = v137 + 6;
    }
    v211 = v138;
  }

  if (v248 < 0)
    operator delete(v247);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v246;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  v143 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (*((_QWORD *)&v221 + 1))
  {
    v144 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v223;
  if (v223)
  {
    v147 = (unint64_t *)&v223->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v230;
  if (v230)
  {
    v150 = (unint64_t *)&v230->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v228;
  if (v228)
  {
    v153 = (unint64_t *)&v228->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v54 = v234;
LABEL_191:
  if (v54)
  {
    v155 = (unint64_t *)&v54->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }

  if (v240 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v238;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v237;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v236 < 0)
    operator delete(v235[0]);
  if (v206)
  {
    v157 = (unint64_t *)&v206->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if (v207)
  {
    v159 = (unint64_t *)&v207->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  ((void (*)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))this[36][1].__shared_owners_)((char *)this + 288, v204, &v210);
  if (v208)
  {
    v161 = (unint64_t *)&v208->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  if (v209)
  {
    v163 = (unint64_t *)&v209->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v235[0] = &v210;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v235);
  v14 = v213;
LABEL_221:

  if (v14)
  {
    v165 = (unint64_t *)&v14->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v167 = v215;
  if (v215)
  {
    v168 = (unint64_t *)&v215->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = v217;
  if (v217)
  {
    v171 = (unint64_t *)&v217->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
}

void sub_1917ABF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void **a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  a26 = (void **)&a28;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a26);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_flatten_kernel::compile(std::__shared_weak_count **this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_flatten_kernel::compile(this - 36, a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_flatten_kernel::~mix_flatten_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

__n128 Espresso::ANECompilerEngine::mix_conv3d_kernel::mix_conv3d_kernel(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v5;
  char v6;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v5 + 408) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 560) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_BYTE *)(v5 + 480) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(_BYTE *)(v5 + 552) = 0;
  *(_DWORD *)(v5 + 592) = 1065353216;
  *(_WORD *)(v5 + 600) = 0;
  *(_BYTE *)(v5 + 602) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 604) = _D1;
  *(_BYTE *)(v5 + 612) = 0;
  *(_OWORD *)(v5 + 616) = 0u;
  *(_BYTE *)(v5 + 632) = v6;
  *(_QWORD *)v5 = &off_1E2D77330;
  *(_QWORD *)(v5 + 424) = &unk_1E2D77518;
  *(_OWORD *)(v5 + 640) = 0u;
  v12 = *a3;
  v13 = a3[2];
  *(_OWORD *)(v5 + 320) = a3[1];
  *(_OWORD *)(v5 + 336) = v13;
  *(_OWORD *)(v5 + 304) = v12;
  result = (__n128)a3[3];
  v15 = a3[4];
  v16 = a3[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(v5 + 368) = v15;
  *(_OWORD *)(v5 + 384) = v16;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

__n128 Espresso::ANECompilerEngine::mix_reshape_like_kernel::mix_reshape_like_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 309) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_BYTE *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_BYTE *)(v5 + 456) = 0;
  *(_DWORD *)(v5 + 496) = 1065353216;
  *(_WORD *)(v5 + 504) = 0;
  *(_BYTE *)(v5 + 506) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 508) = _D1;
  *(_BYTE *)(v5 + 516) = 0;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_BYTE *)(v5 + 536) = v6;
  *(_QWORD *)v5 = &off_1E2D7BC48;
  *(_QWORD *)(v5 + 328) = &unk_1E2D7BDA8;
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v5 + 309) = *(_OWORD *)(a3 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v13;
  return result;
}

double Espresso::ANECompilerEngine::mix_softmax_nd_kernel::mix_softmax_nd_kernel(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_BYTE *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D7A430;
  *(_QWORD *)(v5 + 288) = &unk_1E2D7A590;
  *(_DWORD *)(v5 + 280) = *a3;
  return result;
}

uint64_t Espresso::ANECompilerEngine::mix_tile_kernel::mix_tile_kernel(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _OWORD *v19;
  __int128 v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v7 = a1 + 280;
  v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  *(_OWORD *)v7 = v9;
  *(_DWORD *)(v8 + 296) = 1;
  v10 = *(_BYTE *)(*a2 + 123);
  LOBYTE(v9) = 0;
  BYTE4(v9) = 0;
  BYTE8(v9) = 0;
  BYTE12(v9) = 0;
  *(_OWORD *)(v8 + 440) = v9;
  *(_OWORD *)(v8 + 456) = v9;
  *(_OWORD *)(v8 + 312) = v9;
  *(_OWORD *)(v8 + 328) = v9;
  *(_OWORD *)(v8 + 344) = v9;
  *(_BYTE *)(v8 + 360) = 0;
  *(_OWORD *)(v8 + 368) = v9;
  *(_OWORD *)(v8 + 384) = v9;
  *(_OWORD *)(v8 + 400) = v9;
  *(_OWORD *)(v8 + 416) = v9;
  *(_BYTE *)(v8 + 432) = 0;
  *(_DWORD *)(v8 + 472) = 1065353216;
  *(_WORD *)(v8 + 480) = 0;
  *(_BYTE *)(v8 + 482) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  *(_QWORD *)(v7 + 204) = _D8;
  *(_BYTE *)(v8 + 492) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_BYTE *)(v8 + 512) = v10;
  *(_QWORD *)v8 = &off_1E2D75E80;
  *(_QWORD *)(v8 + 304) = &unk_1E2D75FE0;
  v16 = (_OWORD *)(v8 + 520);
  *(_QWORD *)(v8 + 520) = 0;
  *(_QWORD *)(v8 + 528) = 0;
  v17 = *a4;
  *(_DWORD *)(v8 + 296) = *((_DWORD *)a4 + 4);
  *(_OWORD *)v7 = v17;
  v18 = operator new(0x220uLL);
  v18[1] = 0;
  v18[2] = 0;
  *v18 = &off_1E2DB9D78;
  v19 = (_OWORD *)Espresso::base_kernel::base_kernel((uint64_t)(v18 + 3), a2);
  *(_QWORD *)&v20 = 0x100000001;
  *((_QWORD *)&v20 + 1) = 0x100000001;
  *((_OWORD *)v18 + 19) = v20;
  *((_DWORD *)v18 + 80) = 1;
  v21 = *(_BYTE *)(*a2 + 123);
  LOBYTE(v20) = 0;
  BYTE4(v20) = 0;
  BYTE8(v20) = 0;
  BYTE12(v20) = 0;
  *((_OWORD *)v18 + 29) = v20;
  *((_OWORD *)v18 + 30) = v20;
  *((_BYTE *)v18 + 384) = 0;
  *((_OWORD *)v18 + 22) = v20;
  *((_OWORD *)v18 + 23) = v20;
  *((_OWORD *)v18 + 21) = v20;
  *((_BYTE *)v18 + 456) = 0;
  v19[25] = v20;
  v19[26] = v20;
  v19[23] = v20;
  v19[24] = v20;
  *((_DWORD *)v18 + 124) = 1065353216;
  *((_WORD *)v18 + 252) = 0;
  *((_BYTE *)v18 + 506) = 0;
  *(_QWORD *)((char *)v18 + 508) = _D8;
  *((_BYTE *)v18 + 516) = 0;
  v18[65] = 0;
  v18[66] = 0;
  *((_BYTE *)v18 + 536) = v21;
  v18[3] = &off_1E2D74360;
  v18[41] = &unk_1E2D744C0;
  *((_OWORD *)v18 + 19) = *a4;
  *((_DWORD *)v18 + 80) = *((_DWORD *)a4 + 4);
  *(_QWORD *)&v20 = v19;
  *((_QWORD *)&v20 + 1) = v18;
  v22 = *(std::__shared_weak_count **)(a1 + 528);
  *v16 = v20;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return a1;
}

void sub_1917AC63C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v5;

  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v1 + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tile_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::mix_instancenorm_1d_kernel(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v5;
  char v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0x358637BD00000000;
  *(_QWORD *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_BYTE *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_BYTE *)(v5 + 464) = 0;
  *(_DWORD *)(v5 + 504) = 1065353216;
  *(_WORD *)(v5 + 512) = 0;
  *(_BYTE *)(v5 + 514) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 516) = _D1;
  *(_BYTE *)(v5 + 524) = 0;
  *(_OWORD *)(v5 + 528) = 0u;
  *(_BYTE *)(v5 + 544) = v6;
  *(_QWORD *)v5 = &off_1E2D7C918;
  *(_QWORD *)(v5 + 336) = &unk_1E2D7CA78;
  result = *a3;
  *(_DWORD *)(v5 + 296) = a3[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

double Espresso::ANECompilerEngine::mix_l2_normalize_kernel::mix_l2_normalize_kernel(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  char v6;
  double result;
  uint64_t v12;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0x3358637BDLL;
  *(_DWORD *)(v5 + 288) = 2;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_BYTE *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_BYTE *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(_BYTE *)(v5 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 476) = result;
  *(_BYTE *)(v5 + 484) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_QWORD *)(v5 + 496) = 0;
  *(_BYTE *)(v5 + 504) = v6;
  *(_QWORD *)v5 = &off_1E2D7BA48;
  *(_QWORD *)(v5 + 296) = &unk_1E2D7BBA8;
  v12 = *a3;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(v5 + 280) = v12;
  return result;
}

__n128 Espresso::ANECompilerEngine::mix_deconv3d_kernel::mix_deconv3d_kernel(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v5;
  char v6;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v5 + 408) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 560) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_BYTE *)(v5 + 480) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(_BYTE *)(v5 + 552) = 0;
  *(_DWORD *)(v5 + 592) = 1065353216;
  *(_WORD *)(v5 + 600) = 0;
  *(_BYTE *)(v5 + 602) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 604) = _D1;
  *(_BYTE *)(v5 + 612) = 0;
  *(_OWORD *)(v5 + 616) = 0u;
  *(_BYTE *)(v5 + 632) = v6;
  *(_QWORD *)v5 = &off_1E2D78CF8;
  *(_QWORD *)(v5 + 424) = &unk_1E2D78EE0;
  *(_OWORD *)(v5 + 640) = 0u;
  v12 = *a3;
  v13 = a3[2];
  *(_OWORD *)(v5 + 320) = a3[1];
  *(_OWORD *)(v5 + 336) = v13;
  *(_OWORD *)(v5 + 304) = v12;
  result = (__n128)a3[3];
  v15 = a3[4];
  v16 = a3[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(v5 + 368) = v15;
  *(_OWORD *)(v5 + 384) = v16;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

double Espresso::ANECompilerEngine::mix_batch_matmul_kernel::mix_batch_matmul_kernel(uint64_t a1, _QWORD *a2, __int16 *a3)
{
  uint64_t v5;
  char v6;
  double result;
  __int16 v12;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_WORD *)(v5 + 280) = 1;
  *(_BYTE *)(v5 + 282) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_BYTE *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D7B848;
  *(_QWORD *)(v5 + 288) = &unk_1E2D7B9A8;
  v12 = *a3;
  *(_BYTE *)(v5 + 282) = *((_BYTE *)a3 + 2);
  *(_WORD *)(v5 + 280) = v12;
  return result;
}

double Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::mix_furthest_point_sampling_kernel(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  char v8;
  double result;

  v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v7 + 280) = 2;
  v8 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_BYTE *)(v7 + 352) = 0;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(_BYTE *)(v7 + 424) = 0;
  *(_DWORD *)(v7 + 464) = 1065353216;
  *(_WORD *)(v7 + 472) = 0;
  *(_BYTE *)(v7 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v7 + 476) = result;
  *(_BYTE *)(v7 + 484) = 0;
  *(_QWORD *)(v7 + 488) = 0;
  *(_QWORD *)(v7 + 496) = 0;
  *(_BYTE *)(v7 + 504) = v8;
  *(_QWORD *)v7 = &off_1E2D7CD18;
  *(_QWORD *)(v7 + 296) = &unk_1E2D7CE78;
  *(_QWORD *)(v7 + 280) = a3;
  *(_DWORD *)(v7 + 288) = a4;
  return result;
}

double Espresso::ANECompilerEngine::mix_stack_nd_kernel::mix_stack_nd_kernel(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_BYTE *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D78F80;
  *(_QWORD *)(v5 + 288) = &unk_1E2D790E0;
  *(_DWORD *)(v5 + 280) = *a3;
  return result;
}

void ___ZN8Espresso17ANECompilerEngine19mix_stack_nd_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  unint64_t v21;
  size_t size;
  _BYTE *v23;
  std::string *v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  uint64_t **v38;
  char *v39;
  __int128 v40;
  const void *v41;
  uint64_t v42;
  std::string::size_type v43;
  uint64_t **v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  uint64_t **v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 *v69;
  int v70;
  uint64_t v71[2];
  std::string *v72;
  void **p_data;
  void **v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  std::string v79;
  char *v80;
  std::string *v81;
  unint64_t v82;
  std::string v83;
  std::string *v84;
  char v85;
  _BYTE v86[40];
  __int128 __p;
  __int128 v88;
  _BYTE v89[32];
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  std::string v94;
  uint64_t v95;
  std::string v96;
  uint64_t v97;
  std::string v98;
  __int128 v99;

  *(_QWORD *)&v99 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == *(_QWORD *)(a1 + 32))
  {
    v88 = 0u;
    __p = 0u;
    *(_DWORD *)v86 = a2[3].i32[2];
    memset(&v86[8], 0, 32);
    v4 = a2[2].u64[1];
    if (v4 >= a2[3].i64[0])
    {
      v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v86);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)v86);
      v5 = v4 + 72;
      a2[2].i64[1] = v4 + 72;
    }
    a2[2].i64[1] = v5;
    *(_QWORD *)v89 = (char *)&__p + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
    *(_QWORD *)v89 = &v86[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
    v6 = *(std::__shared_weak_count **)&v86[16];
    if (*(_QWORD *)&v86[16])
    {
      v7 = (unint64_t *)(*(_QWORD *)&v86[16] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)v89 = a2[3].i32[2];
    *(_QWORD *)v86 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 56, *(unint64_t *)v89, v89)[3];
    v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 184), *(_QWORD **)v86, (__int128 **)v86);
    v70 = *((_DWORD *)v10 + 19);
    if (v70 == -1)
    {
      if (*((_DWORD *)v10 + 18) == 1)
        v11 = 4;
      else
        v11 = 5;
      v70 = v11;
    }
    v12 = *(_QWORD *)(a1 + 40);
    v13 = a2[3].i32[2];
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 16 * v13);
    if (*(char *)(v14 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)(v14 + 16), *(_QWORD *)(v14 + 24));
      v12 = *(_QWORD *)(a1 + 40);
      v13 = a2[3].i32[2];
    }
    else
    {
      v83 = *(std::string *)(v14 + 16);
    }
    v80 = 0;
    v81 = 0;
    v82 = 0;
    *(_QWORD *)v86 = v13;
    v15 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12 + 96, v13, v86)[3];
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v16 = *v15;
      v79.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v16;
    }
    v17 = *(_QWORD *)(a1 + 40) + 56;
    v18 = a2[3].i32[2];
    *(_QWORD *)v86 = v18;
    v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, v86);
    v20 = (__int128 *)v19[3];
    v69 = (__int128 *)v19[4];
    if (v20 != v69)
    {
      v21 = 0;
      do
      {
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
        else
          size = v79.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)v86, size + 26);
        if (v86[23] >= 0)
          v23 = v86;
        else
          v23 = *(_BYTE **)v86;
        if (size)
        {
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v79;
          else
            v24 = (std::string *)v79.__r_.__value_.__r.__words[0];
          memmove(v23, v24, size);
        }
        strcpy(&v23[size], "__@expand_dims_for_bottom_");
        std::to_string((std::string *)v89, v21);
        if (v89[23] >= 0)
          v25 = v89;
        else
          v25 = *(const std::string::value_type **)v89;
        if (v89[23] >= 0)
          v26 = v89[23];
        else
          v26 = *(_QWORD *)&v89[8];
        v27 = std::string::append((std::string *)v86, v25, v26);
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if ((v89[23] & 0x80000000) != 0)
          operator delete(*(void **)v89);
        if ((v86[23] & 0x80000000) != 0)
          operator delete(*(void **)v86);
        Espresso::ANECompilerEngine::mix_stack_nd_kernel::decomposition_to_expand_dims_concat(&v76, *(_DWORD *)(a2->i64[0] + 280), a2->i64[0] + 8, v70, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12));
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
        v75 = v76;
        if (*((_QWORD *)&v76 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        std::string::basic_string[abi:ne180100]<0>(v86, "expand_dims");
        if (*((char *)v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
        }
        else
        {
          v32 = *v20;
          v96.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v32;
        }
        memset(v89, 0, 24);
        v72 = (std::string *)v89;
        LOBYTE(p_data) = 0;
        *(_QWORD *)v89 = operator new(0x18uLL);
        *(_QWORD *)&v89[8] = *(_QWORD *)v89;
        *(_QWORD *)&v89[16] = *(_QWORD *)v89 + 24;
        *(_QWORD *)&v89[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v89[16], (__int128 *)&v96, (__int128 *)&v97, *(std::string **)v89);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v94, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
        else
          v94 = v98;
        v72 = 0;
        p_data = 0;
        v74 = 0;
        v84 = (std::string *)&v72;
        v85 = 0;
        v72 = (std::string *)operator new(0x18uLL);
        p_data = (void **)&v72->__r_.__value_.__l.__data_;
        v74 = (void **)&v72[1].__r_.__value_.__l.__data_;
        p_data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v74, (__int128 *)&v94, (__int128 *)&v95, v72);
        Espresso::single_match_state<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::add_kernel(a2, (uint64_t *)&v75, (const std::string *)v86, &v98, (std::string **)v89, &v72);
        v84 = (std::string *)&v72;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        v72 = (std::string *)v89;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((v86[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v86);
          if (v29)
          {
LABEL_61:
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        else if (v29)
        {
          goto LABEL_61;
        }
        v35 = v81;
        if ((unint64_t)v81 >= v82)
        {
          v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v80, (uint64_t)&v98);
        }
        else
        {
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v81, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
          }
          else
          {
            v36 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
            v81->__r_.__value_.__r.__words[2] = v98.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
          }
          v37 = v35 + 1;
        }
        v81 = v37;
        v38 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
        *(_QWORD *)v89 = v20;
        v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, v20, (__int128 **)v89);
        v40 = *(_OWORD *)(v39 + 72);
        *(_OWORD *)v86 = *(_OWORD *)(v39 + 56);
        *(_OWORD *)&v86[16] = v40;
        v41 = (const void *)*((_QWORD *)v39 + 12);
        *(_QWORD *)&v86[32] = *((_QWORD *)v39 + 11);
        __p = 0uLL;
        *(_QWORD *)&v88 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v41, *((_QWORD *)v39 + 13), (uint64_t)(*((_QWORD *)v39 + 13) - (_QWORD)v41) >> 2);
        v42 = v76;
        *(_OWORD *)v89 = *(_OWORD *)v86;
        *(_OWORD *)&v89[16] = *(_OWORD *)&v86[16];
        v90 = *(_QWORD *)&v86[32];
        v92 = 0;
        v93 = 0;
        v91 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
        v72 = 0;
        p_data = 0;
        v74 = 0;
        v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
        v94.__r_.__value_.__s.__data_[8] = 0;
        v72 = (std::string *)operator new(0x40uLL);
        p_data = (void **)&v72->__r_.__value_.__l.__data_;
        v74 = (void **)&v72[2].__r_.__value_.__r.__words[2];
        p_data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v74, (__int128 *)v89, (__int128 *)&v94, (uint64_t)v72);
        (*(void (**)(std::string *__return_ptr, uint64_t, std::string **))(*(_QWORD *)v42 + 64))(&v96, v42, &v72);
        v43 = v96.__r_.__value_.__r.__words[0];
        v44 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
        v84 = &v98;
        v45 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, &v98, (__int128 **)&v84);
        v46 = *(_OWORD *)v43;
        v47 = *(_OWORD *)(v43 + 16);
        *((_QWORD *)v45 + 11) = *(_QWORD *)(v43 + 32);
        *(_OWORD *)(v45 + 72) = v47;
        *(_OWORD *)(v45 + 56) = v46;
        if (v45 + 56 != (char *)v43)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v45 + 96, *(char **)(v43 + 40), *(_QWORD *)(v43 + 48), (uint64_t)(*(_QWORD *)(v43 + 48) - *(_QWORD *)(v43 + 40)) >> 2);
        v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
        v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
        if (v91)
        {
          v92 = v91;
          operator delete(v91);
        }
        v48 = *(_QWORD *)(a1 + 40);
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v48 + 360), v20))
        {
          *(_QWORD *)v89 = v20;
          v49 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v48 + 352), v20, (uint64_t)&std::piecewise_construct, (__int128 **)v89);
          v50 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 352);
          *(_QWORD *)v89 = &v98;
          v51 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50, &v98, (uint64_t)&std::piecewise_construct, (__int128 **)v89);
          *(_OWORD *)(v51 + 56) = *(_OWORD *)(v49 + 56);
          if (v51 != v49)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v51 + 72, *((char **)v49 + 9), *((_QWORD *)v49 + 10), (uint64_t)(*((_QWORD *)v49 + 10) - *((_QWORD *)v49 + 9)) >> 2);
        }
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        v52 = v78;
        if (v78)
        {
          v53 = (unint64_t *)&v78->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
        if (*((_QWORD *)&v76 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        ++v21;
        v20 = (__int128 *)((char *)v20 + 24);
      }
      while (v20 != v69);
    }
    Espresso::ANECompilerEngine::mix_stack_nd_kernel::decomposition_to_expand_dims_concat(v86, *(_DWORD *)(a2->i64[0] + 280), a2->i64[0] + 8, v70, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12));
    v58 = *(std::__shared_weak_count **)&v86[24];
    v71[0] = *(_QWORD *)&v86[16];
    v71[1] = *(_QWORD *)&v86[24];
    if (*(_QWORD *)&v86[24])
    {
      v59 = (unint64_t *)(*(_QWORD *)&v86[24] + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    std::string::basic_string[abi:ne180100]<0>(v89, "general_concat");
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v98, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    else
      v98 = v79;
    v76 = 0uLL;
    v77 = 0;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    v96.__r_.__value_.__s.__data_[8] = 0;
    *(_QWORD *)&v76 = operator new(0x18uLL);
    *((_QWORD *)&v76 + 1) = v76;
    v77 = v76 + 24;
    *((_QWORD *)&v76 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v77, (__int128 *)&v98, &v99, (std::string *)v76);
    Espresso::single_match_state<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::add_kernel(a2, v71, (const std::string *)v89, &v83, (std::string **)&v80, (std::string **)&v76);
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if ((v89[23] & 0x80000000) != 0)
      operator delete(*(void **)v89);
    if (v58)
    {
      v61 = (unint64_t *)&v58->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v63 = *(std::__shared_weak_count **)&v86[24];
    if (*(_QWORD *)&v86[24])
    {
      v64 = (unint64_t *)(*(_QWORD *)&v86[24] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = *(std::__shared_weak_count **)&v86[8];
    if (*(_QWORD *)&v86[8])
    {
      v67 = (unint64_t *)(*(_QWORD *)&v86[8] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    *(_QWORD *)v86 = &v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v86);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
  }
}

void sub_1917AD4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  uint64_t v54;
  uint64_t v55;

  if (*(char *)(v55 - 233) < 0)
    operator delete(*(void **)(v55 - 256));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  if (a32 < 0)
    operator delete(__p);
  a45 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1917AD9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::mix_sequence_repeat_kernel(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 1;
  *(_DWORD *)(v5 + 280) = *a3;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_BYTE *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D7CB18;
  *(_QWORD *)(v5 + 288) = &unk_1E2D7CC78;
  *(_DWORD *)(v5 + 280) = *a3;
  return result;
}

void ___ZN8Espresso17ANECompilerEngine26mix_sequence_repeat_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  const std::string::value_type **v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  size_t v20;
  std::string *v21;
  const std::string::value_type *v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  uint64_t **v26;
  char *v27;
  __int128 v28;
  const void *v29;
  uint64_t v30;
  void **p_data;
  uint64_t **v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  uint64_t **v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65[2];
  uint64_t v66[2];
  std::string *v67;
  std::string *v68;
  void **v69;
  __int128 v70;
  std::string *v71;
  std::string *v72;
  void **v73;
  std::string v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  void ***v78;
  char v79;
  _BYTE v80[40];
  __int128 __p;
  __int128 v82;
  std::string v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  std::string v91;
  uint64_t v92;
  std::string v93;
  __int128 v94;

  *(_QWORD *)&v94 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == *(_QWORD *)(a1 + 32))
  {
    v82 = 0u;
    __p = 0u;
    *(_DWORD *)v80 = a2[3].i32[2];
    memset(&v80[8], 0, 32);
    v4 = a2[2].u64[1];
    if (v4 >= a2[3].i64[0])
    {
      v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v80);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)v80);
      v5 = v4 + 72;
      a2[2].i64[1] = v4 + 72;
    }
    a2[2].i64[1] = v5;
    *(_QWORD *)&v85 = (char *)&__p + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    *(_QWORD *)&v85 = &v80[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    v6 = *(std::__shared_weak_count **)&v80[16];
    if (*(_QWORD *)&v80[16])
    {
      v7 = (unint64_t *)(*(_QWORD *)&v80[16] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(_QWORD *)(a1 + 40);
    v10 = a2[3].i32[2];
    v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 16 * v10) + 12);
    *(_QWORD *)&v85 = v10;
    *(_QWORD *)v80 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 56, v10, &v85)[3];
    v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 184), *(_QWORD **)v80, (__int128 **)v80);
    v13 = *((_DWORD *)v12 + 19);
    if (v13 == -1)
    {
      if (*((_DWORD *)v12 + 18) == 1)
        v13 = 4;
      else
        v13 = 5;
    }
    Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::decomposition_to_expand_dims_tile(&v75, a2->i64[0], a2->i64[0] + 8, v13, v11);
    v14 = *(_QWORD *)(a1 + 40) + 56;
    v15 = a2[3].i32[2];
    *(_QWORD *)v80 = v15;
    v16 = (const std::string::value_type **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, v80)[3];
    v17 = *(_QWORD *)(a1 + 40) + 96;
    v18 = a2[3].i32[2];
    *(_QWORD *)v80 = v18;
    v19 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, v80)[3];
    if (*((char *)v16 + 23) >= 0)
      v20 = *((unsigned __int8 *)v16 + 23);
    else
      v20 = (size_t)v16[1];
    v21 = &v74;
    std::string::basic_string[abi:ne180100]((uint64_t)&v74, v20 + 5);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v74.__r_.__value_.__r.__words[0];
    if (v20)
    {
      if (*((char *)v16 + 23) >= 0)
        v22 = (const std::string::value_type *)v16;
      else
        v22 = *v16;
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, "_tile");
    if ((_QWORD)v75)
    {
      if (*((char *)v16 + 23) >= 0)
        v23 = *((unsigned __int8 *)v16 + 23);
      else
        v23 = (size_t)v16[1];
      v24 = &v93;
      std::string::basic_string[abi:ne180100]((uint64_t)&v93, v23 + 12);
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v93.__r_.__value_.__r.__words[0];
      if (v23)
      {
        if (*((char *)v16 + 23) >= 0)
          v25 = v16;
        else
          v25 = *v16;
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "_expand_dims");
      v26 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      *(_QWORD *)&v85 = v16;
      v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, v16, (__int128 **)&v85);
      v28 = *(_OWORD *)(v27 + 72);
      *(_OWORD *)v80 = *(_OWORD *)(v27 + 56);
      *(_OWORD *)&v80[16] = v28;
      v29 = (const void *)*((_QWORD *)v27 + 12);
      *(_QWORD *)&v80[32] = *((_QWORD *)v27 + 11);
      __p = 0uLL;
      *(_QWORD *)&v82 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v29, *((_QWORD *)v27 + 13), (uint64_t)(*((_QWORD *)v27 + 13) - (_QWORD)v29) >> 2);
      v30 = v75;
      v85 = *(_OWORD *)v80;
      v86 = *(_OWORD *)&v80[16];
      v87 = *(_QWORD *)&v80[32];
      v88 = 0;
      v89 = 0;
      v90 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
      memset(&v91, 0, sizeof(v91));
      v67 = &v91;
      LOBYTE(v68) = 0;
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      v91.__r_.__value_.__l.__size_ = v91.__r_.__value_.__r.__words[0];
      v91.__r_.__value_.__r.__words[2] = v91.__r_.__value_.__r.__words[0] + 64;
      v91.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v91.__r_.__value_.__r.__words[2], &v85, (__int128 *)&v91, (uint64_t)v91.__r_.__value_.__l.__data_);
      (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v30 + 64))(&v71, v30, &v91);
      p_data = (void **)&v71->__r_.__value_.__l.__data_;
      v32 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
      v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, &v93, (__int128 **)&v83);
      v34 = *(_OWORD *)p_data;
      v35 = *((_OWORD *)p_data + 1);
      *((_QWORD *)v33 + 11) = p_data[4];
      *(_OWORD *)(v33 + 72) = v35;
      *(_OWORD *)(v33 + 56) = v34;
      if (v33 + 56 != (char *)p_data)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v33 + 96, (char *)p_data[5], (uint64_t)p_data[6], ((_BYTE *)p_data[6] - (_BYTE *)p_data[5]) >> 2);
      v67 = (std::string *)&v71;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      v67 = &v91;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      if (v88)
      {
        v89 = v88;
        operator delete(v88);
      }
      v36 = *(_QWORD *)(a1 + 40);
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v36 + 360), v16))
      {
        *(_QWORD *)&v85 = v16;
        v37 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v36 + 352), v16, (uint64_t)&std::piecewise_construct, (__int128 **)&v85);
        v38 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 352);
        *(_QWORD *)&v85 = &v93;
        v39 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, &v93, (uint64_t)&std::piecewise_construct, (__int128 **)&v85);
        *(_OWORD *)(v39 + 56) = *(_OWORD *)(v37 + 56);
        if (v39 != v37)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39 + 72, *((char **)v37 + 9), *((_QWORD *)v37 + 10), (uint64_t)(*((_QWORD *)v37 + 10) - *((_QWORD *)v37 + 9)) >> 2);
      }
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      v70 = v75;
      if (*((_QWORD *)&v75 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::string::basic_string[abi:ne180100]<0>(&v85, "expand_dims");
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v91, *v16, (std::string::size_type)v16[1]);
      }
      else
      {
        v43 = *(_OWORD *)v16;
        v91.__r_.__value_.__r.__words[2] = (std::string::size_type)v16[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v43;
      }
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v67 = (std::string *)&v71;
      LOBYTE(v68) = 0;
      v71 = (std::string *)operator new(0x18uLL);
      v72 = v71;
      v73 = (void **)&v71[1].__r_.__value_.__l.__data_;
      v72 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v73, (__int128 *)&v91, (__int128 *)&v92, v71);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v83, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
      else
        v83 = v93;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v78 = (void ***)&v67;
      v79 = 0;
      v67 = (std::string *)operator new(0x18uLL);
      v68 = v67;
      v69 = (void **)&v67[1].__r_.__value_.__l.__data_;
      v68 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v69, (__int128 *)&v83, (__int128 *)&v84, v67);
      Espresso::single_match_state<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::add_kernel(a2, (uint64_t *)&v70, (const std::string *)&v85, &v93, &v71, &v67);
      v78 = (void ***)&v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      v67 = (std::string *)&v71;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SBYTE7(v86) < 0)
        operator delete((void *)v85);
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v49 = __ldaxr(p_shared_owners);
        while (__stlxr(v49 - 1, p_shared_owners));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v50 = (std::__shared_weak_count *)v77;
      v66[0] = v76;
      v66[1] = v77;
      if (v77)
      {
        v51 = (unint64_t *)(v77 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      std::string::basic_string[abi:ne180100]<0>(&v85, "tile");
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v91, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
      else
        v91 = v93;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v67 = (std::string *)&v71;
      LOBYTE(v68) = 0;
      v71 = (std::string *)operator new(0x18uLL);
      v72 = v71;
      v73 = (void **)&v71[1].__r_.__value_.__l.__data_;
      v72 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v73, (__int128 *)&v91, (__int128 *)&v92, v71);
      if (*((char *)v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v53 = *v19;
        v83.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v53;
      }
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v78 = (void ***)&v67;
      v79 = 0;
      v67 = (std::string *)operator new(0x18uLL);
      v68 = v67;
      v69 = (void **)&v67[1].__r_.__value_.__l.__data_;
      v68 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v69, (__int128 *)&v83, (__int128 *)&v84, v67);
      Espresso::single_match_state<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::add_kernel(a2, v66, (const std::string *)&v85, &v74, &v71, &v67);
      v78 = (void ***)&v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      v67 = (std::string *)&v71;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SBYTE7(v86) < 0)
        operator delete((void *)v85);
      if (v50)
      {
        v54 = (unint64_t *)&v50->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
    }
    else
    {
      v44 = (std::__shared_weak_count *)v77;
      v65[0] = v76;
      v65[1] = v77;
      if (v77)
      {
        v45 = (unint64_t *)(v77 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      std::string::basic_string[abi:ne180100]<0>(v80, "tile");
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v93, *v16, (std::string::size_type)v16[1]);
      }
      else
      {
        v47 = *(_OWORD *)v16;
        v93.__r_.__value_.__r.__words[2] = (std::string::size_type)v16[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v47;
      }
      v85 = 0uLL;
      *(_QWORD *)&v86 = 0;
      v71 = (std::string *)&v85;
      LOBYTE(v72) = 0;
      *(_QWORD *)&v85 = operator new(0x18uLL);
      *((_QWORD *)&v85 + 1) = v85;
      *(_QWORD *)&v86 = v85 + 24;
      *((_QWORD *)&v85 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v86, (__int128 *)&v93, &v94, (std::string *)v85);
      if (*((char *)v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v56 = *v19;
        v91.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v56;
      }
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v67 = (std::string *)&v71;
      LOBYTE(v68) = 0;
      v71 = (std::string *)operator new(0x18uLL);
      v72 = v71;
      v73 = (void **)&v71[1].__r_.__value_.__l.__data_;
      v72 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v73, (__int128 *)&v91, (__int128 *)&v92, v71);
      Espresso::single_match_state<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::add_kernel(a2, v65, (const std::string *)v80, &v74, (std::string **)&v85, &v71);
      v67 = (std::string *)&v71;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      v71 = (std::string *)&v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if ((v80[23] & 0x80000000) != 0)
        operator delete(*(void **)v80);
      if (v44)
      {
        v57 = (unint64_t *)&v44->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    v59 = (std::__shared_weak_count *)v77;
    if (v77)
    {
      v60 = (unint64_t *)(v77 + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1))
    {
      v63 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
}

void sub_1917AE500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;

  a19 = v43 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (*(char *)(v43 - 89) < 0)
    operator delete(*(void **)(v43 - 112));
  if (a39 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1917AE76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a14 = (void **)&a19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a14);
  JUMPOUT(0x1917AE780);
}

void sub_1917AE7AC()
{
  JUMPOUT(0x1917AE6F8);
}

void sub_1917AE7B4()
{
  JUMPOUT(0x1917AE764);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1917AEA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void sub_1917AEAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::fold_constants(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DB03D0;
  v6[1] = this;
  v7 = v6;
  v2 = Espresso::zephyr::function_t::foreach_block((uint64_t)this, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_1917AEB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB03D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB03D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::operator()(Espresso *a1, const char *a2)
{
  Espresso::zephyr::ordered_block_t *v3;
  NSObject *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  Espresso::zephyr::node_t *v9;
  uint64_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  Espresso::zephyr::function_t *v35;
  __int128 **v36;
  int v37;
  Espresso::net *v38;
  Espresso::net *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  Espresso::net *v43;
  _QWORD *v44;
  uint64_t v45;
  Espresso *v46;
  const char *v47;
  NSObject *v48;
  Espresso *v49;
  const char *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  Espresso *v54;
  const char *v55;
  Espresso::layer_shape *v56;
  const char *v57;
  NSObject *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  BOOL v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  const char *v74;
  const char *v75;
  NSObject *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  int64_t v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _DWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _BYTE *v116;
  _QWORD *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  char v126;
  char *v127;
  Espresso *v128;
  const char *v129;
  char v130;
  NSObject *v131;
  _QWORD *v132;
  _BYTE *v133;
  char v134;
  _QWORD *v135;
  NSObject *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  NSObject *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  Espresso *v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  __int128 v156;
  int v157;
  int v158;
  Espresso::net *v159;
  std::__shared_weak_count *v160;
  __int128 v161;
  __int128 v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void *lpsrc;
  std::__shared_weak_count *v169;
  _BYTE __p[24];
  uint64_t v171;
  void *v172;
  void *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _BYTE buf[24];
  unint64_t *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD v180[3];
  _QWORD v181[2];
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD v185[4];
  __int128 v186;
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v3 = *(Espresso::zephyr::ordered_block_t **)a2;
  Espresso::espresso_os_log_subsystem(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v67 = *((_QWORD *)v3 + 13);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v67;
    _os_log_debug_impl(&dword_190DAF000, v4, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants block=%llu n=%zu", buf, 0x16u);
  }

  v150 = a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *(unint64_t **)(v5 + 24);
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  v177 = v6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v180[0] = 0;
  v180[1] = 0;
  v178 = v5;
  v179 = v180;
  v180[2] = v181;
  v181[0] = 0;
  v183 = 0;
  v184 = 0;
  v181[1] = 0;
  v182 = &v183;
  *(_QWORD *)buf = &off_1E2DA4130;
  *(_QWORD *)&buf[8] = v7;
  v185[0] = v185;
  v185[1] = v185;
  v185[2] = 0;
  v161 = 0u;
  v162 = 0u;
  v163 = 1065353216;
  v8 = (_QWORD *)*((_QWORD *)v3 + 15);
  if (v8 == (_QWORD *)((char *)v3 + 112))
    goto LABEL_237;
  do
  {
    v9 = (Espresso::zephyr::node_t *)v8[2];
    if (!v9 || (v10 = *((_QWORD *)v9 + 1)) == 0 || (v11 = *(const void **)(v10 + 8)) == 0)
    {
LABEL_36:
      LODWORD(v12) = 1;
      goto LABEL_37;
    }
    {
      v12 = *(std::__shared_weak_count **)(v10 + 16);
      if (!v12)
        goto LABEL_37;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
    }
    {
      v12 = *(std::__shared_weak_count **)(v10 + 16);
      if (!v12)
        goto LABEL_37;
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v15 = __ldaxr(v16);
      while (__stlxr(v15 - 1, v16));
    }
    else
    {
      v18 = *(const void **)(v10 + 8);
      if (!v18)
        goto LABEL_36;
      {
        v12 = *(std::__shared_weak_count **)(v10 + 16);
        if (!v12)
          goto LABEL_37;
        v19 = (unint64_t *)&v12->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        do
          v15 = __ldaxr(v19);
        while (__stlxr(v15 - 1, v19));
      }
      else
      {
        v12 = *(std::__shared_weak_count **)(v10 + 16);
        if (!v12)
          goto LABEL_37;
        v21 = (unint64_t *)&v12->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        do
          v15 = __ldaxr(v21);
        while (__stlxr(v15 - 1, v21));
      }
    }
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    LODWORD(v12) = 0;
LABEL_37:
    v23 = *((_QWORD *)v9 + 15);
    v24 = *((_QWORD *)v9 + 16);
    if (v23 != v24)
    {
      v25 = v183;
      while (1)
      {
        if (!v25)
          goto LABEL_58;
        v26 = *(unint64_t **)(*(_QWORD *)v23 + 80);
        v27 = v25;
        while (1)
        {
          if (v26)
            v28 = *v26;
          else
            v28 = 0;
          v29 = (_QWORD *)v27[4];
          if (v29)
          {
            v29 = (_QWORD *)*v29;
            if (v28 < (unint64_t)v29)
              goto LABEL_51;
          }
          v30 = v26 ? *v26 : 0;
          if ((unint64_t)v29 >= v30)
            break;
          ++v27;
LABEL_51:
          v27 = (_QWORD *)*v27;
          if (!v27)
            goto LABEL_58;
        }
        v31 = std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*((_QWORD *)v3 + 12), v26);
        LODWORD(v12) = (v31 != 0) & v12;
        if (v31)
        {
          v23 += 8;
          if (v23 != v24)
            continue;
        }
        break;
      }
    }
    if ((_DWORD)v12)
    {
      Espresso::zephyr::ordered_block_t::insert_node((Espresso::zephyr::ordered_block_t *)buf, v9);
      if (Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v9))
        std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)&v161, (unint64_t)v9, (uint64_t)v9);
    }
LABEL_58:
    v8 = (_QWORD *)v8[1];
  }
  while (v8 != (_QWORD *)((char *)v3 + 112));
  if (!*((_QWORD *)&v162 + 1) || *((_QWORD *)&v162 + 1) == v184)
    goto LABEL_237;
  v32 = *(unint64_t **)(*((_QWORD *)v150 + 1) + 24);
  v33 = (std::__shared_weak_count *)operator new(0xC0uLL);
  v33->__shared_owners_ = 0;
  v34 = (unint64_t *)&v33->__shared_owners_;
  v33->__shared_weak_owners_ = 0;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1018;
  v151 = v33;
  v35 = (Espresso::zephyr::function_t *)&v33[1];
  Espresso::zephyr::function_t::function_t((uint64_t)&v33[1], v32);
  *(_QWORD *)v35 = &off_1E2DA40D0;
  Espresso::zephyr::ordered_block_t::copy_to_standalone_function((Espresso::zephyr::graph_t *)buf, v35);
  Espresso::zephyr::es_function_t::dump_to_net(&v159, v36);
  v37 = Espresso::net::needs_interpreter(v159);
  v38 = v159;
  if (v37)
  {
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    Espresso::net::setup_script((uint64_t)v159, (uint64_t *)__p, 0);
    v38 = v159;
  }
  *((_BYTE *)v38 + 180) = 0;
  Espresso::shape_network_recursive(v38, (Espresso::net *)((char *)v38 + 184), 0, 0);
  v39 = v159;
  (***((void (****)(_BYTE *__return_ptr))v159 + 2))(__p);
  Espresso::net::__forward((uint64_t)v39, __p, 0, 0xFFFFFFFFLL);
  v40 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v41 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v159;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v175 = 0;
  Espresso::net::pprint((uint64_t)v43, (uint64_t)__p, (uint64_t)v174);
  v44 = v175;
  if (v175 == v174)
  {
    v45 = 4;
    v44 = v174;
LABEL_72:
    (*(void (**)(void))(*v44 + 8 * v45))();
  }
  else if (v175)
  {
    v45 = 5;
    goto LABEL_72;
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v46 = (Espresso *)Espresso::zephyr::graph_t::live_inputs((Espresso::zephyr::graph_t *)buf);
  if (*((_QWORD *)v46 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v46, v47);
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_classic_compiler.mm";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 126;
        _os_log_impl(&dword_190DAF000, v48, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", __p, 0x12u);
      }

    }
    goto LABEL_229;
  }
  v49 = (Espresso *)Espresso::zephyr::graph_t::live_outputs((Espresso::zephyr::graph_t *)buf);
  v51 = (_QWORD *)((char *)v49 + 8);
  v52 = *(_QWORD **)v49;
  if (*(Espresso **)v49 == (Espresso *)((char *)v49 + 8))
  {
LABEL_101:
    Espresso::espresso_os_log_subsystem(v49, v50);
    v68 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
    {
      v146 = v184;
      v147 = *((_QWORD *)&v162 + 1);
      v148 = Espresso::zephyr::graph_t::live_outputs((Espresso::zephyr::graph_t *)buf)[2];
      *(_DWORD *)__p = 134218496;
      *(_QWORD *)&__p[4] = v146;
      *(_WORD *)&__p[12] = 2048;
      *(_QWORD *)&__p[14] = v147;
      *(_WORD *)&__p[22] = 2048;
      v171 = v148;
      _os_log_debug_impl(&dword_190DAF000, v68, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants: transform constant_subgraph.size=%zu constant_kernels=%zu outputs=%zu", __p, 0x20u);
    }

    v69 = Espresso::zephyr::graph_t::live_outputs((Espresso::zephyr::graph_t *)buf);
    v70 = v69 + 1;
    v71 = (_QWORD *)*v69;
    if ((_QWORD *)*v69 == v69 + 1)
    {
LABEL_169:
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)__p = &__p[8];
      v113 = v182;
      if (v182 != &v183)
      {
        do
        {
          v114 = &__p[8];
          if (*(_BYTE **)__p == &__p[8])
            goto LABEL_181;
          v115 = *(_QWORD **)&__p[8];
          v116 = &__p[8];
          if (*(_QWORD *)&__p[8])
          {
            do
            {
              v114 = v115;
              v115 = (_QWORD *)v115[1];
            }
            while (v115);
          }
          else
          {
            do
            {
              v114 = (_QWORD *)*((_QWORD *)v116 + 2);
              v64 = *v114 == (_QWORD)v116;
              v116 = v114;
            }
            while (v64);
          }
          v117 = (_QWORD *)v114[4];
          if (v117)
            v117 = (_QWORD *)*v117;
          v118 = (unint64_t *)v113[4];
          v119 = v118 ? *v118 : 0;
          if ((unint64_t)v117 < v119)
          {
LABEL_181:
            if (*(_QWORD *)&__p[8])
            {
              *(_QWORD *)&v186 = v114;
              v120 = (uint64_t **)(v114 + 1);
            }
            else
            {
              *(_QWORD *)&v186 = &__p[8];
              v120 = (uint64_t **)&__p[8];
            }
          }
          else
          {
            v120 = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>((uint64_t)__p, &v186, v118);
          }
          if (!*v120)
          {
            v121 = (uint64_t *)operator new(0x28uLL);
            v121[4] = v113[4];
            v122 = v186;
            *v121 = 0;
            v121[1] = 0;
            v121[2] = v122;
            *v120 = v121;
            if (**(_QWORD **)__p)
            {
              *(_QWORD *)__p = **(_QWORD **)__p;
              v121 = *v120;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&__p[8], v121);
            ++*(_QWORD *)&__p[16];
          }
          v123 = (_QWORD *)v113[1];
          if (v123)
          {
            do
            {
              v124 = v123;
              v123 = (_QWORD *)*v123;
            }
            while (v123);
          }
          else
          {
            do
            {
              v124 = (_QWORD *)v113[2];
              v64 = *v124 == (_QWORD)v113;
              v113 = v124;
            }
            while (!v64);
          }
          v113 = v124;
        }
        while (v124 != &v183);
        v125 = *(_QWORD **)__p;
        if (*(_BYTE **)__p != &__p[8])
        {
          v126 = 0;
          while (1)
          {
            v127 = (char *)v125[4];
            v128 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused((Espresso::zephyr::node_t *)v127);
            v130 = (char)v128;
            if ((_DWORD)v128)
            {
              Espresso::espresso_os_log_subsystem(v128, v129);
              v131 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
              {
                v135 = v127 + 144;
                if (v127[167] < 0)
                  v135 = (_QWORD *)*v135;
                LODWORD(v186) = 136315138;
                *(_QWORD *)((char *)&v186 + 4) = v135;
                _os_log_debug_impl(&dword_190DAF000, v131, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants: remove: %s", (uint8_t *)&v186, 0xCu);
              }

            }
            v132 = (_QWORD *)v125[1];
            if (v132)
            {
              do
              {
                v133 = v132;
                v132 = (_QWORD *)*v132;
              }
              while (v132);
            }
            else
            {
              do
              {
                v133 = (_BYTE *)v125[2];
                v64 = *(_QWORD *)v133 == (_QWORD)v125;
                v125 = v133;
              }
              while (!v64);
            }
            v126 |= v130;
            v125 = v133;
            if (v133 == &__p[8])
            {
              v125 = *(_QWORD **)__p;
              v134 = v126 & (*(_QWORD *)__p != (_QWORD)&__p[8]);
              v126 = 0;
              if ((v134 & 1) == 0)
                break;
            }
          }
        }
      }
      std::__tree<int>::destroy(*(_QWORD **)&__p[8]);
      goto LABEL_229;
    }
    v149 = v69 + 1;
    while (1)
    {
      v72 = v71[4];
      v73 = *(_QWORD *)(v72 + 80);
      if (!std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*((_QWORD *)v3 + 12), (unint64_t *)v73))
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(0, v74);
          v140 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v140, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "lassic_compiler.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 154;
            _os_log_impl(&dword_190DAF000, v140, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", __p, 0x12u);
          }

        }
        goto LABEL_229;
      }
      if (!std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(&v161, v73))break;
LABEL_159:
      v110 = (_QWORD *)v71[1];
      if (v110)
      {
        do
        {
          v111 = v110;
          v110 = (_QWORD *)*v110;
        }
        while (v110);
      }
      else
      {
        do
        {
          v111 = (_QWORD *)v71[2];
          v64 = *v111 == (_QWORD)v71;
          v71 = v111;
        }
        while (!v64);
      }
      v71 = v111;
      if (v111 == v70)
        goto LABEL_169;
    }
    Espresso::espresso_os_log_subsystem(0, v75);
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      v112 = (_QWORD *)(v72 + 32);
      if (*(char *)(v72 + 55) < 0)
        v112 = (_QWORD *)*v112;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v112;
      _os_log_debug_impl(&dword_190DAF000, v76, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants: constant: %s", __p, 0xCu);
    }

    v77 = *((_QWORD *)v3 + 4);
    std::operator+<char>();
    v78 = Espresso::zephyr::function_t::new_detached_node(v77, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v80 = *(_QWORD **)(v73 + 96);
    v79 = *(char **)(v73 + 104);
    v81 = *v80;
    v82 = v79 - (char *)(v80 + 1);
    if (v79 != (char *)(v80 + 1))
      memmove(*(void **)(v73 + 96), v80 + 1, v79 - (char *)(v80 + 1));
    *(_QWORD *)(v73 + 104) = (char *)v80 + v82;
    if (*(_QWORD *)(v81 + 80) == v73)
      *(_QWORD *)(v81 + 80) = 0;
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v78, (Espresso::zephyr::value_t *)v72);
    *(_QWORD *)__p = v72 + 32;
    v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v159 + 136, (unsigned __int8 *)(v72 + 32), (__int128 **)__p);
    Espresso::abstract_blob_container::shape(__p, *((_QWORD *)v83 + 5));
    v156 = *(_OWORD *)__p;
    v84 = *(_DWORD *)&__p[20];
    if (*(_DWORD *)&__p[16] == 1)
      v85 = 4;
    else
      v85 = 5;
    if (*(_DWORD *)&__p[20] == -1)
      v84 = v85;
    v157 = *(_DWORD *)&__p[16];
    v158 = v84;
    v86 = *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8);
    Espresso::abstract_engine_factory::shared(&v166);
    v87 = v166;
    std::string::basic_string[abi:ne180100]<0>(&v186, "load_constant");
    v88 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v86 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v86 + 8) + 8));
    v164 = 0;
    v165 = v88;
    Espresso::abstract_engine_factory::make_kernel_priv(v87, v86 + 8, (uint64_t)&v186, (uint64_t)&v156, &v165);
    if (v187 < 0)
      operator delete((void *)v186);
    v89 = v167;
    if (v167)
    {
      v90 = (unint64_t *)&v167->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    if (lpsrc)
    {
      if (v92)
      {
        v93 = v169;
        if (!v169)
        {
LABEL_139:
          v99 = (std::__shared_weak_count *)*((_QWORD *)v83 + 6);
          v152 = *((_QWORD *)v83 + 5);
          v153 = v99;
          if (v99)
          {
            v100 = (unint64_t *)&v99->__shared_owners_;
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
          }
          Espresso::sync_copy_to_host(&v154, &v152);
          Espresso::generic_load_constant_kernel::set_constant_blob(v92, (uint64_t)&v154);
          v102 = v155;
          if (v155)
          {
            v103 = (unint64_t *)&v155->__shared_owners_;
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 - 1, v103));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          v105 = v153;
          if (v153)
          {
            v106 = (unint64_t *)&v153->__shared_owners_;
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v78 + 1) + 8), (uint64_t)v92, (uint64_t)v93);
          Espresso::zephyr::ordered_block_t::insert_node_after(v3, (Espresso::zephyr::node_t *)v78, (Espresso::zephyr::node_t *)v73);
          v70 = v149;
          if (v93)
          {
            v108 = (unint64_t *)&v93->__shared_owners_;
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          if (v172)
          {
            v173 = v172;
            operator delete(v172);
          }
          goto LABEL_159;
        }
        v94 = (unint64_t *)&v169->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
LABEL_134:
        v96 = v169;
        if (v169)
        {
          v97 = (unint64_t *)&v169->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        goto LABEL_139;
      }
    }
    else
    {
      v92 = 0;
    }
    v93 = 0;
    goto LABEL_134;
  }
  while (1)
  {
    v53 = v52[4];
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v186, (Espresso::zephyr::value_t *)v53);
    v56 = (Espresso::layer_shape *)v186;
    if (!(_QWORD)v186)
      break;
    if (!std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(&v161, *(_QWORD *)(v53 + 80)))
    {
      Espresso::espresso_os_log_subsystem(0, v57);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        v65 = (_QWORD *)(v53 + 32);
        if (*(char *)(v53 + 55) < 0)
          v65 = (_QWORD *)*v65;
        v66 = Espresso::layer_shape::total_dim(v56);
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = v65;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v66;
        _os_log_debug_impl(&dword_190DAF000, v58, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants: constant: %s tot_dim=%lld", __p, 0x16u);
      }

    }
    *(_QWORD *)__p = v53 + 32;
    v49 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v159 + 136, (unsigned __int8 *)(v53 + 32), (__int128 **)__p);
    if (!*((_QWORD *)v49 + 5))
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_220;
      Espresso::espresso_os_log_subsystem(v49, v50);
      v136 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_classic_compiler.mm";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 139;
        goto LABEL_218;
      }
      goto LABEL_219;
    }
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
    if (*((_QWORD *)&v186 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (_QWORD *)v52[1];
    if (v62)
    {
      do
      {
        v63 = v62;
        v62 = (_QWORD *)*v62;
      }
      while (v62);
    }
    else
    {
      do
      {
        v63 = (_QWORD *)v52[2];
        v64 = *v63 == (_QWORD)v52;
        v52 = v63;
      }
      while (!v64);
    }
    v52 = v63;
    if (v63 == v51)
      goto LABEL_101;
  }
  if (!Espresso::zephyr::match_verbose)
    goto LABEL_220;
  Espresso::espresso_os_log_subsystem(v54, v55);
  v136 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_classic_compiler.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 132;
LABEL_218:
    _os_log_impl(&dword_190DAF000, v136, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", __p, 0x12u);
  }
LABEL_219:

LABEL_220:
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
LABEL_229:
  v141 = v160;
  if (v160)
  {
    v142 = (unint64_t *)&v160->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  do
    v144 = __ldaxr(v34);
  while (__stlxr(v144 - 1, v34));
  if (!v144)
  {
    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
    std::__shared_weak_count::__release_weak(v151);
  }
LABEL_237:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v161);
  *(_QWORD *)buf = &off_1E2DA4130;
  std::__list_imp<int>::clear(v185);
  Espresso::zephyr::graph_t::~graph_t((Espresso::zephyr::graph_t *)buf);
  return 0;
}

void sub_1917AFC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,std::__shared_weak_count *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,void (**a54)(Espresso::zephyr::ordered_block_t *__hidden this))
{
  unint64_t *v54;
  void *v55;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t v59;

  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))a28->__on_zero_shared)(a28);
      std::__shared_weak_count::__release_weak(a28);
    }
  }
  do
    v59 = __ldaxr(v54);
  while (__stlxr(v59 - 1, v54));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a29);
  a54 = &off_1E2DA4130;
  std::__list_imp<int>::clear(a18);
  Espresso::zephyr::graph_t::~graph_t((Espresso::zephyr::graph_t *)&a54);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes14fold_constantsERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target_type()
{
}

void std::__shared_ptr_emplace<Espresso::zephyr::es_function_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::zephyr::es_function_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::es_function_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSGraphEngine::Kernels::upsample_kernel::~upsample_kernel(Espresso::MPSGraphEngine::Kernels::upsample_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::upsample_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  int64x2_t *v21;
  std::__shared_weak_count *v22;
  void *v23[2];
  char v24;
  std::string __p;
  _BYTE v26[24];
  _BYTE v27[32];
  std::__shared_weak_count *v28;
  int64x2_t *v29;
  std::__shared_weak_count *v30;
  void **v31;

  if (*(_DWORD *)(a1 + 292) == 1 && *(_DWORD *)(a1 + 300))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 8);
    v29 = *(int64x2_t **)a2;
    v30 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "[Dispatch::MPSGraph::upsample_kernel] unsupported: is_legacy_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v23, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v29, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v7 = v28;
    if (v28)
    {
      v8 = (unint64_t *)&v28->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v31 = (void **)v27;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
    v31 = (void **)v26;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v24 < 0)
      operator delete(v23[0]);
    v10 = v30;
    if (!v30)
      return 0;
    v11 = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_36;
  }
  if (a3[1] - *a3 == 64)
    return 1;
  v14 = *(std::__shared_weak_count **)(a2 + 8);
  v21 = *(int64x2_t **)a2;
  v22 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "[Dispatch::MPSGraph::upsample_kernel] unsupported: expected one input.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v23, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v31 = (void **)v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
  v31 = (void **)v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v23[0]);
  v10 = v22;
  if (v22)
  {
    v20 = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldaxr(v20);
    while (__stlxr(v12 - 1, v20));
LABEL_36:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 0;
}

void sub_1917B021C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a17);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1917B044C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_debug_mode::~pass_debug_mode(Espresso::pass_debug_mode *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_debug_mode::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_debug_mode::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  char *v5;
  char *v6;
  _QWORD *v7;
  void **v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  void *v20[2];
  uint64_t v21;
  _QWORD v22[13];
  char v23;
  uint64_t v24;
  _QWORD **v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  void **v30;

  v5 = getenv("ESPRESSO_PASS_DEBUG_MODE_LAYERS");
  if (v5)
    v6 = v5;
  else
    v6 = "";
  std::string::basic_string[abi:ne180100]<0>(v28, v6);
  v26 = 0;
  v27 = 0;
  v25 = &v26;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22, (uint64_t)v28, 24);
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  while (1)
  {
    v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, (uint64_t)v20, 0x2Cu);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
      break;
    if (v21 >= 0)
      v8 = v20;
    else
      v8 = (void **)v20[0];
    v9 = atoi((const char *)v8);
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)&v25, v9, v9);
  }
  v11 = *((_QWORD *)a1 + 4);
  v10 = *((_QWORD *)a1 + 5);
  if (v10 != v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (v13)
      {
        for (i = v26; i; i = (_QWORD *)*i)
        {
          v15 = *((_DWORD *)i + 7);
          if (v15 <= (int)v12)
          {
            if (v15 >= (int)v12)
              goto LABEL_19;
            ++i;
          }
        }
      }
      else
      {
LABEL_19:
        v16 = *(_QWORD *)(*(_QWORD *)(v11 + 16 * v12) + 64);
        std::string::basic_string[abi:ne180100]<0>(__p, "is_output");
        v30 = __p;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 240, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v30)+ 10) = 1;
        if (v19 < 0)
          operator delete(__p[0]);
        v11 = *((_QWORD *)a1 + 4);
        v10 = *((_QWORD *)a1 + 5);
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 4);
  }
  *((_BYTE *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)((char *)a1 + 184), 0, 0);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  v22[0] = *MEMORY[0x1E0DE4F50];
  v17 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v22[2] = v17;
  v22[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v24);
  std::__tree<int>::destroy(v26);
  if (v29 < 0)
    operator delete(v28[0]);
}

void sub_1917B0748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  std::__tree<int>::destroy(*(_QWORD **)(v22 - 136));
  if (*(char *)(v22 - 97) < 0)
    operator delete(*(void **)(v22 - 120));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_debug_mode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB83E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_debug_mode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB83E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_debug_mode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSGraphEngine::Kernels::pool3d_kernel::~pool3d_kernel(Espresso::MPSGraphEngine::Kernels::pool3d_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::MPSGraphEngine::Kernels::pool3d_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  const Espresso::layer_shape *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  int64x2_t *v30;
  unint64_t *v31;
  unint64_t v32;
  int64x2_t **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  int64x2_t *v41;
  unint64_t *v42;
  unint64_t v43;
  int64x2_t *v44[2];
  int64x2_t *v45[2];
  int64x2_t *v46;
  std::__shared_weak_count *v47;
  int64x2_t *v48;
  std::__shared_weak_count *v49;
  int64x2_t *v50;
  std::__shared_weak_count *v51;
  void *v52[2];
  char v53;
  std::string __p;
  _BYTE v55[24];
  _BYTE v56[32];
  std::__shared_weak_count *v57;
  int64x2_t *v58;
  std::__shared_weak_count *v59;
  void **v60;

  v4 = *(const Espresso::layer_shape **)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 64 || *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24) != 64)
  {
    v15 = (std::__shared_weak_count *)a2[1];
    v58 = *a2;
    v59 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: expected exactly 1 input and 1 output.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, a3, 0);
    Espresso::emit_kernel_validation_warning(&v58, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v18 = v57;
    if (v57)
    {
      v19 = (unint64_t *)&v57->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v60 = (void **)v56;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    v60 = (void **)v55;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete(v52[0]);
    v12 = v59;
    if (!v59)
      return 0;
    v21 = (unint64_t *)&v59->__shared_owners_;
    do
      v14 = __ldaxr(v21);
    while (__stlxr(v14 - 1, v21));
LABEL_52:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return 0;
  }
  v5 = *(_DWORD *)(a1 + 312);
  if ((v5 | 2) != 2)
  {
    v22 = (std::__shared_weak_count *)a2[1];
    v50 = *a2;
    v51 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: unexpected top_shape_style.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, a3, 0);
    Espresso::emit_kernel_validation_warning(&v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v25 = v57;
    if (v57)
    {
      v26 = (unint64_t *)&v57->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v60 = (void **)v56;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    v60 = (void **)v55;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete(v52[0]);
    v12 = v51;
    if (!v51)
      return 0;
    v28 = (unint64_t *)&v51->__shared_owners_;
    do
      v14 = __ldaxr(v28);
    while (__stlxr(v14 - 1, v28));
    goto LABEL_52;
  }
  if (*(_WORD *)(a1 + 318))
  {
    v6 = (std::__shared_weak_count *)a2[1];
    v48 = *a2;
    v49 = v6;
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: pad.fill_mode must be constant.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, a3, 0);
    Espresso::emit_kernel_validation_warning(&v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v9 = v57;
    if (v57)
    {
      v10 = (unint64_t *)&v57->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v60 = (void **)v56;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    v60 = (void **)v55;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete(v52[0]);
    v12 = v49;
    if (!v49)
      return 0;
    v13 = (unint64_t *)&v49->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a1 + 336))
    goto LABEL_98;
  if (*(_DWORD *)(a1 + 280) >= 2u)
  {
    v34 = (std::__shared_weak_count *)a2[1];
    v46 = *a2;
    v47 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: global pooling must be average or max.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, a3, 0);
    Espresso::emit_kernel_validation_warning(&v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v37 = v57;
    if (v57)
    {
      v38 = (unint64_t *)&v57->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v60 = (void **)v56;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    v60 = (void **)v55;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete(v52[0]);
    v12 = v47;
    if (!v47)
      return 0;
    v40 = (unint64_t *)&v47->__shared_owners_;
    do
      v14 = __ldaxr(v40);
    while (__stlxr(v14 - 1, v40));
    goto LABEL_52;
  }
  if (v5 != 2)
  {
    if (*(_WORD *)(a1 + 316) != 2
      && (*(_WORD *)(a1 + 316)
       || *(_WORD *)(a1 + 328)
       || *(_WORD *)(a1 + 330)
       || *(_WORD *)(a1 + 324)
       || *(_WORD *)(a1 + 326)
       || *(_WORD *)(a1 + 332)
       || *(_WORD *)(a1 + 334)))
    {
      v41 = a2[1];
      v44[0] = *a2;
      v44[1] = v41;
      if (v41)
      {
        v42 = &v41->u64[1];
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: incompatible paddings for global pooling.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, a3, 0);
      Espresso::emit_kernel_validation_warning(v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (v53 < 0)
        operator delete(v52[0]);
      v33 = v44;
      goto LABEL_97;
    }
LABEL_98:
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__p, *(const Espresso::layer_shape **)a3, 0);
    return HIDWORD(__p.__r_.__value_.__r.__words[2]) == 5;
  }
  if (*(_DWORD *)(a1 + 284) == *(_DWORD *)v4 && *(_DWORD *)(a1 + 288) == *((_DWORD *)v4 + 1))
    goto LABEL_98;
  v30 = a2[1];
  v45[0] = *a2;
  v45[1] = v30;
  if (v30)
  {
    v31 = &v30->u64[1];
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: incompatible size_x / size_y with input shape for CAFFE_LEGACY global pooling.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, a3, 0);
  Espresso::emit_kernel_validation_warning(v45, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  v33 = v45;
LABEL_97:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v33);
  return 0;
}

void sub_1917B0DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a25);
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::precompilation_settings_t::precompilation_settings_t(Espresso::ANECompilerEngine::precompilation_settings_t *this)
{
  _QWORD *v1;
  double result;

  v1 = std::string::basic_string[abi:ne180100]<0>(this, "");
  v1[3] = 850045863;
  result = 0.0;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v1[10] = 0;
  return result;
}

{
  _QWORD *v1;
  double result;

  v1 = std::string::basic_string[abi:ne180100]<0>(this, "");
  v1[3] = 850045863;
  result = 0.0;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v1[10] = 0;
  return result;
}

uint64_t Espresso::ANECompilerEngine::precompilation_settings_t::shared(Espresso::ANECompilerEngine::precompilation_settings_t *this)
{
  if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1)
    dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_13770);
  return Espresso::ANECompilerEngine::precompilation_settings_t::global;
}

void Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(uint64_t a1, const std::string *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::string::operator=((std::string *)a1, a2);
  std::mutex::unlock(v4);
}

void sub_1917B1020(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::temporary_plist_folder(const void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  const void *v6;
  const void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  std::string *p_p;
  void *v12;
  id v13;
  std::string __p;

  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  if (v5 >= 0)
    LODWORD(v7) = *((unsigned __int8 *)a1 + 23);
  else
    v7 = a1[1];
  Espresso::sha_hash(&__p, v6, (CC_LONG)v7, 1);
  v8 = (_QWORD *)(a2 + 56);
  if ((*(char *)(a2 + 79) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 79))
      goto LABEL_13;
LABEL_12:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  if (*(_QWORD *)(a2 + 64))
  {
    v8 = (_QWORD *)*v8;
    goto LABEL_12;
  }
LABEL_13:
  NSTemporaryDirectory();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
  v10 = v9;
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v9, "stringByAppendingFormat:", CFSTR("/%s"), p_p);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = objc_retainAutorelease(v12);
  std::string::basic_string[abi:ne180100]<0>(a3, (char *)objc_msgSend(v13, "UTF8String"));

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1917B1128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::precompile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile((char *)(*(_QWORD *)a1 + 592), a2, a3);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  Espresso::abstract_engine_factory *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *plan;
  char *v17;
  const void *v18;
  int v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  std::string *v24;
  const std::string::value_type *v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  char v32;
  std::string *p_p;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t *v37;
  const void *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::string *v41;
  std::string *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  std::string *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  size_t v56;
  std::string *v57;
  const void *v58;
  std::string *v59;
  std::string::size_type v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  std::string *v76;
  void *v77;
  void *v78;
  size_t v79;
  std::string *v80;
  const void *v81;
  id v82;
  std::string *v83;
  std::string::size_type v84;
  char v85;
  void *v86;
  void *v87;
  std::string *v88;
  void *v89;
  void *v90;
  void *v91;
  std::string *v92;
  void *v93;
  id v94;
  uint64_t v95;
  __CFString *v96;
  __CFString *v97;
  char *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  std::string *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  int v108;
  void *v109;
  __CFString *v110;
  id v111;
  id v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::runtime_error *v121;
  std::string *v122;
  __int128 v123;
  std::runtime_error *v124;
  const char *v125;
  std::runtime_error *v126;
  const char *v127;
  std::runtime_error *exception;
  const char *v129;
  std::runtime_error *v130;
  std::runtime_error *v131;
  Espresso::abstract_engine_factory *v132;
  uint64_t v133;
  id obj;
  id obja;
  uint64_t v136;
  EspressoLight::espresso_context *context;
  id v138;
  std::string::size_type v140;
  std::string::size_type v141;
  id v142;
  id v143;
  id v144;
  id v145;
  std::__shared_weak_count *v146;
  void *v147;
  std::__shared_weak_count *v148;
  _QWORD *v149;
  unint64_t __val;
  id v151;
  id v152;
  id v153;
  id v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _QWORD v159[2];
  uint64_t v160;
  std::__shared_weak_count *v161;
  std::string v162;
  std::string v163;
  std::string v164;
  const void *v165;
  uint64_t v166;
  std::string __p;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  _QWORD v172[9];
  std::string v173;
  _BYTE v174[128];
  _BYTE v175[128];
  _QWORD v176[4];

  v176[1] = *MEMORY[0x1E0C80C00];
  espresso_initialize_was_called = 1;
  initialize_static_memory();
  if (*(char *)(a3 + 31) >= 0)
    v5 = a3 + 8;
  else
    v5 = *(_QWORD *)(a3 + 8);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "componentsSeparatedByString:", CFSTR(","));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  obj = v7;
  if (!objc_msgSend(v7, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", Espresso::ANECompilerEngine::zin_compiler_helper::arch_h11_suffix);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v176[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v176, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v170 = 0u;
  v171 = 0u;
  v168 = 0u;
  v169 = 0u;
  obja = v7;
  v9 = (Espresso::abstract_engine_factory *)objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v168, v175, 16);
  if (v9)
  {
    v133 = *(_QWORD *)v169;
    do
    {
      v132 = v9;
      v11 = 0;
      do
      {
        if (*(_QWORD *)v169 != v133)
          objc_enumerationMutation(obja);
        v12 = *(void **)(*((_QWORD *)&v168 + 1) + 8 * v11);
        espresso_deinitialize(v9, v10);
        espresso_initialize_was_called = 1;
        initialize_static_memory();
        v136 = v11;
        if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1)
          dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_13770);
        v13 = Espresso::ANECompilerEngine::precompilation_settings_t::global;
        v138 = objc_retainAutorelease(v12);
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v138, "UTF8String"));
        Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(v13, &__p);
        v14 = 0x1E0CB3000uLL;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        context = (EspressoLight::espresso_context *)espresso_create_context(0x2718u, 0xFFFFFFFF);
        v15 = 0;
        do
        {
          __val = v15;
          objc_msgSend(*(id *)(v14 + 2368), "stringWithFormat:", CFSTR("{\"isegment\" : %zu, \"arch\" : \"%@\"}"), v15, v138);
          v151 = (id)objc_claimAutoreleasedReturnValue();
          plan = (_BYTE *)espresso_create_plan(context, 0);
          if (a1[23] >= 0)
            v17 = a1;
          else
            v17 = *(char **)a1;
          v149 = plan;
          if (espresso_plan_add_network(plan, v17, 65552, (uint64_t)&v165))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            espresso_plan_get_error_info((uint64_t)v149);
            std::runtime_error::runtime_error(exception, v129);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v18 = v165;
          v19 = v166;
          v152 = objc_retainAutorelease(v151);
          if (espresso_network_compiler_set_metadata_key(v18, v19, objc_msgSend(v152, "UTF8String")))
          {
            v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            espresso_plan_get_error_info((uint64_t)v149);
            std::runtime_error::runtime_error(v126, v127);
            __cxa_throw(v126, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (espresso_plan_build(v149))
          {
            v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            espresso_plan_get_error_info((uint64_t)v149);
            std::runtime_error::runtime_error(v124, v125);
            __cxa_throw(v124, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v20 = a2;
          if (*(char *)(a2 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            v20 = a2;
          }
          else
          {
            __p = *(std::string *)a2;
          }
          if (__val)
          {
            v21 = *(unsigned __int8 *)(v20 + 23);
            v22 = *(_QWORD *)(v20 + 8);
            if ((v21 & 0x80u) == 0)
              v23 = v21;
            else
              v23 = v22;
            std::string::basic_string[abi:ne180100]((uint64_t)&v163, v23 + 9);
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v163;
            else
              v24 = (std::string *)v163.__r_.__value_.__r.__words[0];
            if (v23)
            {
              if (*(char *)(a2 + 23) >= 0)
                v25 = (const std::string::value_type *)a2;
              else
                v25 = *(const std::string::value_type **)a2;
              memmove(v24, v25, v23);
            }
            strcpy((char *)v24 + v23, "/segment_");
            std::to_string(&v162, __val);
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = &v162;
            else
              v26 = (std::string *)v162.__r_.__value_.__r.__words[0];
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v162.__r_.__value_.__r.__words[2]);
            else
              size = v162.__r_.__value_.__l.__size_;
            v28 = std::string::append(&v163, (const std::string::value_type *)v26, size);
            v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v164.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            v30 = std::string::append(&v164, "/");
            v31 = v30->__r_.__value_.__r.__words[0];
            v173.__r_.__value_.__r.__words[0] = v30->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
            v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
            v30->__r_.__value_.__l.__size_ = 0;
            v30->__r_.__value_.__r.__words[2] = 0;
            v30->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__r.__words[0] = v31;
            __p.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v32;
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v164.__r_.__value_.__l.__data_);
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v162.__r_.__value_.__l.__data_);
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          NSLog(CFSTR("Dumping ANEC IR to %s"), p_p);
          Espresso::get_internal_network((uint64_t)v165, v166, (uint64_t)&v160);
          v34 = v160;
          v35 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v160 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v160 + 16)
                                                                                                 + 8));
          v36 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(v34 + 528), v35);
          if (!v36)
          {
            v148 = 0;
LABEL_67:
            v42 = 0;
            v146 = 0;
            goto LABEL_69;
          }
          v37 = v36;
          v38 = (const void *)v36[3];
          v148 = (std::__shared_weak_count *)v37[4];
          if (v148)
          {
            p_shared_owners = (unint64_t *)&v148->__shared_owners_;
            do
              v40 = __ldxr(p_shared_owners);
            while (__stxr(v40 + 1, p_shared_owners));
          }
          if (!v38)
            goto LABEL_67;
          v42 = v41;
          v146 = 0;
          if (v41)
            v43 = 0;
          else
            v43 = v148;
          if (v41 && v148)
          {
            v44 = (unint64_t *)&v148->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            v146 = v148;
          }
          else
          {
            v148 = v43;
          }
LABEL_69:
          std::string::operator=(v42 + 19, (const std::string *)(a3 + 104));
          v46 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v159[0] = v46;
          v159[1] = 0;
          espresso_dump_ir(v149, (uint64_t)v159);
          v140 = v42[1].__r_.__value_.__l.__size_;
          v141 = v42[1].__r_.__value_.__r.__words[2];
          if (*(_BYTE *)a3)
          {
            v142 = objc_retainAutorelease(v138);
            std::string::basic_string[abi:ne180100]<0>(&v163, (char *)objc_msgSend(v142, "UTF8String"));
            Espresso::ANECompilerEngine::zin_compiler_helper::precompiled_filename_for_segment_and_arch(__val, (uint64_t *)a1, (uint64_t *)&v163, &v164);
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
            if (a1[23] >= 0)
              v47 = (uint64_t)a1;
            else
              v47 = *(_QWORD *)a1;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v47);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".%@.espresso.precompilation_info"), v142);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".espresso.net"), v49);
            v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            std::string::basic_string[abi:ne180100]<0>(&v163, (char *)objc_msgSend(v50, "UTF8String"));

            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v159[0]);
            v147 = (void *)objc_claimAutoreleasedReturnValue();
            if (*(char *)(a3 + 103) < 0)
            {
              if (!*(_QWORD *)(a3 + 88))
                goto LABEL_135;
            }
            else if (!*(_BYTE *)(a3 + 103))
            {
              goto LABEL_135;
            }
            if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v51 = &v164;
            else
              v51 = (std::string *)v164.__r_.__value_.__r.__words[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v51);
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "lastPathComponent");
            v143 = (id)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            if (*(char *)(a3 + 103) >= 0)
              v54 = a3 + 80;
            else
              v54 = *(_QWORD *)(a3 + 80);
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v54);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v55, 1, 0, 0);

            if (*(char *)(a3 + 103) >= 0)
              v56 = *(unsigned __int8 *)(a3 + 103);
            else
              v56 = *(_QWORD *)(a3 + 88);
            std::string::basic_string[abi:ne180100]((uint64_t)&v162, v56 + 1);
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v162;
            else
              v57 = (std::string *)v162.__r_.__value_.__r.__words[0];
            if (v56)
            {
              if (*(char *)(a3 + 103) >= 0)
                v58 = (const void *)(a3 + 80);
              else
                v58 = *(const void **)(a3 + 80);
              memmove(v57, v58, v56);
            }
            *(_WORD *)((char *)&v57->__r_.__value_.__l.__data_ + v56) = 47;
            v144 = objc_retainAutorelease(v143);
            v59 = std::string::append(&v162, (const std::string::value_type *)objc_msgSend(v144, "UTF8String"));
            v60 = v59->__r_.__value_.__r.__words[0];
            v173.__r_.__value_.__r.__words[0] = v59->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v59->__r_.__value_.__r.__words[1] + 7);
            v61 = HIBYTE(v59->__r_.__value_.__r.__words[2]);
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v164.__r_.__value_.__l.__data_);
            v164.__r_.__value_.__r.__words[0] = v60;
            v164.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v164.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v164.__r_.__value_.__s + 23) = v61;
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v162.__r_.__value_.__l.__data_);
            v155 = 0u;
            v156 = 0u;
            v157 = 0u;
            v158 = 0u;
            v62 = objc_msgSend(&unk_1E2DEE130, "countByEnumeratingWithState:objects:count:", &v155, v174, 16);
            if (v62)
            {
              v63 = *(_QWORD *)v156;
              do
              {
                for (i = 0; i != v62; ++i)
                {
                  if (*(_QWORD *)v156 != v63)
                    objc_enumerationMutation(&unk_1E2DEE130);
                  v65 = *(_QWORD *)(*((_QWORD *)&v155 + 1) + 8 * i);
                  if (a1[23] >= 0)
                    v66 = (uint64_t)a1;
                  else
                    v66 = *(_QWORD *)a1;
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v66);
                  v67 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v67, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".espresso.net"), v65);
                  v68 = (void *)objc_claimAutoreleasedReturnValue();

                  if (*(char *)(a3 + 103) >= 0)
                    v69 = a3 + 80;
                  else
                    v69 = *(_QWORD *)(a3 + 80);
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v69);
                  v70 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v68, "lastPathComponent");
                  v71 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v70, "stringByAppendingPathComponent:", v71);
                  v72 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
                  v73 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v73, "removeItemAtPath:error:", v72, 0);

                  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
                  v74 = (void *)objc_claimAutoreleasedReturnValue();
                  v154 = 0;
                  objc_msgSend(v74, "copyItemAtPath:toPath:error:", v68, v72, &v154);
                  v75 = v154;

                  if (v75)
                  {
                    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v173, (char *)objc_msgSend(objc_retainAutorelease(v72), "UTF8String"));
                    v122 = std::string::insert(&v173, 0, "Cannot copy to ");
                    v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
                    v162.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v123;
                    v122->__r_.__value_.__l.__size_ = 0;
                    v122->__r_.__value_.__r.__words[2] = 0;
                    v122->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(v121, &v162);
                    __cxa_throw(v121, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }

                }
                v62 = objc_msgSend(&unk_1E2DEE130, "countByEnumeratingWithState:objects:count:", &v155, v174, 16);
              }
              while (v62);
            }
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v76 = &v163;
            else
              v76 = (std::string *)v163.__r_.__value_.__r.__words[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v76);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v77, "lastPathComponent");
            v78 = (void *)objc_claimAutoreleasedReturnValue();

            if (*(char *)(a3 + 103) >= 0)
              v79 = *(unsigned __int8 *)(a3 + 103);
            else
              v79 = *(_QWORD *)(a3 + 88);
            std::string::basic_string[abi:ne180100]((uint64_t)&v162, v79 + 1);
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v80 = &v162;
            else
              v80 = (std::string *)v162.__r_.__value_.__r.__words[0];
            if (v79)
            {
              if (*(char *)(a3 + 103) >= 0)
                v81 = (const void *)(a3 + 80);
              else
                v81 = *(const void **)(a3 + 80);
              memmove(v80, v81, v79);
            }
            *(_WORD *)((char *)&v80->__r_.__value_.__l.__data_ + v79) = 47;
            v82 = objc_retainAutorelease(v78);
            v83 = std::string::append(&v162, (const std::string::value_type *)objc_msgSend(v82, "UTF8String"));
            v84 = v83->__r_.__value_.__r.__words[0];
            v173.__r_.__value_.__r.__words[0] = v83->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v83->__r_.__value_.__r.__words[1] + 7);
            v85 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
            v163.__r_.__value_.__r.__words[0] = v84;
            v163.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v163.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v163.__r_.__value_.__s + 23) = v85;
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v162.__r_.__value_.__l.__data_);

LABEL_135:
            objc_msgSend(v147, "stringByAppendingPathComponent:", CFSTR("net_options.plist"));
            v145 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v86, "removeItemAtPath:error:", v145, 0);

            objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v88 = &v163;
            else
              v88 = (std::string *)v163.__r_.__value_.__r.__words[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v88);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "removeItemAtPath:error:", v89, 0);

            objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v147, "stringByAppendingPathComponent:", CFSTR("net.precompilation_info"));
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = &v163;
            else
              v92 = (std::string *)v163.__r_.__value_.__r.__words[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v92);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            v153 = 0;
            objc_msgSend(v90, "copyItemAtPath:toPath:error:", v91, v93, &v153);
            v94 = v153;

            if (v94)
            {
              v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v130, "Cannot copy net.precompilation_info");
              __cxa_throw(v130, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            if (*(char *)(a3 + 55) >= 0)
              v95 = a3 + 32;
            else
              v95 = *(_QWORD *)(a3 + 32);
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v95);
            v96 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v97 = v96;
            if (*(char *)(a3 + 55) < 0)
            {
              if (!*(_QWORD *)(a3 + 40))
                goto LABEL_149;
            }
            else if (!*(_BYTE *)(a3 + 55))
            {
LABEL_149:

              v97 = CFSTR("/usr/local/bin/zin_ane_compiler");
            }
            v98 = getenv("ZIN_ANE_COMPILER_PATH");
            if (v98)
            {
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v98);
              v99 = objc_claimAutoreleasedReturnValue();

              v97 = (__CFString *)v99;
            }
            v172[0] = CFSTR("-i");
            objc_msgSend(v147, "stringByAppendingPathComponent:", CFSTR("net.plist"));
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            v172[1] = v100;
            v172[2] = CFSTR("-w");
            objc_msgSend(v147, "stringByAppendingPathComponent:", CFSTR("net.additional.weights"));
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            v172[3] = v101;
            v172[4] = CFSTR("--Wl-undefined=fvmlib");
            v172[5] = CFSTR("-t");
            objc_msgSend(v142, "lowercaseString");
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            v172[6] = v102;
            v172[7] = CFSTR("-o");
            if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v103 = &v164;
            else
              v103 = (std::string *)v164.__r_.__value_.__r.__words[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v103);
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            v172[8] = v104;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v172, 9);
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            v106 = (void *)objc_msgSend(v105, "mutableCopy");

            objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
            v107 = (void *)objc_claimAutoreleasedReturnValue();
            v108 = objc_msgSend(v107, "fileExistsAtPath:", v145);

            if (v108)
            {
              objc_msgSend(v106, "addObject:", CFSTR("-p"));
              objc_msgSend(v106, "addObject:", v145);
            }
            objc_msgSend(v106, "componentsJoinedByString:", CFSTR(" "));
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            NSLog(CFSTR("Calling zin_ane_compiler: %@ %@"), v97, v109);

            v110 = v97;
            v111 = v106;
            v112 = objc_alloc_init(MEMORY[0x1E0CB3958]);
            objc_msgSend(v112, "setLaunchPath:", v110);
            objc_msgSend(v112, "setArguments:", v111);
            objc_msgSend(v112, "launch");
            objc_msgSend(v112, "waitUntilExit");
            v113 = objc_msgSend(v112, "terminationStatus");

            if ((_DWORD)v113)
            {
              NSLog(CFSTR("zin_ane_compiler failed with status=%d"), v113);
              espresso_plan_destroy((std::string::size_type)v149);
              espresso_context_destroy(context);
              v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v131, "zin_ane_compiler failed");
              __cxa_throw(v131, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }

            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v164.__r_.__value_.__l.__data_);
          }
          espresso_plan_destroy((std::string::size_type)v149);
          if (v146)
          {
            v114 = (unint64_t *)&v146->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
          if (v148)
          {
            v116 = (unint64_t *)&v148->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }
          v118 = v161;
          if (v161)
          {
            v119 = (unint64_t *)&v161->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);

          v15 = __val + 1;
          v14 = 0x1E0CB3000;
        }
        while (__val + 1 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v141 - v140) >> 3));
        v9 = (Espresso::abstract_engine_factory *)espresso_context_destroy(context);
        v11 = v136 + 1;
      }
      while ((Espresso::abstract_engine_factory *)(v136 + 1) != v132);
      v9 = (Espresso::abstract_engine_factory *)objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v168, v175, 16);
    }
    while (v9);
  }

  Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile(std::string const&,std::string const&,Espresso::ANECompilerEngine::zin_compiler_helper::opts_t const&)::raii_reset_settings_overrides::~raii_reset_settings_overrides();
}

void sub_1917B226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile(std::string const&,std::string const&,Espresso::ANECompilerEngine::zin_compiler_helper::opts_t const&)::raii_reset_settings_overrides::~raii_reset_settings_overrides();
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::precompiled_filename_for_segment_and_arch(int __val@<W1>, uint64_t *a2@<X0>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  std::string *v7;
  __int128 v8;
  uint64_t *v9;
  void *v10;
  void **v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  id v15;
  std::string v16;
  void *__p[2];
  int64_t v18;

  if (__val < 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
  }
  else
  {
    std::to_string(&v16, __val);
    v7 = std::string::insert(&v16, 0, ".S");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = __p;
  if (v18 < 0)
    v11 = (void **)__p[0];
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.%s.espresso.hwx"), v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".espresso.net"), v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = objc_retainAutorelease(v14);
  std::string::basic_string[abi:ne180100]<0>(a4, (char *)objc_msgSend(v15, "UTF8String"));

  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1917B2890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile(std::string const&,std::string const&,Espresso::ANECompilerEngine::zin_compiler_helper::opts_t const&)::raii_reset_settings_overrides::~raii_reset_settings_overrides()
{
  uint64_t v0;
  Espresso::abstract_engine_factory *v1;
  const char *v2;
  std::string __p;

  if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1)
    dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_13770);
  v0 = Espresso::ANECompilerEngine::precompilation_settings_t::global;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(v0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  espresso_deinitialize(v1, v2);
  espresso_initialize_was_called = 1;
  initialize_static_memory();
}

_QWORD *Espresso::ANECompilerEngine::zin_compiler_helper::zin_compiler_helper(_QWORD *this, Espresso::net *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

void splitted_filename_for_segment_and_arch(_QWORD *a1, uint64_t *a2, int a3, uint64_t *a4, const void **a5)
{
  uint64_t *v9;
  void *v10;
  id v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  void *v15;
  std::string *v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  id v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  void *v24[2];
  char v25;

  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "lastPathComponent");
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(v24, (char *)objc_msgSend(v11, "UTF8String"));

  std::to_string(&v21, a3);
  v12 = std::string::insert(&v21, 0, ".S");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, a5, (uint64_t)&v21);
  if (v25 >= 0)
    v14 = v24;
  else
    v14 = (void **)v24[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = &v21;
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (*((char *)a4 + 23) >= 0)
    v17 = a4;
  else
    v17 = (uint64_t *)*a4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.%s.espresso.net"), v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".espresso.net"), v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = objc_retainAutorelease(v19);
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v20, "UTF8String"));

  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
}

void sub_1917B2B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::anec_split(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  EspressoLight::espresso_context *context;
  _BYTE *plan;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  const Espresso::net *v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::string *p_p;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::string *v70;
  void *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  std::string *v82;
  void *v83;
  id v84;
  _QWORD *v85;
  unint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  std::string *v92;
  void *v93;
  _QWORD *v94;
  _QWORD *v95;
  BOOL v96;
  id v97;
  _QWORD *v98;
  unint64_t v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  std::string *v105;
  void *v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  size_t v110;
  std::string *v111;
  const void *v112;
  std::string *v113;
  std::string::size_type size;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  void *v120;
  void *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::runtime_error *exception;
  const char *v130;
  std::runtime_error *v131;
  std::runtime_error *v132;
  const char *v133;
  id obj;
  uint64_t v135;
  uint64_t v136;
  EspressoLight::espresso_context *v137;
  std::string::size_type v138;
  std::__shared_weak_count *v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  void *v147;
  const void **v148;
  std::string v149;
  const Espresso::net *v150;
  std::__shared_weak_count *v151;
  const Espresso::net *v152;
  std::__shared_weak_count *v153;
  const Espresso::net *v154;
  std::__shared_weak_count *v155;
  const Espresso::net *v156;
  std::__shared_weak_count *v157;
  const Espresso::net *v158;
  std::__shared_weak_count *v159;
  std::string __p;
  std::string v161;
  unint64_t __val;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  uint64_t v168;
  std::string v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _BYTE v174[128];
  _QWORD v175[4];

  v175[1] = *MEMORY[0x1E0C80C00];
  espresso_initialize_was_called = 1;
  initialize_static_memory();
  v144 = a3;
  v6 = *(_QWORD *)(a3 + 8);
  v5 = a3 + 8;
  v4 = v6;
  if (*(char *)(v5 + 23) >= 0)
    v7 = v5;
  else
    v7 = v4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "componentsSeparatedByString:", CFSTR(","));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v9, "count"))
  {
    v10 = v9;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", Espresso::ANECompilerEngine::zin_compiler_helper::arch_h11_suffix);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v175[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v175, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v172 = 0u;
  v173 = 0u;
  v170 = 0u;
  v171 = 0u;
  obj = v10;
  v136 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v170, v174, 16);
  if (v136)
  {
    v148 = (const void **)(v144 + 80);
    v135 = *(_QWORD *)v171;
    do
    {
      v141 = 0;
      do
      {
        if (*(_QWORD *)v171 != v135)
          objc_enumerationMutation(obj);
        v140 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v170 + 1) + 8 * v141));
        std::string::basic_string[abi:ne180100]<0>(&v169, (char *)objc_msgSend(v140, "UTF8String"));
        if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1)
          dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_13770);
        Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(Espresso::ANECompilerEngine::precompilation_settings_t::global, &v169);
        context = (EspressoLight::espresso_context *)espresso_create_context(0x2718u, 0xFFFFFFFF);
        plan = (_BYTE *)espresso_create_plan(context, 0);
        v14 = plan;
        if (a1[23] >= 0)
          v15 = a1;
        else
          v15 = *(char **)a1;
        if (espresso_plan_add_network(plan, v15, 65552, (uint64_t)&v167))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          espresso_plan_get_error_info((uint64_t)v14);
          std::runtime_error::runtime_error(exception, v130);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (espresso_plan_build(v14))
        {
          v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          espresso_plan_get_error_info((uint64_t)v14);
          std::runtime_error::runtime_error(v132, v133);
          __cxa_throw(v132, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        Espresso::get_internal_network(v167, v168, (uint64_t)&v165);
        v16 = v165;
        v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v165 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v165 + 16)
                                                                                               + 8));
        v18 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(v16 + 528), v17);
        if (v18)
        {
          v19 = v18;
          v18 = (uint64_t *)v18[3];
          v20 = (std::__shared_weak_count *)v19[4];
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
          }
        }
        else
        {
          v20 = 0;
        }
        v24 = v23;
        if (v20)
        {
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v163 = 0;
        v164 = 0;
        v27 = (std::__shared_weak_count *)*((_QWORD *)v23 + 2);
        if (v27)
        {
          v164 = std::__shared_weak_count::lock(v27);
          if (v164)
            v163 = v24[1];
        }
        (*(void (**)(_QWORD *, uint64_t *))(*v24 + 88))(v24, &v163);
        v137 = context;
        v28 = v164;
        if (v164)
        {
          v29 = (unint64_t *)&v164->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v138 = (std::string::size_type)v14;
        v32 = v24[4];
        v31 = v24[5];
        v33 = 0xEEEEEEEEEEEEEEEFLL * ((v31 - v32) >> 3);
        NSLog(CFSTR("n_segments= %zu"), v33);
        if (v31 == v32)
        {
          v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v131, "Error: Found zero ANE segments in this network");
          __cxa_throw(v131, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v139 = v20;
        v34 = (std::__shared_weak_count *)v24[2];
        if (v34)
        {
          v35 = std::__shared_weak_count::lock(v34);
          if (v35)
            v36 = (const Espresso::net *)v24[1];
          else
            v36 = 0;
        }
        else
        {
          v36 = 0;
          v35 = 0;
        }
        __val = 0;
        v147 = (void *)objc_opt_new();
        v145 = v24;
        v37 = 0;
        v38 = (unint64_t *)&v35->__shared_owners_;
        if (v33 <= 1)
          v39 = 1;
        else
          v39 = v33;
        v142 = v39;
        v143 = v33 - 1;
        do
        {
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          if (*(char *)(v144 + 103) >= 0)
            v41 = v144 + 80;
          else
            v41 = *(_QWORD *)(v144 + 80);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v42, 1, 0, 0);

          v43 = (_QWORD *)v145[4];
          v44 = &v43[15 * (int)v37];
          v46 = *((_QWORD *)v36 + 4);
          v45 = *((_QWORD *)v36 + 5);
          v47 = __val;
          if (v37)
            goto LABEL_71;
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          splitted_filename_for_segment_and_arch(&v161, (uint64_t *)a1, v47, (uint64_t *)&v169, (const void **)&__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*v44)
            v48 = *v44 - 1;
          else
            v48 = 0;
          v158 = v36;
          v159 = v35;
          if (v35)
          {
            do
              v49 = __ldxr(v38);
            while (__stxr(v49 + 1, v38));
          }
          cut_network(&v158, v43, v148, 1uLL, v48, &__val, (uint64_t)&v161);
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = (void *)v50;
          v52 = v159;
          if (!v159)
            goto LABEL_61;
          v53 = (unint64_t *)&v159->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
            if (v51)
            {
LABEL_62:
              v55 = (void *)MEMORY[0x1E0CB3940];
              std::to_string(&__p, __val);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              objc_msgSend(v55, "stringWithUTF8String:", p_p);
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v147, "setObject:forKeyedSubscript:", v51, v57);

              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
LABEL_61:
            if (v50)
              goto LABEL_62;
          }

          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v161.__r_.__value_.__l.__data_);
          v47 = __val;
LABEL_71:
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          splitted_filename_for_segment_and_arch(&v161, (uint64_t *)a1, v47, (uint64_t *)&v169, (const void **)&__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v58 = *v44;
          v59 = &v43[15 * (int)v37];
          v62 = v59[1];
          v61 = v59 + 1;
          v60 = v62;
          v156 = v36;
          v157 = v35;
          if (v35)
          {
            do
              v63 = __ldxr(v38);
            while (__stxr(v63 + 1, v38));
          }
          cut_network(&v156, v44, v148, (int)v58, v60, &__val, (uint64_t)&v161);
          v64 = objc_claimAutoreleasedReturnValue();
          v65 = (void *)v64;
          v66 = v157;
          if (!v157)
            goto LABEL_79;
          v67 = (unint64_t *)&v157->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
            if (!v65)
              goto LABEL_86;
          }
          else
          {
LABEL_79:
            if (!v64)
              goto LABEL_86;
          }
          v69 = (void *)MEMORY[0x1E0CB3940];
          std::to_string(&__p, __val);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = &__p;
          else
            v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
          objc_msgSend(v69, "stringWithUTF8String:", v70);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v147, "setObject:forKeyedSubscript:", v65, v71);

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_86:

          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v161.__r_.__value_.__l.__data_);
          v72 = __val;
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          splitted_filename_for_segment_and_arch(&v161, (uint64_t *)a1, v72, (uint64_t *)&v169, (const void **)&__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v73 = *v61;
          if (v37 == v143)
            v74 = (v45 - v46) >> 4;
          else
            v74 = *(_QWORD *)(v145[4] + 120 * (int)((unint64_t)((v37 << 32) + 0x100000000) >> 32)) - 1;
          v154 = v36;
          v155 = v35;
          if (v35)
          {
            do
              v75 = __ldxr(v38);
            while (__stxr(v75 + 1, v38));
          }
          cut_network(&v154, v44, v148, v73 + 1, v74, &__val, (uint64_t)&v161);
          v76 = objc_claimAutoreleasedReturnValue();
          v77 = (void *)v76;
          v78 = v155;
          if (!v155)
            goto LABEL_99;
          v79 = (unint64_t *)&v155->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
            if (!v77)
              goto LABEL_106;
          }
          else
          {
LABEL_99:
            if (!v76)
              goto LABEL_106;
          }
          v81 = (void *)MEMORY[0x1E0CB3940];
          std::to_string(&__p, __val);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = &__p;
          else
            v82 = (std::string *)__p.__r_.__value_.__r.__words[0];
          objc_msgSend(v81, "stringWithUTF8String:", v82);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v147, "setObject:forKeyedSubscript:", v77, v83);

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_106:

          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v161.__r_.__value_.__l.__data_);
          ++v37;
        }
        while (v37 != v142);
        v84 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend(v147, "setObject:forKeyedSubscript:", v84, CFSTR("inputs"));

        v85 = (_QWORD *)*((_QWORD *)v36 + 29);
        if (v85 != (_QWORD *)((char *)v36 + 240))
        {
          do
          {
            if (*((char *)v85 + 55) < 0)
              std::string::__init_copy_ctor_external(&v161, (const std::string::value_type *)v85[4], v85[5]);
            else
              v161 = *(std::string *)(v85 + 4);
            v152 = v36;
            v153 = v35;
            if (v35)
            {
              do
                v86 = __ldxr(v38);
              while (__stxr(v86 + 1, v38));
            }
            get_blob_info((__int128 *)&v161, &v152);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            v88 = v153;
            if (v153)
            {
              v89 = (unint64_t *)&v153->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            objc_msgSend(v147, "objectForKeyedSubscript:", CFSTR("inputs"));
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = &v161;
            else
              v92 = (std::string *)v161.__r_.__value_.__r.__words[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v92);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v91, "setObject:forKeyedSubscript:", v87, v93);

            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v161.__r_.__value_.__l.__data_);
            v94 = (_QWORD *)v85[1];
            if (v94)
            {
              do
              {
                v95 = v94;
                v94 = (_QWORD *)*v94;
              }
              while (v94);
            }
            else
            {
              do
              {
                v95 = (_QWORD *)v85[2];
                v96 = *v95 == (_QWORD)v85;
                v85 = v95;
              }
              while (!v96);
            }
            v85 = v95;
          }
          while (v95 != (_QWORD *)((char *)v36 + 240));
        }
        v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend(v147, "setObject:forKeyedSubscript:", v97, CFSTR("outputs"));

        v98 = (_QWORD *)*((_QWORD *)v36 + 32);
        if (v98 != (_QWORD *)((char *)v36 + 264))
        {
          do
          {
            if (*((char *)v98 + 55) < 0)
              std::string::__init_copy_ctor_external(&v161, (const std::string::value_type *)v98[4], v98[5]);
            else
              v161 = *(std::string *)(v98 + 4);
            v150 = v36;
            v151 = v35;
            if (v35)
            {
              do
                v99 = __ldxr(v38);
              while (__stxr(v99 + 1, v38));
            }
            get_blob_info((__int128 *)&v161, &v150);
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            v101 = v151;
            if (v151)
            {
              v102 = (unint64_t *)&v151->__shared_owners_;
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            objc_msgSend(v147, "objectForKeyedSubscript:", CFSTR("outputs"));
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v161;
            else
              v105 = (std::string *)v161.__r_.__value_.__r.__words[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v105);
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v104, "setObject:forKeyedSubscript:", v100, v106);

            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v161.__r_.__value_.__l.__data_);
            v107 = (_QWORD *)v98[1];
            if (v107)
            {
              do
              {
                v108 = v107;
                v107 = (_QWORD *)*v107;
              }
              while (v107);
            }
            else
            {
              do
              {
                v108 = (_QWORD *)v98[2];
                v96 = *v108 == (_QWORD)v98;
                v98 = v108;
              }
              while (!v96);
            }
            v98 = v108;
          }
          while (v108 != (_QWORD *)((char *)v36 + 264));
        }
        v109 = (void *)MEMORY[0x1E0CB3940];
        if (*(char *)(v144 + 103) >= 0)
          v110 = *(unsigned __int8 *)(v144 + 103);
        else
          v110 = *(_QWORD *)(v144 + 88);
        std::string::basic_string[abi:ne180100]((uint64_t)&v149, v110 + 11);
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v111 = &v149;
        else
          v111 = (std::string *)v149.__r_.__value_.__r.__words[0];
        if (v110)
        {
          if (*(char *)(v144 + 103) >= 0)
            v112 = (const void *)(v144 + 80);
          else
            v112 = *(const void **)(v144 + 80);
          memmove(v111, v112, v110);
        }
        strcpy((char *)v111 + v110, "/meta_data.");
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &v169;
        else
          v113 = (std::string *)v169.__r_.__value_.__r.__words[0];
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v169.__r_.__value_.__r.__words[2]);
        else
          size = v169.__r_.__value_.__l.__size_;
        v115 = std::string::append(&v149, (const std::string::value_type *)v113, size);
        v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        v117 = std::string::append(&__p, ".info");
        v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
        v161.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v118;
        v117->__r_.__value_.__l.__size_ = 0;
        v117->__r_.__value_.__r.__words[2] = 0;
        v117->__r_.__value_.__r.__words[0] = 0;
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v119 = &v161;
        else
          v119 = (std::string *)v161.__r_.__value_.__r.__words[0];
        objc_msgSend(v109, "stringWithUTF8String:", v119);
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v149.__r_.__value_.__l.__data_);
        objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v147, 1, 0);
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v121, "writeToFile:atomically:", v120, 1);
        espresso_plan_destroy(v138);
        espresso_context_destroy(v137);

        if (v35)
        {
          do
            v122 = __ldaxr(v38);
          while (__stlxr(v122 - 1, v38));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (v139)
        {
          v123 = (unint64_t *)&v139->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
          do
            v125 = __ldaxr(v123);
          while (__stlxr(v125 - 1, v123));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        v126 = v166;
        if (v166)
        {
          v127 = (unint64_t *)&v166->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);

        ++v141;
      }
      while (v141 != v136);
      v136 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v170, v174, 16);
    }
    while (v136);
  }

}

void sub_1917B3A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

id cut_network(_QWORD *a1, _QWORD *a2, const void **a3, unint64_t a4, unint64_t a5, unint64_t *a6, uint64_t a7)
{
  size_t v11;
  std::string *v12;
  const void *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  const std::string::value_type *v18;
  std::string::size_type size;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 *v41;
  __int128 *v42;
  __int128 v43;
  uint64_t v44;
  int64_t v45;
  std::string *v46;
  char *v47;
  std::string *v48;
  char *v49;
  BOOL v50;
  std::string::size_type v52;
  _OWORD *v53;
  __int128 v54;
  std::string *v55;
  std::string *v56;
  uint64_t v57;
  _QWORD *v58;
  __int128 *v59;
  __int128 *v60;
  __int128 v61;
  int64_t v62;
  std::string *v63;
  char *v64;
  std::string *v65;
  char *v66;
  std::string::size_type v69;
  _OWORD *v70;
  __int128 v71;
  std::string *v72;
  std::string *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  std::string *p_p;
  void *v82;
  uint64_t *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  void *v116;
  _QWORD *v117;
  _QWORD *v118;
  id v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  std::string::size_type v136;
  std::string::value_type *v137;
  int v139;
  const Espresso::net *v142;
  std::__shared_weak_count *v143;
  const Espresso::net *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  std::string __str;
  uint64_t v151[2];
  std::string v152;
  std::string v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  std::string __p;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160[2];
  uint64_t v161[2];
  std::string v162;
  _QWORD *v163;
  void *v164;
  char v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  _BYTE v170[7];
  std::string *v171;
  _QWORD v172[6];
  _QWORD v173[9];

  v173[6] = *MEMORY[0x1E0C80C00];
  if (a5 <= a4)
    return 0;
  if (*((char *)a3 + 23) >= 0)
    v11 = *((unsigned __int8 *)a3 + 23);
  else
    v11 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&v162, v11 + 1);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v162;
  else
    v12 = (std::string *)v162.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a3 + 23) >= 0)
      v13 = a3;
    else
      v13 = *a3;
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 47;
  v14 = *(char *)(a7 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a7;
  else
    v15 = *(const std::string::value_type **)a7;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a7 + 23);
  else
    v16 = *(_QWORD *)(a7 + 8);
  v17 = std::string::append(&v162, v15, v16);
  v18 = (const std::string::value_type *)v17->__r_.__value_.__r.__words[0];
  size = v17->__r_.__value_.__l.__size_;
  *(_DWORD *)v170 = v17->__r_.__value_.__r.__words[2];
  *(_DWORD *)&v170[3] = *(_DWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + 3);
  v20 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v21 = *(std::__shared_weak_count **)(*a1 + 24);
  v161[0] = *(_QWORD *)(*a1 + 16);
  v161[1] = (uint64_t)v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  v160[0] = 0;
  v160[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v162, v161, 0, v160);
  v24 = a4;
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    v24 = a4;
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v24 = a4;
    }
  }
  do
  {
    v27 = (_QWORD *)*a1;
    v28 = (std::__shared_weak_count *)a1[1];
    v158 = *a1;
    v159 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    memset(&__p, 0, sizeof(__p));
    Espresso::sequential_builder::copy_layer_from_network((uint64_t)&v162, v27, (int)v24, (const std::string **)&__p);
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
    if (v28)
    {
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    ++v24;
  }
  while (v24 != a5);
  v136 = size;
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v162, *a1 + 184, &v155);
  v152.__r_.__value_.__r.__words[0] = 0;
  v33 = v155;
  v35 = *(_QWORD *)(v155 + 32);
  v34 = *(_QWORD *)(v155 + 40);
  v137 = (std::string::value_type *)v18;
  v139 = v20;
  if (v34 != v35)
  {
    if (*a2 == a4 && a2[1] == a5)
    {
      do
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
        v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v33 + 96, (unint64_t *)&v152, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        v38 = v36[3];
        v37 = v36[4];
        while (v38 != v37)
        {
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2 + 7, v38))
          {
            v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 32) + 16 * v152.__r_.__value_.__r.__words[0]) + 64);
            std::string::basic_string[abi:ne180100]<0>(&__p, "is_output");
            v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 240, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v153)+ 10) = 1;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v38 += 24;
        }
        ++v152.__r_.__value_.__r.__words[0];
        v33 = v155;
        v35 = *(_QWORD *)(v155 + 32);
        v34 = *(_QWORD *)(v155 + 40);
      }
      while (v152.__r_.__value_.__r.__words[0] < (v34 - v35) >> 4 && *a2 == a4 && a2[1] == a5);
    }
    v154 = 0;
    if (v34 != v35)
    {
      do
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
        v40 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v33 + 96, &v154, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        memset(&__p, 0, sizeof(__p));
        v41 = (__int128 *)v40[3];
        v42 = (__int128 *)v40[4];
        if (v41 == v42)
        {
          v44 = v155;
        }
        else
        {
          do
          {
            if (*((char *)v41 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)v41, *((_QWORD *)v41 + 1));
            }
            else
            {
              v43 = *v41;
              v153.__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
              *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v43;
            }
            v44 = v155;
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v155 + 264), &v153))
            {
              v45 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              {
                v46 = &v153;
              }
              else
              {
                v45 = v153.__r_.__value_.__l.__size_;
                v46 = (std::string *)v153.__r_.__value_.__r.__words[0];
              }
              if (v45 >= 18)
              {
                v47 = (char *)v46 + v45;
                v48 = v46;
                do
                {
                  v49 = (char *)memchr(v48, 95, v45 - 17);
                  if (!v49)
                    break;
                  v50 = *(_QWORD *)v49 == 0x5F78745F7874635FLL && *((_QWORD *)v49 + 1) == 0x6B6361626C6C6166;
                  if (v50 && *((_WORD *)v49 + 8) == 24415)
                  {
                    if (v49 != v47)
                    {
                      v52 = v49 - (char *)v46;
                      if (v49 - (char *)v46 != -1)
                      {
                        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__erase_unique<std::string>((_QWORD *)(v44 + 256), &v153);
                        std::string::erase(&v153, v52, 1uLL);
                        v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
                        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v44 + 256), &v153, (__int128 **)&v152)[56] = 1;
                      }
                    }
                    break;
                  }
                  v48 = (std::string *)(v49 + 1);
                  v45 = v47 - (char *)v48;
                }
                while (v47 - (char *)v48 >= 18);
              }
            }
            v53 = (_OWORD *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              v55 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&__p.__r_.__value_.__l.__data_, (uint64_t)&v153);
            }
            else
            {
              if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
              }
              else
              {
                v54 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
                *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v153.__r_.__value_.__l + 2);
                *v53 = v54;
              }
              v55 = (std::string *)((char *)v53 + 24);
            }
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__r_.__value_.__l.__data_);
            v41 = (__int128 *)((char *)v41 + 24);
          }
          while (v41 != v42);
        }
        v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
        v56 = (std::string *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v44 + 96, &v154, (uint64_t)&std::piecewise_construct, (uint64_t **)&v152)+ 3);
        if (v56 != &__p)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v56, (std::string *)__p.__r_.__value_.__l.__data_, (std::string *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
        v57 = v155;
        v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
        v58 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v155 + 56, &v154, (uint64_t)&std::piecewise_construct, (uint64_t **)&v152);
        memset(&v153, 0, sizeof(v153));
        v60 = (__int128 *)v58[3];
        v59 = (__int128 *)v58[4];
        while (v60 != v59)
        {
          if (*((char *)v60 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
          }
          else
          {
            v61 = *v60;
            v152.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
            *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v61;
          }
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v57 + 240), &v152))
          {
            v62 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
            if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            {
              v63 = &v152;
            }
            else
            {
              v62 = v152.__r_.__value_.__l.__size_;
              v63 = (std::string *)v152.__r_.__value_.__r.__words[0];
            }
            if (v62 >= 18)
            {
              v64 = (char *)v63 + v62;
              v65 = v63;
              do
              {
                v66 = (char *)memchr(v65, 95, v62 - 17);
                if (!v66)
                  break;
                if (*(_QWORD *)v66 == 0x5F78745F7874635FLL
                  && *((_QWORD *)v66 + 1) == 0x6B6361626C6C6166
                  && *((_WORD *)v66 + 8) == 24415)
                {
                  if (v66 != v64)
                  {
                    v69 = v66 - (char *)v63;
                    if (v69 != -1)
                    {
                      std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__erase_unique<std::string>((_QWORD *)(v57 + 232), &v152);
                      std::string::erase(&v152, v69, 0xFFFFFFFFFFFFFFFFLL);
                      v57 = v155;
                      v171 = &v152;
                      std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v155 + 232), &v152, (__int128 **)&v171)[56] = 1;
                    }
                  }
                  break;
                }
                v65 = (std::string *)(v66 + 1);
                v62 = v64 - (char *)v65;
              }
              while (v64 - (char *)v65 >= 18);
            }
          }
          v70 = (_OWORD *)v153.__r_.__value_.__l.__size_;
          if (v153.__r_.__value_.__l.__size_ >= v153.__r_.__value_.__r.__words[2])
          {
            v72 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v153.__r_.__value_.__l.__data_, (uint64_t)&v152);
          }
          else
          {
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v153.__r_.__value_.__l.__size_, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
            }
            else
            {
              v71 = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
              *(_QWORD *)(v153.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v152.__r_.__value_.__l + 2);
              *v70 = v71;
            }
            v72 = (std::string *)((char *)v70 + 24);
          }
          v153.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v152.__r_.__value_.__l.__data_);
          v60 = (__int128 *)((char *)v60 + 24);
        }
        v171 = (std::string *)&v154;
        v73 = (std::string *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v57 + 56, &v154, (uint64_t)&std::piecewise_construct, (uint64_t **)&v171)+ 3);
        if (v73 != &v153)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v73, (std::string *)v153.__r_.__value_.__l.__data_, (std::string *)v153.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153.__r_.__value_.__l.__size_ - v153.__r_.__value_.__r.__words[0]) >> 3));
        v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
        v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
        ++v154;
        v33 = v155;
      }
      while (v154 < (uint64_t)(*(_QWORD *)(v155 + 40) - *(_QWORD *)(v155 + 32)) >> 4);
    }
  }
  v74 = (std::__shared_weak_count *)v156;
  v151[0] = v33;
  v151[1] = v156;
  if (v156)
  {
    v75 = (unint64_t *)(v156 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  if (v139 < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v18, v136);
  }
  else
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    __str.__r_.__value_.__l.__size_ = v136;
    LODWORD(__str.__r_.__value_.__r.__words[2]) = *(_DWORD *)v170;
    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v170[3];
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v139;
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "");
  std::string::basic_string[abi:ne180100]<0>(v146, "");
  Espresso::dump_network(v151, &__str, (uint64_t)v148, (uint64_t)v146);
  if (v147 < 0)
    operator delete(v146[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v74)
  {
    v78 = (unint64_t *)&v74->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v172[0] = CFSTR("index");
  v80 = (void *)MEMORY[0x1E0CB3940];
  std::to_string(&__p, *a6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v80, "stringWithUTF8String:", p_p, a7);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  v173[0] = v82;
  v172[1] = CFSTR("path");
  if (*((char *)v135 + 23) >= 0)
    v83 = v135;
  else
    v83 = (uint64_t *)*v135;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v83);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v173[1] = v84;
  v172[2] = CFSTR("compute_path");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * a4) + 12));
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v173[2] = v85;
  v172[3] = CFSTR("engine");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * a4) + 8));
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v173[3] = v86;
  v172[4] = CFSTR("inputs");
  v87 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v173[4] = v87;
  v172[5] = CFSTR("outputs");
  v88 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v173[5] = v88;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v173, v172, 6);
  v89 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v90 = v155;
  v91 = *(_QWORD **)(v155 + 232);
  v92 = (_QWORD *)(v155 + 240);
  if (v91 != (_QWORD *)(v155 + 240))
  {
    do
    {
      v93 = (std::__shared_weak_count *)a1[1];
      v144 = (const Espresso::net *)*a1;
      v145 = v93;
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      v96 = v91 + 4;
      get_blob_info((__int128 *)v91 + 2, &v144);
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      v98 = v145;
      if (v145)
      {
        v99 = (unint64_t *)&v145->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      objc_msgSend(v89, "objectForKeyedSubscript:", CFSTR("inputs"));
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((char *)v91 + 55) < 0)
        v96 = (_QWORD *)*v96;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v96);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v101, "setObject:forKeyedSubscript:", v97, v102);

      v103 = (_QWORD *)v91[1];
      if (v103)
      {
        do
        {
          v104 = v103;
          v103 = (_QWORD *)*v103;
        }
        while (v103);
      }
      else
      {
        do
        {
          v104 = (_QWORD *)v91[2];
          v50 = *v104 == (_QWORD)v91;
          v91 = v104;
        }
        while (!v50);
      }
      v91 = v104;
    }
    while (v104 != v92);
    v90 = v155;
  }
  v105 = *(_QWORD **)(v90 + 256);
  v106 = (_QWORD *)(v90 + 264);
  if (v105 != (_QWORD *)(v90 + 264))
  {
    do
    {
      v107 = (std::__shared_weak_count *)a1[1];
      v142 = (const Espresso::net *)*a1;
      v143 = v107;
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      v110 = v105 + 4;
      get_blob_info((__int128 *)v105 + 2, &v142);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      v112 = v143;
      if (v143)
      {
        v113 = (unint64_t *)&v143->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      objc_msgSend(v89, "objectForKeyedSubscript:", CFSTR("outputs"));
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((char *)v105 + 55) < 0)
        v110 = (_QWORD *)*v110;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v110);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "setObject:forKeyedSubscript:", v111, v116);

      v117 = (_QWORD *)v105[1];
      if (v117)
      {
        do
        {
          v118 = v117;
          v117 = (_QWORD *)*v117;
        }
        while (v117);
      }
      else
      {
        do
        {
          v118 = (_QWORD *)v105[2];
          v50 = *v118 == (_QWORD)v105;
          v105 = v118;
        }
        while (!v50);
      }
      v105 = v118;
    }
    while (v118 != v106);
  }
  ++*a6;
  v119 = v89;

  v120 = (std::__shared_weak_count *)v156;
  if (v156)
  {
    v121 = (unint64_t *)(v156 + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v169);
  v123 = v168;
  if (v168)
  {
    v124 = (unint64_t *)&v168->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v167;
  if (v167)
  {
    v127 = (unint64_t *)&v167->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v166;
  if (v166)
  {
    v130 = (unint64_t *)&v166->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v165 < 0)
    operator delete(v164);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v162.__r_.__value_.__r.__words[2], v163);
  v132 = (std::__shared_weak_count *)v162.__r_.__value_.__l.__size_;
  if (v162.__r_.__value_.__l.__size_)
  {
    v133 = (unint64_t *)(v162.__r_.__value_.__l.__size_ + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v139 < 0)
    operator delete(v137);
  return v119;
}

void sub_1917B4C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  Espresso::sequential_builder::~sequential_builder((void **)&a52);
  if (a14 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

id get_blob_info(__int128 *a1, const Espresso::net **a2)
{
  uint64_t v4;
  char *v5;
  std::__shared_weak_count *v6;
  const Espresso::net *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t **v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void **v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v32;
  void *v33[2];
  uint64_t v34;
  __int128 *v35[5];
  void *v36;
  void *v37;
  __int128 v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  void *__p;
  void *v45;
  uint64_t v46;
  const Espresso::net *v47;
  std::__shared_weak_count *v48;
  int v49[7];
  int v50;
  _OWORD v51[2];
  uint64_t v52;
  void *v53;
  _BYTE *v54;
  _QWORD v55[11];
  _QWORD v56[14];

  v56[11] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)*a2 + 136;
  v35[0] = a1;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (unsigned __int8 *)a1, v35);
  Espresso::abstract_blob_container::shape((char *)v51, *((_QWORD *)v5 + 5));
  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v47 = *a2;
  v48 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v42[0] = v51[0];
  v42[1] = v51[1];
  v43 = v52;
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v53, (uint64_t)v54, (v54 - (_BYTE *)v53) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v49, v7, (const Espresso::layer_shape *)v42, 1);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = (uint64_t **)((char *)*a2 + 352);
  v35[0] = a1;
  v13 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a1, (uint64_t)&std::piecewise_construct, v35);
  v38 = *(_OWORD *)(v13 + 56);
  v40 = 0;
  v41 = 0;
  v39 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v39, *((const void **)v13 + 9), *((_QWORD *)v13 + 10), (uint64_t)(*((_QWORD *)v13 + 10) - *((_QWORD *)v13 + 9)) >> 2);
  v14 = (uint64_t)*a2 + 136;
  v35[0] = a1;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)a1, v35);
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v15 + 5) + 32))(*((_QWORD *)v15 + 5));
  v17 = HIDWORD(v38);
  compute_for_iosurface_params((uint64_t)v35, v49, v16, SHIDWORD(v38), v39, (uint64_t)v40);
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  if ((v50 + 1) >= 3)
    Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized layout");
  MEMORY[0x19401C808](v33, off_1E2DD6210[v50 + 1]);
  v55[0] = CFSTR("name");
  if (*((char *)a1 + 23) >= 0)
    v18 = (uint64_t *)a1;
  else
    v18 = *(uint64_t **)a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v18);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v56[0] = v32;
  v56[1] = CFSTR("iosurface");
  v55[1] = CFSTR("type");
  v55[2] = CFSTR("n");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v49[0]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v56[2] = v19;
  v55[3] = CFSTR("k");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v49[1]);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v56[3] = v20;
  v55[4] = CFSTR("d");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v49[2]);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v56[4] = v21;
  v55[5] = CFSTR("h");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v49[3]);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v56[5] = v22;
  v55[6] = CFSTR("w");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v49[4]);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v56[6] = v23;
  v55[7] = CFSTR("interleave");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v56[7] = v24;
  v55[8] = CFSTR("layout");
  if (v34 >= 0)
    v25 = v33;
  else
    v25 = (void **)v33[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v56[8] = v26;
  v55[9] = CFSTR("bytes_per_row");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v35[2]);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v56[9] = v27;
  v55[10] = CFSTR("compute_path");
  if (DWORD2(v38) == -1)
    v28 = v16;
  else
    v28 = DWORD2(v38);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v56[10] = v29;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, v55, 11);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  return v30;
}

void sub_1917B52BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;

  if (a16 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a28)
    operator delete(a28);
  if (a52)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__erase_unique<std::string>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != v3)
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(a1, (uint64_t)v3);
}

uint64_t Espresso::zephyr::node_t::on_removed_input(uint64_t this, uint64_t a2, Espresso::zephyr::value_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)*((_QWORD *)a3 + 7);
  v3 = (_QWORD *)*((_QWORD *)a3 + 8);
  if (v4 != v3)
  {
    while (*v4 != this || v4[1] != a2)
    {
      v4 += 2;
      if (v4 == v3)
        return this;
    }
  }
  v5 = v4 + 2;
  if (v4 != v3 && v5 != v3)
  {
    do
    {
      if (*v5 != this || v5[1] != a2)
      {
        *(_OWORD *)v4 = *(_OWORD *)v5;
        v4 += 2;
      }
      v5 += 2;
    }
    while (v5 != v3);
    v3 = (_QWORD *)*((_QWORD *)a3 + 8);
  }
  if (v4 != v3)
    *((_QWORD *)a3 + 8) = v4;
  return this;
}

uint64_t Espresso::zephyr::node_t::on_removed_output(uint64_t this, unint64_t a2, Espresso::zephyr::value_t *a3)
{
  if (*((_QWORD *)a3 + 10) == this)
    *((_QWORD *)a3 + 10) = 0;
  return this;
}

void Espresso::zephyr::node_t::on_added_input(Espresso::zephyr::node_t *this, uint64_t a2, Espresso::zephyr::value_t *a3)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;

  v7 = (_QWORD *)*((_QWORD *)a3 + 8);
  v6 = *((_QWORD *)a3 + 9);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)a3 + 7);
    v10 = ((uint64_t)v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = v6 - v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
    else
      v14 = 0;
    v15 = (_QWORD *)(v13 + 16 * v10);
    v16 = v13 + 16 * v14;
    *v15 = this;
    v15[1] = a2;
    v8 = v15 + 2;
    v18 = (char *)*((_QWORD *)a3 + 7);
    v17 = (char *)*((_QWORD *)a3 + 8);
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 2;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*((_QWORD *)a3 + 7);
    }
    *((_QWORD *)a3 + 7) = v15;
    *((_QWORD *)a3 + 8) = v8;
    *((_QWORD *)a3 + 9) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = this;
    v7[1] = a2;
    v8 = v7 + 2;
  }
  *((_QWORD *)a3 + 8) = v8;
}

uint64_t Espresso::zephyr::node_t::on_added_output(uint64_t this, unint64_t a2, Espresso::zephyr::value_t *a3)
{
  *((_QWORD *)a3 + 10) = this;
  return this;
}

uint64_t Espresso::zephyr::node_t::replace_input_with(Espresso::zephyr::node_t *this, Espresso::zephyr::value_t *a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  char v9;

  v4 = *((_QWORD *)this + 15);
  v3 = *((_QWORD *)this + 16);
  if (v3 == v4)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (*(Espresso::zephyr::value_t **)(v4 + 8 * v8) == a2)
      {
        Espresso::zephyr::node_t::replace_input_at(this, v8, a3);
        v4 = *((_QWORD *)this + 15);
        v3 = *((_QWORD *)this + 16);
        v9 = 1;
      }
      ++v8;
    }
    while (v8 < (v3 - v4) >> 3);
  }
  return v9 & 1;
}

void Espresso::zephyr::node_t::replace_input_at(Espresso::zephyr::node_t *this, unint64_t a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v3;
  Espresso::zephyr::value_t *v7;

  v3 = *((_QWORD *)this + 15);
  if (a2 >= (*((_QWORD *)this + 16) - v3) >> 3)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v7 = *(Espresso::zephyr::value_t **)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = a3;
  Espresso::zephyr::node_t::on_removed_input((uint64_t)this, a2, v7);
  Espresso::zephyr::node_t::on_added_input(this, a2, a3);
}

uint64_t Espresso::zephyr::node_t::replace_output_with(Espresso::zephyr::node_t *this, Espresso::zephyr::value_t *a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  char v9;

  v4 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 13);
  if (v3 == v4)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (*(Espresso::zephyr::value_t **)(v4 + 8 * v8) == a2)
      {
        Espresso::zephyr::node_t::replace_output_at((uint64_t)this, v8, a3);
        v4 = *((_QWORD *)this + 12);
        v3 = *((_QWORD *)this + 13);
        v9 = 1;
      }
      ++v8;
    }
    while (v8 < (v3 - v4) >> 3);
  }
  return v9 & 1;
}

uint64_t Espresso::zephyr::node_t::replace_output_at(uint64_t this, unint64_t a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 96);
  if (a2 >= (*(_QWORD *)(this + 104) - v3) >> 3)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v4 = *(_QWORD *)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = a3;
  if (*(_QWORD *)(v4 + 80) == this)
    *(_QWORD *)(v4 + 80) = 0;
  *((_QWORD *)a3 + 10) = this;
  return this;
}

void Espresso::zephyr::node_t::add_input(Espresso::zephyr::node_t *this, Espresso::zephyr::value_t *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = (_QWORD *)*((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 17);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *((_QWORD *)this + 15);
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v11);
    else
      v12 = 0;
    v13 = (_QWORD *)(v11 + 8 * v8);
    v14 = v11 + 8 * v12;
    *v13 = a2;
    v6 = v13 + 1;
    v16 = (char *)*((_QWORD *)this + 15);
    v15 = (char *)*((_QWORD *)this + 16);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 15) = v13;
    *((_QWORD *)this + 16) = v6;
    *((_QWORD *)this + 17) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 16) = v6;
  Espresso::zephyr::node_t::on_added_input(this, (((uint64_t)v6 - *((_QWORD *)this + 15)) >> 3) - 1, a2);
}

void Espresso::zephyr::node_t::add_output(Espresso::zephyr::node_t *this, Espresso::zephyr::value_t *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = (_QWORD *)*((_QWORD *)this + 13);
  v4 = *((_QWORD *)this + 14);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *((_QWORD *)this + 12);
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v11);
    else
      v12 = 0;
    v13 = (_QWORD *)(v11 + 8 * v8);
    v14 = v11 + 8 * v12;
    *v13 = a2;
    v6 = v13 + 1;
    v16 = (char *)*((_QWORD *)this + 12);
    v15 = (char *)*((_QWORD *)this + 13);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 12) = v13;
    *((_QWORD *)this + 13) = v6;
    *((_QWORD *)this + 14) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 13) = v6;
  *((_QWORD *)a2 + 10) = this;
}

uint64_t Espresso::zephyr::node_t::erase_input_at(Espresso::zephyr::node_t *this, uint64_t a2)
{
  char *v4;
  Espresso::zephyr::value_t **v5;
  Espresso::zephyr::value_t *v6;
  int64_t v7;

  v4 = (char *)*((_QWORD *)this + 16);
  v5 = (Espresso::zephyr::value_t **)(*((_QWORD *)this + 15) + 8 * a2);
  v6 = *v5;
  v7 = v4 - (char *)(v5 + 1);
  if (v4 != (char *)(v5 + 1))
    memmove(v5, v5 + 1, v4 - (char *)(v5 + 1));
  *((_QWORD *)this + 16) = (char *)v5 + v7;
  return Espresso::zephyr::node_t::on_removed_input((uint64_t)this, a2, v6);
}

_QWORD *Espresso::zephyr::node_t::erase_output_at(_QWORD *this, uint64_t a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int64_t v6;

  v2 = this;
  v3 = (char *)this[13];
  v4 = (char *)(this[12] + 8 * a2);
  v5 = *(_QWORD *)v4;
  v6 = v3 - (v4 + 8);
  if (v3 != v4 + 8)
    this = memmove(v4, v4 + 8, v3 - (v4 + 8));
  v2[13] = &v4[v6];
  if (*(_QWORD **)(v5 + 80) == v2)
    *(_QWORD *)(v5 + 80) = 0;
  return this;
}

double Espresso::zephyr::node_t::node_t(Espresso::zephyr::node_t *this, Espresso::zephyr::function_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  double result;

  v2 = (unint64_t *)*((_QWORD *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 3) = a2;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  return result;
}

{
  unint64_t *v2;
  unint64_t v3;
  double result;

  v2 = (unint64_t *)*((_QWORD *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 3) = a2;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  return result;
}

uint64_t Espresso::zephyr::node_t::node_t(uint64_t a1, uint64_t a2, uint64_t *a3, std::string *__str)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(unint64_t **)(a2 + 24);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::string::operator=((std::string *)(a1 + 144), __str);
  return a1;
}

void sub_1917B5B34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  uint64_t v9;

  if (*(char *)(v1 + 167) < 0)
    operator delete(*v3);
  v7 = *(void **)(v1 + 120);
  if (v7)
  {
    *(_QWORD *)(v1 + 128) = v7;
    operator delete(v7);
  }
  v8 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 104) = v8;
    operator delete(v8);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v2);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v4);
  v9 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr::node_t::remove_from_graphs(Espresso::zephyr::node_t *this)
{
  unint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t **v22;
  int v23;
  __int128 v25;
  __int128 v26;
  float v27;

  v25 = 0u;
  v26 = 0u;
  v27 = *((float *)this + 22);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v25, *((_QWORD *)this + 8));
  v3 = (_QWORD *)*((_QWORD *)this + 9);
  if (v3)
  {
    v4 = *((_QWORD *)&v25 + 1);
    do
    {
      v5 = v3[2];
      v6 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
      v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v6 >> 47) ^ v6);
      v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v4)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v1 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
          if (v8 >= v4)
            v1 = v8 % v4;
        }
        else
        {
          v1 = v8 & (v4 - 1);
        }
        v10 = *(_QWORD **)(v25 + 8 * v1);
        if (v10)
        {
          for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
          {
            v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v5)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v4)
                  v12 %= v4;
              }
              else
              {
                v12 &= v4 - 1;
              }
              if (v12 != v1)
                break;
            }
          }
        }
      }
      v13 = operator new(0x18uLL);
      *v13 = 0;
      v13[1] = v8;
      v13[2] = v3[2];
      v14 = (float)(unint64_t)(*((_QWORD *)&v26 + 1) + 1);
      if (!v4 || (float)(v27 * (float)v4) < v14)
      {
        v15 = (v4 & (v4 - 1)) != 0;
        if (v4 < 3)
          v15 = 1;
        v16 = v15 | (2 * v4);
        v17 = vcvtps_u32_f32(v14 / v27);
        if (v16 <= v17)
          v18 = v17;
        else
          v18 = v16;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v25, v18);
        v4 = *((_QWORD *)&v25 + 1);
        if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
        {
          if (v8 >= *((_QWORD *)&v25 + 1))
            v1 = v8 % *((_QWORD *)&v25 + 1);
          else
            v1 = v8;
        }
        else
        {
          v1 = (*((_QWORD *)&v25 + 1) - 1) & v8;
        }
      }
      v19 = v25;
      v20 = *(_QWORD **)(v25 + 8 * v1);
      if (v20)
      {
        *v13 = *v20;
      }
      else
      {
        *v13 = v26;
        *(_QWORD *)&v26 = v13;
        *(_QWORD *)(v19 + 8 * v1) = &v26;
        if (!*v13)
          goto LABEL_40;
        v21 = *(_QWORD *)(*v13 + 8);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v21 >= v4)
            v21 %= v4;
        }
        else
        {
          v21 &= v4 - 1;
        }
        v20 = (_QWORD *)(v25 + 8 * v21);
      }
      *v20 = v13;
LABEL_40:
      ++*((_QWORD *)&v26 + 1);
LABEL_41:
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  v22 = (uint64_t **)v26;
  if ((_QWORD)v26)
  {
    v23 = 0;
    do
    {
      v23 |= (*(uint64_t (**)(uint64_t *, Espresso::zephyr::node_t *))(*v22[2] + 24))(v22[2], this);
      v22 = (uint64_t **)*v22;
    }
    while (v22);
  }
  else
  {
    LOBYTE(v23) = 0;
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v25);
  return v23 & 1;
}

void sub_1917B5E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr::node_t::remove_if_unused(Espresso::zephyr::node_t *this)
{
  uint64_t i;

  for (i = *((_QWORD *)this + 12); ; i += 8)
  {
    if (i == *((_QWORD *)this + 13))
      return Espresso::zephyr::node_t::remove_from_graphs(this);
    if (*(_QWORD *)(*(_QWORD *)i + 56) != *(_QWORD *)(*(_QWORD *)i + 64))
      break;
  }
  return 0;
}

void Espresso::ANECompilerEngine::split_kernel::~split_kernel(Espresso::ANECompilerEngine::split_kernel *this)
{
  void **v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D74760;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D748C0;
  v3 = (void *)*((_QWORD *)this + 69);
  if (v3)
  {
    *((_QWORD *)this + 70) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D74760;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D748C0;
  v3 = (void *)*((_QWORD *)this + 69);
  if (v3)
  {
    *((_QWORD *)this + 70) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::split_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 336), a3, a4, a5);
}

void Espresso::ANECompilerEngine::split_kernel::compile(Espresso::ANECompilerEngine::split_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const std::string *v21;
  void *v22;
  __CFString *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int v27;
  std::string *v28;
  std::string *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const char *v42;
  std::__shared_weak_count *v43;
  Espresso::ANECompilerEngine::compiler *v44;
  void *v45[2];
  char v46;
  uint64_t v47;
  uint64_t v48;
  void *__p;
  char v50;
  id v51;
  __CFString *v52;
  id v53;
  std::string v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  id v59;
  uint64_t v60;
  std::string *v61;
  _QWORD v62[4];
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void **v66;
  std::string *v67;
  std::string *v68;
  unint64_t v69;
  _QWORD *v70;

  v64 = 0;
  v65 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v65 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v64 = v7) == 0))
  {
    v42 = "Inconsistent state: null network";
    goto LABEL_59;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v42 = "Inconsistent state: blob_storage";
LABEL_59:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v42);
  }
  v8 = v7 + 136;
  v45[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v45[0], (__int128 **)v45);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v62[3] = *((_QWORD *)v9 + 5);
  v63 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v45[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v45);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v62[1] = *((_QWORD *)v13 + 5);
  v62[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v60 = 0;
  v61 = 0;
  v62[0] = 0;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v54, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
  v43 = v14;
  v44 = a2;
  v17 = *((int *)this + 70);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a3[4] - (_BYTE *)a3[3]) >> 3) + 1 != v17)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Number of top blobs doesn't match num split outputs");
  if ((int)v17 >= 1)
  {
    v18 = 0;
    v19 = 0;
    v20 = -24;
    do
    {
      if (v18)
        v21 = (const std::string *)((char *)a3[3] + v20);
      else
        v21 = (const std::string *)a3;
      std::string::operator=(&v54, v21);
      v22 = (void *)objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v45, (id *)&v54.__r_.__value_.__l.__data_);
      v23 = v52;
      v52 = CFSTR("InputView");

      v24 = *((unsigned int *)this + 71);
      if ((_DWORD)v24 != 2)
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("unsupported split axis %s", v24);
      objc_msgSend(v22, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("Dimension"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v19);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setObject:forKeyedSubscript:", v25, CFSTR("Offset"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 69) + 4 * v18));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setObject:forKeyedSubscript:", v26, CFSTR("Size"));

      v27 = *(_DWORD *)(*((_QWORD *)this + 69) + 4 * v18);
      objc_storeStrong(&v53, v22);
      v28 = v61;
      if ((unint64_t)v61 >= v62[0])
      {
        v30 = 0x8E38E38E38E38E39 * (((uint64_t)v61 - v60) >> 4);
        v31 = v30 + 1;
        if (v30 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((v62[0] - v60) >> 4) > v31)
          v31 = 0x1C71C71C71C71C72 * ((v62[0] - v60) >> 4);
        if (0x8E38E38E38E38E39 * ((v62[0] - v60) >> 4) >= 0xE38E38E38E38E3)
          v32 = 0x1C71C71C71C71C7;
        else
          v32 = v31;
        v70 = v62;
        if (v32)
          v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v32);
        else
          v33 = 0;
        v66 = (void **)v32;
        v67 = (std::string *)(v32 + 144 * v30);
        v68 = v67;
        v69 = v32 + 144 * v33;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v67, (uint64_t)v45);
        v68 += 6;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v60, &v66);
        v29 = v61;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v66);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v61, (uint64_t)v45);
        v29 = v28 + 6;
      }
      v61 = v29;

      if (v50 < 0)
        operator delete(__p);
      v66 = (void **)&v48;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
      v66 = (void **)&v47;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
      if (v46 < 0)
        operator delete(v45[0]);
      v19 = (v27 + v19);

      ++v18;
      v20 += 24;
    }
    while (v18 < *((int *)this + 70));
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 42) + 24))((char *)this + 336, v44, &v60);

  if (v58 < 0)
    operator delete(v57);
  v45[0] = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
  v45[0] = &v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  v45[0] = &v60;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v36 = v63;
  if (v63)
  {
    v37 = (unint64_t *)&v63->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v65;
  if (v65)
  {
    v40 = (unint64_t *)&v65->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1917B646C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;

  a15 = (void **)(v15 - 200);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 144);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::split_kernel::compile(Espresso::ANECompilerEngine::split_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::split_kernel::compile((Espresso::ANECompilerEngine::split_kernel *)((char *)this - 336), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::split_kernel::~split_kernel(Espresso::ANECompilerEngine::split_kernel *this)
{
  Espresso::base_kernel *v2;
  void *v3;

  v2 = (Espresso::ANECompilerEngine::split_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D74760;
  *(_QWORD *)this = &unk_1E2D748C0;
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;
  void *v3;

  v2 = (Espresso::ANECompilerEngine::split_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D74760;
  *(_QWORD *)this = &unk_1E2D748C0;
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::split_nd_kernel::~split_nd_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 100);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 100);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::split_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 800), a3, a4, a5);
}

void Espresso::ANECompilerEngine::split_nd_kernel::compile(Espresso::ANECompilerEngine::split_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  const void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int *v17;
  __CFString *ANECAxisForNDAxis;
  Espresso::ANECompilerEngine *v19;
  NSString *v20;
  Espresso::ANECompilerEngine *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  __CFString *v27;
  void *v28;
  void *v29;
  int v30;
  std::string *v31;
  std::string *v32;
  unint64_t v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  __CFString *v44;
  void *v45;
  void *v46;
  std::string *v47;
  std::string *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const char *v61;
  std::__shared_weak_count *v62;
  Espresso::ANECompilerEngine::compiler *v63;
  Espresso::ANECompilerEngine *v64;
  __CFString *v65;
  std::string v66;
  _BYTE v67[24];
  _BYTE v68[32];
  void *__p;
  char v70;
  id v71;
  __CFString *v72;
  id v73[2];
  uint64_t v74;
  std::string *v75;
  _QWORD v76[4];
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void **v80;
  std::string *v81;
  std::string *v82;
  void **v83;
  _QWORD *v84;

  v78 = 0;
  v79 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v79 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v78 = v7) == 0))
  {
    v61 = "Inconsistent state: null network";
    goto LABEL_90;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v61 = "Inconsistent state: blob_storage";
LABEL_90:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v61);
  }
  v66.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v66.__r_.__value_.__l.__data_, (__int128 **)&v66);
  v10 = (const void *)*((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v76[3] = v10;
  v77 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)&v66);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v76[1] = *((_QWORD *)v13 + 5);
  v76[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  ANECAxisForNDAxis = (__CFString *)Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)(*((_DWORD *)this + 70)+ (v17[46] & (*((int *)this + 70) >> 31))), (int)v17[46], *(_BYTE *)(v7 + 1281));
  v74 = 0;
  v75 = 0;
  v76[0] = 0;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  v19 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v21 = v19;
  v63 = a2;
  if (ANECAxisForNDAxis == CFSTR("Width"))
  {
    v22 = v17 + 44;
  }
  else if (ANECAxisForNDAxis == CFSTR("Height"))
  {
    v22 = v17 + 43;
  }
  else if (ANECAxisForNDAxis == CFSTR("Channel"))
  {
    v22 = v17 + 41;
  }
  else
  {
    if (ANECAxisForNDAxis != CFSTR("Batch"))
    {
      if (ANECAxisForNDAxis != CFSTR("Depth"))
        Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized ANEC axis.");
      if (!Espresso::ANECompilerEngine::is_mix(v19, v20))
      {
        v22 = v17 + 42;
        goto LABEL_23;
      }
LABEL_91:
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported axis for split_nd.");
    }
    if ((Espresso::ANECompilerEngine::is_mix(v19, v20) & 1) != 0)
      goto LABEL_91;
    v22 = v17 + 40;
  }
LABEL_23:
  v65 = ANECAxisForNDAxis;
  v62 = v14;
  v64 = v21;
  if (*((_DWORD *)this + 72))
  {
    v23 = 0;
    v24 = 0;
    v25 = (char *)this + 288;
    do
    {
      if (!*(_DWORD *)&v25[4 * v23])
        break;
      v26 = (void *)objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v66.__r_.__value_.__l.__data_, (id *)a3);
      v27 = v72;
      v72 = CFSTR("InputView");

      objc_msgSend(v26, "setObject:forKeyedSubscript:", ANECAxisForNDAxis, CFSTR("Dimension"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v24);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setObject:forKeyedSubscript:", v28, CFSTR("Offset"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)&v25[4 * v23]);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setObject:forKeyedSubscript:", v29, CFSTR("Size"));

      v30 = *(_DWORD *)&v25[4 * v23];
      objc_storeStrong(v73, v26);
      if (v23)
        std::string::operator=(&v66, (const std::string *)(*((_QWORD *)a3 + 3) + 24 * (v23 - 1)));
      v31 = v75;
      if ((unint64_t)v75 >= v76[0])
      {
        v33 = 0x8E38E38E38E38E39 * (((uint64_t)v75 - v74) >> 4);
        v34 = v33 + 1;
        if (v33 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((v76[0] - v74) >> 4) > v34)
          v34 = 0x1C71C71C71C71C72 * ((v76[0] - v74) >> 4);
        v35 = (void **)(0x8E38E38E38E38E39 * ((v76[0] - v74) >> 4) >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v34);
        v84 = v76;
        if (v35)
          v35 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v35);
        else
          v36 = 0;
        v80 = v35;
        v81 = (std::string *)&v35[18 * v33];
        v82 = v81;
        v83 = &v35[18 * v36];
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v81, (uint64_t)&v66);
        v82 += 6;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v74, &v80);
        v32 = v75;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v80);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v75, (uint64_t)&v66);
        v32 = v31 + 6;
      }
      v75 = v32;

      if (v70 < 0)
        operator delete(__p);
      v80 = (void **)v68;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v80);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v24 = (v30 + v24);

      ++v23;
    }
    while (v23 != 128);
  }
  else
  {
    v37 = *((_DWORD *)this + 71);
    if (v37 >= 1)
    {
      v38 = 0;
      v39 = 0;
      v40 = *v22;
      v41 = -24;
      v42 = ((int)v40 / v37);
      do
      {
        v43 = (void *)objc_opt_new();
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v66.__r_.__value_.__l.__data_, (id *)a3);
        v44 = v72;
        v72 = CFSTR("InputView");

        objc_msgSend(v43, "setObject:forKeyedSubscript:", v65, CFSTR("Dimension"));
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v38);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v45, CFSTR("Offset"));

        if (v39 == *((_DWORD *)this + 71) - 1)
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v40);
        else
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v42);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v46, CFSTR("Size"));

        objc_storeStrong(v73, v43);
        if (v39)
          std::string::operator=(&v66, (const std::string *)(*((_QWORD *)a3 + 3) + v41));
        v47 = v75;
        if ((unint64_t)v75 >= v76[0])
        {
          v49 = 0x8E38E38E38E38E39 * (((uint64_t)v75 - v74) >> 4);
          v50 = v49 + 1;
          if (v49 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x1C71C71C71C71C72 * ((v76[0] - v74) >> 4) > v50)
            v50 = 0x1C71C71C71C71C72 * ((v76[0] - v74) >> 4);
          if (0x8E38E38E38E38E39 * ((v76[0] - v74) >> 4) >= 0xE38E38E38E38E3)
            v51 = 0x1C71C71C71C71C7;
          else
            v51 = v50;
          v84 = v76;
          if (v51)
            v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v51);
          else
            v52 = 0;
          v80 = (void **)v51;
          v81 = (std::string *)(v51 + 144 * v49);
          v82 = v81;
          v83 = (void **)(v51 + 144 * v52);
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v81, (uint64_t)&v66);
          v82 += 6;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v74, &v80);
          v48 = v75;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v80);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v75, (uint64_t)&v66);
          v48 = v47 + 6;
        }
        v75 = v48;

        if (v70 < 0)
          operator delete(__p);
        v80 = (void **)v68;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v80);
        v80 = (void **)v67;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v80);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);

        ++v39;
        v41 += 24;
        v40 = (v40 - v42);
        v38 = (v38 + v42);
      }
      while (v39 < *((int *)this + 71));
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 100) + 24))((char *)this + 800, v63, &v74);

  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  if (v62)
  {
    v53 = (unint64_t *)&v62->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v55 = v77;
  if (v77)
  {
    v56 = (unint64_t *)&v77->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v79;
  if (v79)
  {
    v59 = (unint64_t *)&v79->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_1917B6E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  a18 = (void **)(v18 - 200);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 144);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::split_nd_kernel::compile(Espresso::ANECompilerEngine::split_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::split_nd_kernel::compile((Espresso::ANECompilerEngine::split_nd_kernel *)((char *)this - 800), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::split_nd_kernel::~split_nd_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 100);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 100);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::zephyr::ordered_block_t::~ordered_block_t(Espresso::zephyr::ordered_block_t *this)
{
  *(_QWORD *)this = &off_1E2DA4130;
  std::__list_imp<int>::clear((_QWORD *)this + 14);
  Espresso::zephyr::graph_t::~graph_t(this);
}

{
  *(_QWORD *)this = &off_1E2DA4130;
  std::__list_imp<int>::clear((_QWORD *)this + 14);
  Espresso::zephyr::graph_t::~graph_t(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::zephyr::ordered_block_t::insert_node(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::node_t *a2)
{
  Espresso::zephyr::ordered_block_t *v3;
  _QWORD *result;
  uint64_t v5;

  v3 = this;
  Espresso::zephyr::graph_t::insert_node((unint64_t)this, a2);
  result = operator new(0x18uLL);
  v5 = *((_QWORD *)v3 + 14);
  v3 = (Espresso::zephyr::ordered_block_t *)((char *)v3 + 112);
  result[1] = v3;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *(_QWORD *)v3 = result;
  ++*((_QWORD *)v3 + 2);
  return result;
}

BOOL Espresso::zephyr::ordered_block_t::remove_node(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::node_t *a2)
{
  _BOOL8 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;

  v4 = Espresso::zephyr::graph_t::remove_node(this, a2);
  v5 = (_QWORD *)((char *)this + 112);
  v17[0] = v17;
  v17[1] = v17;
  v18 = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 15);
  if (v6 != (_QWORD *)((char *)this + 112))
  {
    v7 = 0;
    do
    {
      v8 = (_QWORD *)v6[1];
      if ((Espresso::zephyr::node_t *)v6[2] == a2)
      {
        while (v8 != v5)
        {
          v9 = v8[2] == (_QWORD)a2;
          if ((Espresso::zephyr::node_t *)v8[2] != a2)
            goto LABEL_10;
          v8 = (_QWORD *)v8[1];
        }
        v9 = 1;
        v8 = (_QWORD *)((char *)this + 112);
LABEL_10:
        if (v6 != v8)
        {
          v10 = (_QWORD *)*v8;
          if (v17 != v5)
          {
            if (v10 == v6)
            {
              v13 = 1;
            }
            else
            {
              v11 = -1;
              v12 = v6;
              do
              {
                v12 = (_QWORD *)v12[1];
                ++v11;
              }
              while (v12 != v10);
              v13 = v11 + 2;
            }
            *((_QWORD *)this + 16) -= v13;
            v7 += v13;
            v18 = v7;
          }
          v14 = *v6;
          *(_QWORD *)(v14 + 8) = v10[1];
          *(_QWORD *)v10[1] = v14;
          v15 = v17[0];
          *(_QWORD *)(v17[0] + 8) = v6;
          *v6 = v15;
          v17[0] = v10;
          v10[1] = v17;
        }
        if (!v9)
          v8 = (_QWORD *)v8[1];
      }
      v6 = v8;
    }
    while (v8 != v5);
  }
  std::__list_imp<int>::clear(v17);
  return v4;
}

Espresso::zephyr::graph_t *Espresso::zephyr::ordered_block_t::copy_to_standalone_function(Espresso::zephyr::graph_t *this, Espresso::zephyr::function_t *a2)
{
  Espresso::zephyr::graph_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  Espresso::zephyr::node_t *v23;
  Espresso::zephyr::value_t **v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  Espresso::zephyr::node_t *v31;
  Espresso::zephyr::value_t **v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  Espresso::zephyr::ordered_block_t *v37;
  _QWORD *j;
  _QWORD *v39;
  char *v40;
  unint64_t *v41;
  unint64_t *v42;
  Espresso::zephyr::value_t **v43;
  unint64_t *v44;
  unint64_t *v45;
  Espresso::zephyr::value_t **v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  Espresso::zephyr::ordered_block_t *v49;
  std::__shared_weak_count *v50;
  uint64_t **i;
  uint64_t *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;

  if (*((_QWORD *)this + 16))
  {
    v3 = this;
    v4 = (_QWORD *)((char *)this + 112);
    v54 = 0u;
    v55 = 0u;
    v56 = 1065353216;
    v5 = (_QWORD *)*((_QWORD *)this + 15);
    if (v5 == (_QWORD *)((char *)this + 112))
    {
      v52 = 0;
      v53 = 0;
      i = &v52;
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v5[2];
        v7 = (unint64_t *)v6[15];
        v8 = (unint64_t *)v6[16];
        while (v7 != v8)
        {
          std::__hash_table<Espresso::zephyr::value_t *,std::hash<Espresso::zephyr::value_t *>,std::equal_to<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>((float *)&v54, *v7, *v7);
          ++v7;
        }
        v10 = (unint64_t *)v6[12];
        v9 = (unint64_t *)v6[13];
        while (v10 != v9)
        {
          std::__hash_table<Espresso::zephyr::value_t *,std::hash<Espresso::zephyr::value_t *>,std::equal_to<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>((float *)&v54, *v10, *v10);
          ++v10;
        }
        v5 = (_QWORD *)v5[1];
      }
      while (v5 != v4);
      v11 = (_QWORD *)v55;
      v52 = 0;
      v53 = 0;
      for (i = &v52; v11; v11 = (_QWORD *)*v11)
      {
        v12 = v11[2];
        v13 = Espresso::zephyr::function_t::new_value((uint64_t)a2, v12 + 32);
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v13 + 1) + 16))(*((_QWORD *)v13 + 1), *(_QWORD *)(v12 + 8));
        v14 = v52;
        v15 = &v52;
        v16 = &v52;
        if (v52)
        {
          while (1)
          {
            while (1)
            {
              v16 = (uint64_t **)v14;
              v17 = v14[4];
              if (v12 >= v17)
                break;
              v14 = *v16;
              v15 = v16;
              if (!*v16)
                goto LABEL_18;
            }
            if (v17 >= v12)
              break;
            v14 = v16[1];
            if (!v14)
            {
              v15 = v16 + 1;
              goto LABEL_18;
            }
          }
          v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_18:
          v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v12;
          v18[5] = 0;
          *v18 = 0;
          v18[1] = 0;
          v18[2] = (uint64_t)v16;
          *v15 = v18;
          v19 = v18;
          if (*i)
          {
            i = (uint64_t **)*i;
            v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v52, v19);
          ++v53;
        }
        v18[5] = (uint64_t)v13;
      }
    }
    v20 = Espresso::zephyr::graph_t::live_inputs(v3);
    v21 = v20 + 1;
    v22 = (_QWORD *)*v20;
    if ((_QWORD *)*v20 != v20 + 1)
    {
      do
      {
        v23 = (Espresso::zephyr::node_t *)*((_QWORD *)a2 + 4);
        v24 = (Espresso::zephyr::value_t **)std::map<unsigned long,unsigned long>::at(v52, v22[4]);
        Espresso::zephyr::node_t::add_output(v23, *v24);
        v25 = (_QWORD *)v22[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v22[2];
            v27 = *v26 == (_QWORD)v22;
            v22 = v26;
          }
          while (!v27);
        }
        v22 = v26;
      }
      while (v26 != v21);
    }
    v28 = Espresso::zephyr::graph_t::live_outputs(v3);
    v29 = v28 + 1;
    v30 = (_QWORD *)*v28;
    if ((_QWORD *)*v28 != v28 + 1)
    {
      do
      {
        v31 = (Espresso::zephyr::node_t *)*((_QWORD *)a2 + 6);
        v32 = (Espresso::zephyr::value_t **)std::map<unsigned long,unsigned long>::at(v52, v30[4]);
        Espresso::zephyr::node_t::add_output(v31, *v32);
        v33 = (_QWORD *)v30[1];
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = (_QWORD *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (_QWORD *)v30[2];
            v27 = *v34 == (_QWORD)v30;
            v30 = v34;
          }
          while (!v27);
        }
        v30 = v34;
      }
      while (v34 != v29);
    }
    std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::function_t *,void>(&v49, (uint64_t)a2);
    v35 = (uint64_t *)((char *)a2 + 64);
    v37 = v49;
    v36 = v50;
    std::list<std::shared_ptr<Espresso::zephyr::ordered_block_t>>::push_back(v35, (uint64_t)v49, (uint64_t)v50);
    for (j = (_QWORD *)*((_QWORD *)v3 + 15); j != v4; j = (_QWORD *)j[1])
    {
      v39 = (_QWORD *)j[2];
      v40 = Espresso::zephyr::function_t::new_detached_node(v39[3], (uint64_t)(v39 + 18));
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v40 + 1) + 16))(*((_QWORD *)v40 + 1), v39[1]);
      v41 = (unint64_t *)v39[15];
      v42 = (unint64_t *)v39[16];
      while (v41 != v42)
      {
        v43 = (Espresso::zephyr::value_t **)std::map<unsigned long,unsigned long>::at(v52, *v41);
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v40, *v43);
        ++v41;
      }
      v45 = (unint64_t *)v39[12];
      v44 = (unint64_t *)v39[13];
      while (v45 != v44)
      {
        v46 = (Espresso::zephyr::value_t **)std::map<unsigned long,unsigned long>::at(v52, *v45);
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v40, *v46);
        ++v45;
      }
      Espresso::zephyr::ordered_block_t::insert_node_after(v37, (Espresso::zephyr::node_t *)v40, 0);
    }
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    std::__tree<int>::destroy(v52);
    return (Espresso::zephyr::graph_t *)std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v54);
  }
  return this;
}

void sub_1917B7528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__tree<int>::destroy(v7);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::zephyr::ordered_block_t::insert_node_after(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3)
{
  uint64_t *v6;
  uint64_t i;
  uint64_t *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  Espresso::zephyr::graph_t::insert_node((unint64_t)this, a2);
  v6 = (uint64_t *)((char *)this + 112);
  for (i = *((_QWORD *)this + 15); (uint64_t *)i != v6; i = *(_QWORD *)(i + 8))
  {
    if (*(Espresso::zephyr::node_t **)(i + 16) == a3)
    {
      if (a3 && (uint64_t *)i != v6)
      {
        v8 = *(uint64_t **)(i + 8);
        result = operator new(0x18uLL);
        result[2] = a2;
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = result;
        *result = v10;
        *v8 = (uint64_t)result;
        result[1] = v8;
        goto LABEL_9;
      }
      break;
    }
  }
  result = operator new(0x18uLL);
  result[1] = v6;
  result[2] = a2;
  v11 = *v6;
  *result = *v6;
  *(_QWORD *)(v11 + 8) = result;
  *v6 = (uint64_t)result;
LABEL_9:
  ++*((_QWORD *)this + 16);
  return result;
}

_QWORD *Espresso::zephyr::ordered_block_t::insert_node_before(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3)
{
  char *v6;
  Espresso::zephyr::ordered_block_t *v7;
  char *v8;
  _QWORD *result;
  uint64_t v10;

  Espresso::zephyr::graph_t::insert_node((unint64_t)this, a2);
  v6 = (char *)this + 112;
  v7 = (Espresso::zephyr::ordered_block_t *)*((_QWORD *)this + 15);
  if (v7 == (Espresso::zephyr::ordered_block_t *)((char *)this + 112))
    goto LABEL_9;
  v8 = (char *)*((_QWORD *)this + 15);
  while (*((Espresso::zephyr::node_t **)v8 + 2) != a3)
  {
    v8 = (char *)*((_QWORD *)v8 + 1);
    if (v8 == v6)
      goto LABEL_9;
  }
  if (!a3 || v8 == v6)
  {
LABEL_9:
    result = operator new(0x18uLL);
    result[1] = v7;
    result[2] = a2;
    *result = v6;
    *(_QWORD *)v7 = result;
    *((_QWORD *)this + 15) = result;
  }
  else
  {
    result = operator new(0x18uLL);
    result[2] = a2;
    v10 = *(_QWORD *)v8;
    *(_QWORD *)(v10 + 8) = result;
    *result = v10;
    *(_QWORD *)v8 = result;
    result[1] = v8;
  }
  ++*((_QWORD *)this + 16);
  return result;
}

uint64_t Espresso::zephyr::ordered_block_t::first_use(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::value_t *a2)
{
  char *v2;
  uint64_t i;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = (char *)this + 112;
  for (i = *((_QWORD *)this + 15); ; i = *(_QWORD *)(i + 8))
  {
    if ((char *)i == v2)
      return 0;
    result = *(_QWORD *)(i + 16);
    v6 = *(_QWORD *)(result + 120);
    v5 = *(_QWORD *)(result + 128);
    v7 = v5 - v6;
    if (v5 != v6)
      break;
LABEL_8:
    ;
  }
  v8 = 0;
  v9 = v7 >> 3;
  if (v9 <= 1)
    v9 = 1;
  while (*(Espresso::zephyr::value_t **)(v6 + 8 * v8) != a2)
  {
    if (v9 == ++v8)
      goto LABEL_8;
  }
  return result;
}

uint64_t Espresso::zephyr::ordered_block_t::match_transform(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v11;

  v2 = (uint64_t *)(a1 + 120);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = a1 + 112;
  if (v3 == a1 + 112)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v11 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
        std::__throw_bad_function_call[abi:ne180100]();
      v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v11);
      v9 = (uint64_t *)(v3 + 8);
      if (v8)
        v9 = v2;
      v6 |= v8;
      v3 = *v9;
    }
    while (*v9 != v4);
  }
  return v6 & 1;
}

uint64_t Espresso::zephyr::ordered_block_t::match_simple_chain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t matched;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E2DB2CB8;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = &v12;
  v14 = v7;
  matched = Espresso::zephyr::ordered_block_t::match_transform(a1, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  return matched;
}

void sub_1917B78AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DB2CB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB2CB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *a2;
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<Espresso::net *>::reserve(&__p, **(_QWORD **)(a1 + 24));
  if (**(_QWORD **)(a1 + 24))
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v28 = v3;
      v29 = v4;
      v6 = *(_QWORD *)(v5 + 24);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v29, &v28) & 1) == 0)
        break;
      v7 = v26;
      if ((unint64_t)v26 >= v27)
      {
        v9 = (char *)__p;
        v10 = (v26 - (_BYTE *)__p) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v12 = v27 - (_QWORD)__p;
        if ((uint64_t)(v27 - (_QWORD)__p) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13);
        else
          v14 = 0;
        v15 = (char *)(v13 + 8 * v10);
        *(_QWORD *)v15 = v3;
        v8 = v15 + 8;
        if (v7 != v9)
        {
          do
          {
            v16 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v7 != v9);
          v7 = (char *)__p;
        }
        __p = v15;
        v27 = v13 + 8 * v14;
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_QWORD *)v26 = v3;
        v8 = v7 + 8;
      }
      v26 = v8;
      v17 = **(_QWORD **)(a1 + 24);
      if (v4 == v17 - 1)
        goto LABEL_26;
      v18 = *(char **)(v3 + 96);
      v19 = *(char **)(v3 + 104);
      if (v19 - v18 != 8)
        break;
      if (v19 == v18)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v21 = (uint64_t **)(*(_QWORD *)v18 + 56);
      v20 = *v21;
      if ((char *)v21[1] - (char *)*v21 != 16)
        break;
      v3 = *v20;
      if (++v4 >= v17)
        goto LABEL_26;
    }
    v23 = 0;
  }
  else
  {
LABEL_26:
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
    if (!v22)
      std::__throw_bad_function_call[abi:ne180100]();
    v23 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v22 + 48))(v22, &__p);
  }
  if (__p)
  {
    v26 = (char *)__p;
    operator delete(__p);
  }
  return v23;
}

void sub_1917B7B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr15ordered_block_t18match_simple_chainEmNSt3__18functionIFbmPNS0_6node_tEEEENS3_IFbRKNS2_6vectorIS5_NS2_9allocatorIS5_EEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

_QWORD *Espresso::zephyr::ordered_block_t::topological_order_coalescing_predicate(Espresso::zephyr::graph_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  _QWORD *i;
  unint64_t v26;
  unint64_t **v27;
  unint64_t **v28;
  char v29;
  unint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t **v39;
  unint64_t **v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  Espresso::zephyr::node_t *v55;
  Espresso::zephyr::value_t **v56;
  Espresso::zephyr::value_t **v57;
  Espresso::zephyr::value_t *v58;
  _QWORD *v59;
  unint64_t v60;
  Espresso::zephyr::node_t *use;
  _QWORD *v62;
  unint64_t v64;
  unint64_t *v65;
  _QWORD v66[2];
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD **v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[2];

  v76[1] = *MEMORY[0x1E0C80C00];
  v73 = &v73;
  v74 = &v73;
  v75 = 0;
  v71 = 0;
  v72 = 0;
  v70 = &v71;
  v64 = *((_QWORD *)a1 + 13);
  v4 = Espresso::zephyr::graph_t::live_inputs(a1);
  v68 = 0;
  v69 = 0;
  v67 = &v68;
  v5 = v4 + 1;
  v6 = (_QWORD *)*v4;
  if ((_QWORD *)*v4 != v4 + 1)
  {
    do
    {
      v7 = (unint64_t *)&v68;
      if (v67 == &v68)
        goto LABEL_13;
      v8 = v68;
      v9 = &v68;
      if (v68)
      {
        do
        {
          v7 = (unint64_t *)v8;
          v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (unint64_t *)v9[2];
          v44 = *v7 == (_QWORD)v9;
          v9 = (uint64_t **)v7;
        }
        while (v44);
      }
      v10 = (_QWORD *)v7[4];
      if (v10)
        v10 = (_QWORD *)*v10;
      v11 = (unint64_t *)v6[4];
      v12 = v11 ? *v11 : 0;
      if ((unint64_t)v10 < v12)
      {
LABEL_13:
        if (v68)
        {
          v65 = v7;
          v13 = (uint64_t **)(v7 + 1);
        }
        else
        {
          v65 = (unint64_t *)&v68;
          v13 = &v68;
        }
      }
      else
      {
        v13 = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>((uint64_t)&v67, &v65, v11);
      }
      if (!*v13)
      {
        v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v6[4];
        v15 = v65;
        *v14 = 0;
        v14[1] = 0;
        v14[2] = (uint64_t)v15;
        *v13 = v14;
        if (*v67)
        {
          v67 = (uint64_t **)*v67;
          v14 = *v13;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v68, v14);
        ++v69;
      }
      v16 = (_QWORD *)v6[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v6[2];
          v44 = *v17 == (_QWORD)v6;
          v6 = v17;
        }
        while (!v44);
      }
      v6 = v17;
    }
    while (v17 != v5);
  }
  if (v72 < v64)
  {
    v18 = (_QWORD *)((char *)a1 + 112);
    do
    {
      v19 = 0;
      v20 = 0;
      v76[0] = 1;
      do
      {
        v21 = v19;
        v22 = (_QWORD *)*((_QWORD *)a1 + 15);
        if (v22 == v18)
          goto LABEL_62;
        v23 = *((_DWORD *)v76 + v20);
        do
        {
          v24 = (_QWORD *)v22[2];
          for (i = v71; i; i = (_QWORD *)*i)
          {
            v26 = i[4];
            if ((unint64_t)v24 >= v26)
            {
              if (v26 >= (unint64_t)v24)
                goto LABEL_61;
              ++i;
            }
          }
          v27 = (unint64_t **)v24[15];
          v28 = (unint64_t **)v24[16];
          if (v27 == v28)
            goto LABEL_56;
          v29 = 1;
          do
          {
            if (!v68)
            {
LABEL_52:
              v35 = 0;
              goto LABEL_54;
            }
            v30 = *v27;
            v31 = v68;
            while (1)
            {
              if (v30)
                v32 = *v30;
              else
                v32 = 0;
              v33 = (_QWORD *)v31[4];
              if (v33)
              {
                v33 = (_QWORD *)*v33;
                if (v32 < (unint64_t)v33)
                  goto LABEL_51;
              }
              v34 = v30 ? *v30 : 0;
              if ((unint64_t)v33 >= v34)
                break;
              ++v31;
LABEL_51:
              v31 = (uint64_t *)*v31;
              if (!v31)
                goto LABEL_52;
            }
            v35 = 1;
LABEL_54:
            v29 &= v35;
            ++v27;
          }
          while (v27 != v28);
          if ((v29 & 1) != 0)
          {
LABEL_56:
            v65 = (unint64_t *)v22[2];
            v36 = *(_QWORD *)(a2 + 24);
            if (!v36)
              std::__throw_bad_function_call[abi:ne180100]();
            if (v23 == (*(unsigned int (**)(uint64_t, unint64_t **))(*(_QWORD *)v36 + 48))(v36, &v65))
            {
              v37 = operator new(0x18uLL);
              v37[1] = &v73;
              v37[2] = v24;
              v38 = v73;
              *v37 = v73;
              v38[1] = v37;
              v73 = v37;
              ++v75;
              std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v70, (unint64_t)v24, (uint64_t)v24);
              v40 = (unint64_t **)v24[12];
              v39 = (unint64_t **)v24[13];
              while (v40 != v39)
              {
                v65 = *v40;
                std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>((uint64_t **)&v67, v65, (uint64_t *)&v65);
                ++v40;
              }
            }
          }
LABEL_61:
          v22 = (_QWORD *)v22[1];
        }
        while (v22 != v18);
LABEL_62:
        v19 = 1;
        v20 = 1;
      }
      while ((v21 & 1) == 0);
    }
    while (v72 < v64);
  }
  v41 = (uint64_t *)((char *)a1 + 112);
  if ((_QWORD **)((char *)a1 + 112) != &v73)
  {
    v42 = v74;
    v43 = (uint64_t *)*((_QWORD *)a1 + 15);
    if (v74 != &v73 && v43 != v41)
    {
      do
      {
        v43[2] = v42[2];
        v42 = (_QWORD *)v42[1];
        v43 = (uint64_t *)v43[1];
        v44 = v42 == &v73 || v43 == v41;
      }
      while (!v44);
    }
    if (v43 == v41)
    {
      if (v42 != &v73)
      {
        v48 = operator new(0x18uLL);
        v49 = v48;
        *v48 = 0;
        v48[1] = 0;
        v48[2] = v42[2];
        v50 = (_QWORD *)v42[1];
        v51 = 1;
        if (v50 != &v73)
        {
          v52 = v48;
          do
          {
            v48 = operator new(0x18uLL);
            *v48 = v52;
            v48[1] = 0;
            v48[2] = v50[2];
            v52[1] = v48;
            ++v51;
            v50 = (_QWORD *)v50[1];
            v52 = v48;
          }
          while (v50 != &v73);
        }
        v53 = *((_QWORD *)a1 + 14);
        *(_QWORD *)(v53 + 8) = v49;
        *v49 = v53;
        *((_QWORD *)a1 + 14) = v48;
        v48[1] = v41;
        *((_QWORD *)a1 + 16) += v51;
      }
    }
    else
    {
      v45 = *((_QWORD *)a1 + 14);
      v46 = *v43;
      *(_QWORD *)(v46 + 8) = *(_QWORD *)(v45 + 8);
      **(_QWORD **)(v45 + 8) = v46;
      do
      {
        v47 = (uint64_t *)v43[1];
        --*((_QWORD *)a1 + 16);
        operator delete(v43);
        v43 = v47;
      }
      while (v47 != v41);
    }
  }
  v66[0] = 0;
  v66[1] = 0;
  v65 = v66;
  v54 = *((_QWORD *)a1 + 15);
  if ((uint64_t *)v54 == v41)
  {
    v62 = 0;
  }
  else
  {
    do
    {
      v55 = *(Espresso::zephyr::node_t **)(v54 + 16);
      if (*((_QWORD *)v55 + 15) != *((_QWORD *)v55 + 16))
        goto LABEL_92;
      v56 = (Espresso::zephyr::value_t **)*((_QWORD *)v55 + 12);
      v57 = (Espresso::zephyr::value_t **)*((_QWORD *)v55 + 13);
      if ((char *)v57 - (char *)v56 != 8)
        goto LABEL_92;
      if (v57 == v56)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v58 = *v56;
      if (*((_QWORD *)*v56 + 7) != *((_QWORD *)*v56 + 8))
      {
        v59 = (_QWORD *)v66[0];
        if (v66[0])
        {
          do
          {
            v60 = v59[4];
            if ((unint64_t)v55 >= v60)
            {
              if (v60 >= (unint64_t)v55)
                goto LABEL_92;
              ++v59;
            }
            v59 = (_QWORD *)*v59;
          }
          while (v59);
        }
        use = (Espresso::zephyr::node_t *)Espresso::zephyr::ordered_block_t::first_use(a1, v58);
        (*(void (**)(Espresso::zephyr::graph_t *, Espresso::zephyr::node_t *))(*(_QWORD *)a1 + 24))(a1, v55);
        Espresso::zephyr::ordered_block_t::insert_node_before(a1, v55, use);
        Espresso::zephyr::node_t::add_output(v55, v58);
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v65, (unint64_t)v55, (uint64_t)v55);
        v54 = *((_QWORD *)a1 + 15);
      }
      else
      {
LABEL_92:
        v54 = *(_QWORD *)(v54 + 8);
      }
    }
    while ((uint64_t *)v54 != v41);
    v62 = (_QWORD *)v66[0];
  }
  std::__tree<int>::destroy(v62);
  std::__tree<int>::destroy(v68);
  std::__tree<int>::destroy(v71);
  return std::__list_imp<int>::clear(&v73);
}

void sub_1917B8170()
{
  JUMPOUT(0x1917B81ECLL);
}

void sub_1917B8178(void *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x1917B81FCLL);
}

void sub_1917B81A4()
{
  __cxa_end_catch();
  JUMPOUT(0x1917B81E4);
}

void sub_1917B81B0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1917B81FCLL);
}

void sub_1917B81C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  std::__tree<int>::destroy(a12);
  JUMPOUT(0x1917B81E4);
}

void sub_1917B81E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::__tree<int>::destroy(a8);
  std::__tree<int>::destroy(a11);
  std::__list_imp<int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::blob_container::~blob_container(id *this)
{
  Espresso::MPSBuffersEngine::blob_container::~blob_container(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL4 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char v14[16];
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  v6 = *(_DWORD **)a3;
  if (*(_QWORD *)a3 && *((_BYTE *)v6 + 8))
    *(_DWORD *)(a1 + 160) = v6[3];
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), (uint64_t)v6, *(_QWORD *)(a3 + 8));
  if (*(_QWORD *)a3)
  {
    v8 = v7;
    v16 = 0;
    v17 = 0;
    if (v7)
    {
      v9 = *((_BYTE *)v7 + 88) != 0;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v16, v7[13], v7[14]);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v16 = 0;
    v17 = 0;
  }
  Espresso::MPSBuffersEngine::blob_container::setup_shape((Espresso::MPSBuffersEngine::blob_container *)v14, (const Espresso::layer_shape *)a1, a2);
  if (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24))
  {
    if (!v9)
      goto LABEL_15;
    v10 = v15;
  }
  else
  {
    if (!v9)
      goto LABEL_15;
    v10 = 0;
  }
  v8[12] = v10;
LABEL_15:
  v11 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1917B8364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::blob_container_options::~blob_container_options(Espresso::MPSGraphEngine::blob_container_options *this)
{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
}

{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphEngine::blob_container::force_allocate(Espresso::MPSGraphEngine::blob_container *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7[2];
  char v8[40];
  void *__p;
  void *v10;

  Espresso::abstract_blob_container::shape(v8, (uint64_t)this);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  v7[0] = *((_QWORD *)this + 11);
  v7[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  Espresso::MPSBuffersEngine::blob_container::resize((uint64_t)this, (const Espresso::layer_shape *)v8, v7);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1917B8490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::compress_net_weights_kmeans(__int128 *a1, uint64_t a2, int a3)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  double v6;
  double v7;
  float v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  float v20;
  const void *v21;
  void *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  std::string::size_type v28;
  unint64_t *v29;
  unint64_t v30;
  const char *v31;
  const char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  const char *v40;
  int v41;
  void *data;
  std::__shared_weak_count *height;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  vImagePixelCount v54;
  std::__shared_weak_count *size;
  unint64_t *v56;
  unint64_t v57;
  const char *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  BOOL v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  BOOL v69;
  const char *v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  BOOL v74;
  int v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  char *v92;
  _BOOL4 v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  int *v102;
  _QWORD *v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  float *v111;
  int v112;
  int v113;
  int v114;
  char *v115;
  int v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  double v119;
  double v120;
  uint64_t v121;
  float v122;
  float v123;
  float v124;
  BOOL v125;
  float v126;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int *v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  float *v143;
  int v144;
  int v145;
  _DWORD *v146;
  _DWORD *v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  vDSP_Length v155;
  int *v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  float *v163;
  int v164;
  int v165;
  int v166;
  char *v167;
  int v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  double v171;
  double v172;
  uint64_t v173;
  float v174;
  float v175;
  float v176;
  float v178;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  signed int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  double v193;
  float *v194;
  unsigned int v195;
  float v196;
  float v197;
  char v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  std::string::size_type v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  std::string::size_type v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  std::string::size_type v223;
  std::vector<int>::size_type v224;
  uint64_t v225;
  std::vector<int>::size_type v226;
  std::vector<int>::size_type v227;
  std::vector<int>::size_type v228;
  std::vector<int>::size_type v229;
  uint64_t v230;
  uint64_t j;
  __int128 v232;
  double v233;
  uint64_t v234;
  float *v235;
  float v236;
  float *v237;
  std::vector<int>::size_type v238;
  float v239;
  float v240;
  float v241;
  unint64_t v242;
  uint64_t v243;
  float *v244;
  float *v245;
  char *v246;
  uint64_t v247;
  float *v248;
  float v249;
  uint64_t v250;
  uint64_t v251;
  float v252;
  float v253;
  float v254;
  std::string::size_type v255;
  uint64_t v256;
  std::vector<int>::size_type v257;
  float v258;
  float v259;
  uint64_t v260;
  std::string::size_type v261;
  std::string::size_type v262;
  float *v263;
  float *v264;
  std::string::size_type v265;
  float *v266;
  int v267;
  int v268;
  float v269;
  unint64_t v270;
  float v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  float *v276;
  float *v277;
  int v278;
  std::string::size_type v279;
  _QWORD *v280;
  float *v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  int *v288;
  uint64_t v289;
  float v290;
  int v291;
  float *v292;
  float v293;
  float v294;
  _QWORD *v296;
  uint64_t v297;
  uint64_t k;
  float *v299;
  float *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  int v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  BOOL v308;
  uint64_t m;
  std::string::size_type v310;
  std::string::size_type v311;
  void *v312;
  uint64_t v313;
  unint64_t v314;
  int64_t v315;
  BOOL v316;
  unint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  float *v322;
  uint64_t v323;
  int *v324;
  char *v325;
  uint64_t v326;
  float v327;
  int v328;
  float *v329;
  float v330;
  float v331;
  float v333;
  std::vector<int>::size_type v334;
  uint64_t v335;
  float v336;
  float v337;
  float v338;
  float *v339;
  float v340;
  float v341;
  _DWORD *v342;
  uint64_t v343;
  float *v344;
  int v345;
  std::vector<int>::size_type v346;
  int *rowBytes;
  _DWORD *v348;
  uint64_t v349;
  std::vector<int>::size_type v350;
  uint64_t v351;
  uint64_t v352;
  _DWORD *v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  _DWORD *v357;
  _DWORD *v358;
  uint64_t v360;
  uint64_t v361;
  std::vector<int>::size_type v362;
  unint64_t v363;
  unint64_t v364;
  std::string::size_type v365;
  float v366;
  double v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  float v372;
  float v373;
  float v374;
  BOOL v375;
  uint64_t i;
  double v377;
  char *v378;
  std::string::size_type v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::string::size_type v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t *v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  __int128 v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  int v414;
  int *v415;
  uint64_t v416;
  _QWORD *v417;
  int v418;
  uint64_t v419;
  int *v420;
  uint64_t v421;
  uint64_t v422;
  __int128 *v423;
  char v424;
  unsigned __int8 *v425;
  char *v426;
  uint64_t v427;
  size_t v428;
  void *v429;
  int v430;
  unsigned __int8 *v431;
  char *v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unsigned int v435;
  unint64_t v436;
  unsigned int v437;
  uint64_t v438;
  uint64_t v439;
  double v440;
  float v441;
  float v442;
  float v443;
  double v445;
  float v446;
  uint64_t v447;
  _QWORD *v448;
  _QWORD *v450;
  void *v451;
  id v452;
  size_t v453;
  std::string *v454;
  std::string *v455;
  int v456;
  const std::string::value_type *v457;
  std::string::size_type v458;
  std::string *v459;
  __int128 v460;
  std::string *v461;
  __int128 v462;
  const std::string::value_type *p_src;
  vImagePixelCount width_high;
  std::string *v465;
  __int128 v466;
  std::string *v467;
  __int128 v468;
  std::string *v469;
  std::string::size_type v470;
  std::string *v471;
  __int128 v472;
  std::string *v473;
  __int128 v474;
  std::string *v475;
  __int128 v476;
  std::string *p_B;
  const char *p_dest;
  const char *v479;
  FILE *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  unint64_t *v485;
  _QWORD *v486;
  uint64_t v487;
  unint64_t v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  float *v494;
  float *v495;
  float *v496;
  uint64_t v497;
  float v498;
  float v499;
  float v500;
  unint64_t v501;
  unint64_t v502;
  std::string::size_type v503;
  float v504;
  double v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  float v510;
  float v511;
  float v512;
  BOOL v513;
  uint64_t n;
  double v515;
  char *v516;
  int v517;
  uint64_t v518;
  signed int v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unsigned int v526;
  double v527;
  float *v528;
  unsigned int v529;
  float v530;
  float v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  _QWORD *v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  std::string::size_type v546;
  _QWORD *v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  _QWORD *v554;
  std::__shared_weak_count *v555;
  unint64_t *v556;
  unint64_t v557;
  _QWORD *v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  std::string::size_type v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  uint64_t v574;
  _QWORD *v575;
  char *v576;
  int v577;
  int v578;
  Espresso *v579;
  void *v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  unint64_t *v584;
  _QWORD *v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  _QWORD *v589;
  std::__shared_weak_count *v590;
  unint64_t *v591;
  unint64_t v592;
  uint64_t v593;
  _QWORD *v594;
  unint64_t *v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  unint64_t *v611;
  unint64_t v612;
  unint64_t *v613;
  unint64_t v614;
  uint64_t *v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  uint64_t *v625;
  void *v626;
  vImagePixelCount v627;
  unint64_t *v628;
  unint64_t v629;
  vImagePixelCount v630;
  size_t v631;
  unint64_t *v632;
  unint64_t v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  uint64_t *v644;
  uint64_t *v645;
  std::runtime_error *exception;
  unint64_t v647;
  uint64_t v649;
  uint64_t v650;
  _QWORD *v651;
  _QWORD *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  _QWORD *v657;
  _QWORD *v658;
  _QWORD *v659;
  std::string *v660;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  float *v668;
  float *v669;
  float *v670;
  void *v671;
  void *v672;
  std::vector<int>::size_type v673;
  int v674;
  int v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  std::vector<int>::size_type v682;
  int v683;
  int v684;
  uint64_t v685;
  int v686;
  int v687;
  uint64_t v688;
  int *v689;
  uint64_t v690;
  _QWORD *v692;
  int v693;
  uint64_t v694;
  uint64_t v695;
  int __val[2];
  int __vala;
  int __valb[2];
  int __valc[2];
  int __vald[2];
  vImagePixelCount v701;
  std::__shared_weak_count *v702;
  _QWORD v703[2];
  _QWORD v704[2];
  __int128 v705;
  _QWORD v706[2];
  __int128 v707;
  void *v708;
  char v709;
  _QWORD v710[2];
  uint64_t v711;
  std::__shared_weak_count *v712;
  __int128 v713;
  uint64_t v714;
  std::__shared_weak_count *v715;
  __int128 v716;
  void *v717;
  char v718;
  __int128 v719;
  __int128 v720;
  __int16 v721;
  std::string __p;
  vImage_Buffer src;
  __int128 v724;
  float v725;
  float v726;
  float v727;
  float v728;
  float v729;
  uint64_t v730;
  std::__shared_weak_count *v731;
  uint64_t v732;
  std::__shared_weak_count *v733;
  std::string v734;
  std::string v735;
  std::string v736;
  std::string v737;
  char *v738;
  char *v739;
  char *v740;
  std::__shared_weak_count *v741;
  uint64_t v742;
  uint64_t v743;
  std::__shared_weak_count *v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  _QWORD *v748;
  std::__shared_weak_count *v749;
  char v750;
  uint64_t v751;
  std::__shared_weak_count *v752;
  uint64_t *v753;
  _QWORD *v754[2];
  vImage_Buffer dest;
  std::string v756;
  std::string __x;
  std::string __B;

  v3 = a3;
  v754[1] = 0;
  v754[0] = 0;
  v753 = (uint64_t *)v754;
  v4 = *(_QWORD **)(*(_QWORD *)a2 + 32);
  v692 = *(_QWORD **)(*(_QWORD *)a2 + 40);
  if (v4 != v692)
  {
    v5 = a1;
    v647 = 0;
    v660 = (std::string *)((char *)a1 + 40);
    v6 = 1.0e-10;
    v7 = 20.0;
    v8 = -0.5;
    while (1)
    {
      v10 = *v4;
      v9 = (std::__shared_weak_count *)v4[1];
      v751 = *v4;
      v752 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v750 = 0;
      v13 = *(const void **)(v10 + 64);
      if (!v13
      {
        v19 = 0;
        v749 = 0;
        v748 = 0;
LABEL_14:
        v20 = 0.0;
        goto LABEL_15;
      }
      v15 = v14;
      v16 = *(std::__shared_weak_count **)(v10 + 72);
      v748 = v14;
      v749 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      if (*((_BYTE *)v5 + 28))
      {
        v19 = 0;
        goto LABEL_14;
      }
      v689 = (int *)(*(uint64_t (**)(_QWORD *))(*v14 + 384))(v14);
      v39 = (*(uint64_t (**)(_QWORD *))(*v15 + 384))(v15);
      if (v3 >= 2)
      {
        v40 = (const char *)(v10 + 16);
        if (*(char *)(v10 + 39) < 0)
          v40 = *(const char **)v40;
        printf("Quantizing FC %s (%d x %d = %.2fk)\n", v40, v689[1], *v689, (float)((float)(*v689 * v689[1]) * 0.00097656));
      }
      v41 = *((unsigned __int8 *)v5 + 29);
      v747 = 0uLL;
      (*(void (**)(std::string *__return_ptr, _QWORD *))(*v15 + 416))(&__B, v15);
      if (!v41 || __B.__r_.__value_.__r.__words[0])
      {
        if (__B.__r_.__value_.__r.__words[0])
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, *(_DWORD *)(__B.__r_.__value_.__r.__words[0] + 8), *(_DWORD *)(__B.__r_.__value_.__r.__words[0] + 12), 1, 1);
          v747 = *(_OWORD *)&src.data;
          memcpy(*((void **)src.data + 3), *(const void **)(__B.__r_.__value_.__r.__words[0] + 16), 4* *(int *)(__B.__r_.__value_.__r.__words[0] + 8)* (uint64_t)*(int *)(__B.__r_.__value_.__r.__words[0] + 12));
        }
      }
      else
      {
        (*(void (**)(vImage_Buffer *__return_ptr, _QWORD *))(*v15 + 472))(&src, v15);
        data = src.data;
        height = (std::__shared_weak_count *)src.height;
        if (!src.height)
          goto LABEL_57;
        v44 = (unint64_t *)(src.height + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
          std::__shared_weak_count::__release_weak(height);
          if (!data)
            goto LABEL_88;
        }
        else
        {
LABEL_57:
          if (!data)
            goto LABEL_88;
        }
        (*(void (**)(std::string *__return_ptr))(*v748 + 472))(&__x);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, *(_DWORD *)(__x.__r_.__value_.__r.__words[0] + 8), *(_DWORD *)(__x.__r_.__value_.__r.__words[0] + 12), 1, 1);
        v46 = *(_OWORD *)&src.data;
        src.height = 0;
        src.data = 0;
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v747 + 1);
        v747 = v46;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = (std::__shared_weak_count *)src.height;
        if (src.height)
        {
          v51 = (unint64_t *)(src.height + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = *(void **)(v747 + 24);
        v54 = *(int *)(__x.__r_.__value_.__r.__words[0] + 12) * (uint64_t)*(int *)(__x.__r_.__value_.__r.__words[0] + 8);
        src.data = *(void **)(__x.__r_.__value_.__r.__words[0] + 16);
        src.height = 1;
        src.width = v54;
        src.rowBytes = 2 * v54;
        dest.data = v53;
        dest.height = 1;
        dest.width = v54;
        dest.rowBytes = 4 * v54;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        v750 = 1;
        size = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
        if (__x.__r_.__value_.__l.__size_)
        {
          v56 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
LABEL_88:
      v63 = (std::__shared_weak_count *)__B.__r_.__value_.__l.__size_;
      if (__B.__r_.__value_.__l.__size_)
      {
        v64 = (unint64_t *)(__B.__r_.__value_.__l.__size_ + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v20 = 0.0;
      if (!(_QWORD)v747)
        goto LABEL_117;
      v66 = 0;
      v67 = *(int *)(v747 + 8);
      do
      {
        v67 *= *(int *)(v747 + 12 + v66);
        v66 += 4;
      }
      while (v66 != 12);
      if (v67 < *((int *)v5 + 5))
      {
LABEL_117:
        v75 = 0;
        goto LABEL_118;
      }
      v68 = v748;
      std::string::basic_string[abi:ne180100]<0>(&src, "dont_quantize");
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v68 + 30, (unsigned __int8 *)&src))
      {
        std::string::basic_string[abi:ne180100]<0>(&dest, "dont_quantize");
        __B.__r_.__value_.__r.__words[0] = (std::string::size_type)&dest;
        v69 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v68 + 30), (unsigned __int8 *)&dest, (uint64_t)&std::piecewise_construct, (__int128 **)&__B)+ 10) != 0;
        if (SHIBYTE(dest.width) < 0)
          operator delete(dest.data);
      }
      else
      {
        v69 = 0;
      }
      if (SHIBYTE(src.width) < 0)
      {
        operator delete(src.data);
        if (v69)
          goto LABEL_117;
      }
      else if (v69)
      {
        goto LABEL_117;
      }
      v746 = 0uLL;
      v745 = 0uLL;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&src, *v689, 1, 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v68 + 80), (__int128 *)&src);
      v85 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v86 = (unint64_t *)(src.height + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&src, *v689, 1, 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v748 + 82), (__int128 *)&src);
      v88 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v89 = (unint64_t *)(src.height + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v743, *v689, 1, 1, 1);
      if (v3 >= 2)
      {
        v91 = (const char *)(v751 + 16);
        if (*(char *)(v751 + 39) < 0)
          v91 = *(const char **)v91;
        printf("ip: %s\n", v91);
      }
      v92 = getenv("FC_INT8_INT8");
      if (v92)
      {
        v93 = atoi(v92) != 0;
        *((_BYTE *)v5 + 31) = v93;
        if (v93)
          goto LABEL_154;
      }
      else if (*((_BYTE *)v5 + 31))
      {
LABEL_154:
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(&src, v689[1], *v689, 1, 1);
        v94 = *(_OWORD *)&src.data;
        src.height = 0;
        src.data = 0;
        v95 = (std::__shared_weak_count *)*((_QWORD *)&v746 + 1);
        v746 = v94;
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v98 = (std::__shared_weak_count *)src.height;
        if (src.height)
        {
          v99 = (unint64_t *)(src.height + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        *(_DWORD *)(v39 + 36) = 3;
        v101 = v747;
        v102 = v689;
        v103 = v748;
        v104 = v746;
        Espresso::range_quantizer<signed char>::quantize_chunks(*(_QWORD *)(v747 + 24), *v689 * v689[1], v689[1], *(_QWORD *)(v748[80] + 16), *(_QWORD *)(v748[82] + 16), *(_QWORD *)(v746 + 16));
        std::vector<float>::vector(&src, (*v102 * v102[1]));
        std::vector<float>::vector(&dest, *v689);
        Espresso::range_quantizer<signed char>::dequantize_chunks((float *)src.data, *v102 * v102[1], v102[1], *(float **)(v103[80] + 16), *(float **)(v103[82] + 16), *(char **)(v104 + 16));
        v651 = v103;
        v106 = *v689;
        v105 = v689[1];
        v683 = *v689 * v105;
        v107 = (v683 - 1) / v105;
        if (v107 < 0)
        {
          v20 = 0.0;
          v132 = v689;
        }
        else
        {
          v653 = v39;
          v657 = v4;
          v108 = 0;
          v109 = 0;
          v110 = *(_QWORD *)(v101 + 24);
          v111 = (float *)src.data;
          v677 = v105;
          v680 = v110;
          v662 = 4 * v105;
          v665 = (v107 + 1);
          v20 = 0.0;
          v671 = src.data;
          v674 = v689[1];
          v112 = v674;
          v668 = (float *)dest.data;
          do
          {
            v693 = v112;
            if (v112 >= v683)
              v113 = v683;
            else
              v113 = v112;
            v686 = v113;
            *(_QWORD *)__val = v109 + 1;
            if (v105 * ((int)v109 + 1) >= v683)
              v114 = v683;
            else
              v114 = v105 * (v109 + 1);
            v115 = (char *)operator new(0x58uLL);
            *((_QWORD *)v115 + 1) = 0;
            *((_QWORD *)v115 + 2) = 0;
            v116 = v114 - v109 * v677;
            *(_QWORD *)v115 = &off_1E2DBEC00;
            *((_QWORD *)v115 + 3) = &off_1E2DA1190;
            *(_OWORD *)(v115 + 56) = 0u;
            *(_OWORD *)(v115 + 72) = 0u;
            *((_DWORD *)v115 + 8) = v116;
            *((_QWORD *)v115 + 5) = v680 + 4 * v109 * v677;
            v115[48] = 0;
            __B.__r_.__value_.__r.__words[0] = (std::string::size_type)(v115 + 24);
            __B.__r_.__value_.__l.__size_ = (std::string::size_type)v115;
            v117 = (std::__shared_weak_count *)operator new(0x58uLL);
            v117->__shared_owners_ = 0;
            v118 = (unint64_t *)&v117->__shared_owners_;
            v117->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC00;
            v117->__shared_weak_owners_ = 0;
            v117[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1190;
            *(_OWORD *)&v117[2].__shared_owners_ = 0u;
            v117[3].std::__shared_count = 0u;
            LODWORD(v117[1].__shared_owners_) = v116;
            v117[1].__shared_weak_owners_ = (uint64_t)v671 + 4 * v109 * v677;
            v119 = 0.0;
            v120 = 0.00001;
            LOBYTE(v117[2].__vftable) = 0;
            if (v114 != (_DWORD)v109 * (_DWORD)v677)
            {
              v121 = 0;
              v122 = 0.0;
              do
              {
                v123 = *(float *)(v110 + 4 * v121);
                v119 = v119 + (float)((float)(v111[v121] - v123) * (float)(v111[v121] - v123));
                v124 = fabsf(v123);
                v125 = v124 > v122 || v121 == 0;
                if (v125)
                  v122 = v124;
                ++v121;
              }
              while (v686 + v108 != v121);
              v120 = v122 + 0.00001;
            }
            v126 = log10(v120 / (sqrt(v119 / (double)(unint64_t)v116) + v6)) * v7;
            if (v668)
              v668[v109] = v126;
            if (v20 > v126 || v109 == 0)
              v20 = v126;
            do
              v128 = __ldaxr(v118);
            while (__stlxr(v128 - 1, v118));
            ++v109;
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
            v129 = (std::__shared_weak_count *)__B.__r_.__value_.__l.__size_;
            v5 = a1;
            if (__B.__r_.__value_.__l.__size_)
            {
              v130 = (unint64_t *)(__B.__r_.__value_.__l.__size_ + 8);
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v105 = v674;
            v112 = v693 + v674;
            v108 -= v674;
            v110 += v662;
            v111 = (float *)((char *)v111 + v662);
          }
          while (*(_QWORD *)__val != v665);
          v132 = v689;
          v106 = *v689;
          v4 = v657;
          v39 = v653;
        }
        v3 = a3;
        if (v106)
        {
          v184 = 0;
          v185 = 0;
          v186 = *(_QWORD *)(v651[80] + 16);
          v187 = *(_QWORD *)(v651[82] + 16);
          v188 = v132[1];
          v189 = v747;
          v190 = *(_QWORD *)(v743 + 16);
          do
          {
            v191 = v184 + 1;
            v192 = v188 * (v184 + 1);
            v193 = 0.0;
            if (v188 * (int)v184 < v192)
            {
              v194 = (float *)(*(_QWORD *)(v189 + 24) + 4 * v185);
              v195 = v185;
              do
              {
                v196 = *v194++;
                v193 = v193 + v196;
                ++v195;
              }
              while (v192 > v195);
            }
            v197 = (v193 - *(float *)(v187 + 4 * v184)) / *(float *)(v186 + 4 * v184);
            *(float *)(v190 + 4 * v184) = v197;
            v185 += v188;
            ++v184;
          }
          while (v191 != v106);
        }
        goto LABEL_719;
      }
      if (!*((_BYTE *)v5 + 32))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(&src, v689[1], *v689, 1, 1);
        v407 = *(_OWORD *)&src.data;
        src.height = 0;
        src.data = 0;
        v408 = (std::__shared_weak_count *)*((_QWORD *)&v746 + 1);
        v746 = v407;
        if (v408)
        {
          v409 = (unint64_t *)&v408->__shared_owners_;
          do
            v410 = __ldaxr(v409);
          while (__stlxr(v410 - 1, v409));
          if (!v410)
          {
            ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
            std::__shared_weak_count::__release_weak(v408);
          }
        }
        v411 = (std::__shared_weak_count *)src.height;
        if (src.height)
        {
          v412 = (unint64_t *)(src.height + 8);
          do
            v413 = __ldaxr(v412);
          while (__stlxr(v413 - 1, v412));
          if (!v413)
          {
            ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
            std::__shared_weak_count::__release_weak(v411);
          }
        }
        v414 = 1;
        *(_DWORD *)(v39 + 36) = 1;
        v415 = v689;
        if (!*v689)
        {
          v20 = 0.0;
          goto LABEL_724;
        }
        v416 = 0;
        v20 = 0.0;
        v656 = v39;
        while (2)
        {
          v417 = v4;
          v418 = v415[1];
          *(_QWORD *)__vald = v416;
          v419 = (v418 * v416);
          v420 = v415;
          v421 = *(_QWORD *)(v747 + 24) + 4 * v419;
          v422 = *(_QWORD *)(v746 + 16) + v419;
          v742 = 0;
          v423 = v5;
          v424 = *((_BYTE *)v5 + 33) == 0;
          v425 = (unsigned __int8 *)v422;
          Espresso::range_quantizer<unsigned char>::quantize_chunks(v421, v418, v418, (uint64_t)&v742 + 4, (uint64_t)&v742, v422, v424);
          v426 = (char *)operator new(0x58uLL);
          *((_QWORD *)v426 + 1) = 0;
          *((_QWORD *)v426 + 2) = 0;
          *(_QWORD *)v426 = &off_1E2DBEC00;
          *((_QWORD *)v426 + 3) = &off_1E2DA1190;
          v427 = v420[1];
          *(_OWORD *)(v426 + 56) = 0u;
          *(_OWORD *)(v426 + 72) = 0u;
          *((_DWORD *)v426 + 8) = v427;
          v428 = 4 * v427;
          v429 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v427));
          bzero(v429, v428);
          *((_QWORD *)v426 + 5) = v429;
          v426[48] = 1;
          v740 = v426 + 24;
          v741 = (std::__shared_weak_count *)v426;
          v430 = v420[1];
          v431 = v425;
          Espresso::range_quantizer<unsigned char>::dequantize_chunks((float *)v429, v430, v430, (float *)&v742 + 1, (float *)&v742, v425);
          v432 = (char *)operator new(0x58uLL);
          v433 = (std::__shared_weak_count *)v432;
          v4 = v417;
          v5 = v423;
          *((_QWORD *)v432 + 1) = 0;
          v434 = (unint64_t *)(v432 + 8);
          *((_QWORD *)v432 + 2) = 0;
          *(_QWORD *)v432 = &off_1E2DBEC00;
          v435 = v689[1];
          *((_QWORD *)v432 + 3) = &off_1E2DA1190;
          *(_OWORD *)(v432 + 56) = 0u;
          *(_OWORD *)(v432 + 72) = 0u;
          *((_DWORD *)v432 + 8) = v435;
          *((_QWORD *)v432 + 5) = v421;
          v432[48] = 0;
          v436 = *((int *)v426 + 8);
          if (v435 >= v436)
            v437 = *((_DWORD *)v426 + 8);
          else
            v437 = v435;
          v738 = v432 + 24;
          v739 = v432;
          if (v437)
          {
            v438 = 0;
            v439 = 4 * v437;
            v440 = 0.0;
            v441 = 0.0;
            do
            {
              v442 = *(float *)(v421 + v438);
              v440 = v440
                   + (float)((float)(*(float *)(*((_QWORD *)v426 + 5) + v438) - v442)
                           * (float)(*(float *)(*((_QWORD *)v426 + 5) + v438) - v442));
              v443 = fabsf(v442);
              if (v443 > v441 || v438 == 0)
                v441 = v443;
              v438 += 4;
            }
            while (v439 != v438);
            v445 = v441 + 0.00001;
          }
          else
          {
            v440 = 0.0;
            v445 = 0.00001;
          }
          v3 = a3;
          v446 = log10(v445 / (sqrt(v440 / (double)v436) + v6)) * v7;
          v447 = v742;
          if (a3 >= 2)
            printf(" PSNR=%.2f (s %e b %e)\n", v446, *((float *)&v742 + 1), *(float *)&v742);
          v448 = v748;
          *(_DWORD *)(*(_QWORD *)(v748[82] + 16) + 4 * *(_QWORD *)__vald) = v447;
          *(_DWORD *)(*(_QWORD *)(v448[80] + 16) + 4 * *(_QWORD *)__vald) = HIDWORD(v447);
          if (v20 > v446 || *(_QWORD *)__vald == 0)
            v20 = v446;
          if (*((char *)v423 + 63) < 0)
          {
            v7 = 20.0;
            v8 = -0.5;
            if (!*((_QWORD *)v423 + 6))
              goto LABEL_658;
          }
          else
          {
            v7 = 20.0;
            v8 = -0.5;
            if (!*((_BYTE *)v423 + 63))
              goto LABEL_658;
          }
          v450 = (_QWORD *)(v751 + 16);
          if (*(char *)(v751 + 39) < 0)
            v450 = (_QWORD *)*v450;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v450);
          v451 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v451, "stringByReplacingOccurrencesOfString:withString:", CFSTR("/"), &stru_1E2DD80E0);
          v452 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(&src, (char *)objc_msgSend(v452, "UTF8String"));

          if (*((char *)v423 + 63) >= 0)
            v453 = *((unsigned __int8 *)v423 + 63);
          else
            v453 = *((_QWORD *)v423 + 6);
          std::string::basic_string[abi:ne180100]((uint64_t)&v735, v453 + 1);
          if ((v735.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v454 = &v735;
          else
            v454 = (std::string *)v735.__r_.__value_.__r.__words[0];
          if (v453)
          {
            if (*((char *)v423 + 63) >= 0)
              v455 = v660;
            else
              v455 = (std::string *)*((_QWORD *)v423 + 5);
            memmove(v454, v455, v453);
          }
          *(_WORD *)((char *)&v454->__r_.__value_.__l.__data_ + v453) = 47;
          v456 = *(char *)(*(_QWORD *)a2 + 447);
          if (v456 >= 0)
            v457 = (const std::string::value_type *)(*(_QWORD *)a2 + 424);
          else
            v457 = *(const std::string::value_type **)(*(_QWORD *)a2 + 424);
          if (v456 >= 0)
            v458 = *(unsigned __int8 *)(*(_QWORD *)a2 + 447);
          else
            v458 = *(_QWORD *)(*(_QWORD *)a2 + 432);
          v459 = std::string::append(&v735, v457, v458);
          v460 = *(_OWORD *)&v459->__r_.__value_.__l.__data_;
          v736.__r_.__value_.__r.__words[2] = v459->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v736.__r_.__value_.__l.__data_ = v460;
          v459->__r_.__value_.__l.__size_ = 0;
          v459->__r_.__value_.__r.__words[2] = 0;
          v459->__r_.__value_.__r.__words[0] = 0;
          v461 = std::string::append(&v736, "_");
          v3 = a3;
          v462 = *(_OWORD *)&v461->__r_.__value_.__l.__data_;
          v737.__r_.__value_.__r.__words[2] = v461->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v737.__r_.__value_.__l.__data_ = v462;
          v461->__r_.__value_.__l.__size_ = 0;
          v461->__r_.__value_.__r.__words[2] = 0;
          v461->__r_.__value_.__r.__words[0] = 0;
          if ((src.width & 0x8000000000000000) == 0)
            p_src = (const std::string::value_type *)&src;
          else
            p_src = (const std::string::value_type *)src.data;
          if ((src.width & 0x8000000000000000) == 0)
            width_high = HIBYTE(src.width);
          else
            width_high = src.height;
          v465 = std::string::append(&v737, p_src, width_high);
          v466 = *(_OWORD *)&v465->__r_.__value_.__l.__data_;
          v756.__r_.__value_.__r.__words[2] = v465->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v756.__r_.__value_.__l.__data_ = v466;
          v465->__r_.__value_.__l.__size_ = 0;
          v465->__r_.__value_.__r.__words[2] = 0;
          v465->__r_.__value_.__r.__words[0] = 0;
          v467 = std::string::append(&v756, "_");
          v468 = *(_OWORD *)&v467->__r_.__value_.__l.__data_;
          __x.__r_.__value_.__r.__words[2] = v467->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v468;
          v467->__r_.__value_.__l.__size_ = 0;
          v467->__r_.__value_.__r.__words[2] = 0;
          v467->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v734, __vald[0]);
          if ((v734.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v469 = &v734;
          else
            v469 = (std::string *)v734.__r_.__value_.__r.__words[0];
          if ((v734.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v470 = HIBYTE(v734.__r_.__value_.__r.__words[2]);
          else
            v470 = v734.__r_.__value_.__l.__size_;
          v471 = std::string::append(&__x, (const std::string::value_type *)v469, v470);
          v472 = *(_OWORD *)&v471->__r_.__value_.__l.__data_;
          __B.__r_.__value_.__r.__words[2] = v471->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__B.__r_.__value_.__l.__data_ = v472;
          v471->__r_.__value_.__l.__size_ = 0;
          v471->__r_.__value_.__r.__words[2] = 0;
          v471->__r_.__value_.__r.__words[0] = 0;
          v473 = std::string::append(&__B, ".bin");
          v474 = *(_OWORD *)&v473->__r_.__value_.__l.__data_;
          dest.width = v473->__r_.__value_.__r.__words[2];
          *(_OWORD *)&dest.data = v474;
          v473->__r_.__value_.__l.__size_ = 0;
          v473->__r_.__value_.__r.__words[2] = 0;
          v473->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__B.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__B.__r_.__value_.__l.__data_);
          if (SHIBYTE(v734.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v734.__r_.__value_.__l.__data_);
          if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__x.__r_.__value_.__l.__data_);
          if (SHIBYTE(v756.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v756.__r_.__value_.__l.__data_);
          if (SHIBYTE(v737.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v737.__r_.__value_.__l.__data_);
          if (SHIBYTE(v736.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v736.__r_.__value_.__l.__data_);
          if (SHIBYTE(v735.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v735.__r_.__value_.__l.__data_);
          std::operator+<char>();
          v475 = std::string::append(&__x, "/");
          v476 = *(_OWORD *)&v475->__r_.__value_.__l.__data_;
          __B.__r_.__value_.__r.__words[2] = v475->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__B.__r_.__value_.__l.__data_ = v476;
          v475->__r_.__value_.__l.__size_ = 0;
          v475->__r_.__value_.__r.__words[2] = 0;
          v475->__r_.__value_.__r.__words[0] = 0;
          if ((__B.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_B = &__B;
          else
            p_B = (std::string *)__B.__r_.__value_.__r.__words[0];
          system((const char *)p_B);
          if (SHIBYTE(__B.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__B.__r_.__value_.__l.__data_);
          if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__x.__r_.__value_.__l.__data_);
          if (a3)
          {
            if ((dest.width & 0x8000000000000000) == 0)
              p_dest = (const char *)&dest;
            else
              p_dest = (const char *)dest.data;
            printf("dump: %s\n", p_dest);
          }
          if ((dest.width & 0x8000000000000000) == 0)
            v479 = (const char *)&dest;
          else
            v479 = (const char *)dest.data;
          v480 = fopen(v479, "wb");
          fwrite(v431, 1uLL, v689[1], v480);
          fclose(v480);
          if (SHIBYTE(dest.width) < 0)
            operator delete(dest.data);
          if (SHIBYTE(src.width) < 0)
            operator delete(src.data);
          do
LABEL_658:
            v481 = __ldaxr(v434);
          while (__stlxr(v481 - 1, v434));
          if (!v481)
          {
            ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
            std::__shared_weak_count::__release_weak(v433);
          }
          v482 = v741;
          v39 = v656;
          if (v741)
          {
            v483 = (unint64_t *)&v741->__shared_owners_;
            do
              v484 = __ldaxr(v483);
            while (__stlxr(v484 - 1, v483));
            if (!v484)
            {
              ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
              std::__shared_weak_count::__release_weak(v482);
            }
          }
          v416 = *(_QWORD *)__vald + 1;
          v415 = v689;
          if (*(_QWORD *)__vald + 1 >= (unint64_t)*v689)
          {
            v414 = 1;
            goto LABEL_724;
          }
          continue;
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<short,2>,std::allocator<Espresso::blob<short,2>>,int &,int &,int &,int &,void>(&src, v689[1], *v689, 1, 1);
      v133 = *(_OWORD *)&src.data;
      src.height = 0;
      src.data = 0;
      v134 = (std::__shared_weak_count *)*((_QWORD *)&v745 + 1);
      v745 = v133;
      if (v134)
      {
        v135 = (unint64_t *)&v134->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v137 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v138 = (unint64_t *)(src.height + 8);
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      *(_DWORD *)(v39 + 36) = 4;
      v140 = v747;
      v141 = v748;
      v142 = v745;
      Espresso::range_quantizer<short>::quantize_chunks(*(_QWORD *)(v747 + 24), *v689 * v689[1], v689[1], *(_QWORD *)(v748[80] + 16), *(_QWORD *)(v748[82] + 16), *(_QWORD *)(v745 + 16));
      std::vector<float>::vector(&src, (*v689 * v689[1]));
      std::vector<float>::vector(&dest, *v689);
      v694 = v140;
      v652 = v141;
      v654 = v39;
      v658 = v4;
      v143 = (float *)src.data;
      v144 = v689[1];
      v145 = *v689 * v144;
      v146 = *(_DWORD **)(v141[80] + 16);
      v147 = *(_DWORD **)(v141[82] + 16);
      vDSP_vflt16(*(const __int16 **)(v142 + 16), 1, (float *)src.data, 1, v145);
      __vala = v144;
      v148 = (v145 - 1) / v144;
      if ((v148 & 0x80000000) == 0)
      {
        v149 = 0;
        v150 = v144;
        v151 = (v148 + 1);
        v152 = v145;
        v153 = 4 * v144;
        do
        {
          v154 = v150;
          if (v150 >= v152)
            v154 = v152;
          v155 = v154 + v149;
          LODWORD(__B.__r_.__value_.__l.__data_) = *v146;
          LODWORD(__x.__r_.__value_.__l.__data_) = *v147;
          vDSP_vsmul(v143, 1, (const float *)&__B, v143, 1, v154 + v149);
          vDSP_vsadd(v143, 1, (const float *)&__x, v143, 1, v155);
          ++v147;
          ++v146;
          v150 += __vala;
          v149 -= __vala;
          v143 = (float *)((char *)v143 + v153);
          --v151;
        }
        while (v151);
      }
      v156 = v689;
      v158 = *v689;
      v157 = v689[1];
      v684 = *v689 * v157;
      v159 = (v684 - 1) / v157;
      if (v159 < 0)
      {
        v20 = 0.0;
        v5 = a1;
      }
      else
      {
        v160 = 0;
        v161 = 0;
        v162 = *(_QWORD *)(v694 + 24);
        v163 = (float *)src.data;
        v678 = v157;
        v681 = v162;
        v663 = 4 * v157;
        v666 = (v159 + 1);
        v20 = 0.0;
        v672 = src.data;
        v675 = v689[1];
        v164 = v675;
        v669 = (float *)dest.data;
        do
        {
          if (v164 >= v684)
            v165 = v684;
          else
            v165 = v164;
          v687 = v165;
          *(_QWORD *)__valb = v161 + 1;
          if (v157 * ((int)v161 + 1) >= v684)
            v166 = v684;
          else
            v166 = v157 * (v161 + 1);
          v167 = (char *)operator new(0x58uLL);
          *((_QWORD *)v167 + 1) = 0;
          *((_QWORD *)v167 + 2) = 0;
          v168 = v166 - v161 * v678;
          *(_QWORD *)v167 = &off_1E2DBEC00;
          *((_QWORD *)v167 + 3) = &off_1E2DA1190;
          *(_OWORD *)(v167 + 56) = 0u;
          *(_OWORD *)(v167 + 72) = 0u;
          *((_DWORD *)v167 + 8) = v168;
          *((_QWORD *)v167 + 5) = v681 + 4 * v161 * v678;
          v167[48] = 0;
          __B.__r_.__value_.__r.__words[0] = (std::string::size_type)(v167 + 24);
          __B.__r_.__value_.__l.__size_ = (std::string::size_type)v167;
          v169 = (std::__shared_weak_count *)operator new(0x58uLL);
          v169->__shared_owners_ = 0;
          v170 = (unint64_t *)&v169->__shared_owners_;
          v169->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC00;
          v169->__shared_weak_owners_ = 0;
          v169[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1190;
          *(_OWORD *)&v169[2].__shared_owners_ = 0u;
          v169[3].std::__shared_count = 0u;
          LODWORD(v169[1].__shared_owners_) = v168;
          v169[1].__shared_weak_owners_ = (uint64_t)v672 + 4 * v161 * v678;
          LOBYTE(v169[2].__vftable) = 0;
          if (v166 == (_DWORD)v161 * (_DWORD)v678)
          {
            v171 = 0.0;
            v172 = 0.00001;
          }
          else
          {
            v173 = 0;
            v171 = 0.0;
            v174 = 0.0;
            do
            {
              v175 = *(float *)(v162 + 4 * v173);
              v171 = v171 + (float)((float)(v163[v173] - v175) * (float)(v163[v173] - v175));
              v176 = fabsf(v175);
              if (v176 > v174 || v173 == 0)
                v174 = v176;
              ++v173;
            }
            while (v687 + v160 != v173);
            v172 = v174 + 0.00001;
          }
          v178 = log10(v172 / (sqrt(v171 / (double)(unint64_t)v168) + v6)) * v7;
          if (v669)
            v669[v161] = v178;
          if (v20 > v178 || v161 == 0)
            v20 = v178;
          do
            v180 = __ldaxr(v170);
          while (__stlxr(v180 - 1, v170));
          ++v161;
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
          v181 = (std::__shared_weak_count *)__B.__r_.__value_.__l.__size_;
          v5 = a1;
          if (__B.__r_.__value_.__l.__size_)
          {
            v182 = (unint64_t *)(__B.__r_.__value_.__l.__size_ + 8);
            do
              v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
          }
          v157 = v675;
          v164 += v675;
          v160 -= v675;
          v162 += v663;
          v163 = (float *)((char *)v163 + v663);
        }
        while (*(_QWORD *)__valb != v666);
        v156 = v689;
        v158 = *v689;
      }
      v3 = a3;
      v4 = v658;
      v39 = v654;
      if (v158)
      {
        v518 = 0;
        v519 = 0;
        v520 = *(_QWORD *)(v652[80] + 16);
        v521 = *(_QWORD *)(v652[82] + 16);
        v522 = v156[1];
        v523 = v747;
        v524 = *(_QWORD *)(v743 + 16);
        do
        {
          v525 = v518 + 1;
          v526 = v522 * (v518 + 1);
          v527 = 0.0;
          if (v522 * (int)v518 < v526)
          {
            v528 = (float *)(*(_QWORD *)(v523 + 24) + 4 * v519);
            v529 = v519;
            do
            {
              v530 = *v528++;
              v527 = v527 + v530;
              ++v529;
            }
            while (v526 > v529);
          }
          v531 = (v527 - *(float *)(v521 + 4 * v518)) / *(float *)(v520 + 4 * v518);
          *(float *)(v524 + 4 * v518) = v531;
          v519 += v522;
          ++v518;
        }
        while (v525 != v158);
      }
LABEL_719:
      if (dest.data)
      {
        dest.height = (vImagePixelCount)dest.data;
        operator delete(dest.data);
      }
      if (src.data)
      {
        src.height = (vImagePixelCount)src.data;
        operator delete(src.data);
      }
      v414 = 0;
LABEL_724:
      if (v3 >= 2)
        printf("\tMin PSNR=%.2f\n", v20);
      if (v20 >= *((float *)v5 + 4))
      {
        v538 = v748;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&dest, *(_DWORD *)(v748[82] + 8), 1, 1, 1);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__B, *(_DWORD *)(v538[80] + 8), 1, 1, 1);
        memcpy(*((void **)dest.data + 2), *(const void **)(v538[82] + 16), 4 * *(int *)(v538[82] + 8));
        memcpy(*(void **)(__B.__r_.__value_.__r.__words[0] + 16), *(const void **)(v538[80] + 16), 4 * *(int *)(v538[80] + 8));
        if (!v750)
          goto LABEL_748;
        v733 = 0;
        v732 = 0;
        src.height = 0;
        src.data = 0;
        (*(void (**)(_QWORD *, uint64_t *, vImage_Buffer *))(*v538 + 464))(v538, &v732, &src);
        v539 = (std::__shared_weak_count *)src.height;
        if (src.height)
        {
          v540 = (unint64_t *)(src.height + 8);
          do
            v541 = __ldaxr(v540);
          while (__stlxr(v541 - 1, v540));
          if (!v541)
          {
            ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
            std::__shared_weak_count::__release_weak(v539);
          }
        }
        v542 = v733;
        if (!v733)
          goto LABEL_748;
        v543 = (unint64_t *)&v733->__shared_owners_;
        do
          v544 = __ldaxr(v543);
        while (__stlxr(v544 - 1, v543));
        if (!v544)
        {
          ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
          std::__shared_weak_count::__release_weak(v542);
          if (v414)
            goto LABEL_749;
        }
        else
        {
LABEL_748:
          if (v414)
          {
LABEL_749:
            v545 = v746;
            if ((_QWORD)v746)
            {
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int const*&,void>(&__x, (int *)(v746 + 8));
              v546 = __x.__r_.__value_.__r.__words[0];
              memcpy(*(void **)(__x.__r_.__value_.__r.__words[0] + 16), *(const void **)(v545 + 16), *(int *)(v545 + 12) * (uint64_t)*(int *)(v545 + 8));
              v547 = v748;
              *(_OWORD *)&v756.__r_.__value_.__l.__data_ = 0uLL;
              std::string::basic_string[abi:ne180100]<0>(&src, "W_U8");
              (*(void (**)(_QWORD *, std::string *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*v547 + 168))(v547, &v756, &src, *(_QWORD *)(v546 + 16), *(int *)(v546 + 12) * (uint64_t)*(int *)(v546 + 8), 0);
              if (SHIBYTE(src.width) < 0)
                operator delete(src.data);
              v548 = (std::__shared_weak_count *)v756.__r_.__value_.__l.__size_;
              if (v756.__r_.__value_.__l.__size_)
              {
                v549 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
                do
                  v550 = __ldaxr(v549);
                while (__stlxr(v550 - 1, v549));
                if (!v550)
                {
                  ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
                  std::__shared_weak_count::__release_weak(v548);
                }
              }
              v551 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
              if (__x.__r_.__value_.__l.__size_)
              {
                v552 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
                do
                  v553 = __ldaxr(v552);
                while (__stlxr(v553 - 1, v552));
                if (!v553)
                {
                  ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
                  std::__shared_weak_count::__release_weak(v551);
                }
              }
            }
            v554 = v748;
            *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(&src, "per_ch_qscale");
            (*(void (**)(_QWORD *, std::string *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*v554 + 168))(v554, &__x, &src, *(_QWORD *)(__B.__r_.__value_.__r.__words[0] + 16), 4 * *(int *)(__B.__r_.__value_.__r.__words[0] + 8), 0);
            if (SHIBYTE(src.width) < 0)
              operator delete(src.data);
            v555 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
            if (__x.__r_.__value_.__l.__size_)
            {
              v556 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
              do
                v557 = __ldaxr(v556);
              while (__stlxr(v557 - 1, v556));
              if (!v557)
              {
                ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
                std::__shared_weak_count::__release_weak(v555);
              }
            }
            v558 = v748;
            *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(&src, "per_ch_qbias");
            (*(void (**)(_QWORD *, std::string *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*v558 + 168))(v558, &__x, &src, *((_QWORD *)dest.data + 2), 4 * *((int *)dest.data + 2), 0);
            if (SHIBYTE(src.width) < 0)
              operator delete(src.data);
            v559 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
            if (__x.__r_.__value_.__l.__size_)
            {
              v560 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
              do
                v561 = __ldaxr(v560);
              while (__stlxr(v561 - 1, v560));
              if (!v561)
              {
                ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
                std::__shared_weak_count::__release_weak(v559);
              }
            }
            v731 = 0;
            v730 = 0;
            (*(void (**)(_QWORD *, uint64_t *))(*v748 + 400))(v748, &v730);
            v562 = v731;
            if (!v731)
              goto LABEL_828;
            v563 = (unint64_t *)&v731->__shared_owners_;
            do
              v564 = __ldaxr(v563);
            while (__stlxr(v564 - 1, v563));
LABEL_826:
            if (!v564)
            {
              ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
              std::__shared_weak_count::__release_weak(v562);
            }
LABEL_828:
            v596 = (std::__shared_weak_count *)__B.__r_.__value_.__l.__size_;
            if (__B.__r_.__value_.__l.__size_)
            {
              v597 = (unint64_t *)(__B.__r_.__value_.__l.__size_ + 8);
              do
                v598 = __ldaxr(v597);
              while (__stlxr(v598 - 1, v597));
              if (!v598)
              {
                ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
                std::__shared_weak_count::__release_weak(v596);
              }
            }
            v599 = (std::__shared_weak_count *)dest.height;
            if (dest.height)
            {
              v600 = (unint64_t *)(dest.height + 8);
              do
                v601 = __ldaxr(v600);
              while (__stlxr(v601 - 1, v600));
              if (!v601)
              {
                ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
                std::__shared_weak_count::__release_weak(v599);
              }
            }
            goto LABEL_838;
          }
        }
        v565 = v748;
        v566 = v746;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v748 + 72, v746, *((uint64_t *)&v746 + 1));
        if (v566)
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int const*&,void>(&__x, (int *)(v566 + 8));
          v567 = __x.__r_.__value_.__r.__words[0];
          memcpy(*(void **)(__x.__r_.__value_.__r.__words[0] + 16), *(const void **)(v566 + 16), *(int *)(v566 + 12) * (uint64_t)*(int *)(v566 + 8));
          *(_OWORD *)&v756.__r_.__value_.__l.__data_ = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(&src, "W_8bit");
          (*(void (**)(_QWORD *, std::string *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*v565 + 168))(v565, &v756, &src, *(_QWORD *)(v567 + 16), *(int *)(v567 + 12) * (uint64_t)*(int *)(v567 + 8), 0);
          if (SHIBYTE(src.width) < 0)
            operator delete(src.data);
          v568 = (std::__shared_weak_count *)v756.__r_.__value_.__l.__size_;
          if (v756.__r_.__value_.__l.__size_)
          {
            v569 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
            do
              v570 = __ldaxr(v569);
            while (__stlxr(v570 - 1, v569));
            if (!v570)
            {
              ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
              std::__shared_weak_count::__release_weak(v568);
            }
          }
          v571 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
          if (!__x.__r_.__value_.__l.__size_)
            goto LABEL_806;
          v572 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
          do
            v573 = __ldaxr(v572);
          while (__stlxr(v573 - 1, v572));
        }
        else
        {
          v574 = v745;
          if (!(_QWORD)v745)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "invalid state");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v575 = v4;
          v576 = (char *)operator new(0x58uLL);
          *((_QWORD *)v576 + 1) = 0;
          *((_QWORD *)v576 + 2) = 0;
          *(_QWORD *)v576 = &off_1E2DBEF80;
          *((_QWORD *)v576 + 3) = &off_1E2DA1390;
          *(_OWORD *)(v576 + 56) = 0u;
          *(_OWORD *)(v576 + 72) = 0u;
          v577 = *(_DWORD *)(v574 + 8);
          *((_DWORD *)v576 + 8) = v577;
          v578 = *(_DWORD *)(v574 + 12);
          *((_DWORD *)v576 + 9) = v578;
          v579 = (Espresso *)(2 * v577 * (uint64_t)v578);
          v580 = Espresso::kern_alloc_uninitialized(v579);
          bzero(v580, (size_t)v579);
          *((_QWORD *)v576 + 5) = v580;
          v576[48] = 1;
          __x.__r_.__value_.__r.__words[0] = (std::string::size_type)(v576 + 24);
          __x.__r_.__value_.__l.__size_ = (std::string::size_type)v576;
          memcpy(v580, *(const void **)(v574 + 16), 2 * *(int *)(v574 + 8) * (uint64_t)*(int *)(v574 + 12));
          *(_OWORD *)&v756.__r_.__value_.__l.__data_ = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(&src, "W_int16");
          (*(void (**)(_QWORD *, std::string *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*v565 + 168))(v565, &v756, &src, *((_QWORD *)v576 + 5), 2 * *((int *)v576 + 8) * (uint64_t)*((int *)v576 + 9), 0);
          v3 = a3;
          v4 = v575;
          if (SHIBYTE(src.width) < 0)
            operator delete(src.data);
          v581 = (std::__shared_weak_count *)v756.__r_.__value_.__l.__size_;
          if (v756.__r_.__value_.__l.__size_)
          {
            v582 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
            do
              v583 = __ldaxr(v582);
            while (__stlxr(v583 - 1, v582));
            if (!v583)
            {
              ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
              std::__shared_weak_count::__release_weak(v581);
            }
          }
          v571 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
          if (!__x.__r_.__value_.__l.__size_)
            goto LABEL_806;
          v584 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
          do
            v573 = __ldaxr(v584);
          while (__stlxr(v573 - 1, v584));
        }
        if (!v573)
        {
          ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
          std::__shared_weak_count::__release_weak(v571);
        }
LABEL_806:
        v585 = v748;
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
        std::string::basic_string[abi:ne180100]<0>(&src, "Qbias");
        (*(void (**)(_QWORD *, std::string *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*v585 + 168))(v585, &__x, &src, *((_QWORD *)dest.data + 2), 4 * *((int *)dest.data + 2), 0);
        if (SHIBYTE(src.width) < 0)
          operator delete(src.data);
        v586 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
        if (__x.__r_.__value_.__l.__size_)
        {
          v587 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
          do
            v588 = __ldaxr(v587);
          while (__stlxr(v588 - 1, v587));
          if (!v588)
          {
            ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
            std::__shared_weak_count::__release_weak(v586);
          }
        }
        v589 = v748;
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
        std::string::basic_string[abi:ne180100]<0>(&src, "Qscale");
        (*(void (**)(_QWORD *, std::string *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*v589 + 168))(v589, &__x, &src, *(_QWORD *)(__B.__r_.__value_.__r.__words[0] + 16), 4 * *(int *)(__B.__r_.__value_.__r.__words[0] + 8), 0);
        if (SHIBYTE(src.width) < 0)
          operator delete(src.data);
        v590 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
        if (__x.__r_.__value_.__l.__size_)
        {
          v591 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
          do
            v592 = __ldaxr(v591);
          while (__stlxr(v592 - 1, v591));
          if (!v592)
          {
            ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
            std::__shared_weak_count::__release_weak(v590);
          }
        }
        v593 = v743;
        if (!v743)
          goto LABEL_828;
        v594 = v748;
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
        std::string::basic_string[abi:ne180100]<0>(&src, "Qrow_sums");
        (*(void (**)(_QWORD *, std::string *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*v594 + 168))(v594, &__x, &src, *(_QWORD *)(v593 + 16), 4 * *(int *)(v593 + 8), 0);
        if (SHIBYTE(src.width) < 0)
          operator delete(src.data);
        v562 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
        if (!__x.__r_.__value_.__l.__size_)
          goto LABEL_828;
        v595 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
        do
          v564 = __ldaxr(v595);
        while (__stlxr(v564 - 1, v595));
        goto LABEL_826;
      }
      src.height = 0;
      src.data = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v748 + 80), (__int128 *)&src);
      v532 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v533 = (unint64_t *)(src.height + 8);
        do
          v534 = __ldaxr(v533);
        while (__stlxr(v534 - 1, v533));
        if (!v534)
        {
          ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
          std::__shared_weak_count::__release_weak(v532);
        }
      }
      src.height = 0;
      src.data = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v748 + 82), (__int128 *)&src);
      v535 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v536 = (unint64_t *)(src.height + 8);
        do
          v537 = __ldaxr(v536);
        while (__stlxr(v537 - 1, v536));
        if (!v537)
        {
          ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
          std::__shared_weak_count::__release_weak(v535);
        }
      }
      *(_DWORD *)(v39 + 36) = 0;
LABEL_838:
      v602 = v744;
      if (v744)
      {
        v603 = (unint64_t *)&v744->__shared_owners_;
        do
          v604 = __ldaxr(v603);
        while (__stlxr(v604 - 1, v603));
        if (!v604)
        {
          ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
          std::__shared_weak_count::__release_weak(v602);
        }
      }
      v605 = (std::__shared_weak_count *)*((_QWORD *)&v745 + 1);
      if (*((_QWORD *)&v745 + 1))
      {
        v606 = (unint64_t *)(*((_QWORD *)&v745 + 1) + 8);
        do
          v607 = __ldaxr(v606);
        while (__stlxr(v607 - 1, v606));
        if (!v607)
        {
          ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
          std::__shared_weak_count::__release_weak(v605);
        }
      }
      v608 = (std::__shared_weak_count *)*((_QWORD *)&v746 + 1);
      if (*((_QWORD *)&v746 + 1))
      {
        v609 = (unint64_t *)(*((_QWORD *)&v746 + 1) + 8);
        do
          v610 = __ldaxr(v609);
        while (__stlxr(v610 - 1, v609));
        if (!v610)
        {
          ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
          std::__shared_weak_count::__release_weak(v608);
        }
      }
      v75 = 1;
LABEL_118:
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v747 + 1);
      if (*((_QWORD *)&v747 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v747 + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
          if (!v75)
            goto LABEL_125;
LABEL_123:
          v19 = 1;
          v10 = v751;
LABEL_15:
          v21 = *(const void **)(v10 + 64);
          if (v21
          {
            v23 = (std::string::size_type)v22;
            v24 = *(_QWORD *)(v10 + 72);
            v737.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            v737.__r_.__value_.__l.__size_ = v24;
            if (v24)
            {
              v25 = (unint64_t *)(v24 + 8);
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
              v21 = *(const void **)(v10 + 64);
              if (!v21)
                goto LABEL_28;
            }
          }
          else
          {
            v23 = 0;
            *(_OWORD *)&v737.__r_.__value_.__l.__data_ = 0uLL;
            if (!v21)
              goto LABEL_28;
          }
          if (v27)
          {
            v28 = *(_QWORD *)(v10 + 72);
            v736.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
            v736.__r_.__value_.__l.__size_ = v28;
            if (v28)
            {
              v29 = (unint64_t *)(v28 + 8);
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
            }
            goto LABEL_30;
          }
LABEL_28:
          *(_OWORD *)&v736.__r_.__value_.__l.__data_ = 0uLL;
          if (!v23 || *((_BYTE *)v5 + 30))
          {
LABEL_30:
            if (v3 >= 1 && v19)
            {
              v31 = (const char *)(v751 + 16);
              if (*(char *)(v751 + 39) < 0)
                v31 = *(const char **)v31;
              v32 = (const char *)(v751 + 40);
              if (*(char *)(v751 + 63) < 0)
                v32 = *(const char **)v32;
              printf("[Quant] PSNR %s (%s): %.3f (min=%.3f)\n", v31, v32, v20, *((float *)v5 + 4));
            }
            goto LABEL_37;
          }
          if (*((int *)v5 + 2) >= 1)
          {
            if (v3 >= 2)
            {
              v58 = (const char *)(v10 + 16);
              if (*(char *)(v10 + 39) < 0)
                v58 = *(const char **)v58;
              printf("conv: %s\n", v58);
              v23 = v737.__r_.__value_.__r.__words[0];
            }
            if (*(int *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v23 + 384))(v23) + 44) < 4)
              goto LABEL_37;
            get_weights_for_quantization<Espresso::generic_convolution_kernel>(&v735, (uint64_t)&v737, *((_BYTE *)v5 + 29), &v750);
            if (!v735.__r_.__value_.__r.__words[0])
              goto LABEL_261;
            v59 = 0;
            v60 = *(int *)(v735.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v60 *= *(int *)(v735.__r_.__value_.__r.__words[0] + 12 + v59);
              v59 += 4;
            }
            while (v59 != 12);
            if (v60 < *((int *)v5 + 5))
              goto LABEL_261;
            v61 = (_QWORD *)v737.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&src, "dont_quantize");
            if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v61 + 30, (unsigned __int8 *)&src))
            {
              std::string::basic_string[abi:ne180100]<0>(&dest, "dont_quantize");
              __B.__r_.__value_.__r.__words[0] = (std::string::size_type)&dest;
              v62 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v61 + 30), (unsigned __int8 *)&dest, (uint64_t)&std::piecewise_construct, (__int128 **)&__B)+ 10) != 0;
              if (SHIBYTE(dest.width) < 0)
                operator delete(dest.data);
            }
            else
            {
              v62 = 0;
            }
            if (SHIBYTE(src.width) < 0)
            {
              operator delete(src.data);
              if (v62)
                goto LABEL_261;
            }
            else if (v62)
            {
LABEL_261:
              v198 = 0;
LABEL_262:
              v199 = (std::__shared_weak_count *)v735.__r_.__value_.__l.__size_;
              if (!v735.__r_.__value_.__l.__size_)
                goto LABEL_676;
              v200 = (unint64_t *)(v735.__r_.__value_.__l.__size_ + 8);
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              goto LABEL_675;
            }
            (*(void (**)(std::string *__return_ptr, _QWORD *))(*v61 + 472))(&v734, v61);
            if (v3 >= 2)
            {
              v202 = (const char *)(v751 + 16);
              if (*(char *)(v751 + 39) < 0)
                v202 = *(const char **)v202;
              v203 = 0;
              v204 = *(int *)(v735.__r_.__value_.__r.__words[0] + 8);
              do
              {
                v204 *= *(int *)(v735.__r_.__value_.__r.__words[0] + 12 + v203);
                v203 += 4;
              }
              while (v203 != 12);
              printf("compressing %s (%ld)\n", v202, v204);
            }
            v205 = v735.__r_.__value_.__r.__words[0];
            v206 = *(_DWORD *)(v735.__r_.__value_.__r.__words[0] + 8);
            v207 = *(_DWORD *)(v735.__r_.__value_.__r.__words[0] + 12);
            v208 = *(_DWORD *)(v735.__r_.__value_.__r.__words[0] + 16);
            v209 = *(int *)(v735.__r_.__value_.__r.__words[0] + 20);
            if (*(int *)v5 >= 1)
              v210 = (*(_DWORD *)v5 - 1) / (v207 * v206 * v208) + 1;
            else
              v210 = *(_DWORD *)(v735.__r_.__value_.__r.__words[0] + 20);
            if (!*((_DWORD *)v5 + 2))
              v210 = 1;
            if (v210 >= (int)v209)
              v211 = *(_DWORD *)(v735.__r_.__value_.__r.__words[0] + 20);
            else
              v211 = v210;
            if (v3 >= 2)
            {
              printf("\tchannels_per_chunk=%d\n  ", v211);
              v205 = v735.__r_.__value_.__r.__words[0];
              v206 = *(_DWORD *)(v735.__r_.__value_.__r.__words[0] + 8);
              v207 = *(_DWORD *)(v735.__r_.__value_.__r.__words[0] + 12);
              v208 = *(_DWORD *)(v735.__r_.__value_.__r.__words[0] + 16);
            }
            v212 = 0;
            v676 = v211;
            v213 = v206 * v211 * v207;
            v214 = v206;
            v215 = v206;
            do
            {
              v215 *= *(int *)(v205 + 12 + v212);
              v212 += 4;
            }
            while (v212 != 12);
            v216 = v213 * v208;
            if (v215 < v213 * v208)
            {
              v217 = 0;
              v216 = v206;
              do
              {
                v216 *= *(_DWORD *)(v205 + 12 + v217);
                v217 += 4;
              }
              while (v217 != 12);
            }
            v218 = 0;
            v219 = v205 + 12;
            do
            {
              v214 *= *(int *)(v219 + v218);
              v218 += 4;
            }
            while (v218 != 12);
            (*(void (**)(__int128 *__return_ptr, _QWORD *))(*v61 + 512))(&v747, v61);
            (*(void (**)(__int128 *__return_ptr, _QWORD *))(*v61 + 496))(&v746, v61);
            v673 = v216;
            v664 = (v214 - 1) / (unint64_t)v216;
            if (v664 == -1)
            {
LABEL_487:
              v363 = 0;
              v364 = *(int *)(v734.__r_.__value_.__r.__words[0] + 8);
              v365 = v734.__r_.__value_.__r.__words[0] + 12;
              v366 = 0.0;
              v367 = 0.0;
              while (1)
              {
                v368 = 0;
                v369 = *(int *)(v734.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v369 *= *(int *)(v365 + v368);
                  v368 += 4;
                }
                while (v368 != 12);
                v370 = 0;
                v371 = *(int *)(v735.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v371 *= *(int *)(v735.__r_.__value_.__r.__words[0] + 12 + v370);
                  v370 += 4;
                }
                while (v370 != 12);
                if (v371 < v369)
                  v369 = v371;
                if (v369 <= v363)
                  break;
                v372 = *(float *)(*(_QWORD *)(v735.__r_.__value_.__r.__words[0] + 24) + 4 * v363);
                v373 = *(float *)(*(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 24) + 4 * v363) - v372;
                v367 = v367 + (float)(v373 * v373);
                v374 = fabsf(v372);
                if (v363)
                  v375 = v374 <= v366;
                else
                  v375 = 0;
                if (!v375)
                  v366 = v374;
                ++v363;
              }
              for (i = 0; i != 12; i += 4)
                v364 *= *(int *)(v365 + i);
              v377 = log10((v366 + 0.00001) / (sqrt(v367 / (double)v364) + v6));
              if (v3 >= 2)
              {
                v378 = (char *)(v751 + 16);
                if (*(char *)(v751 + 39) < 0)
                  v378 = *(char **)v378;
                std::string::basic_string[abi:ne180100]<0>(&v717, v378);
                if (v718 < 0)
                  operator delete(v717);
              }
              v20 = v377 * v7;
              if (*((float *)v5 + 4) < v20)
              {
                if (*((int *)v5 + 2) <= 0)
                {
                  if (v3 >= 2)
                    printf("setting ranges %d\n", v209);
                  v379 = v737.__r_.__value_.__r.__words[0];
                  v716 = v747;
                  if (*((_QWORD *)&v747 + 1))
                  {
                    v380 = (unint64_t *)(*((_QWORD *)&v747 + 1) + 8);
                    do
                      v381 = __ldxr(v380);
                    while (__stxr(v381 + 1, v380));
                  }
                  v714 = 0;
                  v715 = 0;
                  (*(void (**)(std::string::size_type, __int128 *, uint64_t *))(*(_QWORD *)v379 + 592))(v379, &v716, &v714);
                  v382 = v715;
                  if (v715)
                  {
                    v383 = (unint64_t *)&v715->__shared_owners_;
                    do
                      v384 = __ldaxr(v383);
                    while (__stlxr(v384 - 1, v383));
                    if (!v384)
                    {
                      ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                      std::__shared_weak_count::__release_weak(v382);
                    }
                  }
                  v385 = (std::__shared_weak_count *)*((_QWORD *)&v716 + 1);
                  if (*((_QWORD *)&v716 + 1))
                  {
                    v386 = (unint64_t *)(*((_QWORD *)&v716 + 1) + 8);
                    do
                      v387 = __ldaxr(v386);
                    while (__stlxr(v387 - 1, v386));
                    if (!v387)
                    {
                      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                      std::__shared_weak_count::__release_weak(v385);
                    }
                  }
                  v388 = v737.__r_.__value_.__r.__words[0];
                  v713 = v746;
                  if (*((_QWORD *)&v746 + 1))
                  {
                    v389 = (unint64_t *)(*((_QWORD *)&v746 + 1) + 8);
                    do
                      v390 = __ldxr(v389);
                    while (__stxr(v390 + 1, v389));
                  }
                  v711 = 0;
                  v712 = 0;
                  (*(void (**)(std::string::size_type, __int128 *, uint64_t *))(*(_QWORD *)v388 + 560))(v388, &v713, &v711);
                  v391 = v712;
                  if (v712)
                  {
                    v392 = (unint64_t *)&v712->__shared_owners_;
                    do
                      v393 = __ldaxr(v392);
                    while (__stlxr(v393 - 1, v392));
                    if (!v393)
                    {
                      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                      std::__shared_weak_count::__release_weak(v391);
                    }
                  }
                  v394 = (std::__shared_weak_count *)*((_QWORD *)&v713 + 1);
                  if (*((_QWORD *)&v713 + 1))
                  {
                    v395 = (unint64_t *)(*((_QWORD *)&v713 + 1) + 8);
                    do
                      v396 = __ldaxr(v395);
                    while (__stlxr(v396 - 1, v395));
                    if (!v396)
                    {
                      ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                      std::__shared_weak_count::__release_weak(v394);
                    }
                  }
                  if (v750)
                  {
                    v710[0] = 0;
                    v710[1] = 0;
                    src.height = 0;
                    src.data = 0;
                    (*(void (**)(std::string::size_type, _QWORD *, vImage_Buffer *))(*(_QWORD *)v737.__r_.__value_.__l.__data_
                                                                                              + 544))(v737.__r_.__value_.__r.__words[0], v710, &src);
                    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&src);
                    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v710);
                  }
                  v647 += 4 * *(int *)(v747 + 8);
                }
                v397 = std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::generic_convolution_kernel>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::generic_convolution_kernel> const&>,std::tuple<>>(&v753, v737.__r_.__value_.__r.__words[0], (uint64_t *)&v737);
                std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v397 + 6, (uint64_t)v734.__r_.__value_.__l.__data_, v734.__r_.__value_.__l.__size_);
              }
              v398 = (std::__shared_weak_count *)*((_QWORD *)&v746 + 1);
              if (*((_QWORD *)&v746 + 1))
              {
                v399 = (unint64_t *)(*((_QWORD *)&v746 + 1) + 8);
                do
                  v400 = __ldaxr(v399);
                while (__stlxr(v400 - 1, v399));
                if (!v400)
                {
                  ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
                  std::__shared_weak_count::__release_weak(v398);
                }
              }
              v401 = (std::__shared_weak_count *)*((_QWORD *)&v747 + 1);
              if (*((_QWORD *)&v747 + 1))
              {
                v402 = (unint64_t *)(*((_QWORD *)&v747 + 1) + 8);
                do
                  v403 = __ldaxr(v402);
                while (__stlxr(v403 - 1, v402));
                if (!v403)
                {
                  ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                  std::__shared_weak_count::__release_weak(v401);
                }
              }
              v404 = (std::__shared_weak_count *)v734.__r_.__value_.__l.__size_;
              if (v734.__r_.__value_.__l.__size_)
              {
                v405 = (unint64_t *)(v734.__r_.__value_.__l.__size_ + 8);
                do
                  v406 = __ldaxr(v405);
                while (__stlxr(v406 - 1, v405));
                if (!v406)
                {
                  ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                  std::__shared_weak_count::__release_weak(v404);
                }
              }
              v19 = 1;
              v198 = 1;
              goto LABEL_262;
            }
            v220 = 0;
            v688 = 0;
            v695 = 0;
            v221 = 0;
            v222 = 0;
            v650 = 4 * v216;
            v649 = v209;
            v655 = v209;
            v659 = v4;
            while (1)
            {
              v690 = v220;
              v667 = (int)v220;
              v679 = v222;
              v223 = v735.__r_.__value_.__r.__words[0];
              v224 = *(int *)(v735.__r_.__value_.__r.__words[0] + 8);
              v225 = 12;
              v226 = v224;
              do
              {
                v226 *= *(int *)(v735.__r_.__value_.__r.__words[0] + v225);
                v225 += 4;
              }
              while (v225 != 24);
              v227 = v673;
              v685 = v221;
              v228 = v221 * v673;
              v229 = v221 * v673 + v673;
              v230 = v695;
              if (v229 >= v226)
              {
                for (j = 0; j != 12; j += 4)
                  v224 *= *(int *)(v735.__r_.__value_.__r.__words[0] + 12 + j);
                v227 = v224 - v228;
              }
              v232 = v5[1];
              v719 = *v5;
              v720 = v232;
              v721 = *((_WORD *)v5 + 16);
              v682 = v228;
              if (*((char *)v5 + 63) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 5), *((_QWORD *)v5 + 6));
                v223 = v735.__r_.__value_.__r.__words[0];
                v228 = v682;
              }
              else
              {
                __p = *v660;
              }
              v233 = v6;
              v234 = *(_QWORD *)(v223 + 24);
              v235 = (float *)(v234 + 4 * v228);
              v236 = *v235;
              if (v227)
              {
                v237 = (float *)(v234 + v695);
                v238 = v227;
                v239 = *v235;
                do
                {
                  v240 = *v237++;
                  v241 = v240;
                  if (v240 < v236)
                    v236 = v241;
                  if (v241 > v239)
                    v239 = v241;
                  --v238;
                }
                while (v238);
              }
              else
              {
                v239 = *v235;
              }
              v242 = *((int *)v5 + 1);
              v243 = *((unsigned int *)v5 + 1);
              if ((_DWORD)v243)
              {
                if ((v242 & 0x80000000) != 0)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v244 = (float *)operator new(16 * v242);
                v245 = v244;
                v246 = (char *)v244;
                do
                {
                  *(_DWORD *)v246 = 0;
                  *((_QWORD *)v246 + 1) = 0;
                  v246 += 16;
                }
                while (v246 != (char *)&v244[4 * v242]);
                v670 = &v244[4 * v242];
                if (!HIDWORD(v719))
                {
                  if ((int)v243 >= 1)
                  {
                    v247 = 0;
                    v248 = v244 + 2;
                    do
                    {
                      *(v248 - 2) = v236
                                  + (float)((float)((float)(v239 - v236) * (float)(int)v247)
                                          / (float)((float)(int)v243 + -1.0));
                      *(_QWORD *)v248 = 0;
                      v248 += 4;
                      ++v247;
                    }
                    while (v243 != v247);
                  }
                  goto LABEL_368;
                }
              }
              else
              {
                v670 = 0;
                v245 = 0;
                if (!HIDWORD(v719))
                  goto LABEL_368;
              }
              LODWORD(__B.__r_.__value_.__l.__data_) = 0;
              std::vector<float>::vector(&dest, v242, &__B);
              LODWORD(__x.__r_.__value_.__l.__data_) = 0;
              std::vector<int>::vector((std::vector<int> *)&__B, v242, (const std::vector<int>::value_type *)&__x);
              LODWORD(v745) = 0;
              std::vector<float>::vector(&__x, v242, &v745);
              v249 = *v235;
              if (v227)
              {
                v250 = 0;
                v252 = *v235;
                do
                {
                  v251 = v234 + v695;
                  v253 = *(float *)(v234 + v695 + 4 * v250);
                  if (v253 < v252)
                    v252 = *(float *)(v251 + 4 * v250);
                  if (v253 > v249)
                    v249 = *(float *)(v251 + 4 * v250);
                  ++v250;
                }
                while (v227 != v250);
                v254 = v249 - v252;
                v255 = __B.__r_.__value_.__r.__words[0];
                v256 = v234;
                v257 = v227;
                do
                {
                  v258 = (float)((float)(*(float *)(v256 + v695) - v252) / v254) * (float)(v243 - 1);
                  ++*(_DWORD *)(v255 + 4 * (int)v258);
                  v256 += 4;
                  --v257;
                }
                while (v257);
                v259 = v254 / (float)(int)v243;
              }
              else
              {
                v259 = (float)(v249 - v249) / (float)(int)v243;
              }
              if ((int)v243 >= 1)
              {
                v260 = 0;
                v261 = __B.__r_.__value_.__r.__words[0];
                v262 = __x.__r_.__value_.__r.__words[0];
                v263 = (float *)dest.data;
                do
                {
                  *(float *)(v262 + 4 * v260) = (float)*(int *)(v261 + 4 * v260) / (float)v227;
                  v263[v260] = v259 * (float)((float)(int)v260 + 0.5);
                  ++v260;
                }
                while (v243 != v260);
              }
              memset(&v756, 0, sizeof(v756));
              v264 = 0;
              if ((_DWORD)v243)
              {
                v265 = 0;
                v266 = 0;
                *(_QWORD *)__valc = v242;
                do
                {
                  v267 = rand();
                  v268 = rand();
                  v269 = (float)v267 * 4.6566e-10;
                  v270 = (unint64_t)(float)(v268 % (int)v242);
                  if (v269 < *(float *)(__x.__r_.__value_.__r.__words[0] + 4 * v270))
                  {
                    v271 = *((float *)dest.data + v270)
                         + (float)((float)((float)((float)rand() * 4.6566e-10) + v8) * v259);
                    if ((unint64_t)v266 >= v265)
                    {
                      v272 = v266 - v264;
                      v273 = v272 + 1;
                      if ((unint64_t)(v272 + 1) >> 62)
                      {
                        v756.__r_.__value_.__l.__size_ = (std::string::size_type)v266;
                        v756.__r_.__value_.__r.__words[2] = v265;
                        v756.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      }
                      if ((uint64_t)(v265 - (_QWORD)v264) >> 1 > v273)
                        v273 = (uint64_t)(v265 - (_QWORD)v264) >> 1;
                      if (v265 - (unint64_t)v264 >= 0x7FFFFFFFFFFFFFFCLL)
                        v274 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v274 = v273;
                      if (v274)
                        v274 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v274);
                      else
                        v275 = 0;
                      v276 = (float *)(v274 + 4 * v272);
                      *v276 = v271;
                      v277 = v276 + 1;
                      while (v266 != v264)
                      {
                        v278 = *((_DWORD *)v266-- - 1);
                        *((_DWORD *)v276-- - 1) = v278;
                      }
                      v279 = v274 + 4 * v275;
                      if (v264)
                        operator delete(v264);
                      v264 = v276;
                      v266 = v277;
                      v265 = v279;
                      v242 = *(_QWORD *)__valc;
                    }
                    else
                    {
                      *v266++ = v271;
                    }
                  }
                }
                while (v242 != v266 - v264);
                v756.__r_.__value_.__l.__size_ = (std::string::size_type)v266;
                v756.__r_.__value_.__r.__words[2] = v265;
                v756.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
                v230 = v695;
              }
              if (__x.__r_.__value_.__r.__words[0])
              {
                __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
                operator delete(__x.__r_.__value_.__l.__data_);
              }
              if (__B.__r_.__value_.__r.__words[0])
              {
                __B.__r_.__value_.__l.__size_ = __B.__r_.__value_.__r.__words[0];
                operator delete(__B.__r_.__value_.__l.__data_);
              }
              if (dest.data)
              {
                dest.height = (vImagePixelCount)dest.data;
                operator delete(dest.data);
              }
              if ((int)v243 < 1)
              {
                if (!v264)
                  goto LABEL_368;
              }
              else
              {
                v280 = v245 + 2;
                v281 = v264;
                v282 = v243;
                do
                {
                  v283 = *(_DWORD *)v281++;
                  *((_DWORD *)v280 - 2) = v283;
                  *v280 = 0;
                  v280 += 2;
                  --v282;
                }
                while (v282);
              }
              v756.__r_.__value_.__l.__size_ = (std::string::size_type)v264;
              operator delete(v264);
LABEL_368:
              LODWORD(__B.__r_.__value_.__l.__data_) = -1;
              std::vector<int>::vector((std::vector<int> *)&dest, v227, (const std::vector<int>::value_type *)&__B);
              if (SDWORD2(v719) < 1)
              {
LABEL_426:
                if (!v227)
                  goto LABEL_446;
              }
              else
              {
                v284 = 0;
                v285 = v234 + v230;
                while (v227)
                {
                  v286 = 0;
                  v287 = 0;
                  v288 = (int *)dest.data;
                  do
                  {
                    if ((int)v243 < 1)
                    {
                      v291 = -1;
                    }
                    else
                    {
                      v289 = 0;
                      v290 = 0.0;
                      v291 = -1;
                      v292 = v245;
                      do
                      {
                        v293 = *v292;
                        v292 += 4;
                        v294 = (float)(v235[v286] - v293) * (float)(v235[v286] - v293);
                        if (v294 < v290 || v291 == -1)
                        {
                          v290 = v294;
                          v291 = v289;
                        }
                        ++v289;
                      }
                      while (v243 != v289);
                    }
                    if (v288[v286] != v291)
                      ++v287;
                    v288[v286++] = v291;
                  }
                  while (v286 != v227);
                  if (!v287)
                    goto LABEL_445;
                  v296 = v245 + 2;
                  v297 = v243;
                  if ((int)v243 >= 1)
                  {
                    do
                    {
                      *((_DWORD *)v296 - 2) = 0;
                      *v296 = 0;
                      v296 += 2;
                      --v297;
                    }
                    while (v297);
                  }
                  for (k = 0; k != v227; ++k)
                  {
                    v299 = &v245[4 * v288[k]];
                    *v299 = *(float *)(v285 + 4 * k) + *v299;
                    ++*((_QWORD *)v299 + 1);
                  }
                  v300 = v245;
                  v301 = v243;
                  if ((int)v243 < 1)
                  {
                    v303 = 0;
                    v304 = -1;
                  }
                  else
                  {
                    do
                    {
                      *v300 = *v300 / (float)*((unint64_t *)v300 + 1);
                      v300 += 4;
                      --v301;
                    }
                    while (v301);
                    v302 = 0;
                    v303 = 0;
                    v304 = -1;
                    v305 = (unint64_t *)(v245 + 2);
                    do
                    {
                      v307 = *v305;
                      v305 += 2;
                      v306 = v307;
                      v308 = v307 > v303;
                      if (v307 >= v303)
                        v304 = v302;
                      if (v308)
                        v303 = v306;
                      ++v302;
                    }
                    while (v243 != v302);
                  }
                  memset(&__B, 0, sizeof(__B));
                  std::vector<unsigned long>::reserve((void **)&__B.__r_.__value_.__l.__data_, v303);
                  for (m = 0; m != v227; ++m)
                  {
                    if (*((_DWORD *)dest.data + m) == v304)
                    {
                      v310 = __B.__r_.__value_.__l.__size_;
                      if (__B.__r_.__value_.__l.__size_ >= __B.__r_.__value_.__r.__words[2])
                      {
                        v312 = (void *)__B.__r_.__value_.__r.__words[0];
                        v313 = (uint64_t)(__B.__r_.__value_.__l.__size_ - __B.__r_.__value_.__r.__words[0]) >> 3;
                        v314 = v313 + 1;
                        if ((unint64_t)(v313 + 1) >> 61)
                          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                        v315 = __B.__r_.__value_.__r.__words[2] - __B.__r_.__value_.__r.__words[0];
                        if ((uint64_t)(__B.__r_.__value_.__r.__words[2] - __B.__r_.__value_.__r.__words[0]) >> 2 > v314)
                          v314 = v315 >> 2;
                        v316 = (unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8;
                        v317 = 0x1FFFFFFFFFFFFFFFLL;
                        if (!v316)
                          v317 = v314;
                        if (v317)
                        {
                          v317 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v317);
                          v310 = __B.__r_.__value_.__l.__size_;
                          v312 = (void *)__B.__r_.__value_.__r.__words[0];
                        }
                        else
                        {
                          v318 = 0;
                        }
                        v319 = (_QWORD *)(v317 + 8 * v313);
                        *v319 = m;
                        v311 = (std::string::size_type)(v319 + 1);
                        while ((void *)v310 != v312)
                        {
                          v320 = *(_QWORD *)(v310 - 8);
                          v310 -= 8;
                          *--v319 = v320;
                        }
                        __B.__r_.__value_.__r.__words[0] = (std::string::size_type)v319;
                        __B.__r_.__value_.__l.__size_ = v311;
                        __B.__r_.__value_.__r.__words[2] = v317 + 8 * v318;
                        if (v312)
                          operator delete(v312);
                      }
                      else
                      {
                        *(_QWORD *)__B.__r_.__value_.__l.__size_ = m;
                        v311 = v310 + 8;
                      }
                      __B.__r_.__value_.__l.__size_ = v311;
                    }
                  }
                  v321 = v243;
                  v322 = v245 + 2;
                  if ((int)v243 >= 1)
                  {
                    do
                    {
                      if (!*(_QWORD *)v322)
                        *(v322 - 2) = v235[rand() % v227];
                      v322 += 4;
                      --v321;
                    }
                    while (v321);
                  }
                  if (__B.__r_.__value_.__r.__words[0])
                  {
                    __B.__r_.__value_.__l.__size_ = __B.__r_.__value_.__r.__words[0];
                    operator delete(__B.__r_.__value_.__l.__data_);
                  }
                  ++v284;
                  v230 = v695;
                  if (v284 >= SDWORD2(v719))
                    goto LABEL_426;
                }
                v284 = 0;
LABEL_445:
                printf("\tearly exit iter=%d\n", v284);
                if (!v227)
                {
LABEL_446:
                  v333 = 0.0;
                  v325 = "EEFbRKNS4_11IROperationEEEE";
                  goto LABEL_447;
                }
              }
              v323 = 0;
              v324 = (int *)dest.data;
              v325 = "NSt3__110__function6__funcIZN8Espresso13MILTransforms12CollectNamesERKN3MIL7IRBlockEE3$_0NS_9alloca"
                     "torIS8_EEFbRKNS4_11IROperationEEEE"
                   + 106;
              do
              {
                if ((int)v243 < 1)
                {
                  v328 = -1;
                }
                else
                {
                  v326 = 0;
                  v327 = 0.0;
                  v328 = -1;
                  v329 = v245;
                  do
                  {
                    v330 = *v329;
                    v329 += 4;
                    v331 = (float)(v235[v323] - v330) * (float)(v235[v323] - v330);
                    if (v331 < v327 || v328 == -1)
                    {
                      v327 = v331;
                      v328 = v326;
                    }
                    ++v326;
                  }
                  while (v243 != v326);
                }
                v324[v323++] = v328;
              }
              while (v323 != v227);
              v333 = 0.0;
              v334 = v227;
              do
              {
                v335 = *v324++;
                v336 = sqrtf((float)(*(float *)(v234 + v230) - v245[4 * v335])* (float)(*(float *)(v234 + v230) - v245[4 * v335]));
                if (v336 > v333)
                  v333 = v336;
                v234 += 4;
                --v334;
              }
              while (v334);
LABEL_447:
              v337 = *v245;
              v338 = *v245;
              v339 = v245;
              LODWORD(v209) = v655;
              if ((int)v243 >= 1)
              {
                do
                {
                  v340 = *v339;
                  v339 += 4;
                  v341 = v340;
                  if (v340 < v337)
                    v337 = v341;
                  if (v341 > v338)
                    v338 = v341;
                  --v243;
                }
                while (v243);
              }
              v724 = 0u;
              memset(&src, 0, sizeof(src));
              std::vector<float>::resize(&src, ((char *)v670 - (char *)v245) >> 4);
              v3 = a3;
              if (v670 != v245)
              {
                v342 = src.data;
                if ((unint64_t)(((char *)v670 - (char *)v245) >> 4) <= 1)
                  v343 = 1;
                else
                  v343 = ((char *)v670 - (char *)v245) >> 4;
                v344 = v245;
                do
                {
                  v345 = *(_DWORD *)v344;
                  v344 += 4;
                  *v342++ = v345;
                  --v343;
                }
                while (v343);
              }
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&src.rowBytes, (char *)dest.data, dest.height, (uint64_t)(dest.height - (unint64_t)dest.data) >> 2);
              v725 = v333;
              v726 = v236;
              v727 = v239;
              v728 = v337;
              v729 = v338;
              if (dest.data)
              {
                dest.height = (vImagePixelCount)dest.data;
                operator delete(dest.data);
              }
              operator delete(v245);
              v6 = v233;
              v7 = 20.0;
              v8 = -0.5;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v5 = a1;
              if (a3 >= 2)
                printf("\tmaxerr=%e mM=%e %e cmM=%e %e\n", v725, v726, v727, v728, v729);
              v346 = v682;
              if (v227 + v682 > v682)
              {
                rowBytes = (int *)src.rowBytes;
                v348 = src.data;
                v349 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 24);
                v350 = v227 + v688 + v667;
                do
                {
                  v351 = *rowBytes++;
                  *(_DWORD *)(v349 + v230) = v348[v351];
                  v349 += 4;
                  --v350;
                }
                while (v350);
              }
              if (a3 > 1)
              {
                printf("\tChannel for chunk %d/%d: %d - %d. C=%d %e - %e\n", v685, v664 + 1, v676 * v685, v676 + v676 * v685, v655, *(float *)src.data, *(float *)(src.height - 4));
                v346 = v682;
              }
              v221 = v685 + 1;
              if (v685 * v676 < (v685 + 1) * v676)
              {
                v352 = v747;
                v353 = src.data;
                v354 = ((uint64_t)(src.height - (unint64_t)src.data) >> 2) - 1;
                v355 = v676;
                v356 = v679;
                do
                {
                  if (v356 < v655)
                  {
                    v357 = (_DWORD *)(*(_QWORD *)(v352 + 16) + 4 * v356);
                    *v357 = *v353;
                    v357[v649] = v353[v354];
                  }
                  ++v356;
                  --v355;
                }
                while (v355);
              }
              v358 = (_DWORD *)src.rowBytes;
              if (*((int *)a1 + 2) <= 0 && v227 + v682 > v346)
              {
                v361 = 0;
                v362 = v227 + v688 + v667;
                v4 = v659;
                do
                {
                  *(_BYTE *)(*(_QWORD *)(v746 + 24) + v690 + v361) = v358[v361];
                  v358 = (_DWORD *)src.rowBytes;
                  *(float *)(*(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 24) + v695 + 4 * v361) = *(float *)src.data + (float)((float)((float)(*(float *)(src.height - 4) - *(float *)src.data) * (float)*(int *)(src.rowBytes + 4 * v361)) * *((float *)v325 + 723));
                  ++v361;
                }
                while (v362 != v361);
              }
              else
              {
                v4 = v659;
                v360 = v690;
                if (!src.rowBytes)
                  goto LABEL_484;
              }
              *(_QWORD *)&v724 = v358;
              operator delete(v358);
              v360 = v690;
LABEL_484:
              if (src.data)
              {
                src.height = (vImagePixelCount)src.data;
                operator delete(src.data);
                v360 = v690;
              }
              v220 = v360 + v673;
              v222 = v679 + v676;
              v695 += v650;
              v688 -= v673;
              if (v685 == v664)
                goto LABEL_487;
            }
          }
          if (v3 > 1)
          {
            v70 = (const char *)(v10 + 16);
            if (*(char *)(v10 + 39) < 0)
              v70 = *(const char **)v70;
            printf("conv: %s\n", v70);
            v23 = v737.__r_.__value_.__r.__words[0];
          }
          if (*(int *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v23 + 384))(v23) + 44) < 4)
            goto LABEL_37;
          get_weights_for_quantization<Espresso::generic_convolution_kernel>(&__B, (uint64_t)&v737, *((_BYTE *)v5 + 29), &v750);
          if (!__B.__r_.__value_.__r.__words[0])
            goto LABEL_671;
          v71 = 0;
          v72 = *(int *)(__B.__r_.__value_.__r.__words[0] + 8);
          do
          {
            v72 *= *(int *)(__B.__r_.__value_.__r.__words[0] + 12 + v71);
            v71 += 4;
          }
          while (v71 != 12);
          if (v72 < *((int *)v5 + 5))
            goto LABEL_671;
          v73 = (_QWORD *)v737.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&src, "dont_quantize");
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v73 + 30, (unsigned __int8 *)&src))
          {
            std::string::basic_string[abi:ne180100]<0>(&dest, "dont_quantize");
            __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&dest;
            v74 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v73 + 30), (unsigned __int8 *)&dest, (uint64_t)&std::piecewise_construct, (__int128 **)&__x)+ 10) != 0;
            if (SHIBYTE(dest.width) < 0)
              operator delete(dest.data);
          }
          else
          {
            v74 = 0;
          }
          if (SHIBYTE(src.width) < 0)
          {
            operator delete(src.data);
            if (v74)
              goto LABEL_671;
          }
          else if (v74)
          {
LABEL_671:
            v198 = 0;
LABEL_672:
            v199 = (std::__shared_weak_count *)__B.__r_.__value_.__l.__size_;
            if (!__B.__r_.__value_.__l.__size_)
              goto LABEL_676;
            v485 = (unint64_t *)(__B.__r_.__value_.__l.__size_ + 8);
            do
              v201 = __ldaxr(v485);
            while (__stlxr(v201 - 1, v485));
LABEL_675:
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
              if ((v198 & 1) != 0)
                goto LABEL_30;
              goto LABEL_37;
            }
LABEL_676:
            if ((v198 & 1) != 0)
              goto LABEL_30;
LABEL_37:
            v33 = (std::__shared_weak_count *)v736.__r_.__value_.__l.__size_;
            if (v736.__r_.__value_.__l.__size_)
            {
              v34 = (unint64_t *)(v736.__r_.__value_.__l.__size_ + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v36 = (std::__shared_weak_count *)v737.__r_.__value_.__l.__size_;
            if (v737.__r_.__value_.__l.__size_)
            {
              v37 = (unint64_t *)(v737.__r_.__value_.__l.__size_ + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            goto LABEL_125;
          }
          (*(void (**)(std::string *__return_ptr, _QWORD *))(*v73 + 472))(&__x, v73);
          v486 = v4;
          v487 = 0;
          v488 = *(int *)(__B.__r_.__value_.__r.__words[0] + 20);
          v489 = *(_DWORD *)(__B.__r_.__value_.__r.__words[0] + 8);
          v490 = v489;
          do
          {
            v490 *= *(_DWORD *)(__B.__r_.__value_.__r.__words[0] + 12 + v487);
            v487 += 4;
          }
          while (v487 != 12);
          v491 = *(_DWORD *)(__B.__r_.__value_.__r.__words[0] + 12);
          v492 = *(_DWORD *)(__B.__r_.__value_.__r.__words[0] + 16);
          (*(void (**)(std::string *__return_ptr, _QWORD *))(*v73 + 512))(&v756, v73);
          (*(void (**)(std::string *__return_ptr, _QWORD *))(*v73 + 496))(&v735, v73);
          std::vector<float>::vector(&src, v488);
          std::vector<float>::vector(&dest, v488);
          v493 = v491 * v489 * v492;
          Espresso::range_quantizer<unsigned char>::quantize_chunks(*(_QWORD *)(__B.__r_.__value_.__r.__words[0] + 24), v490, v493, (uint64_t)src.data, (uint64_t)dest.data, *(_QWORD *)(v735.__r_.__value_.__r.__words[0] + 24), *((_BYTE *)v5 + 33) == 0);
          Espresso::range_quantizer<unsigned char>::dequantize_chunks(*(float **)(__x.__r_.__value_.__r.__words[0] + 24), v490, v493, (float *)src.data, (float *)dest.data, *(unsigned __int8 **)(v735.__r_.__value_.__r.__words[0] + 24));
          v4 = v486;
          if ((int)v488 >= 1)
          {
            v494 = (float *)dest.data;
            v495 = (float *)src.data;
            v496 = *(float **)(v756.__r_.__value_.__r.__words[0] + 16);
            v497 = v488;
            do
            {
              v498 = *v494++;
              v499 = v498;
              v500 = *v495++;
              *v496 = v499;
              v496[v488] = v499 + (float)(v500 * 255.0);
              ++v496;
              --v497;
            }
            while (v497);
          }
          v501 = 0;
          v502 = *(int *)(__x.__r_.__value_.__r.__words[0] + 8);
          v503 = __x.__r_.__value_.__r.__words[0] + 12;
          v504 = 0.0;
          v505 = 0.0;
          while (1)
          {
            v506 = 0;
            v507 = *(int *)(__x.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v507 *= *(int *)(v503 + v506);
              v506 += 4;
            }
            while (v506 != 12);
            v508 = 0;
            v509 = *(int *)(__B.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v509 *= *(int *)(__B.__r_.__value_.__r.__words[0] + 12 + v508);
              v508 += 4;
            }
            while (v508 != 12);
            if (v509 < v507)
              v507 = v509;
            if (v507 <= v501)
              break;
            v510 = *(float *)(*(_QWORD *)(__B.__r_.__value_.__r.__words[0] + 24) + 4 * v501);
            v511 = *(float *)(*(_QWORD *)(__x.__r_.__value_.__r.__words[0] + 24) + 4 * v501) - v510;
            v505 = v505 + (float)(v511 * v511);
            v512 = fabsf(v510);
            if (v501)
              v513 = v512 <= v504;
            else
              v513 = 0;
            if (!v513)
              v504 = v512;
            ++v501;
          }
          for (n = 0; n != 12; n += 4)
            v502 *= *(int *)(v503 + n);
          v515 = log10((v504 + 0.00001) / (sqrt(v505 / (double)v502) + v6));
          if (v3 >= 2)
          {
            v516 = (char *)(v751 + 16);
            if (*(char *)(v751 + 39) < 0)
              v516 = *(char **)v516;
            std::string::basic_string[abi:ne180100]<0>(&v708, v516);
            if (v709 < 0)
              operator delete(v708);
          }
          v20 = v515 * v7;
          if (*(int *)((*(uint64_t (**)(_QWORD *))(*v73 + 384))(v73) + 44) >= 2
            && (v517 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v73 + 384))(v73) + 116),
                v517 == *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v73 + 384))(v73) + 44)))
          {
            puts("Skipping quantization for depth-wise convs. workaround for rdr38565288");
          }
          else if (*((float *)v5 + 4) < v20)
          {
            if (*((int *)v5 + 2) <= 0)
            {
              if (v3 >= 2)
                printf("setting ranges %d\n", v488);
              v707 = *(_OWORD *)&v756.__r_.__value_.__l.__data_;
              if (v756.__r_.__value_.__l.__size_)
              {
                v611 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
                do
                  v612 = __ldxr(v611);
                while (__stxr(v612 + 1, v611));
              }
              v706[0] = 0;
              v706[1] = 0;
              (*(void (**)(_QWORD *, __int128 *, _QWORD *))(*v73 + 592))(v73, &v707, v706);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v706);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v707);
              v705 = *(_OWORD *)&v735.__r_.__value_.__l.__data_;
              if (v735.__r_.__value_.__l.__size_)
              {
                v613 = (unint64_t *)(v735.__r_.__value_.__l.__size_ + 8);
                do
                  v614 = __ldxr(v613);
                while (__stxr(v614 + 1, v613));
              }
              v704[0] = 0;
              v704[1] = 0;
              (*(void (**)(_QWORD *, __int128 *, _QWORD *))(*v73 + 560))(v73, &v705, v704);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v704);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v705);
              v647 += 4 * *(int *)(v756.__r_.__value_.__r.__words[0] + 8);
            }
            v615 = std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::generic_convolution_kernel>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::generic_convolution_kernel> const&>,std::tuple<>>(&v753, (unint64_t)v73, (uint64_t *)&v737);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v615 + 6, (uint64_t)__x.__r_.__value_.__l.__data_, __x.__r_.__value_.__l.__size_);
            if (v750)
            {
              v703[0] = 0;
              v703[1] = 0;
              *(_OWORD *)&v734.__r_.__value_.__l.__data_ = 0uLL;
              (*(void (**)(_QWORD *, _QWORD *, std::string *))(*v73 + 544))(v73, v703, &v734);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v734);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v703);
            }
          }
          if (dest.data)
          {
            dest.height = (vImagePixelCount)dest.data;
            operator delete(dest.data);
          }
          if (src.data)
          {
            src.height = (vImagePixelCount)src.data;
            operator delete(src.data);
          }
          v616 = (std::__shared_weak_count *)v735.__r_.__value_.__l.__size_;
          if (v735.__r_.__value_.__l.__size_)
          {
            v617 = (unint64_t *)(v735.__r_.__value_.__l.__size_ + 8);
            do
              v618 = __ldaxr(v617);
            while (__stlxr(v618 - 1, v617));
            if (!v618)
            {
              ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
              std::__shared_weak_count::__release_weak(v616);
            }
          }
          v619 = (std::__shared_weak_count *)v756.__r_.__value_.__l.__size_;
          if (v756.__r_.__value_.__l.__size_)
          {
            v620 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
            do
              v621 = __ldaxr(v620);
            while (__stlxr(v621 - 1, v620));
            if (!v621)
            {
              ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
              std::__shared_weak_count::__release_weak(v619);
            }
          }
          v622 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
          if (__x.__r_.__value_.__l.__size_)
          {
            v623 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
            do
              v624 = __ldaxr(v623);
            while (__stlxr(v624 - 1, v623));
            if (!v624)
            {
              ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
              std::__shared_weak_count::__release_weak(v622);
            }
          }
          v19 = 1;
          v198 = 1;
          goto LABEL_672;
        }
      }
      if (v75)
        goto LABEL_123;
LABEL_125:
      v79 = v749;
      if (v749)
      {
        v80 = (unint64_t *)&v749->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = v752;
      if (v752)
      {
        v83 = (unint64_t *)&v752->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v4 += 2;
      if (v4 == v692)
        goto LABEL_888;
    }
  }
  v647 = 0;
LABEL_888:
  if (v3 > 1)
    printf("Total size of AUX lut tables/ranges %.4f MB\n", (float)((float)v647 * 0.00000095367));
  v625 = v753;
  if (v753 != (uint64_t *)v754)
  {
    do
    {
      v626 = (void *)v625[4];
      v627 = v625[5];
      src.data = v626;
      src.height = v627;
      if (v627)
      {
        v628 = (unint64_t *)(v627 + 8);
        do
          v629 = __ldxr(v628);
        while (__stxr(v629 + 1, v628));
      }
      v630 = v625[6];
      v631 = v625[7];
      src.width = v630;
      src.rowBytes = v631;
      if (v631)
      {
        v632 = (unint64_t *)(v631 + 8);
        do
          v633 = __ldxr(v632);
        while (__stxr(v633 + 1, v632));
        v702 = (std::__shared_weak_count *)v631;
        do
          v634 = __ldxr(v632);
        while (__stxr(v634 + 1, v632));
      }
      else
      {
        v702 = 0;
      }
      v701 = v630;
      (*(void (**)(void *, vImagePixelCount *))(*(_QWORD *)v626 + 400))(v626, &v701);
      v635 = v702;
      if (v702)
      {
        v636 = (unint64_t *)&v702->__shared_owners_;
        do
          v637 = __ldaxr(v636);
        while (__stlxr(v637 - 1, v636));
        if (!v637)
        {
          ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
          std::__shared_weak_count::__release_weak(v635);
        }
      }
      v638 = (std::__shared_weak_count *)src.rowBytes;
      if (src.rowBytes)
      {
        v639 = (unint64_t *)(src.rowBytes + 8);
        do
          v640 = __ldaxr(v639);
        while (__stlxr(v640 - 1, v639));
        if (!v640)
        {
          ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
          std::__shared_weak_count::__release_weak(v638);
        }
      }
      v641 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v642 = (unint64_t *)(src.height + 8);
        do
          v643 = __ldaxr(v642);
        while (__stlxr(v643 - 1, v642));
        if (!v643)
        {
          ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
          std::__shared_weak_count::__release_weak(v641);
        }
      }
      v644 = (uint64_t *)v625[1];
      if (v644)
      {
        do
        {
          v645 = v644;
          v644 = (uint64_t *)*v644;
        }
        while (v644);
      }
      else
      {
        do
        {
          v645 = (uint64_t *)v625[2];
          v125 = *v645 == (_QWORD)v625;
          v625 = v645;
        }
        while (!v125);
      }
      v625 = v645;
    }
    while (v645 != (uint64_t *)v754);
  }
  std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy(v754[0]);
}

void sub_1917BC3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51)
{
  uint64_t v51;
  void *v53;
  void *v54;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  v53 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v53;
    operator delete(v53);
  }
  v54 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v54;
    operator delete(v54);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v51 - 240);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v51 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v51 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x380]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x398]);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy((_QWORD *)STACK[0x3B0]);
  _Unwind_Resume(a1);
}

uint64_t Espresso::range_quantizer<signed char>::quantize_chunks(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  int v21;

  v6 = (a2 - 1) / a3;
  if ((v6 & 0x80000000) == 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = (v6 + 1);
    do
    {
      v10 = v7 * a3;
      v11 = v7 + 1;
      v12 = (v7 + 1) * a3;
      if (v12 >= a2)
        v12 = a2;
      v13 = *(float *)(result + 4 * v10);
      if (v10 >= v12)
      {
        v17 = (float)(v13 - v13) / 255.0;
        v18 = v13 + (float)(v17 * 128.0);
      }
      else
      {
        v14 = v8;
        v15 = v13;
        do
        {
          v16 = *(float *)(result + 4 * v14);
          if (v16 < v15)
            v15 = *(float *)(result + 4 * v14);
          if (v16 > v13)
            v13 = *(float *)(result + 4 * v14);
          ++v14;
        }
        while (v14 < v12);
        v17 = (float)(v13 - v15) / 255.0;
        v18 = v15 + (float)(v17 * 128.0);
        v19 = v8;
        do
        {
          v20 = roundf((float)(1.0 / v17) * (float)(*(float *)(result + 4 * v19) - v18));
          if (v20 <= 2147500000.0)
          {
            if (v20 >= -2147500000.0)
            {
              v21 = (int)v20;
              if ((int)v20 <= -128)
                v21 = -128;
              if (v21 >= 127)
                LOBYTE(v21) = 127;
            }
            else
            {
              LOBYTE(v21) = 0x80;
            }
          }
          else
          {
            LOBYTE(v21) = 127;
          }
          *(_BYTE *)(a6 + v19++) = v21;
        }
        while (v19 < v12);
      }
      *(float *)(a4 + 4 * v7) = v17;
      *(float *)(a5 + 4 * v7) = v18;
      v8 += a3;
      ++v7;
    }
    while (v11 != v9);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<short,2>,std::allocator<Espresso::blob<short,2>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  Espresso *v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEF80;
  *((_QWORD *)v10 + 3) = &off_1E2DA1390;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1917BCC24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::range_quantizer<short>::quantize_chunks(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  int v21;

  v6 = (a2 - 1) / a3;
  if ((v6 & 0x80000000) == 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = (v6 + 1);
    do
    {
      v10 = v7 * a3;
      v11 = v7 + 1;
      v12 = (v7 + 1) * a3;
      if (v12 >= a2)
        v12 = a2;
      v13 = *(float *)(result + 4 * v10);
      if (v10 >= v12)
      {
        v17 = (float)(v13 - v13) / 2047.0;
        v18 = v13 + (float)(v17 * 1024.0);
      }
      else
      {
        v14 = v8;
        v15 = v13;
        do
        {
          v16 = *(float *)(result + 4 * v14);
          if (v16 < v15)
            v15 = *(float *)(result + 4 * v14);
          if (v16 > v13)
            v13 = *(float *)(result + 4 * v14);
          ++v14;
        }
        while (v14 < v12);
        v17 = (float)(v13 - v15) / 2047.0;
        v18 = v15 + (float)(v17 * 1024.0);
        v19 = v8;
        do
        {
          v20 = roundf((float)(1.0 / v17) * (float)(*(float *)(result + 4 * v19) - v18));
          if (v20 <= 2147500000.0)
          {
            if (v20 >= -2147500000.0)
            {
              v21 = (int)v20;
              if ((int)v20 <= -1024)
                v21 = -1024;
              if (v21 >= 1023)
                LOWORD(v21) = 1023;
            }
            else
            {
              LOWORD(v21) = -1024;
            }
          }
          else
          {
            LOWORD(v21) = 1023;
          }
          *(_WORD *)(a6 + 2 * v19++) = v21;
        }
        while (v19 < v12);
      }
      *(float *)(a4 + 4 * v7) = v17;
      *(float *)(a5 + 4 * v7) = v18;
      v8 += a3;
      ++v7;
    }
    while (v11 != v9);
  }
  return result;
}

uint64_t Espresso::range_quantizer<unsigned char>::quantize_chunks(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  BOOL v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  unsigned int v26;

  v7 = (a2 - 1) / a3;
  if ((v7 & 0x80000000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = (v7 + 1);
    do
    {
      v11 = v8 * a3;
      v12 = v8 + 1;
      if (((int)v8 + 1) * a3 >= a2)
        v13 = a2;
      else
        v13 = (v8 + 1) * a3;
      v14 = *(float *)(result + 4 * v11);
      v15 = v13;
      v16 = v11 < v13;
      v17 = v14;
      v18 = v9;
      if (v16)
      {
        do
        {
          v19 = *(float *)(result + 4 * v18);
          if (v19 < v14)
            v14 = *(float *)(result + 4 * v18);
          if (v19 > v17)
            v17 = *(float *)(result + 4 * v18);
          ++v18;
        }
        while (v18 < v15);
      }
      if ((a7 & 1) != 0)
      {
        v20 = fabsf(v14);
        v21 = fabsf(v17);
        if (v20 >= v21)
          v21 = v20;
        v22 = v21 / 127.0;
        v23 = v22 * -128.0;
      }
      else
      {
        v22 = (float)(v17 - v14) / 255.0;
        v23 = v14 + (float)(v22 * -0.0);
      }
      if (v11 < v15)
      {
        v24 = v9;
        do
        {
          v25 = roundf((float)(1.0 / v22) * (float)(*(float *)(result + 4 * v24) - v23));
          if (v25 <= 2147500000.0)
          {
            if (v25 >= -2147500000.0)
            {
              v26 = (int)v25 & ~((int)v25 >> 31);
              if (v26 >= 0xFF)
                LOBYTE(v26) = -1;
            }
            else
            {
              LOBYTE(v26) = 0;
            }
          }
          else
          {
            LOBYTE(v26) = -1;
          }
          *(_BYTE *)(a6 + v24++) = v26;
        }
        while (v24 < v15);
      }
      *(float *)(a4 + 4 * v8) = v22;
      *(float *)(a5 + 4 * v8) = v23;
      v9 += a3;
      ++v8;
    }
    while (v12 != v10);
  }
  return result;
}

void get_weights_for_quantization<Espresso::generic_convolution_kernel>(_QWORD *a1, uint64_t a2, char a3, _BYTE *a4)
{
  std::__shared_weak_count *v8;
  void *data;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  vImagePixelCount v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *height;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  vImage_Buffer dest;
  vImage_Buffer src;

  *a1 = 0;
  a1[1] = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 456))(&v31);
  if (v31 || (a3 & 1) == 0)
  {
    if (v31)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v31 + 8);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&src);
      height = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v22 = (unint64_t *)(src.height + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
          std::__shared_weak_count::__release_weak(height);
        }
      }
      v24 = 0;
      v25 = *(int *)(v31 + 8);
      do
      {
        v25 *= *(int *)(v31 + 12 + v24);
        v24 += 4;
      }
      while (v24 != 12);
      memcpy(*(void **)(*a1 + 24), *(const void **)(v31 + 24), 4 * v25);
    }
  }
  else
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 552))(&src);
    data = src.data;
    v8 = (std::__shared_weak_count *)src.height;
    if (!src.height)
      goto LABEL_7;
    v10 = (unint64_t *)(src.height + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (!data)
        goto LABEL_29;
    }
    else
    {
LABEL_7:
      if (!data)
        goto LABEL_29;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 552))(&v29);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v29 + 8);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&src);
    v12 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v13 = (unint64_t *)(src.height + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = 0;
    v16 = *(void **)(*a1 + 24);
    v17 = *(int *)(v29 + 8);
    do
    {
      v17 *= *(int *)(v29 + 12 + v15);
      v15 += 4;
    }
    while (v15 != 12);
    src.data = *(void **)(v29 + 24);
    src.height = 1;
    src.width = v17;
    src.rowBytes = 2 * v17;
    dest.data = v16;
    dest.height = 1;
    dest.width = v17;
    dest.rowBytes = 4 * v17;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    *a4 = 1;
    v18 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
LABEL_29:
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1917BD134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::generic_convolution_kernel>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::generic_convolution_kernel> const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return (uint64_t *)v7;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x40uLL);
    v10 = v9;
    v11 = a3[1];
    v9[4] = *a3;
    v9[5] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v9[6] = 0;
    v9[7] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v14 = (uint64_t *)**a1;
    v15 = v9;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy(a1[1]);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t Espresso::blob<short,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1390;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<short,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1390;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<short,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEF80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<short,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEF80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<short,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSGraphEngine::Kernels::reshape_like_kernel::~reshape_like_kernel(Espresso::MPSGraphEngine::Kernels::reshape_like_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::reshape_like_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSGraphEngine::Kernels::tile_kernel::~tile_kernel(Espresso::MPSGraphEngine::Kernels::tile_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::tile_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v16[2];
  char v17;
  std::string __p;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int64x2_t *v22;
  std::__shared_weak_count *v23;
  void **v24;

  v3 = a3[1] - *a3 == 64 && a3[4] - a3[3] == 64;
  v4 = v3;
  if (!v3)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    v22 = *(int64x2_t **)a2;
    v23 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v16, "[Dispatch::MPSGraph::tile_kernel] unsupported: invalid number of inputs or outputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v16, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v22, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v9 = v21;
    if (v21)
    {
      v10 = (unint64_t *)&v21->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v24 = (void **)&v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)&v19;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v17 < 0)
      operator delete(v16[0]);
    v12 = v23;
    if (v23)
    {
      v13 = (unint64_t *)&v23->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  return v4;
}

void sub_1917BD624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 56);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::blob_container::~blob_container(Espresso::ANECompilerEngine::blob_container *this)
{
  Espresso::abstract_blob_container::~abstract_blob_container(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::blob_container::platform(Espresso::ANECompilerEngine::blob_container *this)
{
  return 10008;
}

uint64_t Espresso::ANECompilerEngine::blob_container::compute_path(Espresso::ANECompilerEngine::blob_container *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 49);
  if ((_DWORD)result == 4)
  {
    if (*((_DWORD *)this + 29))
      return 2;
  }
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*>(char *a1, _QWORD *a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>(a1, *a2);
}

void Espresso::espresso_error_base::~espresso_error_base(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D847C8;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[4].__vftable);
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
    operator delete((void *)this[2].__imp_.__imp_);
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
}

uint64_t Espresso::espresso_error_base::what(Espresso::espresso_error_base *this)
{
  uint64_t result;

  result = (uint64_t)this + 40;
  if (*((char *)this + 63) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t Espresso::espresso_error_base::get_status(Espresso::espresso_error_base *this)
{
  return 0xFFFFFFFFLL;
}

void Espresso::device_not_found_error::~device_not_found_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::device_not_found_error::get_status(Espresso::device_not_found_error *this)
{
  return 4294967290;
}

void Espresso::blob_not_found_error::~blob_not_found_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::blob_not_found_error::get_status(Espresso::blob_not_found_error *this)
{
  return 4294967288;
}

void Espresso::invalid_context_error::~invalid_context_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::invalid_context_error::get_status(Espresso::invalid_context_error *this)
{
  return 4294967290;
}

void Espresso::invalid_state_error::~invalid_state_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::invalid_state_error::get_status(Espresso::invalid_state_error *this)
{
  return 4294967291;
}

void Espresso::invalid_argument_error::~invalid_argument_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::invalid_argument_error::get_status(Espresso::invalid_argument_error *this)
{
  return 4294967290;
}

void Espresso::invalid_blob_shape_error::~invalid_blob_shape_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::invalid_blob_shape_error::get_status(Espresso::invalid_blob_shape_error *this)
{
  return 4294967289;
}

void Espresso::not_implemented_error::~not_implemented_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::not_implemented_error::get_status(Espresso::not_implemented_error *this)
{
  return 4294967287;
}

void Espresso::unsupported_configuration_error::~unsupported_configuration_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::unsupported_configuration_error::get_status(Espresso::unsupported_configuration_error *this)
{
  return 4294967284;
}

void Espresso::memory_error::~memory_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::memory_error::get_status(Espresso::memory_error *this)
{
  return 4294967292;
}

void Espresso::io_error::~io_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::io_error::get_status(Espresso::io_error *this)
{
  return 4294967294;
}

void Espresso::generic_error::~generic_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::generic_error::get_status(Espresso::generic_error *this)
{
  return 0xFFFFFFFFLL;
}

void Espresso::overflow_error::~overflow_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::overflow_error::get_status(Espresso::overflow_error *this)
{
  return 4294967285;
}

void Espresso::context_exceeded::~context_exceeded(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::context_exceeded::get_status(Espresso::context_exceeded *this)
{
  return 4294967283;
}

void Espresso::network_translation_error::~network_translation_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::network_translation_error::get_status(Espresso::network_translation_error *this)
{
  return 14;
}

uint64_t Espresso::espresso_error_base::init_what_str(const std::runtime_error *this)
{
  _QWORD *v2;
  int v3;
  std::runtime_error_vtbl *v4;
  uint64_t imp;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  int v11;
  std::runtime_error_vtbl *v12;
  uint64_t v13;
  _QWORD *v14;
  void **p_imp;
  __int128 v17;
  const char *v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Espresso exception: ", 20);
  v3 = SHIBYTE(this[5].__vftable);
  if (v3 >= 0)
    v4 = (std::runtime_error_vtbl *)&this[4];
  else
    v4 = this[4].__vftable;
  if (v3 >= 0)
    imp = HIBYTE(this[5].__vftable);
  else
    imp = (uint64_t)this[4].__imp_.__imp_;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, imp);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  v8 = std::runtime_error::what(this);
  v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  if (SHIBYTE(this[2].__vftable) < 0)
  {
    if (!this[1].__imp_.__imp_)
      goto LABEL_18;
  }
  else if (!HIBYTE(this[2].__vftable))
  {
    goto LABEL_18;
  }
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" [Thrown from: ", 15);
  v11 = SHIBYTE(this[2].__vftable);
  if (v11 >= 0)
    v12 = (std::runtime_error_vtbl *)&this[1];
  else
    v12 = this[1].__vftable;
  if (v11 >= 0)
    v13 = HIBYTE(this[2].__vftable);
  else
    v13 = (uint64_t)this[1].__imp_.__imp_;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
LABEL_18:
  std::stringbuf::str();
  p_imp = (void **)&this[2].__imp_;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
    operator delete(*p_imp);
  *(_OWORD *)p_imp = v17;
  this[3].__imp_.__imp_ = v18;
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401CCD0](&v21);
}

void sub_1917BDBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::device_not_found_error::device_not_found_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D8D1D8;
  MEMORY[0x19401C808](&v3[4], "\"Device not found\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDC1C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::blob_not_found_error::blob_not_found_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D86008;
  MEMORY[0x19401C808](&v3[4], "\"Blob not found\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDC88(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_context_error::invalid_context_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D8A588;
  MEMORY[0x19401C808](&v3[4], "\"Invalid context\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDCF4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_state_error::invalid_state_error(std::runtime_error *this)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D85490;
  MEMORY[0x19401C808](&v2[4], "\"Invalid state\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDD68(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_state_error::invalid_state_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D85490;
  MEMORY[0x19401C808](&v3[4], "\"Invalid state\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDDD4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_argument_error::invalid_argument_error(std::runtime_error *this)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D8EA98;
  MEMORY[0x19401C808](&v2[4], "\"Invalid argument\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDE48(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_argument_error::invalid_argument_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D8EA98;
  MEMORY[0x19401C808](&v3[4], "\"Invalid argument\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDEB4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_blob_shape_error::invalid_blob_shape_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D91F70;
  MEMORY[0x19401C808](&v3[4], "\"Invalid blob shape\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDF20(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::not_implemented_error::not_implemented_error(std::runtime_error *this)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D8C1E0;
  MEMORY[0x19401C808](&v2[4], "\"Not implemented\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BDF94(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::not_implemented_error::not_implemented_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D8C1E0;
  MEMORY[0x19401C808](&v3[4], "\"Not implemented\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE000(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::unsupported_configuration_error::unsupported_configuration_error(std::runtime_error *this)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D9C8A8;
  MEMORY[0x19401C808](&v2[4], "\"Unsupported configuration\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE074(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::unsupported_configuration_error::unsupported_configuration_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D9C8A8;
  MEMORY[0x19401C808](&v3[4], "\"Unsupported configuration\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE0E0(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::memory_error::memory_error(std::runtime_error *this)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D5FCD8;
  MEMORY[0x19401C808](&v2[4], "\"Memory error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE154(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::memory_error::memory_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D5FCD8;
  MEMORY[0x19401C808](&v3[4], "\"Memory error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE1C0(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::io_error::io_error(std::runtime_error *this)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2DA6C60;
  MEMORY[0x19401C808](&v2[4], "\"I/O error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE234(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::io_error::io_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2DA6C60;
  MEMORY[0x19401C808](&v3[4], "\"I/O error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE2A0(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::generic_error::generic_error(std::runtime_error *this)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D60EE0;
  MEMORY[0x19401C808](&v2[4], "\"Generic error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE314(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::generic_error::generic_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D60EE0;
  MEMORY[0x19401C808](&v3[4], "\"Generic error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE380(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::generic_error::generic_error(std::runtime_error *a1, const std::string *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(a1, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  a1->__vftable = (std::runtime_error_vtbl *)&off_1E2D60EE0;
  MEMORY[0x19401C808](&v3[4], "\"Generic error\"");
  Espresso::espresso_error_base::init_what_str(a1);
  return a1;
}

void sub_1917BE3EC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::overflow_error::overflow_error(std::runtime_error *this)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D67248;
  MEMORY[0x19401C808](&v2[4], "\"Overflow error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE460(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::network_translation_error::network_translation_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *v3;

  v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D92EB8;
  MEMORY[0x19401C808](&v3[4], "\"Network translation error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_1917BE4CC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception<Espresso::device_not_found_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::device_not_found_error::device_not_found_error(exception, a1);
}

void sub_1917BE51C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::format_string(Espresso *this, const char *__format, va_list a3)
{
  int v5;
  std::vector<char> __p;
  char __str;
  va_list v8;
  va_list v9;

  v9 = a3;
  v8 = a3;
  __str = 0;
  v5 = vsnprintf(&__str, 1uLL, __format, a3);
  if (v5 <= 0)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    std::vector<char>::__append(&__p, (v5 + 1));
    vsnprintf(__p.__begin_, __p.__end_ - __p.__begin_, __format, v8);
    std::string::basic_string[abi:ne180100](this, __p.__begin_, __p.__end_ - __p.__begin_);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
}

void sub_1917BE5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::blob_not_found_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::blob_not_found_error::blob_not_found_error(exception, a1);
}

void sub_1917BE62C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception<Espresso::invalid_context_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_context_error::invalid_context_error(exception, a1);
}

void sub_1917BE67C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::invalid_context_error>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  std::runtime_error *exception;
  std::string v10;
  char *v11;

  v11 = &a9;
  Espresso::format_string((Espresso *)&v10, "Failed to create compiler on platform %zu", &a9);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v10);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D8A588;
  MEMORY[0x19401C808](&exception[4], "\"Invalid context\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BE724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::invalid_state_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_state_error::invalid_state_error(exception, a1);
}

void sub_1917BE79C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::invalid_state_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D85490;
  MEMORY[0x19401C808](&exception[4], "\"Invalid state\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BE840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::invalid_argument_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_argument_error::invalid_argument_error(exception, a1);
}

void sub_1917BE8B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D8EA98;
  MEMORY[0x19401C808](&exception[4], "\"Invalid argument\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BE95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::invalid_blob_shape_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_blob_shape_error::invalid_blob_shape_error(exception, a1);
}

void sub_1917BE9D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D91F70;
  MEMORY[0x19401C808](&exception[4], "\"Invalid blob shape\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BEA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::not_implemented_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::not_implemented_error::not_implemented_error(exception, a1);
}

void sub_1917BEAF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::not_implemented_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D8C1E0;
  MEMORY[0x19401C808](&exception[4], "\"Not implemented\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BEB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::unsupported_configuration_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::unsupported_configuration_error::unsupported_configuration_error(exception, a1);
}

void sub_1917BEC0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::unsupported_configuration_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D9C8A8;
  MEMORY[0x19401C808](&exception[4], "\"Unsupported configuration\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BECB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::memory_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::memory_error::memory_error(exception, a1);
}

void sub_1917BED28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::memory_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D5FCD8;
  MEMORY[0x19401C808](&exception[4], "\"Memory error\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BEDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::io_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::io_error::io_error(exception, a1);
}

void sub_1917BEE44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::io_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2DA6C60;
  MEMORY[0x19401C808](&exception[4], "\"I/O error\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BEEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::generic_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::generic_error::generic_error(exception, a1);
}

void sub_1917BEF60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::generic_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::generic_error::generic_error(exception, &v2);
}

void sub_1917BEFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_with_format<Espresso::context_exceeded>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D731E8;
  MEMORY[0x19401C808](&exception[4], "\"Context exceeded\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BF088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::network_translation_error>(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::network_translation_error::network_translation_error(exception, a1);
}

void sub_1917BF100(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::network_translation_error>(char *__format, ...)
{
  std::runtime_error *exception;
  std::string v2;
  va_list v3;
  va_list va;

  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D92EB8;
  MEMORY[0x19401C808](&exception[4], "\"Network translation error\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_1917BF1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::analysis_debug_metadata::~analysis_debug_metadata(Espresso::analysis_debug_metadata *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E2D8F218;
  v1 = (void **)((char *)this + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)this + 176);
  Espresso::model_metadata_t::~model_metadata_t(v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E2D8F218;
  v1 = (void **)((char *)this + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)this + 176);
  Espresso::model_metadata_t::~model_metadata_t(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::analysis_debug_metadata::serialize(Espresso::analysis_debug_metadata *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  _QWORD *i;
  void *v7;
  _QWORD *j;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;

  v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v5 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "bundle");
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v5 + 232))(v5, __p, (char *)this + 8);
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v5 + 232))(v5, __p, (char *)this + 32);
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v5 + 232))(v5, __p, (char *)this + 56);
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v5 + 232))(v5, __p, (char *)this + 80);
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "product");
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v5 + 232))(v5, __p, (char *)this + 104);
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "use_case");
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v5 + 232))(v5, __p, (char *)this + 128);
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mldb_token");
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v5 + 232))(v5, __p, (char *)this + 152);
  if (v15 < 0)
    operator delete(__p[0]);
  for (i = (_QWORD *)*((_QWORD *)this + 24); i; i = (_QWORD *)*i)
  {
    v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v12, (uint64_t)v7, __p);
    if (v15 < 0)
      operator delete(__p[0]);
    for (j = i + 7; ; (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v12 + 232))(v12, j + 2, j + 5))
    {
      j = (_QWORD *)*j;
      if (!j)
        break;
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a2 + 240))(*a2, i + 2, &v12);
    v9 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1917BF534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

std::string *Espresso::analysis_debug_metadata::set_model_metadata(Espresso::analysis_debug_metadata *this, const std::string *a2)
{
  std::string::operator=((std::string *)((char *)this + 8), a2);
  std::string::operator=((std::string *)((char *)this + 32), a2 + 1);
  std::string::operator=((std::string *)((char *)this + 56), a2 + 2);
  std::string::operator=((std::string *)((char *)this + 80), a2 + 3);
  std::string::operator=((std::string *)((char *)this + 104), a2 + 4);
  std::string::operator=((std::string *)((char *)this + 128), a2 + 5);
  return std::string::operator=((std::string *)((char *)this + 152), a2 + 6);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

double Espresso::analysis_debug_metadata::analysis_debug_metadata(Espresso::analysis_debug_metadata *this)
{
  double result;

  *(_QWORD *)this = &off_1E2D8F218;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 1065353216;
  return result;
}

uint64_t Espresso::analysis_debug_metadata::get_debug_metadata(Espresso::analysis_debug_metadata *this)
{
  return (uint64_t)this + 176;
}

void Espresso::convolution_kernel_cpu::__launch(_QWORD *a1, double a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  vImagePixelCount v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::string::size_type *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  _DWORD *v101;
  BOOL v102;
  BOOL v103;
  int v104;
  int v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string::size_type v112;
  int v113;
  _DWORD *data;
  int v115;
  int v116;
  std::string::size_type v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  BOOL v121;
  int v122;
  int v123;
  int v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  int v133;
  float *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  float *v153;
  float *v154;
  int v155;
  int v156;
  float *v157;
  float *v158;
  uint64_t v159;
  float v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  std::string::size_type v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  float *v180;
  int v181;
  int v182;
  float *v183;
  uint64_t v184;
  _QWORD *v185;
  Espresso *v186;
  std::string::size_type v187;
  _DWORD *v188;
  int v189;
  uint64_t v190;
  int v191;
  int v192;
  float v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  float v201;
  float v202;
  float *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  _DWORD *v208;
  int v209;
  uint64_t v210;
  float *v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float *v216;
  int v217;
  float v218;
  uint64_t v219;
  uint64_t v220;
  int *v221;
  vDSP_Length v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *height;
  unint64_t *v233;
  unint64_t v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  size_t v245;
  float *v246;
  float *v247;
  float v248;
  float v249;
  float v250;
  float v251;
  int v252;
  float v253;
  uint64_t v254;
  float *v255;
  float *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  const char *v270;
  float *__B;
  float *v272;
  float *__ldb;
  float *v274;
  int v275;
  uint64_t v276;
  _QWORD *v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  char *v288;
  int v289;
  int v290;
  uint64_t v291;
  _QWORD *v292;
  int v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  unsigned int v302;
  int v303;
  int v304;
  std::string::size_type v305;
  std::string::size_type v306;
  int v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  size_t v318;
  char *v319;
  std::__shared_weak_count *v320;
  std::string v321;
  _QWORD v322[2];
  uint64_t v323;
  std::__shared_weak_count *v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  vImage_Buffer v327;
  _BYTE v328[36];
  std::string v329;
  std::string v330;
  uint64_t v331;

  v331 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)a6;
  if (*(_QWORD *)(a6 + 8) == *(_QWORD *)a6
    || !*v9
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v325 = 0;
    v326 = 0;
  }
  else
  {
    v65 = *(std::__shared_weak_count **)(*v9 + 168);
    v325 = *(_QWORD *)(*v9 + 160);
    v326 = v65;
    if (v65)
    {
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(p_shared_owners);
      while (__stxr(v67 + 1, p_shared_owners));
    }
  }
  v10 = (_QWORD *)*a7;
  if (a7[1] == *a7 || !*v10 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v323 = 0;
    v324 = 0;
  }
  else
  {
    v68 = *(std::__shared_weak_count **)(*v10 + 168);
    v323 = *(_QWORD *)(*v10 + 160);
    v324 = v68;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
  }
  v277 = a1 + 72;
  v11 = a1[72];
  v281 = a1;
  if (v11)
    goto LABEL_10;
  if (a1[63] && a1[65])
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 608))(v328, a1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v277, (__int128 *)v328);
    v17 = *(std::__shared_weak_count **)&v328[8];
    if (!*(_QWORD *)&v328[8])
      goto LABEL_55;
    v31 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
    do
      v21 = __ldaxr(v31);
    while (__stlxr(v21 - 1, v31));
    goto LABEL_44;
  }
  v32 = a1[74];
  if (!v32)
  {
LABEL_10:
    v12 = (uint64_t *)a1[59];
    if (v12 && *v12 && (v12[4] || v12[6] || v12[8] || v12[10]))
    {
      v13 = a1[72];
      if (!v11)
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 472))(v328, a1);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v277, (__int128 *)v328);
        v14 = *(std::__shared_weak_count **)&v328[8];
        if (*(_QWORD *)&v328[8])
        {
          v15 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v13 = a1[72];
        v12 = (uint64_t *)a1[59];
      }
      v17 = (std::__shared_weak_count *)a1[73];
      v322[0] = v13;
      v322[1] = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      Espresso::quantized_weights_helper::dequantize_to_float32_4d(v12, (uint64_t)v322, a2, a3, a4);
      if (v17)
      {
        v20 = (unint64_t *)&v17->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
LABEL_44:
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else if (!v11 && (unint64_t)(a7[1] - *a7) <= 0x1F)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v329, a1[63] != 0);
      v23 = std::string::insert(&v329, 0, "Conv weights not set ");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v330.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v330, " / ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v327.width = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v327.data = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v321, a1[65] != 0);
      if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v321;
      else
        v27 = (std::string *)v321.__r_.__value_.__r.__words[0];
      if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v321.__r_.__value_.__r.__words[2]);
      else
        size = v321.__r_.__value_.__l.__size_;
      v29 = std::string::append((std::string *)&v327, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      *(_QWORD *)&v328[16] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
      *(_OWORD *)v328 = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v328);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v330, v32 + 8);
    v33 = 0;
    v34 = v330.__r_.__value_.__r.__words[0];
    v35 = *(void **)(v330.__r_.__value_.__r.__words[0] + 24);
    v36 = *(int *)(v330.__r_.__value_.__r.__words[0] + 8);
    do
    {
      v36 *= *(int *)(v330.__r_.__value_.__r.__words[0] + 12 + v33);
      v33 += 4;
    }
    while (v33 != 12);
    *(_QWORD *)v328 = *(_QWORD *)(a1[74] + 24);
    *(_QWORD *)&v328[8] = 1;
    *(_QWORD *)&v328[16] = v36;
    *(_QWORD *)&v328[24] = 2 * v36;
    v327.data = v35;
    v327.height = 1;
    v327.width = v36;
    v327.rowBytes = 4 * v36;
    vImageConvert_Planar16FtoPlanarF((const vImage_Buffer *)v328, &v327, 0);
    v37 = (std::__shared_weak_count *)v330.__r_.__value_.__l.__size_;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v277, v34, v330.__r_.__value_.__l.__size_);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v11 = 0;
  }
LABEL_55:
  v276 = v11;
  v40 = *a7;
  v41 = a7[1];
  v42 = v41 - *a7;
  v43 = a1 + 72;
  if (v42 >= 0x11)
    v43 = (std::string::size_type *)((char *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a7, a7[1], 1) + 160);
  v45 = *v43;
  v44 = v43[1];
  v321.__r_.__value_.__r.__words[0] = v45;
  v321.__r_.__value_.__l.__size_ = v44;
  if (v44)
  {
    v46 = (unint64_t *)(v44 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    v40 = *a7;
    v41 = a7[1];
    v42 = v41 - *a7;
  }
  if (v42 < 0x21)
  {
    v53 = (std::__shared_weak_count *)a1[71];
    v319 = (char *)a1[70];
    v320 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
  }
  else
  {
    v48 = *((_QWORD *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(v40, v41, 2) + 20);
    v49 = *(_QWORD *)(v40 + 32);
    v50 = (char *)operator new(0x58uLL);
    *((_QWORD *)v50 + 1) = 0;
    *((_QWORD *)v50 + 2) = 0;
    *(_QWORD *)v50 = &off_1E2DBEC00;
    v51 = *(_QWORD *)(v48 + 24);
    v52 = *(_DWORD *)(v49 + 8);
    *((_QWORD *)v50 + 3) = &off_1E2DA1190;
    *(_OWORD *)(v50 + 56) = 0u;
    *(_OWORD *)(v50 + 72) = 0u;
    *((_DWORD *)v50 + 8) = v52;
    *((_QWORD *)v50 + 5) = v51;
    v50[48] = 0;
    v319 = v50 + 24;
    v320 = (std::__shared_weak_count *)v50;
  }
  v56 = v325;
  if (!v325)
  {
    v270 = "convolution_kernel_cpu: Null top blob";
    goto LABEL_301;
  }
  if (!v323)
  {
    v270 = "convolution_kernel_cpu: Null bottom blob";
LABEL_301:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v270);
  }
  v57 = *((_DWORD *)a1 + 105);
  if (v57 <= 1)
    v57 = 1;
  v283 = v57;
  v58 = *((__int16 *)a1 + 200);
  if (v58 <= 1)
    v58 = 1;
  v311 = v58;
  v59 = *((__int16 *)a1 + 201);
  if (v59 <= 1)
    v59 = 1;
  v297 = v59;
  __asm { FMOV            V0.2S, #1.0 }
  *(_OWORD *)&v328[4] = _D0;
  *(_OWORD *)&v328[20] = 0uLL;
  v64 = *((_DWORD *)a1 + 82);
  if (v64 == 2)
  {
    *(_DWORD *)v328 = 2;
    *(_DWORD *)&v328[4] = *((_DWORD *)a1 + 85);
  }
  else if (v64 == 1)
  {
    *(_DWORD *)v328 = 0;
  }
  else if (*((_DWORD *)a1 + 83))
  {
    *(_DWORD *)v328 = 1;
  }
  else
  {
    *(_DWORD *)v328 = *((_DWORD *)a1 + 91);
    *(_QWORD *)&v328[4] = a1[46];
  }
  if (*(int *)(v325 + 20) >= 1)
  {
    v71 = 0;
    v279 = (uint64_t)(a1 + 76);
    v280 = (uint64_t)(a1 + 78);
    while (1)
    {
      v72 = 0;
      v330.__r_.__value_.__r.__words[0] = *(_QWORD *)(v56 + 8);
      LODWORD(v330.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v56 + 16);
      v73 = 1;
      do
      {
        v73 *= *(_DWORD *)(v56 + 8 + v72);
        v72 += 4;
      }
      while (v72 != 12);
      v74 = *(_QWORD *)(v56 + 24);
      v75 = operator new(0x60uLL);
      v76 = 0;
      v75[1] = 0;
      v75[2] = 0;
      *v75 = &off_1E2DBEC70;
      v75[3] = &off_1E2DA11D0;
      *((_OWORD *)v75 + 4) = 0u;
      *((_OWORD *)v75 + 5) = 0u;
      v75[4] = v330.__r_.__value_.__r.__words[0];
      *((_DWORD *)v75 + 10) = v330.__r_.__value_.__r.__words[1];
      v75[6] = v74 + 4 * v73 * v71;
      *((_BYTE *)v75 + 56) = 0;
      v327.data = v75 + 3;
      v327.height = (vImagePixelCount)v75;
      v329.__r_.__value_.__r.__words[0] = *(_QWORD *)(v323 + 8);
      LODWORD(v329.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v323 + 16);
      v77 = 1;
      do
      {
        v77 *= *(_DWORD *)(v323 + 8 + v76);
        v76 += 4;
      }
      while (v76 != 12);
      v78 = *(_QWORD *)(v323 + 24);
      v79 = operator new(0x60uLL);
      v79[1] = 0;
      v79[2] = 0;
      v278 = v71;
      *v79 = &off_1E2DBEC70;
      v79[3] = &off_1E2DA11D0;
      *((_OWORD *)v79 + 4) = 0u;
      *((_OWORD *)v79 + 5) = 0u;
      v79[4] = v329.__r_.__value_.__r.__words[0];
      *((_DWORD *)v79 + 10) = v329.__r_.__value_.__r.__words[1];
      v79[6] = v78 + 4 * v77 * v71;
      *((_BYTE *)v79 + 56) = 0;
      v330.__r_.__value_.__r.__words[0] = (std::string::size_type)(v79 + 3);
      v330.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
      v304 = *((_DWORD *)v79 + 8);
      v80 = *((unsigned int *)v75 + 8);
      v315 = *((unsigned int *)v75 + 9);
      v81 = *((_DWORD *)a1 + 88);
      v82 = *((_DWORD *)a1 + 89);
      v83 = *((__int16 *)a1 + 198);
      v84 = *((__int16 *)a1 + 199);
      v85 = *((__int16 *)a1 + 188);
      v301 = *((_DWORD *)v79 + 9);
      if (v85 == 4)
        break;
      if (v85 == 2)
      {
        v302 = 0;
        v98 = 0;
      }
      else
      {
        if (v85 == 1)
          break;
        v98 = *((__int16 *)a1 + 192);
        v302 = *((__int16 *)a1 + 194);
      }
      v88 = *((_DWORD *)v79 + 8);
LABEL_107:
      v99 = (*((_DWORD *)a1 + 87) - 1) / v283 + 1;
      v100 = *((_DWORD *)a1 + 86);
      v282 = v81 * v99 * v82;
      v101 = *(_DWORD **)v279;
      v303 = *((__int16 *)a1 + 199);
      if (!*(_QWORD *)v279
        || (v101[4] == v282 ? (v102 = v101[3] == (_DWORD)v315) : (v102 = 0),
            v102 ? (v103 = v101[2] == (_DWORD)v80) : (v103 = 0),
            !v103))
      {
        *(_OWORD *)&v329.__r_.__value_.__l.__data_ = 0uLL;
        v104 = v99;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v279, (__int128 *)&v329);
        v105 = v104;
        v106 = (std::__shared_weak_count *)v329.__r_.__value_.__l.__size_;
        if (v329.__r_.__value_.__l.__size_)
        {
          v107 = (unint64_t *)(v329.__r_.__value_.__l.__size_ + 8);
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
            v105 = v104;
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v329, v80, v315, *((_DWORD *)a1 + 88) * v105 * *((_DWORD *)a1 + 89), 1);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v279, (__int128 *)&v329);
        v109 = (std::__shared_weak_count *)v329.__r_.__value_.__l.__size_;
        v99 = v104;
        if (v329.__r_.__value_.__l.__size_)
        {
          v110 = (unint64_t *)(v329.__r_.__value_.__l.__size_ + 8);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
            v99 = v104;
          }
        }
        v84 = v303;
        v88 = v304;
      }
      v308 = v315 * v80;
      v112 = v321.__r_.__value_.__r.__words[0];
      if (v321.__r_.__value_.__r.__words[0])
      {
        v113 = 0;
        data = v327.data;
        v317 = 4 * v80;
        v300 = v315 & ~((int)v315 >> 31);
        v115 = v80 & ~((int)v80 >> 31);
        v299 = -v84;
        v116 = -v98;
        v117 = v330.__r_.__value_.__r.__words[0];
        v312 = v116;
        v118 = 4 * (int)v80;
        v298 = v88 * v84;
        v287 = v99;
        do
        {
          v285 = data[3];
          v286 = data[2];
          v119 = *(_DWORD *)(v117 + 12) * *(_DWORD *)(v117 + 8) * (*((unsigned __int16 *)a1 + 214) + v113 * v99);
          v284 = *((unsigned __int16 *)a1 + 215);
          v307 = v113;
          v289 = *((_DWORD *)a1 + 89);
          v290 = *((_DWORD *)a1 + 88);
          if (*((_DWORD *)a1 + 103))
          {
            v120 = *(_QWORD *)v280;
            if (!*(_QWORD *)v280
              || (*(_DWORD *)(v120 + 12) == (_DWORD)v315 ? (v121 = *(_DWORD *)(v120 + 8) == (_DWORD)v80) : (v121 = 0),
                  v122 = v315,
                  v123 = v80,
                  !v121))
            {
              v124 = v113;
              *(_OWORD *)&v329.__r_.__value_.__l.__data_ = 0uLL;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v280, (__int128 *)&v329);
              v125 = (std::__shared_weak_count *)v329.__r_.__value_.__l.__size_;
              if (v329.__r_.__value_.__l.__size_)
              {
                v126 = (unint64_t *)(v329.__r_.__value_.__l.__size_ + 8);
                do
                  v127 = __ldaxr(v126);
                while (__stlxr(v127 - 1, v126));
                if (!v127)
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v329, v80, v315, 2, 1);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v280, (__int128 *)&v329);
              v128 = (std::__shared_weak_count *)v329.__r_.__value_.__l.__size_;
              v113 = v124;
              if (v329.__r_.__value_.__l.__size_)
              {
                v129 = (unint64_t *)(v329.__r_.__value_.__l.__size_ + 8);
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                  v113 = v124;
                }
              }
              v120 = *(_QWORD *)v280;
              v123 = *(_DWORD *)(*(_QWORD *)v280 + 8);
              v122 = *(_DWORD *)(*(_QWORD *)v280 + 12);
            }
            v131 = *(int *)(v120 + 16);
            v132 = *(char **)(v120 + 24);
            if (v122 * (uint64_t)v123 * v131)
            {
              v133 = v113;
              bzero(v132, 4 * v123 * (uint64_t)v122 * v131);
              v113 = v133;
            }
            v288 = v132;
            v134 = *(float **)(a1[76] + 24);
            v117 = v330.__r_.__value_.__r.__words[0];
            v295 = *((_DWORD *)a1 + 88);
            v293 = *((_DWORD *)a1 + 89);
            v291 = (v295 * v287 * v293);
            if ((int)v291 >= 1)
            {
              v135 = 0;
              v313 = 0;
              v136 = v119;
              v137 = 0;
              v138 = *(_QWORD *)(v330.__r_.__value_.__r.__words[0] + 24) + 4 * v136;
              v305 = v330.__r_.__value_.__r.__words[0];
              do
              {
                v309 = v135;
                if ((int)v315 >= 1)
                {
                  v139 = v315;
                  v140 = v313;
                  do
                  {
                    if ((int)v80 >= 1)
                      bzero(&v134[v140], v317);
                    v140 += v80;
                    --v139;
                  }
                  while (v139);
                }
                v141 = 0;
                v142 = 0;
                v143 = (int)v137 / v295 % v293 * v297;
                v144 = v143 - v302;
                while (v300 != v142)
                {
                  v145 = v142 + 1;
                  if (v144 < 0)
                    v141 = v142 + 1;
                  v144 += v303;
                  ++v142;
                  if (v299 + v144 >= v301)
                  {
                    v146 = v145 - 1;
                    goto LABEL_161;
                  }
                }
                v146 = v315;
LABEL_161:
                v147 = 0;
                v148 = 0;
                v149 = v312 + v311 * ((int)v137 % v295);
                v113 = v307;
                v117 = v305;
                while (v115 != v148)
                {
                  v150 = v148 + 1;
                  if (v149 < 0)
                    v147 = v148 + 1;
                  v149 += v83;
                  ++v148;
                  if (v149 - v83 >= v304)
                  {
                    v151 = v150 - 1;
                    goto LABEL_168;
                  }
                }
                v151 = v80;
LABEL_168:
                if (v141 < v146)
                {
                  v152 = v141;
                  v153 = (float *)&v288[4 * v147 + 4 * (int)v80 * (uint64_t)v141];
                  v154 = &v134[(int)v80 * (v309 + v141) + v147];
                  v155 = v312
                       + v304 * ((int)v137 / v293 / v295 * v301 - v302 + v303 * v141 + v143)
                       + v83 * v147
                       + v311 * ((int)v137 % v295);
                  do
                  {
                    v156 = v155;
                    v157 = v154;
                    v158 = v153;
                    v159 = v151 - (uint64_t)v147;
                    if (v147 < v151)
                    {
                      do
                      {
                        v160 = *(float *)(v138 + 4 * v156);
                        *v157++ = v160;
                        *v158 = v160 + *v158;
                        v158[v308] = v158[v308] + (float)(v160 * v160);
                        ++v158;
                        v156 += v83;
                        --v159;
                      }
                      while (v159);
                    }
                    ++v152;
                    v153 = (float *)((char *)v153 + v118);
                    v154 = (float *)((char *)v154 + v118);
                    v155 += v298;
                  }
                  while (v152 != v146);
                }
                ++v137;
                v313 += v308;
                v135 = v309 + (int)v315;
              }
              while (v137 != v291);
            }
            v161 = v327.data;
            v112 = v321.__r_.__value_.__r.__words[0];
            a1 = v281;
          }
          else
          {
            v134 = *(float **)(*(_QWORD *)v279 + 24);
            v292 = data;
            v294 = (*((_DWORD *)a1 + 88) * v99 * *((_DWORD *)a1 + 89));
            if ((int)v294 >= 1)
            {
              v162 = 0;
              v314 = 0;
              v163 = 0;
              v164 = *(_QWORD *)(v117 + 24) + 4 * v119;
              v306 = v117;
              do
              {
                v296 = v163;
                v310 = v162;
                if ((int)v315 >= 1)
                {
                  v165 = v315;
                  v166 = v314;
                  do
                  {
                    if ((int)v80 >= 1)
                    {
                      v167 = v112;
                      bzero(&v134[v166], v317);
                      v112 = v167;
                    }
                    v166 += v80;
                    --v165;
                  }
                  while (v165);
                }
                v168 = 0;
                v169 = 0;
                v170 = (int)v296 / v290 % v289 * v297;
                v171 = v170 - v302;
                while (v300 != v169)
                {
                  v172 = v169 + 1;
                  if (v171 < 0)
                    v168 = v169 + 1;
                  v171 += v303;
                  ++v169;
                  if (v299 + v171 >= v301)
                  {
                    v173 = v172 - 1;
                    goto LABEL_189;
                  }
                }
                v173 = v315;
LABEL_189:
                v174 = 0;
                v175 = 0;
                v176 = v312 + v311 * ((int)v296 % v290);
                v113 = v307;
                v117 = v306;
                while (v115 != v175)
                {
                  v177 = v175 + 1;
                  if (v176 < 0)
                    v174 = v175 + 1;
                  v176 += v83;
                  ++v175;
                  if (v176 - v83 >= v304)
                  {
                    v178 = v177 - 1;
                    goto LABEL_196;
                  }
                }
                v178 = v80;
LABEL_196:
                if (v168 < v173)
                {
                  v179 = v168;
                  v180 = &v134[(int)v80 * (v310 + v168) + v174];
                  v181 = v312
                       + v304 * ((int)v296 / v289 / v290 * v301 - v302 + v303 * v168 + v170)
                       + v83 * v174
                       + v311 * ((int)v296 % v290);
                  do
                  {
                    v182 = v181;
                    v183 = v180;
                    v184 = v178 - (uint64_t)v174;
                    if (v174 < v178)
                    {
                      do
                      {
                        *v183++ = *(float *)(v164 + 4 * v182);
                        v182 += v83;
                        --v184;
                      }
                      while (v184);
                    }
                    ++v179;
                    v180 = (float *)((char *)v180 + v118);
                    v181 += v298;
                  }
                  while (v179 != v173);
                }
                v163 = v296 + 1;
                v314 += v308;
                v162 = v310 + (int)v315;
              }
              while (v296 + 1 != v294);
              a1 = v281;
            }
            v161 = v292;
          }
          v185 = a1;
          v186 = (Espresso *)*((unsigned __int8 *)a1 + 468);
          v187 = v112;
          v188 = v161;
          LODWORD(v274) = v315 * v80;
          LODWORD(__ldb) = v315 * v80;
          v272 = v134;
          v189 = v113;
          LODWORD(__B) = v282;
          Espresso::wrapper_for_cblas_sgemm(v186, CblasRowMajor, CblasNoTrans, CblasNoTrans, (v100 - 1) / v283 + 1, v308, v282, (const float *)(*(_QWORD *)(v112 + 24) + 4 * v113 * ((v100 - 1) / v283 + 1) * v287 * v290 * v289), 1.0, 0.0, __B, v272, __ldb, (float *)(v161[3] + 4 * v285 * v286 * (v113 * ((v100 - 1) / v283 + 1) + v284)), v274, v275);
          v99 = v287;
          v112 = v187;
          data = v188;
          a1 = v185;
          v113 = v189 + 1;
        }
        while (v189 + 1 != v283);
      }
      v190 = v280;
      if (*((_DWORD *)a1 + 103) && (int)v315 >= 1)
      {
        v191 = 0;
        v192 = 0;
        v193 = 1.0 / (float)(*((_DWORD *)a1 + 88) * *((_DWORD *)a1 + 87) * *((_DWORD *)a1 + 89));
        v194 = a1[78];
        v195 = *((_DWORD *)a1 + 86);
        do
        {
          if ((int)v80 >= 1)
          {
            v196 = 0;
            v197 = *(_QWORD *)(v194 + 24);
            v198 = v327.data;
            v199 = v192;
            v200 = 4 * v192;
            do
            {
              v201 = *(float *)(v197 + 4 * (v199 + v308))
                   + (float)((float)-(float)(*(float *)(v197 + 4 * v199) * *(float *)(v197 + 4 * v199)) * v193);
              if (v201 < 0.000001)
                v201 = 0.000001;
              if (v195 >= 1)
              {
                v202 = 1.0 / sqrtf(v201);
                v203 = (float *)(v198[3] + v200);
                v204 = v195;
                do
                {
                  *v203 = v202 * *v203;
                  v203 += v308;
                  --v204;
                }
                while (v204);
              }
              ++v199;
              ++v196;
              v200 += 4;
            }
            while (v196 != (_DWORD)v80);
            v192 = v199;
          }
          ++v191;
        }
        while (v191 != (_DWORD)v315);
      }
      if (!*((_WORD *)a1 + 217))
      {
        if (*((_DWORD *)a1 + 104))
        {
          v205 = *((unsigned int *)a1 + 86);
          if ((int)v205 >= 1)
          {
            v206 = 0;
            v207 = 0;
            v208 = v327.data;
            v209 = v208[3] * v208[2];
            v210 = *((_QWORD *)v319 + 2);
            do
            {
              if (v209 >= 1)
              {
                v211 = (float *)(v210 + 16 * v206);
                v212 = *v211;
                v213 = v211[1];
                v214 = v211[2];
                v215 = v211[3];
                v216 = (float *)(*((_QWORD *)v208 + 3) + 4 * v207);
                v217 = v209;
                v218 = 1.0 / v215;
                do
                {
                  *v216 = v213 + (float)((float)(v218 * (float)(*v216 - v214)) * v212);
                  ++v216;
                  --v217;
                }
                while (v217);
              }
              ++v206;
              v207 += v209;
            }
            while (v206 != v205);
          }
        }
        else if (v319 && *((int *)a1 + 86) >= 1)
        {
          v219 = 0;
          v220 = 0;
          v221 = (int *)v327.data;
          v222 = v221[3] * (uint64_t)v221[2];
          do
          {
            LODWORD(v329.__r_.__value_.__l.__data_) = 0;
            LODWORD(v329.__r_.__value_.__l.__data_) = *(_DWORD *)(*((_QWORD *)v319 + 2) + 4 * v220);
            vDSP_vsadd((const float *)(*((_QWORD *)v221 + 3) + v219), 1, (const float *)&v329, (float *)(*((_QWORD *)v221 + 3) + v219), 1, v222);
            ++v220;
            v219 += 4 * v222;
          }
          while (v220 < *((int *)a1 + 86));
        }
        v190 = v280;
        if (*(_DWORD *)v328 != -1)
          Espresso::activation_chunk((unsigned int *)v328, *((const float **)v327.data + 3), *((float **)v327.data + 3), *((_DWORD *)v327.data + 3) * *((_DWORD *)v327.data + 2) * *((_DWORD *)v327.data + 4));
      }
      *(_OWORD *)&v329.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v279, (__int128 *)&v329);
      v223 = (std::__shared_weak_count *)v329.__r_.__value_.__l.__size_;
      if (v329.__r_.__value_.__l.__size_)
      {
        v224 = (unint64_t *)(v329.__r_.__value_.__l.__size_ + 8);
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      *(_OWORD *)&v329.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v190, (__int128 *)&v329);
      v226 = (std::__shared_weak_count *)v329.__r_.__value_.__l.__size_;
      if (v329.__r_.__value_.__l.__size_)
      {
        v227 = (unint64_t *)(v329.__r_.__value_.__l.__size_ + 8);
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      v229 = (std::__shared_weak_count *)v330.__r_.__value_.__l.__size_;
      if (v330.__r_.__value_.__l.__size_)
      {
        v230 = (unint64_t *)(v330.__r_.__value_.__l.__size_ + 8);
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      height = (std::__shared_weak_count *)v327.height;
      if (v327.height)
      {
        v233 = (unint64_t *)(v327.height + 8);
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
          std::__shared_weak_count::__release_weak(height);
        }
      }
      v71 = v278 + 1;
      v56 = v325;
      v235 = *(_DWORD *)(v325 + 20);
      if (v278 + 1 >= v235)
      {
        if (*((_WORD *)a1 + 217) && v235 >= 1)
        {
          v236 = 0;
          do
          {
            v237 = *(_DWORD *)(v56 + 8);
            v238 = *(_DWORD *)(v56 + 12);
            v239 = v238 * v237;
            v240 = *((unsigned int *)a1 + 86);
            v318 = *(_QWORD *)(v56 + 24);
            v316 = *(_DWORD *)(v56 + 16);
            v241 = v238 * v237 * *((unsigned __int16 *)a1 + 215);
            if (*((_DWORD *)a1 + 104))
            {
              if ((int)v240 >= 1)
              {
                v242 = 0;
                v243 = 0;
                v244 = *((_QWORD *)v319 + 2);
                v245 = v318 + 4 * v241 + 4 * v238 * v316 * v237 * v236;
                do
                {
                  if (v239 >= 1)
                  {
                    v246 = (float *)(v245 + 4 * v243);
                    v247 = (float *)(v244 + 16 * v242);
                    v248 = *v247;
                    v249 = v247[1];
                    v250 = v247[2];
                    v251 = v247[3];
                    v252 = v239;
                    v253 = 1.0 / v251;
                    do
                    {
                      *v246 = v249 + (float)((float)(v253 * (float)(*v246 - v250)) * v248);
                      ++v246;
                      --v252;
                    }
                    while (v252);
                  }
                  ++v242;
                  v243 += v239;
                }
                while (v242 != v240);
              }
            }
            else if (v319 && (int)v240 >= 1)
            {
              v254 = 0;
              v255 = (float *)(v318 + 4 * v241 + 4 * v238 * v316 * v237 * v236);
              do
              {
                LODWORD(v327.data) = 0;
                LODWORD(v327.data) = *(_DWORD *)(*((_QWORD *)v319 + 2) + 4 * v254);
                vDSP_vsadd(v255, 1, (const float *)&v327, v255, 1, v239);
                ++v254;
                v255 += v239;
              }
              while (v254 < *((int *)v281 + 86));
            }
            if (*(_DWORD *)v328 != -1)
            {
              v256 = (float *)(v318 + 4 * v239 * v236 * v316 + 4 * v241);
              Espresso::activation_chunk((unsigned int *)v328, v256, v256, v239 * v240);
            }
            ++v236;
            a1 = v281;
          }
          while (v236 < *(_DWORD *)(v56 + 20));
        }
        goto LABEL_272;
      }
    }
    v86 = *((unsigned __int16 *)a1 + 188);
    v87 = (v82 - 1) * v297 - *((_DWORD *)v79 + 9) + (v315 - 1) * v84 + 1;
    v88 = *((_DWORD *)v79 + 8);
    v89 = (v81 - 1) * v311 - v304 + (v80 - 1) * v83 + 1;
    v90 = v87 & ~(v87 >> 31);
    v91 = v89 & ~(v89 >> 31);
    v92 = v91 >> 1;
    v93 = v90 >> 1;
    v94 = v90 - (v90 >> 1);
    v95 = v91 - (v91 >> 1);
    _ZF = v86 == 1;
    if (v86 == 1)
      v97 = v93;
    else
      v97 = v94;
    v302 = v97;
    if (_ZF)
      v98 = v92;
    else
      v98 = v95;
    goto LABEL_107;
  }
LABEL_272:
  if (!v276)
  {
    *(_OWORD *)v328 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v277, (__int128 *)v328);
    v267 = *(std::__shared_weak_count **)&v328[8];
    if (*(_QWORD *)&v328[8])
    {
      v268 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
      do
        v269 = __ldaxr(v268);
      while (__stlxr(v269 - 1, v268));
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
      }
    }
  }
  if (v320)
  {
    v257 = (unint64_t *)&v320->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  if (v321.__r_.__value_.__l.__size_)
  {
    v259 = (unint64_t *)(v321.__r_.__value_.__l.__size_ + 8);
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v321.__r_.__value_.__l.__size_ + 16))(v321.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v321.__r_.__value_.__l.__size_);
    }
  }
  v261 = v324;
  if (v324)
  {
    v262 = (unint64_t *)&v324->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = v326;
  if (v326)
  {
    v265 = (unint64_t *)&v326->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
}

void sub_1917C0D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,char a56)
{
  void *v56;
  int v57;
  uint64_t v58;

  if (*(char *)(v58 - 185) < 0)
    operator delete(*(void **)(v58 - 208));
  if (a53 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 217) < 0)
    operator delete(*(void **)(v58 - 240));
  if (*(char *)(v58 - 121) < 0)
    operator delete(*(void **)(v58 - 144));
  if (*(char *)(v58 - 145) < 0)
  {
    operator delete(*(void **)(v58 - 168));
    if ((v57 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 256);
      _Unwind_Resume(a1);
    }
  }
  else if (!v57)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v56);
  goto LABEL_14;
}

void sub_1917C0E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 256);
  _Unwind_Resume(a1);
}

void sub_1917C0E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a51);
  JUMPOUT(0x1917C0F14);
}

void sub_1917C0E44()
{
  JUMPOUT(0x1917C0F1CLL);
}

void sub_1917C0E4C()
{
  JUMPOUT(0x1917C0F10);
}

void sub_1917C0EB4()
{
  __cxa_end_catch();
  JUMPOUT(0x1917C0F04);
}

void sub_1917C0EC0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1917C0F24);
}

void sub_1917C0ED8()
{
  JUMPOUT(0x1917C0EFCLL);
}

void sub_1917C0EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  JUMPOUT(0x1917C0F0CLL);
}

void Espresso::convolution_kernel_cpu::clear_weights(Espresso::convolution_kernel_cpu *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)((char *)this + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 52);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 54);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 58);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 56);
  v2 = (_QWORD *)v1[39];
  if (v2 && *v2 && (v2[4] || v2[6] || v2[8] || v2[10]))
    std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 39);
}

void Espresso::convolution_kernel_cpu::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  _QWORD *v11;
  double v12;
  double v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  __int128 v23[2];
  void *__p;
  void *v25;

  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  v11 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *))(*a1 + 464))(v23, a1);
  v15 = (uint64_t)(a1 + 59);
  v16 = a1[1];
  v17 = (std::__shared_weak_count *)a1[2];
  v22[0] = v16;
  v22[1] = (uint64_t)v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  Espresso::set_conv_quantized_weight_helper(v12, v13, v14, (uint64_t)v11, (unsigned __int8 **)a3, (char *)a4, a5, a6, v15, v23, v22, 0, 0);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_1917C10A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::convolution_kernel_cpu::__set_weights_finalize(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 472);
  if (v2
    && *(_QWORD *)v2
    && (*(_QWORD *)(v2 + 32) || *(_QWORD *)(v2 + 48) || *(_QWORD *)(v2 + 64) || *(_QWORD *)(v2 + 80)))
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76))
    {
      Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v2, &v6);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 576, &v6);
      v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    else if (*(int *)(v2 + 156) <= 7)
    {
      Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v2);
    }
  }
}

uint64_t Espresso::convolution_kernel_cpu::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  _BOOL4 v3;

  v3 = Espresso::generic_convolution_kernel::supports_weight_key(a1, a2);
  return v3 | Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 0);
}

void Espresso::convolution_kernel_cpu::transform_parameters_as_input(int32x2_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int32x2_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  std::string *v33;
  __int32 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  std::string *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  const char *v52;
  __int128 v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  _QWORD v56[2];
  uint64_t v57;
  std::__shared_weak_count *v58;
  int32x2_t v59;
  std::__shared_weak_count *v60;
  int v61;
  int v62;
  __int128 v63;
  __int128 v64;
  std::string __p;
  __int128 v66;
  __int128 v67;
  std::string v68;
  void *v69;
  void *v70;

  v9 = 16 * a3;
  Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * a3) + 16), 1, &__p);
  v64 = 0uLL;
  v10 = a1[72];
  if (!*(_QWORD *)&v10)
  {
    if (a1[74])
      v52 = "convolution has fp16 weights; must use fp32 weights for training.";
    else
      v52 = "convolution layer is missing weights.";
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v52);
  }
  v11 = a1[43].i32[1] / a1[52].i32[1];
  v61 = a1[43].i32[0];
  v62 = v11;
  *(int32x2_t *)&v63 = vrev64_s32(a1[44]);
  *((_QWORD *)&v63 + 1) = 0x400000000;
  v12 = (std::__shared_weak_count *)a1[73];
  v59 = v10;
  v60 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v61, 0, (uint64_t)&v68);
  v15 = (char *)operator new(0x118uLL);
  *(_OWORD *)(v15 + 8) = 0u;
  *(_QWORD *)v15 = &off_1E2DC1868;
  *(_QWORD *)&v67 = Espresso::blob_cpu::blob_cpu((uint64_t)(v15 + 24), (_QWORD *)(a2 + 16), 0);
  *((_QWORD *)&v67 + 1) = v15;
  v66 = 0u;
  (*(void (**)(_QWORD, std::string *, __int128 *))(*((_QWORD *)v15 + 3) + 16))(v67, &v68, &v66);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v68);
  v20 = 0;
  v21 = *(int *)(*(_QWORD *)&v59 + 8);
  do
  {
    v21 *= *(int *)(*(_QWORD *)&v59 + 12 + v20);
    v20 += 4;
  }
  while (v20 != 12);
  if (v21 != v19)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("blob to copy has different total dim from required shape");
  memcpy(*(void **)(*(_QWORD *)(v67 + 160) + 24), *(const void **)(*(_QWORD *)&v59 + 24), 4 * v19);
  v22 = v67;
  if (v69)
  {
    v70 = v69;
    v53 = v67;
    operator delete(v69);
    v22 = v53;
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  v64 = v22;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v60)
  {
    v26 = &v60->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  Espresso::add_layer_input(a2, a3, (unsigned __int8 *)&__p, (uint64_t *)&v64);
  v57 = 0;
  v58 = 0;
  (*(void (**)(int32x2_t *, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v57);
  v28 = v58;
  if (v58)
  {
    v29 = (unint64_t *)&v58->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(_QWORD *)(a5 + 8);
  if (v31 >= *(_QWORD *)(a5 + 16))
  {
    v33 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v31 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v31 = v32;
    }
    v33 = (std::string *)(v31 + 24);
    *(_QWORD *)(a5 + 8) = v31 + 24;
  }
  *(_QWORD *)(a5 + 8) = v33;
  if (a1[42].i32[0] && *(_QWORD *)&a1[70])
  {
    Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + v9) + 16), 2, &v68);
    v34 = a1[43].i32[0];
    v61 = 1;
    v62 = v34;
    v63 = xmmword_191A93930;
    v35 = (std::__shared_weak_count *)a1[71];
    v56[0] = a1[70];
    v56[1] = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    Espresso::make_blob_container_and_copy_blob<std::shared_ptr<Espresso::blob<float,1>>>(&v67, (_QWORD *)(a2 + 16), (Espresso::layer_nd_shape *)&v61, (uint64_t)v56);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    Espresso::add_layer_input(a2, a3, (unsigned __int8 *)&v68, (uint64_t *)&v67);
    v54 = 0;
    v55 = 0;
    (*(void (**)(int32x2_t *, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v54);
    v40 = v55;
    if (v55)
    {
      v41 = (unint64_t *)&v55->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = *(_QWORD *)(a5 + 8);
    if (v43 >= *(_QWORD *)(a5 + 16))
    {
      v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v68);
    }
    else
    {
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
      }
      else
      {
        v44 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        *(_QWORD *)(v43 + 16) = *((_QWORD *)&v68.__r_.__value_.__l + 2);
        *(_OWORD *)v43 = v44;
      }
      v45 = (std::string *)(v43 + 24);
      *(_QWORD *)(a5 + 8) = v43 + 24;
    }
    *(_QWORD *)(a5 + 8) = v45;
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1917C16E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v32 + 8) = v33;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 160);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::convolution_kernel_cpu::transform_transfer_global_parameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[2];
  std::string __p;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD v52[2];
  std::string v53;

  v8 = 16 * a4;
  Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16 * a4) + 16), 2, &v53);
  if ((_QWORD *)(a2 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, &v53))
  {
    v9 = (_QWORD *)std::map<std::string,Espresso::blob_numerical_properties>::at(a2, &v53);
    v10 = (std::__shared_weak_count *)v9[1];
    v52[0] = *v9;
    v52[1] = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    Espresso::sync_copy_to_host(&__p, v52);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v15 = __p.__r_.__value_.__r.__words[0];
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v50, *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 16));
    v16 = 0;
    v17 = v50;
    v18 = *(int *)(v15 + 8);
    do
    {
      v18 *= *(int *)(v15 + 12 + v16);
      v16 += 4;
    }
    while (v16 != 12);
    memcpy(*(void **)(v50 + 16), *(const void **)(v15 + 24), 4 * v18);
    v48 = v17;
    v49 = v51;
    if (v51)
    {
      v19 = (unint64_t *)&v51->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v48);
    v21 = v49;
    if (v49)
    {
      v22 = (unint64_t *)&v49->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    Espresso::remove_layer_input(a3, a4, (unsigned __int8 *)&v53);
    v24 = v51;
    if (v51)
    {
      v25 = (unint64_t *)&v51->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + v8) + 16), 1, &__p);
  if ((_QWORD *)(a2 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, &__p))
  {
    v30 = (_QWORD *)std::map<std::string,Espresso::blob_numerical_properties>::at(a2, &__p);
    v31 = (std::__shared_weak_count *)v30[1];
    v46[0] = *v30;
    v46[1] = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    Espresso::sync_copy_to_host(&v50, v46);
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v44 = v50;
    v45 = v51;
    if (v51)
    {
      v36 = (unint64_t *)&v51->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v44);
    v38 = v45;
    if (v45)
    {
      v39 = (unint64_t *)&v45->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    Espresso::remove_layer_input(a3, a4, (unsigned __int8 *)&__p);
    v41 = v51;
    if (v51)
    {
      v42 = (unint64_t *)&v51->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

void sub_1917C1B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 65) < 0)
    operator delete(*(void **)(v23 - 88));
  _Unwind_Resume(a1);
}

void Espresso::remove_layer_input(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;

  v26 = a2;
  v5 = a1 + 56;
  v27 = &v26;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27);
  v7 = -1431655765 * ((v6[4] - v6[3]) >> 3);
  v8 = (v7 - 1);
  if (v7 >= 1)
  {
    do
    {
      v27 = &v26;
      v9 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27)[3]+ 24 * v8);
      v10 = v9[23];
      if ((v10 & 0x80u) == 0)
        v11 = v9[23];
      else
        v11 = *((_QWORD *)v9 + 1);
      v12 = a3[23];
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v9, v14, *((_QWORD *)v9 + 1)))
            goto LABEL_20;
        }
        else
        {
          if (!v9[23])
            goto LABEL_20;
          while (*v9 == *v14)
          {
            ++v9;
            ++v14;
            if (!--v10)
              goto LABEL_20;
          }
        }
      }
    }
    while (v8-- > 0);
    LODWORD(v8) = -1;
  }
LABEL_20:
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v26);
  v17 = *(__int128 **)(v16 + 88);
  v18 = (__int128 *)(*(_QWORD *)(v16 + 80) + 16 * (int)v8);
  v19 = (uint64_t)(v18 + 1);
  if (v18 + 1 != v17)
  {
    do
      v20 = (uint64_t)v18++;
    while ((__int128 *)(std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v20, v18) + 32) != v17);
    v19 = *(_QWORD *)(v16 + 88);
  }
  while ((__int128 *)v19 != v18)
    v19 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v19 - 16);
  *(_QWORD *)(v16 + 88) = v18;
  v27 = &v26;
  v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27);
  v27 = &v26;
  v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27)[3]+ 24 * (int)v8;
  v23 = v22 + 24;
  v24 = v21[4];
  if (v22 + 24 != v24)
  {
    do
    {
      if (*(char *)(v22 + 23) < 0)
        operator delete(*(void **)v22);
      *(_OWORD *)v22 = *(_OWORD *)(v22 + 24);
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v22 + 40);
      *(_BYTE *)(v22 + 47) = 0;
      v25 = v22 + 48;
      *(_BYTE *)(v22 + 24) = 0;
      v22 += 24;
    }
    while (v25 != v24);
    v23 = v21[4];
  }
  while (v23 != v22)
  {
    if (*(char *)(v23 - 1) < 0)
      operator delete(*(void **)(v23 - 24));
    v23 -= 24;
  }
  v21[4] = v22;
}

std::string *Espresso::add_layer_input(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  int64x2_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  void *v34;
  _QWORD *v35;
  char **v36;
  std::string *v37;
  std::string *result;
  _BYTE v39[32];
  int64x2_t *v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;

  v43 = a2;
  v7 = *(int64x2_t **)(*(_QWORD *)(a1 + 32) + 16 * a2);
  v8 = (uint64_t *)v7[5].i64[1];
  v9 = v7[6].u64[0];
  if ((unint64_t)v8 >= v9)
  {
    v14 = v7[5].i64[0];
    v15 = ((uint64_t)v8 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v9 - v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v40 = v7 + 6;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v18);
    v21 = &v19[16 * v15];
    v22 = *(_OWORD *)a4;
    *(_OWORD *)v21 = *(_OWORD *)a4;
    if (*((_QWORD *)&v22 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v26 = (_QWORD *)v7[5].i64[0];
    v25 = (_QWORD *)v7[5].i64[1];
    if (v25 == v26)
    {
      v29 = vdupq_n_s64((unint64_t)v25);
      v27 = &v19[16 * v15];
    }
    else
    {
      v27 = &v19[16 * v15];
      do
      {
        v28 = *((_OWORD *)v25 - 1);
        v25 -= 2;
        *((_OWORD *)v27 - 1) = v28;
        v27 -= 16;
        *v25 = 0;
        v25[1] = 0;
      }
      while (v25 != v26);
      v29 = v7[5];
    }
    v13 = v21 + 16;
    v7[5].i64[0] = (uint64_t)v27;
    v7[5].i64[1] = (uint64_t)(v21 + 16);
    *(int64x2_t *)&v39[8] = v29;
    v30 = v7[6].i64[0];
    v7[6].i64[0] = (uint64_t)&v19[16 * v20];
    *(_QWORD *)&v39[24] = v30;
    *(_QWORD *)v39 = v29.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v39);
  }
  else
  {
    *v8 = *a4;
    v10 = a4[1];
    v8[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = v8 + 2;
  }
  v7[5].i64[1] = (uint64_t)v13;
  *(_QWORD *)v39 = a3;
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 136, a3, (__int128 **)v39);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v31 + 5, *a4, a4[1]);
  Espresso::abstract_blob_container::shape(v39, *a4);
  v44 = a3;
  v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), a3, (__int128 **)&v44);
  v33 = *(_OWORD *)&v39[16];
  *(_OWORD *)(v32 + 56) = *(_OWORD *)v39;
  *(_OWORD *)(v32 + 72) = v33;
  *((_QWORD *)v32 + 11) = v40;
  v34 = (void *)*((_QWORD *)v32 + 12);
  if (v34)
  {
    *((_QWORD *)v32 + 13) = v34;
    operator delete(v34);
    *((_QWORD *)v32 + 12) = 0;
    *((_QWORD *)v32 + 13) = 0;
    *((_QWORD *)v32 + 14) = 0;
  }
  *((_OWORD *)v32 + 6) = v41;
  *((_QWORD *)v32 + 14) = v42;
  *(_QWORD *)v39 = &v43;
  v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v43, (uint64_t)&std::piecewise_construct, (uint64_t **)v39);
  v36 = (char **)(v35 + 3);
  v37 = (std::string *)v35[4];
  if ((unint64_t)v37 >= v35[5])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v36, (uint64_t)a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v36, (__int128 *)a3);
    result = v37 + 1;
  }
  v35[4] = result;
  return result;
}

void sub_1917C207C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::make_blob_container_and_copy_blob<std::shared_ptr<Espresso::blob<float,1>>>(_OWORD *a1, _QWORD *a2, Espresso::layer_nd_shape *this, uint64_t a4)
{
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[40];
  void *__p;
  void *v16;

  Espresso::layer_nd_shape::to_canonical_5d_shape(this, 0, (uint64_t)v14);
  v7 = (char *)operator new(0x118uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(_QWORD *)v7 = &off_1E2DC1868;
  *(_QWORD *)&v13 = Espresso::blob_cpu::blob_cpu((uint64_t)(v7 + 24), a2, 0);
  *((_QWORD *)&v13 + 1) = v7;
  v12 = 0u;
  (*(void (**)(_QWORD, _BYTE *, __int128 *))(*((_QWORD *)v7 + 3) + 16))(v13, v14, &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v14);
  if (v11 != *(_DWORD *)(*(_QWORD *)a4 + 8))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("blob to copy has different total dim from required shape");
  memcpy(*(void **)(*(_QWORD *)(v13 + 160) + 24), *(const void **)(*(_QWORD *)a4 + 16), 4 * v11);
  *a1 = v13;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_1917C21BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::pool3d_kernel_cpu::~pool3d_kernel_cpu(Espresso::pool3d_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pool3d_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  float *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  float *v60;
  int v61;
  float *v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  const char *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _BYTE v93[12];
  uint64_t v94;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  _DWORD *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v5 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v5
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5))
  {
    v81 = 0;
    v110 = 0;
  }
  else
  {
    v73 = *(std::__shared_weak_count **)(*v5 + 168);
    v81 = *(_QWORD *)(*v5 + 160);
    v110 = v73;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(p_shared_owners);
      while (__stxr(v75 + 1, p_shared_owners));
    }
  }
  v6 = *(_QWORD **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v8 = *(_DWORD **)(*v6 + 160);
    v7 = *(std::__shared_weak_count **)(*v6 + 168);
    if (v7)
    {
      v76 = (unint64_t *)&v7->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
  }
  if (!v81)
  {
    v78 = "pool3d_kernel_cpu: Null top blob";
    goto LABEL_106;
  }
  if (!v8)
  {
    v78 = "pool3d_kernel_cpu: Null bottom blob";
LABEL_106:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v78);
  }
  v10 = v8 + 2;
  v9 = v8[2];
  v11 = *(_DWORD *)(v81 + 8);
  v83 = *(unsigned int *)(v81 + 20);
  v91 = *(unsigned int *)(v81 + 16);
  v103 = *(unsigned int *)(v81 + 12);
  v89 = v8[4];
  v102 = v8[3];
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *(_DWORD *)(a1 + 300);
  v92 = *(_DWORD *)(a1 + 304);
  v14 = *(_DWORD *)(a1 + 284);
  v100 = *(_DWORD *)(a1 + 288);
  v87 = *(_DWORD *)(a1 + 292);
  v15 = *(__int16 *)(a1 + 316);
  v108 = v8;
  if (v15 != 4)
  {
    if (v15 == 2)
    {
      v27 = 0;
      v28 = 0;
      v101 = 0;
      v23 = 0;
      v30 = 0;
      v88 = 0;
      goto LABEL_31;
    }
    if (v15 != 1)
    {
      v27 = *(__int16 *)(a1 + 324);
      v28 = *(__int16 *)(a1 + 326);
      v101 = *(__int16 *)(a1 + 328);
      v23 = *(__int16 *)(a1 + 330);
      v88 = *(__int16 *)(a1 + 332);
      v30 = *(__int16 *)(a1 + 334);
      goto LABEL_31;
    }
  }
  v16 = (v13 * (v103 - 1) - v102 + v100) & ~((v13 * ((int)v103 - 1) - v102 + v100) >> 31);
  v17 = (v12 * (v11 - 1) - v9 + v14) & ~((v12 * (v11 - 1) - v9 + v14) >> 31);
  v18 = (v92 * (v91 - 1) - v89 + v87) & ~((v92 * ((int)v91 - 1) - v89 + v87) >> 31);
  v19 = v17 >> 1;
  v20 = *(unsigned __int16 *)(a1 + 316);
  v21 = v17 - (v17 >> 1);
  v22 = v16 >> 1;
  v23 = v16 - (v16 >> 1);
  v24 = v18 >> 1;
  v25 = v18 - (v18 >> 1);
  v26 = v20 == 1;
  if (v20 == 1)
    v27 = v19;
  else
    v27 = v21;
  if (v20 == 1)
    v28 = v21;
  else
    v28 = v19;
  if (v26)
    v29 = v22;
  else
    v29 = v23;
  v101 = v29;
  if (v26)
  {
    v30 = v25;
  }
  else
  {
    v23 = v22;
    v30 = v24;
  }
  if (v26)
    v25 = v24;
  v88 = v25;
LABEL_31:
  v31 = 0;
  v116 = 0;
  v114 = 0u;
  v115 = 0u;
  v32 = 1;
  do
  {
    *((_QWORD *)&v114 + v31) = (int)v32;
    v32 *= v10[v31++];
  }
  while (v31 != 4);
  v33 = 0;
  v113 = 0;
  v111 = 0u;
  v112 = 0u;
  v34 = 1;
  do
  {
    *((_QWORD *)&v111 + v33) = (int)v34;
    v34 *= *(unsigned int *)(v81 + 8 + 4 * v33++);
  }
  while (v33 != 4);
  v79 = v7;
  v35 = *(_DWORD *)(a1 + 280);
  if (v35 > 1)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Unsupported Pool3D mode.");
  if ((int)v83 >= 1)
  {
    v109 = 0;
    v84 = 0;
    v86 = v30 + v89;
    v80 = *((_QWORD *)&v112 + 1);
    v85 = v112;
    v94 = *((_QWORD *)&v111 + 1);
    v98 = v23 + v102;
    v99 = v13;
    v36 = v28 + v9;
    v82 = 4 * *((_QWORD *)&v115 + 1);
    v37 = 4 * v115;
    v38 = 4 * *((_QWORD *)&v114 + 1);
    while ((int)v91 < 1)
    {
LABEL_84:
      v109 += v82;
      if (++v84 == v83)
        goto LABEL_85;
    }
    *(_DWORD *)&v93[8] = 0;
    v90 = *(_QWORD *)(v81 + 24) + 4 * v80 * v84;
    *(_QWORD *)v93 = -v88;
    while ((int)v103 < 1)
    {
LABEL_83:
      *(_DWORD *)v93 += v92;
      if (++*(_QWORD *)&v93[4] == v91)
        goto LABEL_84;
    }
    v39 = 0;
    v40 = v92 * *(_DWORD *)&v93[4] - v88;
    v41 = v40 + v87;
    if (v40 + v87 >= v86)
      v41 = v86;
    v42 = v89;
    if (v41 < v89)
      v42 = v41;
    v43 = v40 & ~(v40 >> 31);
    v97 = v41 - v40;
    v96 = v42 - v43;
    v44 = v42;
    v105 = -v101;
    while (1)
    {
      v104 = v39;
      v45 = v13 * v39 - v101;
      v46 = v45 + v100;
      if (v45 + v100 >= v98)
        v46 = v98;
      v47 = v46 >= v102 ? v102 : v46;
      if (v11 >= 1)
        break;
LABEL_82:
      v39 = v104 + 1;
      v13 = v99;
      v105 += v99;
      if (v104 + 1 == v103)
        goto LABEL_83;
    }
    v48 = 0;
    v49 = v45 & ~(v45 >> 31);
    v50 = (float *)(v90 + 4 * v85 * *(_QWORD *)&v93[4] + 4 * v94 * v39);
    v107 = (v46 - v45) * v97;
    v106 = *(_DWORD *)(a1 + 308);
    v51 = -v27;
    while (1)
    {
      v52 = v48 * v12 - v27;
      v53 = v52 + v14 >= v36 ? v36 : v52 + v14;
      v54 = v52 & ~(v52 >> 31);
      v55 = v53 >= v9 ? v9 : v53;
      if (v43 < (int)v44)
        break;
      v58 = 0.0;
      v59 = -3.4028e38;
      if (!v35)
        goto LABEL_78;
LABEL_81:
      *v50++ = v59;
      ++v48;
      v51 += v12;
      if (v48 == v11)
        goto LABEL_82;
    }
    v56 = *(_DWORD *)v93 & ~(*(int *)v93 >> 31);
    v57 = *((_QWORD *)v108 + 3)
        + v109
        + v37 * v56
        + v38 * (v105 & ~(v105 >> 31))
        + 4 * (v51 & ~(v51 >> 31));
    v58 = 0.0;
    v59 = -3.4028e38;
    do
    {
      if (v47 > v49)
      {
        v60 = (float *)v57;
        v61 = v49;
        do
        {
          v62 = v60;
          v63 = v51 & ~(v51 >> 31);
          if (v55 > v54)
          {
            do
            {
              v64 = *v62++;
              v65 = v64;
              if (v35)
                v66 = -0.0;
              else
                v66 = v65;
              v67 = v58 + v66;
              if (v65 <= v59)
                v65 = v59;
              if (v35 == 1)
                v59 = v65;
              else
                v58 = v67;
              ++v63;
            }
            while (v63 < v55);
          }
          ++v61;
          v60 = (float *)((char *)v60 + v38);
        }
        while (v61 < v47);
      }
      ++v56;
      v57 += v37;
    }
    while (v56 < v44);
    if (v35)
      goto LABEL_81;
LABEL_78:
    v68 = (v47 - v49) * v96 * (v55 - v54);
    if (!v106)
      v68 = v107 * (v53 - v52);
    v59 = v58 * (float)(1.0 / (float)v68);
    goto LABEL_81;
  }
LABEL_85:
  if (v79)
  {
    v69 = (unint64_t *)&v79->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v110)
  {
    v71 = (unint64_t *)&v110->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
}

void sub_1917C2924(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 192);
  _Unwind_Resume(a1);
}

void Espresso::pool_kernel_cpu::~pool_kernel_cpu(Espresso::pool_kernel_cpu *this)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pool_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  float v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  const float *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  float *v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  float v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _DWORD *v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *p_shared_owners;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  float *v150;
  uint64_t v151;
  _DWORD *v152;
  float *v153;
  float *v154;
  uint64_t v155;
  float v156;
  float v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  int v188;
  int v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  float32x4x2_t v197;

  v6 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v7 = 0;
    v190 = 0;
  }
  else
  {
    v132 = *v6;
    v7 = *(_QWORD *)(*v6 + 160);
    v133 = *(std::__shared_weak_count **)(v132 + 168);
    v190 = v133;
    if (v133)
    {
      p_shared_owners = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldxr(p_shared_owners);
      while (__stxr(v135 + 1, p_shared_owners));
    }
  }
  v9 = a4;
  v8 = *a4;
  if (v9[1] == v8 || !*v8 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
    goto LABEL_175;
  v11 = *(_QWORD *)(*v8 + 160);
  v10 = *(std::__shared_weak_count **)(*v8 + 168);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!v7 || !v11)
LABEL_175:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("pool_kernel_cpu: One top and bottom required");
  v14 = *(_DWORD *)(v11 + 8);
  v15 = *(unsigned int *)(v7 + 8);
  v188 = *(_DWORD *)(v11 + 12);
  v189 = *(_DWORD *)(v7 + 12);
  v16 = *(_DWORD *)(a1 + 320);
  v17 = *(_DWORD *)(a1 + 324);
  v18 = *(int *)(a1 + 308);
  v186 = *(_DWORD *)(a1 + 312);
  v19 = *(__int16 *)(a1 + 340);
  if (v19 != 4)
  {
    if (v19 == 2)
    {
      v28 = 0;
      v187 = 0;
      v29 = 0;
      v30 = 0;
      goto LABEL_29;
    }
    if (v19 != 1)
    {
      v30 = *(__int16 *)(a1 + 348);
      v29 = *(__int16 *)(a1 + 350);
      v187 = *(__int16 *)(a1 + 352);
      v28 = *(__int16 *)(a1 + 354);
      goto LABEL_29;
    }
  }
  v20 = (v17 * (v189 - 1) - v188 + v186) & ~((v17 * (v189 - 1) - v188 + v186) >> 31);
  v21 = (v16 * (v15 - 1) - v14 + v18) & ~((v16 * ((int)v15 - 1) - v14 + (int)v18) >> 31);
  v22 = *(unsigned __int16 *)(a1 + 340);
  v23 = v21 >> 1;
  v24 = v21 - (v21 >> 1);
  v25 = v20 >> 1;
  v26 = v20 - (v20 >> 1);
  v27 = v22 == 1;
  if (v22 == 1)
    v28 = v26;
  else
    v28 = v25;
  if (v27)
    v26 = v25;
  v187 = v26;
  if (v27)
    v29 = v24;
  else
    v29 = v23;
  if (v27)
    v30 = v23;
  else
    v30 = v24;
LABEL_29:
  v31 = 0;
  v196 = 0;
  v194 = 0u;
  v195 = 0u;
  v32 = 1;
  do
  {
    *((_QWORD *)&v194 + v31) = (int)v32;
    v32 *= *(unsigned int *)(v11 + 8 + 4 * v31++);
  }
  while (v31 != 4);
  v33 = 0;
  v193 = 0;
  v34 = 0uLL;
  v191 = 0u;
  v192 = 0u;
  v35 = 1;
  do
  {
    *((_QWORD *)&v191 + v33) = (int)v35;
    v35 *= *(unsigned int *)(v7 + 4 * v33++ + 8);
  }
  while (v33 != 4);
  v164 = v11;
  v167 = *(unsigned __int16 *)(a1 + 372);
  if (!*(_WORD *)(a1 + 372))
    v167 = *(_DWORD *)(v7 + 16);
  v36 = *(_DWORD *)(a1 + 304);
  v170 = a1;
  v163 = v7;
  v158 = v10;
  if (v36)
  {
    if (v36 == 1)
    {
      if ((_DWORD)v30 || v29 || v187 || v28 || v188 != 1 || v189 != 1 || v16 != 2)
      {
        if (*(int *)(v7 + 20) >= 1)
        {
          v107 = 0;
          v108 = *(unsigned int *)(v7 + 20);
          v171 = (int)(v189 * v15 * *(unsigned __int16 *)(a1 + 366));
          v169 = *((_QWORD *)&v192 + 1);
          v181 = v192;
          v174 = 4 * *((_QWORD *)&v195 + 1);
          v177 = 4 * v188 * v14 * *(unsigned __int16 *)(a1 + 364);
          v109 = 4 * v195;
          do
          {
            if (v167 >= 1)
            {
              v110 = 0;
              v183 = *(_QWORD *)(v163 + 24) + 4 * v169 * v107 + 4 * v171;
              v111 = *(_QWORD *)(v11 + 24) + v177;
              do
              {
                if (v189 >= 1)
                {
                  v112 = 0;
                  v113 = (_DWORD *)(v183 + 4 * v181 * v110);
                  v114 = 4 * *((_QWORD *)&v194 + 1);
                  v115 = -v187;
                  do
                  {
                    v116 = v112 * v17 - v187;
                    v117 = v116 + v186;
                    if (v116 + v186 >= v188)
                      v117 = v188;
                    if ((int)v15 >= 1)
                    {
                      v118 = 0;
                      v119 = v116 & ~(v116 >> 31);
                      v120 = -(int)v30;
                      do
                      {
                        v34.n128_u32[0] = 0;
                        if (v119 < v117)
                        {
                          v121 = v118 * v16 - v30;
                          v122 = v121 + v18;
                          if (v121 + (int)v18 >= v14)
                            v122 = v14;
                          v123 = v122;
                          v124 = 1;
                          v125 = v111 + v114 * (v115 & ~(v115 >> 31));
                          v126 = v119;
                          do
                          {
                            v127 = v120 & ~(v120 >> 31);
                            if ((v121 & ~(v121 >> 31)) < (int)v123)
                            {
                              do
                              {
                                if ((*(float *)(v125 + 4 * v127) > v34.n128_f32[0]) | v124 & 1)
                                  v34.n128_u32[0] = *(_DWORD *)(v125 + 4 * v127);
                                ++v127;
                                v124 = 0;
                              }
                              while (v127 < v123);
                            }
                            ++v126;
                            v125 += v114;
                          }
                          while (v126 < v117);
                        }
                        *v113++ = v34.n128_u32[0];
                        ++v118;
                        v120 += v16;
                      }
                      while (v118 != (_DWORD)v15);
                    }
                    ++v112;
                    v115 += v17;
                  }
                  while (v112 != v189);
                }
                ++v110;
                v111 += v109;
              }
              while (v110 != v167);
            }
            v177 += v174;
            ++v107;
          }
          while (v107 != v108);
        }
      }
      else if ((_DWORD)v18 == 2)
      {
        v59 = v15 + 3;
        if ((int)v15 >= 0)
          v59 = v15;
        if (*(int *)(v7 + 20) >= 1)
        {
          v60 = v7;
          v61 = 0;
          v62 = 0;
          v63 = 0;
          v64 = (v59 >> 2);
          v65 = v195;
          v66 = 4 * *((_QWORD *)&v192 + 1);
          v30 = 4 * v192;
          v67 = 4 * *((_QWORD *)&v195 + 1);
          v68 = 4 * v195;
          do
          {
            if (v167 < 1)
            {
              v70 = v60;
            }
            else
            {
              v69 = 0;
              v70 = v60;
              v71 = *(_DWORD *)(v60 + 8);
              v72 = v61;
              v73 = v62;
              do
              {
                v74 = *(_QWORD *)(v164 + 24);
                v75 = *(_DWORD *)(v164 + 12) * *(_DWORD *)(v164 + 8) * *(unsigned __int16 *)(v170 + 364);
                v76 = *(_QWORD *)(v70 + 24);
                v77 = *(_DWORD *)(v70 + 12) * v71 * *(unsigned __int16 *)(v170 + 366);
                if ((int)v15 < 4)
                {
                  v81 = 0;
                }
                else
                {
                  v78 = (__n128 *)(v76 + v73 + 4 * v77);
                  v79 = (const float *)(v74 + v72 + 4 * v75);
                  v80 = v64;
                  do
                  {
                    v197 = vld2q_f32(v79);
                    v79 += 8;
                    v34 = (__n128)vbslq_s8((int8x16_t)vcgtq_f32(v197.val[1], v197.val[0]), (int8x16_t)v197.val[1], (int8x16_t)v197.val[0]);
                    *v78++ = v34;
                    --v80;
                  }
                  while (v80);
                  v71 = *(_DWORD *)(v70 + 8);
                  v81 = v64;
                }
                if (v71 > (int)(4 * v81))
                {
                  v82 = v74 + 4 * *((_QWORD *)&v65 + 1) * v63 + 4 * v65 * v69 + 4 * v75;
                  v83 = v71 - 4 * v81;
                  v84 = v76 + 4 * v77 + 16 * v81;
                  v85 = 8 * v81;
                  do
                  {
                    v34.n128_u32[0] = *(_DWORD *)(v82 + 4 * v85);
                    if (v34.n128_f32[0] < *(float *)(v82 + 4 * (v85 + 1)))
                      v34.n128_u32[0] = *(_DWORD *)(v82 + 4 * (v85 + 1));
                    *(_DWORD *)(v84 + v73) = v34.n128_u32[0];
                    v84 += 4;
                    v85 += 2;
                    --v83;
                  }
                  while (v83);
                }
                ++v69;
                v73 += v30;
                v72 += v68;
              }
              while (v69 != v167);
            }
            ++v63;
            v60 = v70;
            v62 += v66;
            v61 += v67;
          }
          while (v63 < *(int *)(v70 + 20));
        }
      }
      else
      {
        v136 = *(unsigned int *)(v7 + 20);
        if ((int)v136 >= 1)
        {
          v137 = v7;
          v138 = 0;
          v139 = v195;
          v140 = v14 * *(unsigned __int16 *)(a1 + 364);
          v141 = (int)(v15 * *(unsigned __int16 *)(a1 + 366));
          v142 = v192;
          v30 = v18 - 1;
          v143 = 4 * v140 + 4;
          v144 = 4 * *((_QWORD *)&v195 + 1);
          v145 = 4 * v195;
          do
          {
            if (v167 >= 1)
            {
              v146 = 0;
              v147 = *(_QWORD *)(v164 + 24);
              v148 = v147 + 4 * *((_QWORD *)&v139 + 1) * v138 + 4 * v140;
              v149 = *(_QWORD *)(v137 + 24) + 4 * *((_QWORD *)&v142 + 1) * v138 + 4 * v141;
              v150 = (float *)(v147 + v143);
              do
              {
                if ((int)v15 >= 1)
                {
                  v151 = 0;
                  v152 = (_DWORD *)(v149 + 4 * v142 * v146);
                  v153 = v150;
                  do
                  {
                    v34.n128_u32[0] = *(_DWORD *)(v148 + 4 * v139 * v146 + 8 * v151);
                    v154 = v153;
                    v155 = v18 - 1;
                    if (v18 >= 2)
                    {
                      do
                      {
                        v156 = *v154++;
                        v157 = v156;
                        if (v156 > v34.n128_f32[0])
                          v34.n128_f32[0] = v157;
                        --v155;
                      }
                      while (v155);
                    }
                    *v152++ = v34.n128_u32[0];
                    ++v151;
                    v153 += 2;
                  }
                  while (v151 != v15);
                }
                ++v146;
                v150 = (float *)((char *)v150 + v145);
              }
              while (v146 != v167);
            }
            ++v138;
            v143 += v144;
          }
          while (v138 != v136);
        }
      }
    }
    else if (v36 == 2)
    {
      v179 = *(unsigned int *)(v7 + 20);
      if ((int)v179 >= 1)
      {
        v37 = 0;
        v175 = *((_QWORD *)&v192 + 1);
        v184 = v192;
        v172 = (int)(v189 * v15 * *(unsigned __int16 *)(a1 + 366));
        v182 = 4 * v188 * v14 * *(unsigned __int16 *)(a1 + 364);
        v178 = 4 * *((_QWORD *)&v195 + 1);
        v38 = 4 * v195;
        v34.n128_u32[0] = 953267991;
        do
        {
          if (v167 >= 1)
          {
            v39 = 0;
            v40 = *(_QWORD *)(v7 + 24) + 4 * v175 * v37 + 4 * v172;
            v41 = *(_QWORD *)(v164 + 24) + v182;
            do
            {
              if (v189 >= 1)
              {
                v42 = 0;
                v43 = (float *)(v40 + 4 * v184 * v39);
                v44 = 4 * *((_QWORD *)&v194 + 1);
                v45 = -v187;
                do
                {
                  v46 = v42 * v17 - v187;
                  if (v46 + v186 >= v188)
                    v47 = v188;
                  else
                    v47 = v46 + v186;
                  if ((int)v15 >= 1)
                  {
                    v48 = 0;
                    v49 = v46 & ~(v46 >> 31);
                    v50 = -(int)v30;
                    do
                    {
                      v51 = 0.0;
                      if (v49 < v47)
                      {
                        v52 = v48 * v16 - v30;
                        v53 = v52 + v18;
                        if (v52 + (int)v18 >= v14)
                          v53 = v14;
                        v54 = v52 & ~(v52 >> 31);
                        v55 = v53;
                        v56 = v41 + v44 * (v45 & ~(v45 >> 31));
                        v57 = v49;
                        do
                        {
                          v58 = v50 & ~(v50 >> 31);
                          if (v54 < (int)v55)
                          {
                            do
                            {
                              v51 = v51 + (float)(*(float *)(v56 + 4 * v58) * *(float *)(v56 + 4 * v58));
                              ++v58;
                            }
                            while (v58 < v55);
                          }
                          ++v57;
                          v56 += v44;
                        }
                        while (v57 < v47);
                      }
                      if (v51 < 0.0001)
                        v51 = 0.0001;
                      *v43++ = sqrtf(v51);
                      ++v48;
                      v50 += v16;
                    }
                    while (v48 != (_DWORD)v15);
                  }
                  ++v42;
                  v45 += v17;
                }
                while (v42 != v189);
              }
              ++v39;
              v41 += v38;
            }
            while (v39 != v167);
          }
          v182 += v178;
          ++v37;
        }
        while (v37 != v179);
      }
    }
  }
  else
  {
    v162 = *(unsigned int *)(v7 + 20);
    if ((int)v162 >= 1)
    {
      v166 = 0;
      v160 = (int)(v189 * v15 * *(unsigned __int16 *)(a1 + 366));
      v159 = *((_QWORD *)&v192 + 1);
      v168 = v192;
      v165 = 4 * v188 * v14 * *(unsigned __int16 *)(a1 + 364);
      v161 = 4 * *((_QWORD *)&v195 + 1);
      v176 = 4 * v195;
      v34.n128_u32[0] = 1.0;
      do
      {
        if (v167 >= 1)
        {
          v180 = 0;
          v173 = *(_QWORD *)(v163 + 24) + 4 * v159 * v166 + 4 * v160;
          v185 = *(_QWORD *)(v164 + 24) + v165;
          do
          {
            if (v189 >= 1)
            {
              v86 = 0;
              v87 = (float *)(v173 + 4 * v168 * v180);
              v88 = *(_DWORD *)(v170 + 332);
              v89 = 4 * *((_QWORD *)&v194 + 1);
              v90 = -v187;
              do
              {
                v91 = v86 * v17 - v187;
                v92 = v91 + v186;
                if (v91 + v186 >= (int)(v187 + v188))
                  v92 = v187 + v188;
                if (v92 >= v188)
                  v93 = v188;
                else
                  v93 = v92;
                if ((int)v15 >= 1)
                {
                  v94 = 0;
                  v95 = v91 & ~(v91 >> 31);
                  v96 = v92 - v91;
                  v97 = -(int)v30;
                  do
                  {
                    v98 = v94 * v16 - v30;
                    if (v98 + (int)v18 >= (int)v30 + v14)
                      v99 = v30 + v14;
                    else
                      v99 = v98 + v18;
                    v100 = v98 & ~(v98 >> 31);
                    if (v99 >= v14)
                      v101 = v14;
                    else
                      v101 = v99;
                    v102 = 0.0;
                    if (v93 > v95)
                    {
                      v103 = v185 + v89 * (v90 & ~(v90 >> 31));
                      v104 = v91 & ~(v91 >> 31);
                      do
                      {
                        v105 = v97 & ~(v97 >> 31);
                        if (v101 > v100)
                        {
                          do
                            v102 = v102 + *(float *)(v103 + 4 * v105++);
                          while (v105 < v101);
                        }
                        ++v104;
                        v103 += v89;
                      }
                      while (v104 < v93);
                    }
                    v106 = (v99 - v98) * v96;
                    if (v88)
                      v106 = (v101 - v100) * (v93 - v95);
                    *v87++ = v102 * (float)(1.0 / (float)v106);
                    ++v94;
                    v97 += v16;
                  }
                  while (v94 != (_DWORD)v15);
                }
                ++v86;
                v90 += v17;
              }
              while (v86 != v189);
            }
            v185 += v176;
            ++v180;
          }
          while (v180 != v167);
        }
        v165 += v161;
        ++v166;
      }
      while (v166 != v162);
    }
  }
  if (v158)
  {
    v128 = (unint64_t *)&v158->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t, __n128))v158->__on_zero_shared)(v158, v30, v34);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  if (v190)
  {
    v130 = (unint64_t *)&v190->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t, __n128))v190->__on_zero_shared)(v190, v30, v34);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
}

void sub_1917C357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void Espresso::lrn_kernel_cpu::~lrn_kernel_cpu(Espresso::lrn_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::lrn_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  vDSP_Stride v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float *v25;
  uint64_t v26;
  const float *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  float *v46;
  int v47;
  std::__shared_weak_count *v48;
  float v49;
  float __C;
  float __B;
  int v52;
  int v53;
  vDSP_Stride __ID[2];
  __int128 v55;

  v6 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v7 = 0;
    v48 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(*v6 + 160);
    v35 = *(std::__shared_weak_count **)(*v6 + 168);
    v48 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
  }
  v9 = a4;
  v8 = *a4;
  if (v9[1] == v8 || !*v8 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(*v8 + 160);
    v10 = *(std::__shared_weak_count **)(*v8 + 168);
    if (v10)
    {
      v38 = (unint64_t *)&v10->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
  }
  v12 = 0;
  *(_OWORD *)__ID = 0u;
  v55 = 0u;
  v13 = 1;
  do
  {
    __ID[v12] = (int)v13;
    v13 *= *(unsigned int *)(v7 + 8 + 4 * v12++);
  }
  while (v12 != 4);
  v40 = v10;
  v14 = 0;
  v15 = *(_DWORD *)(v7 + 8);
  do
  {
    v15 *= *(_DWORD *)(v7 + 12 + v14);
    v14 += 4;
  }
  while (v14 != 12);
  v53 = v15;
  v16 = v55;
  v52 = DWORD2(v55);
  v17 = *(_DWORD *)(v7 + 20);
  v47 = *(_DWORD *)(a1 + 288);
  if (v47)
    v18 = *(_DWORD *)(a1 + 288);
  else
    v18 = 3;
  __B = *(float *)(a1 + 280) / (float)v18;
  v49 = 2.0;
  __C = 1.0;
  vvpowsf(*(float **)(v7 + 24), &v49, *(const float **)(v11 + 24), &v53);
  if (v17 >= 1)
  {
    v19 = __ID[0];
    v46 = (float *)(a1 + 284);
    v20 = 0;
    v21 = v16;
    v43 = -(uint64_t)v16;
    v22 = 4 * v16;
    v41 = v11;
    v42 = v7;
    v45 = v17;
    do
    {
      v23 = *(_QWORD *)(v7 + 24);
      v24 = v52;
      v25 = (float *)(v23 + 4 * v52 * v20);
      v26 = *(_QWORD *)(v11 + 24);
      v27 = (const float *)(v26 + 4 * v52 * v20);
      if (v47 >= 2)
      {
        v44 = v20;
        v28 = v22 + 4 * v52 * v20;
        v29 = v43;
        v30 = (v47 / 2 + 1) - 1;
        do
        {
          vDSP_vma((const float *)(v26 + v28), v19, (const float *)(v26 + v28), v19, v25, v19, v25, v19, v29 + v52);
          vDSP_vma(v27, v19, v27, v19, (const float *)(v23 + v28), v19, (float *)(v23 + v28), v19, v29 + v52);
          v29 -= v21;
          v28 += v22;
          --v30;
        }
        while (v30);
        v24 = v52;
        v11 = v41;
        v7 = v42;
        v20 = v44;
      }
      vDSP_vsmsa(v25, v19, &__B, &__C, v25, v19, v24);
      vvpowsf(v25, v46, v25, &v52);
      vvdivf(v25, v27, v25, &v52);
      ++v20;
    }
    while (v20 != v45);
  }
  if (v40)
  {
    v31 = (unint64_t *)&v40->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v48)
  {
    v33 = (unint64_t *)&v48->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1917C392C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::softmax_kernel_cpu::~softmax_kernel_cpu(Espresso::softmax_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D84120;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D84120;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::softmax_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  Espresso *v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  NSObject *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  std::__shared_weak_count_vtbl *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  float v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint8_t buf[8];
  std::__shared_weak_count *v70;
  void *__p;
  void *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;

  v7 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v75 = 0;
    v76 = 0;
  }
  else
  {
    v19 = *v7;
    v8 = *(_QWORD *)(*v7 + 160);
    v20 = *(std::__shared_weak_count **)(v19 + 168);
    v75 = v8;
    v76 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
  }
  v9 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v9
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v73 = 0;
    v74 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v9 + 160);
    v23 = *(std::__shared_weak_count **)(*v9 + 168);
    v73 = v10;
    v74 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  Espresso::abstract_blob_container::shape((char *)buf, **(_QWORD **)a4);
  v11 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)buf, **(_QWORD **)a3);
  v13 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  v14 = (Espresso *)__p;
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  if (v11 && v13)
  {
    Espresso::abstract_blob_container::shape((char *)buf, **(_QWORD **)a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v63, (const Espresso::layer_shape *)buf, 0);
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
    if (*(_BYTE *)(a1 + 307) || v68 <= 3)
    {
      switch(v68)
      {
        case 1u:
          v15 = 1;
          if (!v68)
            goto LABEL_47;
          break;
        case 2u:
          v15 = v63;
          if (!v68)
            goto LABEL_47;
          break;
        case 3u:
          v15 = v64 * v63;
          if (!v68)
            goto LABEL_47;
          break;
        case 4u:
          v15 = v64 * v63 * v65;
          if (!v68)
            goto LABEL_47;
          break;
        case 5u:
          v15 = v64 * v63 * v65 * v66;
          if (!v68)
            goto LABEL_47;
          break;
        default:
          v15 = 0;
          if (!v68)
            goto LABEL_47;
          break;
      }
      v16 = *(&v63 + (int)v68 - 1);
    }
    else if (v68 == 5)
    {
      v15 = v64 * v63;
      v16 = v66 * v67 * v65;
    }
    else if (v68 == 4)
    {
      v15 = v63;
      v16 = v65 * v66 * v64;
    }
    else
    {
      v15 = 0;
LABEL_47:
      v16 = 0;
    }
    Espresso::abstract_blob_container::shape((char *)buf, **(_QWORD **)a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v57, (const Espresso::layer_shape *)buf, 0);
    v26 = *(unsigned __int8 *)(a1 + 307);
    if (*(_BYTE *)(a1 + 307) || v62 <= 3)
    {
      switch(v62)
      {
        case 1u:
          v27 = 1;
          if (!v62)
            goto LABEL_67;
          break;
        case 2u:
          v27 = v57;
          if (!v62)
            goto LABEL_67;
          break;
        case 3u:
          v27 = v58 * v57;
          if (!v62)
            goto LABEL_67;
          break;
        case 4u:
          v27 = v58 * v57 * v59;
          if (!v62)
            goto LABEL_67;
          break;
        case 5u:
          v27 = v58 * v57 * v59 * v60;
          if (!v62)
            goto LABEL_67;
          break;
        default:
          v27 = 0;
          if (!v62)
            goto LABEL_67;
          break;
      }
      v28 = *(&v57 + (int)v62 - 1);
    }
    else if (v62 == 5)
    {
      v27 = v58 * v57;
      v28 = v60 * v61 * v59;
    }
    else if (v62 == 4)
    {
      v27 = v57;
      v28 = v59 * v60 * v58;
    }
    else
    {
      v27 = 0;
LABEL_67:
      v28 = 0;
    }
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
      v26 = *(unsigned __int8 *)(a1 + 307);
    }
    if (v26 || v68 <= 3)
    {
      v56 = a1;
      v29 = v15;
      v30 = operator new(0x60uLL);
      v30[1] = 0;
      v30[2] = 0;
      *v30 = &off_1E2DBECA8;
      v30[3] = &off_1E2DA11F0;
      v31 = (uint64_t)(v30 + 3);
      v32 = *(_QWORD *)(v8 + 24);
      *((_OWORD *)v30 + 4) = 0u;
      *((_OWORD *)v30 + 5) = 0u;
      v30[4] = 0x100000001;
      *((_DWORD *)v30 + 10) = v16;
      *((_DWORD *)v30 + 11) = v29;
      v30[6] = v32;
      *((_BYTE *)v30 + 56) = 0;
      *(_QWORD *)buf = v30 + 3;
      v70 = (std::__shared_weak_count *)v30;
      v33 = (std::__shared_weak_count *)operator new(0x60uLL);
      v33->__shared_owners_ = 0;
      v34 = (unint64_t *)&v33->__shared_owners_;
      v33->__shared_weak_owners_ = 0;
      v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECA8;
      v35 = *(std::__shared_weak_count_vtbl **)(v10 + 24);
      v33[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11F0;
      *(_OWORD *)&v33[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v33[3].__shared_owners_ = 0u;
      v33[1].__shared_owners_ = 0x100000001;
      LODWORD(v33[1].__shared_weak_owners_) = v28;
      HIDWORD(v33[1].__shared_weak_owners_) = v27;
      v33[2].__vftable = v35;
      LOBYTE(v33[2].__shared_owners_) = 0;
      a1 = v56;
      Espresso::compute_softmax_cpu(v31, (uint64_t)&v33[1], *(_DWORD *)(v56 + 300), *(_BYTE *)(v56 + 306));
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      v37 = v70;
      if (v70)
      {
        v38 = (unint64_t *)&v70->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      Espresso::compute_softmax_cpu(v8, v10, *(_DWORD *)(a1 + 300), *(_BYTE *)(a1 + 306));
    }
    v40 = *(uint64_t **)a4;
    if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 == 32)
    {
      v41 = *(uint64_t **)a3;
      if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 32)
      {
        buf[0] = *(_BYTE *)(a1 + 307);
        LOBYTE(v70) = *(_BYTE *)(a1 + 305);
        *(_DWORD *)&buf[4] = 1;
        v42 = v41 + 2;
        v43 = Espresso::compute_cross_entropy_cpu(v41, v40 + 2, v41 + 2, buf);
        (*(void (**)(_QWORD, float))(*(_QWORD *)*v42 + 32))(*v42, v43);
        v44 = *(_QWORD *)(*v42 + 160);
        v45 = *(std::__shared_weak_count **)(*v42 + 168);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          *(_DWORD *)(a1 + 308) = **(_DWORD **)(v44 + 24);
          v48 = (unint64_t *)&v45->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        else
        {
          *(_DWORD *)(a1 + 308) = **(_DWORD **)(v44 + 24);
        }
      }
    }
  }
  else
  {
    if ((v17 & 1) == 0)
    {
      if ((_DWORD)v14)
      {
        if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
          dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
        Espresso::softmax_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1EE219BFC;
      }
    }
    if (Espresso::softmax_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
    {
      Espresso::espresso_os_log_subsystem(v14, v12);
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v18, OS_LOG_TYPE_DEBUG, "softmax_kernel_cpu: Zero shaped input or output so skipping computation", buf, 2u);
      }

    }
  }
  v50 = v74;
  if (v74)
  {
    v51 = (unint64_t *)&v74->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v76;
  if (v76)
  {
    v54 = (unint64_t *)&v76->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_1917C40B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 120);
  _Unwind_Resume(a1);
}

float Espresso::compute_cross_entropy_cpu(uint64_t *a1, _QWORD *a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  float result;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  float *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  float v40;
  float v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[40];
  void *__p;
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;

  Espresso::abstract_blob_container::shape(v48, *a1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v51, (const Espresso::layer_shape *)v48, 0);
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
  if (!*a4 && v56 > 3)
  {
    if (v56 == 5)
    {
      v45 = v52 * (uint64_t)v51;
      v8 = v54 * (uint64_t)v55 * v53;
    }
    else
    {
      if (v56 != 4)
      {
        v44 = 0;
        v45 = 0;
        goto LABEL_13;
      }
      v45 = v51;
      v8 = v53 * (uint64_t)v54 * v52;
    }
    v44 = v8;
LABEL_13:
    v10 = *(int *)(*a1 + 12) * (uint64_t)*(int *)(*a1 + 8);
    goto LABEL_23;
  }
  switch(v56)
  {
    case 1u:
      v9 = 1;
      goto LABEL_20;
    case 2u:
      v9 = v51;
      goto LABEL_20;
    case 3u:
      v9 = v52 * (uint64_t)v51;
      goto LABEL_20;
    case 4u:
      v9 = v52 * (uint64_t)v51 * v53;
      goto LABEL_20;
    case 5u:
      v9 = v52 * (uint64_t)v51 * v53 * v54;
LABEL_20:
      v45 = v9;
      if (v56)
        goto LABEL_21;
      goto LABEL_15;
    default:
      v45 = 0;
      if (v56)
LABEL_21:
        v44 = *(&v51 + (int)v56 - 1);
      else
LABEL_15:
        v44 = 0;
      v10 = 1;
      break;
  }
LABEL_23:
  v47 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
  v11 = *(_QWORD *)(*a1 + 160);
  v12 = *(std::__shared_weak_count **)(*a1 + 168);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = *(_QWORD *)(v11 + 24);
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v15 = *(_QWORD *)(v11 + 24);
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  v18 = *(_QWORD *)(*a2 + 160);
  v19 = *(std::__shared_weak_count **)(*a2 + 168);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = *(_QWORD *)(v18 + 24);
    v23 = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    v22 = *(_QWORD *)(v18 + 24);
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 32))(*a3);
  v26 = *(_QWORD *)(*a3 + 160);
  v27 = *(std::__shared_weak_count **)(*a3 + 168);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = *(float **)(v26 + 24);
    v31 = (unint64_t *)&v27->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    v30 = *(float **)(v26 + 24);
  }
  v43 = a4;
  v33 = a4[8];
  if (a4[8])
    *v30 = 0.0;
  if (v45)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    do
    {
      v46 = v36;
      v37 = v34;
      v38 = v35;
      for (i = v47; i; --i)
      {
        v40 = *(float *)(v15 + 4 * (v38 + v47 * (int)llroundf(*(float *)(v22 + v37))));
        if (v40 < 1.1755e-38)
          v40 = 1.1755e-38;
        v41 = logf(v40);
        if (v33)
        {
          result = *v30 - v41;
          *v30 = result;
        }
        else
        {
          result = -v41;
          *(float *)((char *)v30 + v37) = result;
        }
        ++v38;
        v37 += 4;
      }
      v36 = v46 + 1;
      v35 += v44;
      v34 += 4 * v47;
    }
    while (v46 + 1 != v45);
  }
  if (v33)
  {
    v42 = *((_DWORD *)v43 + 1);
    if (v42)
    {
      if (v42 != 1)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("cross_entropy: only REDUCE_MODE_AVG and REDUCE_MODE_SUM are supported");
      result = *v30 / (float)(unint64_t)(v47 * v45);
      *v30 = result;
    }
  }
  return result;
}

void sub_1917C451C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BOOL4 v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *height;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  vImagePixelCount v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t *v64;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  _WORD *v103;
  uint64_t v104;
  int v105;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::runtime_error *exception;
  std::runtime_error *v124;
  std::string *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  int v139;
  _QWORD v140[3];
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  __int128 v144;
  __int128 v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  int v152;
  int32x4_t v153;
  int v154;
  void *__p;
  void *v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  __int128 v163;
  __int128 v164;
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v8
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v164 = 0uLL;
  }
  else
  {
    v15 = *(_QWORD *)(*v8 + 168);
    *(_QWORD *)&v164 = *(_QWORD *)(*v8 + 160);
    *((_QWORD *)&v164 + 1) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  v9 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v9
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v163 = 0uLL;
  }
  else
  {
    v18 = *(_QWORD *)(*v9 + 168);
    *(_QWORD *)&v163 = *(_QWORD *)(*v9 + 160);
    *((_QWORD *)&v163 + 1) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v152, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v157, (const Espresso::layer_shape *)&v152, 0);
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v152, **(_QWORD **)a3);
  v10 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v153)));
  if (v154 == -1)
    v11 = v153.i32[3] != 1;
  else
    v11 = v154 == 5;
  if (v153.i32[3])
    v11 = 0;
  if ((v10 & 1) == 0 && v152 >= 1 && !v11)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v146, (const Espresso::layer_shape *)&v152, 0);
    v12 = v162;
    if (*(_BYTE *)(a1 + 344) || v162 <= 3)
    {
      switch(v162)
      {
        case 1u:
          v13 = 1;
          if (!v162)
            goto LABEL_37;
          break;
        case 2u:
          v13 = v157;
          if (!v162)
            goto LABEL_37;
          break;
        case 3u:
          v13 = v158 * (uint64_t)v157;
          if (!v162)
            goto LABEL_37;
          break;
        case 4u:
          v13 = v158 * (uint64_t)v157 * v159;
          if (!v162)
            goto LABEL_37;
          break;
        case 5u:
          v13 = v158 * (uint64_t)v157 * v159 * v160;
          if (!v162)
            goto LABEL_37;
          break;
        default:
          v13 = 0;
          if (!v162)
            goto LABEL_37;
          break;
      }
      v14 = *(&v157 + (int)v162 - 1);
    }
    else if (v162 == 5)
    {
      v13 = v158 * (uint64_t)v157;
      v14 = v160 * (uint64_t)v161 * v159;
    }
    else if (v162 == 4)
    {
      v13 = v157;
      v14 = v159 * (uint64_t)v160 * v158;
    }
    else
    {
      v13 = 0;
LABEL_37:
      v14 = 0;
    }
    if (*(_BYTE *)(a1 + 344) || v151 <= 3)
    {
      switch(v151)
      {
        case 1u:
          v21 = 1;
          if (!v151)
            goto LABEL_58;
          break;
        case 2u:
          v21 = v146;
          if (!v151)
            goto LABEL_58;
          break;
        case 3u:
          v21 = v147 * (uint64_t)v146;
          if (!v151)
            goto LABEL_58;
          break;
        case 4u:
          v21 = v147 * (uint64_t)v146 * v148;
          if (!v151)
            goto LABEL_58;
          break;
        case 5u:
          v21 = v147 * (uint64_t)v146 * v148 * v149;
          if (!v151)
            goto LABEL_58;
          break;
        default:
          v21 = 0;
          if (!v151)
            goto LABEL_58;
          break;
      }
      v22 = *(&v146 + (int)v151 - 1);
    }
    else if (v151 == 5)
    {
      v21 = v147 * (uint64_t)v146;
      v22 = v149 * (uint64_t)v150 * v148;
    }
    else if (v151 == 4)
    {
      v21 = v146;
      v22 = v148 * (uint64_t)v149 * v147;
    }
    else
    {
      v21 = 0;
LABEL_58:
      v22 = 0;
    }
    v23 = *(_DWORD *)(a1 + 424);
    if (v23 >= 1)
    {
      v24 = *(_DWORD *)(a1 + 944);
      if (v24 && v23 > v24)
      {
        *(_DWORD *)(a1 + 944) = v24 + 1;
        goto LABEL_194;
      }
      *(_DWORD *)(a1 + 944) = 1;
    }
    if (!v12)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid rank");
    if (v13 != v21)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Mismatching batch size: %zu / %zu", v13, v21);
    v29 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
    v145 = 0uLL;
    v144 = 0uLL;
    v30 = v164;
    v31 = ((unint64_t)v164 | (unint64_t)v163) == 0;
    if (!((unint64_t)v164 | (unint64_t)v163))
    {
      v32 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), 0);
      v33 = 0uLL;
      if (v32)
      {
        v33 = v32[11];
        v34 = *((_QWORD *)v32 + 23);
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
      }
      v128 = v33;
      v145 = v33;
      v37 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)a4, *(_QWORD *)(a4 + 8), 0);
      v38 = 0uLL;
      if (v37)
      {
        v38 = v37[11];
        v39 = *((_QWORD *)v37 + 23);
        if (v39)
        {
          v40 = (unint64_t *)(v39 + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
      }
      v144 = v38;
      if (!(_QWORD)v128 || !(_QWORD)v38)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unexpected null blobs");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v128 + 8);
      v42 = *(_OWORD *)&src.data;
      src.data = 0;
      src.height = 0;
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      v164 = v42;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      height = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v47 = (unint64_t *)(src.height + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
          std::__shared_weak_count::__release_weak(height);
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v144 + 8);
      v49 = *(_OWORD *)&src.data;
      src.data = 0;
      src.height = 0;
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
      v163 = v49;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v54 = (unint64_t *)(src.height + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = 0;
      v57 = *(void **)(v163 + 24);
      v58 = *(int *)(v163 + 8);
      do
      {
        v58 *= *(int *)(v163 + 12 + v56);
        v56 += 4;
      }
      while (v56 != 12);
      src.data = *(void **)(v144 + 24);
      src.height = 1;
      src.width = v58;
      src.rowBytes = 2 * v58;
      dest.data = v57;
      dest.height = 1;
      dest.width = v58;
      dest.rowBytes = 4 * v58;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      v30 = v164;
    }
    LODWORD(v128) = v31;
    v59 = 0;
    v60 = *(_DWORD *)(v30 + 8);
    v61 = v30 + 12;
    do
    {
      v60 *= *(_DWORD *)(v61 + v59);
      v59 += 4;
    }
    while (v59 != 12);
    if (*(_DWORD *)(a1 + 412)
      && *(_DWORD *)(a1 + 416)
      && (Espresso::__launch_spmv_inner_product((_QWORD *)a1, (uint64_t)&v164, (uint64_t)&v163, v29 == 100, v25, v26, v27, v28, v127, v128, v129, v130, v131, *((uint64_t *)&v131 + 1), v132, *((uint64_t *)&v132 + 1), v133, *((uint64_t *)&v133 + 1), v134,
            *((__int128 **)&v134 + 1)) & 1) != 0)
    {
      goto LABEL_115;
    }
    v62 = *(_DWORD *)(a1 + 340);
    if (v62 == 5)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 592))(a1, a2, a3, a4, v21, v22, v14);
      goto LABEL_184;
    }
    v63 = *(_DWORD *)(a1 + 404);
    if (v63)
    {
      v64 = *(uint64_t **)(a1 + 928);
      v65 = *(_DWORD *)(a1 + 408);
      v66 = *(std::__shared_weak_count **)(a1 + 568);
      v142 = *(_QWORD *)(a1 + 560);
      v143 = v66;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = *(std::__shared_weak_count **)(a1 + 584);
      v140[2] = *(_QWORD *)(a1 + 576);
      v141 = v69;
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v72 = *(std::__shared_weak_count **)(a1 + 552);
      v140[0] = *(_QWORD *)(a1 + 544);
      v140[1] = v72;
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      Espresso::argmax_tree_approximator::__launch(v64, v63, v65, (uint64_t)&v142, (uint64_t)v140, (uint64_t)&v164, (uint64_t)&v163);
      if (v72)
      {
        v75 = (unint64_t *)&v72->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v77 = v141;
      if (v141)
      {
        v78 = (unint64_t *)&v141->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v80 = v143;
      if (v143)
      {
        v81 = (unint64_t *)&v143->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = *(_OWORD *)(a1 + 416);
      v137 = *(_OWORD *)(a1 + 400);
      v138 = v83;
      v139 = *(_DWORD *)(a1 + 432);
      v84 = *(_OWORD *)(a1 + 352);
      v133 = *(_OWORD *)(a1 + 336);
      v134 = v84;
      v85 = *(_OWORD *)(a1 + 384);
      v135 = *(_OWORD *)(a1 + 368);
      v136 = v85;
      v86 = *(_OWORD *)(a1 + 320);
      v131 = *(_OWORD *)(a1 + 304);
      v132 = v86;
      v130 = v164;
      if (*((_QWORD *)&v164 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      v89 = *(_QWORD *)(a1 + 544);
      v90 = *(std::__shared_weak_count **)(a1 + 552);
      *(_QWORD *)&v129 = v89;
      *((_QWORD *)&v129 + 1) = v90;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)&v131, (uint64_t *)&v130, v60, (uint64_t)&v129, v22, v21);
      if (v90)
      {
        v93 = (unint64_t *)&v90->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v95 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
      if (*((_QWORD *)&v130 + 1))
      {
        v96 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      goto LABEL_179;
    }
    if (v62)
    {
      v98 = *(_QWORD **)(a1 + 440);
      if (!v98 || !*v98 || !v98[4] && !v98[6] && !v98[8] && !v98[10])
      {
        v99 = v62 - 1;
        v100 = 67;
        switch(v99)
        {
          case 0:
            goto LABEL_173;
          case 1:
            (*(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 528))(a1, a2, &v164, &v163, v21, v22, v14);
            goto LABEL_179;
          case 2:
            v100 = 73;
            goto LABEL_173;
          case 3:
            v100 = 75;
LABEL_173:
            (*(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8 * v100))(a1, a2, &v164, &v163, v21, v22, v14);
            break;
          default:
            v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string((std::string *)&dest, *(_DWORD *)(a1 + 340));
            v125 = std::string::insert((std::string *)&dest, 0, "Quantization not supported ");
            v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
            src.width = v125->__r_.__value_.__r.__words[2];
            *(_OWORD *)&src.data = v126;
            v125->__r_.__value_.__l.__size_ = 0;
            v125->__r_.__value_.__r.__words[2] = 0;
            v125->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v124, (const std::string *)&src);
            __cxa_throw(v124, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
LABEL_115:
        (*(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 608))(a1, a2, &v164, &v163, v21, v22, v14, a4);
LABEL_179:
        if ((_DWORD)v128)
        {
          v101 = 0;
          v102 = *(int **)(v164 + 24);
          v103 = *(_WORD **)(v145 + 24);
          v104 = *(int *)(v164 + 8);
          do
          {
            v104 *= *(int *)(v164 + 12 + v101);
            v101 += 4;
          }
          while (v101 != 12);
          for (; v104; --v104)
          {
            v105 = *v102++;
            _S0 = v105;
            __asm { FCVT            H0, S0 }
            *v103++ = _S0;
          }
        }
        goto LABEL_184;
      }
    }
    else
    {
      if (*(_QWORD *)(a1 + 688) || *(_QWORD *)(a1 + 704))
      {
        (*(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 552))(a1, a2, &v164, &v163, v21, v22, v14);
        goto LABEL_178;
      }
      if (*(_QWORD *)(a1 + 512) || *(_QWORD *)(a1 + 528))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(a1, a2, v21, v22, v14, a4, a3);
LABEL_184:
        v111 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
        if (*((_QWORD *)&v144 + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        v114 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        if (*((_QWORD *)&v145 + 1))
        {
          v115 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        goto LABEL_194;
      }
    }
    (*(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 568))(a1, a2, &v164, &v163, v21, v22, v14, a4, v21);
LABEL_178:
    if (*(_DWORD *)(a1 + 336))
      goto LABEL_179;
    goto LABEL_115;
  }
LABEL_194:
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
}

void sub_1917C51DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  void *v54;
  int v55;
  uint64_t v56;

  if (*(char *)(v56 - 105) < 0)
    operator delete(*(void **)(v56 - 128));
  if (*(char *)(v56 - 137) < 0)
  {
    operator delete(*(void **)(v56 - 160));
    if ((v55 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
      if (__p)
      {
        a54 = (uint64_t)__p;
        operator delete(__p);
      }
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 192);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 176);
      _Unwind_Resume(a1);
    }
  }
  else if (!v55)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v54);
  goto LABEL_8;
}

_QWORD *Espresso::inner_product_kernel_cpu::share_weights(uint64_t a1, _QWORD **a2)
{
  _QWORD *result;
  uint64_t *v4;

  result = *a2;
  if (*a2)
  {
    if (result)
    {
      v4 = result;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v4[70], v4[71]);
      return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 544), v4[68], v4[69]);
    }
  }
  return result;
}

void Espresso::inner_product_kernel_cpu::clear_weights(Espresso::inner_product_kernel_cpu *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 35) = v2;
  *((_OWORD *)this + 18) = 0u;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 62);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 68);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 70);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 72);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  *((_OWORD *)this + 37) = 0u;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 76);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 80);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 82);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 84);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 86);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 96);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 98);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 100);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 103);
  *((_OWORD *)this + 51) = 0u;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 55);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 104);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 106);
}

float Espresso::inner_product_kernel_cpu::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  float result;

  if (*(_DWORD *)(a1 + 412))
  {
    Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
    v5 = *(_QWORD *)(a1 + 848);
    if (v5)
    {
      v6 = (unint64_t)*(int *)(v5 + 8) >> 1;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 832);
      if (v6)
        v6 = (unint64_t)*(int *)(v6 + 8) >> 2;
    }
    return ((double)*((int *)*a2 + 3) * (double)v6 + (double)*((int *)*a2 + 3) * (double)v6) * 0.000000001;
  }
  else
  {
    Espresso::generic_inner_product_kernel::estimated_compute_resources(a1, a2, a3);
  }
  return result;
}

uint64_t Espresso::inner_product_kernel_cpu::supports_weight_key(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;
  int v9;
  unsigned __int8 *v14;
  int v15;
  BOOL v16;
  int v17;
  BOOL v20;
  int v24;
  _BOOL4 v26;

  v3 = Espresso::generic_inner_product_kernel::supports_weight_key(a1, (unsigned __int8 **)a2);
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80) == 0)
  {
    switch(*(_BYTE *)(a2 + 23))
    {
      case 1:
        goto LABEL_3;
      case 5:
        goto LABEL_45;
      case 6:
        if ((*(_DWORD *)a2 != 1647861591 || *(_WORD *)(a2 + 4) != 29801)
          && (*(_DWORD *)a2 != 1852399447 || *(_WORD *)(a2 + 4) != 14452))
        {
          goto LABEL_55;
        }
        goto LABEL_98;
      case 7:
        if (*(_DWORD *)a2 == 1769299799 && *(_DWORD *)(a2 + 3) == 947154537)
          goto LABEL_98;
        v15 = *(_DWORD *)(a2 + 3);
        v16 = *(_DWORD *)a2 == 1852399447;
        v17 = 909210734;
        break;
      case 8:
        if (*(_QWORD *)a2 == 0x38746E695F745F57 || *(_QWORD *)a2 == 0x745F656C61637351)
          goto LABEL_98;
        goto LABEL_90;
      case 9:
        goto LABEL_44;
      default:
        goto LABEL_90;
    }
LABEL_86:
    if (v16 && v15 == v17)
      goto LABEL_98;
    goto LABEL_90;
  }
  v5 = *(_QWORD *)(a2 + 8);
  switch(v5)
  {
    case 6:
      v6 = *(unsigned __int8 **)a2;
      if (**(_DWORD **)a2 == 1647861591 && *(_WORD *)(*(_QWORD *)a2 + 4) == 29801)
        goto LABEL_98;
      v8 = *(_DWORD *)v6;
      v9 = *((unsigned __int16 *)v6 + 2);
      if (v8 == 1852399447 && v9 == 14452)
        goto LABEL_98;
      break;
    case 7:
      if (**(_DWORD **)a2 == 1769299799 && *(_DWORD *)(*(_QWORD *)a2 + 3) == 947154537)
        goto LABEL_98;
      if (**(_DWORD **)a2 == 1852399447 && *(_DWORD *)(*(_QWORD *)a2 + 3) == 909210734)
        goto LABEL_98;
      break;
    case 8:
      if (**(_QWORD **)a2 == 0x38746E695F745F57 || **(_QWORD **)a2 == 0x745F656C61637351)
        goto LABEL_98;
      if ((v4 & 0x80) == 0)
      {
        switch(*(_BYTE *)(a2 + 23))
        {
          case 1:
LABEL_3:
            if (*(_BYTE *)a2 == 81)
              goto LABEL_98;
            goto LABEL_90;
          case 5:
            goto LABEL_45;
          case 6:
LABEL_55:
            v20 = *(_DWORD *)a2 == 1633907537 && *(_WORD *)(a2 + 4) == 25964;
            v14 = (unsigned __int8 *)a2;
            if (!v20)
              goto LABEL_85;
            goto LABEL_98;
          case 9:
            goto LABEL_44;
          default:
            goto LABEL_90;
        }
      }
      break;
  }
  if (*(_QWORD *)(a2 + 8) == 1)
  {
    if (**(_BYTE **)a2 == 81)
      goto LABEL_98;
    if ((v4 & 0x80) == 0)
      goto LABEL_90;
  }
  if (*(_QWORD *)(a2 + 8) != 6)
    goto LABEL_74;
  if (**(_DWORD **)a2 == 1633907537 && *(_WORD *)(*(_QWORD *)a2 + 4) == 25964)
    goto LABEL_98;
  if ((v4 & 0x80) != 0)
  {
LABEL_74:
    if (*(_QWORD *)(a2 + 8) == 5)
    {
      if (**(_DWORD **)a2 == 1634296401 && *(_BYTE *)(*(_QWORD *)a2 + 4) == 115)
        goto LABEL_98;
      if ((v4 & 0x80) == 0)
        goto LABEL_90;
    }
    if (*(_QWORD *)(a2 + 8) != 9)
      goto LABEL_83;
    if (**(_QWORD **)a2 == 0x6D75735F776F7251 && *(_BYTE *)(*(_QWORD *)a2 + 8) == 115)
      goto LABEL_98;
    if ((v4 & 0x80) != 0)
    {
LABEL_83:
      if (*(_QWORD *)(a2 + 8) != 6)
        goto LABEL_90;
      v14 = *(unsigned __int8 **)a2;
    }
    else
    {
      v14 = (unsigned __int8 *)a2;
      if (v4 != 6)
        goto LABEL_90;
    }
LABEL_85:
    v24 = *(_DWORD *)v14;
    v15 = *((unsigned __int16 *)v14 + 2);
    v16 = v24 == 1701147252;
    v17 = 22367;
    goto LABEL_86;
  }
  if (v4 == 5)
  {
LABEL_45:
    v15 = *(unsigned __int8 *)(a2 + 4);
    v16 = *(_DWORD *)a2 == 1634296401;
    goto LABEL_46;
  }
  v14 = (unsigned __int8 *)a2;
  if (v4 == 6)
    goto LABEL_85;
  if (v4 == 9)
  {
LABEL_44:
    v15 = *(unsigned __int8 *)(a2 + 8);
    v16 = *(_QWORD *)a2 == 0x6D75735F776F7251;
LABEL_46:
    v17 = 115;
    goto LABEL_86;
  }
LABEL_90:
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "tree_b")
    && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "tree_map_to_index")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "tree_cluster_end")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "block_starts")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "w_f16_t")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "w_f32_t")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "block_cols")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "sparse_weights_f32"))
  {
    v26 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "sparse_weights_f16");
    return v26 | v3 | Espresso::weight_key_supported_by_conv_quantized_weights_helper((_BYTE *)a2, 1);
  }
LABEL_98:
  v26 = 1;
  return v26 | v3 | Espresso::weight_key_supported_by_conv_quantized_weights_helper((_BYTE *)a2, 1);
}

void Espresso::inner_product_kernel_cpu::transform_parameters_as_input(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  std::string *v32;
  int v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  std::string *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  _QWORD v55[2];
  _BYTE v56[20];
  int v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _DWORD v63[2];
  uint64_t v64;
  int v65;
  int v66;
  std::string __p;
  __int128 v68;
  std::string v69;
  void *v70;
  void *v71;

  v9 = 16 * a3;
  Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * a3) + 16), 1, &__p);
  v10 = *(_DWORD *)(a1 + 304);
  v11 = *(_DWORD *)(a1 + 308);
  if (*(_BYTE *)(a1 + 344))
  {
    v65 = 0;
    v64 = 0;
    v12 = 2;
  }
  else
  {
    LODWORD(v64) = *(_DWORD *)(a1 + 304);
    HIDWORD(v64) = v11;
    v12 = 4;
    v10 = 1;
    v11 = 1;
    v65 = 0;
  }
  v63[0] = v10;
  v63[1] = v11;
  v66 = v12;
  v62 = 0uLL;
  if (!*(_QWORD *)(a1 + 560))
  {
    if (*(_QWORD *)(a1 + 688))
      v52 = "inner product has fp16 weights; must use fp32 weights for training.";
    else
      v52 = "inner product layer is missing weights";
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v52);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 568);
  v60 = *(_QWORD *)(a1 + 560);
  v61 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v63, 0, (uint64_t)&v69);
  v16 = (char *)operator new(0x118uLL);
  *(_OWORD *)(v16 + 8) = 0u;
  *(_QWORD *)v16 = &off_1E2DC1868;
  *(_QWORD *)v56 = Espresso::blob_cpu::blob_cpu((uint64_t)(v16 + 24), (_QWORD *)(a2 + 16), 0);
  *(_QWORD *)&v56[8] = v16;
  v68 = 0u;
  (*(void (**)(_QWORD, std::string *, __int128 *))(*((_QWORD *)v16 + 3) + 16))(*(_QWORD *)v56, &v69, &v68);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v69);
  if (*(int *)(v60 + 12) * (uint64_t)*(int *)(v60 + 8) != v20)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("blob to copy has different total dim from required shape");
  memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)v56 + 160) + 24), *(const void **)(v60 + 16), 4 * v20);
  v21 = *(_OWORD *)v56;
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
    v21 = *(_OWORD *)v56;
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  v62 = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v61)
  {
    v25 = &v61->__shared_owners_;
    do
      v26 = __ldaxr((unint64_t *)v25);
    while (__stlxr(v26 - 1, (unint64_t *)v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  Espresso::add_layer_input(a2, a3, (unsigned __int8 *)&__p, (uint64_t *)&v62);
  v58 = 0;
  v59 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v58);
  v27 = v59;
  if (v59)
  {
    v28 = (unint64_t *)&v59->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(_QWORD *)(a5 + 8);
  if (v30 >= *(_QWORD *)(a5 + 16))
  {
    v32 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v30 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v30 = v31;
    }
    v32 = (std::string *)(v30 + 24);
    *(_QWORD *)(a5 + 8) = v30 + 24;
  }
  *(_QWORD *)(a5 + 8) = v32;
  if (*(_DWORD *)(a1 + 312) && *(_QWORD *)(a1 + 544))
  {
    Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + v9) + 16), 2, &v69);
    v33 = *(_DWORD *)(a1 + 304);
    if (*(_BYTE *)(a1 + 344))
    {
      *(_OWORD *)&v56[4] = 0uLL;
      v34 = 1;
    }
    else
    {
      *(_DWORD *)&v56[4] = *(_DWORD *)(a1 + 304);
      *(_QWORD *)&v56[8] = 0x100000001;
      *(_DWORD *)&v56[16] = 0;
      v34 = 4;
      v33 = 1;
    }
    *(_DWORD *)v56 = v33;
    v57 = v34;
    v35 = *(std::__shared_weak_count **)(a1 + 552);
    v55[0] = *(_QWORD *)(a1 + 544);
    v55[1] = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    Espresso::make_blob_container_and_copy_blob<std::shared_ptr<Espresso::blob<float,1>>>(&v68, (_QWORD *)(a2 + 16), (Espresso::layer_nd_shape *)v56, (uint64_t)v55);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    Espresso::add_layer_input(a2, a3, (unsigned __int8 *)&v69, (uint64_t *)&v68);
    v53 = 0;
    v54 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v53);
    v40 = v54;
    if (v54)
    {
      v41 = (unint64_t *)&v54->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = *(_QWORD *)(a5 + 8);
    if (v43 >= *(_QWORD *)(a5 + 16))
    {
      v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v69);
    }
    else
    {
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
      }
      else
      {
        v44 = *(_OWORD *)&v69.__r_.__value_.__l.__data_;
        *(_QWORD *)(v43 + 16) = *((_QWORD *)&v69.__r_.__value_.__l + 2);
        *(_OWORD *)v43 = v44;
      }
      v45 = (std::string *)(v43 + 24);
      *(_QWORD *)(a5 + 8) = v43 + 24;
    }
    *(_QWORD *)(a5 + 8) = v45;
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1917C5EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v33 + 8) = v34;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 144);
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::transform_transfer_global_parameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  _QWORD v55[2];
  std::string __p;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  _QWORD v61[2];
  std::string v62;

  v8 = 16 * a4;
  Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16 * a4) + 16), 2, &v62);
  if ((_QWORD *)(a2 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, &v62))
  {
    v9 = (_QWORD *)std::map<std::string,Espresso::blob_numerical_properties>::at(a2, &v62);
    v10 = (std::__shared_weak_count *)v9[1];
    v61[0] = *v9;
    v61[1] = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    Espresso::sync_copy_to_host(&__p, v61);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v15 = __p.__r_.__value_.__r.__words[0];
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v59, *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 16));
    v16 = 0;
    v17 = v59;
    v18 = *(int *)(v15 + 8);
    do
    {
      v18 *= *(int *)(v15 + 12 + v16);
      v16 += 4;
    }
    while (v16 != 12);
    memcpy(*(void **)(v59 + 16), *(const void **)(v15 + 24), 4 * v18);
    v57 = v17;
    v58 = v60;
    if (v60)
    {
      v19 = (unint64_t *)&v60->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v57);
    v21 = v58;
    if (v58)
    {
      v22 = (unint64_t *)&v58->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    Espresso::remove_layer_input(a3, a4, (unsigned __int8 *)&v62);
    v24 = v60;
    if (v60)
    {
      v25 = (unint64_t *)&v60->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + v8) + 16), 1, &__p);
  if ((_QWORD *)(a2 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, &__p))
  {
    v30 = (_QWORD *)std::map<std::string,Espresso::blob_numerical_properties>::at(a2, &__p);
    v31 = (std::__shared_weak_count *)v30[1];
    v55[0] = *v30;
    v55[1] = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    Espresso::sync_copy_to_host(&v59, v55);
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v36 = v59;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v53, *(_DWORD *)(v59 + 8), *(_DWORD *)(v59 + 12));
    v37 = 0;
    v38 = v53;
    v39 = *(int *)(v36 + 8);
    do
    {
      v39 *= *(int *)(v36 + 12 + v37);
      v37 += 4;
    }
    while (v37 != 12);
    memcpy(*(void **)(v53 + 16), *(const void **)(v36 + 24), 4 * v39);
    v51 = v38;
    v52 = v54;
    if (v54)
    {
      v40 = (unint64_t *)&v54->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v51);
    v42 = v52;
    if (v52)
    {
      v43 = (unint64_t *)&v52->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    Espresso::remove_layer_input(a3, a4, (unsigned __int8 *)&__p);
    v45 = v54;
    if (v54)
    {
      v46 = (unint64_t *)&v54->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v60;
    if (v60)
    {
      v49 = (unint64_t *)&v60->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
}

void sub_1917C63BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 65) < 0)
    operator delete(*(void **)(v25 - 88));
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::get_weights_blob(Espresso::inner_product_kernel_cpu *this@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  unint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;

  v4 = (_QWORD *)((char *)this + 8);
  if (a2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 408))(&v28);
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v29, v4, &v28);
    *a3 = v29;
    v29 = 0uLL;
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (!*((_QWORD *)&v28 + 1))
      return;
    v6 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    goto LABEL_22;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 416))(&v26);
  v8 = operator new(0x118uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DC1868;
  *(_QWORD *)&v28 = Espresso::blob_cpu::blob_cpu((uint64_t)(v8 + 3), v4);
  *((_QWORD *)&v28 + 1) = v8;
  v10 = v26;
  v9 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)v8[32];
  v8[31] = v10;
  v8[32] = v9;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = operator new(0x60uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E2DBECA8;
  v16[3] = &off_1E2DA11F0;
  v16[5] = 0;
  v16[6] = 0;
  v16[4] = 0;
  *((_BYTE *)v16 + 56) = 0;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *(_QWORD *)&v29 = v16 + 3;
  *((_QWORD *)&v29 + 1) = v16;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v8 + 23), &v29);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (_DWORD *)v28;
  v21 = *(_QWORD *)(v28 + 160);
  *(_QWORD *)&v22 = 0x100000001;
  *((_QWORD *)&v22 + 1) = 0x100000001;
  *(_OWORD *)(v21 + 8) = v22;
  v23 = v26;
  v24 = *(_DWORD *)(v26 + 8);
  *(_DWORD *)(v21 + 8) = v24;
  *(_DWORD *)(v21 + 12) = *(_DWORD *)(v23 + 12);
  v20[2] = v24;
  v20[3] = *(_DWORD *)(v21 + 12);
  v20[4] = *(_DWORD *)(v21 + 16);
  v20[5] = *(_DWORD *)(v21 + 20);
  v20[6] = 1;
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v23 + 16);
  *(_BYTE *)(v21 + 32) = 0;
  *a3 = v28;
  v28 = 0uLL;
  v5 = v27;
  if (v27)
  {
    v25 = (unint64_t *)&v27->__shared_owners_;
    do
      v7 = __ldaxr(v25);
    while (__stlxr(v7 - 1, v25));
LABEL_22:
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1917C66A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_kernel_cpu::num_weights_blob(Espresso::inner_product_kernel_cpu *this)
{
  if (*((_DWORD *)this + 78))
    return 2;
  else
    return 1;
}

_QWORD *Espresso::inner_product_kernel_cpu::get_f16_weights@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = this[86];
  if (v2)
  {
    v3 = this[87];
  }
  else
  {
    v2 = this[66];
    v3 = this[67];
  }
  *a2 = v2;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

void Espresso::inner_product_kernel_cpu::set_f16_biases(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  vImagePixelCount v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  vImage_Buffer dest;
  vImage_Buffer src;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 720), *a2, a2[1]);
  v6 = *a2;
  *(_DWORD *)(a1 + 312) = *a2 != 0;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v27, (int *)(v6 + 8));
  v7 = *a2;
  v8 = *(void **)(*a2 + 16);
  v9 = v27;
  v10 = *(void **)(v27 + 16);
  v11 = *(int *)(v7 + 8);
  src.data = v8;
  src.height = 1;
  src.width = v11;
  src.rowBytes = 2 * v11;
  dest.data = v10;
  dest.height = 1;
  dest.width = v11;
  dest.rowBytes = 4 * v11;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  v25 = v9;
  v26 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(std::__shared_weak_count **)(a3 + 8);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  Espresso::generic_inner_product_kernel::set_biases(a1, &v25);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1917C68B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_kernel_cpu::get_f16_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 728);
  *a2 = *(_QWORD *)(this + 720);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::inner_product_kernel_cpu::__launch_quantized_8bit_clipinput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const BNNSFilterParameters *a5, size_t a6, size_t a7)
{
  uint64_t v7;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  const BNNSFilterParameters *v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  int v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  float v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  const float *v70;
  float *v71;
  vDSP_Length v72;
  uint64_t j;
  uint64_t k;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::runtime_error *exception;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::string *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::string v89;
  std::string v90;
  float __B;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  _BYTE v96[140];
  __int128 v97;
  int v98;
  BNNSVectorDescriptor v99;
  _QWORD v100[5];

  v7 = *(_QWORD *)(a1 + 608);
  if (!v7)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel_cpu: Q not set");
  v13 = *(float **)(v7 + 16);
  v14 = v13[1];
  v15 = v14 * 0.0078125;
  v16 = 1.0;
  v17 = 1.0 / (float)(v14 * 0.0078125);
  if (!*(_DWORD *)(a1 + 336))
  {
    v49 = *v13;
    v50 = *(unsigned int *)(a1 + 308);
    *(_QWORD *)&v99.data_bias = 0;
    v100[0] = v50;
    v100[1] = 0x3F80000000020008;
    v100[2] = 0;
    v51 = *(unsigned int *)(a1 + 304);
    v99.size = v51;
    *(_QWORD *)&v99.data_type = 0x3F80000000010020;
    if (*(_DWORD *)(a1 + 312))
      v52 = *(_QWORD *)(*(_QWORD *)(a1 + 544) + 16);
    else
      v52 = 0;
    v53 = *(_DWORD *)(a1 + 316);
    v54 = 0.0;
    if (v53 != 1)
    {
      if (v53 == 2)
      {
        v55 = 0.25;
        goto LABEL_50;
      }
      v53 = 0;
    }
    v55 = 0.0;
LABEL_50:
    if (*(_DWORD *)(a1 + 320))
    {
      v56 = *(float *)(a1 + 324);
      v54 = *(float *)(a1 + 328);
      if (v56 == 1.0 && v54 == 1.0)
      {
        v53 = 4;
        v56 = v55;
        v54 = 0.0;
      }
      else
      {
        v53 = 5;
      }
    }
    else
    {
      v56 = v55;
    }
    if (*(_DWORD *)(a1 + 332))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Leaky relu not supported with quant weights");
    }
    else
    {
      v57 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 16);
      *(_QWORD *)&v96[32] = v50;
      *(_QWORD *)&v96[40] = v51;
      *(_QWORD *)&v96[48] = v57;
      *(_DWORD *)&v96[56] = 131080;
      *(_DWORD *)&v96[60] = 1065353216;
      *(_QWORD *)&v96[64] = 0;
      *(_QWORD *)&v96[72] = 0;
      *(_QWORD *)&v96[80] = v52;
      *(_DWORD *)&v96[88] = 65568;
      *(_DWORD *)&v96[92] = 1065353216;
      *(_QWORD *)&v96[96] = 0;
      *(_QWORD *)&v96[104] = 0;
      *(_DWORD *)&v96[112] = v53;
      *(float *)&v96[116] = v56;
      *(float *)&v96[120] = v54;
      *(_OWORD *)&v96[124] = 0u;
      v97 = 0u;
      v98 = 0;
      memset(v96, 0, 32);
      *(_DWORD *)v96 = 1;
      v58 = *(_QWORD *)(a1 + 8);
      if (v58 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v58 == &off_1E2D5E820)
        *(_QWORD *)&v96[8] = *(_QWORD *)(v58 + 168);
      v59 = Espresso::BNNSEngine::create_bnns_fully_connect((Espresso::BNNSEngine *)v100, &v99, (const BNNSVectorDescriptor *)&v96[32], (const BNNSFullyConnectedLayerParameters *)v96, a5);
      if (v59)
      {
        v60 = (void *)v59;
        std::allocate_shared[abi:ne180100]<Espresso::blob<char,4>,std::allocator<Espresso::blob<char,4>>,int (&)[4],void>(&v94, *(_QWORD *)a4 + 8);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v92, *(_QWORD *)a3 + 8);
        v61 = 0;
        v62 = v94;
        v63 = *(int *)(v94 + 8);
        do
        {
          v63 *= *(int *)(v94 + 12 + v61);
          v61 += 4;
        }
        while (v61 != 12);
        if (*(_DWORD *)(a1 + 340) != 2)
        {
          v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v82, "inconsistent state!");
          __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (v63)
        {
          for (i = 0; i != v63; ++i)
          {
            v65 = *(float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 4 * i);
            if (v65 < v49)
              v65 = v49;
            if (v65 > v14)
              v65 = v14;
            v66 = llroundf(v17 * v65);
            if (v66 <= -127)
              v66 = -127;
            if (v66 >= 127)
              LOBYTE(v66) = 127;
            *(_BYTE *)(*(_QWORD *)(v62 + 24) + i) = v66;
          }
        }
        v67 = v92;
        if (a5 == (const BNNSFilterParameters *)1)
          v68 = BNNSFilterApply(v60, *(const void **)(v62 + 24), *(void **)(v92 + 24));
        else
          v68 = BNNSFilterApplyBatch(v60, (size_t)a5, *(const void **)(v62 + 24), a7, *(void **)(v92 + 24), a6);
        v69 = v68;
        __B = v15 * v15;
        v70 = *(const float **)(v67 + 24);
        v71 = *(float **)(*(_QWORD *)a3 + 24);
        v72 = *(int *)(v67 + 8);
        if (*(_DWORD *)(a1 + 348))
        {
          for (j = 0; j != 12; j += 4)
            v72 *= *(int *)(v67 + 12 + j);
          vDSP_vsma(v70, 1, &__B, v71, 1, *(float **)(*(_QWORD *)a3 + 24), 1, v72);
        }
        else
        {
          for (k = 0; k != 12; k += 4)
            v72 *= *(int *)(v67 + 12 + k);
          vDSP_vsmul(v70, 1, &__B, v71, 1, v72);
        }
        if (v69)
        {
          v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v89, v69);
          v84 = std::string::insert(&v89, 0, "BNNS Error ");
          v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
          v90.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v85;
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v83, &v90);
          __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        BNNSFilterDestroy(v60);
        v75 = v93;
        if (v93)
        {
          p_shared_owners = (unint64_t *)&v93->__shared_owners_;
          do
            v77 = __ldaxr(p_shared_owners);
          while (__stlxr(v77 - 1, p_shared_owners));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = v95;
        if (v95)
        {
          v79 = (unint64_t *)&v95->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        return;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "BNNS Error");
    }
LABEL_97:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*(_DWORD *)(a1 + 428))
    v16 = 0.0;
  if (a5)
  {
    v18 = 0;
    v19 = roundf(v17);
    v20 = v16 * 0.5;
    v21 = *(unsigned int *)(a1 + 308);
    v22 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    v87 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v88 = *(_QWORD *)(a1 + 576);
    v23 = v15 * v15;
    v86 = 4 * a6;
    while (1)
    {
      v24 = (int)(float)(v20 + *(float *)(v87 + 4 * (_QWORD)v18)) & ~((int)(float)(v20
                                                                                   + *(float *)(v87 + 4 * (_QWORD)v18)) >> 31);
      if (v24 >= v21)
        v24 = *(_DWORD *)(a1 + 304) - 1;
      if (!v88)
        break;
      v25 = *(unsigned int *)(a1 + 304);
      if ((_DWORD)v25)
      {
        v26 = 0;
        v27 = (char *)(*(_QWORD *)(v88 + 16) + v24);
        v28 = *(_QWORD *)(a1 + 544);
        v29 = *(_DWORD *)(a1 + 316);
        v30 = 4 * v25;
        while (1)
        {
          v31 = v19 * (float)*v27;
          *(float *)(v22 + v26) = v31;
          if (v28)
          {
            v31 = v31 + *(float *)(*(_QWORD *)(v28 + 16) + v26);
            *(float *)(v22 + v26) = v31;
          }
          v32 = v23 * v31;
          *(float *)(v22 + v26) = v32;
          if (v29)
            break;
          if (*(_DWORD *)(a1 + 320))
          {
            v34 = *(float *)(a1 + 324);
            v33 = v34 * tanhf(v32 * *(float *)(a1 + 328));
            goto LABEL_18;
          }
          if (*(_DWORD *)(a1 + 332))
            goto LABEL_22;
LABEL_19:
          v27 += v21;
          v26 += 4;
          if (v30 == v26)
            goto LABEL_40;
        }
        v33 = fmaxf(v32, 0.0);
LABEL_18:
        *(float *)(v22 + v26) = v33;
        goto LABEL_19;
      }
LABEL_40:
      v18 = (const BNNSFilterParameters *)((char *)v18 + 1);
      v22 += v86;
      if (v18 == a5)
        return;
    }
    v35 = *(_QWORD *)(a1 + 896);
    if (!v35)
      goto LABEL_40;
    v36 = *(_QWORD *)(a1 + 624);
    v37 = v36 ? *(float *)(*(_QWORD *)(v36 + 16) + 4 * v24) : 1.0;
    v38 = *(unsigned int *)(a1 + 304);
    if (!(_DWORD)v38)
      goto LABEL_40;
    v39 = 0;
    v40 = *(_QWORD *)(v35 + 16) + (v38 * v24);
    v41 = v23 * v37;
    v42 = *(_QWORD *)(a1 + 544);
    v43 = *(_DWORD *)(a1 + 316);
    while (1)
    {
      v44 = v19 * (float)*(char *)(v40 + v39);
      *(float *)(v22 + 4 * v39) = v44;
      if (v42)
      {
        v44 = v44 + *(float *)(*(_QWORD *)(v42 + 16) + 4 * v39);
        *(float *)(v22 + 4 * v39) = v44;
      }
      v45 = v41 * v44;
      *(float *)(v22 + 4 * v39) = v45;
      if (v43)
        break;
      if (*(_DWORD *)(a1 + 320))
      {
        v47 = *(float *)(a1 + 324);
        v46 = v47 * tanhf(v45 * *(float *)(a1 + 328));
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 332))
      {
LABEL_22:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported activation fn with quantized weights and lookup");
        goto LABEL_97;
      }
LABEL_36:
      if (v38 == ++v39)
        goto LABEL_40;
    }
    v46 = fmaxf(v45, 0.0);
LABEL_35:
    *(float *)(v22 + 4 * v39) = v46;
    goto LABEL_36;
  }
}

void sub_1917C6FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  int v28;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void Espresso::inner_product_kernel_cpu::__launch_quantized_8bit(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, vDSP_Length __N)
{
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  vDSP_Length v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  const float *v42;
  std::runtime_error *exception;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 __C;

  if (*(_DWORD *)(a1 + 336))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_43;
  }
  if (!*(_QWORD *)(a1 + 640))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQscale");
    goto LABEL_43;
  }
  if (!*(_QWORD *)(a1 + 656))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQbias");
LABEL_43:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = (_QWORD *)(a1 + 736);
  v13 = *(_QWORD *)(a1 + 736);
  if (!v13)
    goto LABEL_12;
  if (*(_DWORD *)(v13 + 8) != *(_DWORD *)(a1 + 308))
  {
    __C = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 736, &__C);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&__C + 1);
    if (*((_QWORD *)&__C + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (!*v12)
    {
LABEL_12:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__C, *(_DWORD *)(a1 + 308), 1, 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 736, &__C);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&__C + 1);
      if (*((_QWORD *)&__C + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  v20 = a1 + 752;
  v21 = *(_QWORD *)(a1 + 752);
  if (!v21)
    goto LABEL_25;
  if (*(_DWORD *)(v21 + 8) != a5)
  {
    __C = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 752, &__C);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&__C + 1);
    if (*((_QWORD *)&__C + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (!*(_QWORD *)v20)
    {
LABEL_25:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__C, a5, 1, 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 752, &__C);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&__C + 1);
      if (*((_QWORD *)&__C + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }
  v28 = 4 * __N;
  if (a5)
  {
    v29 = 0;
    v30 = 0;
    v31 = a5;
    do
    {
      vDSP_sve((const float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + v29), 1, (float *)(*(_QWORD *)(*(_QWORD *)v20 + 16) + v30), __N);
      v30 += 4;
      v29 += v28;
      --v31;
    }
    while (v31);
  }
  v44 = a4;
  v32 = a5;
  if (*(_DWORD *)(a1 + 304))
  {
    v46 = 0;
    v33 = 0;
    v34 = 4 * a6;
    do
    {
      v35 = *(float **)(*(_QWORD *)(a1 + 736) + 16);
      v45 = v33;
      vDSP_vfltu8((const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 16) + (*(_DWORD *)(a1 + 308) * v33)), 1, v35, 1, *(unsigned int *)(a1 + 308));
      if (v32)
      {
        v36 = 0;
        v37 = 0;
        v38 = v46;
        v39 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 640) + 16) + 4 * v45);
        v40 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 656) + 16) + 4 * v45);
        do
        {
          v41 = *(_QWORD *)(*(_QWORD *)a3 + 24);
          v42 = (const float *)(*(_QWORD *)(*(_QWORD *)v44 + 24) + v36);
          LODWORD(__C) = 0;
          vDSP_dotpr(v42, 1, v35, 1, (float *)&__C, *(unsigned int *)(a1 + 308));
          *(float *)(v41 + v38) = (float)(v40 * *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 752) + 16) + 4 * v37))
                                + (float)(*(float *)&__C * v39);
          v32 = a5;
          ++v37;
          v36 += v28;
          v38 += v34;
        }
        while (a5 != v37);
      }
      v33 = v45 + 1;
      v46 += 4;
    }
    while (v45 + 1 < (unint64_t)*(unsigned int *)(a1 + 304));
  }
}

void sub_1917C745C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__launch_f16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  const float *v7;
  float *__C;
  uint64_t v9;
  void *v10;
  vImagePixelCount v11;
  float v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  vImage_Buffer dest;
  vImage_Buffer src;

  v5 = a5;
  if (*(_DWORD *)(a1 + 336))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 544))(a1, a2, a3, a4, a5);
  }
  else
  {
    v7 = *(const float **)(*(_QWORD *)a4 + 24);
    __C = *(float **)(*(_QWORD *)a3 + 24);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v16, (int *)(*(_QWORD *)(a1 + 688) + 8));
    v9 = v16;
    v10 = *(void **)(v16 + 16);
    v11 = *(int *)(v16 + 12) * (uint64_t)*(int *)(v16 + 8);
    src.data = *(void **)(*(_QWORD *)(a1 + 688) + 16);
    src.height = 1;
    src.width = v11;
    src.rowBytes = 2 * v11;
    dest.data = v10;
    dest.height = 1;
    dest.width = v11;
    dest.rowBytes = 4 * v11;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v12 = 0.0;
    if (*(_DWORD *)(a1 + 348))
      v12 = 1.0;
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v5, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), 1.0, v7, *(_DWORD *)(a1 + 308), *(const float **)(v9 + 16), *(_DWORD *)(a1 + 308), v12, __C, *(_DWORD *)(a1 + 304));
    v13 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_1917C75C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__launch_transposed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const float **v21;
  const float *__B;
  float v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v13 = *(_QWORD **)a7;
  if (*(_QWORD *)(a7 + 8) == *(_QWORD *)a7
    || !*v13
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13))
  {
    v40 = 0;
    v41 = 0;
  }
  else
  {
    v30 = *(std::__shared_weak_count **)(*v13 + 168);
    v40 = *(_QWORD *)(*v13 + 160);
    v41 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
  }
  v14 = (_QWORD *)*a6;
  if (a6[1] == *a6 || !*v14 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v14 + 32))(*v14))
  {
    v15 = 0;
    v38 = 0;
    v39 = 0;
  }
  else
  {
    v33 = *v14;
    v15 = *(_QWORD *)(*v14 + 160);
    v34 = *(std::__shared_weak_count **)(v33 + 168);
    v38 = v15;
    v39 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
  }
  if (!v40)
  {
    v37 = "inner_product_kernel_cpu: destination data does not exist";
    goto LABEL_45;
  }
  if (!v15)
  {
    v37 = "inner_product_kernel_cpu: src data does not exist";
    goto LABEL_45;
  }
  v16 = *(_QWORD *)(a1 + 512);
  if (*(_DWORD *)(a1 + 336))
  {
    v17 = v16 == 0;
    v18 = 576;
    if (v17)
      v18 = 544;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + v18))(a1, a2, &v40, &v38, a3, a4, a5);
    goto LABEL_23;
  }
  v19 = a6[1];
  v20 = v19 - *a6;
  if (!v16 && v20 == 16)
  {
    v37 = "inner_product_kernel_cpu: FP32 transposed weights expected but not found";
LABEL_45:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v37);
  }
  if (v20 < 0x11)
    v21 = (const float **)(v16 + 16);
  else
    v21 = (const float **)(*((_QWORD *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a6, v19, 1) + 20) + 24);
  __B = *v21;
  v23 = 0.0;
  if (*(_DWORD *)(a1 + 348))
    v23 = 1.0;
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, a3, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), 1.0, *(const float **)(v15 + 24), *(_DWORD *)(a1 + 308), __B, *(_DWORD *)(a1 + 304), v23, *(float **)(v40 + 24), *(_DWORD *)(a1 + 304));
LABEL_23:
  v24 = v39;
  if (v39)
  {
    v25 = (unint64_t *)&v39->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v41;
  if (v41)
  {
    v28 = (unint64_t *)&v41->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1917C7840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__launch_non_quantized(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t *a8, double a9, double a10, float a11, uint64_t a12)
{
  int v15;
  uint64_t *v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  const float **v26;
  const float *__B;
  float v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::runtime_error *exception;
  _QWORD v43[2];
  __int128 v44;

  v15 = a5;
  v20 = *(uint64_t **)(a1 + 440);
  if (v20 && *v20 && (v20[4] || v20[6] || v20[8] || v20[10]) && !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76))
  {
    v32 = *(_QWORD *)(a1 + 560);
    v21 = v32 == 0;
    if (!v32)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(&v44, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 560, &v44);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v32 = *(_QWORD *)(a1 + 560);
      v20 = *(uint64_t **)(a1 + 440);
    }
    v36 = *(std::__shared_weak_count **)(a1 + 568);
    v43[0] = v32;
    v43[1] = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
    Espresso::quantized_weights_helper::dequantize_to_float32_2d(v20, (uint64_t)v43, a9, a10, a11);
    if (v36)
    {
      v39 = (unint64_t *)&v36->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v15 = a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_QWORD *)(a1 + 560);
  v23 = a8[1];
  v24 = v23 - *a8;
  if (v22)
    v25 = 0;
  else
    v25 = v24 == 16;
  if (v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "FC weights not set");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v24 < 0x11)
    v26 = (const float **)(v22 + 16);
  else
    v26 = (const float **)(*((_QWORD *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a8, v23, 1) + 20) + 24);
  if (*(_DWORD *)(a1 + 336))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 576))(a1, a2, a3, a4, a12, a6, a7);
  }
  else
  {
    __B = *v26;
    v28 = 0.0;
    if (*(_DWORD *)(a1 + 348))
      v28 = 1.0;
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v15, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), 1.0, *(const float **)(*(_QWORD *)a4 + 24), *(_DWORD *)(a1 + 308), __B, *(_DWORD *)(a1 + 308), v28, *(float **)(*(_QWORD *)a3 + 24), *(_DWORD *)(a1 + 304));
    if (v21)
    {
      v44 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 560, &v44);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
  }
}

void sub_1917C7B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__launch_non_quantized_is_lookup(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t i;
  unsigned int *v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  int v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  float v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  std::__shared_weak_count *v51;
  _OWORD v52[8];
  int v53;

  v8 = *a3;
  v9 = *(_DWORD *)(*a3 + 8);
  for (i = 12; i != 24; i += 4)
    v9 *= *(_DWORD *)(v8 + i);
  v11 = (unsigned int *)(a1 + 304);
  v12 = 0.0;
  if (*(_DWORD *)(a1 + 428))
    v12 = 1.0;
  if (a5)
  {
    v13 = 0;
    v14 = v12 * 0.5;
    v15 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v16 = *(unsigned int *)(a1 + 308);
    v17 = *(_QWORD *)(v8 + 24);
    v18 = *(_QWORD *)(a1 + 560);
    do
    {
      v19 = (int)(float)(v14 + *(float *)(v15 + 4 * v13));
      if (v16 <= v19)
        v19 = v16 - 1;
      v20 = v19 & ~(v19 >> 31);
      if (v18)
      {
        v21 = *v11;
        if ((_DWORD)v21)
        {
          v22 = 0;
          v23 = (float *)(*(_QWORD *)(v18 + 16) + 4 * v20);
          v24 = *(_DWORD *)(a1 + 312);
          v25 = 4 * v21;
          do
          {
            v26 = *v23;
            if (v24)
              v26 = v26 + *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 16) + v22);
            *(float *)(v17 + v22) = v26;
            v22 += 4;
            v23 += v16;
          }
          while (v25 != v22);
        }
      }
      else
      {
        v27 = *(_QWORD *)(a1 + 512);
        if (!v27)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel_cpu: FP32 transposed weights not set");
        v28 = *v11;
        if ((_DWORD)v28)
        {
          v29 = 0;
          v30 = *(_QWORD *)(v27 + 16) + 4 * v28 * v20;
          v31 = *(_DWORD *)(a1 + 312);
          v32 = 4 * v28;
          do
          {
            v33 = *(float *)(v30 + v29);
            *(float *)(v17 + v29) = v33;
            if (v31)
              *(float *)(v17 + v29) = v33 + *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 16) + v29);
            v29 += 4;
          }
          while (v32 != v29);
        }
      }
      ++v13;
      v17 += 4 * a6;
    }
    while (v13 != a5);
  }
  v34 = *(_OWORD *)(a1 + 416);
  v52[6] = *(_OWORD *)(a1 + 400);
  v52[7] = v34;
  v53 = *(_DWORD *)(a1 + 432);
  v35 = *(_OWORD *)(a1 + 352);
  v52[2] = *(_OWORD *)(a1 + 336);
  v52[3] = v35;
  v36 = *(_OWORD *)(a1 + 384);
  v52[4] = *(_OWORD *)(a1 + 368);
  v52[5] = v36;
  v37 = *(_OWORD *)(a1 + 320);
  v52[0] = *(_OWORD *)v11;
  v52[1] = v37;
  v38 = (std::__shared_weak_count *)a3[1];
  v50 = v8;
  v51 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  v41 = *(std::__shared_weak_count **)(a1 + 552);
  v49[0] = *(_QWORD *)(a1 + 544);
  v49[1] = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)v52, &v50, v9, (uint64_t)v49, a6, a5);
  if (v41)
  {
    v44 = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v46 = v51;
  if (v51)
  {
    v47 = (unint64_t *)&v51->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1917C7DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_kernel_cpu::__launch_quantized_int8_int8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, size_t a5, size_t a6, size_t a7)
{
  uint64_t v8;
  uint64_t v14;
  size_t v15;
  uint64_t bnns_filter;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float *v30;
  float *v31;
  uint64_t v32;
  float *v33;
  unsigned int v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::runtime_error *exception;
  __int128 v54;

  if (*(_DWORD *)(a1 + 336))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_56;
  }
  if (!*(_QWORD *)(a1 + 640))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQscale");
    goto LABEL_56;
  }
  if (!*(_QWORD *)(a1 + 656))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQbias");
    goto LABEL_56;
  }
  if (!*(_QWORD *)(a1 + 672))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQrow_sums");
    goto LABEL_56;
  }
  v8 = *(_QWORD *)(a1 + 576);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: weights_8bit");
    goto LABEL_56;
  }
  if (!*(_QWORD *)(a1 + 912))
  {
    v14 = *(_QWORD *)(a1 + 8);
    if (v14 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v14 == &off_1E2D5E820)
      v15 = *(_QWORD *)(v14 + 168);
    else
      v15 = 0;
    bnns_filter = Espresso::inner_product_kernel_cpu::create_bnns_filter((Espresso::inner_product_kernel_cpu *)*(unsigned int *)(a1 + 308), (const float *)*(unsigned int *)(a1 + 304), *(const void **)(v8 + 16), 0, (const BNNSFilterParameters *)0x20008, BNNSDataTypeInt8, v15);
    *(_QWORD *)(a1 + 912) = bnns_filter;
    if (!bnns_filter)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "BNNS Error");
LABEL_56:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v17 = 0;
  v18 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  do
  {
    v18 *= *(_DWORD *)(*(_QWORD *)a4 + 12 + v17);
    v17 += 4;
  }
  while (v17 != 12);
  if (!*(_QWORD *)(a1 + 752))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 752, &v54);
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 768, &v54);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 784, &v54);
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v54, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 800, &v54);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  if (a5)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      vDSP_sve((const float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 4 * (*(_DWORD *)(a1 + 308) * v20++)), 1, (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 752) + 16) + v19), *(unsigned int *)(a1 + 308));
      v19 += 4;
    }
    while (a5 != v20);
  }
  Espresso::range_quantizer<signed char>::quantize_chunks(*(_QWORD *)(*(_QWORD *)a4 + 24), v18, *(_DWORD *)(a1 + 308), *(_QWORD *)(*(_QWORD *)(a1 + 768) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 784) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 800) + 16));
  v21 = *(void **)(a1 + 912);
  if (a5 == 1)
    result = BNNSFilterApply(v21, *(const void **)(*(_QWORD *)(a1 + 800) + 16), *(void **)(*a3 + 24));
  else
    result = BNNSFilterApplyBatch(v21, a5, *(const void **)(*(_QWORD *)(a1 + 800) + 16), a7, *(void **)(*a3 + 24), a6);
  if ((_DWORD)result == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BNNS Error");
    goto LABEL_56;
  }
  if (a6)
  {
    v23 = 0;
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 768) + 16);
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 784) + 16);
    v26 = *(unsigned int *)(a1 + 304);
    v27 = *a3;
    do
    {
      if ((_DWORD)v26)
      {
        v28 = *(float *)(v24 + 4 * v23);
        v29 = *(float *)(v25 + 4 * v23);
        v30 = *(float **)(*(_QWORD *)(a1 + 640) + 16);
        v31 = *(float **)(*(_QWORD *)(a1 + 656) + 16);
        v32 = *(_QWORD *)(v27 + 24);
        v33 = *(float **)(*(_QWORD *)(a1 + 672) + 16);
        v34 = *(_DWORD *)(a1 + 308) * v23;
        result = v26;
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 752) + 16);
        do
        {
          v36 = *v30++;
          v37 = v36;
          v38 = *v31++;
          v39 = v38;
          v40 = *v33++;
          *(float *)(v32 + 4 * v34) = (float)((float)((float)(v29 * v37) * v40)
                                              + (float)((float)(v28 * v37) * *(float *)(v32 + 4 * v34)))
                                      + (float)(v39 * *(float *)(v35 + 4 * v23));
          ++v34;
          --result;
        }
        while (result);
      }
      ++v23;
    }
    while (v23 != a6);
  }
  return result;
}

void sub_1917C8294(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__launch_dynamic_quantized_s8_s8()
{
  Espresso::throw_exception_selector<Espresso::generic_error>("INNER_PRODUCT_DYNAMIC_QUANTIZATION_S8_S8 requires BNNS");
}

uint64_t Espresso::inner_product_kernel_cpu::__launch_quantized_int16_int16(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, size_t a5, size_t a6, size_t a7)
{
  uint64_t v8;
  uint64_t v14;
  size_t v15;
  uint64_t bnns_filter;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float *v30;
  float *v31;
  uint64_t v32;
  float *v33;
  unsigned int v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::runtime_error *exception;
  __int128 v54;

  if (*(_DWORD *)(a1 + 336))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_56;
  }
  if (!*(_QWORD *)(a1 + 640))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQscale");
    goto LABEL_56;
  }
  if (!*(_QWORD *)(a1 + 656))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQbias");
    goto LABEL_56;
  }
  if (!*(_QWORD *)(a1 + 672))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQrow_sums");
    goto LABEL_56;
  }
  v8 = *(_QWORD *)(a1 + 592);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: weights_int16");
    goto LABEL_56;
  }
  if (!*(_QWORD *)(a1 + 912))
  {
    v14 = *(_QWORD *)(a1 + 8);
    if (v14 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v14 == &off_1E2D5E820)
      v15 = *(_QWORD *)(v14 + 168);
    else
      v15 = 0;
    bnns_filter = Espresso::inner_product_kernel_cpu::create_bnns_filter((Espresso::inner_product_kernel_cpu *)*(unsigned int *)(a1 + 308), (const float *)*(unsigned int *)(a1 + 304), *(const void **)(v8 + 16), 0, (const BNNSFilterParameters *)0x20010, BNNSDataTypeInt16, v15);
    *(_QWORD *)(a1 + 912) = bnns_filter;
    if (!bnns_filter)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "BNNS Error");
LABEL_56:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v17 = 0;
  v18 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  do
  {
    v18 *= *(_DWORD *)(*(_QWORD *)a4 + 12 + v17);
    v17 += 4;
  }
  while (v17 != 12);
  if (!*(_QWORD *)(a1 + 752))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 752, &v54);
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 768, &v54);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 784, &v54);
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<short,1>,std::allocator<Espresso::blob<short,1>>,int &,int &,int &,int &,void>(&v54, v18, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 816, &v54);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  if (a5)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      vDSP_sve((const float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 4 * (*(_DWORD *)(a1 + 308) * v20++)), 1, (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 752) + 16) + v19), *(unsigned int *)(a1 + 308));
      v19 += 4;
    }
    while (a5 != v20);
  }
  Espresso::range_quantizer<short>::quantize_chunks(*(_QWORD *)(*(_QWORD *)a4 + 24), v18, *(_DWORD *)(a1 + 308), *(_QWORD *)(*(_QWORD *)(a1 + 768) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 784) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 816) + 16));
  v21 = *(void **)(a1 + 912);
  if (a5 == 1)
    result = BNNSFilterApply(v21, *(const void **)(*(_QWORD *)(a1 + 816) + 16), *(void **)(*a3 + 24));
  else
    result = BNNSFilterApplyBatch(v21, a5, *(const void **)(*(_QWORD *)(a1 + 816) + 16), a7, *(void **)(*a3 + 24), a6);
  if ((_DWORD)result == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BNNS Error");
    goto LABEL_56;
  }
  if (a5)
  {
    v23 = 0;
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 768) + 16);
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 784) + 16);
    v26 = *(unsigned int *)(a1 + 304);
    v27 = *a3;
    do
    {
      if ((_DWORD)v26)
      {
        v28 = *(float *)(v24 + 4 * v23);
        v29 = *(float *)(v25 + 4 * v23);
        v30 = *(float **)(*(_QWORD *)(a1 + 640) + 16);
        v31 = *(float **)(*(_QWORD *)(a1 + 656) + 16);
        v32 = *(_QWORD *)(v27 + 24);
        v33 = *(float **)(*(_QWORD *)(a1 + 672) + 16);
        v34 = *(_DWORD *)(a1 + 308) * v23;
        result = v26;
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 752) + 16);
        do
        {
          v36 = *v30++;
          v37 = v36;
          v38 = *v31++;
          v39 = v38;
          v40 = *v33++;
          *(float *)(v32 + 4 * v34) = (float)((float)((float)(v29 * v37) * v40)
                                              + (float)((float)(v28 * v37) * *(float *)(v32 + 4 * v34)))
                                      + (float)(v39 * *(float *)(v35 + 4 * v23));
          ++v34;
          --result;
        }
        while (result);
      }
      ++v23;
    }
    while (v23 != a5);
  }
  return result;
}

void sub_1917C8780(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__launch_bias_nonlinearity(uint64_t a1, int a2, uint64_t *a3, int a4, uint64_t a5, vDSP_Length __N, uint64_t a7, uint64_t *a8)
{
  uint64_t v12;
  int v13;
  uint64_t i;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float **v19;
  uint64_t v20;
  const float *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  std::__shared_weak_count *v41;
  _OWORD v42[8];
  int v43;

  v12 = *a3;
  v13 = *(_DWORD *)(*a3 + 8);
  for (i = 12; i != 24; i += 4)
    v13 *= *(_DWORD *)(v12 + i);
  v15 = (_OWORD *)(a1 + 304);
  if (*(_DWORD *)(a1 + 312) && (v16 = *(_QWORD *)(a1 + 544)) != 0)
  {
    v17 = *a8;
    v18 = a8[1];
    if ((unint64_t)(v18 - *a8) < 0x21)
    {
      v19 = (const float **)(v16 + 16);
      if (!a5)
        goto LABEL_13;
      goto LABEL_10;
    }
  }
  else
  {
    v17 = *a8;
    v18 = a8[1];
    if ((unint64_t)(v18 - *a8) <= 0x20)
      goto LABEL_13;
  }
  v19 = (const float **)(*((_QWORD *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(v17, v18, 2) + 20) + 24);
  if (!a5)
    goto LABEL_13;
LABEL_10:
  v20 = 0;
  v21 = *v19;
  v22 = a5;
  do
  {
    vDSP_vadd(v21, 1, (const float *)(*(_QWORD *)(*a3 + 24) + v20), 1, (float *)(*(_QWORD *)(*a3 + 24) + v20), 1, __N);
    v20 += 4 * __N;
    --v22;
  }
  while (v22);
  v12 = *a3;
LABEL_13:
  v23 = *(_OWORD *)(a1 + 416);
  v42[6] = *(_OWORD *)(a1 + 400);
  v42[7] = v23;
  v43 = *(_DWORD *)(a1 + 432);
  v24 = *(_OWORD *)(a1 + 352);
  v42[2] = *(_OWORD *)(a1 + 336);
  v42[3] = v24;
  v25 = *(_OWORD *)(a1 + 384);
  v42[4] = *(_OWORD *)(a1 + 368);
  v42[5] = v25;
  v26 = *(_OWORD *)(a1 + 320);
  v42[0] = *v15;
  v42[1] = v26;
  v27 = (std::__shared_weak_count *)a3[1];
  v40 = v12;
  v41 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  v30 = *(_QWORD *)(a1 + 544);
  v31 = *(std::__shared_weak_count **)(a1 + 552);
  v39[0] = v30;
  v39[1] = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)v42, &v40, v13, (uint64_t)v39, __N, a5);
  if (v31)
  {
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v36 = v41;
  if (v41)
  {
    v37 = (unint64_t *)&v41->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1917C89C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_kernel_cpu::create_bnns_filter(Espresso::inner_product_kernel_cpu *this, const float *a2, const void *a3, void *a4, const BNNSFilterParameters *a5, BNNSDataType a6, size_t a7)
{
  BNNSFullyConnectedLayerParameters v8;
  __int128 v9;
  __int128 v10;
  BNNSVectorDescriptor v11;
  Espresso::inner_product_kernel_cpu *v12;
  int v13;
  int v14;
  uint64_t v15;

  v15 = 0;
  *(_QWORD *)&v11.data_bias = 0;
  v12 = this;
  v13 = (int)a5;
  v14 = 1065353216;
  v11.size = (size_t)a2;
  *(_QWORD *)&v11.data_type = 0x3F80000000010020;
  *(_QWORD *)&v8.weights.data_bias = this;
  v8.weights.data_table = a2;
  v8.bias.data = a3;
  v8.bias.data_type = a6;
  v8.bias.data_scale = 1.0;
  *(_QWORD *)&v8.bias.data_bias = 0;
  v8.bias.data_table = 0;
  *(_QWORD *)&v8.activation.function = a4;
  *(_QWORD *)&v8.activation.beta = 0x3F80000000010020;
  memset(&v8.activation.ioffset, 0, 32);
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)&v8.weights.data = 0u;
  v8.in_size = 1;
  v8.out_size = a7;
  return Espresso::BNNSEngine::create_bnns_fully_connect((Espresso::BNNSEngine *)&v12, &v11, (const BNNSVectorDescriptor *)&v8.weights.data_bias, &v8, a5);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<short,1>,std::allocator<Espresso::blob<short,1>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  Espresso *v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEF48;
  *((_QWORD *)v10 + 3) = &off_1E2DA1370;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1917C8B20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<short,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1370;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<short,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1370;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<short,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<short,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<short,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::BNNSEngine::create_bnns_fully_connect(Espresso::BNNSEngine *this, const BNNSVectorDescriptor *a2, const BNNSVectorDescriptor *a3, const BNNSFullyConnectedLayerParameters *a4, const BNNSFilterParameters *a5)
{
  Espresso::BNNSEngine *v8;
  unsigned __int8 v9;
  NSObject *v10;
  uint8_t v12[16];

  v8 = this;
  if ((v9 & 1) == 0)
  {
    if ((_DWORD)this)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      Espresso::BNNSEngine::create_bnns_fully_connect(BNNSVectorDescriptor const*,BNNSVectorDescriptor const*,BNNSFullyConnectedLayerParameters const*,BNNSFilterParameters const*)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
    }
  }
  if (Espresso::BNNSEngine::create_bnns_fully_connect(BNNSVectorDescriptor const*,BNNSVectorDescriptor const*,BNNSFullyConnectedLayerParameters const*,BNNSFilterParameters const*)::log_requested)
  {
    Espresso::espresso_os_log_subsystem(this, (const char *)a2);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v12 = 0;
      _os_log_debug_impl(&dword_190DAF000, v10, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateFullyConnectedLayer", v12, 2u);
    }

  }
  return MEMORY[0x19401A9D8](v8, a2, a3, a4, a5);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<char,4>,std::allocator<Espresso::blob<char,4>>,int (&)[4],void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  void *v10;

  v4 = operator new(0x60uLL);
  v5 = v4;
  v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBEBC8;
  v4[3] = &off_1E2DA1170;
  v7 = (char *)(v4 + 3);
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  v8 = 1;
  do
  {
    v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  v10 = Espresso::kern_alloc_uninitialized((Espresso *)v8);
  bzero(v10, v8);
  v5[6] = v10;
  *((_BYTE *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_1917C8E28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v4 = operator new(0x60uLL);
  v5 = v4;
  v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBECA8;
  v4[3] = &off_1E2DA11F0;
  v7 = (char *)(v4 + 3);
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  v8 = 1;
  do
  {
    v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  v10 = 4 * v8;
  v11 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v8));
  bzero(v11, v10);
  v5[6] = v11;
  *((_BYTE *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_1917C8F08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<char,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1170;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return a1;
}

void Espresso::blob<char,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1170;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<char,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::blob<int,1>::make(_QWORD *a1, int a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(a1, a2, 1, 1, 1);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,1>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18[3];
  std::__shared_weak_count *v19;

  v18[2] = a2;
  v19 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (std::__shared_weak_count *)a6[1];
  v18[0] = *a6;
  v18[1] = (uint64_t)v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<unsigned char,1>(a1, a2, a4, a5, v18, a7, a8);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1917C9150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::argmax_tree_approximator::__launch(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t __ldb;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  float *v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  float v30;
  float *v31;
  unint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  float v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  int v41;
  float *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  float *v48;
  float v49;
  float v50;
  int v51;
  float *v52;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  const float *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t __ldc;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::runtime_error *exception;
  uint64_t v75;
  unint64_t v76;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *__p;
  float *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  _QWORD v92[2];
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;

  __ldb = *(int *)(*(_QWORD *)a7 + 16);
  v78 = *(int *)(*(_QWORD *)a6 + 16);
  v80 = *(unsigned int *)(*(_QWORD *)a6 + 20);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v95, 1, 1, a2, v80);
  v9 = (std::__shared_weak_count *)a1[1];
  v93 = *a1;
  v94 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (std::__shared_weak_count *)a1[3];
  v92[0] = a1[2];
  v92[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  Espresso::matrix_vector_mult_batched((uint64_t)&v93, (uint64_t)v92, __ldb, *(const float **)(*(_QWORD *)a7 + 24), a2, *(float **)(v95 + 24), v80, 0.0);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v94;
  if (v94)
  {
    v18 = (unint64_t *)&v94->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v90, v78, 1, 1, 1);
  if ((int)v80 >= 1)
  {
    v83 = 0;
    v20 = 0;
    v21 = 0;
    v22 = a2;
    v23 = (unint64_t)(a3 - 2) >> 1;
    v76 = v23 + 1;
    v75 = 2 * v23;
    do
    {
      std::vector<std::pair<float,int>>::vector(&__p, v22);
      v81 = v20;
      v82 = v21;
      v24 = *(_QWORD *)(v95 + 24);
      v25 = *(float *)(v24 + 4 * v21 * v22);
      v26 = (float *)__p;
      if (a2 >= 1)
      {
        v27 = 0;
        v28 = (float *)((char *)__p + 4);
        v29 = v24 + v20;
        do
        {
          v30 = *(float *)(v29 + 4 * v27);
          *(v28 - 1) = v30;
          *(_DWORD *)v28 = v27;
          v28 += 2;
          if (v30 < v25)
            v25 = v30;
          ++v27;
        }
        while (a2 != v27);
      }
      if (a3)
      {
        v31 = v89;
        if (a3 >= 2)
        {
          v32 = v76;
          v33 = &v26[v75];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::argmax_tree_approximator::__launch(int,int,std::shared_ptr<Espresso::blob<float,2>>,std::shared_ptr<Espresso::blob<unsigned char,2>>,std::shared_ptr<Espresso::blob<float,1>>,std::shared_ptr<Espresso::blob<float,4>> const&,std::shared_ptr<Espresso::blob<float,4>> const&)::{lambda(std::pair<float,int> const&,std::pair<float,int> const&)#1} &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)v26, a3, v33);
            v33 -= 2;
            --v32;
          }
          while (v32);
        }
        v34 = &v26[2 * a3];
        if (v34 != v31)
        {
          v35 = &v26[2 * a3];
          do
          {
            v36 = *v35;
            if (*v35 > *v26)
            {
              *v35 = *v26;
              *v26 = v36;
              v37 = *((_DWORD *)v35 + 1);
              v35[1] = v26[1];
              *((_DWORD *)v26 + 1) = v37;
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::argmax_tree_approximator::__launch(int,int,std::shared_ptr<Espresso::blob<float,2>>,std::shared_ptr<Espresso::blob<unsigned char,2>>,std::shared_ptr<Espresso::blob<float,1>>,std::shared_ptr<Espresso::blob<float,4>> const&,std::shared_ptr<Espresso::blob<float,4>> const&)::{lambda(std::pair<float,int> const&,std::pair<float,int> const&)#1} &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)v26, a3, v26);
            }
            v35 += 2;
          }
          while (v35 != v31);
        }
        if (a3 > 1)
        {
          v38 = a3 & 0x1FFFFFFFFFFFFFFFLL;
          do
          {
            v39 = 0;
            v40 = *v26;
            v41 = *((_DWORD *)v26 + 1);
            v42 = v26;
            do
            {
              v43 = v42;
              v42 += 2 * v39 + 2;
              v44 = 2 * v39;
              v39 = (2 * v39) | 1;
              v45 = v44 + 2;
              if (v45 < v38 && *v42 > v42[2])
              {
                v42 += 2;
                v39 = v45;
              }
              *v43 = *v42;
              v43[1] = v42[1];
            }
            while (v39 <= (uint64_t)((unint64_t)(v38 - 2) >> 1));
            if (v42 == v34 - 2)
            {
              *v42 = v40;
              *((_DWORD *)v42 + 1) = v41;
            }
            else
            {
              *v42 = *(v34 - 2);
              v42[1] = *(v34 - 1);
              *(v34 - 2) = v40;
              *((_DWORD *)v34 - 1) = v41;
              v46 = (char *)v42 - (char *)v26 + 8;
              if (v46 >= 9)
              {
                v47 = (unint64_t)((v46 >> 3) - 2) >> 1;
                v48 = &v26[2 * v47];
                v49 = *v48;
                v50 = *v42;
                if (*v48 > *v42)
                {
                  v51 = *((_DWORD *)v42 + 1);
                  do
                  {
                    v52 = v42;
                    v42 = v48;
                    *v52 = v49;
                    v52[1] = v48[1];
                    if (!v47)
                      break;
                    v47 = (v47 - 1) >> 1;
                    v48 = &v26[2 * v47];
                    v49 = *v48;
                  }
                  while (*v48 > v50);
                  *v42 = v50;
                  *((_DWORD *)v42 + 1) = v51;
                }
              }
            }
            v34 -= 2;
          }
          while (v38-- > 2);
        }
      }
      if ((int)v78 >= 1)
      {
        v54 = (float *)(*(_QWORD *)(*(_QWORD *)a6 + 24) + v83);
        v55 = v78;
        do
        {
          *v54++ = v25;
          --v55;
        }
        while (v55);
      }
      if (a3 >= 1)
      {
        v56 = 0;
        v57 = (const float *)(*(_QWORD *)(*(_QWORD *)a7 + 24) + 4 * v82 * __ldb);
        do
        {
          v58 = *((int *)__p + 2 * v56 + 1);
          v59 = *(_QWORD *)(a1[4] + 16);
          if ((int)v58 < 1)
            v60 = 0;
          else
            v60 = *(_DWORD *)(v59 + 4 * (v58 - 1));
          if (!*(_QWORD *)a4)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "not supported");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          __ldc = (*(_DWORD *)(v59 + 4 * v58) - v60);
          v62 = v90;
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, 1, *(_DWORD *)(v59 + 4 * v58) - v60, __ldb, 1.0, v57, __ldb, (const float *)(*(_QWORD *)(*(_QWORD *)a4 + 16) + 4 * v60 * (int)__ldb), __ldb, 0.0, *(float **)(v90 + 16), __ldc);
          vDSP_vadd((const float *)(*(_QWORD *)(*(_QWORD *)a5 + 16) + 4 * v60), 1, *(const float **)(v62 + 16), 1, *(float **)(v62 + 16), 1, (int)__ldc);
          if ((int)__ldc >= 1)
          {
            v63 = *(_DWORD **)(v62 + 16);
            v64 = *(_QWORD *)(*(_QWORD *)a6 + 24);
            v65 = (int *)(*(_QWORD *)(a1[6] + 16) + 4 * v60);
            do
            {
              v67 = *v65++;
              v66 = v67;
              LODWORD(v67) = *v63++;
              *(_DWORD *)(v64 + 4 * v66) = v67;
              --__ldc;
            }
            while (__ldc);
          }
          ++v56;
        }
        while (v56 != a3);
      }
      if (__p)
      {
        v89 = (float *)__p;
        operator delete(__p);
      }
      v21 = v82 + 1;
      v20 = v81 + 4 * a2;
      v83 += 4 * v78;
      v22 = a2;
    }
    while (v82 + 1 != v80);
  }
  v68 = v91;
  if (v91)
  {
    v69 = (unint64_t *)&v91->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v96;
  if (v96)
  {
    v72 = (unint64_t *)&v96->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_1917C97AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 120);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<float,int>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1917C988C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::argmax_tree_approximator::__launch(int,int,std::shared_ptr<Espresso::blob<float,2>>,std::shared_ptr<Espresso::blob<unsigned char,2>>,std::shared_ptr<Espresso::blob<float,1>>,std::shared_ptr<Espresso::blob<float,4>> const&,std::shared_ptr<Espresso::blob<float,4>> const&)::{lambda(std::pair<float,int> const&,std::pair<float,int> const&)#1} &,std::__wrap_iter<std::pair<float,int>*>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  int v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) | 1;
      v7 = (float *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2 && *v7 > v7[2])
      {
        v7 += 2;
        v6 = v8;
      }
      v9 = *v7;
      v10 = *a3;
      if (*v7 <= *a3)
      {
        v11 = *((_DWORD *)a3 + 1);
        do
        {
          v12 = a3;
          a3 = v7;
          *v12 = v9;
          v12[1] = v7[1];
          if (v4 < v6)
            break;
          v13 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (float *)(result + 8 * v6);
          v14 = v13 + 2;
          if (v14 < a2 && *v7 > v7[2])
          {
            v7 += 2;
            v6 = v14;
          }
          v9 = *v7;
        }
        while (*v7 <= v10);
        *a3 = v10;
        *((_DWORD *)a3 + 1) = v11;
      }
    }
  }
  return result;
}

void Espresso::concat_kernel_cpu::~concat_kernel_cpu(Espresso::concat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::concat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  char v63[40];
  void *__p;
  void *v65;
  _DWORD v66[5];
  unsigned int v67;
  _DWORD *v68;
  std::__shared_weak_count *v69;

  v54 = a4;
  v5 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v5
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v5 + 32))(*v5))
  {
    v6 = 0;
    v68 = 0;
    v69 = 0;
  }
  else
  {
    v6 = *(_DWORD **)(*v5 + 160);
    v49 = *(std::__shared_weak_count **)(*v5 + 168);
    v68 = v6;
    v69 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(p_shared_owners);
      while (__stxr(v51 + 1, p_shared_owners));
    }
  }
  Espresso::abstract_blob_container::shape(v63, **(_QWORD **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v66, (const Espresso::layer_shape *)v63, 0);
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  if (v67 < 4)
  {
    if (v67)
      v28 = (int)v66[v67 - 1];
    else
      v28 = 0;
    v29 = *v54;
    v30 = v54[1];
    if (v30 != *v54)
    {
      v31 = 0;
      v32 = 0;
      v33 = 4 * v28;
      do
      {
        if (v31 < (v30 - v29) >> 4
          && (v34 = (_QWORD *)(v29 + 16 * v31), *v34)
          && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v34 + 32))(*v34))
        {
          v36 = *(_QWORD *)(*v34 + 160);
          v35 = *(std::__shared_weak_count **)(*v34 + 168);
          v61 = v36;
          v62 = v35;
          if (v35)
          {
            v39 = (unint64_t *)&v35->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v61 = 0;
          v62 = 0;
        }
        Espresso::abstract_blob_container::shape(v63, *(_QWORD *)(*v54 + 16 * v31));
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v55, (const Espresso::layer_shape *)v63, 0);
        if (*(_BYTE *)(a1 + 340) || v60 <= 3)
        {
          switch(v60)
          {
            case 1u:
              v37 = 1;
              if (!v60)
                goto LABEL_67;
              break;
            case 2u:
              v37 = v55;
              if (!v60)
                goto LABEL_67;
              break;
            case 3u:
              v37 = v56 * (uint64_t)v55;
              if (!v60)
                goto LABEL_67;
              break;
            case 4u:
              v37 = v56 * (uint64_t)v55 * v57;
              if (!v60)
                goto LABEL_67;
              break;
            case 5u:
              v37 = v56 * (uint64_t)v55 * v57 * v58;
              if (!v60)
                goto LABEL_67;
              break;
            default:
              v37 = 0;
              if (!v60)
                goto LABEL_67;
              break;
          }
          v38 = *(&v55 + (int)v60 - 1);
        }
        else if (v60 == 5)
        {
          v37 = v56 * (uint64_t)v55;
          v38 = v58 * (uint64_t)v59 * v57;
        }
        else if (v60 == 4)
        {
          v37 = v55;
          v38 = v57 * (uint64_t)v58 * v56;
        }
        else
        {
          v37 = 0;
LABEL_67:
          v38 = 0;
        }
        if (__p)
        {
          v65 = __p;
          operator delete(__p);
        }
        if (v36)
        {
          v41 = *((_QWORD *)v68 + 3);
          if (v41)
          {
            v42 = *(char **)(v36 + 24);
            if (v42)
            {
              if (v37)
              {
                v43 = (char *)(v41 + 4 * v32);
                do
                {
                  if (v43 != v42)
                    memcpy(v43, v42, 4 * v38);
                  v42 += 4 * v38;
                  v43 += v33;
                  --v37;
                }
                while (v37);
              }
            }
          }
        }
        if (v35)
        {
          v44 = (unint64_t *)&v35->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v32 += v38;
        ++v31;
        v29 = *v54;
        v30 = v54[1];
      }
      while (v31 < (v30 - *v54) >> 4);
    }
  }
  else
  {
    v7 = *v54;
    v8 = v54[1];
    if (v8 != *v54)
    {
      v9 = 0;
      v10 = 0;
      v11 = 4 * v6[3] * v6[2] * v6[4];
      while (1)
      {
        if (v9 < (v8 - v7) >> 4
          && (v12 = (_QWORD *)(v7 + 16 * v9), *v12)
          && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v12 + 32))(*v12))
        {
          v13 = *(_QWORD *)(*v12 + 160);
          v14 = *(std::__shared_weak_count **)(*v12 + 168);
          if (v14)
          {
            v26 = (unint64_t *)&v14->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
        }
        else
        {
          v13 = 0;
          v14 = 0;
        }
        v15 = *(_DWORD *)(v13 + 16);
        if (!v9)
        {
          v15 = *(unsigned __int16 *)(a1 + 320);
          if (!*(_WORD *)(a1 + 320))
            v15 = *(_DWORD *)(v13 + 16);
        }
        v16 = *(_DWORD *)(v13 + 12) * *(_DWORD *)(v13 + 8);
        v17 = v16 * v15;
        if (*(int *)(v13 + 20) > 0)
          break;
        v23 = v17;
        if (v14)
          goto LABEL_25;
LABEL_29:
        v10 += v23;
        ++v9;
        v7 = *v54;
        v8 = v54[1];
        if (v9 >= (v8 - *v54) >> 4)
          goto LABEL_84;
      }
      v18 = 0;
      v19 = *(char **)(v13 + 24);
      v20 = (char *)(*((_QWORD *)v68 + 3) + 4 * v10);
      v52 = v17;
      v21 = 4 * v17;
      v22 = 4 * v16 * *(_DWORD *)(v13 + 16);
      do
      {
        if (v20 != v19)
          memcpy(v20, v19, v21);
        ++v18;
        v19 += v22;
        v20 += v11;
      }
      while (v18 < *(_DWORD *)(v13 + 20));
      v23 = v52;
      if (!v14)
        goto LABEL_29;
LABEL_25:
      v24 = (unint64_t *)&v14->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_29;
    }
  }
LABEL_84:
  v46 = v69;
  if (v69)
  {
    v47 = (unint64_t *)&v69->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1917C9E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 104);
  _Unwind_Resume(a1);
}

void Espresso::upsample_kernel_cpu::~upsample_kernel_cpu(Espresso::upsample_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::upsample_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  int v33;
  uint64_t v34;
  float v35;
  float v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  float *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float *v84;
  float v85;
  float v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  int v106;
  int v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  float v113;
  int v114;
  BOOL v115;
  float v116;
  int v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  float v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float v143;
  int v144;
  int v145;
  uint64_t v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  float v150;
  int v151;
  BOOL v152;
  float v153;
  int v154;
  unint64_t *p_shared_owners;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  const char *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;

  v8 = *(_QWORD **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v8
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
LABEL_5:
    v161 = 0;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(*v8 + 160);
  v118 = *(_QWORD *)(*v8 + 168);
  if (!v118)
    goto LABEL_5;
  v161 = *(std::__shared_weak_count **)(*v8 + 168);
  v119 = (unint64_t *)(v118 + 8);
  do
    v120 = __ldxr(v119);
  while (__stxr(v120 + 1, v119));
LABEL_6:
  v10 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v10
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v167 = 0;
LABEL_10:
    v160 = 0;
    goto LABEL_11;
  }
  v121 = *(_QWORD *)(*v10 + 168);
  v167 = *(_QWORD *)(*v10 + 160);
  if (!v121)
    goto LABEL_10;
  v160 = *(std::__shared_weak_count **)(*v10 + 168);
  v122 = (unint64_t *)(v121 + 8);
  do
    v123 = __ldxr(v122);
  while (__stxr(v123 + 1, v122));
LABEL_11:
  if (!v9)
  {
    v159 = "Blob of wrong type (bottom)";
    goto LABEL_175;
  }
  if (!v167)
  {
    v159 = "Blob of wrong type (top)";
LABEL_175:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v159);
  }
  v11 = 0;
  v173 = 0;
  v171 = 0u;
  v172 = 0u;
  v12 = 1;
  do
  {
    *((_QWORD *)&v171 + v11) = (int)v12;
    v12 *= *(unsigned int *)(v9 + 8 + 4 * v11++);
  }
  while (v11 != 4);
  v13 = 0;
  v170 = 0;
  v14 = 0uLL;
  v168 = 0u;
  v169 = 0u;
  v15 = 1;
  do
  {
    *((_QWORD *)&v168 + v13) = (int)v15;
    v15 *= *(unsigned int *)(v167 + 8 + 4 * v13++);
  }
  while (v13 != 4);
  v16 = *(_DWORD *)(a1 + 292);
  if (v16 == 1)
  {
    if (*(_DWORD *)(a1 + 300))
    {
      v163 = *(unsigned int *)(v167 + 20);
      if ((int)v163 >= 1)
      {
        v164 = 0;
        v165 = 0;
        v54 = *(int *)(a1 + 284);
        v55 = *(unsigned int *)(a1 + 284);
        v14.n128_u32[0] = 1.0;
        a6.n128_f32[0] = 1.0 / (float)(int)v54;
        v56 = *(int *)(a1 + 288);
        v57 = *(unsigned int *)(a1 + 288);
        v58 = *(unsigned int *)(v167 + 16);
        a2 = *((_QWORD *)&v171 + 1);
        v59 = v172;
        v162 = 4 * *((_QWORD *)&v169 + 1);
        v166 = 4 * v169;
        v60 = 4 * *((_QWORD *)&v168 + 1) * v56;
        v61 = 4 * *((_QWORD *)&v168 + 1);
        do
        {
          if ((int)v58 >= 1)
          {
            v62 = 0;
            v63 = *(unsigned int *)(v9 + 12);
            v64 = *(_DWORD *)(v9 + 12);
            v65 = (float *)(*(_QWORD *)(v167 + 24) + v165);
            do
            {
              if (v64 >= 1)
              {
                v66 = 0;
                v67 = *(_QWORD *)(v9 + 24) + 4 * *((_QWORD *)&v59 + 1) * v164 + 4 * v59 * v62;
                v68 = *(unsigned int *)(v9 + 8);
                v69 = *(_DWORD *)(v9 + 8);
                v70 = v65;
                do
                {
                  v71 = v66 + 1;
                  if (v66 + 1 >= (int)v63)
                    v72 = v63 - 1;
                  else
                    v72 = v66 + 1;
                  if (v69 >= 1)
                  {
                    v73 = 0;
                    v74 = v67 + 4 * a2 * v66;
                    v75 = v67 + 4 * a2 * v72;
                    v76 = v70;
                    do
                    {
                      v77 = v73 + 1;
                      if (v73 + 1 >= (int)v68)
                        v78 = v68 - 1;
                      else
                        v78 = v73 + 1;
                      if ((int)v56 >= 1)
                      {
                        v79 = 0;
                        v80 = *(float *)(v74 + 4 * v73);
                        v81 = *(float *)(v74 + 4 * v78);
                        v82 = *(float *)(v75 + 4 * v73);
                        v83 = 0.0;
                        v84 = v76;
                        v85 = *(float *)(v75 + 4 * v78);
                        do
                        {
                          if ((int)v54 >= 1)
                          {
                            v86 = 0.0;
                            v87 = v84;
                            v88 = v55;
                            do
                            {
                              *v87++ = (float)((float)((float)(v83 * (float)(v82 * (float)(1.0 - v86)))
                                                     + (float)((float)(v80 * (float)(1.0 - v86)) * (float)(1.0 - v83)))
                                             + (float)((float)(v81 * v86) * (float)(1.0 - v83)))
                                     + (float)((float)(v85 * v86) * v83);
                              v86 = a6.n128_f32[0] + v86;
                              --v88;
                            }
                            while (v88);
                          }
                          v83 = (float)(1.0 / (float)(int)v56) + v83;
                          ++v79;
                          v84 = (float *)((char *)v84 + v61);
                        }
                        while (v79 != v57);
                      }
                      v76 += v54;
                      v73 = v77;
                    }
                    while (v77 != v68);
                  }
                  v70 = (float *)((char *)v70 + v60);
                  v66 = v71;
                }
                while (v71 != v63);
              }
              ++v62;
              v65 = (float *)((char *)v65 + v166);
            }
            while (v62 != v58);
          }
          ++v164;
          v165 += v162;
        }
        while (v164 != v163);
      }
    }
    else
    {
      v89 = *(unsigned int *)(v167 + 8);
      v14.n128_u32[0] = 0;
      a6.n128_u32[0] = 0;
      if (*(_DWORD *)(a1 + 296))
      {
        if ((int)v89 >= 2)
          a6.n128_f32[0] = (float)((float)*(int *)(v9 + 8) + -1.0) / (float)((float)(int)v89 + -1.0);
        v90 = *(unsigned int *)(v167 + 12);
        if ((int)v90 > 1)
          v14.n128_f32[0] = (float)((float)*(int *)(v9 + 12) + -1.0) / (float)((float)(int)v90 + -1.0);
        v91 = *(unsigned int *)(v167 + 20);
        if ((int)v91 >= 1)
        {
          v92 = 0;
          v93 = 0;
          v94 = *(unsigned int *)(v167 + 16);
          v95 = v172;
          v96 = *((_QWORD *)&v171 + 1);
          v97 = 4 * *((_QWORD *)&v169 + 1);
          a2 = 4 * v169;
          v98 = 4 * *((_QWORD *)&v168 + 1);
          do
          {
            if ((int)v94 >= 1)
            {
              v99 = 0;
              v100 = *(_QWORD *)(v167 + 24) + v92;
              do
              {
                if ((int)v90 >= 1)
                {
                  v101 = 0;
                  v102 = *(_DWORD *)(v9 + 12) - 1;
                  v103 = *(_QWORD *)(v9 + 24) + 4 * *((_QWORD *)&v95 + 1) * v93 + 4 * v95 * v99;
                  v104 = v100;
                  do
                  {
                    v105 = v14.n128_f32[0] * (float)(int)v101;
                    if (v102 >= (int)v105)
                      v106 = (int)v105;
                    else
                      v106 = v102;
                    if (v102 <= (int)v105)
                      v107 = v106;
                    else
                      v107 = v106 + 1;
                    if ((int)v89 >= 1)
                    {
                      v108 = 0;
                      v109 = v105 - (float)v106;
                      v110 = v103 + 4 * v96 * v106;
                      v111 = v103 + 4 * v96 * v107;
                      v112 = *(_DWORD *)(v9 + 8) - 1;
                      do
                      {
                        v113 = a6.n128_f32[0] * (float)(int)v108;
                        v114 = (int)v113;
                        v115 = v112 <= (int)v113;
                        if (v112 < (int)v113)
                          v114 = v112;
                        v116 = v113 - (float)v114;
                        if (v115)
                          v117 = v114;
                        else
                          v117 = v114 + 1;
                        *(float *)(v104 + 4 * v108++) = (float)(*(float *)(v111 + 4 * v117) * (float)(v109 * v116))
                                                      + (float)((float)(*(float *)(v111 + 4 * v114)
                                                                      * (float)(v109 * (float)(1.0 - v116)))
                                                              + (float)((float)(*(float *)(v110 + 4 * v117)
                                                                              * (float)((float)(1.0 - v109) * v116))
                                                                      + (float)(*(float *)(v110 + 4 * v114)
                                                                              * (float)((float)(1.0 - v109)
                                                                                      * (float)(1.0 - v116)))));
                      }
                      while (v89 != v108);
                    }
                    ++v101;
                    v104 += v98;
                  }
                  while (v101 != v90);
                }
                ++v99;
                v100 += a2;
              }
              while (v99 != v94);
            }
            ++v93;
            v92 += v97;
          }
          while (v93 != v91);
        }
      }
      else
      {
        if ((int)v89 >= 2)
          a6.n128_f32[0] = (float)*(int *)(v9 + 8) / (float)(int)v89;
        v124 = *(unsigned int *)(v167 + 12);
        v125 = *(_DWORD *)(v9 + 12);
        if ((int)v124 >= 2)
          v14.n128_f32[0] = (float)v125 / (float)(int)v124;
        a2 = *(unsigned int *)(v9 + 8);
        if (*(_BYTE *)(a1 + 304) && !*(_BYTE *)(a1 + 316))
        {
          if ((_DWORD)a2 != (_DWORD)v89)
          {
            v126 = *(float *)(a1 + 308);
            if (v126 > 0.0)
              a6.n128_f32[0] = 1.0 / v126;
          }
          if (v125 != (_DWORD)v124)
          {
            v127 = *(float *)(a1 + 312);
            if (v127 > 0.0)
              v14.n128_f32[0] = 1.0 / v127;
          }
        }
        v128 = *(unsigned int *)(v167 + 20);
        if ((int)v128 >= 1)
        {
          v129 = 0;
          v130 = 0;
          v131 = *(unsigned int *)(v167 + 16);
          v132 = v125 - 1;
          v133 = v172;
          v134 = *((_QWORD *)&v171 + 1);
          a2 = (a2 - 1);
          v135 = 4 * *((_QWORD *)&v169 + 1);
          v136 = 4 * v169;
          v137 = 4 * *((_QWORD *)&v168 + 1);
          do
          {
            if ((int)v131 >= 1)
            {
              v138 = 0;
              v139 = *(_QWORD *)(v167 + 24) + v129;
              do
              {
                if ((int)v124 >= 1)
                {
                  v140 = 0;
                  v141 = *(_QWORD *)(v9 + 24) + 4 * *((_QWORD *)&v133 + 1) * v130 + 4 * v133 * v138;
                  v142 = v139;
                  do
                  {
                    v143 = (float)((float)((float)(int)v140 + 0.5) * v14.n128_f32[0]) + -0.5;
                    if (v143 < 0.0)
                      v143 = 0.0;
                    if (v132 >= (int)v143)
                      v144 = (int)v143;
                    else
                      v144 = v132;
                    if (v132 <= (int)v143)
                      v145 = v144;
                    else
                      v145 = v144 + 1;
                    if ((int)v89 >= 1)
                    {
                      v146 = 0;
                      v147 = v143 - (float)v144;
                      v148 = v141 + 4 * v134 * v144;
                      v149 = v141 + 4 * v134 * v145;
                      do
                      {
                        v150 = (float)((float)((float)(int)v146 + 0.5) * a6.n128_f32[0]) + -0.5;
                        if (v150 < 0.0)
                          v150 = 0.0;
                        v151 = (int)v150;
                        v152 = (int)a2 <= (int)v150;
                        if ((int)a2 < (int)v150)
                          v151 = a2;
                        v153 = v150 - (float)v151;
                        if (v152)
                          v154 = v151;
                        else
                          v154 = v151 + 1;
                        *(float *)(v142 + 4 * v146++) = (float)((float)((float)((float)((float)(1.0 - v147)
                                                                                      * (float)(1.0 - v153))
                                                                              * *(float *)(v148 + 4 * v151))
                                                                      + (float)((float)((float)(1.0 - v147) * v153)
                                                                              * *(float *)(v148 + 4 * v154)))
                                                              + (float)((float)(v147 * (float)(1.0 - v153))
                                                                      * *(float *)(v149 + 4 * v151)))
                                                      + (float)((float)(v147 * v153) * *(float *)(v149 + 4 * v154));
                      }
                      while (v89 != v146);
                    }
                    ++v140;
                    v142 += v137;
                  }
                  while (v140 != v124);
                }
                ++v138;
                v139 += v136;
              }
              while (v138 != v131);
            }
            ++v130;
            v129 += v135;
          }
          while (v130 != v128);
        }
      }
    }
  }
  else
  {
    if (v16)
      Espresso::throw_exception_selector<Espresso::generic_error>("Unknown mode in upsample_kernel_cpu.");
    v17 = *(unsigned int *)(v167 + 20);
    if ((int)v17 >= 1)
    {
      v18 = 0;
      v19 = 0;
      v20 = *(unsigned int *)(v167 + 16);
      v21 = v172;
      v22 = *((_QWORD *)&v171 + 1);
      v23 = *((_QWORD *)&v168 + 1);
      v24 = 4 * *((_QWORD *)&v169 + 1);
      v25 = 4 * v169;
      a2 = 4 * *((_QWORD *)&v168 + 1);
      v14.n128_u32[0] = 1.0;
      a6.n128_u32[0] = 0;
      do
      {
        if ((int)v20 >= 1)
        {
          v26 = 0;
          v27 = *(_QWORD *)(v9 + 24) + 4 * *((_QWORD *)&v21 + 1) * v19;
          v28 = *(unsigned __int8 *)(a1 + 304);
          v29 = *(_QWORD *)(v167 + 24) + v18;
          do
          {
            v30 = v27 + 4 * v21 * v26;
            if (v28)
            {
              if (*(_DWORD *)(a1 + 300))
                Espresso::throw_exception_selector<Espresso::generic_error>("Nearest neighbor sampling mode with fractional scale factors cannot be used in legacy mode in kernel upsample_kernel_cpu.");
              v31 = *(float *)(a1 + 308);
              if (v31 <= 0.0)
                v32 = 0.0;
              else
                v32 = 1.0 / v31;
              v33 = *(_DWORD *)(v9 + 12);
              v34 = *(unsigned int *)(v167 + 12);
              if (v33 == (_DWORD)v34
                || ((v35 = *(float *)(a1 + 312), v35 <= 0.0) ? (v36 = 0.0) : (v36 = 1.0 / v35), *(_BYTE *)(a1 + 316)))
              {
                v36 = (float)v33 / (float)(int)v34;
              }
              v37 = *(_DWORD *)(v9 + 8);
              v38 = *(unsigned int *)(v167 + 8);
              if (v37 == (_DWORD)v38 || *(_BYTE *)(a1 + 316))
                v32 = (float)v37 / (float)(int)v38;
              if ((int)v34 >= 1)
              {
                v39 = 0;
                v40 = v29;
                do
                {
                  if ((int)v38 >= 1)
                  {
                    v41 = 0;
                    v42 = v22 * (int)vcvtms_s32_f32(v36 * (float)(int)v39);
                    do
                    {
                      *(_DWORD *)(v40 + 4 * v41) = *(_DWORD *)(v30
                                                             + 4 * (v42 + (int)vcvtms_s32_f32(v32 * (float)(int)v41)));
                      ++v41;
                    }
                    while (v38 != v41);
                  }
                  ++v39;
                  v40 += a2;
                }
                while (v39 != v34);
              }
            }
            else
            {
              v43 = *(_DWORD *)(v9 + 12);
              if (v43 >= 1)
              {
                v44 = 0;
                v45 = *(unsigned int *)(v9 + 8);
                do
                {
                  if ((int)v45 >= 1)
                  {
                    v46 = 0;
                    v47 = *(unsigned int *)(a1 + 288);
                    do
                    {
                      if ((int)v47 >= 1)
                      {
                        v48 = 0;
                        v49 = *(_DWORD *)(v30 + 4 * v46);
                        v50 = *(unsigned int *)(a1 + 284);
                        v51 = (_DWORD *)(v29 + 4 * (v23 * (int)v47 * v44 + (int)v50 * (int)v46));
                        do
                        {
                          v52 = v51;
                          v53 = v50;
                          if ((int)v50 >= 1)
                          {
                            do
                            {
                              *v52++ = v49;
                              --v53;
                            }
                            while (v53);
                          }
                          ++v48;
                          v51 = (_DWORD *)((char *)v51 + a2);
                        }
                        while (v48 != v47);
                      }
                      ++v46;
                    }
                    while (v46 != v45);
                  }
                  v30 += 4 * v22;
                  ++v44;
                }
                while (v44 != v43);
              }
            }
            ++v26;
            v29 += v25;
          }
          while (v26 != v20);
        }
        ++v19;
        v18 += v24;
      }
      while (v19 != v17);
    }
  }
  if (!v160)
    goto LABEL_164;
  p_shared_owners = (unint64_t *)&v160->__shared_owners_;
  do
    v156 = __ldaxr(p_shared_owners);
  while (__stlxr(v156 - 1, p_shared_owners));
  if (!v156)
  {
    ((void (*)(std::__shared_weak_count *, uint64_t, __n128, __n128))v160->__on_zero_shared)(v160, a2, v14, a6);
    std::__shared_weak_count::__release_weak(v160);
    if (!v161)
      return;
  }
  else
  {
LABEL_164:
    if (!v161)
      return;
  }
  v157 = (unint64_t *)&v161->__shared_owners_;
  do
    v158 = __ldaxr(v157);
  while (__stlxr(v158 - 1, v157));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *, uint64_t, __n128, __n128))v161->__on_zero_shared)(v161, a2, v14, a6);
    std::__shared_weak_count::__release_weak(v161);
  }
}

void sub_1917CA95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::elementwise_kernel_cpu::~elementwise_kernel_cpu(Espresso::elementwise_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::pow_op>(float *result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  float *v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  _QWORD v58[2];
  _QWORD v59[2];
  float *v60;
  float *v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _DWORD v65[12];
  _DWORD v66[4];
  uint64_t v67;

  v44 = result;
  v6 = 0;
  v67 = *MEMORY[0x1E0C80C00];
  v59[0] = a3;
  v59[1] = a5;
  v58[0] = a4;
  v58[1] = a6;
  v56 = *a2;
  v51 = a2[1];
  v47 = a2[2];
  v42 = a2[3];
  v64[0] = 0;
  v64[1] = 0;
  LOBYTE(result) = 1;
  v63[0] = 0;
  v63[1] = 0;
  v62[0] = 0;
  v62[1] = 0;
  v60 = 0;
  v61 = 0;
  do
  {
    v7 = (int *)v58[v6];
    v8 = *v7;
    v9 = v7[1];
    v66[v6 + 2] = v9 * *v7;
    v10 = v7[2];
    v11 = v7[3];
    v12 = v10 * v9 * v8;
    v66[v6] = v12;
    v65[v6 + 10] = v11 * v12;
    LOBYTE(v12) = (_BYTE)result;
    v65[v6 + 8] = v7[4] != 1;
    v65[v6 + 6] = v11 != 1;
    v65[v6 + 4] = v10 != 1;
    v65[v6 + 2] = v9 != 1;
    v65[v6] = v8 != 1;
    v6 = 1;
    result = 0;
  }
  while ((v12 & 1) != 0);
  v41 = a2[4];
  if ((_DWORD)v41)
  {
    v13 = 0;
    v14 = v51;
    v15 = v51 * v56 * v47;
    v16 = v42;
    if (v56 <= 1)
      v17 = 1;
    else
      v17 = v56;
    v54 = v17;
    if (v51 <= 1)
      v14 = 1;
    v55 = v14;
    if (v47 <= 1)
      v18 = 1;
    else
      v18 = v47;
    v50 = v18;
    if (v42 <= 1)
      v16 = 1;
    v19 = 4 * v65[1];
    v20 = 4 * v65[0];
    v40 = 4 * (int)(v15 * v42);
    v45 = 4 * v15;
    v46 = v16;
    result = (float *)v66;
    do
    {
      v21 = 0;
      v22 = 1;
      do
      {
        v23 = v22;
        v64[v21] = *(_QWORD *)(v59[v21] + 24) + 4 * v13 * (int)v65[v21 + 10] * (int)v65[v21 + 8];
        v21 = 1;
        v22 = 0;
      }
      while ((v23 & 1) != 0);
      v43 = v13;
      if (v42)
      {
        v24 = 0;
        v49 = v44;
        do
        {
          v25 = 0;
          v26 = 1;
          do
          {
            v27 = v26;
            v63[v25] = v64[v25] + 4 * v24 * (int)v66[v25] * (int)v65[v25 + 6];
            v25 = 1;
            v26 = 0;
          }
          while ((v27 & 1) != 0);
          v48 = v24;
          if (v47)
          {
            v28 = 0;
            v53 = v49;
            do
            {
              v29 = 0;
              v30 = 1;
              do
              {
                v31 = v30;
                v62[v29] = v63[v29] + 4 * v28 * (int)v66[v29 + 2] * (int)v65[v29 + 4];
                v29 = 1;
                v30 = 0;
              }
              while ((v31 & 1) != 0);
              v52 = v28;
              if (v51)
              {
                v32 = 0;
                v57 = v53;
                do
                {
                  v33 = 0;
                  v34 = 1;
                  do
                  {
                    v35 = v34;
                    (&v60)[v33] = (float *)(v62[v33] + 4 * v32 * *(int *)v58[v33] * (int)v65[v33 + 2]);
                    v33 = 1;
                    v34 = 0;
                  }
                  while ((v35 & 1) != 0);
                  if ((_DWORD)v56)
                  {
                    v36 = v60;
                    v37 = v61;
                    v38 = v57;
                    v39 = v54;
                    do
                    {
                      *v38++ = powf(*v36, *v37);
                      v37 = (float *)((char *)v37 + v19);
                      v36 = (float *)((char *)v36 + v20);
                      --v39;
                    }
                    while (v39);
                  }
                  ++v32;
                  v57 += v56;
                }
                while (v32 != v55);
              }
              v28 = v52 + 1;
              v53 += (int)(v51 * v56);
            }
            while (v52 + 1 != v50);
          }
          v24 = v48 + 1;
          v49 = (float *)((char *)v49 + v45);
          result = (float *)v66;
        }
        while (v48 + 1 != v46);
      }
      v13 = v43 + 1;
      v44 = (float *)((char *)v44 + v40);
    }
    while (v43 + 1 != v41);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::mod_op>(float *result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  float *v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  _QWORD v58[2];
  _QWORD v59[2];
  float *v60;
  float *v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _DWORD v65[12];
  _DWORD v66[4];
  uint64_t v67;

  v44 = result;
  v6 = 0;
  v67 = *MEMORY[0x1E0C80C00];
  v59[0] = a3;
  v59[1] = a5;
  v58[0] = a4;
  v58[1] = a6;
  v56 = *a2;
  v51 = a2[1];
  v47 = a2[2];
  v42 = a2[3];
  v64[0] = 0;
  v64[1] = 0;
  LOBYTE(result) = 1;
  v63[0] = 0;
  v63[1] = 0;
  v62[0] = 0;
  v62[1] = 0;
  v60 = 0;
  v61 = 0;
  do
  {
    v7 = (int *)v58[v6];
    v8 = *v7;
    v9 = v7[1];
    v66[v6 + 2] = v9 * *v7;
    v10 = v7[2];
    v11 = v7[3];
    v12 = v10 * v9 * v8;
    v66[v6] = v12;
    v65[v6 + 10] = v11 * v12;
    LOBYTE(v12) = (_BYTE)result;
    v65[v6 + 8] = v7[4] != 1;
    v65[v6 + 6] = v11 != 1;
    v65[v6 + 4] = v10 != 1;
    v65[v6 + 2] = v9 != 1;
    v65[v6] = v8 != 1;
    v6 = 1;
    result = 0;
  }
  while ((v12 & 1) != 0);
  v41 = a2[4];
  if ((_DWORD)v41)
  {
    v13 = 0;
    v14 = v51;
    v15 = v51 * v56 * v47;
    v16 = v42;
    if (v56 <= 1)
      v17 = 1;
    else
      v17 = v56;
    v54 = v17;
    if (v51 <= 1)
      v14 = 1;
    v55 = v14;
    if (v47 <= 1)
      v18 = 1;
    else
      v18 = v47;
    v50 = v18;
    if (v42 <= 1)
      v16 = 1;
    v19 = 4 * v65[1];
    v20 = 4 * v65[0];
    v40 = 4 * (int)(v15 * v42);
    v45 = 4 * v15;
    v46 = v16;
    result = (float *)v66;
    do
    {
      v21 = 0;
      v22 = 1;
      do
      {
        v23 = v22;
        v64[v21] = *(_QWORD *)(v59[v21] + 24) + 4 * v13 * (int)v65[v21 + 10] * (int)v65[v21 + 8];
        v21 = 1;
        v22 = 0;
      }
      while ((v23 & 1) != 0);
      v43 = v13;
      if (v42)
      {
        v24 = 0;
        v49 = v44;
        do
        {
          v25 = 0;
          v26 = 1;
          do
          {
            v27 = v26;
            v63[v25] = v64[v25] + 4 * v24 * (int)v66[v25] * (int)v65[v25 + 6];
            v25 = 1;
            v26 = 0;
          }
          while ((v27 & 1) != 0);
          v48 = v24;
          if (v47)
          {
            v28 = 0;
            v53 = v49;
            do
            {
              v29 = 0;
              v30 = 1;
              do
              {
                v31 = v30;
                v62[v29] = v63[v29] + 4 * v28 * (int)v66[v29 + 2] * (int)v65[v29 + 4];
                v29 = 1;
                v30 = 0;
              }
              while ((v31 & 1) != 0);
              v52 = v28;
              if (v51)
              {
                v32 = 0;
                v57 = v53;
                do
                {
                  v33 = 0;
                  v34 = 1;
                  do
                  {
                    v35 = v34;
                    (&v60)[v33] = (float *)(v62[v33] + 4 * v32 * *(int *)v58[v33] * (int)v65[v33 + 2]);
                    v33 = 1;
                    v34 = 0;
                  }
                  while ((v35 & 1) != 0);
                  if ((_DWORD)v56)
                  {
                    v36 = v60;
                    v37 = v61;
                    v38 = v57;
                    v39 = v54;
                    do
                    {
                      *v38++ = fmodf(*v36, *v37);
                      v37 = (float *)((char *)v37 + v19);
                      v36 = (float *)((char *)v36 + v20);
                      --v39;
                    }
                    while (v39);
                  }
                  ++v32;
                  v57 += v56;
                }
                while (v32 != v55);
              }
              v28 = v52 + 1;
              v53 += (int)(v51 * v56);
            }
            while (v52 + 1 != v50);
          }
          v24 = v48 + 1;
          v49 = (float *)((char *)v49 + v45);
          result = (float *)v66;
        }
        while (v48 + 1 != v46);
      }
      v13 = v43 + 1;
      v44 = (float *)((char *)v44 + v40);
    }
    while (v43 + 1 != v41);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::less_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  float *result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[2];
  _DWORD v60[14];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (float *)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v49 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (_QWORD)result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = v38;
                    v43 = v20;
                    do
                    {
                      if (*v42 >= *v41)
                        v44 = 0.0;
                      else
                        v44 = 1.0;
                      *result++ = v44;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::less_or_equal_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  float *result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[2];
  _DWORD v60[14];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (float *)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v49 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (_QWORD)result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = v38;
                    v43 = v20;
                    do
                    {
                      if (*v42 > *v41)
                        v44 = 0.0;
                      else
                        v44 = 1.0;
                      *result++ = v44;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::greater_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  float *result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[2];
  _DWORD v60[14];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (float *)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v49 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (_QWORD)result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = v38;
                    v43 = v20;
                    do
                    {
                      if (*v42 <= *v41)
                        v44 = 0.0;
                      else
                        v44 = 1.0;
                      *result++ = v44;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::greater_or_equal_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  float *result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[2];
  _DWORD v60[14];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (float *)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v49 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (_QWORD)result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = v38;
                    v43 = v20;
                    do
                    {
                      if (*v42 < *v41)
                        v44 = 0.0;
                      else
                        v44 = 1.0;
                      *result++ = v44;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

void Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::if_op>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  _DWORD *v31;
  uint64_t k;
  uint64_t v33;
  _DWORD *v34;
  uint64_t m;
  _DWORD *v36;
  float *v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;
  unsigned int v50;
  _QWORD v51[3];
  _QWORD v52[3];
  float *v53;
  _DWORD *v54;
  _DWORD *v55;
  _QWORD v56[3];
  _QWORD v57[3];
  _QWORD v58[3];
  _DWORD v59[24];
  uint64_t v60;

  v8 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v52[0] = a3;
  v52[1] = a5;
  v52[2] = a7;
  v51[0] = a4;
  v51[1] = a6;
  v51[2] = a8;
  v9 = *a2;
  v50 = a2[1];
  v48 = a2[2];
  v43 = a2[3];
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, sizeof(v57));
  memset(v56, 0, sizeof(v56));
  v53 = 0;
  v54 = 0;
  v55 = 0;
  do
  {
    v10 = (int *)v51[v8];
    v11 = *v10;
    v12 = v10[1];
    v59[v8 + 21] = v12 * *v10;
    v13 = v10[2];
    v14 = v10[3];
    v15 = v13 * v12 * v11;
    v59[v8 + 18] = v15;
    v59[v8 + 15] = v14 * v15;
    v59[v8 + 12] = v10[4] != 1;
    v59[v8 + 9] = v14 != 1;
    v59[v8 + 6] = v13 != 1;
    v59[v8 + 3] = v12 != 1;
    v59[v8++] = v11 != 1;
  }
  while (v8 != 3);
  v42 = a2[4];
  if ((_DWORD)v42)
  {
    v16 = 0;
    v17 = v50;
    v18 = v50 * v9 * v48;
    v19 = v43;
    v20 = v18 * v43;
    if (v9 <= 1)
      v21 = 1;
    else
      v21 = v9;
    if (v50 <= 1)
      v17 = 1;
    v22 = v17;
    if (v48 <= 1)
      v23 = 1;
    else
      v23 = v48;
    if (v43 <= 1)
      v19 = 1;
    v24 = 4 * v59[2];
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v46 = 4 * v18;
    v47 = v19;
    do
    {
      for (i = 0; i != 3; ++i)
        v58[i] = *(_QWORD *)(v52[i] + 24) + 4 * v16 * (int)v59[i + 15] * (int)v59[i + 12];
      v44 = v16;
      if (v43)
      {
        v28 = 0;
        v49 = a1;
        do
        {
          for (j = 0; j != 3; ++j)
            v57[j] = v58[j] + 4 * v28 * (int)v59[j + 18] * (int)v59[j + 9];
          if (v48)
          {
            v30 = 0;
            v31 = v49;
            do
            {
              for (k = 0; k != 3; ++k)
                v56[k] = v57[k] + 4 * v30 * (int)v59[k + 21] * (int)v59[k + 6];
              if (v50)
              {
                v33 = 0;
                v34 = v31;
                do
                {
                  for (m = 0; m != 3; ++m)
                    (&v53)[m] = (float *)(v56[m] + 4 * v33 * *(int *)v51[m] * (int)v59[m + 3]);
                  if ((_DWORD)v9)
                  {
                    v37 = v53;
                    v36 = v54;
                    v38 = v34;
                    v39 = v21;
                    v40 = v55;
                    do
                    {
                      if (*v37 == 0.0)
                        v41 = v40;
                      else
                        v41 = v36;
                      *v38++ = *v41;
                      v40 = (_DWORD *)((char *)v40 + v24);
                      v36 = (_DWORD *)((char *)v36 + v25);
                      v37 = (float *)((char *)v37 + v26);
                      --v39;
                    }
                    while (v39);
                  }
                  ++v33;
                  v34 += v9;
                }
                while (v33 != v22);
              }
              ++v30;
              v31 += (int)(v50 * v9);
            }
            while (v30 != v23);
          }
          ++v28;
          v49 = (_DWORD *)((char *)v49 + v46);
        }
        while (v28 != v47);
      }
      v16 = v44 + 1;
      a1 += v20;
    }
    while (v44 + 1 != v42);
  }
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::and_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  float *result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[4];
  _DWORD v60[12];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (float *)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 10] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 8] = v16;
    v60[v6 + 6] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 4] = v11[4] != 1;
    v60[v6 + 2] = v15 != 1;
    v60[v6] = v14 != 1;
    v59[v6 + 2] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v49 = v19;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (float *)(int)v60[v27 + 4];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 6] * (_QWORD)result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 8] * (int)v60[v31 + 2];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 10] * (int)v60[v35];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v59[v39 + 2]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = v38;
                    v43 = v20;
                    do
                    {
                      if (*v42 == 0.0)
                      {
                        v44 = 0.0;
                      }
                      else if (*v41 == 0.0)
                      {
                        v44 = 0.0;
                      }
                      else
                      {
                        v44 = 1.0;
                      }
                      *result++ = v44;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::or_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  float *result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[4];
  _DWORD v60[12];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (float *)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 10] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 8] = v16;
    v60[v6 + 6] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 4] = v11[4] != 1;
    v60[v6 + 2] = v15 != 1;
    v60[v6] = v14 != 1;
    v59[v6 + 2] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v49 = v19;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (float *)(int)v60[v27 + 4];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 6] * (_QWORD)result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 8] * (int)v60[v31 + 2];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 10] * (int)v60[v35];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v59[v39 + 2]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = v38;
                    v43 = v20;
                    do
                    {
                      v44 = 1.0;
                      if (*v42 == 0.0)
                      {
                        if (*v41 == 0.0)
                          v44 = 0.0;
                        else
                          v44 = 1.0;
                      }
                      *result++ = v44;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::xor_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int v48;
  float *v49;
  unsigned int v50;
  _QWORD v51[2];
  _QWORD v52[2];
  float *v53;
  float *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _DWORD v58[2];
  _DWORD v59[14];
  uint64_t v60;

  v6 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  v7 = *a2;
  v50 = a2[1];
  v48 = a2[2];
  v44 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  v8 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  result = (uint64_t)v59;
  v53 = 0;
  v54 = 0;
  do
  {
    v10 = (int *)v51[v6];
    v11 = *v10;
    v12 = v10[1];
    v59[v6 + 12] = v12 * *v10;
    v13 = v10[2];
    v14 = v10[3];
    v15 = v13 * v12 * v11;
    v59[v6 + 10] = v15;
    v59[v6 + 8] = v14 * v15;
    LOBYTE(v15) = v8;
    v59[v6 + 6] = v10[4] != 1;
    v59[v6 + 4] = v14 != 1;
    v59[v6 + 2] = v13 != 1;
    v59[v6] = v12 != 1;
    v58[v6] = v11 != 1;
    v6 = 1;
    v8 = 0;
  }
  while ((v15 & 1) != 0);
  v43 = a2[4];
  if ((_DWORD)v43)
  {
    v16 = 0;
    v17 = v50 * v7 * v48;
    v18 = v44;
    if (v7 <= 1)
      v19 = 1;
    else
      v19 = v7;
    if (v50 <= 1)
      v20 = 1;
    else
      v20 = v50;
    v21 = v20;
    if (v48 <= 1)
      v22 = 1;
    else
      v22 = v48;
    v23 = v22;
    if (v44 <= 1)
      v18 = 1;
    v47 = v18;
    v24 = 4 * v58[1];
    v25 = 4 * v58[0];
    do
    {
      v26 = 0;
      v27 = 1;
      do
      {
        v28 = v27;
        result = (int)v59[v26 + 6];
        v57[v26] = *(_QWORD *)(v52[v26] + 24) + 4 * v16 * (int)v59[v26 + 8] * result;
        v26 = 1;
        v27 = 0;
      }
      while ((v28 & 1) != 0);
      v45 = v16;
      if (v44)
      {
        v29 = 0;
        v49 = a1;
        do
        {
          v30 = 0;
          v31 = 1;
          do
          {
            result = v31;
            v56[v30] = v57[v30] + 4 * v29 * (int)v59[v30 + 10] * (int)v59[v30 + 4];
            v30 = 1;
            v31 = 0;
          }
          while ((result & 1) != 0);
          if (v48)
          {
            v32 = 0;
            v33 = v49;
            do
            {
              v34 = 0;
              v35 = 1;
              do
              {
                result = v35;
                v55[v34] = v56[v34] + 4 * v32 * (int)v59[v34 + 12] * (int)v59[v34 + 2];
                v34 = 1;
                v35 = 0;
              }
              while ((result & 1) != 0);
              if (v50)
              {
                v36 = 0;
                v37 = v33;
                do
                {
                  v38 = 0;
                  v39 = 1;
                  do
                  {
                    result = v39;
                    (&v53)[v38] = (float *)(v55[v38] + 4 * v36 * *(int *)v51[v38] * (int)v59[v38]);
                    v38 = 1;
                    v39 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v7)
                  {
                    v41 = v53;
                    v40 = v54;
                    result = (uint64_t)v37;
                    v42 = v19;
                    do
                    {
                      *(float *)result = (float)((*v41 != 0.0) ^ (*v40 != 0.0));
                      result += 4;
                      v40 = (float *)((char *)v40 + v24);
                      v41 = (float *)((char *)v41 + v25);
                      --v42;
                    }
                    while (v42);
                  }
                  ++v36;
                  v37 += v7;
                }
                while (v36 != v21);
              }
              ++v32;
              v33 += (int)(v50 * v7);
            }
            while (v32 != v23);
          }
          ++v29;
          v49 += v17;
        }
        while (v29 != v47);
      }
      v16 = v45 + 1;
      a1 += (int)(v17 * v44);
    }
    while (v45 + 1 != v43);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::equal_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  float *result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[2];
  _DWORD v60[14];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (float *)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v49 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (_QWORD)result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = v38;
                    v43 = v20;
                    do
                    {
                      if (*v42 == *v41)
                        v44 = 1.0;
                      else
                        v44 = 0.0;
                      *result++ = v44;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::not_equal_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  float *result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[2];
  _DWORD v60[14];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (float *)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v49 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (_QWORD)result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = v38;
                    v43 = v20;
                    do
                    {
                      if (*v42 == *v41)
                        v44 = 0.0;
                      else
                        v44 = 1.0;
                      *result++ = v44;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::floordiv_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  unsigned int v49;
  float *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  float *v53;
  float *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _DWORD v58[2];
  _DWORD v59[14];
  uint64_t v60;

  v6 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v49 = a2[2];
  v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  result = (uint64_t)v59;
  v53 = 0;
  v54 = 0;
  do
  {
    v11 = (int *)v51[v6];
    v12 = *v11;
    v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v44 = a2[4];
  if ((_DWORD)v44)
  {
    v17 = 0;
    v18 = v7 * v8 * v49;
    v19 = v45;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v49 <= 1)
      v23 = 1;
    else
      v23 = v49;
    v24 = v23;
    if (v45 <= 1)
      v19 = 1;
    v25 = 4 * v58[1];
    v26 = 4 * v58[0];
    v48 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (int)v59[v27 + 6];
        v57[v27] = *(_QWORD *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v46 = v17;
      if (v45)
      {
        v30 = 0;
        v50 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            v33 = 0;
            v34 = v50;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v53;
                    v41 = v54;
                    result = (uint64_t)v38;
                    v43 = v20;
                    do
                    {
                      *(float *)result = floorf(*v42 / *v41);
                      result += 4;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

void Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*(float *)(*a1 + 288) != 1.0)
    vDSP_vsmul(*(const float **)(a1[1] + 24), 1, (const float *)(v2 + 288), *(float **)(a1[1] + 24), 1, *((int *)a1 + 6));
  if (*(float *)(v2 + 292) != 0.0)
    vDSP_vsadd(*(const float **)(a1[1] + 24), 1, (const float *)(v2 + 292), *(float **)(a1[1] + 24), 1, *((int *)a1 + 6));
}

float32x4_t *Espresso::compute_sign_fp32(float32x4_t *this, float *a2, float *a3, const int *a4)
{
  unint64_t v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  BOOL v15;
  float v16;

  *(float *)&v4 = *a3;
  if (*(_DWORD *)a3)
  {
    if (v4 >= 0x10)
    {
      v5 = 16;
      do
      {
        v6 = *(float32x4_t *)(a2 + 8);
        v7 = *(float32x4_t *)(a2 + 12);
        v8 = *(float32x4_t *)a2;
        v9 = *(float32x4_t *)(a2 + 4);
        a2 += 16;
        this[2] = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v6), vcgtzq_f32(v6)));
        this[3] = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v7), vcgtzq_f32(v7)));
        *this = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v8), vcgtzq_f32(v8)));
        this[1] = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v9), vcgtzq_f32(v9)));
        this += 4;
        v5 += 16;
        v4 = *(int *)a3;
      }
      while (v5 <= v4);
    }
    v10 = v4 & 0xF;
    if (v10 > 7)
    {
      v12 = *(float32x4_t *)a2;
      v11 = *(float32x4_t *)(a2 + 4);
      a2 += 8;
      *this = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v12), vcgtzq_f32(v12)));
      this[1] = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v11), vcgtzq_f32(v11)));
      this += 2;
      v10 -= 8;
    }
    if (v10 >= 4)
    {
      v13 = *(float32x4_t *)a2;
      a2 += 4;
      *this++ = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v13), vcgtzq_f32(v13)));
      v10 -= 4;
    }
    for (; v10; --v10)
    {
      v14 = *a2++;
      v15 = v14 <= 0.0;
      if (v14 >= 0.0)
        v16 = 0.0;
      else
        v16 = -1.0;
      if (!v15)
        v16 = 1.0;
      this->f32[0] = v16;
      this = (float32x4_t *)((char *)this + 4);
    }
  }
  return this;
}

void Espresso::split_kernel_cpu::~split_kernel_cpu(Espresso::split_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::split_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  _BYTE v100[4];
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  void *__p;
  void *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  signed int v117;
  uint64_t v118;
  std::__shared_weak_count *v119;

  v7 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v118 = 0;
    v119 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(*v7 + 160);
    v69 = *(std::__shared_weak_count **)(*v7 + 168);
    v118 = v8;
    v119 = v69;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(p_shared_owners);
      while (__stxr(v71 + 1, p_shared_owners));
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v108, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v112, (const Espresso::layer_shape *)&v108, 0);
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  v9 = *(unsigned __int8 *)(a1 + 288);
  v10 = v117;
  v97 = a3;
  if (*(_BYTE *)(a1 + 288) || v117 <= 3)
  {
    if (v117)
    {
      v14 = *(&v112 + v117 - 1);
      switch(v117)
      {
        case 1:
          v10 = 1;
          v99 = 1;
          break;
        case 2:
          v99 = v112;
          v10 = 2;
          break;
        case 3:
          v99 = v113 * (uint64_t)v112;
          v10 = 3;
          break;
        case 4:
          v99 = v113 * (uint64_t)v112 * v114;
          v10 = 4;
          break;
        case 5:
          v99 = v113 * (uint64_t)v112 * v114 * v115;
          v10 = 5;
          break;
        default:
          goto LABEL_16;
      }
    }
    else
    {
      v10 = 0;
      v14 = 0;
LABEL_16:
      v99 = 0;
    }
    if (v9)
      goto LABEL_23;
  }
  else
  {
    if (v117 == 5)
    {
      v12 = v115;
      v11 = v116;
      v13 = v114;
      goto LABEL_20;
    }
    if (v117 == 4)
    {
      v12 = v114;
      v11 = v115;
      v13 = v113;
LABEL_20:
      v14 = v12 * (uint64_t)v11 * v13;
      goto LABEL_54;
    }
    v99 = 0;
    v14 = 0;
    if ((v117 & 0xFFFFFFFFFFFFFFFELL) == 4)
      goto LABEL_54;
  }
  if (v10 <= 3)
  {
LABEL_23:
    v15 = *a3;
    if (a3[1] == *a3)
      goto LABEL_114;
    v16 = 0;
    v17 = 0;
    v18 = 4 * v14;
    v96 = a1;
    while (1)
    {
      v19 = (_QWORD *)(v15 + 16 * v17);
      if (*v19 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v19 + 32))(*v19))
      {
        v21 = *(_QWORD *)(*v19 + 160);
        v20 = *(std::__shared_weak_count **)(*v19 + 168);
        v106 = v21;
        v107 = v20;
        if (v20)
        {
          v26 = (unint64_t *)&v20->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v106 = 0;
        v107 = 0;
      }
      Espresso::abstract_blob_container::shape((char *)&v108, *(_QWORD *)(*a3 + 16 * v17));
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v100, (const Espresso::layer_shape *)&v108, 0);
      if (__p)
      {
        v111 = __p;
        operator delete(__p);
      }
      if (!*(_BYTE *)(a1 + 288) && v105 > 3)
        break;
      if (!v105)
        goto LABEL_37;
      v25 = *(int *)&v100[4 * v105 - 4];
LABEL_44:
      if (v99)
      {
        v28 = 0;
        v29 = 4 * v25;
        v30 = v118;
        v31 = v25 * v16;
        v32 = v99;
        do
        {
          memcpy((void *)(*(_QWORD *)(v21 + 24) + v28), (const void *)(*(_QWORD *)(v30 + 24) + v31), v29);
          v28 += v29;
          v31 += v18;
          --v32;
        }
        while (v32);
      }
      a1 = v96;
      a3 = v97;
      if (v20)
      {
        v33 = (unint64_t *)&v20->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      ++v17;
      v15 = *v97;
      v16 += 4;
      if (v17 >= (uint64_t)(v97[1] - *v97) >> 4)
        goto LABEL_114;
    }
    if (v105 == 5)
    {
      v23 = v103;
      v22 = v104;
      v24 = v102;
      goto LABEL_43;
    }
    if (v105 == 4)
    {
      v23 = v102;
      v22 = v103;
      v24 = v101;
LABEL_43:
      v25 = v23 * (uint64_t)v22 * v24;
      goto LABEL_44;
    }
LABEL_37:
    v25 = 0;
    goto LABEL_44;
  }
LABEL_54:
  v35 = *(_DWORD *)(v8 + 12) * *(_DWORD *)(v8 + 8);
  if (*(_DWORD *)(a1 + 296))
  {
    v36 = (_QWORD *)*a3;
    if (a3[1] == *a3 || !*v36 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v36 + 32))(*v36))
    {
      v37 = 0;
      v108 = 0;
      v109 = 0;
    }
    else
    {
      v37 = *(_QWORD *)(*v36 + 160);
      v90 = *(std::__shared_weak_count **)(*v36 + 168);
      v108 = v37;
      v109 = v90;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
    }
    v38 = *a3;
    if (a3[1] - *a3 >= 0x11uLL
      && (v39 = *(_QWORD *)(v38 + 16)) != 0
      && (v40 = v37, v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39), v37 = v40, !v41))
    {
      v93 = *(_QWORD *)(v38 + 16);
      v42 = *(_QWORD *)(v93 + 160);
      v43 = *(std::__shared_weak_count **)(v93 + 168);
      if (v43)
      {
        v94 = (unint64_t *)&v43->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
    }
    else
    {
      v42 = 0;
      v43 = 0;
    }
    v98 = v43;
    v44 = *(_DWORD *)(a1 + 292);
    if (v44 <= 0)
      v44 = *(_DWORD *)(v8 + 16) / 2;
    if (*(int *)(v8 + 20) >= 1)
    {
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v99 = 4 * v44 * v35;
      v48 = 4 * v14;
      do
      {
        v49 = (char *)(*(_QWORD *)(v8 + 24) + v45);
        v50 = (void *)(*(_QWORD *)(v42 + 24) + 4 * *(_DWORD *)(v42 + 16) * v46);
        v51 = v37;
        memcpy((void *)(*(_QWORD *)(v37 + 24) + 4 * *(_DWORD *)(v37 + 16) * v46), v49, 4 * *(_DWORD *)(v37 + 16) * v35);
        memcpy(v50, &v49[v99], 4 * *(_DWORD *)(v42 + 16) * v35);
        v37 = v51;
        ++v47;
        v46 += v35;
        v45 += v48;
      }
      while (v47 < *(int *)(v8 + 20));
    }
    if (v98)
    {
      v52 = (unint64_t *)&v98->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v54 = v109;
    if (v109)
    {
      v55 = (unint64_t *)&v109->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    v57 = *a3;
    v58 = a3[1];
    if (*(_DWORD *)(a1 + 284) == 3)
    {
      if (v58 != v57)
      {
        v59 = 0;
        v60 = 0;
        do
        {
          v61 = (_QWORD *)(v57 + 16 * v59);
          (*(void (**)(_QWORD))(*(_QWORD *)*v61 + 32))(*v61);
          v62 = *(_QWORD *)(*v61 + 160);
          v63 = *(std::__shared_weak_count **)(*v61 + 168);
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          v66 = *(int *)(v62 + 20);
          memcpy(*(void **)(v62 + 24), (const void *)(*(_QWORD *)(v118 + 24) + 4 * v60 * v14), 4 * v14 * v66);
          if (v63)
          {
            v67 = (unint64_t *)&v63->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v60 += v66;
          ++v59;
          v57 = *a3;
        }
        while (v59 < (uint64_t)(a3[1] - *a3) >> 4);
      }
    }
    else if (v58 != v57)
    {
      v72 = 0;
      v73 = 0;
      v99 = 4 * v35;
      v74 = 4 * v14;
      do
      {
        v75 = (_QWORD *)(v57 + 16 * v72);
        if (*v75 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v75 + 32))(*v75))
        {
          v76 = *(_QWORD *)(*v75 + 160);
          v77 = *(std::__shared_weak_count **)(*v75 + 168);
          if (v77)
          {
            v85 = (unint64_t *)&v77->__shared_owners_;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
        }
        else
        {
          v76 = 0;
          v77 = 0;
        }
        v78 = v118;
        if (*(int *)(v118 + 20) >= 1)
        {
          v79 = 0;
          v80 = 0;
          v81 = v99 * v73;
          do
          {
            memcpy((void *)(*(_QWORD *)(v76 + 24) + 4 * v79 * *(_DWORD *)(v76 + 16)), (const void *)(*(_QWORD *)(v78 + 24) + v81), 4 * *(_DWORD *)(v76 + 16) * v35);
            ++v80;
            v79 += v35;
            v81 += v74;
          }
          while (v80 < *(int *)(v78 + 20));
        }
        v82 = *(int *)(v76 + 16);
        if (v77)
        {
          v83 = (unint64_t *)&v77->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v73 += v82;
        ++v72;
        v57 = *v97;
      }
      while (v72 < (uint64_t)(v97[1] - *v97) >> 4);
    }
  }
LABEL_114:
  v87 = v119;
  if (v119)
  {
    v88 = (unint64_t *)&v119->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void sub_1917CE36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 104);
  _Unwind_Resume(a1);
}

void Espresso::general_padding_kernel_cpu::~general_padding_kernel_cpu(Espresso::general_padding_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::general_padding_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  int v45;
  int v46;
  int v47;
  int v49;
  _BOOL4 v51;
  int v52;
  int v53;
  int v54;
  _DWORD *v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _WORD *v91;
  _WORD *v92;
  int v93;
  int v94;
  int v95;
  int v97;
  _BOOL4 v98;
  int v99;
  int v100;
  int v101;
  _WORD *v102;
  uint64_t v103;
  _WORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  _DWORD *v133;
  int v134;
  int v135;
  int v136;
  int v138;
  _BOOL4 v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  _DWORD *v147;
  int v148;
  int v149;
  _DWORD *v150;
  uint64_t v151;
  int v152;
  int v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  size_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _DWORD *v175;
  _DWORD *v176;
  int v177;
  int v178;
  int v179;
  int v181;
  _BOOL4 v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  _DWORD *v187;
  int v188;
  int v189;
  _DWORD *v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  _DWORD *v195;
  uint64_t v196;
  int v197;
  int v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _DWORD *v219;
  _DWORD *v220;
  int v221;
  int v222;
  int v223;
  int v225;
  _BOOL4 v226;
  int v227;
  int v228;
  int v229;
  _DWORD *v230;
  _DWORD *v231;
  uint64_t v232;
  _DWORD *v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int *v251;
  int v252;
  uint64_t v253;
  size_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _WORD *v260;
  _WORD *v261;
  int v262;
  int v263;
  int v264;
  int v266;
  _BOOL4 v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  _WORD *v273;
  uint64_t v274;
  _WORD *v275;
  int v276;
  int v277;
  _WORD *v278;
  uint64_t v279;
  int v280;
  int v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  int v291;
  unsigned int v292;
  uint64_t v293;
  int v294;
  int *v295;
  uint64_t v296;
  size_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _WORD *v303;
  _WORD *v304;
  int v305;
  int v306;
  int v307;
  int v309;
  _BOOL4 v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  _WORD *v315;
  int v316;
  int v317;
  _WORD *v318;
  uint64_t v319;
  int v320;
  int v321;
  int v322;
  _WORD *v323;
  uint64_t v324;
  int v325;
  int v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _WORD *v348;
  _WORD *v349;
  int v350;
  int v351;
  int v352;
  int v354;
  _BOOL4 v355;
  int v356;
  int v357;
  int v358;
  _WORD *v359;
  _WORD *v360;
  uint64_t v361;
  _WORD *v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t *v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  std::__shared_weak_count *v381;
  std::__shared_weak_count *v382;
  std::__shared_weak_count *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  size_t v395;
  uint64_t v396;
  uint64_t v397;
  size_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  size_t v410;
  uint64_t v411;
  uint64_t v412;
  size_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  size_t v453;
  uint64_t v454;
  uint64_t v455;
  size_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int *v466;
  uint64_t v467;
  int *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  int *v472;
  int *v473;
  int *v474;
  uint64_t v475;
  uint64_t v476;
  size_t v477;
  uint64_t v478;
  size_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  size_t v501;
  size_t v502;
  size_t v503;
  size_t v504;
  size_t __n;
  size_t __na;
  uint64_t __nb;
  size_t __nc;
  size_t __nd;
  uint64_t __ne;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  size_t v517;
  size_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  int v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  std::__shared_weak_count *v559;
  std::__shared_weak_count *v560;
  std::__shared_weak_count *v561;
  std::__shared_weak_count *v562;

  v7 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v9 = 0;
    v562 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v8 = *(std::__shared_weak_count **)(*v7 + 168);
    v562 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v112 = __ldxr(p_shared_owners);
      while (__stxr(v112 + 1, p_shared_owners));
    }
  }
  v10 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v10 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v11 = 0;
    v462 = 0;
    v561 = 0;
  }
  else
  {
    v113 = *(_QWORD *)(*v10 + 160);
    v11 = *(std::__shared_weak_count **)(*v10 + 168);
    v462 = v113;
    v561 = v11;
    if (v11)
    {
      v114 = (unint64_t *)&v11->__shared_owners_;
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
    }
  }
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v12)
  {
    v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 23);
    v466 = (int *)*((_QWORD *)v12 + 22);
    v560 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v13 = 0;
    v466 = 0;
    v560 = 0;
  }
  v16 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v16)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)v16 + 23);
    v458 = *((_QWORD *)v16 + 22);
    v559 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  else
  {
    v17 = 0;
    v458 = 0;
    v559 = 0;
  }
  if (v9 && v462)
  {
    if (v8)
    {
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (v11)
    {
      v22 = (unint64_t *)&v11->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *(_DWORD *)(a1 + 284);
    v382 = v11;
    v383 = v8;
    switch(*(_WORD *)(a1 + 282))
    {
      case 0:
        if (v8)
        {
          v25 = (unint64_t *)&v8->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        if (v11)
        {
          v27 = (unint64_t *)&v11->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        if (*(int *)(v9 + 20) >= 1)
        {
          v432 = 0;
          v438 = 0;
          v29 = *(_DWORD *)(v9 + 12);
          v30 = *(int *)(v9 + 8);
          v31 = *(__int16 *)(a1 + 288);
          v32 = *(unsigned int *)(v462 + 8);
          v33 = (v32 - (v30 + v31));
          v551 = *(unsigned int *)(v462 + 12);
          v448 = (int)v551 * (int)v32;
          v444 = v29 * (int)v30;
          v517 = 4 * v30;
          v408 = *(int *)(v462 + 16) * v448;
          v416 = 4 * v408;
          v400 = *(int *)(v9 + 16) * v444;
          v475 = 4 * v448;
          v543 = (int)v32;
          v34 = 4 * (int)v32;
          v525 = *(_DWORD *)(v9 + 8);
          v35 = 4 * v31 + 4 * v30;
          v36 = 4 * v32;
          v37 = v9;
          do
          {
            v424 = v35;
            if (*(int *)(v37 + 16) >= 1)
            {
              v38 = 0;
              v39 = v438;
              do
              {
                if ((int)v551 >= 1)
                {
                  v40 = 0;
                  v467 = v37;
                  v533 = *(_QWORD *)(v37 + 24) + 4 * v432 * v400 + 4 * v38 * v444;
                  v41 = *(_QWORD *)(v462 + 24);
                  v487 = v35;
                  v491 = v38;
                  v42 = v41 + 4 * v432 * v408 + 4 * v38 * v448;
                  v481 = v39;
                  v43 = (_DWORD *)(v41 + v39);
                  v44 = (_DWORD *)(v41 + v35);
                  do
                  {
                    v45 = v40 - *(__int16 *)(a1 + 292);
                    v46 = *(unsigned __int16 *)(a1 + 282);
                    v47 = v29 - 1;
                    if (v45 < v29)
                      v47 = v40 - *(__int16 *)(a1 + 292);
                    if (v45 < 0)
                      v47 = 0;
                    if (v46 == 1)
                      v45 = v47;
                    if (v45 >= v29 || v45 <= -1)
                      v49 = -1;
                    else
                      v49 = v45;
                    if (!*(_WORD *)(a1 + 282))
                      v45 = v49;
                    if ((v46 & 0xFFFE) == 2)
                    {
                      _ZF = v46 == 3;
                      v51 = v46 == 3;
                      v52 = 2 * v29;
                      v53 = 2 * v29 - 2;
                      if (_ZF)
                        v53 = 2 * v29 - 1;
                      else
                        v52 = 2 * v29 - 2;
                      if (v45 >= 0)
                        v51 = 0;
                      v54 = v45 + v51;
                      if (v54 < 0)
                        v54 = -v54;
                      v45 = v54 % v52;
                      if (v53 - v45 < v45)
                        v45 = v53 - v45;
                    }
                    if (v45 == -1)
                    {
                      if ((int)v543 >= 1)
                      {
                        v59 = 0;
                        do
                        {
                          v43[v59 / 4] = v24;
                          v59 += 4;
                        }
                        while (v36 != v59);
                      }
                    }
                    else
                    {
                      v55 = v43;
                      v56 = v31;
                      if ((int)v31 >= 1)
                      {
                        do
                        {
                          *v55++ = v24;
                          --v56;
                        }
                        while (v56);
                      }
                      memcpy((void *)(v42 + 4 * v40 * v543 + 4 * v31), (const void *)(v533 + 4 * v45 * v525), v517);
                      v57 = v44;
                      v58 = v33;
                      if ((int)v33 >= 1)
                      {
                        do
                        {
                          *v57++ = v24;
                          --v58;
                        }
                        while (v58);
                      }
                    }
                    ++v40;
                    v43 = (_DWORD *)((char *)v43 + v34);
                    v44 = (_DWORD *)((char *)v44 + v34);
                  }
                  while (v40 != v551);
                  v37 = v467;
                  v35 = v487;
                  v38 = v491;
                  v39 = v481;
                }
                ++v38;
                v39 += v475;
                v35 += v475;
              }
              while (v38 < *(int *)(v37 + 16));
            }
            ++v432;
            v438 += v416;
            v35 = v424 + v416;
          }
          while (v432 < *(int *)(v37 + 20));
        }
        v11 = v382;
        v8 = v383;
        if (v382)
        {
          v60 = (unint64_t *)&v382->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
            std::__shared_weak_count::__release_weak(v382);
          }
        }
        if (v383)
        {
          v62 = (unint64_t *)&v383->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          goto LABEL_354;
        }
        break;
      case 1:
        if (v8)
        {
          v203 = (unint64_t *)&v8->__shared_owners_;
          do
            v204 = __ldxr(v203);
          while (__stxr(v204 + 1, v203));
        }
        if (v11)
        {
          v205 = (unint64_t *)&v11->__shared_owners_;
          do
            v206 = __ldxr(v205);
          while (__stxr(v206 + 1, v205));
        }
        if (*(int *)(v9 + 20) >= 1)
        {
          v420 = 0;
          v428 = 0;
          v207 = *(_DWORD *)(v9 + 12);
          v208 = *(int *)(v9 + 8);
          v209 = *(__int16 *)(a1 + 288);
          v210 = *(unsigned int *)(v462 + 8);
          v513 = (v210 - (v208 + v209));
          v555 = *(unsigned int *)(v462 + 12);
          v441 = (int)v555 * (int)v210;
          v435 = v207 * (int)v208;
          __nb = 4 * v208;
          v396 = *(int *)(v462 + 16) * v441;
          v404 = 4 * v396;
          v390 = *(int *)(v9 + 16) * v435;
          v211 = v208 - 1;
          v454 = 4 * v441;
          v547 = (int)v210;
          v212 = 4 * (int)v210;
          v521 = *(_DWORD *)(v9 + 8);
          v213 = 4 * v209 + 4 * v208;
          v214 = 4 * v210;
          do
          {
            v412 = v213;
            if (*(int *)(v9 + 16) >= 1)
            {
              v215 = 0;
              v216 = v428;
              do
              {
                if ((int)v555 >= 1)
                {
                  v217 = 0;
                  v471 = v9;
                  v537 = *(_QWORD *)(v9 + 24) + 4 * v420 * v390 + 4 * v215 * v435;
                  v218 = *(_QWORD *)(v462 + 24);
                  v484 = v215;
                  v529 = v218 + 4 * v420 * v396 + 4 * v215 * v441;
                  v461 = v216;
                  v219 = (_DWORD *)(v218 + v216);
                  v478 = v213;
                  v220 = (_DWORD *)(v218 + v213);
                  do
                  {
                    v221 = v217 - *(__int16 *)(a1 + 292);
                    v222 = *(unsigned __int16 *)(a1 + 282);
                    v223 = v207 - 1;
                    if (v221 < v207)
                      v223 = v217 - *(__int16 *)(a1 + 292);
                    if (v221 < 0)
                      v223 = 0;
                    if (v222 == 1)
                      v221 = v223;
                    if (v221 >= v207 || v221 <= -1)
                      v225 = -1;
                    else
                      v225 = v221;
                    if (!*(_WORD *)(a1 + 282))
                      v221 = v225;
                    if ((v222 & 0xFFFE) == 2)
                    {
                      _ZF = v222 == 3;
                      v226 = v222 == 3;
                      v227 = 2 * v207;
                      v228 = 2 * v207 - 2;
                      if (_ZF)
                        v228 = 2 * v207 - 1;
                      else
                        v227 = 2 * v207 - 2;
                      if (v221 >= 0)
                        v226 = 0;
                      v229 = v221 + v226;
                      if (v229 < 0)
                        v229 = -v229;
                      v221 = v229 % v227;
                      if (v228 - v221 < v221)
                        v221 = v228 - v221;
                    }
                    if (v221 == -1)
                    {
                      if ((int)v547 >= 1)
                      {
                        v235 = 0;
                        do
                        {
                          v219[v235 / 4] = v24;
                          v235 += 4;
                        }
                        while (v214 != v235);
                      }
                    }
                    else
                    {
                      v230 = (_DWORD *)(v537 + 4 * v221 * v521);
                      v231 = v219;
                      v232 = v209;
                      if ((int)v209 >= 1)
                      {
                        do
                        {
                          *v231++ = *v230;
                          --v232;
                        }
                        while (v232);
                      }
                      memcpy((void *)(v529 + 4 * v217 * v547 + 4 * v209), v230, __nb);
                      v233 = v220;
                      v234 = v513;
                      if ((int)v513 >= 1)
                      {
                        do
                        {
                          *v233++ = v230[v211];
                          --v234;
                        }
                        while (v234);
                      }
                    }
                    ++v217;
                    v219 = (_DWORD *)((char *)v219 + v212);
                    v220 = (_DWORD *)((char *)v220 + v212);
                  }
                  while (v217 != v555);
                  v9 = v471;
                  v213 = v478;
                  v215 = v484;
                  v216 = v461;
                }
                ++v215;
                v216 += v454;
                v213 += v454;
              }
              while (v215 < *(int *)(v9 + 16));
            }
            ++v420;
            v428 += v404;
            v213 = v412 + v404;
          }
          while (v420 < *(int *)(v9 + 20));
        }
        v11 = v382;
        v8 = v383;
        if (v382)
        {
          v236 = (unint64_t *)&v382->__shared_owners_;
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
            std::__shared_weak_count::__release_weak(v382);
          }
        }
        if (v383)
        {
          v238 = (unint64_t *)&v383->__shared_owners_;
          do
            v63 = __ldaxr(v238);
          while (__stlxr(v63 - 1, v238));
          goto LABEL_354;
        }
        break;
      case 2:
        if (v8)
        {
          v116 = (unint64_t *)&v8->__shared_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        if (v11)
        {
          v118 = (unint64_t *)&v11->__shared_owners_;
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
        }
        if (*(int *)(v9 + 20) >= 1)
        {
          v418 = 0;
          v426 = 0;
          v120 = *(unsigned int *)(v9 + 8);
          v121 = *(_DWORD *)(v9 + 12);
          v122 = *(__int16 *)(a1 + 288);
          v123 = *(unsigned int *)(v462 + 8);
          v511 = (v123 - (v120 + v122));
          v553 = *(unsigned int *)(v462 + 12);
          v434 = v121 * (int)v120;
          v440 = (int)v553 * (int)v123;
          __n = *(__int16 *)(a1 + 288);
          v388 = *(int *)(v9 + 16) * v434;
          v394 = *(int *)(v462 + 16) * v440;
          v402 = 4 * v394;
          v545 = v121;
          v535 = v121 - 1;
          v452 = 4 * v440;
          v493 = 2 * v121 - 2;
          v497 = 2 * v121;
          v489 = 2 * v121 - 1;
          v124 = 2 * v120 - 2;
          v541 = (int)v123;
          v125 = 4 * (int)v123;
          v501 = 4 * (int)v120;
          v126 = v501 + 4 * __n;
          v127 = 4 * v123;
          do
          {
            v410 = v126;
            if (*(int *)(v9 + 16) >= 1)
            {
              v128 = 0;
              v129 = v426;
              do
              {
                if ((int)v553 >= 1)
                {
                  v130 = 0;
                  v469 = v9;
                  v527 = *(_QWORD *)(v9 + 24) + 4 * v418 * v388 + 4 * v128 * v434;
                  v131 = *(_QWORD *)(v462 + 24);
                  v483 = v128;
                  v519 = v131 + 4 * v418 * v394 + 4 * v128 * v440;
                  v459 = v129;
                  v132 = (_DWORD *)(v131 + v129);
                  v477 = v126;
                  v133 = (_DWORD *)(v131 + v126);
                  do
                  {
                    v134 = v130 - *(__int16 *)(a1 + 292);
                    v135 = *(unsigned __int16 *)(a1 + 282);
                    v136 = v535;
                    if (v134 < v545)
                      v136 = v130 - *(__int16 *)(a1 + 292);
                    if (v134 < 0)
                      v136 = 0;
                    if (v135 == 1)
                      v134 = v136;
                    if (v134 >= v545 || v134 <= -1)
                      v138 = -1;
                    else
                      v138 = v134;
                    if (!*(_WORD *)(a1 + 282))
                      v134 = v138;
                    if ((v135 & 0xFFFE) == 2)
                    {
                      _ZF = v135 == 3;
                      v139 = v135 == 3;
                      v140 = v497;
                      v141 = v493;
                      if (_ZF)
                        v141 = v489;
                      else
                        v140 = v493;
                      if (v134 >= 0)
                        v139 = 0;
                      v142 = v134 + v139;
                      if (v142 < 0)
                        v142 = -v142;
                      v134 = v142 % v140;
                      if (v141 - v134 < v134)
                        v134 = v141 - v134;
                    }
                    if (v134 == -1)
                    {
                      if ((int)v541 >= 1)
                      {
                        v154 = 0;
                        do
                        {
                          v132[v154 / 4] = v24;
                          v154 += 4;
                        }
                        while (v127 != v154);
                      }
                    }
                    else
                    {
                      v143 = a1;
                      v144 = v120;
                      v145 = (_DWORD *)(v527 + 4 * v134 * (int)v120);
                      if ((int)v122 >= 1)
                      {
                        v146 = 0;
                        v147 = v132;
                        do
                        {
                          v148 = ((int)v122 + (int)v146) % v124;
                          if (v124 - v148 < v148)
                            v148 = v124 - v148;
                          *v147++ = v145[v148];
                          --v146;
                        }
                        while (v122 + v146);
                      }
                      memcpy((void *)(v519 + 4 * v130 * v541 + 4 * __n), v145, v501);
                      v120 = v144;
                      v149 = v144;
                      v150 = v133;
                      v151 = v511;
                      a1 = v143;
                      if ((int)v511 >= 1)
                      {
                        do
                        {
                          if (v149 >= 0)
                            v152 = v149;
                          else
                            v152 = -v149;
                          v153 = v152 % v124;
                          if (v124 - v153 < v153)
                            v153 = v124 - v153;
                          *v150++ = v145[v153];
                          ++v149;
                          --v151;
                        }
                        while (v151);
                      }
                    }
                    ++v130;
                    v132 = (_DWORD *)((char *)v132 + v125);
                    v133 = (_DWORD *)((char *)v133 + v125);
                  }
                  while (v130 != v553);
                  v9 = v469;
                  v126 = v477;
                  v128 = v483;
                  v129 = v459;
                }
                ++v128;
                v129 += v452;
                v126 += v452;
              }
              while (v128 < *(int *)(v9 + 16));
            }
            ++v418;
            v426 += v402;
            v126 = v410 + v402;
          }
          while (v418 < *(int *)(v9 + 20));
        }
        v11 = v382;
        v8 = v383;
        if (v382)
        {
          v155 = (unint64_t *)&v382->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
            std::__shared_weak_count::__release_weak(v382);
          }
        }
        if (v383)
        {
          v157 = (unint64_t *)&v383->__shared_owners_;
          do
            v63 = __ldaxr(v157);
          while (__stlxr(v63 - 1, v157));
          goto LABEL_354;
        }
        break;
      case 3:
        if (v8)
        {
          v158 = (unint64_t *)&v8->__shared_owners_;
          do
            v159 = __ldxr(v158);
          while (__stxr(v159 + 1, v158));
        }
        if (v11)
        {
          v160 = (unint64_t *)&v11->__shared_owners_;
          do
            v161 = __ldxr(v160);
          while (__stxr(v161 + 1, v160));
        }
        if (*(int *)(v9 + 20) >= 1)
        {
          v403 = 0;
          v411 = 0;
          v162 = *(unsigned int *)(v9 + 8);
          v163 = *(_DWORD *)(v9 + 12);
          v164 = *(__int16 *)(a1 + 288);
          v165 = *(unsigned int *)(v462 + 8);
          v512 = v165 - ((_DWORD)v162 + v164);
          v554 = *(unsigned int *)(v462 + 12);
          v427 = (int)v554 * (int)v165;
          v419 = v163 * (int)v162;
          v166 = 2 * v162;
          __na = *(__int16 *)(a1 + 288);
          v384 = *(int *)(v9 + 16) * v419;
          v386 = *(int *)(v462 + 16) * v427;
          v389 = 4 * v386;
          v446 = 4 * v427;
          v167 = v9;
          v546 = (int)v165;
          v168 = 4 * (int)v165;
          v498 = v164 - 1;
          v494 = -v164;
          v520 = v164;
          v502 = 4 * (int)v162;
          v169 = v502 + 4 * __na;
          v170 = 4 * v165;
          do
          {
            v395 = v169;
            if (*(int *)(v167 + 16) >= 1)
            {
              v171 = 0;
              v172 = v411;
              do
              {
                if ((int)v554 >= 1)
                {
                  v173 = 0;
                  v470 = v167;
                  v536 = *(_QWORD *)(v167 + 24) + 4 * v403 * v384 + 4 * v171 * v419;
                  v174 = *(_QWORD *)(v462 + 24);
                  v460 = v171;
                  v528 = v174 + 4 * v403 * v386 + 4 * v171 * v427;
                  v450 = v172;
                  v453 = v169;
                  v175 = (_DWORD *)(v174 + v172);
                  v176 = (_DWORD *)(v174 + v169);
                  do
                  {
                    v177 = v173 - *(__int16 *)(a1 + 292);
                    v178 = *(unsigned __int16 *)(a1 + 282);
                    v179 = v163 - 1;
                    if (v177 < v163)
                      v179 = v173 - *(__int16 *)(a1 + 292);
                    if (v177 < 0)
                      v179 = 0;
                    if (v178 == 1)
                      v177 = v179;
                    if (v177 >= v163 || v177 <= -1)
                      v181 = -1;
                    else
                      v181 = v177;
                    if (!*(_WORD *)(a1 + 282))
                      v177 = v181;
                    if ((v178 & 0xFFFE) == 2)
                    {
                      _ZF = v178 == 3;
                      v182 = v178 == 3;
                      v183 = 2 * v163;
                      v184 = 2 * v163 - 2;
                      if (_ZF)
                        v184 = 2 * v163 - 1;
                      else
                        v183 = 2 * v163 - 2;
                      if (v177 >= 0)
                        v182 = 0;
                      v185 = v177 + v182;
                      if (v185 < 0)
                        v185 = -v185;
                      v177 = v185 % v183;
                      if (v184 - v177 < v177)
                        v177 = v184 - v177;
                    }
                    if (v177 == -1)
                    {
                      if ((int)v546 >= 1)
                      {
                        v199 = 0;
                        do
                        {
                          v175[v199 / 4] = v24;
                          v199 += 4;
                        }
                        while (v170 != v199);
                      }
                    }
                    else
                    {
                      v186 = v162;
                      v187 = (_DWORD *)(v536 + 4 * v177 * (int)v162);
                      v188 = v494;
                      v189 = v498;
                      v190 = v175;
                      v191 = v520;
                      if ((int)v520 >= 1)
                      {
                        do
                        {
                          if (v188 >= -1)
                            v192 = v188 + 1;
                          else
                            v192 = v189;
                          v193 = v192 % v166;
                          if (v166 + ~v193 < v193)
                            v193 = v166 + ~v193;
                          ++v188;
                          *v190++ = v187[v193];
                          --v189;
                          --v191;
                        }
                        while (v191);
                      }
                      memcpy((void *)(v528 + 4 * v173 * v546 + 4 * __na), v187, v502);
                      v162 = v186;
                      v194 = v186;
                      v195 = v176;
                      v196 = v512;
                      if ((int)v512 >= 1)
                      {
                        do
                        {
                          if (v194 >= 0)
                            v197 = v194;
                          else
                            v197 = -v194;
                          v198 = v197 % v166;
                          if (v166 + ~v198 < v198)
                            v198 = v166 + ~v198;
                          *v195++ = v187[v198];
                          ++v194;
                          --v196;
                        }
                        while (v196);
                      }
                    }
                    ++v173;
                    v175 = (_DWORD *)((char *)v175 + v168);
                    v176 = (_DWORD *)((char *)v176 + v168);
                  }
                  while (v173 != v554);
                  v167 = v470;
                  v169 = v453;
                  v171 = v460;
                  v172 = v450;
                }
                ++v171;
                v172 += v446;
                v169 += v446;
              }
              while (v171 < *(int *)(v167 + 16));
            }
            ++v403;
            v411 += v389;
            v169 = v395 + v389;
          }
          while (v403 < *(int *)(v167 + 20));
        }
        v11 = v382;
        v8 = v383;
        if (v382)
        {
          v200 = (unint64_t *)&v382->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
            std::__shared_weak_count::__release_weak(v382);
          }
        }
        if (v383)
        {
          v202 = (unint64_t *)&v383->__shared_owners_;
          do
            v63 = __ldaxr(v202);
          while (__stlxr(v63 - 1, v202));
LABEL_354:
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        break;
      default:
        break;
    }
    if (v11)
    {
      v239 = (unint64_t *)&v11->__shared_owners_;
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v8)
    {
      v241 = (unint64_t *)&v8->__shared_owners_;
      do
        v242 = __ldaxr(v241);
      while (__stlxr(v242 - 1, v241));
      if (!v242)
      {
LABEL_568:
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    if (!v466 || !v458)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type");
    if (v13)
    {
      v64 = (unint64_t *)&v13->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    if (v17)
    {
      v66 = (unint64_t *)&v17->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    _S0 = *(_DWORD *)(a1 + 284);
    __asm { FCVT            H8, S0 }
    v380 = v17;
    v381 = v13;
    switch(*(_WORD *)(a1 + 282))
    {
      case 0:
        if (v13)
        {
          v73 = (unint64_t *)&v13->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        if (v17)
        {
          v75 = (unint64_t *)&v17->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        if (v466[5] >= 1)
        {
          v433 = 0;
          v439 = 0;
          v77 = v466[3];
          v78 = v466[2];
          v79 = *(__int16 *)(a1 + 288);
          v80 = *(unsigned int *)(v458 + 8);
          v81 = (v80 - (v78 + v79));
          v552 = *(unsigned int *)(v458 + 12);
          v449 = (int)v552 * (int)v80;
          v445 = v77 * (int)v78;
          v518 = 2 * v78;
          v409 = *(int *)(v458 + 16) * v449;
          v417 = 2 * v409;
          v401 = v466[4] * v445;
          v476 = 2 * v449;
          v544 = (int)v80;
          v82 = 2 * (int)v80;
          v526 = v466[2];
          v83 = 2 * v79 + 2 * v78;
          v84 = 2 * v80;
          v85 = v466;
          do
          {
            v425 = v83;
            if (v85[4] >= 1)
            {
              v86 = 0;
              v87 = v439;
              do
              {
                if ((int)v552 >= 1)
                {
                  v88 = 0;
                  v468 = v85;
                  v534 = *((_QWORD *)v85 + 3) + 2 * v433 * v401 + 2 * v86 * v445;
                  v89 = *(_QWORD *)(v458 + 24);
                  v488 = v83;
                  v492 = v86;
                  v90 = v89 + 2 * v433 * v409 + 2 * v86 * v449;
                  v482 = v87;
                  v91 = (_WORD *)(v89 + v87);
                  v92 = (_WORD *)(v89 + v83);
                  do
                  {
                    v93 = v88 - *(__int16 *)(a1 + 292);
                    v94 = *(unsigned __int16 *)(a1 + 282);
                    v95 = v77 - 1;
                    if (v93 < v77)
                      v95 = v88 - *(__int16 *)(a1 + 292);
                    if (v93 < 0)
                      v95 = 0;
                    if (v94 == 1)
                      v93 = v95;
                    if (v93 >= v77 || v93 <= -1)
                      v97 = -1;
                    else
                      v97 = v93;
                    if (!*(_WORD *)(a1 + 282))
                      v93 = v97;
                    if ((v94 & 0xFFFE) == 2)
                    {
                      _ZF = v94 == 3;
                      v98 = v94 == 3;
                      v99 = 2 * v77;
                      v100 = 2 * v77 - 2;
                      if (_ZF)
                        v100 = 2 * v77 - 1;
                      else
                        v99 = 2 * v77 - 2;
                      if (v93 >= 0)
                        v98 = 0;
                      v101 = v93 + v98;
                      if (v101 < 0)
                        v101 = -v101;
                      v93 = v101 % v99;
                      if (v100 - v93 < v93)
                        v93 = v100 - v93;
                    }
                    if (v93 == -1)
                    {
                      if ((int)v544 >= 1)
                      {
                        v106 = 0;
                        do
                        {
                          v91[v106 / 2] = _H8;
                          v106 += 2;
                        }
                        while (v84 != v106);
                      }
                    }
                    else
                    {
                      v102 = v91;
                      v103 = v79;
                      if ((int)v79 >= 1)
                      {
                        do
                        {
                          *v102++ = _H8;
                          --v103;
                        }
                        while (v103);
                      }
                      memcpy((void *)(v90 + 2 * v88 * v544 + 2 * v79), (const void *)(v534 + 2 * v93 * v526), v518);
                      v104 = v92;
                      v105 = v81;
                      if ((int)v81 >= 1)
                      {
                        do
                        {
                          *v104++ = _H8;
                          --v105;
                        }
                        while (v105);
                      }
                    }
                    ++v88;
                    v91 = (_WORD *)((char *)v91 + v82);
                    v92 = (_WORD *)((char *)v92 + v82);
                  }
                  while (v88 != v552);
                  v85 = v468;
                  v83 = v488;
                  v86 = v492;
                  v87 = v482;
                }
                ++v86;
                v87 += v476;
                v83 += v476;
              }
              while (v86 < v85[4]);
            }
            ++v433;
            v439 += v417;
            v83 = v425 + v417;
          }
          while (v433 < v85[5]);
        }
        v17 = v380;
        v13 = v381;
        if (v380)
        {
          v107 = (unint64_t *)&v380->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
            std::__shared_weak_count::__release_weak(v380);
          }
        }
        if (v381)
        {
          v109 = (unint64_t *)&v381->__shared_owners_;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          goto LABEL_557;
        }
        break;
      case 1:
        if (v13)
        {
          v331 = (unint64_t *)&v13->__shared_owners_;
          do
            v332 = __ldxr(v331);
          while (__stxr(v332 + 1, v331));
        }
        if (v17)
        {
          v333 = (unint64_t *)&v17->__shared_owners_;
          do
            v334 = __ldxr(v333);
          while (__stxr(v334 + 1, v333));
        }
        if (v466[5] >= 1)
        {
          v423 = 0;
          v431 = 0;
          v335 = v466[3];
          v336 = v466[2];
          v337 = *(__int16 *)(a1 + 288);
          v338 = *(unsigned int *)(v458 + 8);
          v516 = (v338 - (v336 + v337));
          v558 = *(unsigned int *)(v458 + 12);
          v443 = (int)v558 * (int)v338;
          v437 = v335 * (int)v336;
          __ne = 2 * v336;
          v399 = *(int *)(v458 + 16) * v443;
          v407 = 2 * v399;
          v393 = v466[4] * v437;
          v339 = v336 - 1;
          v457 = 2 * v443;
          v550 = (int)v338;
          v340 = 2 * (int)v338;
          v524 = v466[2];
          v341 = 2 * v337 + 2 * v336;
          v342 = 2 * v338;
          v343 = v466;
          do
          {
            v415 = v341;
            if (v343[4] >= 1)
            {
              v344 = 0;
              v345 = v431;
              do
              {
                if ((int)v558 >= 1)
                {
                  v346 = 0;
                  v474 = v343;
                  v540 = *((_QWORD *)v343 + 3) + 2 * v423 * v393 + 2 * v344 * v437;
                  v347 = *(_QWORD *)(v458 + 24);
                  v486 = v344;
                  v532 = v347 + 2 * v423 * v399 + 2 * v344 * v443;
                  v465 = v345;
                  v348 = (_WORD *)(v347 + v345);
                  v480 = v341;
                  v349 = (_WORD *)(v347 + v341);
                  do
                  {
                    v350 = v346 - *(__int16 *)(a1 + 292);
                    v351 = *(unsigned __int16 *)(a1 + 282);
                    v352 = v335 - 1;
                    if (v350 < v335)
                      v352 = v346 - *(__int16 *)(a1 + 292);
                    if (v350 < 0)
                      v352 = 0;
                    if (v351 == 1)
                      v350 = v352;
                    if (v350 >= v335 || v350 <= -1)
                      v354 = -1;
                    else
                      v354 = v350;
                    if (!*(_WORD *)(a1 + 282))
                      v350 = v354;
                    if ((v351 & 0xFFFE) == 2)
                    {
                      _ZF = v351 == 3;
                      v355 = v351 == 3;
                      v356 = 2 * v335;
                      v357 = 2 * v335 - 2;
                      if (_ZF)
                        v357 = 2 * v335 - 1;
                      else
                        v356 = 2 * v335 - 2;
                      if (v350 >= 0)
                        v355 = 0;
                      v358 = v350 + v355;
                      if (v358 < 0)
                        v358 = -v358;
                      v350 = v358 % v356;
                      if (v357 - v350 < v350)
                        v350 = v357 - v350;
                    }
                    if (v350 == -1)
                    {
                      if ((int)v550 >= 1)
                      {
                        v364 = 0;
                        do
                        {
                          v348[v364 / 2] = _H8;
                          v364 += 2;
                        }
                        while (v342 != v364);
                      }
                    }
                    else
                    {
                      v359 = (_WORD *)(v540 + 2 * v350 * v524);
                      v360 = v348;
                      v361 = v337;
                      if ((int)v337 >= 1)
                      {
                        do
                        {
                          *v360++ = *v359;
                          --v361;
                        }
                        while (v361);
                      }
                      memcpy((void *)(v532 + 2 * v346 * v550 + 2 * v337), v359, __ne);
                      v362 = v349;
                      v363 = v516;
                      if ((int)v516 >= 1)
                      {
                        do
                        {
                          *v362++ = v359[v339];
                          --v363;
                        }
                        while (v363);
                      }
                    }
                    ++v346;
                    v348 = (_WORD *)((char *)v348 + v340);
                    v349 = (_WORD *)((char *)v349 + v340);
                  }
                  while (v346 != v558);
                  v343 = v474;
                  v341 = v480;
                  v344 = v486;
                  v345 = v465;
                }
                ++v344;
                v345 += v457;
                v341 += v457;
              }
              while (v344 < v343[4]);
            }
            ++v423;
            v431 += v407;
            v341 = v415 + v407;
          }
          while (v423 < v343[5]);
        }
        v17 = v380;
        v13 = v381;
        if (v380)
        {
          v365 = (unint64_t *)&v380->__shared_owners_;
          do
            v366 = __ldaxr(v365);
          while (__stlxr(v366 - 1, v365));
          if (!v366)
          {
            ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
            std::__shared_weak_count::__release_weak(v380);
          }
        }
        if (v381)
        {
          v367 = (unint64_t *)&v381->__shared_owners_;
          do
            v110 = __ldaxr(v367);
          while (__stlxr(v110 - 1, v367));
          goto LABEL_557;
        }
        break;
      case 2:
        if (v13)
        {
          v243 = (unint64_t *)&v13->__shared_owners_;
          do
            v244 = __ldxr(v243);
          while (__stxr(v244 + 1, v243));
        }
        if (v17)
        {
          v245 = (unint64_t *)&v17->__shared_owners_;
          do
            v246 = __ldxr(v245);
          while (__stxr(v246 + 1, v245));
        }
        if (v466[5] >= 1)
        {
          v421 = 0;
          v429 = 0;
          v247 = v466[2];
          v248 = v466[3];
          v249 = *(__int16 *)(a1 + 288);
          v250 = *(unsigned int *)(v458 + 8);
          v514 = (v250 - (v247 + v249));
          v556 = *(unsigned int *)(v458 + 12);
          v436 = v248 * (int)v247;
          v442 = (int)v556 * (int)v250;
          __nc = *(__int16 *)(a1 + 288);
          v391 = v466[4] * v436;
          v397 = *(int *)(v458 + 16) * v442;
          v405 = 2 * v397;
          v548 = v248;
          v538 = v248 - 1;
          v455 = 2 * v442;
          v251 = v466;
          v495 = 2 * v248 - 2;
          v499 = 2 * v248;
          v490 = 2 * v248 - 1;
          v252 = 2 * v247 - 2;
          v542 = (int)v250;
          v253 = 2 * (int)v250;
          v503 = 2 * (int)v247;
          v254 = v503 + 2 * __nc;
          v255 = 2 * v250;
          do
          {
            v413 = v254;
            if (v251[4] >= 1)
            {
              v256 = 0;
              v257 = v429;
              do
              {
                if ((int)v556 >= 1)
                {
                  v258 = 0;
                  v472 = v251;
                  v530 = *((_QWORD *)v251 + 3) + 2 * v421 * v391 + 2 * v256 * v436;
                  v259 = *(_QWORD *)(v458 + 24);
                  v485 = v256;
                  v522 = v259 + 2 * v421 * v397 + 2 * v256 * v442;
                  v463 = v257;
                  v260 = (_WORD *)(v259 + v257);
                  v479 = v254;
                  v261 = (_WORD *)(v259 + v254);
                  do
                  {
                    v262 = v258 - *(__int16 *)(a1 + 292);
                    v263 = *(unsigned __int16 *)(a1 + 282);
                    v264 = v538;
                    if (v262 < v548)
                      v264 = v258 - *(__int16 *)(a1 + 292);
                    if (v262 < 0)
                      v264 = 0;
                    if (v263 == 1)
                      v262 = v264;
                    if (v262 >= v548 || v262 <= -1)
                      v266 = -1;
                    else
                      v266 = v262;
                    if (!*(_WORD *)(a1 + 282))
                      v262 = v266;
                    if ((v263 & 0xFFFE) == 2)
                    {
                      _ZF = v263 == 3;
                      v267 = v263 == 3;
                      v268 = v499;
                      v269 = v495;
                      if (_ZF)
                        v269 = v490;
                      else
                        v268 = v495;
                      if (v262 >= 0)
                        v267 = 0;
                      v270 = v262 + v267;
                      if (v270 < 0)
                        v270 = -v270;
                      v262 = v270 % v268;
                      if (v269 - v262 < v262)
                        v262 = v269 - v262;
                    }
                    if (v262 == -1)
                    {
                      if ((int)v542 >= 1)
                      {
                        v282 = 0;
                        do
                        {
                          v260[v282 / 2] = _H8;
                          v282 += 2;
                        }
                        while (v255 != v282);
                      }
                    }
                    else
                    {
                      v271 = a1;
                      v272 = v247;
                      v273 = (_WORD *)(v530 + 2 * v262 * (int)v247);
                      if ((int)v249 >= 1)
                      {
                        v274 = 0;
                        v275 = v260;
                        do
                        {
                          v276 = ((int)v249 + (int)v274) % v252;
                          if (v252 - v276 < v276)
                            v276 = v252 - v276;
                          *v275++ = v273[v276];
                          --v274;
                        }
                        while (v249 + v274);
                      }
                      memcpy((void *)(v522 + 2 * v258 * v542 + 2 * __nc), v273, v503);
                      v247 = v272;
                      v277 = v272;
                      v278 = v261;
                      v279 = v514;
                      a1 = v271;
                      if ((int)v514 >= 1)
                      {
                        do
                        {
                          if (v277 >= 0)
                            v280 = v277;
                          else
                            v280 = -v277;
                          v281 = v280 % v252;
                          if (v252 - v281 < v281)
                            v281 = v252 - v281;
                          *v278++ = v273[v281];
                          ++v277;
                          --v279;
                        }
                        while (v279);
                      }
                    }
                    ++v258;
                    v260 = (_WORD *)((char *)v260 + v253);
                    v261 = (_WORD *)((char *)v261 + v253);
                  }
                  while (v258 != v556);
                  v251 = v472;
                  v254 = v479;
                  v256 = v485;
                  v257 = v463;
                }
                ++v256;
                v257 += v455;
                v254 += v455;
              }
              while (v256 < v251[4]);
            }
            ++v421;
            v429 += v405;
            v254 = v413 + v405;
          }
          while (v421 < v251[5]);
        }
        v17 = v380;
        v13 = v381;
        if (v380)
        {
          v283 = (unint64_t *)&v380->__shared_owners_;
          do
            v284 = __ldaxr(v283);
          while (__stlxr(v284 - 1, v283));
          if (!v284)
          {
            ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
            std::__shared_weak_count::__release_weak(v380);
          }
        }
        if (v381)
        {
          v285 = (unint64_t *)&v381->__shared_owners_;
          do
            v110 = __ldaxr(v285);
          while (__stlxr(v110 - 1, v285));
          goto LABEL_557;
        }
        break;
      case 3:
        if (v13)
        {
          v286 = (unint64_t *)&v13->__shared_owners_;
          do
            v287 = __ldxr(v286);
          while (__stxr(v287 + 1, v286));
        }
        if (v17)
        {
          v288 = (unint64_t *)&v17->__shared_owners_;
          do
            v289 = __ldxr(v288);
          while (__stxr(v289 + 1, v288));
        }
        if (v466[5] >= 1)
        {
          v406 = 0;
          v414 = 0;
          v290 = v466[2];
          v291 = v466[3];
          v292 = *(__int16 *)(a1 + 288);
          v293 = *(unsigned int *)(v458 + 8);
          v515 = v293 - ((_DWORD)v290 + v292);
          v557 = *(unsigned int *)(v458 + 12);
          v430 = (int)v557 * (int)v293;
          v422 = v291 * (int)v290;
          v294 = 2 * v290;
          __nd = *(__int16 *)(a1 + 288);
          v385 = v466[4] * v422;
          v387 = *(int *)(v458 + 16) * v430;
          v392 = 2 * v387;
          v447 = 2 * v430;
          v295 = v466;
          v549 = (int)v293;
          v296 = 2 * (int)v293;
          v500 = v292 - 1;
          v496 = -v292;
          v523 = v292;
          v504 = 2 * (int)v290;
          v297 = v504 + 2 * __nd;
          v298 = 2 * v293;
          do
          {
            v398 = v297;
            if (v295[4] >= 1)
            {
              v299 = 0;
              v300 = v414;
              do
              {
                if ((int)v557 >= 1)
                {
                  v301 = 0;
                  v473 = v295;
                  v539 = *((_QWORD *)v295 + 3) + 2 * v406 * v385 + 2 * v299 * v422;
                  v302 = *(_QWORD *)(v458 + 24);
                  v464 = v299;
                  v531 = v302 + 2 * v406 * v387 + 2 * v299 * v430;
                  v451 = v300;
                  v456 = v297;
                  v303 = (_WORD *)(v302 + v300);
                  v304 = (_WORD *)(v302 + v297);
                  do
                  {
                    v305 = v301 - *(__int16 *)(a1 + 292);
                    v306 = *(unsigned __int16 *)(a1 + 282);
                    v307 = v291 - 1;
                    if (v305 < v291)
                      v307 = v301 - *(__int16 *)(a1 + 292);
                    if (v305 < 0)
                      v307 = 0;
                    if (v306 == 1)
                      v305 = v307;
                    if (v305 >= v291 || v305 <= -1)
                      v309 = -1;
                    else
                      v309 = v305;
                    if (!*(_WORD *)(a1 + 282))
                      v305 = v309;
                    if ((v306 & 0xFFFE) == 2)
                    {
                      _ZF = v306 == 3;
                      v310 = v306 == 3;
                      v311 = 2 * v291;
                      v312 = 2 * v291 - 2;
                      if (_ZF)
                        v312 = 2 * v291 - 1;
                      else
                        v311 = 2 * v291 - 2;
                      if (v305 >= 0)
                        v310 = 0;
                      v313 = v305 + v310;
                      if (v313 < 0)
                        v313 = -v313;
                      v305 = v313 % v311;
                      if (v312 - v305 < v305)
                        v305 = v312 - v305;
                    }
                    if (v305 == -1)
                    {
                      if ((int)v549 >= 1)
                      {
                        v327 = 0;
                        do
                        {
                          v303[v327 / 2] = _H8;
                          v327 += 2;
                        }
                        while (v298 != v327);
                      }
                    }
                    else
                    {
                      v314 = v290;
                      v315 = (_WORD *)(v539 + 2 * v305 * (int)v290);
                      v316 = v496;
                      v317 = v500;
                      v318 = v303;
                      v319 = v523;
                      if ((int)v523 >= 1)
                      {
                        do
                        {
                          if (v316 >= -1)
                            v320 = v316 + 1;
                          else
                            v320 = v317;
                          v321 = v320 % v294;
                          if (v294 + ~v321 < v321)
                            v321 = v294 + ~v321;
                          ++v316;
                          *v318++ = v315[v321];
                          --v317;
                          --v319;
                        }
                        while (v319);
                      }
                      memcpy((void *)(v531 + 2 * v301 * v549 + 2 * __nd), v315, v504);
                      v290 = v314;
                      v322 = v314;
                      v323 = v304;
                      v324 = v515;
                      if ((int)v515 >= 1)
                      {
                        do
                        {
                          if (v322 >= 0)
                            v325 = v322;
                          else
                            v325 = -v322;
                          v326 = v325 % v294;
                          if (v294 + ~v326 < v326)
                            v326 = v294 + ~v326;
                          *v323++ = v315[v326];
                          ++v322;
                          --v324;
                        }
                        while (v324);
                      }
                    }
                    ++v301;
                    v303 = (_WORD *)((char *)v303 + v296);
                    v304 = (_WORD *)((char *)v304 + v296);
                  }
                  while (v301 != v557);
                  v299 = v464;
                  v295 = v473;
                  v300 = v451;
                  v297 = v456;
                }
                ++v299;
                v300 += v447;
                v297 += v447;
              }
              while (v299 < v295[4]);
            }
            ++v406;
            v414 += v392;
            v297 = v398 + v392;
          }
          while (v406 < v295[5]);
        }
        v17 = v380;
        v13 = v381;
        if (v380)
        {
          v328 = (unint64_t *)&v380->__shared_owners_;
          do
            v329 = __ldaxr(v328);
          while (__stlxr(v329 - 1, v328));
          if (!v329)
          {
            ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
            std::__shared_weak_count::__release_weak(v380);
          }
        }
        if (v381)
        {
          v330 = (unint64_t *)&v381->__shared_owners_;
          do
            v110 = __ldaxr(v330);
          while (__stlxr(v110 - 1, v330));
LABEL_557:
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        break;
      default:
        break;
    }
    if (v17)
    {
      v368 = (unint64_t *)&v17->__shared_owners_;
      do
        v369 = __ldaxr(v368);
      while (__stlxr(v369 - 1, v368));
      if (!v369)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v13)
    {
      v370 = (unint64_t *)&v13->__shared_owners_;
      do
        v371 = __ldaxr(v370);
      while (__stlxr(v371 - 1, v370));
      v8 = v13;
      if (!v371)
        goto LABEL_568;
    }
  }
  if (v559)
  {
    v372 = (unint64_t *)&v559->__shared_owners_;
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
      std::__shared_weak_count::__release_weak(v559);
    }
  }
  if (v560)
  {
    v374 = (unint64_t *)&v560->__shared_owners_;
    do
      v375 = __ldaxr(v374);
    while (__stlxr(v375 - 1, v374));
    if (!v375)
    {
      ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
      std::__shared_weak_count::__release_weak(v560);
    }
  }
  if (v561)
  {
    v376 = (unint64_t *)&v561->__shared_owners_;
    do
      v377 = __ldaxr(v376);
    while (__stlxr(v377 - 1, v376));
    if (!v377)
    {
      ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
      std::__shared_weak_count::__release_weak(v561);
    }
  }
  if (v562)
  {
    v378 = (unint64_t *)&v562->__shared_owners_;
    do
      v379 = __ldaxr(v378);
    while (__stlxr(v379 - 1, v378));
    if (!v379)
    {
      ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
      std::__shared_weak_count::__release_weak(v562);
    }
  }
}

void sub_1917D050C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

void Espresso::crop_kernel_cpu::~crop_kernel_cpu(Espresso::crop_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::crop_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  _DWORD *v45;
  int *v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  __int16 *v75;
  _WORD *v76;
  __int16 *v77;
  _WORD *v78;
  uint64_t v79;
  __int16 v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;

  v7 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v9 = 0;
    v100 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v8 = *(std::__shared_weak_count **)(*v7 + 168);
    v100 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v94 = __ldxr(p_shared_owners);
      while (__stxr(v94 + 1, p_shared_owners));
    }
  }
  v10 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v10 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v11 = 0;
    v12 = 0;
    v99 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(*v10 + 160);
    v11 = *(std::__shared_weak_count **)(*v10 + 168);
    v99 = v11;
    if (v11)
    {
      v95 = (unint64_t *)&v11->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
  }
  v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v13)
  {
    v15 = v13[22];
    v14 = (std::__shared_weak_count *)v13[23];
    v98 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v98 = 0;
  }
  v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v18)
  {
    v19 = *((_QWORD *)v18 + 22);
    v20 = (std::__shared_weak_count *)*((_QWORD *)v18 + 23);
    v97 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (!v9)
      goto LABEL_50;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v97 = 0;
    if (!v9)
      goto LABEL_50;
  }
  if (v12)
  {
    if (v8)
    {
      v23 = (unint64_t *)&v8->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (v11)
    {
      v25 = (unint64_t *)&v11->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *(unsigned int *)(v9 + 20);
    if ((int)v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v32 = *(unsigned int *)(v12 + 8);
      v31 = *(unsigned int *)(v12 + 12);
      v33 = *(unsigned int *)(v9 + 16);
      v34 = *(int *)(v9 + 8);
      v35 = *(_DWORD *)(v9 + 12) * v34;
      v36 = 4 * (int)v31 * (int)v32 * *(_DWORD *)(v12 + 16);
      v37 = 4 * v35 * (int)v33;
      v38 = 4 * v34;
      v39 = 4 * v35;
      do
      {
        if ((int)v33 >= 1)
        {
          v40 = 0;
          v41 = (_DWORD *)(*(_QWORD *)(v12 + 24) + v29);
          v42 = *(_QWORD *)(v9 + 24) + v28 + v38 * *(int *)(a1 + 288);
          do
          {
            if ((int)v31 >= 1)
            {
              v43 = 0;
              v44 = (int *)(v42 + 4 * *(int *)(a1 + 280));
              v45 = v41;
              do
              {
                v46 = v44;
                v47 = v45;
                v48 = v32;
                if ((int)v32 >= 1)
                {
                  do
                  {
                    v49 = *v46++;
                    *v47++ = v49;
                    --v48;
                  }
                  while (v48);
                }
                ++v43;
                v45 += (int)v32;
                v44 = (int *)((char *)v44 + v38);
              }
              while (v43 != v31);
            }
            ++v40;
            v41 += (int)v31 * (int)v32;
            v42 += v39;
          }
          while (v40 != v33);
        }
        ++v30;
        v29 += v36;
        v28 += v37;
      }
      while (v30 != v27);
    }
    if (v11)
    {
      v50 = (unint64_t *)&v11->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v8)
    {
      v52 = (unint64_t *)&v8->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
        goto LABEL_78;
    }
    goto LABEL_79;
  }
LABEL_50:
  if (!v15 || !v19)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type");
  if (v14)
  {
    v54 = (unint64_t *)&v14->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  if (v20)
  {
    v56 = (unint64_t *)&v20->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = *(unsigned int *)(v15 + 20);
  if ((int)v58 >= 1)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v63 = *(unsigned int *)(v19 + 8);
    v62 = *(unsigned int *)(v19 + 12);
    v64 = *(unsigned int *)(v15 + 16);
    v65 = *(int *)(v15 + 8);
    v66 = *(_DWORD *)(v15 + 12) * v65;
    v67 = 2 * (int)v62 * (int)v63 * *(_DWORD *)(v19 + 16);
    v68 = 2 * v66 * (int)v64;
    v69 = 2 * v65;
    v70 = 2 * v66;
    do
    {
      if ((int)v64 >= 1)
      {
        v71 = 0;
        v72 = (_WORD *)(*(_QWORD *)(v19 + 24) + v60);
        v73 = *(_QWORD *)(v15 + 24) + v59 + v69 * *(int *)(a1 + 288);
        do
        {
          if ((int)v62 >= 1)
          {
            v74 = 0;
            v75 = (__int16 *)(v73 + 2 * *(int *)(a1 + 280));
            v76 = v72;
            do
            {
              v77 = v75;
              v78 = v76;
              v79 = v63;
              if ((int)v63 >= 1)
              {
                do
                {
                  v80 = *v77++;
                  *v78++ = v80;
                  --v79;
                }
                while (v79);
              }
              ++v74;
              v76 += (int)v63;
              v75 = (__int16 *)((char *)v75 + v69);
            }
            while (v74 != v62);
          }
          ++v71;
          v72 += (int)v62 * (int)v63;
          v73 += v70;
        }
        while (v71 != v64);
      }
      ++v61;
      v60 += v67;
      v59 += v68;
    }
    while (v61 != v58);
  }
  if (v20)
  {
    v81 = (unint64_t *)&v20->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v14)
  {
    v83 = (unint64_t *)&v14->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    v8 = v14;
    if (!v84)
    {
LABEL_78:
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_79:
  if (v97)
  {
    v85 = (unint64_t *)&v97->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v98)
  {
    v87 = (unint64_t *)&v98->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (v99)
  {
    v89 = (unint64_t *)&v99->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (v100)
  {
    v91 = (unint64_t *)&v100->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
}

void sub_1917D0B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::batchnorm_kernel_cpu::~batchnorm_kernel_cpu(Espresso::batchnorm_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D85C18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D85C18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::batchnorm_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  std::__shared_weak_count *v22;
  void *v23;
  _DWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t width_high;
  uint64_t v31;
  vImage_Buffer *p_dest;
  uint64_t v33;
  int data;
  int *v35;
  int v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  float v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const float *v68;
  float *v69;
  unsigned int v70;
  float v71;
  int v72;
  float *v73;
  uint64_t v74;
  float v75;
  float *v76;
  float *v77;
  uint64_t v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  uint64_t v83;
  float v84;
  int v85;
  float *v86;
  uint64_t v87;
  float v88;
  float *v90;
  uint64_t v91;
  _WORD *v92;
  uint64_t v93;
  float v94;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  vImagePixelCount v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  void *v145;
  vImagePixelCount v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  float *v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float *v155;
  float *v156;
  int v157;
  float v158;
  float v159;
  int v160;
  float *v161;
  vDSP_Length v162;
  float v163;
  BOOL v164;
  float *v165;
  vDSP_Length v166;
  uint64_t v167;
  int *v168;
  _WORD *v169;
  int v170;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *p_shared_owners;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  int v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  float v216;
  size_t v217;
  uint64_t v218;
  uint64_t v219;
  float *v220;
  unsigned int v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  float v225;
  float *v226;
  uint64_t v227;
  float v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  float v233;
  uint64_t v234;
  const float *v235;
  uint64_t v236;
  float v237;
  float *v238;
  const float *v239;
  float *v240;
  uint64_t v241;
  float v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  float v247;
  float *v248;
  float *v249;
  float *v250;
  uint64_t v251;
  float v252;
  int v253;
  float *v254;
  uint64_t v255;
  BOOL v256;
  float *v257;
  uint64_t v258;
  _WORD *v259;
  uint64_t v260;
  float v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  std::__shared_weak_count *v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  __int128 v296;
  int v297;
  __n128 v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  vDSP_Length __N;
  vDSP_Length __Na;
  _QWORD *__Nb;
  unsigned int v310;
  void *__B;
  vImagePixelCount height;
  __int128 __C;
  __n128 v315;
  __int128 v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  vImage_Buffer src;
  void *v326;
  void *v327;
  _DWORD v328[2];
  vImage_Buffer dest;

  v5 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v5 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5))
  {
    v6 = 0;
    v323 = 0;
    v324 = 0;
  }
  else
  {
    v176 = *v5;
    v6 = *(_QWORD *)(*v5 + 160);
    v177 = *(std::__shared_weak_count **)(v176 + 168);
    v323 = v6;
    v324 = v177;
    if (v177)
    {
      p_shared_owners = (unint64_t *)&v177->__shared_owners_;
      do
        v179 = __ldxr(p_shared_owners);
      while (__stxr(v179 + 1, p_shared_owners));
    }
  }
  v7 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v321 = 0;
    v322 = 0;
  }
  else
  {
    v180 = *v7;
    v8 = *(_QWORD *)(*v7 + 160);
    v181 = *(std::__shared_weak_count **)(v180 + 168);
    v321 = v8;
    v322 = v181;
    if (v181)
    {
      v182 = (unint64_t *)&v181->__shared_owners_;
      do
        v183 = __ldxr(v182);
      while (__stxr(v183 + 1, v182));
    }
  }
  v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v9)
  {
    v11 = v9[22];
    v10 = (std::__shared_weak_count *)v9[23];
    v319 = v11;
    v320 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v11 = 0;
    v319 = 0;
    v320 = 0;
  }
  v14 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v14)
  {
    v15 = v14[22];
    v16 = (std::__shared_weak_count *)v14[23];
    v317 = v15;
    v318 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    v15 = 0;
    v317 = 0;
    v318 = 0;
  }
  if (!(v6 | v11) || !(v8 | v15))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type");
  v19 = *(unsigned int *)(a1 + 376);
  if ((_DWORD)v19 != 2)
  {
    if ((v19 - 4) <= 0xFFFFFFFC)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent input tensor rank and operator rank specification");
    Espresso::abstract_blob_container::shape((char *)&src, *(_QWORD *)*a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&dest, (const Espresso::layer_shape *)&src, 0);
    if (v326)
    {
      v327 = v326;
      operator delete(v326);
    }
    if (SHIDWORD(dest.width) >= v19 + 2)
      v28 = v328[SHIDWORD(dest.width) - v19];
    else
      v28 = 1;
    if (SHIDWORD(dest.width) >= v19 + 1)
      v29 = *((_DWORD *)&dest.data + SHIDWORD(dest.width) + ~v19);
    else
      v29 = 1;
    if (SHIDWORD(dest.width) >= v19)
      width_high = v19;
    else
      width_high = HIDWORD(dest.width);
    v31 = SHIDWORD(dest.width) - width_high - 2;
    if (v31 < 1)
    {
      v33 = a1;
      if ((_DWORD)width_high)
      {
LABEL_49:
        v35 = (int *)&dest + SHIDWORD(dest.width) - 1;
        v36 = 1;
        do
        {
          v37 = *v35--;
          v36 *= v37;
          --width_high;
        }
        while (width_high);
        goto LABEL_67;
      }
    }
    else
    {
      p_dest = &dest;
      v33 = a1;
      do
      {
        data = (int)p_dest->data;
        p_dest = (vImage_Buffer *)((char *)p_dest + 4);
        v28 *= data;
        --v31;
      }
      while (v31);
      if ((_DWORD)width_high)
        goto LABEL_49;
    }
    v36 = 1;
LABEL_67:
    v310 = v36;
    goto LABEL_68;
  }
  v20 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v20 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v20 + 32))(*v20))
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v282 = *v20;
    v21 = *(_DWORD **)(*v20 + 160);
    v22 = *(std::__shared_weak_count **)(v282 + 168);
    if (v22)
    {
      v283 = (unint64_t *)&v22->__shared_owners_;
      do
        v284 = __ldxr(v283);
      while (__stxr(v284 + 1, v283));
    }
  }
  v23 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v23)
  {
    v24 = (_DWORD *)*((_QWORD *)v23 + 22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)v23 + 23);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  if (v21)
    v24 = v21;
  v29 = v24[4];
  v28 = v24[5];
  v310 = v24[2] * v24[3];
  v33 = a1;
  if (v25)
  {
    v38 = (unint64_t *)&v25->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v22)
  {
    v40 = (unint64_t *)&v22->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_68:
  v291 = v29;
  v42 = v29;
  __N = v29 * v310;
  v43 = v28;
  v301 = v42;
  v302 = v28;
  if (!*(_DWORD *)(v33 + 308))
  {
    v114 = *a4;
    if ((unint64_t)(a4[1] - *a4) < 0x11)
    {
      v120 = a1;
      v135 = *(_QWORD *)(a1 + 400);
      v115 = v310;
      if (!v135)
        goto LABEL_378;
      v122 = *(_QWORD *)(v135 + 16);
    }
    else
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v114 + 16) + 32))(*(_QWORD *)(v114 + 16));
      v115 = v310;
      v116 = *(_QWORD *)(v114 + 16);
      v117 = *(_QWORD *)(v116 + 160);
      v118 = *(std::__shared_weak_count **)(v116 + 168);
      if (!v118)
      {
        v122 = *(_QWORD *)(v117 + 24);
        v120 = a1;
        if (!v122)
          goto LABEL_378;
        goto LABEL_180;
      }
      v119 = (unint64_t *)&v118->__shared_owners_;
      v120 = a1;
      do
        v121 = __ldxr(v119);
      while (__stxr(v121 + 1, v119));
      v122 = *(_QWORD *)(v117 + 24);
      v123 = (unint64_t *)&v118->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
        if (!v122)
LABEL_378:
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("batchnorm_coefs is neither provided as a second input nor set as kernel property");
        goto LABEL_180;
      }
    }
    if (!v122)
      goto LABEL_378;
LABEL_180:
    if (!v43)
      goto LABEL_352;
    v136 = 0;
    v137 = 0;
    while (1)
    {
      v316 = 0uLL;
      v315 = 0uLL;
      v138 = v323;
      if (v323)
      {
        v304 = v323;
        v139 = *(_QWORD *)(v323 + 24);
        v140 = operator new(0x60uLL);
        v140[1] = 0;
        v140[2] = 0;
        v140[3] = &off_1E2DA11D0;
        v141 = (char *)(v140 + 3);
        *v140 = &off_1E2DBEC70;
        *((_OWORD *)v140 + 4) = 0u;
        *((_OWORD *)v140 + 5) = 0u;
        *((_DWORD *)v140 + 8) = v310;
        *((_DWORD *)v140 + 9) = v291;
        *((_DWORD *)v140 + 10) = 1;
        v140[6] = v139 + 4 * v137 * (int)__N;
        *((_BYTE *)v140 + 56) = 0;
        *(_QWORD *)&v316 = v140 + 3;
        *((_QWORD *)&v316 + 1) = v140;
        v142 = *(_QWORD *)(v321 + 24);
        v143 = (std::__shared_weak_count *)operator new(0x60uLL);
        v143->__shared_owners_ = 0;
        v143->__shared_weak_owners_ = 0;
        v143->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC70;
        v143[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11D0;
        v144 = v143 + 1;
        *(_OWORD *)&v143[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v143[3].__shared_owners_ = 0u;
        LODWORD(v143[1].__shared_owners_) = v310;
        HIDWORD(v143[1].__shared_owners_) = v291;
        LODWORD(v143[1].__shared_weak_owners_) = 1;
        v143[2].__vftable = (std::__shared_weak_count_vtbl *)(v142 + 4 * v137 * (int)__N);
        LOBYTE(v143[2].__shared_owners_) = 0;
        v315.n128_u64[0] = (unint64_t)&v143[1];
        v315.n128_u64[1] = (unint64_t)v143;
        v120 = a1;
        v115 = v310;
        v42 = v301;
        v138 = v304;
        if (!v291)
          goto LABEL_191;
      }
      else
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&src, v115, v291, 1, 1);
        v305 = (char *)src.data;
        v316 = *(_OWORD *)&src.data;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&src, v115, v291, 1, 1);
        v315 = *(__n128 *)&src.data;
        v296 = *(_OWORD *)&src.data;
        v145 = (void *)*((_QWORD *)src.data + 3);
        v146 = *(int *)(v315.n128_u64[0] + 12) * (uint64_t)*((int *)src.data + 2) * *(int *)(v315.n128_u64[0] + 16);
        src.data = (void *)(*(_QWORD *)(v317 + 24) + 2 * v137 * (int)__N);
        src.height = 1;
        src.width = v146;
        src.rowBytes = 2 * v146;
        dest.data = v145;
        dest.height = 1;
        dest.width = v146;
        dest.rowBytes = 4 * v146;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        v141 = v305;
        v143 = (std::__shared_weak_count *)*((_QWORD *)&v296 + 1);
        v144 = (std::__shared_weak_count *)v296;
        if (!v291)
          goto LABEL_191;
      }
      v147 = 0;
      v148 = 0;
      do
      {
        if (v115)
        {
          v149 = 4 * v148;
          v150 = (float *)(v122 + 16 * v147);
          v151 = *v150;
          v152 = v150[1];
          v153 = v150[2];
          v154 = v150[3];
          v155 = (float *)(*((_QWORD *)v141 + 3) + v149);
          v156 = (float *)((char *)v144[1].__vftable + v149);
          v157 = v115;
          v158 = 1.0 / v154;
          do
          {
            v159 = *v156++;
            *v155++ = v152 + (float)((float)(v158 * (float)(v159 - v153)) * v151);
            --v157;
          }
          while (v157);
        }
        ++v147;
        v148 += v115;
      }
      while (v147 != v42);
LABEL_191:
      v160 = *(_DWORD *)(v120 + 332);
      if (v160 == 1)
      {
        LODWORD(src.data) = 0;
        vDSP_vthr(*((const float **)v141 + 3), 1, (const float *)&src, *((float **)v141 + 3), 1, __N);
LABEL_200:
        if (*(_DWORD *)(v120 + 328))
          v164 = (_DWORD)__N == 0;
        else
          v164 = 1;
        if (!v164)
        {
          v165 = (float *)*((_QWORD *)v141 + 3);
          v166 = __N;
          do
          {
            *v165 = tanhf(*v165);
            ++v165;
            --v166;
          }
          while (v166);
        }
        goto LABEL_206;
      }
      if (v160 != 2)
        goto LABEL_200;
      if ((_DWORD)__N)
      {
        v161 = (float *)*((_QWORD *)v141 + 3);
        v162 = __N;
        v120 = a1;
        do
        {
          v163 = *v161;
          if (*v161 <= 0.0)
            v163 = v163 * *(float *)(a1 + 340);
          *v161++ = v163;
          --v162;
        }
        while (v162);
        goto LABEL_200;
      }
LABEL_206:
      if (!v138)
      {
        v167 = *((int *)v141 + 3) * (uint64_t)*((int *)v141 + 2) * *((int *)v141 + 4);
        if (v167)
        {
          v168 = (int *)*((_QWORD *)v141 + 3);
          v169 = (_WORD *)(*(_QWORD *)(v319 + 24) + v136);
          do
          {
            v170 = *v168++;
            _S0 = v170;
            __asm { FCVT            H0, S0 }
            *v169++ = _S0;
            --v167;
          }
          while (v167);
        }
      }
      v115 = v310;
      if (v143)
      {
        v172 = (unint64_t *)&v143->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v120 = a1;
      if (*((_QWORD *)&v316 + 1))
      {
        v174 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v316 + 1) + 16))(*((_QWORD *)&v316 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v316 + 1));
        }
      }
      ++v137;
      v136 += 2 * (int)__N;
      if (v137 == v302)
        goto LABEL_352;
    }
  }
  v44 = *(_DWORD *)(v33 + 312);
  v45 = v310;
  if (!v44)
  {
    v316 = 0uLL;
    v315 = 0uLL;
    v125 = *a4;
    if ((unint64_t)(a4[1] - *a4) < 0x30)
    {
      v285 = "3 inputs (x, gamma, beta) are needed if training && training_instancenorm == MVA_NONE";
    }
    else
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v125 + 16) + 32))(*(_QWORD *)(v125 + 16));
      v126 = *(_QWORD *)(v125 + 16);
      v127 = *(_QWORD *)(v126 + 160);
      v128 = *(std::__shared_weak_count **)(v126 + 168);
      if (v128)
      {
        v129 = (unint64_t *)&v128->__shared_owners_;
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
        v131 = *(_QWORD *)(v127 + 24);
        v132 = (unint64_t *)&v128->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
        v134 = v131;
      }
      else
      {
        v134 = *(_QWORD *)(v127 + 24);
      }
      v184 = *a4;
      (*(void (**)(_QWORD))(**(_QWORD **)(*a4 + 32) + 32))(*(_QWORD *)(*a4 + 32));
      v185 = *(_QWORD *)(v184 + 32);
      v186 = *(_QWORD *)(v185 + 160);
      v187 = *(std::__shared_weak_count **)(v185 + 168);
      if (v187)
      {
        v188 = (unint64_t *)&v187->__shared_owners_;
        do
          v189 = __ldxr(v188);
        while (__stxr(v189 + 1, v188));
        v290 = *(_QWORD *)(v186 + 24);
        v190 = (unint64_t *)&v187->__shared_owners_;
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      else
      {
        v290 = *(_QWORD *)(v186 + 24);
      }
      v192 = *a3;
      if ((unint64_t)(a3[1] - *a3) >= 0x30)
      {
        v193 = *(_QWORD *)(v192 + 16);
        v194 = 0uLL;
        if (v193)
        {
          v195 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v193 + 32))(v193, (__n128)0);
          v194 = 0uLL;
          if (!v195)
          {
            v194 = *(_OWORD *)(*(_QWORD *)(v192 + 16) + 160);
            v196 = *(_QWORD *)(*(_QWORD *)(v192 + 16) + 168);
            if (v196)
            {
              v197 = (unint64_t *)(v196 + 8);
              do
                v198 = __ldxr(v197);
              while (__stxr(v198 + 1, v197));
            }
          }
        }
        v199 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
        v316 = v194;
        if (v199)
        {
          v200 = (unint64_t *)&v199->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        v202 = *a3;
        _Q0 = 0uLL;
        if ((unint64_t)(a3[1] - *a3) >= 0x21)
        {
          v204 = *(_QWORD *)(v202 + 32);
          if (v204)
          {
            v205 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v204 + 32))(v204, (__n128)0);
            _Q0 = 0uLL;
            if (!v205)
            {
              _Q0 = *(__n128 *)(*(_QWORD *)(v202 + 32) + 160);
              v206 = *(_QWORD *)(*(_QWORD *)(v202 + 32) + 168);
              if (v206)
              {
                v207 = (unint64_t *)(v206 + 8);
                do
                  v208 = __ldxr(v207);
                while (__stxr(v208 + 1, v207));
              }
            }
          }
        }
        v209 = (std::__shared_weak_count *)v315.n128_u64[1];
        v315 = _Q0;
        v210 = a1;
        if (v209)
        {
          v211 = (unint64_t *)&v209->__shared_owners_;
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
        }
        v213 = v302;
        if (!v291)
        {
LABEL_342:
          if (v315.n128_u64[1])
          {
            v266 = (unint64_t *)(v315.n128_u64[1] + 8);
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 - 1, v266));
            if (!v267)
            {
              (*(void (**)(unint64_t))(*(_QWORD *)v315.n128_u64[1] + 16))(v315.n128_u64[1]);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v315.n128_u64[1]);
            }
          }
          if (*((_QWORD *)&v316 + 1))
          {
            v268 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
            do
              v269 = __ldaxr(v268);
            while (__stlxr(v269 - 1, v268));
            if (!v269)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v316 + 1) + 16))(*((_QWORD *)&v316 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v316 + 1));
            }
          }
          goto LABEL_352;
        }
        v214 = 0;
        v215 = (int)__N;
        v216 = 1.0 / (float)(v310 * v302);
        v217 = 2 * v310;
        v295 = 0;
        v306 = 2 * (int)__N;
        v300 = 4 * (int)__N;
        v288 = v134;
        while (1)
        {
          v292 = 0;
          v294 = v214;
          v298.n128_u64[0] = 0;
          __Nb = 0;
          v218 = 2 * v214;
          __C = 0uLL;
          __B = 0;
          height = 0;
          v219 = v323;
          if (v323)
          {
            if (v134)
              goto LABEL_265;
          }
          else
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&src, v45, v213, 1, 1);
            v298 = *(__n128 *)&src.data;
            __C = *(_OWORD *)&src.data;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&src, v45, v213, 1, 1);
            __Nb = src.data;
            __B = src.data;
            height = src.height;
            v292 = (std::__shared_weak_count *)src.height;
            _Q0 = v298;
            if ((_DWORD)v213)
            {
              v221 = 0;
              v222 = v218;
              do
              {
                v223 = (void *)(__Nb[2] + 4 * v221);
                src.data = (void *)(*(_QWORD *)(v317 + 24) + v222);
                src.height = 1;
                src.width = v310;
                src.rowBytes = v217;
                dest.data = v223;
                dest.height = 1;
                dest.width = v310;
                dest.rowBytes = 4 * v310;
                vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                v221 += v310;
                v222 += v306;
                --v213;
              }
              while (v213);
              v210 = a1;
              v213 = v302;
              if (v134)
              {
LABEL_265:
                v220 = (float *)(v134 + 4 * v295);
LABEL_272:
                v225 = *v220;
                goto LABEL_273;
              }
            }
            else
            {
              v210 = a1;
              if (v134)
                goto LABEL_265;
            }
          }
          v224 = *(_QWORD *)(v210 + 400);
          if (v224)
          {
            v220 = (float *)(*(_QWORD *)(v224 + 16) + 4 * (4 * v295));
            goto LABEL_272;
          }
          v225 = 1.0;
LABEL_273:
          if (v290)
          {
            v226 = (float *)(v290 + 4 * v295);
          }
          else
          {
            v227 = *(_QWORD *)(v210 + 400);
            if (!v227)
            {
              v228 = 0.0;
              if (!(_DWORD)v213)
                goto LABEL_297;
LABEL_278:
              v229 = 0;
              v230 = v213;
              v231 = 4 * v294;
              v232 = v295 * v310;
              v233 = 0.0;
              v234 = v321;
              do
              {
                if (v321)
                  v235 = (const float *)(*(_QWORD *)(v321 + 24) + v231);
                else
                  v235 = (const float *)(__Nb[2] + 4 * v229);
                LODWORD(src.data) = 0;
                vDSP_sve(v235, 1, (float *)&src, v310);
                v233 = v233 + (float)(*(float *)&src.data * v216);
                v229 += v310;
                v231 += v300;
                --v230;
              }
              while (v230);
              v236 = 0;
              v237 = 0.0;
              v213 = v302;
              while (2)
              {
                if (v234)
                {
                  v238 = (float *)(*(_QWORD *)(v234 + 24) + 4 * v236 * v215 + 4 * v232);
                  if (v219)
                    goto LABEL_286;
LABEL_288:
                  v239 = (const float *)(*(_QWORD *)(v298.n128_u64[0] + 16) + 4 * v236 * v310);
                }
                else
                {
                  v238 = (float *)(__Nb[2] + 4 * v236 * v310);
                  if (!v219)
                    goto LABEL_288;
LABEL_286:
                  v239 = (const float *)(*(_QWORD *)(v219 + 24) + 4 * v236 * v215 + 4 * v232);
                }
                v240 = (float *)v239;
                v241 = v310;
                if (v310)
                {
                  do
                  {
                    v242 = *v238++;
                    *v240++ = (float)(v242 - v233) * (float)(v242 - v233);
                    --v241;
                  }
                  while (v241);
                }
                LODWORD(src.data) = 0;
                vDSP_sve(v239, 1, (float *)&src, v310);
                v237 = v237 + (float)(*(float *)&src.data * v216);
                if (++v236 == v302)
                {
                  v210 = a1;
                  goto LABEL_298;
                }
                continue;
              }
            }
            v226 = (float *)(*(_QWORD *)(v227 + 16) + 4 * (4 * v295) + 4);
          }
          v228 = *v226;
          if ((_DWORD)v213)
            goto LABEL_278;
LABEL_297:
          v233 = 0.0;
          v237 = 0.0;
LABEL_298:
          v45 = v310;
          if ((_QWORD)v316)
            *(float *)(*(_QWORD *)(v316 + 24) + 4 * v295) = v233;
          _Q0.n128_f32[0] = sqrtf(v237 + *(float *)(v210 + 316));
          if (v315.n128_u64[0])
            *(_DWORD *)(*(_QWORD *)(v315.n128_u64[0] + 24) + 4 * v295) = _Q0.n128_u32[0];
          if ((_DWORD)v213)
          {
            v243 = 0;
            v244 = v295 * v310;
            v245 = v321;
            v246 = v219;
            v247 = 1.0 / _Q0.n128_f32[0];
            do
            {
              if (v245)
              {
                v248 = (float *)(*(_QWORD *)(v245 + 24) + 4 * v243 * v215 + 4 * v244);
                if (v246)
                  goto LABEL_306;
              }
              else
              {
                v248 = (float *)(__Nb[2] + 4 * v243 * v310);
                if (v246)
                {
LABEL_306:
                  v249 = (float *)(*(_QWORD *)(v246 + 24) + 4 * v243 * v215 + 4 * v244);
                  goto LABEL_309;
                }
              }
              v249 = (float *)(*(_QWORD *)(v298.n128_u64[0] + 16) + 4 * v243 * v310);
LABEL_309:
              v250 = v249;
              v251 = v310;
              if (v45)
              {
                do
                {
                  v252 = *v248++;
                  _Q0.n128_f32[0] = v228 + (float)((float)(v247 * (float)(v252 - v233)) * v225);
                  *v250++ = _Q0.n128_f32[0];
                  --v251;
                }
                while (v251);
              }
              v253 = *(_DWORD *)(v210 + 332);
              if (v253 == 1)
              {
                LODWORD(src.data) = 0;
                vDSP_vthr(v249, 1, (const float *)&src, v249, 1, v310);
LABEL_319:
                if (*(_DWORD *)(v210 + 328))
                  v256 = v45 == 0;
                else
                  v256 = 1;
                if (!v256)
                {
                  v257 = v249;
                  v258 = v310;
                  do
                  {
                    _Q0.n128_f32[0] = tanhf(*v257);
                    *v257++ = _Q0.n128_f32[0];
                    --v258;
                  }
                  while (v258);
                }
                v246 = v219;
                v210 = a1;
                v45 = v310;
                if (!v219)
                {
                  if (v310)
                  {
                    v259 = (_WORD *)(*(_QWORD *)(v319 + 24) + v218);
                    v260 = v310;
                    do
                    {
                      v261 = *v249++;
                      _Q0.n128_f32[0] = v261;
                      __asm { FCVT            H0, S0 }
                      *v259++ = _Q0.n128_u16[0];
                      --v260;
                    }
                    while (v260);
                  }
                  v246 = 0;
                }
                goto LABEL_330;
              }
              if (v253 != 2)
                goto LABEL_319;
              v254 = v249;
              v255 = v310;
              if (v45)
              {
                do
                {
                  _Q0.n128_f32[0] = *v254;
                  if (*v254 <= 0.0)
                    _Q0.n128_f32[0] = _Q0.n128_f32[0] * *(float *)(v210 + 340);
                  *v254++ = _Q0.n128_f32[0];
                  --v255;
                }
                while (v255);
                goto LABEL_319;
              }
LABEL_330:
              ++v243;
              v213 = v302;
              v218 += v306;
            }
            while (v243 != v302);
          }
          v217 = 2 * v310;
          v134 = v288;
          if (v292)
          {
            v262 = (unint64_t *)&v292->__shared_owners_;
            do
              v263 = __ldaxr(v262);
            while (__stlxr(v263 - 1, v262));
            if (!v263)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v292->__on_zero_shared)(v292, _Q0);
              std::__shared_weak_count::__release_weak(v292);
            }
          }
          if (*((_QWORD *)&__C + 1))
          {
            v264 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
            do
              v265 = __ldaxr(v264);
            while (__stlxr(v265 - 1, v264));
            if (!v265)
            {
              (*(void (**)(_QWORD, __n128))(**((_QWORD **)&__C + 1) + 16))(*((_QWORD *)&__C + 1), _Q0);
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&__C + 1));
            }
          }
          v214 = v294 + v45;
          if (++v295 == v301)
            goto LABEL_342;
        }
      }
      v285 = "3 outputs (y, x_mean, sqrt(x_var + eps) are needed if training && training_instancenorm == MVA_NONE";
    }
    Espresso::throw_exception_selector<Espresso::generic_error>(v285);
  }
  if (v44 == 3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("MVA_L2 not supported");
  if (v43)
  {
    v46 = 1.0 / (float)v310;
    v286 = (int)__N;
    v293 = 0;
    v287 = 2 * (int)__N;
    v289 = 0;
    while (!v291)
    {
LABEL_157:
      v293 += v287;
      if (++v289 == v302)
        goto LABEL_352;
    }
    v47 = 0;
    v48 = 0;
    __Na = v289 * v286;
    v297 = v291 * v289;
    while (1)
    {
      v49 = 0;
      v50 = 0;
      v316 = 0uLL;
      v315 = 0uLL;
      v51 = v323;
      if (!v323)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&src, v310, 1, 1, 1);
        v299 = src.data;
        v316 = *(_OWORD *)&src.data;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&src, v310, 1, 1, 1);
        v315 = *(__n128 *)&src.data;
        v50 = src.data;
        v52 = (void *)*((_QWORD *)src.data + 2);
        src.data = (void *)(*(_QWORD *)(v317 + 24) + 2 * __Na + 2 * v48 * v310);
        src.height = 1;
        src.width = v310;
        src.rowBytes = 2 * v310;
        dest.data = v52;
        dest.height = 1;
        dest.width = v310;
        dest.rowBytes = 4 * v310;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        v49 = v299;
      }
      v53 = *(_QWORD *)(v33 + 400);
      if (v53)
      {
        v54 = *(_QWORD *)(v53 + 16);
        v55 = *(float *)(v54 + 4 * (4 * v48));
        v56 = *(float *)(v54 + 4 * ((4 * (_DWORD)v48) | 1u));
      }
      else
      {
        v56 = 0.0;
        v55 = 1.0;
      }
      if (!*(_DWORD *)(v33 + 368))
      {
        v59 = 0;
        src.data = 0;
        src.height = 0;
LABEL_93:
        v65 = 0;
        v64 = 0;
        dest.data = 0;
        dest.height = 0;
        goto LABEL_94;
      }
      v57 = *a3;
      v58 = *(_QWORD *)(*a3 + 16);
      if (!v58 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 32))(v58))
        break;
      v110 = *(_QWORD *)(v57 + 16);
      v59 = *(_QWORD **)(v110 + 160);
      v111 = *(_QWORD *)(v110 + 168);
      src.data = v59;
      src.height = v111;
      if (!v111)
        goto LABEL_84;
      v112 = (unint64_t *)(v111 + 8);
      v60 = a1;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
LABEL_85:
      if (!*(_DWORD *)(v60 + 368))
        goto LABEL_93;
      v61 = *a3;
      v62 = *(_QWORD *)(*a3 + 32);
      if (!v62 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62))
        goto LABEL_93;
      v63 = *(_QWORD *)(v61 + 32);
      v64 = *(_QWORD **)(v63 + 160);
      v65 = *(std::__shared_weak_count **)(v63 + 168);
      dest.data = v64;
      dest.height = (vImagePixelCount)v65;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
LABEL_94:
      if (v321)
      {
        v68 = (const float *)(*(_QWORD *)(v321 + 24) + 4 * __Na + 4 * v48 * v310);
        if (v51)
          goto LABEL_96;
      }
      else
      {
        v68 = (const float *)*((_QWORD *)v50 + 2);
        if (v51)
        {
LABEL_96:
          v69 = (float *)(*(_QWORD *)(v51 + 24) + 4 * __Na + 4 * v48 * v310);
          goto LABEL_99;
        }
      }
      v69 = (float *)*((_QWORD *)v49 + 2);
LABEL_99:
      v70 = v310;
      LODWORD(__C) = 0;
      vDSP_sve(v68, 1, (float *)&__C, v310);
      v71 = (float)(*(float *)&__C * v46) + 0.0;
      v72 = *(_DWORD *)(a1 + 312);
      if (v72 == 1)
      {
        v76 = (float *)v68;
        v77 = v69;
        v78 = v310;
        if (v310)
        {
          do
          {
            v79 = *v76++;
            *v77++ = (float)(v79 - v71) * (float)(v79 - v71);
            --v78;
          }
          while (v78);
        }
        LODWORD(__C) = 0;
        vDSP_sve(v69, 1, (float *)&__C, v310);
        v80 = (float)(*(float *)&__C * v46) + 0.0;
        if (v310)
        {
          v81 = 1.0 / sqrtf(v80 + *(float *)(a1 + 316));
          v82 = v69;
          v83 = v310;
          do
          {
            v84 = *v68++;
            *v82++ = v56 + (float)((float)(v81 * (float)(v84 - v71)) * v55);
            --v83;
          }
          while (v83);
        }
        if (v59)
          *(float *)(v59[3] + 4 * (v297 + v48)) = v71;
        if (v64)
          *(float *)(v64[3] + 4 * (v297 + v48)) = 1.0 / sqrtf(v80 + *(float *)(a1 + 316));
      }
      else if (v72 == 2)
      {
        v73 = v69;
        v74 = v310;
        if (v310)
        {
          do
          {
            v75 = *v68++;
            *v73++ = v56 + (float)((float)(v75 - v71) * v55);
            --v74;
          }
          while (v74);
        }
      }
      v33 = a1;
      v85 = *(_DWORD *)(a1 + 332);
      if (v85 == 1)
      {
        LODWORD(__B) = 0;
        vDSP_vthr(v69, 1, (const float *)&__B, v69, 1, v310);
LABEL_121:
        if (*(_DWORD *)(a1 + 328))
          _ZF = v310 == 0;
        else
          _ZF = 1;
        if (!_ZF)
        {
          v90 = v69;
          v91 = v310;
          do
          {
            *v90 = tanhf(*v90);
            ++v90;
            --v91;
          }
          while (v91);
        }
        v33 = a1;
        v70 = v310;
        if (!v51 && v310)
        {
          v92 = (_WORD *)(*(_QWORD *)(v319 + 24) + v293 + 2 * v47);
          v93 = v310;
          do
          {
            v94 = *v69++;
            _S0 = v94;
            __asm { FCVT            H0, S0 }
            *v92++ = LOWORD(_S0);
            --v93;
          }
          while (v93);
        }
        goto LABEL_131;
      }
      if (v85 != 2)
        goto LABEL_121;
      v86 = v69;
      v87 = v310;
      if (v310)
      {
        do
        {
          v88 = *v86;
          if (*v86 <= 0.0)
            v88 = v88 * *(float *)(a1 + 340);
          *v86++ = v88;
          --v87;
        }
        while (v87);
        goto LABEL_121;
      }
LABEL_131:
      if (v65)
      {
        v99 = (unint64_t *)&v65->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v101 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v102 = (unint64_t *)(src.height + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = (std::__shared_weak_count *)v315.n128_u64[1];
      if (v315.n128_u64[1])
      {
        v105 = (unint64_t *)(v315.n128_u64[1] + 8);
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
      if (*((_QWORD *)&v316 + 1))
      {
        v108 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      ++v48;
      v47 += v70;
      if (v48 == v301)
        goto LABEL_157;
    }
    v59 = 0;
    src.data = 0;
    src.height = 0;
LABEL_84:
    v60 = a1;
    goto LABEL_85;
  }
LABEL_352:
  v270 = v318;
  if (v318)
  {
    v271 = (unint64_t *)&v318->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  v273 = v320;
  if (v320)
  {
    v274 = (unint64_t *)&v320->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = v322;
  if (v322)
  {
    v277 = (unint64_t *)&v322->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = v324;
  if (v324)
  {
    v280 = (unint64_t *)&v324->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
}

void sub_1917D222C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41)
{
  uint64_t v41;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41 - 256);
  _Unwind_Resume(a1);
}

uint64_t *Espresso::batchnorm_kernel_cpu::share_weights(uint64_t a1, uint64_t **a2)
{
  uint64_t *result;

  result = *a2;
  if (*a2)
  {
    if (result)
      return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 400), result[50], result[51]);
  }
  return result;
}

void Espresso::batchnorm_kernel_cpu::clear_weights(Espresso::batchnorm_kernel_cpu *this)
{
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 50);
}

void Espresso::batchnorm_kernel_cpu::transform_parameters_as_input(_DWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  _DWORD *v11;
  _DWORD *v12;
  int *v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  std::string v79;
  std::string v80;
  unint64_t v81;

  v81 = a3;
  v8 = a2 + 136;
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  v80.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, &v81, (uint64_t)&std::piecewise_construct, (uint64_t **)&v80)[3];
  v9 = *(int *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)v80.__r_.__value_.__l.__data_, (__int128 **)&v80)+ 5)+ 16);
  if (a1[77])
  {
    v10 = (const void **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * v81) + 16);
    Espresso::get_layer_parameter_name(v10, 1, &v80);
    Espresso::get_layer_parameter_name(v10, 2, &v79);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,int,unsigned long &,int,void>(&v78, 1, 1, v9, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,int,unsigned long &,int,void>(&v76, 1, 1, v9, 1);
    (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(_QWORD *)a1 + 408))(&v74, a1);
    if (v74)
    {
      if ((_DWORD)v9)
      {
        v11 = *(_DWORD **)(v78 + 24);
        v12 = *(_DWORD **)(v76 + 24);
        v13 = (int *)(*(_QWORD *)(v74 + 16) + 4);
        do
        {
          *v11++ = *(v13 - 1);
          v14 = *v13;
          v13 += 4;
          *v12++ = v14;
          --v9;
        }
        while (v9);
      }
      v72 = 0;
      v73 = 0;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v72);
      v15 = v73;
      if (v73)
      {
        p_shared_owners = (unint64_t *)&v73->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else if ((_DWORD)v9)
    {
      v21 = *(_DWORD **)(v78 + 24);
      v22 = *(_DWORD **)(v76 + 24);
      do
      {
        *v21++ = 1065353216;
        *v22++ = 0;
        --v9;
      }
      while (v9);
    }
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v70, (_QWORD *)(a2 + 16), (uint64_t *)&v78);
    v71 = v70;
    Espresso::add_layer_input(a2, v81, (unsigned __int8 *)&v80, (uint64_t *)&v71);
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v69, (_QWORD *)(a2 + 16), &v76);
    v65 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    v70 = v69;
    Espresso::add_layer_input(a2, v81, (unsigned __int8 *)&v79, (uint64_t *)&v70);
    v23 = *(_QWORD *)(a5 + 8);
    if (v23 >= *(_QWORD *)(a5 + 16))
    {
      v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v80);
    }
    else
    {
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
      }
      else
      {
        v24 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        *(_QWORD *)(v23 + 16) = *((_QWORD *)&v80.__r_.__value_.__l + 2);
        *(_OWORD *)v23 = v24;
      }
      v25 = (std::string *)(v23 + 24);
      *(_QWORD *)(a5 + 8) = v25;
    }
    *(_QWORD *)(a5 + 8) = v25;
    if ((unint64_t)v25 >= *(_QWORD *)(a5 + 16))
    {
      v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v79);
    }
    else
    {
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v25, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      }
      else
      {
        v43 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
        v25->__r_.__value_.__r.__words[2] = v79.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v43;
      }
      v44 = v25 + 1;
      *(_QWORD *)(a5 + 8) = v25 + 1;
    }
    *(_QWORD *)(a5 + 8) = v44;
    if (v65)
    {
      v45 = (unint64_t *)&v65->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v75;
    if (v75)
    {
      v51 = (unint64_t *)&v75->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v77;
    if (v77)
    {
      v54 = (unint64_t *)&v77->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    if (*((_QWORD *)&v78 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(_QWORD *)a1 + 408))(&v79, a1);
    if (v79.__r_.__value_.__r.__words[0])
    {
      v67 = 0;
      v68 = 0;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v67);
      v18 = v68;
      if (v68)
      {
        v19 = (unint64_t *)&v68->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,unsigned long,void>(&v80, 4 * v9);
      v26 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = 0uLL;
      size = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v26;
      if (size)
      {
        v28 = (unint64_t *)&size->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v30 = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
      if (v80.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(v80.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if ((_DWORD)v9)
      {
        v33 = *(_OWORD **)(v79.__r_.__value_.__r.__words[0] + 16);
        v34 = v9;
        do
        {
          *v33++ = xmmword_191A932D0;
          --v34;
        }
        while (v34);
      }
    }
    LODWORD(v80.__r_.__value_.__l.__data_) = 1;
    HIDWORD(v80.__r_.__value_.__r.__words[0]) = 4 * v9;
    *(_OWORD *)&v80.__r_.__value_.__r.__words[1] = xmmword_191A93930;
    v35 = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
    v66 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
    if (v79.__r_.__value_.__l.__size_)
    {
      v36 = (unint64_t *)(v79.__r_.__value_.__l.__size_ + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    Espresso::make_blob_container_and_copy_blob<std::shared_ptr<Espresso::blob<float,1>>>(&v78, (_QWORD *)(a2 + 16), (Espresso::layer_nd_shape *)&v80, (uint64_t)&v66);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    Espresso::get_layer_parameter_name((const void **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * v81) + 16), 1, &v80);
    Espresso::add_layer_input(a2, v81, (unsigned __int8 *)&v80, (uint64_t *)&v78);
    v40 = *(_QWORD *)(a5 + 32);
    if (v40 >= *(_QWORD *)(a5 + 40))
    {
      v42 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a5 + 24), (uint64_t)&v80);
    }
    else
    {
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 32), v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
      }
      else
      {
        v41 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        *(_QWORD *)(v40 + 16) = *((_QWORD *)&v80.__r_.__value_.__l + 2);
        *(_OWORD *)v40 = v41;
      }
      v42 = (std::string *)(v40 + 24);
      *(_QWORD *)(a5 + 32) = v40 + 24;
    }
    *(_QWORD *)(a5 + 32) = v42;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    if (*((_QWORD *)&v78 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
    if (v79.__r_.__value_.__l.__size_)
    {
      v63 = (unint64_t *)(v79.__r_.__value_.__l.__size_ + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
}

void sub_1917D2A50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 32) = v2;
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 112);
  _Unwind_Resume(a1);
}

void Espresso::batchnorm_kernel_cpu::transform_intermediate_results_as_output(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  void **v14;
  const void *v15;
  char *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  void **v23;
  const void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32[3];
  void *__p[2];
  char v34;
  __int128 v35;
  uint64_t v36[3];
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;

  v44 = a3;
  if (*(_DWORD *)(a1 + 308))
  {
    v4 = a2 + 136;
    v37 = (uint64_t)&v44;
    v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37)[3];
    v5 = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (unsigned __int8 *)v37, (__int128 **)&v37)+ 5)+ 16);
    v43 = 0;
    v42 = 0u;
    v41 = 0u;
    v37 = 0x100000001;
    v38 = v5;
    v39 = 0x100000001;
    v40 = -1;
    v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * v44);
    v7 = (char *)operator new(0x118uLL);
    *(_OWORD *)(v7 + 8) = 0u;
    *(_QWORD *)v7 = &off_1E2DC1868;
    *(_QWORD *)&v8 = Espresso::blob_cpu::blob_cpu((uint64_t)(v7 + 24), (_QWORD *)(a2 + 16), *(_DWORD *)(v6 + 12));
    *((_QWORD *)&v8 + 1) = v7;
    *(_OWORD *)v36 = v8;
    v35 = 0u;
    (*(void (**)(_QWORD, uint64_t *, __int128 *))(*((_QWORD *)v7 + 3) + 16))(v8, &v37, &v35);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v44;
    if (*(char *)(v6 + 39) >= 0)
      v13 = *(unsigned __int8 *)(v6 + 39);
    else
      v13 = *(_QWORD *)(v6 + 24);
    v14 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 3);
    if (v34 < 0)
      v14 = (void **)__p[0];
    if (v13)
    {
      if (*(char *)(v6 + 39) >= 0)
        v15 = (const void *)(v6 + 16);
      else
        v15 = *(const void **)(v6 + 16);
      memmove(v14, v15, v13);
    }
    *(_DWORD *)((char *)v14 + v13) = 7695674;
    Espresso::add_layer_output(a2, v12, (unsigned __int8 *)__p, v36);
    if (v34 < 0)
      operator delete(__p[0]);
    v16 = (char *)operator new(0x118uLL);
    *(_OWORD *)(v16 + 8) = 0u;
    *(_QWORD *)v16 = &off_1E2DC1868;
    *(_QWORD *)&v17 = Espresso::blob_cpu::blob_cpu((uint64_t)(v16 + 24), (_QWORD *)(a2 + 16), *(_DWORD *)(v6 + 12));
    *((_QWORD *)&v17 + 1) = v16;
    *(_OWORD *)v32 = v17;
    v31 = 0u;
    (*(void (**)(_QWORD, uint64_t *, __int128 *))(*((_QWORD *)v16 + 3) + 16))(v17, &v37, &v31);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v44;
    if (*(char *)(v6 + 39) >= 0)
      v22 = *(unsigned __int8 *)(v6 + 39);
    else
      v22 = *(_QWORD *)(v6 + 24);
    v23 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v22 + 6);
    if (v34 < 0)
      v23 = (void **)__p[0];
    if (v22)
    {
      if (*(char *)(v6 + 39) >= 0)
        v24 = (const void *)(v6 + 16);
      else
        v24 = *(const void **)(v6 + 16);
      memmove(v23, v24, v22);
    }
    strcpy((char *)v23 + v22, ":sigma");
    Espresso::add_layer_output(a2, v21, (unsigned __int8 *)__p, v32);
    if (v34 < 0)
      operator delete(__p[0]);
    v25 = (std::__shared_weak_count *)v32[1];
    if (v32[1])
    {
      v26 = (unint64_t *)(v32[1] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)v36[1];
    if (v36[1])
    {
      v29 = (unint64_t *)(v36[1] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if ((_QWORD)v42)
    {
      *((_QWORD *)&v42 + 1) = v42;
      operator delete((void *)v42);
    }
  }
}

void sub_1917D2EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::batchnorm_kernel_cpu::transform_kernel_for_training(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (!*a4)
    *(_DWORD *)(result + 308) = 1;
  return result;
}

double Espresso::batchnorm_kernel_cpu::get_weights_blob@<D0>(Espresso::batchnorm_kernel_cpu *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, (_QWORD *)this + 1, (_QWORD *)this + 50);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t Espresso::batchnorm_kernel_cpu::num_weights_blob(Espresso::batchnorm_kernel_cpu *this)
{
  return 1;
}

std::string *Espresso::add_layer_output(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  void *v34;
  _QWORD *v35;
  char **v36;
  std::string *v37;
  std::string *result;
  _BYTE v39[32];
  _QWORD *v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;

  v43 = a2;
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 16 * a2);
  v8 = (uint64_t *)v7[14];
  v9 = v7[15];
  if ((unint64_t)v8 >= v9)
  {
    v14 = v7[13];
    v15 = ((uint64_t)v8 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v9 - v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v40 = v7 + 15;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v18);
    v21 = &v19[16 * v15];
    v22 = *(_OWORD *)a4;
    *(_OWORD *)v21 = *(_OWORD *)a4;
    if (*((_QWORD *)&v22 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v26 = (_QWORD *)v7[13];
    v25 = (_QWORD *)v7[14];
    if (v25 == v26)
    {
      v29 = vdupq_n_s64((unint64_t)v25);
      v27 = &v19[16 * v15];
    }
    else
    {
      v27 = &v19[16 * v15];
      do
      {
        v28 = *((_OWORD *)v25 - 1);
        v25 -= 2;
        *((_OWORD *)v27 - 1) = v28;
        v27 -= 16;
        *v25 = 0;
        v25[1] = 0;
      }
      while (v25 != v26);
      v29 = *(int64x2_t *)(v7 + 13);
    }
    v13 = v21 + 16;
    v7[13] = v27;
    v7[14] = v21 + 16;
    *(int64x2_t *)&v39[8] = v29;
    v30 = v7[15];
    v7[15] = &v19[16 * v20];
    *(_QWORD *)&v39[24] = v30;
    *(_QWORD *)v39 = v29.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v39);
  }
  else
  {
    *v8 = *a4;
    v10 = a4[1];
    v8[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = v8 + 2;
  }
  v7[14] = v13;
  *(_QWORD *)v39 = a3;
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 136, a3, (__int128 **)v39);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v31 + 5, *a4, a4[1]);
  Espresso::abstract_blob_container::shape(v39, *a4);
  v44 = a3;
  v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), a3, (__int128 **)&v44);
  v33 = *(_OWORD *)&v39[16];
  *(_OWORD *)(v32 + 56) = *(_OWORD *)v39;
  *(_OWORD *)(v32 + 72) = v33;
  *((_QWORD *)v32 + 11) = v40;
  v34 = (void *)*((_QWORD *)v32 + 12);
  if (v34)
  {
    *((_QWORD *)v32 + 13) = v34;
    operator delete(v34);
    *((_QWORD *)v32 + 12) = 0;
    *((_QWORD *)v32 + 13) = 0;
    *((_QWORD *)v32 + 14) = 0;
  }
  *((_OWORD *)v32 + 6) = v41;
  *((_QWORD *)v32 + 14) = v42;
  *(_QWORD *)v39 = &v43;
  v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 96, &v43, (uint64_t)&std::piecewise_construct, (uint64_t **)v39);
  v36 = (char **)(v35 + 3);
  v37 = (std::string *)v35[4];
  if ((unint64_t)v37 >= v35[5])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v36, (uint64_t)a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v36, (__int128 *)a3);
    result = v37 + 1;
  }
  v35[4] = result;
  return result;
}

void sub_1917D31F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,int,unsigned long &,int,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  Espresso *v11;
  void *v12;

  v10 = operator new(0x60uLL);
  *v10 = &off_1E2DBECA8;
  v10[1] = 0;
  v10[3] = &off_1E2DA11F0;
  *((_OWORD *)v10 + 4) = 0u;
  v10[2] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1917D32D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::activation_kernel_cpu::__launch_gru_activation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;

  v6 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v59 = 0;
    v100 = 0;
    v101 = 0;
  }
  else
  {
    v15 = *(std::__shared_weak_count **)(*v6 + 168);
    v59 = *(_QWORD *)(*v6 + 160);
    v100 = v59;
    v101 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
  }
  v7 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v58 = 0;
    v98 = 0;
    v99 = 0;
  }
  else
  {
    v18 = *(std::__shared_weak_count **)(*v7 + 168);
    v58 = *(_QWORD *)(*v7 + 160);
    v98 = v58;
    v99 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  v8 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x11uLL
    && (v9 = v8[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
  {
    v21 = v8[2];
    v23 = *(_QWORD *)(v21 + 160);
    v22 = *(std::__shared_weak_count **)(v21 + 168);
    v63 = v23;
    v96 = v23;
    v97 = v22;
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v63 = 0;
    v96 = 0;
    v97 = 0;
  }
  v10 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x21uLL
    && (v11 = v10[4]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v26 = v10[4];
    v12 = *(std::__shared_weak_count **)(v26 + 168);
    v62 = *(_QWORD *)(v26 + 160);
    v94 = v62;
    v95 = v12;
    if (v12)
    {
      v27 = (unint64_t *)&v12->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v12 = 0;
    v62 = 0;
    v94 = 0;
    v95 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v83, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v72, (const Espresso::layer_shape *)&v83, 0);
  v57 = v12;
  if (DWORD1(v73) > 3)
  {
    if (SDWORD1(v73) == 5)
    {
      v64 = SDWORD1(v72) * (uint64_t)(int)v72;
      v14 = SHIDWORD(v72) * (uint64_t)(int)v73 * SDWORD2(v72);
    }
    else if (SDWORD1(v73) == 4)
    {
      v64 = (int)v72;
      v14 = SDWORD2(v72) * (uint64_t)SHIDWORD(v72) * SDWORD1(v72);
    }
    else
    {
      v64 = 0;
LABEL_48:
      v14 = 0;
    }
  }
  else
  {
    switch(DWORD1(v73))
    {
      case 1:
        v13 = 1;
        goto LABEL_45;
      case 2:
        v13 = (int)v72;
        goto LABEL_45;
      case 3:
        v13 = SDWORD1(v72) * (uint64_t)(int)v72;
        goto LABEL_45;
      case 4:
        v13 = SDWORD1(v72) * (uint64_t)(int)v72 * SDWORD2(v72);
        goto LABEL_45;
      case 5:
        v13 = SDWORD1(v72) * (uint64_t)(int)v72 * SDWORD2(v72) * SHIDWORD(v72);
LABEL_45:
        v64 = v13;
        if (DWORD1(v73))
          goto LABEL_46;
        goto LABEL_48;
      default:
        v64 = 0;
        if (!DWORD1(v73))
          goto LABEL_48;
LABEL_46:
        v14 = *((int *)&v72 + SDWORD1(v73) - 1);
        break;
    }
  }
  if (*((_QWORD *)&v85 + 1))
  {
    *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
    operator delete(*((void **)&v85 + 1));
  }
  v61 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (v64)
  {
    v68 = 0;
    v69 = 0;
    v29 = 0;
    v67 = 8 * v14;
    v60 = 12 * v14;
    v66 = 4 * v14;
    do
    {
      v30 = *(_QWORD *)(v63 + 24);
      v31 = *(_QWORD *)(v62 + 24);
      v65 = v29;
      if (v61 == 100)
      {
        v83 = 0u;
        v84 = 0u;
        v85 = 0u;
        v86 = 0u;
        v87 = 0u;
        v88 = 0u;
        v89 = 0u;
        v90 = 0u;
        v91 = 0u;
        v92 = 0u;
        v93 = 0u;
        v72 = 0u;
        v73 = 0u;
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v71 = 0u;
        v70 = *(int *)(v58 + 8);
        *((_QWORD *)&v72 + 1) = v70;
        *(_QWORD *)&v73 = 1;
        *((_QWORD *)&v83 + 1) = v70;
        *(_QWORD *)&v84 = 1;
        LODWORD(v81) = 65568;
        LODWORD(v92) = 65568;
        *((_QWORD *)&v91 + 1) = *(_QWORD *)(v59 + 24);
        *((_QWORD *)&v80 + 1) = *(_QWORD *)(v58 + 24);
        if (BNNSFunctionGRUFusedGates() == -1)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("activation_kernel_cpu: BNNSFunctionGRUFusedGates call failed");
      }
      else if (v14)
      {
        v32 = 0;
        v33 = *(_QWORD *)(v59 + 24) + v68;
        v34 = *(_QWORD *)(v58 + 24) + v68;
        v35 = v31 + v67;
        v36 = v30 + v67;
        v37 = v31 + v66;
        v38 = v30 + v66;
        v39 = v31 + v69;
        v40 = v30 + v69;
        do
        {
          v41 = *(float *)(v38 + 4 * v32) + *(float *)(v37 + 4 * v32);
          v42 = expf(-(float)(*(float *)(v40 + 4 * v32) + *(float *)(v39 + 4 * v32))) + 1.0;
          v43 = -v41;
          v44 = 1.0 / v42;
          v45 = expf(v43);
          *(float *)(v33 + 4 * v32) = (float)((float)(1.0 - v44)
                                            * tanhf(*(float *)(v35 + 4 * v32)+ (float)((float)(1.0 / (float)(v45 + 1.0)) * *(float *)(v36 + 4 * v32))))+ (float)(v44 * *(float *)(v34 + 4 * v32));
          ++v32;
        }
        while (v14 != v32);
      }
      v29 = v65 + 1;
      v68 += 4 * v14;
      v67 += v60;
      v66 += v60;
      v69 += v60;
    }
    while (v65 + 1 != v64);
  }
  if (v57)
  {
    v46 = (unint64_t *)&v57->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v48 = v97;
  if (v97)
  {
    v49 = (unint64_t *)&v97->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v99;
  if (v99)
  {
    v52 = (unint64_t *)&v99->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v101;
  if (v101)
  {
    v55 = (unint64_t *)&v101->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_1917D3990(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

void Espresso::activation_kernel_cpu::__launch_lstm_ifog_activation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const float *v47;
  const float *v48;
  float *v49;
  float *v50;
  float *v51;
  const float *v52;
  float *v53;
  vDSP_Length v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  vDSP_Length v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  vDSP_Length v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  vDSP_Length __N;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  float *__B;
  vDSP_Length v122[5];
  void *__p;
  void *v124;
  float v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  float __C;
  _QWORD v142[2];

  v7 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v7
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v139 = 0;
    v140 = 0;
  }
  else
  {
    v18 = *(std::__shared_weak_count **)(*v7 + 168);
    v139 = *(_QWORD *)(*v7 + 160);
    v140 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
  }
  v9 = a3;
  v8 = *(_QWORD **)a3;
  if (*(_QWORD *)(v9 + 8) - (_QWORD)v8 >= 0x11uLL
    && (v10 = v8[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
  {
    v24 = v8[2];
    v26 = *(_QWORD *)(v24 + 160);
    v25 = *(std::__shared_weak_count **)(v24 + 168);
    v137 = v26;
    v138 = v25;
    if (v25)
    {
      v27 = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v137 = 0;
    v138 = 0;
  }
  v11 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v11
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11))
  {
    v135 = 0;
    v136 = 0;
  }
  else
  {
    v21 = *(std::__shared_weak_count **)(*v11 + 168);
    v135 = *(_QWORD *)(*v11 + 160);
    v136 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  v12 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x11uLL
    && (v13 = v12[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13))
  {
    v29 = v12[2];
    v31 = *(_QWORD *)(v29 + 160);
    v30 = *(std::__shared_weak_count **)(v29 + 168);
    v133 = v31;
    v134 = v30;
    if (v30)
    {
      v32 = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  else
  {
    v133 = 0;
    v134 = 0;
  }
  v14 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x21uLL
    && (v15 = v14[4]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15))
  {
    v34 = v14[4];
    v36 = *(_QWORD *)(v34 + 160);
    v35 = *(std::__shared_weak_count **)(v34 + 168);
    v131 = v36;
    v132 = v35;
    if (v35)
    {
      v37 = (unint64_t *)&v35->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
  }
  else
  {
    v131 = 0;
    v132 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)v122, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v125, (const Espresso::layer_shape *)v122, 0);
  if (v130 <= 3)
  {
    switch(v130)
    {
      case 1u:
        v16 = 1;
        goto LABEL_55;
      case 2u:
        v16 = SLODWORD(v125);
        goto LABEL_55;
      case 3u:
        v16 = v126 * (uint64_t)SLODWORD(v125);
        goto LABEL_55;
      case 4u:
        v16 = v126 * (uint64_t)SLODWORD(v125) * v127;
        goto LABEL_55;
      case 5u:
        v16 = v126 * (uint64_t)SLODWORD(v125) * v127 * v128;
LABEL_55:
        v107 = v16;
        if (v130)
          goto LABEL_56;
        goto LABEL_50;
      default:
        v107 = 0;
        if (!v130)
          goto LABEL_50;
LABEL_56:
        v17 = *((int *)&v125 + (int)v130 - 1);
        break;
    }
    goto LABEL_57;
  }
  if (v130 == 5)
  {
    v107 = v126 * (uint64_t)SLODWORD(v125);
    v17 = v128 * (uint64_t)v129 * v127;
    goto LABEL_57;
  }
  if (v130 == 4)
  {
    v107 = SLODWORD(v125);
    v17 = v127 * (uint64_t)v128 * v126;
LABEL_57:
    v108 = v17;
    goto LABEL_58;
  }
  v107 = 0;
LABEL_50:
  v108 = 0;
LABEL_58:
  if (__p)
  {
    v124 = __p;
    operator delete(__p);
  }
  v97 = a1 + 408;
  if (!*(_QWORD *)(a1 + 408))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(v122, v108, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v97, (__int128 *)v122);
    v94 = (std::__shared_weak_count *)v122[1];
    if (v122[1])
    {
      v95 = (unint64_t *)(v122[1] + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
  }
  v98 = a1;
  v106 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (v107)
  {
    v113 = 0;
    v114 = 0;
    v39 = 0;
    v40 = v108 >> 2;
    __B = (float *)(a1 + 308);
    v109 = (int)(v108 >> 2);
    if (v108 >> 2 <= 1)
      v41 = 1;
    else
      v41 = v108 >> 2;
    __N = v108 >> 2;
    v117 = v41;
    v104 = v133;
    v105 = v135;
    v102 = v139;
    v103 = v131;
    v101 = v137;
    v112 = 12 * (v108 >> 2);
    v99 = 4 * v108;
    v111 = 8 * v40;
    v100 = 4 * v40;
    v110 = 4 * v40;
    do
    {
      v42 = *(_QWORD *)(v105 + 24);
      v43 = *(_QWORD *)(v104 + 24);
      v44 = *(_QWORD *)(v103 + 24);
      v45 = *(_QWORD *)(v102 + 24);
      v46 = *(_QWORD *)(v101 + 24);
      v115 = v39;
      if (v106 == 100)
      {
        v47 = (const float *)(v42 + 4 * v39 * v108);
        v48 = (const float *)(v43 + 4 * v39 * v108);
        v49 = *(float **)(*(_QWORD *)v97 + 16);
        vDSP_vadd(v47, 1, v48, 1, v49, 1, __N);
        v50 = &v49[__N];
        vDSP_vadd(&v47[__N], 1, &v48[__N], 1, v50, 1, __N);
        v51 = &v49[2 * (v108 >> 2)];
        vDSP_vadd(&v47[2 * (v108 >> 2)], 1, &v48[2 * (v108 >> 2)], 1, v51, 1, __N);
        v52 = &v47[3 * (v108 >> 2)];
        v53 = &v49[3 * (v108 >> 2)];
        vDSP_vadd(v52, 1, &v48[3 * (v108 >> 2)], 1, v53, 1, __N);
        vDSP_vsadd(v50, 1, __B, v50, 1, __N);
        LODWORD(v122[0]) = v108 >> 2;
        v125 = -2.0;
        HIDWORD(v142[0]) = 1065353216;
        vDSP_vsmul(v53, 1, &v125, v53, 1, v109);
        vvexpf(v53, v53, (const int *)v122);
        vDSP_vsadd(v53, 1, (const float *)v142 + 1, v53, 1, SLODWORD(v122[0]));
        vvrecf(v53, v53, (const int *)v122);
        __C = -1.0;
        LODWORD(v142[0]) = 0x40000000;
        vDSP_vsmsa(v53, 1, (const float *)v142, &__C, v53, 1, SLODWORD(v122[0]));
        if (*(_DWORD *)(v98 + 304) == 18)
        {
          LODWORD(v122[0]) = 1045220557;
          v125 = 0.5;
          v142[0] = 1065353216;
          v54 = v108 >> 2;
          vDSP_vsmsa(v49, 1, (const float *)v122, &v125, v49, 1, __N);
          vDSP_vclip(v49, 1, (const float *)v142 + 1, (const float *)v142, v49, 1, __N);
          vDSP_vsmsa(v50, 1, (const float *)v122, &v125, v50, 1, __N);
          vDSP_vclip(v50, 1, (const float *)v142 + 1, (const float *)v142, v50, 1, __N);
          vDSP_vsmsa(v51, 1, (const float *)v122, &v125, v51, 1, __N);
          vDSP_vclip(v51, 1, (const float *)v142 + 1, (const float *)v142, v51, 1, __N);
          v55 = v115;
        }
        else
        {
          LODWORD(v122[0]) = v108 >> 2;
          v125 = 1.0;
          vDSP_vneg(v49, 1, v49, 1, v109);
          vvexpf(v49, v49, (const int *)v122);
          vDSP_vsadd(v49, 1, &v125, v49, 1, SLODWORD(v122[0]));
          vvrecf(v49, v49, (const int *)v122);
          LODWORD(v122[0]) = v108 >> 2;
          v125 = 1.0;
          vDSP_vneg(v50, 1, v50, 1, v109);
          vvexpf(v50, v50, (const int *)v122);
          vDSP_vsadd(v50, 1, &v125, v50, 1, SLODWORD(v122[0]));
          vvrecf(v50, v50, (const int *)v122);
          LODWORD(v122[0]) = v108 >> 2;
          v125 = 1.0;
          vDSP_vneg(v51, 1, v51, 1, v109);
          vvexpf(v51, v51, (const int *)v122);
          vDSP_vsadd(v51, 1, &v125, v51, 1, SLODWORD(v122[0]));
          vvrecf(v51, v51, (const int *)v122);
          v55 = v115;
          v54 = v108 >> 2;
        }
        v78 = v55 * v54;
        vDSP_vmma(v50, 1, (const float *)(v44 + 4 * v55 * v54), 1, v49, 1, v53, 1, (float *)(v45 + 4 * v55 * v54), 1, v54);
        LODWORD(v122[0]) = v108 >> 2;
        v125 = -2.0;
        HIDWORD(v142[0]) = 1065353216;
        vDSP_vsmul((const float *)(v45 + 4 * v78), 1, &v125, (float *)(v46 + 4 * v78), 1, v109);
        vvexpf((float *)(v46 + 4 * v78), (const float *)(v46 + 4 * v78), (const int *)v122);
        vDSP_vsadd((const float *)(v46 + 4 * v78), 1, (const float *)v142 + 1, (float *)(v46 + 4 * v78), 1, SLODWORD(v122[0]));
        vvrecf((float *)(v46 + 4 * v78), (const float *)(v46 + 4 * v78), (const int *)v122);
        __C = -1.0;
        LODWORD(v142[0]) = 0x40000000;
        vDSP_vsmsa((const float *)(v46 + 4 * v78), 1, (const float *)v142, &__C, (float *)(v46 + 4 * v78), 1, SLODWORD(v122[0]));
        vDSP_vmul((const float *)(v46 + 4 * v78), 1, v51, 1, (float *)(v46 + 4 * v78), 1, __N);
      }
      else if (v108 >= 4)
      {
        v56 = 0;
        v120 = v46 + v113;
        v119 = *(_DWORD *)(v98 + 304);
        v118 = v45 + v113;
        v57 = v44 + v113;
        v58 = v43 + v112;
        v59 = v42 + v112;
        v60 = v43 + v111;
        v61 = v42 + v111;
        v62 = v43 + v110;
        v63 = v42 + v110;
        v64 = v43 + v114;
        v65 = v42 + v114;
        do
        {
          v66 = *(float *)(v65 + 4 * v56) + *(float *)(v64 + 4 * v56);
          v67 = (float)(*(float *)(v63 + 4 * v56) + *(float *)(v62 + 4 * v56)) + *__B;
          v68 = *(float *)(v61 + 4 * v56) + *(float *)(v60 + 4 * v56);
          v69 = *(float *)(v59 + 4 * v56);
          v70 = *(float *)(v58 + 4 * v56);
          if (v119 == 18)
          {
            v71 = (float)(v66 * 0.2) + 0.5;
            if (v71 < 0.0)
              v71 = 0.0;
            if (v71 <= 1.0)
              v72 = v71;
            else
              v72 = 1.0;
            v73 = (float)(v67 * 0.2) + 0.5;
            if (v73 < 0.0)
              v73 = 0.0;
            if (v73 <= 1.0)
              v74 = v73;
            else
              v74 = 1.0;
            v75 = (float)(v68 * 0.2) + 0.5;
            if (v75 < 0.0)
              v75 = 0.0;
            if (v75 <= 1.0)
              v76 = v75;
            else
              v76 = 1.0;
          }
          else
          {
            v72 = 1.0 / (float)(expf(-v66) + 1.0);
            v74 = 1.0 / (float)(expf(-v67) + 1.0);
            v76 = 1.0 / (float)(expf(-v68) + 1.0);
          }
          v77 = (float)(v72 * tanhf(v69 + v70)) + (float)(v74 * *(float *)(v57 + 4 * v56));
          *(float *)(v118 + 4 * v56) = v77;
          *(float *)(v120 + 4 * v56++) = v76 * tanhf(v77);
        }
        while (v117 != v56);
      }
      v39 = v115 + 1;
      v113 += v100;
      v112 += v99;
      v111 += v99;
      v110 += v99;
      v114 += v99;
    }
    while (v115 + 1 != v107);
  }
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v134;
  if (v134)
  {
    v83 = (unint64_t *)&v134->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v136;
  if (v136)
  {
    v86 = (unint64_t *)&v136->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v138;
  if (v138)
  {
    v89 = (unint64_t *)&v138->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v140;
  if (v140)
  {
    v92 = (unint64_t *)&v140->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_1917D45F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  uint64_t v45;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 216);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 184);
  _Unwind_Resume(a1);
}

void Espresso::axpby_kernel_cpu::~axpby_kernel_cpu(Espresso::axpby_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::axpby_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v7;
  float v8;
  float v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  vDSP_Length v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  const float *v30;
  vDSP_Length __N;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3);
  if (v7 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Incompatible operands CP");
  if (v7 != 4)
  {
    if (v7)
      return;
    v10 = *a4;
    if (a4[1] == *a4 || !*v10 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10))
    {
      v11 = 0;
      v61 = 0;
      v62 = 0;
    }
    else
    {
      v11 = *(_QWORD *)(*v10 + 160);
      v52 = *(std::__shared_weak_count **)(*v10 + 168);
      v61 = v11;
      v62 = v52;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(p_shared_owners);
        while (__stxr(v54 + 1, p_shared_owners));
      }
    }
    v13 = a3;
    v12 = *a3;
    if (v13[1] == v12 || !*v12 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v12 + 32))(*v12))
    {
      v14 = 0;
      v15 = 0;
      v59 = 0;
      v60 = 0;
    }
    else
    {
      v15 = *(_QWORD *)(*v12 + 160);
      v14 = *(std::__shared_weak_count **)(*v12 + 168);
      v59 = v15;
      v60 = v14;
      if (v14)
      {
        v55 = (unint64_t *)&v14->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
    }
    if (*(_DWORD *)(a1 + 288))
    {
      v16 = 0;
      v17 = *(int *)(v15 + 8);
      do
      {
        v17 *= *(int *)(v15 + 12 + v16);
        v16 += 4;
      }
      while (v16 != 12);
      vDSP_vsmul(*(const float **)(v11 + 24), 1, (const float *)(a1 + 280), *(float **)(v15 + 24), 1, v17);
      if (!v14)
      {
LABEL_44:
        v36 = v62;
        if (!v62)
          return;
        v37 = (unint64_t *)&v62->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        goto LABEL_69;
      }
    }
    else
    {
      v23 = *a4;
      (*(void (**)(uint64_t))(*(_QWORD *)v23[2] + 32))(v23[2]);
      v24 = v23[2];
      v25 = *(_QWORD *)(v24 + 160);
      v26 = *(std::__shared_weak_count **)(v24 + 168);
      v57 = v25;
      v58 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = 0;
      v30 = *(const float **)(v25 + 24);
      __N = *(int *)(v15 + 8);
      do
      {
        __N *= *(int *)(v15 + 12 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmsma(*(const float **)(v11 + 24), 1, (const float *)(a1 + 280), v30, 1, (const float *)(a1 + 284), *(float **)(v15 + 24), 1, __N);
      if (v26)
      {
        v32 = (unint64_t *)&v26->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v14 = v60;
      if (!v60)
        goto LABEL_44;
    }
    v34 = (unint64_t *)&v14->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_44;
  }
  if (a4[1] == *a4)
  {
    v61 = 0;
    v62 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v61, *a4);
  }
  if (a3[1] == *a3)
  {
    v59 = 0;
    v60 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v59, *a3);
  }
  if (*(_DWORD *)(a1 + 288))
  {
    v18 = 0;
    v19 = v59;
    v20 = v59 + 12;
    while (1)
    {
      v21 = 0;
      v22 = *(int *)(v19 + 8);
      do
      {
        v22 *= *(int *)(v20 + v21);
        v21 += 4;
      }
      while (v21 != 12);
      if (v18 >= v22)
        break;
      LOBYTE(v8) = *(_BYTE *)(*(_QWORD *)(v61 + 24) + v18);
      v8 = *(float *)(a1 + 280) * (float)LODWORD(v8);
      *(_BYTE *)(*(_QWORD *)(v19 + 24) + v18++) = (int)v8;
    }
  }
  else
  {
    if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x10)
    {
      v39 = 0;
      v57 = 0;
      v58 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v57, *a4 + 2);
      v39 = v57;
    }
    v40 = 0;
    v41 = v59;
    v42 = v59 + 12;
    while (1)
    {
      v43 = 0;
      v44 = *(int *)(v41 + 8);
      do
      {
        v44 *= *(int *)(v42 + v43);
        v43 += 4;
      }
      while (v43 != 12);
      if (v40 >= v44)
        break;
      LOBYTE(v8) = *(_BYTE *)(*(_QWORD *)(v61 + 24) + v40);
      LOBYTE(v9) = *(_BYTE *)(*(_QWORD *)(v39 + 24) + v40);
      v9 = *(float *)(a1 + 284) * (float)LODWORD(v9);
      v8 = v9 + (float)((float)LODWORD(v8) * *(float *)(a1 + 280));
      *(_BYTE *)(*(_QWORD *)(v41 + 24) + v40++) = (int)v8;
    }
    v45 = v58;
    if (v58)
    {
      v46 = (unint64_t *)&v58->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  v48 = v60;
  if (v60)
  {
    v49 = (unint64_t *)&v60->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v36 = v62;
  if (v62)
  {
    v51 = (unint64_t *)&v62->__shared_owners_;
    do
      v38 = __ldaxr(v51);
    while (__stlxr(v38 - 1, v51));
LABEL_69:
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1917D4B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::axpby_kernel_cpu::set_alpha_beta(uint64_t this, float a2, float a3, int a4)
{
  *(float *)(this + 280) = a2;
  *(float *)(this + 284) = a3;
  *(_DWORD *)(this + 288) = a4;
  return this;
}

void Espresso::context_transfer_kernel_cpu::~context_transfer_kernel_cpu(Espresso::context_transfer_kernel_cpu *this)
{
  Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::reshape_kernel_cpu::~reshape_kernel_cpu(Espresso::reshape_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::reshape_kernel_cpu::get_runtime_type_config(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v10[2];
  char v11;
  __int128 v12;
  void *__p;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7 && *(_DWORD *)(v6 + 8) <= 4u && (0xCCCCCCCCCCCCCCCDLL * (v7 >> 3) < 2 || *(_DWORD *)(v6 + 48) <= 4u))
  {
    v12 = *(_OWORD *)v6;
    v14 = 0;
    v15 = 0;
    __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
    v8 = 0;
    v9 = 0;
    v10[0] = 0;
    v10[1] = &v8;
    v11 = 0;
    v8 = (char *)operator new(0x28uLL);
    v9 = (uint64_t)v8;
    v10[0] = v8 + 40;
    v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties*>((uint64_t)v10, (uint64_t)&v12, (uint64_t)&v16, (uint64_t)v8);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<std::vector<Espresso::blob_numerical_properties> const&,std::vector<Espresso::blob_numerical_properties>&,0>(a4, a2, (uint64_t *)&v8);
    *(_QWORD *)&v12 = &v8;
    std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  else
  {
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
  }
}

void sub_1917D4D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void Espresso::reshape_kernel_cpu::__compute_dynamic_shape<Espresso::blob<unsigned char,4>>(int **a1, uint64_t a2)
{
  int *v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  while (1)
  {
    v8 = 0;
    v9 = *(int *)(*(_QWORD *)a2 + 8);
    do
    {
      v9 *= *(int *)(*(_QWORD *)a2 + 12 + v8);
      v8 += 4;
    }
    while (v8 != 12);
    if (v9 <= v7)
      break;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + v7))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid input blob");
    v10 = (int)(float)((float)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + v7) + 0.5);
    if ((unint64_t)v6 >= v5)
    {
      v12 = v6 - v4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v5 - (_QWORD)v4) >> 1 > v13)
        v13 = (uint64_t)(v5 - (_QWORD)v4) >> 1;
      if (v5 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
      else
        v15 = 0;
      v16 = (int *)(v14 + 4 * v12);
      *v16 = v10;
      v11 = v16 + 1;
      while (v6 != v4)
      {
        v17 = *--v6;
        *--v16 = v17;
      }
      v5 = v14 + 4 * v15;
      *a1 = v16;
      a1[1] = v11;
      a1[2] = (int *)v5;
      if (v4)
        operator delete(v4);
      v4 = v16;
    }
    else
    {
      *v6 = v10;
      v11 = v6 + 1;
    }
    a1[1] = v11;
    ++v7;
    v6 = v11;
  }
}

void sub_1917D4ED4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int,int,int,int,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("reshape mismatching size: %d %d %d %d %d -> %d %d %d %d %d", a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void Espresso::copy_kernel_cpu::__compute_blob(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char v63[40];
  void *__p;
  void *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;

  if (*a2 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2))
  {
    v4 = *(_QWORD *)(*a2 + 160);
    v30 = *(std::__shared_weak_count **)(*a2 + 168);
    v80 = v4;
    v81 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v80 = 0;
    v81 = 0;
  }
  if (*a1 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1))
  {
    v5 = *(_QWORD *)(*a1 + 160);
    v33 = *(std::__shared_weak_count **)(*a1 + 168);
    v78 = v5;
    v79 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
  }
  else
  {
    v5 = 0;
    v78 = 0;
    v79 = 0;
  }
  if (*a2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2) == 1)
  {
    v7 = *(_QWORD *)(*a2 + 176);
    v6 = *(std::__shared_weak_count **)(*a2 + 184);
    v76 = v7;
    v77 = v6;
    if (v6)
    {
      v8 = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    v7 = 0;
    v76 = 0;
    v77 = 0;
  }
  if (*a1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1) == 1)
  {
    v11 = *(_QWORD *)(*a1 + 176);
    v10 = *(std::__shared_weak_count **)(*a1 + 184);
    v74 = v11;
    v75 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v11 = 0;
    v74 = 0;
    v75 = 0;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v72, a2);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v70, a1);
  if (*a2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2) == 3)
  {
    v15 = *(_QWORD *)(*a2 + 208);
    v14 = *(std::__shared_weak_count **)(*a2 + 216);
    v68 = v15;
    v69 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    v15 = 0;
    v68 = 0;
    v69 = 0;
  }
  if (*a1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1) == 3)
  {
    v18 = *(_QWORD *)(*a1 + 208);
    v19 = *(std::__shared_weak_count **)(*a1 + 216);
    v66 = v18;
    v67 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (!v5)
      goto LABEL_40;
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v66 = 0;
    v67 = 0;
    if (!v5)
      goto LABEL_40;
  }
  if (v4)
  {
    v22 = 0;
    v23 = *(void **)(v5 + 24);
    v24 = *(const void **)(v4 + 24);
    v25 = *(int *)(v5 + 8);
    do
    {
      v25 *= *(int *)(v5 + 12 + v22);
      v22 += 4;
    }
    while (v22 != 12);
    v26 = 4 * v25;
    goto LABEL_63;
  }
LABEL_40:
  if (v7 && v11)
  {
    v27 = 0;
    v23 = *(void **)(v11 + 24);
    v24 = *(const void **)(v7 + 24);
    v28 = *(int *)(v11 + 8);
    do
    {
      v28 *= *(int *)(v11 + 12 + v27);
      v27 += 4;
    }
    while (v27 != 12);
    v26 = 2 * v28;
LABEL_63:
    memcpy(v23, v24, v26);
    goto LABEL_64;
  }
  if (v72 && v70)
  {
    v29 = 0;
    v23 = *(void **)(v70 + 24);
    v24 = *(const void **)(v72 + 24);
    v26 = *(int *)(v70 + 8);
    do
    {
      v26 *= *(int *)(v70 + 12 + v29);
      v29 += 4;
    }
    while (v29 != 12);
    goto LABEL_63;
  }
  if (v15 && v18)
  {
    v36 = 0;
    v23 = *(void **)(v18 + 24);
    v24 = *(const void **)(v15 + 24);
    v37 = v18 + 12;
    v38 = *(int *)(v18 + 8);
    do
    {
      v38 *= *(int *)(v37 + v36);
      v36 += 4;
    }
    while (v36 != 12);
    v26 = 4 * v38;
    goto LABEL_63;
  }
  Espresso::abstract_blob_container::shape(v63, *a1);
  v62 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v63);
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  if (v62 >= 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Copy: Unexpected null blobs");
LABEL_64:
  if (v19)
  {
    v39 = (unint64_t *)&v19->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v41 = v69;
  if (v69)
  {
    v42 = (unint64_t *)&v69->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v71;
  if (v71)
  {
    v45 = (unint64_t *)&v71->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v73;
  if (v73)
  {
    v48 = (unint64_t *)&v73->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v75;
  if (v75)
  {
    v51 = (unint64_t *)&v75->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v77;
  if (v77)
  {
    v54 = (unint64_t *)&v77->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v79;
  if (v79)
  {
    v57 = (unint64_t *)&v79->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v81;
  if (v81)
  {
    v60 = (unint64_t *)&v81->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1917D542C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  uint64_t v20;
  va_list va3;
  uint64_t v22;
  va_list va4;

  va_start(va4, a9);
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v20 = va_arg(va4, _QWORD);
  v22 = va_arg(va4, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9 - 80);
  _Unwind_Resume(a1);
}

void Espresso::reshape_like_kernel_cpu::~reshape_like_kernel_cpu(Espresso::reshape_like_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::reshape_like_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, void ***a4)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void **v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void ***v30;
  char v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = **a3;
  v5 = (std::__shared_weak_count *)(*a3)[1];
  v34 = v6;
  v35 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = (void **)&v27;
  LOBYTE(v25) = 0;
  v9 = operator new(0x10uLL);
  v27 = v9;
  v29 = v9 + 2;
  *v9 = v6;
  v9[1] = v5;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v28 = v9 + 2;
  v13 = **a4;
  v12 = (std::__shared_weak_count *)(*a4)[1];
  v32 = v13;
  v33 = v12;
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v30 = &v24;
  v31 = 0;
  v16 = (void **)operator new(0x10uLL);
  v24 = v16;
  v26 = (char *)(v16 + 2);
  *v16 = v13;
  v16[1] = v12;
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v25 = (char *)(v16 + 2);
  Espresso::copy_kernel_cpu::__compute((uint64_t *)&v27, &v24);
  v30 = &v24;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v24 = (void **)&v27;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v24);
  v21 = v35;
  if (v35)
  {
    v22 = (unint64_t *)&v35->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1917D56A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, void **);
  v14 = va_arg(va3, _QWORD);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  va_copy((va_list)v4, va1);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 56);
  _Unwind_Resume(a1);
}

void Espresso::reshape_like_kernel_cpu::get_runtime_type_config(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v10;
  uint64_t v11;
  void **v12;
  char v13;
  __int128 v14;
  void *__p;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
LABEL_9:
    v14 = *(_OWORD *)v6;
    v16 = 0;
    v17 = 0;
    __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
    v10 = 0uLL;
    v11 = 0;
    v12 = (void **)&v10;
    v13 = 0;
    *(_QWORD *)&v10 = operator new(0x28uLL);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + 40;
    *((_QWORD *)&v10 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties*>((uint64_t)&v11, (uint64_t)&v14, (uint64_t)&v18, v10);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>(a4, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
    *(_OWORD *)(a4 + 24) = v10;
    *(_QWORD *)(a4 + 40) = v11;
    v11 = 0;
    v10 = 0uLL;
    v12 = (void **)&v10;
    std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v12);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
  else
  {
    while (1)
    {
      v14 = *(_OWORD *)v6;
      v16 = 0;
      v17 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
      if (DWORD2(v14) >= 5)
        Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, (_QWORD *)a4);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      if (DWORD2(v14) >= 5)
        break;
      v6 += 40;
      if (v6 == v7)
      {
        v6 = *a2;
        goto LABEL_9;
      }
    }
  }
}

void sub_1917D58B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  a13 = &a9;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::tile_kernel_cpu::~tile_kernel_cpu(Espresso::tile_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::tile_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t i;
  unint64_t v33;
  unint64_t j;
  unint64_t v35;
  unint64_t k;
  uint64_t v37;
  unint64_t v38;
  unint64_t m;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  float v65;
  int v66;
  int v67;
  BOOL v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  size_t v105;
  uint64_t v106;
  char *v107;
  std::__shared_weak_count *v108;
  char *v109;
  std::__shared_weak_count *v110;
  void *__p;
  void *v112;
  _DWORD v113[10];
  void *v114;
  void *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  void *v122;
  void *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  __int128 v128;

  v8 = *a3;
  if (a3[1] == *a3 || !*v8 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v128 = 0uLL;
  }
  else
  {
    v50 = *v8;
    v9 = *(_QWORD *)(*v8 + 160);
    v51 = *(_QWORD *)(v50 + 168);
    *(_QWORD *)&v128 = v9;
    *((_QWORD *)&v128 + 1) = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
  }
  v10 = *a4;
  if (a4[1] == *a4 || !*v10 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v11 = 0;
    v126 = 0;
    v127 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(*v10 + 160);
    v54 = *(std::__shared_weak_count **)(*v10 + 168);
    v126 = v11;
    v127 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(p_shared_owners);
      while (__stxr(v56 + 1, p_shared_owners));
    }
  }
  v12 = *a4;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x10
    || (v13 = v12[2]) == 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13))
  {
    v124 = 0;
    v125 = 0;
    goto LABEL_13;
  }
  v57 = v12[2];
  v59 = *(_QWORD *)(v57 + 160);
  v58 = *(std::__shared_weak_count **)(v57 + 168);
  v124 = v59;
  v125 = v58;
  if (v58)
  {
    v60 = (unint64_t *)&v58->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  if (v59)
  {
    if (!*(_QWORD *)(*(_QWORD *)a2 + 64))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("tile_kernel_cpu: dynamic parameters require interpreter");
    v62 = 0;
    v63 = *(_DWORD *)(v59 + 8);
    do
    {
      v63 *= *(_DWORD *)(v59 + 12 + v62);
      v62 += 4;
    }
    while (v62 != 12);
    if (v63 <= 0)
    {
      *(_DWORD *)(a1 + 280) = 1;
    }
    else
    {
      v64 = *(_QWORD *)(v59 + 24);
      *(_DWORD *)(a1 + 280) = (int)*(float *)(v64 + 4 * (v63 - 1));
      if (v63 != 1)
      {
        *(_DWORD *)(a1 + 284) = (int)*(float *)(v64 + 4 * (v63 - 2));
        if (v63 > 2)
        {
          *(_DWORD *)(a1 + 288) = (int)*(float *)(v64 + 4 * (v63 - 3));
          if (v63 != 3)
          {
            *(_DWORD *)(a1 + 292) = (int)*(float *)(v64 + 4 * (v63 - 4));
            v65 = 1.0;
            if (v63 >= 5)
              v65 = *(float *)(v64 + 4 * (v63 - 5));
            goto LABEL_109;
          }
LABEL_108:
          *(_DWORD *)(a1 + 292) = 1;
          v65 = 1.0;
LABEL_109:
          *(_DWORD *)(a1 + 296) = (int)v65;
          Espresso::abstract_blob_container::shape((char *)&v116, **a4);
          Espresso::abstract_blob_container::shape((char *)v113, **a3);
          v66 = *(_DWORD *)(a1 + 284) * v117;
          v113[0] = *(_DWORD *)(a1 + 280) * v116;
          v113[1] = v66;
          v67 = *(_DWORD *)(a1 + 292) * v119;
          v113[2] = *(_DWORD *)(a1 + 288) * v118;
          v113[3] = v67;
          v113[4] = *(_DWORD *)(a1 + 296) * v120;
          v113[5] = v121;
          Espresso::abstract_blob_container::shape((char *)&v109, **a3);
          v68 = Espresso::layer_shape::operator==((uint64_t)&v109, (uint64_t)v113);
          if (__p)
          {
            v112 = __p;
            operator delete(__p);
          }
          if (!v68)
          {
            v69 = operator new(0x98uLL);
            v69[1] = 0;
            v70 = v69 + 1;
            v69[2] = 0;
            *v69 = &off_1E2DBE998;
            *((_OWORD *)v69 + 4) = 0u;
            *((_OWORD *)v69 + 5) = 0u;
            *((_OWORD *)v69 + 2) = 0u;
            *((_OWORD *)v69 + 3) = 0u;
            *((_OWORD *)v69 + 6) = 0u;
            *((_OWORD *)v69 + 7) = 0u;
            *((_OWORD *)v69 + 8) = 0u;
            v69[17] = 0;
            v69[18] = 0;
            *((_DWORD *)v69 + 12) = 1065353216;
            v69[7] = 0x1FFFFFFFFLL;
            v69[12] = 0;
            v69[13] = 0;
            v69[8] = 0;
            v69[9] = 0;
            *((_BYTE *)v69 + 88) = 0;
            v69[10] = 0;
            v69[3] = &off_1E2DA0BF0;
            v69[15] = 0;
            v69[16] = 0;
            *((_BYTE *)v69 + 144) = 0;
            v109 = (char *)(v69 + 3);
            v110 = (std::__shared_weak_count *)v69;
            *((_BYTE *)v69 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
            v71 = **a3;
            v107 = (char *)(v69 + 3);
            v108 = (std::__shared_weak_count *)v69;
            do
              v72 = __ldxr(v70);
            while (__stxr(v72 + 1, v70));
            (*(void (**)(uint64_t, _DWORD *, char **))(*(_QWORD *)v71 + 16))(v71, v113, &v107);
            v73 = v108;
            if (v108)
            {
              v74 = (unint64_t *)&v108->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v76 = *a3;
            v77 = 0uLL;
            if (a3[1] != *a3)
            {
              if (*v76)
              {
                v78 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)*v76 + 32))(*v76, (__n128)0);
                v77 = 0uLL;
                if (!v78)
                {
                  v77 = *(_OWORD *)(*v76 + 160);
                  v79 = *(_QWORD *)(*v76 + 168);
                  if (v79)
                  {
                    v80 = (unint64_t *)(v79 + 8);
                    do
                      v81 = __ldxr(v80);
                    while (__stxr(v81 + 1, v80));
                  }
                }
              }
            }
            v82 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
            v128 = v77;
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v85 = v110;
            if (v110)
            {
              v86 = (unint64_t *)&v110->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
          }
          if (v114)
          {
            v115 = v114;
            operator delete(v114);
          }
          if (v122)
          {
            v123 = v122;
            operator delete(v122);
          }
          v9 = v128;
          v11 = v126;
          goto LABEL_13;
        }
LABEL_107:
        *(_DWORD *)(a1 + 288) = 1;
        goto LABEL_108;
      }
    }
    *(_DWORD *)(a1 + 284) = 1;
    goto LABEL_107;
  }
LABEL_13:
  if (v9 && v11)
  {
    v14 = (int *)**a4;
    v15 = v14[2];
    v104 = v14[3];
    v99 = v14[4];
    v94 = v14[5];
    v88 = v14[6];
    Espresso::abstract_blob_container::shape((char *)&v116, **a3);
    if (*(_DWORD *)(a1 + 296))
    {
      v16 = v117 * v116 * v118;
      v17 = (char *)(*(_QWORD *)(v9 + 24) + 4 * v16 * v119 * v120);
      v18 = (char *)(*(_QWORD *)(v11 + 24) + 4 * (int)v104 * (uint64_t)(int)v15 * v99 * v94 * v88);
      v19 = (int)v88 * (uint64_t)(v16 * v119);
      v89 = 4 * v19;
      v90 = -v19;
      v20 = (int)v94 * (uint64_t)v16;
      v95 = 4 * v20;
      v96 = -v20;
      v21 = (int)v99 * (uint64_t)(v117 * v116);
      v100 = 4 * v21;
      v101 = -v21;
      v22 = v116 * (uint64_t)(int)v104;
      v105 = 4 * v22;
      v106 = -v22;
      v23 = 0;
      v24 = -v15;
      v25 = 4 * v15;
      if (v104 <= 1)
        v26 = 1;
      else
        v26 = v104;
      if (v99 <= 1)
        v27 = 1;
      else
        v27 = v99;
      v102 = v27;
      if (v94 <= 1)
        v28 = 1;
      else
        v28 = v94;
      v97 = v28;
      if (v88 <= 1)
        v29 = 1;
      else
        v29 = v88;
      v92 = v29;
      v30 = -4 * v15;
      do
      {
        v91 = v23;
        if (v23)
        {
          memcpy(&v17[4 * v90], v17, v89);
          v17 += 4 * v90;
        }
        else if ((_DWORD)v88)
        {
          v93 = 0;
          LODWORD(v31) = *(_DWORD *)(a1 + 292);
          do
          {
            if ((_DWORD)v31)
            {
              for (i = 0; i < v31; ++i)
              {
                if (i)
                {
                  memcpy(&v17[4 * v96], v17, v95);
                  v17 += 4 * v96;
                }
                else if ((_DWORD)v94)
                {
                  v98 = 0;
                  LODWORD(v33) = *(_DWORD *)(a1 + 288);
                  do
                  {
                    if ((_DWORD)v33)
                    {
                      for (j = 0; j < v33; ++j)
                      {
                        if (j)
                        {
                          memcpy(&v17[4 * v101], v17, v100);
                          v17 += 4 * v101;
                        }
                        else if ((_DWORD)v99)
                        {
                          v103 = 0;
                          LODWORD(v35) = *(_DWORD *)(a1 + 284);
                          do
                          {
                            if ((_DWORD)v35)
                            {
                              for (k = 0; k < v35; ++k)
                              {
                                if (k)
                                {
                                  memcpy(&v17[4 * v106], v17, v105);
                                  v17 += 4 * v106;
                                }
                                else if ((_DWORD)v104)
                                {
                                  v37 = 0;
                                  LODWORD(v38) = *(_DWORD *)(a1 + 280);
                                  do
                                  {
                                    if ((_DWORD)v38)
                                    {
                                      for (m = 0; m < v38; ++m)
                                      {
                                        if (m)
                                          v40 = 0;
                                        else
                                          v40 = v24;
                                        v18 += 4 * v40;
                                        v17 += v30;
                                        memcpy(v17, v18, v25);
                                        v38 = *(int *)(a1 + 280);
                                      }
                                    }
                                    ++v37;
                                  }
                                  while (v37 != v26);
                                }
                                v35 = *(int *)(a1 + 284);
                              }
                              i = 0;
                              j = 0;
                            }
                            ++v103;
                          }
                          while (v103 != v102);
                        }
                        v33 = *(int *)(a1 + 288);
                      }
                    }
                    ++v98;
                  }
                  while (v98 != v97);
                }
                v31 = *(int *)(a1 + 292);
              }
            }
            ++v93;
          }
          while (v93 != v92);
        }
        v23 = v91 + 1;
      }
      while (v91 + 1 < (unint64_t)*(int *)(a1 + 296));
    }
    if (v122)
    {
      v123 = v122;
      operator delete(v122);
    }
  }
  v41 = v125;
  if (v125)
  {
    v42 = (unint64_t *)&v125->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v127;
  if (v127)
  {
    v45 = (unint64_t *)&v127->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_1917D615C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  uint64_t v47;
  void *v49;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  v49 = *(void **)(v47 - 168);
  if (v49)
  {
    *(_QWORD *)(v47 - 160) = v49;
    operator delete(v49);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 112);
  _Unwind_Resume(a1);
}

void Espresso::flatten_kernel_cpu::~flatten_kernel_cpu(Espresso::flatten_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::flatten_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  size_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;

  v7 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v9 = 0;
    v93 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v8 = *(std::__shared_weak_count **)(*v7 + 168);
    v93 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v87 = __ldxr(p_shared_owners);
      while (__stxr(v87 + 1, p_shared_owners));
    }
  }
  v10 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v10 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v11 = 0;
    v12 = 0;
    v92 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(*v10 + 160);
    v11 = *(std::__shared_weak_count **)(*v10 + 168);
    v92 = v11;
    if (v11)
    {
      v88 = (unint64_t *)&v11->__shared_owners_;
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
  }
  v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v13)
  {
    v15 = v13[22];
    v14 = (std::__shared_weak_count *)v13[23];
    v91 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v91 = 0;
  }
  v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v18)
  {
    v19 = *((_QWORD *)v18 + 22);
    v20 = (std::__shared_weak_count *)*((_QWORD *)v18 + 23);
    v90 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v90 = 0;
  }
  v23 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v23 == 2)
    goto LABEL_24;
  if ((_DWORD)v23 != 1)
  {
    if ((_DWORD)v23)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Flatten: invalid mode %d", v23);
LABEL_24:
    if (v9 && v12)
    {
      v24 = 0;
      v25 = *(void **)(v12 + 24);
      v26 = *(const void **)(v9 + 24);
      v27 = *(int *)(v9 + 8);
      do
      {
        v27 *= *(int *)(v9 + 12 + v24);
        v24 += 4;
      }
      while (v24 != 12);
      v28 = 4 * v27;
LABEL_64:
      memcpy(v25, v26, v28);
      goto LABEL_65;
    }
    if (v15 && v19)
    {
      v53 = 0;
      v25 = *(void **)(v19 + 24);
      v26 = *(const void **)(v15 + 24);
      v54 = *(int *)(v15 + 8);
      do
      {
        v54 *= *(int *)(v15 + 12 + v53);
        v53 += 4;
      }
      while (v53 != 12);
      v28 = 2 * v54;
      goto LABEL_64;
    }
LABEL_125:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Flatten: invalid blob configuration");
  }
  if (v9 && v12)
  {
    if (v8)
    {
      v29 = (unint64_t *)&v8->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    if (v11)
    {
      v31 = (unint64_t *)&v11->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = *(_DWORD *)(v9 + 20);
    if (v33 >= 1)
    {
      v34 = 0;
      v35 = 0;
      LODWORD(v36) = 0;
      v38 = *(_DWORD *)(v9 + 12);
      v37 = *(_DWORD *)(v9 + 16);
      v39 = *(_DWORD *)(v9 + 8);
      do
      {
        if (v37 >= 1)
        {
          v40 = 0;
          v41 = v34;
          do
          {
            if (v38 >= 1)
            {
              v42 = 0;
              v43 = v41;
              do
              {
                if (v39 >= 1)
                {
                  v44 = *(_QWORD *)(v9 + 24);
                  v45 = *(_QWORD *)(v12 + 24);
                  v36 = (int)v36;
                  v46 = v39;
                  v47 = v43;
                  do
                  {
                    *(_DWORD *)(v45 + 4 * v47) = *(_DWORD *)(v44 + 4 * v36++);
                    v47 += v37;
                    --v46;
                  }
                  while (v46);
                }
                ++v42;
                v43 += v37 * v39;
              }
              while (v42 != v38);
            }
            ++v40;
            ++v41;
          }
          while (v40 != v37);
        }
        ++v35;
        v34 += v37 * v39 * v38;
      }
      while (v35 != v33);
    }
    if (v11)
    {
      v48 = (unint64_t *)&v11->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v8)
    {
      v50 = (unint64_t *)&v8->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v52 = v8;
LABEL_116:
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    if (!v15 || !v19)
      goto LABEL_125;
    if (v14)
    {
      v63 = (unint64_t *)&v14->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    if (v20)
    {
      v65 = (unint64_t *)&v20->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v67 = *(_DWORD *)(v15 + 20);
    if (v67 >= 1)
    {
      v68 = 0;
      v69 = 0;
      LODWORD(v70) = 0;
      v72 = *(_DWORD *)(v15 + 12);
      v71 = *(_DWORD *)(v15 + 16);
      v73 = *(_DWORD *)(v15 + 8);
      do
      {
        if (v71 >= 1)
        {
          v74 = 0;
          v75 = v68;
          do
          {
            if (v72 >= 1)
            {
              v76 = 0;
              v77 = v75;
              do
              {
                if (v73 >= 1)
                {
                  v78 = *(_QWORD *)(v15 + 24);
                  v79 = *(_QWORD *)(v19 + 24);
                  v70 = (int)v70;
                  v80 = v73;
                  v81 = v77;
                  do
                  {
                    *(_WORD *)(v79 + 2 * v81) = *(_WORD *)(v78 + 2 * v70++);
                    v81 += v71;
                    --v80;
                  }
                  while (v80);
                }
                ++v76;
                v77 += v71 * v73;
              }
              while (v76 != v72);
            }
            ++v74;
            ++v75;
          }
          while (v74 != v71);
        }
        ++v69;
        v68 += v71 * v73 * v72;
      }
      while (v69 != v67);
    }
    if (v20)
    {
      v82 = (unint64_t *)&v20->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v14)
    {
      v84 = (unint64_t *)&v14->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        v52 = v14;
        goto LABEL_116;
      }
    }
  }
LABEL_65:
  if (v90)
  {
    v55 = (unint64_t *)&v90->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v91)
  {
    v57 = (unint64_t *)&v91->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v92)
  {
    v59 = (unint64_t *)&v92->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (v93)
  {
    v61 = (unint64_t *)&v93->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_1917D67C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::transpose_kernel_cpu::~transpose_kernel_cpu(Espresso::transpose_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::transpose_kernel_cpu::__launch(int *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  vDSP_Length v45;
  vDSP_Length v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _WORD *v92;
  uint64_t v93;
  __int16 *v94;
  _WORD *v95;
  _WORD *v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  size_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _BYTE *v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  vDSP_Length v144;
  vDSP_Length v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char *v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int16 *v181;
  _WORD *v182;
  _WORD *v183;
  uint64_t v184;
  __int16 v185;
  int v186;
  size_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t kk;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int16 v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  _DWORD *v225;
  uint64_t v226;
  _DWORD *v227;
  _DWORD *v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t i;
  uint64_t v238;
  uint64_t j;
  uint64_t k;
  int v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  size_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _BYTE *v283;
  uint64_t v284;
  char v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  unint64_t *v302;
  unint64_t v303;
  unint64_t *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  _DWORD *v327;
  uint64_t v328;
  _DWORD *v329;
  _DWORD *v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t jj;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  size_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  std::__shared_weak_count *v364;
  uint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  std::__shared_weak_count *v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  std::__shared_weak_count *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  vDSP_Length __N;
  vDSP_Length __Na;
  vDSP_Length __Nb;
  vDSP_Length __Nc;
  std::__shared_weak_count *v401;
  std::__shared_weak_count *v402;
  std::__shared_weak_count *v403;
  std::__shared_weak_count *v404;
  std::__shared_weak_count *v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  uint64_t v410;
  std::__shared_weak_count *v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  void *v424;
  uint64_t v425;

  v425 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v9 = 0;
    v416 = 0;
    v417 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v8 = *(std::__shared_weak_count **)(*v7 + 168);
    v416 = v9;
    v417 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v162 = __ldxr(p_shared_owners);
      while (__stxr(v162 + 1, p_shared_owners));
    }
  }
  v10 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v10
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v11 = 0;
    v12 = 0;
    v414 = 0;
    v415 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(*v10 + 160);
    v11 = *(std::__shared_weak_count **)(*v10 + 168);
    v414 = v12;
    v415 = v11;
    if (v11)
    {
      v163 = (unint64_t *)&v11->__shared_owners_;
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
  }
  v13 = *a4;
  if (a4[1] != *a4 && *v13 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v13 + 32))(*v13) == 1)
  {
    v14 = *(std::__shared_weak_count **)(*v13 + 184);
    v382 = *(_QWORD *)(*v13 + 176);
    v412 = v382;
    v413 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v367 = v14;
    }
    else
    {
      v367 = 0;
    }
  }
  else
  {
    v367 = 0;
    v382 = 0;
    v412 = 0;
    v413 = 0;
  }
  v17 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3
    && *v17
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v17 + 32))(*v17) == 1)
  {
    v19 = *(_QWORD *)(*v17 + 176);
    v18 = *(std::__shared_weak_count **)(*v17 + 184);
    v410 = v19;
    v411 = v18;
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v410 = 0;
    v411 = 0;
  }
  if (a4[1] == *a4)
  {
    v408 = 0;
    v409 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v408, *a4);
  }
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
    v406 = 0;
    v407 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v406, *(uint64_t **)a3);
  }
  v22 = *a4;
  v371 = v11;
  v363 = v18;
  if (a4[1] != *a4 && *v22 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v22 + 32))(*v22) == 3)
  {
    v23 = *(_QWORD *)(*v22 + 208);
    v24 = *(std::__shared_weak_count **)(*v22 + 216);
    v405 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v405 = 0;
  }
  v27 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v27
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v27 + 32))(*v27) != 3)
  {
    v28 = 0;
    v29 = 0;
    v404 = 0;
    if (!v9)
      goto LABEL_73;
LABEL_48:
    if (!v12)
      goto LABEL_73;
    v32 = a1[70];
    v33 = a1[71];
    v34 = a1[72];
    v35 = a1[73];
    v36 = a1[74];
    v403 = v8;
    if (v8)
    {
      v37 = (unint64_t *)&v8->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v39 = v371;
    if (v371)
    {
      v40 = (unint64_t *)&v371->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = **a4;
    v43 = *(_DWORD *)(v42 + 20);
    v389 = *(int *)(v42 + 24);
    v44 = *(int *)(**(_QWORD **)a3 + 20);
    v46 = *(int *)(v9 + 8);
    v45 = *(int *)(v9 + 12);
    __N = *(int *)(v9 + 16);
    v47 = *(int *)(v12 + 8);
    v48 = *(_DWORD *)(v12 + 12);
    v49 = *(int *)(v12 + 16);
    v50 = *(char **)(v12 + 24);
    v51 = *(int **)(v9 + 24);
    v52 = v48 * (uint64_t)(int)v47;
    v53 = v52 * v49;
    if ((_DWORD)v35 == 3 && (_DWORD)v36 == 4)
    {
      if ((_DWORD)v32)
      {
        if ((_DWORD)v32 == 1)
        {
          if (!(_DWORD)v33 && (_DWORD)v34 == 2)
          {
            v166 = (int)__N * (uint64_t)(int)(v389 * v43);
            if (v166)
            {
              v167 = 0;
              v168 = 4 * v48 * (uint64_t)(int)v47;
              do
              {
                vDSP_mtrans((const float *)((char *)v51 + v167), 1, (float *)&v50[v167], 1, v46, v45);
                v167 += v168;
                --v166;
              }
              while (v166);
            }
            goto LABEL_328;
          }
        }
        else if ((_DWORD)v32 == 2)
        {
          if ((_DWORD)v34 || (_DWORD)v45 != 1)
          {
            if (!(_DWORD)v33 && (_DWORD)v34 == 1)
            {
              if ((_DWORD)v389)
              {
                v212 = 0;
                if (v46 <= 1)
                  v213 = 1;
                else
                  v213 = v46;
                if (v45 <= 1)
                  v214 = 1;
                else
                  v214 = v45;
                v215 = __N;
                if (__N <= 1)
                  v215 = 1;
                if (v43 <= 1)
                  v216 = 1;
                else
                  v216 = v43;
                v217 = v48 * (uint64_t)(int)v47;
                v218 = 4 * v217 * v49 * v44;
                v219 = 4 * v217 * v49;
                v220 = 4 * v217;
                v221 = 4 * v47;
                do
                {
                  if (v43)
                  {
                    v222 = 0;
                    v223 = v50;
                    do
                    {
                      if ((_DWORD)__N)
                      {
                        v224 = 0;
                        v225 = v223;
                        do
                        {
                          if ((_DWORD)v45)
                          {
                            v226 = 0;
                            v227 = v225;
                            do
                            {
                              v228 = v227;
                              v229 = v213;
                              if ((_DWORD)v46)
                              {
                                do
                                {
                                  v230 = *v51++;
                                  *v228 = v230;
                                  v228 = (_DWORD *)((char *)v228 + v221);
                                  --v229;
                                }
                                while (v229);
                              }
                              ++v226;
                              v227 = (_DWORD *)((char *)v227 + v220);
                            }
                            while (v226 != v214);
                          }
                          ++v224;
                          ++v225;
                        }
                        while (v224 != v215);
                      }
                      ++v222;
                      v223 += v219;
                    }
                    while (v222 != v216);
                  }
                  ++v212;
                  v50 += v218;
                }
                while (v212 != v389);
              }
              goto LABEL_328;
            }
          }
          else if ((_DWORD)v33 == 1)
          {
            if ((_DWORD)v389)
            {
              v54 = 0;
              if (v43 <= 1)
                v55 = 1;
              else
                v55 = v43;
              v383 = v55;
              v56 = v48 * (uint64_t)(int)v47 * v49;
              v57 = 4 * v56 * v44;
              v58 = 4 * v56;
              do
              {
                if (v43)
                {
                  v59 = 0;
                  v60 = v383;
                  do
                  {
                    vDSP_mtrans((const float *)((char *)v51 + v59), 1, (float *)&v50[v59], 1, v46, __N);
                    v59 += v58;
                    --v60;
                  }
                  while (v60);
                }
                ++v54;
                v50 += v57;
                v51 = (int *)((char *)v51 + v57);
              }
              while (v54 != v389);
            }
            goto LABEL_328;
          }
        }
      }
      else if ((_DWORD)v33 == 2 && (_DWORD)v34 == 1)
      {
        if ((_DWORD)v46 == 1)
        {
          if ((_DWORD)v389)
          {
            v169 = 0;
            if (v43 <= 1)
              v170 = 1;
            else
              v170 = v43;
            v171 = v170;
            do
            {
              if (v43)
              {
                v172 = 0;
                v173 = v171;
                do
                {
                  vDSP_mtrans((const float *)&v51[v172 / 4], 1, (float *)&v50[v172], 1, v45, __N);
                  v172 += 4 * (int)__N * (uint64_t)(int)v45;
                  --v173;
                }
                while (v173);
                v50 += v172;
                v51 = (int *)((char *)v51 + v172);
              }
              ++v169;
            }
            while (v169 != v389);
            v39 = v371;
          }
          goto LABEL_328;
        }
        if (!((_DWORD)v389 * v43))
        {
LABEL_328:
          if (v39)
          {
            v242 = (unint64_t *)&v39->__shared_owners_;
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v207 = v403;
          if (!v403)
            goto LABEL_338;
          v244 = (unint64_t *)&v403->__shared_owners_;
          do
            v211 = __ldaxr(v244);
          while (__stlxr(v211 - 1, v244));
LABEL_336:
          if (!v211)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
          goto LABEL_338;
        }
        v365 = (int)(v389 * v43);
        v369 = 0;
        v267 = 4 * v46;
        if (v45 <= 1)
          v268 = 1;
        else
          v268 = v45;
        v269 = v48 * (uint64_t)(int)v47;
        v360 = 4 * v269 * v49;
        v270 = __N;
        if (__N <= 1)
          v270 = 1;
        v376 = v270;
        v380 = v268;
        v271 = 4 * v47;
        v272 = 4 * v269;
        do
        {
          if ((_DWORD)__N)
          {
            v273 = 0;
            v274 = (char *)&v51[v369 * v53];
            v275 = v50;
            do
            {
              v386 = v275;
              v394 = v273;
              v276 = v380;
              if ((_DWORD)v45)
              {
                do
                {
                  memcpy(v275, v274, v267);
                  v275 += v272;
                  v274 += v271;
                  --v276;
                }
                while (v276);
              }
              v273 = v394 + 1;
              v275 = &v386[v271];
            }
            while (v394 + 1 != v376);
          }
          v50 += v360;
          ++v369;
        }
        while (v369 != v365);
LABEL_327:
        v39 = v371;
        goto LABEL_328;
      }
    }
    if (!(_DWORD)v389)
      goto LABEL_328;
    v231 = 0;
    v232 = v53 * v44;
    if (v46 <= 1)
      v233 = 1;
    else
      v233 = v46;
    if (v45 <= 1)
      v234 = 1;
    else
      v234 = v45;
    v235 = __N;
    if (__N <= 1)
      v235 = 1;
    if (v43 <= 1)
      v236 = 1;
    else
      v236 = v43;
    do
    {
      if (v43)
      {
        for (i = 0; i != v236; ++i)
        {
          if ((_DWORD)__N)
          {
            v238 = 0;
            do
            {
              if ((_DWORD)v45)
              {
                for (j = 0; j != v234; ++j)
                {
                  if ((_DWORD)v46)
                  {
                    for (k = 0; k != v233; ++k)
                    {
                      v418 = k;
                      v419 = j;
                      v420 = v238;
                      v421 = i;
                      v422 = v231;
                      v241 = *v51++;
                      *(_DWORD *)&v50[4 * *(&v418 + v32)
                                    + 4 * *(&v418 + v33) * v47
                                    + 4 * *(&v418 + v34) * v52
                                    + 4 * *(&v418 + v35) * v53
                                    + 4 * *(&v418 + v36) * v232] = v241;
                    }
                  }
                }
              }
              ++v238;
            }
            while (v238 != v235);
          }
        }
      }
      ++v231;
    }
    while (v231 != v389);
    goto LABEL_327;
  }
  v29 = *(_QWORD *)(*v27 + 208);
  v28 = *(std::__shared_weak_count **)(*v27 + 216);
  v404 = v28;
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  if (v9)
    goto LABEL_48;
LABEL_73:
  if (!v382 || !v19)
  {
    v99 = v408;
    if (v408)
    {
      v100 = v406;
      if (v406)
      {
        v101 = a1[70];
        v102 = a1[71];
        v103 = a1[72];
        v104 = a1[73];
        v105 = a1[74];
        v106 = v409;
        if (v409)
        {
          v107 = (unint64_t *)&v409->__shared_owners_;
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        v368 = v106;
        v109 = v407;
        if (v407)
        {
          v110 = (unint64_t *)&v407->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        v364 = v109;
        v112 = **a4;
        v113 = *(_DWORD *)(v112 + 20);
        v391 = *(int *)(v112 + 24);
        v115 = *(int *)(v99 + 8);
        v114 = *(int *)(v99 + 12);
        __Nb = *(int *)(v99 + 16);
        v116 = *(int *)(v100 + 8);
        v117 = *(_QWORD *)(v100 + 24);
        v118 = *(_QWORD *)(v99 + 24);
        v119 = *(int *)(v100 + 12) * (uint64_t)(int)v116;
        v120 = v119 * *(int *)(v100 + 16);
        v121 = v120 * *(int *)(**(_QWORD **)a3 + 20);
        if ((_DWORD)v104 == 3 && (_DWORD)v105 == 4)
        {
          if ((_DWORD)v101)
          {
            if ((_DWORD)v101 == 1)
            {
              if (!(_DWORD)v102 && (_DWORD)v103 == 2)
              {
                v277 = (int)__Nb * (uint64_t)(int)(v391 * v113);
                if (v277)
                {
                  v278 = 0;
                  if (v115 <= 1)
                    v279 = 1;
                  else
                    v279 = v115;
                  if (v114 <= 1)
                    v280 = 1;
                  else
                    v280 = v114;
                  do
                  {
                    if ((_DWORD)v114)
                    {
                      v281 = 0;
                      v282 = (char *)(v118 + v278 * v119);
                      do
                      {
                        if ((_DWORD)v115)
                        {
                          v283 = (_BYTE *)(v117 + v278 * v119 + v281);
                          v284 = v279;
                          do
                          {
                            v285 = *v282++;
                            *v283 = v285;
                            v283 += v116;
                            --v284;
                          }
                          while (v284);
                        }
                        ++v281;
                      }
                      while (v281 != v280);
                    }
                    ++v278;
                  }
                  while (v278 != v277);
                }
                goto LABEL_454;
              }
            }
            else if ((_DWORD)v101 == 2 && !(_DWORD)v103 && (_DWORD)v114 == 1 && (_DWORD)v102 == 1)
            {
              if ((_DWORD)v391)
              {
                v122 = 0;
                if (v115 <= 1)
                  v123 = 1;
                else
                  v123 = v115;
                if (__Nb <= 1)
                  v124 = 1;
                else
                  v124 = __Nb;
                if (v113 <= 1)
                  v125 = 1;
                else
                  v125 = *(_DWORD *)(v112 + 20);
                do
                {
                  if (v113)
                  {
                    v126 = 0;
                    do
                    {
                      if ((_DWORD)__Nb)
                      {
                        v127 = 0;
                        v128 = (char *)(v118 + v122 * v121 + v126 * v120);
                        do
                        {
                          if ((_DWORD)v115)
                          {
                            v129 = (_BYTE *)(v117 + v122 * v121 + v126 * v120 + v127);
                            v130 = v123;
                            do
                            {
                              v131 = *v128++;
                              *v129 = v131;
                              v129 += v119;
                              --v130;
                            }
                            while (v130);
                          }
                          ++v127;
                        }
                        while (v127 != v124);
                      }
                      ++v126;
                    }
                    while (v126 != v125);
                  }
                  ++v122;
                }
                while (v122 != v391);
              }
LABEL_454:
              v207 = v368;
              if (v364)
              {
                v302 = (unint64_t *)&v364->__shared_owners_;
                do
                  v303 = __ldaxr(v302);
                while (__stlxr(v303 - 1, v302));
                if (!v303)
                {
                  ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                  std::__shared_weak_count::__release_weak(v364);
                }
              }
              if (!v368)
                goto LABEL_338;
              v304 = (unint64_t *)&v368->__shared_owners_;
              do
                v211 = __ldaxr(v304);
              while (__stlxr(v211 - 1, v304));
              goto LABEL_336;
            }
          }
          else if ((_DWORD)v102 == 2 && (_DWORD)v103 == 1)
          {
            v286 = v391 * v113;
            if (v286)
            {
              v361 = v286;
              if (v114 <= 1)
                v287 = 1;
              else
                v287 = v114;
              v373 = 0;
              v377 = v287;
              v288 = __Nb;
              if (__Nb <= 1)
                v288 = 1;
              v387 = v288;
              do
              {
                if ((_DWORD)__Nb)
                {
                  v289 = 0;
                  v290 = (char *)(v118 + v373 * v120);
                  do
                  {
                    v395 = v289;
                    if ((_DWORD)v114)
                    {
                      v291 = v377;
                      v292 = (char *)(v117 + v373 * v120 + v289 * v116);
                      do
                      {
                        memcpy(v292, v290, v115);
                        v292 += v119;
                        v290 += v116;
                        --v291;
                      }
                      while (v291);
                    }
                    v289 = v395 + 1;
                  }
                  while (v395 + 1 != v387);
                }
                ++v373;
              }
              while (v373 != v361);
            }
            goto LABEL_454;
          }
        }
        if ((_DWORD)v391)
        {
          v293 = 0;
          if (v115 <= 1)
            v294 = 1;
          else
            v294 = v115;
          if (v114 <= 1)
            v295 = 1;
          else
            v295 = v114;
          if (__Nb <= 1)
            v296 = 1;
          else
            v296 = __Nb;
          if (v113 <= 1)
            v297 = 1;
          else
            v297 = *(_DWORD *)(v112 + 20);
          do
          {
            if (v113)
            {
              v298 = 0;
              do
              {
                if ((_DWORD)__Nb)
                {
                  for (m = 0; m != v296; ++m)
                  {
                    if ((_DWORD)v114)
                    {
                      for (n = 0; n != v295; ++n)
                      {
                        if ((_DWORD)v115)
                        {
                          for (ii = 0; ii != v294; ++ii)
                          {
                            v418 = ii;
                            v419 = n;
                            v420 = m;
                            v421 = v298;
                            v422 = v293;
                            *(_BYTE *)(v117
                                     + *(&v418 + v101)
                                     + *(&v418 + v102) * v116
                                     + *(&v418 + v103) * v119
                                     + *(&v418 + v104) * v120
                                     + *(&v418 + v105) * v121) = *(_BYTE *)(v118 + ii);
                          }
                          v118 += ii;
                        }
                      }
                    }
                  }
                }
                ++v298;
              }
              while (v298 != v297);
            }
            ++v293;
          }
          while (v293 != v391);
        }
        goto LABEL_454;
      }
    }
    if (!v23 || !v29)
    {
      Espresso::abstract_blob_container::shape((char *)&v418, **a4);
      v165 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v418);
      if (v423)
      {
        v424 = v423;
        operator delete(v423);
      }
      if (v165 >= 1)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("transpose_kernel: invalid blob configuration");
      goto LABEL_338;
    }
    v132 = a1[70];
    v133 = a1[71];
    v134 = a1[72];
    v135 = a1[73];
    v136 = a1[74];
    v402 = v24;
    if (v24)
    {
      v137 = (unint64_t *)&v24->__shared_owners_;
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
    }
    v401 = v28;
    if (v28)
    {
      v139 = (unint64_t *)&v28->__shared_owners_;
      do
        v140 = __ldxr(v139);
      while (__stxr(v140 + 1, v139));
    }
    v141 = **a4;
    v142 = *(_DWORD *)(v141 + 20);
    v392 = *(int *)(v141 + 24);
    v143 = *(int *)(**(_QWORD **)a3 + 20);
    v145 = *(int *)(v23 + 8);
    v144 = *(int *)(v23 + 12);
    __Nc = *(int *)(v23 + 16);
    v146 = *(int *)(v29 + 8);
    v147 = *(_DWORD *)(v29 + 12);
    v148 = *(int *)(v29 + 16);
    v149 = *(char **)(v29 + 24);
    v150 = *(int **)(v23 + 24);
    v151 = v147 * (uint64_t)(int)v146;
    v152 = v151 * v148;
    if ((_DWORD)v135 == 3 && (_DWORD)v136 == 4)
    {
      if ((_DWORD)v132)
      {
        if ((_DWORD)v132 == 1)
        {
          if (!(_DWORD)v133 && (_DWORD)v134 == 2)
          {
            v305 = (int)__Nc * (uint64_t)(int)(v392 * v142);
            if (v305)
            {
              v306 = v28;
              v307 = 0;
              v308 = 4 * v147 * (uint64_t)(int)v146;
              do
              {
                vDSP_mtrans((const float *)((char *)v150 + v307), 1, (float *)&v149[v307], 1, v145, v144);
                v307 += v308;
                --v305;
              }
              while (v305);
              v28 = v306;
            }
            goto LABEL_537;
          }
        }
        else if ((_DWORD)v132 == 2)
        {
          if ((_DWORD)v134 || (_DWORD)v144 != 1)
          {
            if (!(_DWORD)v133 && (_DWORD)v134 == 1)
            {
              if ((_DWORD)v392)
              {
                v314 = 0;
                if (v145 <= 1)
                  v315 = 1;
                else
                  v315 = *(int *)(v23 + 8);
                if (v144 <= 1)
                  v316 = 1;
                else
                  v316 = *(int *)(v23 + 12);
                v317 = *(int *)(v23 + 16);
                if (__Nc <= 1)
                  v317 = 1;
                if (v142 <= 1)
                  v318 = 1;
                else
                  v318 = v142;
                v319 = v147 * (uint64_t)(int)v146;
                v320 = 4 * v319 * v148 * v143;
                v321 = 4 * v319 * v148;
                v322 = 4 * v319;
                v323 = 4 * v146;
                do
                {
                  if (v142)
                  {
                    v324 = 0;
                    v325 = v149;
                    do
                    {
                      if ((_DWORD)__Nc)
                      {
                        v326 = 0;
                        v327 = v325;
                        do
                        {
                          if ((_DWORD)v144)
                          {
                            v328 = 0;
                            v329 = v327;
                            do
                            {
                              v330 = v329;
                              v331 = v315;
                              if ((_DWORD)v145)
                              {
                                do
                                {
                                  v332 = *v150++;
                                  *v330 = v332;
                                  v330 = (_DWORD *)((char *)v330 + v323);
                                  --v331;
                                }
                                while (v331);
                              }
                              ++v328;
                              v329 = (_DWORD *)((char *)v329 + v322);
                            }
                            while (v328 != v316);
                          }
                          ++v326;
                          ++v327;
                        }
                        while (v326 != v317);
                      }
                      ++v324;
                      v325 += v321;
                    }
                    while (v324 != v318);
                  }
                  ++v314;
                  v149 += v320;
                }
                while (v314 != v392);
              }
              goto LABEL_537;
            }
          }
          else if ((_DWORD)v133 == 1)
          {
            if ((_DWORD)v392)
            {
              v153 = v28;
              v154 = 0;
              if (v142 <= 1)
                v155 = 1;
              else
                v155 = v142;
              v384 = v155;
              v156 = v147 * (uint64_t)(int)v146 * v148;
              v157 = 4 * v156 * v143;
              v158 = 4 * v156;
              do
              {
                if (v142)
                {
                  v159 = 0;
                  v160 = v384;
                  do
                  {
                    vDSP_mtrans((const float *)((char *)v150 + v159), 1, (float *)&v149[v159], 1, v145, __Nc);
                    v159 += v158;
                    --v160;
                  }
                  while (v160);
                }
                ++v154;
                v149 += v157;
                v150 = (int *)((char *)v150 + v157);
              }
              while (v154 != v392);
              v28 = v153;
            }
            goto LABEL_537;
          }
        }
      }
      else if ((_DWORD)v133 == 2 && (_DWORD)v134 == 1)
      {
        if ((_DWORD)v145 == 1)
        {
          if ((_DWORD)v392)
          {
            v309 = 0;
            if (v142 <= 1)
              v310 = 1;
            else
              v310 = v142;
            v311 = v310;
            do
            {
              if (v142)
              {
                v312 = 0;
                v313 = v311;
                do
                {
                  vDSP_mtrans((const float *)&v150[v312 / 4], 1, (float *)&v149[v312], 1, v144, __Nc);
                  v312 += 4 * (int)__Nc * (uint64_t)(int)v144;
                  --v313;
                }
                while (v313);
                v149 += v312;
                v150 = (int *)((char *)v150 + v312);
              }
              ++v309;
            }
            while (v309 != v392);
            v28 = v401;
          }
          goto LABEL_537;
        }
        if (!((_DWORD)v392 * v142))
        {
LABEL_537:
          if (v28)
          {
            v344 = (unint64_t *)&v28->__shared_owners_;
            do
              v345 = __ldaxr(v344);
            while (__stlxr(v345 - 1, v344));
            if (!v345)
            {
              v346 = v28;
              ((void (*)(void))v28->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v346);
            }
          }
          v207 = v402;
          if (!v402)
            goto LABEL_338;
          v347 = (unint64_t *)&v402->__shared_owners_;
          do
            v211 = __ldaxr(v347);
          while (__stlxr(v211 - 1, v347));
          goto LABEL_336;
        }
        v370 = v28;
        v374 = 0;
        v348 = 4 * v145;
        if (v144 <= 1)
          v349 = 1;
        else
          v349 = *(int *)(v23 + 12);
        v381 = v349;
        v350 = v147 * (uint64_t)(int)v146;
        v362 = 4 * v350 * v148;
        v366 = (int)(v392 * v142);
        v351 = *(int *)(v23 + 16);
        if (__Nc <= 1)
          v351 = 1;
        v378 = v351;
        v352 = 4 * v146;
        v353 = 4 * v350;
        do
        {
          if ((_DWORD)__Nc)
          {
            v354 = 0;
            v355 = (char *)&v150[v374 * v152];
            v356 = v149;
            do
            {
              v388 = v356;
              v396 = v354;
              v357 = v381;
              if ((_DWORD)v144)
              {
                do
                {
                  memcpy(v356, v355, v348);
                  v356 += v353;
                  v355 += v352;
                  --v357;
                }
                while (v357);
              }
              v354 = v396 + 1;
              v356 = &v388[v352];
            }
            while (v396 + 1 != v378);
          }
          v149 += v362;
          ++v374;
        }
        while (v374 != v366);
LABEL_536:
        v28 = v370;
        goto LABEL_537;
      }
    }
    if (!(_DWORD)v392)
      goto LABEL_537;
    v370 = v28;
    v333 = 0;
    v334 = v152 * v143;
    if (v145 <= 1)
      v335 = 1;
    else
      v335 = *(int *)(v23 + 8);
    if (v144 <= 1)
      v336 = 1;
    else
      v336 = *(int *)(v23 + 12);
    v337 = *(int *)(v23 + 16);
    if (__Nc <= 1)
      v337 = 1;
    if (v142 <= 1)
      v338 = 1;
    else
      v338 = v142;
    do
    {
      if (v142)
      {
        for (jj = 0; jj != v338; ++jj)
        {
          if ((_DWORD)__Nc)
          {
            v340 = 0;
            do
            {
              if ((_DWORD)v144)
              {
                v341 = 0;
                do
                {
                  if ((_DWORD)v145)
                  {
                    v342 = 0;
                    do
                    {
                      v418 = v342;
                      v419 = v341;
                      v420 = v340;
                      v421 = jj;
                      v422 = v333;
                      v343 = *v150++;
                      *(_DWORD *)&v149[4 * *(&v418 + v132)
                                     + 4 * *(&v418 + v133) * v146
                                     + 4 * *(&v418 + v134) * v151
                                     + 4 * *(&v418 + v135) * v152
                                     + 4 * *(&v418 + v136) * v334] = v343;
                      ++v342;
                    }
                    while (v335 != v342);
                  }
                  ++v341;
                }
                while (v341 != v336);
              }
              ++v340;
            }
            while (v340 != v337);
          }
        }
      }
      ++v333;
    }
    while (v333 != v392);
    goto LABEL_536;
  }
  v61 = a1[70];
  v62 = a1[71];
  v63 = a1[72];
  v64 = a1[73];
  v65 = a1[74];
  if (v367)
  {
    v66 = (unint64_t *)&v367->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  if (v363)
  {
    v68 = (unint64_t *)&v363->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v70 = **a4;
  v71 = *(_DWORD *)(v70 + 20);
  v390 = *(int *)(v70 + 24);
  v72 = *(int *)(**(_QWORD **)a3 + 20);
  v73 = *(int *)(v382 + 8);
  v74 = *(int *)(v382 + 12);
  __Na = *(int *)(v382 + 16);
  v76 = *(int *)(v19 + 8);
  v75 = *(_DWORD *)(v19 + 12);
  v77 = *(int *)(v19 + 16);
  v78 = *(char **)(v19 + 24);
  v79 = *(__int16 **)(v382 + 24);
  v80 = v75 * (uint64_t)(int)v76;
  v81 = v80 * v77;
  v82 = v80 * v77 * v72;
  if ((_DWORD)v64 != 3 || (_DWORD)v65 != 4)
    goto LABEL_239;
  if ((_DWORD)v61)
  {
    if ((_DWORD)v61 != 1)
    {
      if ((_DWORD)v61 == 2 && !(_DWORD)v63 && (_DWORD)v74 == 1 && (_DWORD)v62 == 1)
      {
        if ((_DWORD)v390)
        {
          v83 = 0;
          if (v73 <= 1)
            v84 = 1;
          else
            v84 = *(int *)(v382 + 8);
          if (__Na <= 1)
            v85 = 1;
          else
            v85 = *(int *)(v382 + 16);
          if (v71 <= 1)
            v86 = 1;
          else
            v86 = v71;
          v87 = v75 * (uint64_t)(int)v76;
          v88 = 2 * v87 * v77 * v72;
          v89 = 2 * v87 * v77;
          v90 = 2 * v87;
          do
          {
            if (v71)
            {
              v91 = 0;
              v92 = v78;
              do
              {
                if ((_DWORD)__Na)
                {
                  v93 = 0;
                  v94 = &v79[v83 * v82 + v91 * v81];
                  v95 = v92;
                  do
                  {
                    v96 = v95;
                    v97 = v84;
                    if ((_DWORD)v73)
                    {
                      do
                      {
                        v98 = *v94++;
                        *v96 = v98;
                        v96 = (_WORD *)((char *)v96 + v90);
                        --v97;
                      }
                      while (v97);
                    }
                    ++v93;
                    ++v95;
                  }
                  while (v93 != v85);
                }
                ++v91;
                v92 = (_WORD *)((char *)v92 + v89);
              }
              while (v91 != v86);
            }
            ++v83;
            v78 += v88;
          }
          while (v83 != v390);
        }
        goto LABEL_265;
      }
      goto LABEL_239;
    }
    if (!(_DWORD)v62 && (_DWORD)v63 == 2)
    {
      v174 = (int)__Na * (uint64_t)(int)(v390 * v71);
      if (v174)
      {
        v175 = 0;
        if (v73 <= 1)
          v176 = 1;
        else
          v176 = *(int *)(v382 + 8);
        if (v74 <= 1)
          v177 = 1;
        else
          v177 = *(int *)(v382 + 12);
        v178 = 2 * v75 * (uint64_t)(int)v76;
        v179 = 2 * v76;
        do
        {
          if ((_DWORD)v74)
          {
            v180 = 0;
            v181 = &v79[v175 * v80];
            v182 = v78;
            do
            {
              v183 = v182;
              v184 = v176;
              if ((_DWORD)v73)
              {
                do
                {
                  v185 = *v181++;
                  *v183 = v185;
                  v183 = (_WORD *)((char *)v183 + v179);
                  --v184;
                }
                while (v184);
              }
              ++v180;
              ++v182;
            }
            while (v180 != v177);
          }
          ++v175;
          v78 += v178;
        }
        while (v175 != v174);
      }
      goto LABEL_265;
    }
LABEL_239:
    if ((_DWORD)v390)
    {
      v197 = 0;
      if (v73 <= 1)
        v198 = 1;
      else
        v198 = *(int *)(v382 + 8);
      if (v74 <= 1)
        v199 = 1;
      else
        v199 = *(int *)(v382 + 12);
      if (__Na <= 1)
        v200 = 1;
      else
        v200 = *(int *)(v382 + 16);
      if (v71 <= 1)
        v201 = 1;
      else
        v201 = v71;
      do
      {
        if (v71)
        {
          for (kk = 0; kk != v201; ++kk)
          {
            if ((_DWORD)__Na)
            {
              v203 = 0;
              do
              {
                if ((_DWORD)v74)
                {
                  v204 = 0;
                  do
                  {
                    if ((_DWORD)v73)
                    {
                      v205 = 0;
                      do
                      {
                        v418 = v205;
                        v419 = v204;
                        v420 = v203;
                        v421 = kk;
                        v422 = v197;
                        v206 = *v79++;
                        *(_WORD *)&v78[2 * *(&v418 + v61)
                                     + 2 * *(&v418 + v62) * v76
                                     + 2 * *(&v418 + v63) * v80
                                     + 2 * *(&v418 + v64) * v81
                                     + 2 * *(&v418 + v65) * v82] = v206;
                        ++v205;
                      }
                      while (v198 != v205);
                    }
                    ++v204;
                  }
                  while (v204 != v199);
                }
                ++v203;
              }
              while (v203 != v200);
            }
          }
        }
        ++v197;
      }
      while (v197 != v390);
    }
    goto LABEL_265;
  }
  if ((_DWORD)v62 != 2 || (_DWORD)v63 != 1)
    goto LABEL_239;
  v186 = v390 * v71;
  if (v186)
  {
    v187 = 2 * v73;
    if (v74 <= 1)
      v188 = 1;
    else
      v188 = *(int *)(v382 + 12);
    v379 = v188;
    v189 = v75 * (uint64_t)(int)v76;
    v358 = 2 * v189 * v77;
    v359 = v186;
    v190 = *(int *)(v382 + 16);
    if (__Na <= 1)
      v190 = 1;
    v372 = 0;
    v375 = v190;
    v191 = 2 * v76;
    v192 = 2 * v189;
    do
    {
      if ((_DWORD)__Na)
      {
        v193 = 0;
        v194 = (char *)&v79[v372 * v81];
        v195 = v78;
        do
        {
          v385 = v195;
          v393 = v193;
          v196 = v379;
          if ((_DWORD)v74)
          {
            do
            {
              memcpy(v195, v194, v187);
              v195 += v192;
              v194 += v191;
              --v196;
            }
            while (v196);
          }
          v193 = v393 + 1;
          v195 = &v385[v191];
        }
        while (v393 + 1 != v375);
      }
      v78 += v358;
      ++v372;
    }
    while (v372 != v359);
  }
LABEL_265:
  v207 = v367;
  if (v363)
  {
    v208 = (unint64_t *)&v363->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  if (v367)
  {
    v210 = (unint64_t *)&v367->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    goto LABEL_336;
  }
LABEL_338:
  if (v404)
  {
    v245 = (unint64_t *)&v404->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
      std::__shared_weak_count::__release_weak(v404);
    }
  }
  if (v405)
  {
    v247 = (unint64_t *)&v405->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
      std::__shared_weak_count::__release_weak(v405);
    }
  }
  v249 = v407;
  if (v407)
  {
    v250 = (unint64_t *)&v407->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = v409;
  if (v409)
  {
    v253 = (unint64_t *)&v409->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v411;
  if (v411)
  {
    v256 = (unint64_t *)&v411->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = v413;
  if (v413)
  {
    v259 = (unint64_t *)&v413->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v261 = v415;
  if (v415)
  {
    v262 = (unint64_t *)&v415->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = v417;
  if (v417)
  {
    v265 = (unint64_t *)&v417->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
}

void sub_1917D7FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 176);
  _Unwind_Resume(a1);
}

void Espresso::transpose_kernel_cpu::get_runtime_type_config(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  if (*(_DWORD *)(*a2 + 8) > 4u)
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
  else
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a2);
}

void Espresso::l2_normalize_kernel_cpu::~l2_normalize_kernel_cpu(Espresso::l2_normalize_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::l2_normalize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  vDSP_Length v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  const float *v41;
  int v42;
  const float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  float *v56;
  int v57;
  const float *v58;
  float v59;
  _WORD *v60;
  int *v61;
  uint64_t v62;
  int v63;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t __B;
  std::__shared_weak_count *v139;
  vImage_Buffer dest;
  vImage_Buffer __C;

  v7 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v133 = 0;
    v8 = 0;
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(*v7 + 168);
    v133 = *(_QWORD *)(*v7 + 160);
    if (v8)
    {
      v83 = *(std::__shared_weak_count **)(*v7 + 168);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v85 = __ldxr(p_shared_owners);
      while (__stxr(v85 + 1, p_shared_owners));
      v8 = v83;
    }
  }
  v92 = v8;
  v9 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v9 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v131 = 0;
  }
  else
  {
    v86 = *(_QWORD *)(*v9 + 168);
    v131 = *(_QWORD *)(*v9 + 160);
    if (v86)
    {
      v89 = *(std::__shared_weak_count **)(*v9 + 168);
      v87 = (unint64_t *)(v86 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
      goto LABEL_10;
    }
  }
  v89 = 0;
LABEL_10:
  v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v10)
  {
    v127 = *((_QWORD *)v10 + 22);
    v11 = *((_QWORD *)v10 + 23);
    v12 = (_DWORD *)v133;
    if (v11)
    {
      v91 = (std::__shared_weak_count *)*((_QWORD *)v10 + 23);
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v91 = 0;
    }
  }
  else
  {
    v127 = 0;
    v91 = 0;
    v12 = (_DWORD *)v133;
  }
  v15 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (!v15)
  {
    v17 = 0;
    goto LABEL_23;
  }
  v17 = *((_QWORD *)v15 + 22);
  v16 = *((_QWORD *)v15 + 23);
  if (!v16)
  {
LABEL_23:
    v90 = 0;
    goto LABEL_24;
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)v15 + 23);
  v18 = (unint64_t *)(v16 + 8);
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
LABEL_24:
  v20 = *(unsigned int *)(a1 + 288);
  if ((int)v20 > 2)
  {
    v21 = 1;
    v22 = 1;
LABEL_28:
    v100 = 1;
    goto LABEL_29;
  }
  v22 = v12[5];
  if ((_DWORD)v20 == 2)
  {
    v21 = 1;
    goto LABEL_28;
  }
  v100 = v12[4];
  if ((int)v20 <= 0)
  {
    v21 = v12[3];
    if ((v20 & 0x80000000) != 0)
    {
      v25 = v12[2];
      v30 = v21 * v25;
      v31 = v21 * v25 * v100;
      v125 = 1;
      v122 = v25;
      goto LABEL_32;
    }
  }
  else
  {
    v21 = 1;
  }
LABEL_29:
  v25 = v12[2];
  v24 = v12[3];
  v23 = v12 + 2;
  v26 = v12[4];
  v27 = v20 + 1;
  v28 = 1;
  do
  {
    v29 = *v23++;
    v28 *= v29;
    --v27;
  }
  while (v27);
  v125 = v28;
  v30 = v24 * v25;
  v31 = v24 * v25 * v26;
  v122 = 1;
LABEL_32:
  v134 = a1;
  v110 = v21;
  if (v131)
  {
    if (v22 >= 1)
    {
      v111 = 0;
      v113 = 0;
      v32 = v125;
      v33 = (float)(unint64_t)v125;
      v34 = -1.0 / v33;
      v129 = 4 * v125;
      v108 = v22;
      v124 = v21;
      v104 = v31;
      v106 = 4 * v31;
      v35 = 1.0 / v33;
      do
      {
        if (v100 >= 1)
        {
          v120 = 0;
          v118 = v113;
          do
          {
            if (v21 >= 1)
            {
              v128 = 0;
              v126 = v118;
              do
              {
                if (v122 >= 1)
                {
                  v36 = 0;
                  v37 = v122;
                  v38 = v126;
                  do
                  {
                    v39 = *(_QWORD *)(v131 + 24);
                    v40 = (float *)(v39 + v38);
                    v41 = (const float *)(*(_QWORD *)(v133 + 24) + v38);
                    LODWORD(__C.data) = 0;
                    LODWORD(dest.data) = 0;
                    v42 = *(_DWORD *)(v134 + 284);
                    v43 = v41;
                    if ((v42 - 1) <= 1)
                    {
                      vDSP_sve(v41, 1, (float *)&__C, v32);
                      *(float *)&__C.data = v34 * *(float *)&__C.data;
                      vDSP_vsadd(v41, 1, (const float *)&__C, (float *)(v39 + v38), 1, v32);
                      v43 = (const float *)(v39 + 4 * v111 * v104 + 4 * v120 * v30 + 4 * v128 * v25 + 4 * v36);
                      v42 = *(_DWORD *)(v134 + 284);
                    }
                    if ((v42 | 2) == 3)
                    {
                      vDSP_svesq(v43, 1, (float *)&dest, v32);
                      v44 = *(float *)&dest.data;
                      if (*(_DWORD *)(v134 + 284) == 1)
                      {
                        v44 = v35 * *(float *)&dest.data;
                        *(float *)&dest.data = v35 * *(float *)&dest.data;
                      }
                      LODWORD(__B) = powf(v44 + *(float *)(v134 + 280), -0.5);
                      vDSP_vsmul(v43, 1, (const float *)&__B, v40, 1, v32);
                      v42 = *(_DWORD *)(v134 + 284);
                    }
                    if (!v42)
                      memcpy(v40, v41, v129);
                    ++v36;
                    v38 += 4;
                    --v37;
                  }
                  while (v37);
                }
                v126 += 4 * v25;
                ++v128;
              }
              while (v128 != v124);
            }
            v118 += 4 * v30;
            ++v120;
            v21 = v110;
          }
          while (v120 != v100);
        }
        ++v111;
        v113 += v106;
      }
      while (v111 != v108);
    }
  }
  else
  {
    if (!v127 || !v17)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("l2_normalize: invalid blob configuration");
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&__B, *(_DWORD *)(v17 + 8), *(_DWORD *)(v17 + 12), *(_DWORD *)(v17 + 16), 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v136, *(_DWORD *)(v127 + 8), *(_DWORD *)(v127 + 12), *(_DWORD *)(v127 + 16), 1);
    if (v22 >= 1)
    {
      v98 = 0;
      v99 = 0;
      v97 = 0;
      v45 = (float)(unint64_t)v125;
      v46 = -1.0 / v45;
      v112 = v25;
      v101 = v30;
      v93 = v31;
      v116 = v21;
      v123 = __B;
      v95 = 2 * v31;
      v96 = v22;
      v103 = 2 * v30;
      v94 = 4 * v31;
      v102 = 4 * v30;
      v114 = 4 * v25;
      v115 = 2 * v25;
      v47 = 1.0 / v45;
      do
      {
        v48 = v133;
        if (v100 >= 1)
        {
          v109 = 0;
          v130 = v97 * v93;
          v105 = v98;
          v107 = v99;
          do
          {
            if (v21 >= 1)
            {
              v121 = 0;
              v132 = v109 * v101;
              v117 = v105;
              v119 = v107;
              do
              {
                if (v122 >= 1)
                {
                  v49 = 0;
                  v50 = v119;
                  v51 = v121 * v112;
                  v52 = v117;
                  do
                  {
                    v53 = MEMORY[0x18];
                    v54 = *(_QWORD *)(v48 + 24) + 4 * v130 + 4 * v132;
                    v135 = 0;
                    __C.data = (void *)(*(_QWORD *)(v127 + 24) + 2 * v130 + 2 * v132 + 2 * v51 + 2 * v49);
                    __C.height = 1;
                    __C.width = v125;
                    __C.rowBytes = 2 * v125;
                    v55 = (void *)(v54 + 4 * v51 + 4 * v49);
                    dest.data = v55;
                    dest.height = 1;
                    dest.width = v125;
                    dest.rowBytes = 4 * v125;
                    vImageConvert_Planar16FtoPlanarF(&__C, &dest, 0);
                    v56 = (float *)(v53 + 4 * v130 + 4 * v132 + 4 * v51 + 4 * v49);
                    v57 = *(_DWORD *)(v134 + 284);
                    v58 = (const float *)v55;
                    if ((v57 - 1) <= 1)
                    {
                      vDSP_sve((const float *)v55, 1, (float *)&v135 + 1, v125);
                      *((float *)&v135 + 1) = v46 * *((float *)&v135 + 1);
                      vDSP_vsadd((const float *)v55, 1, (const float *)&v135 + 1, v56, 1, v125);
                      v57 = *(_DWORD *)(v134 + 284);
                      v58 = (const float *)(v53 + 4 * v130 + 4 * v132 + 4 * v51 + 4 * v49);
                    }
                    if ((v57 | 2) == 3)
                    {
                      vDSP_svesq(v58, 1, (float *)&v135, v125);
                      v59 = *(float *)&v135;
                      if (*(_DWORD *)(v134 + 284) == 1)
                      {
                        v59 = v47 * *(float *)&v135;
                        *(float *)&v135 = v47 * *(float *)&v135;
                      }
                      LODWORD(__C.data) = powf(v59 + *(float *)(v134 + 280), -0.5);
                      vDSP_vsmul(v58, 1, (const float *)&__C, *(float **)(v123 + 24), 1, v125);
                      v57 = *(_DWORD *)(v134 + 284);
                      v48 = v133;
                    }
                    if (!v57)
                      memcpy(v56, v55, 4 * v125);
                    if (v125)
                    {
                      v60 = (_WORD *)(*(_QWORD *)(v17 + 24) + v52);
                      v61 = (int *)(v53 + v50);
                      v62 = v125;
                      do
                      {
                        v63 = *v61++;
                        _S0 = v63;
                        __asm { FCVT            H0, S0 }
                        *v60++ = _S0;
                        --v62;
                      }
                      while (v62);
                    }
                    ++v49;
                    v52 += 2;
                    v50 += 4;
                  }
                  while (v49 != v122);
                }
                v117 += v115;
                v119 += v114;
                ++v121;
              }
              while (v121 != v116);
            }
            v105 += v103;
            v107 += v102;
            ++v109;
            v21 = v110;
          }
          while (v109 != v100);
        }
        ++v97;
        v98 += v95;
        v99 += v94;
      }
      while (v97 != v96);
    }
    v69 = v137;
    if (v137)
    {
      v70 = (unint64_t *)&v137->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = v139;
    if (v139)
    {
      v73 = (unint64_t *)&v139->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
  if (v90)
  {
    v75 = (unint64_t *)&v90->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v91)
  {
    v77 = (unint64_t *)&v91->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v89)
  {
    v79 = (unint64_t *)&v89->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v92)
  {
    v81 = (unint64_t *)&v92->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

void sub_1917D8AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13)
{
  uint64_t v13;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v15 = *(std::__shared_weak_count **)(v13 - 176);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (a11)
  {
    v18 = (unint64_t *)&a11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (a12)
  {
    v20 = (unint64_t *)&a12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a10)
  {
    v22 = (unint64_t *)&a10->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a13)
  {
    v24 = (unint64_t *)&a13->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::deconvolution_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v7;
  int v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _DWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  int v24;
  __int16 *v25;
  int v26;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *height;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  vImagePixelCount v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  Espresso *v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  float *v64;
  const float *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  float *v74;
  float *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  int v80;
  float v81;
  int v82;
  uint64_t v83;
  int v84;
  vDSP_Length v85;
  float *v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  vDSP_Length v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  double v112;
  double v113;
  float v114;
  uint64_t *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::runtime_error *exception;
  float *__B;
  float *__ldb;
  int __C_4;
  float *v125;
  int v126;
  int v127;
  float *__A;
  unsigned int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  _DWORD *v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  int __K;
  int __Ka;
  __int16 *v151;
  __int128 v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  __int128 v155;
  _DWORD *v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  vImage_Buffer dest;
  vImage_Buffer src;

  v7 = *(_DWORD *)(a1 + 328);
  v8 = *(_DWORD *)(a1 + 332);
  v148 = *(unsigned int *)(a1 + 344);
  v139 = *(_DWORD *)(a1 + 416);
  v9 = *(_BYTE *)(a1 + 468);
  v10 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v10
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v11 = 0;
    v158 = 0;
    v159 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(*v10 + 160);
    v16 = *(std::__shared_weak_count **)(*v10 + 168);
    v158 = v11;
    v159 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
  }
  v12 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v12 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v12 + 32))(*v12))
  {
    v156 = 0;
    v157 = 0;
  }
  else
  {
    v19 = *(_DWORD **)(*v12 + 160);
    v20 = *(std::__shared_weak_count **)(*v12 + 168);
    v156 = v19;
    v157 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (v11 && v19)
    {
      v132 = *(unsigned int *)(a1 + 420);
      v140 = *(_DWORD *)(a1 + 348);
      v23 = *(_DWORD *)(a1 + 344);
      v24 = *(_DWORD *)(a1 + 352);
      v25 = (__int16 *)a1;
      v26 = *(_DWORD *)(a1 + 356);
      v147 = v19[2];
      v27 = v19;
      __K = v19[3];
      v28 = v25[200];
      if (v28 > 1)
        v29 = (v24 - 1) * v28 + 1;
      else
        v29 = v24;
      v142 = v23;
      v144 = v29;
      v30 = v25[201];
      if (v30 > 1)
        v31 = (v26 - 1) * v30 + 1;
      else
        v31 = v26;
      v133 = v25[199];
      v135 = v31;
      v137 = v25[198];
      v33 = v11 + 8;
      v32 = *(_DWORD *)(v11 + 8);
      v130 = *(_DWORD *)(v33 + 4);
      (*(void (**)(__int128 *__return_ptr, __int16 *))(*(_QWORD *)v25 + 456))(&v155, v25);
      (*(void (**)(uint64_t *__return_ptr, __int16 *))(*(_QWORD *)v25 + 448))(&v153, v25);
      if (!*((_QWORD *)v25 + 76))
      {
        v34 = (*(uint64_t (**)(__int16 *, uint64_t, uint64_t *))(*(_QWORD *)v25 + 96))(v25, a3, a4);
        (*(void (**)(__int16 *, uint64_t))(*(_QWORD *)v25 + 112))(v25, v34);
      }
      v151 = v25;
      v35 = v155;
      v126 = v7;
      v127 = v8;
      if (!(_QWORD)v155)
      {
        v36 = a4[1];
        if ((unint64_t)(v36 - *a4) < 0x11)
        {
          v37 = *((_QWORD *)v25 + 74);
          if (v37)
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v37 + 8);
            v38 = *(_OWORD *)&src.data;
            src.data = 0;
            src.height = 0;
            v39 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
            v155 = v38;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            height = (std::__shared_weak_count *)src.height;
            if (src.height)
            {
              v43 = (unint64_t *)(src.height + 8);
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
                std::__shared_weak_count::__release_weak(height);
              }
            }
            v45 = 0;
            v46 = *(void **)(v155 + 24);
            v47 = *(int *)(v155 + 8);
            do
            {
              v47 *= *(int *)(v155 + 12 + v45);
              v45 += 4;
            }
            while (v45 != 12);
            src.data = *(void **)(*((_QWORD *)v25 + 74) + 24);
            src.height = 1;
            src.width = v47;
            src.rowBytes = 2 * v47;
            dest.data = v46;
            dest.height = 1;
            dest.width = v47;
            dest.rowBytes = 4 * v47;
            vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          }
          else
          {
            if (*(_DWORD *)(*((_QWORD *)v25 + 1) + 76)
              || (v111 = (_QWORD *)*((_QWORD *)v25 + 59)) == 0
              || !*v111
              || !v111[4] && !v111[6] && !v111[8] && !v111[10])
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "weights not set");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            (*(void (**)(vImage_Buffer *__return_ptr, __int16 *))(*(_QWORD *)v25 + 472))(&src, v25);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v155, (__int128 *)&src);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&src);
            v115 = (uint64_t *)*((_QWORD *)v25 + 59);
            v116 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
            v152 = v155;
            if (*((_QWORD *)&v155 + 1))
            {
              v117 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
              do
                v118 = __ldxr(v117);
              while (__stxr(v118 + 1, v117));
            }
            Espresso::quantized_weights_helper::dequantize_to_float32_4d(v115, (uint64_t)&v152, v112, v113, v114);
            if (v116)
            {
              v119 = (unint64_t *)&v116->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
          }
          v35 = v155;
          v27 = v156;
        }
        else
        {
          v35 = *((_QWORD *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v36, 1) + 20);
        }
      }
      v48 = v132;
      if ((int)v27[5] >= 1)
      {
        v146 = 0;
        v49 = v140 / (int)v132;
        v50 = v24 * v142 * v26 / (int)v132;
        v51 = __K * v147;
        v52 = v50 * (v140 / (int)v132);
        v141 = v27;
        v53 = (__K - 1) * v133 - v130;
        __Ka = v49;
        v131 = ((v53 + v135) & ~((v53 + v135) >> 31)) >> 1;
        v54 = v27;
        v129 = ((v144 - v32 + (v147 - 1) * v137) & ~((v144 - v32 + (v147 - 1) * v137) >> 31)) >> 1;
        __A = *(float **)(v35 + 24);
        v145 = v158;
        v55 = 4 * v51 * v49;
        v56 = 4 * v52;
        v57 = (Espresso *)(v9 & 1);
        do
        {
          v59 = v54[2];
          v58 = v54[3];
          v60 = *(_QWORD *)(v145 + 24);
          v61 = *(_DWORD *)(v145 + 8);
          v62 = *(_DWORD *)(v145 + 12);
          v143 = *(_DWORD *)(v145 + 16);
          if ((int)v48 < 1)
          {
            v67 = *(_DWORD *)(v145 + 8);
            v66 = *(_DWORD *)(v145 + 12);
          }
          else
          {
            v134 = *(_DWORD *)(v145 + 12);
            v136 = *(_DWORD *)(v145 + 8);
            v138 = *(_QWORD *)(v145 + 24);
            v63 = 0;
            v64 = (float *)(*((_QWORD *)v54 + 3) + 4 * v58 * v54[4] * v59 * v146);
            v65 = __A;
            do
            {
              LODWORD(v125) = v51;
              LODWORD(__ldb) = v51;
              LODWORD(__B) = v50;
              Espresso::wrapper_for_cblas_sgemm(v57, CblasRowMajor, CblasTrans, CblasNoTrans, v50, v51, __Ka, v65, 1.0, 0.0, __B, v64, __ldb, (float *)(*(_QWORD *)(*((_QWORD *)v151 + 76) + 24) + v63), v125, v126);
              v63 += 4 * v51 * v50;
              v64 = (float *)((char *)v64 + v55);
              v65 = (const float *)((char *)v65 + v56);
              --v48;
            }
            while (v48);
            v67 = *(_DWORD *)(v145 + 8);
            v66 = *(_DWORD *)(v145 + 12);
            v59 = v141[2];
            v58 = v141[3];
            v60 = v138;
            v62 = v134;
            v61 = v136;
          }
          v68 = v151[200];
          if (v68 <= 1)
            v68 = 1;
          v69 = v151[201];
          if (v69 <= 1)
            v69 = 1;
          Espresso::colbuffer2image((Espresso *)(v60 + 4 * v61 * v146 * v62 * v143), *(float **)(*((_QWORD *)v151 + 76) + 24), (const float *)*((unsigned int *)v151 + 86), v66, v67, v58, v59, *((_DWORD *)v151 + 89), *((_DWORD *)v151 + 88), v131, v129, v151[198], v151[199], v68, v69, __C_4, (int)v125, SHIDWORD(v125));
          if (v139)
          {
            if ((int)v148 >= 1)
            {
              v70 = 0;
              v71 = 0;
              v72 = *(_DWORD *)(v145 + 12) * *(_DWORD *)(v145 + 8);
              v73 = *(_QWORD *)(v153 + 16);
              do
              {
                if (v72 >= 1)
                {
                  v74 = (float *)(v60 + 4 * v62 * v143 * v61 * v146 + 4 * v71);
                  v75 = (float *)(v73 + 16 * v70);
                  v76 = *v75;
                  v77 = v75[1];
                  v78 = v75[2];
                  v79 = v75[3];
                  v80 = v72;
                  v81 = 1.0 / v79;
                  do
                  {
                    *v74 = v77 + (float)((float)(v81 * (float)(*v74 - v78)) * v76);
                    ++v74;
                    --v80;
                  }
                  while (v80);
                }
                ++v70;
                v71 += v72;
              }
              while (v70 != v148);
            }
          }
          else if (v153 && (int)v148 >= 1)
          {
            v82 = v61;
            v83 = 0;
            v84 = v62;
            v85 = *(int *)(v145 + 12) * (uint64_t)*(int *)(v145 + 8);
            v86 = (float *)(v60 + 4 * v84 * v143 * v82 * v146);
            do
            {
              LODWORD(src.data) = 0;
              LODWORD(src.data) = *(_DWORD *)(*(_QWORD *)(v153 + 16) + v83);
              vDSP_vsadd(v86, 1, (const float *)&src, v86, 1, v85);
              v83 += 4;
              v86 += v85;
            }
            while (4 * v148 != v83);
          }
          v54 = v141;
          ++v146;
          v48 = v132;
        }
        while (v146 < v141[5]);
      }
      if (v126 == 1)
      {
        v95 = 0;
        LODWORD(src.data) = 0;
        v96 = *(int *)(v158 + 8);
        v87 = v127;
        do
        {
          v96 *= *(int *)(v158 + 12 + v95);
          v95 += 4;
        }
        while (v95 != 12);
        vDSP_vthr(*(const float **)(v158 + 24), 1, (const float *)&src, *(float **)(v158 + 24), 1, v96);
      }
      else
      {
        v87 = v127;
        if (v126 == 2)
        {
          v88 = 0;
          v89 = v158;
          v90 = *(int *)(v158 + 8);
          while (1)
          {
            v91 = 0;
            v92 = v90;
            do
            {
              v92 *= *(int *)(v89 + 12 + v91);
              v91 += 4;
            }
            while (v91 != 12);
            if (v92 <= v88)
              break;
            v93 = *(_QWORD *)(v89 + 24);
            v94 = *(float *)(v93 + 4 * v88);
            if (v94 < 0.0)
              *(float *)(v93 + 4 * v88) = v94 * 0.25;
            ++v88;
          }
        }
      }
      if (v87)
      {
        v97 = 0;
        v98 = v158;
        v99 = *(int *)(v158 + 8);
        while (1)
        {
          v100 = 0;
          v101 = v99;
          do
          {
            v101 *= *(int *)(v98 + 12 + v100);
            v100 += 4;
          }
          while (v100 != 12);
          if (v101 <= v97)
            break;
          v102 = *(_QWORD *)(v98 + 24);
          *(float *)(v102 + 4 * v97) = tanhf(*(float *)(v102 + 4 * v97));
          ++v97;
        }
      }
      v103 = v154;
      if (v154)
      {
        v104 = (unint64_t *)&v154->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v20 = v157;
    }
    if (v20)
    {
      v109 = (unint64_t *)&v20->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v13 = v159;
  if (v159)
  {
    v14 = (unint64_t *)&v159->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1917D95EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 192);
  _Unwind_Resume(a1);
}

void Espresso::deconvolution_kernel_cpu::clear_weights(Espresso::deconvolution_kernel_cpu *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)((char *)this + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 52);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 54);
  v2 = (_QWORD *)v1[39];
  if (v2 && *v2 && (v2[4] || v2[6] || v2[8] || v2[10]))
    std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 39);
}

uint64_t Espresso::deconvolution_kernel_cpu::tmp_aux_buffer_size(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return 4
       * (int)a1[105]
       * (uint64_t)(a1[88] * a1[86] * a1[89] / a1[105])
       * *(int *)(**(_QWORD **)a3 + 8)
       * *(int *)(**(_QWORD **)a3 + 12);
}

void Espresso::deconvolution_kernel_cpu::tmp_aux_buffer_create(Espresso::deconvolution_kernel_cpu *this, unint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v6, a2 >> 2, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 608, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void Espresso::deconvolution_kernel_cpu::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  if (*(_QWORD *)a2)
  {
    if (v4)
    {
      v5 = *(std::__shared_weak_count **)(a2 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 608), v4[76], v4[77]);
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      else
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 608), v4[76], v4[77]);
      }
    }
  }
}

void Espresso::deconvolution_kernel_cpu::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  _QWORD *v11;
  double v12;
  double v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  __int128 v23[2];
  void *__p;
  void *v25;

  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  v11 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *))(*a1 + 464))(v23, a1);
  v15 = (uint64_t)(a1 + 59);
  v16 = a1[1];
  v17 = (std::__shared_weak_count *)a1[2];
  v22[0] = v16;
  v22[1] = (uint64_t)v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  Espresso::set_conv_quantized_weight_helper(v12, v13, v14, (uint64_t)v11, (unsigned __int8 **)a3, (char *)a4, a5, a6, v15, v23, v22, 1, 1);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_1917D9970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::deconvolution_kernel_cpu::__set_weights_finalize(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 472);
  if (v2
    && *(_QWORD *)v2
    && (*(_QWORD *)(v2 + 32) || *(_QWORD *)(v2 + 48) || *(_QWORD *)(v2 + 64) || *(_QWORD *)(v2 + 80)))
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76))
    {
      Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v2, &v6);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 576, &v6);
      v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    else if (*(int *)(v2 + 156) <= 7)
    {
      Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v2);
    }
  }
}

BOOL Espresso::deconvolution_kernel_cpu::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
      || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
}

void Espresso::wrapper_for_cblas_sgemm(Espresso *this, CBLAS_ORDER __Order, CBLAS_TRANSPOSE __TransA, CBLAS_TRANSPOSE __TransB, int __M, int __N, int __K, const float *__A, float a9, float a10, float *__B, float *a12, const float *__ldb, float *__C, float *__ldc, int a16)
{
  if ((_DWORD)this)
    cblas_sgemm_singlecore();
  else
    cblas_sgemm(__Order, __TransA, __TransB, __M, __N, __K, a9, __A, (const int)__B, a12, (const int)__ldb, a10, __C, (const int)__ldc);
}

void Espresso::colbuffer2image(Espresso *this, float *a2, const float *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18)
{
  int v21;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  int v27;
  _BOOL4 v29;
  uint64_t v30;
  char *v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Espresso *v36;

  v21 = (int)a3;
  if (a4 * (int)a3 * a5 >= 1)
    bzero(this, 4 * (a4 * (_DWORD)a3 * a5));
  v36 = this;
  v24 = (a9 * a8 * v21);
  if ((int)v24 >= 1)
  {
    for (i = 0; i != v24; ++i)
    {
      if (a6 >= 1)
      {
        v26 = 0;
        v27 = (int)i / a9 % a8 * a15;
        v29 = a7 > 0 && (int)i % a9 * a14 - a11 < 0;
        v30 = v27;
        v31 = (char *)v36 + 4 * a5 * (v27 - (uint64_t)a10 + (int)i / (a9 * a8) * a4);
        v32 = a2;
        do
        {
          v33 = v26 * a13 - a10 + v30;
          if (v33 >= 0 && v33 < a4)
          {
            LODWORD(v34) = 0;
            LODWORD(v35) = (int)i % a9 * a14 - a11;
            if (v29)
            {
              do
              {
                LODWORD(v34) = v34 + 1;
                LODWORD(v35) = v35 + a12;
              }
              while ((int)v34 < a7 && (v35 & 0x80000000) != 0);
            }
            if ((int)v35 < a5 && (int)v34 < a7)
            {
              v35 = (int)v35;
              v34 = v34;
              do
              {
                *(float *)&v31[4 * v35] = v32[v34] + *(float *)&v31[4 * v35];
                v35 += a12;
                if (v35 >= a5)
                  break;
                ++v34;
              }
              while (v34 < a7);
            }
          }
          ++v26;
          v31 += 4 * a13 * (uint64_t)a5;
          v32 += a7;
        }
        while (v26 != a6);
      }
      a2 += a7 * (uint64_t)a6;
    }
  }
}

void Espresso::prediction_smoothing_kernel_cpu::~prediction_smoothing_kernel_cpu(Espresso::prediction_smoothing_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D9C5A8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D9C5A8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::prediction_smoothing_kernel_cpu::__launch(std::chrono::steady_clock::time_point *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *height;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  vImagePixelCount v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::chrono::steady_clock::time_point *v37;
  unint64_t rep;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  __int128 v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  __int128 v84;
  vImage_Buffer dest;
  vImage_Buffer src;

  v7 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v84 = 0uLL;
  }
  else
  {
    v8 = *(_QWORD *)(*v7 + 160);
    v71 = *(_QWORD *)(*v7 + 168);
    *(_QWORD *)&v84 = v8;
    *((_QWORD *)&v84 + 1) = v71;
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
  }
  v9 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v9 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v11 = 0;
    v83 = 0uLL;
  }
  else
  {
    v11 = *(_QWORD *)(*v9 + 160);
    v10 = *(std::__shared_weak_count **)(*v9 + 168);
    *(_QWORD *)&v83 = v11;
    *((_QWORD *)&v83 + 1) = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v75 = __ldxr(p_shared_owners);
      while (__stxr(v75 + 1, p_shared_owners));
    }
  }
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v12)
  {
    v14 = v12[22];
    v13 = (std::__shared_weak_count *)v12[23];
    v81 = v14;
    v82 = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  else
  {
    v14 = 0;
    v81 = 0;
    v82 = 0;
  }
  v17 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v17)
  {
    v18 = (std::__shared_weak_count *)v17[23];
    v79 = v17[22];
    v80 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (v11)
    {
LABEL_20:
      if (v8)
        goto LABEL_47;
      goto LABEL_36;
    }
  }
  else
  {
    v79 = 0;
    v80 = 0;
    if (v11)
      goto LABEL_20;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v14 + 8);
  v21 = *(_OWORD *)&src.data;
  src.data = 0;
  src.height = 0;
  v83 = v21;
  if (v10)
  {
    v22 = (unint64_t *)&v10->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  height = (std::__shared_weak_count *)src.height;
  if (src.height)
  {
    v25 = (unint64_t *)(src.height + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
      std::__shared_weak_count::__release_weak(height);
    }
  }
  v27 = 0;
  v11 = v83;
  v28 = *(void **)(v83 + 24);
  v29 = *(int *)(v81 + 8);
  do
  {
    v29 *= *(int *)(v81 + 12 + v27);
    v27 += 4;
  }
  while (v27 != 12);
  src.data = *(void **)(v81 + 24);
  src.height = 1;
  src.width = v29;
  src.rowBytes = 2 * v29;
  dest.data = v28;
  dest.height = 1;
  dest.width = v29;
  dest.rowBytes = 4 * v29;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  v8 = v84;
  if (!(_QWORD)v84)
  {
LABEL_36:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v79 + 8);
    v30 = *(_OWORD *)&src.data;
    src.data = 0;
    src.height = 0;
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
    v84 = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v35 = (unint64_t *)(src.height + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v11 = v83;
  }
LABEL_47:
  v37 = a1 + 36;
  rep = a1[35].__d_.__rep_;
  v77 = v11;
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  v76 = v84;
  if (*((_QWORD *)&v84 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  Espresso::prediction_smoothing_cpu_impl::apply(v37, rep, &v77, (uint64_t)&v76);
  if (v41)
  {
    v44 = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v46 = v78;
  if (!v78)
    goto LABEL_62;
  v47 = (unint64_t *)&v78->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    if (v8)
      goto LABEL_69;
  }
  else
  {
LABEL_62:
    if (v8)
      goto LABEL_69;
  }
  v49 = 0;
  v50 = *(int **)(v84 + 24);
  v51 = *(_WORD **)(v79 + 24);
  v52 = *(int *)(v79 + 8);
  do
  {
    v52 *= *(int *)(v79 + 12 + v49);
    v49 += 4;
  }
  while (v49 != 12);
  for (; v52; --v52)
  {
    v53 = *v50++;
    _S0 = v53;
    __asm { FCVT            H0, S0 }
    *v51++ = _S0;
  }
LABEL_69:
  v59 = v80;
  if (v80)
  {
    v60 = (unint64_t *)&v80->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v82;
  if (v82)
  {
    v63 = (unint64_t *)&v82->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_1917DA258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

void Espresso::prediction_smoothing_kernel_cpu::__reset_temporal_state(uint64_t a1)
{
  Espresso::prediction_smoothing_cpu_impl::reset((Espresso::prediction_smoothing_cpu_impl *)(a1 + 288));
}

void *Espresso::prediction_smoothing_cpu_impl::apply(std::chrono::steady_clock::time_point *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v6;
  unint64_t v8;
  std::chrono::steady_clock::time_point v9;
  _DWORD *rep;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  vDSP_Length __N;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20;
  float v21;
  uint64_t v22;
  const void *v23;
  void *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  float __D;
  __int128 __B;

  v6 = a2;
  if ((_DWORD)a2)
  {
    v8 = HIDWORD(a2);
    v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    rep = (_DWORD *)a1->__d_.__rep_;
    v11 = *a3;
    if (!a1->__d_.__rep_
      || (LODWORD(v12) = rep[2], (_DWORD)v12 != *(_DWORD *)(v11 + 8))
      || rep[3] != *(_DWORD *)(v11 + 12)
      || rep[4] != *(_DWORD *)(v11 + 16)
      || rep[5] != *(_DWORD *)(v11 + 20))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&__B, v11 + 8);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, &__B);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&__B + 1);
      if (*((_QWORD *)&__B + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&__B + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = 0;
      v17 = *(int *)(*a3 + 8);
      do
      {
        v17 *= *(int *)(*a3 + 12 + v16);
        v16 += 4;
      }
      while (v16 != 12);
      memcpy(*(void **)(a1->__d_.__rep_ + 24), *(const void **)(*a3 + 24), 4 * v17);
      a1[2].__d_.__rep_ = v9.__d_.__rep_;
      v11 = *a3;
      LODWORD(v12) = *(_DWORD *)(*a3 + 8);
    }
    v12 = (int)v12;
    v18 = 12;
    __N = (int)v12;
    do
    {
      __N *= *(int *)(v11 + v18);
      v18 += 4;
    }
    while (v18 != 24);
    v20 = a1[2].__d_.__rep_;
    a1[2].__d_.__rep_ = v9.__d_.__rep_;
    if (v6 == 1)
    {
      v21 = (double)(v9.__d_.__rep_ - v20) * -0.000000001;
      *(float *)&__B = 1.0 - expf(v21 / *(float *)&v8);
      __D = 1.0 - *(float *)&__B;
    }
    else
    {
      LODWORD(__B) = v8;
      __D = 1.0 - *(float *)&v8;
      if (v6 > 2)
        goto LABEL_25;
    }
    vDSP_vsmsma(*(const float **)(v11 + 24), 1, (const float *)&__B, *(const float **)(a1->__d_.__rep_ + 24), 1, &__D, *(float **)(*(_QWORD *)a4 + 24), 1, __N);
    v11 = *a3;
    v12 = *(int *)(*a3 + 8);
LABEL_25:
    for (i = 0; i != 12; i += 4)
      v12 *= *(int *)(v11 + 12 + i);
    return memcpy(*(void **)(a1->__d_.__rep_ + 24), *(const void **)(*(_QWORD *)a4 + 24), 4 * v12);
  }
  v22 = *a3;
  v23 = *(const void **)(*a3 + 24);
  result = *(void **)(*(_QWORD *)a4 + 24);
  if (v23 != result)
  {
    v25 = 0;
    v26 = *(int *)(v22 + 8);
    v27 = v22 + 12;
    do
    {
      v26 *= *(int *)(v27 + v25);
      v25 += 4;
    }
    while (v25 != 12);
    return memcpy(result, v23, 4 * v26);
  }
  return result;
}

void Espresso::dropout_kernel_cpu::~dropout_kernel_cpu(Espresso::dropout_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D83280;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D83280;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::dropout_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _BOOL4 v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  vDSP_Length v23;
  uint64_t j;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t k;
  uint64_t v36;
  unsigned int v37;
  vDSP_Length v38;
  double v39;
  uint64_t v40;
  vDSP_Length v41;
  vDSP_Length v42;
  float v43;
  uint64_t i;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  float __B;
  uint64_t v54;
  std::__shared_weak_count *v55;

  v7 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 32)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v54, *(void **)(*(_QWORD *)a4 + 16), *(std::__shared_weak_count **)(*(_QWORD *)a4 + 24));
    v8 = v55;
    v9 = fabsf(**(float **)(v54 + 24)) > 0.000001;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v7 = *(_QWORD **)a3;
  }
  else
  {
    v9 = 1;
  }
  v12 = 1.0 - *(float *)(a1 + 280);
  __B = v12;
  if (*(_DWORD *)(a1 + 292))
    v13 = 1.0 / v12;
  else
    v13 = 1.0;
  if (*v7 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v25 = *v7;
    v14 = *(_QWORD *)(*v7 + 160);
    v26 = *(std::__shared_weak_count **)(v25 + 168);
    v54 = v14;
    v55 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v14 = 0;
    v54 = 0;
    v55 = 0;
  }
  v15 = *(_QWORD **)a3;
  v16 = v15[2];
  if (v16 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16))
  {
    v29 = v15[2];
    v17 = *(_QWORD *)(v29 + 160);
    v30 = *(std::__shared_weak_count **)(v29 + 168);
    v52 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    v17 = 0;
    v52 = 0;
  }
  v18 = *(_QWORD **)a4;
  if (*v18 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v18 + 32))(*v18))
  {
    v20 = *(_QWORD *)(*v18 + 160);
    v19 = *(std::__shared_weak_count **)(*v18 + 168);
    if (v19)
    {
      v33 = (unint64_t *)&v19->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  if (v9)
  {
    if (*(_DWORD *)(a1 + 288))
    {
      v21 = *(_DWORD *)(a1 + 284);
      v22 = **(unsigned int ***)(a1 + 296);
      if (v21 < 1)
      {
        v36 = *(_QWORD *)(a1 + 8);
        v37 = *(_DWORD *)(v36 + 60);
        *(_DWORD *)(v36 + 60) = v37 + 1;
        v21 = v37 + ((v37 / 0x7FFFFFFF) | ((v37 / 0x7FFFFFFF) << 31));
        if (v21 <= 1)
          v21 = 1;
      }
      else if (v21 == 0x7FFFFFFF)
      {
        v21 = 1;
      }
      *v22 = v21;
    }
    else
    {
      v22 = **(unsigned int ***)(a1 + 296);
    }
    v38 = 0;
    v39 = v12;
    while (1)
    {
      v40 = 0;
      v41 = *(int *)(v14 + 8);
      v42 = v41;
      do
      {
        v42 *= *(int *)(v14 + 12 + v40);
        v40 += 4;
      }
      while (v40 != 12);
      if (v38 >= v42)
        break;
      if (std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v22)
         + 0.0 >= v39)
        v43 = 0.0;
      else
        v43 = v13;
      *(float *)(*(_QWORD *)(v17 + 24) + 4 * v38++) = v43;
    }
    for (i = 0; i != 12; i += 4)
      v41 *= *(int *)(v14 + 12 + i);
    vDSP_vmul(*(const float **)(v20 + 24), 1, *(const float **)(v17 + 24), 1, *(float **)(v14 + 24), 1, v41);
  }
  else
  {
    v23 = *(int *)(v14 + 8);
    if (*(_DWORD *)(a1 + 292))
    {
      for (j = 0; j != 12; j += 4)
        v23 *= *(int *)(v14 + 12 + j);
      memcpy(*(void **)(v14 + 24), *(const void **)(v20 + 24), 4 * v23);
    }
    else
    {
      for (k = 0; k != 12; k += 4)
        v23 *= *(int *)(v14 + 12 + k);
      vDSP_vsmul(*(const float **)(v20 + 24), 1, &__B, *(float **)(v14 + 24), 1, v23);
    }
  }
  if (v19)
  {
    v45 = (unint64_t *)&v19->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v52)
  {
    v47 = (unint64_t *)&v52->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v49 = v55;
  if (v55)
  {
    v50 = (unint64_t *)&v55->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1917DA9AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

double std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v1 = 48271 * (*a1 % 0xADC8);
  v2 = 3399 * (*a1 / 0xADC8);
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v3)
    v5 = 0;
  else
    v5 = 0x7FFFFFFF;
  v6 = v5 + v4;
  v7 = v6 - 1;
  v8 = v6 / 0xADC8;
  v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  v3 = v9 >= v8;
  v10 = v9 - v8;
  if (v3)
    v11 = 0;
  else
    v11 = 0x7FFFFFFF;
  v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

void Espresso::space_to_batch_kernel_cpu::~space_to_batch_kernel_cpu(Espresso::space_to_batch_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::space_to_batch_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int i;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  void *__p;
  void *v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  void *v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;

  v7 = *a3;
  v8 = **a3;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v56 = *(std::__shared_weak_count **)(*v7 + 168);
    v80 = v9;
    v81 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(p_shared_owners);
      while (__stxr(v58 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v80 = 0;
    v81 = 0;
  }
  v10 = *a4;
  v11 = **a4;
  if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v12 = *(_QWORD *)(*v10 + 160);
    v59 = *(std::__shared_weak_count **)(*v10 + 168);
    v78 = v12;
    v79 = v59;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      v62 = v59;
    }
    else
    {
      v62 = 0;
    }
  }
  else
  {
    v62 = 0;
    v12 = 0;
    v78 = 0;
    v79 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v72, **a3);
  Espresso::abstract_blob_container::shape((char *)&v64, **a4);
  if (v69 != -1)
  {
    if (v69 < 5)
      goto LABEL_9;
LABEL_25:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("space_to_batch: 5D inputs not supported");
  }
  if (v68 != 1)
    goto LABEL_25;
LABEL_9:
  if (*(_DWORD *)(a1 + 288))
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("space_to_batch: 3d space to batch not supported");
  v13 = v64;
  v14 = v64 * v65;
  v15 = *(_DWORD *)(a1 + 284);
  v16 = *(_DWORD *)(a1 + 280);
  v17 = *(_DWORD *)(a1 + 292);
  v18 = *(_DWORD *)(a1 + 296);
  v19 = v75;
  if (*(_BYTE *)(a1 + 316))
  {
    if (v75 >= 1)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      v22 = v14 * v66;
      v23 = v73;
      v24 = v74;
      do
      {
        if (v24 >= 1)
        {
          v25 = 0;
          v26 = v72;
          do
          {
            if (v23 >= 1)
            {
              for (i = 0; i != v23; ++i)
              {
                if (v26 >= 1)
                {
                  v28 = *(_QWORD *)(v12 + 24);
                  v29 = *(_QWORD *)(v9 + 24);
                  v21 = (int)v21;
                  v30 = v18;
                  v31 = v26;
                  do
                  {
                    *(_DWORD *)(v29 + 4 * v21++) = *(_DWORD *)(v28
                                                             + 4
                                                             * (v25 * v14
                                                              + (i + v17) / v16 * v13
                                                              + v30 / v15
                                                              + (v20 + (v30 % v15 + (i + v17) % v16 * v15) * v19) * v22));
                    ++v30;
                    --v31;
                  }
                  while (v31);
                }
              }
            }
            ++v25;
          }
          while (v25 != v24);
        }
        ++v20;
      }
      while (v20 != v19);
    }
  }
  else if (v75 >= 1)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    v34 = v67;
    v36 = v73;
    v35 = v74;
    v63 = v65 * v66;
    v37 = v16 * v64;
    do
    {
      if (v35 >= 1)
      {
        v38 = 0;
        v39 = v32 / v34 % (v16 * v15);
        v40 = v72;
        v41 = v39 / v15 - v17;
        v42 = v13 * (v41 + v63 * (v32 % v34));
        v43 = v39 - (v18 + v39 / v15 * v15);
        do
        {
          if (v36 >= 1)
          {
            v44 = 0;
            v45 = v42;
            do
            {
              if ((int)v40 >= 1)
              {
                v46 = v41 + v44 * v16;
                v33 = (int)v33;
                v47 = v43;
                v48 = v40;
                do
                {
                  if (v47 < 0)
                  {
                    v49 = *(_QWORD *)(v9 + 24);
                    v50 = 0;
                  }
                  else
                  {
                    v49 = *(_QWORD *)(v9 + 24);
                    v50 = 0;
                    if (v47 < v13 && (v46 & 0x80000000) == 0 && v46 < v65)
                      v50 = *(_DWORD *)(*(_QWORD *)(v12 + 24) + 4 * (v45 + v47));
                  }
                  *(_DWORD *)(v49 + 4 * v33++) = v50;
                  v47 += v15;
                  --v48;
                }
                while (v48);
              }
              ++v44;
              v45 += v37;
            }
            while (v44 != v36);
          }
          ++v38;
          v42 += v14;
        }
        while (v38 != v35);
      }
      ++v32;
    }
    while (v32 != v19);
  }
  if (__p)
  {
    v71 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v62)
  {
    v51 = (unint64_t *)&v62->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v53 = v81;
  if (v81)
  {
    v54 = (unint64_t *)&v81->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

