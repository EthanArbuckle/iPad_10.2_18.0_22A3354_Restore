char *NDLayers::stack_nd_shape_computation(int a1, char ***a2, char **a3)
{
  int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  char *result;
  uint64_t v14;
  int *v15;
  char *v16;

  v6 = -1431655765 * (a2[1] - *a2);
  v7 = **a2;
  v8 = (*a2)[1];
  v9 = v8 - v7;
  if (v6 >= 2)
  {
    v10 = *a2 + 4;
    v11 = -1431655765 * (a2[1] - *a2) - 1;
    do
    {
      v12 = (const void *)*(v10 - 1);
      if (v9 != *v10 - (_QWORD)v12 || memcmp(v7, v12, v8 - v7))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Stack_nd layer: Invalid shapes of input tensors.");
      v10 += 3;
      --v11;
    }
    while (v11);
  }
  result = *a3;
  if ((a3[1] - *a3) >> 2 != (uint64_t)((v9 << 30) + 0x100000000) >> 32)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Stack_nd layer: Invalid rank of output tensor.");
  v14 = (((v9 >> 2) + 1) & (a1 >> 31)) + a1;
  if ((v14 & 0x80000000) != 0 || (int)v14 > (int)(v9 >> 2))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Stack_nd layer: Invalid value of the argument 'axis'.");
  if ((_DWORD)v14)
  {
    memmove(result, v7, 4 * v14);
    result = *a3;
    v7 = **a2;
    v8 = (*a2)[1];
  }
  v15 = (int *)&result[4 * v14];
  *v15 = v6;
  v16 = &v7[4 * v14];
  if (v8 != v16)
    return (char *)memmove(v15 + 1, v16, v8 - v16);
  return result;
}

void Espresso::cpu_context_transfer_algo_t::compute_graph_shortest_path_v3(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, _QWORD *a5, _QWORD *a6, uint64_t *a7)
{
  int *v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  uint64_t **v22;
  BOOL v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  Espresso *v34;
  const char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t i;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  double v128;
  double *v129;
  _DWORD *v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  unint64_t v136;
  double v137;
  _DWORD *v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  uint64_t *v160;
  unint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int8 *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  float v181;
  unint64_t *v182;
  unint64_t v183;
  float v184;
  uint64_t v185;
  _DWORD *v186;
  int *v187;
  unint64_t v188;
  double v189;
  int v190;
  BOOL v191;
  BOOL v193;
  unint64_t v194;
  double v195;
  int v196;
  BOOL v197;
  unsigned int v199;
  double v200;
  double v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t *v206;
  _QWORD *j;
  unint64_t v208;
  uint64_t *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  __int128 *v213;
  __int128 *v214;
  char *v215;
  __int128 v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint8x8_t v221;
  unint64_t v222;
  unsigned __int8 **v223;
  unsigned __int8 *k;
  unint64_t v225;
  _QWORD *v226;
  float v227;
  float v228;
  _BOOL8 v229;
  unint64_t v230;
  unint64_t v231;
  size_t v232;
  uint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  void *v236;
  int v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  void *v242;
  NSObject *v243;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v251;
  double *v252;
  unint64_t v253;
  _QWORD *v254;
  _DWORD *v255;
  _BYTE *v256;
  uint64_t v257;
  _DWORD *v258;
  _BOOL4 v259;
  unint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  char v263;
  uint64_t PlatformHeuristics;
  uint64_t v265;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  char v272;
  _DWORD *v273;
  uint64_t v274;
  __int128 *v275[5];
  _BYTE v276[32];
  int v277;
  char *v278;
  char *v279;
  char *v280;
  void *__p;
  char *v282;
  char *v283;
  uint64_t *v284;
  uint64_t *v285;
  char *v286;
  uint64_t *v287;
  uint64_t *v288;
  char *v289;
  _DWORD *v290;
  _DWORD *v291;
  unint64_t v292;
  __int128 buf;
  __int128 v294;
  int v295;
  uint64_t v296;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v296 = *MEMORY[0x1E0C80C00];
  v11 = *a2;
  v10 = a2[1];
  v245 = 0x6DB6DB6DB6DB6DB7 * (((*a4)[1] - **a4) >> 5);
  v246 = v10 - *a2;
  v248 = v246 >> 4;
  v290 = 0;
  v291 = 0;
  v292 = 0;
  do
  {
    v12 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v11 + 8))(*(_QWORD *)(*(_QWORD *)v11 + 8));
    v13 = v12;
    if ((unint64_t)v9 >= v8)
    {
      v15 = v9 - v7;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v8 - (_QWORD)v7) >> 1 > v16)
        v16 = (uint64_t)(v8 - (_QWORD)v7) >> 1;
      if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
      else
        v18 = 0;
      v19 = (_DWORD *)(v17 + 4 * v15);
      *v19 = v13;
      v14 = v19 + 1;
      while (v9 != v7)
      {
        v20 = *--v9;
        *--v19 = v20;
      }
      v8 = v17 + 4 * v18;
      v290 = v19;
      v292 = v8;
      if (v7)
        operator delete(v7);
      v7 = v19;
    }
    else
    {
      *v9 = v12;
      v14 = v9 + 1;
    }
    v291 = v14;
    v11 += 16;
    v9 = v14;
  }
  while (v11 != v10);
  v21 = (*v7 - 10006) > 5 || ((0x2Fu >> (*(_BYTE *)v7 - 22)) & 1) == 0;
  v22 = a4;
  v259 = 1;
  if (v21 || (is_cpu(v7 + 1) & 1) == 0)
  {
    if (!is_cpu(v7)
      || ((v7[1] - 10006) <= 5 ? (v23 = ((0x2Fu >> (*((_BYTE *)v7 + 4) - 22)) & 1) == 0) : (v23 = 1), v23))
    {
      v259 = 0;
    }
  }
  v24 = *a4;
  buf = 0uLL;
  v25 = (std::__shared_weak_count *)v24[10];
  if (v25)
  {
    v26 = std::__shared_weak_count::lock(v25);
    *((_QWORD *)&buf + 1) = v26;
    if (v26)
      *(_QWORD *)&buf = v24[9];
  }
  else
  {
    v26 = 0;
  }
  PlatformHeuristics = GetPlatformHeuristics((Espresso::net **)&buf);
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (!PlatformHeuristics)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected nullptr.");
  v29 = (v245 << 32) + 0x100000000;
  v30 = (v29 >> 32) * v248;
  if (v30)
  {
    if (v30 >= 0x492492492492493)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v31 = (char *)operator new(56 * v30);
    v32 = &v31[56 * v30];
    v33 = v31;
    v30 = (unint64_t)v31;
    do
    {
      *((_QWORD *)v33 + 4) = 0;
      *((_QWORD *)v33 + 5) = 0;
      *(_OWORD *)v33 = 0uLL;
      *((_OWORD *)v33 + 1) = 0uLL;
      *(_DWORD *)v33 = -1;
      *((_QWORD *)v33 + 6) = 0;
      v33 += 56;
    }
    while (v33 != v32);
  }
  std::vector<std::unordered_set<std::string>>::vector(&v287, v248);
  std::vector<std::unordered_set<std::string>>::vector(&v284, v248);
  std::vector<std::unordered_map<std::string,int>>::vector(&__p, v248);
  v34 = (Espresso *)std::vector<std::unordered_map<std::string,int>>::vector(&v278, v248);
  if (v245 << 32 != 0xFFFFFFFF00000000)
  {
    v36 = 0;
    v37 = v246 >> 4;
    if (v248 <= 1)
      v37 = 1;
    v261 = v37;
    if ((unint64_t)(v29 >> 32) <= 1)
      v38 = 1;
    else
      v38 = v29 >> 32;
    v247 = v38;
    v39 = 1065353216;
    while (1)
    {
      v41 = (uint64_t)v278;
      v40 = (uint64_t)v279;
      v42 = 0xCCCCCCCCCCCCCCCDLL * ((v279 - v278) >> 3);
      v43 = (uint64_t)v283;
      v44 = (char *)__p;
      v267 = v36;
      if (0xCCCCCCCCCCCCCCCDLL * ((v283 - (_BYTE *)__p) >> 3) < v42)
        break;
      v52 = (uint64_t)v282;
      v53 = (v282 - (_BYTE *)__p) >> 3;
      v54 = 0xCCCCCCCCCCCCCCCDLL * v53;
      if (0xCCCCCCCCCCCCCCCDLL * v53 < v42)
      {
        if (v282 != __p)
        {
          v55 = v30;
          v56 = 8 * v53;
          v57 = v278;
          do
          {
            if (v57 != v44)
            {
              *((_DWORD *)v44 + 8) = *((_DWORD *)v57 + 8);
              std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(v44, *((uint64_t **)v57 + 2));
            }
            v57 += 40;
            v44 += 40;
            v56 -= 40;
          }
          while (v56);
          v44 = v282;
          v30 = v55;
          v36 = v267;
        }
        v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_map<std::string,int>>,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*>(v41 + 40 * v54, v40, (uint64_t)v44);
LABEL_76:
        v58 = (char *)v51;
        goto LABEL_77;
      }
      if (v278 != v279)
      {
        do
        {
          if ((char *)v41 != v44)
          {
            *((_DWORD *)v44 + 8) = *(_DWORD *)(v41 + 32);
            std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(v44, *(uint64_t **)(v41 + 16));
          }
          v41 += 40;
          v44 += 40;
        }
        while (v41 != v40);
        v52 = (uint64_t)v282;
      }
      v58 = v44;
      while ((char *)v52 != v44)
        v52 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v52 - 40);
LABEL_77:
      v282 = v58;
      v60 = (uint64_t)v284;
      v59 = (uint64_t)v285;
      v61 = 0xCCCCCCCCCCCCCCCDLL * (v285 - v284);
      v62 = (uint64_t)v289;
      v63 = v287;
      if (0xCCCCCCCCCCCCCCCDLL * ((v289 - (char *)v287) >> 3) < v61)
      {
        if (v287)
        {
          v64 = (uint64_t)v288;
          v65 = v287;
          if (v288 != v287)
          {
            do
              v64 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v64 - 40);
            while ((uint64_t *)v64 != v63);
            v65 = v287;
          }
          v288 = v63;
          operator delete(v65);
          v62 = 0;
          v287 = 0;
          v288 = 0;
          v289 = 0;
        }
        if (v61 > 0x666666666666666)
          goto LABEL_372;
        v66 = 0xCCCCCCCCCCCCCCCDLL * (v62 >> 3);
        v67 = 2 * v66;
        if (2 * v66 <= v61)
          v67 = v61;
        v68 = v66 >= 0x333333333333333 ? 0x666666666666666 : v67;
        if (v68 > 0x666666666666666)
LABEL_372:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v287 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v68);
        v288 = v287;
        v289 = (char *)&v287[5 * v69];
        v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<std::string>>,std::unordered_set<std::string>*,std::unordered_set<std::string>*,std::unordered_set<std::string>*>(v60, v59, (uint64_t)v287);
        goto LABEL_99;
      }
      v71 = (uint64_t)v288;
      v72 = v288 - v287;
      v73 = 0xCCCCCCCCCCCCCCCDLL * v72;
      if (0xCCCCCCCCCCCCCCCDLL * v72 < v61)
      {
        if (v288 != v287)
        {
          v74 = v30;
          v75 = 8 * v72;
          v76 = v284;
          do
          {
            if (v76 != v63)
            {
              *((_DWORD *)v63 + 8) = *((_DWORD *)v76 + 8);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v63, (uint64_t *)v76[2], 0);
            }
            v76 += 5;
            v63 += 5;
            v75 -= 40;
          }
          while (v75);
          v63 = v288;
          v30 = v74;
          v36 = v267;
        }
        v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<std::string>>,std::unordered_set<std::string>*,std::unordered_set<std::string>*,std::unordered_set<std::string>*>(v60 + 40 * v73, v59, (uint64_t)v63);
LABEL_99:
        v77 = (uint64_t *)v70;
        goto LABEL_100;
      }
      if (v284 != v285)
      {
        do
        {
          if ((uint64_t *)v60 != v63)
          {
            *((_DWORD *)v63 + 8) = *(_DWORD *)(v60 + 32);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v63, *(uint64_t **)(v60 + 16), 0);
          }
          v60 += 40;
          v63 += 5;
        }
        while (v60 != v59);
        v71 = (uint64_t)v288;
      }
      v77 = v63;
      while ((uint64_t *)v71 != v63)
        v71 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v71 - 40);
LABEL_100:
      v288 = v77;
      v79 = (uint64_t)v278;
      for (i = (uint64_t)v279;
            i != v79;
      v279 = (char *)v79;
      v81 = v284;
      v80 = (uint64_t)v285;
      if (v285 != v284)
      {
        do
          v80 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v80 - 40);
        while ((uint64_t *)v80 != v81);
        v79 = (uint64_t)v279;
      }
      v285 = v81;
      v82 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - (uint64_t)v278) >> 3);
      v83 = v248 - v82;
      if (v248 <= v82)
      {
        if (v248 < v82)
        {
          v103 = &v278[40 * v248];
          while ((char *)v79 != v103)
          {
            v79 -= 40;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v79);
          }
          v279 = v103;
        }
      }
      else if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v280[-v79] >> 3) >= v83)
      {
        v104 = v79 + 40 * v83;
        do
        {
          *(_OWORD *)v79 = 0uLL;
          *(_OWORD *)(v79 + 16) = 0uLL;
          *(_DWORD *)(v79 + 32) = 1065353216;
          v79 += 40;
        }
        while (v79 != v104);
        v279 = (char *)v104;
      }
      else
      {
        if ((unint64_t)v246 > 0x666666666666666FLL)
          goto LABEL_373;
        v84 = 0x999999999999999ALL * ((v280 - v278) >> 3);
        if (v84 <= v248)
          v84 = v246 >> 4;
        if (0xCCCCCCCCCCCCCCCDLL * ((v280 - v278) >> 3) >= 0x333333333333333)
          v85 = 0x666666666666666;
        else
          v85 = v84;
        v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v85);
        v88 = &v86[40 * v82];
        v89 = &v86[40 * v248];
        v90 = v88;
        do
        {
          *(_OWORD *)v90 = 0uLL;
          *((_OWORD *)v90 + 1) = 0uLL;
          *((_DWORD *)v90 + 8) = 1065353216;
          v90 += 40;
        }
        while (v90 != v89);
        v91 = &v86[40 * v87];
        v93 = v278;
        v92 = v279;
        if (v279 == v278)
        {
          v278 = v88;
          v279 = v89;
          v280 = v91;
          if (!v92)
            goto LABEL_156;
LABEL_155:
          operator delete(v92);
          goto LABEL_156;
        }
        v94 = 0;
        do
        {
          v95 = &v88[v94];
          v96 = &v92[v94];
          v97 = *(_QWORD *)&v92[v94 - 40];
          *((_QWORD *)v96 - 5) = 0;
          *((_QWORD *)v95 - 5) = v97;
          *((_QWORD *)v95 - 4) = *(_QWORD *)&v92[v94 - 32];
          *((_QWORD *)v96 - 4) = 0;
          v98 = *(_QWORD *)&v92[v94 - 24];
          *(_QWORD *)&v88[v94 - 24] = v98;
          v99 = *(_QWORD *)&v92[v94 - 16];
          *((_QWORD *)v95 - 2) = v99;
          *((_DWORD *)v95 - 2) = *(_DWORD *)&v92[v94 - 8];
          if (v99)
          {
            v100 = *(_QWORD *)(v98 + 8);
            v101 = *((_QWORD *)v95 - 4);
            if ((v101 & (v101 - 1)) != 0)
            {
              if (v100 >= v101)
                v100 %= v101;
            }
            else
            {
              v100 &= v101 - 1;
            }
            *(_QWORD *)(v97 + 8 * v100) = &v88[v94 - 24];
            *(_QWORD *)&v92[v94 - 24] = 0;
            *(_QWORD *)&v92[v94 - 16] = 0;
          }
          v94 -= 40;
        }
        while (&v92[v94] != v93);
        v102 = v278;
        v92 = v279;
        v278 = &v88[v94];
        v279 = v89;
        v280 = v91;
        if (v92 != v102)
        {
          do
            v92 = (char *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)(v92 - 40));
          while (v92 != v102);
          v92 = v102;
        }
        if (v92)
          goto LABEL_155;
      }
LABEL_156:
      v105 = (uint64_t)v285;
      v106 = 0xCCCCCCCCCCCCCCCDLL * (v285 - v284);
      v107 = v248 >= v106;
      v108 = v248 - v106;
      if (v248 <= v106)
      {
        v121 = v261;
        if (!v107)
        {
          v122 = &v284[5 * v248];
          while ((uint64_t *)v105 != v122)
            v105 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v105 - 40);
          v285 = v122;
          v121 = v261;
        }
        goto LABEL_184;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v286 - (char *)v285) >> 3) < v108)
      {
        if ((unint64_t)v246 > 0x666666666666666FLL)
          goto LABEL_372;
        v109 = 0x999999999999999ALL * ((v286 - (char *)v284) >> 3);
        if (v109 <= v248)
          v109 = v246 >> 4;
        if (0xCCCCCCCCCCCCCCCDLL * ((v286 - (char *)v284) >> 3) >= 0x333333333333333)
          v110 = 0x666666666666666;
        else
          v110 = v109;
        v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v110);
        v113 = v30;
        v114 = (uint64_t)&v112[40 * v106];
        v115 = &v112[40 * v248];
        v116 = v114;
        do
        {
          *(_OWORD *)v116 = 0uLL;
          *(_OWORD *)(v116 + 16) = 0uLL;
          *(_DWORD *)(v116 + 32) = 1065353216;
          v116 += 40;
        }
        while ((char *)v116 != v115);
        v117 = &v112[40 * v111];
        v118 = v284;
        v119 = v285;
        if (v285 == v284)
        {
          v284 = (uint64_t *)v114;
          v285 = (uint64_t *)&v112[40 * v248];
          v286 = &v112[40 * v111];
        }
        else
        {
          do
          {
            v119 -= 5;
            v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(v114 - 40, v119);
          }
          while (v119 != v118);
          v120 = v284;
          v119 = v285;
          v284 = (uint64_t *)v114;
          v285 = (uint64_t *)v115;
          v286 = v117;
          if (v119 != v120)
          {
            v121 = v261;
            do
            {
              v119 -= 5;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v119);
            }
            while (v119 != v120);
            v119 = v120;
LABEL_182:
            v30 = v113;
            v36 = v267;
            if (v119)
              operator delete(v119);
            goto LABEL_184;
          }
        }
        v121 = v261;
        goto LABEL_182;
      }
      v123 = &v285[5 * v108];
      v121 = v261;
      do
      {
        *(_OWORD *)v105 = 0uLL;
        *(_OWORD *)(v105 + 16) = 0uLL;
        *(_DWORD *)(v105 + 32) = 1065353216;
        v105 += 40;
      }
      while ((uint64_t *)v105 != v123);
      v285 = v123;
LABEL_184:
      v124 = 0;
      v271 = (v36 - 1) * v248;
      v251 = v36 * v248;
      v256 = (_BYTE *)(v30 + 56 * v36 * v248 + 16);
      do
      {
        v274 = v124;
        v125 = v124 + v251;
        v126 = v30 + 56 * v125;
        *(_QWORD *)(v126 + 48) = 0;
        v127 = (_QWORD *)(v126 + 48);
        v128 = *(double *)(*a5 + 8 * v125);
        *(double *)(v126 + 8) = v128;
        v129 = (double *)(v126 + 8);
        v260 = v125;
        *(_BYTE *)(v126 + 16) = (*(_QWORD *)(*a6 + ((v125 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v125) & 1;
        *(_DWORD *)(v126 + 32) = 0;
        v130 = (_DWORD *)(v126 + 32);
        buf = 0u;
        v294 = 0u;
        v295 = 1065353216;
        if (!v36)
        {
          v263 = 0;
          LODWORD(v133) = 0;
          v202 = v128;
          v134 = v128;
          goto LABEL_291;
        }
        v252 = (double *)(v126 + 8);
        v253 = v30 + 56 * v125;
        v254 = (_QWORD *)(v126 + 48);
        v255 = (_DWORD *)(v126 + 32);
        v263 = 0;
        v131 = 0;
        v132 = fmax(v128 * 0.2, 0.5);
        v133 = 0xFFFFFFFFLL;
        v134 = 0.0;
        do
        {
          memset(v276, 0, sizeof(v276));
          v277 = 1065353216;
          v135 = v131 + v271;
          if (!*(_BYTE *)(v30 + 56 * (v131 + v271) + 16))
            goto LABEL_288;
          v136 = v30 + 56 * v135;
          v137 = *(double *)(v136 + 8);
          v272 = *(_BYTE *)(v136 + 17);
          if (v36 != (int)v245)
          {
            v138 = v290;
            v139 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)PlatformHeuristics + 176))(PlatformHeuristics, v290[v131], v290[v274]);
            v140 = **v22;
            v265 = v133;
            if (v139 != 0.0)
            {
              v141 = v140 + 224 * v36;
              v142 = *(_QWORD *)(v141 + 184);
              v143 = *(_QWORD *)(v141 + 192);
              v144 = (_QWORD *)(v141 + 184);
              if (v143 != v142)
              {
                v145 = v140 + 224 * v36;
                v148 = *(_QWORD *)(v145 + 136);
                v147 = (uint64_t *)(v145 + 136);
                v146 = v148;
                v268 = v30;
                if (v147[1] == v148)
                {
                  v151 = 0;
                }
                else
                {
                  v149 = 0;
                  v150 = 0;
                  v151 = 0;
                  v152 = 0;
                  do
                  {
                    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)__p + 5 * v131, (unsigned __int8 *)(v146 + v150)))
                    {
                      v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)__p + 5 * v131, (unsigned __int8 *)(*v147 + v150));
                      if (!v153)
                        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                      if (*((_DWORD *)v153 + 10) != v290[v274])
                      {
                        v154 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(*v144 + v149));
                        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v276, *v147 + v150, *v147 + v150);
                        v151 += 2 * v154;
                      }
                    }
                    ++v152;
                    v146 = *v147;
                    v150 += 24;
                    v149 += 64;
                  }
                  while (v152 < 0xAAAAAAAAAAAAAAABLL * ((v147[1] - *v147) >> 3));
                }
                v30 = v268;
                v184 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)PlatformHeuristics + 80))(PlatformHeuristics, 2);
                v185 = 3 * v151;
                if (!v259)
                  v185 = 2 * v151;
                v139 = v139 + (double)(unint64_t)v185 / (double)(unint64_t)v184 * 1000.0 + 0.01;
                ++v272;
                v22 = a4;
                v36 = v267;
                goto LABEL_248;
              }
            }
            v155 = (std::__shared_weak_count *)(*v22)[10];
            if (v155)
              v155 = std::__shared_weak_count::lock(v155);
            v262 = v155;
            v156 = v140 + 224 * v36;
            v158 = *(_QWORD *)(v156 + 136);
            v157 = *(_QWORD *)(v156 + 144);
            if (v158 != v157)
            {
              v159 = (unsigned int *)(v30 + 56 * v135 + 32);
              do
              {
                v160 = *v22;
                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((_QWORD *)(*v22)[4], (_QWORD *)v158))
                {
                  v275[0] = (__int128 *)v158;
                  v161 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v160 + 3), (_QWORD *)v158, v275)[7];
                  std::unordered_set<std::string>::unordered_set((uint64_t)v275, (uint64_t)&v287[5 * v131]);
                  if (v161 < v36 - *v159
                    && !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v275, v158)&& std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)__p + 5 * v131, (unsigned __int8 *)v158))
                  {
                    v162 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)__p + 5 * v131, (unsigned __int8 *)v158);
                    if (!v162)
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    if (*((_DWORD *)v162 + 10) != v138[v274])
                    {
                      v163 = **v22 + 224 * v36;
                      v165 = *(_QWORD *)(v163 + 136);
                      v164 = *(_QWORD *)(v163 + 144);
                      if (v164 == v165)
                      {
LABEL_234:
                        v36 = v267;
                        goto LABEL_206;
                      }
                      v257 = **v22;
                      v269 = v30;
                      v166 = 0;
                      v167 = *(char *)(v158 + 23);
                      if ((int)v167 >= 0)
                        v168 = *(unsigned __int8 *)(v158 + 23);
                      else
                        v168 = *(_QWORD *)(v158 + 8);
                      if ((unint64_t)((v164 - v165) / 24) <= 1)
                        v169 = 1;
                      else
                        v169 = (v164 - v165) / 24;
                      while (1)
                      {
                        v170 = (unsigned __int8 *)(v165 + 24 * v166);
                        v171 = v170[23];
                        if ((v171 & 0x80u) == 0)
                          v172 = v170[23];
                        else
                          v172 = *((_QWORD *)v170 + 1);
                        if (v172 == v168)
                        {
                          if ((int)v167 >= 0)
                            v173 = (unsigned __int8 *)v158;
                          else
                            v173 = *(unsigned __int8 **)v158;
                          if ((v171 & 0x80) != 0)
                          {
                            v174 = v135;
                            v175 = v167;
                            v258 = v138;
                            v176 = v169;
                            v177 = memcmp(*(const void **)v170, v173, *((_QWORD *)v170 + 1));
                            v169 = v176;
                            v138 = v258;
                            v167 = v175;
                            v135 = v174;
                            if (!v177)
                            {
LABEL_235:
                              v36 = v267;
                              v178 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(*(_QWORD *)(v257 + 224 * v267 + 184)
                                                                                              + (v166 << 6)));
                              if (v259)
                                v179 = 6 * v178;
                              else
                                v179 = 4 * v178;
                              v180 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)PlatformHeuristics + 80))(PlatformHeuristics, 2);
                              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v276, v158, v158);
                              v181 = v180;
                              v139 = v139 + (double)(unint64_t)v179 / v181 * 1000.0 + 0.01;
                              v30 = v269;
                              v22 = a4;
                              break;
                            }
                          }
                          else
                          {
                            if (!v170[23])
                              goto LABEL_235;
                            while (*v170 == *v173)
                            {
                              ++v170;
                              ++v173;
                              if (!--v171)
                                goto LABEL_235;
                            }
                          }
                        }
                        if (++v166 == v169)
                        {
                          v30 = v269;
                          v22 = a4;
                          goto LABEL_234;
                        }
                      }
                    }
                  }
LABEL_206:
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v275);
                }
                v158 += 24;
              }
              while (v158 != v157);
            }
            if (v262)
            {
              v182 = (unint64_t *)&v262->__shared_owners_;
              v39 = 1065353216;
              v133 = v265;
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 - 1, v182));
              if (!v183)
              {
                ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                std::__shared_weak_count::__release_weak(v262);
              }
            }
            else
            {
LABEL_248:
              v39 = 1065353216;
              v133 = v265;
            }
            v186 = v290;
            if (v36 == ((v245 << 32) - 0x100000000) >> 32)
            {
              v187 = &v290[v274];
              if (is_gpu(v187))
              {
                if (!is_gpu(&v186[v131])
                  || ((v188 = v30 + 56 * v135,
                       v189 = v128 + *(double *)(v188 + 40),
                       v190 = *(_DWORD *)(v188 + 32),
                       v189 >= 0.01)
                    ? (v191 = v190 == 1)
                    : (v191 = 1),
                      v191))
                {
                  v139 = v139 + 0.05;
                }
              }
              if ((*v187 - 10006) <= 5 && ((0x2Fu >> (*(_BYTE *)v187 - 22)) & 1) != 0)
              {
                v193 = (v186[v131] - 10006) > 5 || ((0x2Fu >> (LOBYTE(v186[v131]) - 22)) & 1) == 0;
                if (v193
                  || ((v194 = v30 + 56 * v135,
                       v195 = v128 + *(double *)(v194 + 40),
                       v196 = *(_DWORD *)(v194 + 32),
                       v195 >= 0.01)
                    ? (v197 = v196 == 1)
                    : (v197 = 1),
                      v197))
                {
                  v139 = v139 + 0.02;
                }
              }
            }
            if ((v186[v131] - 10006) <= 5 && ((0x2Fu >> (LOBYTE(v186[v131]) - 22)) & 1) != 0)
            {
              v199 = ((v186[v274] - 10006) < 6) & (0x2Fu >> (LOBYTE(v186[v274]) - 22));
              if (!*v256)
                v199 = 1;
              v200 = -0.0;
              if (!v199)
                v200 = v132;
              v139 = v139 + v200;
            }
            v121 = v261;
            v137 = v137 + v139;
          }
          if (v137 < v134 || (_DWORD)v133 == -1)
          {
            v295 = v277;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&buf, *(uint64_t **)&v276[16], 0);
            v263 = v272;
            v133 = v131;
            v134 = v137;
          }
LABEL_288:
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v276);
          ++v131;
        }
        while (v131 != v121);
        v129 = v252;
        v126 = v253;
        v202 = *v252;
        v127 = v254;
        v130 = v255;
LABEL_291:
        *v129 = v134 + v202;
        *(_DWORD *)v126 = v133 + v271;
        *(_QWORD *)(v30 + 56 * v260 + 24) = v274;
        v270 = v30;
        if (v36 && v274 == (int)v133)
        {
          if (v278 != __p)
          {
            v203 = (char *)__p + 40 * v274;
            v204 = &v278[40 * v274];
            *((_DWORD *)v204 + 8) = *((_DWORD *)v203 + 8);
            std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(v204, *((uint64_t **)v203 + 2));
          }
          if (v284 != v287)
          {
            v205 = (char *)&v287[5 * v274];
            v206 = &v284[5 * v274];
            *((_DWORD *)v206 + 8) = *((_DWORD *)v205 + 8);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v206, *((uint64_t **)v205 + 2), 0);
          }
          for (j = (_QWORD *)v294; j; j = (_QWORD *)*j)
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v284[5 * v274], (uint64_t)(j + 2), (uint64_t)(j + 2));
          v208 = v30 + 56 * (v271 + v274);
          *v127 = *((_QWORD *)&v294 + 1) + *(_QWORD *)(v208 + 48);
          *v130 = *(_DWORD *)(v208 + 32) + 1;
          *(double *)(v30 + 56 * v260 + 40) = v128 + *(double *)(v30 + 56 * v260 + 40);
        }
        else
        {
          if (v36)
          {
            v209 = &v284[5 * v274];
            if (v209 != (uint64_t *)&buf)
            {
              *((_DWORD *)v209 + 8) = v295;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v209, (uint64_t *)v294, 0);
            }
            *v127 = *((_QWORD *)&v294 + 1) + *(_QWORD *)(v30 + 56 * (v271 + (int)v133) + 48);
            v210 = (char *)__p + 40 * (int)v133;
            v211 = &v278[40 * v274];
            if (v211 != v210)
            {
              *((_DWORD *)v211 + 8) = *((_DWORD *)v210 + 8);
              std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(v211, *((uint64_t **)v210 + 2));
            }
          }
          *v130 = 1;
          *(double *)(v30 + 56 * v260 + 40) = v128;
        }
        if (v36 < (int)v245)
        {
          v212 = **v22 + 224 * v36;
          v213 = *(__int128 **)(v212 + 112);
          v214 = *(__int128 **)(v212 + 120);
          if (v213 != v214)
          {
            v273 = v290;
            do
            {
              v215 = v278;
              if (*((char *)v213 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v276, *(const std::string::value_type **)v213, *((_QWORD *)v213 + 1));
              }
              else
              {
                v216 = *v213;
                *(_QWORD *)&v276[16] = *((_QWORD *)v213 + 2);
                *(_OWORD *)v276 = v216;
              }
              v217 = (uint64_t)&v215[40 * v274];
              *(_DWORD *)&v276[24] = v273[v274];
              v218 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v276);
              v219 = v218;
              v220 = *(_QWORD *)(v217 + 8);
              if (v220)
              {
                v221 = (uint8x8_t)vcnt_s8((int8x8_t)v220);
                v221.i16[0] = vaddlv_u8(v221);
                v222 = v221.u32[0];
                if (v221.u32[0] > 1uLL)
                {
                  v39 = v218;
                  if (v218 >= v220)
                    v39 = v218 % v220;
                }
                else
                {
                  v39 = (v220 - 1) & v218;
                }
                v223 = *(unsigned __int8 ***)(*(_QWORD *)v217 + 8 * v39);
                if (v223)
                {
                  for (k = *v223; k; k = *(unsigned __int8 **)k)
                  {
                    v225 = *((_QWORD *)k + 1);
                    if (v225 == v219)
                    {
                      if (std::equal_to<std::string>::operator()[abi:ne180100](k + 16, v276))
                        goto LABEL_350;
                    }
                    else
                    {
                      if (v222 > 1)
                      {
                        if (v225 >= v220)
                          v225 %= v220;
                      }
                      else
                      {
                        v225 &= v220 - 1;
                      }
                      if (v225 != v39)
                        break;
                    }
                  }
                }
              }
              v226 = operator new(0x30uLL);
              *v226 = 0;
              v226[1] = v219;
              *((_OWORD *)v226 + 1) = *(_OWORD *)v276;
              v226[4] = *(_QWORD *)&v276[16];
              memset(v276, 0, 24);
              *((_DWORD *)v226 + 10) = *(_DWORD *)&v276[24];
              v227 = (float)(unint64_t)(*(_QWORD *)(v217 + 24) + 1);
              v228 = *(float *)(v217 + 32);
              if (!v220 || (float)(v228 * (float)v220) < v227)
              {
                v229 = (v220 & (v220 - 1)) != 0;
                if (v220 < 3)
                  v229 = 1;
                v230 = v229 | (2 * v220);
                v231 = vcvtps_u32_f32(v227 / v228);
                if (v230 <= v231)
                  v232 = v231;
                else
                  v232 = v230;
                std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(v217, v232);
                v220 = *(_QWORD *)(v217 + 8);
                if ((v220 & (v220 - 1)) != 0)
                {
                  if (v219 >= v220)
                    v39 = v219 % v220;
                  else
                    v39 = v219;
                }
                else
                {
                  v39 = (v220 - 1) & v219;
                }
              }
              v233 = *(_QWORD *)v217;
              v234 = *(_QWORD **)(*(_QWORD *)v217 + 8 * v39);
              if (v234)
              {
                *v226 = *v234;
              }
              else
              {
                *v226 = *(_QWORD *)(v217 + 16);
                *(_QWORD *)(v217 + 16) = v226;
                *(_QWORD *)(v233 + 8 * v39) = v217 + 16;
                if (!*v226)
                  goto LABEL_349;
                v235 = *(_QWORD *)(*v226 + 8);
                if ((v220 & (v220 - 1)) != 0)
                {
                  if (v235 >= v220)
                    v235 %= v220;
                }
                else
                {
                  v235 &= v220 - 1;
                }
                v234 = (_QWORD *)(*(_QWORD *)v217 + 8 * v235);
              }
              *v234 = v226;
LABEL_349:
              ++*(_QWORD *)(v217 + 24);
LABEL_350:
              if ((v276[23] & 0x80000000) != 0)
                operator delete(*(void **)v276);
              v213 = (__int128 *)((char *)v213 + 24);
              v22 = a4;
              v36 = v267;
              v39 = 1065353216;
            }
            while (v213 != v214);
          }
        }
        v30 = v270;
        *(_BYTE *)(v270 + 56 * v260 + 17) = v263;
        v34 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf);
        v124 = v274 + 1;
        v121 = v261;
      }
      while (v274 + 1 != v261);
      if (++v36 == v247)
        goto LABEL_355;
    }
    if (__p)
    {
      v45 = (uint64_t)v282;
      v46 = __p;
      if (v282 != __p)
      {
        do
          v45 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v45 - 40);
        while ((char *)v45 != v44);
        v46 = __p;
      }
      v282 = v44;
      operator delete(v46);
      v43 = 0;
      __p = 0;
      v282 = 0;
      v283 = 0;
    }
    if (v42 > 0x666666666666666)
      goto LABEL_373;
    v47 = 0xCCCCCCCCCCCCCCCDLL * (v43 >> 3);
    v48 = 2 * v47;
    if (2 * v47 <= v42)
      v48 = v42;
    v49 = v47 >= 0x333333333333333 ? 0x666666666666666 : v48;
    if (v49 > 0x666666666666666)
LABEL_373:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v49);
    v282 = (char *)__p;
    v283 = (char *)__p + 40 * v50;
    v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_map<std::string,int>>,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*>(v41, v40, (uint64_t)__p);
    goto LABEL_76;
  }
LABEL_355:
  v236 = (void *)v30;
  v237 = v248 * v245;
  v238 = v236;
  if ((v245 & 0x80000000) != 0)
  {
LABEL_363:
    v242 = v236;
  }
  else
  {
    v239 = *a7;
    v240 = v245;
    while (1)
    {
      if (v240 < (int)v245)
        *(_DWORD *)(v239 + 4 * v240) = v237 % v248 != 0;
      v237 = *((_DWORD *)v236 + 14 * v237);
      if (v240)
      {
        if (v237 < 0)
          break;
      }
      if (v240-- <= 0)
        goto LABEL_363;
    }
    Espresso::espresso_os_log_subsystem(v34, v35);
    v243 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 67109376;
      DWORD1(buf) = v237;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v240;
      _os_log_error_impl(&dword_190DAF000, v243, OS_LOG_TYPE_ERROR, "assign_to_fallback_context_v2: disconnected graph_position=%d ilayer=%d", (uint8_t *)&buf, 0xEu);
    }

    v242 = v238;
  }
  *(_QWORD *)&buf = &v278;
  std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  *(_QWORD *)&buf = &__p;
  std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  *(_QWORD *)&buf = &v284;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  *(_QWORD *)&buf = &v287;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  operator delete(v242);
  if (v290)
    operator delete(v290);
}

void sub_190E17518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61)
{
  void *v61;
  uint64_t v62;
  void *v64;

  *(_QWORD *)(v62 - 208) = &a58;
  std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 208));
  *(_QWORD *)(v62 - 208) = &a61;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 208));
  *(_QWORD *)(v62 - 208) = v62 - 256;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 208));
  if (v61)
    operator delete(v61);
  v64 = *(void **)(v62 - 232);
  if (v64)
  {
    *(_QWORD *)(v62 - 224) = v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::~base_kernel(Espresso::base_kernel *this)
{
  void *v2;

  *(_QWORD *)this = off_1E2D5F838;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 240);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>>>::~__hash_table((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void Espresso::ANERuntimeEngine::mix_elementwise_kernel::~mix_elementwise_kernel(Espresso::ANERuntimeEngine::mix_elementwise_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D780E8;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D780E8;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(void **this)
{
  *this = &off_1E2D73880;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 24));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 17));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11[3];

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 2));
      v9 = *(char **)v8;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v10 = *(char **)v8;
      if (v8[39] < 0)
        operator delete(*((void **)v8 + 2));
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)v11);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v11[0]);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_190E17A48(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_190E17A64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_190E17A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p)
{
  void **v11;

  v11 = __p;
  __p = 0;
  if (v11)
  {
    sub_1910123F4((uint64_t)&__p, v11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190E17A6CLL);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *inserted;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!inserted)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *inserted;
  *inserted = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  size_t prime;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  size_t v19;
  uint8x8_t v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  _BOOL4 v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  BOOL v41;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const void **v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char v57;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v12 = 1;
    if (v6 >= 3)
      v12 = (v6 & (v6 - 1)) != 0;
    v13 = v12 | (2 * v6);
    v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14)
      prime = v14;
    else
      prime = v13;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_15;
    if (prime < v6)
    {
      v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 >= 3)
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] <= 1uLL)
        {
          v18 = 1 << -(char)__clz(v16 - 1);
          if (v16 >= 2)
            v16 = v18;
          if (prime <= v16)
            prime = v16;
          if (prime >= v6)
            goto LABEL_28;
LABEL_15:
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(a1, prime);
          goto LABEL_28;
        }
      }
      v19 = std::__next_prime(v16);
      if (prime <= v19)
        prime = v19;
      if (prime < v6)
        goto LABEL_15;
    }
LABEL_28:
    v6 = *(_QWORD *)(a1 + 8);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v20.i16[0] = vaddlv_u8(v20);
    v10 = v20.u32[0];
    if (v20.u32[0] <= 1uLL)
      goto LABEL_4;
    goto LABEL_29;
  }
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  v11 = a2;
  if (v6 <= a2)
    v11 = a2 % v6;
LABEL_31:
  v21 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v11);
  if (!v21)
    return 0;
  v22 = a3[23];
  if (v22 >= 0)
    v23 = a3[23];
  else
    v23 = *((_QWORD *)a3 + 1);
  if (v22 < 0)
    a3 = *(_BYTE **)a3;
  if (v10 >= 2)
  {
    v43 = 0;
    do
    {
      v28 = v21;
      v21 = (uint64_t *)*v21;
      if (!v21)
        break;
      v46 = v21[1];
      v47 = v46;
      if (v46 >= v6)
        v47 = v46 % v6;
      if (v47 != v11)
        break;
      if (v46 == a2
        && ((v48 = *((unsigned __int8 *)v21 + 39), (v48 & 0x80u) == 0)
          ? (v49 = *((unsigned __int8 *)v21 + 39))
          : (v49 = v21[3]),
            v49 == v23))
      {
        v50 = (const void **)(v21 + 2);
        if ((v48 & 0x80) != 0)
        {
          v44 = memcmp(*v50, a3, v21[3]) == 0;
        }
        else if (*((_BYTE *)v21 + 39))
        {
          v51 = v48 - 1;
          v52 = a3;
          do
          {
            v54 = *(unsigned __int8 *)v50;
            v50 = (const void **)((char *)v50 + 1);
            v53 = v54;
            v56 = *v52++;
            v55 = v56;
            v39 = v51-- != 0;
            v57 = v39;
            v41 = v53 == v55;
            v44 = v53 == v55;
          }
          while (v41 && (v57 & 1) != 0);
        }
        else
        {
          v44 = 1;
        }
      }
      else
      {
        v44 = 0;
      }
      v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    v24 = 0;
    v25 = v6 - 1;
    do
    {
      v28 = v21;
      v21 = (uint64_t *)*v21;
      if (!v21)
        break;
      v29 = v21[1];
      if ((v29 & v25) != v11)
        break;
      if (v29 == a2
        && ((v30 = *((unsigned __int8 *)v21 + 39), (v30 & 0x80u) == 0)
          ? (v31 = *((unsigned __int8 *)v21 + 39))
          : (v31 = v21[3]),
            v31 == v23))
      {
        v32 = (const void **)(v21 + 2);
        if ((v30 & 0x80) != 0)
        {
          v26 = memcmp(*v32, a3, v21[3]) == 0;
        }
        else if (*((_BYTE *)v21 + 39))
        {
          v33 = v30 - 1;
          v34 = a3;
          do
          {
            v36 = *(unsigned __int8 *)v32;
            v32 = (const void **)((char *)v32 + 1);
            v35 = v36;
            v38 = *v34++;
            v37 = v38;
            v39 = v33-- != 0;
            v40 = v39;
            v41 = v35 == v37;
            v26 = v35 == v37;
          }
          while (v41 && (v40 & 1) != 0);
        }
        else
        {
          v26 = 1;
        }
      }
      else
      {
        v26 = 0;
      }
      v27 = v24 & !v26;
      v24 |= v26;
    }
    while ((v27 & 1) == 0);
  }
  return v28;
}

double newpPlatformHeuristics::get_engine_switch_ms(uint64_t a1, int a2, int a3)
{
  double result;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v8 = a3;
  v9 = a2;
  result = 0.0;
  if (a2 != a3)
  {
    v5 = ((a2 - 10006) < 6) & (0x2Fu >> (a2 - 22));
    if (v5 == 1 && (is_cpu(&v8) & 1) != 0)
      return 0.100000001;
    v6 = is_cpu(&v9);
    if (v6 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0)
      return 0.0199999996;
    v7 = is_gpu(&v9);
    if (v7 && (is_cpu(&v8) & 1) != 0 || v6 && (is_gpu(&v8) & 1) != 0)
      return 0.150000006;
    if ((!v5 || (is_gpu(&v8) & 1) == 0) && v7 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0)
      return 0.0199999996;
    else
      return 0.100000001;
  }
  return result;
}

unint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t result;
  char v13;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x28uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = (uint64_t *)(v6 + 16);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 4) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  v9 = v7[39];
  if (v9 >= 0)
    v10 = v8;
  else
    v10 = (uint64_t *)*((_QWORD *)v7 + 2);
  if (v9 >= 0)
    v11 = v7[39];
  else
    v11 = *((_QWORD *)v7 + 3);
  result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v13, v10, v11);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_190E1810C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  size_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  const void *v26;
  uint64_t *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v35 = v9.u32[0];
        do
        {
          v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (uint64_t **)v12;
          }
          else
          {
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              v14 = (uint64_t *)*v12;
              v36 = v8;
              if (*v12)
              {
                v15 = v12[3];
                if (*((char *)v12 + 39) >= 0)
                  v16 = *((unsigned __int8 *)v12 + 39);
                else
                  v16 = v12[3];
                if ((*((_BYTE *)v12 + 39) & 0x80) == 0)
                {
                  if (*((_BYTE *)v12 + 39))
                  {
                    v17 = (uint64_t *)*v12;
                    v18 = v12;
LABEL_32:
                    v14 = v17;
                    v19 = *((unsigned __int8 *)v17 + 39);
                    v20 = (char)v19;
                    if ((v19 & 0x80u) != 0)
                      v19 = v14[3];
                    if (v16 == v19)
                    {
                      if (v20 >= 0)
                        v21 = (unsigned __int8 *)(v14 + 2);
                      else
                        v21 = (unsigned __int8 *)v14[2];
                      v22 = (unsigned __int8 *)(v12 + 2);
                      v23 = *((unsigned __int8 *)v12 + 39);
                      while (*v22 == *v21)
                      {
                        ++v22;
                        ++v21;
                        if (!--v23)
                        {
                          v17 = (uint64_t *)*v14;
                          v18 = v14;
                          v14 = 0;
                          if (v17)
                            goto LABEL_32;
                          goto LABEL_58;
                        }
                      }
                    }
                  }
                  else
                  {
                    v33 = *((unsigned __int8 *)v14 + 39);
                    if ((v33 & 0x80u) != 0)
                      v33 = v14[3];
                    v18 = v12;
                    if (v33 == *((unsigned __int8 *)v12 + 39))
                    {
                      do
                      {
                        v18 = v14;
                        v14 = (uint64_t *)*v14;
                        if (!v14)
                          break;
                        v34 = *((unsigned __int8 *)v14 + 39);
                        if ((v34 & 0x80u) != 0)
                          v34 = v14[3];
                      }
                      while (v16 == v34);
                    }
                  }
                  goto LABEL_58;
                }
                v24 = *((char *)v14 + 39) < 0;
                v25 = *((unsigned __int8 *)v14 + 39);
                if ((v25 & 0x80u) != 0)
                  v25 = v14[3];
                if (v16 == v25)
                {
                  v26 = (const void *)v12[2];
                  v18 = v12;
                  while (1)
                  {
                    v27 = v14;
                    v30 = (const void *)v14[2];
                    v28 = v14 + 2;
                    v29 = v30;
                    if (v24)
                      v31 = v29;
                    else
                      v31 = v28;
                    if (memcmp(v26, v31, v15))
                    {
                      v14 = v27;
                      goto LABEL_58;
                    }
                    v14 = (uint64_t *)*v27;
                    if (!*v27)
                      break;
                    v24 = *((char *)v14 + 39) < 0;
                    v32 = *((unsigned __int8 *)v14 + 39);
                    if ((v32 & 0x80u) != 0)
                      v32 = v14[3];
                    v18 = v27;
                    if (v16 != v32)
                      goto LABEL_58;
                  }
                  v18 = v27;
                  goto LABEL_58;
                }
              }
              v18 = v12;
LABEL_58:
              *v7 = v14;
              *v18 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
              v8 = v36;
              v10 = v35;
              goto LABEL_18;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (uint64_t **)v12;
            v8 = v13;
          }
LABEL_18:
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

double newpPlatformHeuristics::GetDramBW(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 72), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  void **v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = (void **)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        *(_DWORD *)(v6 + 40) = *((_DWORD *)v2 + 10);
        v8 = *(void ***)v6;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (v8)
          v9 = v2 == 0;
        else
          v9 = 1;
        v6 = (uint64_t)v8;
      }
      while (!v9);
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v10 = (char *)operator new(0x30uLL);
    v11 = (uint64_t)v10;
    v12 = v10 + 16;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v10 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      v13 = *((_OWORD *)v2 + 1);
      *((_QWORD *)v10 + 4) = v2[4];
      *v12 = v13;
    }
    *(_DWORD *)(v11 + 40) = *((_DWORD *)v2 + 10);
    *(_QWORD *)(v11 + 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v12);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, v11);
  }
}

void sub_190E18624(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = (int8x8_t)v10;
    else
      prime = (int8x8_t)v9;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_99;
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_60;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = operator new(8 * *(_QWORD *)&prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v41 = v4;
      v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (*(_QWORD *)&prime != v14);
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        v16 = v15[1];
        v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.u32[0];
        v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&prime)
            v16 %= *(_QWORD *)&prime;
        }
        else
        {
          v16 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
        v22 = *v15;
        if (*v15)
        {
          v42 = v17.u32[0];
          do
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            if (v23 == v16)
            {
              v15 = (uint64_t *)v22;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              v24 = *(_QWORD **)v22;
              if (*(_QWORD *)v22)
              {
                v25 = (_QWORD *)v22;
                while (1)
                {
                  v26 = v24;
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break;
                  v24 = (_QWORD *)*v26;
                  v25 = v26;
                  if (!*v26)
                    goto LABEL_47;
                }
                v24 = v26;
                v26 = v25;
LABEL_47:
                v18 = v42;
              }
              else
              {
                v26 = (_QWORD *)v22;
              }
              *v15 = (uint64_t)v24;
              *v26 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v15;
              v15 = (uint64_t *)v22;
              v16 = v23;
            }
            v22 = *v15;
          }
          while (*v15);
        }
        v5 = (unint64_t)prime;
        v2 = v40;
        v4 = v41;
      }
      else
      {
        v5 = (unint64_t)prime;
        v4 = v41;
      }
    }
    else
    {
      v27 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v27)
        operator delete(v27);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    v30 = v43;
    if (v5 <= v43)
      v30 = v43 % v5;
  }
  else
  {
    v30 = (v5 - 1) & v43;
  }
  v31 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v30);
  if (v31)
  {
    v32 = *(unsigned __int8 **)v31;
    if (*(_QWORD *)v31)
    {
      v33 = 0;
      do
      {
        v34 = v32;
        v35 = *((_QWORD *)v32 + 1);
        if (v29 > 1)
        {
          v36 = v35;
          if (v35 >= v5)
            v36 = v35 % v5;
        }
        else
        {
          v36 = v35 & (v5 - 1);
        }
        if (v36 != v30)
          break;
        v37 = v35 == v43 && std::equal_to<std::string>::operator()[abi:ne180100](v34 + 16, v4);
        if ((v33 & !v37 & 1) != 0)
          break;
        v33 |= v37;
        v32 = *(unsigned __int8 **)v34;
        v31 = v34;
      }
      while (*(_QWORD *)v34);
    }
  }
  v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5)
      v38 %= v5;
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  *v2 = *(_QWORD *)v31;
  *(_QWORD *)v31 = v2;
  if (*v2)
  {
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 24);
}

_QWORD *std::vector<std::unordered_set<std::string>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::unordered_set<std::string>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 32) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_190E18B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unordered_map<std::string,int>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::unordered_set<std::string>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 32) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_190E18C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::kernels_validation_status_t>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  std::__tree<std::string>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(*(_QWORD **)(a1 + 128));
  std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(*(_QWORD **)(a1 + 104));
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a1 + 24);
  std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<Espresso::platform,int>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<int>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<int>::destroy(*a1);
    std::__tree<int>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::operator()(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  int64x2_t *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string __p;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int64x2_t *v17;
  std::__shared_weak_count *v18;
  void **v19;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(int64x2_t **)v2;
  v3 = *(std::__shared_weak_count **)(v2 + 8);
  v17 = v4;
  v18 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, a2, *(_QWORD *)(a1 + 16), 0);
  Espresso::emit_kernel_validation_warning(&v17, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v19 = (void **)&v15;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)&v14;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_190E18E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  v26 = v23 + 24;
  v27 = a23;
  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)(v24 - 40) = &a19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a15 < 0)
    operator delete(__p);
  v30 = *(std::__shared_weak_count **)(v24 - 48);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::activation_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _BOOL8 result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string v33;
  int64x2_t *v34;
  std::__shared_weak_count *v35;
  int64x2_t *v36;
  std::__shared_weak_count *v37;
  std::string v38;
  std::string __p;
  _BYTE v40[24];
  _BYTE v41[32];
  std::__shared_weak_count *v42;
  int64x2_t *v43;
  std::__shared_weak_count *v44;
  void **v45;

  v5 = *(_DWORD *)(a1 + 304);
  result = 1;
  switch(v5)
  {
    case 0:
    case 4:
    case 5:
    case 6:
    case 8:
    case 19:
    case 21:
    case 22:
    case 23:
    case 25:
      return result;
    case 1:
    case 3:
      v7 = *(std::__shared_weak_count **)(a2 + 8);
      v43 = *(int64x2_t **)a2;
      v44 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(&v38, "ACTIVATION_SIGMOID and ACTIVATION_TANH can be well approximated. Do precision check to make sure");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v38, a3, 1);
      Espresso::emit_kernel_validation_warning(&v43, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v10 = v42;
      if (v42)
      {
        v11 = (unint64_t *)&v42->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v13 = v44;
      if (!v44)
        return 1;
      v14 = (unint64_t *)&v44->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_33;
    case 2:
      v16 = *(std::__shared_weak_count **)(a2 + 8);
      v36 = *(int64x2_t **)a2;
      v37 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      std::string::basic_string[abi:ne180100]<0>(&v38, "Approximation precision of ACTIVATION_LEAKY_RELU is data dependent. Do precision check to make sure");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v38, a3, 1);
      Espresso::emit_kernel_validation_warning(&v36, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v19 = v42;
      if (v42)
      {
        v20 = (unint64_t *)&v42->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v13 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v15 = __ldaxr(v22);
        while (__stlxr(v15 - 1, v22));
LABEL_33:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      return 1;
    case 7:
      if (fabsf(*(float *)(a1 + 308) + -0.2) >= 0.000001)
        goto LABEL_59;
      result = fabsf(*(float *)(a1 + 312) + -0.5) < 0.000001;
      break;
    case 14:
      if (*(float *)(a1 + 312) < *(float *)(a1 + 308))
        goto LABEL_39;
      return result;
    default:
LABEL_39:
      v23 = *(std::__shared_weak_count **)(a2 + 8);
      v34 = *(int64x2_t **)a2;
      v35 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v5 = *(_DWORD *)(a1 + 304);
      }
      std::to_string(&v33, v5);
      v26 = std::string::insert(&v33, 0, "unsupported activation function ");
      v38 = *v26;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v38, a3, 0);
      Espresso::emit_kernel_validation_warning(&v34, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v27 = v42;
      if (v42)
      {
        v28 = (unint64_t *)&v42->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v45 = (void **)v41;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v45);
      v45 = (void **)v40;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v45);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v30 = v35;
      if (v35)
      {
        v31 = (unint64_t *)&v35->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
LABEL_59:
      result = 0;
      break;
  }
  return result;
}

void sub_190E192C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a26);
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void Espresso::emit_kernel_validation_warning(int64x2_t **a1, Espresso::base_kernel::validate_for_engine_warning_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  Espresso::base_kernel::validate_for_engine_warning_t *v12;
  int v13;
  uint64_t *v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  Espresso::base_kernel::validate_for_engine_warning_t *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 12);
  v4 = **((_QWORD **)a2 + 9);
  v5 = *a1;
  if (*a1)
  {
    v6 = v5->u64[1];
    if (v6 >= v5[1].i64[0])
    {
      a1 = (int64x2_t **)std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>(*a1, a2);
    }
    else
    {
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v5->i64[1], a2);
      a1 = (int64x2_t **)(v6 + 112);
      v5->i64[1] = v6 + 112;
    }
    v5->i64[1] = (uint64_t)a1;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = (uint64_t *)(v4 + 224 * v3);
    if (*((char *)v8 + 23) < 0)
      v8 = (uint64_t *)*v8;
    v9 = v4 + 224 * v3;
    v10 = (_QWORD *)(v9 + 48);
    if (*(char *)(v9 + 71) < 0)
      v10 = (_QWORD *)*v10;
    v11 = *((_QWORD *)a2 + 12);
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *(Espresso::base_kernel::validate_for_engine_warning_t **)a2;
    v13 = 136315906;
    v14 = v8;
    v15 = 2080;
    v16 = v10;
    v17 = 2048;
    v18 = v11;
    v19 = 2080;
    v20 = v12;
    _os_log_debug_impl(&dword_190DAF000, v7, OS_LOG_TYPE_DEBUG, "Kernel validation warning %s (%s) @ %zu: %s", (uint8_t *)&v13, 0x2Au);
  }

}

void sub_190E194D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(std::string *this, const Espresso::base_kernel::validate_for_engine_warning_t *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(this[1].__r_.__value_.__r.__words, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 6);
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(this[2].__r_.__value_.__r.__words, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 6);
  v5 = *((_QWORD *)a2 + 10);
  this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
  this[3].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)((char *)a2 + 88);
  this[4].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 104);
  return this;
}

void sub_190E195AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::base_kernel::validate_for_engine_warning_t>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>::destroy[abi:ne180100](i - 112);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::load_and_shape_network(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X2>, Espresso::net *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, std::string *a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  Espresso *v75;
  const char *v76;
  NSObject *v77;
  int v78;
  uint64_t *v79;
  int v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v86;
  _QWORD v87[2];
  _OWORD v88[2];
  void *v89;
  char v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void *__p[2];
  char v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  _QWORD *v100;
  std::__shared_weak_count *v101;
  _BYTE buf[18];
  __int16 v103;
  int v104;
  char *v105[7];

  v105[4] = *(char **)MEMORY[0x1E0C80C00];
  v16 = *(void **)a1;
  v15 = *(unint64_t **)(a1 + 8);
  v91 = *(_QWORD *)a1;
  v92 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v17 = v15 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "json");
  Espresso::gen_precompilation_info_fstream((Espresso::ANECompilerEngine *)&v100, (uint64_t *)a7);
  v93 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(buf, "shape");
  v19 = (*(uint64_t (**)(void *, _BYTE *))(*(_QWORD *)v16 + 24))(v16, buf);
  v20 = v19;
  if (SHIBYTE(v104) < 0)
  {
    operator delete(*(void **)buf);
    if (v20)
    {
LABEL_6:
      std::string::basic_string[abi:ne180100]<0>(__p, "shape");
      (*(void (**)(uint64_t *__return_ptr, void *, void **))(*(_QWORD *)v16 + 120))(&v98, v16, __p);
      Espresso::load_network_shape(&v98, (uint64_t)buf);
      v21 = v99;
      if (v99)
      {
        p_shared_owners = (unint64_t *)&v99->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v97 < 0)
        operator delete(__p[0]);
      v94 = v91;
      v95 = v92;
      if (v92)
      {
        v24 = (unint64_t *)&v92->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      Espresso::load_network_layers_internal(&v94, a7, a2, a3, (uint64_t)buf, v100, a5, 0, (uint64_t *)__p, a6);
      v26 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
      v93 = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v95;
      if (v95)
      {
        v34 = (unint64_t *)&v95->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v105, v105[1]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
      goto LABEL_51;
    }
  }
  else if (v19)
  {
    goto LABEL_6;
  }
  __p[0] = v16;
  __p[1] = v15;
  if (v15)
  {
    v36 = v15 + 1;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  Espresso::load_network_layers_internal((uint64_t *)__p, a7, a2, a3, (uint64_t)a4, v100, a5, 0, (uint64_t *)buf, a6);
  v38 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
  v93 = v38;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v46 = (unint64_t *)((char *)__p[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_51:
  if ((_QWORD)v93)
    std::string::operator=((std::string *)(v93 + 592), a7);
  v48 = v101;
  if (v101)
  {
    v49 = (unint64_t *)&v101->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v90 < 0)
    operator delete(v89);
  v51 = v92;
  if (v92)
  {
    v52 = (unint64_t *)&v92->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if ((_QWORD)v93)
  {
    std::string::operator=((std::string *)(v93 + 592), a7);
    v54 = v93;
    v88[1] = v93;
    if (*((_QWORD *)&v93 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    Espresso::shape_network_recursive((Espresso *)v54, a4, 0, 0);
    if (*((_QWORD *)&v54 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
      }
    }
    v88[0] = v93;
    if (*((_QWORD *)&v93 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = *(_QWORD *)a1;
    v62 = *(std::__shared_weak_count **)(a1 + 8);
    v87[0] = v61;
    v87[1] = v62;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    Espresso::load_subnetworks((uint64_t **)v88, v87, a5, a6);
    if (v62)
    {
      v65 = (unint64_t *)&v62->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v88[0] + 1);
    if (*((_QWORD *)&v88[0] + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v88[0] + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    v86 = v93;
    if (*((_QWORD *)&v93 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    Espresso::setup_layer_callbacks((uint64_t *)&v86);
    if (v70)
    {
      v73 = (unint64_t *)&v70->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    Espresso::setup_layers_post_load((uint64_t)&v93);
    Espresso::espresso_os_log_subsystem(v75, v76);
    v77 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      v78 = SHIBYTE(a7->__r_.__value_.__r.__words[2]);
      v79 = (uint64_t *)a7->__r_.__value_.__r.__words[0];
      v80 = (***(uint64_t (****)(_QWORD))(*a3 + 8))(*(_QWORD *)(*a3 + 8));
      if (v78 >= 0)
        v81 = a7;
      else
        v81 = (std::string *)v79;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v81;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v80;
      v103 = 1024;
      v104 = a5;
      _os_log_impl(&dword_190DAF000, v77, OS_LOG_TYPE_INFO, "Loaded network: '%s' pf=%d cp=%d", buf, 0x18u);
    }

    *(_OWORD *)a8 = v93;
  }
  else
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
  }
}

void sub_190E19CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  void *v39;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void Espresso::setup_layers_post_load(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v4;
  const void *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v1 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  for (i = *(uint64_t **)(*(_QWORD *)a1 + 40); v1 != i; v1 += 2)
  {
    v4 = *v1;
    v5 = *(const void **)(*v1 + 64);
    if (v5)
    {
      if (v6)
      {
        v7 = *(std::__shared_weak_count **)(v4 + 72);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        std::string::operator=((std::string *)(v6 + 424), (const std::string *)(*(_QWORD *)a1 + 592));
        if (v7)
        {
          v10 = (unint64_t *)&v7->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
    }
  }
}

void sub_190E19EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::setup_layer_callbacks(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  const char *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  int v9;
  BOOL v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string *v13;
  int v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  NSObject *v21;
  Espresso *v22;
  const char *v23;
  uint64_t *v24;
  NSObject *v25;
  char *v26;
  char **v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  NSObject *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *p_buf;
  uint64_t v36;
  _QWORD *v37;
  char **i;
  char *v39;
  uint64_t v40;
  std::string v41;
  void *__p[2];
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char v46;
  uint64_t v47;
  __int128 buf;
  __int128 *v49;
  _QWORD v50[6];

  v50[3] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "metal_flushes");
  v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v2 + 472, __p);
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(*a1 + 480) != v3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p, (uint64_t)(v3 + 7), 24);
    memset(&v41, 0, sizeof(v41));
    v39 = 0;
    v40 = 0;
    for (i = &v39;
          ;
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&i, &v41, (uint64_t)&v41))
    {
      v4 = (uint64_t)std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&v41, 0x2Cu);
      if ((*(_BYTE *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24) + 32) & 5) != 0)
        break;
      size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v41;
      else
        v7 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v41.__r_.__value_.__l.__size_;
      if (size)
      {
        v8 = v7;
        while (1)
        {
          v9 = v8->__r_.__value_.__s.__data_[0];
          v10 = v9 == 32 || v9 == 9;
          if (!v10)
            break;
          v8 = (std::string *)((char *)v8 + 1);
          if (!--size)
            goto LABEL_19;
        }
        v11 = (char *)v8 - (char *)v7;
      }
      else
      {
LABEL_19:
        v11 = -1;
      }
      std::string::erase(&v41, 0, v11);
      v12 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v41;
      else
        v13 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v41.__r_.__value_.__l.__size_;
      if (v12)
      {
        while (1)
        {
          v14 = *((unsigned __int8 *)&v13[-1].__r_.__value_.__r.__words[2] + v12 + 7);
          if (v14 != 32 && v14 != 9)
            break;
          if (!--v12)
            goto LABEL_32;
        }
        v16 = v12 - 1;
      }
      else
      {
LABEL_32:
        v16 = -1;
      }
      std::string::erase(&v41, v16 + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    v17 = *(uint64_t **)(*a1 + 32);
    v18 = *(uint64_t **)(*a1 + 40);
    v19 = v40;
    if (v17 == v18 || v40 == 0)
      goto LABEL_39;
    while (1)
    {
      v30 = v39;
      if (!v39)
        goto LABEL_79;
      v31 = (_QWORD *)(*v17 + 16);
      while (1)
      {
        v4 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v31, (_QWORD *)v30 + 4);
        if ((v4 & 1) == 0)
          break;
LABEL_65:
        v30 = *(char **)v30;
        if (!v30)
          goto LABEL_79;
      }
      v4 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v30 + 4, v31);
      if ((_DWORD)v4)
        break;
      Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        v37 = (_QWORD *)(*v17 + 16);
        if (*(char *)(*v17 + 39) < 0)
          v37 = (_QWORD *)*v37;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v37;
        _os_log_debug_impl(&dword_190DAF000, v32, OS_LOG_TYPE_DEBUG, "Will flush after layer %s", (uint8_t *)&buf, 0xCu);
      }

      v33 = *v17;
      v34 = (__int128 *)(*v17 + 160);
      *(_QWORD *)&buf = &off_1E2DAE900;
      *((_QWORD *)&buf + 1) = Espresso::submit_and_create_new_command_buffer;
      p_buf = &buf;
      v49 = &buf;
      if (v34 != &buf)
      {
        if (*(__int128 **)(v33 + 184) == v34)
        {
          std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::__clone((uint64_t)&buf, v50);
          v49 = 0;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v33 + 184) + 24))(*(_QWORD *)(v33 + 184), &buf);
          (*(void (**)(_QWORD))(**(_QWORD **)(v33 + 184) + 32))(*(_QWORD *)(v33 + 184));
          *(_QWORD *)(v33 + 184) = 0;
          v49 = &buf;
          (*(void (**)(_QWORD *, __int128 *))(v50[0] + 24))(v50, v34);
          (*(void (**)(_QWORD *))(v50[0] + 32))(v50);
          *(_QWORD *)(v33 + 184) = v34;
          p_buf = v49;
        }
        else
        {
          std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::__clone((uint64_t)&buf, v34);
          (*(void (**)(__int128 *))(*(_QWORD *)v49 + 32))(v49);
          p_buf = *(__int128 **)(v33 + 184);
          v49 = p_buf;
          *(_QWORD *)(v33 + 184) = v34;
        }
        if (p_buf != &buf)
        {
          if (p_buf)
          {
            v36 = 5;
            goto LABEL_77;
          }
          goto LABEL_78;
        }
        p_buf = &buf;
      }
      v36 = 4;
LABEL_77:
      (*(void (**)(void))(*(_QWORD *)p_buf + 8 * v36))();
LABEL_78:
      v4 = std::__tree<std::string>::__erase_unique<std::string>(&i, (_QWORD *)(*v17 + 16));
      v19 = v40;
LABEL_79:
      v17 += 2;
      if (v17 == v18 || !v19)
      {
LABEL_39:
        if (v19)
        {
          Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf) = 0;
            _os_log_debug_impl(&dword_190DAF000, v21, OS_LOG_TYPE_DEBUG, "Could not find these layers to flush:", (uint8_t *)&buf, 2u);
          }

          v24 = (uint64_t *)i;
          if (i != &v39)
          {
            do
            {
              Espresso::espresso_os_log_subsystem(v22, v23);
              v25 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
              {
                v28 = v24 + 4;
                if (*((char *)v24 + 55) < 0)
                  v28 = (_QWORD *)*v28;
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v28;
                _os_log_debug_impl(&dword_190DAF000, v25, OS_LOG_TYPE_DEBUG, "  %s", (uint8_t *)&buf, 0xCu);
              }

              v26 = (char *)v24[1];
              if (v26)
              {
                do
                {
                  v27 = (char **)v26;
                  v26 = *(char **)v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  v27 = (char **)v24[2];
                  v10 = *v27 == (char *)v24;
                  v24 = (uint64_t *)v27;
                }
                while (!v10);
              }
              v24 = (uint64_t *)v27;
            }
            while (v27 != &v39);
          }
        }
        std::__tree<std::string>::destroy((uint64_t)&i, v39);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        __p[0] = *(void **)MEMORY[0x1E0DE4F50];
        v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
        v43 = v29;
        v44 = MEMORY[0x1E0DE4FB8] + 16;
        if (v46 < 0)
          operator delete(v45);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x19401CCD0](&v47);
        return;
      }
    }
    v30 += 8;
    goto LABEL_65;
  }
}

void sub_190E1A418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_layers_internal(uint64_t *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, unsigned int a7@<W6>, char a8@<W7>, uint64_t *a9@<X8>, uint64_t *a10)
{
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t i;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _BOOL4 v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unsigned __int8 v79;
  char v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void *__p;
  std::__shared_weak_count *v84;
  char v85;
  Espresso **v86;
  uint64_t v87;
  unsigned int v88[3];
  void **v89[2];

  v18 = (void *)MEMORY[0x19401D4A4]();
  v72 = a1;
  v19 = *a1;
  Espresso::load_network_metadata(v19, a2, a3, a4, a10, a9);
  v88[0] = a7;
  std::string::basic_string[abi:ne180100]<0>(&__p, "layers");
  (*(void (**)(Espresso ***__return_ptr, uint64_t, void **))(*(_QWORD *)v19 + 128))(&v86, v19, &__p);
  if (v85 < 0)
    operator delete(__p);
  v20 = a4[1];
  __p = (void *)*a4;
  v84 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = a9[1];
  v81 = *a9;
  v82 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  Espresso::run_dispatch_v2((uint64_t)&v74, (uint64_t *)&__p, (uint64_t)&v81, &v86, a5, v88, a6);
  v26 = v82;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v84;
  if (v84)
  {
    v30 = (unint64_t *)&v84->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (!v80)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to load network, invalid combination of --e5-compute-units or dispatch fallback hints specified in conjunction with network topology.");
  if (*(_BYTE *)(*a4 + 56)
    && (uint64_t)(*(_QWORD *)(*(_QWORD *)(*a9 + 712) + 56) - *(_QWORD *)(*(_QWORD *)(*a9 + 712) + 48)) >> 2 == (v87 - (uint64_t)v86) >> 4)
  {
    v32 = v76;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a9 + 1256), *(_QWORD *)(v74 + 72), *(_QWORD *)(v74 + 80));
    v33 = *(_QWORD *)(*a9 + 1256);
    if (v33)
    {
      v34 = *(_QWORD *)(*a9 + 16);
      *(_BYTE *)(v33 + 54) = *(_BYTE *)(v34 + 54);
      *(_BYTE *)(v33 + 123) = *(_BYTE *)(v34 + 123);
    }
    v35 = *v32;
    if (v32[1] != *v32)
    {
      for (i = 0; i < 0x6DB6DB6DB6DB6DB7 * ((v32[1] - *v32) >> 5); ++i)
      {
        v37 = v35 + 224 * i;
        v38 = (_QWORD *)(v37 + 48);
        v39 = *(char *)(v37 + 71);
        if (v39 < 0)
        {
          if (v38[1] == 13)
          {
            v38 = (_QWORD *)*v38;
LABEL_31:
            v40 = (_QWORD *)*v38;
            v41 = *(_QWORD *)((char *)v38 + 5);
            if (v40 == (_QWORD *)0x6E6F635F64616F6CLL && v41 == 0x746E6174736E6F63)
            {
              v43 = v35 + 224 * i;
              v44 = *(_QWORD **)(v43 + 112);
              if (v44 != *(_QWORD **)(v43 + 120))
              {
                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((_QWORD *)v32[7], v44))
                {
                  v45 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)(v32 + 6), v89, v44);
                  if (!v45)
                    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                  v47 = *(_QWORD *)(v45 + 56);
                  v46 = *(_QWORD *)(v45 + 64);
                  if (v47 != v46)
                  {
                    v48 = v47 + 8;
                    do
                    {
                      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a9 + 712) + 48) + 4 * *(_QWORD *)(v48 - 8)))
                        v49 = 1;
                      else
                        v49 = v48 == v46;
                      v48 += 8;
                    }
                    while (!v49);
                  }
                  if (i)
                    v50 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a9 + 712) + 48) + 4 * i - 4) != 0;
                  else
                    v50 = 1;
                  v51 = i == ((v87 - (uint64_t)v86) >> 4) - 1
                     || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a9 + 712) + 48) + 4 * i + 4) != 0;
                  if (v50 && v51)
                    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a9 + 712) + 48) + 4 * i) = 1;
                }
              }
            }
          }
        }
        else if (v39 == 13)
        {
          goto LABEL_31;
        }
        v35 = *v32;
      }
    }
  }
  if (*(_BYTE *)(*a4 + 56))
  {
    v52 = *(_QWORD *)(*a9 + 712);
    v53 = *(_QWORD *)(v52 + 48);
    v54 = (*(_QWORD *)(v52 + 56) - v53) >> 2;
    if (v54 == (v87 - (uint64_t)v86) >> 4
      && (unint64_t)(v87 - (_QWORD)v86) >= 0x11
      && 0x6DB6DB6DB6DB6DB7 * ((v76[1] - *v76) >> 5) == v54)
    {
      if (v54 <= 2)
        v54 = 2;
      v55 = v54 - 1;
      v56 = *v76 + 272;
      v57 = (_DWORD *)(v53 + 4);
      do
      {
        v58 = *(char *)(v56 + 23);
        if (v58 < 0)
        {
          if (*(_QWORD *)(v56 + 8) == 6)
          {
            v59 = *(_QWORD *)v56;
LABEL_67:
            v60 = *(_DWORD *)v59;
            v61 = *(unsigned __int16 *)(v59 + 4);
            if (v60 == 1700750947 && v61 == 25710)
              *v57 = *(v57 - 1);
          }
        }
        else
        {
          v59 = v56;
          if (v58 == 6)
            goto LABEL_67;
        }
        v56 += 224;
        ++v57;
        --v55;
      }
      while (v55);
    }
  }
  v89[0] = (void **)&v86;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v89);
  Espresso::load_network_layers_post_dispatch(a9, v72, &v74, (uint64_t *)&v76, v79, a5, a7, a8, (std::string::size_type *)a10);
  v63 = v78;
  if (v78)
  {
    v64 = (unint64_t *)&v78->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v77;
  if (v77)
  {
    v67 = (unint64_t *)&v77->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v75;
  if (v75)
  {
    v70 = (unint64_t *)&v75->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  objc_autoreleasePoolPop(v18);
}

void sub_190E1AA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&a16);
  *(_QWORD *)(v31 - 104) = v31 - 136;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 104));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

void Espresso::load_subnetworks(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  size_t v19;
  std::string *v20;
  const void *v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  __int128 *v50;
  __int128 *i;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  Espresso *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84[2];
  uint64_t v85;
  std::__shared_weak_count *v86;
  void *__p;
  char *v88;
  uint64_t v89;
  char *v90[3];
  void *v91;
  std::__shared_weak_count *v92;
  unsigned __int8 v93;
  std::string v94;
  void *v95[2];
  std::string::size_type v96;
  __int128 *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t v100;

  v6 = a2;
  v8 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "script");
  v9 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v8 + 24))(v8, &__p);
  v10 = v9;
  if (SHIBYTE(v89) < 0)
  {
    operator delete(__p);
    if (!v10)
      goto LABEL_63;
  }
  else if (!v9)
  {
    goto LABEL_63;
  }
  v11 = *v6;
  std::string::basic_string[abi:ne180100]<0>(&__p, "script");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v11 + 120))(&v99, v11, &__p);
  if (SHIBYTE(v89) < 0)
    operator delete(__p);
  v12 = v99;
  std::string::basic_string[abi:ne180100]<0>(&__p, "external_networks");
  v13 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v12 + 24))(v12, &__p);
  v14 = v13;
  if ((SHIBYTE(v89) & 0x80000000) == 0)
  {
    if (!v13)
      goto LABEL_58;
LABEL_11:
    v15 = v99;
    std::string::basic_string[abi:ne180100]<0>(&__p, "external_networks");
    (*(void (**)(__int128 **__return_ptr, uint64_t, void **))(*(_QWORD *)v15 + 120))(&v97, v15, &__p);
    if (SHIBYTE(v89) < 0)
      operator delete(__p);
    v83 = v6;
    __p = 0;
    v88 = 0;
    v89 = 0;
    (*(void (**)(__int128 *, void **))(*(_QWORD *)v97 + 32))(v97, &__p);
    v16 = (char *)__p;
    v17 = v88;
    if (__p != v88)
    {
      do
      {
        v18 = *a1;
        if (*((char *)*a1 + 1047) >= 0)
          v19 = *((unsigned __int8 *)*a1 + 1047);
        else
          v19 = (*a1)[129];
        std::string::basic_string[abi:ne180100]((uint64_t)&v94, v19 + 1);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v94;
        else
          v20 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if (v19)
        {
          if (*((char *)v18 + 1047) >= 0)
            v21 = v18 + 128;
          else
            v21 = (const void *)v18[128];
          memmove(v20, v21, v19);
        }
        *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 47;
        (*(void (**)(void **__return_ptr, __int128 *, char *))(*(_QWORD *)v97 + 112))(&v91, v97, v16);
        if ((v93 & 0x80u) == 0)
          v22 = (const std::string::value_type *)&v91;
        else
          v22 = (const std::string::value_type *)v91;
        if ((v93 & 0x80u) == 0)
          v23 = v93;
        else
          v23 = (std::string::size_type)v92;
        v24 = std::string::append(&v94, v22, v23);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v96 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)v95 = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if ((char)v93 < 0)
          operator delete(v91);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        Espresso::load_network(&v94, v95, *a1 + 2, a3, 0);
        v26 = (uint64_t)(*a1 + 123);
        v91 = v16;
        v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (uint64_t)v16, (uint64_t)&std::piecewise_construct, (__int128 **)&v91);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v27 + 5), (__int128 *)&v94);
        size = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
        if (v94.__r_.__value_.__l.__size_)
        {
          v29 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v94, **a1, (std::__shared_weak_count *)(*a1)[1]);
        v31 = (uint64_t)(*a1 + 123);
        v91 = v16;
        v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (uint64_t)v16, (uint64_t)&std::piecewise_construct, (__int128 **)&v91)[5];
        v34 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
        v33 = v94.__r_.__value_.__r.__words[0];
        if (v94.__r_.__value_.__l.__size_)
        {
          v35 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 16);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        *(_QWORD *)(v32 + 1088) = v33;
        v37 = *(std::__shared_weak_count **)(v32 + 1096);
        *(_QWORD *)(v32 + 1096) = v34;
        if (v37)
        {
          std::__shared_weak_count::__release_weak(v37);
          v34 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
        }
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if (SHIBYTE(v96) < 0)
          operator delete(v95[0]);
        v16 += 24;
      }
      while (v16 != v17);
    }
    v95[0] = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v95);
    v40 = v98;
    v6 = v83;
    if (v98)
    {
      v41 = (unint64_t *)&v98->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    goto LABEL_58;
  }
  operator delete(__p);
  if (v14)
    goto LABEL_11;
LABEL_58:
  v43 = (std::__shared_weak_count *)v100;
  if (v100)
  {
    v44 = (unint64_t *)(v100 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
LABEL_63:
  v46 = *v6;
  std::string::basic_string[abi:ne180100]<0>(&__p, "subnetworks");
  v47 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v46 + 24))(v46, &__p);
  v48 = v47;
  if (SHIBYTE(v89) < 0)
  {
    operator delete(__p);
    if (!v48)
      return;
  }
  else if (!v47)
  {
    return;
  }
  v49 = *v6;
  std::string::basic_string[abi:ne180100]<0>(&__p, "subnetworks");
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v49 + 120))(&v91, v49, &__p);
  if (SHIBYTE(v89) < 0)
    operator delete(__p);
  v95[0] = 0;
  v95[1] = 0;
  v96 = 0;
  (*(void (**)(void *, void **))(*(_QWORD *)v91 + 32))(v91, v95);
  v50 = (__int128 *)v95[0];
  for (i = (__int128 *)v95[1]; v50 != i; v50 = (__int128 *)((char *)v50 + 24))
  {
    (*(void (**)(uint64_t *__return_ptr, void *, __int128 *))(*(_QWORD *)v91 + 120))(&v99, v91, v50);
    v52 = v99;
    std::string::basic_string[abi:ne180100]<0>(&v94, "shape");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v52 + 120))(&v85, v52, &v94);
    Espresso::load_network_shape(&v85, (uint64_t)&__p);
    v53 = v86;
    if (v86)
    {
      v54 = (unint64_t *)&v86->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    v56 = (std::__shared_weak_count *)v100;
    v84[0] = v99;
    v84[1] = v100;
    if (v100)
    {
      v57 = (unint64_t *)(v100 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    Espresso::load_network_layers_internal(v84, (const std::string *)(*a1 + 74), (const std::string *)(*a1 + 128), *a1 + 2, (uint64_t)&__p, 0, a3, 0, (uint64_t *)&v94, a4);
    if (v56)
    {
      v59 = (unint64_t *)&v56->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v61 = (uint64_t)(*a1 + 123);
    v97 = v50;
    v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v61, (uint64_t)v50, (uint64_t)&std::piecewise_construct, &v97);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v62 + 5, (uint64_t)v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
    v63 = (Espresso *)v94.__r_.__value_.__r.__words[0];
    v64 = *a1;
    v65 = a1[1];
    if (v65)
    {
      v66 = (unint64_t *)(v65 + 2);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    *((_QWORD *)v63 + 136) = v64;
    v68 = (std::__shared_weak_count *)*((_QWORD *)v63 + 137);
    *((_QWORD *)v63 + 137) = v65;
    if (v68)
    {
      std::__shared_weak_count::__release_weak(v68);
      v63 = (Espresso *)v94.__r_.__value_.__r.__words[0];
    }
    v69 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
    if (v94.__r_.__value_.__l.__size_)
    {
      v70 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    Espresso::shape_network_recursive(v63, (Espresso::net *)&__p, 0, 0);
    if (v69)
    {
      v72 = (unint64_t *)&v69->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v74 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
    if (v94.__r_.__value_.__l.__size_)
    {
      v75 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v90, v90[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, v88);
    v77 = (std::__shared_weak_count *)v100;
    if (v100)
    {
      v78 = (unint64_t *)(v100 + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }
  __p = v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v80 = v92;
  if (v92)
  {
    v81 = (unint64_t *)&v92->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
}

void sub_190E1B234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void **p_p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 112);
  _Unwind_Resume(a1);
}

id get_precompiled_path_if_precompiled(uint64_t a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  Espresso::ANECompilerEngine *v5;
  std::string *p_p;
  NSString *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSString *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  std::string __p;

  v3 = a2;
  Espresso::ANECompilerEngine::current_ane_arch((Espresso::ANECompilerEngine *)v3);
  v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1)
    dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_13770);
  Espresso::ANECompilerEngine::precompilation_settings_t::get_ane_arch((Espresso::ANECompilerEngine::precompilation_settings_t *)Espresso::ANECompilerEngine::precompilation_settings_t::global, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
    v7 = (NSString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  if (Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::onceToken != -1)
    dispatch_once(&Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::onceToken, &__block_literal_global_66_7833);
  Espresso::ANECompilerEngine::current_ane_arch(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringByAppendingString:", Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::aneSubtypeStrVariant);
  v7 = (NSString *)objc_claimAutoreleasedReturnValue();

LABEL_12:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!-[NSString hasSuffix:](v3, "hasSuffix:", CFSTR(".espresso.net")))
  {
    -[NSString stringByAppendingPathComponent:](v3, "stringByAppendingPathComponent:", CFSTR("model.espresso.net"));
    v9 = objc_claimAutoreleasedReturnValue();

    v3 = (NSString *)v9;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".S%d.espresso.net"), a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSString stringByReplacingOccurrencesOfString:withString:](v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".espresso.net"), v10);
  v11 = (NSString *)objc_claimAutoreleasedReturnValue();

  get_precompiled_binary_path(v11, v7);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (!(_DWORD)a1 && !v12)
  {
    get_precompiled_binary_path(v3, v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (!v13)
  {
    get_precompiled_binary_path(v11, v4);
    v14 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v14;
    if (!(_DWORD)a1 && !v14)
    {
      get_precompiled_binary_path(v3, v4);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }

  return v13;
}

void sub_190E1B59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id get_precompiled_binary_path(NSString *a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  id v16;

  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".%@.espresso.hwx"), v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSString stringByReplacingOccurrencesOfString:withString:](v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".espresso.net"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "hasSuffix:", CFSTR(".espresso.hwx"))
    && (objc_msgSend(v5, "fileExistsAtPath:", v7) & 1) != 0)
  {
    goto LABEL_9;
  }
  -[NSString stringByReplacingOccurrencesOfString:withString:](v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".espresso.net"), CFSTR(".espresso.hwx"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v8, "hasSuffix:", CFSTR(".espresso.hwx"))
    || (objc_msgSend(v5, "fileExistsAtPath:", v8) & 1) == 0)
  {
    if (!-[NSString hasSuffix:](v3, "hasSuffix:", CFSTR(".espresso.net")))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("model.%@.espresso.hwx"), v4);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSString stringByAppendingPathComponent:](v3, "stringByAppendingPathComponent:", v10);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v7, "hasSuffix:", CFSTR(".espresso.hwx"))
        && (objc_msgSend(v5, "fileExistsAtPath:", v7) & 1) != 0)
      {
LABEL_9:
        v9 = 1;
        goto LABEL_14;
      }
      -[NSString stringByAppendingPathComponent:](v3, "stringByAppendingPathComponent:", CFSTR("model.espresso.hwx"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v8, "hasSuffix:", CFSTR(".espresso.hwx")))
      {
        v9 = objc_msgSend(v5, "fileExistsAtPath:", v8);
        goto LABEL_13;
      }
    }
    v9 = 0;
    goto LABEL_13;
  }
  v9 = 1;
LABEL_13:
  v7 = v8;
LABEL_14:
  if (get_precompiled_binary_path(NSString *,NSString *)::onceToken != -1)
    dispatch_once(&get_precompiled_binary_path(NSString *,NSString *)::onceToken, &__block_literal_global_15994);
  if (get_precompiled_binary_path(NSString *,NSString *)::is_internal_build)
    v11 = v9;
  else
    v11 = 0;
  if (v11 == 1)
    v9 = getenv("ESPRESSO_PRIVATE_IGNORE_ANE_PRECOMPILED") == 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("espresso.ane.ignore_ane_precompiled"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "BOOLValue");

  if ((v9 & ~v15 & 1) != 0)
    v16 = v7;
  else
    v16 = 0;

  return v16;
}

void sub_190E1B8D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void Espresso::gen_precompilation_info_fstream(Espresso::ANECompilerEngine *a1, uint64_t *a2)
{
  uint64_t *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  __int128 v18;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  Espresso::ANECompilerEngine::current_ane_arch(a1);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".espresso.net"), &stru_1E2DD80E0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@.espresso.precompilation_info"), v6, v17);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v8, "fileExistsAtPath:", v7) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.espresso.precompilation_info"), v6);
    v9 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v9;
  }
  if (objc_msgSend(v8, "fileExistsAtPath:", v7))
  {
    objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
    v10 = operator new(0x258uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_1E2DC2748;
    *(_QWORD *)&v18 = std::ifstream::basic_ifstream(v10 + 3);
    *((_QWORD *)&v18 + 1) = v10;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, &v18);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (!*(_QWORD *)(*(_QWORD *)a1 + 136))
    {
      v18 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, &v18);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }

}

void sub_190E1BB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  void *v18;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void Espresso::interpreter_t::__launch_function(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t i;
  _QWORD *j;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  BOOL v54;
  void *v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  _BOOL4 v69;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  float *v79;
  std::string::size_type v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v94;
  NSObject *v95;
  _QWORD *v96;
  _QWORD *v97;
  std::string::size_type v98;
  std::string::size_type v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t *v106;
  uint64_t *v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::string::size_type v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::string::size_type v126;
  __int128 v127;
  __int128 v128;
  void *v129;
  _QWORD *v130;
  __int128 v131;
  uint64_t k;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t *v138;
  _BOOL4 v139;
  Espresso *v140;
  const char *v141;
  NSObject *v142;
  _QWORD *v143;
  unint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *size;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  __int128 *m;
  __int128 *v163;
  char *v164;
  std::string *v165;
  __int128 v166;
  const std::string::value_type *v167;
  std::string::size_type v168;
  Espresso *v169;
  __int128 *n;
  __int128 *v171;
  char *v172;
  std::string *v173;
  __int128 v174;
  const std::string::value_type *v175;
  std::string::size_type v176;
  _QWORD *v177;
  unint64_t v178;
  NSObject *v179;
  uint64_t v180;
  unsigned int v181;
  Espresso *v182;
  const char *v183;
  unint64_t v184;
  std::string::size_type v185;
  _QWORD *v186;
  unint64_t *v187;
  unint64_t v188;
  std::string::size_type v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  uint64_t v194;
  NSObject *v195;
  unint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  BOOL v205;
  char v206;
  int v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  unsigned __int8 *v210;
  unsigned __int8 *v211;
  char **v212;
  char *v213;
  char *v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  __int128 v228;
  unint64_t *v229;
  unint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  __int128 v234;
  int64x2_t v235;
  char *v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  NSObject *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  _OWORD *v245;
  unint64_t v246;
  _OWORD *v247;
  _OWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t (***v255)(_QWORD);
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  Espresso *v262;
  const char *v263;
  NSObject *v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  float v271;
  uint64_t v272;
  uint64_t v273;
  float v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  double v278;
  uint64_t v279;
  double v280;
  uint64_t v281;
  std::string::size_type v282;
  uint64_t v283;
  double v284;
  float *v285;
  float v286;
  float v287;
  uint64_t ii;
  int v289;
  _OWORD *v290;
  char *v291;
  char *v292;
  _OWORD *v293;
  unint64_t v294;
  std::string *v295;
  uint64_t v296;
  const char *v297;
  int v298;
  std::string::size_type v299;
  uint64_t (***v300)(_QWORD);
  int v301;
  std::string *v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  NSObject *v307;
  uint64_t *v308;
  uint64_t v309;
  _QWORD *jj;
  unsigned __int8 *v311;
  unsigned __int8 *v312;
  char *v313;
  char *v314;
  std::string::size_type v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::string::size_type v319;
  uint64_t v320;
  unint64_t v321;
  int64_t v322;
  unint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  __int128 v327;
  unint64_t *v328;
  unint64_t v329;
  _QWORD *v330;
  std::string::size_type v331;
  std::string::size_type v332;
  __int128 v333;
  int64x2_t v334;
  std::string::size_type v335;
  uint64_t *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t *v340;
  uint64_t *v341;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  uint64_t v348;
  _QWORD *v349;
  uint64_t *v350;
  uint64_t *v351;
  _QWORD *v352;
  uint64_t *v353;
  _QWORD *v354;
  _BYTE v355[24];
  std::string v356;
  std::string v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char v362;
  void *v363;
  _BYTE *v364;
  uint64_t v365;
  __int128 v366;
  int64_t v367;
  std::string v368;
  char v369[40];
  void *v370;
  void *v371;
  __int128 *v372;
  std::string v373;
  uint64_t v374;
  __int16 v375;
  _BYTE v376[14];
  uint64_t v377;
  _BYTE buf[32];
  _BYTE v379[32];
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  v6 = a1[12];
  v5 = (std::__shared_weak_count *)a1[13];
  *(_QWORD *)buf = v6;
  if (!v5 || (*(_QWORD *)&buf[8] = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = operator new(0xA0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E2DBBD68;
  *(_QWORD *)&v11 = Espresso::interpreter_state_t::interpreter_state_t((uint64_t)(v10 + 3), buf);
  *((_QWORD *)&v11 + 1) = v10;
  v12 = *(std::__shared_weak_count **)(*a2 + 72);
  *(_OWORD *)(*a2 + 64) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *a2;
  v363 = 0;
  v364 = 0;
  v365 = 0;
  *(_QWORD *)buf = a3;
  v19 = (unint64_t)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 5), a3, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
  v21 = *(_QWORD *)(v19 + 40);
  v22 = *(_QWORD **)(v18 + 64);
  v24 = (_QWORD *)v22[12];
  v23 = v22[13];
  v354 = a2;
  v345 = v18;
  if ((unint64_t)v24 >= v23)
  {
    v19 = v22[11];
    v26 = (uint64_t)((uint64_t)v24 - v19) >> 4;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v28 = v23 - v19;
    if (v28 >> 3 > v27)
      v27 = v28 >> 3;
    v68 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0;
    v29 = 0xFFFFFFFFFFFFFFFLL;
    if (!v68)
      v29 = v27;
    if (v29)
    {
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v29);
      v19 = v22[11];
      v24 = (_QWORD *)v22[12];
    }
    else
    {
      v20 = 0;
    }
    v30 = (_QWORD *)(v29 + 16 * v26);
    v31 = v29 + 16 * v20;
    *v30 = v21;
    v30[1] = a4;
    v25 = v30 + 2;
    if (v24 != (_QWORD *)v19)
    {
      do
      {
        *((_OWORD *)v30 - 1) = *((_OWORD *)v24 - 1);
        v30 -= 2;
        v24 -= 2;
      }
      while (v24 != (_QWORD *)v19);
      v19 = v22[11];
    }
    v22[11] = v30;
    v22[12] = v25;
    v22[13] = v31;
    if (v19)
      operator delete((void *)v19);
  }
  else
  {
    *v24 = v21;
    v24[1] = a4;
    v25 = v24 + 2;
  }
  v22[12] = v25;
  v32 = (uint64_t *)a1[2];
  v351 = (uint64_t *)a1[3];
  if (v32 != v351)
  {
    while (1)
    {
      v33 = *v32;
      v34 = *(_QWORD **)(*v32 + 1104);
      if (!v34)
      {
        v35 = (char *)operator new(0x58uLL);
        *((_QWORD *)v35 + 1) = 0;
        *((_QWORD *)v35 + 2) = 0;
        *(_QWORD *)v35 = &off_1E2DBD000;
        *(_OWORD *)(v35 + 40) = 0u;
        *((_QWORD *)v35 + 7) = 0;
        *((_QWORD *)v35 + 8) = 0;
        *(_OWORD *)(v35 + 24) = 0u;
        *((_DWORD *)v35 + 14) = 1065353216;
        *((_QWORD *)v35 + 9) = 0;
        *((_QWORD *)v35 + 10) = 0;
        *(_QWORD *)&v36 = v35 + 24;
        *((_QWORD *)&v36 + 1) = v35;
        v37 = *(std::__shared_weak_count **)(v33 + 1112);
        *(_OWORD *)(v33 + 1104) = v36;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v34 = *(_QWORD **)(v33 + 1104);
      }
      if (v34[3])
      {
        v40 = (_QWORD *)v34[2];
        if (v40)
        {
          do
          {
            v41 = (_QWORD *)*v40;
            operator delete(v40);
            v40 = v41;
          }
          while (v41);
        }
        v34[2] = 0;
        v42 = v34[1];
        if (v42)
        {
          for (i = 0; i != v42; ++i)
            *(_QWORD *)(*v34 + 8 * i) = 0;
        }
        v34[3] = 0;
      }
      std::vector<BOOL>::resize((uint64_t)(v34 + 5), (uint64_t)(*(_QWORD *)(v33 + 40) - *(_QWORD *)(v33 + 32)) >> 4);
      v20 = v34[6];
      if (v20)
      {
        *(_QWORD *)buf = v34[5];
        *(_DWORD *)&buf[8] = 0;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)buf, v20);
      }
      for (j = *(_QWORD **)(v33 + 152); j; j = (_QWORD *)*j)
        *(_QWORD *)(j[5] + 152) = 0;
      v45 = *(unsigned __int8 **)(v33 + 232);
      v46 = (unsigned __int8 *)(v33 + 240);
      if (v45 != (unsigned __int8 *)(v33 + 240))
        break;
LABEL_78:
      if (++v32 == v351)
        goto LABEL_79;
    }
    v47 = v33 + 136;
    while (1)
    {
      Espresso::map_const_get<std::unordered_map<std::string,std::string>>((std::string *)buf, a1 + 23, (uint64_t)(v45 + 32), (uint64_t)(v45 + 32));
      if (buf[23] >= 0)
        v48 = buf[23];
      else
        v48 = *(_QWORD *)&buf[8];
      v49 = v45[55];
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = *((_QWORD *)v45 + 5);
      if (v48 != v49)
      {
        if ((buf[23] & 0x80) != 0)
          operator delete(*(void **)buf);
        goto LABEL_72;
      }
      v20 = v50 >= 0 ? (unint64_t)(v45 + 32) : *((_QWORD *)v45 + 4);
      if ((buf[23] & 0x80) == 0)
        break;
      v55 = *(void **)buf;
      v56 = memcmp(*(const void **)buf, (const void *)v20, *(size_t *)&buf[8]);
      operator delete(v55);
      if (!v56)
        goto LABEL_71;
LABEL_72:
      v57 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
      if (v57)
      {
        do
        {
          v58 = v57;
          v57 = *(unsigned __int8 **)v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (unsigned __int8 *)*((_QWORD *)v45 + 2);
          v54 = *(_QWORD *)v58 == (_QWORD)v45;
          v45 = v58;
        }
        while (!v54);
      }
      v45 = v58;
      if (v58 == v46)
        goto LABEL_78;
    }
    if (buf[23])
    {
      v51 = 0;
      do
      {
        v52 = buf[v51];
        v53 = *(unsigned __int8 *)(v20 + v51);
        v54 = v52 != v53 || buf[23] - 1 == v51++;
      }
      while (!v54);
      if (v52 != v53)
        goto LABEL_72;
    }
LABEL_71:
    *(_QWORD *)buf = v45 + 32;
    v19 = (unint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47, v45 + 32, (__int128 **)buf);
    *(_QWORD *)(*(_QWORD *)(v19 + 40) + 152) = 1;
    goto LABEL_72;
  }
LABEL_79:
  v59 = a2;
  v61 = *a2;
  v60 = a2[1];
  v359 = *(_QWORD *)(*(_QWORD *)(v345 + 64) + 24);
  v360 = v61;
  v361 = v60;
  if (v60)
  {
    v62 = (unint64_t *)(v60 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = 0;
  v343 = 0;
  v362 = 0;
  v65 = 2;
  while (1)
  {
    v66 = *(_QWORD *)(v345 + 64);
    v67 = *(_QWORD *)(v66 + 96);
    v68 = a5 != -1 && v64 >= a5;
    v69 = !v68;
    if (*(_QWORD *)(v66 + 88) == v67 || !v69)
      break;
    v72 = *(_QWORD *)(v67 - 16);
    v71 = (uint64_t *)(v67 - 16);
    v73 = v71[1];
    v346 = (unint64_t *)(v71 + 1);
    *(_QWORD *)(v66 + 112) = v72;
    *(_QWORD *)(v66 + 120) = v73 + 1;
    *(_WORD *)(v66 + 128) = 0;
    v74 = *v71;
    v75 = a1[2];
    v76 = a1[3] - v75;
    if (*v71 >= (unint64_t)(v76 >> 3))
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("[interpreter_t] top.inetwork=%zu >= networks.size()=%zu", v74, v76 >> 3);
    v341 = v71;
    v348 = v65;
    v344 = v64;
    v77 = *(_QWORD *)(v66 + 24);
    if (v77)
      v78 = v343 == v74;
    else
      v78 = 0;
    if (!v78)
    {
      v77 = *(_QWORD *)(v75 + 8 * v74);
      *(_QWORD *)(v66 + 24) = v77;
      v343 = v74;
    }
    v352 = (_QWORD *)v77;
    v79 = (float *)(v77 + 888);
    v80 = *v346;
    v19 = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)(v77 + 888), *v346);
    if (v19)
    {
      v356.__r_.__value_.__r.__words[0] = v80;
      v349 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v79, v80, &v356);
      v81 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v352);
      if (super_verbose)
        printf("prepare_basic_block %zu %zu\n", v349[3], v349[4]);
      Espresso::net::get_analysis_if_existing<Espresso::analysis_multi_head_program_gen>(buf, (uint64_t)v352);
      v83 = *(_QWORD *)buf;
      v82 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_106;
      v84 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
        if (!v83)
        {
LABEL_126:
          v96 = (_QWORD *)v352[138];
          v340 = v96 + 5;
          if (!v96[6])
            std::vector<BOOL>::resize((uint64_t)v340, (uint64_t)(v352[5] - v352[4]) >> 4);
          v97 = v349;
          v98 = v349[3];
          while (2)
          {
            v99 = v97[4];
            if (v98 >= v99)
              goto LABEL_208;
            v100 = *(_QWORD *)(v352[4] + 16 * v98);
            v101 = (_QWORD *)(v100 + 40);
            v102 = *(char *)(v100 + 63);
            if (v102 < 0)
            {
              if (*(_QWORD *)(v100 + 48) != 11)
                goto LABEL_208;
              v101 = (_QWORD *)*v101;
            }
            else if (v102 != 11)
            {
              goto LABEL_208;
            }
            v103 = (_QWORD *)*v101;
            v104 = *(_QWORD *)((char *)v101 + 3);
            if (v103 != (_QWORD *)0x747269765F696870 || v104 != 0x6C6175747269765FLL)
            {
LABEL_208:
              while (2)
              {
                if (v98 >= v99)
                  goto LABEL_209;
                v116 = v352[4] + 16 * v98;
                v117 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(v96, v98);
                v118 = v96[5];
                v119 = v98 >> 6;
                v120 = 1 << v98;
                if (v117 || (*(_QWORD *)(v118 + 8 * v119) & v120) == 0)
                {
LABEL_163:
                  *(_QWORD *)(v118 + 8 * v119) |= v120;
                  std::vector<Espresso::layer_shape>::vector(&v368, (uint64_t)(*(_QWORD *)(*(_QWORD *)v116 + 88) - *(_QWORD *)(*(_QWORD *)v116 + 80)) >> 4);
                  v121 = *(_QWORD *)v116;
                  v122 = *(_QWORD *)(*(_QWORD *)v116 + 80);
                  if (*(_QWORD *)(*(_QWORD *)v116 + 88) != v122)
                  {
                    v123 = 0;
                    v124 = 0;
                    v125 = 0;
                    do
                    {
                      Espresso::abstract_blob_container::shape(buf, *(_QWORD *)(v122 + v123));
                      v126 = v368.__r_.__value_.__r.__words[0] + v124;
                      v127 = *(_OWORD *)buf;
                      v128 = *(_OWORD *)&buf[16];
                      *(_QWORD *)(v126 + 32) = *(_QWORD *)v379;
                      *(_OWORD *)v126 = v127;
                      *(_OWORD *)(v126 + 16) = v128;
                      v130 = (_QWORD *)(v126 + 40);
                      v129 = *(void **)(v126 + 40);
                      if (v129)
                      {
                        *(_QWORD *)(v126 + 48) = v129;
                        operator delete(v129);
                        *v130 = 0;
                        *(_QWORD *)(v126 + 48) = 0;
                        *(_QWORD *)(v126 + 56) = 0;
                      }
                      *(_OWORD *)v130 = *(_OWORD *)&v379[8];
                      *(_QWORD *)(v126 + 56) = *(_QWORD *)&v379[24];
                      ++v125;
                      v121 = *(_QWORD *)v116;
                      v122 = *(_QWORD *)(*(_QWORD *)v116 + 80);
                      v124 += 64;
                      v123 += 16;
                      v59 = v354;
                    }
                    while (v125 < (*(_QWORD *)(*(_QWORD *)v116 + 88) - v122) >> 4);
                  }
                  (*(void (**)(__int128 *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(v121 + 64) + 64))(&v366, *(_QWORD *)(v121 + 64), &v368);
                  v131 = v366;
                  for (k = v366; k != *((_QWORD *)&v131 + 1); k += 64)
                    *(_QWORD *)(k + 24) = 0;
                  v133 = *(_QWORD *)(*(_QWORD *)v116 + 104);
                  v134 = *(_QWORD *)(*(_QWORD *)v116 + 112);
                  v135 = (uint64_t)(*((_QWORD *)&v131 + 1) - v131) >> 6;
                  if (v135 != (v134 - v133) >> 4)
                  {
                    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::resize((int64x2_t *)(*(_QWORD *)v116 + 104), v135);
                    v133 = *(_QWORD *)(*(_QWORD *)v116 + 104);
                    v134 = *(_QWORD *)(*(_QWORD *)v116 + 112);
                  }
                  if (v134 != v133)
                  {
                    v136 = 0;
                    v137 = 0;
                    do
                    {
                      v138 = (uint64_t *)(v133 + 16 * v136);
                      Espresso::abstract_blob_container::shape(buf, *v138);
                      v139 = Espresso::layer_shape::operator==((uint64_t)buf, v366 + (v136 << 6));
                      if (*(_QWORD *)&v379[8])
                      {
                        *(_QWORD *)&v379[16] = *(_QWORD *)&v379[8];
                        operator delete(*(void **)&v379[8]);
                      }
                      v140 = (Espresso *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v116
                                                                                                  + 64)
                                                                                    + 264))(*(_QWORD *)(*(_QWORD *)v116 + 64), (uint64_t)(*(_QWORD *)(*(_QWORD *)v116 + 88)- *(_QWORD *)(*(_QWORD *)v116 + 80)) >> 4);
                      if ((!v139 | v140) == 1)
                      {
                        if (super_verbose)
                        {
                          Espresso::espresso_os_log_subsystem(v140, v141);
                          v142 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
                          {
                            Espresso::abstract_blob_container::shape(buf, *v138);
                            v157 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
                            v158 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(v366 + (v136 << 6)));
                            LODWORD(v373.__r_.__value_.__l.__data_) = 134218752;
                            *(std::string::size_type *)((char *)v373.__r_.__value_.__r.__words + 4) = v98;
                            WORD2(v373.__r_.__value_.__r.__words[1]) = 2048;
                            *(std::string::size_type *)((char *)&v373.__r_.__value_.__r.__words[1] + 6) = v136;
                            HIWORD(v373.__r_.__value_.__r.__words[2]) = 2048;
                            v374 = v157;
                            v375 = 2048;
                            *(_QWORD *)v376 = v158;
                            _os_log_debug_impl(&dword_190DAF000, v142, OS_LOG_TYPE_DEBUG, "resizing: ilayer=%zu itop=%zu old_dim=%lld new_dim=%lld", (uint8_t *)&v373, 0x2Au);
                            if (*(_QWORD *)&v379[8])
                            {
                              *(_QWORD *)&v379[16] = *(_QWORD *)&v379[8];
                              operator delete(*(void **)&v379[8]);
                            }
                          }

                        }
                        if (!v139)
                        {
                          v143 = operator new(0x98uLL);
                          v143[1] = 0;
                          v144 = v143 + 1;
                          v143[2] = 0;
                          *v143 = &off_1E2DBE998;
                          *((_OWORD *)v143 + 4) = 0u;
                          *((_OWORD *)v143 + 5) = 0u;
                          *((_OWORD *)v143 + 2) = 0u;
                          *((_OWORD *)v143 + 3) = 0u;
                          *((_OWORD *)v143 + 6) = 0u;
                          *((_OWORD *)v143 + 7) = 0u;
                          *((_OWORD *)v143 + 8) = 0u;
                          v143[17] = 0;
                          v143[18] = 0;
                          *((_DWORD *)v143 + 12) = 1065353216;
                          v143[7] = 0x1FFFFFFFFLL;
                          v143[12] = 0;
                          v143[13] = 0;
                          v143[8] = 0;
                          v143[9] = 0;
                          *((_BYTE *)v143 + 88) = 0;
                          v143[10] = 0;
                          v143[3] = &off_1E2DA0BF0;
                          v143[15] = 0;
                          v143[16] = 0;
                          *((_BYTE *)v143 + 144) = 0;
                          *(_QWORD *)buf = v143 + 3;
                          *(_QWORD *)&buf[8] = v143;
                          *((_BYTE *)v143 + 144) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v116 + 64) + 8)
                                                            + 126);
                          v145 = *v138;
                          v146 = v366 + (v136 << 6);
                          v357.__r_.__value_.__r.__words[0] = (std::string::size_type)(v143 + 3);
                          v357.__r_.__value_.__l.__size_ = (std::string::size_type)v143;
                          do
                            v147 = __ldxr(v144);
                          while (__stxr(v147 + 1, v144));
                          (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v145 + 16))(v145, v146, &v357);
                          size = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
                          if (v357.__r_.__value_.__l.__size_)
                          {
                            v149 = (unint64_t *)(v357.__r_.__value_.__l.__size_ + 8);
                            do
                              v150 = __ldaxr(v149);
                            while (__stlxr(v150 - 1, v149));
                            if (!v150)
                            {
                              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                              std::__shared_weak_count::__release_weak(size);
                            }
                          }
                          v151 = *(std::__shared_weak_count **)&buf[8];
                          if (*(_QWORD *)&buf[8])
                          {
                            v152 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                            do
                              v153 = __ldaxr(v152);
                            while (__stlxr(v153 - 1, v152));
                            if (!v153)
                            {
                              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                              std::__shared_weak_count::__release_weak(v151);
                            }
                          }
                        }
                        v154 = v81[22] + 24 * *(int *)(*(_QWORD *)(v81[10] + 24 * v98) + 4 * v136);
                        v155 = *(_QWORD **)v154;
                        v156 = *(_QWORD **)(v154 + 8);
                        while (v155 != v156)
                        {
                          *(_QWORD *)buf = 0;
                          *(_QWORD *)buf = *v155;
                          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v96, (unint64_t *)buf, buf);
                          ++v155;
                        }
                        v137 = 1;
                      }
                      ++v136;
                      v133 = *(_QWORD *)(*(_QWORD *)v116 + 104);
                    }
                    while (v136 < (*(_QWORD *)(*(_QWORD *)v116 + 112) - v133) >> 4);
                    if ((v137 & 1) != 0)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v116 + 64) + 80))(*(_QWORD *)(*(_QWORD *)v116 + 64), *(_QWORD *)v116 + 104, *(_QWORD *)v116 + 80);
                  }
                  *(_QWORD *)buf = &v366;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                  *(_QWORD *)buf = &v368;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                }
                else
                {
                  v19 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v116 + 64) + 264))(*(_QWORD *)(*(_QWORD *)v116 + 64), (uint64_t)(*(_QWORD *)(*(_QWORD *)v116 + 88) - *(_QWORD *)(*(_QWORD *)v116 + 80)) >> 4);
                  if ((_DWORD)v19)
                  {
                    v118 = *v340;
                    goto LABEL_163;
                  }
                }
                ++v98;
                v99 = v349[4];
                continue;
              }
            }
            if (*(_QWORD *)(v100 + 104) == *(_QWORD *)(v100 + 112))
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Phi kernel expected to have output");
            v106 = resolve_virtual_phi((uint64_t **)(v100 + 80));
            v107 = *(uint64_t **)(*(_QWORD *)(v352[4] + 16 * v98) + 104);
            Espresso::abstract_blob_container::shape(buf, *v106);
            Espresso::abstract_blob_container::shape((char *)&v373, *v107);
            v108 = Espresso::layer_shape::operator==((uint64_t)buf, (uint64_t)&v373);
            if (*(_QWORD *)&v376[6])
            {
              v377 = *(_QWORD *)&v376[6];
              operator delete(*(void **)&v376[6]);
            }
            if (*(_QWORD *)&v379[8])
            {
              *(_QWORD *)&v379[16] = *(_QWORD *)&v379[8];
              operator delete(*(void **)&v379[8]);
            }
            if (super_verbose)
            {
              v109 = *v106;
              if (*v106)
              {
                Espresso::abstract_blob_container::shape(v369, *v106);
                v110 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v369);
              }
              else
              {
                v110 = 0;
              }
              v111 = !v108;
              if (*v107)
              {
                Espresso::abstract_blob_container::shape(buf, *v107);
                v112 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
                printf("%zu: resolved_dim=%lld current_dim=%lld changed=%d\n", v98, v110, v112, v111);
                if (*(_QWORD *)&v379[8])
                {
                  *(_QWORD *)&v379[16] = *(_QWORD *)&v379[8];
                  operator delete(*(void **)&v379[8]);
                }
                if (!v109)
                  goto LABEL_157;
LABEL_155:
                if (v370)
                {
                  v371 = v370;
                  operator delete(v370);
                }
              }
              else
              {
                printf("%zu: resolved_dim=%lld current_dim=%lld changed=%d\n", v98, v110, 0, v111);
                if (v109)
                  goto LABEL_155;
              }
            }
LABEL_157:
            if (Espresso::blobcpy(v59, v107, v106))
            {
              v113 = v81[22] + 24 * **(int **)(v81[10] + 24 * v98);
              v114 = *(_QWORD **)v113;
              v115 = *(_QWORD **)(v113 + 8);
              while (v114 != v115)
              {
                *(_QWORD *)buf = 0;
                *(_QWORD *)buf = *v114;
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v96, (unint64_t *)buf, buf);
                ++v114;
              }
            }
            v19 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(v96, v98++);
            v97 = v349;
            continue;
          }
        }
      }
      else
      {
LABEL_106:
        if (!v83)
          goto LABEL_126;
      }
      v86 = v349[3];
      if (v86 < v349[4])
      {
        v87 = 16 * v86;
        do
        {
          v88 = *(_QWORD *)(v352[4] + v87);
          v89 = (_QWORD *)(v88 + 40);
          v90 = *(char *)(v88 + 63);
          if (v90 < 0)
          {
            if (*(_QWORD *)(v88 + 48) != 11)
              break;
            v89 = (_QWORD *)*v89;
          }
          else if (v90 != 11)
          {
            break;
          }
          v91 = (_QWORD *)*v89;
          v92 = *(_QWORD *)((char *)v89 + 3);
          if (v91 != (_QWORD *)0x747269765F696870 || v92 != 0x6C6175747269765FLL)
            break;
          v94 = resolve_virtual_phi((uint64_t **)(v88 + 80));
          v19 = Espresso::blobcpy(v59, *(uint64_t **)(*(_QWORD *)(v352[4] + v87) + 104), v94);
          if ((_DWORD)v19)
          {
            Espresso::espresso_os_log_subsystem((Espresso *)v19, (const char *)v20);
            v95 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_190DAF000, v95, OS_LOG_TYPE_ERROR, "prepare_basic_block error", buf, 2u);
            }

          }
          ++v86;
          v87 += 16;
        }
        while (v86 < v349[4]);
      }
LABEL_209:
      v80 = *v346;
    }
    v159 = (uint64_t)(v352[5] - v352[4]) >> 4;
    v160 = v80;
    if (super_verbose)
    {
      memset(&v373, 0, sizeof(v373));
      memset(&v368, 0, sizeof(v368));
      *(_QWORD *)buf = v346;
      v161 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v352 + 12), v346, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v163 = (__int128 *)v161[3];
      for (m = (__int128 *)v161[4]; v163 != m; v163 = (__int128 *)((char *)v163 + 24))
      {
        v372 = v163;
        v164 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v352 + 17), (unsigned __int8 *)v163, &v372);
        Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v164 + 5));
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v355, (const Espresso::layer_shape *)buf, 0);
        Espresso::layer_nd_shape::repr(&v356, (uint64_t)v355);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v163, (const void **)&v356.__r_.__value_.__l.__data_, (uint64_t)&v357);
        v165 = std::string::append(&v357, ", ");
        v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
        v367 = v165->__r_.__value_.__r.__words[2];
        v366 = v166;
        v165->__r_.__value_.__l.__size_ = 0;
        v165->__r_.__value_.__r.__words[2] = 0;
        v165->__r_.__value_.__r.__words[0] = 0;
        if (v367 >= 0)
          v167 = (const std::string::value_type *)&v366;
        else
          v167 = (const std::string::value_type *)v366;
        if (v367 >= 0)
          v168 = HIBYTE(v367);
        else
          v168 = *((_QWORD *)&v366 + 1);
        std::string::append(&v373, v167, v168);
        if (SHIBYTE(v367) < 0)
          operator delete((void *)v366);
        if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v357.__r_.__value_.__l.__data_);
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v356.__r_.__value_.__l.__data_);
        if (*(_QWORD *)&v379[8])
        {
          *(_QWORD *)&v379[16] = *(_QWORD *)&v379[8];
          operator delete(*(void **)&v379[8]);
        }
      }
      *(_QWORD *)buf = v346;
      v169 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v352 + 7), v346, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v171 = (__int128 *)*((_QWORD *)v169 + 3);
      for (n = (__int128 *)*((_QWORD *)v169 + 4); v171 != n; v171 = (__int128 *)((char *)v171 + 24))
      {
        v372 = v171;
        v172 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v352 + 17), (unsigned __int8 *)v171, &v372);
        Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v172 + 5));
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v355, (const Espresso::layer_shape *)buf, 0);
        Espresso::layer_nd_shape::repr(&v356, (uint64_t)v355);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v171, (const void **)&v356.__r_.__value_.__l.__data_, (uint64_t)&v357);
        v173 = std::string::append(&v357, ",");
        v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
        v367 = v173->__r_.__value_.__r.__words[2];
        v366 = v174;
        v173->__r_.__value_.__l.__size_ = 0;
        v173->__r_.__value_.__r.__words[2] = 0;
        v173->__r_.__value_.__r.__words[0] = 0;
        if (v367 >= 0)
          v175 = (const std::string::value_type *)&v366;
        else
          v175 = (const std::string::value_type *)v366;
        if (v367 >= 0)
          v176 = HIBYTE(v367);
        else
          v176 = *((_QWORD *)&v366 + 1);
        std::string::append(&v368, v175, v176);
        if (SHIBYTE(v367) < 0)
          operator delete((void *)v366);
        if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v357.__r_.__value_.__l.__data_);
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v356.__r_.__value_.__l.__data_);
        v169 = *(Espresso **)&v379[8];
        if (*(_QWORD *)&v379[8])
        {
          *(_QWORD *)&v379[16] = *(_QWORD *)&v379[8];
          operator delete(*(void **)&v379[8]);
        }
      }
      v177 = v363;
      v178 = (uint64_t)(v352[5] - v352[4]) >> 4;
      if (v178 != (v364 - (_BYTE *)v363) >> 3)
      {
        std::vector<unsigned long>::resize(&v363, v178);
        v177 = v363;
      }
      ++v177[*v346];
      Espresso::espresso_os_log_subsystem(v169, (const char *)v178);
      v179 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
      {
        v294 = *v346;
        if ((v373.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v295 = &v373;
        else
          v295 = (std::string *)v373.__r_.__value_.__r.__words[0];
        if (v80 >= v159)
        {
          v301 = 0;
          v302 = &v368;
          if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v302 = (std::string *)v368.__r_.__value_.__r.__words[0];
          v297 = "";
          v303 = *v346;
        }
        else
        {
          v296 = *(_QWORD *)(v352[4] + 16 * v294);
          v297 = (const char *)(v296 + 40);
          if (*(char *)(v296 + 63) < 0)
            v297 = *(const char **)v297;
          v298 = SHIBYTE(v368.__r_.__value_.__r.__words[2]);
          v299 = v368.__r_.__value_.__r.__words[0];
          v300 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v296 + 64) + 8) + 8);
          v301 = (**v300)(v300);
          v302 = &v368;
          if (v298 < 0)
            v302 = (std::string *)v299;
          v303 = *v346;
        }
        v304 = *((_QWORD *)v363 + v303);
        *(_DWORD *)buf = 134219266;
        *(_QWORD *)&buf[4] = v294;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v295;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v297;
        *(_WORD *)v379 = 2080;
        *(_QWORD *)&v379[2] = v302;
        *(_WORD *)&v379[10] = 1024;
        *(_DWORD *)&v379[12] = v301;
        *(_WORD *)&v379[16] = 2048;
        *(_QWORD *)&v379[18] = v304;
        _os_log_debug_impl(&dword_190DAF000, v179, OS_LOG_TYPE_DEBUG, "%zu: %%%s = %s(%s) @%d count=%zu\n", buf, 0x3Au);
      }

      if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v368.__r_.__value_.__l.__data_);
      if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v373.__r_.__value_.__l.__data_);
      v160 = *v346;
    }
    v180 = *(_QWORD *)(v345 + 64);
    *(_QWORD *)(v180 + 32) = v160;
    if (v80 >= v159)
    {
      if (*(_QWORD *)(v180 + 96) - *(_QWORD *)(v180 + 88) > 0x1FuLL)
      {
        v208 = (std::__shared_weak_count *)operator new(0x30uLL);
        v208->__shared_owners_ = 0;
        v208->__shared_weak_owners_ = 0;
        v208->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8488;
        v208[1].__vftable = 0;
        v209 = (uint64_t)&v208[1];
        v208[1].__shared_owners_ = 0;
        v208[1].__shared_weak_owners_ = 0;
        v373.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208[1];
        v373.__r_.__value_.__l.__size_ = (std::string::size_type)v208;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v208[1].__vftable, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v352[84] - v352[83]) >> 3));
        v210 = (unsigned __int8 *)v352[83];
        v211 = (unsigned __int8 *)v352[84];
        if (v210 != v211)
        {
          do
          {
            v212 = (char **)v373.__r_.__value_.__r.__words[0];
            *(_QWORD *)buf = v210;
            v213 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v352 + 17), v210, (__int128 **)buf);
            v214 = v213;
            v215 = (unint64_t)v212[2];
            v216 = v212[1];
            if ((unint64_t)v216 >= v215)
            {
              v221 = (v216 - *v212) >> 4;
              v222 = v221 + 1;
              if ((unint64_t)(v221 + 1) >> 60)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v223 = v215 - (_QWORD)*v212;
              if (v223 >> 3 > v222)
                v222 = v223 >> 3;
              if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF0)
                v224 = 0xFFFFFFFFFFFFFFFLL;
              else
                v224 = v222;
              *(_QWORD *)v379 = v212 + 2;
              v225 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v224);
              v227 = &v225[16 * v221];
              v228 = *(_OWORD *)(v214 + 40);
              *(_OWORD *)v227 = v228;
              if (*((_QWORD *)&v228 + 1))
              {
                v229 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
                do
                  v230 = __ldxr(v229);
                while (__stxr(v230 + 1, v229));
              }
              v232 = *v212;
              v231 = v212[1];
              if (v231 == *v212)
              {
                v235 = vdupq_n_s64((unint64_t)v231);
                v233 = &v225[16 * v221];
              }
              else
              {
                v233 = &v225[16 * v221];
                do
                {
                  v234 = *((_OWORD *)v231 - 1);
                  v231 -= 16;
                  *((_OWORD *)v233 - 1) = v234;
                  v233 -= 16;
                  *(_QWORD *)v231 = 0;
                  *((_QWORD *)v231 + 1) = 0;
                }
                while (v231 != v232);
                v235 = *(int64x2_t *)v212;
              }
              v220 = v227 + 16;
              *v212 = v233;
              v212[1] = v227 + 16;
              *(int64x2_t *)&buf[8] = v235;
              v236 = v212[2];
              v212[2] = &v225[16 * v226];
              *(_QWORD *)&buf[24] = v236;
              *(_QWORD *)buf = v235.i64[0];
              std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *(_QWORD *)v216 = *((_QWORD *)v213 + 5);
              v217 = *((_QWORD *)v213 + 6);
              *((_QWORD *)v216 + 1) = v217;
              if (v217)
              {
                v218 = (unint64_t *)(v217 + 8);
                do
                  v219 = __ldxr(v218);
                while (__stxr(v219 + 1, v218));
              }
              v220 = v216 + 16;
            }
            v212[1] = v220;
            v210 += 24;
          }
          while (v210 != v211);
          v208 = (std::__shared_weak_count *)v373.__r_.__value_.__l.__size_;
          v209 = v373.__r_.__value_.__r.__words[0];
        }
        v19 = (unint64_t)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(v345 + 64) + 8), v209, (uint64_t)v208);
        v237 = *(_QWORD *)(v345 + 64);
        *(_QWORD *)(v237 + 112) = 0;
        *(_QWORD *)(v237 + 120) = 0;
        *(_WORD *)(v237 + 128) = 0;
        *(_BYTE *)(*(_QWORD *)(v345 + 64) + 129) = 1;
        if (v208)
        {
          v238 = (unint64_t *)&v208->__shared_owners_;
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 - 1, v238));
          if (!v239)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
      }
      else
      {
        *(_QWORD *)(v180 + 112) = 0;
        *(_QWORD *)(v180 + 120) = 0;
        *(_WORD *)(v180 + 128) = 0;
        *(_BYTE *)(*(_QWORD *)(v345 + 64) + 129) = 1;
      }
      goto LABEL_321;
    }
    v181 = (***(uint64_t (****)(_QWORD))(v352[2] + 8))(*(_QWORD *)(v352[2] + 8));
    v182 = (Espresso *)std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v352 + 66, v181);
    v184 = v348;
    if (!v182)
    {
      *(_OWORD *)&v373.__r_.__value_.__l.__data_ = 0uLL;
LABEL_335:
      v191 = *(_QWORD *)(v345 + 64);
      v189 = *v346;
LABEL_336:
      v254 = v352;
      if (*(_BYTE *)(*(_QWORD *)(v191 + 24) + 1352))
      {
        v255 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v352[4] + 16 * v189) + 64)
                                                              + 8)
                                                  + 8);
        v256 = (**v255)(v255);
        JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)&v358, v256);
        v189 = *v346;
        v254 = v352;
      }
      v257 = a1[17];
      if (v257)
      {
        *(_QWORD *)buf = v254;
        v368.__r_.__value_.__r.__words[0] = v189;
        v19 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v257 + 48))(v257, buf, &v368);
      }
      else
      {
        v258 = *(_QWORD *)(v254[4] + 16 * v189);
        v19 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v258 + 8))(v258, v59);
      }
      v259 = *(_QWORD *)(v352[4] + 16 * *v346);
      v260 = *(_QWORD **)(v259 + 104);
      v261 = *(_QWORD **)(v259 + 112);
      while (v260 != v261)
      {
        *(_QWORD *)(*v260 + 152) = v184;
        if (super_verbose)
        {
          *(_OWORD *)&v368.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(_QWORD, _QWORD *, std::string *))(*(_QWORD *)*v260 + 40))(*v260, v59, &v368);
          v262 = (Espresso *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v59 + 40))(*v59);
          Espresso::espresso_os_log_subsystem(v262, v263);
          v264 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v264, OS_LOG_TYPE_DEBUG))
          {
            v268 = 0;
            v269 = *(int *)(v368.__r_.__value_.__r.__words[0] + 8);
            v270 = v269;
            do
            {
              v270 *= *(int *)(v368.__r_.__value_.__r.__words[0] + 12 + v268);
              v268 += 4;
            }
            while (v268 != 12);
            if (v270)
              v271 = **(float **)(v368.__r_.__value_.__r.__words[0] + 24);
            else
              v271 = NAN;
            v272 = 0;
            v273 = *(int *)(v368.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v273 *= *(int *)(v368.__r_.__value_.__r.__words[0] + 12 + v272);
              v272 += 4;
            }
            while (v272 != 12);
            if (v273)
            {
              v275 = 0;
              v276 = *(int *)(v368.__r_.__value_.__r.__words[0] + 8);
              do
              {
                v276 *= *(int *)(v368.__r_.__value_.__r.__words[0] + 12 + v275);
                v275 += 4;
              }
              while (v275 != 12);
              v274 = *(float *)(*(_QWORD *)(v368.__r_.__value_.__r.__words[0] + 24) + 4 * v276 - 4);
            }
            else
            {
              v274 = NAN;
            }
            v277 = 0;
            v278 = v271;
            v279 = *(int *)(v368.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v279 *= *(int *)(v368.__r_.__value_.__r.__words[0] + 12 + v277);
              v277 += 4;
            }
            while (v277 != 12);
            v280 = 0.0;
            if (v279)
            {
              v281 = 0;
              v282 = v368.__r_.__value_.__r.__words[0] + 12;
              v283 = *(int *)(v368.__r_.__value_.__r.__words[0] + 8);
              do
              {
                v283 *= *(int *)(v282 + v281);
                v281 += 4;
              }
              while (v281 != 12);
              v284 = 0.0;
              if (v283)
              {
                v285 = *(float **)(v368.__r_.__value_.__r.__words[0] + 24);
                v286 = 0.0;
                do
                {
                  v287 = *v285++;
                  v286 = v286 + v287;
                  --v283;
                }
                while (v283);
                v284 = v286;
              }
              for (ii = 0; ii != 12; ii += 4)
                v269 *= *(int *)(v282 + ii);
              v280 = v284 / (double)v269;
            }
            v289 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v260 + 24))(*v260);
            *(_DWORD *)buf = 134218752;
            *(double *)&buf[4] = v278;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v274;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&buf[24] = v280;
            *(_WORD *)v379 = 1024;
            *(_DWORD *)&v379[2] = v289;
            _os_log_debug_impl(&dword_190DAF000, v264, OS_LOG_TYPE_DEBUG, "\t\tblob[0]=%.3f blob[-1]=%.3f avg=%e platform=%d\n", buf, 0x26u);
          }

          v265 = (std::__shared_weak_count *)v368.__r_.__value_.__l.__size_;
          if (v368.__r_.__value_.__l.__size_)
          {
            v266 = (unint64_t *)(v368.__r_.__value_.__l.__size_ + 8);
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 - 1, v266));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
              std::__shared_weak_count::__release_weak(v265);
            }
          }
          v184 = v348;
        }
        v260 += 2;
      }
      goto LABEL_275;
    }
    v186 = (_QWORD *)*((_QWORD *)v182 + 3);
    v185 = *((_QWORD *)v182 + 4);
    v373.__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
    v373.__r_.__value_.__l.__size_ = v185;
    if (v185)
    {
      v187 = (unint64_t *)(v185 + 8);
      do
        v188 = __ldxr(v187);
      while (__stxr(v188 + 1, v187));
    }
    if (!v186)
      goto LABEL_335;
    v189 = *v346;
    v190 = v186[10];
    v191 = *(_QWORD *)(v345 + 64);
    if (*v346 >= (v186[11] - v190) >> 2)
      goto LABEL_336;
    v192 = *(unsigned int *)(v190 + 4 * v189);
    if ((v192 & 0x80000000) != 0)
      goto LABEL_336;
    if (*(_BYTE *)(*(_QWORD *)(v191 + 24) + 1352))
      v193 = v362 == 0;
    else
      v193 = 1;
    if (!v193)
    {
      v183 = (const char *)v358;
      if (v358 != 1)
      {
        v182 = (Espresso *)kdebug_trace();
        v362 = 0;
      }
    }
    v194 = v186[4];
    if (super_verbose)
    {
      Espresso::espresso_os_log_subsystem(v182, v183);
      v195 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v195, OS_LOG_TYPE_DEBUG))
      {
        v305 = *v346;
        v306 = *(_QWORD *)(v194 + 120 * (int)v192 + 8);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v305;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v192;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v306;
        _os_log_debug_impl(&dword_190DAF000, v195, OS_LOG_TYPE_DEBUG, "%zu: __forward_segment isegment=%d end=%zu\n", buf, 0x1Cu);
      }

    }
    (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(*v186 + 80))(v186, v59, v192, v194 + 120 * (int)v192);
    v196 = (unint64_t *)(v194 + 120 * (int)v192);
    v197 = *(_QWORD *)(v345 + 64);
    *(_QWORD *)(v197 + 120) = v196[1];
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v197 + 48, v192, v192);
    v198 = *v196;
    v199 = v196[1];
    v68 = *v196 >= v199;
    v184 = v348;
    if (!v68)
    {
      v200 = v352[4];
      do
      {
        v201 = *(_QWORD *)(v200 + 16 * v198);
        v202 = *(uint64_t **)(v201 + 104);
        v203 = *(uint64_t **)(v201 + 112);
        while (v202 != v203)
        {
          v204 = *v202;
          v202 += 2;
          *(_QWORD *)(v204 + 152) = v348;
        }
        ++v198;
      }
      while (v198 != v199);
    }
LABEL_275:
    if (super_verbose)
      v205 = v184 >= 0xF4241;
    else
      v205 = 0;
    v206 = !v205;
    if (v205)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v19, (const char *)v20);
      v240 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v240, OS_LOG_TYPE_DEBUG, "aborting execution in debug mode", buf, 2u);
      }

      v207 = 9;
    }
    else
    {
      v207 = 0;
    }
    v241 = (std::__shared_weak_count *)v373.__r_.__value_.__l.__size_;
    if (!v373.__r_.__value_.__l.__size_)
      goto LABEL_320;
    v242 = (unint64_t *)(v373.__r_.__value_.__l.__size_ + 8);
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
      if ((v206 & 1) == 0)
        goto LABEL_378;
LABEL_321:
      v244 = *(_QWORD *)(v345 + 64);
      if (*(_BYTE *)(v244 + 128))
      {
        v245 = (_OWORD *)(v244 + 112);
        v247 = *(_OWORD **)(v244 + 96);
        v246 = *(_QWORD *)(v244 + 104);
        if ((unint64_t)v247 >= v246)
        {
          v250 = *(_QWORD *)(v244 + 88);
          v251 = ((uint64_t)v247 - v250) >> 4;
          v252 = v251 + 1;
          if ((unint64_t)(v251 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v253 = v246 - v250;
          if (v253 >> 3 > v252)
            v252 = v253 >> 3;
          if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v252;
          if (v19)
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v19);
          else
            v20 = 0;
          v290 = (_OWORD *)(v19 + 16 * v251);
          *v290 = *v245;
          v292 = *(char **)(v244 + 88);
          v291 = *(char **)(v244 + 96);
          v293 = v290;
          if (v291 != v292)
          {
            do
            {
              *--v293 = *((_OWORD *)v291 - 1);
              v291 -= 16;
            }
            while (v291 != v292);
            v291 = *(char **)(v244 + 88);
          }
          v248 = v290 + 1;
          *(_QWORD *)(v244 + 88) = v293;
          *(_QWORD *)(v244 + 96) = v290 + 1;
          *(_QWORD *)(v244 + 104) = v19 + 16 * v20;
          if (v291)
            operator delete(v291);
        }
        else
        {
          *v247 = *v245;
          v248 = v247 + 1;
        }
        *(_QWORD *)(v244 + 96) = v248;
      }
      else
      {
        v249 = (_QWORD *)(v244 + 112);
        if (*(_BYTE *)(v244 + 129))
        {
          *v249 = 0;
          *(_QWORD *)(v244 + 120) = 0;
          *(_WORD *)(v244 + 128) = 0;
          *(_QWORD *)(*(_QWORD *)(v345 + 64) + 96) -= 16;
        }
        else
        {
          *(_OWORD *)v341 = *(_OWORD *)v249;
        }
      }
      v65 = v348 + 1;
      v64 = v344 + 1;
    }
    else
    {
LABEL_320:
      if ((v206 & 1) != 0)
        goto LABEL_321;
LABEL_378:
      v64 = v344;
      v65 = v348;
      if (v207)
        break;
    }
  }
  if (super_verbose)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v19, (const char *)v20);
    v307 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v307, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_190DAF000, v307, OS_LOG_TYPE_DEBUG, "restore phi blobs", buf, 2u);
    }

  }
  v308 = (uint64_t *)a1[2];
  v350 = (uint64_t *)a1[3];
  if (v308 != v350)
  {
    do
    {
      v353 = v308;
      v309 = *v308;
      Espresso::net::get_analysis_if_existing<Espresso::analysis_make_ssa>(&v368, *v308);
      if (v368.__r_.__value_.__r.__words[0])
      {
        for (jj = *(_QWORD **)(v368.__r_.__value_.__r.__words[0] + 104); jj; jj = (_QWORD *)*jj)
        {
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v309 + 264), jj + 2)|| !*(_BYTE *)(a1[10] + 44))
          {
            memset(&v373, 0, sizeof(v373));
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v373, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(jj[6] - jj[5]) >> 3));
            v312 = (unsigned __int8 *)jj[5];
            v311 = (unsigned __int8 *)jj[6];
            while (v312 != v311)
            {
              *(_QWORD *)buf = v312;
              v313 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v309 + 136, v312, (__int128 **)buf);
              v314 = v313;
              v315 = v373.__r_.__value_.__l.__size_;
              if (v373.__r_.__value_.__l.__size_ >= v373.__r_.__value_.__r.__words[2])
              {
                v320 = (uint64_t)(v373.__r_.__value_.__l.__size_ - v373.__r_.__value_.__r.__words[0]) >> 4;
                v321 = v320 + 1;
                if ((unint64_t)(v320 + 1) >> 60)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v322 = v373.__r_.__value_.__r.__words[2] - v373.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v373.__r_.__value_.__r.__words[2] - v373.__r_.__value_.__r.__words[0]) >> 3 > v321)
                  v321 = v322 >> 3;
                if ((unint64_t)v322 >= 0x7FFFFFFFFFFFFFF0)
                  v323 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v323 = v321;
                *(_QWORD *)v379 = (char *)&v373.__r_.__value_.__l + 16;
                v324 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v323);
                v326 = &v324[16 * v320];
                v327 = *(_OWORD *)(v314 + 40);
                *(_OWORD *)v326 = v327;
                if (*((_QWORD *)&v327 + 1))
                {
                  v328 = (unint64_t *)(*((_QWORD *)&v327 + 1) + 8);
                  do
                    v329 = __ldxr(v328);
                  while (__stxr(v329 + 1, v328));
                }
                v330 = (_QWORD *)v373.__r_.__value_.__l.__size_;
                v331 = v373.__r_.__value_.__r.__words[0];
                v59 = v354;
                if (v373.__r_.__value_.__l.__size_ == v373.__r_.__value_.__r.__words[0])
                {
                  v334 = vdupq_n_s64(v373.__r_.__value_.__l.__size_);
                  v332 = (std::string::size_type)v326;
                }
                else
                {
                  v332 = (std::string::size_type)v326;
                  do
                  {
                    v333 = *((_OWORD *)v330 - 1);
                    v330 -= 2;
                    *(_OWORD *)(v332 - 16) = v333;
                    v332 -= 16;
                    *v330 = 0;
                    v330[1] = 0;
                  }
                  while (v330 != (_QWORD *)v331);
                  v334 = *(int64x2_t *)&v373.__r_.__value_.__l.__data_;
                }
                v319 = (std::string::size_type)(v326 + 16);
                v373.__r_.__value_.__r.__words[0] = v332;
                v373.__r_.__value_.__l.__size_ = (std::string::size_type)(v326 + 16);
                *(int64x2_t *)&buf[8] = v334;
                v335 = v373.__r_.__value_.__r.__words[2];
                v373.__r_.__value_.__r.__words[2] = (std::string::size_type)&v324[16 * v325];
                *(_QWORD *)&buf[24] = v335;
                *(_QWORD *)buf = v334.i64[0];
                std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *(_QWORD *)v373.__r_.__value_.__l.__size_ = *((_QWORD *)v313 + 5);
                v316 = *((_QWORD *)v313 + 6);
                *(_QWORD *)(v315 + 8) = v316;
                if (v316)
                {
                  v317 = (unint64_t *)(v316 + 8);
                  do
                    v318 = __ldxr(v317);
                  while (__stxr(v318 + 1, v317));
                }
                v319 = v315 + 16;
                v59 = v354;
              }
              v373.__r_.__value_.__l.__size_ = v319;
              v312 += 24;
            }
            v336 = resolve_virtual_phi((uint64_t **)&v373);
            if (*v336 != *(_QWORD *)v373.__r_.__value_.__l.__data_)
              Espresso::blobcpy(v59, (uint64_t *)v373.__r_.__value_.__l.__data_, v336);
            *(_QWORD *)buf = &v373;
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
        }
      }
      v337 = (std::__shared_weak_count *)v368.__r_.__value_.__l.__size_;
      if (v368.__r_.__value_.__l.__size_)
      {
        v338 = (unint64_t *)(v368.__r_.__value_.__l.__size_ + 8);
        do
          v339 = __ldaxr(v338);
        while (__stlxr(v339 - 1, v338));
        if (!v339)
        {
          ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
          std::__shared_weak_count::__release_weak(v337);
        }
      }
      v308 = v353 + 1;
    }
    while (v353 + 1 != v350);
  }
  JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)&v358);
  if (v363)
  {
    v364 = v363;
    operator delete(v363);
  }
}

void sub_190E1DA30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 208);
  _Unwind_Resume(a1);
}

char *Espresso::abstract_blob_container::shape(char *this, uint64_t a2)
{
  __int128 v2;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v2 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)this = *(_OWORD *)(a2 + 8);
  *((_OWORD *)this + 1) = v2;
  *((_QWORD *)this + 4) = *(_QWORD *)(a2 + 40);
  if (this + 40 != (char *)(a2 + 48))
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this + 40, *(char **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  return this;
}

void sub_190E1DD18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::layer_shape::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;

  v2 = *(_DWORD *)(a1 + 20);
  if (v2 == -1)
  {
    if (*(_DWORD *)(a1 + 16) == 1)
      v2 = 4;
    else
      v2 = 5;
  }
  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 20);
  if (v3 == 1)
    v5 = 4;
  else
    v5 = 5;
  if (v4 == -1)
    v4 = v5;
  if (v2 != v4)
    return 0;
  v6 = v2 < 2;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    v6 = 0;
  if (v2 >= 2 && *(_DWORD *)a1 == *(_DWORD *)a2)
    v6 = *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
  v7 = v2 < 3 && v6;
  if (v2 >= 3 && v6)
    v7 = *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  v8 = v2 < 4 && v7;
  if (v2 >= 4 && v7)
    v8 = *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  if (v2 < 5)
  {
    if (!v8)
      return 0;
  }
  else if (!v8 || *(_DWORD *)(a1 + 16) != v3)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
    && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36))
  {
    return std::operator==[abi:ne180100]<unsigned int,std::allocator<unsigned int>>(*(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  return 0;
}

uint64_t Espresso::layer::__launch(Espresso::layer *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  if (*a2)
  {
    v7 = *((unsigned int *)this + 2);
    v8 = Espresso::layer::layer_type_id(this);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 64))(v6, 723714196, a3, v7, v8, 0);
  }
  result = (**(uint64_t (***)(Espresso::layer *, uint64_t *))this)(this, a2);
  v10 = *a2;
  if (v10)
  {
    v11 = *((unsigned int *)this + 2);
    v12 = Espresso::layer::layer_type_id(this);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 64))(v10, 723714200, a3, v11, v12, 0);
  }
  return result;
}

void Espresso::batch_cpu::log_profiler_event(Espresso::batch_cpu *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  Espresso::abstract_batch::log_profiler_event(this);
  v12 = *((_QWORD *)this + 13);
  if (v12)
  {
    *(_QWORD *)&v13 = 0xBFF0000000000000;
    DWORD2(v13) = a2;
    v14 = a3;
    v15 = a4;
    v16 = a5;
    v17 = a6;
    Espresso::profiler_t::log_event(v12, &v13);
  }
}

uint64_t Espresso::layer::layer_type_id(Espresso::layer *this)
{
  uint64_t result;
  const char *v3;
  char __dst[8];

  result = *((_QWORD *)this + 24);
  if (!result)
  {
    v3 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v3 = *(const char **)v3;
    strncpy(__dst, v3, 8uLL);
    result = *(_QWORD *)__dst;
    *((_QWORD *)this + 24) = *(_QWORD *)__dst;
  }
  return result;
}

uint64_t Espresso::layer::__launch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = a1 + 64;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 64) + 8) + 136))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8), a2, a1 + 64, a1 + 104, a1 + 80);
  result = *(_QWORD *)(v4 + 120);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2, a1);
  return result;
}

uint64_t Espresso::abstract_context::__launch_kernel(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, a2, a4, a5);
}

void JITBackendSignpostEmitter::nextPlatform(JITBackendSignpostEmitter *this, int a2)
{
  uint64_t v3;

  if (a2 <= 19999)
  {
    if (!a2 || a2 == 100)
    {
      v3 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v3 = 1;
  if (a2 != 20000 && a2 != 50000 && a2 != 50002)
LABEL_9:
    v3 = 2;
LABEL_10:
  if (*((_BYTE *)this + 32))
  {
    if ((_DWORD)v3 != *(_DWORD *)this)
    {
      JITBackendSignpostEmitter::endJITSegment((uint64_t)this);
      JITBackendSignpostEmitter::startJITSegment(this, (char *)v3);
      *(_DWORD *)this = v3;
    }
  }
  else
  {
    *(_DWORD *)this = v3;
    JITBackendSignpostEmitter::startJITSegment(this, (char *)v3);
  }
  *((_BYTE *)this + 32) = 1;
}

uint64_t *std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *std::vector<Espresso::layer_shape>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + (a2 << 6);
    v6 = a2 << 6;
    v7 = v4 + 16;
    do
    {
      *(_QWORD *)(v7 + 40) = 0;
      *(_OWORD *)(v7 + 24) = 0uLL;
      *(_OWORD *)(v7 + 8) = 0uLL;
      *(_OWORD *)(v7 - 16) = xmmword_191A8AA80;
      *(_QWORD *)v7 = 0xFFFFFFFF00000001;
      v7 += 64;
      v6 -= 64;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_190E1E278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(a1, a2);
  if (result)
  {
    v4 = (int8x8_t)a1[1];
    v5 = *(_QWORD *)(result + 8);
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(_QWORD **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7 != (_QWORD *)result);
    if (v8 == a1 + 2)
      goto LABEL_19;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*(_QWORD *)result)
        goto LABEL_20;
      v10 = *(_QWORD *)(*(_QWORD *)result + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *(_QWORD *)result;
      }
    }
    *v8 = v11;
    *(_QWORD *)result = 0;
    --a1[3];
    operator delete((void *)result);
    return 1;
  }
  return result;
}

void Espresso::BNNSEngine::elementwise_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void ***v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  Espresso *v45;
  const char *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  int v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void **, size_t, size_t);
  uint64_t (*v72)(_QWORD);
  _QWORD v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  size_t in_stride[2];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[12];
  char v115[40];
  void *__p;
  void *v117;
  char v118[40];
  void *v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint8_t buf[4];
  int v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 336);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 16))(v7, a2, a3, a4);
    return;
  }
  v8 = a4[1] - *a4;
  v9 = v8 >> 4;
  v10 = *(unsigned int *)(a1 + 280);
  if ((int)v10 > 101)
  {
    switch((int)v10)
    {
      case 102:
        v11 = 3;
        goto LABEL_37;
      case 114:
        v12 = 10;
        goto LABEL_40;
      case 115:
        v12 = 9;
        goto LABEL_40;
      case 117:
        v12 = 7;
        goto LABEL_40;
      case 118:
        v12 = 6;
        goto LABEL_40;
      case 121:
        v12 = 11;
        goto LABEL_40;
      case 122:
        v12 = 16;
        goto LABEL_40;
      case 123:
        v12 = 15;
        goto LABEL_40;
      case 124:
        v12 = 17;
        goto LABEL_40;
      case 125:
        v12 = 13;
        goto LABEL_40;
      case 126:
        v12 = 12;
        goto LABEL_40;
      case 127:
        v12 = 14;
        goto LABEL_40;
      case 128:
        v12 = 19;
        goto LABEL_40;
      case 129:
        v12 = 18;
        goto LABEL_40;
      case 130:
        v12 = 20;
        goto LABEL_40;
      default:
        goto LABEL_157;
    }
  }
  if ((int)v10 > 11)
  {
    switch((int)v10)
    {
      case 26:
        v12 = 24;
        goto LABEL_40;
      case 27:
        v12 = 22;
        goto LABEL_40;
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 34:
      case 36:
        goto LABEL_157;
      case 33:
        v11 = 1;
        break;
      case 35:
        v12 = 23;
        goto LABEL_40;
      case 37:
        v12 = 8;
        goto LABEL_40;
      default:
        if ((_DWORD)v10 == 12)
        {
          v12 = 5;
LABEL_40:
          if (v8 != 16)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("elementwise_kernel %zu expects 1 input but got %zu inputs.", v10, v9);
          v13 = (_QWORD *)*a3;
          if (a3[1] == *a3 || !*v13 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13))
          {
            v14 = 0;
            v127 = 0;
            v128 = 0;
          }
          else
          {
            v14 = *(_QWORD *)(*v13 + 160);
            v33 = *(std::__shared_weak_count **)(*v13 + 168);
            v127 = v14;
            v128 = v33;
            if (v33)
            {
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldxr(p_shared_owners);
              while (__stxr(v35 + 1, p_shared_owners));
            }
          }
          v15 = (_QWORD *)*a4;
          if (a4[1] == *a4 || !*v15 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v15 + 32))(*v15))
          {
            v16 = 0;
            v17 = 0;
            v125 = 0;
            v126 = 0;
          }
          else
          {
            v17 = *(_QWORD *)(*v15 + 160);
            v16 = *(std::__shared_weak_count **)(*v15 + 168);
            v125 = v17;
            v126 = v16;
            if (v16)
            {
              v36 = (unint64_t *)&v16->__shared_owners_;
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }
          }
          v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
          if (v18)
          {
            v19 = (std::__shared_weak_count *)v18[23];
            v123 = v18[22];
            v124 = v19;
            if (v19)
            {
              v20 = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
          }
          else
          {
            v123 = 0;
            v124 = 0;
          }
          v22 = (uint64_t *)*a4;
          v23 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
          if (v23)
          {
            v25 = v23[22];
            v24 = (std::__shared_weak_count *)v23[23];
            v121 = v25;
            v122 = v24;
            if (v24)
            {
              v26 = (unint64_t *)&v24->__shared_owners_;
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
              v22 = (uint64_t *)*a4;
            }
          }
          else
          {
            v24 = 0;
            v25 = 0;
            v121 = 0;
            v122 = 0;
          }
          Espresso::abstract_blob_container::shape(v118, *v22);
          Espresso::abstract_blob_container::shape(v115, *(_QWORD *)*a3);
          v28 = (void ***)(a1 + 352);
          if (*(_QWORD *)(a1 + 360) != *(_QWORD *)(a1 + 352))
            goto LABEL_114;
          std::vector<void *>::resize((char **)(a1 + 352), 1uLL);
          memset(v114, 0, sizeof(v114));
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          *(_OWORD *)in_stride = 0u;
          LODWORD(v114[0]) = 1;
          DWORD2(v114[11]) = 1;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v81 = 0u;
          if (v17)
          {
            v79 = v17;
            v80 = v16;
            if (v16)
            {
              v29 = (unint64_t *)&v16->__shared_owners_;
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
            }
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v73, (const Espresso::layer_shape *)v115, 0);
            Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v92, (uint64_t)&v79, (uint64_t)v73, 1);
            if (!v16)
              goto LABEL_88;
            v31 = (unint64_t *)&v16->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (v32)
              goto LABEL_88;
          }
          else
          {
            if (!v25)
            {
              v68 = "Elementwise kernel only supports FP32 or FP16 output";
              goto LABEL_155;
            }
            v79 = v25;
            v80 = v24;
            if (v24)
            {
              v38 = (unint64_t *)&v24->__shared_owners_;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v73, (const Espresso::layer_shape *)v115, 0);
            Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v92, (uint64_t)&v79, (uint64_t)v73, 1);
            if (!v24)
              goto LABEL_88;
            v40 = (unint64_t *)&v24->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            v16 = v24;
            if (v41)
            {
LABEL_88:
              if (v127)
              {
                v42 = v128;
                v77 = v127;
                v78 = v128;
                if (v128)
                {
                  v43 = (unint64_t *)&v128->__shared_owners_;
                  do
                    v44 = __ldxr(v43);
                  while (__stxr(v44 + 1, v43));
                }
                Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v73, (const Espresso::layer_shape *)v118, 0);
                Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v81, (uint64_t)&v77, (uint64_t)v73, 1);
                if (!v42)
                  goto LABEL_105;
                v47 = (unint64_t *)&v42->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
LABEL_103:
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
LABEL_105:
                v111 = v100;
                v112 = v101;
                v113 = v102;
                v107 = v96;
                v108 = v97;
                v109 = v98;
                v110 = v99;
                *(_OWORD *)in_stride = v92;
                v104 = v93;
                v105 = v94;
                v106 = v95;
                *(_OWORD *)((char *)&v114[7] + 8) = v88;
                *(_OWORD *)((char *)&v114[8] + 8) = v89;
                *(_OWORD *)((char *)&v114[9] + 8) = v90;
                *(_OWORD *)((char *)&v114[10] + 8) = v91;
                *(_OWORD *)((char *)&v114[5] + 8) = v86;
                *(_OWORD *)((char *)&v114[6] + 8) = v87;
                *(_OWORD *)((char *)&v114[3] + 8) = v84;
                *(_OWORD *)((char *)&v114[4] + 8) = v85;
                *(_OWORD *)((char *)v114 + 8) = v81;
                *(_OWORD *)((char *)&v114[1] + 8) = v82;
                *(_OWORD *)((char *)&v114[2] + 8) = v83;
                v75 = 0u;
                v76 = 0u;
                v74 = 0u;
                v73[1] = in_stride;
                v73[0] = v12;
                v52 = *(_DWORD *)(a1 + 284);
                if (v52)
                {
                  if (v52 != 1)
                    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Elementwise kernel only supports fused relu activation");
                  LODWORD(v74) = 1;
                }
                v71 = bnns_alloc_capmem;
                v72 = MEMORY[0x1E0C834A8];
                v53 = *(_QWORD *)(a1 + 376);
                v69 = 0;
                v70 = v53;
                if ((v53 & 1) == 0)
                {
                  if ((_DWORD)v45)
                  {
                    if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
                      dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
                    Espresso::BNNSEngine::elementwise_kernel::__launch_unary(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &,BNNSArithmeticFunction)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested;
                  }
                }
                if (Espresso::BNNSEngine::elementwise_kernel::__launch_unary(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &,BNNSArithmeticFunction)::log_requested)
                {
                  Espresso::espresso_os_log_subsystem(v45, v46);
                  v54 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 67109376;
                    v130 = v69;
                    v131 = 2048;
                    v132 = v70;
                    _os_log_debug_impl(&dword_190DAF000, v54, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerArithmetic: flags=%d, n_threads=%zu", buf, 0x12u);
                  }

                }
                **v28 = (void *)MEMORY[0x19401A9E4](v73, &v69);
                v14 = v127;
LABEL_114:
                in_stride[0] = 1;
                if (!v14 || (v55 = v125) == 0)
                {
                  v14 = v123;
                  if (!v123 || (v55 = v121) == 0)
                    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Elementwise kernel only supports all FP32 or FP16 inputs");
                }
                if (BNNSArithmeticFilterApplyBatch(**v28, 1uLL, 1uLL, (const void **)(v55 + 24), in_stride, *(void **)(v14 + 24), 1uLL) == -1)Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unary elementwise kernel failed in BNNS");
                if (__p)
                {
                  v117 = __p;
                  operator delete(__p);
                }
                if (v119)
                {
                  v120 = v119;
                  operator delete(v119);
                }
                v56 = v122;
                if (v122)
                {
                  v57 = (unint64_t *)&v122->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v59 = v124;
                if (v124)
                {
                  v60 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                v62 = v126;
                if (v126)
                {
                  v63 = (unint64_t *)&v126->__shared_owners_;
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
                v65 = v128;
                if (v128)
                {
                  v66 = (unint64_t *)&v128->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                return;
              }
              if (v123)
              {
                v42 = v124;
                v77 = v123;
                v78 = v124;
                if (v124)
                {
                  v49 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v50 = __ldxr(v49);
                  while (__stxr(v50 + 1, v49));
                }
                Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v73, (const Espresso::layer_shape *)v118, 0);
                Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v81, (uint64_t)&v77, (uint64_t)v73, 1);
                if (!v42)
                  goto LABEL_105;
                v51 = (unint64_t *)&v42->__shared_owners_;
                do
                  v48 = __ldaxr(v51);
                while (__stlxr(v48 - 1, v51));
                goto LABEL_103;
              }
              v68 = "Elementwise kernel only supports FP32 or FP16 inputs";
LABEL_155:
              Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v68);
            }
          }
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          goto LABEL_88;
        }
        if ((_DWORD)v10 != 13)
          goto LABEL_157;
        v11 = 21;
        break;
    }
LABEL_37:
    if (v8 != 32)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("elementwise_kernel %zu expects 2 input but got %zu inputs.", v10, v9);
    Espresso::BNNSEngine::elementwise_kernel::__launch_n_ary(a1, a3, a4, v11);
    return;
  }
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 != 1)
    {
      if ((_DWORD)v10 == 11)
      {
        v12 = 4;
        goto LABEL_40;
      }
LABEL_157:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("Unsupported elementwise mode %zu (runtime mode change detected).", v10);
    }
    v11 = 2;
    goto LABEL_37;
  }
  if ((unint64_t)v8 <= 0x1F)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("elementwise_kernel %zu expects more than 2 input but got %zu inputs.", 0, v9);
  Espresso::BNNSEngine::elementwise_kernel::__launch_n_ary(a1, a3, a4, 0);
}

void sub_190E1ED80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = (void *)STACK[0x378];
  if (STACK[0x378])
  {
    STACK[0x380] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 216);
  if (v4)
  {
    *(_QWORD *)(v1 - 208) = v4;
    operator delete(v4);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 144);
  _Unwind_Resume(a1);
}

void Espresso::generic_load_constant_kernel_impl::__launch(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *(_QWORD *)(a1 + 344);
  if (!v3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing constant_blob for load_constant");
  if (*(_BYTE *)(a1 + 376))
  {
    v6 = *a3;
  }
  else
  {
    v6 = *a3;
    if (!*(_BYTE *)(a1 + 360) && *(_QWORD *)(a1 + 368) == *v6)
      return;
  }
  v7 = *v6;
  v8 = *(std::__shared_weak_count **)(a1 + 352);
  v20 = v3;
  v21 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v18 = 0;
  v19 = 0;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 144))(v7, a2, &v20, &v18);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v11)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported copy of constant blob");
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = **a3;
}

void sub_190E1EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_cpu::__copy_from(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t nn;
  int v13;
  uint64_t v14;
  uint64_t i1;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t i2;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t jj;
  int v33;
  uint64_t v34;
  uint64_t kk;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t mm;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t m;
  int v53;
  uint64_t v54;
  uint64_t n;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t ii;
  void *v63;
  const void *v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t i;
  int v73;
  uint64_t v74;
  uint64_t j;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t k;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 24))(*a3);
  if (v5 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return 0;
  result = *a3;
  if (*a3)
  {
    if (result)
    {
      v7 = (_QWORD *)result;
      *(_DWORD *)(a1 + 240) = *(_DWORD *)(result + 240);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(result + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(result + 24);
      v8 = (uint64_t *)(a1 + 160);
      v9 = *(_QWORD *)(result + 160);
      if (!v9)
      {
        v88 = 0uLL;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 160, &v88);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
        if (*((_QWORD *)&v88 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
LABEL_31:
        v28 = (uint64_t *)(a1 + 176);
        v29 = v7[22];
        if (!v29)
        {
          v88 = 0uLL;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 176, &v88);
          v36 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
          if (*((_QWORD *)&v88 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
LABEL_57:
          v48 = (uint64_t *)(a1 + 192);
          v49 = v7[24];
          if (!v49)
          {
            v88 = 0uLL;
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 192, &v88);
            v56 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
            if (*((_QWORD *)&v88 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
LABEL_83:
            v68 = (uint64_t *)(a1 + 208);
            v69 = v7[26];
            if (!v69)
            {
              v88 = 0uLL;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v68, &v88);
              v76 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
              if (*((_QWORD *)&v88 + 1))
              {
                v77 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              return 1;
            }
            v70 = *v68;
            if (*v68)
            {
              v71 = *(int *)(v70 + 8);
              for (i = 12; i != 24; i += 4)
                v71 *= *(int *)(v70 + i);
              v73 = *(_DWORD *)(v69 + 8);
              v74 = v73;
              for (j = 12; j != 24; j += 4)
                v74 *= *(int *)(v69 + j);
              if (((v74 ^ v71) & 0x3FFFFFFFFFFFFFFFLL) == 0)
              {
LABEL_103:
                for (k = 0; k != 16; k += 4)
                  *(_DWORD *)(v70 + 8 + k) = *(_DWORD *)(v69 + 8 + k);
                v83 = *(void **)(v70 + 24);
                v84 = *(const void **)(v69 + 24);
                if (v83 != v84)
                {
                  v85 = 0;
                  v86 = *(int *)(v70 + 8);
                  v87 = v70 + 12;
                  do
                  {
                    v86 *= *(int *)(v87 + v85);
                    v85 += 4;
                  }
                  while (v85 != 12);
                  memcpy(v83, v84, 4 * v86);
                }
                return 1;
              }
            }
            else
            {
              v73 = *(_DWORD *)(v69 + 8);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,Espresso::blob<int,4>::UnitializedBlobType,void>(&v88, v73, *(_DWORD *)(v69 + 12), *(_DWORD *)(v69 + 16), *(_DWORD *)(v69 + 20));
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v68, &v88);
            v79 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
            if (*((_QWORD *)&v88 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v69 = v7[26];
            v70 = *v68;
            goto LABEL_103;
          }
          v50 = *v48;
          if (*v48)
          {
            v51 = *(int *)(v50 + 8);
            for (m = 12; m != 24; m += 4)
              v51 *= *(int *)(v50 + m);
            v53 = *(_DWORD *)(v49 + 8);
            v54 = v53;
            for (n = 12; n != 24; n += 4)
              v54 *= *(int *)(v49 + n);
            if (v51 == v54)
            {
LABEL_77:
              for (ii = 0; ii != 16; ii += 4)
                *(_DWORD *)(v50 + 8 + ii) = *(_DWORD *)(v49 + 8 + ii);
              v63 = *(void **)(v50 + 24);
              v64 = *(const void **)(v49 + 24);
              if (v63 != v64)
              {
                v65 = 0;
                v66 = *(int *)(v50 + 8);
                v67 = v50 + 12;
                do
                {
                  v66 *= *(int *)(v67 + v65);
                  v65 += 4;
                }
                while (v65 != 12);
                memcpy(v63, v64, v66);
              }
              goto LABEL_83;
            }
          }
          else
          {
            v53 = *(_DWORD *)(v49 + 8);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(&v88, v53, *(_DWORD *)(v49 + 12), *(_DWORD *)(v49 + 16), *(_DWORD *)(v49 + 20));
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 192, &v88);
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
          if (*((_QWORD *)&v88 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v49 = v7[24];
          v50 = *v48;
          goto LABEL_77;
        }
        v30 = *v28;
        if (*v28)
        {
          v31 = *(int *)(v30 + 8);
          for (jj = 12; jj != 24; jj += 4)
            v31 *= *(int *)(v30 + jj);
          v33 = *(_DWORD *)(v29 + 8);
          v34 = v33;
          for (kk = 12; kk != 24; kk += 4)
            v34 *= *(int *)(v29 + kk);
          if (((v34 ^ v31) & 0x7FFFFFFFFFFFFFFFLL) == 0)
          {
LABEL_51:
            for (mm = 0; mm != 16; mm += 4)
              *(_DWORD *)(v30 + 8 + mm) = *(_DWORD *)(v29 + 8 + mm);
            v43 = *(void **)(v30 + 24);
            v44 = *(const void **)(v29 + 24);
            if (v43 != v44)
            {
              v45 = 0;
              v46 = *(int *)(v30 + 8);
              v47 = v30 + 12;
              do
              {
                v46 *= *(int *)(v47 + v45);
                v45 += 4;
              }
              while (v45 != 12);
              memcpy(v43, v44, 2 * v46);
            }
            goto LABEL_57;
          }
        }
        else
        {
          v33 = *(_DWORD *)(v29 + 8);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(&v88, v33, *(_DWORD *)(v29 + 12), *(_DWORD *)(v29 + 16), *(_DWORD *)(v29 + 20));
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 176, &v88);
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
        if (*((_QWORD *)&v88 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v29 = v7[22];
        v30 = *v28;
        goto LABEL_51;
      }
      v10 = *v8;
      if (*v8)
      {
        v11 = *(int *)(v10 + 8);
        for (nn = 12; nn != 24; nn += 4)
          v11 *= *(int *)(v10 + nn);
        v13 = *(_DWORD *)(v9 + 8);
        v14 = v13;
        for (i1 = 12; i1 != 24; i1 += 4)
          v14 *= *(int *)(v9 + i1);
        if (((v14 ^ v11) & 0x3FFFFFFFFFFFFFFFLL) == 0)
        {
LABEL_25:
          for (i2 = 0; i2 != 16; i2 += 4)
            *(_DWORD *)(v10 + 8 + i2) = *(_DWORD *)(v9 + 8 + i2);
          v23 = *(void **)(v10 + 24);
          v24 = *(const void **)(v9 + 24);
          if (v23 != v24)
          {
            v25 = 0;
            v26 = *(int *)(v10 + 8);
            v27 = v10 + 12;
            do
            {
              v26 *= *(int *)(v27 + v25);
              v25 += 4;
            }
            while (v25 != 12);
            memcpy(v23, v24, 4 * v26);
          }
          goto LABEL_31;
        }
      }
      else
      {
        v13 = *(_DWORD *)(v9 + 8);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v88, v13, *(_DWORD *)(v9 + 12), *(_DWORD *)(v9 + 16), *(_DWORD *)(v9 + 20));
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 160, &v88);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v9 = v7[20];
      v10 = *v8;
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t Espresso::blob_cpu::platform(Espresso::blob_cpu *this)
{
  return 0;
}

void Espresso::generic_load_constant_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  int v4;
  char *v5;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;
  __int128 v14;

  *((_QWORD *)&v14 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 320);
  v9 = 0;
  v10 = 0;
  v4 = *(_DWORD *)(a1 + 324);
  if (v4 < 0)
    v4 = -1;
  v6 = *(_OWORD *)(a1 + 304);
  v7 = v3;
  v8 = v4;
  v12 = 0;
  v13 = 0;
  __p = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (char *)operator new(0x40uLL);
  *a2 = v5;
  a2[1] = v5;
  a2[2] = v5 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), &v6, &v14, (uint64_t)v5);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_190E1F69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  Espresso::inner_product_top_shape(a3, a1 + 304, *a2);
}

void Espresso::activation_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  _WORD *v51;
  char *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float *v60;
  float *v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  _WORD *v72;
  uint64_t v73;
  int v74;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  float *v96;
  const float *v97;
  uint64_t i;
  uint64_t data_low;
  float *v100;
  float *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  const char *v105;
  const char *v106;
  int v107;
  int v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  int __N[3];
  std::__shared_weak_count *v114;
  uint64_t __B;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  vImage_Buffer dest;
  vImage_Buffer src;

  v7 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v119 = 0;
    v120 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(*v7 + 160);
    v33 = *(std::__shared_weak_count **)(*v7 + 168);
    v119 = v8;
    v120 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
  }
  v9 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v9 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v117 = 0;
    v118 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v9 + 160);
    v36 = *(std::__shared_weak_count **)(*v9 + 168);
    v117 = v10;
    v118 = v36;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
  }
  v11 = *(_DWORD *)(a1 + 304);
  if ((v11 - 17) < 2)
  {
    Espresso::activation_kernel_cpu::__launch_lstm_ifog_activation(a1, a2, (uint64_t)a3, (uint64_t)a4);
    goto LABEL_13;
  }
  if (v11 == 15)
  {
    Espresso::activation_kernel_cpu::__launch_gru_activation(a1, a2, (uint64_t)a3, (uint64_t)a4);
    goto LABEL_13;
  }
  v18 = (_DWORD *)(a1 + 304);
  if (!v8 || !v10)
  {
    v39 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
    if (v39)
    {
      v41 = v39[22];
      v40 = (std::__shared_weak_count *)v39[23];
      __B = v41;
      v116 = v40;
      if (v40)
      {
        v42 = (unint64_t *)&v40->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
    }
    else
    {
      v41 = 0;
      __B = 0;
      v116 = 0;
    }
    v44 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
    if (v44)
    {
      v46 = v44[22];
      v45 = (std::__shared_weak_count *)v44[23];
      *(_QWORD *)&__N[1] = v46;
      v114 = v45;
      if (v45)
      {
        v47 = (unint64_t *)&v45->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      if (v41 && v46)
      {
        v49 = *(unsigned int *)(v41 + 16);
        v107 = *(_DWORD *)(v41 + 20);
        __N[0] = *(_DWORD *)(v41 + 12) * *(_DWORD *)(v41 + 8);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v111, *(_DWORD *)(v46 + 8), *(_DWORD *)(v46 + 12), 1, 1);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v109, *(_DWORD *)(v41 + 8), *(_DWORD *)(v41 + 12), 1, 1);
        if (v107 >= 1)
        {
          v50 = 0;
          v51 = *(_WORD **)(v41 + 24);
          v52 = *(char **)(v46 + 24);
          v106 = "PReLU params not set";
          do
          {
            v108 = v50;
            if ((int)v49 >= 1)
            {
              v53 = 0;
              v54 = __N[0];
              v55 = v111;
              do
              {
                v56 = *(void **)(v55 + 24);
                src.data = v52;
                src.height = 1;
                src.width = v54;
                src.rowBytes = 2 * v54;
                dest.data = v56;
                dest.height = 1;
                dest.width = v54;
                dest.rowBytes = 4 * v54;
                vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                if (*v18 == 11)
                {
                  v66 = *(_QWORD *)(a1 + 360);
                  if (!v66 || (v67 = *(_QWORD *)(a1 + 376)) == 0)
                  {
                    v106 = "Softplus weights not set";
LABEL_130:
                    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v106);
                  }
                  LODWORD(src.data) = 0;
                  LODWORD(src.data) = *(_DWORD *)(*(_QWORD *)(v66 + 16) + 4 * v53);
                  LODWORD(dest.data) = 0;
                  LODWORD(dest.data) = *(_DWORD *)(*(_QWORD *)(v67 + 16) + 4 * v53);
                  v58 = v109;
                  vDSP_vsmul(*(const float **)(v55 + 24), 1, (const float *)&dest, *(float **)(v109 + 24), 1, __N[0]);
                  vvexpf(*(float **)(v58 + 24), *(const float **)(v58 + 24), __N);
                  vvlog1pf(*(float **)(v58 + 24), *(const float **)(v58 + 24), __N);
                  vDSP_vsmul(*(const float **)(v58 + 24), 1, (const float *)&src, *(float **)(v58 + 24), 1, __N[0]);
                  v54 = __N[0];
                  if (__N[0] >= 1)
                  {
                    v68 = 0;
                    v69 = *(_QWORD *)(v58 + 24);
                    v55 = v111;
                    v70 = 4 * __N[0];
                    do
                    {
                      if (fabsf(*(float *)(v69 + v68)) == INFINITY)
                        *(float *)(v69 + v68) = (float)(*(float *)&src.data * *(float *)&dest.data)
                                              * *(float *)(*(_QWORD *)(v55 + 24) + v68);
                      v68 += 4;
                    }
                    while (v70 != v68);
                  }
                }
                else if (*v18 == 4)
                {
                  v57 = *(_QWORD *)(a1 + 344);
                  if (!v57)
                    goto LABEL_130;
                  v54 = __N[0];
                  v58 = v109;
                  if (__N[0] >= 1)
                  {
                    v59 = *(float *)(*(_QWORD *)(v57 + 16) + 4 * v53);
                    v55 = v111;
                    v60 = *(float **)(v111 + 24);
                    v61 = *(float **)(v109 + 24);
                    v62 = __N[0];
                    do
                    {
                      v63 = *v60++;
                      v64 = v63;
                      if (v63 >= 0.0)
                        v65 = 1.0;
                      else
                        v65 = v59;
                      *v61++ = v64 * v65;
                      --v62;
                    }
                    while (v62);
                  }
                }
                else
                {
                  v55 = v111;
                  v58 = v109;
                  Espresso::activation_chunk((unsigned int *)(a1 + 304), *(const float **)(v111 + 24), *(float **)(v109 + 24), __N[0]);
                  v54 = __N[0];
                }
                if (v54)
                {
                  v71 = *(int **)(v58 + 24);
                  v72 = v51;
                  v73 = v54;
                  do
                  {
                    v74 = *v71++;
                    _S0 = v74;
                    __asm { FCVT            H0, S0 }
                    *v72++ = _S0;
                    --v73;
                  }
                  while (v73);
                }
                v52 += 2 * v54;
                v51 += v54;
                ++v53;
              }
              while (v53 != v49);
            }
            v50 = v108 + 1;
          }
          while (v108 + 1 != v107);
        }
        v80 = v110;
        if (v110)
        {
          v81 = (unint64_t *)&v110->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = v112;
        if (v112)
        {
          v84 = (unint64_t *)&v112->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v86 = v114;
        if (v114)
        {
          v87 = (unint64_t *)&v114->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = v116;
        if (v116)
        {
          v90 = (unint64_t *)&v116->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        goto LABEL_13;
      }
    }
    else
    {
      *(_QWORD *)&__N[1] = 0;
      v114 = 0;
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected null blobs");
  }
  if (v11 != 11)
  {
    if (v11 != 4)
    {
      v103 = 0;
      v104 = *(_DWORD *)(v8 + 8);
      do
      {
        v104 *= *(_DWORD *)(v8 + 12 + v103);
        v103 += 4;
      }
      while (v103 != 12);
      Espresso::activation_chunk((unsigned int *)(a1 + 304), *(const float **)(v10 + 24), *(float **)(v8 + 24), v104);
      goto LABEL_13;
    }
    v19 = *(_QWORD *)(a1 + 344);
    if (v19)
    {
      v20 = *(_DWORD *)(v8 + 20);
      if (v20 >= 1)
      {
        v21 = 0;
        v22 = *(_DWORD *)(v8 + 12) * *(_DWORD *)(v8 + 8);
        v23 = *(unsigned int *)(v8 + 16);
        v24 = *(_QWORD *)(v8 + 24);
        v25 = *(_QWORD *)(v10 + 24);
        v26 = 4 * v22;
        do
        {
          if ((int)v23 >= 1)
          {
            v27 = 0;
            v28 = *(_QWORD *)(v19 + 16);
            do
            {
              if (v22 >= 1)
              {
                v29 = 0;
                v30 = *(float *)(v28 + 4 * v27);
                do
                {
                  v31 = *(float *)(v25 + v29);
                  if (v31 >= 0.0)
                    v32 = 1.0;
                  else
                    v32 = v30;
                  *(float *)(v24 + v29) = v31 * v32;
                  v29 += 4;
                }
                while (4 * v22 != v29);
              }
              v25 += v26;
              v24 += v26;
              ++v27;
            }
            while (v27 != v23);
          }
          ++v21;
        }
        while (v21 != v20);
      }
      goto LABEL_13;
    }
    v105 = "PReLU params not set";
LABEL_135:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v105);
  }
  if (!*(_QWORD *)(a1 + 360) || !*(_QWORD *)(a1 + 376))
  {
    v105 = "Softplus weights not set";
    goto LABEL_135;
  }
  v93 = *(unsigned int *)(v8 + 16);
  v92 = *(_DWORD *)(v8 + 20);
  v94 = (*(_DWORD *)(v8 + 12) * *(_DWORD *)(v8 + 8));
  LODWORD(src.data) = *(_DWORD *)(v8 + 12) * *(_DWORD *)(v8 + 8);
  if (v92 >= 1)
  {
    v95 = 0;
    v96 = *(float **)(v8 + 24);
    v97 = *(const float **)(v10 + 24);
    do
    {
      if ((int)v93 < 1)
      {
        data_low = v94;
      }
      else
      {
        for (i = 0; i != v93; ++i)
        {
          LODWORD(dest.data) = 0;
          LODWORD(dest.data) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 16) + 4 * i);
          LODWORD(__B) = 0;
          LODWORD(__B) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 16) + 4 * i);
          vDSP_vsmul(v97, 1, (const float *)&__B, v96, 1, (int)v94);
          vvexpf(v96, v96, (const int *)&src);
          vvlog1pf(v96, v96, (const int *)&src);
          vDSP_vsmul(v96, 1, (const float *)&dest, v96, 1, SLODWORD(src.data));
          data_low = LODWORD(src.data);
          if (SLODWORD(src.data) >= 1)
          {
            v100 = v96;
            v101 = (float *)v97;
            v102 = LODWORD(src.data);
            do
            {
              if (fabsf(*v100) == INFINITY)
                *v100 = (float)(*(float *)&dest.data * *(float *)&__B) * *v101;
              ++v101;
              ++v100;
              --v102;
            }
            while (v102);
          }
          v97 += (int)data_low;
          LODWORD(v94) = data_low;
          v96 += (int)data_low;
        }
      }
      ++v95;
      v94 = data_low;
    }
    while (v95 != v92);
  }
LABEL_13:
  v12 = v118;
  if (v118)
  {
    v13 = (unint64_t *)&v118->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v120;
  if (v120)
  {
    v16 = (unint64_t *)&v120->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_190E1FED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::activation_chunk(unsigned int *a1, const float *a2, float *a3, int a4)
{
  uint64_t v5;
  float *v7;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  const float *v13;
  vDSP_Length v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  vDSP_Length v34;
  const float *v35;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unsigned int __N;
  float __N_4;
  float __B;

  __N = a4;
  v5 = *a1;
  v7 = a3;
  switch((int)v5)
  {
    case 0:
      __B = 0.0;
      vDSP_vthr(a2, 1, &__B, a3, 1, a4);
      return;
    case 1:
      vvtanhf(a3, a2, (const int *)&__N);
      return;
    case 2:
      if (a4 >= 1)
      {
        v9 = a4;
        do
        {
          v10 = *a2++;
          v11 = v10;
          v12 = *((float *)a1 + 1);
          if (v10 >= 0.0)
            v12 = 1.0;
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      return;
    case 3:
      __N_4 = 1.0;
      __B = *(float *)&a4;
      vDSP_vneg(a2, 1, a3, 1, a4);
      vvexpf(v7, v7, (const int *)&__B);
      vDSP_vsadd(v7, 1, &__N_4, v7, 1, SLODWORD(__B));
      vvrecf(v7, v7, (const int *)&__B);
      return;
    case 5:
      vDSP_vsmul(a2, 1, (const float *)a1 + 2, a3, 1, a4);
      vvtanhf(v7, v7, (const int *)&__N);
      v13 = (const float *)(a1 + 1);
      v14 = (int)__N;
      goto LABEL_53;
    case 6:
      vDSP_vsmsa(a2, 1, (const float *)a1 + 1, (const float *)a1 + 2, a3, 1, a4);
      return;
    case 7:
      __N_4 = 1.0;
      __B = 0.0;
      vDSP_vsmsa(a2, 1, (const float *)a1 + 1, (const float *)a1 + 2, a3, 1, a4);
      vDSP_vclip(v7, 1, &__B, &__N_4, v7, 1, a4);
      return;
    case 8:
      if (a4 >= 1)
      {
        v15 = a4;
        do
        {
          v16 = *a2;
          if (*a2 < 0.0)
          {
            v17 = *((float *)a1 + 1);
            v16 = (float)(expf(v16) + -1.0) * v17;
          }
          *v7++ = v16;
          ++a2;
          --v15;
        }
        while (v15);
      }
      return;
    case 9:
      vDSP_vthres(a2, 1, (const float *)a1 + 1, a3, 1, a4);
      return;
    case 10:
      vvexpf(a3, a2, (const int *)&__N);
      vvlog1pf(v7, v7, (const int *)&__N);
      v18 = __N;
      if ((int)__N >= 1)
      {
        do
        {
          if (fabsf(*v7) == INFINITY)
            *v7 = *a2;
          ++a2;
          ++v7;
          --v18;
        }
        while (v18);
      }
      return;
    case 12:
      __B = 1.0;
      vvfabsf(a3, a2, (const int *)&__N);
      vDSP_vsadd(v7, 1, &__B, v7, 1, (int)__N);
      vvdivf(v7, a2, v7, (const int *)&__N);
      return;
    case 13:
      if (a4 >= 1)
      {
        v19 = a4;
        do
        {
          v20 = *a2++;
          v21 = v20;
          if (v20 < *((float *)a1 + 1))
            v21 = *((float *)a1 + 2);
          *v7++ = v21;
          --v19;
        }
        while (v19);
      }
      return;
    case 14:
      vDSP_vclip(a2, 1, (const float *)a1 + 1, (const float *)a1 + 2, a3, 1, a4);
      return;
    case 16:
      if (a4 >= 1)
      {
        v22 = a4;
        do
        {
          v23 = *a2;
          if (*a2 >= 0.0)
            v24 = v23 * 1.0507;
          else
            v24 = (float)(expf(v23) + -1.0) * 1.7581;
          *v7++ = v24;
          ++a2;
          --v22;
        }
        while (v22);
      }
      return;
    case 19:
      if (*(float *)&a4 != 0.0)
      {
        v25 = a4;
        do
        {
          v26 = *a2++;
          *v7++ = v26 * (float)((float)(erff(v26 * 0.70711) + 1.0) * 0.5);
          --v25;
        }
        while (v25);
      }
      return;
    case 20:
      if (*(float *)&a4 != 0.0)
      {
        v27 = a4;
        do
        {
          v28 = *a2++;
          *v7++ = erff(v28);
          --v27;
        }
        while (v27);
      }
      return;
    case 21:
      __B = 0.044715;
      __N_4 = 1.0;
      v44 = 0.79788;
      v45 = 0.5;
      if (a4 >= 1)
      {
        v29 = a4;
        v30 = (float *)a2;
        v31 = a3;
        do
        {
          v32 = *v30++;
          v33 = pow(v32, 3.0);
          *v31++ = v33;
          --v29;
        }
        while (v29);
      }
      vDSP_vsmul(v7, 1, &__B, v7, 1, a4);
      vDSP_vadd(v7, 1, a2, 1, v7, 1, (int)__N);
      vDSP_vsmul(v7, 1, &v44, v7, 1, (int)__N);
      vvtanhf(v7, v7, (const int *)&__N);
      vDSP_vsadd(v7, 1, &__N_4, v7, 1, (int)__N);
      vDSP_vmul(v7, 1, a2, 1, v7, 1, (int)__N);
      v14 = (int)__N;
      v13 = &v45;
LABEL_53:
      vDSP_vsmul(v7, 1, v13, v7, 1, v14);
      return;
    case 22:
      v45 = 1.702;
      vDSP_vsmul(a2, 1, &v45, a3, 1, a4);
      v34 = (int)__N;
      __N_4 = 1.0;
      __B = *(float *)&__N;
      v35 = v7;
      goto LABEL_68;
    case 23:
      if (*(float *)&a4 != 0.0)
      {
        v36 = a4;
        do
        {
          v37 = *a2++;
          if (v37 < 0.0)
            v38 = 0.0;
          else
            v38 = 1.0;
          *v7++ = v38;
          --v36;
        }
        while (v36);
      }
      return;
    case 24:
      __B = -*((float *)a1 + 2);
      __N_4 = -1.0;
      vDSP_vsmul(a2, 1, &__N_4, a3, 1, a4);
      vDSP_vthr(v7, 1, &__B, v7, 1, (int)__N);
      vDSP_vsmul(v7, 1, &__N_4, v7, 1, (int)__N);
      v39 = __N;
      if ((int)__N >= 1)
      {
        do
        {
          v40 = *((float *)a1 + 1);
          if (*v7 >= 0.0)
            v40 = 1.0;
          *v7 = *v7 * v40;
          ++v7;
          --v39;
        }
        while (v39);
      }
      return;
    case 25:
      __N_4 = 1.0;
      __B = *(float *)&a4;
      v34 = a4;
      v35 = a2;
LABEL_68:
      vDSP_vneg(v35, 1, v7, 1, v34);
      vvexpf(v7, v7, (const int *)&__B);
      vDSP_vsadd(v7, 1, &__N_4, v7, 1, SLODWORD(__B));
      vvrecf(v7, v7, (const int *)&__B);
      vDSP_vmul(v7, 1, a2, 1, v7, 1, (int)__N);
      break;
    case 26:
      if (*(float *)&a4 != 0.0)
      {
        v41 = a4;
        do
        {
          v42 = *a2++;
          v43 = fmax(fmin(v42 + 3.0, 6.0), 0.0) * v42 * 0.166666667;
          *v7++ = v43;
          --v41;
        }
        while (v41);
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Not implemented %d", v5);
  }
}

void Espresso::reduce_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  int v27;
  uint64_t j;
  unsigned int v29;
  BOOL v30;
  int v31;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  int v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  float32x4_t *v54;
  _OWORD *v55;
  uint64_t v56;
  _OWORD *v57;
  unsigned int v58;
  uint64_t v59;
  _OWORD *v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint32x4_t v94;
  float32x4_t *v95;
  uint64_t k;
  int v97;
  float v98;
  int v99;
  uint64_t m;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  void (*v106)(void);
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  vDSP_Length v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  std::runtime_error *exception;
  std::runtime_error *v174;
  std::runtime_error *v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count *v185;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  char v208[8];
  int v209;
  int v210;
  int v211;
  void *__p;
  void *v213;
  __int128 __B;

  Espresso::abstract_blob_container::shape(v208, **a4);
  v6 = *a4;
  if (!*v6 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v7 = 0;
LABEL_4:
    v185 = 0;
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(*v6 + 160);
  v33 = *(_QWORD *)(*v6 + 168);
  if (!v33)
    goto LABEL_4;
  v185 = *(std::__shared_weak_count **)(*v6 + 168);
  v34 = (unint64_t *)(v33 + 8);
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
LABEL_5:
  v8 = *a3;
  v9 = **a3;
  if (v9 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
  {
    v10 = *(_QWORD *)(*v8 + 160);
    v36 = *(_QWORD *)(*v8 + 168);
    if (v36)
    {
      v184 = *(std::__shared_weak_count **)(*v8 + 168);
      v37 = (unint64_t *)(v36 + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    else
    {
      v184 = 0;
    }
  }
  else
  {
    v184 = 0;
    v10 = 0;
  }
  if (!v7)
  {
    v29 = *(_DWORD *)(a1 + 280);
    v30 = v29 > 0xA;
    v31 = (1 << v29) & 0x602;
    if (v30 || v31 == 0)
      **(_DWORD **)(v10 + 24) = 0;
    else
      **(_DWORD **)(v10 + 24) = 2143289344;
    goto LABEL_188;
  }
  v11 = *a3;
  if ((unint64_t)((char *)a3[1] - (char *)*a3) < 0x11
    || (v12 = v11[2]) == 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12))
  {
    v13 = 0;
LABEL_13:
    v183 = 0;
    goto LABEL_14;
  }
  v107 = v11[2];
  v13 = *(_QWORD *)(v107 + 160);
  v108 = *(std::__shared_weak_count **)(v107 + 168);
  if (!v108)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v108->__shared_owners_;
  do
    v110 = __ldxr(p_shared_owners);
  while (__stxr(v110 + 1, p_shared_owners));
  v183 = v108;
LABEL_14:
  v14 = *(_DWORD *)(v7 + 8);
  v15 = (int *)(v7 + 8);
  v17 = *(unsigned int *)(v7 + 16);
  v16 = *(unsigned int *)(v7 + 20);
  v18 = *(_DWORD *)(v7 + 12) * v14;
  v19 = (v18 * v17);
  v20 = *(_DWORD *)(a1 + 280);
  if (v20 != 11)
  {
    if (v20 == 7)
    {
      if (*(_DWORD *)(a1 + 288) == 7)
      {
        if ((int)v16 >= 1)
        {
          v39 = 0;
          v40 = *(_QWORD *)(v7 + 24);
          v41 = *(_QWORD *)(v13 + 24);
          v42 = *(_QWORD *)(v10 + 24);
          v43 = v40;
          do
          {
            v44 = *(float *)(v40 + 4 * v39 * (int)v19);
            if ((int)v19 < 2)
            {
              v45 = 0;
            }
            else
            {
              v45 = 0;
              for (i = 1; i != v19; ++i)
              {
                if (*(float *)(v43 + 4 * i) < v44)
                {
                  v44 = *(float *)(v43 + 4 * i);
                  v45 = i;
                }
              }
            }
            *(float *)(v41 + 4 * v39) = (float)v45;
            *(float *)(v42 + 4 * v39++) = v44;
            v43 += 4 * (int)v19;
          }
          while (v39 != v16);
        }
        goto LABEL_183;
      }
      goto LABEL_202;
    }
    if (v20 == 6)
    {
      if (*(_DWORD *)(a1 + 288) == 7)
      {
        if ((int)v16 >= 1)
        {
          v21 = 0;
          v22 = *(_QWORD *)(v7 + 24);
          v23 = *(_QWORD *)(v13 + 24);
          v24 = *(_QWORD *)(v10 + 24);
          v25 = v22;
          do
          {
            v26 = *(float *)(v22 + 4 * v21 * (int)v19);
            if ((int)v19 < 2)
            {
              v27 = 0;
            }
            else
            {
              v27 = 0;
              for (j = 1; j != v19; ++j)
              {
                if (*(float *)(v25 + 4 * j) > v26)
                {
                  v26 = *(float *)(v25 + 4 * j);
                  v27 = j;
                }
              }
            }
            *(float *)(v23 + 4 * v21) = (float)v27;
            *(float *)(v24 + 4 * v21++) = v26;
            v25 += 4 * (int)v19;
          }
          while (v21 != v16);
        }
        goto LABEL_183;
      }
LABEL_202:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Axis not supported");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_77:
    v101 = v14;
    v102 = v210 * (uint64_t)(int)v19;
    v206 = v7;
    v207 = v185;
    if (v185)
    {
      v103 = (unint64_t *)&v185->__shared_owners_;
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
      v14 = *v15;
    }
    v105 = 0;
    v205 = 0;
    do
    {
      v14 *= *(_DWORD *)(v7 + 12 + v105);
      v105 += 4;
    }
    while (v105 != 12);
    v205 = v14;
    v106 = (void (*)(void))MEMORY[0x1E0C8C330];
    switch(*(_DWORD *)(a1 + 280))
    {
      case 2:
        v106 = (void (*)(void))scalar_vDSP_pve;
        break;
      case 3:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&__B, v7 + 8);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v206, &__B);
        v111 = (std::__shared_weak_count *)*((_QWORD *)&__B + 1);
        if (*((_QWORD *)&__B + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&__B + 1) + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        vvlogf(*(float **)(v206 + 24), *(const float **)(v7 + 24), &v205);
        goto LABEL_100;
      case 4:
      case 5:
        break;
      case 8:
        v106 = (void (*)(void))MEMORY[0x1E0C8C310];
        break;
      case 9:
        v106 = (void (*)(void))MEMORY[0x1E0C8C1A8];
        break;
      case 0xA:
        v106 = (void (*)(void))MEMORY[0x1E0C8C218];
        break;
      case 0xB:
        if ((*(_DWORD *)(a1 + 288) | 4) == 7)
          goto LABEL_203;
        v106 = (void (*)(void))scalar_vDSP_vargmax;
        break;
      case 0xC:
        if ((*(_DWORD *)(a1 + 288) | 4) == 7)
        {
LABEL_203:
          v174 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v174, "Only reduce on single axis is supported");
          __cxa_throw(v174, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v106 = (void (*)(void))scalar_vDSP_vargmin;
        break;
      default:
LABEL_100:
        v106 = (void (*)(void))MEMORY[0x1E0C8C2F0];
        break;
    }
    v114 = 12;
    v115 = *(unsigned int *)(v10 + 8);
    do
    {
      v115 *= *(unsigned int *)(v10 + v114);
      v114 += 4;
    }
    while (v114 != 24);
    v180 = v115;
    v190 = *(_QWORD *)(v206 + 24);
    v203 = *(_QWORD *)(v10 + 24);
    v116 = *(_DWORD *)(a1 + 288);
    switch(v116)
    {
      case 1:
      case 3:
      case 7:
        v117 = *v15;
        if (v116 == 7)
        {
          v117 *= *(_DWORD *)(v7 + 12) * *(_DWORD *)(v7 + 16);
        }
        else if (v116 == 3)
        {
          v117 *= *(_DWORD *)(v7 + 12);
        }
        v120 = *(_QWORD *)(v206 + 24);
        v121 = *(_QWORD *)(v10 + 24);
        if (v115 << 32)
        {
          if ((unint64_t)(int)v115 <= 1)
            v122 = 1;
          else
            v122 = (int)v115;
          do
          {
            ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD))v106)(v120, 1, v121, v117);
            v121 += 4;
            v120 += 4 * v117;
            --v122;
          }
          while (v122);
        }
        goto LABEL_172;
      case 2:
        v117 = *(_DWORD *)(v7 + 12);
        if (*(int *)(v10 + 20) >= 1)
        {
          v123 = 0;
          v124 = 0;
          v187 = *(_DWORD *)(v7 + 12);
          v125 = v117;
          v192 = 4 * (int)v19;
          v199 = 4 * v18;
          v126 = *(_QWORD *)(v206 + 24);
          do
          {
            v195 = v123;
            if (*(int *)(v10 + 16) >= 1)
            {
              v127 = 0;
              v128 = v126;
              v191 = v126;
              do
              {
                if (*(int *)(v10 + 8) >= 1)
                {
                  v129 = 0;
                  v130 = v124;
                  v131 = v128;
                  v132 = v203 + 4 * v124;
                  do
                  {
                    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v106)(v131, v101, v132, v125);
                    ++v129;
                    v132 += 4;
                    v131 += 4;
                  }
                  while (v129 < *(int *)(v10 + 8));
                  v124 = v130 + v129;
                  v126 = v191;
                }
                ++v127;
                v128 += v199;
              }
              while (v127 < *(int *)(v10 + 16));
            }
            v123 = v195 + 1;
            v126 += v192;
          }
          while (v195 + 1 < *(int *)(v10 + 20));
          v117 = v187;
        }
        goto LABEL_172;
      case 4:
        v202 = *(unsigned int *)(v10 + 20);
        if ((int)v202 < 1)
        {
          v117 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          v155 = 0;
          v198 = *(_DWORD *)(v7 + 16);
          v156 = (int)v19;
          v157 = *(_DWORD *)(v10 + 12) * *(_DWORD *)(v10 + 8) + 1;
          do
          {
            v158 = v190 + 4 * v155 * v156;
            v159 = v157;
            while (--v159)
            {
              v160 = v158 + 4;
              v106();
              v203 += 4;
              v158 = v160;
            }
            ++v155;
          }
          while (v155 != v202);
          v117 = v198;
        }
        goto LABEL_172;
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        goto LABEL_204;
      case 8:
        v117 = v210;
        v144 = v211;
        if (v211 >= 1)
        {
          v182 = 0;
          v145 = 0;
          v177 = v210;
          v146 = v210;
          v179 = 4 * (int)v102;
          v147 = v209;
          v189 = 4 * v18;
          v201 = 4 * v101;
          do
          {
            if (v147 >= 1)
            {
              v148 = 0;
              v149 = v190;
              do
              {
                if (*(int *)(v10 + 12) >= 1)
                {
                  v194 = v149;
                  v197 = v148;
                  v150 = 0;
                  do
                  {
                    if (*(int *)(v10 + 8) >= 1)
                    {
                      v151 = 0;
                      v152 = v145;
                      v153 = v149;
                      v154 = v203 + 4 * v145;
                      do
                      {
                        ((void (*)(uint64_t, _QWORD, uint64_t, _QWORD))v106)(v153, (int)v19, v154, v146);
                        ++v151;
                        v154 += 4;
                        v153 += 4;
                      }
                      while (v151 < *(int *)(v10 + 8));
                      v145 = v152 + v151;
                    }
                    ++v150;
                    v149 += v201;
                  }
                  while (v150 < *(int *)(v10 + 12));
                  v147 = v209;
                  v149 = v194;
                  v148 = v197;
                }
                ++v148;
                v149 += v189;
              }
              while (v148 < v147);
              v144 = v211;
            }
            v190 += v179;
            ++v182;
          }
          while (v182 < v144);
          v117 = v177;
        }
        goto LABEL_172;
      case 16:
        v133 = v210;
        v117 = v211;
        if (v210 >= 1)
        {
          v181 = 0;
          v134 = 0;
          v176 = v211;
          v135 = v211;
          v178 = 4 * (int)v19;
          v136 = v209;
          v188 = 4 * v18;
          v200 = 4 * v101;
          do
          {
            if (v136 >= 1)
            {
              v137 = 0;
              v138 = v190;
              do
              {
                if (*(int *)(v10 + 12) >= 1)
                {
                  v193 = v138;
                  v196 = v137;
                  v139 = 0;
                  do
                  {
                    if (*(int *)(v10 + 8) >= 1)
                    {
                      v140 = 0;
                      v141 = v134;
                      v142 = v138;
                      v143 = v203 + 4 * v134;
                      do
                      {
                        ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD))v106)(v142, v102, v143, v135);
                        ++v140;
                        v143 += 4;
                        v142 += 4;
                      }
                      while (v140 < *(int *)(v10 + 8));
                      v134 = v141 + v140;
                    }
                    ++v139;
                    v138 += v200;
                  }
                  while (v139 < *(int *)(v10 + 12));
                  v136 = v209;
                  v138 = v193;
                  v137 = v196;
                }
                ++v137;
                v138 += v188;
              }
              while (v137 < v136);
              v133 = v210;
            }
            v190 += v178;
            ++v181;
          }
          while (v181 < v133);
          v117 = v176;
        }
        goto LABEL_172;
      default:
        if (v116 != 31)
        {
LABEL_204:
          v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v175, "Invalid axis");
          __cxa_throw(v175, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v118 = 0;
        v119 = *(_DWORD *)(v7 + 8);
        do
        {
          v119 *= *(_DWORD *)(v7 + 12 + v118);
          v118 += 4;
        }
        while (v118 != 12);
        ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD))v106)(v190, 1, v203, v119);
        v117 = v119;
LABEL_172:
        *(float *)&__B = 1.0 / (float)v117;
        v161 = *(_DWORD *)(a1 + 280);
        if (v161 == 1)
        {
          v162 = 0;
          v163 = *(int *)(v10 + 8);
          do
          {
            v163 *= *(int *)(v10 + 12 + v162);
            v162 += 4;
          }
          while (v162 != 12);
          vDSP_vsmul(*(const float **)(v10 + 24), 1, (const float *)&__B, *(float **)(v10 + 24), 1, v163);
        }
        else if (v161 == 5)
        {
          v204 = v180;
          vvsqrtf(*(float **)(v10 + 24), *(const float **)(v10 + 24), &v204);
        }
        v164 = v207;
        if (v207)
        {
          v165 = (unint64_t *)&v207->__shared_owners_;
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        break;
    }
    goto LABEL_183;
  }
  if (*(_DWORD *)(a1 + 288) != 4)
    goto LABEL_77;
  if ((int)v16 >= 1)
  {
    v47 = v7;
    v48 = 0;
    v49 = *(_QWORD *)(v47 + 24);
    v50 = *(_QWORD *)(v10 + 24);
    v51 = (int)v19;
    v52 = v18 & 0x1FLL;
    if ((unint64_t)v18 >> 5 <= 1)
      v53 = 1;
    else
      v53 = (unint64_t)v18 >> 5;
    do
    {
      v54 = (float32x4_t *)(v50 + 4 * v18 * (int)v48);
      if ((int)v17 > 1)
      {
        v55 = (_OWORD *)(v49 + 4 * v48 * v51);
        if (v18 < 0x20)
        {
          v57 = (_OWORD *)(v49 + 4 * v48 * v51);
          if (v52)
            goto LABEL_69;
        }
        else
        {
          v56 = 0;
          v57 = (_OWORD *)(v49 + 4 * v48 * v51);
          do
          {
            v58 = v18;
            v59 = 1;
            v61 = *(float32x4_t *)v57;
            v62 = *((float32x4_t *)v57 + 1);
            v63 = *((float32x4_t *)v57 + 2);
            v64 = *((float32x4_t *)v57 + 3);
            v60 = v57 + 4;
            v65 = *(float32x4_t *)v60;
            v66 = *((float32x4_t *)v60 + 1);
            v67 = *((float32x4_t *)v60 + 2);
            v68 = *((float32x4_t *)v60 + 3);
            v57 = v60 + 4;
            v69 = 0uLL;
            v70 = 0uLL;
            v71 = 0uLL;
            v72 = 0uLL;
            v73 = 0uLL;
            v74 = 0uLL;
            v75 = 0uLL;
            v76 = 0uLL;
            do
            {
              v77 = (float32x4_t *)((char *)v55 + 4 * v58);
              v78 = *v77;
              v79 = v77[1];
              v80 = v77[2];
              v81 = v77[3];
              v77 += 4;
              v82 = v77[1];
              v83 = v77[2];
              v84 = v77[3];
              v85 = (int8x16_t)vdupq_n_s32(v59);
              v86 = (int8x16_t)vcgtq_f32(v78, v61);
              v61 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v78, (int8x16_t)v61);
              v69 = vbslq_s8(v86, v85, v69);
              v87 = (int8x16_t)vcgtq_f32(v79, v62);
              v62 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v79, (int8x16_t)v62);
              v70 = vbslq_s8(v87, v85, v70);
              v88 = (int8x16_t)vcgtq_f32(v80, v63);
              v63 = (float32x4_t)vbslq_s8(v88, (int8x16_t)v80, (int8x16_t)v63);
              v71 = vbslq_s8(v88, v85, v71);
              v89 = (int8x16_t)vcgtq_f32(v81, v64);
              v64 = (float32x4_t)vbslq_s8(v89, (int8x16_t)v81, (int8x16_t)v64);
              v72 = vbslq_s8(v89, v85, v72);
              v90 = (int8x16_t)vcgtq_f32(*v77, v65);
              v65 = (float32x4_t)vbslq_s8(v90, *(int8x16_t *)v77, (int8x16_t)v65);
              v73 = vbslq_s8(v90, v85, v73);
              v91 = (int8x16_t)vcgtq_f32(v82, v66);
              v66 = (float32x4_t)vbslq_s8(v91, (int8x16_t)v82, (int8x16_t)v66);
              v74 = vbslq_s8(v91, v85, v74);
              v92 = (int8x16_t)vcgtq_f32(v83, v67);
              v67 = (float32x4_t)vbslq_s8(v92, (int8x16_t)v83, (int8x16_t)v67);
              v75 = vbslq_s8(v92, v85, v75);
              v93 = (int8x16_t)vcgtq_f32(v84, v68);
              v68 = (float32x4_t)vbslq_s8(v93, (int8x16_t)v84, (int8x16_t)v68);
              v94 = (uint32x4_t)vbslq_s8(v93, v85, v76);
              v76 = (int8x16_t)v94;
              ++v59;
              v58 += v18;
            }
            while (v17 != v59);
            *v54 = vcvtq_f32_u32((uint32x4_t)v69);
            v54[1] = vcvtq_f32_u32((uint32x4_t)v70);
            v54[2] = vcvtq_f32_u32((uint32x4_t)v71);
            v54[3] = vcvtq_f32_u32((uint32x4_t)v72);
            v95 = v54 + 4;
            *v95 = vcvtq_f32_u32((uint32x4_t)v73);
            v95[1] = vcvtq_f32_u32((uint32x4_t)v74);
            v95[2] = vcvtq_f32_u32((uint32x4_t)v75);
            v95[3] = vcvtq_f32_u32(v94);
            v54 = v95 + 4;
            ++v56;
            v55 = v57;
          }
          while (v56 != v53);
          if (v52)
          {
LABEL_69:
            for (k = 0; k != v52; ++k)
            {
              v97 = 0;
              v98 = *((float *)v57 + k);
              v99 = v18;
              for (m = 1; m != v17; ++m)
              {
                if (*((float *)v57 + k + v99) > v98)
                {
                  v98 = *((float *)v57 + k + v99);
                  v97 = m;
                }
                v99 += v18;
              }
              v54->f32[k] = (float)v97;
            }
          }
        }
      }
      else
      {
        bzero(v54, 4 * v18);
      }
      ++v48;
    }
    while (v48 != v16);
  }
LABEL_183:
  if (v183)
  {
    v167 = (unint64_t *)&v183->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
LABEL_188:
  if (v184)
  {
    v169 = (unint64_t *)&v184->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  if (v185)
  {
    v171 = (unint64_t *)&v185->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  if (__p)
  {
    v213 = __p;
    operator delete(__p);
  }
}

void sub_190E21410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  void *v32;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;

  __cxa_free_exception(v32);
  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
      std::__shared_weak_count::__release_weak(a25);
    }
  }
  if (a13)
  {
    v36 = (unint64_t *)&a13->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a14)
  {
    v38 = (unint64_t *)&a14->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a15)
  {
    v40 = (unint64_t *)&a15->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::reduce_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  Espresso *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void **, size_t, size_t);
  uint64_t (*v65)(_QWORD);
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _BYTE v70[176];
  _DWORD v71[90];
  _BYTE v72[24];
  _BYTE v73[24];
  char v74[40];
  void *__p;
  void *v76;
  char v77[40];
  void *v78;
  void *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint8_t buf[4];
  int v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 328);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 16))(v7, a2, a3, a4);
    return;
  }
  v8 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v8 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v10 = 0;
    v86 = 0;
    v87 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v8 + 160);
    v9 = *(std::__shared_weak_count **)(*v8 + 168);
    v86 = v10;
    v87 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
  }
  v11 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v11 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11))
  {
    v12 = 0;
    v84 = 0;
    v85 = 0;
  }
  else
  {
    v29 = *v11;
    v12 = *(_QWORD *)(*v11 + 160);
    v30 = *(std::__shared_weak_count **)(v29 + 168);
    v84 = v12;
    v85 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v13)
  {
    v15 = v13[22];
    v14 = (std::__shared_weak_count *)v13[23];
    v82 = v15;
    v83 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v82 = 0;
    v83 = 0;
  }
  v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v18)
  {
    v19 = (std::__shared_weak_count *)v18[23];
    v80 = v18[22];
    v81 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v80 = 0;
    v81 = 0;
  }
  Espresso::abstract_blob_container::shape(v77, *(_QWORD *)*a4);
  Espresso::abstract_blob_container::shape(v74, *(_QWORD *)*a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v73, (const Espresso::layer_shape *)v77, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v72, (const Espresso::layer_shape *)v74, 0);
  v22 = *(void **)(a1 + 344);
  if (!v22)
  {
    bzero(v70, 0x218uLL);
    v71[89] = *(_DWORD *)(a1 + 284);
    if (v10)
    {
      v69[0] = v10;
      v69[1] = v9;
      if (v9)
      {
        v23 = (unint64_t *)&v9->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)v70, (uint64_t)v69, (uint64_t)v73, 1);
      if (!v9)
        goto LABEL_50;
      v25 = (unint64_t *)&v9->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (v26)
        goto LABEL_50;
    }
    else
    {
      if (!v15)
      {
        v61 = "Reduce kernel only supports FP32 or FP16 inputs";
        goto LABEL_109;
      }
      v68[0] = v15;
      v68[1] = v14;
      if (v14)
      {
        v33 = (unint64_t *)&v14->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)v70, (uint64_t)v68, (uint64_t)v73, 1);
      if (!v14)
        goto LABEL_50;
      v35 = (unint64_t *)&v14->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      v9 = v14;
      if (v36)
      {
LABEL_50:
        if (v84)
        {
          v37 = v85;
          v67[0] = v84;
          v67[1] = v85;
          if (v85)
          {
            v38 = (unint64_t *)&v85->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)v71, (uint64_t)v67, (uint64_t)v72, 1);
          if (!v37)
            goto LABEL_67;
          v41 = (unint64_t *)&v37->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
LABEL_65:
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
LABEL_67:
          v46 = *(unsigned int *)(a1 + 280);
          if (v46 >= 0xD || ((0x1F1Bu >> v46) & 1) == 0)
            Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("reduce_kernel %zu should have fallbacked to CPU engine.", v46);
          v71[88] = dword_191ACD200[v46];
          v64 = bnns_alloc_capmem;
          v65 = MEMORY[0x1E0C834A8];
          v47 = *(_QWORD *)(a1 + 352);
          v62 = 0;
          v63 = v47;
          if ((v47 & 1) == 0)
          {
            if ((_DWORD)v40)
            {
              if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
                dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
              Espresso::BNNSEngine::reduce_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested;
            }
          }
          if (Espresso::BNNSEngine::reduce_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
          {
            Espresso::espresso_os_log_subsystem(v40, (const char *)v46);
            v48 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109376;
              v89 = v62;
              v90 = 2048;
              v91 = v63;
              _os_log_debug_impl(&dword_190DAF000, v48, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerReduction: flags=%d, n_threads=%zu", buf, 0x12u);
            }

          }
          v22 = (void *)MEMORY[0x19401AA14](v70, &v62);
          *(_QWORD *)(a1 + 344) = v22;
          v10 = v86;
          v12 = v84;
          goto LABEL_75;
        }
        if (v80)
        {
          v37 = v81;
          v66[0] = v80;
          v66[1] = v81;
          if (v81)
          {
            v43 = (unint64_t *)&v81->__shared_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)v71, (uint64_t)v66, (uint64_t)v72, 1);
          if (!v37)
            goto LABEL_67;
          v45 = (unint64_t *)&v37->__shared_owners_;
          do
            v42 = __ldaxr(v45);
          while (__stlxr(v42 - 1, v45));
          goto LABEL_65;
        }
        v61 = "Reduce kernel only supports FP32 or FP16 outputs";
LABEL_109:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v61);
      }
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    goto LABEL_50;
  }
LABEL_75:
  if (BNNSFilterApply(v22, *(const void **)(v10 + 24), *(void **)(v12 + 24)) == -1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Reduce kernel failed in BNNS");
  if (__p)
  {
    v76 = __p;
    operator delete(__p);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  v49 = v81;
  if (v81)
  {
    v50 = (unint64_t *)&v81->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v83;
  if (v83)
  {
    v53 = (unint64_t *)&v83->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v85;
  if (v85)
  {
    v56 = (unint64_t *)&v85->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v87;
  if (v87)
  {
    v59 = (unint64_t *)&v87->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_190E21BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v8 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v8;
    operator delete(v8);
  }
  v9 = *(void **)(v6 - 200);
  if (v9)
  {
    *(_QWORD *)(v6 - 192) = v9;
    operator delete(v9);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 128);
  _Unwind_Resume(a1);
}

void Espresso::general_concat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, int ***a4)
{
  uint64_t *v4;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  int v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  size_t v20;
  int **v21;
  int **v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int **v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int *v32;
  int *v33;
  int *v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  char *v45;
  int **v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  int **v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int **v72;
  int **v73;
  unint64_t v74;
  uint64_t v75;
  int **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  int *v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  _BYTE v88[12];
  unsigned int v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  BNNSFilterParameters v92;
  BNNSNDArrayDescriptor v93;
  BNNSNDArrayDescriptor v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  void *v103;
  void *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)a3;
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    return;
  if (*v4 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v4 + 32))(*v4))
  {
    v41 = *v4;
    v8 = *(_QWORD *)(*v4 + 160);
    v42 = *(std::__shared_weak_count **)(v41 + 168);
    v105 = v8;
    v106 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(p_shared_owners);
      while (__stxr(v44 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v105 = 0;
    v106 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v97, **(_QWORD **)a3);
  v9 = *(_DWORD *)(a1 + 280);
  if ((v9 & 0x80000000) != 0)
  {
    v10 = v102;
    if (v101 == 1)
      v11 = 4;
    else
      v11 = 5;
    if (v102 == -1)
      v10 = v11;
    v9 += v10;
  }
  if (*(_BYTE *)(a1 + 284))
  {
    v12 = v102;
    if (v101 == 1)
      v13 = 4;
    else
      v13 = 5;
    if (v102 == -1)
      v12 = v13;
    v9 = v12 + ~v9;
  }
  if (!v8)
    goto LABEL_105;
  v14 = *(_DWORD **)(v8 + 24);
  v15 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (!*(_BYTE *)(a1 + 285))
  {
    if (v9 || v15 != 100)
    {
      if (v9)
      {
        switch(v9)
        {
          case 1u:
            v91 = v100 * (uint64_t)v99 * v101;
            v68 = v98 * v97;
            goto LABEL_122;
          case 2u:
            v91 = v101 * (uint64_t)v100;
            v70 = v99;
            v71 = v98 * v97;
            goto LABEL_121;
          case 3u:
            v70 = v100;
            v91 = v101;
            v71 = v98 * v97 * v99;
LABEL_121:
            v68 = v71 * v70;
            goto LABEL_122;
          case 4u:
            v68 = v98 * v97 * v99 * v100 * v101;
            v69 = 1;
            goto LABEL_119;
          default:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid axis");
        }
      }
      v68 = v97;
      v69 = v99 * (uint64_t)v98 * v100 * v101;
LABEL_119:
      v91 = v69;
LABEL_122:
      v72 = *a4;
      v73 = a4[1];
      if (v73 != *a4)
      {
        v74 = 0;
        v75 = 4 * v68;
        v89 = v9;
        do
        {
          if ((int)v74 < (unint64_t)(((char *)v73 - (char *)v72) >> 4))
          {
            v76 = &v72[2 * (int)v74];
            if (*v76)
            {
              if (!(*(unsigned int (**)(int *))(*(_QWORD *)*v76 + 32))(*v76))
              {
                v77 = *((_QWORD *)*v76 + 20);
                v78 = (std::__shared_weak_count *)*((_QWORD *)*v76 + 21);
                if (v78)
                {
                  v79 = (unint64_t *)&v78->__shared_owners_;
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                }
                if (v77)
                {
                  v90 = v78;
                  v81 = (*a4)[2 * v74];
                  v82 = v81[2];
                  if (v9)
                  {
                    v82 = v81[3] * (uint64_t)(int)v82;
                    if (v9 != 1)
                    {
                      v82 *= v81[4];
                      if (v9 >= 3)
                      {
                        v82 *= v81[5];
                        if (v9 != 3)
                          v82 *= v81[6];
                      }
                    }
                  }
                  if (v91)
                  {
                    v83 = *(_DWORD **)(v77 + 24);
                    v84 = v14;
                    v85 = v91;
                    do
                    {
                      if (v82)
                      {
                        if (v82 == 1)
                          *v84 = *v83;
                        else
                          memcpy(v84, v83, 4 * v82);
                      }
                      v84 = (_DWORD *)((char *)v84 + v75);
                      v83 += v82;
                      --v85;
                    }
                    while (v85);
                  }
                  v14 += v82;
                  v9 = v89;
                  v78 = v90;
                }
                if (v78)
                {
                  v86 = (unint64_t *)&v78->__shared_owners_;
                  do
                    v87 = __ldaxr(v86);
                  while (__stlxr(v87 - 1, v86));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
              }
            }
          }
          ++v74;
          v72 = *a4;
          v73 = a4[1];
        }
        while (v74 < ((char *)v73 - (char *)*a4) >> 4);
      }
    }
    else
    {
      v45 = (char *)*a4;
      v46 = a4[1];
      if (v46 != *a4)
      {
        v47 = 0;
        v48 = 0;
        do
        {
          if ((int)v47 < (unint64_t)(((char *)v46 - v45) >> 4)
            && (v49 = &v45[16 * (int)v47], *(_QWORD *)v49)
            && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v49 + 32))(*(_QWORD *)v49))
          {
            v51 = *(_QWORD *)(*(_QWORD *)v49 + 160);
            v50 = *(std::__shared_weak_count **)(*(_QWORD *)v49 + 168);
            v95 = v51;
            v96 = v50;
            if (v50)
            {
              v52 = (unint64_t *)&v50->__shared_owners_;
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            if (v51)
            {
              memset(&v94.data_type, 0, 32);
              memset(&v94.size[1], 0, 128);
              *(_OWORD *)&v94.flags = 0u;
              v94.layout = BNNSDataLayout4DLastMajor;
              v54 = *(_QWORD *)(v51 + 8);
              *(_QWORD *)&v55 = (int)v54;
              *((_QWORD *)&v55 + 1) = SHIDWORD(v54);
              *(_OWORD *)v94.size = v55;
              v56 = *(_QWORD *)(v51 + 16);
              *(_QWORD *)&v55 = (int)v56;
              *((_QWORD *)&v55 + 1) = SHIDWORD(v56);
              *(_OWORD *)&v94.size[2] = v55;
              v94.data = *(void **)(v51 + 24);
              v94.data_type = BNNSDataTypeFloat32;
              v94.data_scale = 1.0;
              memset(&v93.data_type, 0, 32);
              memset(&v93.stride[1], 0, 64);
              memset(&v93.size[1], 0, 64);
              *(_OWORD *)&v93.flags = 0u;
              v93.layout = BNNSDataLayout4DLastMajor;
              v57 = *(_QWORD *)(v51 + 8);
              *(_QWORD *)&v55 = (int)v57;
              *((_QWORD *)&v55 + 1) = SHIDWORD(v57);
              *(_OWORD *)v93.size = v55;
              v58 = *(_QWORD *)(v51 + 16);
              *(_QWORD *)&v55 = (int)v58;
              *((_QWORD *)&v55 + 1) = SHIDWORD(v58);
              *(_OWORD *)&v93.size[2] = v55;
              v93.stride[0] = 1;
              v93.stride[1] = *(int *)(v105 + 8);
              v93.stride[2] = *(int *)(v105 + 12) * (uint64_t)SLODWORD(v93.stride[1]);
              v93.stride[3] = *(int *)(v105 + 16) * (uint64_t)SLODWORD(v93.stride[2]);
              v93.stride[4] = *(int *)(v105 + 20) * (uint64_t)SLODWORD(v93.stride[3]);
              v93.data = (void *)(*(_QWORD *)(v105 + 24) + 4 * v48);
              v93.data_type = BNNSDataTypeFloat32;
              v93.data_scale = 1.0;
              memset(&v92, 0, sizeof(v92));
              v59 = *(_QWORD *)(a1 + 8);
              if (v59 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v59 == &off_1E2D5E820)
                v92.n_threads = *(_QWORD *)(v59 + 168);
              if (BNNSCopy(&v93, &v94, &v92))
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("BNNS error");
              v48 += *(int *)(v51 + 8);
            }
            if (v50)
            {
              v60 = (unint64_t *)&v50->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
          }
          else
          {
            v95 = 0;
            v96 = 0;
          }
          ++v47;
          v45 = (char *)*a4;
          v46 = a4[1];
        }
        while (v47 < ((char *)v46 - (char *)*a4) >> 4);
      }
    }
    goto LABEL_105;
  }
  MEMORY[0x1E0C80A78](v16);
  v19 = &v88[-v18];
  if (v17 >= 0x200)
    v20 = 512;
  else
    v20 = v17;
  bzero(&v88[-v18], v20);
  v22 = *a4;
  v21 = a4[1];
  v23 = v21 == *a4;
  v91 = (uint64_t)v88;
  if (v23)
  {
    v25 = 1;
    v26 = 1;
    v22 = v21;
    goto LABEL_94;
  }
  v24 = 0;
  v25 = 1;
  v26 = 1;
  do
  {
    if ((int)v24 >= (unint64_t)(((char *)v21 - (char *)v22) >> 4)
      || (v27 = &v22[2 * (int)v24], !*v27)
      || (*(unsigned int (**)(int *))(*(_QWORD *)*v27 + 32))(*v27))
    {
      *(_QWORD *)&v94.flags = 0;
      v94.size[0] = 0;
LABEL_152:
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("general_concat_cpu: source blob %d is null", v24);
    }
    v28 = *((_QWORD *)*v27 + 20);
    v29 = (std::__shared_weak_count *)*((_QWORD *)*v27 + 21);
    *(_QWORD *)&v94.flags = v28;
    v94.size[0] = (size_t)v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    if (!v28)
      goto LABEL_152;
    *(_QWORD *)&v19[8 * v24] = *(_QWORD *)(v28 + 24);
    if (v24)
    {
      v32 = (*a4)[2 * v24];
      v33 = **a4;
      if (v32[2] != v33[2])
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched width: ", 0, v24);
      if (v102 == -1)
      {
        if (v32[3] != v33[3])
LABEL_154:
          Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched height: ", 0, v24);
        if (v32[4] != v33[4])
LABEL_155:
          Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched depth: ", 0, v24);
        if (v32[5] != v33[5])
LABEL_156:
          Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched batch size: ", 0, v24);
        if (v101 != 1)
        {
LABEL_50:
          if (v32[6] != v33[6])
            Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched sequence length: ", 0, v24);
        }
      }
      else if ((int)v102 > 1)
      {
        if (v32[3] != v33[3])
          goto LABEL_154;
        if (v102 > 2)
        {
          if (v32[4] != v33[4])
            goto LABEL_155;
          if (v102 > 3)
          {
            if (v32[5] != v33[5])
              goto LABEL_156;
            if (v102 >= 5)
              goto LABEL_50;
          }
        }
      }
    }
    else
    {
      switch(v9)
      {
        case 0u:
          v34 = **a4;
          v25 = v34[3] * (uint64_t)v34[2] * v34[4] * v34[5] * v34[6];
          v26 = 1;
          break;
        case 1u:
          v36 = **a4;
          v26 = v36[2];
          v37 = v36[4] * (uint64_t)v36[3] * v36[5];
          goto LABEL_56;
        case 2u:
          v36 = **a4;
          v26 = v36[3] * (uint64_t)v36[2];
          v37 = v36[5] * (uint64_t)v36[4];
LABEL_56:
          v25 = v37 * v36[6];
          break;
        case 3u:
          v38 = **a4;
          v26 = v38[3] * (uint64_t)v38[2] * v38[4];
          v25 = v38[6] * (uint64_t)v38[5];
          break;
        case 4u:
          v35 = **a4;
          v26 = v35[3] * (uint64_t)v35[2] * v35[4] * v35[5];
          v25 = v35[6];
          break;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid axis");
      }
    }
    if (v29)
    {
      v39 = (unint64_t *)&v29->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    ++v24;
    v22 = *a4;
    v21 = a4[1];
  }
  while (v24 < ((char *)v21 - (char *)*a4) >> 4);
  if (!v25)
    goto LABEL_105;
LABEL_94:
  v62 = 0;
  v63 = v21;
  do
  {
    if (v63 == v22)
    {
      v63 = v22;
    }
    else
    {
      v64 = 0;
      do
      {
        if (v26)
        {
          if (v26 == 1)
          {
            *v14 = **(_DWORD **)&v19[8 * v64];
          }
          else
          {
            memcpy(v14, *(const void **)&v19[8 * v64], 4 * v26);
            v22 = *a4;
            v21 = a4[1];
          }
        }
        *(_QWORD *)&v19[8 * v64++] += 4 * v26;
        v14 += v26;
        v63 = v21;
      }
      while (v64 < ((char *)v21 - (char *)v22) >> 4);
    }
    ++v62;
  }
  while (v62 != v25);
LABEL_105:
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  v65 = v106;
  if (v106)
  {
    v66 = (unint64_t *)&v106->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_190E22660(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(_QWORD *)(v1 - 136) = v3;
    operator delete(v3);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>(char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(a1, a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_190E22ABC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_190E22CD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_fill_kernel::has_dynamic_top_shape(Espresso::generic_fill_kernel *this, uint64_t a2)
{
  return a2 && *((_BYTE *)this + 312) != 0;
}

void Espresso::generic_get_shape_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  __int128 v10;
  char *v11;
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;
  void *__p[2];
  uint64_t v17;
  __int128 v18;

  *(_QWORD *)&v18 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 284))
  {
    v4 = 1;
    if (*(_DWORD *)(a1 + 280) == -1)
    {
      v4 = *(_DWORD *)(*(_QWORD *)a2 + 20);
      if (v4 == -1)
      {
        if (*(_DWORD *)(*(_QWORD *)a2 + 16) == 1)
          v4 = 4;
        else
          v4 = 5;
      }
    }
    v15 = 0uLL;
    v12 = v4;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    v13 = v5;
    v14 = 1;
    __p[1] = 0;
    v17 = 0;
    __p[0] = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v6 = (char *)operator new(0x40uLL);
    *a3 = v6;
    a3[1] = v6;
    a3[2] = v6 + 64;
    v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&v12, &v18, (uint64_t)v6);
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 280) == -1;
    v15 = 0u;
    *(_OWORD *)__p = 0u;
    if (v8)
      v9 = 5;
    else
      v9 = 1;
    v17 = 0;
    v12 = v9;
    *(_QWORD *)&v10 = 0x100000001;
    *((_QWORD *)&v10 + 1) = 0x100000001;
    v13 = v10;
    v14 = -1;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v11 = (char *)operator new(0x40uLL);
    *a3 = v11;
    a3[1] = v11;
    a3[2] = v11 + 64;
    v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&v12, &v18, (uint64_t)v11);
  }
  a3[1] = v7;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_190E22E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = v19;
  *(_QWORD *)(v18 + 8) = v20;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_fill_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[24];
  void *__p[2];
  uint64_t v14;
  __int128 v15;

  *((_QWORD *)&v15 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (a2[1] == *a2)
  {
    *(_QWORD *)&v12[8] = 0;
    *(_QWORD *)&v12[16] = 0;
    v11 = *(_OWORD *)(a1 + 284);
    *(_QWORD *)v12 = *(_QWORD *)(a1 + 300);
    __p[1] = 0;
    v14 = 0;
    __p[0] = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v8 = (char *)operator new(0x40uLL);
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v8 + 64;
    v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v11, &v15, (uint64_t)v8);
  }
  else
  {
    if (*(_BYTE *)(a1 + 312))
    {
      v14 = 0;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)&v12[8] = 0u;
      *(_QWORD *)&v5 = 0x100000001;
      *((_QWORD *)&v5 + 1) = 0x100000001;
      v11 = v5;
      *(_QWORD *)v12 = 0xFFFFFFFF00000001;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v6 = (char *)operator new(0x40uLL);
    }
    else
    {
      v9 = *(_OWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 32);
      v11 = *(_OWORD *)v4;
      *(_OWORD *)v12 = v9;
      *(_QWORD *)&v12[16] = v10;
      __p[0] = 0;
      __p[1] = 0;
      v14 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *(const void **)(v4 + 40), *(_QWORD *)(v4 + 48), (uint64_t)(*(_QWORD *)(v4 + 48) - *(_QWORD *)(v4 + 40)) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v6 = (char *)operator new(0x40uLL);
    }
    *a3 = v6;
    a3[1] = v6;
    a3[2] = v6 + 64;
    v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v11, &v15, (uint64_t)v6);
  }
  a3[1] = v7;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_190E23060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::fill_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  std::vector<int>::size_type v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  unint64_t v17;
  std::vector<int>::pointer begin;
  uint64_t v19;
  unint64_t v20;
  std::vector<int>::pointer v21;
  int64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t j;
  float32x4_t *v30;
  float32x4_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  vDSP_Length v57;
  vDSP_Length v58;
  uint64_t v59;
  float *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  const char *v69;
  char *v70;
  std::__shared_weak_count *v71;
  _OWORD v72[2];
  uint64_t v73;
  void *__p[2];
  uint64_t v75;
  _QWORD v76[2];
  uint64_t v77;
  std::vector<int> v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  int32x4_t v81;
  _BYTE v82[24];
  __int128 v83;
  uint64_t v84;
  __int128 v85;

  v8 = *a3;
  if (a3[1] == *a3 || !*v8 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v85 = 0uLL;
  }
  else
  {
    v9 = *(_QWORD *)(*v8 + 160);
    v26 = *(_QWORD *)(*v8 + 168);
    *(_QWORD *)&v85 = v9;
    *((_QWORD *)&v85 + 1) = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  v10 = *(_QWORD **)a4;
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4 && *(_BYTE *)(a1 + 312))
  {
    v11 = *(_DWORD *)(a1 + 300);
    *(_OWORD *)&v82[8] = 0u;
    v83 = 0u;
    v84 = 0;
    v81 = *(int32x4_t *)(a1 + 284);
    *(_DWORD *)v82 = v11;
    *(_DWORD *)&v82[4] = -1;
    if (*v10 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
    {
      v65 = *v10;
      v12 = *(_QWORD *)(*v10 + 160);
      v66 = *(std::__shared_weak_count **)(v65 + 168);
      v79 = v12;
      v80 = v66;
      if (v66)
      {
        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(p_shared_owners);
        while (__stxr(v68 + 1, p_shared_owners));
      }
    }
    else
    {
      v12 = 0;
      v79 = 0;
      v80 = 0;
    }
    if (*(_QWORD *)(*(_QWORD *)a2 + 64))
    {
      v13 = *(int *)(v12 + 8);
      if (*(_DWORD *)(a1 + 308))
      {
        v14 = 0;
        v15 = *(int *)(v12 + 8);
        do
        {
          v15 *= *(int *)(v12 + 12 + v14);
          v14 += 4;
        }
        while (v14 != 12);
        if (v15 <= 5)
        {
          for (i = 0; i != 12; i += 4)
            v13 *= *(int *)(v12 + 12 + i);
          std::vector<int>::vector(&v78, v13);
          v17 = 0;
          begin = v78.__begin_;
          while (1)
          {
            v19 = 0;
            v20 = *(int *)(v12 + 8);
            do
            {
              v20 *= *(int *)(v12 + 12 + v19);
              v19 += 4;
            }
            while (v19 != 12);
            if (v20 <= v17)
              break;
            begin[v17] = (int)(float)(*(float *)(*(_QWORD *)(v12 + 24) + 4 * v17) + 0.5);
            ++v17;
          }
          v76[0] = 0;
          v76[1] = 0;
          v77 = 0;
          v21 = v78.__begin_;
          v22 = (char *)v78.__end_ - (char *)v78.__begin_;
          if (v78.__end_ != v78.__begin_)
          {
            v23 = v22 >> 2;
            if ((unint64_t)(v22 >> 2) <= 1)
              v23 = 1;
            v24 = v76;
            do
            {
              v25 = *v21++;
              *v24++ = v25;
              --v23;
            }
            while (v23);
          }
          HIDWORD(v77) = (unint64_t)v22 >> 2;
          Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v76, 0, (uint64_t)v72);
          v81 = (int32x4_t)v72[0];
          *(_OWORD *)v82 = v72[1];
          *(_QWORD *)&v82[16] = v73;
          if ((_QWORD)v83)
          {
            *((_QWORD *)&v83 + 1) = v83;
            operator delete((void *)v83);
          }
          v83 = *(_OWORD *)__p;
          v84 = v75;
          if (v78.__begin_)
          {
            v78.__end_ = v78.__begin_;
            operator delete(v78.__begin_);
          }
          goto LABEL_39;
        }
        v69 = "fill_kernel_cpu: invalid rank";
      }
      else
      {
        for (j = 0; j != 12; j += 4)
          v13 *= *(int *)(v12 + 12 + j);
        if (v13 == 5)
        {
          v30 = *(float32x4_t **)(v12 + 24);
          v31.i64[0] = 0x3F0000003F000000;
          v31.i64[1] = 0x3F0000003F000000;
          v81 = vcvtq_s32_f32(vaddq_f32(*v30, v31));
          *(_DWORD *)v82 = (int)(float)(v30[1].f32[0] + 0.5);
LABEL_39:
          Espresso::abstract_blob_container::shape((char *)v72, **a3);
          v32 = Espresso::layer_shape::operator==((uint64_t)v72, (uint64_t)&v81);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (!v32)
          {
            v33 = operator new(0x98uLL);
            v33[1] = 0;
            v34 = v33 + 1;
            v33[2] = 0;
            *v33 = &off_1E2DBE998;
            *((_OWORD *)v33 + 4) = 0u;
            *((_OWORD *)v33 + 5) = 0u;
            *((_OWORD *)v33 + 2) = 0u;
            *((_OWORD *)v33 + 3) = 0u;
            *((_OWORD *)v33 + 6) = 0u;
            *((_OWORD *)v33 + 7) = 0u;
            *((_OWORD *)v33 + 8) = 0u;
            v33[17] = 0;
            v33[18] = 0;
            *((_DWORD *)v33 + 12) = 1065353216;
            v33[7] = 0x1FFFFFFFFLL;
            v33[12] = 0;
            v33[13] = 0;
            v33[8] = 0;
            v33[9] = 0;
            *((_BYTE *)v33 + 88) = 0;
            v33[10] = 0;
            v33[3] = &off_1E2DA0BF0;
            v33[15] = 0;
            v33[16] = 0;
            *((_BYTE *)v33 + 144) = 0;
            *(_QWORD *)&v72[0] = v33 + 3;
            *((_QWORD *)&v72[0] + 1) = v33;
            *((_BYTE *)v33 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
            v35 = **a3;
            v70 = (char *)(v33 + 3);
            v71 = (std::__shared_weak_count *)v33;
            do
              v36 = __ldxr(v34);
            while (__stxr(v36 + 1, v34));
            (*(void (**)(uint64_t, int32x4_t *, char **))(*(_QWORD *)v35 + 16))(v35, &v81, &v70);
            v37 = v71;
            if (v71)
            {
              v38 = (unint64_t *)&v71->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v40 = (std::__shared_weak_count *)*((_QWORD *)&v72[0] + 1);
            if (*((_QWORD *)&v72[0] + 1))
            {
              v41 = (unint64_t *)(*((_QWORD *)&v72[0] + 1) + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
          }
          v44 = a3;
          v43 = *a3;
          v45 = 0uLL;
          if (v44[1] != v43)
          {
            if (*v43)
            {
              v46 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)*v43 + 32))(*v43, (__n128)0);
              v45 = 0uLL;
              if (!v46)
              {
                v45 = *(_OWORD *)(*v43 + 160);
                v47 = *(_QWORD *)(*v43 + 168);
                if (v47)
                {
                  v48 = (unint64_t *)(v47 + 8);
                  do
                    v49 = __ldxr(v48);
                  while (__stxr(v49 + 1, v48));
                }
              }
            }
          }
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
          v85 = v45;
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v53 = v80;
          if (v80)
          {
            v54 = (unint64_t *)&v80->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          if ((_QWORD)v83)
          {
            *((_QWORD *)&v83 + 1) = v83;
            operator delete((void *)v83);
          }
          v9 = v85;
          goto LABEL_73;
        }
        v69 = "Blob with full 5d shape is required as fill argument";
      }
    }
    else
    {
      v69 = "fill_kernel_cpu: dynamic parameters require interpreter";
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v69);
  }
LABEL_73:
  if (v9)
  {
    v56 = 0;
    v57 = *(int *)(v9 + 8);
    v58 = v57;
    do
    {
      v58 *= *(int *)(v9 + 12 + v56);
      v56 += 4;
    }
    while (v56 != 12);
    if (v58)
    {
      v59 = 0;
      v60 = *(float **)(v9 + 24);
      v61 = v9 + 12;
      do
      {
        v57 *= *(int *)(v61 + v59);
        v59 += 4;
      }
      while (v59 != 12);
      vDSP_vfill((const float *)(a1 + 280), v60, 1, v57);
    }
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_190E23648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  v27 = *(void **)(v25 - 88);
  if (v27)
  {
    *(_QWORD *)(v25 - 80) = v27;
    operator delete(v27);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 64);
  _Unwind_Resume(a1);
}

void JITBackendSignpostEmitter::startJITSegment(_QWORD *a1, char *a2)
{
  uint64_t v2;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  unint64_t *v11;
  _QWORD v12[5];
  uint8_t buf[16];
  _QWORD *v14;
  std::__shared_weak_count *v15;

  v2 = a1[1];
  if ((_DWORD)a2 != 1)
  {
    kdebug_trace();
    return;
  }
  v4 = (_QWORD *)a1[2];
  if (v4
  {
    v5 = (std::__shared_weak_count *)a1[3];
    v14 = v4;
    v15 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v4 = (_QWORD *)v4[18];
    if (v4)
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = ___ZN25JITBackendSignpostEmitter15startJITSegmentENS_11ComputeUnitE_block_invoke;
      v12[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
      v12[4] = v2;
      objc_msgSend(v4, "addCompletedHandler:", v12);
      kdebug_trace();
      if (!v5)
        return;
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0;
    v14 = 0;
    v15 = 0;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v4, a2);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_190DAF000, v10, OS_LOG_TYPE_DEBUG, "JITBackendSignpostEmitter: Excptected a metal batch for JIT_GPU layer", buf, 2u);
  }

  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v11);
    while (__stlxr(v9 - 1, v11));
LABEL_19:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_190E2386C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void Espresso::expand_dims_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  Espresso::copy_kernel_cpu::__compute(a3, a4);
}

void Espresso::squeeze_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  Espresso::copy_kernel_cpu::__compute(a3, a4);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::invalid_state_error>(a1);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_make_ssa>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a2 + 1120), (uint64_t)&v14);
  v4 = v3;
  if (v3)
  {
    v5 = (const void *)v3[3];
    v6 = (std::__shared_weak_count *)v4[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5
    {
      *a1 = v9;
      a1[1] = v6;
      if (!v6)
        return;
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (!v6)
        return;
    }
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_190E23988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_stack_nd_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v4;
  const Espresso::layer_shape *v5;
  std::vector<int> *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<int> *v12;
  uint64_t v13;
  std::vector<int> *v14;
  int v15;
  int v16;
  std::vector<int>::pointer begin;
  int64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  char *v22;
  char **v24[3];
  _QWORD v25[2];
  int v26;
  int v27;
  std::vector<int> __p;
  uint64_t v29;
  std::vector<int> *v30;
  _QWORD v31[2];
  char v32;
  __int128 v33;
  std::vector<int> *v34;
  char *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  __int128 v39;

  *(_QWORD *)&v39 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a2[1];
  if (v5 == *a2)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_general_slice_kernel: atleast one bottom blob required");
  v29 = 0;
  v30 = 0;
  v31[0] = 0;
  do
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v25, v4, 0);
    Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v25);
    v7 = v30;
    if ((unint64_t)v30 >= v31[0])
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - v29) >> 3);
      v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v31[0] - v29) >> 3) > v9)
        v9 = 0x5555555555555556 * ((v31[0] - v29) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v31[0] - v29) >> 3) >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v36 = v31;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v10);
      v12 = (std::vector<int> *)&v11[24 * v8];
      *(_QWORD *)&v33 = v11;
      *((_QWORD *)&v33 + 1) = v12;
      v35 = &v11[24 * v13];
      v12->__begin_ = 0;
      v12->__end_ = 0;
      v12->__end_cap_.__value_ = 0;
      *v12 = __p;
      memset(&__p, 0, sizeof(__p));
      v34 = v12 + 1;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v29, &v33);
      v14 = v30;
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v33);
      v30 = v14;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
    }
    else
    {
      v30->__begin_ = 0;
      v7->__end_ = 0;
      v7->__end_cap_.__value_ = 0;
      *v7 = __p;
      memset(&__p, 0, sizeof(__p));
      v30 = v7 + 1;
    }
    v4 = (const Espresso::layer_shape *)((char *)v4 + 64);
  }
  while (v4 != v5);
  v15 = *((_DWORD *)*a2 + 5);
  if (v15 == -1)
  {
    if (*((_DWORD *)*a2 + 4) == 1)
      v15 = 4;
    else
      v15 = 5;
  }
  std::vector<int>::vector(&__p, v15 + 1);
  v16 = *(_DWORD *)(a1 + 280);
  memset(v24, 0, sizeof(v24));
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v24, v29, (uint64_t)v30, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - v29) >> 3));
  NDLayers::stack_nd_shape_computation(v16, v24, (char **)&__p);
  *(_QWORD *)&v33 = v24;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  begin = __p.__begin_;
  v18 = (char *)__p.__end_ - (char *)__p.__begin_;
  if (__p.__end_ != __p.__begin_)
  {
    v19 = v18 >> 2;
    if ((unint64_t)(v18 >> 2) <= 1)
      v19 = 1;
    v20 = v25;
    do
    {
      v21 = *begin++;
      *v20++ = v21;
      --v19;
    }
    while (v19);
  }
  v27 = (unint64_t)v18 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v25, 0, (uint64_t)&v33);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31[1] = a3;
  v32 = 0;
  v22 = (char *)operator new(0x40uLL);
  *a3 = v22;
  a3[1] = v22;
  a3[2] = v22 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v33, &v39, (uint64_t)v22);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  *(_QWORD *)&v33 = &v29;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_190E23CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, char *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v31 + 8) = v32;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
  {
    a18 = a17;
    operator delete(a17);
  }
  a17 = &a20;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t Espresso::interpreter_state_t::interpreter_state_t(uint64_t a1, _QWORD *a2)
{
  char *v3;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 114) = 0u;
  *(_QWORD *)a1 = *a2;
  v3 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 104) = v3 + 64;
  return a1;
}

void sub_190E23DA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::copy_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  Espresso::copy_kernel_cpu::__compute(a3, a4);
}

void E5RT::E5BlockImpl::ReserveInputsAndOutputs(E5RT::E5BlockImpl *this, std::vector<std::string>::size_type a2, std::vector<std::string>::size_type a3, std::vector<std::string>::size_type a4)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 40, a2);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 144, a3);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 248, a4);
}

void E5RT::E5ProgramImpl::LoadFunctionInfo(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  std::string *v14;
  const std::string *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const std::string *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  std::string::__raw *v28;
  std::string::pointer data;
  uint64_t **v30;
  size_t v31;
  const void *v32;
  const void *v33;
  size_t v34;
  uint64_t *v35;
  const void *v36;
  size_t v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  E5RT::E5FunctionImpl *v45;
  const std::string *v46;
  uint64_t *v47;
  _QWORD *size;
  __int128 v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int8x8_t v53;
  uint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void **v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void **v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int8x8_t v83;
  uint64_t v84;
  unint64_t v85;
  uint8x8_t v86;
  unint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  __int128 v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t OperandMap;
  uint64_t *v125;
  uint64_t *i;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t *j;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t *k;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::string::__raw *v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t *m;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t *n;
  uint64_t *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t **ii;
  unint64_t v217;
  E5RT::E5FunctionImpl **v218;
  uint64_t v219;
  unsigned int v220;
  __n128 v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  char *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  void **v239;
  void **v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *exception;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  __int128 v268;
  __int128 v269;
  std::__shared_weak_count *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  uint64_t **v274;
  E5RT::E5BlockImpl *v275;
  char v277[8];
  __n128 v278;
  __n128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  _QWORD v289[3];
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  __int128 v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  _QWORD *v297;
  std::__shared_weak_count *v298;
  const std::string *v299;
  char *v300;
  char *v301;
  __int128 v302;
  __int128 v303;
  int v304;
  __int128 v305;
  __int128 *v306;
  uint64_t v307;

  v307 = *MEMORY[0x1E0C80C00];
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(&v300, a2, 1, 5);
  if (v301 - v300 != 16)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v302, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v305, "Expect only a single text section in Compute Program.");
    E5RT::Status::Status(v289, 8, &v305);
    E5RT::E5RTError::E5RTError(exception, &v302, v289);
  }
  v8 = *(_QWORD *)v300;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v300 + 1);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v12 = operator new(0x1D8uLL);
  v12[1] = 0;
  v13 = v12 + 1;
  v12[2] = 0;
  *v12 = &off_1E2DB5CB8;
  v272 = (std::__shared_weak_count *)v12;
  v14 = (std::string *)(v12 + 3);
  E5RT::E5FunctionImpl::E5FunctionImpl((E5RT::E5FunctionImpl *)(v12 + 3));
  v15 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  E5RT::E5FunctionImpl::SetName(v14, v15);
  v271 = v7;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v299 = 0;
  v18 = (unsigned int *)(v17 + v16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    v19 = *v18;
    v20 = operator new();
    *(_QWORD *)(v20 + 112) = 0;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)v20 = 0u;
    Function::UnPackTo((int *)((char *)v18 + v19), v20, (__n128)0);
    *(_QWORD *)&v305 = 0;
    v21 = (uint64_t)v299;
    v299 = (const std::string *)v20;
    if (v21)
    {
      std::default_delete<FunctionT>::operator()[abi:ne180100]((uint64_t)&v299, v21);
      v22 = v305;
      *(_QWORD *)&v305 = 0;
      if (v22)
        std::default_delete<FunctionT>::operator()[abi:ne180100]((uint64_t)&v305, v22);
    }
    goto LABEL_19;
  }
  *(_QWORD *)&v302 = &off_1E2DAD1A0;
  *((_QWORD *)&v302 + 1) = VerifySizePrefixedFunctionBuffer;
  *((_QWORD *)&v303 + 1) = &v302;
  *(_QWORD *)&v305 = &off_1E2DACDD8;
  *((_QWORD *)&v305 + 1) = UnPackSizePrefixedFunction;
  v306 = &v305;
  E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<FunctionT>(v18, (uint64_t)&v302, (uint64_t)&v305);
  v23 = (const std::string *)v289[0];
  v289[0] = 0;
  v299 = v23;
  v24 = v306;
  if (v306 == &v305)
  {
    v25 = 4;
    v24 = &v305;
    goto LABEL_13;
  }
  if (v306)
  {
    v25 = 5;
LABEL_13:
    (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  }
  v26 = (__int128 *)*((_QWORD *)&v303 + 1);
  if (*((__int128 **)&v303 + 1) == &v302)
  {
    v27 = 4;
    v26 = &v302;
  }
  else
  {
    if (!*((_QWORD *)&v303 + 1))
      goto LABEL_19;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_19:
  v28 = (std::string::__raw *)v299;
  data = v299[2].__r_.__value_.__l.__data_;
  if (v299[2].__r_.__value_.__l.__size_ - (_QWORD)data != 8)
  {
    v264 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v302, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v305, "Function can only have an entry block. No support for control flow yet.");
    E5RT::Status::Status(v289, 8, &v305);
    E5RT::E5RTError::E5RTError(v264, &v302, v289);
  }
  v30 = *(uint64_t ***)data;
  v31 = v299->__r_.__value_.__l.__size_ - v299->__r_.__value_.__r.__words[0];
  v32 = *(const void **)(*(_QWORD *)data + 24);
  if (v31 != *(_QWORD *)(*(_QWORD *)data + 32) - (_QWORD)v32 || memcmp(v299->__r_.__value_.__l.__data_, v32, v31))
  {
    v265 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v302, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v305, "Function and entry block inputs must match.");
    E5RT::Status::Status(v289, 8, &v305);
    E5RT::E5RTError::E5RTError(v265, &v302, v289);
  }
  v33 = (const void *)v28[1].__words[0];
  v34 = v28[1].__words[1] - (_QWORD)v33;
  v35 = v30[6];
  if (v34 != (char *)v30[7] - (char *)v35 || memcmp(v33, v35, v34))
  {
    v266 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v302, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v305, "Function and entry block outputs must match, since only one block per function is supported at this time.");
    E5RT::Status::Status(v289, 8, &v305);
    E5RT::E5RTError::E5RTError(v266, &v302, v289);
  }
  v36 = (const void *)v28[4].__words[0];
  v37 = v28[4].__words[1] - (_QWORD)v36;
  v38 = v30[9];
  if (v37 != (char *)v30[10] - (char *)v38 || memcmp(v36, v38, v37))
  {
    v267 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v302, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v305, "Function and entry block inouts must match, since only one block per function is supported at this time.");
    E5RT::Status::Status(v289, 8, &v305);
    E5RT::E5RTError::E5RTError(v267, &v302, v289);
  }
  v39 = (std::__shared_weak_count *)operator new(0x178uLL);
  v273 = a1;
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C48;
  E5RT::E5BlockImpl::E5BlockImpl((E5RT::E5BlockImpl *)&v39[1]);
  v297 = &v39[1].__vftable;
  v298 = v39;
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  E5RT::E5FunctionImpl::AddBlock((uint64_t)v14, (uint64_t)&v297);
  v42 = v298;
  if (v298)
  {
    v43 = (unint64_t *)&v298->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v274 = v30;
  v275 = (E5RT::E5BlockImpl *)&v39[1];
  v45 = (E5RT::E5FunctionImpl *)v14;
  v270 = v39;
  v46 = v299;
  v47 = (uint64_t *)v299->__r_.__value_.__r.__words[0];
  size = (_QWORD *)v299->__r_.__value_.__l.__size_;
  if (v299->__r_.__value_.__l.__data_ != (std::string::pointer)size)
  {
    while (1)
    {
      v49 = *(_OWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 16 * *v47);
      v305 = v49;
      v50 = *((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v302 = 0u;
      v303 = 0u;
      v304 = 1065353216;
      v53 = (int8x8_t)a4[1];
      if (v53)
      {
        v54 = *v47;
        v55 = *v47;
        v56 = (uint8x8_t)vcnt_s8(v53);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          v57 = *v47;
          if (*(_QWORD *)&v53 <= v55)
            v57 = v55 % *(_QWORD *)&v53;
        }
        else
        {
          v57 = (v53.i32[0] - 1) & v55;
        }
        v58 = *(uint64_t ***)(*a4 + 8 * v57);
        if (v58)
        {
          v59 = *v58;
          if (v59)
          {
            if (v56.u32[0] < 2uLL)
            {
              v60 = *(_QWORD *)&v53 - 1;
              while (1)
              {
                v62 = v59[1];
                if (v62 == v55)
                {
                  if (*((_DWORD *)v59 + 4) == (_DWORD)v54)
                    goto LABEL_60;
                }
                else if ((v62 & v60) != v57)
                {
                  goto LABEL_62;
                }
                v59 = (uint64_t *)*v59;
                if (!v59)
                  goto LABEL_62;
              }
            }
            do
            {
              v61 = v59[1];
              if (v61 == v55)
              {
                if (*((_DWORD *)v59 + 4) == (_DWORD)v54)
                {
LABEL_60:
                  if (&v302 != (__int128 *)(v59 + 3))
                  {
                    v304 = *((_DWORD *)v59 + 14);
                    v268 = v49;
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&v302, (uint64_t *)v59[5], 0);
                    v49 = v268;
                  }
                  break;
                }
              }
              else
              {
                if (v61 >= *(_QWORD *)&v53)
                  v61 %= *(_QWORD *)&v53;
                if (v61 != v57)
                  break;
              }
              v59 = (uint64_t *)*v59;
            }
            while (v59);
          }
        }
      }
LABEL_62:
      v294 = v49;
      if (v50)
      {
        v63 = (unint64_t *)(v50 + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      E5RT::E5FunctionImpl::LoadOperandInfo((uint64_t)v45, &v294, a2, (uint64_t)&v302, &v295);
      v65 = v296;
      if (!v296)
        goto LABEL_69;
      v66 = (unint64_t *)&v296->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
        if (*((_QWORD *)&v294 + 1))
        {
LABEL_70:
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
      }
      else
      {
LABEL_69:
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
        if (*((_QWORD *)&v294 + 1))
          goto LABEL_70;
      }
      v71 = (void **)v303;
      if ((_QWORD)v303)
      {
        do
        {
          v76 = (void **)*v71;
          if (*((char *)v71 + 39) < 0)
            operator delete(v71[2]);
          operator delete(v71);
          v71 = v76;
        }
        while (v76);
      }
      v72 = (void *)v302;
      *(_QWORD *)&v302 = 0;
      if (v72)
        operator delete(v72);
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
      if (*((_QWORD *)&v305 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if (++v47 == size)
      {
        v46 = v299;
        break;
      }
    }
  }
  v77 = v46[4].__r_.__value_.__l.__data_;
  v78 = (_QWORD *)v46[4].__r_.__value_.__l.__size_;
  while (v77 != v78)
  {
    v79 = *(_OWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 16 * *v77);
    v305 = v79;
    v80 = *((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v302 = 0u;
    v303 = 0u;
    v304 = 1065353216;
    v83 = (int8x8_t)a4[1];
    if (v83)
    {
      v84 = *v77;
      v85 = *v77;
      v86 = (uint8x8_t)vcnt_s8(v83);
      v86.i16[0] = vaddlv_u8(v86);
      if (v86.u32[0] > 1uLL)
      {
        v87 = *v77;
        if (*(_QWORD *)&v83 <= v85)
          v87 = v85 % *(_QWORD *)&v83;
      }
      else
      {
        v87 = (v83.i32[0] - 1) & v85;
      }
      v88 = *(uint64_t ***)(*a4 + 8 * v87);
      if (v88)
      {
        v89 = *v88;
        if (v89)
        {
          if (v86.u32[0] < 2uLL)
          {
            v90 = *(_QWORD *)&v83 - 1;
            while (1)
            {
              v92 = v89[1];
              if (v92 == v85)
              {
                if (*((_DWORD *)v89 + 4) == (_DWORD)v84)
                  goto LABEL_114;
              }
              else if ((v92 & v90) != v87)
              {
                goto LABEL_116;
              }
              v89 = (uint64_t *)*v89;
              if (!v89)
                goto LABEL_116;
            }
          }
          do
          {
            v91 = v89[1];
            if (v91 == v85)
            {
              if (*((_DWORD *)v89 + 4) == (_DWORD)v84)
              {
LABEL_114:
                if (&v302 != (__int128 *)(v89 + 3))
                {
                  v304 = *((_DWORD *)v89 + 14);
                  v269 = v79;
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&v302, (uint64_t *)v89[5], 0);
                  v79 = v269;
                }
                break;
              }
            }
            else
            {
              if (v91 >= *(_QWORD *)&v83)
                v91 %= *(_QWORD *)&v83;
              if (v91 != v87)
                break;
            }
            v89 = (uint64_t *)*v89;
          }
          while (v89);
        }
      }
    }
LABEL_116:
    v291 = v79;
    if (v80)
    {
      v93 = (unint64_t *)(v80 + 8);
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    E5RT::E5FunctionImpl::LoadOperandInfo((uint64_t)v45, &v291, a2, (uint64_t)&v302, &v292);
    v95 = v293;
    if (!v293)
      goto LABEL_123;
    v96 = (unint64_t *)&v293->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      v98 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
      if (!*((_QWORD *)&v291 + 1))
        goto LABEL_129;
    }
    else
    {
LABEL_123:
      v98 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
      if (!*((_QWORD *)&v291 + 1))
        goto LABEL_129;
    }
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
LABEL_129:
    v101 = (void **)v303;
    if ((_QWORD)v303)
    {
      do
      {
        v106 = (void **)*v101;
        if (*((char *)v101 + 39) < 0)
          operator delete(v101[2]);
        operator delete(v101);
        v101 = v106;
      }
      while (v106);
    }
    v102 = (void *)v302;
    *(_QWORD *)&v302 = 0;
    if (v102)
      operator delete(v102);
    v103 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
    if (*((_QWORD *)&v305 + 1))
    {
      v104 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    ++v77;
  }
  v107 = *v274;
  v108 = v274[1];
  if (*v274 != v108)
  {
    do
    {
      v109 = *v107;
      v110 = *(_OWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 16 * v109);
      v302 = v110;
      if (*((_QWORD *)&v110 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      E5RT::E5FunctionImpl::LoadOperationInfo((uint64_t)v45, v110, a2, (std::string *)(a1 + 80), (uint64_t)a4, &v305);
      v290 = v305;
      if (*((_QWORD *)&v305 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      E5RT::E5BlockImpl::AddOperation((uint64_t)v275, (uint64_t)&v290);
      v115 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
      if (!*((_QWORD *)&v290 + 1))
        goto LABEL_153;
      v116 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
        v118 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
        if (*((_QWORD *)&v305 + 1))
        {
LABEL_154:
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
      }
      else
      {
LABEL_153:
        v118 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
        if (*((_QWORD *)&v305 + 1))
          goto LABEL_154;
      }
      v121 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
      if (*((_QWORD *)&v302 + 1))
      {
        v122 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      ++v107;
    }
    while (v107 != v108);
  }
  OperandMap = E5RT::E5FunctionImpl::GetOperandMap(v45);
  std::unordered_map<std::string,std::shared_ptr<E5RT::E5Operand const>>::unordered_map((uint64_t)&v302, OperandMap);
  E5RT::E5BlockImpl::ReserveInputsAndOutputs(v275, v274[4] - v274[3], v274[7] - v274[6], v274[10] - v274[9]);
  v125 = v274[3];
  for (i = v274[4]; v125 != i; ++v125)
  {
    v127 = *v125;
    v128 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v129 = 16 * v127;
    v130 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v128 + v129) + 16))(*(_QWORD *)(*v128 + v129));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v302, v130))
    {
      v256 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v305, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v289, "Block input operand missing.");
      E5RT::Status::Status(&v279, 8, v289);
      E5RT::E5RTError::E5RTError(v256, &v305, &v279);
    }
    v131 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v132 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v131 + v129) + 16))(*(_QWORD *)(*v131 + v129));
    *(_QWORD *)&v305 = v132;
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v302, v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v305);
    v134 = v133[6];
    v287 = v133[5];
    v288 = (std::__shared_weak_count *)v134;
    if (v134)
    {
      v135 = (unint64_t *)(v134 + 8);
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 1, v135));
    }
    E5RT::E5BlockImpl::AddInput((uint64_t)v275, v132, &v287);
    v137 = v288;
    if (v288)
    {
      v138 = (unint64_t *)&v288->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
  }
  v140 = v274[6];
  for (j = v274[7]; v140 != j; ++v140)
  {
    v142 = *v140;
    v143 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v144 = 16 * v142;
    v145 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v143 + v144) + 16))(*(_QWORD *)(*v143 + v144));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v302, v145))
    {
      v257 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v305, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v289, "Block output operand missing.");
      E5RT::Status::Status(&v279, 8, v289);
      E5RT::E5RTError::E5RTError(v257, &v305, &v279);
    }
    v146 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v147 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v146 + v144) + 16))(*(_QWORD *)(*v146 + v144));
    *(_QWORD *)&v305 = v147;
    v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v302, v147, (uint64_t)&std::piecewise_construct, (__int128 **)&v305);
    v149 = v148[6];
    v285 = v148[5];
    v286 = (std::__shared_weak_count *)v149;
    if (v149)
    {
      v150 = (unint64_t *)(v149 + 8);
      do
        v151 = __ldxr(v150);
      while (__stxr(v151 + 1, v150));
    }
    E5RT::E5BlockImpl::AddOutput((uint64_t)v275, v147, &v285);
    v152 = v286;
    if (v286)
    {
      v153 = (unint64_t *)&v286->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
  }
  v155 = v274[9];
  for (k = v274[10]; v155 != k; ++v155)
  {
    v157 = *v155;
    v158 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v159 = 16 * v157;
    v160 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v158 + v159) + 16))(*(_QWORD *)(*v158 + v159));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v302, v160))
    {
      v258 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v305, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v289, "Block inout operand missing.");
      E5RT::Status::Status(&v279, 8, v289);
      E5RT::E5RTError::E5RTError(v258, &v305, &v279);
    }
    v161 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v162 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v161 + v159) + 16))(*(_QWORD *)(*v161 + v159));
    *(_QWORD *)&v305 = v162;
    v163 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v302, v162, (uint64_t)&std::piecewise_construct, (__int128 **)&v305);
    v164 = v163[6];
    v283 = v163[5];
    v284 = (std::__shared_weak_count *)v164;
    if (v164)
    {
      v165 = (unint64_t *)(v164 + 8);
      do
        v166 = __ldxr(v165);
      while (__stxr(v166 + 1, v165));
    }
    E5RT::E5BlockImpl::AddInOut((uint64_t)v275, v162, &v283);
    v167 = v284;
    if (v284)
    {
      v168 = (unint64_t *)&v284->__shared_owners_;
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
  }
  v170 = (std::string::__raw *)v299;
  E5RT::E5FunctionImpl::ReserveInputsAndOutputs(v45, (uint64_t)(v170->__words[1] - v170->__words[0]) >> 3, (uint64_t)(v170[1].__words[1] - v170[1].__words[0]) >> 3, (uint64_t)(v299[4].__r_.__value_.__l.__size_ - v299[4].__r_.__value_.__r.__words[0]) >> 3);
  v171 = (uint64_t *)v170->__words[0];
  v172 = (uint64_t *)v170->__words[1];
  if ((uint64_t *)v170->__words[0] != v172)
  {
    do
    {
      v173 = *v171;
      v174 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      v175 = 16 * v173;
      v176 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v174 + v175) + 16))(*(_QWORD *)(*v174 + v175));
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v302, v176))
      {
        v259 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v305, "LoadFunctionInfo");
        std::string::basic_string[abi:ne180100]<0>(v289, "Function input operand missing.");
        E5RT::Status::Status(&v279, 8, v289);
        E5RT::E5RTError::E5RTError(v259, &v305, &v279);
      }
      v177 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      v178 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v177 + v175) + 16))(*(_QWORD *)(*v177 + v175));
      *(_QWORD *)&v305 = v178;
      v179 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v302, v178, (uint64_t)&std::piecewise_construct, (__int128 **)&v305);
      v180 = v179[6];
      *(_QWORD *)&v282 = v179[5];
      *((_QWORD *)&v282 + 1) = v180;
      if (v180)
      {
        v181 = (unint64_t *)(v180 + 8);
        do
          v182 = __ldxr(v181);
        while (__stxr(v182 + 1, v181));
      }
      E5RT::E5FunctionImpl::AddInput((uint64_t)v45, v178, &v282);
      v183 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
      if (*((_QWORD *)&v282 + 1))
      {
        v184 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      ++v171;
    }
    while (v171 != v172);
  }
  v186 = (uint64_t *)v170[1].__words[0];
  for (m = (uint64_t *)v170[1].__words[1]; v186 != m; ++v186)
  {
    v188 = *v186;
    v189 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v190 = 16 * v188;
    v191 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v189 + v190) + 16))(*(_QWORD *)(*v189 + v190));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v302, v191))
    {
      v260 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v305, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v289, "Function output operand missing.");
      E5RT::Status::Status(&v279, 8, v289);
      E5RT::E5RTError::E5RTError(v260, &v305, &v279);
    }
    v192 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v193 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v192 + v190) + 16))(*(_QWORD *)(*v192 + v190));
    *(_QWORD *)&v305 = v193;
    v194 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v302, v193, (uint64_t)&std::piecewise_construct, (__int128 **)&v305);
    v195 = v194[6];
    *(_QWORD *)&v281 = v194[5];
    *((_QWORD *)&v281 + 1) = v195;
    if (v195)
    {
      v196 = (unint64_t *)(v195 + 8);
      do
        v197 = __ldxr(v196);
      while (__stxr(v197 + 1, v196));
    }
    E5RT::E5FunctionImpl::AddOutput((uint64_t)v45, v193, &v281);
    v198 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
    if (*((_QWORD *)&v281 + 1))
    {
      v199 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
  }
  v202 = (uint64_t *)v170[4].__words[0];
  for (n = (uint64_t *)v170[4].__words[1]; v202 != n; ++v202)
  {
    v203 = *v202;
    v204 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v205 = 16 * v203;
    v206 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v204 + v205) + 16))(*(_QWORD *)(*v204 + v205));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v302, v206))
    {
      v261 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v305, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v289, "Function inout operand missing.");
      E5RT::Status::Status(&v279, 8, v289);
      E5RT::E5RTError::E5RTError(v261, &v305, &v279);
    }
    v207 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v208 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v207 + v205) + 16))(*(_QWORD *)(*v207 + v205));
    *(_QWORD *)&v305 = v208;
    v209 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v302, v208, (uint64_t)&std::piecewise_construct, (__int128 **)&v305);
    v210 = v209[6];
    *(_QWORD *)&v280 = v209[5];
    *((_QWORD *)&v280 + 1) = v210;
    if (v210)
    {
      v211 = (unint64_t *)(v210 + 8);
      do
        v212 = __ldxr(v211);
      while (__stxr(v212 + 1, v211));
    }
    E5RT::E5FunctionImpl::AddInOut((uint64_t)v45, v208, &v280);
    v213 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
    if (*((_QWORD *)&v280 + 1))
    {
      v214 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
  }
  v279 = 0uLL;
  for (ii = *(uint64_t ***)(E5RT::E5FunctionImpl::GetOperandMap(v45) + 16); ii; ii = (uint64_t **)*ii)
  {
    v219 = (*(uint64_t (**)(uint64_t *))(*ii[5] + 32))(ii[5]);
    v220 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
    v221 = *(__n128 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 16 * v220);
    v278 = v221;
    if (v221.n128_u64[1])
    {
      v222 = (unint64_t *)(v221.n128_u64[1] + 8);
      do
        v223 = __ldxr(v222);
      while (__stxr(v223 + 1, v222));
    }
    if ((*(unsigned int (**)(unint64_t, __n128))(*(_QWORD *)v221.n128_u64[0] + 24))(v221.n128_u64[0], v221) == 3)
    {
      v224 = v279.n128_u64[0];
      if (!v279.n128_u64[0])
      {
        if (v278.n128_u64[1])
        {
          v225 = (unint64_t *)(v278.n128_u64[1] + 8);
          do
            v226 = __ldxr(v225);
          while (__stxr(v226 + 1, v225));
        }
        v227 = (std::__shared_weak_count *)v279.n128_u64[1];
        v279 = v278;
        if (v227)
        {
          v228 = (unint64_t *)&v227->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
        v230 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v279.n128_u64[0] + 48))(v279.n128_u64[0]);
        E5RT::E5FunctionImpl::SetIntermediateBufferSize((uint64_t)v45, v230);
        v224 = v279.n128_u64[0];
      }
      if (v278.n128_u64[0] != v224)
      {
        v262 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v305, "LoadFunctionInfo");
        E5RT::E5FunctionImpl::GetName(v45);
        std::operator+<char>();
        E5RT::Status::Status(v277, 8, v289);
        E5RT::E5RTError::E5RTError(v262, &v305, v277);
      }
    }
    if (v278.n128_u64[1])
    {
      v231 = (unint64_t *)(v278.n128_u64[1] + 8);
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (!v232)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v278.n128_u64[1] + 16))(v278.n128_u64[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v278.n128_u64[1]);
      }
    }
  }
  E5RT::E5FunctionImpl::SetUserVersion((std::string *)v45, v299 + 3);
  *(_QWORD *)&v305 = v45;
  *((_QWORD *)&v305 + 1) = v272;
  do
    v217 = __ldxr(v13);
  while (__stxr(v217 + 1, v13));
  v218 = *(E5RT::E5FunctionImpl ***)(v273 + 24);
  if ((unint64_t)v218 >= *(_QWORD *)(v273 + 32))
  {
    v233 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(v273 + 16), (uint64_t)&v305);
    v234 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
    *(_QWORD *)(v273 + 24) = v233;
    if (v234)
    {
      v235 = (unint64_t *)&v234->__shared_owners_;
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
      }
    }
  }
  else
  {
    *v218 = v45;
    v218[1] = (E5RT::E5FunctionImpl *)v272;
    *(_QWORD *)(v273 + 24) = v218 + 2;
  }
  if (v279.n128_u64[1])
  {
    v237 = (unint64_t *)(v279.n128_u64[1] + 8);
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v279.n128_u64[1] + 16))(v279.n128_u64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v279.n128_u64[1]);
    }
  }
  v239 = (void **)v303;
  if ((_QWORD)v303)
  {
    do
    {
      while (1)
      {
        v240 = (void **)*v239;
        v241 = (std::__shared_weak_count *)v239[6];
        if (v241)
        {
          v242 = (unint64_t *)&v241->__shared_owners_;
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
        if (*((char *)v239 + 39) < 0)
          break;
        operator delete(v239);
        v239 = v240;
        if (!v240)
          goto LABEL_282;
      }
      operator delete(v239[2]);
      operator delete(v239);
      v239 = v240;
    }
    while (v240);
  }
LABEL_282:
  v244 = (void *)v302;
  *(_QWORD *)&v302 = 0;
  if (v244)
    operator delete(v244);
  do
    v245 = __ldaxr(v40);
  while (__stlxr(v245 - 1, v40));
  if (!v245)
  {
    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
    std::__shared_weak_count::__release_weak(v270);
  }
  v246 = (uint64_t)v299;
  v299 = 0;
  if (v246)
    std::default_delete<FunctionT>::operator()[abi:ne180100]((uint64_t)&v299, v246);
  do
    v247 = __ldaxr(v13);
  while (__stlxr(v247 - 1, v13));
  if (!v247)
  {
    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
    std::__shared_weak_count::__release_weak(v272);
  }
  if (v271)
  {
    v248 = (unint64_t *)&v271->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v250 = v300;
  if (v300)
  {
    v251 = v301;
    v252 = v300;
    if (v301 != v300)
    {
      do
      {
        v253 = (std::__shared_weak_count *)*((_QWORD *)v251 - 1);
        if (v253)
        {
          v254 = (unint64_t *)&v253->__shared_owners_;
          do
            v255 = __ldaxr(v254);
          while (__stlxr(v255 - 1, v254));
          if (!v255)
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
        }
        v251 -= 16;
      }
      while (v251 != v250);
      v252 = v300;
    }
    v301 = v250;
    operator delete(v252);
  }
}

void sub_190E25864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  unint64_t *v51;
  unint64_t *v52;
  uint64_t v53;
  void **v55;
  void **v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v53 - 144);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  v55 = *(void ***)(v53 - 176);
  if (v55)
  {
    do
    {
      while (1)
      {
        v56 = (void **)*v55;
        v57 = (std::__shared_weak_count *)v55[6];
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        if (*((char *)v55 + 39) < 0)
          break;
        operator delete(v55);
        v55 = v56;
        if (!v56)
          goto LABEL_11;
      }
      operator delete(v55[2]);
      operator delete(v55);
      v55 = v56;
    }
    while (v56);
  }
LABEL_11:
  v60 = *(void **)(v53 - 192);
  *(_QWORD *)(v53 - 192) = 0;
  if (v60)
    operator delete(v60);
  do
    v61 = __ldaxr(v52);
  while (__stlxr(v61 - 1, v52));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  v62 = *(_QWORD *)(v53 - 224);
  *(_QWORD *)(v53 - 224) = 0;
  if (v62)
    std::default_delete<FunctionT>::operator()[abi:ne180100](v53 - 224, v62);
  do
    v63 = __ldaxr(v51);
  while (__stlxr(v63 - 1, v51));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  if (a12)
  {
    v64 = (unint64_t *)&a12->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  v66 = *(_QWORD *)(v53 - 216);
  if (v66)
  {
    v67 = *(_QWORD *)(v53 - 208);
    v68 = *(void **)(v53 - 216);
    if (v67 != v66)
    {
      do
      {
        v69 = *(std::__shared_weak_count **)(v67 - 8);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v67 -= 16;
      }
      while (v67 != v66);
      v68 = *(void **)(v53 - 216);
    }
    *(_QWORD *)(v53 - 208) = v66;
    operator delete(v68);
  }
  _Unwind_Resume(a1);
}

uint64_t *E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  std::string *v7;
  unint64_t v8;
  __int128 *v10;

  v4 = a1 + 64;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((_QWORD *)(a1 + 64), a2))
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v6 = *(_OWORD *)a2;
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v5 = v6;
      }
      v7 = (std::string *)(v5 + 24);
      *(_QWORD *)(a1 + 8) = v5 + 24;
    }
    *(_QWORD *)(a1 + 8) = v7;
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(_QWORD *)a1) >> 3) - 1;
    v10 = (__int128 *)a2;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, a2, (uint64_t)&std::piecewise_construct, &v10)[5] = v8;
  }
  v10 = (__int128 *)a2;
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, a2, (uint64_t)&std::piecewise_construct, &v10)+ 5;
}

void sub_190E26040(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190E266B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E266CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperandImpl::GetComputeProgramSymbol(E5RT::E5OperandImpl *this)
{
  return *((_QWORD *)this + 14);
}

void E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve(uint64_t a1, std::vector<std::string>::size_type a2)
{
  float v4;
  unint64_t prime;
  int8x8_t v6;
  size_t v7;
  uint8x8_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  int8x8_t v12;
  size_t v13;
  uint8x8_t v14;
  uint64_t v15;
  size_t v16;

  std::vector<std::string>::reserve((std::vector<std::string> *)a1, a2);
  v4 = (float)a2;
  prime = vcvtps_u32_f32((float)a2 / *(float *)(a1 + 56));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v6 = *(int8x8_t *)(a1 + 32);
  if (prime > *(_QWORD *)&v6)
    goto LABEL_18;
  if (prime >= *(_QWORD *)&v6)
    goto LABEL_19;
  v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
  if (*(_QWORD *)&v6 >= 3uLL)
  {
    v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] <= 1uLL)
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
      if (prime <= v7)
        prime = v7;
      if (prime >= *(_QWORD *)&v6)
        goto LABEL_19;
LABEL_18:
      std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1 + 24, prime);
      goto LABEL_19;
    }
  }
  v10 = std::__next_prime(v7);
  if (prime <= v10)
    prime = v10;
  if (prime < *(_QWORD *)&v6)
    goto LABEL_18;
LABEL_19:
  v11 = vcvtps_u32_f32(v4 / *(float *)(a1 + 96));
  if (v11 == 1)
  {
    v11 = 2;
  }
  else if ((v11 & (v11 - 1)) != 0)
  {
    v11 = std::__next_prime(v11);
  }
  v12 = *(int8x8_t *)(a1 + 72);
  if (v11 > *(_QWORD *)&v12)
    goto LABEL_36;
  if (v11 >= *(_QWORD *)&v12)
    return;
  v13 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
  if (*(_QWORD *)&v12 >= 3uLL)
  {
    v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] <= 1uLL)
    {
      v15 = 1 << -(char)__clz(v13 - 1);
      if (v13 >= 2)
        v13 = v15;
      if (v11 <= v13)
        v11 = v13;
      if (v11 >= *(_QWORD *)&v12)
        return;
LABEL_36:
      std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1 + 64, v11);
      return;
    }
  }
  v16 = std::__next_prime(v13);
  if (v11 <= v16)
    v11 = v16;
  if (v11 < *(_QWORD *)&v12)
    goto LABEL_36;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v5;
  char *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  std::vector<std::string>::pointer v11;

  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    end = this->__end_;
    v5 = 24 * __n;
    v6 = (char *)operator new(24 * __n);
    v7 = (std::string *)&v6[v5];
    v8 = (std::string *)&v6[24 * (end - begin)];
    if (end == begin)
    {
      this->__begin_ = v8;
      this->__end_ = v8;
      this->__end_cap_.__value_ = v7;
      if (begin)
LABEL_13:
        operator delete(begin);
    }
    else
    {
      v9 = (std::string *)&v6[24 * (end - begin)];
      do
      {
        v10 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
        v9[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v9[-1].__r_.__value_.__l.__data_ = v10;
        --v9;
        end[-1].__r_.__value_.__l.__size_ = 0;
        end[-1].__r_.__value_.__r.__words[2] = 0;
        end[-1].__r_.__value_.__r.__words[0] = 0;
        --end;
      }
      while (end != begin);
      v11 = this->__begin_;
      begin = this->__end_;
      this->__begin_ = v9;
      this->__end_ = v8;
      this->__end_cap_.__value_ = v7;
      if (begin != v11)
      {
        do
        {
          if (SHIBYTE(begin[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(begin[-1].__r_.__value_.__l.__data_);
          --begin;
        }
        while (begin != v11);
        begin = v11;
      }
      if (begin)
        goto LABEL_13;
    }
  }
}

void E5RT::E5FunctionImpl::AddOutput(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 200, a2);
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)v4 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void E5RT::E5BlockImpl::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 144, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

_OWORD *E5RT::E5BlockImpl::AddOperation(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _OWORD *result;

  v3 = *(_QWORD **)(a1 + 24);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 32))
  {
    result = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>(a1 + 16, (__int128 *)a2);
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    *v3 = *(_QWORD *)a2;
    v3[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    result = v3 + 2;
    *(_QWORD *)(a1 + 24) = v3 + 2;
  }
  return result;
}

void E5RT::E5FunctionImpl::AddInput(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 96, a2);
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)v4 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void E5RT::E5BlockImpl::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 40, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5FunctionImpl::GetOperandMap(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 408;
}

std::string *E5RT::E5FunctionImpl::SetUserVersion(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

E5RT::E5FunctionImpl *E5RT::E5FunctionImpl::E5FunctionImpl(E5RT::E5FunctionImpl *this)
{
  _QWORD *v2;

  v2 = E5RT::E5Function::E5Function(this);
  E5RT::E5FunctionBuilder::E5FunctionBuilder(v2 + 1);
  *(_QWORD *)this = &off_1E2D59EB8;
  *((_QWORD *)this + 1) = &unk_1E2D59F58;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = 1065353216;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 1065353216;
  return this;
}

void sub_190E26CF8(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::E5FunctionBuilder::E5FunctionBuilder(_QWORD *this)
{
  *this = off_1E2D5ADE0;
  return this;
}

char *E5RT::E5FunctionImpl::AddBlock(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  char *result;

  v3 = *(_OWORD **)(a1 + 80);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 88))
  {
    result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 72), a2);
  }
  else
  {
    *v3 = *(_OWORD *)a2;
    result = (char *)(v3 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a1 + 80) = result;
  return result;
}

std::string *E5RT::E5FunctionImpl::SetName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void E5RT::E5FunctionImpl::ReserveInputsAndOutputs(E5RT::E5FunctionImpl *this, std::vector<std::string>::size_type a2, std::vector<std::string>::size_type a3, std::vector<std::string>::size_type a4)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 96, a2);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 200, a3);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 304, a4);
}

_QWORD *E5RT::E5Function::E5Function(_QWORD *this)
{
  *this = off_1E2D59A68;
  return this;
}

uint64_t E5RT::E5FunctionImpl::SetIntermediateBufferSize(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

uint64_t Espresso::net::try_fast_reshape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  v4 = *(_QWORD *)(a1 + 1160);
  if (!v4)
  {
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v14, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
    v5 = operator new(0x80uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1E2DBB6D8;
    v6 = (uint64_t *)(a1 + 1160);
    *(_QWORD *)&v16 = Espresso::net_fast_reshaper::net_fast_reshaper((uint64_t)(v5 + 3), &v14);
    *((_QWORD *)&v16 + 1) = v5;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v6, &v16);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 = *v6;
  }
  return Espresso::net_fast_reshaper::reshape(v4, a2);
}

void sub_190E26ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::net::insert_layers(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  int *v23;
  const Espresso::layer *v24;
  int *i;
  int *v26;
  int *v27;
  int *v28;
  void **v29;
  char v30;
  unint64_t v31;

  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    v5 = 0x8E38E38E38E38E39 * ((v2 - *a2) >> 3);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = (void **)&v26;
    v30 = 0;
    if (v5 >= 0x38E38E38E38E38FLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v26 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>>(v5);
    v27 = v26;
    v28 = &v26[18 * v6];
    v7 = v26;
    do
    {
      *v7 = *(_DWORD *)v3;
      *((_QWORD *)v7 + 1) = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 16);
      *((_QWORD *)v7 + 2) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      *((_QWORD *)v7 + 3) = 0;
      *((_QWORD *)v7 + 4) = 0;
      *((_QWORD *)v7 + 5) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v7 + 3, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24)) >> 3));
      *((_QWORD *)v7 + 6) = 0;
      *((_QWORD *)v7 + 7) = 0;
      *((_QWORD *)v7 + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v7 + 6, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 56) - *(_QWORD *)(v3 + 48)) >> 3));
      v3 += 72;
      v7 += 18;
    }
    while (v3 != v2);
    v11 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v7 - (char *)v26) >> 3));
    v27 = v7;
    if (v7 == v26)
      v12 = 0;
    else
      v12 = v11;
    std::__introsort<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*,false>(v26, v7, v12, 1);
    v13 = v26;
    for (i = v27; v13 != i; v13 += 18)
    {
      v14 = *v13;
      v15 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
      if ((int)(((unint64_t)v15 >> 4) - 1) > (int)v14)
      {
        v16 = (int)(v15 >> 4);
        do
        {
          v17 = v16 - 1;
          v29 = (void **)(v16 - 1);
          v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v16 - 1, &v29);
          v31 = v16;
          v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v16, &v31);
          if (v19 != v18)
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v19 + 3), (std::string *)v18[3], (std::string *)v18[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18[4] - v18[3]) >> 3));
          v29 = (void **)(v16 - 1);
          v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 96, v16 - 1, &v29);
          v31 = v16;
          v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 96, v16, &v31);
          if (v21 != v20)
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v21 + 3), (std::string *)v20[3], (std::string *)v20[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
          --v16;
        }
        while ((uint64_t)(v17 - 1) > v14);
      }
      v29 = (void **)(v14 + 1);
      v22 = (int *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v14 + 1, &v29);
      if (v22 != v13)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v22 + 6), *((std::string **)v13 + 3), *((std::string **)v13 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v13 + 4) - *((_QWORD *)v13 + 3)) >> 3));
      v29 = (void **)(v14 + 1);
      v23 = (int *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 96, v14 + 1, &v29)+ 3);
      if (v23 != v13 + 12)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v23, *((std::string **)v13 + 6), *((std::string **)v13 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v13 + 7) - *((_QWORD *)v13 + 6)) >> 3));
      std::vector<std::shared_ptr<Espresso::layer>>::insert((_QWORD *)(a1 + 32), (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * v14 + 16), (uint64_t *)v13 + 1);
    }
    v29 = (void **)&v26;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

void sub_190E27224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void Espresso::pass_unpack_layers::run_on_network(Espresso::pass_unpack_layers *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const std::string::value_type **v20;
  std::string::size_type v21;
  size_t size;
  std::string *v23;
  std::string *v24;
  uint64_t *v25;
  unint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  _QWORD *i;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  std::string v53;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  int v57[2];
  _OWORD v58[3];
  __int128 v59;
  uint64_t v60;
  void *__p;
  _BYTE v62[15];
  char v63;
  char *v64;
  std::__shared_weak_count *v65;
  std::string v66;
  std::string v67;
  std::string *v68;
  _QWORD v69[5];

  v69[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x48uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDAB8;
  v6[8] = 0;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_DWORD *)v6 + 16) = 1065353216;
  v65 = (std::__shared_weak_count *)v6;
  v6[3] = &off_1E2D950B0;
  v64 = (char *)(v6 + 3);
  v60 = 0;
  v59 = 0u;
  memset(v58, 0, sizeof(v58));
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v67, *(_QWORD *)a2, *((std::__shared_weak_count **)a2 + 1));
  v7 = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
  v59 = v7;
  v51 = a3;
  *(_QWORD *)v57 = 0;
  if (*((_QWORD *)a2 + 5) != *((_QWORD *)a2 + 4))
  {
    v52 = (char *)this + 24;
    do
    {
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, (unint64_t *)v57, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
      if ((_QWORD *)((char *)&v58[1] + 8) != v8 + 3)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v58[1] + 8, (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
      v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)v57, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
      if (v58 != (_OWORD *)(v9 + 3))
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v58, (std::string *)v9[3], (std::string *)v9[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[4] - v9[3]) >> 3));
      v60 = *(_QWORD *)v57;
      v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * *(_QWORD *)v57) + 64);
      if (!(*(unsigned int (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 288))(v10, v58))
        goto LABEL_55;
      v12 = *((_QWORD *)&v58[0] + 1);
      v11 = *(_QWORD *)&v58[0];
      if (*(_QWORD *)&v58[0] != *((_QWORD *)&v58[0] + 1))
      {
        v13 = (uint64_t)(v64 + 8);
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v13, v11, v11);
          v11 += 24;
        }
        while (v11 != v12);
      }
      v14 = 16 * *(_QWORD *)v57;
      v15 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * *(_QWORD *)v57);
      v17 = *(_QWORD *)(v15 + 64);
      v16 = *(std::__shared_weak_count **)(v15 + 72);
      v55 = v17;
      v56 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        v15 = *(_QWORD *)(*((_QWORD *)a2 + 4) + v14);
      }
      if (*(char *)(v15 + 63) < 0)
        std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v15 + 40), *(_QWORD *)(v15 + 48));
      else
        v54 = *(std::string *)(v15 + 40);
      v20 = (const std::string::value_type **)(v17 + 176);
      if (*(char *)(v17 + 199) < 0)
      {
        v21 = *(_QWORD *)(v17 + 184);
        if (!v21)
        {
LABEL_23:
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          else
            size = v54.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v67, size + 1);
          if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v67;
          else
            v23 = (std::string *)v67.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v54;
            else
              v24 = (std::string *)v54.__r_.__value_.__r.__words[0];
            memmove(v23, v24, size);
          }
          *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + size) = 95;
          v68 = &v54;
          v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v52, (uint64_t)&v54, (uint64_t)&std::piecewise_construct, (__int128 **)&v68);
          v26 = v25[5];
          v25[5] = v26 + 1;
          std::to_string(&v66, v26);
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v66;
          else
            v27 = (std::string *)v66.__r_.__value_.__r.__words[0];
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
          else
            v28 = v66.__r_.__value_.__l.__size_;
          v29 = std::string::append(&v67, (const std::string::value_type *)v27, v28);
          v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v53.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          goto LABEL_44;
        }
        std::string::__init_copy_ctor_external(&v53, *v20, v21);
      }
      else
      {
        if (!*(_BYTE *)(v17 + 199))
          goto LABEL_23;
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)v20;
        v53.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 192);
      }
LABEL_44:
      v31 = std::string::append(&v53, ":");
      v32 = (void *)v31->__r_.__value_.__r.__words[0];
      v69[0] = v31->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v69 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
      v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (v63 < 0)
        operator delete(__p);
      __p = v32;
      *(_QWORD *)v62 = v69[0];
      *(_QWORD *)&v62[7] = *(_QWORD *)((char *)v69 + 7);
      v63 = v33;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      v35 = *((_QWORD *)a2 + 4);
      v34 = *((_QWORD *)a2 + 5);
      Espresso::net::remove_layer(a2, v57[0]);
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v17 + 280))(v17, v58);
      *(_QWORD *)v57 = *(_QWORD *)v57 - ((v34 - v35) >> 4) + ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (v16)
      {
        v36 = (unint64_t *)&v16->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
LABEL_55:
      ++*(_QWORD *)v57;
    }
    while (*(_QWORD *)v57 < (unint64_t)((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4));
  }
  v38 = v64;
  for (i = v64 + 24;
        ;
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)a2 + 23, i + 2))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  v40 = v65;
  if (v65)
  {
    v41 = (unint64_t *)&v65->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    *(_BYTE *)v51 = 1;
    *(_QWORD *)(v51 + 8) = v38;
    *(_QWORD *)(v51 + 16) = v40;
    do
      v43 = __ldxr(v41);
    while (__stxr(v43 + 1, v41));
    do
      v44 = __ldaxr(v41);
    while (__stlxr(v44 - 1, v41));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  else
  {
    *(_BYTE *)v51 = 1;
    *(_QWORD *)(v51 + 8) = v38;
    *(_QWORD *)(v51 + 16) = 0;
  }
  if (v63 < 0)
    operator delete(__p);
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  v48 = v65;
  if (v65)
  {
    v49 = (unint64_t *)&v65->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_190E2791C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v29;

  Espresso::unpack_options::~unpack_options(&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 200);
  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::should_unpack()
{
  return 0;
}

_QWORD *std::vector<std::shared_ptr<Espresso::layer>>::insert(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  int64x2_t v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  int64x2_t v55;
  char *v56;
  _QWORD *v57;

  v3 = a3;
  v4 = (uint64_t **)result;
  v6 = (uint64_t *)*result;
  v5 = result[1];
  v7 = (uint64_t)a2 - *result;
  v8 = v7 >> 4;
  v9 = (uint64_t *)(*result + (v7 & 0xFFFFFFFFFFFFFFF0));
  v11 = result + 2;
  v10 = result[2];
  if (v5 >= v10)
  {
    v16 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
    if (v16 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v18 = v10 - (_QWORD)v6;
    if (v18 >> 3 > v16)
      v16 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v16;
    v53 = v11;
    if (v19)
      v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v19);
    else
      v20 = 0;
    v24 = (uint64_t *)(v19 + 16 * v8);
    v50 = (char *)v19;
    *(_QWORD *)&v51 = v24;
    *((_QWORD *)&v51 + 1) = v24;
    v52 = (char *)(v19 + 16 * v20);
    if (v8 == v20)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v28 = 1;
        else
          v28 = v7 >> 3;
        v57 = v11;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v28);
        v31 = v51;
        v32 = *((_QWORD *)&v51 + 1) - v51;
        if (*((_QWORD *)&v51 + 1) == (_QWORD)v51)
        {
          v37 = vdupq_n_s64(v51);
          v34 = (unint64_t)&v29[16 * (v28 >> 2)];
        }
        else
        {
          v33 = v32 >> 4;
          v34 = (unint64_t)&v29[16 * (v28 >> 2) + (v32 & 0xFFFFFFFFFFFFFFF0)];
          v35 = 16 * v33;
          v36 = &v29[16 * (v28 >> 2)];
          do
          {
            *(_OWORD *)v36 = *(_OWORD *)v31;
            v36 += 16;
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
            v31 += 16;
            v35 -= 16;
          }
          while (v35);
          v37 = (int64x2_t)v51;
        }
        v38 = v52;
        v54 = v50;
        v50 = v29;
        *(_QWORD *)&v51 = &v29[16 * (v28 >> 2)];
        v55 = v37;
        *((_QWORD *)&v51 + 1) = v34;
        v52 = &v29[16 * v30];
        v56 = v38;
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v54);
        v24 = (uint64_t *)*((_QWORD *)&v51 + 1);
      }
      else
      {
        v25 = v8 + 2;
        if (v8 >= -1)
          v25 = v8 + 1;
        v24 -= 2 * (v25 >> 1);
        *(_QWORD *)&v51 = v24;
        *((_QWORD *)&v51 + 1) = v24;
      }
    }
    *v24 = *v3;
    v39 = v3[1];
    v24[1] = v39;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v24 = (uint64_t *)*((_QWORD *)&v51 + 1);
    }
    v42 = v24 + 2;
    *((_QWORD *)&v51 + 1) = v42;
    v43 = (uint64_t *)v51;
    v44 = *v4;
    if (*v4 != v9)
    {
      v45 = v9;
      do
      {
        v46 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v43 - 1) = v46;
        v43 -= 2;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v44);
      v42 = (uint64_t *)*((_QWORD *)&v51 + 1);
    }
    *(_QWORD *)&v51 = v43;
    v47 = v4[1];
    if (v47 != v9)
    {
      do
      {
        *(_OWORD *)v42 = *(_OWORD *)v9;
        v42 += 2;
        *v9 = 0;
        v9[1] = 0;
        v9 += 2;
      }
      while (v9 != v47);
      v43 = (uint64_t *)v51;
      v9 = v4[1];
    }
    v48 = *v4;
    *v4 = v43;
    v4[1] = v42;
    v49 = (char *)v4[2];
    v4[2] = (uint64_t *)v52;
    *((_QWORD *)&v51 + 1) = v9;
    v52 = v49;
    v50 = (char *)v48;
    *(_QWORD *)&v51 = v48;
    return (_QWORD *)std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v50);
  }
  else if (v9 == (uint64_t *)v5)
  {
    v21 = *(_OWORD *)a3;
    *(_OWORD *)v9 = *(_OWORD *)a3;
    if (*((_QWORD *)&v21 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    result[1] = v9 + 2;
  }
  else
  {
    v12 = v9 + 2;
    v13 = v5 - 16;
    if (v5 < 0x10)
    {
      v15 = (uint64_t *)v5;
    }
    else
    {
      v14 = v5 - 16;
      v15 = (uint64_t *)v5;
      do
      {
        *(_OWORD *)v15 = *(_OWORD *)v14;
        v15 += 2;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        v14 += 16;
      }
      while (v14 < v5);
    }
    v4[1] = v15;
    if ((_QWORD *)v5 != v12)
    {
      v26 = 16 * ((uint64_t)(v5 - (_QWORD)v12) >> 4);
      v27 = (uint64_t)&v6[2 * v8 - 2];
      do
      {
        v13 = std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v13, (__int128 *)(v27 + v26))
            - 16;
        v26 -= 16;
      }
      while (v26);
    }
    if (v9 <= v3)
      v3 += 2 * (v4[1] > v3);
    return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v9, *v3, v3[1]);
  }
  return result;
}

void sub_190E27CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*,false>(int *a1, int *a2, uint64_t a3, char a4)
{
  int *v6;
  int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  std::vector<std::string> *v13;
  std::vector<std::string> *v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int *v39;
  int *v40;
  _DWORD *v41;
  int *v42;
  uint64_t v43;
  int *v44;
  int *v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  int begin;
  uint64_t v50;
  std::vector<std::string> *v51;
  __int128 *v52;
  int *v53;
  std::vector<std::string> *v54;
  std::vector<std::string> *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  int v65;
  int *v66;
  int *v67;
  int v68;
  int *v69;
  uint64_t v70;
  int v71;
  int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int *v96;
  int *v97;
  int *v98;
  int v99;
  __int128 v100;
  int *v101;
  int v102;
  uint64_t v103;
  std::vector<std::string> *v104;
  std::vector<std::string> *v105;
  int v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v113;
  int *v114;
  uint64_t v115;
  int *v117;
  void **v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  void **v124;
  void **v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;

LABEL_1:
  v6 = a2;
  v114 = a2 - 18;
  v7 = a1;
  while (2)
  {
    v8 = v7;
    v9 = (char *)v6 - (char *)v7;
    v10 = 0x8E38E38E38E38E39 * (((char *)v6 - (char *)v7) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*v114 > *v8)
        {
          v39 = v8;
          v40 = a2 - 18;
          goto LABEL_64;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v8, v8 + 18, v114);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v8, v8 + 18, v8 + 36, v114);
        return;
      case 5uLL:
        v41 = v8 + 36;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v8, v8 + 18, v8 + 36, v8 + 54);
        if (*v114 > v8[54])
        {
          std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v8 + 54, v114);
          if (v8[54] > *v41)
          {
            std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v8 + 36, v8 + 54);
            if (*v41 > v8[18])
            {
              std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v8 + 18, v8 + 36);
              if (v8[18] > *v8)
              {
                v39 = v8;
                v40 = v8 + 18;
LABEL_64:
                std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v39, v40);
              }
            }
          }
        }
        return;
      default:
        if (v9 > 1727)
        {
          v117 = v8;
          if (!a3)
          {
            if (v8 != v6)
            {
              v59 = (v10 - 2) >> 1;
              v60 = v59;
              do
              {
                v61 = v60;
                if (v59 >= v60)
                {
                  v62 = (2 * v60) | 1;
                  v63 = &v8[18 * v62];
                  if (2 * v61 + 2 >= (uint64_t)v10)
                  {
                    v64 = *v63;
                  }
                  else
                  {
                    v64 = *v63;
                    v65 = v63[18];
                    if (*v63 >= v65)
                      v64 = v63[18];
                    if (*v63 > v65)
                    {
                      v63 += 18;
                      v62 = 2 * v61 + 2;
                    }
                  }
                  v66 = &v8[18 * v61];
                  if (v64 <= *v66)
                  {
                    LODWORD(v125) = *v66;
                    v67 = &v8[18 * v61];
                    v126 = *(_OWORD *)(v67 + 2);
                    *((_QWORD *)v67 + 1) = 0;
                    *((_QWORD *)v67 + 2) = 0;
                    v127 = *(_OWORD *)(v67 + 6);
                    v128 = *((_QWORD *)v67 + 5);
                    *((_QWORD *)v67 + 3) = 0;
                    *((_QWORD *)v67 + 4) = 0;
                    *((_QWORD *)v67 + 5) = 0;
                    v129 = *((_OWORD *)v67 + 3);
                    v130 = *((_QWORD *)v67 + 8);
                    *((_QWORD *)v67 + 6) = 0;
                    *((_QWORD *)v67 + 7) = 0;
                    *((_QWORD *)v67 + 8) = 0;
                    v68 = *v63;
                    while (1)
                    {
                      v69 = v63;
                      *v66 = v68;
                      v70 = (uint64_t)(v63 + 2);
                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v66 + 2), (__int128 *)(v63 + 2));
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v66 + 1);
                      *(_OWORD *)(v66 + 6) = *(_OWORD *)(v69 + 6);
                      *((_QWORD *)v66 + 5) = *((_QWORD *)v69 + 5);
                      *((_QWORD *)v69 + 3) = 0;
                      *((_QWORD *)v69 + 4) = 0;
                      *((_QWORD *)v69 + 5) = 0;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v66 + 2);
                      *((_OWORD *)v66 + 3) = *((_OWORD *)v69 + 3);
                      *((_QWORD *)v66 + 8) = *((_QWORD *)v69 + 8);
                      *((_QWORD *)v69 + 6) = 0;
                      *((_QWORD *)v69 + 7) = 0;
                      *((_QWORD *)v69 + 8) = 0;
                      if (v59 < v62)
                        break;
                      v63 = &v117[18 * ((2 * v62) | 1)];
                      if (2 * v62 + 2 >= (uint64_t)v10)
                      {
                        v68 = *v63;
                        v62 = (2 * v62) | 1;
                      }
                      else
                      {
                        v68 = *v63;
                        v71 = v63[18];
                        if (*v63 >= v71)
                          v68 = v63[18];
                        if (*v63 <= v71)
                        {
                          v62 = (2 * v62) | 1;
                        }
                        else
                        {
                          v63 += 18;
                          v62 = 2 * v62 + 2;
                        }
                      }
                      v72 = (int)v125;
                      v66 = v69;
                      if (v68 > (int)v125)
                        goto LABEL_112;
                    }
                    v72 = (int)v125;
LABEL_112:
                    *v69 = v72;
                    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v70, &v126);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v69 + 1);
                    *(_OWORD *)(v69 + 6) = v127;
                    *((_QWORD *)v69 + 5) = v128;
                    v127 = 0uLL;
                    v128 = 0;
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v69 + 2);
                    *((_OWORD *)v69 + 3) = v129;
                    *((_QWORD *)v69 + 8) = v130;
                    v129 = 0uLL;
                    v130 = 0;
                    v118 = (void **)&v129;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
                    v118 = (void **)&v127;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
                    v73 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
                    v8 = v117;
                    if (*((_QWORD *)&v126 + 1))
                    {
                      v74 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
                      do
                        v75 = __ldaxr(v74);
                      while (__stlxr(v75 - 1, v74));
                      if (!v75)
                      {
                        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                        std::__shared_weak_count::__release_weak(v73);
                      }
                    }
                  }
                }
                v60 = v61 - 1;
              }
              while (v61);
              v76 = v9 / 0x48uLL;
              v111 = v8 + 6;
              v113 = v8 + 2;
              v110 = v8 + 12;
              do
              {
                v77 = 0;
                LODWORD(v118) = *v8;
                v119 = *(_OWORD *)(v8 + 2);
                *v113 = 0;
                v113[1] = 0;
                v120 = *(_OWORD *)(v8 + 6);
                v121 = *((_QWORD *)v8 + 5);
                v111[1] = 0;
                v111[2] = 0;
                *v111 = 0;
                v122 = *((_OWORD *)v8 + 3);
                v123 = *((_QWORD *)v8 + 8);
                v110[1] = 0;
                v110[2] = 0;
                v78 = (uint64_t)v8;
                *v110 = 0;
                do
                {
                  v79 = v78 + 72 * v77 + 72;
                  if (2 * v77 + 2 >= v76)
                  {
                    v80 = *(_DWORD *)v79;
                    v77 = (2 * v77) | 1;
                  }
                  else
                  {
                    v80 = *(_DWORD *)v79;
                    v81 = *(_DWORD *)(v78 + 72 * v77 + 144);
                    if (*(_DWORD *)v79 >= v81)
                      v80 = *(_DWORD *)(v78 + 72 * v77 + 144);
                    if (*(_DWORD *)v79 <= v81)
                    {
                      v77 = (2 * v77) | 1;
                    }
                    else
                    {
                      v79 = v78 + 72 * v77 + 144;
                      v77 = 2 * v77 + 2;
                    }
                  }
                  *(_DWORD *)v78 = v80;
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v78 + 8, (__int128 *)(v79 + 8));
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v78 + 24));
                  *(_OWORD *)(v78 + 24) = *(_OWORD *)(v79 + 24);
                  *(_QWORD *)(v78 + 40) = *(_QWORD *)(v79 + 40);
                  *(_QWORD *)(v79 + 24) = 0;
                  *(_QWORD *)(v79 + 32) = 0;
                  *(_QWORD *)(v79 + 40) = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v78 + 48));
                  *(_OWORD *)(v78 + 48) = *(_OWORD *)(v79 + 48);
                  *(_QWORD *)(v78 + 64) = *(_QWORD *)(v79 + 64);
                  *(_QWORD *)(v79 + 48) = 0;
                  *(_QWORD *)(v79 + 56) = 0;
                  *(_QWORD *)(v79 + 64) = 0;
                  v78 = v79;
                }
                while (v77 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
                if ((int *)v79 == a2 - 18)
                {
                  *(_DWORD *)v79 = (_DWORD)v118;
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v79 + 8, &v119);
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v79 + 24));
                  *(_OWORD *)(v79 + 24) = v120;
                  *(_QWORD *)(v79 + 40) = v121;
                  v120 = 0uLL;
                  v121 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v79 + 48));
                  *(_OWORD *)(v79 + 48) = v122;
                  *(_QWORD *)(v79 + 64) = v123;
                  v122 = 0uLL;
                  v123 = 0;
                }
                else
                {
                  *(_DWORD *)v79 = *(a2 - 18);
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v79 + 8, (__int128 *)a2 - 4);
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v79 + 24));
                  *(_OWORD *)(v79 + 24) = *((_OWORD *)a2 - 3);
                  *(_QWORD *)(v79 + 40) = *((_QWORD *)a2 - 4);
                  *((_QWORD *)a2 - 6) = 0;
                  *((_QWORD *)a2 - 5) = 0;
                  *((_QWORD *)a2 - 4) = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v79 + 48));
                  v82 = a2 - 6;
                  *(_OWORD *)(v79 + 48) = *(_OWORD *)(a2 - 6);
                  *(_QWORD *)(v79 + 64) = *((_QWORD *)a2 - 1);
                  *(_QWORD *)v82 = 0;
                  *((_QWORD *)v82 + 1) = 0;
                  *((_QWORD *)v82 + 2) = 0;
                  *(a2 - 18) = (int)v118;
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a2 - 16), &v119);
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a2 - 2);
                  *((_OWORD *)a2 - 3) = v120;
                  *((_QWORD *)a2 - 4) = v121;
                  v120 = 0uLL;
                  v121 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a2 - 1);
                  *(_OWORD *)v82 = v122;
                  *((_QWORD *)v82 + 2) = v123;
                  v122 = 0uLL;
                  v123 = 0;
                  v83 = v79 - (_QWORD)v117 + 72;
                  if (v83 >= 73)
                  {
                    v84 = (v83 / 0x48uLL - 2) >> 1;
                    v85 = (uint64_t)&v117[18 * v84];
                    if (*(_DWORD *)v85 > *(_DWORD *)v79)
                    {
                      LODWORD(v125) = *(_DWORD *)v79;
                      v126 = *(_OWORD *)(v79 + 8);
                      *(_QWORD *)(v79 + 8) = 0;
                      *(_QWORD *)(v79 + 16) = 0;
                      v127 = *(_OWORD *)(v79 + 24);
                      v128 = *(_QWORD *)(v79 + 40);
                      *(_QWORD *)(v79 + 24) = 0;
                      *(_QWORD *)(v79 + 32) = 0;
                      *(_QWORD *)(v79 + 40) = 0;
                      v129 = *(_OWORD *)(v79 + 48);
                      v130 = *(_QWORD *)(v79 + 64);
                      *(_QWORD *)(v79 + 48) = 0;
                      *(_QWORD *)(v79 + 56) = 0;
                      *(_QWORD *)(v79 + 64) = 0;
                      v86 = *(_DWORD *)v85;
                      do
                      {
                        v87 = v85;
                        *(_DWORD *)v79 = v86;
                        v88 = v85 + 8;
                        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v79 + 8, (__int128 *)(v85 + 8));
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v79 + 24));
                        *(_OWORD *)(v79 + 24) = *(_OWORD *)(v87 + 24);
                        *(_QWORD *)(v79 + 40) = *(_QWORD *)(v87 + 40);
                        *(_QWORD *)(v87 + 24) = 0;
                        *(_QWORD *)(v87 + 32) = 0;
                        *(_QWORD *)(v87 + 40) = 0;
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v79 + 48));
                        *(_OWORD *)(v79 + 48) = *(_OWORD *)(v87 + 48);
                        *(_QWORD *)(v79 + 64) = *(_QWORD *)(v87 + 64);
                        *(_QWORD *)(v87 + 48) = 0;
                        *(_QWORD *)(v87 + 56) = 0;
                        *(_QWORD *)(v87 + 64) = 0;
                        if (!v84)
                          break;
                        v84 = (v84 - 1) >> 1;
                        v85 = (uint64_t)&v117[18 * v84];
                        v86 = *(_DWORD *)v85;
                        v79 = v87;
                      }
                      while (*(_DWORD *)v85 > (int)v125);
                      *(_DWORD *)v87 = (_DWORD)v125;
                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v88, &v126);
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v87 + 24));
                      *(_OWORD *)(v87 + 24) = v127;
                      *(_QWORD *)(v87 + 40) = v128;
                      v127 = 0uLL;
                      v128 = 0;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v87 + 48));
                      *(_OWORD *)(v87 + 48) = v129;
                      *(_QWORD *)(v87 + 64) = v130;
                      v129 = 0uLL;
                      v130 = 0;
                      v124 = (void **)&v129;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v124);
                      v124 = (void **)&v127;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v124);
                      v89 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
                      if (*((_QWORD *)&v126 + 1))
                      {
                        v90 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
                        do
                          v91 = __ldaxr(v90);
                        while (__stlxr(v91 - 1, v90));
                        if (!v91)
                        {
                          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                          std::__shared_weak_count::__release_weak(v89);
                        }
                      }
                    }
                  }
                }
                v125 = (void **)&v122;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v125);
                v125 = (void **)&v120;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v125);
                v92 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
                v8 = v117;
                if (*((_QWORD *)&v119 + 1))
                {
                  v93 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                }
                a2 -= 18;
              }
              while (v76-- > 2);
            }
            return;
          }
          if ((unint64_t)v9 < 0x2401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(&v8[18 * (v10 >> 1)], v8, v114);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v8, &v8[18 * (v10 >> 1)], v114);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v8 + 18, &v8[18 * (v10 >> 1) - 18], a2 - 36);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v8 + 36, &v8[18 * (v10 >> 1) + 18], a2 - 54);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(&v8[18 * (v10 >> 1) - 18], &v8[18 * (v10 >> 1)], &v8[18 * (v10 >> 1) + 18]);
            std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v8, &v8[18 * (v10 >> 1)]);
          }
          v115 = a3 - 1;
          v11 = *v8;
          if ((a4 & 1) == 0 && *(v8 - 18) <= v11)
          {
            v28 = *(_OWORD *)(v8 + 2);
            LODWORD(v125) = *v8;
            v126 = v28;
            v29 = *(_OWORD *)(v8 + 6);
            *((_QWORD *)v8 + 1) = 0;
            *((_QWORD *)v8 + 2) = 0;
            v127 = v29;
            v128 = *((_QWORD *)v8 + 5);
            *((_QWORD *)v8 + 3) = 0;
            *((_QWORD *)v8 + 4) = 0;
            *((_QWORD *)v8 + 5) = 0;
            v129 = *((_OWORD *)v8 + 3);
            v130 = *((_QWORD *)v8 + 8);
            *((_QWORD *)v8 + 6) = 0;
            *((_QWORD *)v8 + 7) = 0;
            *((_QWORD *)v8 + 8) = 0;
            if (v11 <= *v114)
            {
              v31 = v8 + 18;
              do
              {
                v7 = v31;
                if (v31 >= v6)
                  break;
                v31 += 18;
              }
              while (v11 <= *v7);
            }
            else
            {
              v7 = v8;
              do
              {
                v30 = v7[18];
                v7 += 18;
              }
              while (v11 <= v30);
            }
            v32 = v6;
            if (v7 < v6)
            {
              v32 = v6;
              do
              {
                v33 = *(v32 - 18);
                v32 -= 18;
              }
              while (v11 > v33);
            }
            while (v7 < v32)
            {
              std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v7, v32);
              do
              {
                v34 = v7[18];
                v7 += 18;
              }
              while (v11 <= v34);
              do
              {
                v35 = *(v32 - 18);
                v32 -= 18;
              }
              while (v11 > v35);
            }
            if (v7 - 18 != v8)
            {
              *v8 = *(v7 - 18);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v8 + 2), (__int128 *)v7 - 4);
              std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v8 + 1);
              *(_OWORD *)(v8 + 6) = *((_OWORD *)v7 - 3);
              *((_QWORD *)v8 + 5) = *((_QWORD *)v7 - 4);
              *((_QWORD *)v7 - 6) = 0;
              *((_QWORD *)v7 - 5) = 0;
              *((_QWORD *)v7 - 4) = 0;
              std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v8 + 2);
              *((_OWORD *)v8 + 3) = *(_OWORD *)(v7 - 6);
              *((_QWORD *)v8 + 8) = *((_QWORD *)v7 - 1);
              *((_QWORD *)v7 - 3) = 0;
              *((_QWORD *)v7 - 2) = 0;
              *((_QWORD *)v7 - 1) = 0;
            }
            *(v7 - 18) = v11;
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v7 - 16), &v126);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v7 - 2);
            *((_OWORD *)v7 - 3) = v127;
            *((_QWORD *)v7 - 4) = v128;
            v127 = 0uLL;
            v128 = 0;
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v7 - 1);
            *(_OWORD *)(v7 - 6) = v129;
            *((_QWORD *)v7 - 1) = v130;
            v129 = 0uLL;
            v130 = 0;
            v118 = (void **)&v129;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
            v118 = (void **)&v127;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
            v36 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
            a3 = v115;
            if (*((_QWORD *)&v126 + 1))
            {
              v37 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            goto LABEL_36;
          }
          LODWORD(v125) = *v8;
          v12 = (uint64_t)(v8 + 2);
          v126 = *(_OWORD *)(v8 + 2);
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v8 + 2) = 0;
          v13 = (std::vector<std::string> *)(v8 + 6);
          v127 = *(_OWORD *)(v8 + 6);
          v128 = *((_QWORD *)v8 + 5);
          *((_QWORD *)v8 + 3) = 0;
          *((_QWORD *)v8 + 4) = 0;
          *((_QWORD *)v8 + 5) = 0;
          v14 = (std::vector<std::string> *)(v8 + 12);
          v129 = *((_OWORD *)v8 + 3);
          v130 = *((_QWORD *)v8 + 8);
          *((_QWORD *)v8 + 6) = 0;
          *((_QWORD *)v8 + 7) = 0;
          *((_QWORD *)v8 + 8) = 0;
          do
          {
            v15 = v8;
            v16 = v8[18];
            v8 += 18;
          }
          while (v16 > v11);
          v17 = v6;
          if (v15 == v117)
          {
            v17 = v6;
            do
            {
              if (v8 >= v17)
                break;
              v19 = *(v17 - 18);
              v17 -= 18;
            }
            while (v19 <= v11);
          }
          else
          {
            do
            {
              v18 = *(v17 - 18);
              v17 -= 18;
            }
            while (v18 <= v11);
          }
          v7 = v8;
          if (v8 < v17)
          {
            v20 = v17;
            do
            {
              std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v7, v20);
              do
              {
                v21 = v7[18];
                v7 += 18;
              }
              while (v21 > v11);
              do
              {
                v22 = *(v20 - 18);
                v20 -= 18;
              }
              while (v22 <= v11);
            }
            while (v7 < v20);
          }
          if (v7 - 18 != v117)
          {
            *v117 = *(v7 - 18);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)v7 - 4);
            std::vector<std::string>::__vdeallocate(v13);
            *(_OWORD *)(v117 + 6) = *((_OWORD *)v7 - 3);
            *((_QWORD *)v117 + 5) = *((_QWORD *)v7 - 4);
            *((_QWORD *)v7 - 6) = 0;
            *((_QWORD *)v7 - 5) = 0;
            *((_QWORD *)v7 - 4) = 0;
            std::vector<std::string>::__vdeallocate(v14);
            *((_OWORD *)v117 + 3) = *(_OWORD *)(v7 - 6);
            *((_QWORD *)v117 + 8) = *((_QWORD *)v7 - 1);
            *((_QWORD *)v7 - 3) = 0;
            *((_QWORD *)v7 - 2) = 0;
            *((_QWORD *)v7 - 1) = 0;
          }
          *(v7 - 18) = v11;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v7 - 16), &v126);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v7 - 2);
          *((_OWORD *)v7 - 3) = v127;
          *((_QWORD *)v7 - 4) = v128;
          v127 = 0uLL;
          v128 = 0;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v7 - 1);
          *(_OWORD *)(v7 - 6) = v129;
          *((_QWORD *)v7 - 1) = v130;
          v129 = 0uLL;
          v130 = 0;
          v118 = (void **)&v129;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
          v118 = (void **)&v127;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
          v23 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
          a3 = v115;
          v6 = a2;
          if (*((_QWORD *)&v126 + 1))
          {
            v24 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v26 = v8 >= v17;
          a1 = v117;
          if (!v26)
            goto LABEL_35;
          v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v117, v7 - 18);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v7, a2))
          {
            if (v27)
              continue;
LABEL_35:
            std::__introsort<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*,false>(v117, v7 - 18, v115, a4 & 1);
LABEL_36:
            a4 = 0;
            continue;
          }
          a2 = v7 - 18;
          if (v27)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (v8 != v6)
          {
            v42 = v8 + 18;
            if (v8 + 18 != a2)
            {
              v43 = 0;
              v44 = v8;
              do
              {
                v45 = v42;
                v46 = v44[18];
                if (v46 > *v44)
                {
                  v47 = *((_OWORD *)v44 + 6);
                  v126 = *((_OWORD *)v44 + 5);
                  LODWORD(v125) = v46;
                  *((_QWORD *)v44 + 10) = 0;
                  *((_QWORD *)v44 + 11) = 0;
                  v127 = v47;
                  v128 = *((_QWORD *)v44 + 14);
                  *((_QWORD *)v44 + 12) = 0;
                  *((_QWORD *)v44 + 13) = 0;
                  v129 = *(_OWORD *)(v44 + 30);
                  v130 = *((_QWORD *)v44 + 17);
                  *((_QWORD *)v44 + 14) = 0;
                  *((_QWORD *)v44 + 15) = 0;
                  *((_QWORD *)v44 + 16) = 0;
                  *((_QWORD *)v44 + 17) = 0;
                  v48 = v43;
                  begin = *v44;
                  while (1)
                  {
                    v50 = v48;
                    v51 = (std::vector<std::string> *)((char *)v8 + v48);
                    *(int *)((char *)v8 + v48 + 72) = begin;
                    v52 = (__int128 *)((char *)v8 + v48 + 8);
                    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v8 + v48 + 80, v52);
                    std::vector<std::string>::__vdeallocate(v51 + 4);
                    *(_OWORD *)&v51[4].__begin_ = *(_OWORD *)&v51[1].__begin_;
                    v51[4].__end_cap_.__value_ = v51[1].__end_cap_.__value_;
                    v51[1].__end_ = 0;
                    v51[1].__end_cap_.__value_ = 0;
                    v51[1].__begin_ = 0;
                    std::vector<std::string>::__vdeallocate(v51 + 5);
                    *(_OWORD *)&v51[5].__begin_ = *(_OWORD *)&v51[2].__begin_;
                    v51[5].__end_cap_.__value_ = v51[2].__end_cap_.__value_;
                    v51[2].__begin_ = 0;
                    v51[2].__end_ = 0;
                    v51[2].__end_cap_.__value_ = 0;
                    if (!v50)
                      break;
                    begin = (int)v51[-3].__begin_;
                    v48 = v50 - 72;
                    if ((int)v125 <= begin)
                    {
                      v52 = (__int128 *)((char *)v8 + v50 + 8);
                      v53 = (int *)((char *)v8 + v50);
                      v54 = (std::vector<std::string> *)(v53 + 6);
                      v55 = (std::vector<std::string> *)(v53 + 12);
                      goto LABEL_82;
                    }
                  }
                  v54 = v51 + 1;
                  v55 = v51 + 2;
                  v53 = v8;
LABEL_82:
                  *v53 = (int)v125;
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v52, &v126);
                  std::vector<std::string>::__vdeallocate(v54);
                  v54->__begin_ = (std::vector<std::string>::pointer)v127;
                  *((_QWORD *)v53 + 4) = *((_QWORD *)&v127 + 1);
                  *((_QWORD *)v53 + 5) = v128;
                  v127 = 0uLL;
                  v128 = 0;
                  std::vector<std::string>::__vdeallocate(v55);
                  v55->__begin_ = (std::vector<std::string>::pointer)v129;
                  *((_QWORD *)v53 + 7) = *((_QWORD *)&v129 + 1);
                  *((_QWORD *)v53 + 8) = v130;
                  v129 = 0uLL;
                  v130 = 0;
                  v118 = (void **)&v129;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
                  v118 = (void **)&v127;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
                  v56 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
                  if (*((_QWORD *)&v126 + 1))
                  {
                    v57 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                }
                v42 = v45 + 18;
                v43 += 72;
                v44 = v45;
              }
              while (v45 + 18 != a2);
            }
          }
        }
        else if (v8 != v6)
        {
          v96 = v8 + 18;
          if (v8 + 18 != a2)
          {
            v97 = v8 - 18;
            do
            {
              v98 = v96;
              v99 = v8[18];
              if (v99 > *v8)
              {
                v100 = *((_OWORD *)v8 + 6);
                v126 = *((_OWORD *)v8 + 5);
                LODWORD(v125) = v99;
                *((_QWORD *)v8 + 10) = 0;
                *((_QWORD *)v8 + 11) = 0;
                v127 = v100;
                v128 = *((_QWORD *)v8 + 14);
                *((_QWORD *)v8 + 12) = 0;
                *((_QWORD *)v8 + 13) = 0;
                v129 = *(_OWORD *)(v8 + 30);
                v130 = *((_QWORD *)v8 + 17);
                *((_QWORD *)v8 + 14) = 0;
                *((_QWORD *)v8 + 15) = 0;
                *((_QWORD *)v8 + 16) = 0;
                *((_QWORD *)v8 + 17) = 0;
                v101 = v97;
                v102 = *v8;
                do
                {
                  v101[36] = v102;
                  v103 = (uint64_t)(v101 + 20);
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v101 + 38), (__int128 *)v101 + 5);
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v101 + 7);
                  v104 = (std::vector<std::string> *)(v101 + 24);
                  *(_OWORD *)(v101 + 42) = *((_OWORD *)v101 + 6);
                  *((_QWORD *)v101 + 23) = *((_QWORD *)v101 + 14);
                  *((_QWORD *)v101 + 13) = 0;
                  *((_QWORD *)v101 + 14) = 0;
                  *((_QWORD *)v101 + 12) = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v101 + 8);
                  v105 = (std::vector<std::string> *)(v101 + 30);
                  *((_OWORD *)v101 + 12) = *(_OWORD *)(v101 + 30);
                  *((_QWORD *)v101 + 26) = *((_QWORD *)v101 + 17);
                  *((_QWORD *)v101 + 15) = 0;
                  *((_QWORD *)v101 + 16) = 0;
                  *((_QWORD *)v101 + 17) = 0;
                  v106 = *v101;
                  v101 -= 18;
                  v102 = v106;
                }
                while ((int)v125 > v106);
                v101[36] = (int)v125;
                std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v103, &v126);
                std::vector<std::string>::__vdeallocate(v104);
                *(_OWORD *)(v101 + 42) = v127;
                *((_QWORD *)v101 + 23) = v128;
                v127 = 0uLL;
                v128 = 0;
                std::vector<std::string>::__vdeallocate(v105);
                *((_OWORD *)v101 + 12) = v129;
                *((_QWORD *)v101 + 26) = v130;
                v129 = 0uLL;
                v130 = 0;
                v118 = (void **)&v129;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
                v118 = (void **)&v127;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v118);
                v107 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
                if (*((_QWORD *)&v126 + 1))
                {
                  v108 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
                  do
                    v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
              }
              v96 = v98 + 18;
              v97 += 18;
              v8 = v98;
            }
            while (v98 + 18 != a2);
          }
        }
        return;
    }
  }
}

  v9 = (const void **)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v33 = (const void **)*(a2 - 3);
        v32 = a2 - 3;
        v31 = v33;
        v34 = *(char *)(a1 + 23);
        v35 = *((char *)v32 + 23);
        if (v35 >= 0)
          v36 = *((unsigned __int8 *)v32 + 23);
        else
          v36 = (size_t)v32[1];
        if (v35 >= 0)
          v37 = v32;
        else
          v37 = v31;
        if (v34 >= 0)
          v38 = *(unsigned __int8 *)(a1 + 23);
        else
          v38 = *(_QWORD *)(a1 + 8);
        if (v34 >= 0)
          v39 = (const void *)a1;
        else
          v39 = *(const void **)a1;
        if (v38 >= v36)
          v40 = v36;
        else
          v40 = v38;
        v41 = memcmp(v37, v39, v40);
        v42 = v36 < v38;
        if (v41)
          v42 = v41 < 0;
        if (v42)
        {
          v52 = *(const void **)(a1 + 16);
          v50 = *(_OWORD *)a1;
          v43 = *(_OWORD *)v32;
          *(_QWORD *)(a1 + 16) = v32[2];
          *(_OWORD *)a1 = v43;
          *(_OWORD *)v32 = v50;
          v32[2] = v52;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a2 - 3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), a2 - 3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2);
          return;
        }
        if (v10 != 1)
        {
          v14 = v13 >> 1;
          v15 = a1 + 24 * (v13 >> 1);
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)v15, (const void **)a1, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_28;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)v15, a2 - 3);
            v16 = 24 * v14;
            v17 = (const void **)(24 * v14 + a1 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24), v17, a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 48), (const void **)(a1 + 24 + v16), a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v17, (const void **)v15, (const void **)(a1 + 24 + v16));
            v51 = *(_QWORD *)(a1 + 16);
            v49 = *(_OWORD *)a1;
            v18 = *(_OWORD *)v15;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v15 + 16);
            *(_OWORD *)a1 = v18;
            *(_QWORD *)(v15 + 16) = v51;
            *(_OWORD *)v15 = v49;
            if ((a5 & 1) != 0)
              goto LABEL_28;
          }
          v19 = *(char *)(a1 + 23);
          v20 = *(char *)(a1 - 1);
          if (v20 >= 0)
            v21 = *(unsigned __int8 *)(a1 - 1);
          else
            v21 = *(_QWORD *)(a1 - 16);
          if (v20 >= 0)
            v22 = (const void *)(a1 - 24);
          else
            v22 = *(const void **)(a1 - 24);
          if (v19 >= 0)
            v23 = *(unsigned __int8 *)(a1 + 23);
          else
            v23 = *(_QWORD *)(a1 + 8);
          if (v19 >= 0)
            v24 = (const void *)a1;
          else
            v24 = *(const void **)a1;
          if (v23 >= v21)
            v25 = v21;
          else
            v25 = v23;
          v26 = memcmp(v22, v24, v25);
          v27 = v21 < v23;
          if (v26)
            v27 = v26 < 0;
          if (!v27)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, a2);
            goto LABEL_33;
          }
LABEL_28:
          v28 = (const void **)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((__int128 *)a1, (uint64_t)a2);
          if ((v29 & 1) == 0)
            goto LABEL_31;
          v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v28);
          v9 = v28 + 3;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)(v28 + 3), a2))
          {
            v10 = v11 + 1;
            if (v30)
              continue;
LABEL_31:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v28, a3, -v11, a5 & 1);
            v9 = v28 + 3;
LABEL_33:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v28;
          if (v30)
            return;
          goto LABEL_1;
        }
        if ((const void **)a1 != a2)
        {
          v44 = (v13 - 2) >> 1;
          v45 = v44 + 1;
          v46 = (__n128 *)(a1 + 24 * v44);
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v12 >> 3), v46);
            v46 = (__n128 *)((char *)v46 - 24);
            --v45;
          }
          while (v45);
          v47 = v12 / 0x18uLL;
          do
          {
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(a1, (uint64_t)a2, a3, v47);
            a2 -= 3;
          }
          while (v47-- > 2);
        }
        return;
    }
  }
}

  v8 = a2 - 24;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)v8 < *(_QWORD *)v9)
        {
          v107 = *(_QWORD *)(v9 + 16);
          v99 = *(_OWORD *)v9;
          v41 = *(_OWORD *)v8;
          *(_BYTE *)(v9 + 16) = *(_BYTE *)(a2 - 8);
          *(_OWORD *)v9 = v41;
          *(_BYTE *)(a2 - 8) = v107;
          *(_OWORD *)v8 = v99;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)v9, (unint64_t *)(v9 + 24), (unint64_t *)(a2 - 24));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(v9, (unint64_t *)(v9 + 24), (unint64_t *)(v9 + 48), a2 - 24);
        return;
      case 5:
        v42 = (__int128 *)(v9 + 24);
        v43 = (__int128 *)(v9 + 48);
        v44 = (__int128 *)(v9 + 72);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(v9, (unint64_t *)(v9 + 24), (unint64_t *)(v9 + 48), v9 + 72);
        if (*(_QWORD *)v8 < *(_QWORD *)(v9 + 72))
        {
          v45 = *v44;
          v46 = *(_QWORD *)(v9 + 88);
          v47 = *(_BYTE *)(v8 + 16);
          *v44 = *(_OWORD *)v8;
          *(_BYTE *)(v9 + 88) = v47;
          *(_BYTE *)(v8 + 16) = v46;
          *(_OWORD *)v8 = v45;
          if (*(_QWORD *)v44 < *(_QWORD *)v43)
          {
            v48 = *(_QWORD *)(v9 + 64);
            v49 = *v43;
            *v43 = *v44;
            *(_BYTE *)(v9 + 64) = *(_BYTE *)(v9 + 88);
            *v44 = v49;
            *(_BYTE *)(v9 + 88) = v48;
            if (*(_QWORD *)v43 < *(_QWORD *)v42)
            {
              v50 = *(_QWORD *)(v9 + 40);
              v51 = *v42;
              *v42 = *v43;
              *(_BYTE *)(v9 + 40) = *(_BYTE *)(v9 + 64);
              *v43 = v51;
              *(_BYTE *)(v9 + 64) = v50;
              if (*(_QWORD *)(v9 + 24) < *(_QWORD *)v9)
              {
                v108 = *(_QWORD *)(v9 + 16);
                v100 = *(_OWORD *)v9;
                *(_OWORD *)v9 = *v42;
                *(_BYTE *)(v9 + 16) = *(_BYTE *)(v9 + 40);
                *v42 = v100;
                *(_BYTE *)(v9 + 40) = v108;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 575)
        {
          v52 = v9 + 24;
          v54 = v9 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v9;
              do
              {
                v57 = v52;
                v58 = *(_QWORD *)(v56 + 24);
                if (v58 < *(_QWORD *)v56)
                {
                  v101 = *(_OWORD *)(v56 + 32);
                  v59 = v55;
                  while (1)
                  {
                    v60 = v9 + v59;
                    *(_OWORD *)(v60 + 24) = *(_OWORD *)(v9 + v59);
                    *(_BYTE *)(v60 + 40) = *(_BYTE *)(v9 + v59 + 16);
                    if (!v59)
                      break;
                    v59 -= 24;
                    if (v58 >= *(_QWORD *)(v60 - 24))
                    {
                      v61 = v9 + v59 + 24;
                      goto LABEL_75;
                    }
                  }
                  v61 = v9;
LABEL_75:
                  *(_QWORD *)v61 = v58;
                  *(_QWORD *)(v61 + 8) = v101;
                  *(_BYTE *)(v61 + 16) = BYTE8(v101);
                }
                v52 = v57 + 24;
                v55 += 24;
                v56 = v57;
              }
              while (v57 + 24 != a2);
            }
          }
          else if (!v54)
          {
            do
            {
              v91 = v52;
              v92 = *(_QWORD *)(a1 + 24);
              if (v92 < *(_QWORD *)a1)
              {
                v104 = *(_OWORD *)(a1 + 32);
                do
                {
                  *(_OWORD *)v52 = *(_OWORD *)(v52 - 24);
                  *(_BYTE *)(v52 + 16) = *(_BYTE *)(v52 - 8);
                  v93 = *(_QWORD *)(v52 - 48);
                  v52 -= 24;
                }
                while (v92 < v93);
                *(_QWORD *)v52 = v92;
                *(_BYTE *)(v52 + 16) = BYTE8(v104);
                *(_QWORD *)(v52 + 8) = v104;
              }
              v52 = v91 + 24;
              a1 = v91;
            }
            while (v91 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v62 = (unint64_t)(v11 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = (2 * v63) | 1;
                v66 = v9 + 24 * v65;
                if (2 * v64 + 2 >= v11)
                {
                  v67 = *(_QWORD *)v66;
                }
                else
                {
                  v67 = *(_QWORD *)(v66 + 24);
                  v68 = *(_QWORD *)v66 >= v67;
                  if (*(_QWORD *)v66 > v67)
                    v67 = *(_QWORD *)v66;
                  if (!v68)
                  {
                    v66 += 24;
                    v65 = 2 * v64 + 2;
                  }
                }
                v69 = v9 + 24 * v64;
                v70 = *(_QWORD *)v69;
                if (v67 >= *(_QWORD *)v69)
                {
                  v102 = *(_OWORD *)(v69 + 8);
                  do
                  {
                    v71 = v69;
                    v69 = v66;
                    v72 = *(_OWORD *)v66;
                    *(_BYTE *)(v71 + 16) = *(_BYTE *)(v66 + 16);
                    *(_OWORD *)v71 = v72;
                    if (v62 < v65)
                      break;
                    v73 = (2 * v65) | 1;
                    v66 = v9 + 24 * v73;
                    v65 = 2 * v65 + 2;
                    if (v65 >= v11)
                    {
                      v74 = *(_QWORD *)v66;
                      v65 = v73;
                    }
                    else
                    {
                      v74 = *(_QWORD *)v66;
                      v75 = *(_QWORD *)(v66 + 24);
                      if (*(_QWORD *)v66 <= v75)
                        v74 = *(_QWORD *)(v66 + 24);
                      if (*(_QWORD *)v66 >= v75)
                        v65 = v73;
                      else
                        v66 += 24;
                    }
                  }
                  while (v74 >= v70);
                  *(_QWORD *)v69 = v70;
                  *(_QWORD *)(v69 + 8) = v102;
                  *(_BYTE *)(v69 + 16) = BYTE8(v102);
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v76 = v10 / 0x18uLL;
            do
            {
              v77 = 0;
              v109 = *(_QWORD *)(v9 + 16);
              v103 = *(_OWORD *)v9;
              v78 = v9;
              do
              {
                v79 = v78 + 24 * v77 + 24;
                v80 = (2 * v77) | 1;
                v81 = 2 * v77 + 2;
                if (v81 < v76 && *(_QWORD *)v79 < *(_QWORD *)(v79 + 24))
                {
                  v79 += 24;
                  v80 = v81;
                }
                v82 = *(_OWORD *)v79;
                *(_BYTE *)(v78 + 16) = *(_BYTE *)(v79 + 16);
                *(_OWORD *)v78 = v82;
                v78 = v79;
                v77 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              a2 -= 24;
              if (v79 == a2)
              {
                *(_BYTE *)(v79 + 16) = v109;
                *(_OWORD *)v79 = v103;
              }
              else
              {
                v83 = *(_OWORD *)a2;
                *(_BYTE *)(v79 + 16) = *(_BYTE *)(a2 + 16);
                *(_OWORD *)v79 = v83;
                *(_BYTE *)(a2 + 16) = v109;
                *(_OWORD *)a2 = v103;
                v84 = v79 - v9 + 24;
                if (v84 >= 25)
                {
                  v85 = (v84 / 0x18uLL - 2) >> 1;
                  v86 = v9 + 24 * v85;
                  v87 = *(_QWORD *)v79;
                  if (*(_QWORD *)v86 < *(_QWORD *)v79)
                  {
                    v96 = *(_OWORD *)(v79 + 8);
                    do
                    {
                      v88 = v79;
                      v79 = v86;
                      v89 = *(_OWORD *)v86;
                      *(_BYTE *)(v88 + 16) = *(_BYTE *)(v86 + 16);
                      *(_OWORD *)v88 = v89;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                      v86 = v9 + 24 * v85;
                    }
                    while (*(_QWORD *)v86 < v87);
                    *(_QWORD *)v79 = v87;
                    *(_QWORD *)(v79 + 8) = v96;
                    *(_BYTE *)(v79 + 16) = BYTE8(v96);
                  }
                }
              }
            }
            while (v76-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)(a1 + 24 * v12), (unint64_t *)a1, (unint64_t *)(a2 - 24));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)a1, (unint64_t *)(a1 + 24 * v12), (unint64_t *)(a2 - 24));
          v14 = 3 * v12;
          v15 = (unint64_t *)(a1 + 24 * v12 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)(a1 + 24), v15, (unint64_t *)(a2 - 48));
          v16 = (unint64_t *)(a1 + 24 + 8 * v14);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)(a1 + 48), v16, (unint64_t *)(a2 - 72));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)v15, (unint64_t *)v13, v16);
          v105 = *(_QWORD *)(a1 + 16);
          v97 = *(_OWORD *)a1;
          v17 = *(_BYTE *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_BYTE *)(a1 + 16) = v17;
          *(_BYTE *)(v13 + 16) = v105;
          *(_OWORD *)v13 = v97;
        }
        --a3;
        v18 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 24) >= v18)
        {
          v95 = *(_OWORD *)(a1 + 8);
          if (v18 >= *(_QWORD *)v8)
          {
            v34 = a1 + 24;
            do
            {
              v9 = v34;
              if (v34 >= a2)
                break;
              v34 += 24;
            }
            while (v18 >= *(_QWORD *)v9);
          }
          else
          {
            v9 = a1;
            do
            {
              v33 = *(_QWORD *)(v9 + 24);
              v9 += 24;
            }
            while (v18 >= v33);
          }
          v35 = a2;
          if (v9 < a2)
          {
            v35 = a2;
            do
            {
              v36 = *(_QWORD *)(v35 - 24);
              v35 -= 24;
            }
            while (v18 < v36);
          }
          while (v9 < v35)
          {
            v106 = *(_QWORD *)(v9 + 16);
            v98 = *(_OWORD *)v9;
            v37 = *(_OWORD *)v35;
            *(_BYTE *)(v9 + 16) = *(_BYTE *)(v35 + 16);
            *(_OWORD *)v9 = v37;
            *(_BYTE *)(v35 + 16) = v106;
            *(_OWORD *)v35 = v98;
            do
            {
              v38 = *(_QWORD *)(v9 + 24);
              v9 += 24;
            }
            while (v18 >= v38);
            do
            {
              v39 = *(_QWORD *)(v35 - 24);
              v35 -= 24;
            }
            while (v18 < v39);
          }
          if (v9 - 24 != a1)
          {
            v40 = *(_OWORD *)(v9 - 24);
            *(_BYTE *)(a1 + 16) = *(_BYTE *)(v9 - 8);
            *(_OWORD *)a1 = v40;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 24) = v18;
          *(_BYTE *)(v9 - 8) = BYTE8(v95);
          *(_QWORD *)(v9 - 16) = v95;
          continue;
        }
        v94 = *(_OWORD *)(a1 + 8);
        v19 = a1;
        do
        {
          v20 = v19;
          v21 = *(_QWORD *)(v19 + 24);
          v19 += 24;
        }
        while (v21 < v18);
        v22 = a2;
        if (v20 == a1)
        {
          v22 = a2;
          do
          {
            if (v19 >= v22)
              break;
            v24 = *(_QWORD *)(v22 - 24);
            v22 -= 24;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            v23 = *(_QWORD *)(v22 - 24);
            v22 -= 24;
          }
          while (v23 >= v18);
        }
        v9 = v19;
        if (v19 < v22)
        {
          v25 = v22;
          do
          {
            v26 = *(_OWORD *)v9;
            v27 = *(_QWORD *)(v9 + 16);
            v28 = *(_BYTE *)(v25 + 16);
            *(_OWORD *)v9 = *(_OWORD *)v25;
            *(_BYTE *)(v9 + 16) = v28;
            *(_BYTE *)(v25 + 16) = v27;
            *(_OWORD *)v25 = v26;
            do
            {
              v29 = *(_QWORD *)(v9 + 24);
              v9 += 24;
            }
            while (v29 < v18);
            do
            {
              v30 = *(_QWORD *)(v25 - 24);
              v25 -= 24;
            }
            while (v30 >= v18);
          }
          while (v9 < v25);
        }
        if (v9 - 24 != a1)
        {
          v31 = *(_OWORD *)(v9 - 24);
          *(_BYTE *)(a1 + 16) = *(_BYTE *)(v9 - 8);
          *(_OWORD *)a1 = v31;
        }
        *(_QWORD *)(v9 - 24) = v18;
        *(_BYTE *)(v9 - 8) = BYTE8(v94);
        *(_QWORD *)(v9 - 16) = v94;
        if (v19 < v22)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *,false>(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(a1, v9 - 24);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(v9, a2))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = v9 - 24;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v49 = *(float *)(a2 - 8);
        v50 = *(float *)(v8 + 4);
        if (v49 > v50)
        {
          v51 = *(float *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 12);
          *(float *)(a2 - 12) = v51;
          *(float *)(v8 + 4) = v49;
          *(float *)(a2 - 8) = v50;
          v52 = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v52;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)v8, (float *)(v8 + 12), (float *)(a2 - 12));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)v8, v8 + 12, v8 + 24, a2 - 12);
        return;
      case 5:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)v8, v8 + 12, v8 + 24, v8 + 36);
        v53 = *(float *)(a2 - 8);
        v54 = *(float *)(v8 + 40);
        if (v53 > v54)
        {
          v55 = *(_DWORD *)(v8 + 36);
          *(_DWORD *)(v8 + 36) = *(_DWORD *)(a2 - 12);
          *(_DWORD *)(a2 - 12) = v55;
          *(float *)(v8 + 40) = v53;
          *(float *)(a2 - 8) = v54;
          v56 = *(_DWORD *)(v8 + 44);
          *(_DWORD *)(v8 + 44) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v56;
          v57 = *(float *)(v8 + 40);
          v58 = *(float *)(v8 + 28);
          if (v57 > v58)
          {
            v59 = *(_DWORD *)(v8 + 24);
            v60 = *(_DWORD *)(v8 + 36);
            *(_DWORD *)(v8 + 24) = v60;
            *(_DWORD *)(v8 + 36) = v59;
            v61 = *(_DWORD *)(v8 + 32);
            v62 = *(_DWORD *)(v8 + 44);
            *(float *)(v8 + 28) = v57;
            *(_DWORD *)(v8 + 32) = v62;
            v63 = *(float *)(v8 + 16);
            *(float *)(v8 + 40) = v58;
            *(_DWORD *)(v8 + 44) = v61;
            if (v57 > v63)
            {
              v64 = *(_DWORD *)(v8 + 12);
              *(_DWORD *)(v8 + 12) = v60;
              *(_DWORD *)(v8 + 24) = v64;
              v65 = *(_DWORD *)(v8 + 20);
              *(float *)(v8 + 16) = v57;
              *(_DWORD *)(v8 + 20) = v62;
              *(float *)(v8 + 28) = v63;
              *(_DWORD *)(v8 + 32) = v65;
              v66 = *(float *)(v8 + 4);
              if (v57 > v66)
              {
                v67 = *(float *)v8;
                *(_DWORD *)v8 = v60;
                *(float *)(v8 + 12) = v67;
                v68 = *(_DWORD *)(v8 + 8);
                *(float *)(v8 + 4) = v57;
                *(_DWORD *)(v8 + 8) = v62;
                *(float *)(v8 + 16) = v66;
                *(_DWORD *)(v8 + 20) = v68;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 287)
        {
          v69 = (_DWORD *)(v8 + 12);
          v71 = v8 == a2 || v69 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v71)
            {
              v72 = 0;
              v73 = v8;
              do
              {
                v74 = v69;
                v75 = *(float *)(v73 + 16);
                if (v75 > *(float *)(v73 + 4))
                {
                  v76 = *v69;
                  v77 = *(_DWORD *)(v73 + 20);
                  v78 = v72;
                  while (1)
                  {
                    v79 = (float *)(v8 + v78);
                    v79[3] = *(float *)(v8 + v78);
                    v80 = *(_DWORD *)(v8 + v78 + 8);
                    v79[4] = *(float *)(v8 + v78 + 4);
                    *((_DWORD *)v79 + 5) = v80;
                    if (!v78)
                      break;
                    v78 -= 12;
                    if (v75 <= *(v79 - 2))
                    {
                      v81 = v8 + v78 + 12;
                      goto LABEL_79;
                    }
                  }
                  v81 = v8;
LABEL_79:
                  *(_DWORD *)v81 = v76;
                  *(float *)(v81 + 4) = v75;
                  *(_DWORD *)(v81 + 8) = v77;
                }
                v69 = v74 + 3;
                v72 += 12;
                v73 = (unint64_t)v74;
              }
              while (v74 + 3 != (_DWORD *)a2);
            }
          }
          else if (!v71)
          {
            v113 = (float *)(v8 + 8);
            do
            {
              v114 = v69;
              v115 = *(float *)(a1 + 16);
              if (v115 > *(float *)(a1 + 4))
              {
                v116 = *v69;
                v117 = *(_DWORD *)(a1 + 20);
                v118 = v113;
                do
                {
                  v118[1] = *(v118 - 2);
                  v119 = *v118;
                  v118[2] = *(v118 - 1);
                  v118[3] = v119;
                  v120 = *(v118 - 4);
                  v118 -= 3;
                }
                while (v115 > v120);
                *((_DWORD *)v118 + 1) = v116;
                v118[2] = v115;
                *((_DWORD *)v118 + 3) = v117;
              }
              v69 = v114 + 3;
              v113 += 3;
              a1 = (uint64_t)v114;
            }
            while (v114 + 3 != (_DWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v82 = (unint64_t)(v10 - 2) >> 1;
            v83 = v82;
            do
            {
              v84 = v83;
              if (v82 >= v83)
              {
                v85 = (2 * v83) | 1;
                v86 = v8 + 12 * v85;
                if (2 * v84 + 2 < v10 && *(float *)(v86 + 4) > *(float *)(v86 + 16))
                {
                  v86 += 12;
                  v85 = 2 * v84 + 2;
                }
                v87 = v8 + 12 * v84;
                v88 = *(float *)(v86 + 4);
                v89 = *(float *)(v87 + 4);
                if (v88 <= v89)
                {
                  v90 = *(_DWORD *)v87;
                  v91 = *(_DWORD *)(v87 + 8);
                  do
                  {
                    v92 = v87;
                    v87 = v86;
                    *(_DWORD *)v92 = *(_DWORD *)v86;
                    *(float *)(v92 + 4) = v88;
                    *(_DWORD *)(v92 + 8) = *(_DWORD *)(v86 + 8);
                    if (v82 < v85)
                      break;
                    v93 = 2 * v85;
                    v85 = (2 * v85) | 1;
                    v86 = v8 + 12 * v85;
                    v94 = v93 + 2;
                    if (v94 < v10 && *(float *)(v86 + 4) > *(float *)(v86 + 16))
                    {
                      v86 += 12;
                      v85 = v94;
                    }
                    v88 = *(float *)(v86 + 4);
                  }
                  while (v88 <= v89);
                  *(_DWORD *)v87 = v90;
                  *(float *)(v87 + 4) = v89;
                  *(_DWORD *)(v87 + 8) = v91;
                }
              }
              v83 = v84 - 1;
            }
            while (v84);
            v95 = v9 / 0xCuLL;
            do
            {
              v96 = 0;
              v97 = *(float *)v8;
              v99 = *(_DWORD *)(v8 + 4);
              v98 = *(_DWORD *)(v8 + 8);
              v100 = v8;
              do
              {
                v101 = (_DWORD *)v100;
                v100 += 12 * v96 + 12;
                v102 = 2 * v96;
                v96 = (2 * v96) | 1;
                v103 = v102 + 2;
                if (v103 < v95 && *(float *)(v100 + 4) > *(float *)(v100 + 16))
                {
                  v100 += 12;
                  v96 = v103;
                }
                *v101 = *(_DWORD *)v100;
                v101[1] = *(_DWORD *)(v100 + 4);
                v101[2] = *(_DWORD *)(v100 + 8);
              }
              while (v96 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
              if (v100 == a2 - 12)
              {
                *(float *)v100 = v97;
                *(_DWORD *)(v100 + 4) = v99;
                *(_DWORD *)(v100 + 8) = v98;
              }
              else
              {
                *(_DWORD *)v100 = *(_DWORD *)(a2 - 12);
                *(_DWORD *)(v100 + 4) = *(_DWORD *)(a2 - 8);
                *(_DWORD *)(v100 + 8) = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 12) = v97;
                *(_DWORD *)(a2 - 8) = v99;
                *(_DWORD *)(a2 - 4) = v98;
                v104 = v100 - v8 + 12;
                if (v104 >= 13)
                {
                  v105 = (v104 / 0xCuLL - 2) >> 1;
                  v106 = v8 + 12 * v105;
                  v107 = *(float *)(v106 + 4);
                  v108 = *(float *)(v100 + 4);
                  if (v107 > v108)
                  {
                    v109 = *(_DWORD *)v100;
                    v110 = *(_DWORD *)(v100 + 8);
                    do
                    {
                      v111 = v100;
                      v100 = v106;
                      *(_DWORD *)v111 = *(_DWORD *)v106;
                      *(float *)(v111 + 4) = v107;
                      *(_DWORD *)(v111 + 8) = *(_DWORD *)(v106 + 8);
                      if (!v105)
                        break;
                      v105 = (v105 - 1) >> 1;
                      v106 = v8 + 12 * v105;
                      v107 = *(float *)(v106 + 4);
                    }
                    while (v107 > v108);
                    *(_DWORD *)v100 = v109;
                    *(float *)(v100 + 4) = v108;
                    *(_DWORD *)(v100 + 8) = v110;
                  }
                }
              }
              a2 -= 12;
            }
            while (v95-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 12 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x601)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)(a1 + 12 * v11), (float *)a1, (float *)(a2 - 12));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, (float *)(a1 + 12 * v11), (float *)(a2 - 12));
          v13 = 3 * v11;
          v14 = (float *)(a1 + 12 * v11 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)(a1 + 12), v14, (float *)(a2 - 24));
          v15 = (float *)(a1 + 12 + 4 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)(a1 + 24), v15, (float *)(a2 - 36));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(v14, (float *)v12, v15);
          v16 = *(float *)a1;
          *(_DWORD *)a1 = *(_DWORD *)v12;
          *(float *)v12 = v16;
          v17 = *(_QWORD *)(a1 + 4);
          *(_QWORD *)(a1 + 4) = *(_QWORD *)(v12 + 4);
          *(_QWORD *)(v12 + 4) = v17;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(float *)(a1 + 4);
          if (*(float *)(a1 - 8) > v18)
            goto LABEL_11;
          if (v18 <= *(float *)(a2 - 8))
          {
            v37 = a1 + 12;
            do
            {
              v8 = v37;
              if (v37 >= a2)
                break;
              v38 = *(float *)(v37 + 4);
              v37 += 12;
            }
            while (v18 <= v38);
          }
          else
          {
            v35 = a1;
            do
            {
              v8 = v35 + 12;
              v36 = *(float *)(v35 + 16);
              v35 += 12;
            }
            while (v18 <= v36);
          }
          v39 = (float *)a2;
          if (v8 < a2)
          {
            v40 = a2;
            do
            {
              v39 = (float *)(v40 - 12);
              v41 = *(float *)(v40 - 8);
              v40 -= 12;
            }
            while (v18 > v41);
          }
          v42 = *(float *)a1;
          v43 = *(_DWORD *)(a1 + 8);
          while (v8 < (unint64_t)v39)
          {
            v44 = *(float *)v8;
            *(float *)v8 = *v39;
            *v39 = v44;
            v45 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v39[1];
            *((_DWORD *)v39 + 1) = v45;
            v46 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v39[2];
            *((_DWORD *)v39 + 2) = v46;
            do
            {
              v47 = *(float *)(v8 + 16);
              v8 += 12;
            }
            while (v18 <= v47);
            do
            {
              v48 = *(v39 - 2);
              v39 -= 3;
            }
            while (v18 > v48);
          }
          if (v8 - 12 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v8 - 12);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 12) = v42;
          *(float *)(v8 - 8) = v18;
          *(_DWORD *)(v8 - 4) = v43;
          continue;
        }
        v18 = *(float *)(a1 + 4);
LABEL_11:
        v19 = *(float *)a1;
        v20 = *(_DWORD *)(a1 + 8);
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 12;
        }
        while (*(float *)(v22 + 16) > v18);
        v23 = a2;
        if (v22 == a1)
        {
          v26 = a2;
          while (v21 < v26)
          {
            v24 = (float *)(v26 - 12);
            v27 = *(float *)(v26 - 8);
            v26 -= 12;
            if (v27 > v18)
              goto LABEL_21;
          }
          v24 = (float *)v26;
        }
        else
        {
          do
          {
            v24 = (float *)(v23 - 12);
            v25 = *(float *)(v23 - 8);
            v23 -= 12;
          }
          while (v25 <= v18);
        }
LABEL_21:
        v8 = v21;
        if (v21 < (unint64_t)v24)
        {
          v28 = v24;
          do
          {
            v29 = *(float *)v8;
            *(float *)v8 = *v28;
            *v28 = v29;
            v30 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v28[1];
            *((_DWORD *)v28 + 1) = v30;
            v31 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v28[2];
            *((_DWORD *)v28 + 2) = v31;
            do
            {
              v32 = *(float *)(v8 + 16);
              v8 += 12;
            }
            while (v32 > v18);
            do
            {
              v33 = *(v28 - 2);
              v28 -= 3;
            }
            while (v33 <= v18);
          }
          while (v8 < (unint64_t)v28);
        }
        if (v8 - 12 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v8 - 12);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 12) = v19;
        *(float *)(v8 - 8) = v18;
        *(_DWORD *)(v8 - 4) = v20;
        if (v21 < (unint64_t)v24)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *,false>(a1, v8 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(a1, v8 - 12);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(v8, a2))
        {
          if (v34)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 12;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t *`anonymous namespace'::add_layer_to_is_valid_for_engine(uint64_t *this, Espresso::net *a2, const Espresso::layer *a3)
{
  uint64_t **v4;
  __int128 *v5;

  if (this)
  {
    v5 = (__int128 *)((char *)a2 + 16);
    v4 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 9, (_QWORD *)a2 + 2, (uint64_t)&std::piecewise_construct, &v5);
    this = std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v4 + 7, *((_DWORD *)a2 + 2), (unsigned int *)a2 + 2);
    *((_DWORD *)this + 8) = 1;
  }
  return this;
}

uint64_t std::__split_buffer<Espresso::net::new_layer_info>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::allocator<Espresso::net::new_layer_info>::destroy[abi:ne180100](i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t Espresso::net::restore_additional_configurations(uint64_t a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __n128 v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  __n128 v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  char v41;
  __n128 v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::string *v48;
  std::string *v49;
  uint64_t v50;
  __int128 *v51;
  __int128 v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;

  if (!*a2)
    return 0;
  v4 = (uint64_t **)(a1 + 776);
  v5 = a1 + 784;
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1 + 776, *(char **)(a1 + 784));
  *(_QWORD *)(a1 + 776) = v5;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  v6 = *a2;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 32))(v6, &v53);
  v7 = v53;
  v8 = v54;
  if (v53 == v54)
  {
LABEL_49:
    v33 = 1;
    goto LABEL_57;
  }
  while (1)
  {
    v48 = 0;
    v49 = 0;
    v52 = 0uLL;
    v50 = 0;
    v51 = &v52;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v6 + 120))(&v46, v6, v7);
    v9 = v46;
    if (!v46)
      break;
    std::string::basic_string[abi:ne180100]<0>(&__p, "outputs");
    v10 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v9 + 24))(v9, &__p);
    if (SHIBYTE(v45) < 0)
      operator delete(__p);
    v11 = v46;
    if (v10)
    {
      v40 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(&__p, "outputs");
      (*(void (**)(__n128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v11 + 120))(&v42, v11, &__p);
      v12 = v42;
      v42 = 0uLL;
      v40 = v12;
      if (SHIBYTE(v45) < 0)
      {
        operator delete(__p);
        if (!v12.n128_u64[0])
          goto LABEL_12;
      }
      else if (!v12.n128_u64[0])
      {
LABEL_12:
        if (v12.n128_u64[1])
        {
          v13 = (unint64_t *)(v12.n128_u64[1] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v12.n128_u64[1] + 16))(v12.n128_u64[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12.n128_u64[1]);
          }
        }
        v11 = v46;
        goto LABEL_18;
      }
      (*(void (**)(unint64_t, std::string **))(*(_QWORD *)v12.n128_u64[0] + 32))(v12.n128_u64[0], &v48);
      goto LABEL_12;
    }
LABEL_18:
    __p = 0;
    v44 = 0;
    v45 = 0;
    v42 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&v40, "input_shapes");
    v15 = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)v11 + 24))(v11, &v40);
    v16 = v15;
    if (v41 < 0)
    {
      operator delete((void *)v40.n128_u64[0]);
      if (v16)
      {
LABEL_22:
        v17 = v46;
        std::string::basic_string[abi:ne180100]<0>(&v40, "input_shapes");
        (*(void (**)(__n128 *__return_ptr, uint64_t, __n128 *))(*(_QWORD *)v17 + 120))(&v39, v17, &v40);
        v18 = v39;
        v39 = 0uLL;
        v42 = v18;
        if (v41 < 0)
        {
          v38 = v18;
          operator delete((void *)v40.n128_u64[0]);
          v18 = v38;
        }
        if (v18.n128_u64[0])
          (*(void (**)(unint64_t, void **, __n128))(*(_QWORD *)v18.n128_u64[0] + 32))(v18.n128_u64[0], &__p, v18);
      }
    }
    else if (v15)
    {
      goto LABEL_22;
    }
    v20 = __p;
    v19 = v44;
    while (v20 != v19)
    {
      (*(void (**)(__n128 *__return_ptr, unint64_t, _QWORD *))(*(_QWORD *)v42.n128_u64[0] + 120))(&v40, v42.n128_u64[0], v20);
      v21 = v40.n128_u64[0];
      if (v40.n128_u64[0])
      {
        v39.n128_u64[0] = (unint64_t)v20;
        v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v51, v20, (__int128 **)&v39);
        Espresso::SerDes::params_io<Espresso::layer_shape>(v21, (uint64_t)(v22 + 56), 0);
      }
      v23 = (std::__shared_weak_count *)v40.n128_u64[1];
      if (v40.n128_u64[1])
      {
        v24 = (unint64_t *)(v40.n128_u64[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v20 += 3;
    }
    v39.n128_u64[0] = (unint64_t)v7;
    v26 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v7, (__int128 **)&v39);
    if (v26 + 7 != (uint64_t *)&v48)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v26 + 7), v48, v49, 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v48) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v26 + 10, v51, &v52);
    }
    v27 = (std::__shared_weak_count *)v42.n128_u64[1];
    if (v42.n128_u64[1])
    {
      v28 = (unint64_t *)(v42.n128_u64[1] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v40.n128_u64[0] = (unint64_t)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    v30 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v51, (char *)v52);
    __p = &v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v7 += 3;
    if (v7 == v8)
      goto LABEL_49;
  }
  v34 = v47;
  if (v47)
  {
    v35 = (unint64_t *)&v47->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v51, (char *)v52);
  __p = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v33 = 0;
LABEL_57:
  v48 = (std::string *)&v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  return v33;
}

void sub_190E2935C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  a31 = v31 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_add_network(_BYTE *a1, char *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  Espresso *v9;
  const char *v10;
  NSObject *v11;
  int is_enabled;
  char v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  Espresso *v26;
  const char *v27;
  NSObject *v28;
  void *v30;
  uint8_t *v31;
  uint8_t buf[24];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    Espresso::espresso_os_log_subsystem(v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 1024;
      v33 = a3;
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "espresso_plan_add_network plan=%zu path=%s cp=%d", buf, 0x1Cu);
    }

    is_enabled = kdebug_is_enabled();
    v13 = is_enabled ^ 1;
    if (!a2)
      v13 = 1;
    if ((v13 & 1) != 0)
      v14 = 0;
    else
      v14 = (const char *)kdebug_trace_string();
    kdebug_trace();
    v16 = (*(uint64_t (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3);
    v18 = (void *)v16;
    if (a4)
    {
      *(_QWORD *)a4 = a1;
      *(_DWORD *)(a4 + 8) = v16;
      if (os_variant_has_internal_content())
        espresso_network_set_tracing_name(*(const void **)a4, *(_QWORD *)(a4 + 8), a2);
    }
    v19 = (a1[16] & 4) != 0 || (int)v18 < 0;
    v20 = !v19;
    if (v19)
      v21 = 0;
    else
      v21 = is_enabled;
    if (v21 == 1)
    {
      v22 = *((_QWORD *)a1 + 133);
      memset(buf, 0, sizeof(buf));
      v30 = v8;
      std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>((char *)buf, *(_QWORD **)(v22 + 24), *(_QWORD **)(v22 + 32), (uint64_t)(*(_QWORD *)(v22 + 32) - *(_QWORD *)(v22 + 24)) >> 4);
      if (v18 >= (unint64_t)((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4))
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)buf + 16 * v18) + 1344) = v14;
      v31 = buf;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      v23 = *((_QWORD *)a1 + 133);
      memset(buf, 0, sizeof(buf));
      std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>((char *)buf, *(_QWORD **)(v23 + 24), *(_QWORD **)(v23 + 32), (uint64_t)(*(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24)) >> 4);
      if (v18 >= (unint64_t)((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4))
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v31 = buf;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      v24 = *((_QWORD *)a1 + 133);
      memset(buf, 0, sizeof(buf));
      std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>((char *)buf, *(_QWORD **)(v24 + 24), *(_QWORD **)(v24 + 32), (uint64_t)(*(_QWORD *)(v24 + 32) - *(_QWORD *)(v24 + 24)) >> 4);
      if (v18 >= (unint64_t)((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4))
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v25 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)buf + 16 * v18) + 1352);
      v31 = buf;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      if (v25)
      {
        v8 = v30;
        Espresso::write_net_hashes_to_trace((Espresso *)a2, v14);
      }
      else
      {
        v8 = v30;
      }
    }
    if (((v20 ^ 1 | ((a1[16] & 0x10) >> 4)) & 1) == 0)
      Espresso::EspressoReporterUtilities::send_network_info_to_coreanalytics((Espresso::EspressoReporterUtilities *)a1, v18, (Espresso *)a2, a2, v17);
    v26 = (Espresso *)kdebug_trace();
    Espresso::espresso_os_log_subsystem(v26, v27);
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 1024;
      v33 = a3;
      _os_log_impl(&dword_190DAF000, v28, OS_LOG_TYPE_INFO, "espresso_plan_add_network plan=%zu path=%s cp=%d Completed", buf, 0x1Cu);
    }

    v15 = 0;
  }
  else
  {
    v15 = 0xFFFFFFFFLL;
  }
  objc_autoreleasePoolPop(v8);
  return v15;
}

void sub_190E297E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 *p_buf, __int16 buf)
{
  char *v11;
  uint64_t v12;
  std::exception *v15;
  Espresso *v16;
  const char *v17;
  NSObject *v18;

  p_buf = &buf;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
  if (a2 == 1)
  {
    v15 = (std::exception *)__cxa_begin_catch(a1);
    if (v12)
    {
      *(_DWORD *)(v12 + 8) = -1;
      *(_QWORD *)v12 = 0;
    }
    v16 = (Espresso *)kdebug_trace();
    Espresso::espresso_os_log_subsystem(v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      buf = 0;
      _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "espresso_plan_add_network completed with exception", (uint8_t *)&buf, 2u);
    }

    handle_ex_plan(v11, v15);
    __cxa_end_catch();
    JUMPOUT(0x190E29780);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_plan::add_network(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v8 = 0;
  v9 = 0;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 240))(a1, a2, a3, &v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_190E29960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_plan::add_network(std::string::size_type a1, std::string::value_type *a2, int a3, uint64_t *a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  Espresso *v11;
  const char *v12;
  NSObject *v13;
  Espresso *v14;
  const char *v15;
  NSObject *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  Espresso::net **v36;
  unint64_t v37;
  Espresso::net *v38;
  unint64_t *v39;
  unint64_t v40;
  Espresso::net **v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  Espresso::net *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  __int128 v56;
  int64x2_t v57;
  unint64_t v58;
  Espresso::net *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  std::string::size_type *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  std::string::size_type *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  std::string::size_type v84;
  int64x2_t v85;
  Espresso::tracer *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::runtime_error *v95;
  std::string *v96;
  __int128 v97;
  std::string *p_p;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  std::runtime_error *exception;
  std::runtime_error *v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string v108[3];
  BOOL v109;
  Espresso::net *v110[2];
  unsigned int v111;
  std::string::value_type *__s;
  std::string __p;
  std::string v114;
  std::string v115;
  std::string buf;
  Espresso::net **v117;
  std::string::value_type **p_s;
  BOOL *v119;
  std::string v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  __s = a2;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("espresso.force_dtype"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v11 = (Espresso *)objc_msgSend(v9, "intValue");
    a3 = (int)v11;
    Espresso::espresso_os_log_subsystem(v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
      _os_log_error_impl(&dword_190DAF000, v13, OS_LOG_TYPE_ERROR, "Forcing compute path %d", (uint8_t *)&buf, 8u);
    }

  }
  if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1)
    dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_24_4921);
  if (Espresso::hardware::is_virtual_machine(void)::result && a3 != 65568)
  {
    Espresso::espresso_os_log_subsystem(v14, v15);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      buf.__r_.__value_.__r.__words[0] = 0x1002004000100;
      _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "VM detected: Forcing compute path %d", (uint8_t *)&buf, 8u);
    }

    a3 = 65568;
  }
  v17 = __s;
  v18 = *a4;
  if (!__s)
  {
    if (!v18)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Null path");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_16;
  }
  if (v18)
  {
LABEL_16:
    v17 = "";
    __s = "";
    LODWORD(v18) = 1;
  }
  v111 = 0;
  if (a3 == 0x80000)
  {
    v19 = 4;
  }
  else
  {
    v19 = 0;
    if (a3 == 65568)
      goto LABEL_23;
    if (a3 != 65552)
    {
      v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v115, a3);
      v104 = std::string::insert(&v115, 0, "Compute path ");
      v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
      v120.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v105;
      v104->__r_.__value_.__l.__size_ = 0;
      v104->__r_.__value_.__r.__words[2] = 0;
      v104->__r_.__value_.__r.__words[0] = 0;
      v106 = std::string::append(&v120, " not supported.");
      v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v103, &buf);
      __cxa_throw(v103, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v19 = 1;
  }
  v111 = v19;
LABEL_23:
  v110[0] = 0;
  v110[1] = 0;
  v109 = (*(_BYTE *)(a1 + 16) & 8) != 0;
  buf.__r_.__value_.__r.__words[0] = a1;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v111;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)a4;
  v117 = v110;
  p_s = &__s;
  v119 = &v109;
  if ((_DWORD)v18)
  {
    Espresso::reload_network_on_context(a4, *(uint64_t **)(a1 + 1064), v19, (uint64_t *)&v120);
    v20 = *(_OWORD *)&v120.__r_.__value_.__l.__data_;
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = 0uLL;
    v21 = (std::__shared_weak_count *)v110[1];
    *(_OWORD *)v110 = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    size = (std::__shared_weak_count *)v120.__r_.__value_.__l.__size_;
    if (v120.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(v120.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v27 = std::string::basic_string[abi:ne180100]<0>(&v120, v17);
    Espresso::load_network((uint64_t)v27, *(uint64_t **)(a1 + 1064), v111, v109, (uint64_t *)&v115);
    v28 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = 0uLL;
    v29 = (std::__shared_weak_count *)v110[1];
    *(_OWORD *)v110 = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)v115.__r_.__value_.__l.__size_;
    if (v115.__r_.__value_.__l.__size_)
    {
      v33 = (unint64_t *)(v115.__r_.__value_.__l.__size_ + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (!v110[0])
  {
    v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v114, "Cannot load network '");
    v96 = std::string::append(&v114, __s);
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "'");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v99 = __p.__r_.__value_.__l.__size_;
    v100 = std::string::append(&v115, (const std::string::value_type *)p_p, v99);
    v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v120.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v95, &v120);
    __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    Espresso::net::wipe_layers_blobs(v110[0]);
  v35 = *(_QWORD **)(a1 + 1064);
  v36 = (Espresso::net **)v35[4];
  v37 = v35[5];
  if ((unint64_t)v36 >= v37)
  {
    v42 = v35[3];
    v43 = ((uint64_t)v36 - v42) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v45 = v37 - v42;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v122 = v35 + 5;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v46);
    v49 = &v47[16 * v43];
    v50 = v110[1];
    *(_OWORD *)v49 = *(_OWORD *)v110;
    if (v50)
    {
      v51 = (unint64_t *)((char *)v50 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v54 = (_QWORD *)v35[3];
    v53 = (_QWORD *)v35[4];
    if (v53 == v54)
    {
      v57 = vdupq_n_s64((unint64_t)v53);
      v55 = &v47[16 * v43];
    }
    else
    {
      v55 = &v47[16 * v43];
      do
      {
        v56 = *((_OWORD *)v53 - 1);
        v53 -= 2;
        *((_OWORD *)v55 - 1) = v56;
        v55 -= 16;
        *v53 = 0;
        v53[1] = 0;
      }
      while (v53 != v54);
      v57 = *(int64x2_t *)(v35 + 3);
    }
    v41 = (Espresso::net **)(v49 + 16);
    v35[3] = v55;
    v35[4] = v49 + 16;
    *(int64x2_t *)&v120.__r_.__value_.__r.__words[1] = v57;
    v58 = v35[5];
    v35[5] = &v47[16 * v48];
    v121 = v58;
    v120.__r_.__value_.__r.__words[0] = v57.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v120);
  }
  else
  {
    *v36 = v110[0];
    v38 = v110[1];
    v36[1] = v110[1];
    if (v38)
    {
      v39 = (unint64_t *)((char *)v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = v36 + 2;
  }
  v35[4] = v41;
  v59 = v110[0];
  *((_QWORD *)v110[0] + 155) = a1;
  v60 = *(_QWORD **)(a1 + 1064);
  *((_DWORD *)v59 + 312) = ((v60[4] - v60[3]) >> 4) - 1;
  v61 = v60[48];
  if (!v61)
  {
    v62 = operator new(0x40uLL);
    v62[1] = 0;
    v62[2] = 0;
    *v62 = &off_1E2DBC0E8;
    *(_QWORD *)&v63 = Espresso::espresso_plan_tracer::espresso_plan_tracer((Espresso::espresso_plan_tracer *)(v62 + 3));
    *((_QWORD *)&v63 + 1) = v62;
    v64 = *(_QWORD *)(a1 + 1064);
    v65 = *(std::__shared_weak_count **)(v64 + 392);
    *(_OWORD *)(v64 + 384) = v63;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v61 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 384);
  }
  std::string::basic_string[abi:ne180100]<0>(v108, __s);
  if (*(_BYTE *)v61)
  {
    v68 = operator new();
    if (SHIBYTE(v108[0].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v114, v108[0].__r_.__value_.__l.__data_, v108[0].__r_.__value_.__l.__size_);
    else
      v114 = v108[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(v61 + 8));
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v120, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
    else
      v120 = v114;
    v69 = (***(uint64_t (****)(_QWORD))(*((_QWORD *)v110[0] + 2) + 8))(*(_QWORD *)(*((_QWORD *)v110[0] + 2)
                                                                                             + 8));
    v70 = *(unsigned int *)(**((_QWORD **)v110[0] + 4) + 12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v115, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v115 = __p;
    Espresso::tracer::tracer(v68, (uint64_t *)v110, &v120, v69, v70, (uint64_t *)&v115);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    v115.__r_.__value_.__r.__words[0] = v68;
    v71 = *(_QWORD *)(v61 + 32);
    v72 = *(std::string::size_type **)(v61 + 24);
    if ((unint64_t)v72 >= v71)
    {
      v73 = *(_QWORD *)(v61 + 16);
      v74 = ((uint64_t)v72 - v73) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v76 = v71 - v73;
      if (v76 >> 2 > v75)
        v75 = v76 >> 2;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      v122 = (_QWORD *)(v61 + 32);
      if (v77)
        v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v77);
      else
        v78 = 0;
      v79 = (std::string::size_type *)(v77 + 8 * v74);
      v80 = v77 + 8 * v78;
      v121 = v80;
      v115.__r_.__value_.__r.__words[0] = 0;
      *v79 = v68;
      v81 = v79 + 1;
      v120.__r_.__value_.__r.__words[2] = (std::string::size_type)(v79 + 1);
      v83 = *(_QWORD **)(v61 + 16);
      v82 = *(_QWORD **)(v61 + 24);
      if (v82 == v83)
      {
        v86 = 0;
        v85 = vdupq_n_s64((unint64_t)v82);
      }
      else
      {
        do
        {
          v84 = *--v82;
          *v82 = 0;
          *--v79 = v84;
        }
        while (v82 != v83);
        v85 = *(int64x2_t *)(v61 + 16);
        v81 = (_QWORD *)v120.__r_.__value_.__r.__words[2];
        v80 = v121;
        v86 = (Espresso::tracer *)v115.__r_.__value_.__r.__words[0];
      }
      *(_QWORD *)(v61 + 16) = v79;
      *(_QWORD *)(v61 + 24) = v81;
      *(int64x2_t *)&v120.__r_.__value_.__r.__words[1] = v85;
      v87 = *(_QWORD *)(v61 + 32);
      *(_QWORD *)(v61 + 32) = v80;
      v121 = v87;
      v120.__r_.__value_.__r.__words[0] = v85.i64[0];
      std::__split_buffer<std::unique_ptr<Espresso::tracer>>::~__split_buffer((uint64_t)&v120);
      *(_QWORD *)(v61 + 24) = v81;
      if (v86)
      {
        Espresso::tracer::~tracer(v86);
        MEMORY[0x19401CD90]();
      }
    }
    else
    {
      *v72 = v68;
      *(_QWORD *)(v61 + 24) = v72 + 1;
    }
  }
  if (SHIBYTE(v108[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108[0].__r_.__value_.__l.__data_);
  v88 = *(_QWORD *)(a1 + 1064);
  v90 = *(_QWORD *)(v88 + 24);
  v89 = *(_QWORD *)(v88 + 32);
  v91 = (std::__shared_weak_count *)v110[1];
  if (v110[1])
  {
    v92 = (unint64_t *)((char *)v110[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }

  return ((unint64_t)(v89 - v90) >> 4) - 1;
}

void sub_190E2A304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  void *v45;
  int v46;
  uint64_t v47;

  if (*(char *)(v47 - 137) < 0)
    operator delete(*(void **)(v47 - 160));
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  if (a44 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_10:

      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v45);
  goto LABEL_10;
}

void sub_190E2A3F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  uint64_t v41;

  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  MEMORY[0x19401CD90](v41, 0x10A0C401AD03C3FLL);
  if (a14 < 0)
    operator delete(a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);

  JUMPOUT(0x190E2ADD8);
}

void sub_190E2A3F8()
{
  JUMPOUT(0x190E2AD80);
}

void sub_190E2A400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  if (a34 < 0)
    operator delete(__p);
  __cxa_free_exception(v34);
  JUMPOUT(0x190E2ADC4);
}

void sub_190E2A418()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::~__shared_weak_count(v0);
  JUMPOUT(0x190E2ADA4);
}

void sub_190E2A42C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,unsigned __int8 a23,char a24,uint64_t a25,uint64_t a26,int a27,unsigned int a28,char *__s,uint64_t a30,uint64_t a31,uint64_t a32,__int128 a33,uint64_t a34,uint64_t a35,__int128 a36)
{
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  Espresso *v43;
  const char *v44;
  NSObject *v45;
  Espresso *v46;
  const char *v47;
  NSObject *v48;
  uint64_t **context;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  Espresso *v56;
  const char *v57;
  NSObject *v58;
  Espresso *v59;
  const char *v60;
  NSObject *v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  Espresso *v69;
  const char *v70;
  NSObject *v71;
  uint64_t **v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  Espresso *v79;
  const char *v80;
  NSObject *v81;
  Espresso *v82;
  const char *v83;
  NSObject *v84;
  _QWORD *v85;
  uint64_t **v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;

  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  if (a2 == 5)
  {
    v43 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v43, v44);
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)(v40 - 112) = 0;
      _os_log_debug_impl(&dword_190DAF000, v45, OS_LOG_TYPE_DEBUG, "dispatch_error_use_mps_buffers", (uint8_t *)(v40 - 112), 2u);
    }

    EspressoLight::espresso_plan::add_network(char const*,espresso_storage_type_t,std::shared_ptr<Espresso::net>)::$_0::operator()((uint64_t *)(v40 - 160));
    __cxa_end_catch();
  }
  else
  {
    switch(a2)
    {
      case 4:
        v46 = (Espresso *)__cxa_begin_catch(a1);
        Espresso::espresso_os_log_subsystem(v46, v47);
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)(v40 - 112) = 0;
          _os_log_debug_impl(&dword_190DAF000, v48, OS_LOG_TYPE_DEBUG, "dispatch_error_use_cpu_script", (uint8_t *)(v40 - 112), 2u);
        }

        if (*(_QWORD *)(*(_QWORD *)(v37 + 1064) + 32) == *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 24))
        {
          context = (uint64_t **)espresso_create_context(0, 0xFFFFFFFF);
          Espresso::get_internal_context(context, &a36);
          v50 = a36;
          if (!(_QWORD)a36)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
          v51 = *(uint64_t **)(v37 + 1064);
          v53 = *v51;
          v52 = v51[1];
          a12 = v53;
          a13 = v52;
          if (v52)
          {
            v54 = (unint64_t *)(v52 + 8);
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v50 + 112))(v50, &a12);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
          v56 = (Espresso *)std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(v37 + 1064), &a36);
          *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 16) = context;
          if (a28)
          {
            Espresso::espresso_os_log_subsystem(v56, v57);
            v58 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)(v40 - 112) = 0;
              _os_log_debug_impl(&dword_190DAF000, v58, OS_LOG_TYPE_DEBUG, "Espresso CPU context forcing FP32 compute path.", (uint8_t *)(v40 - 112), 2u);
            }

          }
          if (*v38)
          {
            Espresso::reload_network_on_context(v38, *(uint64_t **)(v37 + 1064), 0, (uint64_t *)(v40 - 112));
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&a24, (__int128 *)(v40 - 112));
            std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 112);
          }
          else
          {
            v85 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v40 - 112), __s);
            Espresso::load_network((uint64_t)v85, *(uint64_t **)(v37 + 1064), 0, a23, (uint64_t *)&a33);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&a24, &a33);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
            if (*(char *)(v40 - 89) < 0)
              operator delete(*(void **)(v40 - 112));
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
        }
        break;
      case 3:
        v59 = (Espresso *)__cxa_begin_catch(a1);
        Espresso::espresso_os_log_subsystem(v59, v60);
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)(v40 - 112) = 0;
          _os_log_debug_impl(&dword_190DAF000, v61, OS_LOG_TYPE_DEBUG, "dispatch_error_use_mpsgraph_compiler", (uint8_t *)(v40 - 112), 2u);
        }

        if (*(_QWORD *)(*(_QWORD *)(v37 + 1064) + 32) == *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 24))
        {
          v62 = (uint64_t **)espresso_create_context(0xC358u, 0xFFFFFFFF);
          a28 = 0;
          Espresso::get_internal_context(v62, &a36);
          v63 = a36;
          if (!(_QWORD)a36)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
          v64 = *(uint64_t **)(v37 + 1064);
          v66 = *v64;
          v65 = v64[1];
          a14 = v66;
          a15 = v65;
          if (v65)
          {
            v67 = (unint64_t *)(v65 + 8);
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v63 + 112))(v63, &a14);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(v37 + 1064), &a36);
          *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 16) = v62;
          if (*v38)
          {
            Espresso::reload_network_on_context(v38, *(uint64_t **)(v37 + 1064), 0, (uint64_t *)(v40 - 112));
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&a24, (__int128 *)(v40 - 112));
            std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 112);
          }
          else
          {
            v93 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v40 - 112), __s);
            Espresso::load_network((uint64_t)v93, *(uint64_t **)(v37 + 1064), 0, a23, (uint64_t *)&a33);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&a24, &a33);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
            if (*(char *)(v40 - 89) < 0)
              operator delete(*(void **)(v40 - 112));
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
        }
        break;
      case 2:
        v69 = (Espresso *)__cxa_begin_catch(a1);
        Espresso::espresso_os_log_subsystem(v69, v70);
        v71 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)(v40 - 112) = 0;
          _os_log_debug_impl(&dword_190DAF000, v71, OS_LOG_TYPE_DEBUG, "dispatch_error_use_mpsgraph", (uint8_t *)(v40 - 112), 2u);
        }

        if (*(_QWORD *)(*(_QWORD *)(v37 + 1064) + 32) == *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 24))
        {
          v72 = (uint64_t **)espresso_create_context(0xC355u, 0xFFFFFFFD);
          a28 = 0;
          Espresso::get_internal_context(v72, &a36);
          v73 = a36;
          if (!(_QWORD)a36)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
          v74 = *(uint64_t **)(v37 + 1064);
          v76 = *v74;
          v75 = v74[1];
          a16 = v76;
          a17 = v75;
          if (v75)
          {
            v77 = (unint64_t *)(v75 + 8);
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v73 + 112))(v73, &a16);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(v37 + 1064), &a36);
          *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 16) = v72;
          if (*v38)
          {
            Espresso::reload_network_on_context(v38, *(uint64_t **)(v37 + 1064), 0, (uint64_t *)(v40 - 112));
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&a24, (__int128 *)(v40 - 112));
            std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 112);
          }
          else
          {
            v94 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v40 - 112), __s);
            Espresso::load_network((uint64_t)v94, *(uint64_t **)(v37 + 1064), 0, a23, (uint64_t *)&a33);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&a24, &a33);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
            if (*(char *)(v40 - 89) < 0)
              operator delete(*(void **)(v40 - 112));
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
        }
        break;
      case 1:
        v79 = (Espresso *)__cxa_begin_catch(a1);
        Espresso::espresso_os_log_subsystem(v79, v80);
        v81 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)(v40 - 112) = 0;
          _os_log_debug_impl(&dword_190DAF000, v81, OS_LOG_TYPE_DEBUG, "dispatch_error_fallback_at_c_level", (uint8_t *)(v40 - 112), 2u);
        }

        if (*(_QWORD *)(*(_QWORD *)(v37 + 1064) + 32) == *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 24))
        {
          a28 = 1;
          v86 = (uint64_t **)espresso_create_context(5u, 0xFFFFFFFD);
          Espresso::get_internal_context(v86, &a36);
          v87 = a36;
          if (!(_QWORD)a36)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
          v88 = *(uint64_t **)(v37 + 1064);
          v90 = *v88;
          v89 = v88[1];
          a18 = v90;
          a19 = v89;
          if (v89)
          {
            v91 = (unint64_t *)(v89 + 8);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v87 + 112))(v87, &a18);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(v37 + 1064), &a36);
          *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 16) = v86;
          if (*v38)
          {
            Espresso::reload_network_on_context(v38, *(uint64_t **)(v37 + 1064), a28, (uint64_t *)(v40 - 112));
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&a24, (__int128 *)(v40 - 112));
            std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 112);
          }
          else
          {
            v95 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v40 - 112), __s);
            Espresso::load_network((uint64_t)v95, *(uint64_t **)(v37 + 1064), a28, a23, (uint64_t *)&a33);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&a24, &a33);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
            if (*(char *)(v40 - 89) < 0)
              operator delete(*(void **)(v40 - 112));
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
        }
        else
        {
          Espresso::espresso_os_log_subsystem(v82, v83);
          v84 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            v96 = __s;
            v97 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v37 + 1064) + 32) - *(_QWORD *)(*(_QWORD *)(v37 + 1064) + 24)) >> 4;
            *(_DWORD *)(v40 - 112) = 136315394;
            *(_QWORD *)(v39 + 140) = v96;
            *(_WORD *)(v40 - 100) = 2048;
            *(_QWORD *)(v39 + 150) = v97;
            _os_log_error_impl(&dword_190DAF000, v84, OS_LOG_TYPE_ERROR, "Dispatch failed for network %s, and the plan already contained %zu networks", (uint8_t *)(v40 - 112), 0x16u);
          }

        }
        break;
      default:
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);

        JUMPOUT(0x190E2ADD8);
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x190E29C80);
}

void sub_190E2A458()
{
  JUMPOUT(0x190E2A464);
}

void sub_190E2AB64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  _QWORD *v34;
  uint64_t v35;

  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (a2 == 5)
  {
    __cxa_begin_catch(a1);
    espresso_context_destroy(v34);
    EspressoLight::espresso_plan::add_network(char const*,espresso_storage_type_t,std::shared_ptr<Espresso::net>)::$_0::operator()((uint64_t *)(v35 - 160));
    __cxa_end_catch();
    JUMPOUT(0x190E2AA0CLL);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  __cxa_end_catch();
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);

  JUMPOUT(0x190E2ADD8);
}

void sub_190E2AC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x190E2AC44);
}

void sub_190E2AC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;

  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  __cxa_end_catch();
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);

  JUMPOUT(0x190E2ADD8);
}

void sub_190E2AC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  __cxa_end_catch();
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);

  JUMPOUT(0x190E2ADD8);
}

void sub_190E2AC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x190E2AC90);
}

void sub_190E2ACB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a33);
  JUMPOUT(0x190E2ACD8);
}

void sub_190E2ACBC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x190E2ACC8);
}

void sub_190E2ACEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  __cxa_end_catch();
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);

  JUMPOUT(0x190E2ADD8);
}

void sub_190E2ACF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_190E2AD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,Espresso::tracer *a33)
{
  std::unique_ptr<Espresso::tracer>::reset[abi:ne180100](&a33);
  JUMPOUT(0x190E2AD98);
}

void sub_190E2AD18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  if (a38 < 0)
    operator delete(__p);
  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  if (SHIBYTE(a28) < 0)
    operator delete(a26);
  if (SHIBYTE(a31) < 0)
    operator delete(a29);
  MEMORY[0x19401CD90](v38, 0x10A0C401AD03C3FLL);
  if (SHIBYTE(a11) < 0)
    operator delete(a9);
  JUMPOUT(0x190E2ADC4);
}

void sub_190E2ADB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::load_network_shape(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20[2];
  char **v21;
  char *v22[2];

  v19 = v20;
  v20[0] = 0;
  v22[0] = 0;
  v22[1] = 0;
  v20[1] = 0;
  v21 = v22;
  v6 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v17, (uint64_t)v6, a2);
  v7 = v17;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 280))(v17, a1);
  v8 = (std::__shared_weak_count *)v18;
  v16[0] = v7;
  v16[1] = v18;
  if (v18)
  {
    v9 = (unint64_t *)(v18 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Espresso::load_network_shape(v16, a3);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v14 = (unint64_t *)(v18 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v21, v22[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v19, v20[0]);
}

void sub_190E2AF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char *a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  Espresso::network_shape::~network_shape(&a13);
  _Unwind_Resume(a1);
}

void Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  Espresso::generic_factory_t::make_(a2, a3, &lpsrc);
  if (lpsrc
  {
    v5 = v11;
    *a1 = v4;
    a1[1] = v5;
    if (!v5)
      return;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    v5 = v11;
    if (!v11)
      return;
  }
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void Espresso::generic_factory_t::make_(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  void (**v13)(_QWORD *__return_ptr, _QWORD);
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v9 = *(_QWORD **)(a1 + 80);
  v7 = (_QWORD *)(a1 + 80);
  v8 = v9;
  if (!v9)
    goto LABEL_8;
  v10 = v7;
  do
  {
    v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v10 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v10 + 4))
  {
LABEL_8:
    std::mutex::unlock(v6);
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v13 = (void (**)(_QWORD *__return_ptr, _QWORD))MEMORY[0x19401D648](v10[7]);
  std::mutex::unlock(v6);
  if (!v13)
    goto LABEL_9;
  v13[2](&v20, v13);
  v14 = v21;
  *a3 = v20;
  a3[1] = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }

}

void sub_190E2B128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso6SerDes23serdes_object_json_objc16register_backendEPNS_9factory_tINS0_21generic_serdes_objectEEE_block_invoke(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso6SerDes23serdes_object_json_objcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  if (v7)
  {
    v2 = v8;
    *a1 = v7;
    a1[1] = v2;
    if (!v2)
      return;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    v2 = v8;
    if (!v8)
      return;
  }
  v5 = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void Espresso::SerDes::serdes_object_json_objc::deserialize(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  std::runtime_error *exception;
  uint64_t v8;

  v4 = MEMORY[0x19401D4A4]();
  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid stream passed to deserialize");
  v5 = (void *)v4;
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  v6 = malloc_type_malloc(v8 + 1, 0xDB872EE4uLL);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error allocating memory for deserialization");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::istream::read();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 7) != 0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Error reading deserialization input");
  (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 296))(a1, v6);
  free(v6);
  objc_autoreleasePoolPop(v5);
}

void sub_190E2B340(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::deserialize(Espresso::SerDes::serdes_object_json_objc *this, const unsigned __int8 *a2, uint64_t a3)
{
  id v4;
  void *v5;
  id v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  compression_algorithm v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint8_t *v18;
  size_t v19;
  size_t v20;
  id v21;
  unint64_t v22;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", a2, a3, 0);
  v5 = v4;
  if (!v4
    || (unint64_t)objc_msgSend(v4, "length") < 0x1D
    || (v6 = objc_retainAutorelease(v5), v7 = (_BYTE *)objc_msgSend(v6, "bytes"), v8 = v7, *v7 != 112)
    || v7[1] != 98
    || v7[2] != 122)
  {
    v11 = 0;
    v12 = v5;
LABEL_11:

    goto LABEL_12;
  }
  LOBYTE(v23[0]) = 1;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v23[1] = objc_msgSend(v6, "length");
  v24 = 0u;
  v25 = 0u;
  HIDWORD(v23[0]) = 723714136;
  kdebug_trace();
  v9 = (char)v8[3];
  if (v9 > 119)
  {
    if (v9 == 120)
    {
      v10 = COMPRESSION_LZMA;
    }
    else
    {
      if (v9 != 122)
        goto LABEL_28;
      v10 = COMPRESSION_ZLIB;
    }
  }
  else
  {
    if (v9 != 52)
    {
      if (v9 == 101)
      {
        v10 = COMPRESSION_LZFSE;
        goto LABEL_20;
      }
LABEL_28:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,signed char const&>(v8[3]);
    }
    v10 = COMPRESSION_LZ4;
  }
LABEL_20:
  v22 = bswap64(*(_QWORD *)(v8 + 12));
  if (v22 >= 0x80000001)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Block size too big %lld", &v22);
  objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:");
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v18 = (uint8_t *)objc_msgSend(v11, "mutableBytes");
  v19 = objc_msgSend(v11, "length");
  v12 = objc_retainAutorelease(v6);
  v20 = compression_decode_buffer(v18, v19, (const uint8_t *)(objc_msgSend(v12, "bytes") + 28), objc_msgSend(v12, "length") - 28, 0, v10);
  if (v20 != objc_msgSend(v11, "length"))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching decompression size %zu %zu", v20, objc_msgSend(v11, "length"));
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v23);

  if (v11)
  {
    v11 = v11;
    v5 = v12;
    v12 = v11;
    goto LABEL_11;
  }
LABEL_12:
  v13 = v12;

  v21 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v12, 0, &v21);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v21;
  if (v15)
  {
    objc_msgSend(v15, "localizedDescription");
    v23[0] = objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Error reading the input file as JSON. Error: %s", v23);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The top level object in the JSON input must be a dictionary");
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v14);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v16;

}

void sub_190E2B678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);

  _Unwind_Resume(a1);
}

void Espresso::load_network_shape(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *__p[2];
  char v11;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 24) = a2 + 32;
  *(_QWORD *)(a2 + 40) = 0;
  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "layer_shapes");
  Espresso::load_network_shape_with_key(v3, (uint64_t **)a2, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "global_shapes");
  v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 24))(v3, v8);
  v5 = v4;
  if (v9 < 0)
  {
    operator delete(v8[0]);
    if (!v5)
      return;
  }
  else if (!v4)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "global_shapes");
  Espresso::load_network_shape_with_key(v3, (uint64_t **)(a2 + 24), (uint64_t)v6);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_190E2B7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  char **v27;

  if (a15 < 0)
    operator delete(__p);
  Espresso::network_shape::~network_shape(v27);
  _Unwind_Resume(a1);
}

void Espresso::load_network(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  uint64_t v13;
  const std::string::value_type *v14;
  char *v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  std::string::value_type *v19;
  const std::string::value_type *v20;
  uint64_t v21;
  const std::string::value_type *v22;
  uint64_t v23;
  std::string::value_type *v24;
  _BOOL4 v27;
  const std::string::value_type *v28;
  const std::string::value_type *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  uint64_t v36;
  int v37;
  int v38;
  _BOOL4 v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  std::string::size_type v45;
  int v46;
  std::string::size_type v47;
  void *v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  std::string::size_type v52;
  int v53;
  std::string::size_type v54;
  std::string::size_type size;
  char v56;
  std::string *v57;
  std::string *v58;
  std::string *v59;
  std::string *v60;
  uint64_t v61;
  int v62;
  int v63;
  std::string::size_type v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  int v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *context;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::string v99;
  char **v100;
  uint64_t v101;
  uint64_t v102;
  std::string v103;
  std::string __str;
  char **v105;
  char *v106;
  uint64_t v107;
  void *v108[2];
  char v109;
  std::string v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::string __p;
  char **v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[21];

  v119[19] = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x19401D4A4]();
  v7 = a2[1];
  v111 = *a2;
  v112 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(char *)(a1 + 23);
  v12 = *(const std::string::value_type **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 23);
  else
    v13 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v14 = (const std::string::value_type *)a1;
  else
    v14 = *(const std::string::value_type **)a1;
  v15 = (char *)&v14[v13];
  v16 = v13 - 4;
  if (v13 < 4)
  {
    v17 = v16 == -1;
LABEL_20:
    v22 = &v14[v13];
    goto LABEL_29;
  }
  v18 = v13;
  v19 = (std::string::value_type *)v14;
  do
  {
    v20 = (const std::string::value_type *)memchr(v19, 46, v18 - 3);
    if (!v20)
      break;
    if (*(_DWORD *)v20 == 1852400174)
      goto LABEL_17;
    v19 = (std::string::value_type *)(v20 + 1);
    v18 = v15 - v19;
  }
  while (v15 - v19 > 3);
  v20 = &v14[v13];
LABEL_17:
  v21 = v20 - v14;
  if (v20 == v15)
    v21 = -1;
  v17 = v21 == v16;
  if (v13 < 5)
    goto LABEL_20;
  v23 = v13;
  v24 = (std::string::value_type *)v14;
  do
  {
    v22 = (const std::string::value_type *)memchr(v24, 46, v23 - 4);
    if (!v22)
      break;
    if (*(_DWORD *)v22 == 1852400174 && v22[4] == 58)
      goto LABEL_29;
    v24 = (std::string::value_type *)(v22 + 1);
    v23 = v15 - v24;
  }
  while (v15 - v24 > 4);
  v22 = &v14[v13];
LABEL_29:
  v27 = v22 != v15 && v22 - v14 != -1;
  if (v13)
  {
    v28 = v14;
    v29 = &v14[v13];
    do
    {
      if (*v28 == 46)
      {
        v30 = 1u;
        while (v30 != 4)
        {
          if (&v28[v30] == v15)
            goto LABEL_46;
          v31 = v28[v30];
          v32 = aMil[v30++];
          if (v31 != v32)
            goto LABEL_38;
        }
        v29 = v28;
      }
LABEL_38:
      ++v28;
    }
    while (v28 != v15);
LABEL_46:
    if (v29 == v15)
      v33 = -1;
    else
      v33 = v29 - v14;
    v34 = v14;
    v35 = &v14[v13];
    do
    {
      if (*v34 == 46)
      {
        v36 = 1u;
        while (v36 != 5)
        {
          if (&v34[v36] == v15)
            goto LABEL_60;
          v37 = v34[v36];
          v38 = aMil_0[v36++];
          if (v37 != v38)
            goto LABEL_51;
        }
        v35 = v34;
      }
LABEL_51:
      ++v34;
    }
    while (v34 != v15);
  }
  else
  {
    v33 = -1;
    v35 = v14;
  }
LABEL_60:
  v40 = v35 != v15 && v35 - v14 != -1;
  if (v17 || v27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __str = *(std::string *)a1;
    if (v27)
    {
      v42 = *(char *)(a1 + 23);
      v43 = v42 < 0;
      v44 = *(_QWORD *)a1;
      if (v42 >= 0)
        v44 = a1;
      v45 = *(unsigned __int8 *)(a1 + 23);
      if (v43)
        v45 = *(_QWORD *)(a1 + 8);
      while (v45)
      {
        v46 = *(unsigned __int8 *)(v44 + v45-- - 1);
        if (v46 == 58)
        {
          v47 = v45;
          goto LABEL_87;
        }
      }
      v47 = -1;
LABEL_87:
      std::string::basic_string(&v99, (const std::string *)a1, 0, v47, (std::allocator<char> *)&v110);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v99;
      std::string::basic_string(&v99, (const std::string *)a1, v47 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v110);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v99;
    }
    Espresso::load_network_binserializer((uint64_t)&__str, (const void **)&__p.__r_.__value_.__l.__data_, &v111, a3, 2, (uint64_t)a5);
  }
  else
  {
    v41 = v33 == v16 || v40;
    if (v41 != 1)
    {
      if (v10 < 0)
        std::string::__init_copy_ctor_external(&v110, v12, v11);
      else
        v110 = *(std::string *)a1;
      size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      v56 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      v57 = (std::string *)v110.__r_.__value_.__r.__words[0];
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v110.__r_.__value_.__l.__size_;
      else
        v57 = &v110;
      if (!size)
        goto LABEL_126;
      v58 = (std::string *)((char *)v57 + size);
      v59 = v57;
      v60 = v58;
      do
      {
        if (v59->__r_.__value_.__s.__data_[0] == 46)
        {
          v61 = 1u;
          while (v61 != 13)
          {
            if ((std::string *)((char *)v59 + v61) == v58)
              goto LABEL_121;
            v62 = v59->__r_.__value_.__s.__data_[v61];
            v63 = aEspressoNet[v61++];
            if (v62 != v63)
              goto LABEL_113;
          }
          v60 = v59;
        }
LABEL_113:
        v59 = (std::string *)((char *)v59 + 1);
      }
      while (v59 != v58);
LABEL_121:
      if (v60 == v58 || (char *)v60 - (char *)v57 == -1)
      {
LABEL_126:
        *a5 = 0;
        a5[1] = 0;
        if ((v56 & 0x80) == 0)
          goto LABEL_201;
      }
      else
      {
        std::string::replace(&v110, (char *)v60 - (char *)v57, 0xFFFFFFFFFFFFFFFFLL, ".espresso.shape");
        std::string::basic_string[abi:ne180100]<0>(v108, "json");
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
        v106 = 0;
        v107 = 0;
        v105 = &v106;
        if (a4)
        {
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = 0xFFFFFFFFFFFFFFFFLL;
          v99.__r_.__value_.__r.__words[2] = -1;
          v100 = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v103, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
          else
            v103 = v110;
          encrypted_file::load_file((void **)&v99.__r_.__value_.__l.__data_, (uint64_t)&v103);
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v103.__r_.__value_.__l.__data_);
          Espresso::load_network_shape(v99.__r_.__value_.__r.__words[2], (uint64_t)v100, v108, (uint64_t)&__p);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
          __str = __p;
          if (__p.__r_.__value_.__r.__words[2])
          {
            *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = &__str.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
          }
          else
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v105, v106);
          v68 = (char *)v117;
          v105 = v116;
          v106 = (char *)v117;
          v107 = v118;
          if (v118)
          {
            *(_QWORD *)(v117 + 16) = &v106;
            v116 = (char **)&v117;
            v117 = 0;
            v118 = 0;
            v68 = 0;
          }
          else
          {
            v105 = &v106;
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v116, v68);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
          encrypted_file::~encrypted_file((encrypted_file *)&v99);
        }
        else
        {
          std::ifstream::basic_ifstream(&__p);
          if (!*(_DWORD *)((char *)&v117 + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)))
          {
            Espresso::load_network_shape((uint64_t)&__p, v108, (uint64_t)&v99);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
            __str = v99;
            if (v99.__r_.__value_.__r.__words[2])
            {
              *(_QWORD *)(v99.__r_.__value_.__l.__size_ + 16) = &__str.__r_.__value_.__l.__size_;
              v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99.__r_.__value_.__l.__size_;
              *(_OWORD *)&v99.__r_.__value_.__r.__words[1] = 0uLL;
            }
            else
            {
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
            }
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v105, v106);
            v69 = (char *)v101;
            v105 = v100;
            v106 = (char *)v101;
            v107 = v102;
            if (v102)
            {
              *(_QWORD *)(v101 + 16) = &v106;
              v100 = (char **)&v101;
              v101 = 0;
              v102 = 0;
              v69 = 0;
            }
            else
            {
              v105 = &v106;
            }
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v100, v69);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v99, (char *)v99.__r_.__value_.__l.__size_);
          }
          __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                    + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
          MEMORY[0x19401C8BC](&__p.__r_.__value_.__r.__words[2]);
          std::istream::~istream();
          MEMORY[0x19401CCD0](v119);
        }
        Espresso::load_jsfile(&v97, a1, v108, a4);
        v70 = v97;
        if (v97)
        {
          Espresso::find_base_dir((uint64_t)&v99, (const std::string *)a1);
          v71 = v98;
          v94 = v98;
          if (v98)
          {
            p_shared_owners = (unint64_t *)&v98->__shared_owners_;
            do
              v73 = __ldxr(p_shared_owners);
            while (__stxr(v73 + 1, p_shared_owners));
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          v74 = (***(unsigned int (****)(_QWORD))(v111 + 8))(*(_QWORD *)(v111 + 8)) == 10006
             || (***(uint64_t (****)(_QWORD))(v111 + 8))(*(_QWORD *)(v111 + 8)) == 10007;
          v113 = v70;
          v114 = v71;
          if (v71)
          {
            v75 = (unint64_t *)&v71->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          Espresso::load_blob_storage(&v95, v70, (const void **)&v99.__r_.__value_.__l.__data_, 0, (uint64_t)&__p, 0, 0, v74);
          if (v71)
          {
            v77 = (unint64_t *)&v71->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v94)
          {
            v79 = (unint64_t *)&v94->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          Espresso::load_and_shape_network((uint64_t)&v97, &v99, &v111, (Espresso::net *)&__str, a3, &v95, (std::string *)a1, (uint64_t)a5);
          *(_BYTE *)(*a5 + 1282) = a4;
          v81 = v96;
          if (v96)
          {
            v82 = (unint64_t *)&v96->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
        }
        else
        {
          *a5 = 0;
          a5[1] = 0;
        }
        v84 = v98;
        if (v98)
        {
          v85 = (unint64_t *)&v98->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v105, v106);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
        if (v109 < 0)
          operator delete(v108[0]);
        if ((*((_BYTE *)&v110.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_201;
      }
      v48 = (void *)v110.__r_.__value_.__r.__words[0];
      goto LABEL_200;
    }
    memset(&__p, 0, sizeof(__p));
    if (v10 < 0)
      std::string::__init_copy_ctor_external(&__str, v12, v11);
    else
      __str = *(std::string *)a1;
    if (!v40)
      goto LABEL_135;
    v49 = *(char *)(a1 + 23);
    v50 = v49 < 0;
    v51 = *(_QWORD *)a1;
    if (v49 >= 0)
      v51 = a1;
    v52 = *(unsigned __int8 *)(a1 + 23);
    if (v50)
      v52 = *(_QWORD *)(a1 + 8);
    while (v52)
    {
      v53 = *(unsigned __int8 *)(v51 + v52-- - 1);
      if (v53 == 58)
      {
        v54 = v52;
        goto LABEL_129;
      }
    }
    v54 = -1;
LABEL_129:
    std::string::basic_string(&v99, (const std::string *)a1, 0, v54, (std::allocator<char> *)&v110);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v99;
    std::string::basic_string(&v99, (const std::string *)a1, v54 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v110);
    __p = v99;
    v64 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v64 = v99.__r_.__value_.__l.__size_;
    if (v64)
    {
      Espresso::MILTranslator::TranslateProgram((uint64_t *)&v110, (uint64_t)&__str, (uint64_t)&__p);
    }
    else
    {
LABEL_135:
      std::string::basic_string[abi:ne180100]<0>(&v99, "main");
      Espresso::MILTranslator::TranslateProgram((uint64_t *)&v110, (uint64_t)&__str, (uint64_t)&v99);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
    }
    std::string::operator=((std::string *)(v110.__r_.__value_.__r.__words[0] + 592), &__str);
    Espresso::reload_network_on_context(&v110, &v111, a3, a5);
    *(_BYTE *)(*a5 + 1282) = a4;
    v65 = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
    if (v110.__r_.__value_.__l.__size_)
    {
      v66 = (unint64_t *)(v110.__r_.__value_.__l.__size_ + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v48 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_200:
    operator delete(v48);
  }
LABEL_201:
  v87 = v112;
  if (v112)
  {
    v88 = (unint64_t *)&v112->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  objc_autoreleasePoolPop(context);
}

void sub_190E2C364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  std::ifstream::~ifstream(&a53);
  Espresso::network_shape::~network_shape((char **)&a29);
  if (a41 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(uint64_t a1, char *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void *)*((_QWORD *)a2 + 12);
    if (v4)
    {
      *((_QWORD *)a2 + 13) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_190E2C61C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x19401CCD0](v1 + 424);
  _Unwind_Resume(a1);
}

void Espresso::load_jsfile(_QWORD *a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::string v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[20];

  v23[19] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = 0;
  if (a4)
  {
    v19[0] = (void *)-1;
    v19[1] = 0;
    v20 = -1;
    v21 = 0;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v16 = *(std::string *)a2;
    encrypted_file::load_file(v19, (uint64_t)&v16);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    v9 = v20;
    v10 = v21;
    v11 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v14, (uint64_t)v11, a3);
    v8 = v14;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 296))(v14, v9, v10);
    v7 = v15;
    encrypted_file::~encrypted_file((encrypted_file *)v19);
LABEL_12:
    *a1 = v8;
    a1[1] = v7;
    return;
  }
  std::ifstream::basic_ifstream(v19);
  v6 = v22;
  if (v22)
  {
    Espresso::load_js_fstream(&v14, (uint64_t)v19, a3);
    v8 = v14;
    v7 = v15;
    v17 = v14;
    v18 = v15;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  v19[0] = *(void **)MEMORY[0x1E0DE4F40];
  *(void **)((char *)v19 + *((_QWORD *)v19[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401C8BC](&v20);
  std::istream::~istream();
  MEMORY[0x19401CCD0](v23);
  if (v6)
    goto LABEL_12;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_190E2C824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  encrypted_file::~encrypted_file((encrypted_file *)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

double Espresso::find_base_dir(uint64_t a1, const std::string *a2)
{
  std::string::size_type v4;
  double result;
  std::string v6;
  char v7;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "");
  v4 = std::string::rfind(a2, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 != -1)
  {
    std::string::basic_string(&v6, a2, 0, v4, (std::allocator<char> *)&v7);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    result = *(double *)&v6.__r_.__value_.__l.__data_;
    *(std::string *)a1 = v6;
  }
  return result;
}

void sub_190E2C908(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

Espresso::espresso_plan_tracer *Espresso::espresso_plan_tracer::espresso_plan_tracer(Espresso::espresso_plan_tracer *this)
{
  int v2;
  id v3;
  Espresso *v4;
  const char *v5;
  NSObject *v6;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = "";
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::onceToken != -1)
    dispatch_once(&Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::onceToken, &__block_literal_global_8727);
  v2 = Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::should_record;
  *(_BYTE *)this = Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::should_record;
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/pid_%d_plan_%d"), Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path, Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::pid, Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::trace_id);
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *((_QWORD *)this + 1) = objc_msgSend(v3, "UTF8String");

    ++Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::trace_id;
    Espresso::espresso_os_log_subsystem(v4, v5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v8 = *((_QWORD *)this + 1);
      *(_DWORD *)buf = 136315138;
      v10 = v8;
      _os_log_debug_impl(&dword_190DAF000, v6, OS_LOG_TYPE_DEBUG, "Plan tracer added to dump at: %s", buf, 0xCu);
    }

  }
  return this;
}

void sub_190E2CA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x68uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[11] = 0;
    v6[12] = 0;
    v6[9] = 0;
    v6[10] = (uint64_t)(v6 + 11);
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_190E2CB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1, *((_QWORD *)a2 + 1));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(a2 + 80), *((char **)a2 + 11));
    v4 = *((_QWORD *)a2 + 7);
    if (v4)
    {
      v5 = *((_QWORD *)a2 + 8);
      v6 = (void *)*((_QWORD *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0)
            operator delete(*(void **)(v5 - 24));
          v5 -= 24;
        }
        while (v5 != v4);
        v6 = (void *)*((_QWORD *)a2 + 7);
      }
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t __copy_helper_block_ea8_48c46_ZTSNSt3__110shared_ptrIKN4E5RT10E5FunctionEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

E5RT::E5BlockImpl *E5RT::E5BlockImpl::E5BlockImpl(E5RT::E5BlockImpl *this)
{
  _QWORD *v2;

  v2 = E5RT::E5Block::E5Block(this);
  E5RT::E5BlockBuilder::E5BlockBuilder(v2 + 1);
  *(_QWORD *)this = &off_1E2D59AE8;
  *((_QWORD *)this + 1) = &unk_1E2D59B48;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((_QWORD *)this + 37) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 76) = 1065353216;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 86) = 1065353216;
  return this;
}

void sub_190E2CD1C(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::E5Block::E5Block(_QWORD *this)
{
  *this = off_1E2D5BF28;
  return this;
}

_QWORD *E5RT::E5BlockBuilder::E5BlockBuilder(_QWORD *this)
{
  *this = off_1E2D59E78;
  return this;
}

void Espresso::BNNSEngine::inner_product_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  double v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  _BOOL4 v55;
  int v56;
  uint64_t *v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  int v89;
  uint64_t *v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  int v134;
  _QWORD *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  std::__shared_weak_count *size;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unsigned __int8 *v145;
  int v146;
  unsigned __int8 *v147;
  int v148;
  uint64_t v149;
  Espresso *v150;
  const signed __int8 *v151;
  const float *v152;
  const float *v153;
  float *v154;
  unsigned int v155;
  const inner_product_uniforms *v156;
  std::runtime_error *exception;
  std::runtime_error *v158;
  std::runtime_error *v159;
  std::string *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 *v174;
  _QWORD v175[2];
  uint64_t v176;
  std::__shared_weak_count *v177;
  _OWORD v178[8];
  int v179;
  _QWORD v180[3];
  std::__shared_weak_count *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  _QWORD v184[2];
  std::string __p;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  int32x4_t v197;
  int v198;
  void *v199;
  void *v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;

  v8 = *(_DWORD *)(a1 + 424);
  if (v8 >= 1)
  {
    v9 = *(_DWORD *)(a1 + 944);
    if (v9)
      v10 = v8 <= v9;
    else
      v10 = 1;
    if (!v10)
    {
      *(_DWORD *)(a1 + 944) = v9 + 1;
      return;
    }
    *(_DWORD *)(a1 + 944) = 1;
  }
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v12 = *a3;
  if (a3[1] == *a3 || !*v12 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v12 + 32))(*v12))
  {
    v209 = 0;
    v210 = 0;
  }
  else
  {
    v25 = *(std::__shared_weak_count **)(*v12 + 168);
    v209 = *(_QWORD *)(*v12 + 160);
    v210 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
  }
  v13 = *a4;
  if (a4[1] == *a4 || !*v13 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v13 + 32))(*v13))
  {
    v207 = 0;
    v208 = 0;
  }
  else
  {
    v28 = *(std::__shared_weak_count **)(*v13 + 168);
    v207 = *(_QWORD *)(*v13 + 160);
    v208 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v196, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v201, (const Espresso::layer_shape *)&v196, 0);
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  Espresso::abstract_blob_container::shape((char *)&v196, **a3);
  v14 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v197)));
  if (v198 == -1)
    v15 = v197.i32[3] != 1;
  else
    v15 = v198 == 5;
  if (v197.i32[3])
    v15 = 0;
  if ((v14 & 1) == 0 && v196 >= 1 && !v15)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v190, (const Espresso::layer_shape *)&v196, 0);
    if (*(_BYTE *)(a1 + 344) || v206 <= 3)
    {
      switch(v206)
      {
        case 1u:
          v23 = 1;
          if (!v206)
            goto LABEL_44;
          break;
        case 2u:
          v23 = v201;
          if (!v206)
            goto LABEL_44;
          break;
        case 3u:
          v23 = v202 * (uint64_t)v201;
          if (!v206)
            goto LABEL_44;
          break;
        case 4u:
          v23 = v202 * (uint64_t)v201 * v203;
          if (!v206)
            goto LABEL_44;
          break;
        case 5u:
          v23 = v202 * (uint64_t)v201 * v203 * v204;
          if (!v206)
            goto LABEL_44;
          break;
        default:
          v23 = 0;
          if (!v206)
            goto LABEL_44;
          break;
      }
      v24 = *(&v201 + (int)v206 - 1);
    }
    else if (v206 == 5)
    {
      v23 = v202 * (uint64_t)v201;
      v24 = v204 * (uint64_t)v205 * v203;
    }
    else
    {
      if (v206 != 4)
      {
        v23 = 0;
LABEL_44:
        *((_QWORD *)&v165 + 1) = 0;
LABEL_56:
        if (*(_BYTE *)(a1 + 344) || v195 <= 3)
        {
          switch(v195)
          {
            case 1u:
              v31 = 1;
              if (!v195)
                goto LABEL_66;
              goto LABEL_77;
            case 2u:
              v31 = v190;
              if (!v195)
                goto LABEL_66;
              goto LABEL_77;
            case 3u:
              v31 = v191 * (uint64_t)v190;
              if (!v195)
                goto LABEL_66;
              goto LABEL_77;
            case 4u:
              v31 = v191 * (uint64_t)v190 * v192;
              if (!v195)
                goto LABEL_66;
              goto LABEL_77;
            case 5u:
              v31 = v191 * (uint64_t)v190 * v192 * v193;
              if (!v195)
                goto LABEL_66;
              goto LABEL_77;
            default:
              v31 = 0;
              if (!v195)
                goto LABEL_66;
LABEL_77:
              v32 = *(&v190 + (int)v195 - 1);
              break;
          }
        }
        else if (v195 == 5)
        {
          v31 = v191 * (uint64_t)v190;
          v32 = v193 * (uint64_t)v194 * v192;
        }
        else
        {
          if (v195 != 4)
          {
            v31 = 0;
LABEL_66:
            *(_QWORD *)&v166 = 0;
            if (v206)
            {
LABEL_79:
              if (v23 != v31)
                Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Mismatching batch size: %zu / %zu", v23, v31);
              v33 = 0;
              v34 = 0;
              v189 = 0uLL;
              v188 = 0uLL;
              v187 = 0uLL;
              v186 = 0uLL;
              v35 = v209;
              v36 = v207;
              if (!(v209 | v207))
              {
                v37 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)*a3, (uint64_t)a3[1], 0);
                v38 = 0uLL;
                if (v37)
                {
                  v38 = v37[11];
                  v39 = *((_QWORD *)v37 + 23);
                  if (v39)
                  {
                    v40 = (unint64_t *)(v39 + 8);
                    do
                      v41 = __ldxr(v40);
                    while (__stxr(v41 + 1, v40));
                  }
                }
                v189 = v38;
                v33 = v38;
                v42 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)*a4, (uint64_t)a4[1], 0);
                v20 = 0uLL;
                if (v42)
                {
                  v20 = v42[11];
                  v43 = *((_QWORD *)v42 + 23);
                  if (v43)
                  {
                    v44 = (unint64_t *)(v43 + 8);
                    do
                      v45 = __ldxr(v44);
                    while (__stxr(v45 + 1, v44));
                  }
                }
                v188 = v20;
                if (!v33 || (v34 = v20) == 0)
                {
                  v57 = *a3;
                  v58 = 0uLL;
                  v59 = 0uLL;
                  if (a3[1] != *a3)
                  {
                    if (*v57)
                    {
                      v60 = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)*v57 + 32))(*v57, (__n128)0, (__n128)0);
                      v59 = 0uLL;
                      v58 = 0uLL;
                      if (v60 == 3)
                      {
                        v59 = *(_OWORD *)(*v57 + 208);
                        v61 = *(_QWORD *)(*v57 + 216);
                        if (v61)
                        {
                          v62 = (unint64_t *)(v61 + 8);
                          do
                            v63 = __ldxr(v62);
                          while (__stxr(v63 + 1, v62));
                        }
                      }
                    }
                  }
                  v164 = v59;
                  v186 = v59;
                  if (a4[1] != *a4)
                  {
                    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&__p, *a4);
                    v58 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  }
                  v187 = v58;
                  if (!v164 || !(_QWORD)v58)
                  {
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Unexpected null blobs");
                    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 592))(a1, a2, a3, a4, v31, v166, *((_QWORD *)&v165 + 1));
                  goto LABEL_116;
                }
              }
              v46 = *(_QWORD *)(a1 + 952);
              if (v46)
              {
                if (v35 && v36)
                {
                  v47 = *(_QWORD *)(v36 + 24);
                  *(_QWORD *)(v46 + 232) = 0;
                  v48 = v46 + 232;
                  v50 = *(_QWORD *)(v48 - 16);
                  v49 = *(_QWORD *)(v48 - 8);
                  v51 = *(_QWORD *)(v48 - 24);
                  *(_QWORD *)(v48 + 8) = v50;
                  *(_QWORD *)(v48 + 16) = v49;
                  *(_OWORD *)(v48 + 24) = 0u;
                  *(_OWORD *)(v48 + 40) = 0u;
                  *(_OWORD *)(v48 + 56) = 0u;
                  *(_QWORD *)(v48 + 72) = 1;
                  *(_QWORD *)(v48 + 80) = v50;
                  *(_OWORD *)(v48 + 120) = 0u;
                  *(_OWORD *)(v48 + 104) = 0u;
                  *(_OWORD *)(v48 + 88) = 0u;
                  *(_QWORD *)(v48 + 136) = v47;
                  *(_DWORD *)(v48 + 144) = 65568;
                  *(_QWORD *)(v48 + 148) = 0;
                  *(_OWORD *)(v48 + 156) = 0u;
                  *(_DWORD *)(v48 + 172) = 0;
                  v52 = *(_QWORD *)(v35 + 24);
                  *(_QWORD *)(v48 + 352) = 0;
                  *(_QWORD *)(v48 + 360) = v51;
                  *(_QWORD *)(v48 + 368) = v49;
                  *(_OWORD *)(v48 + 408) = 0u;
                  *(_OWORD *)(v48 + 392) = 0u;
                  *(_OWORD *)(v48 + 376) = 0u;
                  *(_QWORD *)(v48 + 424) = 1;
                  *(_QWORD *)(v48 + 432) = v51;
                  *(_OWORD *)(v48 + 472) = 0u;
                  *(_OWORD *)(v48 + 456) = 0u;
                  *(_OWORD *)(v48 + 440) = 0u;
                  *(_QWORD *)(v48 + 488) = v52;
                  *(_DWORD *)(v48 + 496) = 65568;
                  *(_DWORD *)(v48 + 524) = 0;
                  *(_QWORD *)(v48 + 516) = 0;
                  *(_OWORD *)(v48 + 500) = 0u;
                  v53 = BNNSDirectApplyFullyConnectedBatch();
                }
                else
                {
                  if (!v33 || !v34)
                  {
                    v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v158, "Unexpected top and bottom for bnns_auto_sparse_helper.");
                    __cxa_throw(v158, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v64 = *(_QWORD *)(v34 + 24);
                  *(_QWORD *)(v46 + 232) = 0;
                  v65 = v46 + 232;
                  v67 = *(_QWORD *)(v65 - 16);
                  v66 = *(_QWORD *)(v65 - 8);
                  v68 = *(_QWORD *)(v65 - 24);
                  *(_QWORD *)(v65 + 8) = v67;
                  *(_QWORD *)(v65 + 16) = v66;
                  *(_OWORD *)(v65 + 24) = 0u;
                  *(_OWORD *)(v65 + 40) = 0u;
                  *(_OWORD *)(v65 + 56) = 0u;
                  *(_QWORD *)(v65 + 72) = 1;
                  *(_QWORD *)(v65 + 80) = v67;
                  *(_OWORD *)(v65 + 120) = 0u;
                  *(_OWORD *)(v65 + 104) = 0u;
                  *(_OWORD *)(v65 + 88) = 0u;
                  *(_QWORD *)(v65 + 136) = v64;
                  *(_DWORD *)(v65 + 144) = 65552;
                  *(_QWORD *)(v65 + 148) = 0;
                  *(_OWORD *)(v65 + 156) = 0u;
                  *(_DWORD *)(v65 + 172) = 0;
                  v69 = *(_QWORD *)(v33 + 24);
                  *(_QWORD *)(v65 + 352) = 0;
                  *(_QWORD *)(v65 + 360) = v68;
                  *(_QWORD *)(v65 + 368) = v66;
                  *(_OWORD *)(v65 + 408) = 0u;
                  *(_OWORD *)(v65 + 392) = 0u;
                  *(_OWORD *)(v65 + 376) = 0u;
                  *(_QWORD *)(v65 + 424) = 1;
                  *(_QWORD *)(v65 + 432) = v68;
                  *(_OWORD *)(v65 + 472) = 0u;
                  *(_OWORD *)(v65 + 456) = 0u;
                  *(_OWORD *)(v65 + 440) = 0u;
                  *(_QWORD *)(v65 + 488) = v69;
                  *(_DWORD *)(v65 + 496) = 65552;
                  *(_DWORD *)(v65 + 524) = 0;
                  *(_QWORD *)(v65 + 516) = 0;
                  *(_OWORD *)(v65 + 500) = 0u;
                  v53 = BNNSDirectApplyFullyConnectedBatch();
                }
                if (v53)
                  Espresso::throw_exception_selector<Espresso::invalid_state_error>("bnns_auto_sparse_helper: BNNSDirectApplyFullyConnectedBatch failed");
                goto LABEL_116;
              }
              if (*(_DWORD *)(a1 + 412)
                && *(_DWORD *)(a1 + 416)
                && (Espresso::__launch_spmv_inner_product((_QWORD *)a1, (uint64_t)&v209, (uint64_t)&v207, v11 == 100, v16, v17, v18, v19, v162, v163, v165, v166, v167, v168, v169, v170, v171, v172, v173,
                      v174) & 1) != 0)
              {
                goto LABEL_98;
              }
              v88 = *(_DWORD *)(a1 + 340);
              if (v88 == 5)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 592))(a1, a2, a3, a4, v31, v166, *((_QWORD *)&v165 + 1));
LABEL_116:
                v70 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
                if (*((_QWORD *)&v186 + 1))
                {
                  v71 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                v73 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
                if (*((_QWORD *)&v187 + 1))
                {
                  v74 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                v76 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
                if (*((_QWORD *)&v188 + 1))
                {
                  v77 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                v79 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
                if (*((_QWORD *)&v189 + 1))
                {
                  v80 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
                  do
                    v81 = __ldaxr(v80);
                  while (__stlxr(v81 - 1, v80));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                  }
                }
                goto LABEL_136;
              }
              if (!v88)
              {
                v127 = *(_QWORD *)(a1 + 440);
                if (v127)
                {
                  if (*(_QWORD *)v127)
                  {
                    v128 = *(_QWORD *)(v127 + 32);
                    v129 = v128 || *(_QWORD *)(v127 + 48) || *(_QWORD *)(v127 + 64) || *(_QWORD *)(v127 + 80) != 0;
                    v54 = 0;
                    if (!v129 || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 76))
                      goto LABEL_153;
                    if (!*(_QWORD *)(a1 + 560)
                      && !*(_QWORD *)(a1 + 688)
                      && !*(_QWORD *)(a1 + 912)
                      && *(_DWORD *)(v127 + 156) == 8)
                    {
                      if (!v128
                        && !*(_QWORD *)(v127 + 48)
                        && !*(_QWORD *)(v127 + 64)
                        && *(_QWORD *)(v127 + 80)
                        && !*(_DWORD *)(a1 + 336)
                        && v11 == 100)
                      {
                        std::string::basic_string[abi:ne180100]<0>(&__p, "experimental_sgemv_float_xint8");
                        v145 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1 + 240), (unsigned __int8 *)&__p);
                        if (v145)
                          v146 = *((_DWORD *)v145 + 10);
                        else
                          v146 = 0;
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                        if (v146)
                        {
                          std::string::basic_string[abi:ne180100]<0>(&__p, "experimental_sgemv_use_int8_int16");
                          v147 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1 + 240), (unsigned __int8 *)&__p);
                          if (v147)
                            v148 = *((_DWORD *)v147 + 10);
                          else
                            v148 = 0;
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__p.__r_.__value_.__l.__data_);
                          v89 = *(_DWORD *)(a1 + 404);
                          if (!v89)
                          {
                            v149 = *(_QWORD *)(a1 + 440);
                            v150 = *(Espresso **)(*(_QWORD *)v149 + 16);
                            v151 = *(const signed __int8 **)(*(_QWORD *)(v149 + 80) + 16);
                            v152 = *(const float **)(*(_QWORD *)(v149 + 96) + 16);
                            v153 = *(const float **)(v207 + 24);
                            v154 = *(float **)(v209 + 24);
                            v155 = *(_DWORD *)(a1 + 304);
                            v156 = (const inner_product_uniforms *)*(unsigned int *)(a1 + 308);
                            if (*(_BYTE *)(v149 + 164))
                              Espresso::kaldi_like_sgemv_float_int8(v150, v151, v152, v153, v154, v31, v155, v156, v148 != 0);
                            else
                              Espresso::kaldi_like_sgemv_float_uint8(v150, (const unsigned __int8 *)v151, v152, v153, v154, v31, v155, v156, v148 != 0);
LABEL_98:
                            v54 = 0;
                            goto LABEL_99;
                          }
                          v54 = 0;
                          goto LABEL_154;
                        }
                      }
                      Espresso::blob<unsigned short,2>::make_uninitialized(&__p, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304));
                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 688, (__int128 *)&__p);
                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
                      v130 = *(_QWORD *)(a1 + 440);
                      v131 = *(_QWORD *)(a1 + 696);
                      v184[0] = *(_QWORD *)(a1 + 688);
                      v184[1] = v131;
                      if (v131)
                      {
                        v132 = (unint64_t *)(v131 + 8);
                        do
                          v133 = __ldxr(v132);
                        while (__stxr(v133 + 1, v132));
                      }
                      Espresso::quantized_weights_helper::dequantize_to_float16_2d(v130);
                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v184);
                      v54 = 1;
LABEL_153:
                      v89 = *(_DWORD *)(a1 + 404);
                      if (!v89)
                      {
                        v134 = *(_DWORD *)(a1 + 340);
                        if (v134)
                        {
                          v135 = *(_QWORD **)(a1 + 440);
                          if (!v135 || !*v135 || !v135[4] && !v135[6] && !v135[8] && !v135[10])
                          {
                            v137 = v134 - 1;
                            v136 = 66;
                            v138 = 67;
                            switch(v137)
                            {
                              case 0:
                                goto LABEL_254;
                              case 1:
                                goto LABEL_230;
                              case 2:
                                v138 = 73;
                                goto LABEL_254;
                              case 3:
                                v138 = 75;
LABEL_254:
                                (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 8 * v138))(a1, a2, &v209, &v207, v31, v166, *((_QWORD *)&v165 + 1));
                                break;
                              default:
                                v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::to_string((std::string *)((char *)&v166 + 8), *(_DWORD *)(a1 + 340));
                                v160 = std::string::insert((std::string *)((char *)&v166 + 8), 0, "Quantization not supported ");
                                v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
                                __p.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
                                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v161;
                                v160->__r_.__value_.__l.__size_ = 0;
                                v160->__r_.__value_.__r.__words[2] = 0;
                                v160->__r_.__value_.__r.__words[0] = 0;
                                std::runtime_error::runtime_error(v159, &__p);
                                __cxa_throw(v159, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                            }
LABEL_99:
                            v55 = 0;
                            v56 = 1;
                            if ((v54 & 1) != 0)
                              goto LABEL_233;
                            goto LABEL_232;
                          }
                        }
                        if (*(_DWORD *)(a1 + 336))
                        {
                          if (v207 && v209 && (*(_QWORD *)(a1 + 688) || *(_QWORD *)(a1 + 704) || *(_QWORD *)(a1 + 528)))
                          {
                            v136 = 68;
LABEL_230:
                            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 8 * v136))(a1, a2, &v209, &v207, v31, v166, *((_QWORD *)&v165 + 1));
LABEL_231:
                            v56 = 0;
                            v55 = 0;
                            if ((v54 & 1) != 0)
                              goto LABEL_233;
LABEL_232:
                            if (!v55)
                            {
LABEL_246:
                              if (v56)
                                (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t **))(*(_QWORD *)a1 + 608))(a1, a2, &v209, &v207, v31, v166, *((_QWORD *)&v165 + 1), a4);
                              goto LABEL_116;
                            }
LABEL_233:
                            if (v55)
                            {
                              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
                              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 560, (__int128 *)&__p);
                              size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                              if (__p.__r_.__value_.__l.__size_)
                              {
                                v140 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                                do
                                  v141 = __ldaxr(v140);
                                while (__stlxr(v141 - 1, v140));
                                if (!v141)
                                {
                                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                                  std::__shared_weak_count::__release_weak(size);
                                }
                              }
                            }
                            if (v54)
                            {
                              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
                              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 688, (__int128 *)&__p);
                              v142 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                              if (__p.__r_.__value_.__l.__size_)
                              {
                                v143 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                                do
                                  v144 = __ldaxr(v143);
                                while (__stlxr(v144 - 1, v143));
                                if (!v144)
                                {
                                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                                  std::__shared_weak_count::__release_weak(v142);
                                }
                              }
                            }
                            BNNSFilterDestroy(*(void **)(a1 + 912));
                            *(_QWORD *)(a1 + 912) = 0;
                            goto LABEL_246;
                          }
                          v55 = Espresso::BNNSEngine::inner_product_kernel::__bloat_quantized_weights_to_fp32((Espresso::BNNSEngine::inner_product_kernel *)a1, *(double *)&v20, v21, v22);
                          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 576))(a1, a2, &v209, &v207, v31, v166, *((_QWORD *)&v165 + 1));
                        }
                        else
                        {
                          v55 = Espresso::BNNSEngine::inner_product_kernel::__bloat_quantized_weights_to_fp32((Espresso::BNNSEngine::inner_product_kernel *)a1, *(double *)&v20, v21, v22);
                          v172 = 0;
                          v173 = 0;
                          v174 = 0;
                          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)&v172, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
                          v169 = 0;
                          v170 = 0;
                          v171 = 0;
                          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)&v169, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
                          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 616))(a1, a2, &v172, &v169, v31, v166, *((_QWORD *)&v165 + 1));
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v169;
                          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
                          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        }
                        v56 = 0;
                        if ((v54 & 1) != 0)
                          goto LABEL_233;
                        goto LABEL_232;
                      }
LABEL_154:
                      v90 = *(uint64_t **)(a1 + 928);
                      v91 = *(_DWORD *)(a1 + 408);
                      v92 = *(std::__shared_weak_count **)(a1 + 568);
                      v182 = *(_QWORD *)(a1 + 560);
                      v183 = v92;
                      if (v92)
                      {
                        v93 = (unint64_t *)&v92->__shared_owners_;
                        do
                          v94 = __ldxr(v93);
                        while (__stxr(v94 + 1, v93));
                      }
                      v95 = *(std::__shared_weak_count **)(a1 + 584);
                      v180[2] = *(_QWORD *)(a1 + 576);
                      v181 = v95;
                      if (v95)
                      {
                        v96 = (unint64_t *)&v95->__shared_owners_;
                        do
                          v97 = __ldxr(v96);
                        while (__stxr(v97 + 1, v96));
                      }
                      v98 = *(std::__shared_weak_count **)(a1 + 552);
                      v180[0] = *(_QWORD *)(a1 + 544);
                      v180[1] = v98;
                      if (v98)
                      {
                        v99 = (unint64_t *)&v98->__shared_owners_;
                        do
                          v100 = __ldxr(v99);
                        while (__stxr(v100 + 1, v99));
                      }
                      Espresso::argmax_tree_approximator::__launch(v90, v89, v91, (uint64_t)&v182, (uint64_t)v180, (uint64_t)&v209, (uint64_t)&v207);
                      if (v98)
                      {
                        v101 = (unint64_t *)&v98->__shared_owners_;
                        do
                          v102 = __ldaxr(v101);
                        while (__stlxr(v102 - 1, v101));
                        if (!v102)
                        {
                          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                          std::__shared_weak_count::__release_weak(v98);
                        }
                      }
                      v103 = v181;
                      if (v181)
                      {
                        v104 = (unint64_t *)&v181->__shared_owners_;
                        do
                          v105 = __ldaxr(v104);
                        while (__stlxr(v105 - 1, v104));
                        if (!v105)
                        {
                          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                          std::__shared_weak_count::__release_weak(v103);
                        }
                      }
                      v106 = v183;
                      if (v183)
                      {
                        v107 = (unint64_t *)&v183->__shared_owners_;
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      v109 = *(_OWORD *)(a1 + 416);
                      v178[6] = *(_OWORD *)(a1 + 400);
                      v178[7] = v109;
                      v179 = *(_DWORD *)(a1 + 432);
                      v110 = *(_OWORD *)(a1 + 352);
                      v178[2] = *(_OWORD *)(a1 + 336);
                      v178[3] = v110;
                      v111 = *(_OWORD *)(a1 + 384);
                      v178[4] = *(_OWORD *)(a1 + 368);
                      v178[5] = v111;
                      v112 = *(_OWORD *)(a1 + 320);
                      v178[0] = *(_OWORD *)(a1 + 304);
                      v178[1] = v112;
                      v113 = v209;
                      v176 = v209;
                      v177 = v210;
                      if (v210)
                      {
                        v114 = (unint64_t *)&v210->__shared_owners_;
                        do
                          v115 = __ldxr(v114);
                        while (__stxr(v115 + 1, v114));
                      }
                      v116 = 0;
                      v117 = *(_DWORD *)(v113 + 8);
                      v118 = v113 + 12;
                      do
                      {
                        v117 *= *(_DWORD *)(v118 + v116);
                        v116 += 4;
                      }
                      while (v116 != 12);
                      v119 = *(std::__shared_weak_count **)(a1 + 552);
                      v175[0] = *(_QWORD *)(a1 + 544);
                      v175[1] = v119;
                      if (v119)
                      {
                        v120 = (unint64_t *)&v119->__shared_owners_;
                        do
                          v121 = __ldxr(v120);
                        while (__stxr(v121 + 1, v120));
                      }
                      Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)v178, &v176, v117, (uint64_t)v175, v166, v31);
                      if (v119)
                      {
                        v122 = (unint64_t *)&v119->__shared_owners_;
                        do
                          v123 = __ldaxr(v122);
                        while (__stlxr(v123 - 1, v122));
                        if (!v123)
                        {
                          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                          std::__shared_weak_count::__release_weak(v119);
                        }
                      }
                      v124 = v177;
                      if (v177)
                      {
                        v125 = (unint64_t *)&v177->__shared_owners_;
                        do
                          v126 = __ldaxr(v125);
                        while (__stlxr(v126 - 1, v125));
                        if (!v126)
                        {
                          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                          std::__shared_weak_count::__release_weak(v124);
                        }
                      }
                      goto LABEL_231;
                    }
                  }
                }
              }
              v54 = 0;
              goto LABEL_153;
            }
LABEL_67:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid rank");
          }
          v31 = v190;
          v32 = v192 * (uint64_t)v193 * v191;
        }
        *(_QWORD *)&v166 = v32;
        if (v206)
          goto LABEL_79;
        goto LABEL_67;
      }
      v23 = v201;
      v24 = v203 * (uint64_t)v204 * v202;
    }
    *((_QWORD *)&v165 + 1) = v24;
    goto LABEL_56;
  }
LABEL_136:
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  v82 = v208;
  if (v208)
  {
    v83 = (unint64_t *)&v208->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v210;
  if (v210)
  {
    v86 = (unint64_t *)&v210->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_190E2DE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a64;
  char a66;
  uint64_t v66;
  void *v68;

  if (a60 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v66 - 256);
  v68 = *(void **)(v66 - 176);
  if (v68)
  {
    *(_QWORD *)(v66 - 168) = v68;
    operator delete(v68);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v66 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v66 - 112);
  _Unwind_Resume(a1);
}

void Espresso::elementwise_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const int *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t i;
  unint64_t v43;
  uint64_t j;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  int v70;
  BOOL v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  _BOOL4 v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  vDSP_Length v118;
  vDSP_Length v119;
  int v120;
  float *v121;
  float *v122;
  float *v123;
  float v124;
  float v125;
  float v126;
  float *v127;
  float *v128;
  float v129;
  float v130;
  float *v131;
  float *v132;
  float v133;
  float v134;
  float *v135;
  float *v136;
  float *v137;
  float v138;
  float v139;
  float v140;
  float v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BOOL4 v146;
  uint64_t v147;
  vDSP_Length v148;
  uint64_t v149;
  uint64_t v150;
  float *v151;
  float *v152;
  float *v153;
  float v154;
  _BOOL4 v155;
  float v156;
  float *v157;
  float *v158;
  float v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  vDSP_Length v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  vDSP_Length v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  vDSP_Length v172;
  uint64_t v173;
  uint64_t v174;
  float *v175;
  float *v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float *v182;
  float *v183;
  float v184;
  uint64_t v185;
  vDSP_Length v186;
  uint64_t v187;
  uint64_t v188;
  float *v189;
  float *v190;
  float *v191;
  float v192;
  float v193;
  float v194;
  float v195;
  uint64_t v196;
  uint64_t v197;
  vDSP_Length v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  vDSP_Length v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  vDSP_Length v214;
  uint64_t v215;
  uint64_t v216;
  const float *v217;
  uint64_t v218;
  uint64_t v219;
  const float *v220;
  float v221;
  float v222;
  float v223;
  float v224;
  uint64_t v225;
  uint64_t v226;
  vDSP_Length v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _BOOL4 v234;
  uint64_t v235;
  uint64_t v236;
  vDSP_Length v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  vDSP_Length v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  const float *v255;
  const float *v256;
  float *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  float *v266;
  float *v267;
  float *v268;
  float v269;
  float v270;
  float v271;
  float v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  float *v282;
  float *v283;
  float v284;
  float *v285;
  float *v286;
  float v287;
  float v288;
  float *v289;
  float *v290;
  float *v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float *v296;
  float *v297;
  float *v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float *v303;
  float *v304;
  float *v305;
  float v306;
  float v307;
  float v308;
  uint64_t v309;
  vDSP_Length v310;
  uint64_t v311;
  uint64_t v312;
  float *v313;
  float *v314;
  float v315;
  float v316;
  float *v317;
  float *v318;
  float v319;
  float v320;
  float *v321;
  float *v322;
  float v323;
  float v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  const float *v331;
  uint64_t *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  const float *v344;
  uint64_t *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  const float *v357;
  uint64_t *v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  float v397;
  uint64_t v398;
  uint64_t v399;
  std::__shared_weak_count *v400;
  vDSP_Length v401;
  int __N;
  vDSP_Length __N_4;
  unsigned int v404;
  char v405[20];
  unsigned int v406;
  __int128 __C;
  __int128 v408;
  uint64_t v409;
  __int128 v410;
  uint64_t v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  __int128 v417;
  __int128 v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  __int128 v422;
  __int128 v423;
  uint64_t v424;
  __int128 v425;
  uint64_t v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  uint64_t v430;
  std::__shared_weak_count *v431;

  v7 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v430 = 0;
    v431 = 0;
  }
  else
  {
    v86 = *(std::__shared_weak_count **)(*v7 + 168);
    v430 = *(_QWORD *)(*v7 + 160);
    v431 = v86;
    if (v86)
    {
      p_shared_owners = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldxr(p_shared_owners);
      while (__stxr(v88 + 1, p_shared_owners));
    }
  }
  v8 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v8
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v429 = 0uLL;
LABEL_9:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v422, 1, 1, 1, 1);
    v10 = v422;
    v422 = 0uLL;
    v429 = v10;
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
    if (*((_QWORD *)&v422 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v429 + 1);
    v16 = v429;
    goto LABEL_20;
  }
  v16 = *(_QWORD *)(*v8 + 160);
  v9 = *(std::__shared_weak_count **)(*v8 + 168);
  *(_QWORD *)&v429 = v16;
  *((_QWORD *)&v429 + 1) = v9;
  if (v9)
  {
    v89 = (unint64_t *)&v9->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  if (!v16)
    goto LABEL_9;
LABEL_20:
  *(_QWORD *)&v428 = v16;
  *((_QWORD *)&v428 + 1) = v9;
  if (v9)
  {
    v17 = (unint64_t *)&v9->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *(_QWORD *)&v427 = v16;
    *((_QWORD *)&v427 + 1) = *((_QWORD *)&v429 + 1);
    if (*((_QWORD *)&v429 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v429 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v427 = v16;
  }
  Espresso::abstract_blob_container::shape((char *)&v422, **(_QWORD **)a4);
  v417 = v422;
  v418 = v423;
  v419 = v424;
  v420 = 0uLL;
  v421 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v420, (const void *)v425, *((uint64_t *)&v425 + 1), (uint64_t)(*((_QWORD *)&v425 + 1) - v425) >> 2);
  v412 = v422;
  v413 = v423;
  v414 = v424;
  v415 = 0uLL;
  v416 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v415, (const void *)v425, *((uint64_t *)&v425 + 1), (uint64_t)(*((_QWORD *)&v425 + 1) - v425) >> 2);
  v21 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x11uLL)
  {
    v22 = v21[2];
    v23 = 0uLL;
    if (v22)
    {
      v24 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v22 + 32))(v22, (__n128)0);
      v23 = 0uLL;
      if (!v24)
      {
        v23 = *(_OWORD *)(v21[2] + 160);
        v25 = *(_QWORD *)(v21[2] + 168);
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
      }
    }
    v428 = v23;
    if (v9)
    {
      v28 = (unint64_t *)&v9->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    Espresso::abstract_blob_container::shape((char *)&__C, *(_QWORD *)(*(_QWORD *)a4 + 16));
    v417 = __C;
    v418 = v408;
    v419 = v409;
    if ((_QWORD)v420)
    {
      *((_QWORD *)&v420 + 1) = v420;
      operator delete((void *)v420);
    }
    v420 = v410;
    v421 = v411;
    if (!(_QWORD)v428)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&__C, 1, 1, 1, 1);
      v72 = __C;
      __C = 0uLL;
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v428 + 1);
      v428 = v72;
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = (std::__shared_weak_count *)*((_QWORD *)&__C + 1);
      if (*((_QWORD *)&__C + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
  }
  v30 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x21uLL)
  {
    v31 = v30[4];
    if (v31 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    {
      v91 = v30[4];
      v32 = *(_QWORD *)(v91 + 160);
      v33 = *(_QWORD *)(v91 + 168);
      if (v33)
      {
        v92 = (unint64_t *)(v33 + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
    *(_QWORD *)&v427 = v32;
    *((_QWORD *)&v427 + 1) = v33;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    Espresso::abstract_blob_container::shape((char *)&__C, *(_QWORD *)(*(_QWORD *)a4 + 32));
    v412 = __C;
    v413 = v408;
    v414 = v409;
    if ((_QWORD)v415)
    {
      *((_QWORD *)&v415 + 1) = v415;
      operator delete((void *)v415);
    }
    v415 = v410;
    v416 = v411;
    if (!(_QWORD)v427)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&__C, 1, 1, 1, 1);
      v79 = __C;
      __C = 0uLL;
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
      v427 = v79;
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = (std::__shared_weak_count *)*((_QWORD *)&__C + 1);
      if (*((_QWORD *)&__C + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
    }
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v405, (const Espresso::layer_shape *)&v422, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__N_4, (const Espresso::layer_shape *)&v417, 0);
  v38 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v38 == 32 && v406 >= 4 && v404 >= 4 && !*(_BYTE *)(a1 + 304))
  {
    v39 = *(_DWORD *)(a1 + 280);
    if (v39 <= 0x22 && ((1 << v39) & 0x5E00003FFLL) != 0)
    {
      v40 = v429;
      v41 = *(int *)(v429 + 8);
      for (i = 12; i != 24; i += 4)
        v41 *= *(int *)(v429 + i);
      v43 = *(int *)(v428 + 8);
      for (j = 12; j != 24; j += 4)
        v43 *= *(int *)(v428 + j);
      if (v41 < v43)
      {
        v45 = *((_QWORD *)&v429 + 1);
        v429 = v428;
        *(_QWORD *)&v428 = v40;
        *((_QWORD *)&v428 + 1) = v45;
        __C = v422;
        v46 = v422;
        v408 = v423;
        v409 = v424;
        v47 = v424;
        v48 = v426;
        v424 = v419;
        v422 = v417;
        v423 = v418;
        v426 = v421;
        v419 = v47;
        v417 = v46;
        v418 = v408;
        v49 = v425;
        v425 = v420;
        v420 = v49;
        v421 = v48;
      }
    }
  }
  if (v430)
  {
    v50 = 0;
    __N = 0;
    v51 = *(_DWORD *)(v430 + 8);
    do
    {
      v51 *= *(_DWORD *)(v430 + 12 + v50);
      v50 += 4;
    }
    while (v50 != 12);
    __N = v51;
    v52 = v429;
    v53 = *(_DWORD *)(v429 + 8);
    v54 = *(_DWORD *)(v429 + 12);
    v55 = *(unsigned int *)(v429 + 16);
    v56 = *(unsigned int *)(v429 + 20);
    v57 = *(unsigned int *)(a1 + 280);
    if (v38 == 16)
    {
      switch((int)v57)
      {
        case 'd':
          LODWORD(v57) = 136;
          break;
        case 'e':
        case 'f':
          break;
        case 'g':
          LODWORD(v57) = 131;
          break;
        case 'h':
          LODWORD(v57) = 132;
          break;
        case 'i':
          LODWORD(v57) = 133;
          break;
        case 'j':
          LODWORD(v57) = 134;
          break;
        case 'k':
          LODWORD(v57) = 135;
          break;
        default:
          if ((_DWORD)v57)
            v94 = *(_DWORD *)(a1 + 280);
          else
            v94 = 2;
          if ((_DWORD)v57 == 1)
            LODWORD(v57) = 3;
          else
            LODWORD(v57) = v94;
          break;
      }
LABEL_234:
      v398 = a1;
      v399 = v430;
      v396 = v430;
      v400 = v431;
      if (v431)
      {
        v115 = (unint64_t *)&v431->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      v117 = __N;
      v118 = __N;
      LODWORD(v401) = __N;
      v119 = v54 * (uint64_t)v53;
      v120 = v119 * v55;
      switch((int)v57)
      {
        case 0:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 < 0x11uLL)
          {
            v325 = 0;
            v326 = *(int *)(v52 + 8);
            do
            {
              v326 *= *(int *)(v52 + 12 + v325);
              v325 += 4;
            }
            while (v325 != 12);
            memcpy(*(void **)(v396 + 24), *(const void **)(v52 + 24), 4 * v326);
          }
          else
          {
            vDSP_vadd(*(const float **)(v52 + 24), 1, *(const float **)(v428 + 24), 1, *(float **)(v396 + 24), 1, __N);
          }
          v327 = *(uint64_t **)a4;
          v328 = a1;
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x21uLL)
          {
            v329 = 2;
            do
            {
              v330 = v430;
              v331 = *(const float **)(v430 + 24);
              v332 = &v327[2 * v329];
              (*(void (**)(uint64_t))(*(_QWORD *)*v332 + 32))(*v332);
              v333 = *(_QWORD *)(*v332 + 160);
              v334 = *(std::__shared_weak_count **)(*v332 + 168);
              *(_QWORD *)&__C = v333;
              *((_QWORD *)&__C + 1) = v334;
              if (v334)
              {
                v335 = (unint64_t *)&v334->__shared_owners_;
                do
                  v336 = __ldxr(v335);
                while (__stxr(v336 + 1, v335));
              }
              vDSP_vadd(v331, 1, *(const float **)(v333 + 24), 1, *(float **)(v330 + 24), 1, __N);
              if (v334)
              {
                v337 = (unint64_t *)&v334->__shared_owners_;
                do
                  v338 = __ldaxr(v337);
                while (__stlxr(v338 - 1, v337));
                if (!v338)
                {
                  ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                  std::__shared_weak_count::__release_weak(v334);
                }
              }
              ++v329;
              v327 = *(uint64_t **)a4;
            }
            while (v329 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
            v328 = v398;
          }
          if (*(float *)(v328 + 288) != 1.0)
            vDSP_vsmul(*(const float **)(v399 + 24), 1, (const float *)(v328 + 288), *(float **)(v399 + 24), 1, (int)v401);
          goto LABEL_581;
        case 1:
          vDSP_vmul(*(const float **)(v52 + 24), 1, *(const float **)(v428 + 24), 1, *(float **)(v396 + 24), 1, __N);
          if (*(float *)(a1 + 288) != 1.0)
            vDSP_vsmul(*(const float **)(v396 + 24), 1, (const float *)(a1 + 288), *(float **)(v396 + 24), 1, __N);
          if (*(float *)(a1 + 292) == 0.0)
            break;
          v256 = (const float *)(a1 + 292);
          v255 = *(const float **)(v396 + 24);
          goto LABEL_583;
        case 2:
          v255 = *(const float **)(v52 + 24);
          v256 = (const float *)(a1 + 288);
          v257 = *(float **)(v396 + 24);
          goto LABEL_584;
        case 3:
          vDSP_vsmul(*(const float **)(v52 + 24), 1, (const float *)(a1 + 288), *(float **)(v396 + 24), 1, __N);
          break;
        case 4:
          v386 = a1;
          v389 = v52;
          if ((int)v56 >= 1)
          {
            v245 = 0;
            v246 = 0;
            v247 = (int)v119;
            v382 = 4 * v120;
            v248 = 4 * (int)v119;
            v394 = v56;
            do
            {
              v249 = v55;
              if ((int)v55 >= 1)
              {
                v250 = *(_QWORD *)(v389 + 24);
                v251 = *(_QWORD *)(v396 + 24);
                v252 = v245;
                v253 = v55;
                v254 = v428;
                do
                {
                  vDSP_vadd((const float *)(v250 + v252), 1, *(const float **)(v254 + 24), 1, (float *)(v251 + v252), 1, v247);
                  v252 += v248;
                  --v253;
                }
                while (v253);
              }
              ++v246;
              v245 += v382;
              v55 = v249;
            }
            while (v246 != v394);
          }
          goto LABEL_579;
        case 5:
          v386 = a1;
          v388 = v52;
          if ((int)v56 >= 1)
          {
            v235 = 0;
            v236 = 0;
            v237 = (int)v119;
            v238 = 4 * v55;
            v381 = 4 * v120;
            v384 = v55;
            v239 = 4 * (int)v119;
            v393 = v56;
            do
            {
              if ((int)v55 >= 1)
              {
                v240 = 0;
                v241 = *(_QWORD *)(v388 + 24);
                v242 = *(_QWORD *)(v396 + 24);
                v243 = v235;
                v244 = v428;
                do
                {
                  LODWORD(__C) = 0;
                  LODWORD(__C) = *(_DWORD *)(*(_QWORD *)(v244 + 24) + v240);
                  vDSP_vsadd((const float *)(v241 + v243), 1, (const float *)&__C, (float *)(v242 + v243), 1, v237);
                  v240 += 4;
                  v243 += v239;
                }
                while (v238 != v240);
              }
              ++v236;
              LODWORD(v55) = v384;
              v235 += v381;
            }
            while (v236 != v393);
          }
          goto LABEL_579;
        case 6:
          v386 = a1;
          if ((int)v56 >= 1)
          {
            v206 = 0;
            v207 = v120;
            v208 = v428;
            v209 = 4 * v120;
            do
            {
              vDSP_vadd((const float *)(*(_QWORD *)(v52 + 24) + v206), 1, *(const float **)(v208 + 24), 1, (float *)(*(_QWORD *)(v396 + 24) + v206), 1, v207);
              v206 += v209;
              --v56;
            }
            while (v56);
          }
          goto LABEL_579;
        case 7:
          v386 = a1;
          v387 = v52;
          if ((int)v56 >= 1)
          {
            v196 = 0;
            v197 = 0;
            v198 = (int)v119;
            v380 = 4 * v120;
            v199 = 4 * (int)v119;
            v391 = v56;
            do
            {
              v200 = v55;
              if ((int)v55 >= 1)
              {
                v201 = *(_QWORD *)(v387 + 24);
                v202 = *(_QWORD *)(v396 + 24);
                v203 = v196;
                v204 = v55;
                v205 = v428;
                do
                {
                  vDSP_vmul((const float *)(v201 + v203), 1, *(const float **)(v205 + 24), 1, (float *)(v202 + v203), 1, v198);
                  v203 += v199;
                  --v204;
                }
                while (v204);
              }
              ++v197;
              v196 += v380;
              v55 = v200;
            }
            while (v197 != v391);
          }
          goto LABEL_579;
        case 8:
          v386 = a1;
          v390 = v52;
          if ((int)v56 >= 1)
          {
            v258 = 0;
            v259 = 0;
            v260 = 4 * v55;
            v383 = 4 * v120;
            v385 = v55;
            v395 = v56;
            do
            {
              if ((int)v55 >= 1)
              {
                v261 = 0;
                v262 = *(_QWORD *)(v390 + 24);
                v263 = *(_QWORD *)(v396 + 24);
                v264 = v258;
                v265 = v428;
                do
                {
                  LODWORD(__C) = 0;
                  LODWORD(__C) = *(_DWORD *)(*(_QWORD *)(v265 + 24) + v261);
                  vDSP_vsmul((const float *)(v262 + v264), 1, (const float *)&__C, (float *)(v263 + v264), 1, v119);
                  v261 += 4;
                  v264 += 4 * v119;
                }
                while (v260 != v261);
              }
              ++v259;
              LODWORD(v55) = v385;
              v258 += v383;
            }
            while (v259 != v395);
          }
          goto LABEL_579;
        case 9:
          v386 = a1;
          if ((int)v56 >= 1)
          {
            v185 = 0;
            v186 = v120;
            v187 = v428;
            v188 = 4 * v120;
            do
            {
              vDSP_vmul((const float *)(*(_QWORD *)(v52 + 24) + v185), 1, *(const float **)(v187 + 24), 1, (float *)(*(_QWORD *)(v396 + 24) + v185), 1, v186);
              v185 += v188;
              --v56;
            }
            while (v56);
          }
          goto LABEL_579;
        case 10:
          if (__N >= 1)
          {
            v182 = *(float **)(v52 + 24);
            v183 = *(float **)(v396 + 24);
            do
            {
              v184 = *v182++;
              *v183++ = 1.0 / (float)(v184 + *(float *)(a1 + 296));
              --v117;
            }
            while (v117);
          }
          break;
        case 11:
          vvsqrtf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 12:
          vDSP_vsadd(*(const float **)(v52 + 24), 1, (const float *)(a1 + 296), *(float **)(v396 + 24), 1, __N);
          vvrsqrtf(*(float **)(v396 + 24), *(const float **)(v396 + 24), &__N);
          break;
        case 13:
          if (__N >= 1)
          {
            v282 = *(float **)(v52 + 24);
            v283 = *(float **)(v396 + 24);
            do
            {
              v284 = *v282++;
              *v283++ = powf(v284, *(float *)(a1 + 288));
              --v117;
            }
            while (v117);
          }
          break;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 108:
        case 109:
        case 120:
          break;
        case 21:
          v386 = a1;
          if ((int)v56 >= 1)
          {
            v210 = v52;
            v211 = 0;
            v212 = v56;
            v213 = 0;
            v214 = v120;
            v215 = v428;
            v392 = 4 * v212;
            v216 = 4 * v120;
            do
            {
              v217 = (const float *)(*(_QWORD *)(v210 + 24) + v211);
              v218 = *(_QWORD *)(v215 + 24);
              v219 = *(_QWORD *)(v396 + 24);
              LODWORD(__C) = 0;
              v397 = 0.0;
              vDSP_dotpr(v217, 1, v217, 1, (float *)&__C, v214);
              v220 = (const float *)(v218 + v211);
              vDSP_dotpr(v220, 1, v220, 1, &v397, v214);
              v221 = *(float *)&__C;
              v222 = v397;
              v223 = *(float *)(v386 + 296);
              vDSP_dotpr(v217, 1, v220, 1, (float *)(v219 + v213), v214);
              v224 = sqrtf(v221 * v222);
              if (v224 < v223)
                v224 = v223;
              *(float *)(v219 + v213) = *(float *)(v219 + v213) / v224;
              v213 += 4;
              v211 += v216;
            }
            while (v392 != v213);
          }
          goto LABEL_579;
        case 22:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 < 0x11uLL)
          {
            v352 = 0;
            v353 = *(int *)(v52 + 8);
            do
            {
              v353 *= *(int *)(v52 + 12 + v352);
              v352 += 4;
            }
            while (v352 != 12);
            memcpy(*(void **)(v396 + 24), *(const void **)(v52 + 24), 4 * v353);
          }
          else
          {
            vDSP_vmin(*(const float **)(v52 + 24), 1, *(const float **)(v428 + 24), 1, *(float **)(v396 + 24), 1, __N);
          }
          v386 = a1;
          v354 = *(uint64_t **)a4;
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x21uLL)
          {
            v355 = 2;
            do
            {
              v356 = v430;
              v357 = *(const float **)(v430 + 24);
              v358 = &v354[2 * v355];
              (*(void (**)(uint64_t))(*(_QWORD *)*v358 + 32))(*v358);
              v359 = *(_QWORD *)(*v358 + 160);
              v360 = *(std::__shared_weak_count **)(*v358 + 168);
              *(_QWORD *)&__C = v359;
              *((_QWORD *)&__C + 1) = v360;
              if (v360)
              {
                v361 = (unint64_t *)&v360->__shared_owners_;
                do
                  v362 = __ldxr(v361);
                while (__stxr(v362 + 1, v361));
              }
              vDSP_vmin(v357, 1, *(const float **)(v359 + 24), 1, *(float **)(v356 + 24), 1, __N);
              if (v360)
              {
                v363 = (unint64_t *)&v360->__shared_owners_;
                do
                  v364 = __ldaxr(v363);
                while (__stlxr(v364 - 1, v363));
                if (!v364)
                {
                  ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                  std::__shared_weak_count::__release_weak(v360);
                }
              }
              ++v355;
              v354 = *(uint64_t **)a4;
            }
            while (v355 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
          }
          goto LABEL_579;
        case 23:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 < 0x11uLL)
          {
            v339 = 0;
            v340 = *(int *)(v52 + 8);
            do
            {
              v340 *= *(int *)(v52 + 12 + v339);
              v339 += 4;
            }
            while (v339 != 12);
            memcpy(*(void **)(v396 + 24), *(const void **)(v52 + 24), 4 * v340);
          }
          else
          {
            vDSP_vmax(*(const float **)(v52 + 24), 1, *(const float **)(v428 + 24), 1, *(float **)(v396 + 24), 1, __N);
          }
          v386 = a1;
          v341 = *(uint64_t **)a4;
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x21uLL)
          {
            v342 = 2;
            do
            {
              v343 = v430;
              v344 = *(const float **)(v430 + 24);
              v345 = &v341[2 * v342];
              (*(void (**)(uint64_t))(*(_QWORD *)*v345 + 32))(*v345);
              v346 = *(_QWORD *)(*v345 + 160);
              v347 = *(std::__shared_weak_count **)(*v345 + 168);
              *(_QWORD *)&__C = v346;
              *((_QWORD *)&__C + 1) = v347;
              if (v347)
              {
                v348 = (unint64_t *)&v347->__shared_owners_;
                do
                  v349 = __ldxr(v348);
                while (__stxr(v349 + 1, v348));
              }
              vDSP_vmax(v344, 1, *(const float **)(v346 + 24), 1, *(float **)(v343 + 24), 1, __N);
              if (v347)
              {
                v350 = (unint64_t *)&v347->__shared_owners_;
                do
                  v351 = __ldaxr(v350);
                while (__stlxr(v351 - 1, v350));
                if (!v351)
                {
                  ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                  std::__shared_weak_count::__release_weak(v347);
                }
              }
              ++v342;
              v341 = *(uint64_t **)a4;
            }
            while (v342 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
          }
          goto LABEL_579;
        case 24:
          vDSP_vabs(*(const float **)(v52 + 24), 1, *(float **)(v396 + 24), 1, __N);
          break;
        case 25:
          vDSP_vthr(*(const float **)(v52 + 24), 1, (const float *)(a1 + 288), *(float **)(v396 + 24), 1, __N);
          break;
        case 26:
          vDSP_vsadd(*(const float **)(v52 + 24), 1, (const float *)(a1 + 296), *(float **)(v396 + 24), 1, __N);
          vvlogf(*(float **)(v396 + 24), *(const float **)(v396 + 24), &__N);
          break;
        case 27:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvexpf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 28:
          v386 = a1;
          if ((int)v56 >= 1)
          {
            v170 = 0;
            v171 = 0;
            v172 = v120;
            v173 = v428;
            v174 = 4 * v120;
            do
            {
              vDSP_dotpr((const float *)(*(_QWORD *)(v52 + 24) + v170), 1, (const float *)(*(_QWORD *)(v173 + 24) + v170), 1, (float *)(*(_QWORD *)(v396 + 24) + v171), v172);
              v171 += 4;
              v170 += v174;
            }
            while (4 * v56 != v171);
          }
          goto LABEL_579;
        case 29:
          v386 = a1;
          if ((int)v56 >= 1)
          {
            v161 = 0;
            v162 = 0;
            v163 = v120;
            v164 = v428;
            v165 = 4 * v120;
            do
            {
              vDSP_vsadd((const float *)(*(_QWORD *)(v52 + 24) + v161), 1, (const float *)(*(_QWORD *)(v164 + 24) + v162), (float *)(*(_QWORD *)(v396 + 24) + v161), 1, v163);
              v162 += 4;
              v161 += v165;
            }
            while (4 * v56 != v162);
          }
          goto LABEL_579;
        case 30:
          v386 = a1;
          if ((int)v56 >= 1)
          {
            v225 = 0;
            v226 = 0;
            v227 = v120;
            v228 = v428;
            v229 = 4 * v120;
            do
            {
              vDSP_vsmul((const float *)(*(_QWORD *)(v52 + 24) + v225), 1, (const float *)(*(_QWORD *)(v228 + 24) + v226), (float *)(*(_QWORD *)(v396 + 24) + v225), 1, v227);
              v226 += 4;
              v225 += v229;
            }
            while (4 * v56 != v226);
          }
          goto LABEL_579;
        case 31:
          v386 = a1;
          if ((int)v56 >= 1)
          {
            v147 = 0;
            v148 = v120;
            v149 = v428;
            v150 = 4 * v120;
            do
            {
              vDSP_vsadd((const float *)(*(_QWORD *)(v52 + 24) + v147), 1, *(const float **)(v149 + 24), (float *)(*(_QWORD *)(v396 + 24) + v147), 1, v148);
              v147 += v150;
              --v56;
            }
            while (v56);
          }
          goto LABEL_579;
        case 32:
          v386 = a1;
          if ((int)v56 >= 1)
          {
            v309 = 0;
            v310 = v120;
            v311 = v428;
            v312 = 4 * v120;
            do
            {
              vDSP_vsmul((const float *)(*(_QWORD *)(v52 + 24) + v309), 1, *(const float **)(v311 + 24), (float *)(*(_QWORD *)(v396 + 24) + v309), 1, v310);
              v309 += v312;
              --v56;
            }
            while (v56);
          }
LABEL_579:
          v328 = v398;
          a1 = v386;
          if (*(float *)(v398 + 288) != 1.0)
            vDSP_vsmul(*(const float **)(v399 + 24), 1, (const float *)(v398 + 288), *(float **)(v399 + 24), 1, (int)v401);
LABEL_581:
          if (*(float *)(v328 + 292) == 0.0)
            break;
          v256 = (const float *)(v328 + 292);
          v255 = *(const float **)(v399 + 24);
          v118 = (int)v401;
LABEL_583:
          v257 = (float *)v255;
LABEL_584:
          vDSP_vsadd(v255, 1, v256, v257, 1, v118);
          break;
        case 33:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          vDSP_vsub(*(const float **)(v428 + 24), 1, *(const float **)(v52 + 24), 1, *(float **)(v396 + 24), 1, __N);
          break;
        case 34:
          if ((int)v423 >= 1)
          {
            v166 = 0;
            v167 = 0;
            v168 = SHIDWORD(v422) * (uint64_t)v120;
            v169 = v428;
            do
            {
              vDSP_vadd((const float *)(*(_QWORD *)(v52 + 24) + v166), 1, *(const float **)(v169 + 24), 1, (float *)(*(_QWORD *)(v396 + 24) + v166), 1, v168);
              ++v167;
              v166 += 4 * v168;
            }
            while (v167 < (int)v423);
          }
          Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()(&v398);
          break;
        case 35:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvexp2f(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 36:
          vvfmodf(*(float **)(v396 + 24), *(const float **)(v52 + 24), *(const float **)(v428 + 24), &__N);
          break;
        case 37:
          vvnintf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 38:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          Espresso::compute_sign_fp32(*(float32x4_t **)(v396 + 24), *(float **)(v52 + 24), (float *)&__N, v37);
          break;
        case 100:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v175 = *(float **)(v52 + 24);
            v176 = *(float **)(v428 + 24);
            v177 = *(float **)(v396 + 24);
            do
            {
              v178 = *v175++;
              v179 = v178;
              v180 = *v176++;
              if (v179 == v180)
                v181 = 1.0;
              else
                v181 = 0.0;
              *v177++ = v181;
              --v118;
            }
            while (v118);
          }
          break;
        case 101:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 48)
            goto LABEL_625;
          if (__N)
          {
            v273 = 0;
            do
            {
              if (*(float *)(*(_QWORD *)(v429 + 24) + 4 * v273) == 0.0)
              {
                v274 = *(uint64_t **)a4;
                (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a4 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a4 + 32));
                v275 = v274[4];
                v276 = *(_QWORD *)(v275 + 160);
                v277 = *(std::__shared_weak_count **)(v275 + 168);
                if (v277)
                {
                  v278 = (unint64_t *)&v277->__shared_owners_;
                  do
                    v279 = __ldxr(v278);
                  while (__stxr(v279 + 1, v278));
                  *(_DWORD *)(*(_QWORD *)(v430 + 24) + 4 * v273) = *(_DWORD *)(*(_QWORD *)(v276 + 24) + 4 * v273);
                  v280 = (unint64_t *)&v277->__shared_owners_;
                  do
                    v281 = __ldaxr(v280);
                  while (__stlxr(v281 - 1, v280));
                  if (!v281)
                  {
                    ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                    std::__shared_weak_count::__release_weak(v277);
                  }
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)(v430 + 24) + 4 * v273) = *(_DWORD *)(*(_QWORD *)(v276 + 24) + 4 * v273);
                }
                LODWORD(v117) = __N;
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)(v430 + 24) + 4 * v273) = *(_DWORD *)(*(_QWORD *)(v428 + 24) + 4 * v273);
              }
              ++v273;
            }
            while (v273 < (int)v117);
          }
          break;
        case 102:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v303 = *(float **)(v52 + 24);
            v304 = *(float **)(v428 + 24);
            v305 = *(float **)(v396 + 24);
            do
            {
              v306 = *v303++;
              v307 = v306;
              v308 = *v304++;
              *v305++ = v307 / v308;
              --v118;
            }
            while (v118);
          }
          break;
        case 103:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v296 = *(float **)(v52 + 24);
            v297 = *(float **)(v428 + 24);
            v298 = *(float **)(v396 + 24);
            do
            {
              v299 = *v296++;
              v300 = v299;
              v301 = *v297++;
              if (v300 >= v301)
                v302 = 0.0;
              else
                v302 = 1.0;
              *v298++ = v302;
              --v118;
            }
            while (v118);
          }
          break;
        case 104:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v135 = *(float **)(v52 + 24);
            v136 = *(float **)(v428 + 24);
            v137 = *(float **)(v396 + 24);
            do
            {
              v138 = *v135++;
              v139 = v138;
              v140 = *v136++;
              if (v139 > v140)
                v141 = 0.0;
              else
                v141 = 1.0;
              *v137++ = v141;
              --v118;
            }
            while (v118);
          }
          break;
        case 105:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v266 = *(float **)(v52 + 24);
            v267 = *(float **)(v428 + 24);
            v268 = *(float **)(v396 + 24);
            do
            {
              v269 = *v266++;
              v270 = v269;
              v271 = *v267++;
              if (v270 <= v271)
                v272 = 0.0;
              else
                v272 = 1.0;
              *v268++ = v272;
              --v118;
            }
            while (v118);
          }
          break;
        case 106:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v189 = *(float **)(v52 + 24);
            v190 = *(float **)(v428 + 24);
            v191 = *(float **)(v396 + 24);
            do
            {
              v192 = *v189++;
              v193 = v192;
              v194 = *v190++;
              if (v193 < v194)
                v195 = 0.0;
              else
                v195 = 1.0;
              *v191++ = v195;
              --v118;
            }
            while (v118);
          }
          break;
        case 107:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v289 = *(float **)(v52 + 24);
            v290 = *(float **)(v428 + 24);
            v291 = *(float **)(v396 + 24);
            do
            {
              v292 = *v289++;
              v293 = v292;
              v294 = *v290++;
              if (v293 == v294)
                v295 = 0.0;
              else
                v295 = 1.0;
              *v291++ = v295;
              --v118;
            }
            while (v118);
          }
          break;
        case 110:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v230 = 0;
            v231 = *(_QWORD *)(v52 + 24);
            v232 = v428;
            v233 = *(_QWORD *)(v396 + 24);
            do
            {
              v234 = *(float *)(v231 + 4 * v230) != 0.0 && *(float *)(*(_QWORD *)(v232 + 24) + 4 * v230) != 0.0;
              *(float *)(v233 + 4 * v230++) = (float)v234;
            }
            while (v118 != v230);
          }
          break;
        case 111:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v142 = 0;
            v143 = *(_QWORD *)(v52 + 24);
            v144 = v428;
            v145 = *(_QWORD *)(v396 + 24);
            do
            {
              v146 = *(float *)(v143 + 4 * v142) != 0.0 || *(float *)(*(_QWORD *)(v144 + 24) + 4 * v142) != 0.0;
              *(float *)(v145 + 4 * v142++) = (float)v146;
            }
            while (v118 != v142);
          }
          break;
        case 112:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          if (__N)
          {
            v317 = *(float **)(v52 + 24);
            v318 = *(float **)(v396 + 24);
            do
            {
              v319 = *v317++;
              if (v319 == 0.0)
                v320 = 1.0;
              else
                v320 = 0.0;
              *v318++ = v320;
              --v118;
            }
            while (v118);
          }
          break;
        case 113:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v151 = *(float **)(v52 + 24);
            v152 = *(float **)(v428 + 24);
            v153 = *(float **)(v396 + 24);
            do
            {
              v154 = *v151++;
              v155 = v154 != 0.0;
              v156 = *v152++;
              *v153++ = (float)(v155 ^ (v156 != 0.0));
              --v118;
            }
            while (v118);
          }
          break;
        case 114:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvcosf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 115:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvsinf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 116:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          vDSP_distancesq(*(const float **)(v428 + 24), 1, *(const float **)(v52 + 24), 1, *(float **)(v396 + 24), __N);
          break;
        case 117:
          vvfloorf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 118:
          vvceilf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 119:
          vDSP_vclip(*(const float **)(v52 + 24), 1, (const float *)(a1 + 288), (const float *)(a1 + 292), *(float **)(v396 + 24), 1, __N);
          break;
        case 121:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvtanf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 122:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvcoshf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 123:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvsinhf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 124:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvtanhf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 125:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvacosf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 126:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvasinf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 127:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvatanf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 128:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvacoshf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 129:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvasinhf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 130:
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 16)
            goto LABEL_625;
          vvatanhf(*(float **)(v396 + 24), *(const float **)(v52 + 24), &__N);
          break;
        case 131:
          if (__N)
          {
            v131 = *(float **)(v52 + 24);
            v132 = *(float **)(v396 + 24);
            do
            {
              v133 = *v131++;
              if (v133 >= *(float *)(a1 + 288))
                v134 = 0.0;
              else
                v134 = 1.0;
              *v132++ = v134;
              --v118;
            }
            while (v118);
          }
          break;
        case 132:
          if (__N)
          {
            v313 = *(float **)(v52 + 24);
            v314 = *(float **)(v396 + 24);
            do
            {
              v315 = *v313++;
              if (v315 > *(float *)(a1 + 288))
                v316 = 0.0;
              else
                v316 = 1.0;
              *v314++ = v316;
              --v118;
            }
            while (v118);
          }
          break;
        case 133:
          if (__N)
          {
            v127 = *(float **)(v52 + 24);
            v128 = *(float **)(v396 + 24);
            do
            {
              v129 = *v127++;
              if (v129 <= *(float *)(a1 + 288))
                v130 = 0.0;
              else
                v130 = 1.0;
              *v128++ = v130;
              --v118;
            }
            while (v118);
          }
          break;
        case 134:
          if (__N)
          {
            v285 = *(float **)(v52 + 24);
            v286 = *(float **)(v396 + 24);
            do
            {
              v287 = *v285++;
              if (v287 < *(float *)(a1 + 288))
                v288 = 0.0;
              else
                v288 = 1.0;
              *v286++ = v288;
              --v118;
            }
            while (v118);
          }
          break;
        case 135:
          if (__N)
          {
            v157 = *(float **)(v52 + 24);
            v158 = *(float **)(v396 + 24);
            do
            {
              v159 = *v157++;
              if (vabds_f32(v159, *(float *)(a1 + 288)) <= *(float *)(a1 + 296))
                v160 = 0.0;
              else
                v160 = 1.0;
              *v158++ = v160;
              --v118;
            }
            while (v118);
          }
          break;
        case 136:
          if (__N)
          {
            v321 = *(float **)(v52 + 24);
            v322 = *(float **)(v396 + 24);
            do
            {
              v323 = *v321++;
              if (vabds_f32(v323, *(float *)(a1 + 288)) > *(float *)(a1 + 296))
                v324 = 0.0;
              else
                v324 = 1.0;
              *v322++ = v324;
              --v118;
            }
            while (v118);
          }
          break;
        default:
          if ((_DWORD)v57 != 1021)
            break;
          if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
            goto LABEL_625;
          if (__N)
          {
            v121 = *(float **)(v52 + 24);
            v122 = *(float **)(v428 + 24);
            v123 = *(float **)(v396 + 24);
            do
            {
              v124 = *v121++;
              v125 = v124;
              v126 = *v122++;
              *v123++ = floorf(v125 / v126);
              --v118;
            }
            while (v118);
          }
          break;
      }
LABEL_585:
      if (*(_DWORD *)(a1 + 284) == 1)
      {
        LODWORD(__C) = 0;
        vDSP_vthr(*(const float **)(v430 + 24), 1, (const float *)&__C, *(float **)(v430 + 24), 1, __N);
      }
      v365 = v400;
      if (v400)
      {
        v366 = (unint64_t *)&v400->__shared_owners_;
        do
          v367 = __ldaxr(v366);
        while (__stlxr(v367 - 1, v366));
        if (!v367)
        {
          ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
          std::__shared_weak_count::__release_weak(v365);
        }
      }
      goto LABEL_592;
    }
    v58 = *(_DWORD *)(a1 + 280);
    if (!(_QWORD)v428)
    {
      v59 = *(_DWORD *)(v429 + 12);
      v60 = *(_DWORD *)(v429 + 8);
      v61 = *(unsigned int *)(v429 + 16);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&__C, 1, 1, 1, 1);
      v62 = __C;
      __C = 0uLL;
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v428 + 1);
      v428 = v62;
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&__C + 1);
      if (*((_QWORD *)&__C + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v58 = *(_DWORD *)(a1 + 280);
      v55 = v61;
      v53 = v60;
      v54 = v59;
    }
    v69 = 0;
    v70 = 1;
    v71 = v58 - 100 > 0xD || ((1 << (v58 - 100)) & 0x2CFD) == 0;
    if (v71 && (v58 > 0x24 || ((1 << v58) & 0x1000C00000) == 0) && v58 != 1021)
    {
      if (v58 > 1)
      {
        v69 = 0;
        v70 = 0;
      }
      else
      {
        v69 = 1;
        if (v406 < 4)
        {
          v70 = 1;
        }
        else
        {
          v70 = 1;
          if (v404 >= 4)
            v70 = *(unsigned __int8 *)(a1 + 304);
        }
      }
    }
    if (v58 == 33 || v58 == 13)
    {
      v95 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4 == 32;
      if (!v69)
        goto LABEL_148;
    }
    else
    {
      v95 = 0;
      if (!v69)
        goto LABEL_148;
    }
    v69 = *(unsigned __int8 *)(a1 + 304);
    if (*(_BYTE *)(a1 + 304))
      v69 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4 == 32;
LABEL_148:
    v96 = v95 | v69;
    if (v58 == 101)
    {
      v97 = *(unsigned __int8 *)(a1 + 304);
      if (*(_BYTE *)(a1 + 304))
        v97 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4 == 48;
    }
    else
    {
      v97 = 0;
    }
    v98 = v96 | v97;
    v52 = v429;
    v99 = *(_DWORD *)(v429 + 8);
    v100 = v428;
    v101 = *(_DWORD *)(v428 + 8);
    if (v99 == v101
      && *(_DWORD *)(v429 + 12) == *(_DWORD *)(v428 + 12)
      && *(_DWORD *)(v429 + 16) == *(_DWORD *)(v428 + 16))
    {
      v102 = *(_DWORD *)(v429 + 20) == *(_DWORD *)(v428 + 20) ? v98 : 1;
      if (v102 != 1)
        goto LABEL_234;
    }
    if (!*(_DWORD *)(a1 + 300) && v70 | v98)
    {
      v103 = v422;
      v104 = v417;
      if (((_DWORD)v417 == 1 || (_DWORD)v422 == 1 || (_DWORD)v422 == (_DWORD)v417)
        && (DWORD1(v417) == 1 || DWORD1(v422) == 1 || DWORD1(v422) == DWORD1(v417))
        && (DWORD2(v417) == 1 || DWORD2(v422) == 1 || DWORD2(v422) == DWORD2(v417))
        && (HIDWORD(v417) == 1 || HIDWORD(v422) == 1 || HIDWORD(v422) == HIDWORD(v417))
        && ((_DWORD)v418 == 1 || (_DWORD)v423 == 1 || (_DWORD)v423 == (_DWORD)v418))
      {
        v105 = v430;
        v398 = a1;
        v399 = v430;
        v400 = v431;
        if (v431)
        {
          v106 = (unint64_t *)&v431->__shared_owners_;
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
        LODWORD(v401) = __N;
        if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 < 0x20uLL)
LABEL_625:
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported number of inputs");
        Espresso::abstract_blob_container::shape((char *)&__C, **(_QWORD **)a3);
        if ((int)v57 <= 35)
        {
          if ((int)v57 > 21)
          {
            switch((_DWORD)v57)
            {
              case 0x16:
                Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::min_op>(*(_DWORD **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
                break;
              case 0x17:
                Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::max_op>(*(_DWORD **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
                break;
              case 0x21:
                Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::subtract_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
                break;
              default:
                goto LABEL_626;
            }
          }
          else if ((_DWORD)v57)
          {
            if ((_DWORD)v57 != 1)
            {
              if ((_DWORD)v57 == 13)
              {
                Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::pow_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
                goto LABEL_261;
              }
              goto LABEL_626;
            }
            Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::mul_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
          }
          else
          {
            Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::add_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
          }
        }
        else
        {
          switch((int)v57)
          {
            case 'd':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::equal_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'e':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::if_op>(*(_DWORD **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417, v427, (uint64_t)&v412);
              break;
            case 'f':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::div_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'g':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::less_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'h':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::less_or_equal_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'i':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::greater_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'j':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::greater_or_equal_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'k':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::not_equal_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'l':
            case 'm':
            case 'p':
              goto LABEL_626;
            case 'n':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::and_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'o':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::or_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            case 'q':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::xor_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
            default:
              if ((_DWORD)v57 != 36)
              {
                if ((_DWORD)v57 == 1021)
                {
                  Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::floordiv_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
                  break;
                }
LABEL_626:
                Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("operation %d does not support broadcasting", v57);
              }
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::mod_op>(*(float **)(v105 + 24), (int *)&__C, v52, (uint64_t)&v422, v100, (uint64_t)&v417);
              break;
          }
        }
LABEL_261:
        if ((_QWORD)v410)
        {
          *((_QWORD *)&v410 + 1) = v410;
          operator delete((void *)v410);
        }
        goto LABEL_585;
      }
      v114 = v418;
LABEL_624:
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>("elementwise_kernel_cpu: Cannot broadcast [%d, %d, %d, %d, %d] and [%d, %d, %d, %d, %d]", v103, DWORD1(v422), HIDWORD(v422), DWORD2(v422), v423, v104, DWORD1(v417), HIDWORD(v417), DWORD2(v417), v114);
    }
    if (v101 == 1 && *(_DWORD *)(v428 + 12) == 1)
    {
      v109 = *(_DWORD *)(v428 + 16);
      v108 = *(_DWORD *)(v428 + 20);
      if (v109 == 1)
      {
        if (v108 == 1)
        {
          if (v58 == 1)
          {
            LODWORD(v57) = 32;
          }
          else if (!v58)
          {
            LODWORD(v57) = 31;
          }
          goto LABEL_234;
        }
        if (v108 == *(_DWORD *)(v429 + 20))
        {
          if (v58 == 1)
          {
            LODWORD(v57) = 30;
          }
          else if (!v58)
          {
            LODWORD(v57) = 29;
          }
          goto LABEL_234;
        }
      }
      else if (v108 == 1 && *(_DWORD *)(v429 + 16) == v109)
      {
        if ((_DWORD)v57 == 1)
        {
          LODWORD(v57) = 8;
        }
        else if (!(_DWORD)v57)
        {
          LODWORD(v57) = 5;
        }
        goto LABEL_234;
      }
    }
    v110 = *(_DWORD *)(v428 + 16);
    v111 = *(_DWORD *)(v428 + 20);
    if (v110 == 1)
    {
      if (v111 == 1 && v99 == v101)
      {
        v112 = *(_DWORD *)(v429 + 12);
        v113 = *(_DWORD *)(v428 + 12);
        if (v112 == v113)
        {
          if ((_DWORD)v57 == 1)
          {
            LODWORD(v57) = 7;
          }
          else if (!(_DWORD)v57)
          {
            LODWORD(v57) = 4;
          }
          goto LABEL_234;
        }
        goto LABEL_221;
      }
    }
    else if (v99 == v101 && v111 == 1)
    {
      v112 = *(_DWORD *)(v429 + 12);
      v113 = *(_DWORD *)(v428 + 12);
LABEL_221:
      if (v112 == v113 && *(_DWORD *)(v429 + 16) == v110)
      {
        if ((_DWORD)v57 == 1)
        {
          LODWORD(v57) = 9;
        }
        else if (!(_DWORD)v57)
        {
          LODWORD(v57) = 6;
        }
        goto LABEL_234;
      }
    }
    v103 = v422;
    v114 = v418;
    v104 = v417;
    if ((_DWORD)v418 == 1
      && (_DWORD)v422 == (_DWORD)v417
      && *(_QWORD *)((char *)&v422 + 4) == *(_QWORD *)((char *)&v417 + 4)
      && HIDWORD(v422) == HIDWORD(v417))
    {
      if (v58)
      {
        if (v58 == 1)
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("ELEMENTWISE_OPERATION_INTERNAL_MUL_XYKN not implemented");
      }
      else
      {
        LODWORD(v57) = 34;
      }
      goto LABEL_234;
    }
    goto LABEL_624;
  }
LABEL_592:
  if ((_QWORD)v415)
  {
    *((_QWORD *)&v415 + 1) = v415;
    operator delete((void *)v415);
  }
  if ((_QWORD)v420)
  {
    *((_QWORD *)&v420 + 1) = v420;
    operator delete((void *)v420);
  }
  if ((_QWORD)v425)
  {
    *((_QWORD *)&v425 + 1) = v425;
    operator delete((void *)v425);
  }
  v368 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
  if (*((_QWORD *)&v427 + 1))
  {
    v369 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
  v371 = (std::__shared_weak_count *)*((_QWORD *)&v428 + 1);
  if (*((_QWORD *)&v428 + 1))
  {
    v372 = (unint64_t *)(*((_QWORD *)&v428 + 1) + 8);
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
  v374 = (std::__shared_weak_count *)*((_QWORD *)&v429 + 1);
  if (*((_QWORD *)&v429 + 1))
  {
    v375 = (unint64_t *)(*((_QWORD *)&v429 + 1) + 8);
    do
      v376 = __ldaxr(v375);
    while (__stlxr(v376 - 1, v375));
    if (!v376)
    {
      ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
      std::__shared_weak_count::__release_weak(v374);
    }
  }
  v377 = v431;
  if (v431)
  {
    v378 = (unint64_t *)&v431->__shared_owners_;
    do
      v379 = __ldaxr(v378);
    while (__stlxr(v379 - 1, v378));
    if (!v379)
    {
      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
      std::__shared_weak_count::__release_weak(v377);
    }
  }
}

void sub_190E30690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,void *a59)
{
  uint64_t v59;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a42)
  {
    a43 = a42;
    operator delete(a42);
  }
  if (a50)
  {
    a51 = a50;
    operator delete(a50);
  }
  if (a58)
  {
    a59 = a58;
    operator delete(a58);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 144);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *a2;
  if (*a2 && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result), !(_DWORD)result))
  {
    v5 = *(_QWORD *)(*a2 + 168);
    *a1 = *(_QWORD *)(*a2 + 160);
    a1[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t Espresso::blob_cpu::compute_path(Espresso::blob_cpu *this)
{
  return *((unsigned int *)this + 60);
}

uint64_t Espresso::layer_nd_shape::layer_nd_shape(uint64_t this, const Espresso::layer_shape *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int8x16_t v6;
  int32x2_t v7;
  int32x4_t v8;
  int8x16_t v9;
  uint64_t v10;
  std::runtime_error *exception;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  std::runtime_error *v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;

  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  v3 = *((_DWORD *)a2 + 4);
  v4 = *((_DWORD *)a2 + 5);
  if (v3 == 1)
    v5 = 4;
  else
    v5 = 5;
  if (v4 == -1)
    v4 = v5;
  *(_DWORD *)(this + 20) = v4;
  if (a3)
  {
    switch(v4)
    {
      case 0:
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
        goto LABEL_14;
      case 1:
        *(_DWORD *)this = *((_DWORD *)a2 + 2);
        *(_QWORD *)(this + 12) = 0;
        *(_QWORD *)(this + 4) = 0;
        return this;
      case 2:
        *(int32x2_t *)this = vrev64_s32(*(int32x2_t *)((char *)a2 + 8));
        *(_QWORD *)(this + 8) = 0;
        goto LABEL_14;
      case 3:
        v7 = *(int32x2_t *)((char *)a2 + 8);
        *(_DWORD *)this = v3;
        *(int32x2_t *)(this + 4) = vrev64_s32(v7);
        *(_QWORD *)(this + 12) = 0;
        return this;
      case 4:
        v6 = (int8x16_t)vrev64q_s32(*(int32x4_t *)a2);
        *(int8x16_t *)this = vextq_s8(v6, v6, 8uLL);
LABEL_14:
        *(_DWORD *)(this + 16) = 0;
        break;
      case 5:
        v8 = *(int32x4_t *)a2;
        *(_DWORD *)this = v3;
        v9 = (int8x16_t)vrev64q_s32(v8);
        *(int8x16_t *)(this + 4) = vextq_s8(v9, v9, 8uLL);
        break;
      default:
        v10 = this;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v18, *(_DWORD *)(v10 + 20));
        v12 = std::string::insert(&v18, 0, "Invalid rank: ");
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v19);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        return this;
      case 1:
        *(_DWORD *)this = *(_DWORD *)a2;
        break;
      case 2:
        *(_DWORD *)this = *((_DWORD *)a2 + 1);
        *(_DWORD *)(this + 4) = *(_DWORD *)a2;
        break;
      case 3:
        *(_DWORD *)this = *((_DWORD *)a2 + 2);
        *(_DWORD *)(this + 4) = *((_DWORD *)a2 + 1);
        *(_DWORD *)(this + 8) = *(_DWORD *)a2;
        break;
      case 4:
        *(_DWORD *)this = *((_DWORD *)a2 + 3);
        *(_DWORD *)(this + 4) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 1);
        *(_DWORD *)(this + 12) = *(_DWORD *)a2;
        break;
      case 5:
        *(_DWORD *)this = v3;
        *(_DWORD *)(this + 4) = *((_DWORD *)a2 + 3);
        *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 1);
        *(_DWORD *)(this + 16) = *(_DWORD *)a2;
        break;
      default:
        v14 = this;
        v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v18, *(_DWORD *)(v14 + 20));
        v16 = std::string::insert(&v18, 0, "Invalid rank: ");
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v15, &v19);
        __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_190E30AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_top_shape(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  const void *v6;
  char v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char *v11;
  _BYTE v12[32];
  uint64_t v13;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v17[32];
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  __int128 v24[2];
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;

  *((_QWORD *)&v29 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v17 = *(_OWORD *)a3;
  *(_OWORD *)&v17[16] = v5;
  v6 = *(const void **)(a3 + 40);
  v18 = *(_QWORD *)(a3 + 32);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v19, v6, *(_QWORD *)(a3 + 48), (uint64_t)(*(_QWORD *)(a3 + 48) - (_QWORD)v6) >> 2);
  *(_OWORD *)v12 = *(_OWORD *)v17;
  *(_OWORD *)&v12[16] = *(_OWORD *)&v17[16];
  v13 = v18;
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 2);
  v7 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, *(int32x4_t *)&v17[4])));
  v8 = *(_DWORD *)&v17[16] != 1;
  if (*(_DWORD *)&v17[20] != -1)
    v8 = *(_DWORD *)&v17[20] == 5;
  if (*(_DWORD *)&v17[16])
    v9 = 0;
  else
    v9 = v8;
  if ((v7 & 1) == 0 && *(int *)v17 >= 1 && !v9)
  {
    v10 = *(int *)&v17[20] >= 4 || *(_DWORD *)&v17[20] == -1;
    if (!v10 || *(_BYTE *)(a2 + 40))
    {
      *(_DWORD *)v12 = *(_DWORD *)a2;
    }
    else
    {
      *(_QWORD *)v12 = 0x100000001;
      *(_DWORD *)&v12[8] = *(_DWORD *)a2;
      *(_QWORD *)&v12[12] = vextq_s8(*(int8x16_t *)&v17[4], *(int8x16_t *)&v17[4], 8uLL).u64[0];
    }
  }
  v24[0] = *(_OWORD *)v12;
  v24[1] = *(_OWORD *)&v12[16];
  v25 = v13;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v26, __p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v22 = a1;
  v23 = 0;
  v11 = (char *)operator new(0x40uLL);
  *a1 = v11;
  a1[1] = v11;
  a1[2] = v11 + 64;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), v24, &v29, (uint64_t)v11);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_190E30D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  v29 = *(void **)(v27 - 72);
  if (v29)
  {
    *(_QWORD *)(v27 - 64) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

BOOL Espresso::BNNSEngine::inner_product_kernel::__bloat_quantized_weights_to_fp32(Espresso::BNNSEngine::inner_product_kernel *this, double a2, double a3, float a4)
{
  uint64_t *v5;
  _BOOL8 v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;

  v5 = (uint64_t *)*((_QWORD *)this + 55);
  if (!v5
    || !*v5
    || !v5[4] && !v5[6] && !v5[8] && !v5[10]
    || *((_QWORD *)this + 86)
    || *(_DWORD *)(*((_QWORD *)this + 1) + 76))
  {
    return 0;
  }
  v8 = *((_QWORD *)this + 70);
  v6 = v8 == 0;
  if (!v8)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(&v18, *((_DWORD *)this + 77), *((_DWORD *)this + 76), 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 560, &v18);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v8 = *((_QWORD *)this + 70);
    v5 = (uint64_t *)*((_QWORD *)this + 55);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 71);
  v17[0] = v8;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  Espresso::quantized_weights_helper::dequantize_to_float32_2d(v5, (uint64_t)v17, a2, a3, a4);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v6;
}

void sub_190E30EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::mul_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  unsigned int v49;
  float *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  float *v53;
  float *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _DWORD v58[2];
  _DWORD v59[14];
  uint64_t v60;

  v6 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v49 = a2[2];
  v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  result = (uint64_t)v59;
  v53 = 0;
  v54 = 0;
  do
  {
    v11 = (int *)v51[v6];
    v12 = *v11;
    v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v44 = a2[4];
  if ((_DWORD)v44)
  {
    v17 = 0;
    v18 = v7 * v8 * v49;
    v19 = v45;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v49 <= 1)
      v23 = 1;
    else
      v23 = v49;
    v24 = v23;
    if (v45 <= 1)
      v19 = 1;
    v25 = 4 * v58[1];
    v26 = 4 * v58[0];
    v48 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (int)v59[v27 + 6];
        v57[v27] = *(_QWORD *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v46 = v17;
      if (v45)
      {
        v30 = 0;
        v50 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            v33 = 0;
            v34 = v50;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v53;
                    v41 = v54;
                    result = (uint64_t)v38;
                    v43 = v20;
                    do
                    {
                      *(float *)result = *v42 * *v41;
                      result += 4;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::add_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  unsigned int v49;
  float *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  float *v53;
  float *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _DWORD v58[2];
  _DWORD v59[14];
  uint64_t v60;

  v6 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v49 = a2[2];
  v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  result = (uint64_t)v59;
  v53 = 0;
  v54 = 0;
  do
  {
    v11 = (int *)v51[v6];
    v12 = *v11;
    v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v44 = a2[4];
  if ((_DWORD)v44)
  {
    v17 = 0;
    v18 = v7 * v8 * v49;
    v19 = v45;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v49 <= 1)
      v23 = 1;
    else
      v23 = v49;
    v24 = v23;
    if (v45 <= 1)
      v19 = 1;
    v25 = 4 * v58[1];
    v26 = 4 * v58[0];
    v48 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (int)v59[v27 + 6];
        v57[v27] = *(_QWORD *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v46 = v17;
      if (v45)
      {
        v30 = 0;
        v50 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            v33 = 0;
            v34 = v50;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v53;
                    v41 = v54;
                    result = (uint64_t)v38;
                    v43 = v20;
                    do
                    {
                      *(float *)result = *v42 + *v41;
                      result += 4;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::subtract_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  unsigned int v49;
  float *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  float *v53;
  float *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _DWORD v58[2];
  _DWORD v59[14];
  uint64_t v60;

  v6 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v49 = a2[2];
  v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  result = (uint64_t)v59;
  v53 = 0;
  v54 = 0;
  do
  {
    v11 = (int *)v51[v6];
    v12 = *v11;
    v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v44 = a2[4];
  if ((_DWORD)v44)
  {
    v17 = 0;
    v18 = v7 * v8 * v49;
    v19 = v45;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v49 <= 1)
      v23 = 1;
    else
      v23 = v49;
    v24 = v23;
    if (v45 <= 1)
      v19 = 1;
    v25 = 4 * v58[1];
    v26 = 4 * v58[0];
    v48 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (int)v59[v27 + 6];
        v57[v27] = *(_QWORD *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v46 = v17;
      if (v45)
      {
        v30 = 0;
        v50 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            v33 = 0;
            v34 = v50;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v53;
                    v41 = v54;
                    result = (uint64_t)v38;
                    v43 = v20;
                    do
                    {
                      *(float *)result = *v42 - *v41;
                      result += 4;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::min_op>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  _DWORD *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[2];
  _DWORD v60[14];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (uint64_t)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v49 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (int)v60[v27 + 6];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = (uint64_t)v38;
                    v43 = v20;
                    do
                    {
                      v44 = *v42;
                      if (*v42 > *v41)
                        v44 = *v41;
                      *(float *)result = v44;
                      result += 4;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::max_op>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  _DWORD *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  float *v54;
  float *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD v59[2];
  _DWORD v60[14];
  uint64_t v61;

  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v50 = a2[2];
  v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  result = (uint64_t)v60;
  v54 = 0;
  v55 = 0;
  do
  {
    v11 = (int *)v52[v6];
    v12 = *v11;
    v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v45 = a2[4];
  if ((_DWORD)v45)
  {
    v17 = 0;
    v18 = v7 * v8 * v50;
    v19 = v46;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v50 <= 1)
      v23 = 1;
    else
      v23 = v50;
    v24 = v23;
    if (v46 <= 1)
      v19 = 1;
    v25 = 4 * v59[1];
    v26 = 4 * v59[0];
    v49 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (int)v60[v27 + 6];
        v58[v27] = *(_QWORD *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v47 = v17;
      if (v46)
      {
        v30 = 0;
        v51 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            v33 = 0;
            v34 = v51;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v54;
                    v41 = v55;
                    result = (uint64_t)v38;
                    v43 = v20;
                    do
                    {
                      v44 = *v41;
                      if (*v41 <= *v42)
                        v44 = *v42;
                      *(float *)result = v44;
                      result += 4;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

void Espresso::inner_product_kernel_cpu::__launch_f16_is_lookup(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int16 *v19;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  std::__shared_weak_count *v51;
  _OWORD v52[8];
  int v53;

  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 8);
  for (i = 12; i != 24; i += 4)
    v8 *= *(_DWORD *)(v7 + i);
  if (a5)
  {
    v10 = 0;
    v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 308);
    do
    {
      if (*(_DWORD *)(a1 + 428))
        v13 = 1.0;
      else
        v13 = 0.0;
      v14 = *(float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 4 * v11) + (float)(v13 * 0.5);
      v15 = (int)v14 & ~((int)v14 >> 31);
      if (v15 > v12)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("inner_product_kernel_cpu_is_lookup: Layer bottom values indexing out of bounds");
      v16 = *(_QWORD *)(*a3 + 24);
      v17 = *(_QWORD *)(a1 + 688);
      if (v17)
      {
        if (*(_DWORD *)(a1 + 304))
        {
          v18 = 0;
          v19 = (__int16 *)(*(_QWORD *)(v17 + 16) + 2 * v15);
          do
          {
            _H3 = *v19;
            __asm { FCVT            S3, H3 }
            if (*(_DWORD *)(a1 + 312))
              _S3 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 16) + 4 * v18) + _S3;
            *(float *)(v16 + v10 + 4 * v18) = _S3;
            v12 = *(unsigned int *)(a1 + 308);
            v19 += v12;
            ++v18;
          }
          while (v18 < *(unsigned int *)(a1 + 304));
        }
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 528);
        if (!v26)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel_cpu: FP16 transposed weights not set");
        v27 = *(unsigned int *)(a1 + 304);
        if ((_DWORD)v27)
        {
          v28 = 0;
          v29 = *(_QWORD *)(v26 + 16) + 2 * v27 * v15;
          v30 = *(_DWORD *)(a1 + 312);
          v31 = v16 + v10;
          do
          {
            _H3 = *(_WORD *)(v29 + 2 * v28);
            __asm { FCVT            S3, H3 }
            *(float *)(v31 + 4 * v28) = _S3;
            if (v30)
              *(float *)(v31 + 4 * v28) = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 16) + 4 * v28) + _S3;
            ++v28;
          }
          while (v27 != v28);
        }
      }
      ++v11;
      v10 += 4 * a6;
    }
    while (v11 != a5);
    v7 = *a3;
  }
  v34 = *(_OWORD *)(a1 + 416);
  v52[6] = *(_OWORD *)(a1 + 400);
  v52[7] = v34;
  v53 = *(_DWORD *)(a1 + 432);
  v35 = *(_OWORD *)(a1 + 352);
  v52[2] = *(_OWORD *)(a1 + 336);
  v52[3] = v35;
  v36 = *(_OWORD *)(a1 + 384);
  v52[4] = *(_OWORD *)(a1 + 368);
  v52[5] = v36;
  v37 = *(_OWORD *)(a1 + 320);
  v52[0] = *(_OWORD *)(a1 + 304);
  v52[1] = v37;
  v38 = (std::__shared_weak_count *)a3[1];
  v50 = v7;
  v51 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  v41 = *(std::__shared_weak_count **)(a1 + 552);
  v49[0] = *(_QWORD *)(a1 + 544);
  v49[1] = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)v52, &v50, v8, (uint64_t)v49, a6, a5);
  if (v41)
  {
    v44 = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v46 = v51;
  if (v51)
  {
    v47 = (unint64_t *)&v51->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_190E3235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::fused_nonlinearity(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  BOOL v21;
  float *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  uint64_t i;
  float __B;

  LODWORD(v9) = a3;
  v12 = *(_DWORD *)(a1 + 12);
  if (v12 == 1)
  {
    __B = 0.0;
    vDSP_vthr(*(const float **)(*a2 + 24), 1, &__B, *(float **)(*a2 + 24), 1, a3);
  }
  else if (v12 == 2)
  {
    v13 = 0;
    v14 = *a2;
    v15 = *(int *)(*a2 + 8);
    v16 = *a2 + 12;
    while (1)
    {
      v17 = 0;
      v18 = v15;
      do
      {
        v18 *= *(int *)(v16 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      if (v18 <= v13)
        break;
      v19 = *(_QWORD *)(v14 + 24);
      v20 = *(float *)(v19 + 4 * v13);
      if (v20 < 0.0)
        *(float *)(v19 + 4 * v13) = v20 * 0.25;
      ++v13;
    }
  }
  if (*(_DWORD *)(a1 + 16))
    v21 = (int)v9 < 1;
  else
    v21 = 1;
  if (!v21)
  {
    v22 = *(float **)(*a2 + 24);
    v9 = v9;
    do
    {
      v23 = *(float *)(a1 + 20);
      *v22 = v23 * tanhf(*(float *)(a1 + 24) * *v22);
      ++v22;
      --v9;
    }
    while (v9);
  }
  if (*(_DWORD *)(a1 + 28) && a6)
  {
    v24 = 0;
    v25 = *(_QWORD *)(*(_QWORD *)a4 + 16) + 4 * a5;
    v26 = *(float **)(*a2 + 24);
    do
    {
      v27 = v26;
      v28 = (float *)v25;
      for (i = a5; i; --i)
      {
        if (*v27 < 0.0)
          *v27 = *v27 * *v28;
        ++v28;
        ++v27;
      }
      ++v24;
      v26 += a5;
    }
    while (v24 != a6);
  }
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::div_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  unsigned int v49;
  float *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  float *v53;
  float *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _DWORD v58[2];
  _DWORD v59[14];
  uint64_t v60;

  v6 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  v7 = a2[1];
  v8 = *a2;
  v49 = a2[2];
  v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  result = (uint64_t)v59;
  v53 = 0;
  v54 = 0;
  do
  {
    v11 = (int *)v51[v6];
    v12 = *v11;
    v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    v14 = v11[2];
    v15 = v11[3];
    v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    v6 = 1;
    v9 = 0;
  }
  while ((v16 & 1) != 0);
  v44 = a2[4];
  if ((_DWORD)v44)
  {
    v17 = 0;
    v18 = v7 * v8 * v49;
    v19 = v45;
    if (v8 <= 1)
      v20 = 1;
    else
      v20 = v8;
    if (v7 <= 1)
      v21 = 1;
    else
      v21 = v7;
    v22 = v21;
    if (v49 <= 1)
      v23 = 1;
    else
      v23 = v49;
    v24 = v23;
    if (v45 <= 1)
      v19 = 1;
    v25 = 4 * v58[1];
    v26 = 4 * v58[0];
    v48 = v19;
    do
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        result = (int)v59[v27 + 6];
        v57[v27] = *(_QWORD *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        v27 = 1;
        v28 = 0;
      }
      while ((v29 & 1) != 0);
      v46 = v17;
      if (v45)
      {
        v30 = 0;
        v50 = a1;
        do
        {
          v31 = 0;
          v32 = 1;
          do
          {
            result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            v31 = 1;
            v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            v33 = 0;
            v34 = v50;
            do
            {
              v35 = 0;
              v36 = 1;
              do
              {
                result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                v35 = 1;
                v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                v37 = 0;
                v38 = v34;
                do
                {
                  v39 = 0;
                  v40 = 1;
                  do
                  {
                    result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    v39 = 1;
                    v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if ((_DWORD)v8)
                  {
                    v42 = v53;
                    v41 = v54;
                    result = (uint64_t)v38;
                    v43 = v20;
                    do
                    {
                      *(float *)result = *v42 / *v41;
                      result += 4;
                      v41 = (float *)((char *)v41 + v25);
                      v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

void E5RT::SharedResourceFactory::GetBnnsGraphIr(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  id v12;
  const void *v13;
  unint64_t v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 __dst;
  unint64_t v30;
  void *__p[2];
  unint64_t v32;

  v7 = a2;
  objc_msgSend(v7, "objectForKeyedSubscript:", E5Common::kBnnsGraphPrecompiledStrKey[0]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if (v9)
  {
    E5Common::AutoResourcePtr::MakeFromFile(a1, (uint64_t *)__p);
    v10 = __p[0];
    goto LABEL_18;
  }
  HIBYTE(v32) = 0;
  LOBYTE(__p[0]) = 0;
  objc_msgSend(v7, "objectForKeyedSubscript:", E5Common::kBnnsGraphFunctionNameStrKey[0]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", E5Common::kBnnsGraphFunctionNameStrKey[0]);
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v13 = (const void *)objc_msgSend(v12, "UTF8String");
    v14 = objc_msgSend(v12, "lengthOfBytesUsingEncoding:", 4);
    v15 = v14;
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v14 >= 0x17)
    {
      v25 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v25 = v14 | 7;
      v26 = v25 + 1;
      p_dst = (__int128 *)operator new(v25 + 1);
      *((_QWORD *)&__dst + 1) = v15;
      v30 = v26 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v30) = v14;
      p_dst = &__dst;
      if (!v14)
      {
        LOBYTE(__dst) = 0;
        if ((SHIBYTE(v32) & 0x80000000) == 0)
        {
LABEL_8:
          *(_OWORD *)__p = __dst;
          v32 = v30;

          goto LABEL_9;
        }
LABEL_26:
        operator delete(__p[0]);
        goto LABEL_8;
      }
    }
    memmove(p_dst, v13, v15);
    *((_BYTE *)p_dst + v15) = 0;
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_9:
  v17 = a3[1];
  v27 = *a3;
  v28 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  E5Common::CreateBnnsGraphProgramFromMILFile(&v27, a1, v7, &__dst);
  v20 = v28;
  v10 = (void *)__dst;
  *(_QWORD *)&__dst = 0;
  if (!v28)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (v22)
  {
LABEL_16:
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v32) < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  v23 = (char *)operator new(0x48uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_1E2DB5FC8;
  *((_QWORD *)v23 + 3) = off_1E2D5AF78;
  v24 = (std::string *)(v23 + 32);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    *((_QWORD *)v23 + 6) = *(_QWORD *)(a1 + 16);
  }
  *((_QWORD *)v23 + 7) = v10;
  *((_DWORD *)v23 + 16) = 2;
  *a4 = v23 + 24;
  a4[1] = v23;

}

void sub_190E32B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

uint64_t E5RT::ComputeProgram::LoadProgram@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  void (**v11)(_QWORD);
  unsigned int *v12;
  char *v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  E5RT *PlatformId;
  E5Common::E5PlatformManager *CurrentPlatform;
  uint64_t v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t *v27;
  uint64_t *i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t result;
  void *v64;
  void *v65;
  void *exception;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  char v69[8];
  _BYTE v70[16];
  void *v71;
  char *v72;
  unint64_t v73;
  void *__p[2];
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[6];
  uint64_t v81;
  _BYTE buf[24];
  unint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  E5Common::AutoResourcePtr::MakeFromFile(a1, &v81);
  (*(void (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81);
  kdebug_trace();
  HIBYTE(v75) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_signpost_id_generate(v8);

  if (SHIBYTE(v75) < 0)
    operator delete(__p[0]);
  HIBYTE(v75) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v10 = objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v75) < 0)
  {
    operator delete(__p[0]);
    if (v9 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else if (v9 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_9;
  }
  if (os_signpost_enabled(v10))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v9, "ComputeProgamLoad", (const char *)&unk_191C083FD, (uint8_t *)__p, 2u);
  }
LABEL_9:

  v80[0] = MEMORY[0x1E0C809B0];
  v80[1] = 3221225472;
  v80[2] = sub_19103C5B8;
  v80[3] = &__block_descriptor_48_e5_v8__0l;
  v80[4] = v9;
  v80[5] = a1;
  v11 = (void (**)(_QWORD))MEMORY[0x19401D648](v80);
  v12 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
  v14 = v12;
  __p[0] = v12;
  __p[1] = v13;
  v75 = 0xF424000000040;
  v76 = 257;
  v78 = 0;
  v79 = 0;
  v77 = 0;
  if ((unint64_t)v13 >= 0x7FFFFFFF)
    __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
  if ((unint64_t)v13 < 0xC
    || (v15 = *v12, (int)v15 < 1)
    || (unint64_t)(v13 - 1) < v15
    || (E5RT_FB::Program::Verify((int *)((char *)v12 + v15), (uint64_t)__p) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "LoadProgram");
    std::string::basic_string[abi:ne180100]<0>(&v71, "Unable to verify compute program buffer.");
    E5RT::Status::Status(&v67, 7, &v71);
    E5RT::E5RTError::E5RTError(exception, buf, &v67);
  }
  v16 = *v14;
  v17 = operator new();
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  E5RT_FB::Program::UnPackTo((int *)((char *)v14 + v16), (uint64_t *)v17);
  E5RT::ComputeProgramHeaderPriv::ComputeProgramHeaderPriv(v70, v17, a1);
  PlatformId = (E5RT *)E5RT::ComputeProgramHeaderPriv::GetPlatformId((E5RT::ComputeProgramHeaderPriv *)v70);
  CurrentPlatform = E5RT::GetCurrentPlatform(PlatformId);
  v20 = (uint64_t)CurrentPlatform;
  if (a3)
    v20 = a2;
  v21 = E5Common::E5PlatformManager::Instance(CurrentPlatform);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, E5RT *))(*(_QWORD *)v21 + 128))(v21, v20, PlatformId);
  if (v22 == 1)
  {
    buf[23] = 4;
    strcpy(buf, "e5rt");
    E5RT::GetE5RTLog((uint64_t)buf);
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = v25;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        goto LABEL_26;
    }
    else if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
LABEL_26:

      goto LABEL_27;
    }
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = PlatformId;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl(&dword_190DAF000, v26, OS_LOG_TYPE_INFO, "Loading E5 compiled for platform = 0x%llx on platform = 0x%llx.", buf, 0x16u);
    goto LABEL_26;
  }
  if (v22 == 2)
  {
    buf[23] = 4;
    strcpy(buf, "e5rt");
    E5RT::GetE5RTLog((uint64_t)buf);
    v23 = objc_claimAutoreleasedReturnValue();
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_19103DB34((uint64_t)PlatformId, v20, v23);

    v24 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "LoadProgram");
    std::string::basic_string[abi:ne180100]<0>(&v71, "Invalid compute program platform.");
    E5RT::Status::Status(&v67, 7, &v71);
    E5RT::E5RTError::E5RTError(v24, buf, &v67);
  }
LABEL_27:
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v27 = *(uint64_t **)(v17 + 8);
  for (i = *(uint64_t **)(v17 + 16); v27 != i; ++v27)
  {
    v29 = *v27;
    if (*(_BYTE *)(*v27 + 52) && !*(_QWORD *)(v29 + 40))
    {
      v65 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(buf, "LoadProgram");
      std::string::basic_string[abi:ne180100]<0>(&v67, "Invalid compute program (section with file data has size = 0).");
      E5RT::Status::Status(v69, 7, &v67);
      E5RT::E5RTError::E5RTError(v65, buf, v69);
    }
    v30 = *(unsigned int *)(v29 + 48);
    v31 = *(_QWORD *)(v17 + 40);
    if (v30 >= (*(_QWORD *)(v17 + 48) - v31) >> 3)
    {
      v64 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(buf, "LoadProgram");
      std::string::basic_string[abi:ne180100]<0>(&v67, "Invalid sect_data_index in compute program.");
      E5RT::Status::Status(v69, 7, &v67);
      E5RT::E5RTError::E5RTError(v64, buf, v69);
    }
    v32 = **(_QWORD **)(v31 + 8 * v30);
    v33 = (std::__shared_weak_count *)operator new(0x30uLL);
    v33->__shared_owners_ = 0;
    v33->__shared_weak_owners_ = 0;
    v33[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2DD05B8;
    v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DD0568;
    v34 = *v27;
    *v27 = 0;
    v33[1].__shared_owners_ = v34;
    v33[1].__shared_weak_owners_ = v32;
    v67 = &v33[1].__vftable;
    v68 = v33;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v35 = v72;
    if ((unint64_t)v72 >= v73)
    {
      v37 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)&v71, (uint64_t)&v67);
      v38 = v68;
      v72 = v37;
      if (!v68)
        goto LABEL_40;
      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
        v36 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
LABEL_41:
          v41 = (unint64_t *)&v36->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      else
      {
LABEL_40:
        v36 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
          goto LABEL_41;
      }
    }
    else
    {
      *(_QWORD *)v72 = v33 + 1;
      *((_QWORD *)v35 + 1) = v33;
      v72 = v35 + 16;
      v36 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
        goto LABEL_41;
    }
  }
  v43 = *(uint64_t ***)(v17 + 32);
  *(_QWORD *)buf = &off_1E2DD0470;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  v83 = 0;
  v45 = *v43;
  v44 = v43[1];
  if (*v43 != v44)
  {
    do
    {
      v46 = (std::__shared_weak_count *)operator new(0x30uLL);
      v46->__shared_owners_ = 0;
      v46->__shared_weak_owners_ = 0;
      v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DD04B0;
      v46[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DD0500;
      v47 = *v45;
      v46[1].__shared_owners_ = *v45;
      if (v47)
      {
        v48 = (_QWORD *)operator new();
        v49 = *v45;
        *v48 = &off_1E2DC35F0;
        v48[1] = 0;
        v48[2] = 0;
        v48[3] = v49;
        v46[1].__shared_weak_owners_ = (uint64_t)v48;
        *v45 = 0;
        v67 = &v46[1].__vftable;
        v68 = v46;
        v50 = *(_QWORD **)&buf[16];
        if (*(_QWORD *)&buf[16] >= v83)
          goto LABEL_55;
      }
      else
      {
        v46[1].__shared_weak_owners_ = 0;
        *v45 = 0;
        v67 = &v46[1].__vftable;
        v68 = v46;
        v50 = *(_QWORD **)&buf[16];
        if (*(_QWORD *)&buf[16] >= v83)
        {
LABEL_55:
          v51 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)&buf[8], (uint64_t)&v67);
          v52 = v68;
          *(_QWORD *)&buf[16] = v51;
          if (v68)
          {
            v53 = (unint64_t *)&v68->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          goto LABEL_50;
        }
      }
      *v50 = v46 + 1;
      v50[1] = v46;
      *(_QWORD *)&buf[16] = v50 + 2;
LABEL_50:
      ++v45;
    }
    while (v45 != v44);
  }
  v55 = operator new();
  v67 = (_QWORD *)v17;
  v56 = v81;
  v81 = 0;
  *(_QWORD *)v55 = &off_1E2DD0618;
  E5RT::ComputeProgramHeaderPriv::ComputeProgramHeaderPriv((_QWORD *)(v55 + 8), (uint64_t)v70);
  std::vector<std::shared_ptr<E5RT::ComputeProgramSection const>>::vector((_QWORD *)(v55 + 24), (uint64_t)&v71);
  *(_QWORD *)(v55 + 48) = &off_1E2DD0470;
  *(_OWORD *)(v55 + 56) = *(_OWORD *)&buf[8];
  *(_QWORD *)(v55 + 72) = v83;
  *(_QWORD *)(v55 + 80) = v17;
  *(_QWORD *)(v55 + 88) = v56;
  *a4 = v55;
  v57 = (char *)v71;
  if (v71)
  {
    v58 = v72;
    v59 = v71;
    if (v72 != v71)
    {
      do
      {
        v60 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v58 -= 16;
      }
      while (v58 != v57);
      v59 = v71;
    }
    v72 = v57;
    operator delete(v59);
  }
  E5RT::ComputeProgramHeaderPriv::~ComputeProgramHeaderPriv((E5RT::ComputeProgramHeaderPriv *)v70);
  v11[2](v11);

  kdebug_trace();
  result = v81;
  v81 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190E33520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  int v37;
  E5RT_FB::ProgramT *v38;
  void *v39;
  void (**v40)(_QWORD);
  uint64_t v41;
  uint64_t v43;

  E5RT::Status::~Status((E5RT::Status *)&a14);
  if (a31 < 0)
    operator delete(__p);
  if (*(char *)(v41 - 121) < 0)
  {
    operator delete(*(void **)(v41 - 144));
    if ((v37 & 1) == 0)
    {
LABEL_8:
      E5RT::ComputeProgramHeaderPriv::~ComputeProgramHeaderPriv((E5RT::ComputeProgramHeaderPriv *)&a22);
      E5RT_FB::ProgramT::~ProgramT(v38);
      MEMORY[0x19401CD90]();
      v40[2](v40);

      kdebug_trace();
      v43 = *(_QWORD *)(v41 - 152);
      *(_QWORD *)(v41 - 152) = 0;
      if (v43)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

void E5RT::ComputeProgramHeaderPriv::~ComputeProgramHeaderPriv(E5RT::ComputeProgramHeaderPriv *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x19401CD90](v2, 0x1000C40B2B1FC38);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x19401CD90](v2, 0x1000C40B2B1FC38);
  JUMPOUT(0x19401CD90);
}

uint64_t E5Common::E5PlatformManager::Instance(E5Common::E5PlatformManager *this)
{
  if (qword_1EE2148C8 != -1)
    dispatch_once(&qword_1EE2148C8, &unk_1E2DCEDE8);
  return qword_1EE2148C0;
}

E5RT *E5RT::GetCurrentPlatform(E5RT *this)
{
  E5RT *result;
  char v2;
  char v3;

  if (qword_1EE2148A0 == -1)
  {
    if (!byte_1EE214888)
    {
LABEL_3:
      if (E5RT::GetChipID(void)::onceToken != -1)
        dispatch_once(&E5RT::GetChipID(void)::onceToken, &unk_1E2DCDBD0);
      result = E5RT::GetPlatformFromChipID((E5RT *)E5RT::GetChipID(void)::chipID);
      if (!v2)
        return 0;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1EE2148A0, &unk_1E2DCDB70);
    if (!byte_1EE214888)
      goto LABEL_3;
  }
  result = (E5RT *)E5RT::GetPlatformFromANEInformation(this);
  if (!v3)
    return 0;
  return result;
}

E5RT *E5RT::GetPlatformFromChipID(E5RT *this)
{
  uint64_t v1;

  if ((uint64_t)this <= 32773)
  {
    if ((uint64_t)this >= 24576)
    {
      v1 = 0;
      switch((unint64_t)this)
      {
        case 0x6000uLL:
        case 0x6001uLL:
        case 0x6002uLL:
        case 0x6020uLL:
        case 0x6021uLL:
        case 0x6022uLL:
        case 0x6030uLL:
        case 0x6031uLL:
        case 0x6032uLL:
        case 0x6034uLL:
        case 0x6040uLL:
        case 0x6041uLL:
          return this;
        case 0x6003uLL:
        case 0x6004uLL:
        case 0x6005uLL:
        case 0x6006uLL:
        case 0x6007uLL:
        case 0x6008uLL:
        case 0x6009uLL:
        case 0x600AuLL:
        case 0x600BuLL:
        case 0x600CuLL:
        case 0x600DuLL:
        case 0x600EuLL:
        case 0x600FuLL:
        case 0x6010uLL:
        case 0x6011uLL:
        case 0x6012uLL:
        case 0x6013uLL:
        case 0x6014uLL:
        case 0x6015uLL:
        case 0x6016uLL:
        case 0x6017uLL:
        case 0x6018uLL:
        case 0x6019uLL:
        case 0x601AuLL:
        case 0x601BuLL:
        case 0x601CuLL:
        case 0x601DuLL:
        case 0x601EuLL:
        case 0x601FuLL:
        case 0x6023uLL:
        case 0x6024uLL:
        case 0x6025uLL:
        case 0x6026uLL:
        case 0x6027uLL:
        case 0x6028uLL:
        case 0x6029uLL:
        case 0x602AuLL:
        case 0x602BuLL:
        case 0x602CuLL:
        case 0x602DuLL:
        case 0x602EuLL:
        case 0x602FuLL:
        case 0x6033uLL:
        case 0x6035uLL:
        case 0x6036uLL:
        case 0x6037uLL:
        case 0x6038uLL:
        case 0x6039uLL:
        case 0x603AuLL:
        case 0x603BuLL:
        case 0x603CuLL:
        case 0x603DuLL:
        case 0x603EuLL:
        case 0x603FuLL:
          return (E5RT *)v1;
        default:
          v1 = 0;
          if (this == (E5RT *)28672)
            return this;
          break;
      }
      return (E5RT *)v1;
    }
    if (!this)
      return this;
    v1 = 0;
    if (this == (E5RT *)256)
      return this;
    return (E5RT *)v1;
  }
  if ((uint64_t)this > 33024)
  {
    if (((unint64_t)this - 33025 > 0x3F || ((1 << (this - 1)) & 0x8002800280028005) == 0)
      && this != (E5RT *)33552)
    {
      v1 = 0;
      if (this != (E5RT *)33537)
        return (E5RT *)v1;
    }
    return this;
  }
  if ((unint64_t)this - 32774 <= 0x2A)
  {
    v1 = 0;
    if (((1 << (this - 6)) & 0x40204009C01) != 0)
      return this;
    return (E5RT *)v1;
  }
  return 0;
}

uint64_t E5Common::AutoMmapPtr::GetSpan(E5Common::AutoMmapPtr *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t E5Common::AutoMmapPtr::GetLength(E5Common::AutoMmapPtr *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t E5Common::AutoResourcePtr::MakeFromFile@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = E5Common::AutoMmapPtr::AutoMmapPtr(v4, a1, 1, 1, 0);
  *a2 = v4;
  return result;
}

void sub_190E33C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10F1C40C2655342);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<E5RT::ComputeProgramSection const>>::vector(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_190E33D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void E5RT_FB::Program::UnPackTo(int *a1, uint64_t *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  unsigned int *v85;
  uint64_t v86;
  int *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unint64_t v92;
  char *v93;
  char *v94;
  unint64_t v95;
  BOOL v96;
  size_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  size_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned int *v108;
  size_t v109;
  _BYTE *v110;
  unsigned int *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  __int128 v125;
  char *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char v131;
  uint64_t v132;
  void *v133;
  char *v134;
  char v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  char *v139;
  unsigned int *v140;
  uint64_t v141;
  _OWORD *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  char v152;
  uint64_t v153;
  size_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _DWORD *v164;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u || (v5 = v4[2]) == 0)
  {
    if (!*a2)
      goto LABEL_20;
    *a2 = 0;
    goto LABEL_19;
  }
  v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
  v7 = *a2;
  if (!*a2)
  {
    v30 = operator new();
    *(_QWORD *)v30 = 0;
    v31 = (unsigned __int16 *)((char *)v6 - *v6);
    v32 = *v31;
    if (v32 < 5)
      goto LABEL_56;
    v33 = v31[2];
    if (v31[2])
      LOWORD(v33) = *(_WORD *)((char *)v6 + v33);
    *(_WORD *)v30 = v33;
    if (v32 < 7)
    {
LABEL_56:
      *(_WORD *)(v30 + 2) = 0;
    }
    else
    {
      v34 = v31[3];
      if (v31[3])
        LOWORD(v34) = *(_WORD *)((char *)v6 + v34);
      *(_WORD *)(v30 + 2) = v34;
      if (v32 >= 9)
      {
        v35 = v31[4];
        if (v31[4])
          LOWORD(v35) = *(_WORD *)((char *)v6 + v35);
        *(_WORD *)(v30 + 4) = v35;
        if (v32 >= 0xB)
        {
          v36 = v31[5];
          if (v36)
          {
            *(_QWORD *)(v30 + 8) = *(_QWORD *)((char *)v6 + v36);
            v37 = *a2;
            *a2 = v30;
            if (!v37)
              goto LABEL_20;
            goto LABEL_19;
          }
LABEL_58:
          *(_QWORD *)(v30 + 8) = v36;
          v38 = *a2;
          *a2 = v30;
          if (!v38)
            goto LABEL_20;
          goto LABEL_19;
        }
        *(_QWORD *)(v30 + 8) = 0;
        v153 = *a2;
        *a2 = v30;
        if (!v153)
          goto LABEL_20;
LABEL_19:
        MEMORY[0x19401CD90]();
        goto LABEL_20;
      }
    }
    v36 = 0;
    *(_WORD *)(v30 + 4) = 0;
    goto LABEL_58;
  }
  v8 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v8 < 5u)
  {
    *(_WORD *)v7 = 0;
    if (*v8 >= 7u)
      goto LABEL_8;
LABEL_53:
    *(_WORD *)(v7 + 2) = 0;
    if (*v8 >= 9u)
      goto LABEL_11;
    goto LABEL_54;
  }
  v9 = v8[2];
  if (v8[2])
    LOWORD(v9) = *(_WORD *)((char *)v6 + v9);
  *(_WORD *)v7 = v9;
  if (*v8 < 7u)
    goto LABEL_53;
LABEL_8:
  v10 = v8[3];
  if (v8[3])
    LOWORD(v10) = *(_WORD *)((char *)v6 + v10);
  *(_WORD *)(v7 + 2) = v10;
  if (*v8 >= 9u)
  {
LABEL_11:
    v11 = v8[4];
    if (v8[4])
      LOWORD(v11) = *(_WORD *)((char *)v6 + v11);
    *(_WORD *)(v7 + 4) = v11;
    if (*v8 >= 0xBu)
      goto LABEL_14;
LABEL_55:
    *(_QWORD *)(v7 + 8) = 0;
    goto LABEL_20;
  }
LABEL_54:
  *(_WORD *)(v7 + 4) = 0;
  if (*v8 < 0xBu)
    goto LABEL_55;
LABEL_14:
  v12 = v8[5];
  if (v12)
    v12 = *(_QWORD *)((char *)v6 + v12);
  *(_QWORD *)(v7 + 8) = v12;
LABEL_20:
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 7u && (v14 = v13[3]) != 0)
  {
    v15 = (char *)a1 + v14;
    v16 = *(unsigned int *)((char *)a1 + v14);
    v17 = a2[1];
    v19 = (_QWORD *)a2[2];
    v18 = a2 + 1;
    v20 = &v15[v16];
    v21 = *(unsigned int *)&v15[v16];
    v22 = ((uint64_t)v19 - v17) >> 3;
    if (v21 <= v22)
    {
      if (v21 < v22)
      {
        v27 = (_QWORD *)(v17 + 8 * v21);
        while (v19 != v27)
        {
          v29 = *--v19;
          v28 = v29;
          *v19 = 0;
          if (v29)
          {
            if (*(char *)(v28 + 23) < 0)
              operator delete(*(void **)v28);
            MEMORY[0x19401CD90](v28, 0x1012C4016A3B764);
          }
        }
        a2[2] = (uint64_t)v27;
      }
    }
    else
    {
      std::vector<std::unique_ptr<E5RT_FB::SectionT>>::__append(a2 + 1, v21 - v22);
    }
    if (*(_DWORD *)v20)
    {
      v39 = 0;
      v40 = (unsigned int *)(v20 + 4);
      do
      {
        v41 = *(_QWORD *)(*v18 + 8 * v39);
        v42 = *v40;
        v43 = (int *)((char *)v40 + v42);
        if (v41)
        {
          E5RT_FB::Section::UnPackTo((int *)((char *)v40 + v42), v41);
        }
        else
        {
          v44 = operator new();
          *(_OWORD *)v44 = 0u;
          *(_OWORD *)(v44 + 16) = 0u;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_QWORD *)(v44 + 48) = 0;
          E5RT_FB::Section::UnPackTo(v43, v44);
          v45 = *(_QWORD *)(*v18 + 8 * v39);
          *(_QWORD *)(*v18 + 8 * v39) = v44;
          if (v45)
          {
            if (*(char *)(v45 + 23) < 0)
              operator delete(*(void **)v45);
            MEMORY[0x19401CD90](v45, 0x1012C4016A3B764);
          }
        }
        ++v39;
        ++v40;
      }
      while (v39 < *(unsigned int *)v20);
    }
  }
  else
  {
    v23 = (_QWORD *)a2[1];
    v24 = (_QWORD *)a2[2];
    if (v24 != v23)
    {
      do
      {
        v26 = *--v24;
        v25 = v26;
        *v24 = 0;
        if (v26)
        {
          if (*(char *)(v25 + 23) < 0)
            operator delete(*(void **)v25);
          MEMORY[0x19401CD90](v25, 0x1012C4016A3B764);
        }
      }
      while (v24 != v23);
      a2[2] = (uint64_t)v23;
    }
  }
  v46 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v46 < 9u || (v47 = v46[4]) == 0)
  {
    v52 = (_QWORD *)a2[4];
    if (!v52)
      goto LABEL_95;
    a2[4] = 0;
    v53 = (_QWORD *)*v52;
    if (*v52)
    {
      v54 = (_QWORD *)v52[1];
      v55 = (_QWORD *)*v52;
      if (v54 == v53)
        goto LABEL_93;
      do
      {
        v57 = *--v54;
        v56 = v57;
        *v54 = 0;
        if (v57)
        {
          if (*(char *)(v56 + 23) < 0)
            operator delete(*(void **)v56);
          MEMORY[0x19401CD90](v56, 0x1012C4004DB1A28);
        }
      }
      while (v54 != v53);
LABEL_92:
      v55 = (_QWORD *)*v52;
LABEL_93:
      v52[1] = v53;
      operator delete(v55);
    }
LABEL_94:
    MEMORY[0x19401CD90](v52, 0x20C40960023A9);
    goto LABEL_95;
  }
  v48 = (unsigned int *)((char *)a1 + v47);
  v49 = *v48;
  v50 = (int *)((char *)v48 + v49);
  v51 = (_QWORD *)a2[4];
  if (!v51)
  {
    v58 = (_QWORD *)operator new();
    v58[1] = 0;
    v58[2] = 0;
    *v58 = 0;
    E5RT_FB::Symtab::UnPackTo(v50, v58);
    v52 = (_QWORD *)a2[4];
    a2[4] = (uint64_t)v58;
    if (!v52)
      goto LABEL_95;
    v53 = (_QWORD *)*v52;
    if (*v52)
    {
      v59 = (_QWORD *)v52[1];
      v55 = (_QWORD *)*v52;
      if (v59 == v53)
        goto LABEL_93;
      do
      {
        v61 = *--v59;
        v60 = v61;
        *v59 = 0;
        if (v61)
        {
          if (*(char *)(v60 + 23) < 0)
            operator delete(*(void **)v60);
          MEMORY[0x19401CD90](v60, 0x1012C4004DB1A28);
        }
      }
      while (v59 != v53);
      goto LABEL_92;
    }
    goto LABEL_94;
  }
  E5RT_FB::Symtab::UnPackTo((int *)((char *)v48 + v49), v51);
LABEL_95:
  v62 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v62 >= 0xBu && (v63 = v62[5]) != 0)
  {
    v64 = *(unsigned int *)((char *)a1 + v63);
    v65 = a2[5];
    v66 = (_QWORD *)a2[6];
    v164 = (int *)((char *)a1 + v63 + v64);
    v67 = *v164;
    v68 = ((uint64_t)v66 - v65) >> 3;
    v162 = a2 + 5;
    if (v67 <= v68)
    {
      if (v67 < v68)
      {
        v74 = (_QWORD *)(v65 + 8 * v67);
        while (v66 != v74)
        {
          v76 = *--v66;
          v75 = v76;
          *v66 = 0;
          if (v76)
          {
            v77 = *(void **)v75;
            if (*(_QWORD *)v75)
            {
              *(_QWORD *)(v75 + 8) = v77;
              operator delete(v77);
            }
            MEMORY[0x19401CD90](v75, 0x10C402FEFCB83);
          }
        }
        a2[6] = (uint64_t)v74;
      }
    }
    else
    {
      std::vector<std::unique_ptr<E5RT_FB::SectionDataT>>::__append(a2 + 5, v67 - v68);
    }
    v78 = a2 + 5;
    if (*v164)
    {
      v79 = 0;
      v163 = (uint64_t)a1 + v63 + v64 + 8;
      v80 = (char *)a1 + v64 + v63;
      v81 = v80 + 24;
      v82 = v80 + 8;
      do
      {
        v83 = v163 + 4 * v79;
        v84 = *(_QWORD **)(*v78 + 8 * v79);
        v85 = &v164[v79 + 1];
        v86 = *v85;
        v87 = (int *)((char *)v85 + v86);
        if (!v84)
        {
          v105 = (_QWORD *)operator new();
          v105[1] = 0;
          v105[2] = 0;
          *v105 = 0;
          v106 = (unsigned __int16 *)((char *)v87 - *v87);
          if (*v106 >= 5u)
          {
            v107 = v106[2];
            if (v106[2])
            {
              v161 = *(unsigned int *)((char *)v87 + v107);
              v108 = (unsigned int *)((char *)v87 + v107 + v161);
              v109 = *v108;
              if ((_DWORD)v109)
              {
                v110 = operator new(*v108);
                bzero(v110, v109);
                *v105 = v110;
                v105[1] = &v110[v109];
                v105[2] = &v110[v109];
                v111 = v108 + 1;
                if (v109 < 8)
                {
                  v112 = (char *)(v108 + 1);
                  goto LABEL_165;
                }
                v112 = (char *)(v108 + 1);
                if ((unint64_t)&v110[-v83 - v86 - v107 - v161] < 0x20)
                  goto LABEL_165;
                if (v109 >= 0x20)
                {
                  v113 = v109 & 0xFFFFFFE0;
                  v115 = v110 + 16;
                  v116 = &v81[v86 + v161 + v107];
                  v117 = v113;
                  do
                  {
                    v118 = *(_OWORD *)v116;
                    *(v115 - 1) = *((_OWORD *)v116 - 1);
                    *v115 = v118;
                    v115 += 2;
                    v116 += 32;
                    v117 -= 32;
                  }
                  while (v117);
                  if (v113 != v109)
                  {
                    if ((v109 & 0x18) == 0)
                    {
                      v110 += v113;
                      v112 = (char *)v111 + v113;
                      goto LABEL_165;
                    }
                    goto LABEL_152;
                  }
                }
                else
                {
                  v113 = 0;
LABEL_152:
                  v112 = (char *)v111 + (v109 & 0xFFFFFFF8);
                  v119 = &v110[v113];
                  v120 = v113 + v86 + v107 + v161;
                  v121 = v113 - (v109 & 0xFFFFFFF8);
                  do
                  {
                    *v119++ = *(_QWORD *)&v82[v120];
                    v120 += 8;
                    v121 += 8;
                  }
                  while (v121);
                  v110 += v109 & 0xFFFFFFF8;
                  if ((v109 & 0xFFFFFFF8) != v109)
                  {
LABEL_165:
                    v130 = (char *)v111 + v109;
                    do
                    {
                      v131 = *v112++;
                      *v110++ = v131;
                    }
                    while (v112 != v130);
                  }
                }
              }
            }
          }
          v132 = *(_QWORD *)(*v162 + 8 * v79);
          *(_QWORD *)(*v162 + 8 * v79) = v105;
          v78 = v162;
          if (v132)
          {
            v133 = *(void **)v132;
            if (*(_QWORD *)v132)
            {
              *(_QWORD *)(v132 + 8) = v133;
              operator delete(v133);
            }
            MEMORY[0x19401CD90](v132, 0x10C402FEFCB83);
          }
          goto LABEL_118;
        }
        v88 = (unsigned __int16 *)((char *)v87 - *v87);
        if (*v88 < 5u)
          goto LABEL_118;
        v89 = v88[2];
        if (!v88[2])
          goto LABEL_118;
        v90 = *(unsigned int *)((char *)v87 + v89);
        v91 = (unsigned int *)((char *)v87 + v89 + v90);
        v92 = *v91;
        v94 = (char *)*v84;
        v93 = (char *)v84[1];
        v95 = (unint64_t)&v93[-*v84];
        v96 = v92 >= v95;
        v97 = v92 - v95;
        if (v92 <= v95)
        {
          v78 = v162;
          if (!v96)
            v84[1] = &v94[v92];
        }
        else
        {
          v158 = v90;
          v159 = v88[2];
          v160 = v91;
          v98 = v84[2];
          if (v98 - (uint64_t)v93 >= v97)
          {
            bzero(v93, v92 - v95);
            v84[1] = &v93[v97];
            v91 = v160;
            v78 = v162;
            v90 = v158;
            v89 = v159;
            goto LABEL_175;
          }
          v99 = v98 - (_QWORD)v94;
          v100 = 2 * v99;
          v157 = *v91;
          if (2 * v99 <= v92)
            v100 = *v91;
          if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
            v101 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v101 = v100;
          v154 = v101;
          v156 = (char *)operator new(v101);
          v155 = &v156[v95];
          bzero(&v156[v95], v97);
          if (v93 != v94)
          {
            if (v95 < 8)
            {
              v89 = v159;
              v91 = v160;
              v102 = v157;
              v90 = v158;
              v103 = &v156[v95];
              v104 = v156;
              goto LABEL_171;
            }
            v104 = v156;
            v102 = v157;
            v89 = v159;
            v91 = v160;
            v90 = v158;
            v103 = &v156[v95];
            if ((unint64_t)(v94 - v156) < 0x20)
              goto LABEL_171;
            if (v95 >= 0x20)
            {
              v114 = v95 & 0xFFFFFFFFFFFFFFE0;
              v122 = &v156[v95 - 16];
              v123 = v93 - 16;
              v124 = v95 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v125 = *(_OWORD *)v123;
                *((_OWORD *)v122 - 1) = *((_OWORD *)v123 - 1);
                *(_OWORD *)v122 = v125;
                v122 -= 32;
                v123 -= 32;
                v124 -= 32;
              }
              while (v124);
              if (v95 != v114)
              {
                if ((v95 & 0x18) == 0)
                {
                  v103 = &v155[-v114];
                  v93 -= v114;
                  goto LABEL_171;
                }
                goto LABEL_160;
              }
            }
            else
            {
              v114 = 0;
LABEL_160:
              v103 = &v155[-(v95 & 0xFFFFFFFFFFFFFFF8)];
              v126 = &v156[&v93[-v114] - v94 - 8];
              v127 = &v93[-v114 - 8];
              v128 = v114 - (v95 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v129 = *(_QWORD *)v127;
                v127 -= 8;
                *(_QWORD *)v126 = v129;
                v126 -= 8;
                v128 += 8;
              }
              while (v128);
              v93 -= v95 & 0xFFFFFFFFFFFFFFF8;
              if (v95 != (v95 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_171:
                v134 = v103 - 1;
                do
                {
                  v135 = *--v93;
                  *v134-- = v135;
                }
                while (v93 != v94);
              }
            }
            v93 = v94;
            v78 = v162;
            *v84 = v104;
            v84[1] = &v104[v102];
            v84[2] = &v104[v154];
            if (!v94)
              goto LABEL_175;
LABEL_174:
            operator delete(v93);
            v90 = v158;
            v89 = v159;
            v91 = v160;
            goto LABEL_175;
          }
          v91 = v160;
          v78 = v162;
          v90 = v158;
          v89 = v159;
          *v84 = v155;
          v84[1] = &v156[v157];
          v84[2] = &v156[v154];
          if (v93)
            goto LABEL_174;
        }
LABEL_175:
        v138 = *v91;
        v137 = v91 + 1;
        v136 = v138;
        if (v138)
        {
          v139 = (char *)*v84;
          if (v136 < 8)
          {
            v140 = v137;
            goto LABEL_190;
          }
          v140 = v137;
          if ((unint64_t)&v139[-v83 - v86 - v89 - v90] >= 0x20)
          {
            if (v136 < 0x20)
            {
              v141 = 0;
              goto LABEL_185;
            }
            v141 = v136 & 0xFFFFFFE0;
            v142 = v139 + 16;
            v143 = &v81[v86 + v90 + v89];
            v144 = v141;
            do
            {
              v145 = *(_OWORD *)v143;
              *(v142 - 1) = *((_OWORD *)v143 - 1);
              *v142 = v145;
              v142 += 2;
              v143 += 32;
              v144 -= 32;
            }
            while (v144);
            if (v141 == v136)
              goto LABEL_118;
            if ((v136 & 0x18) != 0)
            {
LABEL_185:
              v140 = (unsigned int *)((char *)v137 + (v136 & 0xFFFFFFF8));
              v146 = &v139[v136 & 0xFFFFFFF8];
              v147 = &v139[v141];
              v148 = &v82[v141 + v90 + v89 + v86];
              v149 = v141 - (v136 & 0xFFFFFFF8);
              do
              {
                v150 = *(_QWORD *)v148;
                v148 += 8;
                *(_QWORD *)v147 = v150;
                v147 += 8;
                v149 += 8;
              }
              while (v149);
              v139 = v146;
              if ((v136 & 0xFFFFFFF8) == v136)
                goto LABEL_118;
              goto LABEL_190;
            }
            v139 += v141;
            v140 = (unsigned int *)((char *)v137 + v141);
          }
LABEL_190:
          v151 = (unsigned int *)((char *)v137 + v136);
          do
          {
            v152 = *(_BYTE *)v140;
            v140 = (unsigned int *)((char *)v140 + 1);
            *v139++ = v152;
          }
          while (v140 != v151);
        }
LABEL_118:
        ++v79;
        v81 += 4;
        v82 += 4;
      }
      while (v79 < *v164);
    }
  }
  else
  {
    v69 = (_QWORD *)a2[5];
    v70 = (_QWORD *)a2[6];
    if (v70 != v69)
    {
      do
      {
        v72 = *--v70;
        v71 = v72;
        *v70 = 0;
        if (v72)
        {
          v73 = *(void **)v71;
          if (*(_QWORD *)v71)
          {
            *(_QWORD *)(v71 + 8) = v73;
            operator delete(v73);
          }
          MEMORY[0x19401CD90](v71, 0x10C402FEFCB83);
        }
      }
      while (v70 != v69);
      a2[6] = (uint64_t)v69;
    }
  }
}

void sub_190E348B4(_Unwind_Exception *a1)
{
  _QWORD **v1;

  if (*v1)
    sub_19103DBB8((uint64_t)v1, *v1);
  MEMORY[0x19401CD90](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_190E348E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_190E3490C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  MEMORY[0x19401CD90](v1, 0x1012C4016A3B764);
  _Unwind_Resume(a1);
}

void E5RT_FB::Section::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  __int128 *p_dst;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;

  v4 = *a1;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    v7 = v6[2];
    if (v7)
    {
      v8 = (char *)a1 + v7;
      v9 = *(unsigned int *)((char *)a1 + v7);
      v11 = &v8[v9 + 4];
      v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17)
          v21 = (v10 & 0xFFFFFFF8) + 8;
        else
          v21 = v10 | 7;
        p_dst = (__int128 *)operator new(v21 + 1);
        *((_QWORD *)&__dst + 1) = v10;
        v23 = v21 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v23) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!(_DWORD)v10)
        {
          *((_BYTE *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            *(_OWORD *)a2 = __dst;
            *(_QWORD *)(a2 + 16) = v23;
            v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_31:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((_BYTE *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_31;
    }
  }
LABEL_7:
  v13 = (unsigned __int16 *)((char *)a1 + v5);
  v14 = *v13;
  if (v14 <= 6)
  {
    *(_DWORD *)(a2 + 24) = 0;
LABEL_21:
    *(_QWORD *)(a2 + 32) = 0;
LABEL_22:
    LODWORD(v18) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    goto LABEL_23;
  }
  v15 = v13[3];
  if (v13[3])
    LODWORD(v15) = *(int *)((char *)a1 + v15);
  *(_DWORD *)(a2 + 24) = v15;
  if (v14 < 9)
    goto LABEL_21;
  v16 = v13[4];
  if (v13[4])
    v16 = *(_QWORD *)((char *)a1 + v16);
  *(_QWORD *)(a2 + 32) = v16;
  if (v14 < 0xB)
    goto LABEL_22;
  v17 = v13[5];
  if (v13[5])
    v17 = *(_QWORD *)((char *)a1 + v17);
  *(_QWORD *)(a2 + 40) = v17;
  if (v14 < 0xD)
  {
    *(_DWORD *)(a2 + 48) = 0;
    v19 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v19 >= 0xFu)
      goto LABEL_24;
LABEL_33:
    LOBYTE(v20) = 0;
    goto LABEL_34;
  }
  v18 = v13[6];
  if (!v18)
  {
LABEL_23:
    *(_DWORD *)(a2 + 48) = v18;
    v19 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v19 >= 0xFu)
      goto LABEL_24;
    goto LABEL_33;
  }
  *(_DWORD *)(a2 + 48) = *(int *)((char *)a1 + v18);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 0xFu)
    goto LABEL_33;
LABEL_24:
  v20 = v19[7];
  if (v20)
    LOBYTE(v20) = *((_BYTE *)a1 + v20) != 0;
LABEL_34:
  *(_BYTE *)(a2 + 52) = v20;
}

void std::vector<std::unique_ptr<E5RT_FB::SectionT>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_32:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_39;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
          {
            if (*(char *)(v28 + 23) < 0)
              operator delete(*(void **)v28);
            MEMORY[0x19401CD90](v28, 0x1012C4016A3B764);
          }
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_32;
    }
  }
}

void std::vector<std::unique_ptr<E5RT_FB::SectionDataT>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_32:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_39;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
          {
            v30 = *(void **)v28;
            if (*(_QWORD *)v28)
            {
              *(_QWORD *)(v28 + 8) = v30;
              operator delete(v30);
            }
            MEMORY[0x19401CD90](v28, 0x10C402FEFCB83);
          }
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_32;
    }
  }
}

uint64_t E5RT_FB::Program::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL4 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unint64_t v33;
  BOOL v34;
  _BOOL4 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  _DWORD *v48;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15)
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 5u)
    return 0;
  v21 = v20[2];
  if (!v21)
    return 0;
  result = 0;
  v22 = (unint64_t)&v3[v21];
  v24 = (v22 & 3) == 0 || v4 == 0;
  if (v8 >= v22 && v24)
  {
    v25 = *(unsigned int *)(v2 + v22);
    if ((int)v25 < 1 || v7 - 1 < v22 + v25)
      return 0;
    result = E5RT_FB::ProgramHeader::Verify((int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21)), (uint64_t *)a2);
    if ((_DWORD)result)
    {
      v26 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v26 < 7u)
        return 0;
      v27 = v26[3];
      if (!v26[3])
        return 0;
      v28 = *(_QWORD *)a2;
      v29 = (unint64_t)a1 + v27 - *(_QWORD *)a2;
      if ((v29 & 3) != 0)
      {
        if (*(_BYTE *)(a2 + 24))
          return 0;
      }
      result = 0;
      v30 = *(_QWORD *)(a2 + 8);
      if (v30 >= 5 && v30 - 4 >= v29)
      {
        v31 = *(unsigned int *)(v28 + v29);
        if ((int)v31 < 1 || v30 - 1 < v29 + v31)
          return 0;
        result = 0;
        v32 = (unsigned int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27));
        v33 = (unint64_t)v32 - v28;
        v34 = (((unint64_t)v32 - v28) & 3) == 0 || *(_BYTE *)(a2 + 24) == 0;
        v35 = v34;
        if (v30 - 4 >= v33 && v35)
        {
          v36 = *v32;
          if (v36 > 0x1FFFFFFE)
            return 0;
          result = 0;
          v37 = 4 * v36 + 4;
          v15 = v30 > v37;
          v38 = v30 - v37;
          if (v15 && v38 >= v33)
          {
            if ((_DWORD)v36)
            {
              v39 = 0;
              v40 = v32 + 1;
              while (E5RT_FB::Section::Verify((int *)((char *)v40 + *v40), a2))
              {
                ++v39;
                ++v40;
                if (v39 >= *v32)
                  goto LABEL_67;
              }
              return 0;
            }
LABEL_67:
            result = flatbuffers::Table::VerifyOffset(a1, a2, 8u);
            if ((_DWORD)result)
            {
              v41 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v41 < 9u
                || (v42 = v41[4]) == 0
                || (result = E5RT_FB::Symtab::Verify((int *)((char *)a1 + v42 + *(unsigned int *)((char *)a1 + v42)), a2), (_DWORD)result))
              {
                result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
                if ((_DWORD)result)
                {
                  v43 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v43 >= 0xBu && (v44 = v43[5]) != 0)
                    v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
                  else
                    v45 = 0;
                  result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v45);
                  if ((_DWORD)result)
                  {
                    v46 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v46 >= 0xBu && (v47 = v46[5]) != 0)
                      v48 = (int *)((char *)a1 + v47 + *(unsigned int *)((char *)a1 + v47));
                    else
                      v48 = 0;
                    result = flatbuffers::Verifier::VerifyVectorOfTables<E5RT_FB::SectionData>((uint64_t *)a2, v48);
                    if ((_DWORD)result)
                    {
                      --*(_DWORD *)(a2 + 40);
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL E5RT_FB::Section::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _BOOL8 result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unint64_t v44;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20))
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  v21 = *v20;
  if (v21 < 5)
    goto LABEL_80;
  v22 = v20[2];
  if (v20[2])
  {
    result = 0;
    v23 = &v3[v22];
    v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25)
      return result;
    v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26])
      return 0;
    result = 0;
    v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    v28 = (char *)v27 - v2;
    v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    v30 = v29;
    if (v8 < (unint64_t)v28 || !v30)
      return result;
    v31 = *v27;
    if (v31 > 0x7FFFFFFE)
      return 0;
    v32 = v31 + 4;
    v33 = (unint64_t)&v28[v31 + 4];
    v34 = v7 - 1 >= v33 && v7 > v32;
    v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(_BYTE *)(v2 + v33))
      return 0;
  }
  if (v21 < 7)
    goto LABEL_80;
  v36 = v20[3];
  if (!v20[3]
    || ((result = 0, v37 = &v3[v36], ((unint64_t)&v3[v36] & 3) != 0) ? (v38 = v4 == 0) : (v38 = 1),
        !v38 ? (v39 = 0) : (v39 = 1),
        v8 >= (unint64_t)v37 && v39))
  {
    if (v21 < 9)
      goto LABEL_80;
    if (!v20[4])
      goto LABEL_79;
    v40 = (unint64_t)&v3[v20[4]];
    if ((v40 & 7) != 0 && v4)
      return 0;
    result = 0;
    if (v7 >= 9 && v7 - 8 >= v40)
    {
LABEL_79:
      if (v21 < 0xB || !v20[5])
        goto LABEL_80;
      v41 = (unint64_t)&v3[v20[5]];
      if ((v41 & 7) != 0 && v4)
        return 0;
      result = 0;
      if (v7 >= 9 && v7 - 8 >= v41)
      {
LABEL_80:
        result = flatbuffers::Table::VerifyField<unsigned int>(a1, a2, 0xCu, 4);
        if (result)
        {
          v42 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v42 < 0xFu
            || (v43 = v42[7]) == 0
            || (result = 0, v44 = *(_QWORD *)(a2 + 8), v44 >= 2)
            && v44 - 1 >= (unint64_t)a1 + v43 - *(_QWORD *)a2)
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Table::VerifyField<unsigned int>(int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 <= a3)
    return 1;
  v5 = *(unsigned __int16 *)((char *)v4 + a3);
  if (!v5)
    return 1;
  v6 = (unint64_t)a1 + v5 - *(_QWORD *)a2;
  if ((v6 & (a4 - 1)) != 0 && *(_BYTE *)(a2 + 24) != 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 > 4;
  v10 = v8 - 4;
  return v9 && v10 >= v6;
}

void E5RT_FB::Symtab::UnPackTo(int *a1, _QWORD *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 >= 5u && (v4 = v3[2]) != 0)
  {
    v5 = (int *)((char *)a1 + v4 + *(unsigned int *)((char *)a1 + v4));
    v6 = *v5;
    v7 = (_QWORD *)a2[1];
    v8 = ((uint64_t)v7 - *a2) >> 3;
    if (v6 <= v8)
    {
      if (v6 < v8)
      {
        v13 = *a2 + 8 * v6;
        while (v7 != (_QWORD *)v13)
        {
          v15 = *--v7;
          v14 = v15;
          *v7 = 0;
          if (v15)
          {
            if (*(char *)(v14 + 23) < 0)
              operator delete(*(void **)v14);
            MEMORY[0x19401CD90](v14, 0x1012C4004DB1A28);
          }
        }
        a2[1] = v13;
      }
    }
    else
    {
      std::vector<std::unique_ptr<E5RT_FB::SymbolT>>::__append(a2, v6 - v8);
    }
    if (*v5)
    {
      v16 = 0;
      v17 = v5 + 1;
      do
      {
        v18 = *(_QWORD *)(*a2 + 8 * v16);
        v19 = *v17;
        v20 = (int *)((char *)v17 + v19);
        if (v18)
        {
          E5RT_FB::Symbol::UnPackTo((int *)((char *)v17 + v19), v18);
        }
        else
        {
          v21 = operator new();
          *(_OWORD *)v21 = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          *(_OWORD *)(v21 + 32) = 0u;
          *(_QWORD *)(v21 + 48) = 0;
          E5RT_FB::Symbol::UnPackTo(v20, v21);
          v22 = *(_QWORD *)(*a2 + 8 * v16);
          *(_QWORD *)(*a2 + 8 * v16) = v21;
          if (v22)
          {
            if (*(char *)(v22 + 23) < 0)
              operator delete(*(void **)v22);
            MEMORY[0x19401CD90](v22, 0x1012C4004DB1A28);
          }
        }
        ++v16;
        ++v17;
      }
      while (v16 < *v5);
    }
  }
  else
  {
    v9 = (_QWORD *)*a2;
    v10 = (_QWORD *)a2[1];
    if (v10 != (_QWORD *)*a2)
    {
      do
      {
        v12 = *--v10;
        v11 = v12;
        *v10 = 0;
        if (v12)
        {
          if (*(char *)(v11 + 23) < 0)
            operator delete(*(void **)v11);
          MEMORY[0x19401CD90](v11, 0x1012C4004DB1A28);
        }
      }
      while (v10 != v9);
      a2[1] = v9;
    }
  }
}

void sub_190E357C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  MEMORY[0x19401CD90](v1, 0x1012C4004DB1A28);
  _Unwind_Resume(a1);
}

void E5RT_FB::Symbol::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  __int128 *p_dst;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 __dst;
  uint64_t v24;

  v4 = *a1;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    v7 = v6[2];
    if (v7)
    {
      v8 = (char *)a1 + v7;
      v9 = *(unsigned int *)((char *)a1 + v7);
      v11 = &v8[v9 + 4];
      v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17)
          v22 = (v10 & 0xFFFFFFF8) + 8;
        else
          v22 = v10 | 7;
        p_dst = (__int128 *)operator new(v22 + 1);
        *((_QWORD *)&__dst + 1) = v10;
        v24 = v22 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v24) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!(_DWORD)v10)
        {
          *((_BYTE *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            *(_OWORD *)a2 = __dst;
            *(_QWORD *)(a2 + 16) = v24;
            v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_33:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((_BYTE *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_33;
    }
  }
LABEL_7:
  v13 = (unsigned __int16 *)((char *)a1 + v5);
  v14 = *v13;
  if (v14 <= 6)
  {
    LODWORD(v16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    goto LABEL_15;
  }
  v15 = v13[3];
  if (v13[3])
    LODWORD(v15) = *(int *)((char *)a1 + v15);
  *(_DWORD *)(a2 + 24) = v15;
  if (v14 < 9)
  {
    *(_DWORD *)(a2 + 28) = 0;
    v17 = (unsigned __int16 *)((char *)a1 - *a1);
    v18 = *v17;
    if (v18 > 0xA)
      goto LABEL_16;
LABEL_25:
    *(_QWORD *)(a2 + 32) = 0;
LABEL_26:
    v21 = 0;
    *(_QWORD *)(a2 + 40) = 0;
    goto LABEL_27;
  }
  v16 = v13[4];
  if (!v16)
  {
LABEL_15:
    *(_DWORD *)(a2 + 28) = v16;
    v17 = (unsigned __int16 *)((char *)a1 - *a1);
    v18 = *v17;
    if (v18 > 0xA)
      goto LABEL_16;
    goto LABEL_25;
  }
  *(_DWORD *)(a2 + 28) = *(int *)((char *)a1 + v16);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  v18 = *v17;
  if (v18 <= 0xA)
    goto LABEL_25;
LABEL_16:
  v19 = v17[5];
  if (v17[5])
    v19 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)(a2 + 32) = v19;
  if (v18 < 0xD)
    goto LABEL_26;
  v20 = v17[6];
  if (v17[6])
    v20 = *(_QWORD *)((char *)a1 + v20);
  *(_QWORD *)(a2 + 40) = v20;
  if (v18 < 0xF)
  {
    v21 = 0;
  }
  else
  {
    v21 = v17[7];
    if (v21)
      v21 = *(_QWORD *)((char *)a1 + v21);
  }
LABEL_27:
  *(_QWORD *)(a2 + 48) = v21;
}

void std::vector<std::unique_ptr<E5RT_FB::SymbolT>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_32:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_39;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
          {
            if (*(char *)(v28 + 23) < 0)
              operator delete(*(void **)v28);
            MEMORY[0x19401CD90](v28, 0x1012C4004DB1A28);
          }
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_32;
    }
  }
}

uint64_t E5RT_FB::Symtab::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  unsigned int *v36;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v11 = *a1;
  v12 = *(_DWORD *)(a2 + 40);
  v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  v15 = *(_DWORD *)(a2 + 16);
  v14 = *(_DWORD *)(a2 + 20);
  v16 = v12 + 1 > v15 || v13 > v14;
  if (v16)
    return 0;
  v17 = (unint64_t)&v3[-v11];
  if ((((_DWORD)v3 - (_DWORD)v11) & 1) != 0)
  {
    if (v4 || v7 - 2 < v17)
      return 0;
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1)
    return 0;
  v9 = v7 >= v18;
  v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17)
    return 0;
  v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    v22 = v21[2];
    if (v21[2])
    {
      v23 = (unint64_t)&v3[v22];
      v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25)
        return 0;
      v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26)
        return 0;
      v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      v28 = (char *)v27 - v2;
      v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30)
        return 0;
      v31 = *v27;
      if (v31 > 0x1FFFFFFE)
        return 0;
      v32 = 4 * v31 + 4;
      v16 = v7 > v32;
      v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28)
        return 0;
      if ((_DWORD)v31)
      {
        v35 = 0;
        v36 = v27 + 1;
        while (E5RT_FB::Symbol::Verify((int *)((char *)v36 + *v36), a2))
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

BOOL E5RT_FB::Symbol::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _BOOL8 result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  char *v41;
  BOOL v42;
  int v43;
  unint64_t v44;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20))
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  v21 = *v20;
  if (v21 < 5)
    goto LABEL_84;
  v22 = v20[2];
  if (v20[2])
  {
    result = 0;
    v23 = &v3[v22];
    v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25)
      return result;
    v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26])
      return 0;
    result = 0;
    v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    v28 = (char *)v27 - v2;
    v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    v30 = v29;
    if (v8 < (unint64_t)v28 || !v30)
      return result;
    v31 = *v27;
    if (v31 > 0x7FFFFFFE)
      return 0;
    v32 = v31 + 4;
    v33 = (unint64_t)&v28[v31 + 4];
    v34 = v7 - 1 >= v33 && v7 > v32;
    v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(_BYTE *)(v2 + v33))
      return 0;
  }
  if (v21 < 7)
    goto LABEL_84;
  v36 = v20[3];
  if (!v20[3]
    || ((result = 0, v37 = &v3[v36], ((unint64_t)&v3[v36] & 3) != 0) ? (v38 = v4 == 0) : (v38 = 1),
        !v38 ? (v39 = 0) : (v39 = 1),
        v8 >= (unint64_t)v37 && v39))
  {
    if (v21 < 9)
      goto LABEL_84;
    v40 = v20[4];
    if (!v20[4]
      || ((result = 0, v41 = &v3[v40], ((unint64_t)&v3[v40] & 3) != 0) ? (v42 = v4 == 0) : (v42 = 1),
          !v42 ? (v43 = 0) : (v43 = 1),
          v8 >= (unint64_t)v41 && v43))
    {
      if (v21 < 0xB || !v20[5])
        goto LABEL_84;
      v44 = (unint64_t)&v3[v20[5]];
      if ((v44 & 7) != 0 && v4)
        return 0;
      result = 0;
      if (v7 >= 9 && v7 - 8 >= v44)
      {
LABEL_84:
        result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xCu, 8);
        if (result)
        {
          result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xEu, 8);
          if (result)
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Table::VerifyField<unsigned long long>(int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 <= a3)
    return 1;
  v5 = *(unsigned __int16 *)((char *)v4 + a3);
  if (!v5)
    return 1;
  v6 = (unint64_t)a1 + v5 - *(_QWORD *)a2;
  if ((v6 & (a4 - 1)) != 0 && *(_BYTE *)(a2 + 24) != 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 > 8;
  v10 = v8 - 8;
  return v9 && v10 >= v6;
}

uint64_t E5RT_FB::ProgramHeader::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  unint64_t v33;

  v2 = *a2;
  v3 = (unint64_t)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5))
    return 0;
  v14 = v3 - v9;
  if ((v14 & 1) != 0)
  {
    result = 0;
    if (v4 || v6 - 2 < v14)
      return result;
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1)
    return 0;
  v7 = v6 >= v15;
  v16 = v6 - v15;
  if (v16 == 0 || !v7 || v16 < v14)
    return 0;
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  v19 = *v18;
  if (v19 < 5)
    goto LABEL_65;
  v20 = v18[2];
  if (!v18[2]
    || ((result = 0, v21 = v3 + v20, ((v3 + v20) & 1) != 0) ? (v22 = v4 == 0) : (v22 = 1),
        !v22 ? (v23 = 0) : (v23 = 1),
        v6 - 2 >= v21 && v23))
  {
    if (v19 < 7)
      goto LABEL_65;
    v24 = v18[3];
    if (!v18[3]
      || ((result = 0, v25 = v3 + v24, ((v3 + v24) & 1) != 0) ? (v26 = v4 == 0) : (v26 = 1),
          !v26 ? (v27 = 0) : (v27 = 1),
          v6 - 2 >= v25 && v27))
    {
      if (v19 < 9)
        goto LABEL_65;
      v28 = v18[4];
      if (!v18[4]
        || ((result = 0, v29 = v3 + v28, ((v3 + v28) & 1) != 0) ? (v30 = v4 == 0) : (v30 = 1),
            !v30 ? (v31 = 0) : (v31 = 1),
            v6 - 2 >= v29 && v31))
      {
        if (v19 < 0xB)
          goto LABEL_65;
        v32 = v18[5];
        if (!v32)
          goto LABEL_65;
        v33 = v3 + v32;
        if ((v33 & 7) != 0 && v4)
          return 0;
        result = 0;
        if (v6 >= 9 && v6 - 8 >= v33)
        {
LABEL_65:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t E5RT::ComputeProgramHeaderPriv::GetPlatformId(E5RT::ComputeProgramHeaderPriv *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8);
}

uint64_t E5PlatformManagerImpl::GetPlatformCompatibility(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t BasePlatform;

  if (a2 == a3)
    return 0;
  v3 = 1;
  if ((a3 & 0xFFFFFFFFFFFFFEFFLL) == 0)
    return v3;
  BasePlatform = E5PlatformManagerImpl::GetBasePlatform(a1, a2);
  if (BasePlatform == E5PlatformManagerImpl::GetBasePlatform(a1, a3))
    return 1;
  else
    return 2;
}

BOOL flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  if (!a2)
    return 1;
  v2 = (unint64_t)a2 - *(_QWORD *)a1;
  if ((v2 & 3) != 0 && *(_BYTE *)(a1 + 24))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2)
    return 0;
  v5 = *a2;
  if (v5 > 0x1FFFFFFE)
    return 0;
  v6 = 4 * v5 + 4;
  v7 = v3 > v6;
  v8 = v3 - v6;
  return v7 && v8 >= v2;
}

_QWORD *E5RT::ComputeProgramHeaderPriv::ComputeProgramHeaderPriv(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  void *exception;
  std::string __p;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;

  *result = &off_1E2D5B0D8;
  v2 = *a2;
  *a2 = 0;
  result[1] = v2;
  v3 = *(unsigned __int16 *)(v2 + 4);
  if (*(_WORD *)(v2 + 2))
    v4 = 0;
  else
    v4 = v3 == 2;
  if (!v4)
  {
    std::to_string(&v17, *(unsigned __int16 *)(v2 + 2));
    v5 = std::string::insert(&v17, 0, "Detected compute program with major version = ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v18, " and minor version = ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v20, ", which is unsupported.");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v22 = v13->__r_.__value_.__r.__words[2];
    v21 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v20.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_23;
    }
LABEL_22:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
LABEL_23:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v20, "ComputeProgramHeaderPriv");
      E5RT::Status::Status(&v19, 1, &v21);
      E5RT::E5RTError::E5RTError(exception, &v20, &v19);
    }
LABEL_18:
    operator delete(v17.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
  return result;
}

void sub_190E36540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v38;

  E5RT::Status::~Status((E5RT::Status *)&a28);
  if (*(char *)(v36 - 73) < 0)
  {
    operator delete(*(void **)(v36 - 96));
    if ((v35 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v36 - 41) < 0)
        operator delete(*(void **)(v36 - 64));
      v38 = *(_QWORD *)(v33 + 8);
      *(_QWORD *)(v33 + 8) = 0;
      if (v38)
        MEMORY[0x19401CD90](v38, 0x1000C40B2B1FC38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

_QWORD *E5RT::ComputeProgramHeaderPriv::ComputeProgramHeaderPriv(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *result = &off_1E2D5B0D8;
  result[1] = v2;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190E36F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E36F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::IOPortImpl::BindMemoryObject(uint64_t a1, __int128 *a2, char a3)
{
  E5RT::BufferObject *v6;
  unint64_t Size;
  E5RT::TensorDescriptorImpl **v8;
  void *v9;
  E5RT::SurfaceObject *v10;
  const E5RT::SurfaceDescriptor *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  E5RT::BufferObject *v17;
  unint64_t v18;
  E5RT::OperandDescriptor *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  E5RT::TensorDescriptorImpl **v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *exception;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[3];
  _BYTE v38[8];
  __int128 v39;

  if (*(_BYTE *)(a1 + 48))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v39, "BindMemoryObject");
    std::string::basic_string[abi:ne180100]<0>(v37, "Port bindings cannot be changed while operation is in use in an execution stream.");
    E5RT::Status::Status(v38, 2, v37);
    E5RT::E5RTError::E5RTError(exception, &v39, v38);
  }
  if (*(_QWORD *)a2)
  {
    if (E5RT::OperandDescriptor::TryAsTensorDescriptor(*(void **)(a1 + 16)))
    {
      if (!E5RT::MemoryObject::TryAsBuffer(*(void **)a2))
      {
        v32 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v39, "BindMemoryObject");
        std::string::basic_string[abi:ne180100]<0>(v37, "Invalid operation : Binding surface objects to tensor ports isn't allowed.");
        E5RT::Status::Status(v38, 2, v37);
        E5RT::E5RTError::E5RTError(v32, &v39, v38);
      }
      if (*(_BYTE *)(a1 + 97))
      {
        v6 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(*(E5RT::MemoryObject **)a2);
        Size = E5RT::BufferObject::GetSize(v6);
        v8 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)(a1 + 16));
        if (Size < E5RT::TensorDescriptor::GetSize(v8))
        {
          v9 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v39, "BindMemoryObject");
          std::string::basic_string[abi:ne180100]<0>(v37, "Buffer size is insufficient for tensor.");
          E5RT::Status::Status(v38, 2, v37);
          E5RT::E5RTError::E5RTError(v9, &v39, v38);
        }
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 32);
        v12 = *(std::__shared_weak_count **)(a1 + 40);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if (!v13)
        {
          v34 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v39, "BindMemoryObject");
          std::string::basic_string[abi:ne180100]<0>(v37, "You can only bind memory to a dynamic port if you first set a max port descriptor.");
          E5RT::Status::Status(v38, 2, v37);
          E5RT::E5RTError::E5RTError(v34, &v39, v38);
        }
        v17 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(*(E5RT::MemoryObject **)a2);
        v18 = E5RT::BufferObject::GetSize(v17);
        v19 = *(E5RT::OperandDescriptor **)(a1 + 32);
        v20 = *(std::__shared_weak_count **)(a1 + 40);
        *(_QWORD *)&v39 = v19;
        *((_QWORD *)&v39 + 1) = v20;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(v19);
        v24 = E5RT::TensorDescriptor::GetSize(v23);
        if (v20)
        {
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if (v18 < v24)
        {
          v35 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v39, "BindMemoryObject");
          std::string::basic_string[abi:ne180100]<0>(v37, "Buffer size is insufficient for max tensor descriptor.");
          E5RT::Status::Status(v38, 2, v37);
          E5RT::E5RTError::E5RTError(v35, &v39, v38);
        }
      }
    }
    else
    {
      if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(*(void **)(a1 + 16)))
      {
        v36 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v39, "BindMemoryObject");
        std::string::basic_string[abi:ne180100]<0>(v37, "Unknown port descriptor type.");
        E5RT::Status::Status(v38, 2, v37);
        E5RT::E5RTError::E5RTError(v36, &v39, v38);
      }
      if (!E5RT::MemoryObject::TryAsSurface(*(void **)a2))
      {
        v33 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v39, "BindMemoryObject");
        std::string::basic_string[abi:ne180100]<0>(v37, "Invalid operation : Binding buffer objects to surface ports isn't allowed.");
        E5RT::Status::Status(v38, 2, v37);
        E5RT::E5RTError::E5RTError(v33, &v39, v38);
      }
      v10 = (E5RT::SurfaceObject *)E5RT::MemoryObject::TryAsSurface(*(void **)a2);
      v11 = (const E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor(*(E5RT::OperandDescriptor **)(a1 + 16));
      E5RT::SurfaceObject::ValidateSurfaceObjectMatchesWithDescriptor(v10, v11);
    }
    v27 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v28 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v27;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    v39 = 0uLL;
    std::shared_ptr<E5RT::SharedResource>::operator=[abi:ne180100](a1, &v39);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    a3 = 0;
  }
  *(_BYTE *)(a1 + 98) = a3;
}

void sub_190E37474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void *E5RT::OperandDescriptor::TensorDescriptor(E5RT::OperandDescriptor *this)
{
  void *result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "TensorDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v3, "Operand Descriptor is not a Tensor descriptor.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190E376CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDescriptorImpl::GetSize(E5RT::TensorDescriptorImpl *this)
{
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!*((_BYTE *)this + 104))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetSize");
    std::string::basic_string[abi:ne180100]<0>(v3, "Tensor size cannot be queried because all dimensions are not known.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return *((_QWORD *)this + 12);
}

void sub_190E377E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::MemoryObject::TryAsBuffer(void *this)
{
  if (this)
  return this;
}

{
  if (this)
  return this;
}

uint64_t E5RT::TensorDescriptor::GetSize(E5RT::TensorDescriptorImpl **this)
{
  return E5RT::TensorDescriptorImpl::GetSize(this[1]);
}

_QWORD *E5RT::IOPortPriv::IOPortPriv(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v6 = operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  E5RT::IOPortImpl::IOPortImpl(v6, &v15, a3);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = &off_1E2D59AC8;
  a1[1] = v7;
  return a1;
}

void sub_190E37948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x19401CD90](v9, 0x10E0C407094469FLL);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPortImpl::IOPortImpl(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void **v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  E5RT::OperandDescriptor *v9;
  E5RT::TensorDescriptor *v10;
  char HasKnownShape;
  E5RT::SurfaceDescriptor *v12;
  void *exception;
  _QWORD v15[3];
  _BYTE v16[8];
  _QWORD v17[3];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = *a2;
  v5 = (void **)(a1 + 16);
  v6 = a2[1];
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  std::unordered_set<std::string>::unordered_set(a1 + 56, a3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 96) = 256;
  *(_BYTE *)(a1 + 98) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "IOPortImpl");
    std::string::basic_string[abi:ne180100]<0>(v15, "Port descriptor cannot be NULL.");
    E5RT::Status::Status(v16, 1, v15);
    E5RT::E5RTError::E5RTError(exception, v17, v16);
  }
  v9 = (E5RT::OperandDescriptor *)*v5;
  v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(*v5);
  if (v10)
  {
    HasKnownShape = E5RT::TensorDescriptor::HasKnownShape(v10);
  }
  else
  {
    v12 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor(v9);
    HasKnownShape = E5RT::SurfaceDescriptor::GetSurfaceWidth(v12) != -1
                 && E5RT::SurfaceDescriptor::GetSurfaceHeight(v12) != -1;
  }
  *(_BYTE *)(a1 + 97) = HasKnownShape;
  E5RT::IOPortImpl::SetDynamic((_BYTE *)a1, HasKnownShape ^ 1);
  return a1;
}

void sub_190E37AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void *E5RT::OperandDescriptor::TryAsTensorDescriptor(void *this)
{
  if (this)
  return this;
}

uint64_t E5RT::TensorDescriptor::HasKnownShape(E5RT::TensorDescriptor *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 104);
}

_BYTE *E5RT::IOPortImpl::SetDynamic(_BYTE *this, char a2)
{
  void *exception;
  void *v3;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  if (this[48])
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "SetDynamic");
    std::string::basic_string[abi:ne180100]<0>(v4, "Port's dynamic nature cannot be changed while operation is in use in an execution stream.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  if ((a2 & 1) == 0 && !this[97])
  {
    v3 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "SetDynamic");
    std::string::basic_string[abi:ne180100]<0>(v4, "Port cannot be static while it's shape is unknown.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(v3, v6, v5);
  }
  this[96] = a2;
  return this;
}

void sub_190E37CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::MemoryObject::Buffer(E5RT::MemoryObject *this)
{
  void *result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "Buffer");
    std::string::basic_string[abi:ne180100]<0>(v3, "Bad cast failure.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

{
  void *result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "Buffer");
    std::string::basic_string[abi:ne180100]<0>(v3, "Bad cast failure.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190E37E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::IOBufferObject::GetSize(E5RT::IOBufferObject *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t E5RT::BufferObject::GetSize(E5RT::BufferObject *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::IOPort::HasKnownShape(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::HasKnownShape(this[1]);
}

uint64_t E5RT::IOPortImpl::HasKnownShape(E5RT::IOPortImpl *this)
{
  return *((unsigned __int8 *)this + 97);
}

uint64_t E5RT::E5FunctionImpl::GetBlocks(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 72;
}

uint64_t E5RT::E5OperandImpl::GetAddr(E5RT::E5OperandImpl *this)
{
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (*((_DWORD *)this + 10) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetAddr");
    std::string::basic_string[abi:ne180100]<0>(v3, "Dynamic allocation, no static allocation info available.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return *((_QWORD *)this + 6);
}

void sub_190E37FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::BufferObject::CreateBufferAlias@<X0>(E5RT::BufferObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 48))(&v6);
  v3 = (_QWORD *)operator new();
  v4 = v6;
  v6 = 0;
  E5RT::MemoryObject::MemoryObject(v3);
  *v3 = &off_1E2D59C08;
  v3[1] = v4;
  *a2 = v3;
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190E380C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  MEMORY[0x19401CD90](v10, 0xA1C40BD48D6D6);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

uint64_t E5RT::BufferObject::AllocMemory@<X0>(unint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  E5RT::MTLBufferObject *v6;
  _QWORD *v7;
  void *exception;
  void *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  __int128 v14;
  std::string::size_type v15;
  _BYTE v16[8];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[3];

  if (!a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "AllocMemory");
    std::string::basic_string[abi:ne180100]<0>(v20, "Invalid size(=0) specified.");
    E5RT::Status::Status(&v14, 1, v20);
    E5RT::E5RTError::E5RTError(exception, &v17, &v14);
  }
  v17 = 0x2B23404000000000;
  v18 = 0u;
  v19 = 0u;
  kdebug_trace();
  if (a2 == 2)
  {
    v6 = (E5RT::MTLBufferObject *)operator new();
    E5RT::MTLBufferObject::MTLBufferObject(v6, a1);
    v7 = (_QWORD *)operator new();
    v20[0] = 0;
    E5RT::MemoryObject::MemoryObject(v7);
  }
  else if (a2 == 1)
  {
    v6 = (E5RT::MTLBufferObject *)operator new();
    E5RT::HeapAllocatedBufferObject::HeapAllocatedBufferObject(v6, a1);
    v7 = (_QWORD *)operator new();
    v20[0] = 0;
    E5RT::MemoryObject::MemoryObject(v7);
  }
  else
  {
    if (a2)
    {
      v10 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v20, "AllocMemory");
      std::to_string(&v13, a2);
      v11 = std::string::insert(&v13, 0, "Invalid BufferType: ");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v15 = v11->__r_.__value_.__r.__words[2];
      v14 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v16, 1, &v14);
      E5RT::E5RTError::E5RTError(v10, v20, v16);
    }
    v6 = (E5RT::MTLBufferObject *)operator new();
    E5RT::IOBufferObject::IOBufferObject(v6, a1, 0);
    v7 = (_QWORD *)operator new();
    v20[0] = 0;
    E5RT::MemoryObject::MemoryObject(v7);
  }
  *v7 = &off_1E2D59C08;
  v7[1] = v6;
  *a3 = v7;
  return kdebug_trace();
}

void sub_190E383C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  E5RT::Status::~Status((E5RT::Status *)&a22);
  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((*(char *)(v28 - 33) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v28 - 33) & 0x80000000) == 0)
  {
LABEL_6:
    if (!v27)
    {
LABEL_11:
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a24);
      _Unwind_Resume(a1);
    }
LABEL_10:
    __cxa_free_exception(v26);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(*(void **)(v28 - 56));
  if ((v27 & 1) == 0)
    goto LABEL_11;
  goto LABEL_10;
}

void sub_190E385DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;

  E5RT::Status::~Status((E5RT::Status *)&a13);
  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

_QWORD *E5RT::MemoryObject::MemoryObject(_QWORD *this)
{
  *this = &off_1E2D59C28;
  return this;
}

{
  *this = &off_1E2D59C28;
  return this;
}

E5RT::IOBufferObject *E5RT::IOBufferObject::IOBufferObject(E5RT::IOBufferObject *this, __IOSurface *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void *exception;
  uint64_t ErrorCode;
  uint64_t ErrorMessage;
  _BYTE v13[8];
  _QWORD v14[3];
  _BYTE v15[8];

  v8 = E5RT::BufferObjectImpl::BufferObjectImpl(this);
  *v8 = &off_1E2D59FB8;
  v8[1] = a4;
  v8[2] = a3;
  *((_BYTE *)v8 + 24) = 1;
  v8[5] = 0;
  v8[6] = 0;
  v8[4] = a2;
  E5RT::IOBufferObject::InitBufferObject((CFTypeRef *)v8, (E5RT::Status *)v15);
  if (!E5RT::Status::Success((E5RT::Status *)v15))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "IOBufferObject");
    ErrorCode = E5RT::Status::GetErrorCode((E5RT::Status *)v15);
    ErrorMessage = E5RT::Status::GetErrorMessage((E5RT::Status *)v15);
    E5RT::Status::Status(v13, ErrorCode, ErrorMessage);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  E5RT::Status::~Status((E5RT::Status *)v15);
  return this;
}

void sub_190E38764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  E5RT::AsyncEventImpl *v6;
  va_list va;

  va_start(va, a6);
  E5RT::Status::~Status((E5RT::Status *)va);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v6);
  _Unwind_Resume(a1);
}

void sub_190E38780(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_190E38794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  E5RT::AsyncEventImpl *v17;
  void *v18;
  int v19;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      E5RT::Status::~Status((E5RT::Status *)&a17);
      E5RT::AsyncEventImpl::~AsyncEventImpl(v17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

E5RT::IOBufferObject *E5RT::IOBufferObject::IOBufferObject(E5RT::IOBufferObject *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  void *exception;
  uint64_t ErrorCode;
  uint64_t ErrorMessage;
  _BYTE v11[8];
  _QWORD v12[3];
  _BYTE v13[8];

  v6 = E5RT::BufferObjectImpl::BufferObjectImpl(this);
  *v6 = &off_1E2D59FB8;
  v6[1] = a2;
  v6[2] = 0;
  *((_BYTE *)v6 + 24) = 0;
  v6[5] = 0;
  v6[6] = a3;
  E5RT::IOBufferObject::InitBufferObject((CFTypeRef *)v6, (E5RT::Status *)v13);
  if (!E5RT::Status::Success((E5RT::Status *)v13))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "IOBufferObject");
    ErrorCode = E5RT::Status::GetErrorCode((E5RT::Status *)v13);
    ErrorMessage = E5RT::Status::GetErrorMessage((E5RT::Status *)v13);
    E5RT::Status::Status(v11, ErrorCode, ErrorMessage);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  E5RT::Status::~Status((E5RT::Status *)v13);
  return this;
}

void sub_190E388E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  E5RT::AsyncEventImpl *v6;
  va_list va;

  va_start(va, a6);
  E5RT::Status::~Status((E5RT::Status *)va);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v6);
  _Unwind_Resume(a1);
}

void sub_190E388FC(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_190E38910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  E5RT::AsyncEventImpl *v17;
  void *v18;
  int v19;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      E5RT::Status::~Status((E5RT::Status *)&a17);
      E5RT::AsyncEventImpl::~AsyncEventImpl(v17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

_QWORD *E5RT::BufferObjectImpl::BufferObjectImpl(_QWORD *this)
{
  *this = off_1E2D5AC60;
  return this;
}

BOOL E5RT::Status::Success(E5RT::Status *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 24) == 0;
}

void E5RT::Status::~Status(E5RT::Status *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x19401CD90](v1, 0x1012C405C87E9CELL);
  }
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x19401CD90](v1, 0x1012C405C87E9CELL);
  }
}

void E5RT::IOBufferObject::CreateBufferAliasImpl(E5RT::IOBufferObject *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, E5RT::IOBufferObject **a4@<X8>)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __IOSurface *ChildSurface;
  uint64_t v19;
  E5RT::IOBufferObject *v20;
  void *exception;
  void *v22;
  void *v23;
  _QWORD v24[3];
  _BYTE v25[8];
  _QWORD v26[3];
  _QWORD v27[7];
  _QWORD v28[9];

  v28[7] = *MEMORY[0x1E0C80C00];
  if (a3 + a2 > *((_QWORD *)this + 1))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CreateBufferAliasImpl");
    std::string::basic_string[abi:ne180100]<0>(v24, "Parent Memory object isn't adequately sized.");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(exception, v26, v25);
  }
  if (a3 + a2 < a2)
  {
    v22 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CreateBufferAliasImpl");
    std::string::basic_string[abi:ne180100]<0>(v24, "Invalid offset, size specified.");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(v22, v26, v25);
  }
  v27[0] = *MEMORY[0x1E0CBC1E0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *MEMORY[0x1E0CBC008];
  v28[0] = v8;
  v28[1] = &unk_1E2DED9A0;
  v10 = *MEMORY[0x1E0CBBF08];
  v27[1] = v9;
  v27[2] = v10;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *MEMORY[0x1E0CBBF00];
  v28[2] = v11;
  v28[3] = &unk_1E2DED9A0;
  v13 = *MEMORY[0x1E0CBC058];
  v27[3] = v12;
  v27[4] = v13;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v28[4] = v14;
  v27[5] = *MEMORY[0x1E0CBBEE0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v28[5] = v15;
  v27[6] = *MEMORY[0x1E0CBC070];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1278226488);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v28[6] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 7);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  ChildSurface = (__IOSurface *)IOSurfaceCreateChildSurface();
  if (!IOSurfaceGetBaseAddress(ChildSurface))
  {
    v23 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CreateBufferAliasImpl");
    std::string::basic_string[abi:ne180100]<0>(v24, "Failed to create child surface.");
    E5RT::Status::Status(v25, 3, v24);
    E5RT::E5RTError::E5RTError(v23, v26, v25);
  }
  v19 = *((_QWORD *)this + 2);
  v20 = (E5RT::IOBufferObject *)operator new();
  E5RT::IOBufferObject::IOBufferObject(v20, ChildSurface, v19 + a2, a3);
  v26[0] = v20;
  CFRelease(ChildSurface);
  *a4 = v20;

}

void sub_190E38D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100]((CFTypeRef **)&a17);

  _Unwind_Resume(a1);
}

void E5RT::IOPortPriv::BindMemoryObject(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  v7 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  E5RT::IOPortImpl::BindMemoryObject(v3, &v7, a3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_190E38F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_190E390D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190E390EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void **E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateDynamicCallables(void **result, const void ***a2)
{
  unint64_t v2;
  void **v3;
  const void **v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void *v10;
  void *exception;
  _QWORD v12[3];
  char v13[8];
  _QWORD v14[3];
  uint64_t v15;
  int v16[2];
  uint64_t v17;

  v2 = (unint64_t)result[24];
  if (v2)
  {
    v3 = result;
    v15 = 0;
    *(_QWORD *)v16 = 0;
    v17 = 0;
    v4 = *a2;
    v5 = a2[1];
    if (*a2 == v5)
    {
      v7 = 0;
      v6 = 0;
    }
    else
    {
      do
      {
        if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v4 + 16))(*v4) == 13)
        {
          E5RT::E5Operation::GetOperationAttributes<JitCallOpT>(*v4, v14);
          std::vector<std::string>::push_back[abi:ne180100]((uint64_t)&v15, v14[0] + 24);
          std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)v14);
        }
        else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v4 + 16))(*v4) == 12)
        {
          E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>(*v4, v14);
          std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v15, *(uint64_t *)v16, *(std::string **)(v14[0] + 48), *(std::string **)(v14[0] + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14[0] + 56) - *(_QWORD *)(v14[0] + 48)) >> 3));
          std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)v14);
        }
        else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v4 + 16))(*v4) == 8)
        {
          E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>(*v4, v14);
          std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v15, *(uint64_t *)v16, *(std::string **)(v14[0] + 64), *(std::string **)(v14[0] + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14[0] + 72) - *(_QWORD *)(v14[0] + 64)) >> 3));
          std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)v14);
        }
        v4 += 2;
      }
      while (v4 != v5);
      v2 = (unint64_t)v3[24];
      v7 = v15;
      v6 = *(_QWORD *)v16;
    }
    if (v2 > 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v14, "ValidateDynamicCallables");
      std::string::basic_string[abi:ne180100]<0>(v12, "# of dynamic callables is greater than # of callable functions across all operations.");
      E5RT::Status::Status(v13, 1, v12);
      E5RT::E5RTError::E5RTError(exception, v14, v13);
    }
    v8 = v3 + 23;
    while (1)
    {
      v8 = (void **)*v8;
      if (!v8)
        break;
      v9 = std::find[abi:ne180100]<std::__wrap_iter<std::string const*>,std::string>(v15, *(uint64_t *)v16, (unsigned __int8 **)v8 + 2);
      if (*(_QWORD *)v16 == v9)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not found as a callable function across all operations.", (const void **)v8 + 2, v14);
        v10 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v12, "ValidateDynamicCallables");
        E5RT::Status::Status(v13, 1, v14);
        E5RT::E5RTError::E5RTError(v10, v12, v13);
      }
    }
    return std::vector<std::string>::~vector[abi:ne180100]((void **)&v15);
  }
  return result;
}

void sub_190E39398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_190E393B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  std::vector<std::string>::~vector[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void sub_190E39484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::vector<std::string>::~vector[abi:ne180100](&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::E5FunctionImpl::GetIntermediateBufferSize(E5RT::E5FunctionImpl *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t E5RT::IsIOSurfaceSharedEventAvailable(E5RT *this)
{
  return 1;
}

uint64_t E5RT::SurfaceDescriptor::GetSurfaceHeight(E5RT::SurfaceDescriptor *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8);
}

uint64_t E5RT::SurfaceDescriptor::GetSurfaceWidth(E5RT::SurfaceDescriptor *this)
{
  return **((_QWORD **)this + 1);
}

void *E5RT::OperandDescriptor::SurfaceDescriptor(E5RT::OperandDescriptor *this)
{
  void *result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "SurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v3, "Operand Descriptor is not a Surface descriptor.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190E395E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::BufferObjectPriv::AllocBufferObjectFromIOSurfaceMemoryPool@<X0>(E5RT::BufferObjectPriv *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  E5RT::IOBufferObject *v6;
  _QWORD *v7;
  void *exception;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[3];
  _BYTE v14[8];

  if (!this)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "AllocBufferObjectFromIOSurfaceMemoryPool");
    std::string::basic_string[abi:ne180100]<0>(v13, "Invalid size(=0) specified.");
    E5RT::Status::Status(v14, 1, v13);
    E5RT::E5RTError::E5RTError(exception, &v10, v14);
  }
  v10 = 0x2B23404000000000;
  v11 = 0u;
  v12 = 0u;
  kdebug_trace();
  v6 = (E5RT::IOBufferObject *)operator new();
  E5RT::IOBufferObject::IOBufferObject(v6, (unint64_t)this, a2);
  v7 = (_QWORD *)operator new();
  v13[0] = 0;
  E5RT::MemoryObject::MemoryObject(v7);
  *v7 = &off_1E2D5ACA8;
  v7[1] = v6;
  *a3 = v7;
  return kdebug_trace();
}

void sub_190E397AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v4 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x19401CD90](v3, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100]((CFTypeRef **)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190E39828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t e5rt_tensor_desc_get_shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCE080;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190E39984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void UnPackSizePrefixedKernelInfo(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  _QWORD *v4;

  v3 = (int *)(a1 + 4 + *(unsigned int *)(a1 + 4));
  v4 = (_QWORD *)operator new();
  *v4 = 0;
  v4[1] = 0;
  KernelInfo::UnPackTo(v3, (uint64_t)v4);
  *a2 = v4;
}

void sub_190E39A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  std::default_delete<KernelInfoT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void KernelInfo::UnPackTo(int *a1, uint64_t a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 < 5u)
  {
    *(_DWORD *)a2 = 0;
    v5 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v5 < 7u)
      goto LABEL_10;
  }
  else
  {
    v4 = v3[2];
    if (v4)
      LODWORD(v4) = *(int *)((char *)a1 + v4);
    *(_DWORD *)a2 = v4;
    v5 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v5 < 7u)
    {
LABEL_10:
      v11 = *(_QWORD **)(a2 + 8);
      if (v11)
      {
        *(_QWORD *)(a2 + 8) = 0;
        goto LABEL_12;
      }
      return;
    }
  }
  v6 = v5[3];
  if (!v6)
    goto LABEL_10;
  v7 = (unsigned int *)((char *)a1 + v6);
  v8 = *v7;
  v9 = (int *)((char *)v7 + v8);
  v10 = *(_QWORD **)(a2 + 8);
  if (v10)
  {
    KernelArgFrame::UnPackTo((int *)((char *)v7 + v8), v10);
  }
  else
  {
    v16 = operator new();
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    KernelArgFrame::UnPackTo(v9, (_QWORD *)v16);
    v11 = *(_QWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v16;
    if (v11)
    {
LABEL_12:
      v12 = (void *)v11[11];
      if (v12)
      {
        v11[12] = v12;
        operator delete(v12);
      }
      v13 = (void *)v11[7];
      if (v13)
      {
        v11[8] = v13;
        operator delete(v13);
      }
      v14 = (void *)v11[4];
      if (v14)
      {
        v11[5] = v14;
        operator delete(v14);
      }
      v15 = (void *)v11[1];
      if (v15)
      {
        v11[2] = v15;
        operator delete(v15);
      }
      JUMPOUT(0x19401CD90);
    }
  }
}

void sub_190E39BB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;

  v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
  }
  sub_1910123A4(v1);
  MEMORY[0x19401CD90](v1, 0x1010C40FAD225F3);
  _Unwind_Resume(a1);
}

__n128 KernelArgFrame::UnPackTo(int *a1, _QWORD *a2)
{
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 **v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __n128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  __n128 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  __n128 *v66;
  __n128 *v67;
  uint64_t v68;
  __n128 v69;
  __n128 *v70;
  __n128 *v71;
  uint64_t v72;
  __n128 v73;
  __n128 *v74;
  __n128 *v75;
  uint64_t v76;
  __n128 v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  __n128 v81;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  v5 = *v4;
  if (v5 <= 4)
  {
    *a2 = 0;
LABEL_9:
    v14 = a2[1];
    if (a2[2] != v14)
      a2[2] = v14;
    goto LABEL_11;
  }
  v6 = v4[2];
  if (v4[2])
    v6 = *(_QWORD *)((char *)a1 + v6);
  *a2 = v6;
  if (v5 < 7)
    goto LABEL_9;
  v7 = v4[3];
  if (!v4[3])
    goto LABEL_9;
  v8 = *(unsigned int *)((char *)a1 + v7);
  v9 = a2[1];
  v10 = (__n128 **)(a2 + 1);
  v11 = *(unsigned int *)((char *)a1 + v7 + v8);
  v12 = (a2[2] - v9) >> 3;
  if (v11 <= v12)
  {
    if (v11 < v12)
      a2[2] = v9 + 8 * v11;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 1), v11 - v12);
    LODWORD(v11) = *(int *)((char *)a1 + v7 + v8);
  }
  if ((_DWORD)v11)
  {
    v52 = *v10;
    v53 = v11;
    if (v11 < 0xA || (unint64_t)((char *)v52 - ((char *)a1 + v7) - v8 - 4) < 0x20)
    {
      v54 = 0;
LABEL_56:
      v55 = (uint64_t *)((char *)&a1[2 * v54 + 1] + v8 + v7);
      v56 = &v52->n128_u64[v54];
      v57 = v53 - v54;
      do
      {
        v58 = *v55++;
        *v56++ = v58;
        --v57;
      }
      while (v57);
      goto LABEL_11;
    }
    v54 = v11 & 0xFFFFFFFC;
    v74 = (__n128 *)((char *)a1 + v8 + v7 + 20);
    v75 = v52 + 1;
    v76 = v53 & 0xFFFFFFFC;
    do
    {
      result = v74[-1];
      v77 = *v74;
      v75[-1] = result;
      *v75 = v77;
      v74 += 2;
      v75 += 2;
      v76 -= 4;
    }
    while (v76);
    if (v54 != v53)
      goto LABEL_56;
  }
LABEL_11:
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 9u && (v16 = v15[4]) != 0)
  {
    v17 = *(unsigned int *)((char *)a1 + v16);
    v18 = a2[4];
    v19 = *(unsigned int *)((char *)a1 + v16 + v17);
    v20 = (a2[5] - v18) >> 3;
    if (v19 <= v20)
    {
      if (v19 < v20)
        a2[5] = v18 + 8 * v19;
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 4), v19 - v20);
      LODWORD(v19) = *(int *)((char *)a1 + v16 + v17);
    }
    if ((_DWORD)v19)
    {
      v22 = (__n128 *)a2[4];
      v23 = v19;
      if (v19 < 0xA || (unint64_t)((char *)v22 - ((char *)a1 + v16) - v17 - 4) < 0x20)
      {
        v24 = 0;
LABEL_23:
        v25 = (uint64_t *)((char *)&a1[2 * v24 + 1] + v17 + v16);
        v26 = &v22->n128_u64[v24];
        v27 = v23 - v24;
        do
        {
          v28 = *v25++;
          *v26++ = v28;
          --v27;
        }
        while (v27);
        goto LABEL_25;
      }
      v24 = v19 & 0xFFFFFFFC;
      v66 = (__n128 *)((char *)a1 + v17 + v16 + 20);
      v67 = v22 + 1;
      v68 = v23 & 0xFFFFFFFC;
      do
      {
        result = v66[-1];
        v69 = *v66;
        v67[-1] = result;
        *v67 = v69;
        v66 += 2;
        v67 += 2;
        v68 -= 4;
      }
      while (v68);
      if (v24 != v23)
        goto LABEL_23;
    }
  }
  else
  {
    v21 = a2[4];
    if (a2[5] != v21)
      a2[5] = v21;
  }
LABEL_25:
  v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0xBu && (v30 = v29[5]) != 0)
  {
    v31 = *(unsigned int *)((char *)a1 + v30);
    v32 = a2[7];
    v33 = *(unsigned int *)((char *)a1 + v30 + v31);
    v34 = (a2[8] - v32) >> 3;
    if (v33 <= v34)
    {
      if (v33 < v34)
        a2[8] = v32 + 8 * v33;
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 7), v33 - v34);
      LODWORD(v33) = *(int *)((char *)a1 + v30 + v31);
    }
    if ((_DWORD)v33)
    {
      v36 = (__n128 *)a2[7];
      v37 = v33;
      if (v33 < 0xA || (unint64_t)((char *)v36 - ((char *)a1 + v30) - v31 - 4) < 0x20)
      {
        v38 = 0;
LABEL_37:
        v39 = (uint64_t *)((char *)&a1[2 * v38 + 1] + v31 + v30);
        v40 = &v36->n128_u64[v38];
        v41 = v37 - v38;
        do
        {
          v42 = *v39++;
          *v40++ = v42;
          --v41;
        }
        while (v41);
        goto LABEL_39;
      }
      v38 = v33 & 0xFFFFFFFC;
      v70 = (__n128 *)((char *)a1 + v31 + v30 + 20);
      v71 = v36 + 1;
      v72 = v37 & 0xFFFFFFFC;
      do
      {
        result = v70[-1];
        v73 = *v70;
        v71[-1] = result;
        *v71 = v73;
        v70 += 2;
        v71 += 2;
        v72 -= 4;
      }
      while (v72);
      if (v38 != v37)
        goto LABEL_37;
    }
  }
  else
  {
    v35 = a2[7];
    if (a2[8] != v35)
      a2[8] = v35;
  }
LABEL_39:
  v43 = (unsigned __int16 *)((char *)a1 - *a1);
  v44 = *v43;
  if (v44 <= 0xC)
  {
    a2[10] = 0;
LABEL_47:
    v51 = a2[11];
    if (a2[12] != v51)
      a2[12] = v51;
    return result;
  }
  v45 = v43[6];
  if (v43[6])
    v45 = *(_QWORD *)((char *)a1 + v45);
  a2[10] = v45;
  if (v44 < 0xF)
    goto LABEL_47;
  v46 = v43[7];
  if (!v43[7])
    goto LABEL_47;
  v47 = *(unsigned int *)((char *)a1 + v46);
  v48 = a2[11];
  v49 = *(unsigned int *)((char *)a1 + v46 + v47);
  v50 = (a2[12] - v48) >> 3;
  if (v49 <= v50)
  {
    if (v49 < v50)
      a2[12] = v48 + 8 * v49;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 11), v49 - v50);
    LODWORD(v49) = *(int *)((char *)a1 + v46 + v47);
  }
  if ((_DWORD)v49)
  {
    v59 = (__n128 *)a2[11];
    v60 = v49;
    if (v49 < 0xA || (unint64_t)((char *)v59 - ((char *)a1 + v46) - v47 - 4) < 0x20)
    {
      v61 = 0;
LABEL_65:
      v62 = (uint64_t *)((char *)&a1[2 * v61 + 1] + v47 + v46);
      v63 = &v59->n128_u64[v61];
      v64 = v60 - v61;
      do
      {
        v65 = *v62++;
        *v63++ = v65;
        --v64;
      }
      while (v64);
      return result;
    }
    v61 = v49 & 0xFFFFFFFC;
    v78 = (__n128 *)((char *)a1 + v47 + v46 + 20);
    v79 = v59 + 1;
    v80 = v60 & 0xFFFFFFFC;
    do
    {
      result = v78[-1];
      v81 = *v78;
      v79[-1] = result;
      *v79 = v81;
      v78 += 2;
      v79 += 2;
      v80 -= 4;
    }
    while (v80);
    if (v61 != v60)
      goto LABEL_65;
  }
  return result;
}

uint64_t e5rt_tensor_desc_dtype_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCD760;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190E3A114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *E5RT::Ops::CpuInferenceOperation::CpuInferenceOperation(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;

  v10 = *(__int128 **)a3;
  v11 = atomic_load((unsigned __int8 *)&qword_1EE2147B8);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1EE2147B8))
  {
    v16 = operator new();
    *(_OWORD *)v16 = xmmword_191A76190;
    *(_QWORD *)(v16 + 16) = 0x2B23805C2B238050;
    qword_1EE2147B0 = v16;
    __cxa_guard_release(&qword_1EE2147B8);
  }
  E5RT::Ops::BaseEirInferenceOperation::BaseEirInferenceOperation((uint64_t)a1, 2, v10, a2, (__int128 *)qword_1EE2147B0, a4, a5);
  *a1 = &off_1E2D5B778;
  v12 = *(_QWORD *)(a3 + 8);
  a1[48] = *(_QWORD *)a3;
  a1[49] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  a1[29] |= 3uLL;
  return a1;
}

void sub_190E3A254(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE2147B8);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::BaseEirInferenceOperation(uint64_t a1, int a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  void **v12;
  void **v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  E5RT::Ops::BaseEirInferenceOperation::Impl **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  E5RT::Ops::BaseEirInferenceOperation::Impl *v23;
  E5RT::Ops::BaseEirInferenceOperation::Impl *v24;
  void *v26[6];

  memset(v26, 0, 32);
  LODWORD(v26[4]) = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal(a1, (__int128 *)a4, a6, a7, (uint64_t)v26);
  v12 = (void **)v26[2];
  if (v26[2])
  {
    do
    {
      while (1)
      {
        v13 = (void **)*v12;
        v14 = (std::__shared_weak_count *)v12[6];
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (*((char *)v12 + 39) < 0)
          break;
        operator delete(v12);
        v12 = v13;
        if (!v13)
          goto LABEL_11;
      }
      operator delete(v12[2]);
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
LABEL_11:
  v17 = v26[0];
  v26[0] = 0;
  if (v17)
    operator delete(v17);
  *(_QWORD *)a1 = off_1E2D5BAA8;
  v18 = (E5RT::Ops::BaseEirInferenceOperation::Impl **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  v19 = *a5;
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(a1 + 304) = v19;
  *(_DWORD *)(a1 + 328) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 336), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v20 = *a3;
    *(_QWORD *)(a1 + 352) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 336) = v20;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 360), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    v21 = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 360) = v21;
  }
  v22 = *(_DWORD *)(a1 + 304);
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  LODWORD(v26[0]) = 0;
  HIDWORD(v26[0]) = v22;
  memset(&v26[1], 0, 32);
  kdebug_trace();
  v23 = (E5RT::Ops::BaseEirInferenceOperation::Impl *)operator new();
  E5RT::Ops::BaseEirInferenceOperation::Impl::Impl(v23, (E5RT::ExecutionStreamOperationInternal *)a1);
  v24 = *v18;
  *v18 = v23;
  if (v24)
  {
    E5RT::Ops::BaseEirInferenceOperation::Impl::~Impl(v24);
    MEMORY[0x19401CD90]();
  }
  *(_QWORD *)(a1 + 232) |= 1uLL;
  kdebug_trace();
  return a1;
}

void sub_190E3A498(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::Ops::BaseEirInferenceOperation::Impl **v2;
  void **v3;

  if ((v1[359] & 0x80000000) == 0)
  {
    std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl>>::~propagate_const(v2);
    E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal((E5RT::ExecutionStreamOperationInternal *)v1);
    _Unwind_Resume(a1);
  }
  operator delete(*v3);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal((E5RT::ExecutionStreamOperationInternal *)v1);
  _Unwind_Resume(a1);
}

void sub_190E3A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

E5RT::Ops::BaseEirInferenceOperation::Impl *E5RT::Ops::BaseEirInferenceOperation::Impl::Impl(E5RT::Ops::BaseEirInferenceOperation::Impl *this, E5RT::ExecutionStreamOperationInternal *a2)
{
  void *exception;
  void *v5;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[3];

  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = a2;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *((_QWORD *)this + 15) = 0;
  *((_WORD *)this + 64) = 0;
  if (!*(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a2) + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v6, "No outputs specified.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  if (*(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                 + 24))
  {
    v5 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v6, "InOut ports are not supported by EIR op yet.");
    E5RT::Status::Status(v7, 1, v6);
    E5RT::E5RTError::E5RTError(v5, v8, v7);
  }
  return this;
}

void sub_190E3A6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](v24);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v23);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

E5RT::SurfaceDescriptor *E5RT::Ops::BaseEirInferenceOperation::Impl::Initialize(uint64_t a1, uint64_t *a2)
{
  uint64_t InputPorts;
  E5RT::SurfaceDescriptor *result;
  E5RT::SurfaceDescriptor *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *i;
  int v9;
  char *v10;
  uint64_t **v11;
  uint64_t v12;
  char *v13;
  void *PortDescriptorRef;
  _QWORD *v15;
  E5RT::IOPortImpl **v16;
  void *v17;
  void *v18;
  void *v19;
  void *exception;
  void *v21;
  _QWORD v22[3];
  _BYTE v23[8];
  _QWORD v24[3];
  __int128 v25;
  uint64_t v26;

  std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::operator=[abi:ne180100]((uint64_t *)(a1 + 120), a2);
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  result = (E5RT::SurfaceDescriptor *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v5 = result;
  v25 = xmmword_191A71260;
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_DWORD **)(v6 + 24);
  for (i = *(_DWORD **)(v6 + 32); v7 != i; ++v7)
  {
    v9 = *v7 - 1;
    v10 = (char *)&v26;
    if (v9 <= 6)
    {
      v10 = (char *)&v26;
      if (((0x47u >> v9) & 1) != 0)
        v10 = (char *)&v25 + 4 * qword_191A71338[v9];
    }
    if (v10 - (char *)&v25 == 16)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v24, "Initialize");
      std::string::basic_string[abi:ne180100]<0>(v22, "Unsupported surface format requested to EIR operation.");
      E5RT::Status::Status(v23, 2, v22);
      E5RT::E5RTError::E5RTError(exception, v24, v23);
    }
  }
  v11 = *(uint64_t ***)(InputPorts + 16);
  if (v11)
  {
    while (1)
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v11[5]);
      result = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef);
      if (result)
        break;
LABEL_12:
      v11 = (uint64_t **)*v11;
      if (!v11)
        goto LABEL_21;
    }
    result = (E5RT::SurfaceDescriptor *)E5RT::SurfaceDescriptor::GetSurfaceFormat(result);
    if ((_DWORD)v25 == (_DWORD)result)
    {
      v12 = 0;
    }
    else if (DWORD1(v25) == (_DWORD)result)
    {
      v12 = 1;
    }
    else if (DWORD2(v25) == (_DWORD)result)
    {
      v12 = 2;
    }
    else
    {
      v13 = (char *)&v26;
      if (HIDWORD(v25) != (_DWORD)result)
      {
LABEL_11:
        if (v13 - (char *)&v25 == 16)
        {
          v21 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v24, "Initialize");
          std::string::basic_string[abi:ne180100]<0>(v22, "Unsupported surface format for input to EIR segment.");
          E5RT::Status::Status(v23, 2, v22);
          E5RT::E5RTError::E5RTError(v21, v24, v23);
        }
        goto LABEL_12;
      }
      v12 = 3;
    }
    v13 = (char *)((unint64_t)&v25 | (4 * v12));
    goto LABEL_11;
  }
LABEL_21:
  v15 = (_QWORD *)((char *)v5 + 16);
  while (1)
  {
    v15 = (_QWORD *)*v15;
    if (!v15)
      break;
    v16 = (E5RT::IOPortImpl **)v15[5];
    if (!v16)
    {
      v19 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v24, "Initialize");
      std::string::basic_string[abi:ne180100]<0>(v22, "Invalid output port.");
      E5RT::Status::Status(v23, 1, v22);
      E5RT::E5RTError::E5RTError(v19, v24, v23);
    }
    v17 = (void *)E5RT::IOPort::GetPortDescriptorRef(v16);
    result = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v17);
    if (result)
    {
      v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v24, "Initialize");
      std::string::basic_string[abi:ne180100]<0>(v22, "Output surface ports aren't supported with EIR inference yet.");
      E5RT::Status::Status(v23, 2, v22);
      E5RT::E5RTError::E5RTError(v18, v24, v23);
    }
  }
  *(_BYTE *)(a1 + 129) = 1;
  return result;
}

void sub_190E3AAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if ((v23 & 1) != 0)
    __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateUserInputsToReshape(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  E5RT::TensorDescriptor *v21;
  E5RT::TensorDescriptor *v22;
  unint64_t Rank;
  uint64_t TensorDataTypeRef;
  uint64_t v25;
  uint64_t TensorShape;
  unint64_t **v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *exception;
  void *v44;
  std::logic_error *v45;
  E5RT::OperandDescriptor *v46;
  std::__shared_weak_count *v47;
  char *v48;
  __int128 v49;
  _BYTE v50[8];
  char *v51;
  __int128 v52;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
  v5 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  if (*(_QWORD *)(a2 + 24) != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3)
                             - 0x5555555555555555 * ((uint64_t)(v5[1] - *v5) >> 3))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v51, "ValidateUserInputsToReshape");
    std::string::basic_string[abi:ne180100]<0>(&v48, "Require new shapes for all inputs/inouts to reshape.");
    E5RT::Status::Status(&v46, 1, &v48);
    E5RT::E5RTError::E5RTError(exception, &v51, &v46);
  }
  v6 = *(uint64_t ***)(a2 + 16);
  if (v6)
  {
    v7 = v5;
    v8 = v5 + 3;
    do
    {
      v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v4 + 3, (uint64_t)(v6 + 2));
      if (v9)
      {
        v10 = v9[5];
        v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v8, (uint64_t)(v6 + 2));
        if (v11)
          goto LABEL_7;
      }
      else
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
        v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v8, (uint64_t)(v6 + 2));
        if (v11)
        {
LABEL_7:
          v12 = v11[5];
          v13 = *v4;
          v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
          v15 = v10 >= v14;
          if (v10 == v14)
            goto LABEL_8;
          goto LABEL_13;
        }
      }
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3);
      v13 = *v4;
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
      v15 = v10 >= v19;
      if (v10 == v19)
      {
LABEL_8:
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3);
        if (v12 == v16)
        {
          v44 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v51, "operator()");
          std::string::basic_string[abi:ne180100]<0>(&v48, "Unknown operand name given for reshaping.");
          E5RT::Status::Status(v50, 2, &v48);
          E5RT::E5RTError::E5RTError(v44, &v51, v50);
        }
        if (v12 >= v16)
        {
LABEL_38:
          v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::out_of_range::out_of_range[abi:ne180100](v45, "iterator out of range");
          __cxa_throw(v45, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        v17 = *v7 + 24 * v12;
        v18 = v7;
        goto LABEL_15;
      }
LABEL_13:
      if (v15)
        goto LABEL_38;
      v17 = v13 + 24 * v10;
      v18 = v4;
LABEL_15:
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v18 + 8, v17);
      (*(void (**)(E5RT::OperandDescriptor **__return_ptr))(*(_QWORD *)v20[5] + 16))(&v46);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v46))
      {
        v39 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v51, "ValidateUserInputsToReshape");
        std::string::basic_string[abi:ne180100]<0>(&v48, "Reshaping is not supported for surface descriptors.");
        E5RT::Status::Status(v50, 2, &v48);
        E5RT::E5RTError::E5RTError(v39, &v51, v50);
      }
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v6[5]))
      {
        v40 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v51, "ValidateUserInputsToReshape");
        std::string::basic_string[abi:ne180100]<0>(&v48, "Cannot reshape a tensor into a surface.");
        E5RT::Status::Status(v50, 2, &v48);
        E5RT::E5RTError::E5RTError(v40, &v51, v50);
      }
      v21 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v46);
      v22 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v6[5]);
      Rank = E5RT::TensorDescriptor::GetRank(v21);
      if (Rank != E5RT::TensorDescriptor::GetRank(v22))
      {
        v41 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v51, "ValidateUserInputsToReshape");
        std::string::basic_string[abi:ne180100]<0>(&v48, "Cannot reshape tensor to a different rank.");
        E5RT::Status::Status(v50, 2, &v48);
        E5RT::E5RTError::E5RTError(v41, &v51, v50);
      }
      TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v21);
      v25 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v22);
      if (E5RT::operator!=(TensorDataTypeRef, v25))
      {
        v42 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v51, "ValidateUserInputsToReshape");
        std::string::basic_string[abi:ne180100]<0>(&v48, "Cannot reshape tensor to a different TensorDataType (component pack or component data type) than in E5.");
        E5RT::Status::Status(v50, 2, &v48);
        E5RT::E5RTError::E5RTError(v42, &v51, v50);
      }
      TensorShape = E5RT::TensorDescriptor::GetTensorShape(v21);
      v27 = (unint64_t **)E5RT::TensorDescriptor::GetTensorShape(v22);
      v28 = *(unint64_t **)TensorShape;
      v29 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
      if (v29)
      {
        v30 = v29 >> 3;
        v31 = *v27;
        if (v30 <= 1)
          v30 = 1;
        do
        {
          v33 = *v28++;
          v32 = v33;
          v34 = *v31++;
          if (v32 < v34)
          {
            v38 = __cxa_allocate_exception(0x18uLL);
            v51 = (char *)operator new(0x20uLL);
            v52 = xmmword_191A78340;
            strcpy(v51, "ValidateUserInputsToReshape");
            v48 = (char *)operator new(0x50uLL);
            v49 = xmmword_191A717D0;
            strcpy(v48, "Cannot reshape a tensor to a dimension of length longer than original in E5.");
            E5RT::Status::Status(v50, 2, &v48);
            E5RT::E5RTError::E5RTError(v38, &v51, v50);
          }
          --v30;
        }
        while (v30);
      }
      v35 = v47;
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v6 = (uint64_t **)*v6;
    }
    while (v6);
  }
}

void sub_190E3B23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v25)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::CastOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InputPorts;
  uint64_t OutputPorts;
  _QWORD *v7;
  _QWORD *v8;
  void *PortDescriptorRef;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  E5RT::IOPortImpl **v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int IsDynamic;
  E5RT::OperandDescriptor *v19;
  E5RT::TensorDescriptor *v20;
  E5RT::OperandDescriptor *v21;
  E5RT::TensorDescriptor *v22;
  uint64_t TensorShape;
  uint64_t v24;
  size_t v25;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  int NumComponents;
  E5RT::TensorDataType::Impl **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *TensorStrides;
  _QWORD *v33;
  unint64_t Rank;
  unsigned int ElementSize;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v45;
  std::runtime_error *v46;
  void *v47;
  void *v48;
  void *exception;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _QWORD v55[3];
  _BYTE v56[8];
  _QWORD v57[3];
  E5RT::TensorDataType::Impl *v58[3];

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (**(_DWORD **)(a1 + 8) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op not yet supported on non-CPU devices.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(exception, v58, v55);
  }
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (*(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    v50 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "InOut ports are not supported by Cast op yet.");
    E5RT::Status::Status(v55, 1, v57);
    E5RT::E5RTError::E5RTError(v50, v58, v55);
  }
  if (*(_QWORD *)(InputPorts + 24) != 1 || *(_QWORD *)(OutputPorts + 24) != 1)
  {
    v48 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op supports only single input and single output.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(v48, v58, v55);
  }
  v7 = (_QWORD *)(InputPorts + 16);
  v8 = v7;
  while (1)
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      break;
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v8[5]);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      v10 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v57, "Input surface ports aren't supported with cast operation yet.");
      E5RT::Status::Status(v55, 2, v57);
      E5RT::E5RTError::E5RTError(v10, v58, v55);
    }
  }
  v11 = (_QWORD *)(OutputPorts + 16);
  v12 = v11;
  while (1)
  {
    v12 = (_QWORD *)*v12;
    if (!v12)
      break;
    v13 = (E5RT::IOPortImpl **)v12[5];
    if (!v13)
    {
      v45 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v57, "Invalid output port.");
      E5RT::Status::Status(v55, 1, v57);
      E5RT::E5RTError::E5RTError(v45, v58, v55);
    }
    v14 = (void *)E5RT::IOPort::GetPortDescriptorRef(v13);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v14))
    {
      v15 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v57, "Output surface ports aren't supported with cast operation yet.");
      E5RT::Status::Status(v55, 2, v57);
      E5RT::E5RTError::E5RTError(v15, v58, v55);
    }
  }
  v16 = *v7;
  v17 = *v11;
  IsDynamic = E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v16 + 40));
  if (IsDynamic != E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v17 + 40)))
  {
    v51 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op requires input & output to be both static or both dynamic.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(v51, v58, v55);
  }
  v19 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v16 + 40));
  v20 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v19);
  v21 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v17 + 40));
  v22 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v21);
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v20);
  v24 = E5RT::TensorDescriptor::GetTensorShape(v22);
  v25 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v25 != *(_QWORD *)(v24 + 8) - *(_QWORD *)v24 || memcmp(*(const void **)TensorShape, *(const void **)v24, v25))
  {
    v52 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op does not support re-shaping tensors.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(v52, v58, v55);
  }
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v20);
  NumComponents = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
  v28 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v22);
  if (NumComponents != E5RT::TensorDataType::GetNumComponents(v28))
  {
    v53 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op requires input and output to have same number of components.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(v53, v58, v55);
  }
  v29 = *(_QWORD *)(a1 + 8);
  v31 = *(_QWORD *)(v29 + 8);
  v30 = *(_QWORD *)(v29 + 16);
  if (v30 != v31)
  {
    if ((v30 - v31) >> 3 != E5RT::TensorDescriptor::GetRank(v20))
    {
      v54 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v57, "Output alignments specified in E5 does not match input rank.");
      E5RT::Status::Status(v55, 2, v57);
      E5RT::E5RTError::E5RTError(v54, v58, v55);
    }
    TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(v22);
    v33 = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v22);
    Rank = E5RT::TensorDescriptor::GetRank(v22);
    if (Rank && *(_QWORD *)*TensorStrides != 0x7FFFFFFFFFFFFFFFLL)
    {
      E5RT::TensorDescriptor::GetTensorDataType(v22, (E5RT::TensorDataType *)v58);
      ElementSize = E5RT::TensorDataType::GetElementSize(v58);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v58);
      memset(v58, 0, sizeof(v58));
      if (Rank >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v36 = operator new(8 * Rank);
      bzero(v36, 8 * Rank);
      v37 = ElementSize;
      v38 = *v33 - 8;
      v39 = *TensorStrides - 8;
      v40 = *(_QWORD *)(v29 + 8) - 8;
      do
      {
        v41 = *(_QWORD *)(v40 + 8 * Rank);
        if (!v41)
        {
          v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v46, "Invalid argument.");
          __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v42 = (v37 + v41 - 1) / v41 * v41;
        *((_QWORD *)v36 + Rank - 1) = v42;
        if (v42 != *(_QWORD *)(v39 + 8 * Rank))
        {
          v47 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v57, "Impl");
          std::string::basic_string[abi:ne180100]<0>(v55, "Output alignment specified in E5 does not match with output tensor descriptor.");
          E5RT::Status::Status(v56, 2, v55);
          E5RT::E5RTError::E5RTError(v47, v57, v56);
        }
        v43 = *(_QWORD *)(v38 + 8 * Rank--);
        v37 = v43 * v42;
      }
      while ((uint64_t)(Rank + 1) > 1);
      operator delete(v36);
    }
  }
  return a1;
}

void sub_190E3BC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&__p);
  v29 = *(std::__shared_weak_count **)(v27 + 16);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPort::GetPortDescriptorRef(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::GetPortDescriptorRef(this[1]);
}

uint64_t E5RT::IOPortImpl::GetPortDescriptorRef(E5RT::IOPortImpl *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t E5RT::TensorDescriptor::GetTensorShape(E5RT::TensorDescriptor *this)
{
  return *((_QWORD *)this + 1) + 24;
}

uint64_t E5RT::TensorDescriptor::GetTensorDataTypeRef(E5RT::TensorDescriptor *this)
{
  return *((_QWORD *)this + 1) + 72;
}

void *E5RT::OperandDescriptor::TryAsSurfaceDescriptor(void *this)
{
  if (this)
  return this;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetInOutPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 96;
}

uint64_t E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  E5RT::IOPortImpl **v16;
  _QWORD *i;
  E5RT::IOPortImpl **v18;
  _QWORD *v19;
  E5RT::IOPortImpl **v20;
  void *v22;
  void *exception;
  void *v24;
  _BYTE v25[24];
  _BYTE v26[8];
  _QWORD v27[3];

  v10 = E5RT::ExecutionStreamOperation::ExecutionStreamOperation((_QWORD *)a1);
  *v10 = off_1E2D5B1F8;
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)(v10 + 2), a3);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(a1 + 56, a4);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(a1 + 96, a5);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 192), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 192) = v11;
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  do
    v12 = __ldaxr(&E5RT::ExecutionStreamOperationInternal::m_traceIdentifier_counter);
  while (__stlxr(v12 + 1, &E5RT::ExecutionStreamOperationInternal::m_traceIdentifier_counter));
  *(_QWORD *)(a1 + 280) = v12;
  *(_WORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 290) = 0;
  *(_BYTE *)(a1 + 248) &= 0xE0u;
  *(_QWORD *)(a1 + 8) = a1;
  v13 = kdebug_trace_string();
  v14 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 264) = v13;
  *(_QWORD *)(a1 + 272) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (_QWORD *)(a1 + 32);
  while (1)
  {
    v15 = (_QWORD *)*v15;
    if (!v15)
      break;
    v16 = (E5RT::IOPortImpl **)v15[5];
    if (!v16)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v27, "ExecutionStreamOperationInternal");
      std::operator+<char>();
      E5RT::Status::Status(v26, 1, v25);
      E5RT::E5RTError::E5RTError(exception, v27, v26);
    }
    if (E5RT::IOPort::IsDynamic(v16))
    {
      *(_BYTE *)(a1 + 288) = 1;
      break;
    }
  }
  for (i = *(_QWORD **)(a1 + 72); i; i = (_QWORD *)*i)
  {
    v18 = (E5RT::IOPortImpl **)i[5];
    if (!v18)
    {
      v22 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v27, "ExecutionStreamOperationInternal");
      std::operator+<char>();
      E5RT::Status::Status(v26, 1, v25);
      E5RT::E5RTError::E5RTError(v22, v27, v26);
    }
    if (E5RT::IOPort::IsDynamic(v18))
      *(_BYTE *)(a1 + 289) = 1;
  }
  v19 = (_QWORD *)(a1 + 112);
  while (1)
  {
    v19 = (_QWORD *)*v19;
    if (!v19)
      break;
    v20 = (E5RT::IOPortImpl **)v19[5];
    if (!v20)
    {
      v24 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v27, "ExecutionStreamOperationInternal");
      std::operator+<char>();
      E5RT::Status::Status(v26, 1, v25);
      E5RT::E5RTError::E5RTError(v24, v27, v26);
    }
    if (E5RT::IOPort::IsDynamic(v20))
    {
      *(_BYTE *)(a1 + 290) = 1;
      return a1;
    }
  }
  return a1;
}

void sub_190E3C228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::ExecutionStreamOperation *v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  void **v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  void **v43;
  void **v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  void **v49;
  void **v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;

  v28 = (std::__shared_weak_count *)*((_QWORD *)v22 + 23);
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (_QWORD *)*((_QWORD *)v22 + 19);
  while (v31)
  {
    v34 = v31;
    v31 = (_QWORD *)*v31;
    v35 = (std::__shared_weak_count *)v34[3];
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    operator delete(v34);
  }
  v32 = *v26;
  *v26 = 0;
  if (v32)
    operator delete(v32);
  v33 = (void **)*((_QWORD *)v22 + 14);
  if (v33)
  {
    do
    {
      while (1)
      {
        v38 = (void **)*v33;
        v39 = (std::__shared_weak_count *)v33[6];
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (*((char *)v33 + 39) < 0)
          break;
        operator delete(v33);
        v33 = v38;
        if (!v38)
          goto LABEL_25;
      }
      operator delete(v33[2]);
      operator delete(v33);
      v33 = v38;
    }
    while (v38);
  }
LABEL_25:
  v42 = *v25;
  *v25 = 0;
  if (v42)
    operator delete(v42);
  v43 = (void **)*((_QWORD *)v22 + 9);
  if (v43)
  {
    do
    {
      while (1)
      {
        v44 = (void **)*v43;
        v45 = (std::__shared_weak_count *)v43[6];
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (*((char *)v43 + 39) < 0)
          break;
        operator delete(v43);
        v43 = v44;
        if (!v44)
          goto LABEL_37;
      }
      operator delete(v43[2]);
      operator delete(v43);
      v43 = v44;
    }
    while (v44);
  }
LABEL_37:
  v48 = *v24;
  *v24 = 0;
  if (v48)
    operator delete(v48);
  v49 = (void **)*((_QWORD *)v22 + 4);
  if (v49)
  {
    do
    {
      while (1)
      {
        v50 = (void **)*v49;
        v51 = (std::__shared_weak_count *)v49[6];
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (*((char *)v49 + 39) < 0)
          break;
        operator delete(v49);
        v49 = v50;
        if (!v50)
          goto LABEL_49;
      }
      operator delete(v49[2]);
      operator delete(v49);
      v49 = v50;
    }
    while (v50);
  }
LABEL_49:
  v54 = *v23;
  *v23 = 0;
  if (v54)
    operator delete(v54);
  E5RT::ExecutionStreamOperation::~ExecutionStreamOperation(v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPort::IsDynamic(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::IsDynamic(this[1]);
}

uint64_t E5RT::IOPortImpl::IsDynamic(E5RT::IOPortImpl *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_190E3C6F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190E3C704(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x38uLL);
  v45[0] = v25;
  v45[1] = a1 + 16;
  v46 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v27 = *(_QWORD *)(a3 + 32);
  v25[5] = *(_QWORD *)(a3 + 24);
  v25[6] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_71:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v42 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v42 & v10;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v10));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_60;
    }
LABEL_84:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v43 >= v11)
          v43 %= v11;
      }
      else
      {
        v43 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_95;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_84;
LABEL_60:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_95:
  v14 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190E3CB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E3CB88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::ExecutionStreamOperation::ExecutionStreamOperation(_QWORD *this)
{
  *this = &off_1E2D5B118;
  return this;
}

{
  *this = &off_1E2D5B118;
  return this;
}

E5RT::TensorDataType *E5RT::TensorDescriptor::GetTensorDataType@<X0>(E5RT::TensorDescriptor *this@<X0>, E5RT::TensorDataType *a2@<X8>)
{
  return E5RT::TensorDataType::TensorDataType(a2, (const E5RT::TensorDataType *)(*((_QWORD *)this + 1) + 72));
}

void Espresso::cpu_context_transfer_algo_t::compute_local_costs_v3(_QWORD *a1, uint64_t a2, uint64_t **a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t PlatformHeuristics;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  Espresso *v57;
  const char *v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _DWORD *v74;
  float engine_gflops_per_s;
  int v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  void *v83;
  _BYTE *v84;
  unint64_t *v85;
  unint64_t v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _DWORD *v97;
  std::__shared_weak_count *v98;
  void *v99;
  void *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  const void *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  float v121;
  float v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  std::__shared_weak_count *v136;
  const void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  int v141;
  char v142;
  unint64_t v143;
  int *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  int v148;
  char v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  int v156;
  char v157;
  unint64_t v158;
  double v159;
  uint64_t v161;
  const void *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  int *v173;
  int v174;
  int v176;
  int v177;
  uint64_t v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  double v184;
  float v185;
  double v186;
  Espresso *v187;
  const char *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unint64_t *v203;
  unint64_t v204;
  BOOL v205;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  int v211;
  NSObject *v212;
  unint64_t v213;
  unsigned __int8 *v214;
  int v215;
  uint64_t *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  __int128 v220;
  unint64_t *v221;
  unint64_t v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t **v235;
  int v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  int v240;
  int v241;
  BOOL v243;
  unsigned int v244;
  unsigned int v245;
  BOOL v246;
  double v247;
  double v248;
  const void *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  double v254;
  _DWORD *v255;
  int v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unsigned int v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  void *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  int v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  BOOL v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _BOOL4 v286;
  unint64_t *v287;
  unint64_t v288;
  _DWORD *v289;
  uint64_t v290;
  BOOL v291;
  BOOL v292;
  uint64_t v293;
  _OWORD *v294;
  _QWORD *v295;
  int v296;
  BOOL v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  void *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  int v306;
  unint64_t *v307;
  unint64_t v308;
  double v309;
  double v310;
  unsigned __int8 v311;
  double v312;
  unint64_t v313;
  unsigned __int8 *v314;
  int v315;
  uint64_t *v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  __int128 v320;
  unint64_t *v321;
  unint64_t v322;
  int v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  NSObject *v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v353;
  uint64_t v357;
  int **v358;
  int **v359;
  char v360;
  unsigned __int8 *v361;
  unsigned __int8 *v362;
  int v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  _QWORD *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  __int128 v373;
  uint64_t *v374;
  std::__shared_weak_count *v375;
  void *__p;
  std::__shared_weak_count *v377;
  char v378;
  __int128 v379;
  uint64_t *v380;
  std::__shared_weak_count *v381;
  uint64_t v382;
  std::__shared_weak_count *v383;
  __int128 v384;
  uint64_t v385;
  std::__shared_weak_count *v386;
  void *lpsrc[2];
  __int128 v388;
  __int128 v389;
  _DWORD *v390;
  char *v391;
  unint64_t v392;
  void **p_p;
  _BYTE buf[24];
  uint64_t v395;

  v395 = *MEMORY[0x1E0C80C00];
  v368 = **a3;
  v370 = (*a3)[1];
  v7 = *a1;
  v353 = a1[1];
  v390 = 0;
  v391 = 0;
  v392 = 0;
  v350 = v7;
  v366 = v353 - v7;
  if (v353 != v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = v7;
    do
    {
      v12 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v11 + 8))(*(_QWORD *)(*(_QWORD *)v11 + 8));
      v13 = v12;
      if ((unint64_t)v10 >= v9)
      {
        v15 = (v10 - v8) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v9 - (_QWORD)v8) >> 1 > v16)
          v16 = (uint64_t)(v9 - (_QWORD)v8) >> 1;
        if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
        else
          v18 = 0;
        v19 = (_DWORD *)(v17 + 4 * v15);
        *v19 = v13;
        v14 = (char *)(v19 + 1);
        while (v10 != v8)
        {
          v20 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *--v19 = v20;
        }
        v9 = v17 + 4 * v18;
        v390 = v19;
        v392 = v9;
        if (v8)
          operator delete(v8);
        v8 = (char *)v19;
      }
      else
      {
        *(_DWORD *)v10 = v12;
        v14 = v10 + 4;
      }
      v391 = v14;
      v11 += 16;
      v10 = v14;
    }
    while (v11 != v353);
  }
  v21 = 0x6DB6DB6DB6DB6DB7 * ((v370 - v368) >> 5);
  v349 = v366 >> 4;
  __p = 0;
  std::vector<double>::vector(buf, ((0x100000000 - 0x4924924900000000 * ((v370 - v368) >> 5)) >> 32) * (v366 >> 4), &__p);
  v22 = a5;
  v23 = (void *)*a5;
  if (*a5)
  {
    a5[1] = v23;
    operator delete(v23);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  *(_OWORD *)a5 = *(_OWORD *)buf;
  a5[2] = *(_QWORD *)&buf[16];
  LOBYTE(__p) = 1;
  std::vector<BOOL>::vector(buf, ((0x100000000 - 0x4924924900000000 * ((v370 - v368) >> 5)) >> 32) * (v366 >> 4), (unsigned __int8 *)&__p);
  v24 = a6;
  v25 = a1;
  if (*a6)
  {
    operator delete((void *)*a6);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  *a6 = *(_QWORD *)buf;
  *(_OWORD *)(a6 + 1) = *(_OWORD *)&buf[8];
  v389 = 0uLL;
  v26 = *a3;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v27 = (std::__shared_weak_count *)v26[10];
  if (v27)
  {
    v28 = std::__shared_weak_count::lock(v27);
    *(_QWORD *)&buf[8] = v28;
    if (v28)
      *(_QWORD *)buf = v26[9];
  }
  else
  {
    v28 = 0;
  }
  PlatformHeuristics = GetPlatformHeuristics((Espresso::net **)buf);
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (!PlatformHeuristics)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected nullptr.");
  v363 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 184))(PlatformHeuristics);
  if (0xB6DB6DB700000000 * ((v370 - v368) >> 5))
  {
    v360 = 0;
    v32 = 0;
    v33 = (int)v21;
    v34 = v366 >> 4;
    if (v349 <= 1)
      v34 = 1;
    v364 = v34;
    if ((unint64_t)(int)v21 <= 1)
      v33 = 1;
    v351 = v33;
    do
    {
      v35 = **a3;
      v36 = *(_OWORD *)(*a4 + 16 * v32);
      v388 = v36;
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = v35 + 224 * v32;
      v41 = *(void **)(v40 + 88);
      lpsrc[0] = v41;
      v42 = *(unint64_t **)(v40 + 96);
      lpsrc[1] = v42;
      if (v42)
      {
        v43 = v42 + 1;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      if (v41)
        goto LABEL_89;
      v371 = v36;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](lpsrc, *(_QWORD *)(v35 + 224 * v32 + 208), *(_QWORD *)(v35 + 224 * v32 + 216));
      if (lpsrc[0])
        goto LABEL_89;
      if ((_QWORD)v389)
      {
        v45 = v371;
      }
      else
      {
        LODWORD(__p) = 0;
        Espresso::create_context((int *)&__p, buf);
        v46 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v389 + 1);
        v389 = v46;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v51 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
        v45 = v388;
      }
      v385 = v45;
      v386 = v37;
      if (v37)
      {
        v53 = (unint64_t *)&v37->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v384 = v389;
      if (*((_QWORD *)&v389 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      Espresso::create_kernel_for_engine(buf, v35 + 224 * v32, &v385, (uint64_t *)&v384, 0);
      v59 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v60 = (std::__shared_weak_count *)lpsrc[1];
      *(_OWORD *)lpsrc = v59;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v64 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v384 + 1);
      if (*((_QWORD *)&v384 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v384 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = v386;
      if (v386)
      {
        v70 = (unint64_t *)&v386->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if (lpsrc[0])
      {
LABEL_89:
        if (v350 != v353)
        {
          v72 = 0;
          v73 = (_QWORD *)(v35 + 224 * v32);
          v369 = v32;
          v372 = v73 + 23;
          v358 = (int **)(v73 + 21);
          v359 = (int **)(v73 + 20);
          v365 = v32 * v349;
          v367 = v73 + 24;
          v357 = v32 - 1;
          v361 = (unsigned __int8 *)v73 + 106;
          v362 = (unsigned __int8 *)v73 + 105;
          while (1)
          {
            v74 = v390;
            engine_gflops_per_s = get_engine_gflops_per_s(v390[v72], PlatformHeuristics, 0);
            v76 = v74[v72];
            *(_DWORD *)buf = v76;
            if ((v76 - 10006) < 4 || v76 == 10011)
              break;
            if (is_gpu((int *)buf))
            {
              v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 64))(PlatformHeuristics);
              v79 = 2;
              v80 = 4;
              goto LABEL_98;
            }
            if (is_cpu((int *)buf))
            {
              v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 56))(PlatformHeuristics);
              v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 80))(v78);
              goto LABEL_97;
            }
            if ((v76 & 0xFFFFFFFD) == 5)
            {
              v81 = 40.0;
            }
            else
            {
              v81 = 15.0;
              if (v76 == 100000)
              {
                v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 56))(PlatformHeuristics);
                v152 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 80))(v151);
                v81 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v151 + 56))(v151, v152) * 1.5;
              }
            }
LABEL_99:
            v82 = 0.0;
            if (*v372 == *v367)
            {
              v91 = 0.0;
              v89 = 0.0;
              v87 = 0.0;
            }
            else
            {
              v83 = lpsrc[0];
              if (lpsrc[0]
              {
                *(_QWORD *)buf = v84;
                *(void **)&buf[8] = lpsrc[1];
                if (lpsrc[1])
                {
                  v85 = (unint64_t *)((char *)lpsrc[1] + 8);
                  do
                    v86 = __ldxr(v85);
                  while (__stxr(v86 + 1, v85));
                }
                if ((v363 & 1) != 0)
                  v84[456] = 1;
              }
              else
              {
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
              }
              v87 = (*(float (**)(void *, _QWORD *, uint64_t))(*(_QWORD *)v83 + 128))(v83, v372, 1);
              v89 = v88;
              v91 = v90;
              v93 = v92;
              v94 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v95 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v82 = v93;
            }
            v97 = v390;
            if (is_gpu(&v390[v72]))
            {
              v98 = (std::__shared_weak_count *)lpsrc[0];
              if (lpsrc[0])
              {
                v100 = v99;
                if (v99)
                {
                  *(_QWORD *)buf = v99;
                  *(void **)&buf[8] = lpsrc[1];
                  if (lpsrc[1])
                  {
                    v101 = (unint64_t *)((char *)lpsrc[1] + 8);
                    do
                      v102 = __ldxr(v101);
                    while (__stxr(v102 + 1, v101));
                  }
                }
                else
                {
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&buf[8] = 0;
                }
                if (v104)
                {
                  __p = v104;
                  v377 = (std::__shared_weak_count *)lpsrc[1];
                  if (lpsrc[1])
                  {
                    v105 = (unint64_t *)((char *)lpsrc[1] + 8);
                    do
                      v106 = __ldxr(v105);
                    while (__stxr(v106 + 1, v105));
                  }
                  if (v100)
                  {
LABEL_131:
                    v107 = (*(uint64_t (**)(void *))(*(_QWORD *)v100 + 384))(v100);
                    v108 = *(_QWORD *)buf;
                    if (*(__int16 *)(v107 + 92) > 4
                      || *(__int16 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 384))(*(_QWORD *)buf) + 94) >= 5)
                    {
                      v109 = *(__int16 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 384))(v108) + 92);
                      v110 = *(__int16 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 384))(v108) + 94)
                           * v109;
                      if (v110 <= 1)
                        v110 = 1;
                      v87 = v87 * (float)v110;
                    }
                    if (v363)
                    {
                      v97 = v390;
                      if ((v390[v72] - 50005) < 2)
                        v87 = v87 * 100.0;
                      v98 = (std::__shared_weak_count *)lpsrc[0];
                      if (!lpsrc[0])
                      {
LABEL_140:
                        v111 = 0;
                        v112 = 0;
                        v113 = 0;
                        goto LABEL_163;
                      }
LABEL_143:
                      if (v111)
                      {
                        v112 = (std::__shared_weak_count *)lpsrc[1];
                        if (lpsrc[1])
                        {
                          v114 = (unint64_t *)((char *)lpsrc[1] + 8);
                          do
                            v115 = __ldxr(v114);
                          while (__stxr(v115 + 1, v114));
                        }
                      }
                      else
                      {
                        v112 = 0;
                      }
                      if (v113)
                      {
                        v98 = (std::__shared_weak_count *)lpsrc[1];
                        if (lpsrc[1])
                        {
                          v119 = (unint64_t *)((char *)lpsrc[1] + 8);
                          do
                            v120 = __ldxr(v119);
                          while (__stxr(v120 + 1, v119));
                        }
                      }
                      else
                      {
                        v98 = 0;
                      }
LABEL_163:
                      if (v363 && (v97[v72] - 50005) <= 1)
                      {
                        v121 = v91 * 100.0;
                        v122 = v87 * 100.0;
                        if (!(v111 | v113))
                        {
                          v121 = v91;
                          v122 = v87;
                        }
                        if (v121 < 1887400.0)
                          v87 = v122 + v122;
                        else
                          v87 = v122;
                      }
                      v32 = v369;
                      if (v98)
                      {
LABEL_171:
                        v123 = (unint64_t *)&v98->__shared_owners_;
                        do
                          v124 = __ldaxr(v123);
                        while (__stlxr(v124 - 1, v123));
                        if (!v124)
                        {
                          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                          std::__shared_weak_count::__release_weak(v98);
                        }
                      }
                      goto LABEL_183;
                    }
                    v116 = lpsrc[0];
                    if (lpsrc[0])
                    {
                      {
                        v112 = (std::__shared_weak_count *)lpsrc[1];
                        if (lpsrc[1])
                        {
                          v117 = (unint64_t *)((char *)lpsrc[1] + 8);
                          do
                            v118 = __ldxr(v117);
                          while (__stxr(v118 + 1, v117));
                        }
                      }
                      else
                      {
                        v112 = 0;
                      }
                      {
                        v98 = (std::__shared_weak_count *)lpsrc[1];
                        if (lpsrc[1])
                        {
                          v125 = (unint64_t *)((char *)lpsrc[1] + 8);
                          do
                            v126 = __ldxr(v125);
                          while (__stxr(v126 + 1, v125));
                          goto LABEL_171;
                        }
                      }
LABEL_183:
                      if (v112)
                      {
                        v127 = (unint64_t *)&v112->__shared_owners_;
                        do
                          v128 = __ldaxr(v127);
                        while (__stlxr(v128 - 1, v127));
                        if (!v128)
                        {
                          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                          std::__shared_weak_count::__release_weak(v112);
                        }
                      }
                    }
                    v129 = v377;
                    if (v377)
                    {
                      v130 = (unint64_t *)&v377->__shared_owners_;
                      do
                        v131 = __ldaxr(v130);
                      while (__stlxr(v131 - 1, v130));
                      if (!v131)
                      {
                        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                        std::__shared_weak_count::__release_weak(v129);
                      }
                    }
                    v132 = *(std::__shared_weak_count **)&buf[8];
                    if (*(_QWORD *)&buf[8])
                    {
                      v133 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                      do
                        v134 = __ldaxr(v133);
                      while (__stlxr(v134 - 1, v133));
                      if (!v134)
                      {
                        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                        std::__shared_weak_count::__release_weak(v132);
                      }
                    }
                    goto LABEL_198;
                  }
LABEL_142:
                  if (!v98)
                    goto LABEL_140;
                  goto LABEL_143;
                }
              }
              else
              {
                v100 = 0;
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
              }
              __p = 0;
              v377 = 0;
              if (v100)
                goto LABEL_131;
              goto LABEL_142;
            }
LABEL_198:
            v135 = *a3;
            v382 = 0;
            v383 = 0;
            v136 = (std::__shared_weak_count *)v135[10];
            if (v136)
            {
              v383 = std::__shared_weak_count::lock(v136);
              if (v383)
                v382 = v135[9];
            }
            v137 = lpsrc[0];
            if (!lpsrc[0])
              goto LABEL_244;
            {
              v138 = (std::__shared_weak_count *)lpsrc[1];
              if (lpsrc[1])
              {
                v139 = (unint64_t *)((char *)lpsrc[1] + 8);
                do
                  v140 = __ldxr(v139);
                while (__stxr(v140 + 1, v139));
                v141 = is_cpu(&v390[v72]);
                v142 = v141;
                do
                  v143 = __ldaxr(v139);
                while (__stlxr(v143 - 1, v139));
                if (v143)
                {
                  if (!v141)
                    goto LABEL_230;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                  if ((v142 & 1) == 0)
                    goto LABEL_230;
                }
LABEL_214:
                v144 = &v390[v72];
                engine_gflops_per_s = get_engine_gflops_per_s(*v144, PlatformHeuristics, 1);
                v137 = lpsrc[0];
                if (!lpsrc[0])
                  goto LABEL_244;
                v145 = (std::__shared_weak_count *)lpsrc[1];
                if (lpsrc[1])
                {
                  v146 = (unint64_t *)((char *)lpsrc[1] + 8);
                  do
                    v147 = __ldxr(v146);
                  while (__stxr(v147 + 1, v146));
                  v148 = is_cpu(v144);
                  v149 = v148;
                  do
                    v150 = __ldaxr(v146);
                  while (__stlxr(v150 - 1, v146));
                  if (v150)
                  {
                    if (!v148)
                      goto LABEL_230;
                  }
                  else
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                    if ((v149 & 1) == 0)
                      goto LABEL_230;
                  }
LABEL_229:
                  engine_gflops_per_s = get_engine_gflops_per_s(v390[v72], PlatformHeuristics, 0);
                  goto LABEL_230;
                }
                if ((is_cpu(v144) & 1) != 0)
                  goto LABEL_229;
              }
              else if ((is_cpu(&v390[v72]) & 1) != 0)
              {
                goto LABEL_214;
              }
LABEL_230:
              v137 = lpsrc[0];
              if (!lpsrc[0])
                goto LABEL_244;
            }
LABEL_231:
            v153 = (std::__shared_weak_count *)lpsrc[1];
            if (lpsrc[1])
            {
              v154 = (unint64_t *)((char *)lpsrc[1] + 8);
              do
                v155 = __ldxr(v154);
              while (__stxr(v155 + 1, v154));
              v156 = is_cpu(&v390[v72]);
              v157 = v156;
              do
                v158 = __ldaxr(v154);
              while (__stlxr(v158 - 1, v154));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
                if ((v157 & 1) == 0)
                  goto LABEL_244;
LABEL_243:
                engine_gflops_per_s = get_engine_gflops_per_s(v390[v72], PlatformHeuristics, 1);
                goto LABEL_244;
              }
              if (v156)
                goto LABEL_243;
            }
            else if ((is_cpu(&v390[v72]) & 1) != 0)
            {
              goto LABEL_243;
            }
LABEL_244:
            v159 = engine_gflops_per_s;
            if ((v390[v72] - 10006) > 5 || ((0x2Fu >> (LOBYTE(v390[v72]) - 22)) & 1) == 0)
              goto LABEL_285;
            v161 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 72))(PlatformHeuristics);
            v162 = lpsrc[0];
            if (!lpsrc[0])
              goto LABEL_284;
            v163 = v161;
            {
              v164 = (std::__shared_weak_count *)lpsrc[1];
              if (lpsrc[1])
              {
                v165 = (unint64_t *)((char *)lpsrc[1] + 8);
                do
                  v166 = __ldxr(v165);
                while (__stxr(v166 + 1, v165));
                do
                  v167 = __ldaxr(v165);
                while (__stlxr(v167 - 1, v165));
                goto LABEL_266;
              }
            }
            else
            {
              {
                {
LABEL_284:
                  v159 = (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 88))(PlatformHeuristics)
                       * v159;
                  goto LABEL_285;
                }
                v164 = (std::__shared_weak_count *)lpsrc[1];
                if (!lpsrc[1])
                  goto LABEL_268;
                v170 = (unint64_t *)((char *)lpsrc[1] + 8);
                do
                  v171 = __ldxr(v170);
                while (__stxr(v171 + 1, v170));
                do
                  v167 = __ldaxr(v170);
                while (__stlxr(v167 - 1, v170));
                goto LABEL_266;
              }
              v164 = (std::__shared_weak_count *)lpsrc[1];
              if (lpsrc[1])
              {
                v168 = (unint64_t *)((char *)lpsrc[1] + 8);
                do
                  v169 = __ldxr(v168);
                while (__stxr(v169 + 1, v168));
                do
                  v167 = __ldaxr(v168);
                while (__stlxr(v167 - 1, v168));
LABEL_266:
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v164);
                }
              }
            }
LABEL_268:
            if (*v358 != *v359)
            {
              v172 = (*v359)[2];
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 104))(v163) > v172)
              {
                v173 = *v359;
                v174 = (*v359)[5];
                if (v174 == -1 || v174 >= 4)
                {
                  v159 = v159
                       / (float)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 104))(v163)
                               / (unint64_t)*(int *)(*(_QWORD *)(**a3 + 224 * v32 + 160) + 8));
                  v173 = *v359;
                }
                v177 = *v173;
                v176 = v173[1];
                v178 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 72))(PlatformHeuristics);
                v179 = v177 * (uint64_t)v176;
                if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 112))(v178) > v179)
                {
                  if (lpsrc[0]
                  {
                    v180 = (std::__shared_weak_count *)lpsrc[1];
                    if (lpsrc[1])
                    {
                      v181 = (unint64_t *)((char *)lpsrc[1] + 8);
                      do
                        v182 = __ldxr(v181);
                      while (__stxr(v182 + 1, v181));
                      do
                        v183 = __ldaxr(v181);
                      while (__stlxr(v183 - 1, v181));
                      if (!v183)
                      {
                        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                        std::__shared_weak_count::__release_weak(v180);
                      }
                    }
                  }
                  else
                  {
                    v239 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 112))(v163);
                    v159 = v159
                         / fmin((float)(v239 / v179), (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 112))(PlatformHeuristics));
                  }
                }
              }
            }
LABEL_285:
            v184 = v81;
            v185 = (float)(v82 + (float)(v91 + v89)) * 0.00097656;
            v186 = v185;
            v187 = (Espresso *)is_cpu(&v390[v72]);
            if (!(_DWORD)v187)
              goto LABEL_318;
            v187 = (Espresso *)lpsrc[0];
            if (!lpsrc[0])
              goto LABEL_318;
            if (!v187)
              goto LABEL_318;
            v189 = (std::__shared_weak_count *)lpsrc[1];
            if (lpsrc[1])
            {
              v190 = (unint64_t *)((char *)lpsrc[1] + 8);
              do
                v191 = __ldxr(v190);
              while (__stxr(v191 + 1, v190));
              do
                v192 = __ldaxr(v190);
              while (__stlxr(v192 - 1, v190));
              if (!v192)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
            v194 = (std::__shared_weak_count *)lpsrc[1];
            *(_QWORD *)buf = v193;
            *(void **)&buf[8] = lpsrc[1];
            if (lpsrc[1])
            {
              v195 = (unint64_t *)((char *)lpsrc[1] + 8);
              do
                v196 = __ldxr(v195);
              while (__stxr(v196 + 1, v195));
            }
            v187 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v193 + 384))(v193);
            v198 = *(_DWORD *)v187;
            v197 = *((_DWORD *)v187 + 1);
            v199 = *((_DWORD *)v187 + 2);
            v201 = *((_DWORD *)v187 + 4);
            v200 = *((_DWORD *)v187 + 5);
            v202 = *((_DWORD *)v187 + 14);
            if (!v194)
              goto LABEL_301;
            v203 = (unint64_t *)&v194->__shared_owners_;
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
              std::__shared_weak_count::__release_weak(v194);
              if (!v202)
              {
LABEL_304:
                v205 = v197 == v201 && v199 == v200;
                goto LABEL_310;
              }
            }
            else
            {
LABEL_301:
              if (!v202)
                goto LABEL_304;
            }
            v205 = 1;
LABEL_310:
            v22 = a5;
            v24 = a6;
            v25 = a1;
            if (v198)
              goto LABEL_318;
            if (v197 < 3 && v199 < 3)
              v205 = 1;
            if (v205)
            {
LABEL_318:
              if (v87 == 0.0 || v185 == 0.0)
              {
                Espresso::espresso_os_log_subsystem(v187, v188);
                v212 = objc_claimAutoreleasedReturnValue();
                v32 = v369;
                if (os_log_type_enabled(v212, OS_LOG_TYPE_DEBUG))
                {
                  v237 = **a3 + 224 * v369;
                  v238 = (_QWORD *)(v237 + 48);
                  if (*(char *)(v237 + 71) < 0)
                    v238 = (_QWORD *)*v238;
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v238;
                  _os_log_debug_impl(&dword_190DAF000, v212, OS_LOG_TYPE_DEBUG, "Missing estimated cost for %s\n", buf, 0xCu);
                }

                v213 = v72 + v365;
                *(_QWORD *)(*v22 + 8 * (v72 + v365)) = 0;
                v214 = v362;
                if (v72)
                  v214 = v361;
                v215 = *v214;
                v216 = *a3;
                v217 = (std::__shared_weak_count *)a3[1];
                v380 = *a3;
                v381 = v217;
                if (v217)
                {
                  v218 = (unint64_t *)&v217->__shared_owners_;
                  do
                    v219 = __ldxr(v218);
                  while (__stxr(v219 + 1, v218));
                }
                v220 = *(_OWORD *)(*v25 + 16 * v72);
                v379 = v220;
                if (*((_QWORD *)&v220 + 1))
                {
                  v221 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
                  do
                    v222 = __ldxr(v221);
                  while (__stxr(v222 + 1, v221));
                }
                v223 = Espresso::also_check_not_blacklisted(v369, v215 != 0, *v216, (const void **)&v379);
                v224 = *v24;
                v225 = v213 >> 6;
                v226 = 1 << v213;
                if (v223)
                  v227 = *(_QWORD *)(v224 + 8 * v225) | v226;
                else
                  v227 = *(_QWORD *)(v224 + 8 * v225) & ~v226;
                *(_QWORD *)(v224 + 8 * v225) = v227;
                v228 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
                if (*((_QWORD *)&v379 + 1))
                {
                  v229 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
                  do
                    v230 = __ldaxr(v229);
                  while (__stlxr(v230 - 1, v229));
                  if (!v230)
                  {
                    ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                    std::__shared_weak_count::__release_weak(v228);
                  }
                }
                v231 = v381;
                if (v381)
                {
                  v232 = (unint64_t *)&v381->__shared_owners_;
                  do
                    v233 = __ldaxr(v232);
                  while (__stlxr(v233 - 1, v232));
                  if (!v233)
                  {
                    ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                    std::__shared_weak_count::__release_weak(v231);
                  }
                }
                goto LABEL_522;
              }
              v32 = v369;
              if (v369)
              {
                v208 = **a3;
                v209 = v208 + 224 * v357;
                v210 = (_QWORD *)(v209 + 48);
                v211 = *(char *)(v209 + 71);
                if (v211 < 0)
                {
                  if (v210[1] != 8)
                    goto LABEL_367;
                  v210 = (_QWORD *)*v210;
                }
                else if (v211 != 8)
                {
                  goto LABEL_367;
                }
                if (*v210 != 0x686372615F6E6E72)
                  goto LABEL_367;
                v234 = v208 + 224 * v369;
                v235 = (uint64_t **)(v234 + 48);
                v236 = *(char *)(v234 + 71);
                if (v236 < 0)
                {
                  if (v235[1] != (uint64_t *)5)
                    goto LABEL_365;
                  v235 = (uint64_t **)*v235;
                }
                else if (v236 != 5)
                {
LABEL_365:
                  v243 = 0;
LABEL_366:
                  v360 |= v243;
                  goto LABEL_367;
                }
                v240 = *(_DWORD *)v235;
                v241 = *((unsigned __int8 *)v235 + 4);
                v243 = v240 == 1768714355 && v241 == 116;
                goto LABEL_366;
              }
LABEL_367:
              v244 = v390[v72] - 10006;
              v245 = (0x2Fu >> (LOBYTE(v390[v72]) - 22)) & 1;
              v246 = v244 > 5 || v245 == 0;
              if (!v246 && (v360 & 1) != 0)
              {
                *(_QWORD *)(*v22 + 8 * (v72 + v365)) = 0x41CDCD6500000000;
                v360 = 1;
                goto LABEL_522;
              }
              v247 = v87;
              v248 = (v186 / v184 * (v186 / (v186 + v87)) + v87 / (v186 + v87) * (v87 / v159)) * 1000.0;
              if (v244 > 5)
                goto LABEL_385;
              if (!v245)
                goto LABEL_385;
              v249 = lpsrc[0];
              if (!lpsrc[0])
                goto LABEL_385;
              {
                v250 = (std::__shared_weak_count *)lpsrc[1];
                if (lpsrc[1])
                {
                  v251 = (unint64_t *)((char *)lpsrc[1] + 8);
                  do
                    v252 = __ldxr(v251);
                  while (__stxr(v252 + 1, v251));
                  do
                    v253 = __ldaxr(v251);
                  while (__stlxr(v253 - 1, v251));
                  if (!v253)
                  {
                    ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                    std::__shared_weak_count::__release_weak(v250);
                  }
                }
                v254 = (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 128))(PlatformHeuristics);
LABEL_384:
                v248 = v248 / v254;
LABEL_385:
                v255 = v390;
                v256 = v390[v72];
                if (is_metal_but_not_mps_buffers(v256)
                  && lpsrc[0]
                {
                  v257 = (std::__shared_weak_count *)lpsrc[1];
                  if (lpsrc[1])
                  {
                    v258 = (unint64_t *)((char *)lpsrc[1] + 8);
                    do
                      v259 = __ldxr(v258);
                    while (__stxr(v259 + 1, v258));
                    v260 = ((v255[v72] - 50005) < 4) & (0xBu >> ((LOBYTE(v255[v72]) - 85) & 0xF));
                    v261 = (unint64_t *)&v257->__shared_owners_;
                    do
                      v262 = __ldaxr(v261);
                    while (__stlxr(v262 - 1, v261));
                    if (v262)
                    {
                      if ((v260 & 1) != 0)
                        goto LABEL_417;
LABEL_416:
                      v248 = v248
                           * (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 136))(PlatformHeuristics);
                    }
                    else
                    {
                      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                      std::__shared_weak_count::__release_weak(v257);
                      if ((v260 & 1) == 0)
                        goto LABEL_416;
                    }
                  }
                  else if ((v256 - 50005) > 3 || ((0xBu >> ((v256 - 85) & 0xF)) & 1) == 0)
                  {
                    goto LABEL_416;
                  }
                }
LABEL_417:
                if (is_gpu(&v390[v72])
                  && lpsrc[0]
                {
                  v274 = (std::__shared_weak_count *)lpsrc[1];
                  if (lpsrc[1])
                  {
                    v275 = (unint64_t *)((char *)lpsrc[1] + 8);
                    do
                      v276 = __ldxr(v275);
                    while (__stxr(v276 + 1, v275));
                  }
                  v277 = *(_QWORD *)(**a3 + 224 * v369 + 192) - *(_QWORD *)(**a3 + 224 * v369 + 184);
                  if (!v274)
                    goto LABEL_427;
                  v278 = (unint64_t *)&v274->__shared_owners_;
                  do
                    v279 = __ldaxr(v278);
                  while (__stlxr(v279 - 1, v278));
                  if (!v279)
                  {
                    ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                    std::__shared_weak_count::__release_weak(v274);
                    if (v277 <= 0x40)
                      goto LABEL_431;
                  }
                  else
                  {
LABEL_427:
                    if (v277 < 0x41)
                      goto LABEL_431;
                  }
                  v248 = v248
                       * (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 144))(PlatformHeuristics);
                }
LABEL_431:
                v280 = (v390[v72] - 10006) > 5 || ((0x2Fu >> (LOBYTE(v390[v72]) - 22)) & 1) == 0;
                if (!v280
                  && lpsrc[0]
                {
                  v281 = (std::__shared_weak_count *)lpsrc[1];
                  if (lpsrc[1])
                  {
                    v282 = (unint64_t *)((char *)lpsrc[1] + 8);
                    do
                      v283 = __ldxr(v282);
                    while (__stxr(v283 + 1, v282));
                  }
                  v284 = **a3 + 224 * v369;
                  v285 = *(_QWORD *)(v284 + 184);
                  if ((unint64_t)(*(_QWORD *)(v284 + 192) - v285) < 0x41)
                  {
                    v286 = 0;
                    if (!v281)
                      goto LABEL_447;
                  }
                  else
                  {
                    v286 = Espresso::layer_shape::operator==(v285, v285 + 64);
                    if (!v281)
                      goto LABEL_447;
                  }
                  v287 = (unint64_t *)&v281->__shared_owners_;
                  do
                    v288 = __ldaxr(v287);
                  while (__stlxr(v288 - 1, v287));
                  if (v288)
                  {
LABEL_447:
                    if (!v286)
                      goto LABEL_451;
LABEL_450:
                    v248 = v248
                         * (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 152))(PlatformHeuristics);
                  }
                  else
                  {
                    ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                    std::__shared_weak_count::__release_weak(v281);
                    if (v286)
                      goto LABEL_450;
                  }
                }
LABEL_451:
                v289 = v390;
                if (*v358 != *v359)
                {
                  v290 = (*v359)[4] * (uint64_t)(*v359)[3];
                  v291 = (v390[v72] - 10006) > 5 || ((0x2Fu >> (LOBYTE(v390[v72]) - 22)) & 1) == 0;
                  v292 = v291 || (_DWORD)v290 == 0;
                  if (!v292
                    && (*(int (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 48))(PlatformHeuristics) <= 1)
                  {
                    v293 = v382;
                    std::string::basic_string[abi:ne180100]<0>(buf, "ane_compiler_batch");
                    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v293 + 480), buf))
                    {
                      std::string::basic_string[abi:ne180100]<0>(&__p, "ane_compiler_batch");
                      p_p = &__p;
                      v294 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v293 + 472), &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
                      v295 = (_QWORD *)v294 + 7;
                      v296 = *((char *)v294 + 79);
                      if (v296 < 0)
                      {
                        if (*((_QWORD *)v294 + 8) != 1)
                          goto LABEL_487;
                        v295 = (_QWORD *)*v295;
                      }
                      else if (v296 != 1)
                      {
LABEL_487:
                        v297 = 0;
                        goto LABEL_488;
                      }
                      v297 = *(_BYTE *)v295 == 49;
LABEL_488:
                      if (v378 < 0)
                        operator delete(__p);
                    }
                    else
                    {
                      v297 = 0;
                    }
                    if ((buf[23] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)buf);
                      if (!v297)
LABEL_492:
                        v248 = v248 + (float)((float)(unint64_t)(v290 - 1) * 0.1);
                    }
                    else if (!v297)
                    {
                      goto LABEL_492;
                    }
                  }
                }
                if (is_cpu(&v289[v72])
                  && (*(unsigned int (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 48))(PlatformHeuristics) == 2)
                {
                  v248 = v248 + v248;
                }
                v309 = (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 96))(PlatformHeuristics);
                v310 = (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 104))(PlatformHeuristics);
                v311 = is_gpu(&v289[v72]);
                v312 = v248 + v248 * v310 * (v309 - v247 + 1.0);
                if ((v311 & (v309 > v247)) == 0)
                  v312 = v248;
                v313 = v72 + v365;
                *(double *)(*v22 + 8 * (v72 + v365)) = v312;
                v314 = v362;
                if (v72)
                  v314 = v361;
                v315 = *v314;
                v316 = *a3;
                v317 = (std::__shared_weak_count *)a3[1];
                v374 = *a3;
                v375 = v317;
                if (v317)
                {
                  v318 = (unint64_t *)&v317->__shared_owners_;
                  do
                    v319 = __ldxr(v318);
                  while (__stxr(v319 + 1, v318));
                }
                v320 = *(_OWORD *)(*v25 + 16 * v72);
                v373 = v320;
                if (*((_QWORD *)&v320 + 1))
                {
                  v321 = (unint64_t *)(*((_QWORD *)&v320 + 1) + 8);
                  do
                    v322 = __ldxr(v321);
                  while (__stxr(v322 + 1, v321));
                }
                v323 = Espresso::also_check_not_blacklisted(v369, v315 != 0, *v316, (const void **)&v373);
                v324 = *v24;
                v325 = v313 >> 6;
                v326 = 1 << v313;
                if (v323)
                  v327 = *(_QWORD *)(v324 + 8 * v325) | v326;
                else
                  v327 = *(_QWORD *)(v324 + 8 * v325) & ~v326;
                *(_QWORD *)(v324 + 8 * v325) = v327;
                v328 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
                if (*((_QWORD *)&v373 + 1))
                {
                  v329 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
                  do
                    v330 = __ldaxr(v329);
                  while (__stlxr(v330 - 1, v329));
                  if (!v330)
                  {
                    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                    std::__shared_weak_count::__release_weak(v328);
                  }
                }
                v331 = v375;
                if (v375)
                {
                  v332 = (unint64_t *)&v375->__shared_owners_;
                  do
                    v333 = __ldaxr(v332);
                  while (__stlxr(v333 - 1, v332));
                  if (!v333)
                  {
                    ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                    std::__shared_weak_count::__release_weak(v331);
                  }
                }
                if ((*(_QWORD *)(*v24 + 8 * v325) & v326) == 0)
                  *(_QWORD *)(*v22 + 8 * v313) = 0x41CDCD6500000000;
                goto LABEL_521;
              }
              {
                v263 = (std::__shared_weak_count *)lpsrc[1];
                if (lpsrc[1])
                {
                  v264 = (unint64_t *)((char *)lpsrc[1] + 8);
                  do
                    v265 = __ldxr(v264);
                  while (__stxr(v265 + 1, v264));
                  do
                    v266 = __ldaxr(v264);
                  while (__stlxr(v266 - 1, v264));
                  if (!v266)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
                v268 = (std::__shared_weak_count *)lpsrc[1];
                *(_QWORD *)buf = v267;
                *(void **)&buf[8] = lpsrc[1];
                if (lpsrc[1])
                {
                  v269 = (unint64_t *)((char *)lpsrc[1] + 8);
                  do
                    v270 = __ldxr(v269);
                  while (__stxr(v270 + 1, v269));
                }
                v271 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v267 + 320))(v267);
                if (!v268)
                  goto LABEL_410;
                v272 = (unint64_t *)&v268->__shared_owners_;
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                  if (v271)
                    goto LABEL_411;
                }
                else
                {
LABEL_410:
                  if (v271)
                    goto LABEL_411;
                }
                v248 = v248 * 0.0;
                goto LABEL_385;
              }
              v298 = (std::__shared_weak_count *)lpsrc[1];
              if (lpsrc[1])
              {
                v299 = (unint64_t *)((char *)lpsrc[1] + 8);
                do
                  v300 = __ldxr(v299);
                while (__stxr(v300 + 1, v299));
                do
                  v301 = __ldaxr(v299);
                while (__stlxr(v301 - 1, v299));
                if (!v301)
                {
                  ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                  std::__shared_weak_count::__release_weak(v298);
                }
              }
              v303 = (std::__shared_weak_count *)lpsrc[1];
              *(_QWORD *)buf = v302;
              *(void **)&buf[8] = lpsrc[1];
              if (lpsrc[1])
              {
                v304 = (unint64_t *)((char *)lpsrc[1] + 8);
                do
                  v305 = __ldxr(v304);
                while (__stxr(v305 + 1, v304));
              }
              v306 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v302 + 320))(v302);
              if (v303)
              {
                v307 = (unint64_t *)&v303->__shared_owners_;
                do
                  v308 = __ldaxr(v307);
                while (__stlxr(v308 - 1, v307));
                if (!v308)
                {
                  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                  std::__shared_weak_count::__release_weak(v303);
                }
              }
              if (*v358 != *v359)
              {
                if (v306 == **v359)
                  v248 = v248 * 0.0;
                goto LABEL_385;
              }
LABEL_411:
              (*(void (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 128))(PlatformHeuristics);
              goto LABEL_384;
            }
            *(double *)(*a5 + 8 * (v72 + v365)) = (v186 / v184 * (v186 / (v186 + v87))
                                                 + v87 / (v186 + v87) * (v87 / v159))
                                                * 1000.0
                                                * (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics
                                                                                    + 120))(PlatformHeuristics);
LABEL_521:
            v32 = v369;
LABEL_522:
            v334 = v383;
            if (v383)
            {
              v335 = (unint64_t *)&v383->__shared_owners_;
              do
                v336 = __ldaxr(v335);
              while (__stlxr(v336 - 1, v335));
              if (!v336)
              {
                ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                std::__shared_weak_count::__release_weak(v334);
              }
            }
            if (++v72 == v364)
              goto LABEL_536;
          }
          v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 72))(PlatformHeuristics);
          v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 80))(v78);
LABEL_97:
          v80 = 7;
LABEL_98:
          v81 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 8 * v80))(v78, v79);
          goto LABEL_99;
        }
      }
      else
      {
        Espresso::espresso_os_log_subsystem(v57, v58);
        v337 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v337, OS_LOG_TYPE_ERROR))
        {
          v344 = v35 + 224 * v32;
          v345 = (_QWORD *)(v344 + 48);
          if (*(char *)(v344 + 71) < 0)
            v345 = (_QWORD *)*v345;
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v32;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v345;
          _os_log_error_impl(&dword_190DAF000, v337, OS_LOG_TYPE_ERROR, "Cannot find any kernel for layer %zu (%s)\n", buf, 0x16u);
        }

      }
LABEL_536:
      v338 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v339 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v340 = __ldaxr(v339);
        while (__stlxr(v340 - 1, v339));
        if (!v340)
        {
          ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
          std::__shared_weak_count::__release_weak(v338);
        }
      }
      v341 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
      if (*((_QWORD *)&v388 + 1))
      {
        v342 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
        do
          v343 = __ldaxr(v342);
        while (__stlxr(v343 - 1, v342));
        if (!v343)
        {
          ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
          std::__shared_weak_count::__release_weak(v341);
        }
      }
      ++v32;
    }
    while (v32 != v351);
  }
  v346 = (std::__shared_weak_count *)*((_QWORD *)&v389 + 1);
  if (*((_QWORD *)&v389 + 1))
  {
    v347 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  if (v390)
    operator delete(v390);
}

void sub_190E3ECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56)
{
  uint64_t v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v59);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v60);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 256);
  v58 = *(void **)(v56 - 232);
  if (v58)
  {
    *(_QWORD *)(v56 - 224) = v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

float get_engine_gflops_per_s(int a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  float result;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v17 = a1;
  if ((a1 - 10006) < 4 || a1 == 10011)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
LABEL_7:
    v6 = v5;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    v8 = *(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72);
    v9 = v6;
    v10 = 1;
    return v8(v9, v7, v10) / 1000000000.0;
  }
  if (is_gpu(&v17))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    goto LABEL_7;
  }
  if (is_cpu(&v17))
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
    v16 = 72;
    if (a3)
      v16 = 120;
    v8 = *(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + v16);
    goto LABEL_20;
  }
  if ((a1 & 0xFFFFFFFD) == 5)
    return 300.0;
  result = 15.0;
  if (a1 == 100000)
  {
    v15 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a2 + 56))(a2, 15.0);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
    v8 = *(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 72);
LABEL_20:
    v9 = v15;
    v10 = 0;
    return v8(v9, v7, v10) / 1000000000.0;
  }
  return result;
}

uint64_t newpPlatformHeuristics::GetCpuPerfHeuristics(newpPlatformHeuristics *this)
{
  return (uint64_t)this + 112;
}

uint64_t newpACCPHeuristics::get_highest_device_pstate(newpACCPHeuristics *this)
{
  return 9;
}

double newpPlatformHeuristics::GetGPULThreshold(newpPlatformHeuristics *this)
{
  return 0.00499999989;
}

double newpPlatformHeuristics::GetGPULScale(newpPlatformHeuristics *this)
{
  return 0.5;
}

float Espresso::base_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  __int128 *v5;
  __int128 *v6;
  float v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  float v15;
  uint64_t v16;
  float v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *__p;
  void *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;

  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 64))(&v29);
  v5 = *a2;
  v6 = a2[1];
  v7 = 0.0;
  if (*a2 != v6)
  {
    v8 = a3 - 1;
    do
    {
      v9 = *v5;
      v10 = v5[1];
      v25 = *((_QWORD *)v5 + 4);
      v23 = v9;
      v24 = v10;
      v27 = 0;
      v28 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
      v11 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v23);
      if (v8 > 0xC)
        v12 = 4;
      else
        v12 = qword_191AC0CA0[v8];
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      v7 = v7 + (float)((float)(unint64_t)(v12 * v11) * 0.00000095367);
      v5 += 4;
    }
    while (v5 != v6);
  }
  v13 = v29;
  v14 = v30;
  v15 = 0.0;
  if (v29 != v30)
  {
    v16 = a3 - 1;
    v17 = 0.0;
    do
    {
      v18 = *v13;
      v19 = v13[1];
      v25 = *((_QWORD *)v13 + 4);
      v23 = v18;
      v24 = v19;
      v27 = 0;
      v28 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v13 + 5), *((_QWORD *)v13 + 6), (uint64_t)(*((_QWORD *)v13 + 6) - *((_QWORD *)v13 + 5)) >> 2);
      v20 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v23);
      if (v16 > 0xC)
        v21 = 4;
      else
        v21 = qword_191AC0CA0[v16];
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      v17 = v17 + (float)((float)(unint64_t)(v21 * v20) * 0.00000095367);
      v13 += 4;
    }
    while (v13 != v14);
    v15 = (double)(2 * v20) * 0.000000001;
  }
  *(_QWORD *)&v23 = &v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  return v15;
}

void sub_190E3F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t newpPlatformHeuristics::GetAnePerfHeuristics(newpPlatformHeuristics *this)
{
  return (uint64_t)this + 240;
}

uint64_t newpPlatformHeuristics::GetPlatformEnum(newpPlatformHeuristics *this)
{
  return 2;
}

void Espresso::generic_general_concat_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, int **a3@<X8>)
{
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int128 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int *v49;
  int v50;
  int v51;
  __int128 v52[2];
  uint64_t v53;
  void *__p;
  void *v55;
  uint64_t v56;
  __int128 v57;

  *((_QWORD *)&v57 + 1) = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *((_QWORD *)*a2 + 4);
  v8 = (*a2)[1];
  v52[0] = **a2;
  v52[1] = v8;
  v53 = v7;
  __p = 0;
  v55 = 0;
  v56 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v9 = (char *)operator new(0x40uLL);
  *a3 = (int *)v9;
  a3[1] = (int *)v9;
  a3[2] = (int *)(v9 + 64);
  a3[1] = (int *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v52, &v57, (uint64_t)v9);
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  v10 = *(unsigned int *)(a1 + 280);
  v11 = *a3;
  v12 = (*a3)[5];
  v13 = v12;
  if ((v10 & 0x80000000) != 0)
  {
    v14 = (*a3)[5];
    if (v12 == -1)
    {
      if (v11[4] == 1)
        v14 = 4;
      else
        v14 = 5;
    }
    v10 = (v14 + v10);
  }
  if (*(_BYTE *)(a1 + 284))
  {
    if (v12 == -1)
    {
      if (v11[4] == 1)
        v15 = 4;
      else
        v15 = 5;
    }
    else
    {
      v15 = (*a3)[5];
      if (v12 <= 0)
        goto LABEL_17;
    }
    v10 = (v15 + ~(_DWORD)v10);
  }
LABEL_17:
  if (v12 == -1)
  {
    if (v11[4] == 1)
      v13 = 4;
    else
      v13 = 5;
  }
  if ((int)v10 > v13)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_general_concat_kernel: axis out of bounds");
  if (*(_BYTE *)(a1 + 285))
  {
    v16 = *a2;
    v17 = (char *)a2[1] - (char *)*a2;
    if ((unint64_t)v17 >= 0x41)
    {
      v18 = v17 >> 6;
      if (v18 <= 2)
        v18 = 2;
      v19 = (uint64_t)(v16 + 4);
      v20 = v18 - 1;
      do
      {
        if (!Espresso::layer_shape::operator==((uint64_t)v16, v19))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_general_concat_kernel: interleave true but all shapes not equal");
        v19 += 64;
        --v20;
      }
      while (v20);
    }
  }
  switch((int)v10)
  {
    case 0:
      v21 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v21 >= 0x41)
      {
        v22 = v21 >> 6;
        v23 = *v11;
        if (v22 <= 2)
          v22 = 2;
        v24 = v22 - 1;
        v25 = (int *)(*a2 + 4);
        do
        {
          v26 = *v25;
          v25 += 16;
          v23 += v26;
          *v11 = v23;
          --v24;
        }
        while (v24);
      }
      break;
    case 1:
      v45 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v45 >= 0x41)
      {
        v46 = v45 >> 6;
        v47 = v11[1];
        if (v46 <= 2)
          v46 = 2;
        v48 = v46 - 1;
        v49 = (int *)*a2 + 17;
        do
        {
          v50 = *v49;
          v49 += 16;
          v47 += v50;
          v11[1] = v47;
          --v48;
        }
        while (v48);
      }
      break;
    case 2:
      v33 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v33 >= 0x41)
      {
        v34 = v33 >> 6;
        v35 = v11[2];
        if (v34 <= 2)
          v34 = 2;
        v36 = v34 - 1;
        v37 = (int *)*a2 + 18;
        do
        {
          v38 = *v37;
          v37 += 16;
          v35 += v38;
          v11[2] = v35;
          --v36;
        }
        while (v36);
      }
      break;
    case 3:
      v39 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v39 >= 0x41)
      {
        v40 = v39 >> 6;
        v41 = v11[3];
        if (v40 <= 2)
          v40 = 2;
        v42 = v40 - 1;
        v43 = (int *)*a2 + 19;
        do
        {
          v44 = *v43;
          v43 += 16;
          v41 += v44;
          v11[3] = v41;
          --v42;
        }
        while (v42);
      }
      break;
    case 4:
      v27 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v27 >= 0x41)
      {
        v28 = v27 >> 6;
        v29 = v11[4];
        if (v28 <= 2)
          v28 = 2;
        v30 = v28 - 1;
        v31 = (int *)(*a2 + 5);
        do
        {
          v32 = *v31;
          v31 += 16;
          v29 += v32;
          v11[4] = v29;
          --v30;
        }
        while (v30);
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("axis %d not implemented", v10);
  }
  if (v12 != -1)
  {
    if ((_DWORD)v10 != v12)
      return;
    goto LABEL_61;
  }
  if (v11[4] == 1)
    v51 = 4;
  else
    v51 = 5;
  if ((_DWORD)v10 == v51)
LABEL_61:
    v11[5] = v10 + 1;
}

void sub_190E3F56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v17;
  *(_QWORD *)(v18 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float newpACCPHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 2);
  return v4 + (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2) * 0.0);
}

float newpACCPHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float newpACCPHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float newpACCPHeuristics::get_flops_per_sec(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  float v5;

  v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (a3 == 1)
  {
    v5 = 8.0;
    if (!v4)
      goto LABEL_3;
  }
  else
  {
    v5 = 4.0;
    if (!v4)
LABEL_3:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(unint64_t)(float)((float)(*((float *)v4 + 5) * v5) * 3.0);
}

uint64_t newpPlatformHeuristics::GetGpuPerfHeuristics(newpPlatformHeuristics *this)
{
  return (uint64_t)this + 408;
}

uint64_t newpANEHeuristics::get_highest_device_pstate(newpANEHeuristics *this)
{
  return 2;
}

void Espresso::EspressoReporterUtilities::send_network_info_to_coreanalytics(Espresso::EspressoReporterUtilities *this, void *a2, Espresso *a3, char *a4, const char *a5)
{
  int v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  unsigned int v20;
  uint64_t v22;
  __int128 *v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  char *__s;
  Espresso *v29;
  unint64_t i;
  _BYTE v31[8];
  int v32;
  char v33;
  void *__p;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  char **v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v7 = (int)a2;
  v44 = 0;
  v45 = 0;
  v43 = &v44;
  v9 = *((_QWORD *)this + 133);
  v35 = 0;
  v36 = 0;
  __p = 0;
  std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>((char *)&__p, *(_QWORD **)(v9 + 24), *(_QWORD **)(v9 + 32), (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 4);
  if (v7 >= (unint64_t)((v35 - (uint64_t)__p) >> 4))
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v29 = a3;
  __s = a4;
  v10 = *((_OWORD *)__p + v7);
  v42 = v10;
  v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)&v46 = &__p;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v14 = *(char **)(v11 + 32);
  v15 = *(char **)(v11 + 40);
  for (i = v15 - v14; v14 != v15; v14 += 16)
  {
    v16 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      v19 = *(_DWORD *)(v16 + 8);
      v18 = (int *)(v16 + 8);
      v17 = v19;
      v20 = (0x2Fu >> (v19 - 22)) & 1;
      if ((v19 - 10006) > 5 || v20 == 0)
      {
        if (is_gpu(v18))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "GPU");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v43, &__p, (uint64_t)&__p);
        }
        else
        {
          if (is_cpu(v18))
            std::string::basic_string[abi:ne180100]<0>(&__p, "CPU");
          else
            Espresso::platform_to_string(v17, &__p);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v43, &__p, (uint64_t)&__p);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ANE");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v43, &__p, (uint64_t)&__p);
      }
      if (SHIBYTE(v36) < 0)
        operator delete(__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "");
  if (v45)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::ostream_iterator<std::string,char,std::char_traits<char>>>(&v46, v43, &v44, &__p, "_");
    std::stringbuf::str();
    if (SHIBYTE(v41) < 0)
      operator delete((void *)v40);
    v41 = v47;
    v40 = v46;
    if (SHIBYTE(v47) < 0)
    {
      v23 = (__int128 *)v40;
      v22 = --*((_QWORD *)&v40 + 1);
    }
    else
    {
      v22 = HIBYTE(v47) - 1;
      HIBYTE(v41) = v22 & 0x7F;
      v23 = &v40;
    }
    *((_BYTE *)v23 + v22) = 0;
    __p = (void *)*MEMORY[0x1E0DE4F60];
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    v35 = MEMORY[0x1E0DE4FB8] + 16;
    if (v38 < 0)
      operator delete(v37);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401CCD0](&v39);
  }
  v24 = *((_DWORD *)this + 4);
  Espresso::fetch_hash_for_analytics(v29, (uint64_t)&__p);
  if (Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::onceToken != -1)
    dispatch_once(&Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::onceToken, &__block_literal_global_10611);
  v32 = i >> 4;
  v33 = 1;
  v31[0] = 0;
  v31[4] = 0;
  v25 = std::string::basic_string[abi:ne180100]<0>(&v46, __s);
  Espresso::EventReporterImplementation::logMetric((uint64_t)v25, (uint64_t)&v40, (uint64_t)&v32, (uint64_t)v31, (uint64_t)&__p, (v24 >> 4) & 1, (uint64_t)&v46);
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (*((_QWORD *)&v11 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v43, v44);
}

void sub_190E3FAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::ostringstream::~ostringstream((uint64_t)&__p);
  if (*(char *)(v23 - 169) < 0)
    operator delete(*(void **)(v23 - 192));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 160);
  std::__tree<std::string>::destroy(v23 - 144, *(char **)(v23 - 136));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t is_gpu(int *a1)
{
  int v1;
  uint64_t result;

  v1 = *a1;
  result = 1;
  if (((v1 - 50000) > 8 || ((1 << (v1 - 80)) & 0x16F) == 0) && v1 != 90000)
    return 0;
  return result;
}

void Espresso::generic_expand_dims_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t i;
  int *v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int *j;
  int v23;
  unint64_t v24;
  std::vector<int>::const_iterator v25;
  int64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v31;
  unint64_t v32;
  std::vector<int> v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  std::vector<int>::value_type __x[4];
  uint64_t v39;
  void *__p;
  void *v41;
  __int128 v42;

  *(_QWORD *)&v42 = *MEMORY[0x1E0C80C00];
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v34, *a2, 0);
  Espresso::layer_nd_shape::shape_vector(&v33, (uint64_t)&v34);
  v30 = a3;
  v31 = 0;
  v32 = 0;
  v5 = *(_DWORD *)(a1 + 284);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = v5;
  v7 = v6 + HIDWORD(v35);
  if ((int)v6 + HIDWORD(v35) > 5)
  {
    v29 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v29 = (_QWORD *)*v29;
    *(_QWORD *)__x = v29;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("generic_expand_dims_kernel: Output rank cannot be more than 5 in %s", __x);
  }
  v8 = 0;
  v9 = 0;
  for (i = 0; i != v6; ++i)
  {
    if (*(int *)(a1 + 284) <= 0)
      v11 = (int *)(a1 + 280);
    else
      v11 = (int *)(a1 + 4 * i + 288);
    v12 = *v11;
    v13 = v7 & (v12 >> 31);
    v14 = v13 + v12;
    if (v13 + v12 < 0 || v14 >= v7)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Invalid axis %d for rank %zu", (v13 + v12), SHIDWORD(v35));
    v15 = v8;
    if (v8 != v9)
    {
      while (*v15 != v14)
      {
        if (++v15 == v9)
        {
          v15 = v9;
          break;
        }
      }
    }
    if (v15 != v9)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("All the values in the 'axes' parameter of expand_dims kernel must be unique");
    if ((unint64_t)v9 >= v32)
    {
      v16 = v9 - v8;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v18 = v32 - (_QWORD)v8;
      if ((uint64_t)(v32 - (_QWORD)v8) >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v19);
      else
        v20 = 0;
      v21 = (int *)(v19 + 4 * v16);
      *v21 = v14;
      for (j = v21 + 1; v9 != v8; --v21)
      {
        v23 = *--v9;
        *(v21 - 1) = v23;
      }
      v31 = v21;
      v32 = v19 + 4 * v20;
      if (v8)
        operator delete(v8);
      v8 = v21;
      v9 = j;
    }
    else
    {
      *v9++ = v14;
    }
  }
  std::__sort<std::__less<int,int> &,int *>();
  if (v9 != v31)
  {
    v24 = 0;
    do
    {
      v25.__i_ = &v33.__begin_[v31[v24]];
      __x[0] = 1;
      std::vector<int>::insert(&v33, v25, __x);
      ++v24;
    }
    while (v9 - v31 > v24);
  }
  memset(__x, 0, sizeof(__x));
  LODWORD(v39) = 0;
  v26 = (char *)v33.__end_ - (char *)v33.__begin_;
  if (v33.__end_ != v33.__begin_)
  {
    v27 = v26 >> 2;
    if ((unint64_t)(v26 >> 2) <= 1)
      v27 = 1;
    memcpy(__x, v33.__begin_, 4 * v27);
  }
  HIDWORD(v39) = (unint64_t)v26 >> 2;
  v34 = *(_OWORD *)__x;
  v35 = v39;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v34, 0, (uint64_t)__x);
  *v30 = 0;
  v30[1] = 0;
  v30[2] = 0;
  v36 = v30;
  v37 = 0;
  v28 = (char *)operator new(0x40uLL);
  *v30 = v28;
  v30[1] = v28;
  v30[2] = v28 + 64;
  v30[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(v30 + 2), (__int128 *)__x, &v42, (uint64_t)v28);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v31)
    operator delete(v31);
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
}

void sub_190E3FFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v29 + 8) = v30;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a11)
    operator delete(a11);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::value_type *__x)
{
  std::vector<int> *v5;
  const int *end;
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  std::__wrap_iter<const int *>::iterator_type v9;
  const int *v10;
  std::vector<int>::pointer v11;
  int v12;
  const int *begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  std::__split_buffer<int> __v;

  v5 = this;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v14 = end - this->__begin_ + 1;
    if (v14 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)__position.__i_ - (char *)begin;
    v16 = __position.__i_ - begin;
    v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18)
    {
      v20 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = &v20[v16];
    __v.__first_ = v20;
    __v.__begin_ = v21;
    __v.__end_cap_.__value_ = &v20[v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (begin == __position.__i_)
          v23 = 1;
        else
          v23 = v15 >> 1;
        v24 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
        v21 = (int *)((char *)v24 + (v23 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v24;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v24[v25];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v22 = v16 + 2;
        if (v16 >= -1)
          v22 = v16 + 1;
        v21 -= v22 >> 1;
        __v.__begin_ = v21;
      }
    }
    *v21 = *__x;
    __v.__end_ = v21 + 1;
    std::vector<int>::__swap_out_circular_buffer(v5, &__v, (std::vector<int>::pointer)__position.__i_);
    this = (std::vector<int> *)__v.__first_;
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v9 = __position.__i_ + 1;
    v10 = end - 1;
    v11 = this->__end_;
    while (v10 < end)
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9)
      this = (std::vector<int> *)memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    *__position.__i_ = *__x;
  }
  return (std::vector<int>::iterator)this;
}

void sub_190E401E4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void Espresso::EventReporterImplementation::logMetric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  void *v8;
  id v9;
  int64x2_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  char *v26;
  void *v27;
  _QWORD v28[9];
  int v29;

  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = ___ZN8Espresso27EventReporterImplementation9logMetricERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8optionalIiEESD_S9_NS_21_EspressoCompilerTypeES9__block_invoke;
  v28[3] = &__block_descriptor_76_e30___NSObject_OS_xpc_object__8__0l;
  v28[4] = a2;
  v28[5] = a3;
  v28[6] = a4;
  v28[7] = a5;
  v28[8] = a7;
  v29 = a6;
  v7 = MEMORY[0x19401D648](v28);
  v8 = (void *)v7;
  if (Espresso::EventReporterImplementation::reporter_tests_enable)
  {
    v9 = (id)(*(uint64_t (**)(uint64_t))(v7 + 16))(v7);
    v10 = (int64x2_t *)Espresso::EventReporterImplementation::shared_event_pond_ptr;
    if (!Espresso::EventReporterImplementation::shared_event_pond_ptr)
    {
      v10 = (int64x2_t *)operator new();
      v10->i64[0] = 0;
      v10->i64[1] = 0;
      v10[1].i64[0] = 0;
      Espresso::EventReporterImplementation::shared_event_pond_ptr = v10;
    }
    v12 = (_QWORD *)v10->i64[1];
    v11 = v10[1].u64[0];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((uint64_t)v12 - v10->i64[0]) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v15 = v11 - v10->i64[0];
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        if (v17 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v18 = (char *)operator new(8 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (_QWORD *)v10->i64[0];
      v21 = (_QWORD *)v10->i64[1];
      if (v21 == (_QWORD *)v10->i64[0])
      {
        v24 = vdupq_n_s64((unint64_t)v21);
      }
      else
      {
        do
        {
          v23 = *--v21;
          *v21 = 0;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v24 = *v10;
      }
      v10->i64[0] = (uint64_t)v19;
      v10->i64[1] = (uint64_t)v13;
      v10[1].i64[0] = (uint64_t)v20;
      v26 = (char *)v24.i64[1];
      v25 = (char *)v24.i64[0];
      while (v26 != v25)
      {
        v27 = (void *)*((_QWORD *)v26 - 1);
        v26 -= 8;

      }
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    v10->i64[1] = (uint64_t)v13;
  }
  else
  {
    analytics_send_event_lazy();
  }

}

void sub_190E4049C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t newpGPUHeuristics::get_highest_device_pstate(newpGPUHeuristics *this)
{
  return 5;
}

float newpGPUHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) + *((float *)v2 + 5);
}

float newpGPUHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 408.0;
}

float newpANEHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 4096.0;
}

double newpPlatformHeuristics::GetANEComputeRatio(newpPlatformHeuristics *this)
{
  return 0.6;
}

uint64_t Espresso::generic_inner_product_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  __n128 v5;
  int v6;

  v5.n128_f32[0] = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  v6 = *((_DWORD *)*a2 + 5);
  if (v6 != -1 && v6 <= 3)
    v5.n128_f64[0] = (double)(*((_DWORD *)*a2 + 1) * *((_DWORD *)*a2 + 2));
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 384))(a1, v5);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_190E4071C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float newpACCPHeuristics::get_amx_flops_per_sec(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  float v5;

  v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (a3 != 1)
  {
    if (v4)
    {
      v5 = 256.0;
      return (float)(*((float *)v4 + 5) * 0.5) * v5;
    }
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!v4)
    goto LABEL_7;
  v5 = 512.0;
  return (float)(*((float *)v4 + 5) * 0.5) * v5;
}

uint64_t PlatformHeuristics::is_jade_family(PlatformHeuristics *this)
{
  return 0;
}

void Espresso::ANECompilerEngine::inner_product_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v6;
  _DWORD *v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  BOOL v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  __int128 v22[2];
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  __int128 v27;

  *((_QWORD *)&v27 + 1) = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 841))
  {
    v6 = (_OWORD *)*a2;
    v14 = *(_OWORD *)*a2;
    v15 = *(_OWORD *)(*a2 + 16);
    v16 = *(_QWORD *)(*a2 + 32);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v17, *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
    v7 = (_DWORD *)*a2;
    v8 = *(_DWORD *)(*a2 + 16);
    v9 = v8 < 0 || (int)v7[3] < 1 || (int)v7[2] < 1 || (int)v7[1] < 1 || *v7 < 1;
    v10 = v7[5];
    if (v10 == -1)
      v11 = v8 != 1;
    else
      v11 = v10 == 5;
    if (v8)
      v12 = 0;
    else
      v12 = v11;
    if (!v9 && !v12)
    {
      DWORD2(v14) = *(_DWORD *)(a1 + 304);
      DWORD1(v15) = 4;
    }
    v22[0] = v14;
    v22[1] = v15;
    v23 = v16;
    __p = 0;
    v25 = 0;
    v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v17, (uint64_t)v18, (v18 - (_BYTE *)v17) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v20 = a3;
    v21 = 0;
    v13 = (char *)operator new(0x40uLL);
    *a3 = v13;
    a3[1] = v13;
    a3[2] = v13 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v22, &v27, (uint64_t)v13);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
  }
  else
  {
    Espresso::inner_product_top_shape(a3, a1 + 304, *a2);
  }
}

void sub_190E40980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

double newpPlatformHeuristics::GetMPSInnerProductFactor(newpPlatformHeuristics *this)
{
  return 4.0;
}

double newpPlatformHeuristics::GetANEDualSrcEWFactor(newpPlatformHeuristics *this)
{
  return 1.0;
}

uint64_t newpANEHeuristics::get_macs_per_ne(newpANEHeuristics *this)
{
  return 256;
}

uint64_t newpANEHeuristics::get_num_nes(newpANEHeuristics *this)
{
  return 16;
}

uint64_t e5rt_tensor_desc_retain_dtype(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCDF00;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E40A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::get_anec_final_strides<Espresso::pool3d_params_t>(char *a1, _DWORD *a2, int a3, int a4, _DWORD *a5)
{
  int v8;
  int v9;
  int v10;
  BOOL v12;
  int v13;
  int v15;
  _DWORD *v16;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  int v39;
  _DWORD __src[3];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v8 = a2[5];
  if (a2[14])
  {
    v9 = a2[4];
    a4 = a2[5];
  }
  else
  {
    v10 = a2[6];
    v12 = v8 == a4 && a2[4] == a4 && v10 == a3;
    v9 = a4;
    if (!v12)
    {
      __src[0] = a2[4];
      __src[1] = v8;
      __src[2] = v10;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(a1, (char *)__src, (uint64_t)&v41, 3uLL);
      return;
    }
  }
  v13 = a5[4];
  if (a4 > 2 && a5[3] == 1)
    v15 = 1;
  else
    v15 = a4;
  v16 = operator new(4uLL);
  if (v9 > 2 && v13 == 1)
    v18 = 1;
  else
    v18 = v9;
  *v16 = v18;
  *(_QWORD *)a1 = v16;
  *((_QWORD *)a1 + 1) = v16 + 1;
  *((_QWORD *)a1 + 2) = v16 + 1;
  v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(2uLL);
  v20 = *(char **)a1;
  v21 = (char *)*((_QWORD *)a1 + 1);
  *((_DWORD *)v19 + 1) = v15;
  v22 = v19 + 4;
  v24 = &v19[4 * v23];
  v25 = v19 + 8;
  while (v21 != v20)
  {
    v26 = *((_DWORD *)v21 - 1);
    v21 -= 4;
    *((_DWORD *)v22 - 1) = v26;
    v22 -= 4;
  }
  *(_QWORD *)a1 = v22;
  *((_QWORD *)a1 + 1) = v25;
  *((_QWORD *)a1 + 2) = v24;
  if (v20)
  {
    operator delete(v20);
    v24 = (char *)*((_QWORD *)a1 + 2);
  }
  *((_QWORD *)a1 + 1) = v25;
  if ((int)a2[6] > 2 && a5[2] == 1)
    v28 = 1;
  else
    v28 = a2[6];
  if (v25 >= v24)
  {
    v30 = *(char **)a1;
    v31 = (uint64_t)&v25[-*(_QWORD *)a1] >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v33 = v24 - v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL;
    v35 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v32;
    if (v35)
    {
      v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
      v30 = *(char **)a1;
      v25 = (char *)*((_QWORD *)a1 + 1);
    }
    else
    {
      v36 = 0;
    }
    v37 = (int *)(v35 + 4 * v31);
    v38 = v35 + 4 * v36;
    *v37 = v28;
    v29 = (char *)(v37 + 1);
    while (v25 != v30)
    {
      v39 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *--v37 = v39;
    }
    *(_QWORD *)a1 = v37;
    *((_QWORD *)a1 + 1) = v29;
    *((_QWORD *)a1 + 2) = v38;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *((_DWORD *)v19 + 2) = v28;
    v29 = v19 + 12;
  }
  *((_QWORD *)a1 + 1) = v29;
}

void sub_190E40CCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::softmax_nd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, _QWORD **a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  float *v21;
  std::vector<int>::size_type v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  std::vector<int>::pointer begin;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  std::vector<int>::pointer v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  float *v42;
  std::__shared_weak_count *v43;
  float __C;
  float __A;
  int v46;
  float *v47[3];
  float *v48[3];
  std::vector<int> v49;
  std::vector<int> v50;

  v6 = *(_DWORD *)(a1 + 280);
  v7 = (uint64_t)*a4;
  (*(void (**)(_QWORD))(*(_QWORD *)**a4 + 32))(**a4);
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 160);
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)v7 + 168);
  v43 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *a3;
  (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13);
  v14 = *(_QWORD *)(*v13 + 160);
  v15 = *(std::__shared_weak_count **)(*v13 + 168);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288);
  v19 = (v18 >> 2) & (v6 >> 31);
  v20 = (v19 + v6);
  if (v19 + v6 < 0 || (int)v20 >= (int)(v18 >> 2))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
  v21 = *(float **)(v14 + 24);
  v22 = (v18 >> 2);
  std::vector<int>::vector(&v50, v22);
  std::vector<int>::vector(&v49, v22);
  v42 = v21;
  v23 = *(int **)(a1 + 288);
  v24 = 1;
  while (v23 != *(int **)(a1 + 296))
  {
    v25 = *v23++;
    v24 *= v25;
  }
  std::vector<float>::vector(v48, v24);
  std::vector<float>::vector(v47, v24);
  NDShapeUtils::compute_strides(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), (uint64_t)v50.__begin_, (uint64_t)v50.__end_);
  __A = 0.0;
  v46 = v24;
  __C = 0.0;
  if (v24 >= 1)
  {
    v26 = 0;
    begin = v50.__begin_;
    do
    {
      LODWORD(v28) = begin[v20];
      if ((int)v28 >= 1)
      {
        v29 = 0;
        v30 = v26;
        do
        {
          vDSP_maxv((const float *)(v12 + v30 * 4), (int)v28, &__C, *(int *)(*(_QWORD *)(a1 + 288) + 4 * v20));
          __C = -__C;
          vDSP_vsadd((const float *)(v12 + v30 * 4), v50.__begin_[v20], &__C, &v47[0][v30], v50.__begin_[v20], *(int *)(*(_QWORD *)(a1 + 288) + 4 * v20));
          ++v29;
          begin = v50.__begin_;
          ++v30;
          v28 = v50.__begin_[v20];
        }
        while (v29 < v28);
      }
      v31 = v24;
      if ((int)v20 > 0)
        v31 = begin[(v20 - 1)];
      v26 += v31;
    }
    while (v26 < v24);
  }
  vvexpf(v48[0], v47[0], &v46);
  if (v24 >= 1)
  {
    v32 = 0;
    v33 = v50.__begin_;
    do
    {
      LODWORD(v34) = v33[v20];
      if ((int)v34 >= 1)
      {
        v35 = 0;
        v36 = v32;
        do
        {
          vDSP_sve(&v48[0][v36], (int)v34, &__A, *(int *)(*(_QWORD *)(a1 + 288) + 4 * v20));
          vDSP_vfill(&__A, &v47[0][v36], v50.__begin_[v20], *(int *)(*(_QWORD *)(a1 + 288) + 4 * v20));
          ++v35;
          v33 = v50.__begin_;
          ++v36;
          v34 = v50.__begin_[v20];
        }
        while (v35 < v34);
      }
      v37 = v24;
      if ((int)v20 > 0)
        v37 = v33[(v20 - 1)];
      v32 += v37;
    }
    while (v32 < v24);
  }
  vvdivf(v42, v48[0], v47[0], &v46);
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
  if (v49.__begin_)
  {
    v49.__end_ = v49.__begin_;
    operator delete(v49.__begin_);
  }
  if (v50.__begin_)
  {
    v50.__end_ = v50.__begin_;
    operator delete(v50.__begin_);
  }
  if (v15)
  {
    v38 = (unint64_t *)&v15->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v43)
  {
    v40 = (unint64_t *)&v43->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_190E4106C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  v25 = *(void **)(v23 - 112);
  if (v25)
  {
    *(_QWORD *)(v23 - 104) = v25;
    operator delete(v25);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_190E41154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NDShapeUtils::compute_strides(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;

  if (a2 != result)
  {
    v4 = (a2 - result) >> 2;
    if (v4 != (a4 - a3) >> 2)
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("Mismatch between lengths of shape and strides");
    *(_DWORD *)(a3 + 4 * (v4 - 1)) = 1;
    if (v4 != 1)
    {
      v5 = 1;
      do
      {
        v5 *= *(_DWORD *)(result - 4 + 4 * v4);
        *(_DWORD *)(a3 - 8 + 4 * v4--) = v5;
      }
      while (v4 != 1);
    }
  }
  return result;
}

uint64_t espresso_network_change_input_blob_shapes_seq_rank(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::vector<int>::size_type v22;
  uint64_t v23;
  int v24;
  void *context;
  std::vector<int> v27;
  std::vector<int> v28;
  std::vector<int> v29;
  std::vector<int> v30;
  std::vector<int> v31;
  std::vector<int> v32;
  char *v33;
  char *v34;
  char *v35;

  v18 = (void *)MEMORY[0x19401D4A4]();
  if (a1)
  {
    context = v18;
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
      if (a3)
      {
        if (a3 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3);
        v33 = v19;
        v35 = &v19[8 * v20];
        bzero(v19, 8 * a3);
        v34 = &v19[8 * a3];
      }
      else
      {
        v19 = 0;
      }
      std::vector<int>::vector(&v32, a3);
      std::vector<int>::vector(&v31, a3);
      std::vector<int>::vector(&v30, a3);
      std::vector<int>::vector(&v29, a3);
      std::vector<int>::vector(&v28, a3);
      if (a10)
        v22 = a3;
      else
        v22 = 0;
      std::vector<int>::vector(&v27, v22);
      if (a3 >= 1)
      {
        v23 = 0;
        do
        {
          *(_QWORD *)&v19[8 * v23] = *(_QWORD *)(a4 + 8 * v23);
          v32.__begin_[v23] = *(_DWORD *)(a5 + 4 * v23);
          v31.__begin_[v23] = *(_DWORD *)(a6 + 4 * v23);
          v30.__begin_[v23] = *(_DWORD *)(a7 + 4 * v23);
          v29.__begin_[v23] = *(_DWORD *)(a8 + 4 * v23);
          if (a9)
            v24 = *(_DWORD *)(a9 + 4 * v23);
          else
            v24 = 1;
          v28.__begin_[v23] = v24;
          if (a10)
            v27.__begin_[v23] = *(_DWORD *)(a10 + 4 * v23);
          ++v23;
        }
        while (a3 != v23);
      }
      EspressoLight::espresso_plan::change_input_shapes((uint64_t)a1, a2, (uint64_t *)&v33, &v32, &v31, &v30, &v29, &v28, (uint64_t *)&v27);
      if (v27.__begin_)
      {
        v27.__end_ = v27.__begin_;
        operator delete(v27.__begin_);
      }
      if (v28.__begin_)
      {
        v28.__end_ = v28.__begin_;
        operator delete(v28.__begin_);
      }
      if (v29.__begin_)
      {
        v29.__end_ = v29.__begin_;
        operator delete(v29.__begin_);
      }
      if (v30.__begin_)
      {
        v30.__end_ = v30.__begin_;
        operator delete(v30.__begin_);
      }
      if (v31.__begin_)
      {
        v31.__end_ = v31.__begin_;
        operator delete(v31.__begin_);
      }
      if (v32.__begin_)
      {
        v32.__end_ = v32.__begin_;
        operator delete(v32.__begin_);
      }
      if (v19)
        operator delete(v19);
      v21 = 0;
    }
    else
    {
      v21 = 4294967290;
    }
    v18 = context;
  }
  else
  {
    v21 = 4294967290;
  }
  objc_autoreleasePoolPop(v18);
  return v21;
}

void sub_190E41440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  char *v26;
  void *v27;
  uint64_t v28;
  void *v31;
  std::exception *v32;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  v31 = *(void **)(v28 - 136);
  if (v31)
  {
    *(_QWORD *)(v28 - 128) = v31;
    operator delete(v31);
  }
  if (v27)
    operator delete(v27);
  if (a2 == 1)
  {
    v32 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v26, v32);
    __cxa_end_catch();
    JUMPOUT(0x190E41408);
  }
  _Unwind_Resume(exception_object);
}

void sub_190E41538()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 112);
  if (v1)
  {
    *(_QWORD *)(v0 - 104) = v1;
    JUMPOUT(0x190E414F4);
  }
  JUMPOUT(0x190E414FCLL);
}

_QWORD *`anonymous namespace'::create_mmap_blob<float,1>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::vector<int>::pointer begin;
  char *v12;
  _QWORD *v13;
  std::vector<int> v15;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a4);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 80))(*a3, v8);
  if (!v9)
    Espresso::throw_exception_selector<Espresso::io_error>("MMapped data not available.");
  v10 = v9;
  Espresso::layer_nd_shape::shape_vector(&v15, a5);
  begin = v15.__begin_;
  v12 = (char *)operator new(0x58uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBEC00;
  *((_QWORD *)v12 + 3) = &off_1E2DA1190;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  v13 = v12 + 56;
  *((_DWORD *)v12 + 8) = *begin;
  *((_QWORD *)v12 + 5) = v10;
  v12[48] = 0;
  *a1 = v12 + 24;
  a1[1] = v12;
  v15.__end_ = begin;
  operator delete(begin);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v13, *a3, a3[1]);
}

void sub_190E4163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_ulonglong(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  std::logic_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, "\" not found");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v4 = objc_msgSend(v2, "unsignedLongLongValue");

  return v4;
}

void sub_190E41734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t Espresso::blob_storage_mmap::has_blob_file_metadata(Espresso::blob_storage_mmap *this)
{
  return 1;
}

double Espresso::blob_storage_mmap::get_blob_file_metadata@<D0>(Espresso::blob_storage_mmap *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  std::string v6;

  if (*((char *)this + 71) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  else
    v6 = *(std::string *)((_BYTE *)this + 2);
  *(_DWORD *)a3 = 1;
  result = *(double *)&v6.__r_.__value_.__l.__data_;
  *(std::string *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 32) = a2;
  return result;
}

void Espresso::base_kernel::set_blob_file_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string *v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *__p[2];
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  char v49;

  v4 = *(unsigned __int8 *)(a3 + 31);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Provided blob storage metadata has empty file.");
  v8 = operator new();
  Espresso::blob_file_metadata::blob_file_metadata(v8, a3);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v46 = v9;
  v47 = v8;
  v10 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v12)
        v3 = v10 % v12;
    }
    else
    {
      v3 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 24) + 8 * v3);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)__p))
            goto LABEL_80;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3)
            break;
        }
      }
    }
  }
  v18 = operator new(0x30uLL);
  v19 = (_QWORD *)(a1 + 40);
  v48[0] = v18;
  v48[1] = a1 + 40;
  v49 = 0;
  *v18 = 0;
  v18[1] = v11;
  v20 = (std::string *)(v18 + 2);
  if (SHIBYTE(v46) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v18[4] = v46;
  }
  v21 = v47;
  v47 = 0;
  v18[5] = v21;
  v49 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 48) + 1);
  v23 = *(float *)(a1 + 56);
  if (!v12 || (float)(v23 * (float)v12) < v22)
  {
    v24 = 1;
    if (v12 >= 3)
      v24 = (v12 & (v12 - 1)) != 0;
    v25 = v24 | (2 * v12);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = (int8x8_t)v26;
    else
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v12 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)&prime > v12)
      goto LABEL_36;
    if (*(_QWORD *)&prime < v12)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
      if (v12 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (*(_QWORD *)&prime <= v34)
        prime = (int8x8_t)v34;
      if (*(_QWORD *)&prime >= v12)
      {
        v12 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = operator new(8 * *(_QWORD *)&prime);
          v29 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v28;
          if (v29)
            operator delete(v29);
          v30 = 0;
          *(int8x8_t *)(a1 + 32) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v30++) = 0;
          while (*(_QWORD *)&prime != v30);
          v31 = (_QWORD *)*v19;
          if (*v19)
          {
            v32 = v31[1];
            v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(_QWORD *)&prime)
                v32 %= *(_QWORD *)&prime;
            }
            else
            {
              v32 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v32) = v19;
            v37 = (_QWORD *)*v31;
            if (*v31)
            {
              do
              {
                v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(_QWORD *)&prime)
                    v38 %= *(_QWORD *)&prime;
                }
                else
                {
                  v38 &= *(_QWORD *)&prime - 1;
                }
                if (v38 != v32)
                {
                  v39 = *(_QWORD *)(a1 + 24);
                  if (!*(_QWORD *)(v39 + 8 * v38))
                  {
                    *(_QWORD *)(v39 + 8 * v38) = v31;
                    goto LABEL_61;
                  }
                  *v31 = *v37;
                  *v37 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8 * v38);
                  **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8 * v38) = v37;
                  v37 = v31;
                }
                v38 = v32;
LABEL_61:
                v31 = v37;
                v37 = (_QWORD *)*v37;
                v32 = v38;
              }
              while (v37);
            }
          }
          v12 = (unint64_t)prime;
          goto LABEL_65;
        }
        v44 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        if (v44)
          operator delete(v44);
        v12 = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
    }
LABEL_65:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v3 = v11 % v12;
      else
        v3 = v11;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
  }
  v40 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 8 * v3);
  v41 = v48[0];
  if (v40)
  {
    *(_QWORD *)v48[0] = *v40;
LABEL_78:
    *v40 = v41;
    goto LABEL_79;
  }
  *(_QWORD *)v48[0] = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v41;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v3) = v19;
  if (*(_QWORD *)v41)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v41 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v42);
    goto LABEL_78;
  }
LABEL_79:
  v48[0] = 0;
  ++*(_QWORD *)(a1 + 48);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,void *>>>>::reset[abi:ne180100]((uint64_t)v48);
LABEL_80:
  v43 = v47;
  v47 = 0;
  if (v43)
    std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v43);
  if (SHIBYTE(v46) < 0)
    operator delete(__p[0]);
}

void sub_190E41CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a14);
  std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_file_metadata::blob_file_metadata(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t Espresso::blob_storage_mmap::mapped_blob(Espresso::blob_storage_mmap *this, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v3 = (_QWORD *)((char *)this + 16);
  do
  {
    v4 = v2[4];
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = v2;
    else
      v6 = v2 + 1;
    if (v5)
      v3 = v2;
    v2 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v3 != (_QWORD *)((char *)this + 16) && v3[4] <= a2)
    return *((_QWORD *)this + 9) + v3[6];
  else
    return 0;
}

uint64_t Espresso::blob_storage_mmap::get_blob_size(Espresso::blob_storage_mmap *this, unint64_t a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (char *)this + 16;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((_QWORD *)v5 + 4) <= a2)
    return *((_QWORD *)v5 + 7);
  else
    return 0;
}

std::vector<int> *Espresso::layer_nd_shape::shape_vector(std::vector<int> *this, uint64_t a2)
{
  std::vector<int> *result;
  uint64_t v4;
  std::vector<int>::pointer begin;

  result = std::vector<int>::vector(this, *(int *)(a2 + 20));
  if (*(int *)(a2 + 20) >= 1)
  {
    v4 = 0;
    begin = result->__begin_;
    do
    {
      begin[v4] = *(_DWORD *)(a2 + 4 * v4);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 20));
  }
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_190E41EBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_load_constant_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  int v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70[2];
  uint64_t v71[2];
  uint64_t v72[2];
  __int128 v73;
  uint64_t v74[2];
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  uint64_t v78;

  v77 = 0;
  v78 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v77, *a6, a6[1]);
  if (*(char *)(a3 + 23) < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if (v11 != 13)
    {
      if (v11 == 18)
      {
        a3 = *(_QWORD *)a3;
        goto LABEL_12;
      }
      a3 = *(_QWORD *)a3;
      if (v11 != 16)
        goto LABEL_117;
LABEL_64:
      if (*(_QWORD *)a3 == 0x746E6174736E6F63 && *(_QWORD *)(a3 + 8) == 0x38755F626F6C625FLL)
      {
        v54 = (std::__shared_weak_count *)v78;
        v71[0] = v77;
        v71[1] = v78;
        if (v78)
        {
          v55 = (unint64_t *)(v78 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,4>(&v75, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v71, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 320) * *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
        if (v54)
        {
          p_shared_owners = (unint64_t *)&v54->__shared_owners_;
          do
            v58 = __ldaxr(p_shared_owners);
          while (__stlxr(v58 - 1, p_shared_owners));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v59 = operator new();
        *(_DWORD *)(Espresso::blob_cpu::blob_cpu(v59, (_QWORD *)(a1 + 8), &v75) + 240) = 4;
        v60 = (_QWORD *)operator new();
        *v60 = &off_1E2DC3740;
        v60[1] = 0;
        v60[2] = 0;
        v60[3] = v59;
        v61 = *(std::__shared_weak_count **)(a1 + 352);
        *(_QWORD *)(a1 + 344) = v59;
        *(_QWORD *)(a1 + 352) = v60;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v29 = v76;
        if (!v76)
          goto LABEL_108;
        v64 = (unint64_t *)&v76->__shared_owners_;
        do
          v31 = __ldaxr(v64);
        while (__stlxr(v31 - 1, v64));
      }
      else
      {
        if (*(_QWORD *)a3 != 0x746E6174736E6F63 || *(_QWORD *)(a3 + 8) != 0x38735F626F6C625FLL)
          goto LABEL_117;
        v44 = (std::__shared_weak_count *)v78;
        v70[0] = v77;
        v70[1] = v78;
        if (v78)
        {
          v45 = (unint64_t *)(v78 + 8);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,4>(&v75, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v70, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 320) * *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
        if (v44)
        {
          v47 = (unint64_t *)&v44->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v49 = operator new(0x118uLL);
        v49[1] = 0;
        v49[2] = 0;
        *v49 = &off_1E2DC1868;
        *(_QWORD *)&v73 = Espresso::blob_cpu::blob_cpu((uint64_t)(v49 + 3), (_QWORD *)(a1 + 8), &v75);
        *((_QWORD *)&v73 + 1) = v49;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 344, &v73);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
        if (*((_QWORD *)&v73 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v29 = v76;
        if (!v76)
          goto LABEL_108;
        v53 = (unint64_t *)&v76->__shared_owners_;
        do
          v31 = __ldaxr(v53);
        while (__stlxr(v31 - 1, v53));
      }
      goto LABEL_106;
    }
    a3 = *(_QWORD *)a3;
LABEL_41:
    if (*(_QWORD *)a3 != 0x746E6174736E6F63 || *(_QWORD *)(a3 + 5) != 0x626F6C625F746E61)
    {
LABEL_117:
      v75 = a3;
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("generic_load_constant_kernel: %s not supported as constant blob", &v75);
    }
    v33 = (std::__shared_weak_count *)v78;
    v74[0] = v77;
    v74[1] = v78;
    if (v78)
    {
      v34 = (unint64_t *)(v78 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v75, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v74, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 320) * *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
    if (v33)
    {
      v36 = (unint64_t *)&v33->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v73, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), &v75);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 344, &v73);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v29 = v76;
    if (!v76)
      goto LABEL_108;
    v41 = (unint64_t *)&v76->__shared_owners_;
    do
      v31 = __ldaxr(v41);
    while (__stlxr(v31 - 1, v41));
LABEL_106:
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    goto LABEL_108;
  }
  v10 = *(unsigned __int8 *)(a3 + 23);
  if (v10 == 13)
    goto LABEL_41;
  if (v10 == 16)
    goto LABEL_64;
  if (v10 != 18)
    goto LABEL_117;
LABEL_12:
  if (*(_QWORD *)a3 != 0x746E6174736E6F63
    || *(_QWORD *)(a3 + 8) != 0x70665F626F6C625FLL
    || *(_WORD *)(a3 + 16) != 13873)
  {
    goto LABEL_117;
  }
  v14 = (std::__shared_weak_count *)v78;
  v72[0] = v77;
  v72[1] = v78;
  if (v78)
  {
    v15 = (unint64_t *)(v78 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,4>(&v75, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v72, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 320) * *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = (char *)operator new(0x118uLL);
  v20 = v19;
  *((_QWORD *)v19 + 3) = off_1E2D8F108;
  v21 = v19 + 24;
  *(_QWORD *)v19 = &off_1E2DC1868;
  *((_QWORD *)v19 + 1) = 0;
  *((_DWORD *)v19 + 13) = -1;
  v23 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 12) = v23;
  *((_QWORD *)v19 + 2) = 0;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_QWORD *)v19 + 13) = v22;
  if (v22)
  {
    v24 = (unint64_t *)(v22 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 15) = 0;
  *((_DWORD *)v19 + 32) = 0;
  *((_DWORD *)v19 + 34) = 1065353216;
  *(_QWORD *)(v19 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v19 + 37) = 1;
  *((_QWORD *)v19 + 4) = 0;
  *((_QWORD *)v19 + 5) = 0;
  *((_DWORD *)v19 + 12) = 0;
  *(_OWORD *)(v19 + 152) = 0uLL;
  *(_OWORD *)(v19 + 168) = 0uLL;
  *((_QWORD *)v19 + 3) = &off_1E2DA6B80;
  *((_QWORD *)v19 + 34) = 0;
  *(_OWORD *)(v19 + 184) = 0uLL;
  *(_OWORD *)(v19 + 216) = 0uLL;
  *(_OWORD *)(v19 + 232) = 0uLL;
  *(_OWORD *)(v19 + 248) = 0uLL;
  *((_DWORD *)v19 + 66) = 0;
  *(_OWORD *)(v19 + 200) = 0uLL;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v19 + 25, v75, (uint64_t)v76);
  *((_DWORD *)v20 + 66) = 1;
  *(_QWORD *)&v73 = v21;
  *((_QWORD *)&v73 + 1) = v20;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 344, &v73);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v76;
  if (v76)
  {
    v30 = (unint64_t *)&v76->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    goto LABEL_106;
  }
LABEL_108:
  v65 = *(_QWORD *)(a1 + 344);
  if (v65)
  {
    *(_OWORD *)(v65 + 8) = *(_OWORD *)(a1 + 304);
    *(_DWORD *)(v65 + 24) = *(_DWORD *)(a1 + 320);
    v66 = *(_DWORD *)(a1 + 324);
    if ((v66 & 0x80000000) == 0)
      *(_DWORD *)(v65 + 28) = v66;
  }
  *(_BYTE *)(a1 + 360) = 1;
  v67 = (std::__shared_weak_count *)v78;
  if (v78)
  {
    v68 = (unint64_t *)(v78 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_190E42624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, char a11)
{
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::runtime_error *exception;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *a6;
  v19 = a6[1];
  v48 = *a6;
  v49 = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v55, a7, a8, a9, a10);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v55);
    size = (std::__shared_weak_count *)v55.__r_.__value_.__l.__size_;
    if (v55.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(v55.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v25 = 0;
    v26 = *(int *)(*a1 + 8);
    do
    {
      v26 *= *(int *)(*a1 + 12 + v25);
      v25 += 4;
    }
    while (v25 != 12);
    if (a5 != 4 * v26)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v52, a5);
      v38 = std::string::insert(&v52, 0, "Unexpected size s=");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v40 = std::string::append(&v53, "/blob=");
      v41 = 0;
      v42 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v42;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v43 = *(int *)(*a1 + 8);
      do
      {
        v43 *= *(int *)(*a1 + 12 + v41);
        v41 += 4;
      }
      while (v41 != 12);
      std::to_string(&v51, 4 * v43);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v51;
      else
        v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      else
        v45 = v51.__r_.__value_.__l.__size_;
      v46 = std::string::append(&v54, (const std::string::value_type *)v44, v45);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v55);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 24), a4, a5);
    v27 = (std::__shared_weak_count *)v49;
    if (!v49)
      goto LABEL_32;
LABEL_28:
    v33 = (unint64_t *)&v27->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_32;
  }
  if (!v18 || (a11 & 1) != 0)
  {
    if (!v18)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v28 = operator new(0x60uLL);
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = &off_1E2DA11F0;
  *v28 = &off_1E2DBECA8;
  *((_OWORD *)v28 + 4) = 0u;
  *((_OWORD *)v28 + 5) = 0u;
  *((_DWORD *)v28 + 8) = a7;
  *((_DWORD *)v28 + 9) = a8;
  *((_DWORD *)v28 + 10) = a9;
  *((_DWORD *)v28 + 11) = a10;
  v28[6] = a4;
  *((_BYTE *)v28 + 56) = 0;
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 3);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v55);
  v29 = (std::__shared_weak_count *)v55.__r_.__value_.__l.__size_;
  if (v55.__r_.__value_.__l.__size_)
  {
    v30 = (unint64_t *)(v55.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (_QWORD *)(*a1 + 40);
  v27 = (std::__shared_weak_count *)v49;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v32, v48, v49);
  if (v49)
    goto LABEL_28;
LABEL_32:
  if (a3)
  {
    v35 = (unint64_t *)&a3->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_190E42A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (a18 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v39 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v38);
  goto LABEL_14;
}

void Espresso::ANERuntimeEngine::convolution_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*((_BYTE *)a1 + 768) || *((_BYTE *)a1 + 810))
    Espresso::ANECompilerEngine::convolution_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void EspressoLight::espresso_plan::change_input_shapes(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  Espresso::net *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  _DWORD *v27;
  _DWORD *v28;
  char *v29;
  __int128 v30;
  char *v31;
  const char *v32;
  NSObject *v33;
  unint64_t v34;
  std::string *p_p;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  _QWORD *v48;
  BOOL v49;
  _BOOL4 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  Espresso *v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::runtime_error *v65;
  std::string *v66;
  __int128 v67;
  std::runtime_error *v68;
  std::runtime_error *exception;
  std::string *v70;
  __int128 v71;
  std::runtime_error *v72;
  uint64_t v73;
  __int128 v80;
  std::string v81;
  __int128 v82;
  uint64_t v83;
  std::string __p;
  void *v85[2];
  __int128 v86;
  int v87;
  __int128 v88;
  std::string buf;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 1064);
  if (*(_DWORD *)(v10 + 160))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&buf, *(_DWORD *)(*(_QWORD *)(a1 + 1064) + 160));
    v70 = std::string::insert(&buf, 0, "Inconsistent phase of espresso_plan: ");
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[0] = v70->__r_.__value_.__r.__words[2];
    v80 = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&v80);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -5;
  }
  *(_BYTE *)(a1 + 1096) = 1;
  v13 = v10 + 24;
  v12 = *(_QWORD *)(v10 + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(v13 + 8) - v12) >> 4))
  {
    v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v72, "Invalid network_index.");
    __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = *(_OWORD *)(v12 + 16 * a2);
  v88 = v14;
  if (*((_QWORD *)&v14 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_OWORD *)v85 = 0u;
  v86 = 0u;
  v87 = 1065353216;
  v17 = *a3;
  if (a3[1] != *a3)
  {
    v18 = 0;
    v19 = (Espresso::net *)v14;
    do
    {
      EspressoLight::espresso_plan::default_blob_name_if_null(&__p, *(_QWORD **)(a1 + 1064), a2, 0, *(char **)(v17 + 8 * v18));
      if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)v19 + 17, (unsigned __int8 *)&__p))
      {
        v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v66 = std::string::append(&buf, "' not found.");
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[0] = v66->__r_.__value_.__r.__words[2];
        v80 = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v65, (const std::string *)&v80);
        __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v20 = *(_DWORD *)(*a4 + 4 * v18);
      v21 = *(_DWORD *)(*a5 + 4 * v18);
      v22 = *(_DWORD *)(*a6 + 4 * v18);
      v23 = *(_DWORD *)(*a7 + 4 * v18);
      v24 = *(_DWORD *)(*a8 + 4 * v18);
      *(_OWORD *)&v81.__r_.__value_.__r.__words[1] = 0u;
      v82 = 0u;
      v83 = 0;
      *(_QWORD *)&v80 = __PAIR64__(v21, v20);
      *((_QWORD *)&v80 + 1) = __PAIR64__(v23, v22);
      v25 = *a9;
      v26 = v18 >= (a9[1] - *a9) >> 2;
      LODWORD(v81.__r_.__value_.__l.__data_) = v24;
      HIDWORD(v81.__r_.__value_.__r.__words[0]) = -1;
      if (!v26)
        HIDWORD(v81.__r_.__value_.__r.__words[0]) = *(_DWORD *)(v25 + 4 * v18);
      v19 = (Espresso::net *)v88;
      v73 = v88 + 184;
      v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v88 + 184, &__p);
      if ((_DWORD *)((char *)v19 + 192) == v27)
        goto LABEL_23;
      v28 = v27 + 14;
      if (v20 == -1)
        LODWORD(v80) = *v28;
      if (v21 == -1)
        DWORD1(v80) = v27[15];
      if (v22 == -1)
        DWORD2(v80) = v27[16];
      if (v23 == -1)
        HIDWORD(v80) = v27[17];
      if (v24 == -1)
        LODWORD(v81.__r_.__value_.__l.__data_) = v27[18];
      if (!Espresso::layer_shape::operator==((uint64_t)&v80, (uint64_t)v28))
      {
LABEL_23:
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v29 = std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v85, (unsigned __int8 *)&__p, (__int128 **)&buf);
        v30 = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
        *(_OWORD *)(v29 + 40) = v80;
        *(_OWORD *)(v29 + 56) = v30;
        *((_QWORD *)v29 + 9) = *((_QWORD *)&v81.__r_.__value_.__l + 2);
        v31 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29 + 80, 0, 0, 0);
        Espresso::espresso_os_log_subsystem((Espresso *)v31, v32);
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          v34 = (unint64_t)(a3[1] - *a3) >> 3;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v36 = *(_DWORD *)(*a4 + 4 * v18);
          v37 = *(_DWORD *)(*a5 + 4 * v18);
          v38 = *(_DWORD *)(*a6 + 4 * v18);
          v39 = *(_DWORD *)(*a7 + 4 * v18);
          v40 = *(_DWORD *)(*a8 + 4 * v18);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67110914;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v18;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v34;
          HIWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)p_p;
          v90 = 1024;
          v91 = v36;
          v92 = 1024;
          v93 = v37;
          v94 = 1024;
          v95 = v38;
          v96 = 1024;
          v97 = v39;
          v98 = 1024;
          v99 = v40;
          _os_log_impl(&dword_190DAF000, v33, OS_LOG_TYPE_INFO, "[change_input_shapes] index=%d/%d name=%s w=%d h=%d k=%d n=%d seq=%d", (uint8_t *)&buf, 0x36u);
        }

      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v18;
      v17 = *a3;
    }
    while (v18 < (a3[1] - *a3) >> 3);
    if (*((_QWORD *)&v86 + 1))
    {
      v41 = (_QWORD *)*((_QWORD *)v19 + 29);
      if (v41 != (_QWORD *)((char *)v19 + 240))
      {
        do
        {
          if (*((char *)v41 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v80, (const std::string::value_type *)v41[4], v41[5]);
          }
          else
          {
            v80 = *((_OWORD *)v41 + 2);
            v81.__r_.__value_.__r.__words[0] = v41[6];
          }
          v81.__r_.__value_.__s.__data_[8] = *((_BYTE *)v41 + 56);
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v85, (unsigned __int8 *)&v80))
          {
            v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v73, &v80);
            if ((_QWORD *)((char *)v19 + 192) == v42)
            {
              v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(v68, &buf);
              __cxa_throw(v68, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v43 = v42;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
            v44 = std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v85, (unsigned __int8 *)&v80, (__int128 **)&buf);
            v45 = *(_OWORD *)(v43 + 7);
            v46 = *(_OWORD *)(v43 + 9);
            *((_QWORD *)v44 + 9) = v43[11];
            *(_OWORD *)(v44 + 56) = v46;
            *(_OWORD *)(v44 + 40) = v45;
            if (v44 + 16 != (char *)(v43 + 4))
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v44 + 80, (char *)v43[12], v43[13], (uint64_t)(v43[13] - v43[12]) >> 2);
          }
          if (v81.__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)v80);
          v47 = (_QWORD *)v41[1];
          if (v47)
          {
            do
            {
              v48 = v47;
              v47 = (_QWORD *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v48 = (_QWORD *)v41[2];
              v49 = *v48 == (_QWORD)v41;
              v41 = v48;
            }
            while (!v49);
          }
          v41 = v48;
        }
        while (v48 != (_QWORD *)((char *)v19 + 240));
      }
      v50 = Espresso::net::fast_reshape_enabled(v19);
      v51 = v88;
      if (v50)
      {
        if ((Espresso::net::try_fast_reshape(v88, (uint64_t)v85) & 1) != 0)
          goto LABEL_65;
        v80 = 0uLL;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v51 + 1160, &v80);
        v52 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
        if (*((_QWORD *)&v80 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v51 = v88;
      }
      v55 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v56 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::unordered_map<std::string,Espresso::layer_shape>>((uint64_t)&v80, v51, v85);
      if (v55)
      {
        p_shared_owners = (unint64_t *)&v55->__shared_owners_;
        do
          v59 = __ldaxr(p_shared_owners);
        while (__stlxr(v59 - 1, p_shared_owners));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v60 = (Espresso *)v88;
      *(_BYTE *)(v88 + 180) = 0;
      Espresso::shape_network_recursive(v60, (Espresso::net *)&v80, 0, 0);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v81.__r_.__value_.__l.__size_, (char *)v81.__r_.__value_.__r.__words[2]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v80, *((char **)&v80 + 1));
    }
  }
LABEL_65:
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((_QWORD *)v86);
  v61 = v85[0];
  v85[0] = 0;
  if (v61)
    operator delete(v61);
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_190E43294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  int v41;
  void *v42;
  uint64_t v43;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v43 - 137) < 0)
  {
    operator delete(*(void **)(v43 - 160));
    if ((v41 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v42);
  goto LABEL_8;
}

char *std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x68uLL);
  v26[0] = v13;
  v26[1] = a1 + 16;
  v27 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>((std::string *)(v13 + 16), *a3);
  v27 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_38:
    *v23 = v13;
    goto LABEL_39;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v22 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
  return v13;
}

void sub_190E43644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t espresso_plan_build_clean(const void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    (*(void (**)(const void *))(*(_QWORD *)a1 + 48))(a1);
    v3 = 0;
  }
  else
  {
    v3 = 4294967290;
  }
  objc_autoreleasePoolPop(v2);
  return v3;
}

void EspressoLight::espresso_plan::unprepare(EspressoLight::espresso_plan *this)
{
  std::__shared_weak_count *size;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::runtime_error *exception;
  std::string *v18;
  __int128 v19;
  std::runtime_error *v20;
  std::string v21;
  std::string v22;

  if (*(_DWORD *)(*((_QWORD *)this + 133) + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v21, *(_DWORD *)(*((_QWORD *)this + 133) + 160));
    v18 = std::string::insert(&v21, 0, "Inconsistent phase of espresso_plan: ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v22);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -5;
  }
  if ((*(unsigned int (**)(EspressoLight::espresso_plan *))(*(_QWORD *)this + 184))(this))
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "A plan cannot be cleaned while it is being executed.");
    std::runtime_error::runtime_error(v20, &v22);
    v20->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v20[1].__vftable) = -1;
  }
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)this + 133) + 144, (__int128 *)&v22);
  size = (std::__shared_weak_count *)v22.__r_.__value_.__l.__size_;
  if (v22.__r_.__value_.__l.__size_)
  {
    v3 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v5 = *((_QWORD *)this + 133);
  *(_DWORD *)(v5 + 160) = 0;
  v6 = *(void **)(v5 + 176);
  *(_QWORD *)(v5 + 176) = 0;

  v7 = *((_QWORD *)this + 133);
  v8 = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v7 + 32) != v8)
  {
    v9 = 0;
    do
    {
      v10 = *(_OWORD *)(v8 + 16 * v9);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = v10;
      Espresso::net::wipe_layers_blobs((Espresso::net *)v10);
      std::__tree<std::string>::destroy(v14 + 280, *(char **)(v14 + 288));
      *(_QWORD *)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
      *(_QWORD *)(v14 + 280) = v14 + 288;
      std::__tree<std::string>::destroy(v14 + 304, *(char **)(v14 + 312));
      *(_QWORD *)(v14 + 312) = 0;
      *(_QWORD *)(v14 + 320) = 0;
      *(_QWORD *)(v14 + 304) = v14 + 312;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      ++v9;
      v8 = *(_QWORD *)(v7 + 24);
    }
    while (v9 < (*(_QWORD *)(v7 + 32) - v8) >> 4);
  }
}

void sub_190E439E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void Espresso::net::wipe_layers_blobs(Espresso::net *this)
{
  void *v2;
  _QWORD *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *j;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *k;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t v33;
  __int128 v34;
  __int128 __p;
  uint64_t v36;

  v2 = (void *)MEMORY[0x19401D4A4]();
  for (i = (_QWORD *)*((_QWORD *)this + 19); i; i = (_QWORD *)*i)
  {
    v4 = i[5];
    v31 = 0;
    v32 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 176))(v4, &v31);
    v5 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!Espresso::net::fast_reshape_enabled(this))
  {
    *((_BYTE *)this + 180) = 1;
    for (j = (_QWORD *)*((_QWORD *)this + 19); j; j = (_QWORD *)*j)
    {
      v9 = j[5];
      v36 = 0;
      v34 = 0u;
      __p = 0u;
      v31 = 0;
      v32 = 0;
      v33 = 0xFFFFFFFF00000000;
      v29 = 0;
      v30 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v31, &v29);
      v10 = v30;
      if (v30)
      {
        v11 = (unint64_t *)&v30->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
    v13 = (uint64_t *)*((_QWORD *)this + 4);
    for (k = (uint64_t *)*((_QWORD *)this + 5); v13 != k; v13 += 2)
    {
      v16 = *v13;
      v15 = (std::__shared_weak_count *)v13[1];
      v31 = *v13;
      v32 = v15;
      if (v15)
      {
        v17 = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(const void **)(v16 + 64);
      if (v19)
      {
        if (v20)
        {
          v21 = *(std::__shared_weak_count **)(v16 + 72);
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          (*(void (**)(void *))(*(_QWORD *)v20 + 56))(v20);
          if (v21)
          {
            v24 = (unint64_t *)&v21->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
      }
      v26 = v32;
      if (v32)
      {
        v27 = (unint64_t *)&v32->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_190E43CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL Espresso::net::fast_reshape_enabled(Espresso::net *this)
{
  char *v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  int v5;
  void *__p[2];
  char v8;

  v2 = (char *)this + 472;
  std::string::basic_string[abi:ne180100]<0>(__p, "fast_reshape");
  v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v2, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)((char *)this + 480) == v3)
    return 0;
  v4 = (unsigned __int8 *)(v3 + 7);
  v5 = *((char *)v3 + 79);
  if ((v5 & 0x80000000) == 0)
  {
    if (v5 != 1)
      return 0;
    return *v4 == 49;
  }
  if (v3[8] == 1)
  {
    v4 = *(unsigned __int8 **)v4;
    return *v4 == 49;
  }
  return 0;
}

BOOL EspressoLight::espresso_plan::is_in_flight(EspressoLight::espresso_plan *this)
{
  _BOOL8 v2;
  uint64_t v3;
  std::mutex *v4;

  if (atomic_load((unint64_t *)(*((_QWORD *)this + 133) + 408)))
    return 1;
  v3 = *((_QWORD *)this + 133);
  v4 = (std::mutex *)(v3 + 208);
  std::mutex::lock((std::mutex *)(v3 + 208));
  v2 = *(_QWORD *)(v3 + 368) != 0;
  std::mutex::unlock(v4);
  return v2;
}

void Espresso::run_dispatch_v2(uint64_t a1, uint64_t *a2, uint64_t a3, Espresso ***a4, uint64_t a5, unsigned int *a6, _QWORD *a7)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  Espresso::net *v12;
  const char *v13;
  char v14;
  __int128 *v15;
  _QWORD *v16;
  NSObject *v17;
  int v18;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  Espresso::net *v23;
  __int128 *p_p;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  char *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  _BOOL4 v40;
  Espresso::net *v41;
  _BOOL8 is_mil;
  const char *v43;
  _BOOL4 v44;
  BOOL v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  Espresso::net *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t *p_shared_weak_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __n128 v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  BOOL v113;
  int v114;
  char v115;
  void *v116;
  id v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  char *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  unsigned int v157;
  const char *v158;
  BOOL v159;
  void *v160;
  int v161;
  void *v162;
  int v163;
  void *v164;
  int v165;
  __int128 v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  Espresso::net *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BOOL4 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  Espresso::net *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  int v206;
  uint64_t *v207;
  int v208;
  int v209;
  BOOL v210;
  int v211;
  int v212;
  int v213;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  int v222;
  BOOL v223;
  int v224;
  uint64_t *v225;
  uint64_t v227;
  uint64_t v228;
  BOOL v229;
  uint64_t v230;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v237;
  const void *v238;
  std::string::size_type v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  __int128 v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  __int128 v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  void *v261;
  unint64_t *v262;
  unint64_t v263;
  int v264;
  int v265;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __int128 v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  BOOL v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v297;
  void *v298;
  int v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  _QWORD *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  Espresso *v361;
  const char *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  NSObject *v368;
  NSObject *v369;
  uint64_t PlatformHeuristics;
  Espresso::net *v371;
  BOOL v372;
  void *v373;
  _BOOL4 v375;
  int v377;
  double v378;
  uint64_t v379;
  void *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  Espresso *v386;
  const char *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  NSObject *v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  uint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  int has_any_fallback;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  Espresso *v429;
  const char *v430;
  int v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  int v437;
  BOOL v438;
  char v439;
  BOOL v440;
  BOOL v441;
  NSObject *v442;
  const char *v443;
  _BOOL8 v444;
  const char *v445;
  __int128 v446;
  __int128 v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  NSObject *v451;
  const char *v452;
  _BOOL8 v453;
  const char *v454;
  __int128 v455;
  __int128 v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  unint64_t *v469;
  uint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *p_shared_owners;
  unint64_t v473;
  std::__shared_weak_count *v474;
  uint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  Espresso *v478;
  const char *v479;
  NSObject *v480;
  void *v481;
  std::string::size_type v482;
  std::__shared_weak_count *size;
  unint64_t *v484;
  unint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  uint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  Espresso::net *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  std::string::size_type v502;
  std::string::size_type v503;
  unint64_t *v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  __int128 v513;
  unint64_t *v514;
  unint64_t v515;
  unint64_t *v516;
  unint64_t v517;
  __int128 v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  char *v531;
  uint64_t *v532;
  char *v533;
  uint64_t *v535;
  uint64_t v536;
  uint64_t v537;
  _BOOL4 v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  void *v543;
  char *v544;
  __int128 v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t *v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  int v563;
  int v564;
  char v565;
  std::runtime_error *v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  char *v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  std::__shared_weak_count *v590;
  unint64_t *v591;
  unint64_t v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::runtime_error *exception;
  std::runtime_error *v599;
  std::runtime_error *v600;
  std::runtime_error *v601;
  std::runtime_error *v602;
  NSObject *v603;
  std::runtime_error *v604;
  _QWORD *v605;
  NSObject *v606;
  void (__cdecl *v607)(std::runtime_error *__hidden);
  struct type_info *v608;
  std::runtime_error *v609;
  std::runtime_error *v610;
  std::runtime_error *v611;
  void (__cdecl *v612)(std::runtime_error *__hidden);
  struct type_info *v613;
  uint64_t v614;
  _BOOL4 v615;
  BOOL v616;
  uint64_t v617;
  int v618;
  _BOOL4 v619;
  uint64_t v620;
  int v621;
  int v622;
  int v627;
  int v628;
  uint64_t v629[2];
  uint64_t v630;
  std::__shared_weak_count *v631;
  uint64_t v632[2];
  uint64_t v633;
  std::__shared_weak_count *v634;
  __int128 v635;
  uint64_t v636;
  std::__shared_weak_count *v637;
  uint64_t *v638[2];
  uint64_t v639;
  std::__shared_weak_count *v640;
  void *v641[2];
  char v642;
  __int128 v643;
  Espresso ***v644;
  uint64_t v645;
  _QWORD **v646;
  int *v647;
  uint64_t v648[2];
  uint64_t v649;
  std::__shared_weak_count *v650;
  uint64_t v651[2];
  uint64_t v652;
  std::__shared_weak_count *v653;
  int v654;
  int v655;
  unsigned int v656;
  uint64_t v657[2];
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  float v662;
  __int16 v663;
  uint64_t v664[2];
  uint64_t v665;
  std::__shared_weak_count *v666;
  Espresso::net *v667;
  std::__shared_weak_count *v668;
  __int128 v669;
  uint64_t v670[2];
  uint64_t v671;
  std::__shared_weak_count *v672;
  int v673;
  uint64_t v674;
  std::__shared_weak_count *v675;
  Espresso::net *v676;
  std::__shared_weak_count *v677;
  uint64_t v678;
  std::__shared_weak_count *v679;
  _QWORD *v680;
  uint64_t *v681;
  std::__shared_weak_count *v682;
  Espresso::net *v683;
  std::__shared_weak_count *v684;
  __int128 v685;
  __int128 __p;
  _BYTE v687[32];
  uint64_t v688;
  uint64_t v689;
  std::__shared_weak_count *v690;
  void **v691;
  uint8_t v692[23];
  char v693;
  float v694;
  char v695;
  std::string buf;
  _QWORD v697[2];
  std::__shared_weak_count *v698;
  float v699;
  unsigned __int8 v700;
  uint64_t v701;

  v701 = *MEMORY[0x1E0C80C00];
  v680 = a7;
  v9 = (***(uint64_t (****)(_QWORD))(*a2 + 8))(*(_QWORD *)(*a2 + 8));
  v10 = *a2;
  v11 = *(_QWORD *)(*a2 + 128);
  v628 = v9;
  v617 = v11;
  v615 = (v9 & 0xFFFFFFFE) == 10006;
  if ((v9 & 0xFFFFFFFE) != 0x2716)
    goto LABEL_20;
  v12 = *(Espresso::net **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.use_faux_dispatch");
  std::string::basic_string[abi:ne180100]<0>(&buf, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v12 + 472, (uint64_t)&__p, (uint64_t)&buf, (std::string *)&v659);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((v687[7] & 0x80000000) != 0)
    operator delete((void *)__p);
  v14 = BYTE7(v660);
  if (SBYTE7(v660) < 0)
  {
    v15 = (__int128 *)v659;
    if (*((_QWORD *)&v659 + 1) != 1)
    {
LABEL_18:
      operator delete(v15);
      goto LABEL_19;
    }
LABEL_10:
    if (*(_BYTE *)v15 == 49)
    {
      v16 = v680;
      if (v680 && !*(_DWORD *)((char *)v680 + *(_QWORD *)(*v680 - 24) + 32))
      {
        v470 = *a2;
        v471 = (std::__shared_weak_count *)a2[1];
        v678 = *a2;
        v679 = v471;
        if (v471)
        {
          p_shared_owners = (unint64_t *)&v471->__shared_owners_;
          do
            v473 = __ldxr(p_shared_owners);
          while (__stxr(v473 + 1, p_shared_owners));
        }
        v475 = *(_QWORD *)a3;
        v474 = *(std::__shared_weak_count **)(a3 + 8);
        v676 = *(Espresso::net **)a3;
        v677 = v474;
        if (v474)
        {
          v476 = (unint64_t *)&v474->__shared_owners_;
          do
            v477 = __ldxr(v476);
          while (__stxr(v477 + 1, v476));
        }
        v478 = (Espresso *)(***(uint64_t (****)(_QWORD))(v470 + 8))(*(_QWORD *)(v470 + 8));
        *(_DWORD *)(a1 + 48) = 0;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)a1 = 0u;
        *(_WORD *)(a1 + 52) = 256;
        Espresso::espresso_os_log_subsystem(v478, v479);
        v480 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v480, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p) = 0;
          _os_log_debug_impl(&dword_190DAF000, v480, OS_LOG_TYPE_DEBUG, "Restoring network precompilation info", (uint8_t *)&__p, 2u);
        }

        v481 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
        std::string::basic_string[abi:ne180100]<0>(&__p, "json");
        Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&buf, (uint64_t)v481, &__p);
        if ((v687[7] & 0x80000000) != 0)
          operator delete((void *)__p);
        v482 = buf.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string::size_type, _QWORD *))(*(_QWORD *)buf.__r_.__value_.__l.__data_ + 280))(buf.__r_.__value_.__r.__words[0], v16);
        size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        *(_OWORD *)v692 = __PAIR128__(buf.__r_.__value_.__l.__size_, v482);
        if (buf.__r_.__value_.__l.__size_)
        {
          v484 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v485 = __ldxr(v484);
          while (__stxr(v485 + 1, v484));
        }
        Espresso::net::restore_precompilation_info(v475, (uint64_t *)v692);
        if (size)
        {
          v486 = (unint64_t *)&size->__shared_owners_;
          do
            v487 = __ldaxr(v486);
          while (__stlxr(v487 - 1, v486));
          if (!v487)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 32), *((_QWORD *)v676 + 89), *((_QWORD *)v676 + 90));
        v488 = v678;
        if (*(_BYTE *)(v678 + 56))
        {
          v489 = v679;
          if (v679)
          {
            v490 = (unint64_t *)&v679->__shared_owners_;
            do
              v491 = __ldxr(v490);
            while (__stxr(v491 + 1, v490));
            *(_QWORD *)&__p = v488;
            *((_QWORD *)&__p + 1) = v489;
            do
              v492 = __ldxr(v490);
            while (__stxr(v492 + 1, v490));
            memset(&v687[4], 0, 28);
            *(_DWORD *)v687 = 100;
            __asm { FMOV            V0.2S, #1.0 }
            v688 = _D0;
            v690 = 0;
            v689 = 0;
            do
              v494 = __ldaxr(v490);
            while (__stlxr(v494 - 1, v490));
            if (!v494)
            {
              ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
              std::__shared_weak_count::__release_weak(v489);
            }
          }
          else
          {
            __p = (unint64_t)v678;
            memset(&v687[4], 0, 28);
            *(_DWORD *)v687 = 100;
            __asm { FMOV            V0.2S, #1.0 }
            v688 = _D0;
            v690 = 0;
            v689 = 0;
          }
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v689, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
          *(_QWORD *)v687 = 100;
          std::allocate_shared[abi:ne180100]<Espresso::cpu_context_transfer_algo_t,std::allocator<Espresso::cpu_context_transfer_algo_t>,Espresso::cpu_context_transfer_algo_options &,void>((Espresso::cpu_context_transfer_algo_t **)&v643, (const Espresso::cpu_context_transfer_algo_options *)&__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, &v643);
          v577 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
          if (*((_QWORD *)&v643 + 1))
          {
            v578 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
            do
              v579 = __ldaxr(v578);
            while (__stlxr(v579 - 1, v578));
            if (!v579)
            {
              ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
              std::__shared_weak_count::__release_weak(v577);
            }
          }
          v580 = v690;
          if (v690)
          {
            v581 = (unint64_t *)&v690->__shared_owners_;
            do
              v582 = __ldaxr(v581);
            while (__stlxr(v582 - 1, v581));
            if (!v582)
            {
              ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
              std::__shared_weak_count::__release_weak(v580);
            }
          }
          *(_QWORD *)&v643 = &v687[8];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v643);
          v583 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v584 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v585 = __ldaxr(v584);
            while (__stlxr(v585 - 1, v584));
            if (!v585)
            {
              ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
              std::__shared_weak_count::__release_weak(v583);
            }
          }
        }
        v586 = (char *)operator new(0x70uLL);
        *((_QWORD *)v586 + 1) = 0;
        *((_QWORD *)v586 + 2) = 0;
        *(_QWORD *)v586 = &off_1E2DB7030;
        *(_OWORD *)(v586 + 24) = 0u;
        *(_OWORD *)(v586 + 56) = 0u;
        *(_OWORD *)(v586 + 40) = 0u;
        *((_QWORD *)v586 + 6) = v586 + 56;
        *((_QWORD *)v586 + 10) = 0;
        *((_QWORD *)v586 + 9) = v586 + 80;
        *((_QWORD *)v586 + 12) = 0;
        *((_QWORD *)v586 + 13) = 0;
        *((_QWORD *)v586 + 11) = 0;
        *(_QWORD *)&__p = v586 + 24;
        *((_QWORD *)&__p + 1) = v586;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 16, &__p);
        v587 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v588 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v589 = __ldaxr(v588);
          while (__stlxr(v589 - 1, v588));
          if (!v589)
          {
            ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
            std::__shared_weak_count::__release_weak(v587);
          }
        }
        v590 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_)
        {
          v591 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v592 = __ldaxr(v591);
          while (__stlxr(v592 - 1, v591));
          if (!v592)
          {
            ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
            std::__shared_weak_count::__release_weak(v590);
          }
        }
        if (v474)
        {
          v593 = (unint64_t *)&v474->__shared_owners_;
          do
            v594 = __ldaxr(v593);
          while (__stlxr(v594 - 1, v593));
          if (!v594)
          {
            ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
            std::__shared_weak_count::__release_weak(v474);
          }
        }
        v595 = v679;
        if (v679)
        {
          v596 = (unint64_t *)&v679->__shared_owners_;
          do
            v597 = __ldaxr(v596);
          while (__stlxr(v597 - 1, v596));
          if (!v597)
          {
            ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
            std::__shared_weak_count::__release_weak(v595);
          }
        }
        if (SBYTE7(v660) < 0)
          operator delete((void *)v659);
        return;
      }
      Espresso::espresso_os_log_subsystem((Espresso *)v15, v13);
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_debug_impl(&dword_190DAF000, v17, OS_LOG_TYPE_DEBUG, "Missing precompilation info. Fallback to full dispatch.", (uint8_t *)&__p, 2u);
      }

      v14 = BYTE7(v660);
    }
    if ((v14 & 0x80) == 0)
      goto LABEL_19;
    v15 = (__int128 *)v659;
    goto LABEL_18;
  }
  if (SBYTE7(v660) == 1)
  {
    v15 = &v659;
    goto LABEL_10;
  }
LABEL_19:
  v10 = *a2;
  v11 = *(_QWORD *)(*a2 + 128);
LABEL_20:
  v18 = *(unsigned __int8 *)(v10 + 127);
  v20 = (v11 & 2) == 0 && v11 != 0;
  v21 = (v11 & 2) == 0;
  if (v18)
    v22 = v21;
  else
    v22 = v20;
  v23 = *(Espresso::net **)a3;
  std::string::basic_string[abi:ne180100]<0>(&v659, "multi_head");
  std::string::basic_string[abi:ne180100]<0>(&buf, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v23 + 472, (uint64_t)&v659, (uint64_t)&buf, (std::string *)&__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SBYTE7(v660) < 0)
    operator delete((void *)v659);
  if ((v687[7] & 0x80000000) != 0)
  {
    if (*((_QWORD *)&__p + 1) == 1)
    {
      p_p = (__int128 *)__p;
      goto LABEL_38;
    }
  }
  else if (v687[7] == 1)
  {
    p_p = &__p;
LABEL_38:
    v25 = *(unsigned __int8 *)p_p == 49;
    goto LABEL_40;
  }
  v25 = 0;
LABEL_40:
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v619 = v25;
  v620 = *MEMORY[0x1E0CB2B58];
  objc_msgSend(v26, "persistentDomainForName:");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("com.espresso.dispatch_version"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v28;
  if (v28)
    v622 = objc_msgSend(v28, "intValue");
  else
    v622 = 3;

  objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("com.espresso.dispatch_avoid_gpu"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v30;
  if (v30)
    v22 = objc_msgSend(v30, "BOOLValue");

  objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("com.espresso.dispatch_avoid_cpu"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = v32;
  if (v32)
    v34 = objc_msgSend(v32, "BOOLValue");
  else
    v34 = 0;

  v35 = getenv("ESPRESSO_DISPATCH_VERSION");
  if (v35)
    v622 = atoi(v35);
  objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("features.MPSGraph"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v36;
  if (v36)
    v18 = objc_msgSend(v36, "BOOLValue");

  objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.dispatch_allow_loop_accelerate"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (v38)
  {
    v39 = *(unsigned __int8 *)(*a2 + 115);
    if (!*(_BYTE *)(*a2 + 115))
      v39 = objc_msgSend(v38, "BOOLValue");
    v40 = v39 != 0;
  }
  else
  {
    v40 = 0;
  }

  if ((v687[7] & 0x80000000) != 0)
    operator delete((void *)__p);
  v41 = *(Espresso::net **)a3;
  std::string::basic_string[abi:ne180100]<0>(&v659, "dispatch_ane_mpsgraph");
  std::string::basic_string[abi:ne180100]<0>(&buf, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v41 + 472, (uint64_t)&v659, (uint64_t)&buf, (std::string *)&__p);
  if ((v687[7] & 0x80000000) != 0)
  {
    if (*((_QWORD *)&__p + 1) == 1)
      v18 |= *(_BYTE *)__p == 49;
    operator delete((void *)__p);
  }
  else if (v687[7] == 1)
  {
    v18 |= __p == 49;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SBYTE7(v660) < 0)
    operator delete((void *)v659);
  is_mil = Espresso::net::model_is_mil(*(Espresso::net **)a3);
  v44 = is_mil;
  v45 = v34 == 0;
  if (v34)
    v46 = 0;
  else
    v46 = v22;
  v627 = v46;
  if (v34 && ((v22 ^ 1) & 1) == 0)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)is_mil, v43);
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_debug_impl(&dword_190DAF000, v47, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] Both avoid_cpu and avoid_gpu were set! resetting them to false.", (uint8_t *)&__p, 2u);
    }

    v627 = 0;
    v45 = 1;
  }
  v616 = v45;
  v48 = *a2;
  v49 = (std::__shared_weak_count *)a2[1];
  v674 = *a2;
  v675 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = v628;
  LODWORD(__p) = v628;
  if (is_espresso_running_on_virtual_apple_machine(void)::onceToken != -1)
    dispatch_once(&is_espresso_running_on_virtual_apple_machine(void)::onceToken, &__block_literal_global_6338);
  v618 = is_espresso_running_on_virtual_apple_machine(void)::result;
  if (is_espresso_running_on_virtual_apple_machine(void)::result || *(_BYTE *)(v48 + 121))
  {
    v627 = 1;
    *(_BYTE *)(v48 + 121) = 1;
    if (is_gpu((int *)&__p))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found virtual machine - falling back to CPU.");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D994E0;
    }
  }
  v621 = v18 | v44;
  if (v49)
  {
    v53 = (unint64_t *)&v49->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v55 = *a2;
  *(_BYTE *)(*a2 + 115) = v40;
  if (v40)
    goto LABEL_91;
  if ((v628 - 100) < 2 || !v628 || v628 == 80000)
    goto LABEL_107;
  v685 = 0uLL;
  v684 = 0;
  v683 = 0;
  v682 = 0;
  v681 = 0;
  v673 = 100;
  v190 = (std::__shared_weak_count *)a2[1];
  v671 = v55;
  v672 = v190;
  if (v190)
  {
    v191 = (unint64_t *)&v190->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v193 = *(std::__shared_weak_count **)(a3 + 8);
  v670[0] = *(_QWORD *)a3;
  v670[1] = (uint64_t)v193;
  if (v193)
  {
    v194 = (unint64_t *)&v193->__shared_owners_;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  Espresso::get_net_info_ir(&v671, v670, a4, a5, a6, &v673, (int *)a6, (uint64_t *)&v685, (uint64_t *)&v683, (uint64_t *)&v681);
  if (v193)
  {
    v196 = (unint64_t *)&v193->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v198 = v672;
  if (v672)
  {
    v199 = (unint64_t *)&v672->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = v683;
  v659 = 0uLL;
  __p = 0u;
  *(_OWORD *)v687 = 0u;
  *(_DWORD *)&v687[16] = 1065353216;
  v202 = *(_QWORD *)v683;
  if (*((_QWORD *)v683 + 1) == *(_QWORD *)v683)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
    goto LABEL_808;
  }
  v203 = 0;
  while (2)
  {
    v204 = v202 + 224 * v203;
    v205 = (uint64_t *)(v204 + 48);
    v206 = *(char *)(v204 + 71);
    if ((v206 & 0x80000000) == 0)
    {
      v208 = v206 - 5;
      v207 = v205;
      switch(v208)
      {
        case 0:
          goto LABEL_315;
        case 1:
          v209 = *((unsigned __int16 *)v205 + 2);
          v210 = *(_DWORD *)v205 == 1717528163;
          v211 = 29295;
          goto LABEL_322;
        case 2:
          v209 = *(_DWORD *)((char *)v205 + 3);
          v210 = *(_DWORD *)v205 == 1818191459;
          v211 = 1886351212;
LABEL_322:
          if (!v210 || v209 != v211)
            goto LABEL_372;
          goto LABEL_801;
        case 4:
          if (*v205 != 0x706168735F746567 || *((_BYTE *)v205 + 8) != 101)
            goto LABEL_372;
          goto LABEL_364;
        case 6:
          v217 = *(uint64_t *)((char *)v205 + 3);
          v218 = *v205 == 0x77746E656D656C65;
          v219 = 0x65736977746E656DLL;
          goto LABEL_340;
        case 8:
          if (*v205 == 0x6E6F635F64616F6CLL && *(uint64_t *)((char *)v205 + 5) == 0x746E6174736E6F63)
            goto LABEL_364;
          v217 = *(uint64_t *)((char *)v205 + 5);
          v218 = *v205 == 0x5F6C6172656E6567;
          v219 = 0x6563696C735F6C61;
LABEL_340:
          if (!v218 || v217 != v219)
            goto LABEL_372;
          goto LABEL_420;
        default:
          goto LABEL_372;
      }
    }
    switch(v205[1])
    {
      case 5:
        v207 = (uint64_t *)*v205;
LABEL_315:
        v212 = *(_DWORD *)v207;
        v213 = *((unsigned __int8 *)v207 + 4);
        if (v212 != 1667853427 || v213 != 101)
          goto LABEL_372;
        goto LABEL_420;
      case 6:
        v222 = *(unsigned __int16 *)(*v205 + 4);
        v223 = *(_DWORD *)*v205 == 1717528163;
        v224 = 29295;
        goto LABEL_353;
      case 7:
        v222 = *(_DWORD *)(*v205 + 3);
        v223 = *(_DWORD *)*v205 == 1818191459;
        v224 = 1886351212;
LABEL_353:
        if (!v223 || v222 != v224)
          goto LABEL_372;
LABEL_801:
        v264 = 1;
        v52 = v628;
        goto LABEL_802;
      case 9:
        if (*(_QWORD *)*v205 != 0x706168735F746567 || *(_BYTE *)(*v205 + 8) != 101)
          goto LABEL_372;
        goto LABEL_364;
      case 11:
        v228 = *(_QWORD *)(*v205 + 3);
        v229 = *(_QWORD *)*v205 == 0x77746E656D656C65;
        v230 = 0x65736977746E656DLL;
        goto LABEL_368;
      case 13:
        v225 = (uint64_t *)*v205;
        if (*(_QWORD *)*v205 == 0x6E6F635F64616F6CLL && *(_QWORD *)(*v205 + 5) == 0x746E6174736E6F63)
        {
LABEL_364:
          v233 = v202 + 224 * v203;
          v235 = *(_QWORD *)(v233 + 112);
          v234 = *(_QWORD *)(v233 + 120);
          while (v235 != v234)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__p, v235, v235);
            v235 += 24;
          }
        }
        else
        {
          v227 = *v225;
          v228 = *(uint64_t *)((char *)v225 + 5);
          v229 = v227 == 0x5F6C6172656E6567;
          v230 = 0x6563696C735F6C61;
LABEL_368:
          if (v229 && v228 == v230)
          {
LABEL_420:
            v267 = v202 + 224 * v203;
            v269 = *(_QWORD *)(v267 + 136);
            v268 = *(_QWORD *)(v267 + 144);
            if (v269 != v268)
            {
              do
              {
                if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&__p, v269))goto LABEL_372;
                v269 += 24;
              }
              while (v269 != v268);
              v202 = *(_QWORD *)v201;
            }
            v270 = v202 + 224 * v203;
            v272 = *(_QWORD *)(v270 + 112);
            v271 = *(_QWORD *)(v270 + 120);
            while (v272 != v271)
            {
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__p, v272, v272);
              v272 += 24;
            }
          }
        }
LABEL_372:
        v237 = *(_QWORD *)v201 + 224 * v203;
        v238 = *(const void **)(v237 + 88);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v238;
        v239 = *(_QWORD *)(v237 + 96);
        buf.__r_.__value_.__l.__size_ = v239;
        if (v239)
        {
          v240 = (unint64_t *)(v239 + 8);
          do
            v241 = __ldxr(v240);
          while (__stxr(v241 + 1, v240));
        }
        if (v238)
        {
          v52 = v628;
        }
        else
        {
          v52 = v628;
          if (!(_QWORD)v659)
          {
            LODWORD(v691) = 0;
            Espresso::create_context((int *)&v691, v692);
            v273 = *(_OWORD *)v692;
            *(_QWORD *)v692 = 0;
            *(_QWORD *)&v692[8] = 0;
            v274 = (std::__shared_weak_count *)*((_QWORD *)&v659 + 1);
            v659 = v273;
            if (v274)
            {
              v275 = (unint64_t *)&v274->__shared_owners_;
              do
                v276 = __ldaxr(v275);
              while (__stlxr(v276 - 1, v275));
              if (!v276)
              {
                ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                std::__shared_weak_count::__release_weak(v274);
              }
            }
            v277 = *(std::__shared_weak_count **)&v692[8];
            if (*(_QWORD *)&v692[8])
            {
              v278 = (unint64_t *)(*(_QWORD *)&v692[8] + 8);
              do
                v279 = __ldaxr(v278);
              while (__stlxr(v279 - 1, v278));
              if (!v279)
              {
                ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                std::__shared_weak_count::__release_weak(v277);
              }
            }
          }
          v242 = *(_QWORD *)v201;
          v243 = *(_OWORD *)&(*a4)[2 * v203];
          v643 = v243;
          if (*((_QWORD *)&v243 + 1))
          {
            v244 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          *(_OWORD *)v641 = v659;
          if (*((_QWORD *)&v659 + 1))
          {
            v246 = (unint64_t *)(*((_QWORD *)&v659 + 1) + 8);
            do
              v247 = __ldxr(v246);
            while (__stxr(v247 + 1, v246));
          }
          Espresso::create_kernel_for_engine(v692, v242 + 224 * v203, (uint64_t *)&v643, (uint64_t *)v641, 0);
          v248 = *(_OWORD *)v692;
          *(_QWORD *)v692 = 0;
          *(_QWORD *)&v692[8] = 0;
          v249 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v248;
          if (v249)
          {
            v250 = (unint64_t *)&v249->__shared_owners_;
            do
              v251 = __ldaxr(v250);
            while (__stlxr(v251 - 1, v250));
            if (!v251)
            {
              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
              std::__shared_weak_count::__release_weak(v249);
            }
          }
          v252 = *(std::__shared_weak_count **)&v692[8];
          if (*(_QWORD *)&v692[8])
          {
            v253 = (unint64_t *)(*(_QWORD *)&v692[8] + 8);
            do
              v254 = __ldaxr(v253);
            while (__stlxr(v254 - 1, v253));
            if (!v254)
            {
              ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
              std::__shared_weak_count::__release_weak(v252);
            }
          }
          v255 = (std::__shared_weak_count *)v641[1];
          if (v641[1])
          {
            v256 = (unint64_t *)((char *)v641[1] + 8);
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 - 1, v256));
            if (!v257)
            {
              ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
              std::__shared_weak_count::__release_weak(v255);
            }
          }
          v258 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
          if (*((_QWORD *)&v643 + 1))
          {
            v259 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
            do
              v260 = __ldaxr(v259);
            while (__stlxr(v260 - 1, v259));
            if (!v260)
            {
              ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
              std::__shared_weak_count::__release_weak(v258);
            }
          }
          v238 = (const void *)buf.__r_.__value_.__r.__words[0];
        }
        if (!v261)
        {
          *(_QWORD *)v692 = 0;
          *(_QWORD *)&v692[8] = 0;
          if (!(*(unsigned int (**)(const void *, unint64_t))(*(_QWORD *)v238 + 264))(v238, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 144)- *(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 136)) >> 3)))
          {
LABEL_458:
            v264 = 0;
            goto LABEL_459;
          }
          if (*((char *)v205 + 23) < 0)
          {
            v280 = v205[1];
            if (v280 != 5)
            {
              if (v280 != 13
                || (*(_QWORD *)*v205 == 0x5F6C6172656E6567
                  ? (v281 = *(_QWORD *)(*v205 + 5) == 0x6563696C735F6C61)
                  : (v281 = 0),
                    !v281))
              {
LABEL_453:
                v264 = 1;
                goto LABEL_459;
              }
LABEL_444:
              v282 = *(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 136);
              if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 144) - v282) >> 3) >= 2)
              {
                v283 = 1;
                v284 = 24;
                LOBYTE(v285) = 1;
                do
                {
                  v285 = (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&__p, v282 + v284) != 0) & v285;
                  ++v283;
                  v282 = *(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 136);
                  v284 += 24;
                }
                while (v283 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 144) - v282) >> 3));
LABEL_457:
                v264 = v285 ^ 1;
                v52 = v628;
                goto LABEL_459;
              }
              goto LABEL_458;
            }
            v205 = (uint64_t *)*v205;
          }
          else
          {
            v265 = *((unsigned __int8 *)v205 + 23);
            if (v265 != 5)
            {
              if (v265 != 13)
                goto LABEL_453;
              if (*v205 != 0x5F6C6172656E6567 || *(uint64_t *)((char *)v205 + 5) != 0x6563696C735F6C61)
                goto LABEL_453;
              goto LABEL_444;
            }
          }
          if (*(_DWORD *)v205 != 1735287154 || *((_BYTE *)v205 + 4) != 101)
            goto LABEL_453;
          v287 = *(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 136);
          if (*(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 144) != v287)
          {
            v288 = 0;
            v289 = 0;
            LOBYTE(v285) = 1;
            do
            {
              v285 = (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&__p, v287 + v288) != 0) & v285;
              ++v289;
              v287 = *(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 136);
              v288 += 24;
            }
            while (v289 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)v201 + 224 * v203 + 144) - v287) >> 3));
            goto LABEL_457;
          }
          goto LABEL_458;
        }
        *(_QWORD *)v692 = v261;
        *(_QWORD *)&v692[8] = buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_)
        {
          v262 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v263 = __ldxr(v262);
          while (__stxr(v263 + 1, v262));
        }
        v264 = *(unsigned __int8 *)((*(uint64_t (**)(void *))(*(_QWORD *)v261 + 320))(v261) + 24);
LABEL_459:
        v290 = *(std::__shared_weak_count **)&v692[8];
        if (*(_QWORD *)&v692[8])
        {
          v291 = (unint64_t *)(*(_QWORD *)&v692[8] + 8);
          do
            v292 = __ldaxr(v291);
          while (__stlxr(v292 - 1, v291));
          if (!v292)
          {
            ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
            std::__shared_weak_count::__release_weak(v290);
          }
        }
        v293 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_)
        {
          v294 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v295 = __ldaxr(v294);
          while (__stlxr(v295 - 1, v294));
          if (!v295)
          {
            ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
            std::__shared_weak_count::__release_weak(v293);
          }
        }
        ++v203;
        v202 = *(_QWORD *)v201;
        if (v203 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v201 + 1) - *(_QWORD *)v201) >> 5) && v264 == 0)
          continue;
LABEL_802:
        v495 = (std::__shared_weak_count *)*((_QWORD *)&v659 + 1);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
        if (v495)
        {
          v496 = (unint64_t *)&v495->__shared_owners_;
          do
            v497 = __ldaxr(v496);
          while (__stlxr(v497 - 1, v496));
          if (!v497)
          {
            ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
            std::__shared_weak_count::__release_weak(v495);
          }
        }
        if (v264)
        {
          v609 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v609, "Dynamic loop detected, Please change to use CPU backend for performance boost");
          v609->__vftable = (std::runtime_error_vtbl *)&off_1E2D994E0;
        }
LABEL_808:
        if (((v52 - 10006) > 5 || ((1 << (v52 - 22)) & 0x27) == 0) && (v52 - 50005) >= 2)
          goto LABEL_924;
        v614 = a3;
        __p = 0u;
        *(_OWORD *)v687 = 0u;
        *(_DWORD *)&v687[16] = 1065353216;
        v498 = v683;
        v659 = 0uLL;
        v499 = *(_QWORD *)v683;
        if (*((_QWORD *)v683 + 1) == *(_QWORD *)v683)
        {
          v539 = 1;
          goto LABEL_912;
        }
        v500 = 0;
        while (2)
        {
          v501 = v499 + 224 * v500;
          v502 = *(_QWORD *)(v501 + 88);
          buf.__r_.__value_.__r.__words[0] = v502;
          v503 = *(_QWORD *)(v501 + 96);
          buf.__r_.__value_.__l.__size_ = v503;
          if (v503)
          {
            v504 = (unint64_t *)(v503 + 8);
            do
              v505 = __ldxr(v504);
            while (__stxr(v505 + 1, v504));
          }
          if (!v502)
          {
            if (!(_QWORD)v659)
            {
              LODWORD(v691) = 0;
              Espresso::create_context((int *)&v691, v692);
              v546 = *(_OWORD *)v692;
              *(_QWORD *)v692 = 0;
              *(_QWORD *)&v692[8] = 0;
              v547 = (std::__shared_weak_count *)*((_QWORD *)&v659 + 1);
              v659 = v546;
              if (v547)
              {
                v548 = (unint64_t *)&v547->__shared_owners_;
                do
                  v549 = __ldaxr(v548);
                while (__stlxr(v549 - 1, v548));
                if (!v549)
                {
                  ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
                  std::__shared_weak_count::__release_weak(v547);
                }
              }
              v550 = *(std::__shared_weak_count **)&v692[8];
              if (*(_QWORD *)&v692[8])
              {
                v551 = (unint64_t *)(*(_QWORD *)&v692[8] + 8);
                do
                  v552 = __ldaxr(v551);
                while (__stlxr(v552 - 1, v551));
                if (!v552)
                {
                  ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
                  std::__shared_weak_count::__release_weak(v550);
                }
              }
            }
            v512 = *(_QWORD *)v498;
            v513 = *(_OWORD *)&(*a4)[2 * v500];
            v643 = v513;
            if (*((_QWORD *)&v513 + 1))
            {
              v514 = (unint64_t *)(*((_QWORD *)&v513 + 1) + 8);
              do
                v515 = __ldxr(v514);
              while (__stxr(v515 + 1, v514));
            }
            *(_OWORD *)v641 = v659;
            if (*((_QWORD *)&v659 + 1))
            {
              v516 = (unint64_t *)(*((_QWORD *)&v659 + 1) + 8);
              do
                v517 = __ldxr(v516);
              while (__stxr(v517 + 1, v516));
            }
            Espresso::create_kernel_for_engine(v692, v512 + 224 * v500, (uint64_t *)&v643, (uint64_t *)v641, 0);
            v518 = *(_OWORD *)v692;
            *(_QWORD *)v692 = 0;
            *(_QWORD *)&v692[8] = 0;
            v519 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v518;
            if (v519)
            {
              v520 = (unint64_t *)&v519->__shared_owners_;
              do
                v521 = __ldaxr(v520);
              while (__stlxr(v521 - 1, v520));
              if (!v521)
              {
                ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                std::__shared_weak_count::__release_weak(v519);
              }
            }
            v522 = *(std::__shared_weak_count **)&v692[8];
            if (*(_QWORD *)&v692[8])
            {
              v523 = (unint64_t *)(*(_QWORD *)&v692[8] + 8);
              do
                v524 = __ldaxr(v523);
              while (__stlxr(v524 - 1, v523));
              if (!v524)
              {
                ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
                std::__shared_weak_count::__release_weak(v522);
              }
            }
            v525 = (std::__shared_weak_count *)v641[1];
            if (v641[1])
            {
              v526 = (unint64_t *)((char *)v641[1] + 8);
              do
                v527 = __ldaxr(v526);
              while (__stlxr(v527 - 1, v526));
              if (!v527)
              {
                ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
                std::__shared_weak_count::__release_weak(v525);
              }
            }
            v528 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
            if (*((_QWORD *)&v643 + 1))
            {
              v529 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
              do
                v530 = __ldaxr(v529);
              while (__stlxr(v530 - 1, v529));
              if (!v530)
              {
                ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
                std::__shared_weak_count::__release_weak(v528);
              }
            }
          }
          v506 = *(_QWORD *)v498;
          v507 = *(_QWORD *)v498 + 224 * v500;
          v508 = v507 + 48;
          v509 = *(char *)(v507 + 71);
          if (v509 < 0)
          {
            v511 = *(uint64_t **)v508;
            v510 = *(_QWORD *)(v507 + 56);
          }
          else
          {
            v510 = *(unsigned __int8 *)(v507 + 71);
            v511 = (uint64_t *)v508;
          }
          if (v510 >= 3)
          {
            v531 = (char *)v511 + v510;
            v532 = v511;
            do
            {
              v533 = (char *)memchr(v532, 99, v510 - 2);
              if (!v533)
                break;
              if (*(_WORD *)v533 == 26211 && v533[2] == 95)
              {
                if (v533 != v531 && v533 - (char *)v511 != -1)
                  goto LABEL_868;
                break;
              }
              v532 = (uint64_t *)(v533 + 1);
              v510 = v531 - (char *)v532;
            }
            while (v531 - (char *)v532 >= 3);
          }
          if (v509 < 0)
          {
            if (*(_QWORD *)(v508 + 8) != 11)
              goto LABEL_867;
            v535 = *(uint64_t **)v508;
          }
          else
          {
            v535 = (uint64_t *)v508;
            if (v509 != 11)
              goto LABEL_867;
          }
          v536 = *v535;
          v537 = *(uint64_t *)((char *)v535 + 3);
          if (v536 != 0x747269765F696870 || v537 != 0x6C6175747269765FLL)
          {
LABEL_867:
            if (((*(uint64_t (**)(std::string::size_type, unint64_t))(*(_QWORD *)buf.__r_.__value_.__l.__data_
                                                                                      + 264))(buf.__r_.__value_.__r.__words[0], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v506 + 224 * v500 + 144) - *(_QWORD *)(v506 + 224 * v500 + 136)) >> 3)) & 1) != 0)
            {
LABEL_868:
              v539 = 0;
              goto LABEL_899;
            }
            LOBYTE(v509) = *(_BYTE *)(v508 + 23);
          }
          if ((v509 & 0x80) != 0)
          {
            v541 = v508;
            v508 = *(_QWORD *)v508;
            v540 = *(_QWORD *)(v541 + 8);
          }
          else
          {
            v540 = v509;
          }
          if (v540 >= 7)
          {
            v542 = (char *)(v508 + v540);
            v543 = (void *)v508;
            do
            {
              v544 = (char *)memchr(v543, 95, v540 - 6);
              if (!v544)
                break;
              if (*(_DWORD *)v544 == 1869375327 && *(_DWORD *)(v544 + 3) == 1818321519)
              {
                if (v544 != v542 && &v544[-v508] != (char *)-1)
                  goto LABEL_868;
                break;
              }
              v543 = v544 + 1;
              v540 = v542 - (_BYTE *)v543;
            }
            while (v542 - (_BYTE *)v543 >= 7);
          }
          v553 = *(_QWORD *)v498 + 224 * v500;
          v554 = *(_QWORD *)(v553 + 112);
          v555 = *(_QWORD *)(v553 + 120);
          while (v554 != v555)
          {
            v556 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&__p, v554);
            v539 = v556 == 0;
            if (v556)
              goto LABEL_899;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__p, v554, v554);
            v554 += 24;
          }
          v539 = 1;
LABEL_899:
          v557 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          v52 = v628;
          if (buf.__r_.__value_.__l.__size_)
          {
            v558 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v559 = __ldaxr(v558);
            while (__stlxr(v559 - 1, v558));
            if (!v559)
            {
              ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
              std::__shared_weak_count::__release_weak(v557);
            }
          }
          if (v539)
          {
            ++v500;
            v499 = *(_QWORD *)v498;
            if (v500 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v498 + 1) - *(_QWORD *)v498) >> 5))
              continue;
          }
          break;
        }
        v560 = (std::__shared_weak_count *)*((_QWORD *)&v659 + 1);
        if (*((_QWORD *)&v659 + 1))
        {
          v561 = (unint64_t *)(*((_QWORD *)&v659 + 1) + 8);
          do
            v562 = __ldaxr(v561);
          while (__stlxr(v562 - 1, v561));
          if (!v562)
          {
            ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
            std::__shared_weak_count::__release_weak(v560);
          }
        }
LABEL_912:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
        v563 = v615;
        if (v52 == 10011)
          v563 = 1;
        if (v52 == 10008)
          v564 = 1;
        else
          v564 = v563;
        if (((v539 | v564 ^ 1) & 1) != 0)
        {
          v565 = (v52 - 50007) < 0xFFFFFFFE || v539;
          a3 = v614;
          if ((v565 & 1) == 0)
          {
            v566 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v566, "Control flow detected, Please change to use CPU backend for performance boost");
            v566->__vftable = (std::runtime_error_vtbl *)&off_1E2D994E0;
          }
        }
        else
        {
          v621 = 0;
          a3 = v614;
        }
LABEL_924:
        v567 = v682;
        if (v682)
        {
          v568 = (unint64_t *)&v682->__shared_owners_;
          do
            v569 = __ldaxr(v568);
          while (__stlxr(v569 - 1, v568));
          if (!v569)
          {
            ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
            std::__shared_weak_count::__release_weak(v567);
          }
        }
        v570 = v684;
        if (v684)
        {
          v571 = (unint64_t *)&v684->__shared_owners_;
          do
            v572 = __ldaxr(v571);
          while (__stlxr(v572 - 1, v571));
          if (!v572)
          {
            ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
            std::__shared_weak_count::__release_weak(v570);
          }
        }
        v573 = (std::__shared_weak_count *)*((_QWORD *)&v685 + 1);
        if (*((_QWORD *)&v685 + 1))
        {
          v574 = (unint64_t *)(*((_QWORD *)&v685 + 1) + 8);
          do
            v575 = __ldaxr(v574);
          while (__stlxr(v575 - 1, v574));
          if (!v575)
          {
            ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
            std::__shared_weak_count::__release_weak(v573);
          }
        }
LABEL_91:
        if (v52 != 20000 || v627)
        {
LABEL_107:
          v681 = (uint64_t *)&v680;
          v682 = (std::__shared_weak_count *)a3;
          if (v52 == 50000 && !v627)
          {
            *(_DWORD *)v692 = 101;
            LODWORD(v643) = 50002;
            v67 = (std::__shared_weak_count *)a2[1];
            v665 = *a2;
            v666 = v67;
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            v70 = *(std::__shared_weak_count **)(a3 + 8);
            v664[0] = *(_QWORD *)a3;
            v664[1] = (uint64_t)v70;
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
            }
            LODWORD(v659) = 1;
            try_dispatch((uint64_t)&__p, &v665, v664, a4, a5, a6, (int *)v692, (int *)&v659);
            if (v70)
            {
              v73 = (unint64_t *)&v70->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v75 = v666;
            if (v666)
            {
              v76 = (unint64_t *)&v666->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            v78 = **(_QWORD **)v687;
            v79 = *(_QWORD *)(*(_QWORD *)v687 + 8);
            if (check_network_has_no_convolutions(**(_QWORD **)v687, v79)
              && check_network_has_batch_matmul_and_softmax_nd(v78, v79))
            {
              Espresso::create_context((int *)&v643, &buf);
              v80 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(_BYTE *)(buf.__r_.__value_.__r.__words[0] + 56) = 1;
              v658 = v80;
              if (*((_QWORD *)&v80 + 1))
              {
                v81 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
                do
                  v82 = __ldxr(v81);
                while (__stxr(v82 + 1, v81));
              }
              v83 = *(std::__shared_weak_count **)(a3 + 8);
              v657[0] = *(_QWORD *)a3;
              v657[1] = (uint64_t)v83;
              if (v83)
              {
                v84 = (unint64_t *)&v83->__shared_owners_;
                do
                  v85 = __ldxr(v84);
                while (__stxr(v85 + 1, v84));
              }
              LODWORD(v641[0]) = 0;
              LODWORD(v685) = 0;
              try_dispatch((uint64_t)&v659, &v658, v657, a4, a5, (unsigned int *)v641, (int *)v692, (int *)&v685);
              if (v83)
              {
                v87 = (unint64_t *)&v83->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              v89 = (std::__shared_weak_count *)*((_QWORD *)&v658 + 1);
              if (*((_QWORD *)&v658 + 1))
              {
                v90 = (unint64_t *)(*((_QWORD *)&v658 + 1) + 8);
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              v86.n128_f32[0] = v662;
              if (v662 < *(float *)&v688)
              {
                v602 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v602, "");
                v602->__vftable = (std::runtime_error_vtbl *)&off_1E2D9A0F0;
              }
              v92 = (std::__shared_weak_count *)*((_QWORD *)&v661 + 1);
              if (*((_QWORD *)&v661 + 1))
              {
                v93 = (unint64_t *)(*((_QWORD *)&v661 + 1) + 8);
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v92->__on_zero_shared)(v92, v86);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v95 = (std::__shared_weak_count *)*((_QWORD *)&v660 + 1);
              if (*((_QWORD *)&v660 + 1))
              {
                v96 = (unint64_t *)(*((_QWORD *)&v660 + 1) + 8);
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v95->__on_zero_shared)(v95, v86);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              v98 = (std::__shared_weak_count *)*((_QWORD *)&v659 + 1);
              if (*((_QWORD *)&v659 + 1))
              {
                v99 = (unint64_t *)(*((_QWORD *)&v659 + 1) + 8);
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v98->__on_zero_shared)(v98, v86);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
              if (buf.__r_.__value_.__l.__size_)
              {
                v102 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v101->__on_zero_shared)(v101, v86);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
            }
            v104 = *(std::__shared_weak_count **)&v687[24];
            if (*(_QWORD *)&v687[24])
            {
              v105 = (unint64_t *)(*(_QWORD *)&v687[24] + 8);
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            v107 = *(std::__shared_weak_count **)&v687[8];
            if (*(_QWORD *)&v687[8])
            {
              v108 = (unint64_t *)(*(_QWORD *)&v687[8] + 8);
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            v110 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v111 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
          }
          v113 = Espresso::net::model_is_mil(*(Espresso::net **)a3);
          v114 = v628;
          v115 = !v113;
          if (v628 != 50005)
            v115 = 1;
          if ((v115 & 1) == 0)
          {
            v116 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 120))(*a2);
            objc_msgSend(v116, "device");
            v117 = (id)objc_claimAutoreleasedReturnValue();
            if (Espresso::hardware::enable_mpsgraph_for_hardware(void *)::once_token != -1)
              dispatch_once(&Espresso::hardware::enable_mpsgraph_for_hardware(void *)::once_token, &__block_literal_global_21_4928);
            if (!Espresso::hardware::enable_mpsgraph_for_hardware(void *)::has_ane)
            {
              v599 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v599, "MPSGraph is not enabled for this hardware; re-loading on classic MPS engine.");
              v599->__vftable = (std::runtime_error_vtbl *)&off_1E2D9E1F0;
            }

            v114 = v628;
          }
          if (v622 >= 2 && (v114 - 10006) <= 5 && ((1 << (v114 - 22)) & 0x27) != 0)
          {
            v673 = 1;
            v656 = 50001;
            v655 = 101;
            v654 = 50003;
            if (v621)
            {
              v656 = 50006;
              v673 = 0;
              if (v114 == 10008)
                goto LABEL_245;
              v654 = 50002;
              v656 = 50005;
            }
            else
            {
              if (v114 == 10008)
                goto LABEL_245;
              v656 = 50000;
              v654 = 50002;
            }
            v655 = 100;
LABEL_245:
            v156 = *a2;
            if (*(_BYTE *)(*a2 + 127))
            {
              v656 = 50008;
              v654 = 50008;
              v673 = 0;
              if (v617)
              {
                v157 = (***(uint64_t (****)(_QWORD))(v156 + 8))(*(_QWORD *)(v156 + 8));
                v159 = v157 == 10008 || v157 == 10011;
                if ((v159 || v157 >> 1 == 5003) && (v617 & 4) == 0)
                {
                  Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_0::operator()((Espresso *)&v681, v158);
                  v600 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  v601 = v600;
                  if ((v617 & 2) == 0)
                  {
                    Espresso::dispatch_error_use_cpu_script::dispatch_error_use_cpu_script(v600);
                  }
                  Espresso::dispatch_error_use_mpsgraph_compiler::dispatch_error_use_mpsgraph_compiler(v600);
                }
              }
            }
            if (v618)
            {
              v656 = 50001;
              v654 = 50003;
              if (v621)
              {
                v656 = 50006;
                v673 = 0;
              }
            }
            v344 = (std::__shared_weak_count *)a2[1];
            v652 = *a2;
            v653 = v344;
            if (v344)
            {
              v345 = (unint64_t *)&v344->__shared_owners_;
              do
                v346 = __ldxr(v345);
              while (__stxr(v346 + 1, v345));
            }
            v347 = *(std::__shared_weak_count **)(a3 + 8);
            v651[0] = *(_QWORD *)a3;
            v651[1] = (uint64_t)v347;
            if (v347)
            {
              v348 = (unint64_t *)&v347->__shared_owners_;
              do
                v349 = __ldxr(v348);
              while (__stxr(v349 + 1, v348));
            }
            LODWORD(v659) = 0;
            try_dispatch((uint64_t)&__p, &v652, v651, a4, a5, a6, &v655, (int *)&v659);
            if (v347)
            {
              v350 = (unint64_t *)&v347->__shared_owners_;
              do
                v351 = __ldaxr(v350);
              while (__stlxr(v351 - 1, v350));
              if (!v351)
              {
                ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                std::__shared_weak_count::__release_weak(v347);
              }
            }
            v352 = v653;
            if (v653)
            {
              v353 = (unint64_t *)&v653->__shared_owners_;
              do
                v354 = __ldaxr(v353);
              while (__stlxr(v354 - 1, v353));
              if (!v354)
              {
                ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
                std::__shared_weak_count::__release_weak(v352);
              }
            }
            v355 = (std::__shared_weak_count *)a2[1];
            v649 = *a2;
            v650 = v355;
            if (v355)
            {
              v356 = (unint64_t *)&v355->__shared_owners_;
              do
                v357 = __ldxr(v356);
              while (__stxr(v357 + 1, v356));
            }
            v358 = *(std::__shared_weak_count **)(a3 + 8);
            v648[0] = *(_QWORD *)a3;
            v648[1] = (uint64_t)v358;
            if (v358)
            {
              v359 = (unint64_t *)&v358->__shared_owners_;
              do
                v360 = __ldxr(v359);
              while (__stxr(v360 + 1, v359));
            }
            try_dispatch((uint64_t)&v659, &v649, v648, a4, a5, a6, (int *)&v656, &v673);
            if (v358)
            {
              v363 = (unint64_t *)&v358->__shared_owners_;
              do
                v364 = __ldaxr(v363);
              while (__stlxr(v364 - 1, v363));
              if (!v364)
              {
                ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                std::__shared_weak_count::__release_weak(v358);
              }
            }
            v365 = v650;
            if (!v650)
              goto LABEL_590;
            v366 = (unint64_t *)&v650->__shared_owners_;
            do
              v367 = __ldaxr(v366);
            while (__stlxr(v367 - 1, v366));
            if (!v367)
            {
              ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
              std::__shared_weak_count::__release_weak(v365);
              if (v619)
                goto LABEL_591;
            }
            else
            {
LABEL_590:
              if (v619)
              {
LABEL_591:
                HIBYTE(v663) = 0;
                Espresso::espresso_os_log_subsystem(v361, v362);
                v368 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v368, OS_LOG_TYPE_DEBUG))
                {
                  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                  _os_log_debug_impl(&dword_190DAF000, v368, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2]: rejecting ane-gpu due to multihead", (uint8_t *)&buf, 2u);
                }

              }
            }
            Espresso::espresso_os_log_subsystem(v361, v362);
            v369 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v369, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109888;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = HIBYTE(v663);
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
              *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v662;
              WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf.__r_.__value_.__r.__words[2]) = BYTE5(v688);
              LOWORD(v697[0]) = 2048;
              *(double *)((char *)v697 + 2) = *(float *)&v688;
              _os_log_debug_impl(&dword_190DAF000, v369, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] fb_gpu=(%d %.3f) fb_cpu=(%d %.3f)", (uint8_t *)&buf, 0x22u);
            }

            *(_QWORD *)&v643 = &v654;
            *((_QWORD *)&v643 + 1) = a3;
            v644 = a4;
            v645 = a5;
            v646 = &v680;
            v647 = &v655;
            PlatformHeuristics = GetPlatformHeuristics((Espresso::net **)a3);
            v371 = *(Espresso::net **)a3;
            std::string::basic_string[abi:ne180100]<0>(v692, "espresso.dispatch.v3_enable");
            std::string::basic_string[abi:ne180100]<0>(v641, "1");
            Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v371 + 472, (uint64_t)v692, (uint64_t)v641, &buf);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              if (buf.__r_.__value_.__l.__size_ == 1)
              {
                v373 = (void *)buf.__r_.__value_.__r.__words[0];
                v375 = *buf.__r_.__value_.__l.__data_ == 48 || v622 != 3;
              }
              else
              {
                v375 = v622 != 3;
                v373 = (void *)buf.__r_.__value_.__r.__words[0];
              }
              if (PlatformHeuristics)
                v377 = v375;
              else
                v377 = 1;
              operator delete(v373);
            }
            else
            {
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) == 1)
                v372 = buf.__r_.__value_.__s.__data_[0] != 48 && v622 == 3;
              else
                v372 = v622 == 3;
              v377 = !v372 || PlatformHeuristics == 0;
            }
            if (v642 < 0)
              operator delete(v641[0]);
            if (v693 < 0)
              operator delete(*(void **)v692);
            v378 = 0.0;
            if ((v377 & 1) == 0)
              v378 = (*(double (**)(uint64_t))(*(_QWORD *)PlatformHeuristics + 168))(PlatformHeuristics);
            v379 = *a2;
            if (HIBYTE(v663) | v627 || *(_BYTE *)(v379 + 137))
            {
LABEL_680:
              v409 = __p;
              v410 = (std::__shared_weak_count *)a2[1];
              v639 = v379;
              v640 = v410;
              if (v410)
              {
                v411 = (unint64_t *)&v410->__shared_owners_;
                do
                  v412 = __ldxr(v411);
                while (__stxr(v412 + 1, v411));
              }
              v413 = *(std::__shared_weak_count **)&v687[8];
              v638[0] = *(uint64_t **)v687;
              v638[1] = *(uint64_t **)&v687[8];
              if (*(_QWORD *)&v687[8])
              {
                v414 = (unint64_t *)(*(_QWORD *)&v687[8] + 8);
                do
                  v415 = __ldxr(v414);
                while (__stxr(v415 + 1, v414));
              }
              has_any_fallback = Espresso::cpu_context_transfer_algo_t::has_any_fallback(v409, (uint64_t)&v639, v638);
              if (v413)
              {
                v417 = (unint64_t *)&v413->__shared_owners_;
                do
                  v418 = __ldaxr(v417);
                while (__stlxr(v418 - 1, v417));
                if (!v418)
                {
                  ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                  std::__shared_weak_count::__release_weak(v413);
                }
              }
              v419 = v640;
              if (v640)
              {
                v420 = (unint64_t *)&v640->__shared_owners_;
                do
                  v421 = __ldaxr(v420);
                while (__stlxr(v421 - 1, v420));
                if (!v421)
                {
                  ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                  std::__shared_weak_count::__release_weak(v419);
                }
              }
              v422 = v659;
              v423 = (std::__shared_weak_count *)a2[1];
              v636 = *a2;
              v637 = v423;
              if (v423)
              {
                v424 = (unint64_t *)&v423->__shared_owners_;
                do
                  v425 = __ldxr(v424);
                while (__stxr(v425 + 1, v424));
              }
              v426 = (std::__shared_weak_count *)*((_QWORD *)&v660 + 1);
              v635 = v660;
              if (*((_QWORD *)&v660 + 1))
              {
                v427 = (unint64_t *)(*((_QWORD *)&v660 + 1) + 8);
                do
                  v428 = __ldxr(v427);
                while (__stxr(v428 + 1, v427));
              }
              v429 = (Espresso *)Espresso::cpu_context_transfer_algo_t::has_any_fallback(v422, (uint64_t)&v636, (uint64_t **)&v635);
              v431 = (int)v429;
              if (v426)
              {
                v432 = (unint64_t *)&v426->__shared_owners_;
                do
                  v433 = __ldaxr(v432);
                while (__stlxr(v433 - 1, v432));
                if (!v433)
                {
                  ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
                  std::__shared_weak_count::__release_weak(v426);
                }
              }
              v434 = v637;
              if (v637)
              {
                v435 = (unint64_t *)&v637->__shared_owners_;
                do
                  v436 = __ldaxr(v435);
                while (__stlxr(v436 - 1, v435));
                if (!v436)
                {
                  ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
                  std::__shared_weak_count::__release_weak(v434);
                }
              }
              if (!HIBYTE(v663))
                goto LABEL_729;
              v437 = has_any_fallback | v431;
              if (v662 > *(float *)&v688)
                v437 = 0;
              v438 = v437 == 1 && v627 == 0;
              if (!v438 || (v378 < *(float *)&v688 ? (v439 = 1) : (v439 = v377), (v439 & 1) == 0))
              {
LABEL_729:
                if (HIBYTE(v663))
                  v440 = BYTE5(v688) == 0;
                else
                  v440 = 0;
                v441 = v616;
                if (v440)
                  v441 = 0;
                if (v441)
                {
                  Espresso::espresso_os_log_subsystem(v429, v430);
                  v442 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v442, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_debug_impl(&dword_190DAF000, v442, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] selected cpu", (uint8_t *)&buf, 2u);
                  }

                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)a3 + 712), *(uint64_t *)&v687[16], *(uint64_t *)&v687[24]);
                  if (!v377)
                    goto LABEL_735;
                  v444 = is_fully_on_fallback(*(char **)(*(_QWORD *)&v687[16] + 48), *(char **)(*(_QWORD *)&v687[16] + 56));
                  if (!v444)
                  {
                    to_fallback_if_bouncing_too_much((uint64_t)&__p, (const char *)(v621 != 0));
LABEL_735:
                    Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_0::operator()((Espresso *)&v681, v443);
                    v446 = __p;
                    v447 = *(_OWORD *)v687;
                    __p = 0uLL;
                    *(_OWORD *)a1 = v446;
                    *(_OWORD *)(a1 + 16) = v447;
                    *(_QWORD *)v687 = 0;
                    *(_QWORD *)&v687[8] = 0;
                    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v687[16];
                    *(_QWORD *)&v687[16] = 0;
                    *(_QWORD *)&v687[24] = 0;
                    *(_DWORD *)(a1 + 48) = v688;
                    *(_WORD *)(a1 + 52) = WORD2(v688);
                    v448 = (std::__shared_weak_count *)*((_QWORD *)&v661 + 1);
                    if (*((_QWORD *)&v661 + 1))
                    {
                      v449 = (unint64_t *)(*((_QWORD *)&v661 + 1) + 8);
                      do
                        v450 = __ldaxr(v449);
                      while (__stlxr(v450 - 1, v449));
                      if (!v450)
                      {
                        ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
                        std::__shared_weak_count::__release_weak(v448);
                      }
                    }
LABEL_746:
                    v457 = (std::__shared_weak_count *)*((_QWORD *)&v660 + 1);
                    if (*((_QWORD *)&v660 + 1))
                    {
                      v458 = (unint64_t *)(*((_QWORD *)&v660 + 1) + 8);
                      do
                        v459 = __ldaxr(v458);
                      while (__stlxr(v459 - 1, v458));
                      if (!v459)
                      {
                        ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                        std::__shared_weak_count::__release_weak(v457);
                      }
                    }
                    v460 = (std::__shared_weak_count *)*((_QWORD *)&v659 + 1);
                    if (*((_QWORD *)&v659 + 1))
                    {
                      v461 = (unint64_t *)(*((_QWORD *)&v659 + 1) + 8);
                      do
                        v462 = __ldaxr(v461);
                      while (__stlxr(v462 - 1, v461));
                      if (!v462)
                      {
                        ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                        std::__shared_weak_count::__release_weak(v460);
                      }
                    }
                    v463 = *(std::__shared_weak_count **)&v687[24];
                    if (*(_QWORD *)&v687[24])
                    {
                      v464 = (unint64_t *)(*(_QWORD *)&v687[24] + 8);
                      do
                        v465 = __ldaxr(v464);
                      while (__stlxr(v465 - 1, v464));
                      if (!v465)
                      {
                        ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                        std::__shared_weak_count::__release_weak(v463);
                      }
                    }
                    v466 = *(std::__shared_weak_count **)&v687[8];
                    if (*(_QWORD *)&v687[8])
                    {
                      v467 = (unint64_t *)(*(_QWORD *)&v687[8] + 8);
                      do
                        v468 = __ldaxr(v467);
                      while (__stlxr(v468 - 1, v467));
                      if (!v468)
                      {
                        ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                        std::__shared_weak_count::__release_weak(v466);
                      }
                    }
                    v336 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
                    if (*((_QWORD *)&__p + 1))
                    {
                      v469 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                      do
                        v338 = __ldaxr(v469);
                      while (__stlxr(v338 - 1, v469));
LABEL_769:
                      if (!v338)
                      {
                        ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                        std::__shared_weak_count::__release_weak(v336);
                      }
                    }
                    return;
                  }
                  Espresso::espresso_os_log_subsystem((Espresso *)v444, v445);
                  v606 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v606, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_debug_impl(&dword_190DAF000, v606, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] The network falls back to CPU too often. Please consider running the network on CPU or change the architecture.", (uint8_t *)&buf, 2u);
                  }

                  v604 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  v605 = &v604->__vftable;
                  if (!v621)
                  {
                    std::runtime_error::runtime_error(v604, "The network falls back to CPU too often. Please consider running the network on CPU or change the architecture.");
                    goto LABEL_992;
                  }
                  goto LABEL_1002;
                }
              }
              Espresso::espresso_os_log_subsystem(v429, v430);
              v451 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v451, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_debug_impl(&dword_190DAF000, v451, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] selected gpu", (uint8_t *)&buf, 2u);
              }

              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)a3 + 712), v661, *((uint64_t *)&v661 + 1));
              if (v377)
              {
                v453 = is_fully_on_fallback(*(char **)(v661 + 48), *(char **)(v661 + 56));
                if (v453)
                {
                  Espresso::espresso_os_log_subsystem((Espresso *)v453, v454);
                  v603 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v603, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_debug_impl(&dword_190DAF000, v603, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] The network falls back to GPU too often. Please consider running the network on GPU or change the architecture.", (uint8_t *)&buf, 2u);
                  }

                  v604 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  v605 = &v604->__vftable;
                  if (!v621)
                  {
                    std::runtime_error::runtime_error(v604, "The network falls back to GPU too often. Please consider running the network on GPU or change the architecture.");
LABEL_992:
                    *v605 = &off_1E2D9E1F0;
                    v607 = Espresso::dispatch_error_fallback_at_c_level::~dispatch_error_fallback_at_c_level;
                    goto LABEL_1003;
                  }
LABEL_1002:
                  std::runtime_error::runtime_error(v604, "The network falls back to MPSGraph too often.  Please consider running the network on MPSGraph or change the architecture.");
                  *v605 = &off_1E2D95898;
                  v607 = Espresso::dispatch_error_use_mpsgraph::~dispatch_error_use_mpsgraph;
LABEL_1003:
                  __cxa_throw(v605, v608, (void (*)(void *))v607);
                }
                to_fallback_if_bouncing_too_much((uint64_t)&v659, (const char *)(v621 != 0));
              }
              Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_0::operator()((Espresso *)&v681, v452);
              v455 = v659;
              v456 = v660;
              v659 = 0uLL;
              *(_OWORD *)a1 = v455;
              *(_OWORD *)(a1 + 16) = v456;
              v660 = 0uLL;
              *(_OWORD *)(a1 + 32) = v661;
              v661 = 0uLL;
              *(float *)(a1 + 48) = v662;
              *(_WORD *)(a1 + 52) = v663;
              goto LABEL_746;
            }
            Espresso::create_context((int *)&v656, v641);
            v380 = v641[0];
            if (!v641[0])
              Espresso::throw_exception_selector<Espresso::invalid_context_error>("Could not create GPU context.");
            LODWORD(v691) = v656 >> 1 == 25000;
            *((_BYTE *)v641[0] + 56) = 1;
            *(_QWORD *)&v685 = v380;
            *((void **)&v685 + 1) = v641[1];
            if (v641[1])
            {
              v381 = (unint64_t *)((char *)v641[1] + 8);
              do
                v382 = __ldxr(v381);
              while (__stxr(v382 + 1, v381));
            }
            v383 = *(std::__shared_weak_count **)(a3 + 8);
            v683 = *(Espresso::net **)a3;
            v684 = v383;
            if (v383)
            {
              v384 = (unint64_t *)&v383->__shared_owners_;
              do
                v385 = __ldxr(v384);
              while (__stxr(v385 + 1, v384));
            }
            *(_DWORD *)v692 = 0;
            try_dispatch((uint64_t)&buf, &v685, (uint64_t *)&v683, a4, a5, (unsigned int *)&v691, &v655, (int *)v692);
            if (v383)
            {
              v388 = (unint64_t *)&v383->__shared_owners_;
              do
                v389 = __ldaxr(v388);
              while (__stlxr(v389 - 1, v388));
              if (!v389)
              {
                ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                std::__shared_weak_count::__release_weak(v383);
              }
            }
            v390 = (std::__shared_weak_count *)*((_QWORD *)&v685 + 1);
            if (*((_QWORD *)&v685 + 1))
            {
              v391 = (unint64_t *)(*((_QWORD *)&v685 + 1) + 8);
              do
                v392 = __ldaxr(v391);
              while (__stlxr(v392 - 1, v391));
              if (!v392)
              {
                ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                std::__shared_weak_count::__release_weak(v390);
              }
            }
            Espresso::espresso_os_log_subsystem(v386, v387);
            v393 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v393, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v692 = 67109376;
              *(_DWORD *)&v692[4] = v700;
              *(_WORD *)&v692[8] = 2048;
              *(double *)&v692[10] = v699;
              _os_log_debug_impl(&dword_190DAF000, v393, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] fb_gpu_cpu=(%d %.3f)", v692, 0x12u);
            }

            v394 = (std::__shared_weak_count *)v641[1];
            if (v641[1])
            {
              v395 = (unint64_t *)((char *)v641[1] + 8);
              do
                v396 = __ldaxr(v395);
              while (__stlxr(v396 - 1, v395));
              if (!v396)
              {
                ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                std::__shared_weak_count::__release_weak(v394);
              }
            }
            if (v621)
              goto LABEL_661;
            if (Espresso::net::model_is_mil(*(Espresso::net **)a3))
            {
              v611 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v611, "Control flow detected, Please change to use CPU backend for performance boost");
              v611->__vftable = (std::runtime_error_vtbl *)&off_1E2D994E0;
              v612 = Espresso::dispatch_error_use_cpu_script::~dispatch_error_use_cpu_script;
              goto LABEL_1005;
            }
            v397 = *(_QWORD *)buf.__r_.__value_.__r.__words[2];
            v398 = *(_QWORD *)(buf.__r_.__value_.__r.__words[2] + 8);
            if (check_network_has_no_convolutions(*(_QWORD *)buf.__r_.__value_.__r.__words[2], v398)
              && check_network_has_batch_matmul_and_softmax_nd(v397, v398))
            {
              Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_2::operator()((uint64_t)v692, (uint64_t)&v643);
              if (v695 && v694 < v699)
              {
                Espresso::dispatch_status_t::operator=((uint64_t)&buf, (uint64_t)v692);
                v399 = 1;
              }
              else
              {
                v399 = 0;
              }
              Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)v692);
            }
            else
            {
LABEL_661:
              v399 = 0;
            }
            if (!v700 || v699 >= *(float *)&v688)
            {
              v400 = v698;
              if (v698)
              {
                v401 = (unint64_t *)&v698->__shared_owners_;
                do
                  v402 = __ldaxr(v401);
                while (__stlxr(v402 - 1, v401));
                if (!v402)
                {
                  ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
                  std::__shared_weak_count::__release_weak(v400);
                }
              }
              v403 = (std::__shared_weak_count *)v697[0];
              if (v697[0])
              {
                v404 = (unint64_t *)(v697[0] + 8);
                do
                  v405 = __ldaxr(v404);
                while (__stlxr(v405 - 1, v404));
                if (!v405)
                {
                  ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
                  std::__shared_weak_count::__release_weak(v403);
                }
              }
              v406 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
              if (buf.__r_.__value_.__l.__size_)
              {
                v407 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
                do
                  v408 = __ldaxr(v407);
                while (__stlxr(v408 - 1, v407));
                if (!v408)
                {
                  ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                  std::__shared_weak_count::__release_weak(v406);
                }
              }
              v379 = *a2;
              goto LABEL_680;
            }
            v610 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            v611 = v610;
            if (v399)
            {
              std::runtime_error::runtime_error(v610, "ERROR: Internal exception for retry 'use_mps_buffers'. It is a bug if this is thrown to users.");
              v611->__vftable = (std::runtime_error_vtbl *)&off_1E2D9A0F0;
              v612 = Espresso::dispatch_error_use_mps_buffers::~dispatch_error_use_mps_buffers;
            }
            else if (v621)
            {
              std::runtime_error::runtime_error(v610, "ERROR: Internal exception for retry 'use_mps_graph'. It is a bug if this is thrown to users.");
              v611->__vftable = (std::runtime_error_vtbl *)&off_1E2D95898;
              v612 = Espresso::dispatch_error_use_mpsgraph::~dispatch_error_use_mpsgraph;
            }
            else
            {
              std::runtime_error::runtime_error(v610, "ERROR: Internal exception for retry 'fallback_at_c_level'. It is a bug if this is thrown to users.");
              v611->__vftable = (std::runtime_error_vtbl *)&off_1E2D9E1F0;
              v612 = Espresso::dispatch_error_fallback_at_c_level::~dispatch_error_fallback_at_c_level;
            }
LABEL_1005:
            __cxa_throw(v611, v613, (void (*)(void *))v612);
          }
          if ((***(unsigned int (****)(_QWORD))(*a2 + 8))(*(_QWORD *)(*a2 + 8))
            && (***(unsigned int (****)(_QWORD))(*a2 + 8))(*(_QWORD *)(*a2 + 8)) != 100)
          {
            LODWORD(__p) = 100;
            v147 = (std::__shared_weak_count *)a2[1];
            v630 = *a2;
            v631 = v147;
            v119 = a1;
            if (v147)
            {
              v148 = (unint64_t *)&v147->__shared_owners_;
              do
                v149 = __ldxr(v148);
              while (__stxr(v149 + 1, v148));
            }
            v150 = *(std::__shared_weak_count **)(a3 + 8);
            v629[0] = *(_QWORD *)a3;
            v629[1] = (uint64_t)v150;
            if (v150)
            {
              v151 = (unint64_t *)&v150->__shared_owners_;
              do
                v152 = __ldxr(v151);
              while (__stxr(v152 + 1, v151));
            }
            LODWORD(v659) = 0;
            try_dispatch(a1, &v630, v629, a4, a5, a6, (int *)&__p, (int *)&v659);
            if (v150)
            {
              v153 = (unint64_t *)&v150->__shared_owners_;
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
            v127 = v631;
            if (!v631)
              goto LABEL_241;
            v155 = (unint64_t *)&v631->__shared_owners_;
            do
              v129 = __ldaxr(v155);
            while (__stlxr(v129 - 1, v155));
          }
          else
          {
            LODWORD(__p) = 0;
            v118 = (std::__shared_weak_count *)a2[1];
            v633 = *a2;
            v634 = v118;
            v119 = a1;
            if (v118)
            {
              v120 = (unint64_t *)&v118->__shared_owners_;
              do
                v121 = __ldxr(v120);
              while (__stxr(v121 + 1, v120));
            }
            v122 = *(std::__shared_weak_count **)(a3 + 8);
            v632[0] = *(_QWORD *)a3;
            v632[1] = (uint64_t)v122;
            if (v122)
            {
              v123 = (unint64_t *)&v122->__shared_owners_;
              do
                v124 = __ldxr(v123);
              while (__stxr(v124 + 1, v123));
            }
            LODWORD(v659) = 0;
            try_dispatch(a1, &v633, v632, a4, a5, a6, (int *)&__p, (int *)&v659);
            if (v122)
            {
              v125 = (unint64_t *)&v122->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            v127 = v634;
            if (!v634)
              goto LABEL_241;
            v128 = (unint64_t *)&v634->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
          }
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
LABEL_241:
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)a3 + 712), *(_QWORD *)(v119 + 32), *(_QWORD *)(v119 + 40));
          return;
        }
        v56 = a2[1];
        *(_QWORD *)&v669 = *a2;
        *((_QWORD *)&v669 + 1) = v56;
        if (v56)
        {
          v57 = (unint64_t *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = *(Espresso::net **)a3;
        v60 = *(std::__shared_weak_count **)(a3 + 8);
        v667 = *(Espresso::net **)a3;
        v668 = v60;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        v643 = 0uLL;
        v63 = operator new(0x70uLL);
        v63[1] = 0;
        v63[2] = 0;
        *v63 = &off_1E2DB7030;
        *(_OWORD *)(v63 + 5) = 0u;
        *(_OWORD *)(v63 + 3) = 0u;
        *(_OWORD *)(v63 + 7) = 0u;
        v63[6] = v63 + 7;
        v63[10] = 0;
        v63[9] = v63 + 10;
        v63[12] = 0;
        v63[13] = 0;
        v63[11] = 0;
        v641[0] = v63 + 3;
        v641[1] = v63;
        if (v60)
        {
          p_shared_weak_owners = (unint64_t *)&v60->__shared_weak_owners_;
          do
            v65 = __ldxr(p_shared_weak_owners);
          while (__stxr(v65 + 1, p_shared_weak_owners));
          v66 = (std::__shared_weak_count *)v63[13];
          v63[12] = v59;
          v63[13] = v60;
          if (v66)
            std::__shared_weak_count::__release_weak(v66);
        }
        else
        {
          v63[12] = v59;
          v63[13] = 0;
        }
        LOBYTE(v673) = 0;
        v130 = (char *)operator new(0xB0uLL);
        *((_QWORD *)v130 + 1) = 0;
        *((_QWORD *)v130 + 2) = 0;
        *(_QWORD *)v130 = &off_1E2DBDC08;
        *(_OWORD *)(v130 + 88) = 0u;
        *(_OWORD *)(v130 + 136) = 0u;
        *(_OWORD *)(v130 + 120) = 0u;
        *(_OWORD *)(v130 + 40) = 0u;
        *(_OWORD *)(v130 + 56) = 0u;
        *(_OWORD *)(v130 + 24) = 0u;
        *(_OWORD *)(v130 + 72) = 0u;
        *(_OWORD *)(v130 + 104) = 0u;
        *((_QWORD *)v130 + 12) = v130 + 104;
        *((_QWORD *)v130 + 17) = 0;
        *((_QWORD *)v130 + 16) = 0;
        *((_QWORD *)v130 + 15) = v130 + 128;
        *((_QWORD *)v130 + 21) = 0;
        *((_QWORD *)v130 + 20) = 0;
        *((_QWORD *)v130 + 19) = v130 + 160;
        *(_QWORD *)&__p = v130 + 24;
        *((_QWORD *)&__p + 1) = v130;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v59 + 712, &__p);
        v131 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v132 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v134, "persistentDomainForName:", v620);
        v135 = (void *)objc_claimAutoreleasedReturnValue();

        v136 = v669;
        v137 = a1;
        if (*(_BYTE *)(v669 + 56))
        {
          v138 = (std::__shared_weak_count *)*((_QWORD *)&v669 + 1);
          __asm { FMOV            V0.2S, #1.0 }
          if (*((_QWORD *)&v669 + 1))
          {
            v143 = (unint64_t *)(*((_QWORD *)&v669 + 1) + 8);
            do
              v144 = __ldxr(v143);
            while (__stxr(v144 + 1, v143));
            *(_QWORD *)&__p = v136;
            *((_QWORD *)&__p + 1) = v138;
            do
              v145 = __ldxr(v143);
            while (__stxr(v145 + 1, v143));
            memset(&v687[4], 0, 28);
            *(_DWORD *)v687 = 100;
            v688 = _D0;
            v690 = 0;
            v689 = 0;
            do
              v146 = __ldaxr(v143);
            while (__stlxr(v146 - 1, v143));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          else
          {
            __p = (unint64_t)v669;
            memset(&v687[4], 0, 28);
            *(_DWORD *)v687 = 100;
            v688 = _D0;
            v690 = 0;
            v689 = 0;
          }
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v689, *((_QWORD *)v667 + 89), *((_QWORD *)v667 + 90));
          objc_msgSend(v135, "objectForKeyedSubscript:", CFSTR("espresso.ane_fallback_to_mps"));
          v160 = (void *)objc_claimAutoreleasedReturnValue();
          v161 = objc_msgSend(v160, "BOOLValue");

          if (v161)
          {
            NSLog(CFSTR("Setting: espresso.ane_fallback_to_mps"));
            *(_QWORD *)v687 = 0x10000C350;
          }
          objc_msgSend(v135, "objectForKeyedSubscript:", CFSTR("espresso.mps_fallback_to_cpu_no_bnns"));
          v162 = (void *)objc_claimAutoreleasedReturnValue();
          v163 = objc_msgSend(v162, "BOOLValue");

          if (v163)
          {
            NSLog(CFSTR("Setting: espresso.mps_fallback_to_cpu_no_bnns"));
            *(_DWORD *)v687 = 0;
          }
          if ((***(unsigned int (****)(_QWORD))(v669 + 8))(*(_QWORD *)(v669 + 8)) == 20000)
          {
            objc_msgSend(v135, "objectForKeyedSubscript:", CFSTR("espresso.metal_lowmem_conservative_context_transfer"));
            v164 = (void *)objc_claimAutoreleasedReturnValue();
            v165 = objc_msgSend(v164, "BOOLValue");

            if (v165)
              LODWORD(v688) = 1101004800;
          }
          std::allocate_shared[abi:ne180100]<Espresso::cpu_context_transfer_algo_t,std::allocator<Espresso::cpu_context_transfer_algo_t>,Espresso::cpu_context_transfer_algo_options &,void>((Espresso::cpu_context_transfer_algo_t **)&v659, (const Espresso::cpu_context_transfer_algo_options *)&__p);
          v166 = v659;
          v659 = 0uLL;
          v167 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
          v643 = v166;
          if (v167)
          {
            v168 = (unint64_t *)&v167->__shared_owners_;
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          v170 = (std::__shared_weak_count *)*((_QWORD *)&v659 + 1);
          if (*((_QWORD *)&v659 + 1))
          {
            v171 = (unint64_t *)(*((_QWORD *)&v659 + 1) + 8);
            do
              v172 = __ldaxr(v171);
            while (__stlxr(v172 - 1, v171));
            if (!v172)
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
          }
          v173 = v643;
          v685 = v669;
          if (*((_QWORD *)&v669 + 1))
          {
            v174 = (unint64_t *)(*((_QWORD *)&v669 + 1) + 8);
            do
              v175 = __ldxr(v174);
            while (__stxr(v175 + 1, v174));
          }
          v176 = *a6;
          v177 = (std::__shared_weak_count *)v641[1];
          v683 = (Espresso::net *)v641[0];
          v684 = (std::__shared_weak_count *)v641[1];
          if (v641[1])
          {
            v178 = (unint64_t *)((char *)v641[1] + 8);
            do
              v179 = __ldxr(v178);
            while (__stxr(v179 + 1, v178));
          }
          Espresso::cpu_context_transfer_algo_t::create_net_info_ir(v173, a4, &v685, a5, v176, (uint64_t *)&v683);
          if (v177)
          {
            v180 = (unint64_t *)&v177->__shared_owners_;
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          v182 = (std::__shared_weak_count *)*((_QWORD *)&v685 + 1);
          if (*((_QWORD *)&v685 + 1))
          {
            v183 = (unint64_t *)(*((_QWORD *)&v685 + 1) + 8);
            do
              v184 = __ldaxr(v183);
            while (__stlxr(v184 - 1, v183));
            if (!v184)
            {
              ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
              std::__shared_weak_count::__release_weak(v182);
            }
          }
          v185 = v667;
          std::string::basic_string[abi:ne180100]<0>(&buf, "engine_availability_reordering");
          std::string::basic_string[abi:ne180100]<0>(v692, "0");
          Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v185 + 472, (uint64_t)&buf, (uint64_t)v692, (std::string *)&v659);
          if (SBYTE7(v660) < 0)
          {
            v189 = *((_QWORD *)&v659 + 1) == 1 && *(unsigned __int8 *)v659 == 49;
            operator delete((void *)v659);
          }
          else
          {
            v189 = SBYTE7(v660) == 1 && v659 == 49;
          }
          if (v693 < 0)
            operator delete(*(void **)v692);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(buf.__r_.__value_.__l.__data_);
            if (!v189)
              goto LABEL_483;
LABEL_481:
            v297 = v643;
LABEL_484:
            v659 = v669;
            if (*((_QWORD *)&v669 + 1))
            {
              v300 = (unint64_t *)(*((_QWORD *)&v669 + 1) + 8);
              do
                v301 = __ldxr(v300);
              while (__stxr(v301 + 1, v300));
            }
            v302 = (std::__shared_weak_count *)v641[1];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)v641;
            v137 = a1;
            if (v641[1])
            {
              v303 = (unint64_t *)((char *)v641[1] + 8);
              do
                v304 = __ldxr(v303);
              while (__stxr(v304 + 1, v303));
            }
            Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(v297, v186, v187, v188, (uint64_t **)&buf);
            if (v302)
            {
              v306 = (unint64_t *)&v302->__shared_owners_;
              do
                v307 = __ldaxr(v306);
              while (__stlxr(v307 - 1, v306));
              if (!v307)
              {
                ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                std::__shared_weak_count::__release_weak(v302);
              }
            }
            v308 = (std::__shared_weak_count *)*((_QWORD *)&v659 + 1);
            if (*((_QWORD *)&v659 + 1))
            {
              v309 = (unint64_t *)(*((_QWORD *)&v659 + 1) + 8);
              do
                v310 = __ldaxr(v309);
              while (__stlxr(v310 - 1, v309));
              if (!v310)
              {
                ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                std::__shared_weak_count::__release_weak(v308);
              }
            }
            LOBYTE(v673) = 1;
          }
          else
          {
            if (v189)
              goto LABEL_481;
LABEL_483:
            objc_msgSend(v135, "objectForKeyedSubscript:", CFSTR("espresso.engine_availability_reordering"));
            v298 = (void *)objc_claimAutoreleasedReturnValue();
            v299 = objc_msgSend(v298, "BOOLValue");

            v297 = v643;
            if (v299)
              goto LABEL_484;
            v339 = (std::__shared_weak_count *)v641[1];
            v659 = *(_OWORD *)v641;
            if (v641[1])
            {
              v340 = (unint64_t *)((char *)v641[1] + 8);
              do
                v341 = __ldxr(v340);
              while (__stxr(v341 + 1, v340));
            }
            Espresso::cpu_context_transfer_algo_t::reorder_load_constants(v297, (uint64_t **)&v659, &v673);
            v137 = a1;
            if (v339)
            {
              v342 = (unint64_t *)&v339->__shared_owners_;
              do
                v343 = __ldaxr(v342);
              while (__stlxr(v343 - 1, v342));
              if (!v343)
              {
                ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                std::__shared_weak_count::__release_weak(v339);
              }
            }
          }
          v311 = (_QWORD *)v643;
          *(_OWORD *)v692 = v669;
          if (*((_QWORD *)&v669 + 1))
          {
            v312 = (unint64_t *)(*((_QWORD *)&v669 + 1) + 8);
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
          }
          v314 = (std::__shared_weak_count *)v641[1];
          v681 = (uint64_t *)v641[0];
          v682 = (std::__shared_weak_count *)v641[1];
          if (v641[1])
          {
            v315 = (unint64_t *)((char *)v641[1] + 8);
            do
              v316 = __ldxr(v315);
            while (__stxr(v316 + 1, v315));
          }
          Espresso::cpu_context_transfer_algo_t::assign_to_fallback_context(v311, (uint64_t)v692, v305, &v681);
          if (v314)
          {
            v317 = (unint64_t *)&v314->__shared_owners_;
            do
              v318 = __ldaxr(v317);
            while (__stlxr(v318 - 1, v317));
            if (!v318)
            {
              ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
              std::__shared_weak_count::__release_weak(v314);
            }
          }
          v319 = *(std::__shared_weak_count **)&v692[8];
          if (*(_QWORD *)&v692[8])
          {
            v320 = (unint64_t *)(*(_QWORD *)&v692[8] + 8);
            do
              v321 = __ldaxr(v320);
            while (__stlxr(v321 - 1, v320));
            if (!v321)
            {
              ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
              std::__shared_weak_count::__release_weak(v319);
            }
          }
          v322 = v690;
          if (v690)
          {
            v323 = (unint64_t *)&v690->__shared_owners_;
            do
              v324 = __ldaxr(v323);
            while (__stlxr(v324 - 1, v323));
            if (!v324)
            {
              ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
              std::__shared_weak_count::__release_weak(v322);
            }
          }
          v691 = (void **)&v687[8];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v691);
          v325 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v326 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v327 = __ldaxr(v326);
            while (__stlxr(v327 - 1, v326));
            if (!v327)
            {
              ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
              std::__shared_weak_count::__release_weak(v325);
            }
          }
        }
        *(_QWORD *)(v137 + 45) = 0;
        *(_OWORD *)v137 = 0u;
        *(_OWORD *)(v137 + 32) = 0u;
        *(_OWORD *)(v137 + 16) = 0u;
        *(_BYTE *)(v137 + 53) = 1;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v137, v643, *((uint64_t *)&v643 + 1));
        v328 = (std::__shared_weak_count *)v641[1];
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v137 + 16), (uint64_t)v641[0], (uint64_t)v641[1]);
        *(_BYTE *)(v137 + 52) = v673;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v137 + 32), *((_QWORD *)v667 + 89), *((_QWORD *)v667 + 90));
        *(_BYTE *)(v137 + 53) = 1;

        if (v328)
        {
          v329 = (unint64_t *)&v328->__shared_owners_;
          do
            v330 = __ldaxr(v329);
          while (__stlxr(v330 - 1, v329));
          if (!v330)
          {
            ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
            std::__shared_weak_count::__release_weak(v328);
          }
        }
        v331 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
        if (*((_QWORD *)&v643 + 1))
        {
          v332 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
          do
            v333 = __ldaxr(v332);
          while (__stlxr(v333 - 1, v332));
          if (!v333)
          {
            ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
            std::__shared_weak_count::__release_weak(v331);
          }
        }
        if (v60)
        {
          v334 = (unint64_t *)&v60->__shared_owners_;
          do
            v335 = __ldaxr(v334);
          while (__stlxr(v335 - 1, v334));
          if (!v335)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v336 = (std::__shared_weak_count *)*((_QWORD *)&v669 + 1);
        if (*((_QWORD *)&v669 + 1))
        {
          v337 = (unint64_t *)(*((_QWORD *)&v669 + 1) + 8);
          do
            v338 = __ldaxr(v337);
          while (__stlxr(v338 - 1, v337));
          goto LABEL_769;
        }
        return;
      default:
        goto LABEL_372;
    }
  }
}

void sub_190E478B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, Espresso::quantized_weights_helper::linear_quantization_data *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p)
{
  void *v61;
  uint64_t v62;

  __cxa_free_exception(v61);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)(v62 - 176));
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

BOOL Espresso::net::model_is_mil(Espresso::net *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v1 = (_QWORD *)((char *)this + 592);
  v2 = *((unsigned __int8 *)this + 615);
  if ((*((char *)this + 615) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 615))
    {
      v3 = *((unsigned __int8 *)this + 615);
      goto LABEL_6;
    }
    return 0;
  }
  v3 = *((_QWORD *)this + 75);
  if (!v3)
    return 0;
  v1 = (_QWORD *)*v1;
LABEL_6:
  v4 = (char *)v1 + v3;
  v5 = v1;
  v6 = v4;
  do
  {
    if (*v5 == 46)
    {
      v7 = 1u;
      while (v7 != 4)
      {
        if (&v5[v7] == v4)
          goto LABEL_16;
        v8 = v5[v7];
        v9 = aMil[v7++];
        if (v8 != v9)
          goto LABEL_8;
      }
      v6 = v5;
    }
LABEL_8:
    ++v5;
  }
  while (v5 != v4);
LABEL_16:
  v10 = v6 - (_BYTE *)v1;
  if (v6 == v4)
    v10 = -1;
  if ((v2 & 0x80) != 0)
    v2 = *((_QWORD *)this + 75);
  if (v10 == v2 - 4)
    return 1;
  Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(&v16, (uint64_t)this);
  v12 = v17;
  v11 = v16 != 0;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

uint64_t Espresso::cpu_context_transfer_algo_t::has_any_fallback(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  Espresso *v19;
  const char *v20;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v28;
  _QWORD *v29;
  const void *v31[3];
  std::__shared_weak_count *v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 56);
  if ((int)(-1227133513 * (((*a3)[1] - **a3) >> 5)) >= 1)
  {
    v7 = 0;
    v8 = -1227133513 * (((*a3)[1] - **a3) >> 5);
    do
    {
      v9 = *v3;
      v10 = *v3 + 224 * v7;
      v11 = *(unsigned __int8 *)(v10 + 105);
      v12 = *a3;
      v13 = (std::__shared_weak_count *)a3[1];
      v31[2] = *a3;
      v32 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = *(std::__shared_weak_count **)(a2 + 8);
      v31[0] = *(const void **)a2;
      v31[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (Espresso *)Espresso::also_check_not_blacklisted(v7, v11 != 0, *v12, v31);
      v21 = (char)v19;
      if (v16)
      {
        v22 = (unint64_t *)&v16->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v24 = v32;
      if (!v32)
        goto LABEL_18;
      v25 = (unint64_t *)&v32->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if ((v21 & 1) == 0)
        {
LABEL_19:
          *(_BYTE *)(v4 + 120) = 1;
          Espresso::espresso_os_log_subsystem(v19, v20);
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(v10 + 23) < 0)
              v10 = *(_QWORD *)v10;
            v28 = v9 + 224 * v7;
            v29 = (_QWORD *)(v28 + 48);
            if (*(char *)(v28 + 71) < 0)
              v29 = (_QWORD *)*v29;
            *(_DWORD *)buf = 67109634;
            v34 = v7;
            v35 = 2080;
            v36 = v10;
            v37 = 2080;
            v38 = v29;
            _os_log_debug_impl(&dword_190DAF000, v27, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Needs fallback: Layer %d: %s (%s)\n", buf, 0x1Cu);
          }

        }
      }
      else
      {
LABEL_18:
        if ((v21 & 1) == 0)
          goto LABEL_19;
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return *(unsigned __int8 *)(v4 + 120);
}

void sub_190E4815C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void try_dispatch(uint64_t a1, _QWORD *a2, uint64_t *a3, Espresso ***a4, uint64_t a5, unsigned int *a6, int *a7, int *a8)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  int v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  int *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t *v92[2];
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t *v95[2];
  uint64_t *v96[3];
  std::__shared_weak_count *v97;
  void *__p[2];
  char v99;
  void *v100[2];
  char v101;
  std::string v102;
  _QWORD v103[2];
  uint64_t v104[2];
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  uint64_t *v109;
  uint64_t *v110;
  int *v111;
  std::__shared_weak_count *v112;
  char v113;

  v113 = 0;
  v111 = 0;
  v112 = 0;
  v16 = (uint64_t *)operator new(0x70uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = (uint64_t)&off_1E2DB7030;
  *(_OWORD *)(v16 + 5) = 0u;
  *(_OWORD *)(v16 + 3) = 0u;
  *(_OWORD *)(v16 + 7) = 0u;
  v16[6] = (uint64_t)(v16 + 7);
  v16[10] = 0;
  v16[9] = (uint64_t)(v16 + 10);
  v16[12] = 0;
  v16[13] = 0;
  v16[11] = 0;
  v109 = v16 + 3;
  v110 = v16;
  v17 = *a3;
  v18 = a3[1];
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 16);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = (std::__shared_weak_count *)v16[13];
    v16[12] = v17;
    v16[13] = v18;
    if (v21)
      std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    v16[12] = v17;
    v16[13] = 0;
  }
  v22 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDC08;
  *(_OWORD *)&v22[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v22[5].__shared_weak_owners_ = 0u;
  v22[5].std::__shared_count = 0u;
  *(_OWORD *)&v22[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v22[2].__shared_owners_ = 0u;
  v22[3].std::__shared_count = 0u;
  v22[1].std::__shared_count = 0u;
  *(_OWORD *)&v22[4].__shared_owners_ = 0u;
  v22[4].__vftable = (std::__shared_weak_count_vtbl *)&v22[4].__shared_owners_;
  v22[5].__shared_weak_owners_ = 0;
  v22[5].__shared_owners_ = 0;
  v22[5].__vftable = (std::__shared_weak_count_vtbl *)&v22[5].__shared_owners_;
  v22[6].__shared_weak_owners_ = 0;
  v22[7].__vftable = 0;
  v22[6].__shared_owners_ = (uint64_t)&v22[6].__shared_weak_owners_;
  v107 = v22 + 1;
  v108 = v22;
  *(_QWORD *)(a1 + 45) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 53) = 1;
  if (!*(_BYTE *)(*a2 + 56))
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    goto LABEL_83;
  }
  v23 = (std::__shared_weak_count *)a2[1];
  v105 = *a2;
  v106 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v26 = (std::__shared_weak_count *)a3[1];
  v104[0] = *a3;
  v104[1] = (uint64_t)v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  Espresso::get_net_info_ir(&v105, v104, a4, a5, a6, a7, a8, (uint64_t *)&v111, (uint64_t *)&v109, (uint64_t *)&v107);
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v31 = v106;
  if (v106)
  {
    v32 = (unint64_t *)&v106->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v35 = (std::__shared_weak_count *)v110;
  v34 = v111;
  v103[0] = v109;
  v103[1] = v110;
  if (v110)
  {
    v36 = (unint64_t *)(v110 + 1);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_BYTE *)(a1 + 53) = Espresso::cpu_context_transfer_algo_t::check_kernels_availability_on_fallback_context(v34, a4, (uint64_t)v103);
  if (v35)
  {
    v38 = (unint64_t *)&v35->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  v42 = *a3;
  std::string::basic_string[abi:ne180100]<0>(v100, "engine_availability_reordering");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v42 + 472, (uint64_t)v100, (uint64_t)__p, &v102);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
  {
    v46 = v102.__r_.__value_.__l.__size_ == 1 && *v102.__r_.__value_.__l.__data_ == 49;
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  else
  {
    v46 = SHIBYTE(v102.__r_.__value_.__r.__words[2]) == 1 && v102.__r_.__value_.__s.__data_[0] == 49;
  }
  if (v99 < 0)
    operator delete(__p[0]);
  if (v101 < 0)
  {
    operator delete(v100[0]);
    if (v46)
      goto LABEL_48;
  }
  else if (v46)
  {
    goto LABEL_48;
  }
  objc_msgSend(v41, "objectForKeyedSubscript:", CFSTR("espresso.engine_availability_reordering"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v50, "BOOLValue");

  if (!v51)
  {
    v87 = (std::__shared_weak_count *)v110;
    v86 = (uint64_t)v111;
    v95[0] = v109;
    v95[1] = v110;
    if (v110)
    {
      v88 = (unint64_t *)(v110 + 1);
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    Espresso::cpu_context_transfer_algo_t::reorder_load_constants(v86, v95, &v113);
    if (v87)
    {
      v90 = (unint64_t *)&v87->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    goto LABEL_65;
  }
LABEL_48:
  v52 = (uint64_t)v111;
  v53 = (std::__shared_weak_count *)a2[1];
  v96[2] = *(uint64_t **)a2;
  v97 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (std::__shared_weak_count *)v110;
  v96[0] = v109;
  v96[1] = v110;
  if (v110)
  {
    v57 = (unint64_t *)(v110 + 1);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(v52, v43, v44, v45, v96);
  if (v56)
  {
    v60 = (unint64_t *)&v56->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v62 = v97;
  if (v97)
  {
    v63 = (unint64_t *)&v97->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v113 = 1;
LABEL_65:
  if (*(_BYTE *)(a1 + 53))
  {
    v65 = v111;
    v66 = (std::__shared_weak_count *)a2[1];
    v93 = *a2;
    v94 = v66;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v69 = (std::__shared_weak_count *)v110;
    v92[0] = v109;
    v92[1] = v110;
    if (v110)
    {
      v70 = (unint64_t *)(v110 + 1);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    *(float *)(a1 + 48) = Espresso::cpu_context_transfer_algo_t::assign_to_fallback_context_v2(v65, &v93, v59, v92, (uint64_t)a4);
    if (v69)
    {
      v72 = (unint64_t *)&v69->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v74 = v94;
    if (v94)
    {
      v75 = (unint64_t *)&v94->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }

  v49 = (uint64_t)v111;
  v48 = (uint64_t)v112;
  v47 = v113;
LABEL_83:
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1, v49, v48);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 16), (uint64_t)v109, (uint64_t)v110);
  *(_BYTE *)(a1 + 52) = v47;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 32), (uint64_t)v107, (uint64_t)v108);
  v77 = v108;
  if (v108)
  {
    v78 = (unint64_t *)&v108->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)v110;
  if (v110)
  {
    v81 = (unint64_t *)(v110 + 1);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v112;
  if (v112)
  {
    v84 = (unint64_t *)&v112->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_190E48820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  Espresso::quantized_weights_helper::linear_quantization_data *v32;
  void *v33;
  uint64_t v34;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data(v32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 104);
  _Unwind_Resume(a1);
}

void sub_190E488CC()
{
  void *v0;

  JUMPOUT(0x190E488A4);
}

void sub_190E488D8()
{
  JUMPOUT(0x190E488A4);
}

void sub_190E488E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  JUMPOUT(0x190E488A4);
}

void sub_190E488F0()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 152);
  JUMPOUT(0x190E488A4);
}

void sub_190E48908()
{
  JUMPOUT(0x190E488B4);
}

void sub_190E48910()
{
  JUMPOUT(0x190E488BCLL);
}

uint64_t Espresso::net::needs_interpreter(Espresso::net *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  char *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  unint64_t v30;
  _OWORD v31[2];
  int v32;
  unint64_t *v33;

  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  v30 = 0;
  v1 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != v1)
  {
    v3 = 0;
    v28 = (char *)this + 56;
    v29 = (char *)this + 96;
    do
    {
      v4 = v1 + 16 * v3;
      v5 = *(_QWORD **)v4;
      v6 = (_QWORD *)(*(_QWORD *)v4 + 40);
      v7 = *(char *)(*(_QWORD *)v4 + 63);
      if (v7 < 0)
      {
        v9 = v5[5];
        v8 = v5[6];
      }
      else
      {
        v8 = *(unsigned __int8 *)(*(_QWORD *)v4 + 63);
        v9 = *(_QWORD *)v4 + 40;
      }
      if (v8 >= 3)
      {
        v10 = (char *)(v9 + v8);
        v11 = (void *)v9;
        do
        {
          v12 = (char *)memchr(v11, 99, v8 - 2);
          if (!v12)
            break;
          if (*(_WORD *)v12 == 26211 && v12[2] == 95)
          {
            if (v12 != v10 && &v12[-v9] != (char *)-1)
              goto LABEL_48;
            break;
          }
          v11 = v12 + 1;
          v8 = v10 - (_BYTE *)v11;
        }
        while (v10 - (_BYTE *)v11 >= 3);
      }
      if (v7 < 0)
      {
        if (v5[6] == 11)
        {
          v6 = (_QWORD *)*v6;
LABEL_22:
          if (*v6 == 0x747269765F696870 && *(_QWORD *)((char *)v6 + 3) == 0x6C6175747269765FLL)
            goto LABEL_28;
        }
      }
      else if (v7 == 11)
      {
        goto LABEL_22;
      }
      v15 = v5[8];
      v33 = &v30;
      v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v28, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 264))(v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[4] - v16[3]) >> 3)) & 1) != 0)
      {
LABEL_48:
        v26 = 1;
        goto LABEL_49;
      }
      v5 = *(_QWORD **)v4;
      LOBYTE(v7) = *(_BYTE *)(*(_QWORD *)v4 + 63);
LABEL_28:
      if ((v7 & 0x80) != 0)
      {
        v17 = (_QWORD *)v5[5];
        v18 = v5[6];
      }
      else
      {
        v17 = v5 + 5;
        v18 = v7;
      }
      if (v18 >= 7)
      {
        v19 = (char *)v17 + v18;
        v20 = v17;
        do
        {
          v21 = (char *)memchr(v20, 95, v18 - 6);
          if (!v21)
            break;
          if (*(_DWORD *)v21 == 1869375327 && *(_DWORD *)(v21 + 3) == 1818321519)
          {
            if (v21 != v19 && v21 - (char *)v17 != -1)
              goto LABEL_48;
            break;
          }
          v20 = v21 + 1;
          v18 = v19 - (_BYTE *)v20;
        }
        while (v19 - (_BYTE *)v20 >= 7);
      }
      v33 = &v30;
      v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v29, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
      v25 = v23[3];
      v24 = v23[4];
      while (v25 != v24)
      {
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v31, v25))
        {
          goto LABEL_48;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v31, v25, v25);
        v25 += 24;
      }
      v3 = v30 + 1;
      v30 = v3;
      v1 = *((_QWORD *)this + 4);
    }
    while (v3 < (*((_QWORD *)this + 5) - v1) >> 4);
  }
  v26 = 0;
LABEL_49:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v31);
  return v26;
}

void sub_190E48BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::has_dynamic_top_shape(Espresso::base_kernel *this)
{
  return 0;
}

BOOL Espresso::generic_reshape_kernel::has_dynamic_top_shape(Espresso::generic_reshape_kernel *this, unint64_t a2)
{
  return a2 >= 2 && *((_BYTE *)this + 312) != 0;
}

void Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_0::operator()(Espresso *a1, const char *a2)
{
  _QWORD *v2;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD ***)a1;
  if (v2 && !*(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32))
  {
    Espresso::espresso_os_log_subsystem(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_190DAF000, v4, OS_LOG_TYPE_DEBUG, "Restoring network precompilation info", (uint8_t *)__p, 2u);
    }

    v5 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v17, (uint64_t)v5, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v6 = v17;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 280))(v17, **(_QWORD **)a1);
    v7 = **((_QWORD **)a1 + 1);
    v8 = (std::__shared_weak_count *)v18;
    v16[0] = v6;
    v16[1] = v18;
    if (v18)
    {
      v9 = (unint64_t *)(v18 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    Espresso::net::restore_precompilation_info(v7, v16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v13 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v14 = (unint64_t *)(v18 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_190E48DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, __int128 buf, int a14, __int16 a15, char a16, char a17)
{
  Espresso *v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a2 == 1)
  {
    v19 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v19, v20);
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v19 + 16))(v19);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_error_impl(&dword_190DAF000, v21, OS_LOG_TYPE_ERROR, "Error while restoring network precompilation info %s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x190E48C58);
  }
  _Unwind_Resume(a1);
}

double newpPlatformHeuristics::ane_gpu_net_compute_threshold(newpPlatformHeuristics *this)
{
  return 0.03;
}

BOOL check_network_has_batch_matmul_and_softmax_nd(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  int v15;

  if (a2 != a1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = (a2 - a1) / 224;
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = (a2 - a1) / 224;
    v7 = a1 + 48;
    v8 = 1;
    while (1)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        v10 = *(_QWORD *)(v7 + 8);
        if (v10 == 10)
        {
          v9 = *(uint64_t **)v7;
LABEL_24:
          v14 = *v9;
          v15 = *((unsigned __int16 *)v9 + 4);
          v11 = v14 == 0x5F78616D74666F73 && v15 == 25710;
          goto LABEL_30;
        }
        if (v10 == 12)
        {
          v11 = 0;
          v12 = **(_QWORD **)v7 == 0x616D5F6863746162 && *(_DWORD *)(*(_QWORD *)v7 + 8) == 1819635060;
LABEL_19:
          v13 = v12;
          v3 |= v13;
          goto LABEL_30;
        }
      }
      else
      {
        if (*(_BYTE *)(v7 + 23) == 12)
        {
          v11 = 0;
          v12 = *(_QWORD *)v7 == 0x616D5F6863746162 && *(_DWORD *)(v7 + 8) == 1819635060;
          goto LABEL_19;
        }
        v9 = (uint64_t *)v7;
        if (*(_BYTE *)(v7 + 23) == 10)
          goto LABEL_24;
      }
      v11 = 0;
LABEL_30:
      v4 |= v11;
      if ((v3 & 1) == 0 || (v4 & 1) == 0)
      {
        v8 = ++v2 < v5;
        v7 += 224;
        if (v6 != v2)
          continue;
      }
      return v8;
    }
  }
  return 0;
}

BOOL check_network_has_no_convolutions(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a1)
  {
    v2 = 0;
    v3 = 0;
    v4 = (a2 - a1) / 224;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = (a2 - a1) / 224;
    for (i = a1 + 48; ; i += 224)
    {
      v7 = *(char *)(i + 23);
      if (v7 < 0)
      {
        if (*(_QWORD *)(i + 8) != 11)
          goto LABEL_15;
        v8 = *(uint64_t **)i;
      }
      else
      {
        v8 = (uint64_t *)i;
        if (v7 != 11)
          goto LABEL_15;
      }
      v9 = *v8;
      v10 = *(uint64_t *)((char *)v8 + 3);
      if (v9 == 0x74756C6F766E6F63 && v10 == 0x6E6F6974756C6F76)
        return v2;
LABEL_15:
      v2 = ++v3 >= v4;
      if (v5 == v3)
        return v2;
    }
  }
  return 1;
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD960;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E49138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_bind_buffer_object(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC84F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E4920C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void E5RT::E5BlockImpl::~E5BlockImpl(void **this)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(this + 31);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(this + 18);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(this + 5);
  v2 = (char *)this[2];
  if (v2)
  {
    v3 = (char *)this[3];
    v4 = this[2];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = this[2];
    }
    this[3] = v2;
    operator delete(v4);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

{
  E5RT::E5BlockImpl::~E5BlockImpl(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<CastOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A9E0;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5AA70;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

{
  E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

void E5RT::E5FunctionImpl::LoadOperationInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  int64_t v73;
  char *v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int *v93;
  uint64_t v94;
  __int128 v95;
  _QWORD *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  BnnsCpuInferenceOpT *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int *v104;
  std::string::size_type v105;
  __int128 v106;
  _QWORD *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  JitCallOpT *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int *v117;
  BnnsCpuInferenceOpT *v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  std::string::size_type v123;
  char *v124;
  std::string *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int *v129;
  std::string::size_type v130;
  char v131;
  std::string *v132;
  BnnsCpuInferenceOpT *v133;
  int v134;
  BnnsCpuInferenceOpT *v135;
  uint64_t v136;
  _QWORD *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BnnsCpuInferenceOpT *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int *v145;
  BnnsCpuInferenceOpT *v146;
  BnnsCpuInferenceOpT *v147;
  unsigned __int16 *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  int *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int *v165;
  BnnsCpuInferenceOpT *v166;
  unsigned __int16 *v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  std::string::size_type v171;
  char *v172;
  std::string *p_p;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int *v177;
  BnnsCpuInferenceOpT *v178;
  BnnsCpuInferenceOpT *v179;
  unsigned __int16 *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int *v197;
  std::string::size_type v198;
  __int128 v199;
  _QWORD *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  BnnsCpuInferenceOpT *v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int *v209;
  BnnsCpuInferenceOpT *v210;
  BnnsCpuInferenceOpT *v211;
  unsigned __int16 *v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _DWORD *v223;
  int *v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int *v229;
  std::string::size_type v230;
  __int128 v231;
  _QWORD *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  BnnsCpuInferenceOpT *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int *v241;
  uint64_t v242;
  __int128 v243;
  _QWORD *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  BnnsCpuInferenceOpT *v248;
  _QWORD *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  _QWORD *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  BnnsCpuInferenceOpT *v257;
  void *v258;
  unint64_t v259;
  _QWORD *v260;
  unint64_t *v261;
  BnnsCpuInferenceOpT *v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  _QWORD *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __int128 v273;
  _QWORD *v274;
  unint64_t *v275;
  std::__shared_weak_count_vtbl *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  char *v280;
  char *v281;
  void *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  char *v293;
  char *v294;
  void *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  __int128 *v299;
  _OWORD *v300;
  uint64_t v301;
  __int128 v302;
  __int128 *v303;
  _OWORD *v304;
  uint64_t v305;
  __int128 v306;
  __int128 *v307;
  _OWORD *v308;
  uint64_t v309;
  __int128 v310;
  void *exception;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  __n128 v327;
  std::__shared_weak_count_vtbl *v328[3];
  char v329[8];
  BnnsCpuInferenceOpT *v330[3];
  std::string __p;
  uint64_t v332;
  std::__shared_weak_count *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char v337;
  void *v338;
  void *v339;
  char *v340;
  _QWORD v341[5];
  _OWORD v342[3];
  uint64_t v343;
  int v344;
  __int128 v345;
  __int128 v346;
  int v347;
  int v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  void *v351;
  char *v352;
  __n128 v353;
  _QWORD v354[2];
  std::__shared_weak_count *v355;
  void *v356;
  char *v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  uint64_t v361;
  int v362;
  __int128 v363;
  __int128 v364;
  int v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  int v370;
  __int128 v371;
  __int128 v372;
  int v373;
  uint64_t v374;

  v374 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(&v356, a3, 1, 5);
  if (v357 == v356)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v366, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(&v358, "Invalid compute program. No text section");
    E5RT::Status::Status(v342, 8, &v358);
    E5RT::E5RTError::E5RTError(exception, &v366, v342);
  }
  v13 = *(_QWORD *)v356;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v356 + 1);
  v354[1] = *(_QWORD *)v356;
  v355 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 2) == 0)
  {
    v312 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v366, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(&v358, "Invalid symbol type in function block.");
    E5RT::Status::Status(v342, 8, &v358);
    E5RT::E5RTError::E5RTError(v312, &v366, v342);
  }
  v16 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  v354[0] = 0;
  v19 = (unsigned int *)(v18 + v17);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
  {
    v20 = *v19;
    v21 = (_QWORD *)operator new();
    *v21 = 0;
    v21[1] = 0;
    KernelInfo::UnPackTo((int *)((char *)v19 + v20), (uint64_t)v21);
    *(_QWORD *)&v358 = 0;
    v22 = v354[0];
    v354[0] = v21;
    if (v22)
    {
      std::default_delete<KernelInfoT>::operator()[abi:ne180100]((uint64_t)v354, v22);
      v23 = v358;
      *(_QWORD *)&v358 = 0;
      if (v23)
        std::default_delete<KernelInfoT>::operator()[abi:ne180100]((uint64_t)&v358, v23);
    }
    goto LABEL_20;
  }
  *(_QWORD *)&v366 = &off_1E2DAD1A0;
  *((_QWORD *)&v366 + 1) = VerifySizePrefixedKernelInfoBuffer;
  *((_QWORD *)&v367 + 1) = &v366;
  *(_QWORD *)&v358 = &off_1E2DACD80;
  *((_QWORD *)&v358 + 1) = UnPackSizePrefixedKernelInfo;
  *((_QWORD *)&v359 + 1) = &v358;
  E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<KernelInfoT>(v19, (uint64_t)&v366, (uint64_t)&v358);
  v24 = *(_QWORD *)&v342[0];
  *(_QWORD *)&v342[0] = 0;
  v354[0] = v24;
  v25 = (__int128 *)*((_QWORD *)&v359 + 1);
  if (*((__int128 **)&v359 + 1) == &v358)
  {
    v26 = 4;
    v25 = &v358;
    goto LABEL_14;
  }
  if (*((_QWORD *)&v359 + 1))
  {
    v26 = 5;
LABEL_14:
    (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
  }
  v27 = (__int128 *)*((_QWORD *)&v367 + 1);
  if (*((__int128 **)&v367 + 1) == &v366)
  {
    v28 = 4;
    v27 = &v366;
  }
  else
  {
    if (!*((_QWORD *)&v367 + 1))
      goto LABEL_20;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_20:
  v29 = *(uint64_t **)(v354[0] + 8);
  if (!v29)
  {
    v313 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v366, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(&v358, "Arg frame is missing in operation.");
    E5RT::Status::Status(v342, 11, &v358);
    E5RT::E5RTError::E5RTError(v313, &v366, v342);
  }
  v30 = *v29;
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  v32 = *(__n128 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31) + 16 * v30);
  v353 = v32;
  v327 = v32;
  if (v32.n128_u64[1])
  {
    v33 = (unint64_t *)(v32.n128_u64[1] + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(&v351, a3, 2, 1);
  if (v352 - (_BYTE *)v351 != 16)
  {
    v314 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v366, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(&v358, "Found more than one const section.");
    E5RT::Status::Status(v342, 8, &v358);
    E5RT::E5RTError::E5RTError(v314, &v366, v342);
  }
  v35 = *(_QWORD *)v351;
  v36 = (std::__shared_weak_count *)*((_QWORD *)v351 + 1);
  v349 = *(_QWORD *)v351;
  v350 = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
  v40 = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v327.n128_u64[0] + 48))(v327.n128_u64[0], v327);
  v348 = 0;
  v41 = v354[0];
  v348 = *(_DWORD *)v354[0];
  *a6 = 0;
  a6[1] = 0;
  v369 = 0;
  v367 = 0u;
  v368 = 0u;
  v366 = 0u;
  v370 = 1065353216;
  v371 = 0u;
  v372 = 0u;
  v373 = 1065353216;
  v361 = 0;
  v359 = 0u;
  v360 = 0u;
  v358 = 0u;
  v362 = 1065353216;
  v363 = 0u;
  v364 = 0u;
  v365 = 1065353216;
  v343 = 0;
  memset(v342, 0, sizeof(v342));
  v344 = 1065353216;
  v345 = 0u;
  v346 = 0u;
  v347 = 1065353216;
  v341[0] = a1;
  v341[1] = v31;
  v341[2] = a5;
  v341[3] = a3;
  v341[4] = v16;
  v42 = *(_QWORD **)(v41 + 8);
  v43 = (uint64_t *)v42[1];
  v44 = (uint64_t *)v42[2];
  if (v43 == v44)
  {
    v45 = (uint64_t *)v42[11];
    v46 = (uint64_t *)v42[12];
    if (v45 != v46)
      goto LABEL_54;
    goto LABEL_50;
  }
  do
  {
    while (1)
    {
      sub_191008F90(&__p, (uint64_t)v341, *v43);
      v47 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[]((uint64_t)&v366, (uint64_t)&__p);
      v49 = v332;
      v48 = (uint64_t)v333;
      if (v333)
      {
        v50 = (unint64_t *)&v333->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = (std::__shared_weak_count *)v47[1];
      *v47 = v49;
      v47[1] = v48;
      if (!v52)
        goto LABEL_40;
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
        v55 = v333;
        if (!v333)
          goto LABEL_31;
      }
      else
      {
LABEL_40:
        v55 = v333;
        if (!v333)
          goto LABEL_31;
      }
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
LABEL_31:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (++v43 == v44)
        goto LABEL_49;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    ++v43;
  }
  while (v43 != v44);
LABEL_49:
  v41 = v354[0];
  v42 = *(_QWORD **)(v354[0] + 8);
  v45 = (uint64_t *)v42[11];
  v46 = (uint64_t *)v42[12];
  if (v45 == v46)
  {
LABEL_50:
    v58 = (uint64_t *)v42[4];
    v59 = (uint64_t *)v42[5];
    if (v58 != v59)
      goto LABEL_77;
LABEL_71:
    v72 = (_BYTE *)v42[7];
    v71 = (_BYTE *)v42[8];
    v338 = 0;
    v339 = 0;
    v340 = 0;
    v73 = v71 - v72;
    if (v71 == v72)
      goto LABEL_94;
    goto LABEL_72;
  }
LABEL_54:
  while (2)
  {
    while (2)
    {
      sub_191008F90(&__p, (uint64_t)v341, *v45);
      v60 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[]((uint64_t)v342, (uint64_t)&__p);
      v62 = v332;
      v61 = (uint64_t)v333;
      if (v333)
      {
        v63 = (unint64_t *)&v333->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = (std::__shared_weak_count *)v60[1];
      *v60 = v62;
      v60[1] = v61;
      if (!v65)
        goto LABEL_61;
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
        v68 = v333;
        if (v333)
        {
LABEL_62:
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
      }
      else
      {
LABEL_61:
        v68 = v333;
        if (v333)
          goto LABEL_62;
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (++v45 == v46)
          goto LABEL_70;
        continue;
      }
      break;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (++v45 != v46)
      continue;
    break;
  }
LABEL_70:
  v41 = v354[0];
  v42 = *(_QWORD **)(v354[0] + 8);
  v58 = (uint64_t *)v42[4];
  v59 = (uint64_t *)v42[5];
  if (v58 == v59)
    goto LABEL_71;
LABEL_77:
  while (2)
  {
    while (2)
    {
      sub_191008F90(&__p, (uint64_t)v341, *v58);
      v76 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[]((uint64_t)&v358, (uint64_t)&__p);
      v78 = v332;
      v77 = (uint64_t)v333;
      if (v333)
      {
        v79 = (unint64_t *)&v333->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = (std::__shared_weak_count *)v76[1];
      *v76 = v78;
      v76[1] = v77;
      if (!v81)
        goto LABEL_84;
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
        v84 = v333;
        if (v333)
        {
LABEL_85:
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
      }
      else
      {
LABEL_84:
        v84 = v333;
        if (v333)
          goto LABEL_85;
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (++v58 == v59)
          goto LABEL_93;
        continue;
      }
      break;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (++v58 != v59)
      continue;
    break;
  }
LABEL_93:
  v41 = v354[0];
  v87 = *(_QWORD *)(v354[0] + 8);
  v72 = *(_BYTE **)(v87 + 56);
  v88 = *(_BYTE **)(v87 + 64);
  v338 = 0;
  v339 = 0;
  v340 = 0;
  v73 = v88 - v72;
  if (v88 == v72)
  {
LABEL_94:
    LOBYTE(v336) = 0;
    v337 = 0;
    v75 = v348 - 1;
    goto LABEL_95;
  }
LABEL_72:
  if (v73 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v338 = operator new(v73);
  v339 = v338;
  v74 = (char *)v338 + 8 * (v73 >> 3);
  v340 = v74;
  memcpy(v338, v72, v73);
  v339 = v74;
  v336 = *(_QWORD *)(*(_QWORD *)(v41 + 8) + 80);
  v337 = 1;
  v75 = v348 - 1;
  if ((v348 - 1) > 0xD)
  {
LABEL_430:
    v326 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(v330, "Invalid op code.");
    E5RT::Status::Status(v328, 8, v330);
    E5RT::E5RTError::E5RTError(v326, &__p, v328);
  }
LABEL_95:
  v89 = (unsigned int *)(v39 + v40);
  switch(v75)
  {
    case 0:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v90 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v90 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v90 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v90 < 8
          || (_DWORD)v90 != *v89
          || (v92 = v89[1], ++v89, v91 = v92, v92 < 1)
          || v90 + 3 < (unint64_t)(v91 + 4)
          || (AneInferenceOp::Verify((int *)((char *)v89 + v91), (uint64_t)&__p) & 1) == 0)
        {
          v320 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v320, v330, v329);
        }
      }
      v93 = (int *)((char *)v89 + *v89);
      v94 = operator new();
      *(_OWORD *)(v94 + 48) = 0u;
      *(_OWORD *)(v94 + 64) = 0u;
      *(_OWORD *)(v94 + 16) = 0u;
      *(_OWORD *)(v94 + 32) = 0u;
      *(_OWORD *)v94 = 0u;
      AneInferenceOp::UnPackTo(v93, v94);
      v330[0] = (BnnsCpuInferenceOpT *)v94;
      sub_191009308(&__p, a4, v94);
      if (*(char *)(v94 + 23) < 0)
        operator delete(*(void **)v330[0]);
      v95 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v94 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v94 = v95;
      v96 = operator new(0x1B8uLL);
      v96[1] = 0;
      v96[2] = 0;
      *v96 = &off_1E2DB5D98;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<AneInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<AneInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<AneInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v96 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v97 = (std::__shared_weak_count *)a6[1];
      *a6 = v96 + 3;
      a6[1] = v96;
      if (v97)
      {
        v98 = (unint64_t *)&v97->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = v330[0];
      v330[0] = 0;
      if (v100)
        std::default_delete<AneInferenceOpT>::operator()[abi:ne180100]((uint64_t)v330, (uint64_t)v100);
      goto LABEL_349;
    case 1:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v226 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v226 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v226 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v226 < 8
          || (_DWORD)v226 != *v89
          || (v228 = v89[1], ++v89, v227 = v228, v228 < 1)
          || v226 + 3 < (unint64_t)(v227 + 4)
          || (CpuInferenceOp::Verify((int *)((char *)v89 + v227), (uint64_t *)&__p) & 1) == 0)
        {
          v324 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v324, v330, v329);
        }
      }
      v229 = (int *)((char *)v89 + *v89);
      v230 = operator new();
      *(_OWORD *)(v230 + 16) = 0u;
      *(_OWORD *)(v230 + 32) = 0u;
      *(_OWORD *)v230 = 0u;
      __p.__r_.__value_.__r.__words[0] = v230;
      CpuInferenceOp::UnPackTo(v229, v230);
      v330[0] = (BnnsCpuInferenceOpT *)v230;
      sub_191009308(&__p, a4, v230);
      if (*(char *)(v230 + 23) < 0)
        operator delete(*(void **)v330[0]);
      v231 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v230 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v230 = v231;
      v232 = operator new(0x1B8uLL);
      v232[1] = 0;
      v232[2] = 0;
      *v232 = &off_1E2DB5DD0;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<CpuInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<CpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<CpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v232 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v233 = (std::__shared_weak_count *)a6[1];
      *a6 = v232 + 3;
      a6[1] = v232;
      if (v233)
      {
        v234 = (unint64_t *)&v233->__shared_owners_;
        do
          v235 = __ldaxr(v234);
        while (__stlxr(v235 - 1, v234));
        if (!v235)
        {
          ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
          std::__shared_weak_count::__release_weak(v233);
        }
      }
      v236 = v330[0];
      v330[0] = 0;
      if (!v236)
        goto LABEL_349;
      if (*((char *)v236 + 47) < 0)
        operator delete(*((void **)v236 + 3));
      if (*((char *)v236 + 23) < 0)
        operator delete(*(void **)v236);
      v112 = v236;
      v237 = 879215384;
      goto LABEL_346;
    case 2:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v174 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v174 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v174 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v174 < 8
          || (_DWORD)v174 != *v89
          || (v176 = v89[1], ++v89, v175 = v176, v176 < 1)
          || v174 + 3 < (unint64_t)(v175 + 4)
          || (CastOp::Verify((int *)((char *)v89 + v175), (uint64_t *)&__p) & 1) == 0)
        {
          v321 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v321, v330, v329);
        }
      }
      v177 = (int *)((char *)v89 + *v89);
      v178 = (BnnsCpuInferenceOpT *)operator new();
      v179 = v178;
      *(_OWORD *)v178 = 0u;
      *((_OWORD *)v178 + 1) = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      v180 = (unsigned __int16 *)((char *)v177 - *v177);
      v181 = *v180;
      if (v181 <= 4)
      {
        *(_DWORD *)v178 = 0;
        goto LABEL_296;
      }
      v182 = v180[2];
      if (v180[2])
        LODWORD(v182) = *(int *)((char *)v177 + v182);
      *(_DWORD *)v178 = v182;
      if (v181 < 7)
        goto LABEL_296;
      v183 = v180[3];
      if (!v180[3])
        goto LABEL_296;
      v184 = *(unsigned int *)((char *)v177 + v183);
      v185 = *(unsigned int *)((char *)v177 + v183 + v184);
      if (!(_DWORD)v185)
        goto LABEL_296;
      std::vector<unsigned long long>::__append((uint64_t)v178 + 8, v185);
      v186 = *(unsigned int *)((char *)v177 + v183 + v184);
      if (!(_DWORD)v186)
        goto LABEL_296;
      v187 = *((_QWORD *)v179 + 1);
      if (v186 < 0xA || (unint64_t)(v187 - ((_QWORD)v177 + v183) - v184 - 4) < 0x20)
      {
        v188 = 0;
LABEL_209:
        v189 = v186 - v188;
        v190 = 2 * v188;
        v191 = (_QWORD *)(v187 + v190 * 4);
        v192 = (uint64_t *)((char *)&v177[v190 + 1] + v184 + v183);
        do
        {
          v193 = *v192++;
          *v191++ = v193;
          --v189;
        }
        while (v189);
        goto LABEL_296;
      }
      v188 = v186 & 0xFFFFFFFC;
      v303 = (__int128 *)((char *)v177 + v184 + v183 + 20);
      v304 = (_OWORD *)(v187 + 16);
      v305 = v188;
      do
      {
        v306 = *v303;
        *(v304 - 1) = *(v303 - 1);
        *v304 = v306;
        v303 += 2;
        v304 += 2;
        v305 -= 4;
      }
      while (v305);
      if (v188 != v186)
        goto LABEL_209;
LABEL_296:
      v330[0] = v179;
      v253 = operator new(0x1B8uLL);
      v253[1] = 0;
      v253[2] = 0;
      *v253 = &off_1E2DB5F20;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<CastOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<CastOpT>,std::string const&,OpCode &,std::unique_ptr<CastOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v253 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v254 = (std::__shared_weak_count *)a6[1];
      *a6 = v253 + 3;
      a6[1] = v253;
      if (v254)
      {
        v255 = (unint64_t *)&v254->__shared_owners_;
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      v257 = v330[0];
      v330[0] = 0;
      if (!v257)
        goto LABEL_349;
      v258 = (void *)*((_QWORD *)v257 + 1);
      if (v258)
      {
        *((_QWORD *)v257 + 2) = v258;
        operator delete(v258);
      }
      v112 = v257;
      v259 = 0xC402EF3923FLL;
LABEL_347:
      v113 = v259 & 0xFFFFFFFFFFFFLL | 0x101000000000000;
      goto LABEL_348;
    case 3:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v206 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v206 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v206 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v206 < 8
          || (_DWORD)v206 != *v89
          || (v208 = v89[1], ++v89, v207 = v208, v208 < 1)
          || v206 + 3 < (unint64_t)(v207 + 4)
          || (QuantOp::Verify((int *)((char *)v89 + v207), (uint64_t *)&__p) & 1) == 0)
        {
          v323 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v323, v330, v329);
        }
      }
      v209 = (int *)((char *)v89 + *v89);
      v210 = (BnnsCpuInferenceOpT *)operator new();
      v211 = v210;
      *(_OWORD *)v210 = 0u;
      *((_OWORD *)v210 + 1) = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v210;
      v212 = (unsigned __int16 *)((char *)v209 - *v209);
      v213 = *v212;
      if (v213 <= 4)
      {
        *(_DWORD *)v210 = 0;
        goto LABEL_306;
      }
      v214 = v212[2];
      if (v212[2])
        LODWORD(v214) = *(int *)((char *)v209 + v214);
      *(_DWORD *)v210 = v214;
      if (v213 < 7)
        goto LABEL_306;
      v215 = v212[3];
      if (!v212[3])
        goto LABEL_306;
      v216 = *(unsigned int *)((char *)v209 + v215);
      v217 = *(unsigned int *)((char *)v209 + v215 + v216);
      if (!(_DWORD)v217)
        goto LABEL_306;
      std::vector<float>::__append((uint64_t)v210 + 8, v217);
      v218 = *(unsigned int *)((char *)v209 + v215 + v216);
      if (!(_DWORD)v218)
        goto LABEL_306;
      v219 = *((_QWORD *)v211 + 1);
      if (v218 < 0xC || (unint64_t)(v219 - ((_QWORD)v209 + v215) - v216 - 4) < 0x20)
      {
        v220 = 0;
LABEL_251:
        v221 = v218 - v220;
        v222 = v220;
        v223 = (_DWORD *)(v219 + v222 * 4);
        v224 = (int *)((char *)&v209[v222 + 1] + v216 + v215);
        do
        {
          v225 = *v224++;
          *v223++ = v225;
          --v221;
        }
        while (v221);
        goto LABEL_306;
      }
      v220 = v218 & 0xFFFFFFF8;
      v307 = (__int128 *)((char *)v209 + v216 + v215 + 20);
      v308 = (_OWORD *)(v219 + 16);
      v309 = v220;
      do
      {
        v310 = *v307;
        *(v308 - 1) = *(v307 - 1);
        *v308 = v310;
        v307 += 2;
        v308 += 2;
        v309 -= 8;
      }
      while (v309);
      if (v220 != v218)
        goto LABEL_251;
LABEL_306:
      v330[0] = v211;
      v260 = operator new(0x1B8uLL);
      v260[1] = 0;
      v260[2] = 0;
      *v260 = &off_1E2DB5F58;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<QuantOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<QuantOpT>,std::string const&,OpCode &,std::unique_ptr<QuantOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v260 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v250 = (std::__shared_weak_count *)a6[1];
      *a6 = v260 + 3;
      a6[1] = v260;
      if (!v250)
        goto LABEL_311;
      v261 = (unint64_t *)&v250->__shared_owners_;
      do
        v252 = __ldaxr(v261);
      while (__stlxr(v252 - 1, v261));
      goto LABEL_309;
    case 4:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v142 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v142 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v142 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v142 < 8
          || (_DWORD)v142 != *v89
          || (v144 = v89[1], ++v89, v143 = v144, v144 < 1)
          || v142 + 3 < (unint64_t)(v143 + 4)
          || (QuantOp::Verify((int *)((char *)v89 + v143), (uint64_t *)&__p) & 1) == 0)
        {
          v318 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v318, v330, v329);
        }
      }
      v145 = (int *)((char *)v89 + *v89);
      v146 = (BnnsCpuInferenceOpT *)operator new();
      v147 = v146;
      *(_OWORD *)v146 = 0u;
      *((_OWORD *)v146 + 1) = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
      v148 = (unsigned __int16 *)((char *)v145 - *v145);
      v149 = *v148;
      if (v149 <= 4)
      {
        *(_DWORD *)v146 = 0;
        goto LABEL_291;
      }
      v150 = v148[2];
      if (v148[2])
        LODWORD(v150) = *(int *)((char *)v145 + v150);
      *(_DWORD *)v146 = v150;
      if (v149 < 7)
        goto LABEL_291;
      v151 = v148[3];
      if (!v148[3])
        goto LABEL_291;
      v152 = *(unsigned int *)((char *)v145 + v151);
      v153 = *(unsigned int *)((char *)v145 + v151 + v152);
      if (!(_DWORD)v153)
        goto LABEL_291;
      std::vector<float>::__append((uint64_t)v146 + 8, v153);
      v154 = *(unsigned int *)((char *)v145 + v151 + v152);
      if (!(_DWORD)v154)
        goto LABEL_291;
      v155 = *((_QWORD *)v147 + 1);
      if (v154 < 0xC || (unint64_t)(v155 - ((_QWORD)v145 + v151) - v152 - 4) < 0x20)
      {
        v156 = 0;
LABEL_177:
        v157 = v154 - v156;
        v158 = v156;
        v159 = (_DWORD *)(v155 + v158 * 4);
        v160 = (int *)((char *)&v145[v158 + 1] + v152 + v151);
        do
        {
          v161 = *v160++;
          *v159++ = v161;
          --v157;
        }
        while (v157);
        goto LABEL_291;
      }
      v156 = v154 & 0xFFFFFFF8;
      v299 = (__int128 *)((char *)v145 + v152 + v151 + 20);
      v300 = (_OWORD *)(v155 + 16);
      v301 = v156;
      do
      {
        v302 = *v299;
        *(v300 - 1) = *(v299 - 1);
        *v300 = v302;
        v299 += 2;
        v300 += 2;
        v301 -= 8;
      }
      while (v301);
      if (v156 != v154)
        goto LABEL_177;
LABEL_291:
      v330[0] = v147;
      v249 = operator new(0x1B8uLL);
      v249[1] = 0;
      v249[2] = 0;
      *v249 = &off_1E2DB5D28;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<DequantOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<DequantOpT>,std::string const&,OpCode &,std::unique_ptr<DequantOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v249 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v250 = (std::__shared_weak_count *)a6[1];
      *a6 = v249 + 3;
      a6[1] = v249;
      if (v250)
      {
        v251 = (unint64_t *)&v250->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
LABEL_309:
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
        }
      }
LABEL_311:
      v262 = v330[0];
      v330[0] = 0;
      if (v262)
      {
        v263 = (void *)*((_QWORD *)v262 + 1);
        if (v263)
        {
          *((_QWORD *)v262 + 2) = v263;
          operator delete(v263);
        }
        v112 = v262;
        v113 = 0x1080C406BDE4C18;
LABEL_348:
        MEMORY[0x19401CD90](v112, v113);
      }
LABEL_349:
      if (v338)
      {
        v339 = v338;
        operator delete(v338);
      }
      E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)v342);
      E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)&v358);
      E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)&v366);
      v277 = v350;
      if (v350)
      {
        v278 = (unint64_t *)&v350->__shared_owners_;
        do
          v279 = __ldaxr(v278);
        while (__stlxr(v279 - 1, v278));
        if (!v279)
        {
          ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
          std::__shared_weak_count::__release_weak(v277);
        }
      }
      v280 = (char *)v351;
      if (v351)
      {
        v281 = v352;
        v282 = v351;
        if (v352 != v351)
        {
          do
          {
            v283 = (std::__shared_weak_count *)*((_QWORD *)v281 - 1);
            if (v283)
            {
              v284 = (unint64_t *)&v283->__shared_owners_;
              do
                v285 = __ldaxr(v284);
              while (__stlxr(v285 - 1, v284));
              if (!v285)
              {
                ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                std::__shared_weak_count::__release_weak(v283);
              }
            }
            v281 -= 16;
          }
          while (v281 != v280);
          v282 = v351;
        }
        v352 = v280;
        operator delete(v282);
      }
      v286 = (std::__shared_weak_count *)v353.n128_u64[1];
      if (v353.n128_u64[1])
      {
        v287 = (unint64_t *)(v353.n128_u64[1] + 8);
        do
          v288 = __ldaxr(v287);
        while (__stlxr(v288 - 1, v287));
        if (!v288)
        {
          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
          std::__shared_weak_count::__release_weak(v286);
        }
      }
      v289 = v354[0];
      v354[0] = 0;
      if (v289)
        std::default_delete<KernelInfoT>::operator()[abi:ne180100]((uint64_t)v354, v289);
      v290 = v355;
      if (v355)
      {
        v291 = (unint64_t *)&v355->__shared_owners_;
        do
          v292 = __ldaxr(v291);
        while (__stlxr(v292 - 1, v291));
        if (!v292)
        {
          ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
          std::__shared_weak_count::__release_weak(v290);
        }
      }
      v293 = (char *)v356;
      if (v356)
      {
        v294 = v357;
        v295 = v356;
        if (v357 != v356)
        {
          do
          {
            v296 = (std::__shared_weak_count *)*((_QWORD *)v294 - 1);
            if (v296)
            {
              v297 = (unint64_t *)&v296->__shared_owners_;
              do
                v298 = __ldaxr(v297);
              while (__stlxr(v298 - 1, v297));
              if (!v298)
              {
                ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                std::__shared_weak_count::__release_weak(v296);
              }
            }
            v294 -= 16;
          }
          while (v294 != v293);
          v295 = v356;
        }
        v357 = v293;
        operator delete(v295);
      }
      return;
    case 6:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v162 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v162 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v162 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v162 < 8
          || (_DWORD)v162 != *v89
          || (v164 = v89[1], ++v89, v163 = v164, v164 < 1)
          || v162 + 3 < (unint64_t)(v163 + 4)
          || (E5MinimalCpuOp::Verify((int *)((char *)v89 + v163), (uint64_t *)&__p) & 1) == 0)
        {
          v319 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v319, v330, v329);
        }
      }
      v165 = (int *)((char *)v89 + *v89);
      v166 = (BnnsCpuInferenceOpT *)operator new();
      *(_QWORD *)v166 = 0;
      *((_QWORD *)v166 + 1) = 0;
      *((_QWORD *)v166 + 2) = 0;
      v330[0] = v166;
      v167 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v167 < 5u)
        goto LABEL_335;
      v168 = v167[2];
      if (!v168)
        goto LABEL_335;
      v169 = (unsigned int *)((char *)v165 + v168);
      v170 = *v169;
      v172 = (char *)v169 + v170 + 4;
      v171 = *(unsigned int *)((char *)v169 + v170);
      if (v171 >= 0x17)
      {
        v271 = (v171 & 0xFFFFFFF8) + 8;
        if ((v171 | 7) != 0x17)
          v271 = v171 | 7;
        v272 = v271 + 1;
        p_p = (std::string *)operator new(v271 + 1);
        __p.__r_.__value_.__l.__size_ = v171;
        __p.__r_.__value_.__r.__words[2] = v272 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = *(unsigned int *)((char *)v169 + v170);
        p_p = &__p;
        if (!(_DWORD)v171)
          goto LABEL_332;
      }
      memcpy(p_p, v172, v171);
LABEL_332:
      p_p->__r_.__value_.__s.__data_[v171] = 0;
      if (*((char *)v166 + 23) < 0)
        operator delete(*(void **)v166);
      *(std::string *)v166 = __p;
      v166 = v330[0];
LABEL_335:
      v328[0] = (std::__shared_weak_count_vtbl *)v166;
      sub_191009308(&__p, a4, (uint64_t)v166);
      if (*((char *)v166 + 23) < 0)
        operator delete(v328[0]->~__shared_weak_count);
      v273 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v166 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v166 = v273;
      v274 = operator new(0x1B8uLL);
      v274[1] = 0;
      v274[2] = 0;
      *v274 = &off_1E2DB5E78;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<MlcCpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<MlcCpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v274 + 3), v16, &v348, v328, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v268 = (std::__shared_weak_count *)a6[1];
      *a6 = v274 + 3;
      a6[1] = v274;
      if (!v268)
        goto LABEL_342;
      v275 = (unint64_t *)&v268->__shared_owners_;
      do
        v270 = __ldaxr(v275);
      while (__stlxr(v270 - 1, v275));
      goto LABEL_340;
    case 7:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v238 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v238 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v238 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v238 < 8
          || (_DWORD)v238 != *v89
          || (v240 = v89[1], ++v89, v239 = v240, v240 < 1)
          || v238 + 3 < (unint64_t)(v239 + 4)
          || (MpsGraphInferenceOp::Verify((int *)((char *)v89 + v239), (uint64_t)&__p) & 1) == 0)
        {
          v325 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v325, v330, v329);
        }
      }
      v241 = (int *)((char *)v89 + *v89);
      v242 = operator new();
      *(_QWORD *)(v242 + 80) = 0;
      *(_OWORD *)(v242 + 48) = 0u;
      *(_OWORD *)(v242 + 64) = 0u;
      *(_OWORD *)(v242 + 16) = 0u;
      *(_OWORD *)(v242 + 32) = 0u;
      *(_OWORD *)v242 = 0u;
      MpsGraphInferenceOp::UnPackTo(v241, v242);
      v330[0] = (BnnsCpuInferenceOpT *)v242;
      sub_191009308(&__p, a4, v242);
      if (*(char *)(v242 + 23) < 0)
        operator delete(*(void **)v330[0]);
      v243 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v242 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v242 = v243;
      v244 = operator new(0x1B8uLL);
      v244[1] = 0;
      v244[2] = 0;
      *v244 = &off_1E2DB5EE8;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<MpsGraphInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<MpsGraphInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v244 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v245 = (std::__shared_weak_count *)a6[1];
      *a6 = v244 + 3;
      a6[1] = v244;
      if (v245)
      {
        v246 = (unint64_t *)&v245->__shared_owners_;
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
      }
      v248 = v330[0];
      v330[0] = 0;
      if (v248)
        std::default_delete<MpsGraphInferenceOpT>::operator()[abi:ne180100]((uint64_t)v330, (uint64_t)v248);
      goto LABEL_349;
    case 10:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v194 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v194 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v194 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v194 < 8
          || (_DWORD)v194 != *v89
          || (v196 = v89[1], ++v89, v195 = v196, v196 < 1)
          || v194 + 3 < (unint64_t)(v195 + 4)
          || !EirInferenceOp::Verify((int *)((char *)v89 + v195), (uint64_t)&__p))
        {
          v322 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v322, v330, v329);
        }
      }
      v197 = (int *)((char *)v89 + *v89);
      v198 = operator new();
      *(_OWORD *)(v198 + 48) = 0u;
      *(_OWORD *)(v198 + 64) = 0u;
      *(_OWORD *)(v198 + 16) = 0u;
      *(_OWORD *)(v198 + 32) = 0u;
      *(_OWORD *)v198 = 0u;
      __p.__r_.__value_.__r.__words[0] = v198;
      EirInferenceOp::UnPackTo(v197, v198);
      v330[0] = (BnnsCpuInferenceOpT *)v198;
      sub_191009308(&__p, a4, v198);
      if (*(char *)(v198 + 23) < 0)
        operator delete(*(void **)v330[0]);
      v199 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v198 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v198 = v199;
      v200 = operator new(0x1B8uLL);
      v200[1] = 0;
      v200[2] = 0;
      *v200 = &off_1E2DB5E40;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<EirInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<EirInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<EirInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v200 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v201 = (std::__shared_weak_count *)a6[1];
      *a6 = v200 + 3;
      a6[1] = v200;
      if (v201)
      {
        v202 = (unint64_t *)&v201->__shared_owners_;
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }
      v204 = v330[0];
      v330[0] = 0;
      if (!v204)
        goto LABEL_349;
      v205 = (void *)*((_QWORD *)v204 + 7);
      if (v205)
      {
        *((_QWORD *)v204 + 8) = v205;
        operator delete(v205);
      }
      if (*((char *)v204 + 55) < 0)
        operator delete(*((void **)v204 + 4));
      if (*((char *)v204 + 23) < 0)
        operator delete(*(void **)v204);
      v112 = v204;
      v113 = 0x1092C403B4DE647;
      goto LABEL_348;
    case 11:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v126 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v126 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v126 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v126 < 8
          || (_DWORD)v126 != *v89
          || (v128 = v89[1], ++v89, v127 = v128, v128 < 1)
          || v126 + 3 < (unint64_t)(v127 + 4)
          || (BnnsCpuInferenceOp::Verify((int *)((char *)v89 + v127), (uint64_t)&__p) & 1) == 0)
        {
          v317 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v317, v330, v329);
        }
      }
      v129 = (int *)((char *)v89 + *v89);
      v130 = operator new();
      *(_QWORD *)(v130 + 64) = 0;
      *(_OWORD *)(v130 + 32) = 0u;
      *(_OWORD *)(v130 + 48) = 0u;
      *(_OWORD *)v130 = 0u;
      *(_OWORD *)(v130 + 16) = 0u;
      __p.__r_.__value_.__r.__words[0] = v130;
      BnnsCpuInferenceOp::UnPackTo(v129, v130);
      v330[0] = (BnnsCpuInferenceOpT *)v130;
      v131 = *(_BYTE *)v130;
      v132 = (std::string *)operator new();
      sub_191009308(v132, a4, *((_QWORD *)v330[0] + 1));
      v133 = v330[0];
      v134 = *(unsigned __int8 *)v330[0];
      if (v134 == 2 || (v135 = v330[0], v134 == 1))
      {
        v136 = *((_QWORD *)v330[0] + 1);
        v135 = v330[0];
        if (v136)
        {
          if (*(char *)(v136 + 23) < 0)
            operator delete(*(void **)v136);
          MEMORY[0x19401CD90](v136, 0x1012C40EC159624);
          v135 = v330[0];
        }
      }
      *((_QWORD *)v330[0] + 1) = 0;
      *(_BYTE *)v133 = 0;
      *(_BYTE *)v135 = v131;
      *((_QWORD *)v135 + 1) = v132;
      v137 = operator new(0x1B8uLL);
      v137[1] = 0;
      v137[2] = 0;
      *v137 = &off_1E2DB5EB0;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<BnnsCpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v137 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v138 = (std::__shared_weak_count *)a6[1];
      *a6 = v137 + 3;
      a6[1] = v137;
      if (v138)
      {
        v139 = (unint64_t *)&v138->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      v141 = v330[0];
      v330[0] = 0;
      if (!v141)
        goto LABEL_349;
      BnnsCpuInferenceOpT::~BnnsCpuInferenceOpT(v141);
      v113 = 0x10B2C4086D7BE92;
      goto LABEL_348;
    case 12:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v101 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v101 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v101 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v101 < 8
          || (_DWORD)v101 != *v89
          || (v103 = v89[1], ++v89, v102 = v103, v103 < 1)
          || v101 + 3 < (unint64_t)(v102 + 4)
          || (JitCallOp::Verify((int *)((char *)v89 + v102), (uint64_t)&__p) & 1) == 0)
        {
          v315 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v315, v330, v329);
        }
      }
      v104 = (int *)((char *)v89 + *v89);
      v105 = operator new();
      *(_OWORD *)(v105 + 64) = 0u;
      *(_OWORD *)(v105 + 80) = 0u;
      *(_OWORD *)(v105 + 32) = 0u;
      *(_OWORD *)(v105 + 48) = 0u;
      *(_OWORD *)v105 = 0u;
      *(_OWORD *)(v105 + 16) = 0u;
      __p.__r_.__value_.__r.__words[0] = v105;
      JitCallOp::UnPackTo(v104, v105);
      v330[0] = (BnnsCpuInferenceOpT *)v105;
      sub_191009308(&__p, a4, v105);
      if (*(char *)(v105 + 23) < 0)
        operator delete(*(void **)v330[0]);
      v106 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v105 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v105 = v106;
      v107 = operator new(0x1B8uLL);
      v107[1] = 0;
      v107[2] = 0;
      *v107 = &off_1E2DB5D60;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<JitCallOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<JitCallOpT>,std::string const&,OpCode &,std::unique_ptr<JitCallOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v107 + 3), v16, &v348, (std::__shared_weak_count_vtbl **)v330, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v108 = (std::__shared_weak_count *)a6[1];
      *a6 = v107 + 3;
      a6[1] = v107;
      if (v108)
      {
        v109 = (unint64_t *)&v108->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v111 = v330[0];
      v330[0] = 0;
      if (!v111)
        goto LABEL_349;
      JitCallOpT::~JitCallOpT(v111);
      v113 = 0x1032C40492FD4EELL;
      goto LABEL_348;
    case 13:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
      {
        v114 = *v89;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        __p.__r_.__value_.__l.__size_ = v114 + 4;
        __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
        LODWORD(v332) = 257;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        if (v114 > 0x7FFFFFFA)
          __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
        if (v114 < 8
          || (_DWORD)v114 != *v89
          || (v116 = v89[1], ++v89, v115 = v116, v116 < 1)
          || v114 + 3 < (unint64_t)(v115 + 4)
          || (E5MinimalCpuOp::Verify((int *)((char *)v89 + v115), (uint64_t *)&__p) & 1) == 0)
        {
          v316 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v330, "LoadOperationInfo");
          std::string::basic_string[abi:ne180100]<0>(v328, "Unable to verify E5 op info.");
          E5RT::Status::Status(v329, 8, v328);
          E5RT::E5RTError::E5RTError(v316, v330, v329);
        }
      }
      v117 = (int *)((char *)v89 + *v89);
      v118 = (BnnsCpuInferenceOpT *)operator new();
      *(_QWORD *)v118 = 0;
      *((_QWORD *)v118 + 1) = 0;
      *((_QWORD *)v118 + 2) = 0;
      v330[0] = v118;
      v119 = (unsigned __int16 *)((char *)v117 - *v117);
      if (*v119 < 5u)
        goto LABEL_322;
      v120 = v119[2];
      if (!v120)
        goto LABEL_322;
      v121 = (unsigned int *)((char *)v117 + v120);
      v122 = *v121;
      v124 = (char *)v121 + v122 + 4;
      v123 = *(unsigned int *)((char *)v121 + v122);
      if (v123 >= 0x17)
      {
        v264 = (v123 & 0xFFFFFFF8) + 8;
        if ((v123 | 7) != 0x17)
          v264 = v123 | 7;
        v265 = v264 + 1;
        v125 = (std::string *)operator new(v264 + 1);
        __p.__r_.__value_.__l.__size_ = v123;
        __p.__r_.__value_.__r.__words[2] = v265 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = *(unsigned int *)((char *)v121 + v122);
        v125 = &__p;
        if (!(_DWORD)v123)
          goto LABEL_319;
      }
      memcpy(v125, v124, v123);
LABEL_319:
      v125->__r_.__value_.__s.__data_[v123] = 0;
      if (*((char *)v118 + 23) < 0)
        operator delete(*(void **)v118);
      *(std::string *)v118 = __p;
      v118 = v330[0];
LABEL_322:
      v328[0] = (std::__shared_weak_count_vtbl *)v118;
      sub_191009308(&__p, a4, (uint64_t)v118);
      if (*((char *)v118 + 23) < 0)
        operator delete(v328[0]->~__shared_weak_count);
      v266 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v118 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v118 = v266;
      v267 = operator new(0x1B8uLL);
      v267[1] = 0;
      v267[2] = 0;
      *v267 = &off_1E2DB5E08;
      std::allocator_traits<std::allocator<E5RT::E5OperationImpl<E5MinimalCpuOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<E5MinimalCpuOpT>,std::string const&,OpCode &,std::unique_ptr<E5MinimalCpuOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>((uint64_t)&__p, (uint64_t)(v267 + 3), v16, &v348, v328, (uint64_t *)&v366, (uint64_t *)&v358, (uint64_t *)v342, (uint64_t)&v338, &v336);
      v268 = (std::__shared_weak_count *)a6[1];
      *a6 = v267 + 3;
      a6[1] = v267;
      if (v268)
      {
        v269 = (unint64_t *)&v268->__shared_owners_;
        do
          v270 = __ldaxr(v269);
        while (__stlxr(v270 - 1, v269));
LABEL_340:
        if (!v270)
        {
          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
          std::__shared_weak_count::__release_weak(v268);
        }
      }
LABEL_342:
      v276 = v328[0];
      v328[0] = 0;
      if (!v276)
        goto LABEL_349;
      if (SHIBYTE(v276->__on_zero_shared) < 0)
        operator delete(v276->~__shared_weak_count);
      v112 = v276;
      v237 = 3960837668;
LABEL_346:
      v259 = v237 & 0xFFFF0000FFFFFFFFLL | 0x2C4000000000;
      goto LABEL_347;
    default:
      goto LABEL_430;
  }
}

void sub_190E4BC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;

  std::unique_ptr<QuantOpT>::~unique_ptr[abi:ne180100]((uint64_t *)&a20);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(&a37);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(&a65);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(v66 - 208));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v65);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a54);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  v68 = a59;
  a59 = 0;
  if (v68)
    std::default_delete<KernelInfoT>::operator()[abi:ne180100]((uint64_t)&a59, v68);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a62);
  _Unwind_Resume(a1);
}

void **E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(void **a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;

  v2 = (void **)a1[10];
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_11;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  v7 = a1[8];
  a1[8] = 0;
  if (v7)
    operator delete(v7);
  v8 = (void **)a1[5];
  if (v8)
  {
    do
    {
      v13 = (void **)*v8;
      if (*((char *)v8 + 39) < 0)
        operator delete(v8[2]);
      operator delete(v8);
      v8 = v13;
    }
    while (v13);
  }
  v9 = a1[3];
  a1[3] = 0;
  if (v9)
    operator delete(v9);
  v10 = (void **)*a1;
  if (*a1)
  {
    v11 = (void **)a1[1];
    v12 = *a1;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = *a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperandImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void E5RT::E5OperandImpl::~E5OperandImpl(E5RT::E5OperandImpl *this)
{
  E5RT::AsyncEventImpl *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void **v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;

  *(_QWORD *)this = &off_1E2D59C88;
  *((_QWORD *)this + 1) = &unk_1E2D59D00;
  v2 = (E5RT::E5OperandImpl *)((char *)this + 8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (void **)*((_QWORD *)this + 11);
    if (!v6)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    v6 = (void **)*((_QWORD *)this + 11);
    if (!v6)
      goto LABEL_8;
  }
  do
  {
    v11 = (void **)*v6;
    if (*((char *)v6 + 39) < 0)
      operator delete(v6[2]);
    operator delete(v6);
    v6 = v11;
  }
  while (v11);
LABEL_8:
  v7 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*((char *)this + 39) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (*((char *)this + 39) < 0)
LABEL_15:
    operator delete(*((void **)this + 2));
LABEL_16:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  E5RT::E5OperandImpl::~E5OperandImpl(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<KernelInfoT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  void *exception;
  _QWORD v10[3];
  _BYTE v11[8];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  v13 = 257;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (v3 >= 0x7FFFFFFB)
    sub_19101237C();
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_8;
  if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
LABEL_8:
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v12, v10);
}

void sub_190E4C8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t KernelInfo::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  BOOL v25;
  _BOOL4 v26;
  uint64_t v27;
  unint64_t v28;
  _BOOL4 v30;
  uint64_t v31;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v11 = *a1;
  v12 = *(_DWORD *)(a2 + 40);
  v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  v15 = *(_DWORD *)(a2 + 16);
  v14 = *(_DWORD *)(a2 + 20);
  if (v12 + 1 > v15 || v13 > v14)
    return 0;
  v17 = (unint64_t)&v3[-v11];
  if ((((_DWORD)v3 - (_DWORD)v11) & 1) != 0)
  {
    if (v4 || v7 - 2 < v17)
      return 0;
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1)
    return 0;
  v9 = v7 >= v18;
  v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17)
    return 0;
  v21 = (unsigned __int16 *)((char *)a1 - *a1);
  v22 = *v21;
  if (v22 >= 5)
  {
    v23 = v21[2];
    if (v21[2])
    {
      v24 = &v3[v23];
      v25 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      v26 = v25;
      if (v8 < (unint64_t)v24 || !v26)
        return 0;
    }
    if (v22 >= 7)
    {
      v27 = v21[3];
      if (v27)
      {
        v28 = (unint64_t)&v3[v27];
        v30 = (v28 & 3) == 0 || v4 == 0;
        if (v8 < v28 || !v30)
          return 0;
        v31 = *(unsigned int *)(v2 + v28);
        if ((int)v31 < 1
          || v7 - 1 < v28 + v31
          || !KernelArgFrame::Verify((int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27)), a2))
        {
          return 0;
        }
        v12 = *(_DWORD *)(a2 + 40) - 1;
      }
    }
  }
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

BOOL KernelArgFrame::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _BOOL8 result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _BOOL4 v26;
  uint64_t v27;
  unsigned int *v28;
  char *v29;
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v38;
  uint64_t v39;
  unsigned int *v40;
  char *v41;
  BOOL v42;
  _BOOL4 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned int *v52;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15)
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  v21 = *v20;
  if (v21 < 5)
    goto LABEL_82;
  if (!v20[2])
    goto LABEL_98;
  v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4)
    return 0;
  result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_98:
    if (v21 < 7)
      goto LABEL_82;
    v23 = v20[3];
    if (v20[3])
    {
      result = 0;
      v24 = &v3[v23];
      v26 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v24 || !v26)
        return result;
      v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27])
        return 0;
      result = 0;
      v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      v29 = (char *)v28 - v2;
      v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      v31 = v30;
      if (v8 < (unint64_t)v29 || !v31)
        return result;
      v32 = *v28;
      if (v32 > 0xFFFFFFE)
        return 0;
      result = 0;
      v33 = (8 * v32) | 4;
      v9 = v7 >= v33;
      v34 = v7 - v33;
      if (v34 == 0 || !v9 || v34 < (unint64_t)v29)
        return result;
    }
    if (v21 < 9 || (v35 = v20[4]) == 0)
    {
LABEL_82:
      result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
      if (result)
      {
        v47 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v47 >= 0xBu && (v48 = v47[5]) != 0)
          v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        else
          v49 = 0;
        result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v49);
        if (result)
        {
          result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xCu, 8);
          if (result)
          {
            result = flatbuffers::Table::VerifyOffset(a1, a2, 0xEu);
            if (result)
            {
              v50 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v50 >= 0xFu && (v51 = v50[7]) != 0)
                v52 = (unsigned int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
              else
                v52 = 0;
              result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v52);
              if (result)
              {
                --*(_DWORD *)(a2 + 40);
                return 1;
              }
            }
          }
        }
      }
      return result;
    }
    result = 0;
    v36 = (unint64_t)&v3[v35];
    v38 = (v36 & 3) == 0 || v4 == 0;
    if (v8 >= v36 && v38)
    {
      v39 = *(unsigned int *)(v2 + v36);
      if ((int)v39 < 1 || v7 - 1 < v36 + v39)
        return 0;
      result = 0;
      v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
      v41 = (char *)v40 - v2;
      v42 = (v41 & 3) == 0 || v4 == 0;
      v43 = v42;
      if (v8 >= (unint64_t)v41 && v43)
      {
        v44 = *v40;
        if (v44 <= 0xFFFFFFE)
        {
          result = 0;
          v45 = (8 * v44) | 4;
          v15 = v7 > v45;
          v46 = v7 - v45;
          if (!v15 || v46 < (unint64_t)v41)
            return result;
          goto LABEL_82;
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL flatbuffers::Table::VerifyOffset(int *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unint64_t v5;
  _BOOL8 result;
  unint64_t v8;
  uint64_t v9;

  v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 <= a3)
    return 1;
  v4 = *(unsigned __int16 *)((char *)v3 + a3);
  if (!v4)
    return 1;
  v5 = (unint64_t)a1 + v4 - *(_QWORD *)a2;
  result = 0;
  if ((v5 & 3) == 0 || *(_BYTE *)(a2 + 24) == 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (v8 >= 5 && v8 - 4 >= v5)
    {
      v9 = *(unsigned int *)(*(_QWORD *)a2 + v5);
      return (int)v9 >= 1 && v8 - 1 >= v5 + v9;
    }
  }
  return result;
}

uint64_t VerifySizePrefixedKernelInfoBuffer(unsigned int **a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = (unint64_t)a1[1];
  if (v1 >= 5
    && ((v2 = (uint64_t)*a1, v1 >= 0xC) ? (v3 = v1 - 4 == **a1) : (v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return KernelInfo::Verify((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

uint64_t CastOp::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  unsigned int *v30;
  char *v31;
  BOOL v32;
  _BOOL4 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v2 = *a2;
  v3 = (char *)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12)
    return 0;
  v13 = (unint64_t)&v3[-v9];
  if ((((_DWORD)v3 - (_DWORD)v9) & 1) != 0)
  {
    v14 = 0;
    if (v4 || v6 - 2 < v13)
      return v14;
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1)
    return 0;
  v8 = v6 >= v15;
  v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  v20 = *v19;
  if (v20 < 5)
    goto LABEL_61;
  v21 = v19[2];
  if (!v19[2]
    || ((v14 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (v23 = v4 == 0) : (v23 = 1),
        !v23 ? (v24 = 0) : (v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7)
      goto LABEL_61;
    v25 = v19[3];
    if (!v25)
      goto LABEL_61;
    v14 = 0;
    v26 = (unint64_t)&v3[v25];
    v27 = (v26 & 3) == 0 || v4 == 0;
    v28 = v27;
    if (v7 >= v26 && v28)
    {
      v29 = *(unsigned int *)(v2 + v26);
      if ((int)v29 < 1 || v6 - 1 < v26 + v29)
        return 0;
      v14 = 0;
      v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
      v31 = (char *)v30 - v2;
      v32 = (v31 & 3) == 0 || v4 == 0;
      v33 = v32;
      if (v7 >= (unint64_t)v31 && v33)
      {
        v34 = *v30;
        if (v34 > 0xFFFFFFE)
          return 0;
        v14 = 0;
        v35 = (8 * v34) | 4;
        v12 = v6 > v35;
        v36 = v6 - v35;
        if (v12 && v36 >= (unint64_t)v31)
        {
LABEL_61:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return v14;
}

uint64_t std::__shared_ptr_pointer<CastOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(_QWORD *)(v1 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x19401CD90);
  }
  return result;
}

double AneInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  __int128 *p_dst;
  double result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  unsigned int v40;
  char *v41;
  size_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 __dst;
  uint64_t v47;

  v4 = *a1;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    v7 = v6[2];
    if (v7)
    {
      v8 = (char *)a1 + v7;
      v9 = *(unsigned int *)((char *)a1 + v7);
      v11 = &v8[v9 + 4];
      v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17)
          v33 = (v10 & 0xFFFFFFF8) + 8;
        else
          v33 = v10 | 7;
        p_dst = (__int128 *)operator new(v33 + 1);
        *((_QWORD *)&__dst + 1) = v10;
        v47 = v33 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v47) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!(_DWORD)v10)
        {
          *((_BYTE *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            result = *(double *)&__dst;
            *(_OWORD *)a2 = __dst;
            *(_QWORD *)(a2 + 16) = v47;
            v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_33:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((_BYTE *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_33;
    }
  }
LABEL_7:
  if (*(unsigned __int16 *)((char *)a1 + v5) >= 7u)
  {
    v14 = *(unsigned __int16 *)((char *)a1 + v5 + 6);
    if (*(_WORD *)((char *)a1 + v5 + 6))
    {
      v15 = (char *)a1 + v14;
      v16 = *(unsigned int *)((char *)a1 + v14);
      v18 = &v15[v16 + 4];
      v17 = *(unsigned int *)&v15[v16];
      if (v17 >= 0x17)
      {
        if ((v17 | 7) == 0x17)
          v34 = (v17 & 0xFFFFFFF8) + 8;
        else
          v34 = v17 | 7;
        v19 = (__int128 *)operator new(v34 + 1);
        *((_QWORD *)&__dst + 1) = v17;
        v47 = v34 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v19;
      }
      else
      {
        HIBYTE(v47) = *(_DWORD *)&v15[v16];
        v19 = &__dst;
        if (!(_DWORD)v17)
        {
          *((_BYTE *)&__dst + v17) = 0;
          v20 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0)
          {
LABEL_12:
            result = *(double *)&__dst;
            *(_OWORD *)v20 = __dst;
            *(_QWORD *)(v20 + 16) = v47;
            v5 = -(uint64_t)*a1;
            goto LABEL_13;
          }
LABEL_39:
          operator delete(*(void **)v20);
          goto LABEL_12;
        }
      }
      memcpy(v19, v18, v17);
      *((_BYTE *)v19 + v17) = 0;
      v20 = a2 + 24;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_39;
    }
  }
LABEL_13:
  v21 = (unsigned __int16 *)((char *)a1 + v5);
  if (*v21 < 9u)
  {
    *(_DWORD *)(a2 + 48) = 0;
    v23 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v23 < 0xBu)
      goto LABEL_22;
  }
  else
  {
    v22 = v21[4];
    if (v22)
      LODWORD(v22) = *(int *)((char *)a1 + v22);
    *(_DWORD *)(a2 + 48) = v22;
    v23 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v23 < 0xBu)
      goto LABEL_22;
  }
  v24 = v23[5];
  if (!v24)
  {
LABEL_22:
    v31 = *(_QWORD *)(a2 + 56);
    v32 = *(_QWORD *)(a2 + 64);
    if (v32 != v31)
    {
      do
      {
        if (*(char *)(v32 - 1) < 0)
          operator delete(*(void **)(v32 - 24));
        v32 -= 24;
      }
      while (v32 != v31);
      *(_QWORD *)(a2 + 64) = v31;
    }
    return result;
  }
  v25 = (int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
  v26 = *(_QWORD *)(a2 + 56);
  v28 = *(_QWORD *)(a2 + 64);
  v27 = (_QWORD *)(a2 + 56);
  v29 = *v25;
  v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v26) >> 3);
  if (v29 <= v30)
  {
    if (v29 < v30)
    {
      v35 = v26 + 24 * v29;
      while (v28 != v35)
      {
        if (*(char *)(v28 - 1) < 0)
          operator delete(*(void **)(v28 - 24));
        v28 -= 24;
      }
      *(_QWORD *)(a2 + 64) = v35;
    }
  }
  else
  {
    std::vector<std::string>::__append((std::vector<std::string> *)(a2 + 56), v29 - v30);
  }
  if (*v25)
  {
    v36 = 0;
    v37 = 0;
    v38 = v25;
    v39 = v25;
    do
    {
      v40 = v39[1];
      ++v39;
      v41 = (char *)v38 + v40;
      v42 = *((unsigned int *)v41 + 1);
      if (v42 >= 0x17)
      {
        if ((v42 | 7) == 0x17)
          v45 = (v42 & 0xFFFFFFF8) + 8;
        else
          v45 = v42 | 7;
        v43 = (__int128 *)operator new(v45 + 1);
        *((_QWORD *)&__dst + 1) = v42;
        v47 = v45 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v43;
      }
      else
      {
        HIBYTE(v47) = *((_DWORD *)v41 + 1);
        v43 = &__dst;
        if (!(_DWORD)v42)
        {
          *((_BYTE *)&__dst + v42) = 0;
          v44 = *v27 + v36;
          if (*(char *)(v44 + 23) < 0)
            goto LABEL_59;
          goto LABEL_49;
        }
      }
      memcpy(v43, v41 + 8, v42);
      *((_BYTE *)v43 + v42) = 0;
      v44 = *v27 + v36;
      if (*(char *)(v44 + 23) < 0)
LABEL_59:
        operator delete(*(void **)v44);
LABEL_49:
      result = *(double *)&__dst;
      *(_OWORD *)v44 = __dst;
      *(_QWORD *)(v44 + 16) = v47;
      ++v37;
      v36 += 24;
      v38 = v39;
    }
    while (v37 < *v25);
  }
  return result;
}

uint64_t AneInferenceOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int *v41;
  char *v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  _BOOL4 v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned __int16 *v54;
  uint64_t v55;
  unsigned int *v56;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20))
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  v21 = *v20;
  if (v21 < 5)
    goto LABEL_93;
  v22 = v20[2];
  if (v20[2])
  {
    result = 0;
    v23 = &v3[v22];
    v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25)
      return result;
    v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26])
      return 0;
    result = 0;
    v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    v28 = (char *)v27 - v2;
    v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    v30 = v29;
    if (v8 < (unint64_t)v28 || !v30)
      return result;
    v31 = *v27;
    if (v31 > 0x7FFFFFFE)
      return 0;
    v32 = v31 + 4;
    v33 = (unint64_t)&v28[v31 + 4];
    v34 = v7 - 1 >= v33 && v7 > v32;
    v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(_BYTE *)(v2 + v33))
      return 0;
  }
  if (v21 < 7)
  {
LABEL_93:
    result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
    if ((_DWORD)result)
    {
      v51 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v51 >= 0xBu && (v52 = v51[5]) != 0)
        v53 = (unsigned int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
      else
        v53 = 0;
      result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v53);
      if ((_DWORD)result)
      {
        v54 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v54 >= 0xBu && (v55 = v54[5]) != 0)
          v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
        else
          v56 = 0;
        result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v56);
        if ((_DWORD)result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
    return result;
  }
  v36 = v20[3];
  if (!v20[3])
    goto LABEL_83;
  result = 0;
  v37 = &v3[v36];
  v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40])
      return 0;
    result = 0;
    v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    v42 = (char *)v41 - v2;
    v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      v45 = *v41;
      if (v45 > 0x7FFFFFFE)
        return 0;
      result = 0;
      v46 = v45 + 4;
      v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42)
        return result;
      if (*(_BYTE *)(v2 + v47))
        return 0;
LABEL_83:
      if (v21 >= 9 && v20[4])
      {
        result = 0;
        v48 = (unint64_t)&v3[v20[4]];
        v49 = (v48 & 3) == 0 || v4 == 0;
        v50 = v49;
        if (v8 < v48 || !v50)
          return result;
      }
      goto LABEL_93;
    }
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<AneInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceDescriptor  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

double BnnsCpuInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  double result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  __int128 *p_dst;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  unsigned int v38;
  char *v39;
  size_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 __dst;
  uint64_t v45;

  v4 = *a1;
  v5 = -v4;
  v6 = (char *)a1 - v4;
  v7 = *(unsigned __int16 *)((char *)a1 - v4);
  if (v7 <= 4)
  {
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v8 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      *(_BYTE *)a2 = *((_BYTE *)a1 + v8);
      if (v7 < 7)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      if (v7 < 7)
        goto LABEL_12;
    }
    v9 = *((unsigned __int16 *)v6 + 3);
    if (v9)
    {
      v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
      if ((_DWORD)v8)
        v11 = *((unsigned __int8 *)a1 + v8);
      else
        v11 = 0;
      *(_QWORD *)(a2 + 8) = BnnsProgramUrlUnion::UnPack(v10, v11);
      v5 = -(uint64_t)*a1;
    }
  }
LABEL_12:
  if (*(unsigned __int16 *)((char *)a1 + v5) >= 9u)
  {
    v13 = *(unsigned __int16 *)((char *)a1 + v5 + 8);
    if (*(_WORD *)((char *)a1 + v5 + 8))
    {
      v14 = (char *)a1 + v13;
      v15 = *(unsigned int *)((char *)a1 + v13);
      v17 = &v14[v15 + 4];
      v16 = *(unsigned int *)&v14[v15];
      if (v16 >= 0x17)
      {
        if ((v16 | 7) == 0x17)
          v32 = (v16 & 0xFFFFFFF8) + 8;
        else
          v32 = v16 | 7;
        p_dst = (__int128 *)operator new(v32 + 1);
        *((_QWORD *)&__dst + 1) = v16;
        v45 = v32 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v45) = *(_DWORD *)&v14[v15];
        p_dst = &__dst;
        if (!(_DWORD)v16)
        {
          *((_BYTE *)&__dst + v16) = 0;
          v19 = a2 + 16;
          if ((*(char *)(a2 + 39) & 0x80000000) == 0)
          {
LABEL_17:
            result = *(double *)&__dst;
            *(_OWORD *)v19 = __dst;
            *(_QWORD *)(v19 + 16) = v45;
            v5 = -(uint64_t)*a1;
            goto LABEL_18;
          }
LABEL_38:
          operator delete(*(void **)v19);
          goto LABEL_17;
        }
      }
      memcpy(p_dst, v17, v16);
      *((_BYTE *)p_dst + v16) = 0;
      v19 = a2 + 16;
      if ((*(char *)(a2 + 39) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_38;
    }
  }
LABEL_18:
  v20 = (unsigned __int16 *)((char *)a1 + v5);
  v21 = *v20;
  if (v21 <= 0xA)
  {
    *(_BYTE *)(a2 + 40) = 0;
LABEL_26:
    v30 = *(_QWORD *)(a2 + 48);
    v31 = *(_QWORD *)(a2 + 56);
    if (v31 != v30)
    {
      do
      {
        if (*(char *)(v31 - 1) < 0)
          operator delete(*(void **)(v31 - 24));
        v31 -= 24;
      }
      while (v31 != v30);
      *(_QWORD *)(a2 + 56) = v30;
    }
    return result;
  }
  v22 = v20[5];
  if (v20[5])
    LOBYTE(v22) = *((_BYTE *)a1 + v22) != 0;
  *(_BYTE *)(a2 + 40) = v22;
  if (v21 < 0xD)
    goto LABEL_26;
  v23 = v20[6];
  if (!v23)
    goto LABEL_26;
  v24 = (int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
  v25 = *(_QWORD *)(a2 + 48);
  v27 = *(_QWORD *)(a2 + 56);
  v26 = (_QWORD *)(a2 + 48);
  v28 = *v24;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v25) >> 3);
  if (v28 <= v29)
  {
    if (v28 < v29)
    {
      v33 = v25 + 24 * v28;
      while (v27 != v33)
      {
        if (*(char *)(v27 - 1) < 0)
          operator delete(*(void **)(v27 - 24));
        v27 -= 24;
      }
      *(_QWORD *)(a2 + 56) = v33;
    }
  }
  else
  {
    std::vector<std::string>::__append((std::vector<std::string> *)(a2 + 48), v28 - v29);
  }
  if (*v24)
  {
    v34 = 0;
    v35 = 0;
    v36 = v24;
    v37 = v24;
    do
    {
      v38 = v37[1];
      ++v37;
      v39 = (char *)v36 + v38;
      v40 = *((unsigned int *)v39 + 1);
      if (v40 >= 0x17)
      {
        if ((v40 | 7) == 0x17)
          v43 = (v40 & 0xFFFFFFF8) + 8;
        else
          v43 = v40 | 7;
        v41 = (__int128 *)operator new(v43 + 1);
        *((_QWORD *)&__dst + 1) = v40;
        v45 = v43 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v41;
      }
      else
      {
        HIBYTE(v45) = *((_DWORD *)v39 + 1);
        v41 = &__dst;
        if (!(_DWORD)v40)
        {
          *((_BYTE *)&__dst + v40) = 0;
          v42 = *v26 + v34;
          if (*(char *)(v42 + 23) < 0)
            goto LABEL_58;
          goto LABEL_48;
        }
      }
      memcpy(v41, v39 + 8, v40);
      *((_BYTE *)v41 + v40) = 0;
      v42 = *v26 + v34;
      if (*(char *)(v42 + 23) < 0)
LABEL_58:
        operator delete(*(void **)v42);
LABEL_48:
      result = *(double *)&__dst;
      *(_OWORD *)v42 = __dst;
      *(_QWORD *)(v42 + 16) = v45;
      ++v35;
      v34 += 24;
      v36 = v37;
    }
    while (v35 < *v24);
  }
  return result;
}

uint64_t BnnsCpuInferenceOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  char *v24;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  char *v30;
  _BOOL4 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int *v41;
  char *v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned int *v53;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20))
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  v21 = *v20;
  if (v21 < 5)
    goto LABEL_95;
  v22 = v20[2];
  if (!v20[2])
  {
    if (v21 <= 6)
    {
LABEL_95:
      result = flatbuffers::Table::VerifyOffset(a1, a2, 0xCu);
      if ((_DWORD)result)
      {
        v48 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v48 >= 0xDu && (v49 = v48[6]) != 0)
          v50 = (unsigned int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
        else
          v50 = 0;
        result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v50);
        if ((_DWORD)result)
        {
          v51 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v51 >= 0xDu && (v52 = v51[6]) != 0)
            v53 = (unsigned int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
          else
            v53 = 0;
          result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v53);
          if ((_DWORD)result)
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
      return result;
    }
LABEL_34:
    v23 = (unsigned int *)v20[3];
    if (v20[3])
    {
      result = 0;
      v24 = (char *)v23 + (_QWORD)v3;
      v26 = (((uint64_t)v23 + (_QWORD)v3) & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v24 || !v26)
        return result;
      v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27])
        return 0;
      v23 = (unsigned int *)((char *)v23 + (_QWORD)a1 + *(unsigned int *)((char *)v23 + (_QWORD)a1));
    }
    if (!v20[2])
      goto LABEL_67;
    goto LABEL_47;
  }
  if (v7 - 1 < (unint64_t)&v3[v22])
    return 0;
  if (v21 >= 7)
    goto LABEL_34;
  v23 = 0;
LABEL_47:
  v28 = *((unsigned __int8 *)a1 + v22);
  if (v28 == 2)
  {
    if (!v23)
      goto LABEL_67;
  }
  else if (v28 != 1 || v23 == 0)
  {
    goto LABEL_67;
  }
  result = 0;
  v30 = (char *)v23 - v2;
  v32 = (((unint64_t)v23 - v2) & 3) == 0 || v4 == 0;
  if (v8 < (unint64_t)v30 || !v32)
    return result;
  v33 = *v23;
  if (v33 > 0x7FFFFFFE)
    return 0;
  result = 0;
  v34 = v33 + 4;
  v35 = (unint64_t)&v30[v33 + 4];
  if (v7 - 1 < v35 || v7 <= v34 || v7 - v34 < (unint64_t)v30)
    return result;
  if (*(_BYTE *)(v2 + v35))
    return 0;
LABEL_67:
  if (v21 < 9)
    goto LABEL_95;
  v36 = v20[4];
  if (!v20[4])
  {
LABEL_92:
    if (v21 >= 0xB && v20[5] && v7 - 1 < (unint64_t)&v3[v20[5]])
      return 0;
    goto LABEL_95;
  }
  result = 0;
  v37 = &v3[v36];
  v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40])
      return 0;
    result = 0;
    v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    v42 = (char *)v41 - v2;
    v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      v45 = *v41;
      if (v45 <= 0x7FFFFFFE)
      {
        result = 0;
        v46 = v45 + 4;
        v47 = (unint64_t)&v42[v45 + 4];
        if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42)
          return result;
        if (!*(_BYTE *)(v2 + v47))
          goto LABEL_92;
      }
      return 0;
    }
  }
  return result;
}

double CpuInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  __int128 *p_dst;
  double result;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 __dst;
  uint64_t v25;

  v4 = *a1;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    v7 = v6[2];
    if (v7)
    {
      v8 = (char *)a1 + v7;
      v9 = *(unsigned int *)((char *)a1 + v7);
      v11 = &v8[v9 + 4];
      v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17)
          v22 = (v10 & 0xFFFFFFF8) + 8;
        else
          v22 = v10 | 7;
        p_dst = (__int128 *)operator new(v22 + 1);
        *((_QWORD *)&__dst + 1) = v10;
        v25 = v22 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v25) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!(_DWORD)v10)
        {
          *((_BYTE *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            result = *(double *)&__dst;
            *(_OWORD *)a2 = __dst;
            *(_QWORD *)(a2 + 16) = v25;
            v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_19:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((_BYTE *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_19;
    }
  }
LABEL_7:
  v14 = (unsigned __int16 *)((char *)a1 + v5);
  if (*v14 >= 7u)
  {
    v15 = v14[3];
    if (v15)
    {
      v16 = (unsigned int *)((char *)a1 + v15);
      v17 = *v16;
      v19 = (char *)v16 + v17 + 4;
      v18 = *(unsigned int *)((char *)v16 + v17);
      if (v18 >= 0x17)
      {
        if ((v18 | 7) == 0x17)
          v23 = (v18 & 0xFFFFFFF8) + 8;
        else
          v23 = v18 | 7;
        v20 = (__int128 *)operator new(v23 + 1);
        *((_QWORD *)&__dst + 1) = v18;
        v25 = v23 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v20;
      }
      else
      {
        HIBYTE(v25) = *(unsigned int *)((char *)v16 + v17);
        v20 = &__dst;
        if (!(_DWORD)v18)
        {
          *((_BYTE *)&__dst + v18) = 0;
          v21 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0)
          {
LABEL_12:
            result = *(double *)&__dst;
            *(_OWORD *)v21 = __dst;
            *(_QWORD *)(v21 + 16) = v25;
            return result;
          }
LABEL_25:
          operator delete(*(void **)v21);
          goto LABEL_12;
        }
      }
      memcpy(v20, v19, v18);
      *((_BYTE *)v20 + v18) = 0;
      v21 = a2 + 24;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t CpuInferenceOp::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  _BOOL4 v24;
  uint64_t v25;
  unsigned int *v26;
  char *v27;
  BOOL v28;
  _BOOL4 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v38;
  uint64_t v39;
  unsigned int *v40;
  char *v41;
  BOOL v42;
  _BOOL4 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v2 = *a2;
  v3 = (char *)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5))
    return 0;
  v13 = (unint64_t)&v3[-v9];
  if ((((_DWORD)v3 - (_DWORD)v9) & 1) != 0)
  {
    v14 = 0;
    if (v4 || v6 - 2 < v13)
      return v14;
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1)
    return 0;
  v8 = v6 >= v15;
  v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  v20 = *v19;
  if (v20 < 5)
    goto LABEL_82;
  v21 = v19[2];
  if (v19[2])
  {
    v14 = 0;
    v22 = &v3[v21];
    v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v7 < (unint64_t)v22 || !v24)
      return v14;
    v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25])
      return 0;
    v14 = 0;
    v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    v27 = (char *)v26 - v2;
    v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    v29 = v28;
    if (v7 < (unint64_t)v27 || !v29)
      return v14;
    v30 = *v26;
    if (v30 > 0x7FFFFFFE)
      return 0;
    v31 = v30 + 4;
    v32 = (unint64_t)&v27[v30 + 4];
    v33 = v6 - 1 >= v32 && v6 > v31;
    v34 = v33 && v6 - v31 >= (unint64_t)v27;
    if (!v34 || *(_BYTE *)(v2 + v32))
      return 0;
  }
  if (v20 < 7 || (v35 = v19[3]) == 0)
  {
LABEL_82:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  v14 = 0;
  v36 = (unint64_t)&v3[v35];
  v38 = (v36 & 3) == 0 || v4 == 0;
  if (v7 >= v36 && v38)
  {
    v39 = *(unsigned int *)(v2 + v36);
    if ((int)v39 < 1 || v6 - 1 < v36 + v39)
      return 0;
    v14 = 0;
    v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
    v41 = (char *)v40 - v2;
    v42 = (((unint64_t)v40 - v2) & 3) == 0 || v4 == 0;
    v43 = v42;
    if (v7 >= (unint64_t)v41 && v43)
    {
      v44 = *v40;
      if (v44 > 0x7FFFFFFE)
        return 0;
      v14 = 0;
      v45 = v44 + 4;
      v46 = (unint64_t)&v41[v44 + 4];
      if (v6 - 1 < v46 || v6 <= v45 || v6 - v45 < (unint64_t)v41)
        return v14;
      if (*(_BYTE *)(v2 + v46))
        return 0;
      goto LABEL_82;
    }
  }
  return v14;
}

uint64_t flatbuffers::Verifier::VerifyVectorOfStrings(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  if (!a2)
    return 1;
  v2 = *a2;
  if (!(_DWORD)v2)
    return 1;
  v3 = 0;
  v4 = a2 + 1;
  v5 = (char *)a2 - *(_QWORD *)a1;
  v6 = 4 * v2;
  while (1)
  {
    v7 = v4[v3 / 4];
    v8 = (unint64_t)&v5[v3 + 4 + v7];
    if ((v8 & 3) != 0)
    {
      if (*(_BYTE *)(a1 + 24))
        break;
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (v9 < 5 || v9 - 4 < v8)
      break;
    v11 = *(unsigned int *)((char *)v4 + v7 + v3);
    if (v11 > 0x7FFFFFFE)
      break;
    v12 = v7 + v11;
    v13 = v9 - 1 >= (unint64_t)&v5[v3 + 8 + v12] && v9 > v11 + 4;
    v14 = v13 && v9 - (v11 + 4) >= v8;
    if (!v14 || *((_BYTE *)a2 + v12 + v3 + 8))
      break;
    v3 += 4;
    if (v6 == v3)
      return 1;
  }
  return 0;
}

void (**E5RT::BufferObject::GetHandle<__IOSurface *>(uint64_t a1))(E5RT::IOBufferObject *__hidden this)
{
  void (***v1)(E5RT::IOBufferObject *__hidden);
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  v1 = E5RT::BufferObjectImpl::TryAsIOBufferObject(*(void (****)(E5RT::IOBufferObject *__hidden))(a1 + 8));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetHandle");
    std::string::basic_string[abi:ne180100]<0>(v4, "Buffer object is not backed by an IOSurface.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return v1[4];
}

void sub_190E4E428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void (***E5RT::BufferObjectImpl::TryAsIOBufferObject(void (***this)(E5RT::IOBufferObject *__hidden this)))(E5RT::IOBufferObject *__hidden this)
{
  if (!this || *this != &off_1E2D59FB8)
    return 0;
  return this;
}

_QWORD *espresso_context_destroy(_QWORD *a1)
{
  Espresso *v2;
  const char *v3;
  Espresso *v4;
  NSObject *v5;
  EspressoLight *v6;
  std::mutex *v7;
  Espresso::abstract_engine_factory *v8;
  const char *v9;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)MEMORY[0x19401D4A4]();
  v4 = v2;
  if (a1)
  {
    Espresso::espresso_os_log_subsystem(v2, v3);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v11 = 134217984;
      v12 = a1;
      _os_log_impl(&dword_190DAF000, v5, OS_LOG_TYPE_INFO, "Destroying context %zu", (uint8_t *)&v11, 0xCu);
    }

    if (*a1 == 0x50FBC8A8A6F7B03CLL)
    {
      *a1 = 0;
      std::unique_ptr<EspressoLight::espresso_context::priv_t>::reset[abi:ne180100](a1 + 2);
      MEMORY[0x19401CD90](a1, 0x1020C406E52F545);
    }
    else
    {
      EspressoLight::very_bad_client(v6);
    }
    if (g_espresso_autoinitialize)
    {
      v7 = (std::mutex *)g_autoinitialize_mutex;
      std::mutex::lock((std::mutex *)g_autoinitialize_mutex);
      if (!--g_autoinitialize_ctx_count)
        espresso_deinitialize(v8, v9);
      std::mutex::unlock(v7);
    }
    a1 = 0;
  }
  objc_autoreleasePoolPop(v4);
  return a1;
}

id model_path_to_model_url(const char *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "path");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "lastPathComponent");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v1) = objc_msgSend(v4, "isEqualToString:", CFSTR("model.espresso.net"));

  if ((_DWORD)v1)
  {
    objc_msgSend(v3, "stringByDeletingLastPathComponent");
    v5 = objc_claimAutoreleasedReturnValue();

    v6 = (void *)v5;
  }
  else
  {
    v6 = v3;
  }
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "absoluteURL");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_190E4E740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id get_original_url_if_exists(uint64_t *a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = *a1;
  v5 = (_QWORD *)(*a1 + 1024);
  if (*(char *)(*a1 + 1047) < 0)
    v5 = (_QWORD *)*v5;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  resolve_url_from_net_properties_and_path(v4 + 472, v3, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_190E4E7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id resolve_url_from_net_properties_and_path(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  std::string *p_p;
  void *v9;
  void *v10;
  char v11;
  char v12;
  id v13;
  void *v14;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  std::string __p;

  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1E0CB3940];
  std::string::basic_string[abi:ne180100]<0>(v18, "experimental.ane.dev_op_override");
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(a1, (uint64_t)v18, (uint64_t)v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v7, "stringWithUTF8String:", p_p);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  objc_msgSend(v5, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "hasSuffix:", CFSTR(".hwx"));

  if (objc_msgSend(v9, "length"))
    v12 = v11;
  else
    v12 = 1;
  if ((v12 & 1) != 0)
  {
    v13 = v5;
  }
  else
  {
    objc_msgSend(v6, "stringByAppendingPathComponent:", v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v14);
    v13 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v13;
}

void sub_190E4E970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(Espresso::ANERuntimeEngine::compiler *this)
{
  std::__shared_weak_count *v1;
  Espresso::net *v2;
  _BOOL4 should_do_ane_blob_aliasing;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t *i;
  char *v26;
  const void *v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t j;
  char v36;
  uint64_t v37;
  char v38;
  uint8_t *v39;
  __int128 *v40;
  __int128 *v41;
  char *v42;
  const void *v43;
  void **v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t k;
  Espresso *v51;
  const char *v52;
  uint64_t v53;
  _BYTE *v54;
  NSObject *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t m;
  __int128 *v60;
  void *v61;
  Espresso *v62;
  const char *v63;
  NSObject *v64;
  void *v65;
  const __CFDictionary *Copy;
  IOSurfaceRef v67;
  Espresso *v68;
  const char *v69;
  const char *v70;
  void *v71;
  void **v72;
  void *v73;
  void *v74;
  NSObject *v75;
  const char *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::runtime_error *exception;
  __int128 v82;
  BOOL obj;
  id obja;
  const __CFAllocator *allocator;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  char v93[16];
  std::__shared_weak_count *v94;
  Espresso::net *v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint8_t *v101;
  std::__shared_weak_count *v102;
  _BYTE buf[22];
  Espresso::net **v104;
  __int128 *v105;
  uint8_t v106[16];
  std::__shared_weak_count *v107;
  _QWORD v108[2];
  _QWORD v109[15];

  v109[12] = *MEMORY[0x1E0C80C00];
  v95 = 0;
  v96 = 0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v1
    || (v96 = std::__shared_weak_count::lock(v1)) == 0
    || (v2 = (Espresso::net *)*((_QWORD *)this + 1), (v95 = v2) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *((_QWORD *)this + 52) = *((_QWORD *)this + 51);
  should_do_ane_blob_aliasing = Espresso::ANERuntimeEngine::compiler::should_do_ane_blob_aliasing(this, v2);
  if (should_do_ane_blob_aliasing)
  {
    *(_QWORD *)&v106[8] = 0;
    v107 = 0;
    *(_QWORD *)v106 = &off_1E2D854F0;
    v4 = (std::__shared_weak_count *)operator new(0x30uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD8F8;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D94720;
    v4[1].__shared_weak_owners_ = 0;
    *(_QWORD *)&v97 = v4 + 1;
    *((_QWORD *)&v97 + 1) = v4;
    v4[1].__shared_owners_ = 0x100000002;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v106[8], (uint64_t)&v4[1], (uint64_t)v4);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    Espresso::pass_graph_coloring::run_on_network((Espresso::pass_graph_coloring *)v106, v95, (uint64_t)v93);
    v8 = v94;
    if (v94)
    {
      v9 = (unint64_t *)&v94->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(_QWORD *)v106 = off_1E2DA6C90;
    v14 = v107;
    if (v107)
    {
      v15 = (unint64_t *)&v107->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = 0;
  v18 = 0;
  v92 = 1;
  obj = should_do_ane_blob_aliasing;
  do
  {
    v19 = v93[v18 - 2];
    v87 = v17;
    v97 = 0u;
    v98 = 0u;
    LODWORD(v99) = 1065353216;
    *(_QWORD *)buf = this;
    *(_QWORD *)&buf[8] = &v97;
    buf[16] = v19;
    buf[17] = should_do_ane_blob_aliasing;
    v104 = &v95;
    v21 = *((_QWORD *)this + 4);
    v20 = *((_QWORD *)this + 5);
    v90 = v20;
    while (v21 != v20)
    {
      std::unordered_set<std::string>::unordered_set((uint64_t)v106, v21 + 16);
      std::unordered_set<std::string>::unordered_set((uint64_t)v109, v21 + 56);
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = v22;
        for (i = *(uint64_t **)&v106[40 * v23 + 16]; i; i = (uint64_t *)*i)
        {
          v105 = (__int128 *)(i + 2);
          v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95 + 136, (unsigned __int8 *)i + 16, &v105);
          v27 = (const void *)*((_QWORD *)v26 + 5);
          if (v27
          {
            v29 = (std::__shared_weak_count *)*((_QWORD *)v26 + 6);
            v101 = (uint8_t *)v28;
            v102 = v29;
            if (v29)
            {
              v30 = (unint64_t *)&v29->__shared_owners_;
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
            }
          }
          else
          {
            v101 = 0;
            v102 = 0;
          }
          Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(void)::$_0::operator()((uint64_t)buf, (uint64_t)(i + 2), (std::string::size_type *)&v101);
          v32 = v102;
          if (v102)
          {
            v33 = (unint64_t *)&v102->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        v22 = 1;
        v23 = 1;
      }
      while ((v24 & 1) == 0);
      for (j = 40; j != -40; j -= 40)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v106[j]);
      v21 += 120;
      v20 = v90;
    }
    v107 = 0;
    memset(v106, 0, sizeof(v106));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v106, *((_QWORD *)v95 + 80), *((_QWORD *)v95 + 81), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v95 + 81) - *((_QWORD *)v95 + 80)) >> 3));
    v108[1] = 0;
    v109[0] = 0;
    v108[0] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v108, *((_QWORD *)v95 + 83), *((_QWORD *)v95 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v95 + 84) - *((_QWORD *)v95 + 83)) >> 3));
    v36 = 0;
    v37 = 0;
    do
    {
      v38 = v36;
      v39 = &v106[24 * v37];
      v41 = *(__int128 **)v39;
      v40 = (__int128 *)*((_QWORD *)v39 + 1);
      while (v41 != v40)
      {
        v105 = v41;
        v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95 + 136, (unsigned __int8 *)v41, &v105);
        v43 = (const void *)*((_QWORD *)v42 + 5);
        if (v43
        {
          v45 = (std::__shared_weak_count *)*((_QWORD *)v42 + 6);
          v101 = (uint8_t *)v44;
          v102 = v45;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
        }
        else
        {
          v45 = 0;
          v101 = 0;
          v102 = 0;
        }
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v97, (uint64_t)v41))Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(void)::$_0::operator()((uint64_t)buf, (uint64_t)v41, (std::string::size_type *)&v101);
        if (v45)
        {
          v48 = (unint64_t *)&v45->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v41 = (__int128 *)((char *)v41 + 24);
      }
      v36 = 1;
      v37 = 1;
    }
    while ((v38 & 1) == 0);
    for (k = 24; k != -24; k -= 24)
    {
      v101 = &v106[k];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
    }
    v51 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v97);
    v17 = 1;
    v18 = 1;
    LOBYTE(should_do_ane_blob_aliasing) = obj;
  }
  while ((v87 & 1) == 0);
  if (v95)
  {
    v53 = *((_QWORD *)v95 + 155);
    if (v53)
    {
      v54 = *(_BYTE **)(v53 + 1048);
      if (v54)
      {
        if ((*v54 & 2) != 0)
        {
          Espresso::espresso_os_log_subsystem(v51, v52);
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            v80 = objc_msgSend(*((id *)this + 27), "count");
            *(_DWORD *)v106 = 134217984;
            *(_QWORD *)&v106[4] = v80;
            _os_log_debug_impl(&dword_190DAF000, v55, OS_LOG_TYPE_DEBUG, "Espresso::ANERuntimeEngine::allocate_analytics_buffers: Allocated %lu analytics buffers", v106, 0xCu);
          }

          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          obja = *((id *)this + 27);
          v56 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v97, v106, 16);
          if (v56)
          {
            v58 = *(_QWORD *)v98;
            v91 = *MEMORY[0x1E0CBC1E0];
            v89 = *MEMORY[0x1E0CBC008];
            v88 = *MEMORY[0x1E0CBBF08];
            allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            *(_QWORD *)&v57 = 138412546;
            v82 = v57;
            while (2)
            {
              for (m = 0; m != v56; ++m)
              {
                if (*(_QWORD *)v98 != v58)
                  objc_enumerationMutation(obja);
                v60 = *(__int128 **)(*((_QWORD *)&v97 + 1) + 8 * m);
                objc_msgSend(*((id *)this + 27), "objectForKey:", v60, v82);
                v61 = (void *)objc_claimAutoreleasedReturnValue();
                v62 = (Espresso *)objc_msgSend(v61, "intValue");
                if ((int)v62 >= 1)
                {
                  Espresso::espresso_os_log_subsystem(v62, v63);
                  v64 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = v82;
                    *(_QWORD *)&buf[4] = v60;
                    *(_WORD *)&buf[12] = 2112;
                    *(_QWORD *)&buf[14] = v61;
                    _os_log_debug_impl(&dword_190DAF000, v64, OS_LOG_TYPE_DEBUG, "Espresso::ANERuntimeEngine::allocate_analytics_buffers: segment:\"%@\" AnalyticsBufferSize=%@Bytes", buf, 0x16u);
                  }

                  v65 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
                  objc_msgSend(v65, "setObject:forKeyedSubscript:", &unk_1E2DEDC40, v91);
                  objc_msgSend(v65, "setObject:forKeyedSubscript:", v61, v89);
                  objc_msgSend(v65, "setObject:forKeyedSubscript:", &unk_1E2DEDC40, v88);
                  Copy = CFDictionaryCreateCopy(allocator, (CFDictionaryRef)v65);
                  v67 = IOSurfaceCreate(Copy);
                  CFRelease(Copy);
                  if (!v67)
                  {
                    Espresso::espresso_os_log_subsystem(v68, v69);
                    v75 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      v76 = "Espresso::ANERuntimeEngine::allocate_analytics_buffers: IOSurfaceRef could not be allocated";
                      goto LABEL_102;
                    }
LABEL_93:

                    goto LABEL_94;
                  }
                  objc_msgSend(MEMORY[0x1E0CFDF50], "objectWithIOSurface:", v67);
                  v71 = (void *)objc_claimAutoreleasedReturnValue();
                  if (!v71)
                  {
                    Espresso::espresso_os_log_subsystem(0, v70);
                    v75 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      v76 = "Espresso::ANERuntimeEngine::allocate_analytics_buffers: _ANEIOSurfaceObject could not be allocated";
LABEL_102:
                      _os_log_debug_impl(&dword_190DAF000, v75, OS_LOG_TYPE_DEBUG, v76, buf, 2u);
                    }
                    goto LABEL_93;
                  }
                  objc_msgSend(MEMORY[0x1E0CFDF78], "objectWithIOSurface:statType:", v71, 2);
                  v72 = (void **)objc_claimAutoreleasedReturnValue();
                  v73 = (void *)*((_QWORD *)this + 26);
                  v105 = v60;
                  v101 = (uint8_t *)v72;
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v101, &v105, 1);
                  v74 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v73, "addEntriesFromDictionary:", v74);

                }
              }
              v56 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v97, v106, 16);
              if (v56)
                continue;
              break;
            }
          }
LABEL_94:

        }
      }
    }
  }
  v77 = v96;
  if (v96)
  {
    v78 = (unint64_t *)&v96->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_190E4F2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(void)::$_0::operator()(uint64_t a1, uint64_t a2, std::string::size_type *a3)
{
  std::string::size_type v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  _QWORD *v15;
  int v16;
  Espresso *v17;
  const char *v18;
  _BOOL4 v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  Espresso::ANERuntimeEngine::blob_container *v27;
  uint64_t v28;
  Espresso::ANECompilerEngine *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  void *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int v51;
  char *v52;
  char *v53;
  void *v54;
  int v55;
  NSObject *v56;
  NSString *v57;
  int *v58;
  int v59;
  Espresso *v60;
  const char *v61;
  int v62;
  Espresso::ANERuntimeEngine::blob_container *v63;
  __int128 v64;
  unsigned int *v65;
  unsigned int *v66;
  void *v67;
  void *v68;
  NSObject *v69;
  uint64_t v70;
  void *v71;
  void **v72;
  void *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint8_t *v91;
  void *v92;
  void *v93;
  Espresso *v94;
  const char *v95;
  uint64_t v96;
  Espresso::ANERuntimeEngine::blob_container *v97;
  void *v98;
  uint8_t *v99;
  void *v100;
  uint64_t v101;
  std::runtime_error *v102;
  BOOL v103;
  NSObject *v104;
  Espresso *v105;
  const char *v106;
  CFDictionaryRef v107;
  const char *v108;
  NSObject *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  void *v115;
  int v116;
  NSObject *v117;
  Espresso *v118;
  const char *v119;
  NSObject *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  Espresso *v131;
  const char *v132;
  Espresso *v133;
  uint64_t v134;
  void *v135;
  _QWORD *v136;
  std::__shared_weak_count *v137;
  void *v138;
  NSObject *v139;
  Espresso *v140;
  const char *v141;
  uint64_t v142;
  size_t v143;
  std::string::size_type v144;
  std::string::size_type v145;
  std::string::size_type v146;
  NSObject *v147;
  char *v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  EspressoANEIOSurface *v155;
  EspressoANEIOSurface *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  unint64_t *v167;
  unint64_t v168;
  std::string::size_type v169;
  unint64_t v170;
  std::string::size_type *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  std::string::size_type *v180;
  std::string::size_type v181;
  int v182;
  std::string::size_type v183;
  std::string::size_type v184;
  std::runtime_error *exception;
  std::string *v186;
  __int128 v187;
  std::runtime_error *v188;
  std::string *v189;
  __int128 v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  _QWORD *v197;
  uint64_t v198;
  int v201;
  void *v202;
  int v203;
  uint64_t v204;
  Espresso::ANERuntimeEngine::blob_container *v205;
  void *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  _QWORD *v209;
  std::__shared_weak_count *v210;
  void *__p[2];
  __int128 v212;
  void *v213;
  int v214;
  __int16 v215;
  void *v216;
  std::string v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  unsigned int *v221;
  char v222;
  std::string buf;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint8_t v229[8];
  _BYTE v230[10];
  __int16 v231;
  int v232;
  __int128 memptr;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  if (*a3)
  {
    v197 = *(_QWORD **)a1;
    v5 = *(std::__shared_weak_count **)(v3 + 248);
    if (v5 && (v6 = std::__shared_weak_count::lock(v5)) != 0)
    {
      v7 = v6;
      v8 = *(_QWORD *)(v3 + 240) == 0;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      v8 = 1;
    }
    v11 = a1;
    v12 = *(unsigned __int8 *)(a1 + 16);
    v198 = v11;
    v13 = **(_QWORD **)(v11 + 24);
    if (*(_BYTE *)(v11 + 17))
    {
      v14 = 0;
    }
    else
    {
      v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v13 + 328, (_QWORD *)a2);
      if ((_QWORD *)(v13 + 336) == v15)
        v16 = 0;
      else
        v16 = *((_DWORD *)v15 + 31);
      v14 = v16 != 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v217, "lazy_ane_blobs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::map_const_get<std::map<std::string,std::string>>(v13 + 472, (uint64_t)&v217, (uint64_t)__p, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      v19 = buf.__r_.__value_.__l.__size_ == 1 && *buf.__r_.__value_.__l.__data_ == 49;
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    else
    {
      v19 = SHIBYTE(buf.__r_.__value_.__r.__words[2]) == 1 && buf.__r_.__value_.__s.__data_[0] == 49;
    }
    if (SBYTE7(v212) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
    v203 = v19 || v14;
    Espresso::espresso_os_log_subsystem(v17, v18);
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0)
        v49 = a2;
      else
        v49 = *(_QWORD *)a2;
      v50 = *a3;
      v51 = *(unsigned __int8 *)(v198 + 16);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v49;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v50;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      LODWORD(v224) = v8;
      WORD2(v224) = 1024;
      *(_DWORD *)((char *)&v224 + 6) = v51;
      WORD5(v224) = 1024;
      HIDWORD(v224) = v12 != v8;
      LOWORD(v225) = 1024;
      *(_DWORD *)((char *)&v225 + 2) = v203;
      _os_log_debug_impl(&dword_190DAF000, v20, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::force_allocate_blobs] Force-allocating blob=%s ptr=%lld is_primary=%d do_alloc_primary_blob=%d skip=%d lazy=%d", (uint8_t *)&buf, 0x2Eu);
    }

    if (v12 == v8)
    {
      v201 = *(unsigned __int8 *)(v198 + 17);
      v22 = *a3 + 160;
      v21 = *(_DWORD *)v22;
      v23 = *(_DWORD *)(*a3 + 164);
      v24 = *(int *)(*a3 + 168);
      v25 = *(unsigned int *)(*a3 + 172);
      v26 = *(_DWORD *)(*a3 + 176);
      v205 = (Espresso::ANERuntimeEngine::blob_container *)*a3;
      v204 = *(unsigned int *)(*a3 + 180);
      buf.__r_.__value_.__s.__data_[0] = 1;
      v227 = 0;
      v228 = 0;
      v195 = v26;
      v196 = v23;
      v191 = v25;
      v193 = v21;
      buf.__r_.__value_.__l.__size_ = v26;
      buf.__r_.__value_.__r.__words[2] = (int)v25;
      *(_QWORD *)&v224 = v23;
      *((_QWORD *)&v224 + 1) = v21;
      v225 = v24;
      v226 = 0;
      v194 = v24;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = 723714896;
      kdebug_trace();
      v27 = v205;
      Espresso::ANERuntimeEngine::blob_container::cleanup_all_io_surfaces(v205);
      Espresso::abstract_blob_container::shape((char *)&v217, (uint64_t)v205);
      v28 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v217);
      v29 = (Espresso::ANECompilerEngine *)v220;
      if (v220)
      {
        v221 = (unsigned int *)v220;
        operator delete(v220);
      }
      if (!v28)
      {
LABEL_204:
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&buf);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(_QWORD *)(v198 + 8), a2, a2);
        v169 = *a3;
        v171 = (std::string::size_type *)v197[52];
        v170 = v197[53];
        if ((unint64_t)v171 >= v170)
        {
          v174 = (_QWORD *)v197[51];
          v175 = v171 - v174;
          v176 = v175 + 1;
          if ((unint64_t)(v175 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v177 = v170 - (_QWORD)v174;
          if (v177 >> 2 > v176)
            v176 = v177 >> 2;
          if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF8)
            v178 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v178 = v176;
          if (v178)
          {
            if (v178 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v179 = (char *)operator new(8 * v178);
          }
          else
          {
            v179 = 0;
          }
          v180 = (std::string::size_type *)&v179[8 * v175];
          *v180 = v169;
          v172 = v180 + 1;
          if (v171 == v174)
          {
            v173 = v197;
          }
          else
          {
            v173 = v197;
            do
            {
              v181 = *--v171;
              *--v180 = v181;
            }
            while (v171 != v174);
            v171 = (std::string::size_type *)v197[51];
          }
          v173[51] = v180;
          v173[52] = v172;
          v173[53] = &v179[8 * v178];
          if (v171)
            operator delete(v171);
        }
        else
        {
          *v171 = v169;
          v172 = v171 + 1;
          v173 = v197;
        }
        v173[52] = v172;
        return;
      }
      v30 = *((_DWORD *)v205 + 49);
      if ((v30 - 1) >= 2 && v30 != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)__p, *((_DWORD *)v205 + 49));
        v186 = std::string::insert((std::string *)__p, 0, "Unsupported compute path: ");
        v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
        v217.__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v187;
        v186->__r_.__value_.__l.__size_ = 0;
        v186->__r_.__value_.__r.__words[2] = 0;
        v186->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v217);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v31 = (int)v204;
      v32 = *((_QWORD *)v205 + 27);
      v33 = *((_QWORD *)v205 + 28);
      v34 = (v33 - v32) >> 3;
      if ((int)v204 <= v34)
      {
        if ((int)v204 < v34)
        {
          v47 = v32 + 8 * (int)v204;
          while (v33 != v47)
          {
            v48 = *(void **)(v33 - 8);
            v33 -= 8;

          }
          v27 = v205;
          *((_QWORD *)v205 + 28) = v47;
        }
      }
      else
      {
        v35 = (int)v204 - v34;
        v36 = *((_QWORD *)v205 + 29);
        if (v35 <= (v36 - v33) >> 3)
        {
          bzero(*((void **)v205 + 28), 8 * v35);
          *((_QWORD *)v205 + 28) = v33 + 8 * v35;
        }
        else
        {
          if ((v204 & 0x80000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v37 = v36 - v32;
          if (v37 >> 2 > (unint64_t)(int)v204)
            v31 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v31;
          if (v38 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v39 = (char *)operator new(8 * v38);
          v40 = &v39[8 * v34];
          v41 = &v39[8 * v38];
          bzero(v40, 8 * v35);
          v42 = &v40[8 * v35];
          v44 = (_QWORD *)*((_QWORD *)v205 + 27);
          v43 = (_QWORD *)*((_QWORD *)v205 + 28);
          if (v43 == v44)
          {
            v46 = vdupq_n_s64((unint64_t)v43);
          }
          else
          {
            do
            {
              v45 = *--v43;
              *v43 = 0;
              *((_QWORD *)v40 - 1) = v45;
              v40 -= 8;
            }
            while (v43 != v44);
            v46 = *(int64x2_t *)((char *)v205 + 216);
          }
          *((_QWORD *)v205 + 27) = v40;
          *((_QWORD *)v205 + 28) = v42;
          *((_QWORD *)v205 + 29) = v41;
          v52 = (char *)v46.i64[1];
          v53 = (char *)v46.i64[0];
          while (v52 != v53)
          {
            v54 = (void *)*((_QWORD *)v52 - 1);
            v52 -= 8;

          }
          v27 = v205;
          if (v53)
            operator delete(v53);
        }
      }
      v55 = *((_DWORD *)v27 + 48);
      if ((v55 - 1) >= 2)
      {
        if (v55 != 4)
        {
          v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string((std::string *)__p, *((_DWORD *)v27 + 48));
          v189 = std::string::insert((std::string *)__p, 0, "Interleave factor not supported: ");
          v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
          v217.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v190;
          v189->__r_.__value_.__l.__size_ = 0;
          v189->__r_.__value_.__r.__words[2] = 0;
          v189->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v188, &v217);
          __cxa_throw(v188, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (v196 != 3 && (v196 & 3) != 0)
        {
          v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v102, "Invalid interleave");
          __cxa_throw(v102, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      Espresso::ANECompilerEngine::current_ane_arch(v29);
      v56 = objc_claimAutoreleasedReturnValue();
      if ((Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v56, v57) & 1) != 0
        || (v58 = (int *)*((_QWORD *)v27 + 16), *((_QWORD *)v27 + 17) - (_QWORD)v58 != 4))
      {
        v62 = 0;
      }
      else
      {
        v59 = *v58;
        if (v59 == 1278226534)
        {

        }
        else
        {
          v103 = v59 == 843264102;

          if (!v103)
          {
            v62 = 0;
            goto LABEL_69;
          }
        }
        Espresso::espresso_os_log_subsystem(v60, v61);
        v104 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a2 + 23) >= 0)
            v183 = a2;
          else
            v183 = *(_QWORD *)a2;
          LODWORD(v217.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v217.__r_.__value_.__r.__words + 4) = v183;
          _os_log_debug_impl(&dword_190DAF000, v104, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::blob_container] will attempt to bind this blob using IOSurface directly to ANE: %s.", (uint8_t *)&v217, 0xCu);
        }

        v63 = v205;
        if (4 * ((*((_DWORD *)v205 + 48) * (_BYTE)v195) & 0xF))
        {
          v62 = 0;
LABEL_70:
          v64 = *(_OWORD *)(v22 + 16);
          *(_OWORD *)__p = *(_OWORD *)v22;
          v212 = v64;
          compute_for_iosurface_params((uint64_t)&v217, (int *)__p, *((_DWORD *)v63 + 49), *((_DWORD *)v63 + 48), *((_DWORD **)v63 + 16), *((_QWORD *)v63 + 17));
          objc_msgSend(MEMORY[0x1E0C99E20], "set");
          v206 = (void *)objc_claimAutoreleasedReturnValue();
          v65 = (unsigned int *)v220;
          v66 = v221;
          if (v220 != v221)
          {
            do
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v65, v191);
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v206, "addObject:", v67);

              ++v65;
            }
            while (v65 != v66);
          }
          v68 = (void *)MEMORY[0x1E0C99E08];
          if (v222)
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v69 = objc_claimAutoreleasedReturnValue();
            v70 = *(unsigned __int8 *)(a2 + 23);
            if ((v70 & 0x80u) != 0)
              v70 = *(_QWORD *)(a2 + 8);
            if (v70)
            {
              v71 = (void *)MEMORY[0x1E0CB3940];
              std::operator+<char>();
              v72 = (SBYTE7(v212) & 0x80u) == 0 ? __p : (void **)__p[0];
              objc_msgSend(v71, "stringWithUTF8String:", v72, v191);
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSObject setObject:forKeyedSubscript:](v69, "setObject:forKeyedSubscript:", v73, *MEMORY[0x1E0CBC048]);

              if (SBYTE7(v212) < 0)
                operator delete(__p[0]);
            }
            v74 = *(_DWORD *)v220;
            if (*(_DWORD *)v220 == 1278226534)
              v75 = 1278226536;
            else
              v75 = *(_DWORD *)v220;
            if (v74 == 843264102)
              v75 = 843264104;
            if (v62)
              v76 = v74;
            else
              v76 = v75;
            v77 = (void *)MEMORY[0x1E0C99E08];
            v78 = *MEMORY[0x1E0CA8FF0];
            __p[0] = v69;
            v79 = *MEMORY[0x1E0CA90E0];
            *(_QWORD *)&memptr = v78;
            *((_QWORD *)&memptr + 1) = v79;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v217.__r_.__value_.__r.__words[0], v191);
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            __p[1] = v80;
            v234 = *MEMORY[0x1E0CA8FD8];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v217.__r_.__value_.__l.__size_);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            *(_QWORD *)&v212 = v81;
            v235 = *MEMORY[0x1E0CA9040];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v76);
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            *((_QWORD *)&v212 + 1) = v82;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", __p, &memptr, 4);
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v77, "dictionaryWithDictionary:", v83);
            v202 = (void *)objc_claimAutoreleasedReturnValue();

            if ((_DWORD)v76 == 707153000 || (_DWORD)v76 == 706956392)
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v219);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v202, "setValue:forKey:", v84, *MEMORY[0x1E0CA9018]);

            }
          }
          else
          {
            *(_QWORD *)&memptr = *MEMORY[0x1E0CBC1E0];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v217.__r_.__value_.__r.__words[0]);
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            __p[0] = v85;
            *((_QWORD *)&memptr + 1) = *MEMORY[0x1E0CBC008];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v217.__r_.__value_.__l.__size_);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            __p[1] = v86;
            v234 = *MEMORY[0x1E0CBBF08];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v217.__r_.__value_.__r.__words[2]);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            *(_QWORD *)&v212 = v87;
            v235 = *MEMORY[0x1E0CBBF00];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v218);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *((_QWORD *)&v212 + 1) = v88;
            v89 = *MEMORY[0x1E0CBC048];
            v236 = *MEMORY[0x1E0CBC048];
            v90 = (void *)MEMORY[0x1E0CB3940];
            std::operator+<char>();
            if (v232 >= 0)
              v91 = v229;
            else
              v91 = *(uint8_t **)v229;
            objc_msgSend(v90, "stringWithUTF8String:", v91, v191);
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            v213 = v92;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", __p, &memptr, 5);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v68, "dictionaryWithDictionary:", v93);
            v202 = (void *)objc_claimAutoreleasedReturnValue();

            if (SHIBYTE(v232) < 0)
              operator delete(*(void **)v229);

            v96 = *(unsigned __int8 *)(a2 + 23);
            if ((v96 & 0x80u) != 0)
              v96 = *(_QWORD *)(a2 + 8);
            v97 = v205;
            if (v96)
            {
              v98 = (void *)MEMORY[0x1E0CB3940];
              std::operator+<char>();
              if (v232 >= 0)
                v99 = v229;
              else
                v99 = *(uint8_t **)v229;
              objc_msgSend(v98, "stringWithUTF8String:", v99);
              v100 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v202, "setObject:forKeyedSubscript:", v100, v89);

              if (SHIBYTE(v232) < 0)
                operator delete(*(void **)v229);
              v97 = v205;
            }
            if (v221 == v220)
            {
              switch(v218)
              {
                case 1:
                  v101 = 1278226488;
                  break;
                case 4:
                  v101 = 1111970369;
                  break;
                case 2:
                  v101 = 1278226536;
                  break;
                default:
LABEL_141:
                  Espresso::espresso_os_log_subsystem(v94, v95);
                  v120 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
                  {
                    v182 = *((_DWORD *)v97 + 48);
                    LODWORD(__p[0]) = 67110914;
                    HIDWORD(__p[0]) = v204;
                    LOWORD(__p[1]) = 1024;
                    *(_DWORD *)((char *)&__p[1] + 2) = v195;
                    HIWORD(__p[1]) = 1024;
                    LODWORD(v212) = v192;
                    WORD2(v212) = 1024;
                    *(_DWORD *)((char *)&v212 + 6) = v196;
                    WORD5(v212) = 1024;
                    HIDWORD(v212) = v193;
                    LOWORD(v213) = 1024;
                    *(_DWORD *)((char *)&v213 + 2) = v194;
                    HIWORD(v213) = 1024;
                    v214 = v182;
                    v215 = 2112;
                    v216 = v202;
                    _os_log_debug_impl(&dword_190DAF000, v120, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::blob_container::resize] subbatches=%d w=%d h=%d k=%d n=%d seq=%d interleaved=%d -> %@", (uint8_t *)__p, 0x36u);
                  }

                  v207 = 0;
                  v208 = 0;
                  v121 = (std::__shared_weak_count *)*((_QWORD *)v205 + 31);
                  if (v121)
                  {
                    v122 = std::__shared_weak_count::lock(v121);
                    v208 = v122;
                    if (v122)
                    {
                      v123 = *((_QWORD *)v205 + 30);
                      v207 = v123;
                      if (v123)
                      {
                        if (*(_DWORD *)(v123 + 180) != (_DWORD)v204)
                        {
                          v124 = v122;
                          v125 = (unint64_t *)&v122->__shared_owners_;
                          v207 = 0;
                          v208 = 0;
                          do
                            v126 = __ldaxr(v125);
                          while (__stlxr(v126 - 1, v125));
                          if (!v126)
                          {
                            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                            std::__shared_weak_count::__release_weak(v124);
                          }
                        }
                      }
                    }
                  }
                  if ((int)v204 >= 1)
                  {
                    v127 = 0;
                    v128 = *MEMORY[0x1E0CBBF68];
                    v129 = *MEMORY[0x1E0CBBEE0];
                    while (1)
                    {
                      v130 = v202;
                      v131 = v206;
                      v133 = v131;
                      __p[0] = 0;
                      __p[1] = 0;
                      if (v201)
                        break;
                      v136 = 0;
                      v138 = 0;
LABEL_181:
                      v155 = -[EspressoANEIOSurface initWithIOSurfaceProperties:andPixelFormats:]([EspressoANEIOSurface alloc], "initWithIOSurfaceProperties:andPixelFormats:", v130, v133);
                      v156 = v155;
                      if ((v203 & 1) == 0)
                        -[EspressoANEIOSurface doNonLazyAllocation:](v155, "doNonLazyAllocation:", v138);
                      v209 = v136;
                      v210 = (std::__shared_weak_count *)__p[1];
                      if (__p[1])
                      {
                        v157 = (unint64_t *)((char *)__p[1] + 8);
                        do
                          v158 = __ldxr(v157);
                        while (__stxr(v158 + 1, v157));
                      }
                      -[EspressoANEIOSurface setExternal_storage_blob_for_aliasing_mem:](v156, "setExternal_storage_blob_for_aliasing_mem:", &v209);
                      v159 = v210;
                      if (v210)
                      {
                        v160 = (unint64_t *)&v210->__shared_owners_;
                        do
                          v161 = __ldaxr(v160);
                        while (__stlxr(v161 - 1, v160));
                        if (!v161)
                        {
                          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                          std::__shared_weak_count::__release_weak(v159);
                        }
                      }

                      v162 = (std::__shared_weak_count *)__p[1];
                      if (__p[1])
                      {
                        v163 = (unint64_t *)((char *)__p[1] + 8);
                        do
                          v164 = __ldaxr(v163);
                        while (__stlxr(v164 - 1, v163));
                        if (!v164)
                        {
                          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                          std::__shared_weak_count::__release_weak(v162);
                        }
                      }

                      v165 = *((_QWORD *)v205 + 27);
                      v166 = *(void **)(v165 + 8 * v127);
                      *(_QWORD *)(v165 + 8 * v127) = v156;

                      if (++v127 == v204)
                        goto LABEL_197;
                    }
                    if (v207)
                    {
                      v134 = *(_QWORD *)(v207 + 216);
                      if (v127 < (*(_QWORD *)(v207 + 224) - v134) >> 3)
                      {
                        v135 = *(void **)(v134 + 8 * v127);
                        if (v135)
                        {
                          objc_msgSend(v135, "external_storage_blob_for_aliasing_mem");
                          v137 = (std::__shared_weak_count *)*((_QWORD *)&memptr + 1);
                          v136 = (_QWORD *)memptr;
                        }
                        else
                        {
                          v137 = 0;
                          v136 = 0;
                        }
                        __p[0] = v136;
                        __p[1] = v137;
                        goto LABEL_165;
                      }
                      Espresso::espresso_os_log_subsystem(v131, v132);
                      v139 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(memptr) = 0;
                        _os_log_error_impl(&dword_190DAF000, v139, OS_LOG_TYPE_ERROR, "Invalid aliasing state", (uint8_t *)&memptr, 2u);
                      }

                    }
                    v137 = 0;
                    v136 = 0;
LABEL_165:
                    v140 = (Espresso *)getpagesize();
                    LODWORD(v142) = (_DWORD)v140;
                    if (*MEMORY[0x1E0C85AA8] > (unint64_t)(int)v140)
                      v142 = *MEMORY[0x1E0C85AA8];
                    v143 = (int)v142;
                    v144 = v217.__r_.__value_.__l.__size_ * v217.__r_.__value_.__r.__words[2] % (int)v142;
                    v145 = v217.__r_.__value_.__l.__size_ * v217.__r_.__value_.__r.__words[2] + (int)v142 - v144;
                    if (v144)
                      v146 = v145;
                    else
                      v146 = v217.__r_.__value_.__l.__size_ * v217.__r_.__value_.__r.__words[2];
                    if (!v136)
                    {
                      Espresso::espresso_os_log_subsystem(v140, v141);
                      v147 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
                      {
                        LODWORD(memptr) = 134217984;
                        *(_QWORD *)((char *)&memptr + 4) = v146;
                        _os_log_debug_impl(&dword_190DAF000, v147, OS_LOG_TYPE_DEBUG, "ANERuntimeEngine::allocate_io_surface creating blob size=%zu", (uint8_t *)&memptr, 0xCu);
                      }

                      *(_QWORD *)&memptr = 0;
                      if (malloc_type_posix_memalign((void **)&memptr, v143, v146, 0x491C5C26uLL))
                        Espresso::throw_exception_selector<Espresso::memory_error,unsigned long &>(v146);
                      v148 = (char *)operator new(0x58uLL);
                      *((_QWORD *)v148 + 1) = 0;
                      *((_QWORD *)v148 + 2) = 0;
                      *(_QWORD *)v148 = &off_1E2DBED50;
                      v149 = memptr;
                      *((_QWORD *)v148 + 3) = &off_1E2DA1250;
                      *(_OWORD *)(v148 + 56) = 0u;
                      *(_OWORD *)(v148 + 72) = 0u;
                      *((_DWORD *)v148 + 8) = v146;
                      *((_QWORD *)v148 + 5) = v149;
                      v148[48] = 0;
                      __p[0] = v148 + 24;
                      __p[1] = v148;
                      if (v137)
                      {
                        v150 = (unint64_t *)&v137->__shared_owners_;
                        do
                          v151 = __ldaxr(v150);
                        while (__stlxr(v151 - 1, v150));
                        if (!v151)
                        {
                          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                          std::__shared_weak_count::__release_weak(v137);
                        }
                      }
                      v136 = __p[0];
                      *((_BYTE *)__p[0] + 24) = 1;
                    }
                    v152 = v136[2];
                    *(_QWORD *)v229 = v128;
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v152);
                    v153 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_QWORD *)&memptr = v153;
                    *(_QWORD *)v230 = v129;
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v146);
                    v154 = (void *)objc_claimAutoreleasedReturnValue();
                    *((_QWORD *)&memptr + 1) = v154;
                    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &memptr, v229, 2);
                    v138 = (void *)objc_claimAutoreleasedReturnValue();

                    goto LABEL_181;
                  }
LABEL_197:
                  if (v208)
                  {
                    v167 = (unint64_t *)&v208->__shared_owners_;
                    do
                      v168 = __ldaxr(v167);
                    while (__stlxr(v168 - 1, v167));
                    if (!v168)
                    {
                      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                      std::__shared_weak_count::__release_weak(v208);
                    }
                  }

                  if (v220)
                  {
                    v221 = (unsigned int *)v220;
                    operator delete(v220);
                  }
                  goto LABEL_204;
              }
              v107 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, v101);
              v109 = v107;
              if (v107)
              {
                -[__CFDictionary objectForKeyedSubscript:](v107, "objectForKeyedSubscript:", *MEMORY[0x1E0CA91B0]);
                v110 = (void *)objc_claimAutoreleasedReturnValue();
                v111 = v110;
                if (v110)
                {
                  objc_msgSend(v110, "objectAtIndexedSubscript:", 0);
                  v112 = objc_claimAutoreleasedReturnValue();

                  v109 = v112;
                }
                -[NSObject objectForKeyedSubscript:](v109, "objectForKeyedSubscript:", *MEMORY[0x1E0CA90E8]);
                v113 = (void *)objc_claimAutoreleasedReturnValue();
                v115 = v113;
                if (v113)
                {
                  v116 = (int)objc_msgSend(v113, "intValue") / 8;
                }
                else
                {
                  Espresso::espresso_os_log_subsystem(0, v114);
                  v117 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)v229 = 67109376;
                    *(_DWORD *)&v229[4] = v101;
                    *(_WORD *)v230 = 2048;
                    *(_QWORD *)&v230[2] = 0;
                    _os_log_debug_impl(&dword_190DAF000, v117, OS_LOG_TYPE_DEBUG, "No kCVPixelFormatBitsPerBlock entry in the description of format %08x plane %ld\n", v229, 0x12u);
                  }

                  v116 = 0;
                }

              }
              else
              {
                Espresso::espresso_os_log_subsystem(0, v108);
                v109 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v229 = 67109120;
                  *(_DWORD *)&v229[4] = v101;
                  _os_log_debug_impl(&dword_190DAF000, v109, OS_LOG_TYPE_DEBUG, "No format description whatsoever of format %08x\n", v229, 8u);
                }
                v116 = 0;
              }

              if (v218 != v116)
              {
                Espresso::espresso_os_log_subsystem(v118, v119);
                v69 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
                {
                  *(_QWORD *)v229 = 67109632;
                  *(_WORD *)v230 = 2048;
                  *(_QWORD *)&v230[2] = v218;
                  v231 = 1024;
                  v232 = v116;
                  _os_log_debug_impl(&dword_190DAF000, v69, OS_LOG_TYPE_DEBUG, "pixel format %08x did not match bytes per element: got %zd, should be %d", v229, 0x18u);
                }
                goto LABEL_140;
              }
            }
            else
            {
              v101 = *(unsigned int *)v220;
              if (!(_DWORD)v101)
                goto LABEL_141;
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v101);
            v69 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v202, "setObject:forKeyedSubscript:", v69, *MEMORY[0x1E0CBC070]);
          }
LABEL_140:

          v97 = v205;
          goto LABEL_141;
        }
        Espresso::espresso_os_log_subsystem(v105, v106);
        v56 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a2 + 23) >= 0)
            v184 = a2;
          else
            v184 = *(_QWORD *)a2;
          LODWORD(v217.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v217.__r_.__value_.__r.__words + 4) = v184;
          _os_log_debug_impl(&dword_190DAF000, v56, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::blob_container] will attempt to bind this blob using IOSurface directly to ANE: %s.", (uint8_t *)&v217, 0xCu);
        }
        v62 = 1;
        LOBYTE(v203) = 1;
      }

LABEL_69:
      v63 = v205;
      goto LABEL_70;
    }
  }
}

void sub_190E508E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;

  if (__p)
    operator delete(__p);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)(v52 - 256));
  _Unwind_Resume(a1);
}

id Espresso::espresso_os_log_subsystem(Espresso *this, const char *a2)
{
  if (Espresso::espresso_os_log_subsystem(char const*)::onceToken != -1)
    dispatch_once(&Espresso::espresso_os_log_subsystem(char const*)::onceToken, &__block_literal_global_42_4704);
  return (id)Espresso::espresso_os_log_subsystem(char const*)::log_t;
}

void Espresso_scoped_signpost::~Espresso_scoped_signpost(Espresso_scoped_signpost *this)
{
  if (*((_DWORD *)this + 1))
  {
    if (*(_BYTE *)this)
      kdebug_trace();
  }
}

void E5RT::IOBufferObject::InitBufferObject(CFTypeRef *this@<X0>, E5RT::Status *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const __CFDictionary *v12;
  __IOSurface *v13;
  void *__p;
  __int128 v15;
  _QWORD v16[6];
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 24))
  {
    CFRetain(this[4]);
LABEL_5:
    this[5] = IOSurfaceGetBaseAddress((IOSurfaceRef)this[4]);
    E5RT::Status::Status(a2);
    return;
  }
  v16[0] = *MEMORY[0x1E0CBC1E0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", this[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *MEMORY[0x1E0CBC008];
  v17[0] = v4;
  v17[1] = &unk_1E2DED9A0;
  v6 = *MEMORY[0x1E0CBBF08];
  v16[1] = v5;
  v16[2] = v6;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", this[1]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *MEMORY[0x1E0CBBF00];
  v17[2] = v7;
  v17[3] = &unk_1E2DED9A0;
  v9 = *MEMORY[0x1E0CBC070];
  v16[3] = v8;
  v16[4] = v9;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1278226488);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[4] = v10;
  v16[5] = *MEMORY[0x1E0CBBEE8];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", this[6]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v17[5] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 6);
  v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v13 = IOSurfaceCreate(v12);
  this[4] = v13;
  if (IOSurfaceGetBaseAddress(v13))
  {

    goto LABEL_5;
  }
  __p = operator new(0x30uLL);
  v15 = xmmword_191A6FF90;
  strcpy((char *)__p, "Failed to allocate memory IOSurface object.");
  E5RT::Status::Status(a2, 3, &__p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);

}

void sub_190E50E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

E5RT::Status *E5RT::Status::Status(E5RT::Status *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = 0;
  v2 = operator new();
  *(_BYTE *)(v2 + 23) = 0;
  *(_BYTE *)v2 = 0;
  *(_DWORD *)(v2 + 24) = 0;
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = v2;
  if (v3)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    MEMORY[0x19401CD90](v3, 0x1012C405C87E9CELL);
  }
  return this;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = 0;
  v2 = operator new();
  *(_BYTE *)(v2 + 23) = 0;
  *(_BYTE *)v2 = 0;
  *(_DWORD *)(v2 + 24) = 0;
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = v2;
  if (v3)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    MEMORY[0x19401CD90](v3, 0x1012C405C87E9CELL);
  }
  return this;
}

void sub_190E50F1C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_19104125C(v3);
  _Unwind_Resume(exception_object);
}

void sub_190E50FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_190E51134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  __cxa_free_exception(v3);

  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::build(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  Espresso::net *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  Espresso::net *v10;
  std::__shared_weak_count *v11;
  _BOOL4 should_do_ane_blob_aliasing;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  _BYTE *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  Espresso *v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::runtime_error *exception;
  std::runtime_error *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t *v70;
  unint64_t v71;
  void *__p[5];
  _OWORD v73[2];
  int v74;
  Espresso::net *v75;
  std::__shared_weak_count *v76;
  _BYTE buf[12];
  uint64_t v78;

  v2 = a1;
  v78 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (v6 = *(Espresso::net **)(v2 + 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v5;
  Espresso::ANERuntimeEngine::compiler::reset((Espresso::ANERuntimeEngine::compiler *)v2);
  Espresso::ANECompilerEngine::ane_mutable_weights_helper::compute_mutable_weight_offsets((Espresso::ANECompilerEngine::ane_mutable_weights_helper *)(v2 + 312), v6);
  Espresso::net_compiler_segment_based::build((_QWORD *)v2, a2);
  Espresso::ANERuntimeEngine::compiler::force_allocate_blobs((Espresso::ANERuntimeEngine::compiler *)v2);
  v75 = 0;
  v76 = 0;
  v8 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v8
    || (v9 = std::__shared_weak_count::lock(v8), (v76 = v9) == 0)
    || (v10 = *(Espresso::net **)(v2 + 8), (v75 = v10) == 0))
  {
    v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v67, "Inconsistent state");
    __cxa_throw(v67, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = v9;
  should_do_ane_blob_aliasing = Espresso::ANERuntimeEngine::compiler::should_do_ane_blob_aliasing((_QWORD *)v2, v10);
  if (((should_do_ane_blob_aliasing | Espresso::net::is_fallback_gpu(v10)) & 1) == 0)
    goto LABEL_86;
  memset(v73, 0, sizeof(v73));
  v74 = 1065353216;
  Espresso::net::get_producers_of_blobs(v10, (uint64_t)__p);
  v71 = 1;
  v13 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 5) - v13) < 0x11)
    goto LABEL_83;
  v68 = v2;
  v69 = v7;
  v14 = 1;
  do
  {
    *(_QWORD *)buf = &v71;
    v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v10 + 56, &v71, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    v16 = v71 - 1;
    v17 = *((_QWORD *)v75 + 4);
    *(_QWORD *)buf = v71 - 1;
    v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v75 + 96, v71 - 1, buf);
    v20 = (uint64_t *)(v17 + 16 * v16);
    v70 = (uint64_t *)(v13 + 16 * v14);
    v21 = *v70;
    v22 = *(_QWORD **)(*v70 + 64);
    v23 = *v20;
    v24 = *(_QWORD **)(*v20 + 64);
    if (v22[1] != v24[1])
      goto LABEL_11;
    {
      v46 = *(std::__shared_weak_count **)(v21 + 72);
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(p_shared_owners);
        while (__stxr(v48 + 1, p_shared_owners));
        v23 = *v20;
        v24 = *(_QWORD **)(*v20 + 64);
        if (!v24)
        {
LABEL_72:
          v58 = (unint64_t *)&v46->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
          goto LABEL_11;
        }
      }
    }
    else
    {
      v46 = 0;
    }
    v54 = *(std::__shared_weak_count **)(v23 + 72);
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      do
        v57 = __ldaxr(v55);
      while (__stlxr(v57 - 1, v55));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
LABEL_71:
    if (v46)
      goto LABEL_72;
LABEL_11:
    v25 = (unsigned __int8 *)v15[3];
    v26 = (unsigned __int8 *)v15[4];
    if (v25 == v26)
    {
LABEL_38:
      v38 = *v70;
      v39 = *(const void **)(*v70 + 64);
      if (v39
      {
        v41 = *(std::__shared_weak_count **)(v38 + 72);
        if (!v41)
        {
          v40[345] = 1;
          goto LABEL_78;
        }
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        v40[345] = 1;
        v44 = (unint64_t *)&v41->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
      }
      else
      {
        v49 = *v20;
        v50 = *(Espresso **)(*v20 + 64);
        if (!v50
        {
          Espresso::espresso_os_log_subsystem(v50, v18);
          v53 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
          {
            v60 = (_QWORD *)(*v70 + 16);
            if (*(char *)(*v70 + 39) < 0)
              v60 = (_QWORD *)*v60;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v60;
            _os_log_debug_impl(&dword_190DAF000, v53, OS_LOG_TYPE_DEBUG, "layer %s: did not find input from previous layer; neither this kernel nor the one preceding is a context transfer.",
              buf,
              0xCu);
          }

          goto LABEL_78;
        }
        v41 = *(std::__shared_weak_count **)(v49 + 72);
        if (!v41)
        {
          *((_BYTE *)v50 + 346) = 1;
          goto LABEL_78;
        }
        v51 = (unint64_t *)&v41->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        *((_BYTE *)v50 + 346) = 1;
        do
          v45 = __ldaxr(v51);
        while (__stlxr(v45 - 1, v51));
      }
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      goto LABEL_78;
    }
    v27 = 0;
    v28 = v19[3];
    v29 = v19[4];
    do
    {
LABEL_13:
      if (v28 == v29)
        goto LABEL_36;
      v30 = v25[23];
      v31 = *((_QWORD *)v25 + 1);
      if ((v30 & 0x80u) == 0)
        v32 = v25[23];
      else
        v32 = *((_QWORD *)v25 + 1);
      v33 = v28;
      while (1)
      {
        v34 = *(unsigned __int8 *)(v33 + 23);
        v35 = (char)v34;
        if ((v34 & 0x80u) != 0)
          v34 = *(_QWORD *)(v33 + 8);
        if (v32 != v34)
          goto LABEL_31;
        v18 = v35 >= 0 ? (const char *)v33 : *(const char **)v33;
        if ((v30 & 0x80) != 0)
          break;
        if (!(_DWORD)v30)
          goto LABEL_35;
        v36 = v25;
        v37 = v30;
        while (*v36 == *(unsigned __int8 *)v18)
        {
          ++v36;
          ++v18;
          if (!--v37)
          {
            v25 += 24;
            v27 = 1;
            if (v25 != v26)
              goto LABEL_13;
            goto LABEL_78;
          }
        }
LABEL_31:
        v33 += 24;
        if (v33 == v29)
          goto LABEL_36;
      }
      if (memcmp(*(const void **)v25, v18, v31))
        goto LABEL_31;
LABEL_35:
      v27 = 1;
LABEL_36:
      v25 += 24;
    }
    while (v25 != v26);
    if ((v27 & 1) == 0)
      goto LABEL_38;
LABEL_78:
    v14 = v71 + 1;
    v71 = v14;
    v10 = v75;
    v13 = *((_QWORD *)v75 + 4);
  }
  while (v14 < (*((_QWORD *)v75 + 5) - v13) >> 4);
  v11 = v76;
  v2 = v68;
  v7 = v69;
LABEL_83:
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p[2]);
  v61 = __p[0];
  __p[0] = 0;
  if (v61)
    operator delete(v61);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v73);
  if (v11)
  {
LABEL_86:
    v62 = (unint64_t *)&v11->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_BYTE *)(v2 + 288) = 1;
  v64 = (unint64_t *)&v7->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_190E517D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v7 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANERuntimeEngine::compiler::should_do_ane_blob_aliasing(_QWORD *a1, Espresso::net *this)
{
  _BOOL8 result;

  if (!this)
    return 0;
  result = Espresso::net::is_fallback_gpu(this);
  if (result)
    return 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[5] - a1[4]) >> 3) >= 4 && *(_DWORD *)(a1[13] + 144) > 1;
  return result;
}

BOOL Espresso::net::is_fallback_gpu(Espresso::net *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 157);
  if (!v1)
    return 0;
  if ((***(unsigned int (****)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 8)) == 50000
    || (***(unsigned int (****)(_QWORD))(*((_QWORD *)this + 157) + 8))(*(_QWORD *)(*((_QWORD *)this + 157)
                                                                                              + 8)) == 20000)
  {
    return 1;
  }
  return (***(unsigned int (****)(_QWORD))(*((_QWORD *)this + 157) + 8))(*(_QWORD *)(*((_QWORD *)this + 157)
                                                                                                + 8)) == 90000;
}

void Espresso::ANERuntimeEngine::compiler::reset(Espresso::ANERuntimeEngine::compiler *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  uint64_t qos;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  Espresso *v15;
  const char *v16;
  __CFString *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  id v30;
  Espresso *v31;
  const char *v32;
  __CFString *v33;
  NSObject *v34;
  void *v35;
  char v36;
  Espresso *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  id v64;
  Espresso *v65;
  id obj;
  id v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  id v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  char v80[4];
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  uint8_t v87[128];
  uint8_t buf[4];
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  _BOOL4 v97;
  __int16 v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v80[0] = 1;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v81 = 723714928;
  kdebug_trace();
  *((_QWORD *)this + 52) = *((_QWORD *)this + 51);
  v78 = 0;
  v79 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2 && (v79 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v3 = *((_QWORD *)this + 1);
    v78 = v3;
  }
  else
  {
    v3 = 0;
  }
  v64 = *((id *)this + 20);
  v65 = (Espresso *)*((id *)this + 19);
  Espresso::espresso_os_log_subsystem(v65, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v64, "absoluteString");
    v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v59 = objc_msgSend(v58, "UTF8String");
    v60 = -[Espresso UTF8String](objc_retainAutorelease(v65), "UTF8String");
    v61 = *((unsigned __int8 *)this + 144);
    v62 = objc_msgSend(*((id *)this + 22), "count");
    v63 = *((unsigned __int8 *)this + 200);
    *(_DWORD *)buf = 136316418;
    v89 = v59;
    v90 = 2080;
    v91 = v60;
    v92 = 1024;
    v93 = v61;
    v94 = 1024;
    v95 = v62;
    v96 = 1024;
    v97 = v3 != 0;
    v98 = 1024;
    v99 = v63;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::reset] url=%s bid=%s loaded=%d loaded_keys_count=%d network=%d is_in_memory_model=%d", buf, 0x2Eu);

  }
  qos = Espresso::ANERuntimeEngine::compiler::get_qos((uint64_t)this);
  if (*((_BYTE *)this + 144))
  {
    v7 = qos;
    if (*((_BYTE *)this + 200))
    {
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      obj = *((id *)this + 22);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v87, 16);
      if (v8)
      {
        v9 = 0;
        v10 = *(_QWORD *)v75;
        do
        {
          v11 = 0;
          v12 = v9;
          do
          {
            if (*(_QWORD *)v75 != v10)
              objc_enumerationMutation(obj);
            objc_msgSend(*((id *)this + 24), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v74 + 1) + 8 * v11), v64);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v73 = v12;
            v14 = objc_msgSend(v13, "unloadWithQoS:error:", v7, &v73);
            v9 = v73;

            if ((v14 & 1) == 0)
            {
              objc_msgSend(v9, "localizedDescription");
              v15 = (Espresso *)objc_claimAutoreleasedReturnValue();
              if (v15)
                v17 = (__CFString *)v15;
              else
                v17 = &stru_1E2DD80E0;
              Espresso::espresso_os_log_subsystem(v15, v16);
              v18 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                v19 = -[__CFString UTF8String](objc_retainAutorelease(v17), "UTF8String");
                *(_DWORD *)buf = 136315138;
                v89 = v19;
                _os_log_error_impl(&dword_190DAF000, v18, OS_LOG_TYPE_ERROR, "ANECF error: %s ", buf, 0xCu);
              }

            }
            ++v11;
            v12 = v9;
          }
          while (v8 != v11);
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v87, 16);
        }
        while (v8);
        goto LABEL_49;
      }
LABEL_48:
      v9 = 0;
LABEL_49:

      goto LABEL_50;
    }
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    obj = *((id *)this + 22);
    v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v86, 16);
    if (!v20)
      goto LABEL_48;
    v21 = 0;
    v22 = *(_QWORD *)v70;
LABEL_27:
    v23 = 0;
    while (1)
    {
      if (*(_QWORD *)v70 != v22)
        objc_enumerationMutation(obj);
      v24 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * v23);
      objc_msgSend(*((id *)this + 24), "objectForKeyedSubscript:", v24, v64);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = (void *)*((_QWORD *)this + 17);
      v27 = (void *)*((_QWORD *)this + 23);
      if (*(_BYTE *)(*((_QWORD *)this + 13) + 139))
      {
        objc_msgSend(v27, "objectForKeyedSubscript:", v24);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v68 = v21;
        v29 = objc_msgSend(v26, "unloadRealTimeModel:options:qos:error:", v25, v28, v7, &v68);
        v30 = v68;

        if ((v29 & 1) == 0)
        {
          objc_msgSend(v30, "localizedDescription");
          v31 = (Espresso *)objc_claimAutoreleasedReturnValue();
          if (v31)
            v33 = (__CFString *)v31;
          else
            v33 = &stru_1E2DD80E0;
          Espresso::espresso_os_log_subsystem(v31, v32);
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            goto LABEL_45;
          goto LABEL_42;
        }
      }
      else
      {
        objc_msgSend(v27, "objectForKeyedSubscript:", v24);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v67 = v21;
        v36 = objc_msgSend(v26, "unloadModel:options:qos:error:", v25, v35, v7, &v67);
        v30 = v67;

        if ((v36 & 1) == 0)
        {
          objc_msgSend(v30, "localizedDescription");
          v37 = (Espresso *)objc_claimAutoreleasedReturnValue();
          if (v37)
            v33 = (__CFString *)v37;
          else
            v33 = &stru_1E2DD80E0;
          Espresso::espresso_os_log_subsystem(v37, v38);
          v34 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            goto LABEL_42;
LABEL_45:
          v33 = objc_retainAutorelease(v33);
          v39 = -[__CFString UTF8String](v33, "UTF8String");
          *(_DWORD *)buf = 136315138;
          v89 = v39;
          _os_log_error_impl(&dword_190DAF000, v34, OS_LOG_TYPE_ERROR, "ANECF error: %s ", buf, 0xCu);
LABEL_42:

        }
      }
      v21 = v30;

      if (v20 == ++v23)
      {
        v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v86, 16);
        v20 = v40;
        if (!v40)
        {
          v9 = v30;
          goto LABEL_49;
        }
        goto LABEL_27;
      }
    }
  }
  v9 = 0;
LABEL_50:
  *((_BYTE *)this + 144) = 0;
  v41 = objc_opt_new();
  v42 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v41;

  v43 = objc_opt_new();
  v44 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v43;

  v45 = objc_opt_new();
  v46 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v45;

  v47 = objc_opt_new();
  v48 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v47;

  v49 = objc_opt_new();
  v50 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v49;

  v51 = objc_opt_new();
  v52 = (void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v51;

  v53 = (void *)*((_QWORD *)this + 48);
  if (v53 && objc_msgSend(v53, "ioSurfaceForMultiBufferFrame:", 0))
  {
    CFRelease((CFTypeRef)objc_msgSend(*((id *)this + 48), "ioSurfaceForMultiBufferFrame:", 0));
    v54 = (void *)*((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = 0;

  }
  v55 = v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v80);
}

void sub_190E52014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a38);
  _Unwind_Resume(a1);
}

void E5RT::E5ProgramImpl::~E5ProgramImpl(void **this)
{
  E5RT::E5ProgramImpl::~E5ProgramImpl(this);
  JUMPOUT(0x19401CD90);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  if (*((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    v2 = (std::__shared_weak_count *)this[9];
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = (std::__shared_weak_count *)this[9];
    if (!v2)
      goto LABEL_8;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)this[5];
    if (!v5)
      goto LABEL_19;
    goto LABEL_9;
  }
LABEL_8:
  v5 = (char *)this[5];
  if (!v5)
    goto LABEL_19;
LABEL_9:
  v6 = (char *)this[6];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)this[5];
  }
  this[6] = v5;
  operator delete(v7);
LABEL_19:
  v11 = (char *)this[2];
  if (v11)
  {
    v12 = (char *)this[3];
    v13 = this[2];
    if (v12 != v11)
    {
      do
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = this[2];
    }
    this[3] = v11;
    operator delete(v13);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

void std::__shared_ptr_emplace<E5RT::E5FunctionImpl>::__on_zero_shared(uint64_t a1)
{
  E5RT::E5FunctionImpl::~E5FunctionImpl((E5RT::E5FunctionImpl *)(a1 + 24));
}

void E5RT::E5FunctionImpl::~E5FunctionImpl(E5RT::E5FunctionImpl *this)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (void **)*((_QWORD *)this + 53);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_11;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  v7 = (void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v7)
    operator delete(v7);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)this + 38);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)this + 25);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)this + 12);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = *((_QWORD *)this + 10);
    v10 = (void *)*((_QWORD *)this + 9);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v8;
    operator delete(v10);
  }
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_28:
    operator delete(*((void **)this + 3));
    goto LABEL_26;
  }
  if (*((char *)this + 47) < 0)
    goto LABEL_28;
LABEL_26:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::E5FunctionImpl *)((char *)this + 8));
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  E5RT::E5FunctionImpl::~E5FunctionImpl(this);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<E5RT::E5BlockImpl>::__on_zero_shared(uint64_t a1)
{
  E5RT::E5BlockImpl::~E5BlockImpl((E5RT::E5BlockImpl *)(a1 + 24));
}

void std::__shared_ptr_emplace<E5RT::E5BuildInfoImpl>::__on_zero_shared(uint64_t a1)
{
  E5RT::E5BuildInfoImpl::~E5BuildInfoImpl((E5RT::E5BuildInfoImpl *)(a1 + 24));
}

void E5RT::E5BuildInfoImpl::~E5BuildInfoImpl(E5RT::E5BuildInfoImpl *this)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = (void **)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_10:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    operator delete(v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::E5BuildInfoImpl *)((char *)this + 8));
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  E5RT::E5BuildInfoImpl::~E5BuildInfoImpl(this);
  JUMPOUT(0x19401CD90);
}

uint64_t e5rt_tensor_desc_get_strides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCE180;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190E525B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::interpreter_state_t::~interpreter_state_t(Espresso::interpreter_state_t *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

uint64_t e5rt_io_port_is_tensor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC82F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E526C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_get_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC860;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E5279C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::AneInferenceOperation::PrepareOpForEncode(E5RT::Ops::AneInferenceOperation *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 37) + 16))(*((_QWORD *)this + 37));
  return E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::BindDependentAsyncEventsImpl(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  void *v2;
  void *v3;
  id *v4;
  id *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t DependentAsyncEvents;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t *v25;
  _QWORD *v26[2];

  v2 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;

  v3 = (void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;

  if (*((_QWORD *)this + 38))
  {
    v4 = (id *)*((_QWORD *)this + 37);
    if (v4)
    {
      do
      {
        v5 = (id *)*v4;

        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *((_QWORD *)this + 37) = 0;
    v6 = *((_QWORD *)this + 36);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*((_QWORD *)this + 35) + 8 * i) = 0;
    }
    *((_QWORD *)this + 38) = 0;
  }
  DependentAsyncEvents = E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                                         + 1));
  if (*(_QWORD *)(DependentAsyncEvents + 24))
  {
    v9 = DependentAsyncEvents;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:");
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)*((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = v10;

    v12 = *(uint64_t ***)(v9 + 16);
    if (v12)
    {
      v13 = 0;
      do
      {
        v14 = v12[2];
        v15 = (std::__shared_weak_count *)v12[3];
        v26[0] = v14;
        v26[1] = &v15->__vftable;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>((uint64_t)v14);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v15)
        {
          v19 = (unint64_t *)&v15->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        objc_msgSend(MEMORY[0x1E0CFDFA8], "waitEventWithValue:sharedEvent:", E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)v12[2]), v18);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*((id *)this + 40), "setObject:atIndexedSubscript:", v21, v13);

        objc_msgSend(*((id *)this + 40), "objectAtIndexedSubscript:", v13);
        v22 = objc_claimAutoreleasedReturnValue();
        v25 = v12[2];
        v26[0] = &v25;
        v23 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>((uint64_t)this + 280, (uint64_t *)&v25, (uint64_t)&std::piecewise_construct, v26);
        v24 = (void *)v23[3];
        v23[3] = v22;

        ++v13;
        v12 = (uint64_t **)*v12;
      }
      while (v12);
    }
  }
}

void sub_190E529EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190E529FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190E52A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E52A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::BindCompletionAsyncEventImpl(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  void *v2;
  E5RT::AsyncEvent *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  E5RT::AsyncEvent *v17;
  std::__shared_weak_count *v18;
  E5RT::AsyncEvent *v19;
  std::__shared_weak_count *v20;

  v2 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;

  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*((_QWORD *)this + 1), &v19);
  v3 = v19;
  if (!v19)
  {
    v14 = (void *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = 0;

    v13 = v20;
    if (!v20)
      return;
    goto LABEL_13;
  }
  v4 = v20;
  v17 = v19;
  v18 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>((uint64_t)v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1, v17, v18);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = v10;

  objc_msgSend(MEMORY[0x1E0CFDFA0], "signalEventWithValue:symbolIndex:eventType:sharedEvent:", E5RT::AsyncEvent::GetActiveFutureValue(v19), 255, 0, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*((id *)this + 41), "setObject:atIndexedSubscript:", v12, 0);

  v13 = v20;
  if (v20)
  {
LABEL_13:
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_190E52BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E52BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_190E52BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::GetActiveFutureValue(E5RT::IOSurfaceSharedAsyncEvent *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t E5RT::AsyncEvent::GetActiveFutureValue(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

id E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(uint64_t a1)
{
  id *v1;

  if (!v1)
    __cxa_bad_cast();
  return v1[1];
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::PrepareOpForEncode(E5RT::ExecutionStreamOperationInternal **this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint64_t v5;
  E5RT::ExecutionStreamOperationInternal *v6;
  uint64_t v7;
  E5RT::SharedResourceManager *v8;
  uint64_t SharedResourceManager;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  E5RT::ExecutionStreamOperationInternal *v18;
  E5RT::ExecutionStreamOperationInternal **v19;
  uint64_t *v20;
  uint64_t v21;
  E5RT::ExecutionStreamOperationInternal *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  E5RT::ExecutionStreamOperationInternal *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  E5RT::ExecutionStreamOperationInternal *v49;
  uint64_t InputPorts;
  uint64_t v51;
  uint64_t v52;
  E5RT::ExecutionStreamOperationInternal *v53;
  uint64_t v54;
  E5RT::ExecutionStreamOperationInternal *v55;
  uint64_t v56;
  E5RT::ExecutionStreamOperationInternal *v57;
  uint64_t v58;
  E5RT::ExecutionStreamOperationInternal *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 **v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  const char *v67;
  size_t v68;
  size_t v69;
  __int128 *p_dst;
  uint64_t v71;
  uint64_t v72;
  E5RT::ExecutionStreamOperationInternal **v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  size_t v81;
  unsigned __int8 *v82;
  void **p_s1;
  _QWORD *Aliases;
  _QWORD *v85;
  void *v86;
  int v87;
  uint64_t v88;
  E5RT::ExecutionStreamOperationInternal *v89;
  void *v90;
  void *exception;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  std::string *v96;
  __int128 v97;
  void *v98;
  void (**v99)(_QWORD);
  void *v100;
  void *v101;
  uint64_t OutputPorts;
  void *v103;
  id obj;
  E5RT::ExecutionStreamOperationInternal **v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *__s1;
  size_t v110;
  unsigned __int8 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  id v117;
  id v118;
  std::string v119;
  __int128 __dst;
  int64_t v121;
  __int128 __p;
  __int128 v123;
  int v124;
  _QWORD v125[6];
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[128];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  if (!E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]))
  {
    v105 = this;
    E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this[1]);
    v126 = 0x2B23800400000000;
    v127 = 0u;
    v128 = 0u;
    kdebug_trace();
    BYTE7(v123) = 4;
    strcpy((char *)&__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)&__p);
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = os_signpost_id_generate(v2);

    if (SBYTE7(v123) < 0)
      operator delete((void *)__p);
    BYTE7(v123) = 4;
    strcpy((char *)&__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)&__p);
    v4 = objc_claimAutoreleasedReturnValue();
    if (SBYTE7(v123) < 0)
    {
      operator delete((void *)__p);
      if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_10;
    }
    else if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
      goto LABEL_10;
    }
    if (os_signpost_enabled(v4))
    {
      LOWORD(__p) = 0;
      _os_signpost_emit_with_name_impl(&dword_190DAF000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "AneOpPrepareForEncode", (const char *)&unk_191C083FD, (uint8_t *)&__p, 2u);
    }
LABEL_10:

    v125[0] = MEMORY[0x1E0C809B0];
    v125[1] = 3221225472;
    v125[2] = sub_190EFA6F8;
    v125[3] = &__block_descriptor_48_e5_v8__0l;
    v125[4] = v105;
    v125[5] = v3;
    v99 = (void (**)(_QWORD))MEMORY[0x19401D648](v125);
    objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = v105[20];
    v105[20] = (E5RT::ExecutionStreamOperationInternal *)v5;

    v7 = (uint64_t)v105[2];
    SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(v8);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v105 + 12, v7))
    {
      E5RT::Ops::Impl::AneInferenceOperationImpl::LoadAneModel((E5RT::Ops::Impl::AneInferenceOperationImpl *)v105);
      E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(v105[4]);
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v105[21];
      v105[21] = (E5RT::ExecutionStreamOperationInternal *)v17;

      v19 = v105;
      if (!v105[10])
      {
LABEL_58:
        -[E5RT::ExecutionStreamOperationInternal modelAttributes](v19[21], "modelAttributes");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE010]);
        v101 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v101)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "PrepareOpForEncode");
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Cannot extract model description from ANE model. Possible ANE model load failure.");
          E5RT::Status::Status(&v119, 1, &__dst);
          E5RT::E5RTError::E5RTError(exception, &__p, &v119);
        }
        objc_msgSend(v101, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE088]);
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v100, "objectAtIndexedSubscript:", 0);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE070]);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = objc_msgSend(v42, "unsignedIntValue");

        if ((unint64_t)objc_msgSend(v100, "count") >= 2)
        {
          objc_msgSend(v101, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE078]);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = v7 + 24;
          if (*(char *)(v7 + 47) < 0)
            v45 = *(_QWORD *)(v7 + 24);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "objectForKeyedSubscript:", v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v47)
          {
            v95 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&__p, "PrepareOpForEncode");
            std::operator+<char>();
            v96 = std::string::append(&v119, " not found in multi-procedure mach-o.");
            v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
            v121 = v96->__r_.__value_.__r.__words[2];
            __dst = v97;
            v96->__r_.__value_.__l.__size_ = 0;
            v96->__r_.__value_.__r.__words[2] = 0;
            v96->__r_.__value_.__r.__words[0] = 0;
            E5RT::Status::Status(&__s1, 1, &__dst);
            E5RT::E5RTError::E5RTError(v95, &__p, &__s1);
          }
          v43 = objc_msgSend(v47, "unsignedIntValue");

        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v43);
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = v105[23];
        v105[23] = (E5RT::ExecutionStreamOperationInternal *)v48;

        objc_msgSend(v100, "objectAtIndexedSubscript:", v43);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE030]);
        v118 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE058]);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE038]);
        v117 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE060]);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(v105[1]);
        OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(v105[1]);
        v51 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(v105[1]);
        if (objc_msgSend(v118, "count") != *(_QWORD *)(v51 + 24) + *(_QWORD *)(InputPorts + 24))
        {
          v92 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "PrepareOpForEncode");
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid number of inputs in mach-o.");
          E5RT::Status::Status(&v119, 2, &__dst);
          E5RT::E5RTError::E5RTError(v92, &__p, &v119);
        }
        if (objc_msgSend(v103, "count") != *(_QWORD *)(OutputPorts + 24))
        {
          v93 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "PrepareOpForEncode");
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid number of outputs in mach-o.");
          E5RT::Status::Status(&v119, 2, &__dst);
          E5RT::E5RTError::E5RTError(v93, &__p, &v119);
        }
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(_QWORD *)(InputPorts + 24));
        v52 = objc_claimAutoreleasedReturnValue();
        v53 = v105[43];
        v105[43] = (E5RT::ExecutionStreamOperationInternal *)v52;

        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(_QWORD *)(InputPorts + 24));
        v54 = objc_claimAutoreleasedReturnValue();
        v55 = v105[42];
        v105[42] = (E5RT::ExecutionStreamOperationInternal *)v54;

        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(_QWORD *)(OutputPorts + 24));
        v56 = objc_claimAutoreleasedReturnValue();
        v57 = v105[45];
        v105[45] = (E5RT::ExecutionStreamOperationInternal *)v56;

        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(_QWORD *)(OutputPorts + 24));
        v58 = objc_claimAutoreleasedReturnValue();
        v59 = v105[44];
        v105[44] = (E5RT::ExecutionStreamOperationInternal *)v58;

        v116 = 0;
        *(_QWORD *)&__p = &v118;
        *((_QWORD *)&__p + 1) = &v117;
        *(_QWORD *)&v123 = v105;
        *((_QWORD *)&v123 + 1) = &v116;
        sub_190EFA8BC((uint64_t)&__p, *(uint64_t **)(InputPorts + 16));
        sub_190EFA8BC((uint64_t)&__p, *(uint64_t **)(v51 + 16));
        if (v116 != *(_QWORD *)(v51 + 24) + *(_QWORD *)(InputPorts + 24))
        {
          v94 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__dst, "PrepareOpForEncode");
          std::string::basic_string[abi:ne180100]<0>(&v119, "Unable to find ANE input index mappings for all op inputs.");
          E5RT::Status::Status(&__s1, 2, &v119);
          E5RT::E5RTError::E5RTError(v94, &__dst, &__s1);
        }
        v60 = *(uint64_t **)(OutputPorts + 16);
        if (!v60)
        {
          if (!*(_QWORD *)(OutputPorts + 24))
            goto LABEL_131;
          goto LABEL_135;
        }
        v61 = 0;
LABEL_69:
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        obj = v103;
        v62 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v129, 16);
        if (!v62)
          goto LABEL_129;
        v63 = (unsigned __int8 **)(v60 + 2);
        v108 = *(_QWORD *)v113;
LABEL_71:
        v107 = v62;
        v64 = 0;
        while (1)
        {
          if (*(_QWORD *)v113 != v108)
            objc_enumerationMutation(obj);
          v65 = objc_msgSend(*(id *)(*((_QWORD *)&v112 + 1) + 8 * v64), "integerValue");
          objc_msgSend(v106, "objectAtIndexedSubscript:", v65);
          v66 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v67 = (const char *)objc_msgSend(v66, "UTF8String");
          v68 = strlen(v67);
          if (v68 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v69 = v68;
          if (v68 >= 0x17)
          {
            v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v68 | 7) != 0x17)
              v71 = v68 | 7;
            v72 = v71 + 1;
            p_dst = (__int128 *)operator new(v71 + 1);
            *((_QWORD *)&__dst + 1) = v69;
            v121 = v72 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v121) = v68;
            p_dst = &__dst;
            if (!v68)
              goto LABEL_82;
          }
          memmove(p_dst, v67, v69);
LABEL_82:
          *((_BYTE *)p_dst + v69) = 0;

          *((_BYTE *)&v119.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v119, "@output");
          E5Common::StringUtils::GetSubstringBeforeSuffix((uint64_t)&__dst, (uint64_t)&v119, &__s1);
          v73 = (E5RT::ExecutionStreamOperationInternal **)v60[5];
          if (!v73 || *v73 != (E5RT::ExecutionStreamOperationInternal *)&off_1E2D59AC8)
            v73 = 0;
          v74 = HIBYTE(v121);
          if (v121 >= 0)
            v75 = HIBYTE(v121);
          else
            v75 = *((_QWORD *)&__dst + 1);
          v76 = *((char *)v60 + 39);
          if (v76 >= 0)
            v77 = *((unsigned __int8 *)v60 + 39);
          else
            v77 = v60[3];
          if (v75 == v77)
          {
            if (v76 >= 0)
              v78 = (unsigned __int8 *)(v60 + 2);
            else
              v78 = *v63;
            if (v121 < 0)
            {
              if (!memcmp((const void *)__dst, v78, *((size_t *)&__dst + 1)))
                goto LABEL_118;
            }
            else
            {
              if (!HIBYTE(v121))
                goto LABEL_118;
              v79 = (unsigned __int8 *)&__dst;
              while (*v79 == *v78)
              {
                ++v79;
                ++v78;
                if (!--v74)
                  goto LABEL_118;
              }
            }
          }
          v80 = v111;
          if ((v111 & 0x80u) == 0)
            v81 = v111;
          else
            v81 = v110;
          if (v81 == v77)
          {
            if (v76 >= 0)
              v82 = (unsigned __int8 *)(v60 + 2);
            else
              v82 = *v63;
            if ((v111 & 0x80) != 0)
            {
              if (!memcmp(__s1, v82, v110))
                goto LABEL_118;
            }
            else
            {
              if (!v111)
                goto LABEL_118;
              p_s1 = &__s1;
              while (*(unsigned __int8 *)p_s1 == *v82)
              {
                p_s1 = (void **)((char *)p_s1 + 1);
                ++v82;
                if (!--v80)
                  goto LABEL_118;
              }
            }
          }
          Aliases = (_QWORD *)E5RT::IOPortPriv::GetAliases(v73);
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(Aliases, (uint64_t)&__dst)|| (v85 = (_QWORD *)E5RT::IOPortPriv::GetAliases(v73), std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v85, (uint64_t)&__s1)))
          {
LABEL_118:
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v65);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            -[E5RT::ExecutionStreamOperationInternal setObject:atIndexedSubscript:](v105[45], "setObject:atIndexedSubscript:", v86, v61);

            v87 = 0;
            ++v61;
            if (((char)v111 & 0x80000000) == 0)
              goto LABEL_119;
            goto LABEL_124;
          }
          v87 = 1;
          if (((char)v111 & 0x80000000) == 0)
          {
LABEL_119:
            if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_120;
            goto LABEL_125;
          }
LABEL_124:
          operator delete(__s1);
          if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_120:
            if (SHIBYTE(v121) < 0)
              goto LABEL_126;
            goto LABEL_121;
          }
LABEL_125:
          operator delete(v119.__r_.__value_.__l.__data_);
          if (SHIBYTE(v121) < 0)
          {
LABEL_126:
            operator delete((void *)__dst);
            if (!v87)
              goto LABEL_129;
            goto LABEL_127;
          }
LABEL_121:
          if (!v87)
            goto LABEL_129;
LABEL_127:
          if (++v64 == v107)
          {
            v62 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v129, 16);
            if (!v62)
            {
LABEL_129:

              v60 = (uint64_t *)*v60;
              if (!v60)
              {
                if (v61 == *(_QWORD *)(OutputPorts + 24))
                {
LABEL_131:
                  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                  v88 = objc_claimAutoreleasedReturnValue();
                  v89 = v105[46];
                  v105[46] = (E5RT::ExecutionStreamOperationInternal *)v88;

                  *(_QWORD *)&v127 = -[E5RT::ExecutionStreamOperationInternal programHandle](v105[21], "programHandle");
                  v99[2](v99);

                  if (E5RT::g_trace_analysis_level >= v126)
                    kdebug_trace();
                  return;
                }
LABEL_135:
                v90 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(&__dst, "PrepareOpForEncode");
                std::string::basic_string[abi:ne180100]<0>(&v119, "Unable to find ANE output index mappings for all op outputs.");
                E5RT::Status::Status(&__s1, 2, &v119);
                E5RT::E5RTError::E5RTError(v90, &__dst, &__s1);
              }
              goto LABEL_69;
            }
            goto LABEL_71;
          }
        }
      }
      __p = 0u;
      v123 = 0u;
      v124 = 1065353216;
      *(_QWORD *)&__dst = v7 + 24;
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, v7 + 24, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
      if (v20 + 5 != (uint64_t *)(v105 + 7))
      {
        *((_DWORD *)v20 + 18) = *((_DWORD *)v105 + 22);
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v20 + 5, (uint64_t *)v105[9], 0);
      }
      E5Common::GetANEFAdaptedModel(v105[21], (uint64_t)&__p);
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = v105[21];
      v105[21] = (E5RT::ExecutionStreamOperationInternal *)v21;

      std::unordered_map<std::string,std::unordered_map<std::string,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
LABEL_57:
      v19 = v105;
      goto LABEL_58;
    }
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v105 + 12, v7);
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v11 = *((unsigned __int8 *)v10 + 63);
    if ((v11 & 0x80u) == 0)
      v12 = *((unsigned __int8 *)v10 + 63);
    else
      v12 = v10[6];
    v13 = *(unsigned __int8 *)(v7 + 23);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(v7 + 8);
    if (v12 != v13)
      goto LABEL_31;
    v15 = (const void **)(v10 + 5);
    if (v14 >= 0)
      v16 = (unsigned __int8 *)v7;
    else
      v16 = *(unsigned __int8 **)v7;
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(*v15, v16, v10[6]))
      {
LABEL_31:
        BYTE7(v123) = 0;
        LOBYTE(__p) = 0;
        E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, (__int128 *)v7, 0, (uint64_t *)&__p, 0, (uint64_t *)&__dst);
        v23 = __dst;
        __dst = 0uLL;
        v24 = (std::__shared_weak_count *)v105[18];
        *(_OWORD *)(v105 + 17) = v23;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
        if (*((_QWORD *)&__dst + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (SBYTE7(v123) < 0)
          operator delete((void *)__p);
      }
    }
    else if (*((_BYTE *)v10 + 63))
    {
      while (*(unsigned __int8 *)v15 == *v16)
      {
        v15 = (const void **)((char *)v15 + 1);
        ++v16;
        if (!--v11)
          goto LABEL_43;
      }
      goto LABEL_31;
    }
LABEL_43:
    v30 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v105 + 12, v7);
    if (!v30)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    BYTE7(v123) = 0;
    LOBYTE(__p) = 0;
    E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, (__int128 *)(v30 + 5), 0, (uint64_t *)&__p, 0, (uint64_t *)&__dst);
    v31 = __dst;
    __dst = 0uLL;
    v32 = (std::__shared_weak_count *)v105[5];
    *((_OWORD *)v105 + 2) = v31;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (SBYTE7(v123) < 0)
      operator delete((void *)__p);
    E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(v105[4]);
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = v105[21];
    v105[21] = (E5RT::ExecutionStreamOperationInternal *)v38;

    goto LABEL_57;
  }
}

void sub_190E53B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(_QWORD), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  std::unordered_map<std::string,std::unordered_map<std::string,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
  a11[2](a11);

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a55);
  _Unwind_Resume(a1);
}

void sub_190E53EBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;

  if (a27 < 0)
  {
    operator delete(__p);
    if ((a44 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a44 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a50 & 0x80000000) == 0)
    {
LABEL_5:

      JUMPOUT(0x190E53E84);
    }
LABEL_4:
    operator delete(a45);
    goto LABEL_5;
  }
  operator delete(a39);
  if ((a50 & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

uint64_t E5RT::IOPortPriv::GetAliases(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetOutputPorts(this[1]);
}

uint64_t E5Common::StringUtils::GetSubstringBeforeSuffix@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  size_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  result = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)a1, (unsigned __int8 *)a2);
  if (!(_DWORD)result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v7 = *(unsigned __int8 *)(a1 + 23);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if ((v7 & 0x80u) == 0)
  {
    v9 = (const void *)a1;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v9 = *(const void **)a1;
  }
  if (v7 >= v7 - v8)
    v10 = v7 - v8;
  else
    v10 = v7;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v10 >= 0x17)
  {
    v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v11 = v10 | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v12 | 0x8000000000000000;
    *a3 = v13;
    a3 = v13;
  }
  else
  {
    *((_BYTE *)a3 + 23) = v10;
    if (!v10)
      goto LABEL_19;
  }
  result = (uint64_t)memmove(a3, v9, v10);
LABEL_19:
  *((_BYTE *)a3 + v10) = 0;
  return result;
}

uint64_t E5Common::StringUtils::StringEndsWithSuffix(uint64_t *a1, unsigned __int8 *a2)
{
  size_t v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  _BOOL8 v7;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  const void **p_dst;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  const void **v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  const void **v27;
  const void **__dst;
  size_t __n;
  int64_t v31;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  v5 = a2[23];
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  v6 = v4 - v5;
  if (v4 >= v5)
  {
    v9 = a1;
    if ((v2 & 0x80) != 0)
    {
      if (v3 >= v6)
      {
        v9 = (uint64_t *)*a1;
        if (v3 - v6 >= v5)
          v11 = v5;
        else
          v11 = v3 - v6;
        if (v11 < 0x7FFFFFFFFFFFFFF8)
        {
LABEL_14:
          if (v11 >= 0x17)
          {
            v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v13 = v11 | 7;
            v14 = v13 + 1;
            p_dst = (const void **)operator new(v13 + 1);
            __n = v11;
            v31 = v14 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v31) = v11;
            p_dst = (const void **)&__dst;
            if (!v11)
            {
LABEL_21:
              v7 = 0;
              *((_BYTE *)p_dst + v11) = 0;
              if (v31 >= 0)
                v15 = HIBYTE(v31);
              else
                v15 = __n;
              v16 = a2[23];
              v17 = (char)v16;
              if ((v16 & 0x80u) != 0)
                v16 = *((_QWORD *)a2 + 1);
              if (v15 == v16)
              {
                if (v17 >= 0)
                  v18 = a2;
                else
                  v18 = *(unsigned __int8 **)a2;
                if (v31 < 0)
                {
                  v27 = __dst;
                  v7 = memcmp(__dst, v18, __n) == 0;
                  goto LABEL_47;
                }
                if (!HIBYTE(v31))
                  return 1;
                v19 = HIBYTE(v31) - 1;
                v20 = (const void **)&__dst;
                do
                {
                  v22 = *(unsigned __int8 *)v20;
                  v20 = (const void **)((char *)v20 + 1);
                  v21 = v22;
                  v24 = *v18++;
                  v23 = v24;
                  v26 = v19-- != 0;
                  v7 = v21 == v23;
                }
                while (v21 == v23 && v26);
              }
              if ((v31 & 0x8000000000000000) == 0)
                return v7;
              v27 = __dst;
LABEL_47:
              operator delete(v27);
              return v7;
            }
          }
          memmove(p_dst, (char *)v9 + v6, v11);
          goto LABEL_21;
        }
LABEL_45:
        std::string::__throw_length_error[abi:ne180100]();
      }
    }
    else if (v6 <= v2)
    {
      v10 = v2 - v6;
      if (v10 >= v5)
        v11 = v5;
      else
        v11 = v10;
      if (v11 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_14;
      goto LABEL_45;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  return 0;
}

id E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(const void *a1)
{
  id *v1;

  if (!v1)
    __cxa_bad_cast();
  return v1[4];
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    v30 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190E545D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 136;
}

uint64_t flatbuffers::Verifier::VerifyVectorOfTables<E5RT_FB::SectionData>(uint64_t *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = E5RT_FB::SectionData::Verify((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t E5RT_FB::SectionData::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int *v25;
  char *v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v2 = *a2;
  v3 = (char *)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5))
    return 0;
  v14 = (unint64_t)&v3[-v9];
  if ((((_DWORD)v3 - (_DWORD)v9) & 1) != 0)
  {
    v15 = 0;
    if (v4 || v6 - 2 < v14)
      return v15;
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1)
    return 0;
  v8 = v6 >= v16;
  v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u)
    goto LABEL_55;
  v20 = v19[2];
  if (!v19[2])
    goto LABEL_55;
  v15 = 0;
  v21 = (unint64_t)&v3[v20];
  v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24)
      return 0;
    v15 = 0;
    v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    v26 = (char *)v25 - v2;
    v27 = (v26 & 3) == 0 || v4 == 0;
    v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      v29 = *v25;
      if (v29 > 0x7FFFFFFE)
        return 0;
      v30 = v29 + 4;
      v8 = v6 >= v30;
      v31 = v6 - v30;
      if (v31 == 0 || !v8 || v31 < (unint64_t)v26)
        return 0;
LABEL_55:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v15;
}

void Espresso::single_match_replace<Espresso::ANECompilerEngine::elementwise_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_190E54BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context16transform_ew_powEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  float *v6;
  float *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  float v17;
  uint64_t v18;
  void **v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  __int128 *v30;
  __int128 v31;
  uint64_t *p_size;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  std::string **v36;
  uint64_t v37;
  unint64_t v38;
  std::string **v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  __int128 v45;
  const void *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  void *v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  Espresso::net *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  unsigned __int8 **v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  void *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  size_t v104;
  __int128 *v105;
  const void *v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  size_t v117;
  __int128 *v118;
  std::string *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t i;
  unint64_t *v124;
  unint64_t v125;
  uint64_t **v126;
  char *v127;
  __int128 v128;
  const void *v129;
  uint64_t **v130;
  char *v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  std::string *v140;
  void **v141;
  std::string *v142;
  std::string *v143;
  void **p_data;
  uint64_t v145[2];
  uint64_t v146;
  std::string::size_type size;
  std::string v148;
  std::string v149;
  __int128 lpsrc;
  __int128 v151;
  uint64_t v152;
  void *v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156[2];
  std::string v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void ***v160;
  char v161;
  std::string v162;
  uint64_t v163;
  _BYTE __str[32];
  uint64_t v165;
  void *__p;
  void *v167;
  uint64_t v168;
  __int128 v169;
  _BYTE v170[32];
  __int128 v171;
  std::string v172;
  char v173;
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) != v3 && v3 != 0)
    return;
  v6 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
  if (*(_DWORD *)v6 != 13)
    return;
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 40) + 96;
  *(_QWORD *)&v169 = a2[3].i32[2];
  v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v169, &v169);
  if (v9[4] - v9[3] != 24)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("EW POW cannot have more than one output.");
  v10 = *(_QWORD *)(a1 + 40) + 56;
  *(_QWORD *)&v169 = a2[3].i32[2];
  v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v169, &v169);
  if (v11[4] - v11[3] != 24)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("EW POW cannot have more than one input.");
  v12 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(std::__shared_weak_count **)(v12 + 24);
  v158 = v14;
  v159 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = v7[2];
  if (v17 == 0.5)
  {
    v172.__r_.__value_.__r.__words[2] = 897988541;
    v173 = 0;
    v174 = 0;
    v172.__r_.__value_.__r.__words[0] = 11;
    v172.__r_.__value_.__l.__size_ = 1065353216;
    Espresso::abstract_engine_factory::shared(__str);
    v18 = *(_QWORD *)__str;
    std::string::basic_string[abi:ne180100]<0>(&v169, "elementwise");
    LODWORD(v157.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v158 + 8))(*(_QWORD *)(v158 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v18, (uint64_t)&v158, (uint64_t)&v169, (uint64_t)&v172, (int *)&v157);
    if ((_QWORD)lpsrc
    {
      v139 = (std::__shared_weak_count *)v19;
      v140 = (std::string *)*((_QWORD *)&lpsrc + 1);
      if (*((_QWORD *)&lpsrc + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
    }
    else
    {
      v139 = 0;
      v140 = 0;
    }
    if (*((_QWORD *)&lpsrc + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&lpsrc + 1) + 16))(*((_QWORD *)&lpsrc + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&lpsrc + 1));
      }
    }
    if ((v170[7] & 0x80000000) != 0)
      operator delete((void *)v169);
    v24 = *(std::__shared_weak_count **)&__str[8];
    if (*(_QWORD *)&__str[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
    if (*(char *)(v27 + 39) < 0)
      std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(v27 + 16), *(_QWORD *)(v27 + 24));
    else
      v157 = *(std::string *)(v27 + 16);
    Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::remove_layer(a2);
    v156[0] = (uint64_t)v139;
    v156[1] = (uint64_t)v140;
    if (v140)
    {
      p_size = (uint64_t *)&v140->__r_.__value_.__l.__size_;
      do
        v33 = __ldxr((unint64_t *)p_size);
      while (__stxr(v33 + 1, (unint64_t *)p_size));
    }
    std::string::basic_string[abi:ne180100]<0>(&v169, "elementwise");
    v34 = *(_QWORD *)(a1 + 40) + 56;
    v35 = a2[3].i32[2];
    *(_QWORD *)&lpsrc = v35;
    v36 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34, v35, &lpsrc);
    v37 = *(_QWORD *)(a1 + 40) + 96;
    v38 = a2[3].i32[2];
    *(_QWORD *)__str = v38;
    v39 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v38, __str);
    Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::add_kernel(a2, v156, (const std::string *)&v169, &v157, v36 + 3, v39 + 3, 0);
    if ((v170[7] & 0x80000000) != 0)
      operator delete((void *)v169);
    if (v140)
    {
      v40 = (uint64_t *)&v140->__r_.__value_.__l.__size_;
      do
        v41 = __ldaxr((unint64_t *)v40);
      while (__stlxr(v41 - 1, (unint64_t *)v40));
      if (!v41)
      {
        (*(void (**)(std::string *))(v140->__r_.__value_.__r.__words[0] + 16))(v140);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v140);
      }
    }
    v42 = *(_QWORD *)(a1 + 40);
    v43 = a2[3].i32[2];
    *(_QWORD *)__str = v43;
    *(_QWORD *)&lpsrc = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v42 + 56, v43, __str)[3];
    v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v42 + 184), (_QWORD *)lpsrc, (__int128 **)&lpsrc);
    v45 = *(_OWORD *)(v44 + 72);
    v169 = *(_OWORD *)(v44 + 56);
    *(_OWORD *)v170 = v45;
    v46 = (const void *)*((_QWORD *)v44 + 12);
    *(_QWORD *)&v170[16] = *((_QWORD *)v44 + 11);
    *(_QWORD *)&v170[24] = 0;
    v171 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v170[24], v46, *((_QWORD *)v44 + 13), (uint64_t)(*((_QWORD *)v44 + 13) - (_QWORD)v46) >> 2);
    *(_OWORD *)__str = v169;
    *(_OWORD *)&__str[16] = *(_OWORD *)v170;
    v165 = *(_QWORD *)&v170[16];
    __p = 0;
    v167 = 0;
    v168 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)&v170[24], v171, (uint64_t)(v171 - *(_QWORD *)&v170[24]) >> 2);
    memset(&v148, 0, sizeof(v148));
    v142 = &v148;
    LOBYTE(v143) = 0;
    v148.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[2] = v148.__r_.__value_.__r.__words[0] + 64;
    v148.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v148.__r_.__value_.__r.__words[2], (__int128 *)__str, &v169, (uint64_t)v148.__r_.__value_.__l.__data_);
    ((void (*)(std::string *__return_ptr, std::__shared_weak_count *, std::string *))v139->__vftable[1].__get_deleter)(&v149, v139, &v148);
    v47 = *(_QWORD *)(v149.__r_.__value_.__r.__words[0] + 32);
    v48 = *(_OWORD *)(v149.__r_.__value_.__r.__words[0] + 16);
    lpsrc = *(_OWORD *)v149.__r_.__value_.__l.__data_;
    v151 = v48;
    v152 = v47;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v153, *(const void **)(v149.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v149.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v149.__r_.__value_.__r.__words[0] + 48) - *(_QWORD *)(v149.__r_.__value_.__r.__words[0] + 40)) >> 2);
    v142 = &v149;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
    v142 = &v148;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
    if (__p)
    {
      v167 = __p;
      operator delete(__p);
    }
    v49 = *(_QWORD *)(a1 + 40);
    v50 = a2[3].i32[2];
    v149.__r_.__value_.__r.__words[0] = v50;
    *(_QWORD *)__str = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v49 + 96, v50, &v149)[3];
    v51 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v49 + 184), *(_QWORD **)__str, (__int128 **)__str);
    v52 = v151;
    *(_OWORD *)(v51 + 56) = lpsrc;
    *(_OWORD *)(v51 + 72) = v52;
    *((_QWORD *)v51 + 11) = v152;
    if (v51 + 56 != (char *)&lpsrc)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v51 + 96, (char *)v153, (uint64_t)v154, (v154 - (_BYTE *)v153) >> 2);
    if (v153)
    {
      v154 = v153;
      operator delete(v153);
    }
    if (*(_QWORD *)&v170[24])
    {
      *(_QWORD *)&v171 = *(_QWORD *)&v170[24];
      operator delete(*(void **)&v170[24]);
    }
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if (v140)
    {
      v53 = (uint64_t *)&v140->__r_.__value_.__l.__size_;
      do
        v54 = __ldaxr((unint64_t *)v53);
      while (__stlxr(v54 - 1, (unint64_t *)v53));
      if (!v54)
      {
        (*(void (**)(std::string *))(v140->__r_.__value_.__r.__words[0] + 16))(v140);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v140);
      }
    }
    goto LABEL_207;
  }
  if (v17 != 1.0)
  {
    if (floorf(v17) != v17)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid alpha for EW POW on ANE.");
    if (v17 < 2.0)
      goto LABEL_207;
    *(_QWORD *)&v151 = 897988541;
    BYTE8(v151) = 0;
    HIDWORD(v153) = 0;
    LODWORD(v154) = 0;
    *(_QWORD *)&lpsrc = 1;
    *((_QWORD *)&lpsrc + 1) = 1065353216;
    Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::remove_layer(a2);
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::basic_string[abi:ne180100]<0>(&v172, "");
    v55 = *(_QWORD *)(a1 + 40) + 56;
    *(_QWORD *)&v169 = a2[3].i32[2];
    v56 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55, v169, &v169)[3];
    if (*((char *)v56 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)v56, *((_QWORD *)v56 + 1));
    }
    else
    {
      v57 = *v56;
      v157.__r_.__value_.__r.__words[2] = *((_QWORD *)v56 + 2);
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v57;
    }
    v90 = (int)v7[2];
    if (v90 < 2)
    {
LABEL_200:
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v172.__r_.__value_.__l.__data_);
      if ((__str[23] & 0x80000000) == 0)
        goto LABEL_207;
      v89 = *(void **)__str;
      goto LABEL_206;
    }
    v91 = v90;
    v92 = 2;
    while (1)
    {
      Espresso::abstract_engine_factory::shared(&v148);
      v93 = v148.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v169, "elementwise");
      LODWORD(v142) = (***(uint64_t (****)(_QWORD))(v158 + 8))(*(_QWORD *)(v158 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v93, (uint64_t)&v158, (uint64_t)&v169, (uint64_t)&lpsrc, (int *)&v142);
      if (!v149.__r_.__value_.__r.__words[0])
        break;
      if (!v94)
        break;
      v146 = (uint64_t)v94;
      size = v149.__r_.__value_.__l.__size_;
      if (v149.__r_.__value_.__l.__size_)
      {
        v95 = (unint64_t *)(v149.__r_.__value_.__l.__size_ + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
LABEL_111:
        v97 = (std::__shared_weak_count *)v149.__r_.__value_.__l.__size_;
        if (v149.__r_.__value_.__l.__size_)
        {
          v98 = (unint64_t *)(v149.__r_.__value_.__l.__size_ + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
      }
      if ((v170[7] & 0x80000000) != 0)
        operator delete((void *)v169);
      v100 = (std::__shared_weak_count *)v148.__r_.__value_.__l.__size_;
      if (v148.__r_.__value_.__l.__size_)
      {
        v101 = (unint64_t *)(v148.__r_.__value_.__l.__size_ + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
      if (*(char *)(v103 + 39) >= 0)
        v104 = *(unsigned __int8 *)(v103 + 39);
      else
        v104 = *(_QWORD *)(v103 + 24);
      std::string::basic_string[abi:ne180100]((uint64_t)&v169, v104 + 14);
      if (v170[7] >= 0)
        v105 = &v169;
      else
        v105 = (__int128 *)v169;
      if (v104)
      {
        if (*(char *)(v103 + 39) >= 0)
          v106 = (const void *)(v103 + 16);
        else
          v106 = *(const void **)(v103 + 16);
        memmove(v105, v106, v104);
      }
      strcpy((char *)v105 + v104, "_ew_pow_xform_");
      std::to_string(&v148, v92 - 2);
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v107 = &v148;
      else
        v107 = (std::string *)v148.__r_.__value_.__r.__words[0];
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v108 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
      else
        v108 = v148.__r_.__value_.__l.__size_;
      v109 = std::string::append((std::string *)&v169, (const std::string::value_type *)v107, v108);
      v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v110;
      v109->__r_.__value_.__l.__size_ = 0;
      v109->__r_.__value_.__r.__words[2] = 0;
      v109->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v148.__r_.__value_.__l.__data_);
      if ((v170[7] & 0x80000000) != 0)
        operator delete((void *)v169);
      if (v92 == 2)
      {
        v111 = *(_QWORD *)(a1 + 40) + 56;
        v112 = a2[3].i32[2];
        *(_QWORD *)&v169 = v112;
        v113 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v111, v112, &v169);
        std::string::operator=(&v172, (const std::string *)v113[3]);
      }
      else
      {
        std::string::operator=(&v172, (const std::string *)__str);
      }
      if (v92 == v91)
      {
        v114 = *(_QWORD *)(a1 + 40) + 96;
        v115 = a2[3].i32[2];
        *(_QWORD *)&v169 = v115;
        v116 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v114, v115, &v169);
        std::string::operator=((std::string *)__str, (const std::string *)v116[3]);
      }
      else
      {
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
        else
          v117 = v149.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v169, v117 + 7);
        if (v170[7] >= 0)
          v118 = &v169;
        else
          v118 = (__int128 *)v169;
        if (v117)
        {
          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v119 = &v149;
          else
            v119 = (std::string *)v149.__r_.__value_.__r.__words[0];
          memmove(v118, v119, v117);
        }
        strcpy((char *)v118 + v117, "_output");
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        *(_OWORD *)__str = v169;
        *(_QWORD *)&__str[16] = *(_QWORD *)v170;
      }
      v120 = (std::__shared_weak_count *)size;
      v145[0] = v146;
      v145[1] = size;
      if (size)
      {
        v121 = (unint64_t *)(size + 8);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      std::string::basic_string[abi:ne180100]<0>(&v148, "elementwise");
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v169, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
      }
      else
      {
        v169 = *(_OWORD *)&v172.__r_.__value_.__l.__data_;
        *(_QWORD *)v170 = *((_QWORD *)&v172.__r_.__value_.__l + 2);
      }
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)&v170[8], v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
      else
        *(std::string *)&v170[8] = v157;
      v142 = 0;
      v143 = 0;
      p_data = 0;
      v139 = (std::__shared_weak_count *)&v142;
      LOBYTE(v140) = 0;
      v142 = (std::string *)operator new(0x30uLL);
      v143 = v142;
      p_data = (void **)&v142[2].__r_.__value_.__l.__data_;
      v143 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v169, &v171, v142);
      if ((__str[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
      else
        v162 = *(std::string *)__str;
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v160 = (void ***)&v139;
      v161 = 0;
      v139 = (std::__shared_weak_count *)operator new(0x18uLL);
      v140 = (std::string *)v139;
      v141 = (void **)&v139[1].__vftable;
      v140 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v141, (__int128 *)&v162, (__int128 *)&v163, (std::string *)v139);
      Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::add_kernel(a2, v145, &v148, &v149, &v142, (std::string **)&v139, 0);
      v160 = (void ***)&v139;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v162.__r_.__value_.__l.__data_);
      v139 = (std::__shared_weak_count *)&v142;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
      for (i = 0; i != -48; i -= 24)
      {
        if ((char)v170[i + 31] < 0)
          operator delete(*(void **)&v170[i + 8]);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v148.__r_.__value_.__l.__data_);
      if (v120)
      {
        v124 = (unint64_t *)&v120->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v126 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      v127 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v126, &v172, (__int128 **)&v148);
      v128 = *(_OWORD *)(v127 + 72);
      v169 = *(_OWORD *)(v127 + 56);
      *(_OWORD *)v170 = v128;
      v129 = (const void *)*((_QWORD *)v127 + 12);
      *(_QWORD *)&v170[16] = *((_QWORD *)v127 + 11);
      *(_QWORD *)&v170[24] = 0;
      v171 = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v170[24], v129, *((_QWORD *)v127 + 13), (uint64_t)(*((_QWORD *)v127 + 13) - (_QWORD)v129) >> 2);
      v130 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      v148.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      v131 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v130, __str, (__int128 **)&v148);
      v132 = *(_OWORD *)v170;
      *(_OWORD *)(v131 + 56) = v169;
      *(_OWORD *)(v131 + 72) = v132;
      *((_QWORD *)v131 + 11) = *(_QWORD *)&v170[16];
      if (v131 + 56 != (char *)&v169)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v131 + 96, *(char **)&v170[24], v171, (uint64_t)(v171 - *(_QWORD *)&v170[24]) >> 2);
      if (*(_QWORD *)&v170[24])
      {
        *(_QWORD *)&v171 = *(_QWORD *)&v170[24];
        operator delete(*(void **)&v170[24]);
      }
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      v133 = (std::__shared_weak_count *)size;
      if (size)
      {
        v134 = (unint64_t *)(size + 8);
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      if (++v92 > v91)
        goto LABEL_200;
    }
    v146 = 0;
    size = 0;
    goto LABEL_111;
  }
  v28 = *(_QWORD **)(a1 + 40);
  if (v28[5] - v28[4] != 16)
  {
    v29 = a2[3].i32[2];
    v149.__r_.__value_.__r.__words[0] = v29;
    v30 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v28 + 12), v29, &v149)[3];
    if (*((char *)v30 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
    }
    else
    {
      v31 = *v30;
      v172.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
      *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v31;
    }
    std::unordered_set<std::string>::unordered_set((uint64_t)&lpsrc, (uint64_t)&v172, 1);
    Espresso::net::get_consumers_of_blobs(v28, &lpsrc, (uint64_t)&v169);
    v58 = *(_QWORD *)(a1 + 40) + 96;
    v59 = a2[3].i32[2];
    v148.__r_.__value_.__r.__words[0] = v59;
    v157.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v58, v59, &v148)[3];
    v60 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v169, (unsigned __int8 *)v157.__r_.__value_.__l.__data_, (__int128 **)&v157);
    memset(__str, 0, 24);
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *((const void **)v60 + 5), *((_QWORD *)v60 + 6), (uint64_t)(*((_QWORD *)v60 + 6) - *((_QWORD *)v60 + 5)) >> 3);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)v170);
    v61 = (void *)v169;
    *(_QWORD *)&v169 = 0;
    if (v61)
      operator delete(v61);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&lpsrc);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v172.__r_.__value_.__l.__data_);
    v63 = *(unint64_t **)&__str[8];
    v62 = *(unint64_t **)__str;
    if (*(_QWORD *)&__str[8] == *(_QWORD *)__str)
    {
      v64 = *(_QWORD *)(a1 + 40) + 56;
      v65 = a2[3].i32[2];
      *(_QWORD *)&v169 = v65;
      v66 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v64, v65, &v169)[3];
      v67 = *(_QWORD *)(a1 + 40) + 96;
      v68 = a2[3].i32[2];
      v172.__r_.__value_.__r.__words[0] = v68;
      v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v67, v68, &v172);
      v70 = *(Espresso::net **)(a1 + 40);
      Espresso::net::get_producers_of_blobs(v70, (uint64_t)&v169);
      *(_QWORD *)&lpsrc = v66;
      *(_QWORD *)&lpsrc = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v169, v66, (uint64_t)&std::piecewise_construct, (__int128 **)&lpsrc)+ 5;
      v71 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v70 + 96, (unint64_t *)lpsrc, (uint64_t)&std::piecewise_construct, (uint64_t **)&lpsrc);
      if (v71 != v69)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v71 + 3), (std::string *)v69[3], (std::string *)v69[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69[4] - v69[3]) >> 3));
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&v169);
      v63 = *(unint64_t **)&__str[8];
      v62 = *(unint64_t **)__str;
    }
    for (; v62 != v63; ++v62)
    {
      v72 = *(_QWORD *)(a1 + 40) + 56;
      *(_QWORD *)&v169 = v62;
      v73 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v72, v62, (uint64_t)&std::piecewise_construct, (uint64_t **)&v169);
      v74 = v73[3];
      v75 = v73[4];
      while (v74 != v75)
      {
        v76 = *(_QWORD *)(a1 + 40) + 96;
        v77 = a2[3].i32[2];
        *(_QWORD *)&v169 = v77;
        v78 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v76, v77, &v169);
        v79 = (unsigned __int8 **)v78[3];
        v80 = *(unsigned __int8 *)(v74 + 23);
        if ((v80 & 0x80u) == 0)
          v81 = (unsigned __int8 *)*(unsigned __int8 *)(v74 + 23);
        else
          v81 = *(unsigned __int8 **)(v74 + 8);
        v82 = (unsigned __int8 *)*((unsigned __int8 *)v79 + 23);
        v83 = (char)v82;
        if ((char)v82 < 0)
          v82 = v79[1];
        if (v81 == v82)
        {
          if (v83 >= 0)
            v84 = (unsigned __int8 *)v78[3];
          else
            v84 = *v79;
          if ((v80 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v74, v84, *(_QWORD *)(v74 + 8)))
              goto LABEL_97;
LABEL_96:
            v86 = *(_QWORD *)(a1 + 40) + 56;
            v87 = a2[3].i32[2];
            *(_QWORD *)&v169 = v87;
            v88 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v86, v87, &v169);
            std::string::operator=((std::string *)v74, (const std::string *)v88[3]);
            goto LABEL_97;
          }
          if (!*(_BYTE *)(v74 + 23))
            goto LABEL_96;
          v85 = 0;
          while (*(unsigned __int8 *)(v74 + v85) == v84[v85])
          {
            if (v80 == ++v85)
              goto LABEL_96;
          }
        }
LABEL_97:
        v74 += 24;
      }
    }
    Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::remove_layer(a2);
    v89 = *(void **)__str;
    if (*(_QWORD *)__str)
    {
      *(_QWORD *)&__str[8] = *(_QWORD *)__str;
LABEL_206:
      operator delete(v89);
    }
  }
LABEL_207:
  v136 = v159;
  if (v159)
  {
    v137 = (unint64_t *)&v159->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
}

void sub_190E55C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::elementwise_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

_QWORD *Espresso::base_kernel::top_shapes_for_bottom_shapes@<X0>(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 6);
}

uint64_t e5rt_tensor_desc_alloc_buffer_object(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCDE80;
  v8[1] = a1;
  v8[2] = a4;
  *((_DWORD *)v8 + 6) = a2;
  v8[4] = a3;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190E560C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_retain_output_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6C58;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190E561B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_layers_post_dispatch(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5, uint64_t a6, unsigned int a7, char a8, std::string::size_type *a9)
{
  uint64_t *v12;
  uint64_t v13;
  void (***v14)(__int128 *__return_ptr);
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  Espresso *v24;
  __n128 v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  __n128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __n128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  char *v38;
  std::string *v39;
  int data;
  int v41;
  BOOL v42;
  __n128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BYTE *v47;
  NSString *v48;
  Class v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::string::size_type v101;
  unsigned __int8 *i;
  int v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::string::size_type v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::string *v116;
  int64_t v118;
  std::string *v123;
  uint64_t v127;
  const void *v128;
  void **v129;
  void **v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v135;
  const void *v136;
  void **v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  _BOOL4 v143;
  int v146;
  int v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  int v157;
  int v158;
  std::string::size_type v159;
  uint64_t v160;
  uint64_t v163;
  _QWORD *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  __int128 *v168;
  __int128 *v169;
  char *v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  __int128 *v189;
  __int128 *v190;
  unint64_t *v191;
  unint64_t v192;
  BOOL v193;
  BOOL v194;
  BOOL v197;
  BOOL v198;
  void **v202;
  uint64_t v203;
  uint64_t (***v204)(_QWORD);
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  uint64_t v210;
  void **v211;
  unint64_t *v212;
  unint64_t v213;
  int v214;
  int v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  int *v219;
  __int128 *v220;
  __int128 *k;
  __int128 v222;
  void **v223;
  std::string *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  const void *v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  void **v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  int v269;
  int v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  __int128 v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  void **v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v302;
  const void *v303;
  void **v304;
  void **v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  int v309;
  int v310;
  uint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  _QWORD *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  void **v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  int v338;
  int v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  void **v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  int v375;
  int v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  void **v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t *v407;
  uint64_t v408;
  const void *v409;
  void **v410;
  void **v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t *v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  void **v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  unint64_t *v439;
  unint64_t v440;
  unint64_t *v441;
  int v442;
  unint64_t *v443;
  unint64_t v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  unint64_t *v460;
  unint64_t v461;
  int v462;
  int v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  int v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  int v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  int v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  int v479;
  int v480;
  int v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  void **v488;
  unint64_t *v489;
  unint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t *v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  uint64_t v511;
  const void *v512;
  _DWORD *v513;
  _DWORD *v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t *v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t *v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t j;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  unint64_t *v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t *v542;
  uint64_t v543;
  std::string::size_type v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  int v548;
  int v549;
  uint64_t m;
  uint64_t v551;
  unint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  unint64_t *v562;
  unint64_t v563;
  size_t v564;
  _BYTE *v565;
  const void *v566;
  int v567;
  const std::string::value_type *v568;
  std::string::size_type v569;
  std::string *v570;
  std::string::size_type v571;
  char v572;
  uint64_t v573;
  std::string::size_type v574;
  uint64_t v575;
  int v576;
  int v577;
  Espresso *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  unsigned __int8 **v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  size_t v589;
  uint64_t v590;
  const void **v591;
  unsigned __int8 *v592;
  NSObject *v593;
  uint64_t v594;
  int64x2_t *v595;
  _QWORD *v596;
  unint64_t v597;
  uint64_t v598;
  unint64_t *v599;
  unint64_t v600;
  _QWORD *v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  unint64_t v606;
  char *v607;
  uint64_t v608;
  char *v609;
  uint64_t v610;
  unint64_t *v611;
  unint64_t v612;
  _QWORD *v613;
  _QWORD *v614;
  char *v615;
  __int128 v616;
  int64x2_t v617;
  uint64_t v618;
  uint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  uint64_t v623;
  std::vector<std::string> *v624;
  unint64_t *v625;
  unint64_t v626;
  uint64_t v627;
  std::vector<std::string> *v628;
  __int128 v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  int v655;
  _BOOL4 v656;
  uint64_t v657;
  _BOOL4 v658;
  uint64_t v659;
  _QWORD *v660;
  Espresso::net *v661;
  unint64_t *v662;
  unint64_t v663;
  int v664;
  uint64_t v665;
  unint64_t *v666;
  unint64_t v667;
  int v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  Espresso::net *v674;
  uint64_t v675;
  _QWORD *v676;
  Espresso::net *v677;
  unint64_t *v678;
  unint64_t v679;
  unint64_t *v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  std::__shared_weak_count *v684;
  unint64_t *v685;
  unint64_t v686;
  char v687;
  Espresso::net *v688;
  char v689;
  uint64_t v690;
  char *v691;
  __int128 v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  void **v698;
  char *v699;
  uint64_t **v700;
  std::string::size_type v701;
  _QWORD *v702;
  char *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  std::__shared_weak_count *v707;
  unint64_t *v708;
  unint64_t v709;
  std::__shared_weak_count *v710;
  unint64_t *v711;
  unint64_t v712;
  std::__shared_weak_count *v713;
  unint64_t *v714;
  unint64_t v715;
  std::runtime_error *v716;
  std::runtime_error *exception;
  std::string *v718;
  __int128 v719;
  std::string *v720;
  __int128 v721;
  std::string *v722;
  std::string::size_type v723;
  std::string *v724;
  __int128 v725;
  std::runtime_error *v726;
  int v727;
  int v728;
  uint64_t *v729;
  uint64_t v730;
  uint64_t v732;
  uint64_t v733;
  int v735;
  uint64_t *v738;
  uint64_t *v739;
  void *context;
  uint64_t v741;
  int v742;
  uint64_t v743[2];
  uint64_t v744;
  std::__shared_weak_count *v745;
  Espresso::net *v746[2];
  uint64_t v747[2];
  Espresso::net *v748[2];
  _QWORD v749[2];
  __int128 v750;
  uint64_t v751;
  std::__shared_weak_count *v752;
  uint64_t v753;
  std::__shared_weak_count *v754;
  uint64_t v755;
  std::__shared_weak_count *v756;
  _QWORD v757[2];
  uint64_t v758[2];
  int *v759;
  std::__shared_weak_count *v760;
  std::string::size_type v761;
  std::__shared_weak_count *v762;
  _QWORD v763[2];
  _QWORD v764[2];
  _QWORD v765[2];
  _QWORD v766[2];
  _QWORD v767[2];
  uint64_t v768[2];
  int *v769;
  std::__shared_weak_count *v770;
  std::string::size_type v771;
  std::__shared_weak_count *v772;
  _QWORD v773[2];
  _QWORD v774[2];
  __int128 v775;
  _QWORD v776[2];
  _QWORD *v777[2];
  _QWORD v778[2];
  uint64_t v779[2];
  int *v780;
  std::__shared_weak_count *v781;
  std::string::size_type v782;
  std::__shared_weak_count *v783;
  _QWORD v784[2];
  _QWORD v785[2];
  __int128 v786;
  __int128 v787;
  std::string::size_type v788;
  std::__shared_weak_count *v789;
  _QWORD v790[2];
  _QWORD v791[2];
  uint64_t v792[2];
  __int128 v793;
  int *v794;
  std::__shared_weak_count *v795;
  std::string::size_type v796;
  std::__shared_weak_count *v797;
  _QWORD v798[2];
  int *v799;
  std::__shared_weak_count *v800;
  std::string::size_type v801;
  std::__shared_weak_count *v802;
  int *v803;
  std::__shared_weak_count *v804;
  void **v805;
  uint64_t v806;
  std::string v807;
  std::string *v808;
  std::string v809;
  std::__shared_weak_count *v810;
  __int128 v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  std::__shared_weak_count *v815;
  std::string v816;
  std::string v817;
  __int128 v818;
  unsigned int v819;
  std::string v820;
  std::string __str;
  std::string v822;
  __int128 v823;
  std::string v824;
  unint64_t v825;
  __int128 v826;
  void (***v827)(_QWORD *__return_ptr);
  std::__shared_weak_count *v828;
  std::string v829;
  _BYTE v830[40];
  uint64_t v831;

  v12 = a1;
  v831 = *MEMORY[0x1E0C80C00];
  v732 = *a2;
  v13 = *a1;
  v14 = *(void (****)(__int128 *__return_ptr))(*a1 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  v827 = (void (***)(_QWORD *__return_ptr))v14;
  v828 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v13 = *v12;
  }
  v733 = *(_QWORD *)(v13 + 712);
  (**v14)(&v826);
  v730 = a6;
  v825 = 0;
  memset(&v824, 0, sizeof(v824));
  v18 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v830, "layers");
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v18 + 128))(&v809, v18, v830);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)&v824.__r_.__value_.__l.__data_);
  v824 = v809;
  memset(&v809, 0, sizeof(v809));
  v807.__r_.__value_.__r.__words[0] = (std::string::size_type)&v809;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v807);
  if ((v830[23] & 0x80000000) != 0)
    operator delete(*(void **)v830);
  v729 = a2;
  v738 = a3;
  v739 = v12;
  if (v824.__r_.__value_.__l.__size_ != v824.__r_.__value_.__r.__words[0])
  {
    v19 = 0;
    v735 = *((unsigned __int8 *)v827 + 56);
    do
    {
      context = (void *)MEMORY[0x19401D4A4]();
      v20 = v19;
      if (a5)
        v20 = *(int *)(*(_QWORD *)(v733 + 24) + 4 * v19);
      v21 = *(_OWORD *)(v824.__r_.__value_.__r.__words[0] + 16 * v20);
      v823 = v21;
      v741 = v21;
      if (*((_QWORD *)&v21 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      memset(&v822, 0, sizeof(v822));
      memset(&__str, 0, sizeof(__str));
      memset(&v820, 0, sizeof(v820));
      std::string::basic_string[abi:ne180100]<0>(v830, "type");
      v24 = (Espresso *)v741;
      Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)v830, &v809);
      v25.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v809, (uint64_t)&v822);
      if (SBYTE7(v811) < 0)
        operator delete((void *)v809.__r_.__value_.__r.__words[2]);
      size = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
      if (v809.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *, __n128))size->__on_zero_shared)(size, v25);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if ((v830[23] & 0x80000000) != 0)
        operator delete(*(void **)v830);
      std::string::basic_string[abi:ne180100]<0>(v830, "name");
      Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)v830, &v809);
      v29.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v809, (uint64_t)&__str);
      if (SBYTE7(v811) < 0)
        operator delete((void *)v809.__r_.__value_.__r.__words[2]);
      v30 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
      if (v809.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v30->__on_zero_shared)(v30, v29);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if ((v830[23] & 0x80000000) != 0)
        operator delete(*(void **)v830);
      std::string::basic_string[abi:ne180100]<0>(v830, "debug_info");
      Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)v830, &v809);
      v33.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v809, (uint64_t)&v820);
      if (SBYTE7(v811) < 0)
        operator delete((void *)v809.__r_.__value_.__r.__words[2]);
      v34 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
      if (v809.__r_.__value_.__l.__size_)
      {
        v35 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v34->__on_zero_shared)(v34, v33);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if ((v830[23] & 0x80000000) != 0)
        operator delete(*(void **)v830);
      v819 = a7;
      v37 = (*(uint64_t (**)(void (**)(_QWORD *__return_ptr), __n128))*v827[1])(v827[1], v33);
      v38 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v38 + 1) = 0;
      *((_QWORD *)v38 + 2) = 0;
      *(_QWORD *)v38 = &off_1E2DBF0D0;
      *((_QWORD *)v38 + 3) = &off_1E2DA1A38;
      *(_OWORD *)(v38 + 56) = 0u;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *(_OWORD *)(v38 + 120) = 0u;
      *(_OWORD *)(v38 + 136) = 0u;
      *(_OWORD *)(v38 + 152) = 0u;
      *(_OWORD *)(v38 + 40) = 0u;
      *(_OWORD *)(v38 + 161) = 0u;
      *((_OWORD *)v38 + 13) = 0u;
      *((_OWORD *)v38 + 14) = 0u;
      *((_QWORD *)v38 + 30) = 0;
      *(_QWORD *)&v818 = v38 + 24;
      *((_QWORD *)&v818 + 1) = v38;
      std::string::operator=((std::string *)(v38 + 40), &__str);
      std::string::operator=((std::string *)(v818 + 40), &v822);
      std::string::operator=((std::string *)(v818 + 200), &v820);
      if (SHIBYTE(v822.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v822.__r_.__value_.__l.__size_ != 5)
          goto LABEL_68;
        v39 = (std::string *)v822.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v822.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_68;
        v39 = &v822;
      }
      data = (int)v39->__r_.__value_.__l.__data_;
      v41 = v39->__r_.__value_.__s.__data_[4];
      v42 = data == 1667854946 && v41 == 107;
      if (v42)
      {
        memset(v830, 0, 24);
        std::string::basic_string[abi:ne180100]<0>(&v807, "class_name");
        Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)&v807, &v809);
        v43.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v809, (uint64_t)v830);
        if (SBYTE7(v811) < 0)
          operator delete((void *)v809.__r_.__value_.__r.__words[2]);
        v44 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
        if (v809.__r_.__value_.__l.__size_)
        {
          v45 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v44->__on_zero_shared)(v44, v43);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (SHIBYTE(v807.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v807.__r_.__value_.__l.__data_);
        if (v830[23] >= 0)
          v47 = v830;
        else
          v47 = *(_BYTE **)v830;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v47, v43.n128_f64[0]);
        v48 = (NSString *)objc_claimAutoreleasedReturnValue();
        v49 = NSClassFromString(v48);

        if (v49)
        {
          +[EspressoBrickRegistry registerBrickClass:](EspressoBrickRegistry, "registerBrickClass:", v49);
        }
        else if (v37 != 10008)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v718 = std::string::append(&v817, ".");
          v719 = *(_OWORD *)&v718->__r_.__value_.__l.__data_;
          v829.__r_.__value_.__r.__words[2] = v718->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v829.__r_.__value_.__l.__data_ = v719;
          v718->__r_.__value_.__l.__size_ = 0;
          v718->__r_.__value_.__r.__words[2] = 0;
          v718->__r_.__value_.__r.__words[0] = 0;
          v720 = std::string::append(&v829, " platform=");
          v721 = *(_OWORD *)&v720->__r_.__value_.__l.__data_;
          v807.__r_.__value_.__r.__words[2] = v720->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v807.__r_.__value_.__l.__data_ = v721;
          v720->__r_.__value_.__l.__size_ = 0;
          v720->__r_.__value_.__r.__words[2] = 0;
          v720->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v816, v37);
          if ((v816.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v722 = &v816;
          else
            v722 = (std::string *)v816.__r_.__value_.__r.__words[0];
          if ((v816.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v723 = HIBYTE(v816.__r_.__value_.__r.__words[2]);
          else
            v723 = v816.__r_.__value_.__l.__size_;
          v724 = std::string::append(&v807, (const std::string::value_type *)v722, v723);
          v725 = *(_OWORD *)&v724->__r_.__value_.__l.__data_;
          v809.__r_.__value_.__r.__words[2] = v724->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v809.__r_.__value_.__l.__data_ = v725;
          v724->__r_.__value_.__l.__size_ = 0;
          v724->__r_.__value_.__r.__words[2] = 0;
          v724->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v809);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if ((v830[23] & 0x80000000) != 0)
          operator delete(*(void **)v830);
      }
LABEL_68:
      if (v735 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v12 + 712) + 48) + 4 * v19))
      {
        v50 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
        Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(v830, (uint64_t)v50, &v822);
        v51 = *(_QWORD *)v830;
        v52 = *v738;
        v53 = *(std::__shared_weak_count **)(*v738 + 80);
        v814 = *(_QWORD *)(*v738 + 72);
        v815 = v53;
        if (v53)
        {
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(p_shared_owners);
          while (__stxr(v55 + 1, p_shared_owners));
          v52 = *v738;
        }
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v51 + 16))(&v809, v51, v741, &v814, *(unsigned int *)(v52 + 20));
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v818 + 64, (__int128 *)&v809);
        v56 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
        if (v809.__r_.__value_.__l.__size_)
        {
          v57 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v815;
        if (v815)
        {
          v60 = (unint64_t *)&v815->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = *(std::__shared_weak_count **)&v830[8];
        if (*(_QWORD *)&v830[8])
        {
          v63 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = *v738;
        v66 = v818;
        *(_DWORD *)(v818 + 12) = *(_DWORD *)(*v738 + 20);
        v67 = *(_DWORD *)(v65 + 16);
      }
      else
      {
        v68 = *(_QWORD *)*a4;
        if (v19 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a4 + 8) - v68) >> 5))
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v818 + 64), *(_QWORD *)(v68 + 224 * v19 + 88), *(_QWORD *)(v68 + 224 * v19 + 96));
        v66 = v818;
        if (!*(_QWORD *)(v818 + 64))
        {
          v69 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
          Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(v830, (uint64_t)v69, &v822);
          v70 = *(_QWORD *)v830;
          v812 = (uint64_t)v827;
          v813 = (uint64_t)v828;
          if (v828)
          {
            v71 = (unint64_t *)&v828->__shared_owners_;
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v70 + 16))(&v809, v70, v741, &v812, v819);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v818 + 64, (__int128 *)&v809);
          v73 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
          if (v809.__r_.__value_.__l.__size_)
          {
            v74 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v76 = (std::__shared_weak_count *)v813;
          if (v813)
          {
            v77 = (unint64_t *)(v813 + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v79 = *(std::__shared_weak_count **)&v830[8];
          if (*(_QWORD *)&v830[8])
          {
            v80 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v66 = v818;
        }
        *(_DWORD *)(v66 + 12) = v819;
        v67 = v37;
      }
      *(_DWORD *)(v66 + 8) = v67;
      std::string::basic_string[abi:ne180100]<0>(&v809, "hint_fallback_from_metal");
      if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v741 + 24))(v741, &v809))
      {
        if ((SHIBYTE(v809.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_132;
        v83 = (void *)v809.__r_.__value_.__r.__words[0];
        goto LABEL_131;
      }
      v82 = *(_QWORD *)(v818 + 64);
      if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v809.__r_.__value_.__l.__data_);
        if (!v82)
          goto LABEL_132;
      }
      else if (!v82)
      {
        goto LABEL_132;
      }
      std::string::basic_string[abi:ne180100]<0>(v830, "hint_fallback_from_metal");
      Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)v830, &v809);
      v84 = *(_QWORD *)(v818 + 64);
      if ((*(unsigned int (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v809.__r_.__value_.__l.__data_
                                                                                            + 24))(v809.__r_.__value_.__r.__words[0], &v809.__r_.__value_.__r.__words[2]))
      {
        *(_DWORD *)(v84 + 136) = (*(uint64_t (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v809.__r_.__value_.__l.__data_ + 40))(v809.__r_.__value_.__r.__words[0], &v809.__r_.__value_.__r.__words[2]);
      }
      if (SBYTE7(v811) < 0)
        operator delete((void *)v809.__r_.__value_.__r.__words[2]);
      v85 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
      if (v809.__r_.__value_.__l.__size_)
      {
        v86 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if ((v830[23] & 0x80000000) != 0)
      {
        v83 = *(void **)v830;
LABEL_131:
        operator delete(v83);
      }
LABEL_132:
      std::string::basic_string[abi:ne180100]<0>(&v809, "hint_fallback_from_cpu");
      if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v741 + 24))(v741, &v809))
      {
        if ((SHIBYTE(v809.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_151;
        v89 = (void *)v809.__r_.__value_.__r.__words[0];
        goto LABEL_150;
      }
      v88 = *(_QWORD *)(v818 + 64);
      if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v809.__r_.__value_.__l.__data_);
        if (!v88)
          goto LABEL_151;
      }
      else if (!v88)
      {
        goto LABEL_151;
      }
      std::string::basic_string[abi:ne180100]<0>(v830, "hint_fallback_from_cpu");
      Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)v830, &v809);
      v90 = *(_QWORD *)(v818 + 64);
      if ((*(unsigned int (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v809.__r_.__value_.__l.__data_
                                                                                            + 24))(v809.__r_.__value_.__r.__words[0], &v809.__r_.__value_.__r.__words[2]))
      {
        *(_DWORD *)(v90 + 144) = (*(uint64_t (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v809.__r_.__value_.__l.__data_ + 40))(v809.__r_.__value_.__r.__words[0], &v809.__r_.__value_.__r.__words[2]);
      }
      if (SBYTE7(v811) < 0)
        operator delete((void *)v809.__r_.__value_.__r.__words[2]);
      v91 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
      if (v809.__r_.__value_.__l.__size_)
      {
        v92 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if ((v830[23] & 0x80000000) != 0)
      {
        v89 = *(void **)v830;
LABEL_150:
        operator delete(v89);
      }
LABEL_151:
      std::string::basic_string[abi:ne180100]<0>(&v809, "hint_fallback_from_ane");
      if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v741 + 24))(v741, &v809))
      {
        if ((SHIBYTE(v809.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_170;
        v95 = (void *)v809.__r_.__value_.__r.__words[0];
        goto LABEL_169;
      }
      v94 = *(_QWORD *)(v818 + 64);
      if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v809.__r_.__value_.__l.__data_);
        if (!v94)
          goto LABEL_170;
      }
      else if (!v94)
      {
        goto LABEL_170;
      }
      std::string::basic_string[abi:ne180100]<0>(v830, "hint_fallback_from_ane");
      Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)v830, &v809);
      v96 = *(_QWORD *)(v818 + 64);
      if ((*(unsigned int (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v809.__r_.__value_.__l.__data_
                                                                                            + 24))(v809.__r_.__value_.__r.__words[0], &v809.__r_.__value_.__r.__words[2]))
      {
        *(_DWORD *)(v96 + 140) = (*(uint64_t (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v809.__r_.__value_.__l.__data_ + 40))(v809.__r_.__value_.__r.__words[0], &v809.__r_.__value_.__r.__words[2]);
      }
      if (SBYTE7(v811) < 0)
        operator delete((void *)v809.__r_.__value_.__r.__words[2]);
      v97 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
      if (v809.__r_.__value_.__l.__size_)
      {
        v98 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      if ((v830[23] & 0x80000000) != 0)
      {
        v95 = *(void **)v830;
LABEL_169:
        operator delete(v95);
      }
LABEL_170:
      std::string::basic_string[abi:ne180100]<0>(&v809, "attributes");
      if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v741 + 24))(v741, &v809))
      {
        v100 = *(_QWORD *)(v818 + 64);
        if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v809.__r_.__value_.__l.__data_);
          if (!v100)
            goto LABEL_188;
        }
        else if (!v100)
        {
          goto LABEL_188;
        }
        memset(&v809, 0, sizeof(v809));
        std::string::basic_string[abi:ne180100]<0>(v830, "attributes");
        (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v741 + 120))(&v807, v741, v830);
        if ((v830[23] & 0x80000000) != 0)
          operator delete(*(void **)v830);
        (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v807.__r_.__value_.__l.__data_ + 32))(v807.__r_.__value_.__r.__words[0], &v809);
        v101 = v809.__r_.__value_.__l.__size_;
        for (i = (unsigned __int8 *)v809.__r_.__value_.__r.__words[0]; i != (unsigned __int8 *)v101; i += 24)
        {
          v103 = (*(uint64_t (**)(std::string::size_type, unsigned __int8 *))(*(_QWORD *)v807.__r_.__value_.__l.__data_
                                                                                      + 40))(v807.__r_.__value_.__r.__words[0], i);
          v104 = *(_QWORD *)(v818 + 64) + 240;
          v829.__r_.__value_.__r.__words[0] = (std::string::size_type)i;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v104, i, (uint64_t)&std::piecewise_construct, (__int128 **)&v829)+ 10) = v103;
        }
        v105 = (std::__shared_weak_count *)v807.__r_.__value_.__l.__size_;
        if (v807.__r_.__value_.__l.__size_)
        {
          v106 = (unint64_t *)(v807.__r_.__value_.__l.__size_ + 8);
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        *(_QWORD *)v830 = &v809;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v830);
      }
      else if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v809.__r_.__value_.__l.__data_);
      }
LABEL_188:
      v816.__r_.__value_.__r.__words[0] = v741;
      v816.__r_.__value_.__l.__size_ = (std::string::size_type)a9;
      v108 = a9[1];
      v809.__r_.__value_.__r.__words[0] = *a9;
      v809.__r_.__value_.__l.__size_ = v108;
      if (v108)
      {
        v109 = (unint64_t *)(v108 + 8);
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
      v111 = (uint64_t)v827;
      v809.__r_.__value_.__r.__words[2] = (std::string::size_type)v827;
      v810 = v828;
      if (v828)
      {
        v112 = (unint64_t *)&v828->__shared_owners_;
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v811 = v826;
      if (*((_QWORD *)&v826 + 1))
      {
        v114 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
        do
          v115 = __ldxr(v114);
        while (__stxr(v115 + 1, v114));
      }
      v807.__r_.__value_.__r.__words[0] = v741;
      v807.__r_.__value_.__l.__size_ = (std::string::size_type)&v825;
      v807.__r_.__value_.__r.__words[2] = (std::string::size_type)&v809;
      v808 = &v816;
      if (*a9)
      {
        if ((*((_BYTE *)&v822.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v118 = v822.__r_.__value_.__l.__size_;
          switch(v822.__r_.__value_.__l.__size_)
          {
            case 6uLL:
              if (*(_DWORD *)v822.__r_.__value_.__l.__data_ != 1986948963
                || *(_WORD *)(v822.__r_.__value_.__r.__words[0] + 4) != 25651)
              {
                break;
              }
              goto LABEL_259;
            case 8uLL:
              v116 = (std::string *)v822.__r_.__value_.__r.__words[0];
LABEL_258:
              if (v116->__r_.__value_.__r.__words[0] != 0x6433766E6F636564)
                goto LABEL_266;
LABEL_259:
              if ((a8 & 1) == 0)
              {
                v135 = v818;
                v136 = *(const void **)(v818 + 64);
                if (v136
                {
                  v138 = v137;
                  v139 = *(std::__shared_weak_count **)(v135 + 72);
                  v805 = v137;
                  v806 = (uint64_t)v139;
                  if (v139)
                  {
                    v140 = (unint64_t *)&v139->__shared_owners_;
                    do
                      v141 = __ldxr(v140);
                    while (__stxr(v141 + 1, v140));
                  }
                }
                else
                {
                  v139 = 0;
                  v138 = 0;
                  v806 = 0;
                  v805 = 0;
                }
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_weights");
                std::string::basic_string[abi:ne180100]<0>(&v829, "W");
                v774[0] = v138;
                v774[1] = v139;
                if (v139)
                {
                  v148 = (unint64_t *)&v139->__shared_owners_;
                  do
                    v149 = __ldxr(v148);
                  while (__stxr(v149 + 1, v148));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v774);
                if (v139)
                {
                  v150 = (unint64_t *)&v139->__shared_owners_;
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 - 1, v150));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                    std::__shared_weak_count::__release_weak(v139);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_weights_f16");
                std::string::basic_string[abi:ne180100]<0>(&v829, "W_f16");
                v152 = (std::__shared_weak_count *)v806;
                v773[0] = v805;
                v773[1] = v806;
                if (v806)
                {
                  v153 = (unint64_t *)(v806 + 8);
                  do
                    v154 = __ldxr(v153);
                  while (__stxr(v154 + 1, v153));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v773);
                if (v152)
                {
                  v155 = (unint64_t *)&v152->__shared_owners_;
                  do
                    v156 = __ldaxr(v155);
                  while (__stlxr(v156 - 1, v155));
                  if (!v156)
                  {
                    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                    std::__shared_weak_count::__release_weak(v152);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_biases");
                v157 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
                v158 = v157;
                if ((v830[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v830);
                  if (!v158)
                    goto LABEL_533;
                }
                else if (!v157)
                {
                  goto LABEL_533;
                }
                (*((void (**)(_BYTE *__return_ptr))*v805 + 54))(v830);
                v243 = (std::__shared_weak_count *)a9[1];
                v771 = *a9;
                v772 = v243;
                if (v243)
                {
                  v244 = (unint64_t *)&v243->__shared_owners_;
                  do
                    v245 = __ldxr(v244);
                  while (__stxr(v245 + 1, v244));
                }
                std::string::basic_string[abi:ne180100]<0>(&v829, "blob_biases");
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                v246 = v772;
                if (v772)
                {
                  v247 = (unint64_t *)&v772->__shared_owners_;
                  do
                    v248 = __ldaxr(v247);
                  while (__stlxr(v248 - 1, v247));
                  if (!v248)
                  {
                    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                    std::__shared_weak_count::__release_weak(v246);
                  }
                }
                v249 = v805;
                v769 = v803;
                v770 = v804;
                if (v804)
                {
                  v250 = (unint64_t *)&v804->__shared_owners_;
                  do
                    v251 = __ldxr(v250);
                  while (__stxr(v251 + 1, v250));
                }
                (*((void (**)(void **, int **))*v249 + 49))(v249, &v769);
                v252 = v770;
                if (v770)
                {
                  v253 = (unint64_t *)&v770->__shared_owners_;
                  do
                    v254 = __ldaxr(v253);
                  while (__stlxr(v254 - 1, v253));
                  if (!v254)
                  {
                    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                    std::__shared_weak_count::__release_weak(v252);
                  }
                }
                v825 += 4 * v803[2];
                v255 = (std::__shared_weak_count *)v806;
                v768[0] = (uint64_t)v805;
                v768[1] = v806;
                if (v806)
                {
                  v256 = (unint64_t *)(v806 + 8);
                  do
                    v257 = __ldxr(v256);
                  while (__stxr(v257 + 1, v256));
                }
                std::string::basic_string[abi:ne180100]<0>(&v829, "blob_biases");
                std::string::basic_string[abi:ne180100]<0>(&v817, "b");
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v816, v768, (uint64_t)&v829, (uint64_t)&v817);
                if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v817.__r_.__value_.__l.__data_);
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if (v255)
                {
                  v258 = (unint64_t *)&v255->__shared_owners_;
                  do
                    v259 = __ldaxr(v258);
                  while (__stlxr(v259 - 1, v258));
                  if (!v259)
                  {
                    ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                    std::__shared_weak_count::__release_weak(v255);
                  }
                }
                v260 = v804;
                if (v804)
                {
                  v261 = (unint64_t *)&v804->__shared_owners_;
                  do
                    v262 = __ldaxr(v261);
                  while (__stlxr(v262 - 1, v261));
                  if (!v262)
                  {
                    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                    std::__shared_weak_count::__release_weak(v260);
                  }
                }
LABEL_533:
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_biases_f16");
                std::string::basic_string[abi:ne180100]<0>(&v829, "b_f16");
                v263 = (std::__shared_weak_count *)v806;
                v767[0] = v805;
                v767[1] = v806;
                if (v806)
                {
                  v264 = (unint64_t *)(v806 + 8);
                  do
                    v265 = __ldxr(v264);
                  while (__stxr(v265 + 1, v264));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v767);
                if (v263)
                {
                  v266 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v267 = __ldaxr(v266);
                  while (__stlxr(v267 - 1, v266));
                  if (!v267)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                v165 = (std::__shared_weak_count *)v806;
                if (v806)
                {
                  v268 = (unint64_t *)(v806 + 8);
                  do
                    v192 = __ldaxr(v268);
                  while (__stlxr(v192 - 1, v268));
                  goto LABEL_1086;
                }
                break;
              }
LABEL_266:
              if ((*((_BYTE *)&v822.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v118 = v822.__r_.__value_.__l.__size_;
                if (v822.__r_.__value_.__l.__size_ != 13)
                  goto LABEL_329;
                v123 = (std::string *)v822.__r_.__value_.__r.__words[0];
LABEL_319:
                v159 = v123->__r_.__value_.__r.__words[0];
                v160 = *(std::string::size_type *)((char *)v123->__r_.__value_.__r.__words + 5);
                if (v159 != 0x72705F72656E6E69 || v160 != 0x746375646F72705FLL)
                  goto LABEL_323;
                if ((a8 & 1) != 0)
                  break;
                v408 = v818;
                v409 = *(const void **)(v818 + 64);
                if (v409
                {
                  v411 = v410;
                  v412 = *(std::__shared_weak_count **)(v408 + 72);
                  v805 = v410;
                  v806 = (uint64_t)v412;
                  if (v412)
                  {
                    v413 = (unint64_t *)&v412->__shared_owners_;
                    do
                      v414 = __ldxr(v413);
                    while (__stxr(v414 + 1, v413));
                  }
                }
                else
                {
                  v412 = 0;
                  v411 = 0;
                  v806 = 0;
                  v805 = 0;
                }
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_weights_f16");
                std::string::basic_string[abi:ne180100]<0>(&v829, "W_f16");
                v766[0] = v411;
                v766[1] = v412;
                if (v412)
                {
                  v443 = (unint64_t *)&v412->__shared_owners_;
                  do
                    v444 = __ldxr(v443);
                  while (__stxr(v444 + 1, v443));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v766);
                if (v412)
                {
                  v445 = (unint64_t *)&v412->__shared_owners_;
                  do
                    v446 = __ldaxr(v445);
                  while (__stlxr(v446 - 1, v445));
                  if (!v446)
                  {
                    ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
                    std::__shared_weak_count::__release_weak(v412);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_weights");
                std::string::basic_string[abi:ne180100]<0>(&v829, "W");
                v447 = (std::__shared_weak_count *)v806;
                v765[0] = v805;
                v765[1] = v806;
                if (v806)
                {
                  v448 = (unint64_t *)(v806 + 8);
                  do
                    v449 = __ldxr(v448);
                  while (__stxr(v449 + 1, v448));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v765);
                if (v447)
                {
                  v450 = (unint64_t *)&v447->__shared_owners_;
                  do
                    v451 = __ldaxr(v450);
                  while (__stlxr(v451 - 1, v450));
                  if (!v451)
                  {
                    ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                    std::__shared_weak_count::__release_weak(v447);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_weights_f16_t");
                std::string::basic_string[abi:ne180100]<0>(&v829, "w_f16_t");
                v452 = (std::__shared_weak_count *)v806;
                v764[0] = v805;
                v764[1] = v806;
                if (v806)
                {
                  v453 = (unint64_t *)(v806 + 8);
                  do
                    v454 = __ldxr(v453);
                  while (__stxr(v454 + 1, v453));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v764);
                if (v452)
                {
                  v455 = (unint64_t *)&v452->__shared_owners_;
                  do
                    v456 = __ldaxr(v455);
                  while (__stlxr(v456 - 1, v455));
                  if (!v456)
                  {
                    ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                    std::__shared_weak_count::__release_weak(v452);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_weights_t");
                std::string::basic_string[abi:ne180100]<0>(&v829, "w_f32_t");
                v457 = (std::__shared_weak_count *)v806;
                v763[0] = v805;
                v763[1] = v806;
                if (v806)
                {
                  v458 = (unint64_t *)(v806 + 8);
                  do
                    v459 = __ldxr(v458);
                  while (__stxr(v459 + 1, v458));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v763);
                if (v457)
                {
                  v460 = (unint64_t *)&v457->__shared_owners_;
                  do
                    v461 = __ldaxr(v460);
                  while (__stlxr(v461 - 1, v460));
                  if (!v461)
                  {
                    ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                    std::__shared_weak_count::__release_weak(v457);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_biases");
                v462 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
                v463 = v462;
                if ((v830[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v830);
                  if (!v463)
                    goto LABEL_1005;
                }
                else if (!v462)
                {
                  goto LABEL_1005;
                }
                (*((void (**)(_BYTE *__return_ptr))*v805 + 55))(v830);
                v482 = (std::__shared_weak_count *)a9[1];
                v761 = *a9;
                v762 = v482;
                if (v482)
                {
                  v483 = (unint64_t *)&v482->__shared_owners_;
                  do
                    v484 = __ldxr(v483);
                  while (__stxr(v484 + 1, v483));
                }
                std::string::basic_string[abi:ne180100]<0>(&v829, "blob_biases");
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                v485 = v762;
                if (v762)
                {
                  v486 = (unint64_t *)&v762->__shared_owners_;
                  do
                    v487 = __ldaxr(v486);
                  while (__stlxr(v487 - 1, v486));
                  if (!v487)
                  {
                    ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
                    std::__shared_weak_count::__release_weak(v485);
                  }
                }
                v488 = v805;
                v759 = v803;
                v760 = v804;
                if (v804)
                {
                  v489 = (unint64_t *)&v804->__shared_owners_;
                  do
                    v490 = __ldxr(v489);
                  while (__stxr(v490 + 1, v489));
                }
                (*((void (**)(void **, int **))*v488 + 49))(v488, &v759);
                v491 = v760;
                if (v760)
                {
                  v492 = (unint64_t *)&v760->__shared_owners_;
                  do
                    v493 = __ldaxr(v492);
                  while (__stlxr(v493 - 1, v492));
                  if (!v493)
                  {
                    ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
                    std::__shared_weak_count::__release_weak(v491);
                  }
                }
                v494 = (std::__shared_weak_count *)v806;
                v758[0] = (uint64_t)v805;
                v758[1] = v806;
                if (v806)
                {
                  v495 = (unint64_t *)(v806 + 8);
                  do
                    v496 = __ldxr(v495);
                  while (__stxr(v496 + 1, v495));
                }
                std::string::basic_string[abi:ne180100]<0>(&v829, "blob_biases");
                std::string::basic_string[abi:ne180100]<0>(&v817, "b");
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v816, v758, (uint64_t)&v829, (uint64_t)&v817);
                if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v817.__r_.__value_.__l.__data_);
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if (v494)
                {
                  v497 = (unint64_t *)&v494->__shared_owners_;
                  do
                    v498 = __ldaxr(v497);
                  while (__stlxr(v498 - 1, v497));
                  if (!v498)
                  {
                    ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
                    std::__shared_weak_count::__release_weak(v494);
                  }
                }
                v499 = v804;
                if (v804)
                {
                  v500 = (unint64_t *)&v804->__shared_owners_;
                  do
                    v501 = __ldaxr(v500);
                  while (__stlxr(v501 - 1, v500));
                  if (!v501)
                  {
                    ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                    std::__shared_weak_count::__release_weak(v499);
                  }
                }
LABEL_1005:
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_biases_f16");
                std::string::basic_string[abi:ne180100]<0>(&v829, "b_f16");
                v502 = (std::__shared_weak_count *)v806;
                v757[0] = v805;
                v757[1] = v806;
                if (v806)
                {
                  v503 = (unint64_t *)(v806 + 8);
                  do
                    v504 = __ldxr(v503);
                  while (__stxr(v504 + 1, v503));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v757);
                if (v502)
                {
                  v505 = (unint64_t *)&v502->__shared_owners_;
                  do
                    v506 = __ldaxr(v505);
                  while (__stlxr(v506 - 1, v505));
                  if (!v506)
                  {
                    ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                    std::__shared_weak_count::__release_weak(v502);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                v165 = (std::__shared_weak_count *)v806;
                if (v806)
                {
                  v507 = (unint64_t *)(v806 + 8);
                  do
                    v192 = __ldaxr(v507);
                  while (__stlxr(v192 - 1, v507));
                  goto LABEL_1086;
                }
                break;
              }
              switch(HIBYTE(v822.__r_.__value_.__r.__words[2]))
              {
                case 3u:
                  goto LABEL_398;
                case 5u:
                  goto LABEL_327;
                case 0x10u:
                  goto LABEL_418;
              }
              break;
            case 9uLL:
              if (*(_QWORD *)v822.__r_.__value_.__l.__data_ != 0x726F6E6863746162
                || *(_BYTE *)(v822.__r_.__value_.__r.__words[0] + 8) != 109)
              {
                break;
              }
LABEL_245:
              v127 = v818;
              v128 = *(const void **)(v818 + 64);
              if (v128
              {
                v130 = v129;
                v131 = *(_QWORD *)(v127 + 72);
                v805 = v129;
                v806 = v131;
                if (v131)
                {
                  v132 = (unint64_t *)(v131 + 8);
                  do
                    v133 = __ldxr(v132);
                  while (__stxr(v133 + 1, v132));
                }
              }
              else
              {
                v130 = 0;
                v806 = 0;
                v805 = 0;
              }
              std::string::basic_string[abi:ne180100]<0>(v830, "blob_batchnorm_params");
              v269 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
              v270 = v269;
              if ((v830[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v830);
                if (!v270)
                  goto LABEL_846;
              }
              else if (!v269)
              {
                goto LABEL_846;
              }
              (*((void (**)(_BYTE *__return_ptr, void **))*v130 + 50))(v830, v130);
              v416 = (std::__shared_weak_count *)a9[1];
              v782 = *a9;
              v783 = v416;
              if (v416)
              {
                v417 = (unint64_t *)&v416->__shared_owners_;
                do
                  v418 = __ldxr(v417);
                while (__stxr(v418 + 1, v417));
              }
              std::string::basic_string[abi:ne180100]<0>(&v829, "blob_batchnorm_params");
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
              v419 = v783;
              if (v783)
              {
                v420 = (unint64_t *)&v783->__shared_owners_;
                do
                  v421 = __ldaxr(v420);
                while (__stlxr(v421 - 1, v420));
                if (!v421)
                {
                  ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                  std::__shared_weak_count::__release_weak(v419);
                }
              }
              v422 = v805;
              v780 = v803;
              v781 = v804;
              if (v804)
              {
                v423 = (unint64_t *)&v804->__shared_owners_;
                do
                  v424 = __ldxr(v423);
                while (__stxr(v424 + 1, v423));
              }
              (*((void (**)(void **, int **))*v422 + 49))(v422, &v780);
              v425 = v781;
              if (v781)
              {
                v426 = (unint64_t *)&v781->__shared_owners_;
                do
                  v427 = __ldaxr(v426);
                while (__stlxr(v427 - 1, v426));
                if (!v427)
                {
                  ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
                  std::__shared_weak_count::__release_weak(v425);
                }
              }
              v825 += 4 * v803[2];
              v428 = (std::__shared_weak_count *)v806;
              v779[0] = (uint64_t)v805;
              v779[1] = v806;
              if (v806)
              {
                v429 = (unint64_t *)(v806 + 8);
                do
                  v430 = __ldxr(v429);
                while (__stxr(v430 + 1, v429));
              }
              std::string::basic_string[abi:ne180100]<0>(&v829, "blob_batchnorm_params");
              std::string::basic_string[abi:ne180100]<0>(&v817, "blob_batchnorm_params");
              Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v816, v779, (uint64_t)&v829, (uint64_t)&v817);
              if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v817.__r_.__value_.__l.__data_);
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
              if (v428)
              {
                v431 = (unint64_t *)&v428->__shared_owners_;
                do
                  v432 = __ldaxr(v431);
                while (__stlxr(v432 - 1, v431));
                if (!v432)
                {
                  ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
                  std::__shared_weak_count::__release_weak(v428);
                }
              }
              v433 = v804;
              if (v804)
              {
                v434 = (unint64_t *)&v804->__shared_owners_;
                do
                  v435 = __ldaxr(v434);
                while (__stlxr(v435 - 1, v434));
                if (!v435)
                {
                  ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
                  std::__shared_weak_count::__release_weak(v433);
                }
              }
LABEL_846:
              std::string::basic_string[abi:ne180100]<0>(v830, "blob_batchnorm_params_f16");
              std::string::basic_string[abi:ne180100]<0>(&v829, "batchnorm_params_f16");
              v436 = (std::__shared_weak_count *)v806;
              v778[0] = v805;
              v778[1] = v806;
              if (v806)
              {
                v437 = (unint64_t *)(v806 + 8);
                do
                  v438 = __ldxr(v437);
                while (__stxr(v438 + 1, v437));
              }
              Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v778);
              if (v436)
              {
                v439 = (unint64_t *)&v436->__shared_owners_;
                do
                  v440 = __ldaxr(v439);
                while (__stlxr(v440 - 1, v439));
                if (!v440)
                {
                  ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                  std::__shared_weak_count::__release_weak(v436);
                }
              }
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
              if ((v830[23] & 0x80000000) != 0)
                operator delete(*(void **)v830);
              v165 = (std::__shared_weak_count *)v806;
              if (!v806)
                break;
              v441 = (unint64_t *)(v806 + 8);
              do
                v192 = __ldaxr(v441);
              while (__stlxr(v192 - 1, v441));
              goto LABEL_1086;
            case 0xBuLL:
              if (*(_QWORD *)v822.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
                || *(_QWORD *)(v822.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
              {
                break;
              }
              goto LABEL_276;
            case 0xDuLL:
              v123 = (std::string *)v822.__r_.__value_.__r.__words[0];
              if (*(_QWORD *)v822.__r_.__value_.__l.__data_ == 0x6C6F766E6F636564
                && *(_QWORD *)(v822.__r_.__value_.__r.__words[0] + 5) == 0x6E6F6974756C6F76)
              {
                goto LABEL_605;
              }
              if (*(_QWORD *)v822.__r_.__value_.__l.__data_ != 0x6E6F635F64616F6CLL
                || *(_QWORD *)(v822.__r_.__value_.__r.__words[0] + 5) != 0x746E6174736E6F63)
              {
                goto LABEL_319;
              }
              goto LABEL_286;
            case 0x10uLL:
              if (*(_QWORD *)v822.__r_.__value_.__l.__data_ != 0x6E6F635F6174656DLL
                || *(_QWORD *)(v822.__r_.__value_.__r.__words[0] + 8) != 0x6E6F6974756C6F76)
              {
                goto LABEL_424;
              }
LABEL_276:
              v143 = 0;
              goto LABEL_611;
            default:
              goto LABEL_329;
          }
        }
        else
        {
          v116 = &v822;
          switch(*((_BYTE *)&v822.__r_.__value_.__s + 23))
          {
            case 3:
              goto LABEL_398;
            case 4:
            case 7:
            case 0xA:
            case 0xC:
            case 0xE:
            case 0xF:
              break;
            case 5:
              goto LABEL_333;
            case 6:
              if (LODWORD(v822.__r_.__value_.__l.__data_) != 1986948963
                || WORD2(v822.__r_.__value_.__r.__words[0]) != 25651)
              {
                break;
              }
              goto LABEL_259;
            case 8:
              goto LABEL_258;
            case 9:
              if (v822.__r_.__value_.__r.__words[0] != 0x726F6E6863746162 || v822.__r_.__value_.__s.__data_[8] != 109)
                break;
              goto LABEL_245;
            case 0xB:
              if (v822.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
                || *(std::string::size_type *)((char *)v822.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
              {
                break;
              }
              goto LABEL_276;
            case 0xD:
              if (v822.__r_.__value_.__r.__words[0] == 0x6C6F766E6F636564
                && *(std::string::size_type *)((char *)v822.__r_.__value_.__r.__words + 5) == 0x6E6F6974756C6F76)
              {
                v123 = &v822;
LABEL_605:
                v143 = v123->__r_.__value_.__r.__words[0] == 0x6C6F766E6F636564
                    && *(std::string::size_type *)((char *)v123->__r_.__value_.__r.__words + 5) == 0x6E6F6974756C6F76;
LABEL_611:
                v302 = v818;
                v303 = *(const void **)(v818 + 64);
                if (v303
                {
                  v305 = v304;
                  v306 = *(_QWORD *)(v302 + 72);
                  v805 = v304;
                  v806 = v306;
                  if (v306)
                  {
                    v307 = (unint64_t *)(v306 + 8);
                    do
                      v308 = __ldxr(v307);
                    while (__stxr(v308 + 1, v307));
                  }
                }
                else
                {
                  v305 = 0;
                  v806 = 0;
                  v805 = 0;
                }
                if ((a8 & 1) == 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v830, "blob_shuffled_weights");
                  v309 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
                  v310 = v309;
                  if ((v830[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)v830);
                    if (!v310)
                      goto LABEL_650;
                  }
                  else if (!v309)
                  {
                    goto LABEL_650;
                  }
                  if (v143)
                  {
                    v726 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v726, "Unsupported weights format");
                    __cxa_throw(v726, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  (*((void (**)(std::string *__return_ptr, void **))*v305 + 67))(&v829, v305);
                  v311 = a9[1];
                  v801 = *a9;
                  v802 = (std::__shared_weak_count *)v311;
                  if (v311)
                  {
                    v312 = (unint64_t *)(v311 + 8);
                    do
                      v313 = __ldxr(v312);
                    while (__stxr(v313 + 1, v312));
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v817, "blob_shuffled_weights");
                  v314 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v741 + 80))(v741, &v817);
                  v315 = v801;
                  v316 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v801 + 80))(v801, v314);
                  if (!v316)
                    Espresso::throw_exception_selector<Espresso::io_error>("MMapped data not available.");
                  Espresso::layer_nd_shape::shape_vector((std::vector<int> *)v830, (uint64_t)&v829);
                  v317 = *(char **)v830;
                  v318 = (char *)operator new(0x68uLL);
                  v319 = 0;
                  *((_QWORD *)v318 + 1) = 0;
                  *((_QWORD *)v318 + 2) = 0;
                  *(_QWORD *)v318 = &off_1E2DBED18;
                  *((_QWORD *)v318 + 3) = &off_1E2DA1230;
                  *(_OWORD *)(v318 + 72) = 0u;
                  v320 = v318 + 72;
                  *(_OWORD *)(v318 + 88) = 0u;
                  do
                  {
                    *(_DWORD *)&v318[v319 + 32] = *(_DWORD *)&v317[v319];
                    v319 += 4;
                  }
                  while (v319 != 24);
                  *((_QWORD *)v318 + 7) = v316;
                  v318[64] = 0;
                  v803 = (int *)(v318 + 24);
                  v804 = (std::__shared_weak_count *)v318;
                  *(_QWORD *)&v830[8] = v317;
                  operator delete(v317);
                  v321 = v802;
                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v320, v315, (uint64_t)v802);
                  if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v817.__r_.__value_.__l.__data_);
                  if (v321)
                  {
                    v322 = (unint64_t *)&v321->__shared_owners_;
                    do
                      v323 = __ldaxr(v322);
                    while (__stlxr(v323 - 1, v322));
                    if (!v323)
                    {
                      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                      std::__shared_weak_count::__release_weak(v321);
                    }
                  }
                  v324 = v805;
                  v799 = v803;
                  v800 = v804;
                  if (v804)
                  {
                    v325 = (unint64_t *)&v804->__shared_owners_;
                    do
                      v326 = __ldxr(v325);
                    while (__stxr(v326 + 1, v325));
                  }
                  (*((void (**)(void **, int **))*v324 + 51))(v324, &v799);
                  v327 = v800;
                  if (v800)
                  {
                    v328 = (unint64_t *)&v800->__shared_owners_;
                    do
                      v329 = __ldaxr(v328);
                    while (__stlxr(v329 - 1, v328));
                    if (!v329)
                    {
                      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                      std::__shared_weak_count::__release_weak(v327);
                    }
                  }
                  v330 = v804;
                  if (v804)
                  {
                    v331 = (unint64_t *)&v804->__shared_owners_;
                    do
                      v332 = __ldaxr(v331);
                    while (__stlxr(v332 - 1, v331));
                    if (!v332)
                    {
                      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                      std::__shared_weak_count::__release_weak(v330);
                    }
                  }
LABEL_650:
                  std::string::basic_string[abi:ne180100]<0>(v830, "blob_weights");
                  std::string::basic_string[abi:ne180100]<0>(&v829, "W");
                  v333 = (std::__shared_weak_count *)v806;
                  v798[0] = v805;
                  v798[1] = v806;
                  if (v806)
                  {
                    v334 = (unint64_t *)(v806 + 8);
                    do
                      v335 = __ldxr(v334);
                    while (__stxr(v335 + 1, v334));
                  }
                  Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v798);
                  if (v333)
                  {
                    v336 = (unint64_t *)&v333->__shared_owners_;
                    do
                      v337 = __ldaxr(v336);
                    while (__stlxr(v337 - 1, v336));
                    if (!v337)
                    {
                      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                      std::__shared_weak_count::__release_weak(v333);
                    }
                  }
                  if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v829.__r_.__value_.__l.__data_);
                  if ((v830[23] & 0x80000000) != 0)
                    operator delete(*(void **)v830);
                  std::string::basic_string[abi:ne180100]<0>(v830, "blob_biases");
                  v338 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
                  v339 = v338;
                  if ((v830[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)v830);
                    if (!v339)
                      goto LABEL_709;
                  }
                  else if (!v338)
                  {
                    goto LABEL_709;
                  }
                  (*((void (**)(_BYTE *__return_ptr))*v805 + 65))(v830);
                  v340 = (std::__shared_weak_count *)a9[1];
                  v796 = *a9;
                  v797 = v340;
                  if (v340)
                  {
                    v341 = (unint64_t *)&v340->__shared_owners_;
                    do
                      v342 = __ldxr(v341);
                    while (__stxr(v342 + 1, v341));
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v829, "blob_biases");
                  if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v829.__r_.__value_.__l.__data_);
                  v343 = v797;
                  if (v797)
                  {
                    v344 = (unint64_t *)&v797->__shared_owners_;
                    do
                      v345 = __ldaxr(v344);
                    while (__stlxr(v345 - 1, v344));
                    if (!v345)
                    {
                      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                      std::__shared_weak_count::__release_weak(v343);
                    }
                  }
                  v346 = v805;
                  v794 = v803;
                  v795 = v804;
                  if (v804)
                  {
                    v347 = (unint64_t *)&v804->__shared_owners_;
                    do
                      v348 = __ldxr(v347);
                    while (__stxr(v348 + 1, v347));
                  }
                  v793 = v826;
                  if (*((_QWORD *)&v826 + 1))
                  {
                    v349 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
                    do
                      v350 = __ldxr(v349);
                    while (__stxr(v350 + 1, v349));
                  }
                  (*((void (**)(void **, int **, __int128 *))*v346 + 52))(v346, &v794, &v793);
                  v351 = (std::__shared_weak_count *)*((_QWORD *)&v793 + 1);
                  if (*((_QWORD *)&v793 + 1))
                  {
                    v352 = (unint64_t *)(*((_QWORD *)&v793 + 1) + 8);
                    do
                      v353 = __ldaxr(v352);
                    while (__stlxr(v353 - 1, v352));
                    if (!v353)
                    {
                      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                      std::__shared_weak_count::__release_weak(v351);
                    }
                  }
                  v354 = v795;
                  if (v795)
                  {
                    v355 = (unint64_t *)&v795->__shared_owners_;
                    do
                      v356 = __ldaxr(v355);
                    while (__stlxr(v356 - 1, v355));
                    if (!v356)
                    {
                      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                      std::__shared_weak_count::__release_weak(v354);
                    }
                  }
                  v825 += 4 * v803[2];
                  v357 = (std::__shared_weak_count *)v806;
                  v792[0] = (uint64_t)v805;
                  v792[1] = v806;
                  if (v806)
                  {
                    v358 = (unint64_t *)(v806 + 8);
                    do
                      v359 = __ldxr(v358);
                    while (__stxr(v359 + 1, v358));
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v829, "blob_biases");
                  std::string::basic_string[abi:ne180100]<0>(&v817, "b");
                  Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v816, v792, (uint64_t)&v829, (uint64_t)&v817);
                  if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v817.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v829.__r_.__value_.__l.__data_);
                  if (v357)
                  {
                    v360 = (unint64_t *)&v357->__shared_owners_;
                    do
                      v361 = __ldaxr(v360);
                    while (__stlxr(v361 - 1, v360));
                    if (!v361)
                    {
                      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                      std::__shared_weak_count::__release_weak(v357);
                    }
                  }
                  v362 = v804;
                  if (v804)
                  {
                    v363 = (unint64_t *)&v804->__shared_owners_;
                    do
                      v364 = __ldaxr(v363);
                    while (__stlxr(v364 - 1, v363));
                    if (!v364)
                    {
                      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                      std::__shared_weak_count::__release_weak(v362);
                    }
                  }
LABEL_709:
                  std::string::basic_string[abi:ne180100]<0>(v830, "blob_biases_f16");
                  std::string::basic_string[abi:ne180100]<0>(&v829, "b_f16");
                  v365 = (std::__shared_weak_count *)v806;
                  v791[0] = v805;
                  v791[1] = v806;
                  if (v806)
                  {
                    v366 = (unint64_t *)(v806 + 8);
                    do
                      v367 = __ldxr(v366);
                    while (__stxr(v367 + 1, v366));
                  }
                  Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v791);
                  if (v365)
                  {
                    v368 = (unint64_t *)&v365->__shared_owners_;
                    do
                      v369 = __ldaxr(v368);
                    while (__stlxr(v369 - 1, v368));
                    if (!v369)
                    {
                      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                      std::__shared_weak_count::__release_weak(v365);
                    }
                  }
                  if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v829.__r_.__value_.__l.__data_);
                  if ((v830[23] & 0x80000000) != 0)
                    operator delete(*(void **)v830);
                }
                std::string::basic_string[abi:ne180100]<0>(v830, "quantization_lut_weights_blob");
                std::string::basic_string[abi:ne180100]<0>(&v829, "W_u8");
                v370 = (std::__shared_weak_count *)v806;
                v790[0] = v805;
                v790[1] = v806;
                if (v806)
                {
                  v371 = (unint64_t *)(v806 + 8);
                  do
                    v372 = __ldxr(v371);
                  while (__stxr(v372 + 1, v371));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v790);
                if (v370)
                {
                  v373 = (unint64_t *)&v370->__shared_owners_;
                  do
                    v374 = __ldaxr(v373);
                  while (__stlxr(v374 - 1, v373));
                  if (!v374)
                  {
                    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                    std::__shared_weak_count::__release_weak(v370);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v830);
                  if (v143)
                    goto LABEL_770;
                }
                else if (v143)
                {
                  goto LABEL_770;
                }
                std::string::basic_string[abi:ne180100]<0>(v830, "quantization_lut_blob");
                v375 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
                v376 = v375;
                if ((v830[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v830);
                  if (!v376)
                    goto LABEL_770;
                }
                else if (!v375)
                {
                  goto LABEL_770;
                }
                (*((void (**)(_BYTE *__return_ptr))*v805 + 66))(v830);
                v377 = (std::__shared_weak_count *)a9[1];
                v788 = *a9;
                v789 = v377;
                if (v377)
                {
                  v378 = (unint64_t *)&v377->__shared_owners_;
                  do
                    v379 = __ldxr(v378);
                  while (__stxr(v379 + 1, v378));
                }
                std::string::basic_string[abi:ne180100]<0>(&v829, "quantization_lut_blob");
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                v380 = v789;
                if (v789)
                {
                  v381 = (unint64_t *)&v789->__shared_owners_;
                  do
                    v382 = __ldaxr(v381);
                  while (__stlxr(v382 - 1, v381));
                  if (!v382)
                  {
                    ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                    std::__shared_weak_count::__release_weak(v380);
                  }
                }
                v383 = v805;
                v787 = *(_OWORD *)&v817.__r_.__value_.__l.__data_;
                if (v817.__r_.__value_.__l.__size_)
                {
                  v384 = (unint64_t *)(v817.__r_.__value_.__l.__size_ + 8);
                  do
                    v385 = __ldxr(v384);
                  while (__stxr(v385 + 1, v384));
                }
                v786 = v826;
                if (*((_QWORD *)&v826 + 1))
                {
                  v386 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
                  do
                    v387 = __ldxr(v386);
                  while (__stxr(v387 + 1, v386));
                }
                (*((void (**)(void **, __int128 *, __int128 *))*v383 + 72))(v383, &v787, &v786);
                v388 = (std::__shared_weak_count *)*((_QWORD *)&v786 + 1);
                if (*((_QWORD *)&v786 + 1))
                {
                  v389 = (unint64_t *)(*((_QWORD *)&v786 + 1) + 8);
                  do
                    v390 = __ldaxr(v389);
                  while (__stlxr(v390 - 1, v389));
                  if (!v390)
                  {
                    ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                    std::__shared_weak_count::__release_weak(v388);
                  }
                }
                v391 = (std::__shared_weak_count *)*((_QWORD *)&v787 + 1);
                if (*((_QWORD *)&v787 + 1))
                {
                  v392 = (unint64_t *)(*((_QWORD *)&v787 + 1) + 8);
                  do
                    v393 = __ldaxr(v392);
                  while (__stlxr(v393 - 1, v392));
                  if (!v393)
                  {
                    ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                    std::__shared_weak_count::__release_weak(v391);
                  }
                }
                v394 = (std::__shared_weak_count *)v817.__r_.__value_.__l.__size_;
                if (v817.__r_.__value_.__l.__size_)
                {
                  v395 = (unint64_t *)(v817.__r_.__value_.__l.__size_ + 8);
                  do
                    v396 = __ldaxr(v395);
                  while (__stlxr(v396 - 1, v395));
                  if (!v396)
                  {
                    ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                    std::__shared_weak_count::__release_weak(v394);
                  }
                }
LABEL_770:
                std::string::basic_string[abi:ne180100]<0>(v830, "quantization_ranges_blob");
                std::string::basic_string[abi:ne180100]<0>(&v829, "q_u8_range");
                v397 = (std::__shared_weak_count *)v806;
                v785[0] = v805;
                v785[1] = v806;
                if (v806)
                {
                  v398 = (unint64_t *)(v806 + 8);
                  do
                    v399 = __ldxr(v398);
                  while (__stxr(v399 + 1, v398));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v785);
                if (v397)
                {
                  v400 = (unint64_t *)&v397->__shared_owners_;
                  do
                    v401 = __ldaxr(v400);
                  while (__stlxr(v401 - 1, v400));
                  if (!v401)
                  {
                    ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                    std::__shared_weak_count::__release_weak(v397);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                std::string::basic_string[abi:ne180100]<0>(v830, "blob_weights_f16");
                std::string::basic_string[abi:ne180100]<0>(&v829, "W_f16");
                v402 = (std::__shared_weak_count *)v806;
                v784[0] = v805;
                v784[1] = v806;
                if (v806)
                {
                  v403 = (unint64_t *)(v806 + 8);
                  do
                    v404 = __ldxr(v403);
                  while (__stxr(v404 + 1, v403));
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v807, (uint64_t)v830, (uint64_t)&v829, (uint64_t)v784);
                if (v402)
                {
                  v405 = (unint64_t *)&v402->__shared_owners_;
                  do
                    v406 = __ldaxr(v405);
                  while (__stlxr(v406 - 1, v405));
                  if (!v406)
                  {
                    ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                    std::__shared_weak_count::__release_weak(v402);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
                v165 = (std::__shared_weak_count *)v806;
                if (v806)
                {
                  v407 = (unint64_t *)(v806 + 8);
                  do
                    v192 = __ldaxr(v407);
                  while (__stlxr(v192 - 1, v407));
                  goto LABEL_1086;
                }
                break;
              }
              if (v822.__r_.__value_.__r.__words[0] != 0x6E6F635F64616F6CLL
                || *(std::string::size_type *)((char *)v822.__r_.__value_.__r.__words + 5) != 0x746E6174736E6F63)
              {
                v123 = &v822;
                goto LABEL_319;
              }
LABEL_286:
              std::string::basic_string[abi:ne180100]<0>(v830, "constant_blob");
              v146 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
              v147 = v146;
              if ((v830[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v830);
                if (!v147)
                  break;
              }
              else if (!v146)
              {
                break;
              }
              std::string::basic_string[abi:ne180100]<0>(&v829, "w");
              Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)&v829, v830);
              if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 24))(*(_QWORD *)v830, &v830[16]))
              {
                v442 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 40))(*(_QWORD *)v830, &v830[16]);
              }
              else
              {
                v442 = 0;
              }
              if ((v830[39] & 0x80000000) != 0)
                operator delete(*(void **)&v830[16]);
              v464 = *(std::__shared_weak_count **)&v830[8];
              if (*(_QWORD *)&v830[8])
              {
                v465 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
                do
                  v466 = __ldaxr(v465);
                while (__stlxr(v466 - 1, v465));
                if (!v466)
                {
                  ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                  std::__shared_weak_count::__release_weak(v464);
                }
              }
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v829, "h");
              Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)&v829, v830);
              if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 24))(*(_QWORD *)v830, &v830[16]))
              {
                v467 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 40))(*(_QWORD *)v830, &v830[16]);
              }
              else
              {
                v467 = 0;
              }
              if ((v830[39] & 0x80000000) != 0)
                operator delete(*(void **)&v830[16]);
              v468 = *(std::__shared_weak_count **)&v830[8];
              if (*(_QWORD *)&v830[8])
              {
                v469 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
                do
                  v470 = __ldaxr(v469);
                while (__stlxr(v470 - 1, v469));
                if (!v470)
                {
                  ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
                  std::__shared_weak_count::__release_weak(v468);
                }
              }
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v829, "k");
              Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)&v829, v830);
              if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 24))(*(_QWORD *)v830, &v830[16]))
              {
                v471 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 40))(*(_QWORD *)v830, &v830[16]);
              }
              else
              {
                v471 = 0;
              }
              if ((v830[39] & 0x80000000) != 0)
                operator delete(*(void **)&v830[16]);
              v472 = *(std::__shared_weak_count **)&v830[8];
              if (*(_QWORD *)&v830[8])
              {
                v473 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
                do
                  v474 = __ldaxr(v473);
                while (__stlxr(v474 - 1, v473));
                if (!v474)
                {
                  ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                  std::__shared_weak_count::__release_weak(v472);
                }
              }
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v829, "n");
              Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)&v829, v830);
              if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 24))(*(_QWORD *)v830, &v830[16]))
              {
                v475 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 40))(*(_QWORD *)v830, &v830[16]);
              }
              else
              {
                v475 = 0;
              }
              if ((v830[39] & 0x80000000) != 0)
                operator delete(*(void **)&v830[16]);
              v476 = *(std::__shared_weak_count **)&v830[8];
              if (*(_QWORD *)&v830[8])
              {
                v477 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
                do
                  v478 = __ldaxr(v477);
                while (__stlxr(v478 - 1, v477));
                if (!v478)
                {
                  ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
                  std::__shared_weak_count::__release_weak(v476);
                }
              }
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(v830, "seq");
              v479 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
              if ((v830[23] & 0x80000000) != 0)
                operator delete(*(void **)v830);
              v742 = v471;
              v727 = v467;
              v728 = v442;
              if (v479)
              {
                std::string::basic_string[abi:ne180100]<0>(&v829, "seq");
                Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v24, (uint64_t)&v829, v830);
                if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 24))(*(_QWORD *)v830, &v830[16]))
                {
                  v480 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)v830 + 40))(*(_QWORD *)v830, &v830[16]);
                }
                else
                {
                  v480 = 1;
                }
                if ((v830[39] & 0x80000000) != 0)
                  operator delete(*(void **)&v830[16]);
                v508 = *(std::__shared_weak_count **)&v830[8];
                if (*(_QWORD *)&v830[8])
                {
                  v509 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
                  do
                    v510 = __ldaxr(v509);
                  while (__stlxr(v510 - 1, v509));
                  if (!v510)
                  {
                    ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
                    std::__shared_weak_count::__release_weak(v508);
                  }
                }
                if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v829.__r_.__value_.__l.__data_);
                v481 = v480;
              }
              else
              {
                v481 = 1;
              }
              v511 = v818;
              v512 = *(const void **)(v818 + 64);
              if (v512
              {
                v514 = v513;
                v515 = *(std::__shared_weak_count **)(v511 + 72);
                v817.__r_.__value_.__r.__words[0] = (std::string::size_type)v513;
                v817.__r_.__value_.__l.__size_ = (std::string::size_type)v515;
                if (v515)
                {
                  v516 = (unint64_t *)&v515->__shared_owners_;
                  do
                    v517 = __ldxr(v516);
                  while (__stxr(v517 + 1, v516));
                }
              }
              else
              {
                v515 = 0;
                v514 = 0;
                *(_OWORD *)&v817.__r_.__value_.__l.__data_ = 0uLL;
              }
              std::string::basic_string[abi:ne180100]<0>(v830, "constant_blob");
              v518 = (*(uint64_t (**)(Espresso *, _BYTE *))(*(_QWORD *)v24 + 80))(v24, v830);
              if ((v830[23] & 0x80000000) != 0)
                operator delete(*(void **)v830);
              if (v37 != 100 && v37)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(v830, v728, v727, v742, v481 * v475);
                v524 = *(_QWORD *)v830;
                v525 = *(int *)(*(_QWORD *)v830 + 8);
                for (j = 12; j != 24; j += 4)
                  v525 *= *(int *)(*(_QWORD *)v830 + j);
                (*(void (**)(std::string::size_type, unint64_t, _QWORD, uint64_t))(*(_QWORD *)*a9 + 16))(*a9, v518, *(_QWORD *)(*(_QWORD *)v830 + 24), 4 * v525);
                v527 = *(std::__shared_weak_count **)&v830[8];
                v776[0] = v524;
                v776[1] = *(_QWORD *)&v830[8];
                if (*(_QWORD *)&v830[8])
                {
                  v528 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
                  do
                    v529 = __ldxr(v528);
                  while (__stxr(v529 + 1, v528));
                }
                Espresso::generic_load_constant_kernel::set_constant_blob(v514, (uint64_t)v776);
                if (v527)
                {
                  v530 = (unint64_t *)&v527->__shared_owners_;
                  do
                    v531 = __ldaxr(v530);
                  while (__stlxr(v531 - 1, v530));
                  if (!v531)
                  {
                    ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
                    std::__shared_weak_count::__release_weak(v527);
                  }
                }
                v532 = 0;
                v533 = *(int *)(*(_QWORD *)v830 + 8);
                do
                {
                  v533 *= *(int *)(*(_QWORD *)v830 + 12 + v532);
                  v532 += 4;
                }
                while (v532 != 12);
                v534 = *(std::__shared_weak_count **)&v830[8];
                if (*(_QWORD *)&v830[8])
                {
                  v535 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
                  do
                    v536 = __ldaxr(v535);
                  while (__stlxr(v536 - 1, v535));
                  if (!v536)
                  {
                    ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
                    std::__shared_weak_count::__release_weak(v534);
                  }
                }
                v521 = 4 * v533;
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v830, "constant_blob");
                v777[0] = v514;
                v777[1] = &v515->__vftable;
                if (v515)
                {
                  v519 = (unint64_t *)&v515->__shared_owners_;
                  do
                    v520 = __ldxr(v519);
                  while (__stxr(v520 + 1, v519));
                }
                v521 = Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_1::operator()((uint64_t *)&v809, (uint64_t)v830, v518, v777, 0);
                if (v515)
                {
                  v522 = (unint64_t *)&v515->__shared_owners_;
                  do
                    v523 = __ldaxr(v522);
                  while (__stlxr(v523 - 1, v522));
                  if (!v523)
                  {
                    ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
                    std::__shared_weak_count::__release_weak(v515);
                  }
                }
                if ((v830[23] & 0x80000000) != 0)
                  operator delete(*(void **)v830);
              }
              v537 = (std::__shared_weak_count *)v817.__r_.__value_.__l.__size_;
              v775 = *(_OWORD *)&v817.__r_.__value_.__l.__data_;
              if (v817.__r_.__value_.__l.__size_)
              {
                v538 = (unint64_t *)(v817.__r_.__value_.__l.__size_ + 8);
                do
                  v539 = __ldxr(v538);
                while (__stxr(v539 + 1, v538));
              }
              std::string::basic_string[abi:ne180100]<0>(v830, "constant_blob");
              std::string::basic_string[abi:ne180100]<0>(&v829, "constant_blob");
              Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v816, (uint64_t *)&v775, (uint64_t)v830, (uint64_t)&v829);
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
              if ((v830[23] & 0x80000000) != 0)
                operator delete(*(void **)v830);
              if (v537)
              {
                v540 = (unint64_t *)&v537->__shared_owners_;
                do
                  v541 = __ldaxr(v540);
                while (__stlxr(v541 - 1, v540));
                if (!v541)
                {
                  ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
                  std::__shared_weak_count::__release_weak(v537);
                }
              }
              v825 += v521;
              v165 = (std::__shared_weak_count *)v817.__r_.__value_.__l.__size_;
              if (v817.__r_.__value_.__l.__size_)
              {
                v542 = (unint64_t *)(v817.__r_.__value_.__l.__size_ + 8);
                do
                  v192 = __ldaxr(v542);
                while (__stlxr(v192 - 1, v542));
                goto LABEL_1086;
              }
              break;
            case 0x10:
              if (v822.__r_.__value_.__r.__words[0] != 0x6E6F635F6174656DLL
                || v822.__r_.__value_.__l.__size_ != 0x6E6F6974756C6F76)
              {
                goto LABEL_418;
              }
              goto LABEL_276;
            default:
              goto LABEL_385;
          }
        }
      }
      else
      {
LABEL_323:
        if ((*((_BYTE *)&v822.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v118 = v822.__r_.__value_.__l.__size_;
LABEL_329:
          if (v118 <= 15)
          {
            if (v118 != 3)
            {
              if (v118 != 5)
                goto LABEL_1088;
              v116 = (std::string *)v822.__r_.__value_.__r.__words[0];
LABEL_333:
              if (LODWORD(v116->__r_.__value_.__l.__data_) == 1667854946 && v116->__r_.__value_.__s.__data_[4] == 107)
              {
                v163 = v818;
                v165 = *(std::__shared_weak_count **)(v163 + 72);
                v817.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
                v817.__r_.__value_.__l.__size_ = (std::string::size_type)v165;
                if (v165)
                {
                  v166 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v167 = __ldxr(v166);
                  while (__stxr(v167 + 1, v166));
                }
                v168 = (__int128 *)v164[48];
                v169 = (__int128 *)(v164 + 49);
                if (v168 != (__int128 *)(v164 + 49))
                {
                  do
                  {
                    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)v830, v168 + 2);
                    if (v830[23] >= 0)
                      v170 = v830;
                    else
                      v170 = *(char **)v830;
                    std::string::basic_string[abi:ne180100]<0>(&v829, v170);
                    v171 = *(_QWORD *)&v830[24];
                    v753 = *(_QWORD *)&v830[24];
                    v754 = *(std::__shared_weak_count **)&v830[32];
                    if (*(_QWORD *)&v830[32])
                    {
                      v172 = (unint64_t *)(*(_QWORD *)&v830[32] + 8);
                      do
                        v173 = __ldxr(v172);
                      while (__stxr(v173 + 1, v172));
                    }
                    v174 = a9[1];
                    v751 = *a9;
                    v752 = (std::__shared_weak_count *)v174;
                    if (v174)
                    {
                      v175 = (unint64_t *)(v174 + 8);
                      do
                        v176 = __ldxr(v175);
                      while (__stxr(v176 + 1, v175));
                    }
                    v177 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v741 + 80))(v741, &v829);
                    if (*(_BYTE *)(v171 + 24))
                      free(*(void **)(v171 + 16));
                    v178 = v751;
                    v179 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v751 + 80))(v751, v177);
                    *(_QWORD *)(v171 + 16) = v179;
                    if (!v179)
                      Espresso::throw_exception_selector<Espresso::io_error>("MMapped data not available.");
                    v180 = v752;
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v171 + 32), v178, (uint64_t)v752);
                    *(_BYTE *)(v171 + 24) = 0;
                    if (v180)
                    {
                      v181 = (unint64_t *)&v180->__shared_owners_;
                      do
                        v182 = __ldaxr(v181);
                      while (__stlxr(v182 - 1, v181));
                      if (!v182)
                      {
                        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                        std::__shared_weak_count::__release_weak(v180);
                      }
                    }
                    v183 = v754;
                    if (v754)
                    {
                      v184 = (unint64_t *)&v754->__shared_owners_;
                      do
                        v185 = __ldaxr(v184);
                      while (__stlxr(v185 - 1, v184));
                      if (!v185)
                      {
                        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                        std::__shared_weak_count::__release_weak(v183);
                      }
                    }
                    if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v829.__r_.__value_.__l.__data_);
                    v186 = *(std::__shared_weak_count **)&v830[32];
                    if (*(_QWORD *)&v830[32])
                    {
                      v187 = (unint64_t *)(*(_QWORD *)&v830[32] + 8);
                      do
                        v188 = __ldaxr(v187);
                      while (__stlxr(v188 - 1, v187));
                      if (!v188)
                      {
                        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                        std::__shared_weak_count::__release_weak(v186);
                      }
                    }
                    if ((v830[23] & 0x80000000) != 0)
                      operator delete(*(void **)v830);
                    v189 = (__int128 *)*((_QWORD *)v168 + 1);
                    if (v189)
                    {
                      do
                      {
                        v190 = v189;
                        v189 = *(__int128 **)v189;
                      }
                      while (v189);
                    }
                    else
                    {
                      do
                      {
                        v190 = (__int128 *)*((_QWORD *)v168 + 2);
                        v42 = *(_QWORD *)v190 == (_QWORD)v168;
                        v168 = v190;
                      }
                      while (!v42);
                    }
                    v168 = v190;
                  }
                  while (v190 != v169);
                  v165 = (std::__shared_weak_count *)v817.__r_.__value_.__l.__size_;
                }
                if (v165)
                {
                  v191 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v192 = __ldaxr(v191);
                  while (__stlxr(v192 - 1, v191));
                  goto LABEL_1086;
                }
              }
              goto LABEL_1088;
            }
            if (*(_WORD *)v822.__r_.__value_.__l.__data_ != 28274
              || *(_BYTE *)(v822.__r_.__value_.__r.__words[0] + 2) != 110)
            {
              goto LABEL_1088;
            }
            goto LABEL_448;
          }
          if (v118 != 16)
          {
            if (v118 == 28)
            {
              v197 = *(_QWORD *)v822.__r_.__value_.__l.__data_ == 0x6F727072656E6E69
                  && *(_QWORD *)(v822.__r_.__value_.__r.__words[0] + 8) == 0x79616C5F74637564;
              v198 = v197 && *(_QWORD *)(v822.__r_.__value_.__r.__words[0] + 16) == 0x746E6175715F7265;
              if (v198 && *(_DWORD *)(v822.__r_.__value_.__r.__words[0] + 24) == 1684372073)
              {
LABEL_1360:
                v716 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v716, "Unmaintained layer");
                __cxa_throw(v716, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
            }
            goto LABEL_1088;
          }
LABEL_424:
          if (*(_QWORD *)v822.__r_.__value_.__l.__data_ != 0x5F747865746E6F63
            || *(_QWORD *)(v822.__r_.__value_.__r.__words[0] + 8) != 0x726566736E617274)
          {
            goto LABEL_1088;
          }
        }
        else
        {
          if (HIBYTE(v822.__r_.__value_.__r.__words[2]) <= 0xFu)
          {
            if (HIBYTE(v822.__r_.__value_.__r.__words[2]) != 3)
            {
              if (HIBYTE(v822.__r_.__value_.__r.__words[2]) != 5)
                goto LABEL_1088;
LABEL_327:
              v116 = &v822;
              goto LABEL_333;
            }
LABEL_398:
            if (LOWORD(v822.__r_.__value_.__l.__data_) != 28274 || v822.__r_.__value_.__s.__data_[2] != 110)
              goto LABEL_1088;
LABEL_448:
            v210 = v818;
            v165 = *(std::__shared_weak_count **)(v210 + 72);
            v805 = v211;
            v806 = (uint64_t)v165;
            if (v165)
            {
              v212 = (unint64_t *)&v165->__shared_owners_;
              do
                v213 = __ldxr(v212);
              while (__stxr(v213 + 1, v212));
            }
            (*((void (**)(void **, _QWORD))*v211 + 44))(v211, v819);
            if (!*a9)
            {
LABEL_806:
              if (!v165)
                goto LABEL_1088;
LABEL_807:
              v415 = (unint64_t *)&v165->__shared_owners_;
              do
                v192 = __ldaxr(v415);
              while (__stlxr(v192 - 1, v415));
LABEL_1086:
              if (!v192)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
              goto LABEL_1088;
            }
            std::string::basic_string[abi:ne180100]<0>(v830, "weights");
            v214 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v741 + 24))(v741, v830);
            v215 = v214;
            if ((v830[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v830);
              if (!v215)
                goto LABEL_806;
            }
            else if (!v214)
            {
              goto LABEL_806;
            }
            v804 = 0;
            v803 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v829, "weights");
            Espresso::SerDes::generic_serdes_object::operator[](v741, (uint64_t)&v829, v830);
            Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v830, (uint64_t)&v803);
            if ((v830[39] & 0x80000000) != 0)
              operator delete(*(void **)&v830[16]);
            v216 = *(std::__shared_weak_count **)&v830[8];
            if (*(_QWORD *)&v830[8])
            {
              v217 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
            if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v829.__r_.__value_.__l.__data_);
            v219 = v803;
            memset(v830, 0, 24);
            (*(void (**)(int *, _BYTE *))(*(_QWORD *)v803 + 32))(v803, v830);
            v220 = *(__int128 **)&v830[8];
            for (k = *(__int128 **)v830; k != v220; k = (__int128 *)((char *)k + 24))
            {
              if (*((char *)k + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v829, *(const std::string::value_type **)k, *((_QWORD *)k + 1));
              }
              else
              {
                v222 = *k;
                v829.__r_.__value_.__r.__words[2] = *((_QWORD *)k + 2);
                *(_OWORD *)&v829.__r_.__value_.__l.__data_ = v222;
              }
              v223 = v805;
              if ((v829.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v224 = &v829;
              else
                v224 = (std::string *)v829.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(&v817, (char *)v224);
              Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(&v755, (_QWORD **)v223, (uint64_t)&v817, v819);
              if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v817.__r_.__value_.__l.__data_);
              v225 = v755;
              if (v755)
              {
                v226 = (*(uint64_t (**)(int *, std::string *))(*(_QWORD *)v219 + 80))(v219, &v829);
                (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v225 + 56))(&v817, v225);
                v227 = 0;
                v228 = *(int *)(v817.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v228 *= *(int *)(v817.__r_.__value_.__r.__words[0] + 12 + v227);
                  v227 += 4;
                }
                while (v227 != 12);
                (*(void (**)(std::string::size_type, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*a9 + 16))(*a9, v226, *(_QWORD *)(v817.__r_.__value_.__r.__words[0] + 24), 4 * v228);
                (*(void (**)(uint64_t, __int128 *, std::string *))(*(_QWORD *)v225 + 48))(v225, &v826, &v817);
                v229 = 0;
                v230 = *(int *)(v817.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v230 *= *(int *)(v817.__r_.__value_.__r.__words[0] + 12 + v229);
                  v229 += 4;
                }
                while (v229 != 12);
                v825 += 4 * v230;
                v231 = (std::__shared_weak_count *)v817.__r_.__value_.__l.__size_;
                if (v817.__r_.__value_.__l.__size_)
                {
                  v232 = (unint64_t *)(v817.__r_.__value_.__l.__size_ + 8);
                  do
                    v233 = __ldaxr(v232);
                  while (__stlxr(v233 - 1, v232));
                  if (!v233)
                  {
                    ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                    std::__shared_weak_count::__release_weak(v231);
                  }
                }
              }
              v234 = v756;
              if (v756)
              {
                v235 = (unint64_t *)&v756->__shared_owners_;
                do
                  v236 = __ldaxr(v235);
                while (__stlxr(v236 - 1, v235));
                if (!v236)
                {
                  ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                  std::__shared_weak_count::__release_weak(v234);
                }
              }
              if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v829.__r_.__value_.__l.__data_);
            }
            v829.__r_.__value_.__r.__words[0] = (std::string::size_type)v830;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v829);
            v298 = v804;
            if (v804)
            {
              v299 = (unint64_t *)&v804->__shared_owners_;
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                std::__shared_weak_count::__release_weak(v298);
              }
            }
            v165 = (std::__shared_weak_count *)v806;
            if (v806)
              goto LABEL_807;
            goto LABEL_1088;
          }
          if (HIBYTE(v822.__r_.__value_.__r.__words[2]) != 16)
          {
LABEL_385:
            if (HIBYTE(v822.__r_.__value_.__r.__words[2]) == 28)
            {
              v193 = v822.__r_.__value_.__r.__words[0] == 0x6F727072656E6E69
                  && v822.__r_.__value_.__l.__size_ == 0x79616C5F74637564;
              v194 = v193 && v822.__r_.__value_.__r.__words[2] == 0x746E6175715F7265;
              if (v194 && v823 == 1684372073)
                goto LABEL_1360;
            }
            goto LABEL_1088;
          }
LABEL_418:
          if (v822.__r_.__value_.__r.__words[0] != 0x5F747865746E6F63
            || v822.__r_.__value_.__l.__size_ != 0x726566736E617274)
          {
            goto LABEL_1088;
          }
        }
        LODWORD(v803) = (***(uint64_t (****)(_QWORD))(v111 + 8))(*(_QWORD *)(v111 + 8));
        if (((_DWORD)v803 - 10006) > 2)
        {
          v237 = v818;
          v238 = *(const void **)(v818 + 64);
          if (v238
          {
            v240 = *(_QWORD *)(v237 + 72);
            *(_QWORD *)v830 = v239;
            *(_QWORD *)&v830[8] = v240;
            if (v240)
            {
              v241 = (unint64_t *)(v240 + 8);
              do
                v242 = __ldxr(v241);
              while (__stxr(v242 + 1, v241));
            }
          }
          else
          {
            v239 = 0;
            *(_OWORD *)v830 = 0uLL;
          }
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v239 + 41, (uint64_t)v827, (uint64_t)v828);
          v271 = *(_QWORD *)v830;
          LODWORD(v817.__r_.__value_.__l.__data_) = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v830
                                                                                                  + 320))(*(_QWORD *)v830)
                                                              + 20);
          Espresso::create_context((int *)&v817, &v829);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v271 + 8, (__int128 *)&v829);
          v272 = (std::__shared_weak_count *)v829.__r_.__value_.__l.__size_;
          if (v829.__r_.__value_.__l.__size_)
          {
            v273 = (unint64_t *)(v829.__r_.__value_.__l.__size_ + 8);
            do
              v274 = __ldaxr(v273);
            while (__stlxr(v274 - 1, v273));
            if (!v274)
            {
              ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
              std::__shared_weak_count::__release_weak(v272);
            }
          }
          v275 = *(uint64_t **)v830;
          v276 = *(_QWORD *)(*(_QWORD *)v830 + 8);
          *(_BYTE *)(v276 + 53) = *((_BYTE *)v827 + 53);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v275 + 39, v276, v275[2]);
          if ((_QWORD)v826)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v826 + 16))(v826);
            (*(void (**)(_QWORD))(*(_QWORD *)v826 + 24))(v826);
          }
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v827, v275[1], v275[2]);
          (**v827)(&v829);
          v277 = *(_OWORD *)&v829.__r_.__value_.__l.__data_;
          *(_OWORD *)&v829.__r_.__value_.__l.__data_ = 0uLL;
          v278 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
          v826 = v277;
          if (v278)
          {
            v279 = (unint64_t *)&v278->__shared_owners_;
            do
              v280 = __ldaxr(v279);
            while (__stlxr(v280 - 1, v279));
            if (!v280)
            {
              ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
              std::__shared_weak_count::__release_weak(v278);
            }
          }
          v281 = (std::__shared_weak_count *)v829.__r_.__value_.__l.__size_;
          if (v829.__r_.__value_.__l.__size_)
          {
            v282 = (unint64_t *)(v829.__r_.__value_.__l.__size_ + 8);
            do
              v283 = __ldaxr(v282);
            while (__stlxr(v283 - 1, v282));
            if (!v283)
            {
              ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
              std::__shared_weak_count::__release_weak(v281);
            }
          }
          *(_DWORD *)(v818 + 12) = 0;
          v284 = (*(uint64_t (**)(_QWORD))*v827[1])(v827[1]);
          *(_DWORD *)(v818 + 8) = v284;
          if (*v738)
          {
            v285 = *(_QWORD *)*a4;
            v286 = *(_QWORD *)(*a4 + 8);
            while (v285 != v286)
            {
              *(_OWORD *)&v829.__r_.__value_.__l.__data_ = 0uLL;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v285 + 88, (__int128 *)&v829);
              v287 = (std::__shared_weak_count *)v829.__r_.__value_.__l.__size_;
              if (v829.__r_.__value_.__l.__size_)
              {
                v288 = (unint64_t *)(v829.__r_.__value_.__l.__size_ + 8);
                do
                  v289 = __ldaxr(v288);
                while (__stlxr(v289 - 1, v288));
                if (!v289)
                {
                  ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                  std::__shared_weak_count::__release_weak(v287);
                }
              }
              v285 += 224;
            }
          }
          v290 = *(std::__shared_weak_count **)&v830[8];
          if (*(_QWORD *)&v830[8])
          {
            v291 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
            do
              v292 = __ldaxr(v291);
            while (__stlxr(v292 - 1, v291));
            if (!v292)
            {
              ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
              std::__shared_weak_count::__release_weak(v290);
            }
          }
          a7 = 0;
        }
        else
        {
          *(_OWORD *)&v830[20] = 0uLL;
          *(_OWORD *)&v830[4] = 0x3F800000uLL;
          *(_DWORD *)v830 = 6;
          MEMORY[0x19401C808](v818 + 40, "activation");
          if (v735 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v12 + 712) + 48) + 4 * v19))
          {
            Espresso::abstract_engine_factory::shared(&v805);
            v202 = v805;
            v203 = *v738;
            std::string::basic_string[abi:ne180100]<0>(&v829, "activation");
            v204 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*v738 + 72) + 8);
            LODWORD(v755) = (**v204)(v204);
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v202, v203 + 72, (uint64_t)&v829, (uint64_t)v830, (int *)&v755);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v818 + 64, (__int128 *)&v817);
            v205 = (std::__shared_weak_count *)v817.__r_.__value_.__l.__size_;
            if (v817.__r_.__value_.__l.__size_)
            {
              v206 = (unint64_t *)(v817.__r_.__value_.__l.__size_ + 8);
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 - 1, v206));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v205);
              }
            }
            if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v829.__r_.__value_.__l.__data_);
            v165 = (std::__shared_weak_count *)v806;
            if (v806)
            {
              v208 = (unint64_t *)(v806 + 8);
              do
                v192 = __ldaxr(v208);
              while (__stlxr(v192 - 1, v208));
              goto LABEL_1086;
            }
          }
          else
          {
            Espresso::abstract_engine_factory::shared(&v805);
            v293 = v805;
            std::string::basic_string[abi:ne180100]<0>(&v829, "activation");
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v293, (uint64_t)&v827, (uint64_t)&v829, (uint64_t)v830, (int *)&v803);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v818 + 64, (__int128 *)&v817);
            v294 = (std::__shared_weak_count *)v817.__r_.__value_.__l.__size_;
            if (v817.__r_.__value_.__l.__size_)
            {
              v295 = (unint64_t *)(v817.__r_.__value_.__l.__size_ + 8);
              do
                v296 = __ldaxr(v295);
              while (__stlxr(v296 - 1, v295));
              if (!v296)
              {
                ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                std::__shared_weak_count::__release_weak(v294);
              }
            }
            if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v829.__r_.__value_.__l.__data_);
            v165 = (std::__shared_weak_count *)v806;
            if (v806)
            {
              v297 = (unint64_t *)(v806 + 8);
              do
                v192 = __ldaxr(v297);
              while (__stlxr(v192 - 1, v297));
              goto LABEL_1086;
            }
          }
        }
      }
LABEL_1088:
      v543 = v818;
      if (*a9)
      {
        v544 = *(_QWORD *)(v818 + 64);
        v545 = *(std::__shared_weak_count **)(v818 + 72);
        v829.__r_.__value_.__r.__words[0] = v544;
        v829.__r_.__value_.__l.__size_ = (std::string::size_type)v545;
        if (v545)
        {
          v546 = (unint64_t *)&v545->__shared_owners_;
          do
            v547 = __ldxr(v546);
          while (__stxr(v547 + 1, v546));
        }
        if (!v544)
          goto LABEL_1116;
        std::string::basic_string[abi:ne180100]<0>(v830, "weights");
        v548 = (*(uint64_t (**)(Espresso *, _BYTE *))(*(_QWORD *)v24 + 24))(v24, v830);
        v549 = v548;
        if ((v830[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v830);
          if (!v549)
            goto LABEL_1116;
LABEL_1095:
          std::string::basic_string[abi:ne180100]<0>(v830, "weights");
          (*(void (**)(std::string *__return_ptr, Espresso *, _BYTE *))(*(_QWORD *)v24 + 120))(&v817, v24, v830);
          if ((v830[23] & 0x80000000) != 0)
            operator delete(*(void **)v830);
          memset(v830, 0, 24);
          (*(void (**)(std::string::size_type, _BYTE *))(*(_QWORD *)v817.__r_.__value_.__l.__data_ + 32))(v817.__r_.__value_.__r.__words[0], v830);
          v551 = *(_QWORD *)&v830[8];
          for (m = *(_QWORD *)v830; m != v551; m += 24)
          {
            v552 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v817.__r_.__value_.__l.__data_
                                                                              + 80))(v817.__r_.__value_.__r.__words[0], m);
            v553 = (std::__shared_weak_count *)v829.__r_.__value_.__l.__size_;
            v750 = *(_OWORD *)&v829.__r_.__value_.__l.__data_;
            if (v829.__r_.__value_.__l.__size_)
            {
              v554 = (unint64_t *)(v829.__r_.__value_.__l.__size_ + 8);
              do
                v555 = __ldxr(v554);
              while (__stxr(v555 + 1, v554));
            }
            v556 = Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_1::operator()((uint64_t *)&v809, m, v552, (_QWORD **)&v750, 1u);
            if (v553)
            {
              v557 = (unint64_t *)&v553->__shared_owners_;
              do
                v558 = __ldaxr(v557);
              while (__stlxr(v558 - 1, v557));
              if (!v558)
              {
                ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
                std::__shared_weak_count::__release_weak(v553);
              }
            }
            v825 += v556;
          }
          v805 = (void **)v830;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v805);
          v559 = (std::__shared_weak_count *)v817.__r_.__value_.__l.__size_;
          if (v817.__r_.__value_.__l.__size_)
          {
            v560 = (unint64_t *)(v817.__r_.__value_.__l.__size_ + 8);
            do
              v561 = __ldaxr(v560);
            while (__stlxr(v561 - 1, v560));
            if (!v561)
            {
              ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
              std::__shared_weak_count::__release_weak(v559);
            }
          }
          v545 = (std::__shared_weak_count *)v829.__r_.__value_.__l.__size_;
          if (v829.__r_.__value_.__l.__size_)
            goto LABEL_1117;
        }
        else
        {
          if (v548)
            goto LABEL_1095;
LABEL_1116:
          if (v545)
          {
LABEL_1117:
            v562 = (unint64_t *)&v545->__shared_owners_;
            do
              v563 = __ldaxr(v562);
            while (__stlxr(v563 - 1, v562));
            if (!v563)
            {
              ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
              std::__shared_weak_count::__release_weak(v545);
            }
          }
        }
        v543 = v818;
      }
      if (*(_QWORD *)(v543 + 64))
      {
        if (*(char *)(v543 + 63) >= 0)
          v564 = *(unsigned __int8 *)(v543 + 63);
        else
          v564 = *(_QWORD *)(v543 + 48);
        std::string::basic_string[abi:ne180100]((uint64_t)v830, v564 + 1);
        if (v830[23] >= 0)
          v565 = v830;
        else
          v565 = *(_BYTE **)v830;
        if (v564)
        {
          if (*(char *)(v543 + 63) >= 0)
            v566 = (const void *)(v543 + 40);
          else
            v566 = *(const void **)(v543 + 40);
          memmove(v565, v566, v564);
        }
        *(_WORD *)&v565[v564] = 58;
        v567 = *(char *)(v818 + 39);
        if (v567 >= 0)
          v568 = (const std::string::value_type *)(v818 + 16);
        else
          v568 = *(const std::string::value_type **)(v818 + 16);
        if (v567 >= 0)
          v569 = *(unsigned __int8 *)(v818 + 39);
        else
          v569 = *(_QWORD *)(v818 + 24);
        v570 = std::string::append((std::string *)v830, v568, v569);
        v571 = v570->__r_.__value_.__r.__words[0];
        v829.__r_.__value_.__r.__words[0] = v570->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v829.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v570->__r_.__value_.__r.__words[1] + 7);
        v572 = HIBYTE(v570->__r_.__value_.__r.__words[2]);
        v570->__r_.__value_.__l.__size_ = 0;
        v570->__r_.__value_.__r.__words[2] = 0;
        v570->__r_.__value_.__r.__words[0] = 0;
        v573 = *(_QWORD *)(v818 + 64);
        if (*(char *)(v573 + 199) < 0)
          operator delete(*(void **)(v573 + 176));
        v574 = v829.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v573 + 176) = v571;
        *(_QWORD *)(v573 + 184) = v574;
        *(_QWORD *)(v573 + 191) = *(std::string::size_type *)((char *)v829.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v573 + 199) = v572;
        if ((v830[23] & 0x80000000) != 0)
          operator delete(*(void **)v830);
        v575 = v818;
        if (*((_BYTE *)v827 + 72))
        {
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(v818 + 64) + 224), v823, *((uint64_t *)&v823 + 1));
          v575 = v818;
        }
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v575 + 64) + 176))(*(_QWORD *)(v575 + 64), &v826);
      }
      std::string::basic_string[abi:ne180100]<0>(v830, "share_weights_from_layer_named");
      v576 = (*(uint64_t (**)(Espresso *, _BYTE *))(*(_QWORD *)v24 + 24))(v24, v830);
      v577 = v576;
      if ((v830[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v830);
        if (!v577)
          goto LABEL_1180;
      }
      else if (!v576)
      {
        goto LABEL_1180;
      }
      std::string::basic_string[abi:ne180100]<0>(&v829, "share_weights_from_layer_named");
      v578 = (Espresso *)(*(_QWORD *(**)(_BYTE *__return_ptr, Espresso *, std::string *))(*(_QWORD *)v24 + 112))(v830, v24, &v829);
      v579 = v818 + 128;
      if (*(char *)(v818 + 151) < 0)
        operator delete(*(void **)v579);
      *(_OWORD *)v579 = *(_OWORD *)v830;
      *(_QWORD *)(v579 + 16) = *(_QWORD *)&v830[16];
      v830[23] = 0;
      v830[0] = 0;
      if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v829.__r_.__value_.__l.__data_);
      v581 = *(_QWORD *)(*v739 + 32);
      v580 = *(_QWORD *)(*v739 + 40);
      if (v580 != v581)
      {
        v582 = 0;
        v583 = *(char *)(v818 + 151);
        v584 = (unsigned __int8 **)(v818 + 128);
        if (v583 >= 0)
          v585 = *(unsigned __int8 *)(v818 + 151);
        else
          v585 = *(_QWORD *)(v818 + 136);
        if ((unint64_t)((v580 - v581) >> 4) <= 1)
          v586 = 1;
        else
          v586 = (v580 - v581) >> 4;
        do
        {
          v587 = *(_QWORD *)(v581 + 16 * v582);
          v588 = *(unsigned __int8 *)(v587 + 39);
          v589 = *(_QWORD *)(v587 + 24);
          if ((v588 & 0x80u) == 0)
            v590 = *(unsigned __int8 *)(v587 + 39);
          else
            v590 = *(_QWORD *)(v587 + 24);
          if (v590 == v585)
          {
            v591 = (const void **)(v587 + 16);
            if (v583 >= 0)
              v592 = (unsigned __int8 *)v584;
            else
              v592 = *v584;
            if ((v588 & 0x80) != 0)
            {
              v578 = (Espresso *)memcmp(*v591, v592, v589);
              if (!(_DWORD)v578)
              {
LABEL_1177:
                Espresso::espresso_os_log_subsystem(v578, (const char *)v592);
                v593 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v593, OS_LOG_TYPE_DEBUG))
                {
                  v651 = (uint64_t)(*(_QWORD *)(*v739 + 40) - *(_QWORD *)(*v739 + 32)) >> 4;
                  *(_DWORD *)v830 = 134218240;
                  *(_QWORD *)&v830[4] = v582;
                  *(_WORD *)&v830[12] = 2048;
                  *(_QWORD *)&v830[14] = v651;
                  _os_log_debug_impl(&dword_190DAF000, v593, OS_LOG_TYPE_DEBUG, "Sharing weights from layer %zu to layer %zu", v830, 0x16u);
                }

                v594 = *(_QWORD *)(*(_QWORD *)(*v739 + 32) + 16 * v582);
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v594 + 16))(v594, &v818);
                break;
              }
            }
            else
            {
              if (!(_DWORD)v588)
                goto LABEL_1177;
              while (*(unsigned __int8 *)v591 == *v592)
              {
                v591 = (const void **)((char *)v591 + 1);
                ++v592;
                if (!--v588)
                  goto LABEL_1177;
              }
            }
          }
          ++v582;
        }
        while (v582 != v586);
      }
LABEL_1180:
      v12 = v739;
      if ((_QWORD)v818)
      {
        v595 = (int64x2_t *)*v739;
        v596 = *(_QWORD **)(*v739 + 40);
        v597 = *(_QWORD *)(*v739 + 48);
        if ((unint64_t)v596 >= v597)
        {
          v602 = v595[2].i64[0];
          v603 = ((uint64_t)v596 - v602) >> 4;
          v604 = v603 + 1;
          if ((unint64_t)(v603 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v605 = v597 - v602;
          if (v605 >> 3 > v604)
            v604 = v605 >> 3;
          if ((unint64_t)v605 >= 0x7FFFFFFFFFFFFFF0)
            v606 = 0xFFFFFFFFFFFFFFFLL;
          else
            v606 = v604;
          *(_QWORD *)&v830[32] = *v739 + 48;
          v607 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v606);
          v609 = &v607[16 * v603];
          v610 = *((_QWORD *)&v818 + 1);
          *(_OWORD *)v609 = v818;
          if (v610)
          {
            v611 = (unint64_t *)(v610 + 8);
            do
              v612 = __ldxr(v611);
            while (__stxr(v612 + 1, v611));
          }
          v614 = (_QWORD *)v595[2].i64[0];
          v613 = (_QWORD *)v595[2].i64[1];
          if (v613 == v614)
          {
            v617 = vdupq_n_s64((unint64_t)v613);
            v615 = &v607[16 * v603];
          }
          else
          {
            v615 = &v607[16 * v603];
            do
            {
              v616 = *((_OWORD *)v613 - 1);
              v613 -= 2;
              *((_OWORD *)v615 - 1) = v616;
              v615 -= 16;
              *v613 = 0;
              v613[1] = 0;
            }
            while (v613 != v614);
            v617 = v595[2];
          }
          v601 = v609 + 16;
          v595[2].i64[0] = (uint64_t)v615;
          v595[2].i64[1] = (uint64_t)(v609 + 16);
          *(int64x2_t *)&v830[8] = v617;
          v618 = v595[3].i64[0];
          v595[3].i64[0] = (uint64_t)&v607[16 * v608];
          *(_QWORD *)&v830[24] = v618;
          *(_QWORD *)v830 = v617.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v830);
        }
        else
        {
          *v596 = v818;
          v598 = *((_QWORD *)&v818 + 1);
          v596[1] = *((_QWORD *)&v818 + 1);
          if (v598)
          {
            v599 = (unint64_t *)(v598 + 8);
            do
              v600 = __ldxr(v599);
            while (__stxr(v600 + 1, v599));
          }
          v601 = v596 + 2;
        }
        v595[2].i64[1] = (uint64_t)v601;
        v619 = v818;
        v620 = *(std::__shared_weak_count **)(v818 + 72);
        v749[0] = *(_QWORD *)(v818 + 64);
        v749[1] = v620;
        if (v620)
        {
          v621 = (unint64_t *)&v620->__shared_owners_;
          do
            v622 = __ldxr(v621);
          while (__stxr(v622 + 1, v621));
        }
        Espresso::top_names_from_serdes((uint64_t)v24, v749, v619 + 16, (std::vector<std::string> *)v830);
        v623 = *v739 + 96;
        v829.__r_.__value_.__r.__words[0] = (((*(_QWORD *)(*v739 + 40) - *(_QWORD *)(*v739 + 32)) << 28) - 0x100000000) >> 32;
        v624 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v623, v829.__r_.__value_.__r.__words[0], &v829);
        std::vector<std::string>::__vdeallocate(v624 + 1);
        *(_OWORD *)&v624[1].__begin_ = *(_OWORD *)v830;
        v624[1].__end_cap_.__value_ = *(std::string **)&v830[16];
        memset(v830, 0, 24);
        v829.__r_.__value_.__r.__words[0] = (std::string::size_type)v830;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v829);
        if (v620)
        {
          v625 = (unint64_t *)&v620->__shared_owners_;
          do
            v626 = __ldaxr(v625);
          while (__stlxr(v626 - 1, v625));
          if (!v626)
          {
            ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
            std::__shared_weak_count::__release_weak(v620);
          }
        }
        Espresso::bottom_names_from_serdes(v24, v830);
        v627 = *v739 + 56;
        v829.__r_.__value_.__r.__words[0] = (((*(_QWORD *)(*v739 + 40) - *(_QWORD *)(*v739 + 32)) << 28) - 0x100000000) >> 32;
        v628 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v627, v829.__r_.__value_.__r.__words[0], &v829);
        std::vector<std::string>::__vdeallocate(v628 + 1);
        *(_OWORD *)&v628[1].__begin_ = *(_OWORD *)v830;
        v628[1].__end_cap_.__value_ = *(std::string **)&v830[16];
        memset(v830, 0, 24);
        v829.__r_.__value_.__r.__words[0] = (std::string::size_type)v830;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v829);
      }
      if (v825 >= 0x200000)
      {
        v825 = 0;
        if ((_QWORD)v826)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v826 + 16))(v826);
          (*(void (**)(_QWORD))(*(_QWORD *)v826 + 24))(v826);
          (**v827)(v830);
          v629 = *(_OWORD *)v830;
          *(_OWORD *)v830 = 0uLL;
          v630 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
          v826 = v629;
          if (v630)
          {
            v631 = (unint64_t *)&v630->__shared_owners_;
            do
              v632 = __ldaxr(v631);
            while (__stlxr(v632 - 1, v631));
            if (!v632)
            {
              ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
              std::__shared_weak_count::__release_weak(v630);
            }
          }
          v633 = *(std::__shared_weak_count **)&v830[8];
          if (*(_QWORD *)&v830[8])
          {
            v634 = (unint64_t *)(*(_QWORD *)&v830[8] + 8);
            do
              v635 = __ldaxr(v634);
            while (__stlxr(v635 - 1, v634));
            if (!v635)
            {
              ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
              std::__shared_weak_count::__release_weak(v633);
            }
          }
        }
      }
      v636 = (std::__shared_weak_count *)*((_QWORD *)&v811 + 1);
      if (*((_QWORD *)&v811 + 1))
      {
        v637 = (unint64_t *)(*((_QWORD *)&v811 + 1) + 8);
        do
          v638 = __ldaxr(v637);
        while (__stlxr(v638 - 1, v637));
        if (!v638)
        {
          ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
          std::__shared_weak_count::__release_weak(v636);
        }
      }
      v639 = v810;
      if (v810)
      {
        v640 = (unint64_t *)&v810->__shared_owners_;
        do
          v641 = __ldaxr(v640);
        while (__stlxr(v641 - 1, v640));
        if (!v641)
        {
          ((void (*)(std::__shared_weak_count *))v639->__on_zero_shared)(v639);
          std::__shared_weak_count::__release_weak(v639);
        }
      }
      v642 = (std::__shared_weak_count *)v809.__r_.__value_.__l.__size_;
      if (v809.__r_.__value_.__l.__size_)
      {
        v643 = (unint64_t *)(v809.__r_.__value_.__l.__size_ + 8);
        do
          v644 = __ldaxr(v643);
        while (__stlxr(v644 - 1, v643));
        if (!v644)
        {
          ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
          std::__shared_weak_count::__release_weak(v642);
        }
      }
      v645 = (std::__shared_weak_count *)*((_QWORD *)&v818 + 1);
      if (*((_QWORD *)&v818 + 1))
      {
        v646 = (unint64_t *)(*((_QWORD *)&v818 + 1) + 8);
        do
          v647 = __ldaxr(v646);
        while (__stlxr(v647 - 1, v646));
        if (!v647)
        {
          ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
          std::__shared_weak_count::__release_weak(v645);
        }
      }
      if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v820.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v822.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v822.__r_.__value_.__l.__data_);
      v648 = (std::__shared_weak_count *)*((_QWORD *)&v823 + 1);
      if (*((_QWORD *)&v823 + 1))
      {
        v649 = (unint64_t *)(*((_QWORD *)&v823 + 1) + 8);
        do
          v650 = __ldaxr(v649);
        while (__stlxr(v650 - 1, v649));
        if (!v650)
        {
          ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
          std::__shared_weak_count::__release_weak(v648);
        }
      }
      objc_autoreleasePoolPop(context);
      ++v19;
    }
    while (v19 < (uint64_t)(v824.__r_.__value_.__l.__size_ - v824.__r_.__value_.__r.__words[0]) >> 4);
  }
  if ((_QWORD)v826)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v826 + 16))(v826);
    (*(void (**)(_QWORD))(*(_QWORD *)v826 + 24))(v826);
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(&v822, *v12);
  if (v822.__r_.__value_.__r.__words[0])
  {
    v652 = *v12;
    *(_BYTE *)(*(_QWORD *)(*v12 + 16) + 54) = 1;
    v653 = *(_QWORD *)(v652 + 1256);
    if (v653)
      *(_BYTE *)(v653 + 54) = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v809, "script");
  v654 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v732 + 24))(v732, &v809);
  v655 = v654;
  if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v809.__r_.__value_.__l.__data_);
    if (!v655)
      goto LABEL_1264;
    goto LABEL_1263;
  }
  if (v654)
LABEL_1263:
    Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>(*v12);
LABEL_1264:
  if ((*(unsigned int (**)(_QWORD))*v827[1])(v827[1]))
    v656 = (*(uint64_t (**)(_QWORD))*v827[1])(v827[1]) == 40000;
  else
    v656 = 1;
  v657 = *v12;
  std::string::basic_string[abi:ne180100]<0>(v830, "multi_head");
  std::string::basic_string[abi:ne180100]<0>(&v807, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(v657 + 472, (uint64_t)v830, (uint64_t)&v807, &v809);
  if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
  {
    v658 = v809.__r_.__value_.__l.__size_ == 1 && *v809.__r_.__value_.__l.__data_ == 49;
    operator delete(v809.__r_.__value_.__l.__data_);
  }
  else
  {
    v658 = SHIBYTE(v809.__r_.__value_.__r.__words[2]) == 1 && v809.__r_.__value_.__s.__data_[0] == 49;
  }
  if (SHIBYTE(v807.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v807.__r_.__value_.__l.__data_);
  if ((v830[23] & 0x80000000) != 0)
    operator delete(*(void **)v830);
  if (!v658 || v656)
  {
    v659 = v730;
    if (*((_BYTE *)v827 + 56))
    {
      v660 = (_QWORD *)*v738;
      v661 = (Espresso::net *)v12[1];
      v746[0] = (Espresso::net *)*v12;
      v746[1] = v661;
      if (v661)
      {
        v662 = (unint64_t *)((char *)v661 + 8);
        do
          v663 = __ldxr(v662);
        while (__stxr(v663 + 1, v662));
      }
      std::string::basic_string[abi:ne180100]<0>(&v809, "script");
      v664 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v732 + 24))(v732, &v809);
      Espresso::cpu_context_transfer_algo_t::add_context_transfer_kernels(v660, v746, v665, a7, v664);
      if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v809.__r_.__value_.__l.__data_);
      if (v661)
      {
        v666 = (unint64_t *)((char *)v661 + 8);
        do
          v667 = __ldaxr(v666);
        while (__stlxr(v667 - 1, v666));
        if (!v667)
        {
          (*(void (**)(Espresso::net *))(*(_QWORD *)v661 + 16))(v661);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v661);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v809, "script");
    v668 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v732 + 24))(v732, &v809);
    v669 = v668;
    if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v809.__r_.__value_.__l.__data_);
      if (!v669)
        goto LABEL_1313;
    }
    else if (!v668)
    {
      goto LABEL_1313;
    }
    v683 = *v12;
    std::string::basic_string[abi:ne180100]<0>(&v809, "script");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v732 + 120))(&v744, v732, &v809);
    Espresso::net::setup_script(v683, &v744, a7);
    v684 = v745;
    if (v745)
    {
      v685 = (unint64_t *)&v745->__shared_owners_;
      do
        v686 = __ldaxr(v685);
      while (__stlxr(v686 - 1, v685));
      if (!v686)
      {
        ((void (*)(std::__shared_weak_count *))v684->__on_zero_shared)(v684);
        std::__shared_weak_count::__release_weak(v684);
      }
    }
    if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v809.__r_.__value_.__l.__data_);
  }
  else
  {
    v671 = *(_QWORD *)(*v12 + 32);
    v670 = *(_QWORD *)(*v12 + 40);
    Espresso::run_pass_on_network<Espresso::pass_multi_head_program_gen>(*v12);
    v673 = v670 - v671;
    v674 = (Espresso::net *)*v12;
    v675 = *(_QWORD *)(*v12 + 40) - *(_QWORD *)(*v12 + 32);
    if (*((_BYTE *)v827 + 56))
    {
      v676 = (_QWORD *)*v738;
      *(_BYTE *)(*(_QWORD *)(*v738 + 56) + 120) = 1;
      v677 = (Espresso::net *)v12[1];
      v748[0] = v674;
      v748[1] = v677;
      if (v677)
      {
        v678 = (unint64_t *)((char *)v677 + 8);
        do
          v679 = __ldxr(v678);
        while (__stxr(v679 + 1, v678));
      }
      Espresso::cpu_context_transfer_algo_t::add_context_transfer_kernels(v676, v748, v672, a7, v673 != v675);
      if (v677)
      {
        v680 = (unint64_t *)((char *)v677 + 8);
        do
          v681 = __ldaxr(v680);
        while (__stlxr(v681 - 1, v680));
        if (!v681)
        {
          (*(void (**)(Espresso::net *))(*(_QWORD *)v677 + 16))(v677);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v677);
        }
      }
    }
    v42 = v673 == v675;
    v659 = v730;
    if (!v42)
    {
      v682 = *v12;
      v747[0] = 0;
      v747[1] = 0;
      Espresso::net::setup_script(v682, v747, *(unsigned int *)(**(_QWORD **)(v682 + 32) + 12));
    }
  }
LABEL_1313:
  std::string::basic_string[abi:ne180100]<0>(&v809, "skip_script_setup");
  if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v732 + 24))(v732, &v809))
  {
    std::string::basic_string[abi:ne180100]<0>(v830, "skip_script_setup");
    v687 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v732 + 88))(v732, v830);
    if ((v830[23] & 0x80000000) != 0)
      operator delete(*(void **)v830);
  }
  else
  {
    v687 = 0;
  }
  if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v809.__r_.__value_.__l.__data_);
  v688 = (Espresso::net *)*v12;
  if (!*(_QWORD *)(*v12 + 968))
  {
    v689 = Espresso::net::needs_interpreter(v688) ^ 1 | v687;
    v688 = (Espresso::net *)*v12;
    if ((v689 & 1) == 0)
    {
      Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)v688);
      v690 = *v12;
      v743[0] = 0;
      v743[1] = 0;
      Espresso::net::setup_script(v690, v743, a7);
      v688 = (Espresso::net *)*v12;
    }
  }
  Espresso::net::_tag_inputs_and_outputs(v688);
  if (*((_BYTE *)v827 + 55))
  {
    v691 = (char *)operator new(0x98uLL);
    *((_QWORD *)v691 + 1) = 0;
    *((_QWORD *)v691 + 2) = 0;
    *(_QWORD *)v691 = &off_1E2DBE928;
    *(_OWORD *)(v691 + 72) = 0u;
    *(_OWORD *)(v691 + 40) = 0u;
    *(_OWORD *)(v691 + 56) = 0u;
    *(_OWORD *)(v691 + 24) = 0u;
    *(_OWORD *)(v691 + 88) = 0u;
    *((_QWORD *)v691 + 10) = v691 + 88;
    *((_QWORD *)v691 + 14) = 0;
    *((_QWORD *)v691 + 13) = v691 + 112;
    *((_QWORD *)v691 + 18) = 0;
    *((_QWORD *)v691 + 17) = 0;
    *((_QWORD *)v691 + 15) = 0;
    *((_QWORD *)v691 + 16) = v691 + 136;
    *(_QWORD *)&v692 = v691 + 24;
    *((_QWORD *)&v692 + 1) = v691;
    v693 = *(std::__shared_weak_count **)(*v12 + 1296);
    *(_OWORD *)(*v12 + 1288) = v692;
    if (v693)
    {
      v694 = (unint64_t *)&v693->__shared_owners_;
      do
        v695 = __ldaxr(v694);
      while (__stlxr(v695 - 1, v694));
      if (!v695)
      {
        ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
        std::__shared_weak_count::__release_weak(v693);
      }
    }
    v696 = *(_QWORD *)(*v12 + 1288);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v696, *v729, v729[1]);
    *(_DWORD *)(v696 + 48) = a7;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v696 + 16), *v738, v738[1]);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v696 + 32), *a4, a4[1]);
    *(_BYTE *)(v696 + 52) = a5;
    if (v696 + 56 != v659)
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v696 + 56), *(__int128 **)v659, (__int128 *)(v659 + 8));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v696 + 80), *(__int128 **)(v659 + 24), (__int128 *)(v659 + 32));
    }
    v697 = *v12;
    if (v696 + 104 != *v12 + 776)
    {
      std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>((uint64_t **)(v696 + 104), *(uint64_t **)(v697 + 776), (uint64_t *)(v697 + 784));
      v697 = *v12;
    }
    Espresso::net::infer_configuration_for_shapes((Espresso::net *)v697, (const Espresso::network_shape *)v659, (uint64_t)&v809);
    std::string::basic_string[abi:ne180100]<0>(&v807, "default");
    v698 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(v696 + 104, &__str, &v807);
    v699 = (char *)*v698;
    if (!*v698)
    {
      v700 = (uint64_t **)v698;
      v699 = (char *)operator new(0x68uLL);
      *(_QWORD *)&v830[8] = v696 + 112;
      *((_OWORD *)v699 + 2) = *(_OWORD *)&v807.__r_.__value_.__l.__data_;
      v701 = v807.__r_.__value_.__r.__words[2];
      memset(&v807, 0, sizeof(v807));
      *((_QWORD *)v699 + 6) = v701;
      *((_QWORD *)v699 + 7) = 0;
      *((_QWORD *)v699 + 8) = 0;
      *((_QWORD *)v699 + 9) = 0;
      *((_QWORD *)v699 + 12) = 0;
      *((_QWORD *)v699 + 11) = 0;
      *((_QWORD *)v699 + 10) = v699 + 88;
      v830[16] = 1;
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)(v696 + 104), (uint64_t)__str.__r_.__value_.__l.__data_, v700, (uint64_t *)v699);
      *(_QWORD *)v830 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)v830);
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v699 + 56));
    *(_OWORD *)(v699 + 56) = *(_OWORD *)&v809.__r_.__value_.__l.__data_;
    v703 = (char *)*((_QWORD *)v699 + 11);
    v702 = v699 + 88;
    *(v702 - 2) = *((_QWORD *)&v809.__r_.__value_.__l + 2);
    memset(&v809, 0, sizeof(v809));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(v702 - 1), v703);
    v704 = v811;
    *(v702 - 1) = v810;
    *v702 = v704;
    v705 = *((_QWORD *)&v811 + 1);
    v702[1] = *((_QWORD *)&v811 + 1);
    if (v705)
    {
      *(_QWORD *)(v704 + 16) = v702;
      v810 = (std::__shared_weak_count *)&v811;
      v811 = 0uLL;
      v704 = 0;
    }
    else
    {
      *(v702 - 1) = v702;
    }
    v12 = v739;
    if (SHIBYTE(v807.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v807.__r_.__value_.__l.__data_);
      v704 = v811;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v810, (char *)v704);
    *(_QWORD *)v830 = &v809;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v830);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(*v12 + 16) + 160))(*(_QWORD *)(*v12 + 16));
  v706 = *(_QWORD *)(*v12 + 1256);
  if (v706)
    (*(void (**)(uint64_t))(*(_QWORD *)v706 + 160))(v706);
  v707 = (std::__shared_weak_count *)v822.__r_.__value_.__l.__size_;
  if (v822.__r_.__value_.__l.__size_)
  {
    v708 = (unint64_t *)(v822.__r_.__value_.__l.__size_ + 8);
    do
      v709 = __ldaxr(v708);
    while (__stlxr(v709 - 1, v708));
    if (!v709)
    {
      ((void (*)(std::__shared_weak_count *))v707->__on_zero_shared)(v707);
      std::__shared_weak_count::__release_weak(v707);
    }
  }
  v809.__r_.__value_.__r.__words[0] = (std::string::size_type)&v824;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v809);
  v710 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
  if (*((_QWORD *)&v826 + 1))
  {
    v711 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
    do
      v712 = __ldaxr(v711);
    while (__stlxr(v712 - 1, v711));
    if (!v712)
    {
      ((void (*)(std::__shared_weak_count *))v710->__on_zero_shared)(v710);
      std::__shared_weak_count::__release_weak(v710);
    }
  }
  v713 = v828;
  if (v828)
  {
    v714 = (unint64_t *)&v828->__shared_owners_;
    do
      v715 = __ldaxr(v714);
    while (__stlxr(v715 - 1, v714));
    if (!v715)
    {
      ((void (*)(std::__shared_weak_count *))v713->__on_zero_shared)(v713);
      std::__shared_weak_count::__release_weak(v713);
    }
  }
}

void sub_190E5B30C(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (*(char *)(v3 - 169) < 0)
    operator delete(*(void **)(v3 - 192));
  if (SLOBYTE(STACK[0x42F]) < 0)
  {
    operator delete((void *)STACK[0x418]);
    if ((v2 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v3 - 137) < 0)
        operator delete(*(void **)(v3 - 160));
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
      if (SLOBYTE(STACK[0x45F]) < 0)
        operator delete((void *)STACK[0x448]);
      if (SLOBYTE(STACK[0x477]) < 0)
        operator delete((void *)STACK[0x460]);
      if (SLOBYTE(STACK[0x48F]) < 0)
        operator delete((void *)STACK[0x478]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x490]);
      STACK[0x3B0] = v3 - 256;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 224);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 208);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v1);
  goto LABEL_14;
}

_DWORD *Espresso::generic_convolution_kernel::get_biases_shape@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  v2 = this[106];
  if (v2 <= 1)
    v2 = 1;
  v3 = v2 * this[86];
  if (this[104])
    v3 *= 4;
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 1;
  return this;
}

void Espresso::generic_convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_190E5C02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 768) || *(_BYTE *)(a1 + 810))
  {
    v3 = *a2;
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), v3, (uint64_t)v4);
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), v3, 0);
    }
  }
}

void Espresso::inner_product_kernel_cpu::__set_weights_finalize(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 440);
  if (v2 && *(_QWORD *)v2)
  {
    if (*(_QWORD *)(v2 + 32))
    {
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76))
      {
LABEL_17:
        Espresso::quantized_weights_helper::make_fp16_lut_from_fp32((Espresso::quantized_weights_helper *)v2);
        v2 = *(_QWORD *)(a1 + 440);
LABEL_18:
        if (*(int *)(v2 + 156) <= 7)
          Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v2);
        return;
      }
    }
    else
    {
      if (!*(_QWORD *)(v2 + 48) && !*(_QWORD *)(v2 + 64) && !*(_QWORD *)(v2 + 80))
        return;
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76))
      {
        if (!*(_QWORD *)(v2 + 48) && !*(_QWORD *)(v2 + 64))
          goto LABEL_18;
        goto LABEL_17;
      }
    }
    Espresso::quantized_weights_helper::dequantize_to_float32_2d((Espresso::quantized_weights_helper *)v2, &v6);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 560, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

uint64_t Espresso::generic_inner_product_kernel::get_biases_shape@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(this + 304) << (*(_DWORD *)(this + 332) != 0);
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 1;
  return this;
}

_QWORD *Espresso::inner_product_kernel_cpu::set_biases(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 544), *a2, a2[1]);
  *(_DWORD *)(a1 + 312) = *a2 != 0;
  return result;
}

void Espresso::BNNSEngine::context::network_transform_post_load(Espresso::BNNSEngine::context *this, Espresso::net *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  std::__shared_weak_count *v15;

  if ((***((unsigned int (****)(_QWORD))this + 1))(*((_QWORD *)this + 1)) != 80000 && *((_BYTE *)this + 54))
  {
    Espresso::net::get_analysis_if_existing<Espresso::analysis_pass_insert_casts>(&v14, (uint64_t)a2);
    v4 = v14;
    if (!v14
      || (v5 = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1)),
          !Espresso::analysis_pass_insert_casts::has_platform(v4, v5)))
    {
      v6 = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
      v7 = (std::__shared_weak_count *)operator new(0x28uLL);
      v7->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      v7->__shared_weak_owners_ = 0;
      v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD348;
      v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D92010;
      LODWORD(v7[1].__shared_owners_) = v6;
      v13[0] = (uint64_t)&v7[1];
      v13[1] = (uint64_t)v7;
      Espresso::run_pass_on_network<Espresso::pass_insert_casts,Espresso::pass_params_insert_casts>((uint64_t)a2, v13);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_190E5C38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::cpu_context_transfer_algo_t::add_context_transfer_kernels(_QWORD *a1, Espresso::net **a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6;
  Espresso::net *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (***v11)(_QWORD);
  int v12;
  uint64_t (***v13)(_QWORD);
  _BOOL4 v14;
  char v15;
  Espresso::net *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  Espresso *v26;
  const char *v27;
  Espresso::net *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  Espresso *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  NSObject *v69;
  Espresso *v70;
  const char *v71;
  NSObject *v72;
  Espresso *v73;
  const char *v74;
  _DWORD *v75;
  int v76;
  int v77;
  int v78;
  NSObject *v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *size;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  std::__shared_weak_count *v98;
  std::string *v99;
  std::string::size_type v100;
  char v101;
  std::string::size_type v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  std::string::size_type v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  std::string *v123;
  std::string::size_type v124;
  char v125;
  uint64_t v126;
  std::string::size_type v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  size_t v140;
  _BYTE *v141;
  const std::string::value_type *v142;
  std::string *v143;
  std::string::size_type v144;
  std::string *v145;
  __int128 v146;
  _OWORD *v147;
  __int128 v148;
  std::string *v149;
  _OWORD *v150;
  __int128 v151;
  std::string *v152;
  uint64_t *v153;
  std::string *v154;
  const char *v155;
  NSObject *v156;
  const std::string::value_type *v157;
  std::string *p_str;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  size_t v162;
  _BYTE *v163;
  const std::string::value_type *v164;
  std::string *v165;
  std::string::size_type v166;
  std::string *v167;
  __int128 v168;
  _OWORD *v169;
  __int128 v170;
  std::string *v171;
  _OWORD *v172;
  __int128 v173;
  std::string *v174;
  uint64_t *v175;
  std::string *v176;
  const char *v177;
  NSObject *v178;
  const std::string::value_type *v179;
  std::string *v180;
  uint64_t v181;
  const char *v182;
  Espresso *v183;
  NSObject *v184;
  uint64_t v185;
  const char *v186;
  Espresso *v187;
  NSObject *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  int data;
  int v197;
  std::string::size_type v198;
  std::string *v199;
  std::string *v200;
  _QWORD *v201;
  int v202;
  int v203;
  std::string::size_type v204;
  std::string *v205;
  std::string *v206;
  unint64_t v207;
  uint64_t v208;
  std::string *v209;
  std::string *v210;
  std::vector<int>::pointer begin;
  _BOOL4 v212;
  int v213;
  uint64_t *v214;
  NSObject *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  void *v219;
  void *v220;
  uint64_t v221;
  std::string *v222;
  uint64_t v223;
  std::string *v224;
  uint64_t v225;
  uint64_t *v226;
  _DWORD *v227;
  int v228;
  unsigned int *v229;
  int *v231;
  int v232;
  std::string v234;
  _BYTE v235[32];
  int v236;
  _BYTE v237[32];
  int v238;
  uint64_t *v239;
  _QWORD *v240[2];
  uint64_t *v241;
  _QWORD *v242[2];
  int64x2_t v243;
  unint64_t v244;
  __int128 v245;
  __int128 v246;
  int v247;
  __int128 v248;
  __int128 v249;
  int v250;
  void *__p;
  uint64_t *v252;
  unint64_t v253;
  unsigned int v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  void *v257[5];
  _QWORD v258[4];
  int v259;
  void *v260[5];
  std::vector<int> v261;
  unsigned int v262;
  _BYTE lpsrc[18];
  __int16 v264;
  std::string *v265;
  __int16 v266;
  std::string *v267;
  std::string __str;
  _BYTE v269[24];
  __int128 v270;
  __int128 v271;
  __int128 v272;
  std::string buf;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;

  v277 = *MEMORY[0x1E0C80C00];
  v262 = a4;
  v6 = a1[7];
  std::vector<int>::vector(&v261, (uint64_t)(*((_QWORD *)*a2 + 5) - *((_QWORD *)*a2 + 4)) >> 4);
  v7 = *a2;
  v8 = *((_QWORD *)*a2 + 4);
  if (*((_QWORD *)*a2 + 5) == v8)
  {
    v15 = *(_BYTE *)(v6 + 120);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + v9) + 64) + 8) + 8);
      v12 = (**v11)(v11);
      v13 = *(uint64_t (****)(_QWORD))(*((_QWORD *)*a2 + 2) + 8);
      v14 = v12 != (**v13)(v13);
      v261.__begin_[v10] = v14;
      v15 = *(_BYTE *)(v6 + 120) | v14;
      *(_BYTE *)(v6 + 120) = v15;
      ++v10;
      v7 = *a2;
      v8 = *((_QWORD *)*a2 + 4);
      v9 += 16;
    }
    while (v10 < (*((_QWORD *)*a2 + 5) - v8) >> 4);
  }
  if (!v15)
    goto LABEL_351;
  Espresso::net::get_producers_of_blobs(v7, (uint64_t)v260);
  Espresso::net::_tag_inputs_and_outputs(*a2);
  memset(v258, 0, sizeof(v258));
  v259 = 1065353216;
  v16 = *a2;
  v17 = (_QWORD *)*((_QWORD *)*a2 + 29);
  v18 = (uint64_t)*a2 + 240;
  if (v17 != (_QWORD *)v18)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v258, (uint64_t)(v17 + 4), (uint64_t)(v17 + 4));
      v19 = (_QWORD *)v17[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v17[2];
          v21 = *v20 == (_QWORD)v17;
          v17 = v20;
        }
        while (!v21);
      }
      v17 = v20;
    }
    while (v20 != (_QWORD *)v18);
    v16 = *a2;
  }
  Espresso::net::get_consumers_of_blobs(v16, v258, (uint64_t)v257);
  v22 = *((_QWORD *)*a2 + 2);
  v23 = *((_QWORD *)*a2 + 3);
  v255 = v22;
  v256 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = (Espresso *)(***(uint64_t (****)(_QWORD))(v22 + 8))(*(_QWORD *)(v22 + 8));
  v254 = v26;
  v28 = *a2;
  v29 = (*((_QWORD *)*a2 + 5) - *((_QWORD *)*a2 + 4)) >> 4;
  __p = 0;
  v252 = 0;
  v253 = 0;
  v30 = v29;
  v225 = v29;
  if ((int)v29 <= 0)
  {
    v248 = 0u;
    v249 = 0u;
    v250 = 1065353216;
    v245 = 0u;
    v246 = 0u;
    v247 = 1065353216;
    goto LABEL_76;
  }
  v31 = 0;
  v32 = 0;
  do
  {
    v33 = 0xFFFFFFFFLL;
    while (v33 == 0xFFFFFFFFLL)
    {
      if (v261.__begin_[v32])
        v33 = v32;
      else
        v33 = 0xFFFFFFFFLL;
LABEL_27:
      if (v30 == ++v32)
      {
        if (v33 != 0xFFFFFFFFLL)
        {
          v43 = ((v225 << 32) - 0x100000000) | v33;
          if ((unint64_t)v31 >= v253)
          {
            v45 = ((char *)v31 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v45 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v46 = (uint64_t)(v253 - (_QWORD)__p) >> 2;
            if (v46 <= v45 + 1)
              v46 = v45 + 1;
            if (v253 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
              v47 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v47 = v46;
            if (v47)
              v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v47);
            else
              v48 = 0;
            v49 = (uint64_t *)(v47 + 8 * v45);
            v50 = v47 + 8 * v48;
            *v49 = v43;
            v44 = v49 + 1;
            v52 = (char *)__p;
            v51 = (char *)v252;
            if (v252 != __p)
            {
              do
              {
                v53 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *--v49 = v53;
              }
              while (v51 != v52);
              v51 = (char *)__p;
            }
            __p = v49;
            v252 = v44;
            v253 = v50;
            if (v51)
              operator delete(v51);
          }
          else
          {
            *v31 = v43;
            v44 = v31 + 1;
          }
          v252 = v44;
        }
        goto LABEL_66;
      }
    }
    if ((v33 & 0x80000000) != 0 || v261.__begin_[v32])
      goto LABEL_27;
    v34 = ((v32 << 32) - 0x100000000) | v33;
    if ((unint64_t)v31 >= v253)
    {
      v35 = ((char *)v31 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v35 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v36 = (uint64_t)(v253 - (_QWORD)__p) >> 2;
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      if (v253 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v37);
      else
        v38 = 0;
      v39 = (uint64_t *)(v37 + 8 * v35);
      *v39 = v34;
      v31 = v39 + 1;
      v41 = (char *)__p;
      v40 = (char *)v252;
      if (v252 != __p)
      {
        do
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *--v39 = v42;
        }
        while (v40 != v41);
        v40 = (char *)__p;
      }
      __p = v39;
      v252 = v31;
      v253 = v37 + 8 * v38;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v31++ = v34;
    }
    v252 = v31;
    ++v32;
  }
  while (v32 != v30);
LABEL_66:
  v54 = 0;
  v248 = 0u;
  v249 = 0u;
  v250 = 1065353216;
  v245 = 0u;
  v246 = 0u;
  v247 = 1065353216;
  do
  {
    v55 = (uint64_t)*a2 + 96;
    buf.__r_.__value_.__r.__words[0] = v54;
    v56 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55, v54, &buf);
    v57 = (uint64_t)*a2 + 56;
    buf.__r_.__value_.__r.__words[0] = v54;
    v26 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v57, v54, &buf);
    if (!v261.__begin_[v54])
    {
      v58 = v26;
      v60 = v56[3];
      v59 = v56[4];
      while (v60 != v59)
      {
        v26 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v248, v60, v60);
        v60 += 24;
      }
      v62 = *((_QWORD *)v58 + 3);
      v61 = *((_QWORD *)v58 + 4);
      while (v62 != v61)
      {
        v26 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v245, v62, v62);
        v62 += 24;
      }
    }
    ++v54;
  }
  while (v54 != v30);
  v28 = *a2;
LABEL_76:
  v63 = (unsigned __int8 *)*((_QWORD *)v28 + 29);
  v64 = (unsigned __int8 *)v28 + 240;
  if (v63 != (unsigned __int8 *)((char *)v28 + 240))
  {
    do
    {
      v26 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v257, v63 + 32);
      if (!v26)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v65 = (_QWORD *)*((_QWORD *)v26 + 5);
      v66 = (_QWORD *)*((_QWORD *)v26 + 6);
      if (v65 != v66)
      {
        while (v261.__begin_[*v65])
        {
          if (++v65 == v66)
            goto LABEL_83;
        }
        v26 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v248, (uint64_t)(v63 + 32), (uint64_t)(v63 + 32));
      }
LABEL_83:
      v67 = (unsigned __int8 *)*((_QWORD *)v63 + 1);
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = *(unsigned __int8 **)v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (unsigned __int8 *)*((_QWORD *)v63 + 2);
          v21 = *(_QWORD *)v68 == (_QWORD)v63;
          v63 = v68;
        }
        while (!v21);
      }
      v63 = v68;
    }
    while (v68 != v64);
  }
  Espresso::espresso_os_log_subsystem(v26, v27);
  v69 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
  {
    v221 = *((_QWORD *)&v249 + 1);
    str_concat<std::unordered_set<std::string>>(&buf, (uint64_t *)v249);
    v222 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &buf
         : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v269 = 134218242;
    *(_QWORD *)&v269[4] = v221;
    *(_WORD *)&v269[12] = 2080;
    *(_QWORD *)&v269[14] = v222;
    _os_log_debug_impl(&dword_190DAF000, v69, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] # top_blobs_of_default_ctx_layers: %zu %s\n", v269, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }

  Espresso::espresso_os_log_subsystem(v70, v71);
  v72 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
  {
    v223 = *((_QWORD *)&v246 + 1);
    str_concat<std::unordered_set<std::string>>(&buf, (uint64_t *)v246);
    v224 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &buf
         : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v269 = 134218242;
    *(_QWORD *)&v269[4] = v223;
    *(_WORD *)&v269[12] = 2080;
    *(_QWORD *)&v269[14] = v224;
    _os_log_debug_impl(&dword_190DAF000, v72, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] # bottom_blobs_of_default_ctx_layers: %zu %s\n", v269, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }

  v243 = 0uLL;
  v244 = 0;
  v242[0] = 0;
  v242[1] = 0;
  v240[1] = 0;
  v241 = (uint64_t *)v242;
  v239 = (uint64_t *)v240;
  v240[0] = 0;
  v75 = __p;
  v226 = v252;
  if (__p != v252)
  {
    v76 = 0;
    v228 = v225 - 1;
    v231 = (int *)(a1 + 2);
    v229 = (unsigned int *)a1 + 5;
    do
    {
      v78 = *v75;
      v77 = v75[1];
      v227 = v75;
      Espresso::espresso_os_log_subsystem(v73, v74);
      v79 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109632;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v76;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v78;
        HIWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        LODWORD(buf.__r_.__value_.__r.__words[2]) = v77;
        _os_log_debug_impl(&dword_190DAF000, v79, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Fallback segment %d: %d-%d\n", (uint8_t *)&buf, 0x14u);
      }

      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0u;
      v274 = 0u;
      v275 = 0u;
      v276 = 0u;
      *(_QWORD *)v269 = 0;
      *(_QWORD *)&v269[8] = 0;
      v80 = *v231;
      v81 = *v229;
      *(_DWORD *)&v269[16] = v254;
      *(_DWORD *)&v269[20] = v80;
      *(_QWORD *)&v270 = __PAIR64__(v81, v262);
      *(_OWORD *)v235 = 0uLL;
      Espresso::abstract_engine_factory::shared(&__str);
      v82 = __str.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v237, "context_transfer");
      Espresso::abstract_engine_factory::make_kernel_priv(v82, (uint64_t)(a1 + 9), (uint64_t)v237, (uint64_t)v269, v231);
      v83 = *(void **)lpsrc;
      if (*(_QWORD *)lpsrc
      {
        v84 = *(_QWORD *)&lpsrc[8];
        if (!*(_QWORD *)&lpsrc[8])
        {
          *(_OWORD *)v235 = (unint64_t)v83;
          goto LABEL_108;
        }
        v85 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      else
      {
        v84 = 0;
      }
      v87 = *(std::__shared_weak_count **)&lpsrc[8];
      *(_QWORD *)v235 = v83;
      *(_QWORD *)&v235[8] = v84;
      if (*(_QWORD *)&lpsrc[8])
      {
        v88 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
LABEL_108:
      if ((v237[23] & 0x80000000) != 0)
        operator delete(*(void **)v237);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v91 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v93 = *(_QWORD *)v235;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)v235 + 312), a1[9], a1[10]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v93 + 328), v255, (uint64_t)v256);
      v94 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v94 + 1) = 0;
      *((_QWORD *)v94 + 2) = 0;
      *(_QWORD *)v94 = &off_1E2DBF0D0;
      *((_QWORD *)v94 + 3) = &off_1E2DA1A38;
      *(_OWORD *)(v94 + 40) = 0u;
      *(_OWORD *)(v94 + 56) = 0u;
      *(_OWORD *)(v94 + 72) = 0u;
      *(_OWORD *)(v94 + 88) = 0u;
      *(_OWORD *)(v94 + 104) = 0u;
      *(_OWORD *)(v94 + 120) = 0u;
      *(_OWORD *)(v94 + 136) = 0u;
      *(_OWORD *)(v94 + 152) = 0u;
      *(_OWORD *)(v94 + 161) = 0u;
      *((_OWORD *)v94 + 13) = 0u;
      *((_OWORD *)v94 + 14) = 0u;
      *((_QWORD *)v94 + 30) = 0;
      v95 = (std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2];
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v94 + 24);
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v94;
      if (v95)
      {
        p_shared_owners = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(p_shared_owners);
        while (__stlxr(v97 - 1, p_shared_owners));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = *(std::__shared_weak_count **)&v235[8];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(buf.__r_.__value_.__l.__size_ + 64), *(uint64_t *)v235, *(uint64_t *)&v235[8]);
      std::to_string((std::string *)v237, v76);
      v99 = std::string::insert((std::string *)v237, 0, "_ctx_tx_to_fallback_");
      v100 = v99->__r_.__value_.__r.__words[0];
      *(_QWORD *)lpsrc = v99->__r_.__value_.__l.__size_;
      *(_QWORD *)&lpsrc[7] = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1] + 7);
      v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      v102 = buf.__r_.__value_.__l.__size_;
      if (*(char *)(buf.__r_.__value_.__l.__size_ + 39) < 0)
        operator delete(*(void **)(buf.__r_.__value_.__l.__size_ + 16));
      v103 = *(_QWORD *)lpsrc;
      *(_QWORD *)(v102 + 16) = v100;
      *(_QWORD *)(v102 + 24) = v103;
      *(_QWORD *)(v102 + 31) = *(_QWORD *)&lpsrc[7];
      *(_BYTE *)(v102 + 39) = v101;
      if ((v237[23] & 0x80000000) != 0)
        operator delete(*(void **)v237);
      MEMORY[0x19401C808](buf.__r_.__value_.__l.__size_ + 40, "context_transfer");
      *(_QWORD *)(buf.__r_.__value_.__l.__size_ + 8) = *(_QWORD *)v231;
      LODWORD(buf.__r_.__value_.__l.__data_) = v78 - 1;
      if (v98)
      {
        v104 = (unint64_t *)&v98->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      *(_DWORD *)v269 = 0;
      *(_OWORD *)&v269[8] = 0u;
      v270 = 0u;
      v271 = 0u;
      v272 = 0u;
      *(_OWORD *)v237 = 0uLL;
      *(_QWORD *)&v237[16] = __PAIR64__(v254, *v231);
      *(_QWORD *)&v237[24] = __PAIR64__(v262, *v229);
      *(_QWORD *)&lpsrc[8] = 0;
      *(_QWORD *)lpsrc = 0;
      Espresso::abstract_engine_factory::shared(&v234);
      v106 = v234.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v235, "context_transfer");
      Espresso::abstract_engine_factory::make_kernel_priv(v106, (uint64_t)&v255, (uint64_t)v235, (uint64_t)v237, (int *)&v254);
      v107 = (void *)__str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0]
      {
        v108 = 0;
        goto LABEL_136;
      }
      v108 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v109 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
LABEL_136:
        v111 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        *(_QWORD *)lpsrc = v107;
        *(_QWORD *)&lpsrc[8] = v108;
        if (__str.__r_.__value_.__l.__size_)
        {
          v112 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        goto LABEL_142;
      }
      *(_QWORD *)lpsrc = v107;
      *(_QWORD *)&lpsrc[8] = 0;
LABEL_142:
      if ((v235[23] & 0x80000000) != 0)
        operator delete(*(void **)v235);
      v114 = (std::__shared_weak_count *)v234.__r_.__value_.__l.__size_;
      if (v234.__r_.__value_.__l.__size_)
      {
        v115 = (unint64_t *)(v234.__r_.__value_.__l.__size_ + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = *(_QWORD *)lpsrc;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)lpsrc + 312), v255, (uint64_t)v256);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v117 + 328), a1[9], a1[10]);
      v118 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v118 + 1) = 0;
      *((_QWORD *)v118 + 2) = 0;
      *(_QWORD *)v118 = &off_1E2DBF0D0;
      *((_QWORD *)v118 + 3) = &off_1E2DA1A38;
      *(_OWORD *)(v118 + 40) = 0u;
      *(_OWORD *)(v118 + 56) = 0u;
      *(_OWORD *)(v118 + 72) = 0u;
      *(_OWORD *)(v118 + 88) = 0u;
      *(_OWORD *)(v118 + 104) = 0u;
      *(_OWORD *)(v118 + 120) = 0u;
      *(_OWORD *)(v118 + 136) = 0u;
      *(_OWORD *)(v118 + 152) = 0u;
      *(_OWORD *)(v118 + 161) = 0u;
      *((_OWORD *)v118 + 13) = 0u;
      *((_OWORD *)v118 + 14) = 0u;
      *((_QWORD *)v118 + 30) = 0;
      v119 = *(std::__shared_weak_count **)&v269[16];
      *(_QWORD *)&v269[8] = v118 + 24;
      *(_QWORD *)&v269[16] = v118;
      if (v119)
      {
        v120 = (unint64_t *)&v119->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v122 = *(std::__shared_weak_count **)&lpsrc[8];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)&v269[8] + 64), *(uint64_t *)lpsrc, *(uint64_t *)&lpsrc[8]);
      std::to_string((std::string *)v235, v76);
      v123 = std::string::insert((std::string *)v235, 0, "_ctx_tx_to_default_");
      v124 = v123->__r_.__value_.__r.__words[0];
      __str.__r_.__value_.__r.__words[0] = v123->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v123->__r_.__value_.__r.__words[1] + 7);
      v125 = HIBYTE(v123->__r_.__value_.__r.__words[2]);
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      v126 = *(_QWORD *)&v269[8];
      if (*(char *)(*(_QWORD *)&v269[8] + 39) < 0)
        operator delete(*(void **)(*(_QWORD *)&v269[8] + 16));
      v127 = __str.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v126 + 16) = v124;
      *(_QWORD *)(v126 + 24) = v127;
      *(_QWORD *)(v126 + 31) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(v126 + 39) = v125;
      if ((v235[23] & 0x80000000) != 0)
        operator delete(*(void **)v235);
      MEMORY[0x19401C808](*(_QWORD *)&v269[8] + 40, "context_transfer");
      v128 = *(_QWORD *)&v269[8];
      v129 = v262;
      *(_DWORD *)(*(_QWORD *)&v269[8] + 8) = v254;
      *(_DWORD *)(v128 + 12) = v129;
      *(_DWORD *)v269 = v77;
      if (v122)
      {
        v130 = (unint64_t *)&v122->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      memset(v237, 0, sizeof(v237));
      v238 = 1065353216;
      memset(v235, 0, sizeof(v235));
      v236 = 1065353216;
      if (v78 <= v77)
      {
        v132 = v78;
        v232 = v77 + 1;
        do
        {
          v133 = (uint64_t)*a2 + 96;
          *(_QWORD *)lpsrc = v132;
          v134 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v133, v132, lpsrc);
          v135 = (uint64_t)*a2 + 56;
          *(_QWORD *)lpsrc = v132;
          v136 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v135, v132, lpsrc);
          v137 = v136[3];
          v138 = v136[4];
          while (v137 != v138)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v248, v137))
            {
              if (a5)
              {
                if (*(char *)(v137 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v137, *(_QWORD *)(v137 + 8));
                }
                else
                {
                  v139 = *(_OWORD *)v137;
                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v137 + 16);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v139;
                }
              }
              else
              {
                if (*(char *)(v137 + 23) >= 0)
                  v140 = *(unsigned __int8 *)(v137 + 23);
                else
                  v140 = *(_QWORD *)(v137 + 8);
                std::string::basic_string[abi:ne180100]((uint64_t)lpsrc, v140 + 18);
                if (SBYTE3(v265) >= 0)
                  v141 = lpsrc;
                else
                  v141 = *(_BYTE **)lpsrc;
                if (v140)
                {
                  if (*(char *)(v137 + 23) >= 0)
                    v142 = (const std::string::value_type *)v137;
                  else
                    v142 = *(const std::string::value_type **)v137;
                  memmove(v141, v142, v140);
                }
                strcpy(&v141[v140], "_ctx_tx_fallback__");
                std::to_string(&v234, v76);
                if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v143 = &v234;
                else
                  v143 = (std::string *)v234.__r_.__value_.__r.__words[0];
                if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v144 = HIBYTE(v234.__r_.__value_.__r.__words[2]);
                else
                  v144 = v234.__r_.__value_.__l.__size_;
                v145 = std::string::append((std::string *)lpsrc, (const std::string::value_type *)v143, v144);
                v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v146;
                v145->__r_.__value_.__l.__size_ = 0;
                v145->__r_.__value_.__r.__words[2] = 0;
                v145->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v234.__r_.__value_.__l.__data_);
                if (SBYTE3(v265) < 0)
                  operator delete(*(void **)lpsrc);
              }
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v235, v137))
              {
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v235, v137, v137);
                v147 = (_OWORD *)*((_QWORD *)&v274 + 1);
                if (*((_QWORD *)&v274 + 1) >= (unint64_t)v275)
                {
                  v149 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v274, v137);
                }
                else
                {
                  if (*(char *)(v137 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(*((std::string **)&v274 + 1), *(const std::string::value_type **)v137, *(_QWORD *)(v137 + 8));
                  }
                  else
                  {
                    v148 = *(_OWORD *)v137;
                    *(_QWORD *)(*((_QWORD *)&v274 + 1) + 16) = *(_QWORD *)(v137 + 16);
                    *v147 = v148;
                  }
                  v149 = (std::string *)((char *)v147 + 24);
                }
                *((_QWORD *)&v274 + 1) = v149;
                v150 = (_OWORD *)v276;
                if ((unint64_t)v276 >= *((_QWORD *)&v276 + 1))
                {
                  v152 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v275 + 1, (uint64_t)&__str);
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v276, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v151 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v276 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
                    *v150 = v151;
                  }
                  v152 = (std::string *)((char *)v150 + 24);
                }
                *(_QWORD *)&v276 = v152;
              }
              if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v240[0], (_QWORD *)v137))
              {
                *(_QWORD *)lpsrc = v137;
                v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v239, (_QWORD *)v137, (uint64_t)&std::piecewise_construct, (__int128 **)lpsrc);
                v154 = std::string::operator=((std::string *)(v153 + 7), &__str);
                Espresso::espresso_os_log_subsystem((Espresso *)v154, v155);
                v156 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
                {
                  v157 = (const std::string::value_type *)v137;
                  if (*(char *)(v137 + 23) < 0)
                    v157 = *(const std::string::value_type **)v137;
                  p_str = &__str;
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  *(_DWORD *)lpsrc = 67109634;
                  *(_DWORD *)&lpsrc[4] = v132;
                  *(_WORD *)&lpsrc[8] = 2080;
                  *(_QWORD *)&lpsrc[10] = v157;
                  v264 = 2080;
                  v265 = p_str;
                  _os_log_debug_impl(&dword_190DAF000, v156, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] remap_fallback_bottom: ilayer=%d %s -> %s\n", lpsrc, 0x1Cu);
                }

              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v137 += 24;
          }
          v159 = v134[3];
          v160 = v134[4];
          while (v159 != v160)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v245, v159))
            {
              if (a5)
              {
                if (*(char *)(v159 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v159, *(_QWORD *)(v159 + 8));
                }
                else
                {
                  v161 = *(_OWORD *)v159;
                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v159 + 16);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v161;
                }
              }
              else
              {
                if (*(char *)(v159 + 23) >= 0)
                  v162 = *(unsigned __int8 *)(v159 + 23);
                else
                  v162 = *(_QWORD *)(v159 + 8);
                std::string::basic_string[abi:ne180100]((uint64_t)lpsrc, v162 + 17);
                if (SBYTE3(v265) >= 0)
                  v163 = lpsrc;
                else
                  v163 = *(_BYTE **)lpsrc;
                if (v162)
                {
                  if (*(char *)(v159 + 23) >= 0)
                    v164 = (const std::string::value_type *)v159;
                  else
                    v164 = *(const std::string::value_type **)v159;
                  memmove(v163, v164, v162);
                }
                strcpy(&v163[v162], "_ctx_tx_default__");
                std::to_string(&v234, v76);
                if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v165 = &v234;
                else
                  v165 = (std::string *)v234.__r_.__value_.__r.__words[0];
                if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v166 = HIBYTE(v234.__r_.__value_.__r.__words[2]);
                else
                  v166 = v234.__r_.__value_.__l.__size_;
                v167 = std::string::append((std::string *)lpsrc, (const std::string::value_type *)v165, v166);
                v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v168;
                v167->__r_.__value_.__l.__size_ = 0;
                v167->__r_.__value_.__r.__words[2] = 0;
                v167->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v234.__r_.__value_.__l.__data_);
                if (SBYTE3(v265) < 0)
                  operator delete(*(void **)lpsrc);
              }
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v237, v159))
              {
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v237, v159, v159);
                v169 = (_OWORD *)*((_QWORD *)&v270 + 1);
                if (*((_QWORD *)&v270 + 1) >= (unint64_t)v271)
                {
                  v171 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v270, v159);
                }
                else
                {
                  if (*(char *)(v159 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(*((std::string **)&v270 + 1), *(const std::string::value_type **)v159, *(_QWORD *)(v159 + 8));
                  }
                  else
                  {
                    v170 = *(_OWORD *)v159;
                    *(_QWORD *)(*((_QWORD *)&v270 + 1) + 16) = *(_QWORD *)(v159 + 16);
                    *v169 = v170;
                  }
                  v171 = (std::string *)((char *)v169 + 24);
                }
                *((_QWORD *)&v270 + 1) = v171;
                v172 = (_OWORD *)v272;
                if ((unint64_t)v272 >= *((_QWORD *)&v272 + 1))
                {
                  v174 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v271 + 1, (uint64_t)&__str);
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v272, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v173 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v272 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
                    *v172 = v173;
                  }
                  v174 = (std::string *)((char *)v172 + 24);
                }
                *(_QWORD *)&v272 = v174;
              }
              if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v242[0], (_QWORD *)v159))
              {
                *(_QWORD *)lpsrc = v159;
                v175 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v241, (_QWORD *)v159, (uint64_t)&std::piecewise_construct, (__int128 **)lpsrc);
                v176 = std::string::operator=((std::string *)(v175 + 7), &__str);
                Espresso::espresso_os_log_subsystem((Espresso *)v176, v177);
                v178 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                {
                  v179 = (const std::string::value_type *)v159;
                  if (*(char *)(v159 + 23) < 0)
                    v179 = *(const std::string::value_type **)v159;
                  v180 = &__str;
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v180 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  *(_DWORD *)lpsrc = 67109634;
                  *(_DWORD *)&lpsrc[4] = v132;
                  *(_WORD *)&lpsrc[8] = 2080;
                  *(_QWORD *)&lpsrc[10] = v179;
                  v264 = 2080;
                  v265 = v180;
                  _os_log_debug_impl(&dword_190DAF000, v178, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] remap_default_bottom: ilayer=%d %s -> %s\n", lpsrc, 0x1Cu);
                }

              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v159 += 24;
          }
          ++v132;
        }
        while (v232 != (_DWORD)v132);
      }
      if (LODWORD(buf.__r_.__value_.__l.__data_) != v228)
      {
        v181 = v243.i64[1];
        if (v243.i64[1] >= v244)
        {
          v183 = (Espresso *)std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v243, (uint64_t)&buf);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v243.i64[1], (uint64_t)&buf);
          v183 = (Espresso *)(v181 + 72);
        }
        v243.i64[1] = (uint64_t)v183;
        Espresso::espresso_os_log_subsystem(v183, v182);
        v184 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
        {
          v195 = (_QWORD *)(buf.__r_.__value_.__l.__size_ + 16);
          if (*(char *)(buf.__r_.__value_.__l.__size_ + 39) < 0)
            v195 = (_QWORD *)*v195;
          data = (int)buf.__r_.__value_.__l.__data_;
          str_concat<std::vector<std::string>>(&__str, v274, *((uint64_t *)&v274 + 1));
          v197 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          v198 = __str.__r_.__value_.__r.__words[0];
          str_concat<std::vector<std::string>>(&v234, *((uint64_t *)&v275 + 1), v276);
          v199 = &__str;
          if (v197 < 0)
            v199 = (std::string *)v198;
          if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v200 = &v234;
          else
            v200 = (std::string *)v234.__r_.__value_.__r.__words[0];
          *(_DWORD *)lpsrc = 67109890;
          *(_DWORD *)&lpsrc[4] = data;
          *(_WORD *)&lpsrc[8] = 2080;
          *(_QWORD *)&lpsrc[10] = v195;
          v264 = 2080;
          v265 = v199;
          v266 = 2080;
          v267 = v200;
          _os_log_debug_impl(&dword_190DAF000, v184, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Inserting context transfer to fallback after layer %d (%s):  %s -> %s", lpsrc, 0x26u);
          if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v234.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }

      }
      if (*(_DWORD *)v269 != v228)
      {
        v185 = v243.i64[1];
        if (v243.i64[1] >= v244)
        {
          v187 = (Espresso *)std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v243, (uint64_t)v269);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v243.i64[1], (uint64_t)v269);
          v187 = (Espresso *)(v185 + 72);
        }
        v243.i64[1] = (uint64_t)v187;
        Espresso::espresso_os_log_subsystem(v187, v186);
        v188 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
        {
          v201 = (_QWORD *)(*(_QWORD *)&v269[8] + 16);
          if (*(char *)(*(_QWORD *)&v269[8] + 39) < 0)
            v201 = (_QWORD *)*v201;
          v202 = *(_DWORD *)v269;
          str_concat<std::vector<std::string>>(&__str, v270, *((uint64_t *)&v270 + 1));
          v203 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          v204 = __str.__r_.__value_.__r.__words[0];
          str_concat<std::vector<std::string>>(&v234, *((uint64_t *)&v271 + 1), v272);
          v205 = &__str;
          if (v203 < 0)
            v205 = (std::string *)v204;
          if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v206 = &v234;
          else
            v206 = (std::string *)v234.__r_.__value_.__r.__words[0];
          *(_DWORD *)lpsrc = 67109890;
          *(_DWORD *)&lpsrc[4] = v202;
          *(_WORD *)&lpsrc[8] = 2080;
          *(_QWORD *)&lpsrc[10] = v201;
          v264 = 2080;
          v265 = v205;
          v266 = 2080;
          v267 = v206;
          _os_log_debug_impl(&dword_190DAF000, v188, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Inserting context transfer to default after layer %d (%s): %s -> %s", lpsrc, 0x26u);
          if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v234.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }

      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v235);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v237);
      *(_QWORD *)v237 = (char *)&v271 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
      *(_QWORD *)v237 = &v270;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
      v189 = *(std::__shared_weak_count **)&v269[16];
      if (*(_QWORD *)&v269[16])
      {
        v190 = (unint64_t *)(*(_QWORD *)&v269[16] + 8);
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
      }
      *(_QWORD *)v269 = (char *)&v275 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v269);
      *(_QWORD *)v269 = &v274;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v269);
      v192 = (std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2];
      if (buf.__r_.__value_.__r.__words[2])
      {
        v193 = (unint64_t *)(buf.__r_.__value_.__r.__words[2] + 8);
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      ++v76;
      v75 = v227 + 2;
    }
    while (v227 + 2 != (_DWORD *)v226);
  }
  if ((int)v225 < 1)
    goto LABEL_338;
  v207 = 0;
  do
  {
    v208 = (uint64_t)*a2 + 56;
    buf.__r_.__value_.__r.__words[0] = v207;
    v73 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v208, v207, &buf);
    v209 = (std::string *)*((_QWORD *)v73 + 3);
    v210 = (std::string *)*((_QWORD *)v73 + 4);
    while (v209 != v210)
    {
      v73 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v260, (uint64_t)v209);
      if (v73)
      {
        v73 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v260, (uint64_t)v209);
        if (!v73)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        begin = v261.__begin_;
        v212 = v261.__begin_[*((_QWORD *)v73 + 5)] != 0;
      }
      else
      {
        v212 = 0;
        begin = v261.__begin_;
      }
      v213 = begin[v207];
      if (v213 && !v212)
      {
        v73 = (Espresso *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v240[0], v209);
        if (!v73)
          goto LABEL_336;
        *(_QWORD *)v269 = v209;
        v214 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v239, v209, (uint64_t)&std::piecewise_construct, (__int128 **)v269);
        goto LABEL_335;
      }
      if (v213)
        v212 = 0;
      if (v212)
      {
        v73 = (Espresso *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v242[0], v209);
        if (v73)
        {
          *(_QWORD *)v269 = v209;
          v214 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v241, v209, (uint64_t)&std::piecewise_construct, (__int128 **)v269);
LABEL_335:
          v73 = (Espresso *)std::string::operator=(v209, (const std::string *)(v214 + 7));
        }
      }
LABEL_336:
      ++v209;
    }
    ++v207;
  }
  while (v207 != v30);
LABEL_338:
  Espresso::espresso_os_log_subsystem(v73, v74);
  v215 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v215, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = 954437177 * ((unint64_t)(v243.i64[1] - v243.i64[0]) >> 3);
    _os_log_debug_impl(&dword_190DAF000, v215, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Inserting %d ctx transfers in total", (uint8_t *)&buf, 8u);
  }

  Espresso::net::insert_layers((uint64_t)*a2, v243.i64);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v239, (uint64_t)v240[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v241, (uint64_t)v242[0]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v243;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v245);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v248);
  if (__p)
  {
    v252 = (uint64_t *)__p;
    operator delete(__p);
  }
  v216 = v256;
  if (v256)
  {
    v217 = (unint64_t *)&v256->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v257[2]);
  v219 = v257[0];
  v257[0] = 0;
  if (v219)
    operator delete(v219);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v258);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v260[2]);
  v220 = v260[0];
  v260[0] = 0;
  if (v220)
    operator delete(v220);
LABEL_351:
  if (v261.__begin_)
  {
    v261.__end_ = v261.__begin_;
    operator delete(v261.__begin_);
  }
}

void sub_190E5DCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;

  if (__p)
    operator delete(__p);
  v69 = (std::__shared_weak_count *)STACK[0x200];
  if (STACK[0x200])
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)STACK[0x218]);
  v72 = (void *)STACK[0x208];
  STACK[0x208] = 0;
  if (v72)
    operator delete(v72);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x230]);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)STACK[0x268]);
  v73 = (void *)STACK[0x258];
  STACK[0x258] = 0;
  if (v73)
    operator delete(v73);
  v74 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v74;
    operator delete(v74);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

void E5Common::AutoMmapPtr::~AutoMmapPtr(E5Common::AutoMmapPtr *this)
{
  uint64_t v2;
  uint64_t v3;
  E5Common::AutoMmapPtr *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D5CCE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v6 = v2;
    v3 = *((_QWORD *)this + 5);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6);
  }
  v4 = (E5Common::AutoMmapPtr *)*((_QWORD *)this + 5);
  if (v4 == (E5Common::AutoMmapPtr *)((char *)this + 16))
  {
    v5 = 4;
    v4 = (E5Common::AutoMmapPtr *)((char *)this + 16);
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
  MEMORY[0x19401CD90]();
}

{
  uint64_t v2;
  uint64_t v3;
  E5Common::AutoMmapPtr *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D5CCE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v6 = v2;
    v3 = *((_QWORD *)this + 5);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6);
  }
  v4 = (E5Common::AutoMmapPtr *)*((_QWORD *)this + 5);
  if (v4 == (E5Common::AutoMmapPtr *)((char *)this + 16))
  {
    v5 = 4;
    v4 = (E5Common::AutoMmapPtr *)((char *)this + 16);
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

uint64_t e5rt_tensor_desc_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCDE00;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190E5E274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A388;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A418;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

{
  E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_pointer<AneInferenceOpT  *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<AneInferenceOpT>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

void Espresso::MPSEngine::context::~context(id *this)
{
  *this = &off_1E2DAC780;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  Espresso::context_metal::~context_metal(this);
}

{
  *this = &off_1E2DAC780;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  Espresso::context_metal::~context_metal(this);
  JUMPOUT(0x19401CD90);
}

void std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(*a1);
    std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<Espresso::wisdom_kernel_key const,std::map<std::string,int>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void __destroy_helper_block_ea8_48c46_ZTSNSt3__110shared_ptrIKN4E5RT10E5FunctionEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t e5rt_execution_stream_operation_retain_input_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6AD8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190E5E504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

void E5RT::ExecutionStreamOperation::ReshapeOperation(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17[2];
  void *__p[2];
  int v19;
  __int128 *v20;

  *(_OWORD *)v17 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = 1065353216;
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v20 = (__int128 *)(i + 2);
    v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v17, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, &v20);
    v5 = i[5];
    if (v5)
    {
      v6 = (_QWORD *)operator new();
      v7 = i[5];
      *v6 = &unk_1E2DC2D30;
      v6[1] = 0;
      v6[2] = 0;
      v6[3] = v7;
      i[5] = 0;
      v8 = (std::__shared_weak_count *)v4[6];
      v4[5] = v5;
      v4[6] = (uint64_t)v6;
      if (v8)
        goto LABEL_8;
    }
    else
    {
      i[5] = 0;
      v8 = (std::__shared_weak_count *)v4[6];
      v4[5] = 0;
      v4[6] = 0;
      if (v8)
      {
LABEL_8:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), v17);
  v11 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v12 = (void **)*v11;
        v13 = (std::__shared_weak_count *)v11[6];
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (*((char *)v11 + 39) < 0)
          break;
        operator delete(v11);
        v11 = v12;
        if (!v12)
          goto LABEL_22;
      }
      operator delete(v11[2]);
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
LABEL_22:
  v16 = v17[0];
  v17[0] = 0;
  if (v16)
    operator delete(v16);
}

void sub_190E5E728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190E5E73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::ReshapeOperationInternal(uint64_t a1, uint64_t a2)
{
  _QWORD *InputPorts;
  _QWORD *OutputPorts;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *i;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t **j;
  uint64_t *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  E5RT::ExecutionStreamOperationInternal **v41;
  E5RT::ExecutionStreamOperationInternal **v42;
  void **v43;
  void **v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  _QWORD *k;
  _QWORD *m;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  std::__shared_weak_count_vtbl *v80;
  uint64_t v81;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptorImpl **v83;
  uint64_t *v84;
  unint64_t Size;
  E5RT::BufferObject *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint8x8_t v97;
  uint64_t *v98;
  uint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  BOOL v106;
  char *v107;
  std::__shared_weak_count *v108;
  char *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void **v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  void **v122;
  void **v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  void **v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *exception;
  std::__shared_weak_count_vtbl *v141;
  char *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  char *v146;
  __int128 v147;
  char v148[8];
  _BYTE v149[24];
  void *v150[2];
  void *__p[2];
  int v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  void *v156[2];
  int v157;
  __int128 v158;
  __int128 v159;
  int v160;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v158, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v155, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(v150, 2, v155);
    E5RT::E5RTError::E5RTError(exception, &v158, v150);
  }
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v6 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v7 = InputPorts + 2;
  while (1)
  {
    v7 = (_QWORD *)*v7;
    if (!v7)
      break;
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v7[5], &v158);
    v8 = v158;
    if (*((_QWORD *)&v158 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
      }
    }
    if ((_QWORD)v8)
    {
      v137 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v158, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v155, "Operation cannot be reshaped while memory objects are bound to I/O ports.");
      E5RT::Status::Status(v150, 2, v155);
      E5RT::E5RTError::E5RTError(v137, &v158, v150);
    }
  }
  v11 = OutputPorts + 2;
  while (1)
  {
    v11 = (_QWORD *)*v11;
    if (!v11)
      break;
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v11[5], &v158);
    v12 = v158;
    if (*((_QWORD *)&v158 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 16))(*((_QWORD *)&v12 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
      }
    }
    if ((_QWORD)v12)
    {
      v138 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v158, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v155, "Operation cannot be reshaped while memory objects are bound to I/O ports.");
      E5RT::Status::Status(v150, 2, v155);
      E5RT::E5RTError::E5RTError(v138, &v158, v150);
    }
  }
  v15 = v6 + 2;
  while (1)
  {
    v15 = (_QWORD *)*v15;
    if (!v15)
      break;
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v15[5], &v158);
    v16 = v158;
    if (*((_QWORD *)&v158 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
      }
    }
    if ((_QWORD)v16)
    {
      v139 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v158, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v155, "Operation cannot be reshaped while memory objects are bound to I/O ports.");
      E5RT::Status::Status(v150, 2, v155);
      E5RT::E5RTError::E5RTError(v139, &v158, v150);
    }
  }
  E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateUserInputsToReshape(a1, a2);
  v158 = 0u;
  v159 = 0u;
  v160 = 1065353216;
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    v155[0] = i + 2;
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v158, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (__int128 **)v155);
    v22 = i[5];
    v21 = i[6];
    if (v21)
    {
      v23 = (unint64_t *)(v21 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)v20[6];
    v20[5] = v22;
    v20[6] = v21;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  *(_OWORD *)v155 = 0u;
  *(_OWORD *)v156 = 0u;
  v157 = 1065353216;
  for (j = *(uint64_t ***)(a1 + 24); j; j = (uint64_t **)*j)
  {
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5], v150);
    if (!v150[0])
      goto LABEL_50;
    *(_QWORD *)v149 = j + 2;
    v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v155, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (__int128 **)v149);
    v30 = *(_OWORD *)v150;
    v150[0] = 0;
    v150[1] = 0;
    v31 = (std::__shared_weak_count *)v29[6];
    *(_OWORD *)(v29 + 5) = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (uint64_t)j[5];
    v153 = 0;
    v154 = 0;
    E5RT::IOPort::BindMemoryObject(v34, (uint64_t)&v153);
    v35 = v154;
    if (!v154)
      goto LABEL_50;
    v36 = (unint64_t *)&v154->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v38 = (std::__shared_weak_count *)v150[1];
      if (v150[1])
      {
LABEL_51:
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    else
    {
LABEL_50:
      v38 = (std::__shared_weak_count *)v150[1];
      if (v150[1])
        goto LABEL_51;
    }
  }
  *(_OWORD *)v150 = 0u;
  *(_OWORD *)__p = 0u;
  v152 = 1065353216;
  v41 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 48);
  v42 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 56);
  if (v41 != v42)
  {
    while (1)
    {
      if (__p[1])
      {
        v43 = (void **)__p[0];
        if (__p[0])
        {
          do
          {
            while (1)
            {
              v44 = (void **)*v43;
              v45 = (std::__shared_weak_count *)v43[6];
              if (v45)
              {
                v46 = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              if (*((char *)v43 + 39) < 0)
                break;
              operator delete(v43);
              v43 = v44;
              if (!v44)
                goto LABEL_71;
            }
            operator delete(v43[2]);
            operator delete(v43);
            v43 = v44;
          }
          while (v44);
        }
LABEL_71:
        __p[0] = 0;
        v48 = (char *)v150[1];
        if (v150[1])
        {
          v49 = 0;
          do
            *((_QWORD *)v150[0] + (_QWORD)v49++) = 0;
          while (v48 != v49);
        }
        __p[1] = 0;
      }
      for (k = *(_QWORD **)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*v41) + 16); k; k = (_QWORD *)*k)
      {
        v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(&v158, (uint64_t)(k + 2));
        if (!v53)
        {
          v134 = __cxa_allocate_exception(0x18uLL);
          *(_QWORD *)v149 = operator new(0x20uLL);
          *(_OWORD *)&v149[8] = xmmword_191A71250;
          strcpy(*(char **)v149, "ReshapeOperationInternal");
          v146 = (char *)operator new(0x38uLL);
          v147 = xmmword_191A6FFA0;
          strcpy(v146, "Reshaping error. Unable to find input tensor's shape.");
          E5RT::Status::Status(v148, 11, &v146);
          E5RT::E5RTError::E5RTError(v134, v149, v148);
        }
        *(_QWORD *)v149 = k + 2;
        v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v150, (uint64_t)(k + 2), (uint64_t)&std::piecewise_construct, (__int128 **)v149);
        v56 = v53[5];
        v55 = v53[6];
        if (v55)
        {
          v57 = (unint64_t *)(v55 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = (std::__shared_weak_count *)v54[6];
        v54[5] = v56;
        v54[6] = v55;
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
      }
      for (m = *(_QWORD **)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*v41) + 16); m; m = (_QWORD *)*m)
      {
        v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(&v158, (uint64_t)(m + 2));
        if (!v62)
        {
          v135 = __cxa_allocate_exception(0x18uLL);
          *(_QWORD *)v149 = operator new(0x20uLL);
          *(_OWORD *)&v149[8] = xmmword_191A71250;
          strcpy(*(char **)v149, "ReshapeOperationInternal");
          v146 = (char *)operator new(0x38uLL);
          v147 = xmmword_191A6FFA0;
          strcpy(v146, "Reshaping error. Unable to find inout tensor's shape.");
          E5RT::Status::Status(v148, 11, &v146);
          E5RT::E5RTError::E5RTError(v135, v149, v148);
        }
        *(_QWORD *)v149 = m + 2;
        v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v150, (uint64_t)(m + 2), (uint64_t)&std::piecewise_construct, (__int128 **)v149);
        v65 = v62[5];
        v64 = v62[6];
        if (v64)
        {
          v66 = (unint64_t *)(v64 + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        v68 = (std::__shared_weak_count *)v63[6];
        v63[5] = v65;
        v63[6] = v64;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
      }
      (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void **))(*(_QWORD *)*v41 + 120))(*v41, v150);
      v52 = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*v41) + 16);
      if (v52)
        break;
LABEL_59:
      v41 += 2;
      if (v41 == v42)
        goto LABEL_112;
    }
    while (1)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(&v158, (uint64_t)(v52 + 2)))
      {
        v136 = __cxa_allocate_exception(0x18uLL);
        *(_QWORD *)v149 = operator new(0x20uLL);
        *(_OWORD *)&v149[8] = xmmword_191A71250;
        strcpy(*(char **)v149, "ReshapeOperationInternal");
        v146 = (char *)operator new(0x40uLL);
        v147 = xmmword_191A78330;
        strcpy(v146, "Reshaping error. A single operand cannot have two new shapes.");
        E5RT::Status::Status(v148, 11, &v146);
        E5RT::E5RTError::E5RTError(v136, v149, v148);
      }
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v52[5], v149);
      v146 = (char *)(v52 + 2);
      v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v158, (uint64_t)(v52 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v146);
      v72 = *(_OWORD *)v149;
      *(_OWORD *)v149 = 0uLL;
      v73 = (std::__shared_weak_count *)v71[6];
      *(_OWORD *)(v71 + 5) = v72;
      if (!v73)
        goto LABEL_105;
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        v76 = *(std::__shared_weak_count **)&v149[8];
        if (*(_QWORD *)&v149[8])
        {
LABEL_106:
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
      }
      else
      {
LABEL_105:
        v76 = *(std::__shared_weak_count **)&v149[8];
        if (*(_QWORD *)&v149[8])
          goto LABEL_106;
      }
      v52 = (uint64_t *)*v52;
      if (!v52)
        goto LABEL_59;
    }
  }
LABEL_112:
  v79 = *(_QWORD **)(a1 + 24);
  if (v79)
  {
    v80 = (std::__shared_weak_count_vtbl *)&unk_1E2DC3190;
    while (1)
    {
      v81 = v79[5];
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v79 + 2))&& !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (uint64_t)(v79 + 2))&& !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v6, (uint64_t)(v79 + 2))&& (E5RT::IOPort::HasKnownShape((E5RT::IOPortImpl **)v79[5]) & 1) != 0)
      {
        break;
      }
LABEL_114:
      v79 = (_QWORD *)*v79;
      if (!v79)
        goto LABEL_177;
    }
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v79[5]);
    v83 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>(v155, (uint64_t)(v79 + 2));
    if (!v84)
    {
LABEL_164:
      E5RT::TensorDescriptor::AllocateMemory((uint64_t)v83, 0, 1uLL, &v146);
      v107 = v146;
      *(_QWORD *)v149 = v146;
      if (v146)
      {
        v108 = (std::__shared_weak_count *)operator new();
        v109 = v146;
        v108->__vftable = v80;
        v108->__shared_owners_ = 0;
        v108->__shared_weak_owners_ = 0;
        v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
        v107 = *(char **)v149;
      }
      else
      {
        v108 = 0;
      }
      v142 = v107;
      v143 = v108;
      *(_OWORD *)v149 = 0uLL;
      E5RT::IOPortPriv::BindMemoryObject(v81, (uint64_t)&v142, 1);
      v110 = v143;
      if (v143)
      {
        v111 = (unint64_t *)&v143->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v113 = *(std::__shared_weak_count **)&v149[8];
      if (*(_QWORD *)&v149[8])
      {
        v114 = (unint64_t *)(*(_QWORD *)&v149[8] + 8);
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      goto LABEL_114;
    }
    Size = E5RT::TensorDescriptor::GetSize(v83);
    v141 = v80;
    v86 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)v84[5]);
    v87 = E5RT::BufferObject::GetSize(v86);
    if (Size <= v87)
    {
      v88 = v84[6];
      v144 = v84[5];
      v145 = (std::__shared_weak_count *)v88;
      if (v88)
      {
        v89 = (unint64_t *)(v88 + 8);
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      E5RT::IOPortPriv::BindMemoryObject(v81, (uint64_t)&v144, 1);
      v91 = v145;
      if (v145)
      {
        v92 = (unint64_t *)&v145->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
    }
    v94 = (unint64_t)v155[1];
    v95 = *v84;
    v96 = v84[1];
    v97 = (uint8x8_t)vcnt_s8((int8x8_t)v155[1]);
    v97.i16[0] = vaddlv_u8(v97);
    if (v97.u32[0] > 1uLL)
    {
      if ((void *)v96 >= v155[1])
        v96 %= (unint64_t)v155[1];
    }
    else
    {
      v96 &= (unint64_t)v155[1] - 1;
    }
    v98 = (uint64_t *)*((_QWORD *)v155[0] + v96);
    do
    {
      v99 = v98;
      v98 = (uint64_t *)*v98;
    }
    while (v98 != v84);
    if (v99 == (uint64_t *)v156)
      goto LABEL_146;
    v100 = v99[1];
    if (v97.u32[0] > 1uLL)
    {
      if ((void *)v100 >= v155[1])
        v100 %= (unint64_t)v155[1];
    }
    else
    {
      v100 &= (unint64_t)v155[1] - 1;
    }
    if (v100 != v96)
    {
LABEL_146:
      if (v95)
      {
        v101 = *(_QWORD *)(v95 + 8);
        if (v97.u32[0] > 1uLL)
        {
          if ((void *)v101 >= v155[1])
            v101 %= (unint64_t)v155[1];
        }
        else
        {
          v101 &= (unint64_t)v155[1] - 1;
        }
        if (v101 == v96)
        {
LABEL_149:
          v102 = *(_QWORD *)(v95 + 8);
          if (v97.u32[0] > 1uLL)
          {
            if (v102 >= v94)
              v102 %= v94;
          }
          else
          {
            v102 &= v94 - 1;
          }
          if (v102 != v96)
          {
            *((_QWORD *)v155[0] + v102) = v99;
            v95 = *v84;
          }
LABEL_155:
          *v99 = v95;
          *v84 = 0;
          --v156[1];
          v103 = (std::__shared_weak_count *)v84[6];
          if (v103)
          {
            v104 = (unint64_t *)&v103->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          if (*((char *)v84 + 39) < 0)
            operator delete((void *)v84[2]);
          operator delete(v84);
          v106 = Size > v87;
          v80 = v141;
          if (!v106)
            goto LABEL_114;
          goto LABEL_164;
        }
      }
      *((_QWORD *)v155[0] + v96) = 0;
      v95 = *v84;
    }
    if (!v95)
      goto LABEL_155;
    goto LABEL_149;
  }
LABEL_177:
  *(_QWORD *)v149 = &v158;
  sub_190F40944((uint64_t *)v149, InputPorts);
  sub_190F40944((uint64_t *)v149, OutputPorts);
  sub_190F40944((uint64_t *)v149, v6);
  v116 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v117 = (void **)*v116;
        v118 = (std::__shared_weak_count *)v116[6];
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        if (*((char *)v116 + 39) < 0)
          break;
        operator delete(v116);
        v116 = v117;
        if (!v117)
          goto LABEL_187;
      }
      operator delete(v116[2]);
      operator delete(v116);
      v116 = v117;
    }
    while (v117);
  }
LABEL_187:
  v121 = v150[0];
  v150[0] = 0;
  if (v121)
    operator delete(v121);
  v122 = (void **)v156[0];
  if (v156[0])
  {
    do
    {
      while (1)
      {
        v123 = (void **)*v122;
        v124 = (std::__shared_weak_count *)v122[6];
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        if (*((char *)v122 + 39) < 0)
          break;
        operator delete(v122);
        v122 = v123;
        if (!v123)
          goto LABEL_199;
      }
      operator delete(v122[2]);
      operator delete(v122);
      v122 = v123;
    }
    while (v123);
  }
LABEL_199:
  v127 = v155[0];
  v155[0] = 0;
  if (v127)
    operator delete(v127);
  v128 = (void **)v159;
  if ((_QWORD)v159)
  {
    do
    {
      while (1)
      {
        v129 = (void **)*v128;
        v130 = (std::__shared_weak_count *)v128[6];
        if (v130)
        {
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        if (*((char *)v128 + 39) < 0)
          break;
        operator delete(v128);
        v128 = v129;
        if (!v129)
          goto LABEL_211;
      }
      operator delete(v128[2]);
      operator delete(v128);
      v128 = v129;
    }
    while (v129);
  }
LABEL_211:
  v133 = (void *)v158;
  *(_QWORD *)&v158 = 0;
  if (v133)
    operator delete(v133);
}

void sub_190E5F730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,void **__p,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,void **a39)
{
  uint64_t v39;
  void **v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void **v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;

  if (a15)
    (*(void (**)(void *))(*(_QWORD *)a15 + 8))(a15);
  v41 = __p;
  if (__p)
  {
    do
    {
      while (1)
      {
        v42 = (void **)*v41;
        v43 = (std::__shared_weak_count *)v41[6];
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(p_shared_owners);
          while (__stlxr(v45 - 1, p_shared_owners));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        if (*((char *)v41 + 39) < 0)
          break;
        operator delete(v41);
        v41 = v42;
        if (!v42)
          goto LABEL_13;
      }
      operator delete(v41[2]);
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
LABEL_13:
  if (a29)
    operator delete(a29);
  v46 = a39;
  if (a39)
  {
    do
    {
      while (1)
      {
        v47 = (void **)*v46;
        v48 = (std::__shared_weak_count *)v46[6];
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (*((char *)v46 + 39) < 0)
          break;
        operator delete(v46);
        v46 = v47;
        if (!v47)
          goto LABEL_25;
      }
      operator delete(v46[2]);
      operator delete(v46);
      v46 = v47;
    }
    while (v47);
  }
LABEL_25:
  if (a37)
    operator delete(a37);
  v51 = *(void ***)(v39 - 112);
  if (v51)
  {
    do
    {
      while (1)
      {
        v52 = (void **)*v51;
        v53 = (std::__shared_weak_count *)v51[6];
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        if (*((char *)v51 + 39) < 0)
          break;
        operator delete(v51);
        v51 = v52;
        if (!v52)
          goto LABEL_37;
      }
      operator delete(v51[2]);
      operator delete(v51);
      v51 = v52;
    }
    while (v52);
  }
LABEL_37:
  v56 = *(void **)(v39 - 128);
  *(_QWORD *)(v39 - 128) = 0;
  if (v56)
    operator delete(v56);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(E5RT::Ops::PreCompiledComputeOperation *this@<X0>, E5RT::ExecutionStreamOperationInternal **a2@<X8>)
{
  uint64_t ProgramFunction;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void **v64;
  void **v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  void **v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  void **v76;
  void **v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::logic_error *exception;
  std::logic_error *v86;
  std::logic_error *v87;
  __int128 v90;
  char *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  void *__p[2];
  int v95;
  void *v96[2];
  void *v97[2];
  int v98;
  void *v99[2];
  void *v100[2];
  int v101;
  uint64_t v102;
  std::__shared_weak_count *v103;

  ProgramFunction = E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(this);
  E5RT::ProgramFunctionPriv::GetE5Function(ProgramFunction, &v102);
  *(_OWORD *)v99 = 0u;
  *(_OWORD *)v100 = 0u;
  v101 = 1065353216;
  *(_OWORD *)v96 = 0u;
  *(_OWORD *)v97 = 0u;
  v98 = 1065353216;
  *(_OWORD *)v93 = 0u;
  *(_OWORD *)__p = 0u;
  v95 = 1065353216;
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 40))(v102);
  v5 = v4[1] - *v4;
  if (v5)
  {
    v6 = 0;
    v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    do
    {
      if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + 24 * v6);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v8[5] + 16))(&v90);
      (*(void (**)(uint64_t))(*(_QWORD *)v8[5] + 56))(v8[5]);
      v9 = (char *)operator new(0x28uLL);
      std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>((uint64_t)v9, &v90);
      v91 = v9 + 24;
      v92 = (std::__shared_weak_count *)v9;
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      *(_QWORD *)&v90 = v8 + 2;
      v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v99, (uint64_t)(v8 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v90);
      v15 = (uint64_t)v91;
      v14 = (uint64_t)v92;
      if (v92)
      {
        p_shared_owners = (unint64_t *)&v92->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = (std::__shared_weak_count *)v13[6];
      v13[5] = v15;
      v13[6] = v14;
      if (!v18)
        goto LABEL_17;
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        v21 = v92;
        if (v92)
        {
LABEL_18:
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
LABEL_17:
        v21 = v92;
        if (v92)
          goto LABEL_18;
      }
      ++v6;
    }
    while (v6 != v7);
  }
  v24 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 48))(v102);
  v25 = v24[1] - *v24;
  if (v25)
  {
    v26 = 0;
    v27 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
    do
    {
      if (v26 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24[1] - *v24) >> 3))
      {
        v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v86, "iterator out of range");
        v86->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v86, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v24 + 8, *v24 + 24 * v26);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v28[5] + 16))(&v90);
      (*(void (**)(uint64_t))(*(_QWORD *)v28[5] + 56))(v28[5]);
      v29 = (char *)operator new(0x28uLL);
      std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>((uint64_t)v29, &v90);
      v91 = v29 + 24;
      v92 = (std::__shared_weak_count *)v29;
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      *(_QWORD *)&v90 = v28 + 2;
      v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v96, (uint64_t)(v28 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v90);
      v35 = (uint64_t)v91;
      v34 = (uint64_t)v92;
      if (v92)
      {
        v36 = (unint64_t *)&v92->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v38 = (std::__shared_weak_count *)v33[6];
      v33[5] = v35;
      v33[6] = v34;
      if (!v38)
        goto LABEL_40;
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
        v41 = v92;
        if (v92)
        {
LABEL_41:
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      else
      {
LABEL_40:
        v41 = v92;
        if (v92)
          goto LABEL_41;
      }
      ++v26;
    }
    while (v26 != v27);
  }
  v44 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 56))(v102);
  v45 = v44[1] - *v44;
  if (v45)
  {
    v46 = 0;
    v47 = 0xAAAAAAAAAAAAAAABLL * (v45 >> 3);
    do
    {
      if (v46 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44[1] - *v44) >> 3))
      {
        v87 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v87, "iterator out of range");
        v87->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v87, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v44 + 8, *v44 + 24 * v46);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v48[5] + 16))(&v90);
      (*(void (**)(uint64_t))(*(_QWORD *)v48[5] + 56))(v48[5]);
      v49 = (char *)operator new(0x28uLL);
      std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>((uint64_t)v49, &v90);
      v91 = v49 + 24;
      v92 = (std::__shared_weak_count *)v49;
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      *(_QWORD *)&v90 = v48 + 2;
      v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v93, (uint64_t)(v48 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v90);
      v55 = (uint64_t)v91;
      v54 = (uint64_t)v92;
      if (v92)
      {
        v56 = (unint64_t *)&v92->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = (std::__shared_weak_count *)v53[6];
      v53[5] = v55;
      v53[6] = v54;
      if (!v58)
        goto LABEL_63;
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        v61 = v92;
        if (v92)
        {
LABEL_64:
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      else
      {
LABEL_63:
        v61 = v92;
        if (v92)
          goto LABEL_64;
      }
      ++v46;
    }
    while (v46 != v47);
  }
  E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(this, (uint64_t)v99, (uint64_t)v96, (uint64_t)v93, a2);
  v64 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v65 = (void **)*v64;
        v66 = (std::__shared_weak_count *)v64[6];
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        if (*((char *)v64 + 39) < 0)
          break;
        operator delete(v64);
        v64 = v65;
        if (!v65)
          goto LABEL_80;
      }
      operator delete(v64[2]);
      operator delete(v64);
      v64 = v65;
    }
    while (v65);
  }
LABEL_80:
  v69 = v93[0];
  v93[0] = 0;
  if (v69)
    operator delete(v69);
  v70 = (void **)v97[0];
  if (v97[0])
  {
    do
    {
      while (1)
      {
        v71 = (void **)*v70;
        v72 = (std::__shared_weak_count *)v70[6];
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (*((char *)v70 + 39) < 0)
          break;
        operator delete(v70);
        v70 = v71;
        if (!v71)
          goto LABEL_92;
      }
      operator delete(v70[2]);
      operator delete(v70);
      v70 = v71;
    }
    while (v71);
  }
LABEL_92:
  v75 = v96[0];
  v96[0] = 0;
  if (v75)
    operator delete(v75);
  v76 = (void **)v100[0];
  if (v100[0])
  {
    do
    {
      while (1)
      {
        v77 = (void **)*v76;
        v78 = (std::__shared_weak_count *)v76[6];
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        if (*((char *)v76 + 39) < 0)
          break;
        operator delete(v76);
        v76 = v77;
        if (!v77)
          goto LABEL_104;
      }
      operator delete(v76[2]);
      operator delete(v76);
      v76 = v77;
    }
    while (v77);
  }
LABEL_104:
  v81 = v99[0];
  v99[0] = 0;
  if (v81)
    operator delete(v81);
  v82 = v103;
  if (v103)
  {
    v83 = (unint64_t *)&v103->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_190E605D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a21);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v27 - 112);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperandImpl::GetAliases(E5RT::E5OperandImpl *this)
{
  return (uint64_t)this + 72;
}

uint64_t E5RT::ProgramFunctionPriv::ProgramFunctionPriv(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::logic_error *exception;
  std::logic_error *v47;
  std::logic_error *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 *v54;

  *(_QWORD *)a1 = &off_1E2D5B038;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  v4 = a1 + 64;
  *(_OWORD *)(a1 + 24) = 0u;
  v49 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  v5 = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  v51 = 0x2B2340B400000000;
  v52 = 0u;
  v53 = 0u;
  kdebug_trace();
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 40))(*v3);
  v7 = v6[1] - *v6;
  if (v7)
  {
    v8 = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    do
    {
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v6 + 8, *v6 + 24 * v8);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v10[5] + 16))(&v50);
      v54 = (__int128 *)(v10 + 2);
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (uint64_t)(v10 + 2), (uint64_t)&std::piecewise_construct, &v54);
      v12 = v50;
      v50 = 0uLL;
      v13 = (std::__shared_weak_count *)v11[6];
      *(_OWORD *)(v11 + 5) = v12;
      if (!v13)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
        {
LABEL_10:
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      else
      {
LABEL_9:
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
          goto LABEL_10;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  v19 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 48))(*v3);
  v20 = v19[1] - *v19;
  if (v20)
  {
    v21 = 0;
    v22 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
    do
    {
      if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[1] - *v19) >> 3))
      {
        v47 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v47, "iterator out of range");
        v47->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v47, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v19 + 8, *v19 + 24 * v21);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v23[5] + 16))(&v50);
      v54 = (__int128 *)(v23 + 2);
      v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (uint64_t)(v23 + 2), (uint64_t)&std::piecewise_construct, &v54);
      v25 = v50;
      v50 = 0uLL;
      v26 = (std::__shared_weak_count *)v24[6];
      *(_OWORD *)(v24 + 5) = v25;
      if (!v26)
        goto LABEL_24;
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
        {
LABEL_25:
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      else
      {
LABEL_24:
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
          goto LABEL_25;
      }
      ++v21;
    }
    while (v21 != v22);
  }
  v32 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 56))(*v3);
  v33 = v32[1] - *v32;
  if (v33)
  {
    v34 = 0;
    v35 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 3);
    do
    {
      if (v34 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32[1] - *v32) >> 3))
      {
        v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v48, "iterator out of range");
        v48->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v48, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v32 + 8, *v32 + 24 * v34);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v36[5] + 16))(&v50);
      v54 = (__int128 *)(v36 + 2);
      v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (uint64_t)(v36 + 2), (uint64_t)&std::piecewise_construct, &v54);
      v38 = v50;
      v50 = 0uLL;
      v39 = (std::__shared_weak_count *)v37[6];
      *(_OWORD *)(v37 + 5) = v38;
      if (!v39)
        goto LABEL_39;
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
        {
LABEL_40:
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
      else
      {
LABEL_39:
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
          goto LABEL_40;
      }
      ++v34;
    }
    while (v34 != v35);
  }
  if (E5RT::g_trace_analysis_level >= v51)
    kdebug_trace();
  return a1;
}

void sub_190E60C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v9);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v8);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a4);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperandImpl::GetOperandDesc@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 64);
  *a2 = *(_QWORD *)(this + 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190E61148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E6115C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5FunctionImpl::GetInputs(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 96;
}

uint64_t E5RT::E5FunctionImpl::GetInOuts(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 304;
}

uint64_t E5RT::E5FunctionImpl::GetOutputs(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 200;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return **((_QWORD **)this + 1);
}

uint64_t E5RT::ProgramFunctionPriv::GetE5Function@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::ReshapeOperationInternal(uint64_t *a1, uint64_t a2)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)a1);
  kdebug_trace();
  E5RT::Ops::PreCompiledComputeOperation::Impl::ReshapeOperationInternal(a1[37], a2);
  return kdebug_trace();
}

void sub_190E61258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::ExecutionStream::CreateExecutionStream@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = operator new();
  E5RT::ExecutionStreamImpl::ExecutionStreamImpl(v3);
  result = (_QWORD *)operator new();
  *result = &off_1E2D5B018;
  result[1] = v3;
  *a1 = result;
  return result;
}

void sub_190E6135C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<E5RT::ExecutionStreamImpl>::~unique_ptr[abi:ne180100]((E5RT::ExecutionStreamImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190E61370(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10A0C40D87698B7);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::ExecutionStreamImpl(uint64_t this)
{
  unint64_t v1;

  *(_QWORD *)(this + 48) = 0;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)this = 0u;
  *(_DWORD *)(this + 56) = 1065353216;
  do
    v1 = __ldaxr(&E5RT::ExecutionStreamImpl::m_streamId_counter);
  while (__stlxr(v1 + 1, &E5RT::ExecutionStreamImpl::m_streamId_counter));
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = 0;
  *(_BYTE *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 5;
  *(_WORD *)(this + 100) = 0;
  return this;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_73@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::expand_dims_kernel_cpu,std::allocator<Espresso::expand_dims_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t *Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_input_symbol_indices_for_procedure(uint64_t a1, _QWORD *a2)
{
  return std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 120), a2, (uint64_t)a2)[7];
}

void Espresso::net_compiler_segment_based::build(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::runtime_error *exception;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  uint64_t v30;
  std::__shared_weak_count *v31;

  v30 = 0;
  v31 = 0;
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3), (v31 = v5) == 0) || (v6 = a1[1], (v30 = v6) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v5;
  v8 = *(_QWORD *)(v6 + 1256);
  if (v8 && *(_BYTE *)(v8 + 124))
  {
    v29[0] = v6;
    v29[1] = v5;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    Espresso::net_compiler_segment_based::identify_segments_two_compilers((uint64_t)a1, v29);
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v12 = a1[4];
    if (a1[5] != v12)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        (*(void (**)(_QWORD *, uint64_t, unint64_t, uint64_t))(*a1 + 72))(a1, a2, v14++, v12 + v13);
        v12 = a1[4];
        v13 += 120;
      }
      while (0xEEEEEEEEEEEEEEEFLL * ((a1[5] - v12) >> 3) > v14);
    }
  }
  else
  {
    v27 = v6;
    v28 = v5;
    v15 = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    (*(void (**)(_QWORD *, uint64_t *))(*a1 + 88))(a1, &v27);
    v17 = v28;
    if (v28)
    {
      v18 = (unint64_t *)&v28->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = a1[4];
    if (a1[5] != v20)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        (*(void (**)(_QWORD *, uint64_t, unint64_t, uint64_t))(*a1 + 72))(a1, a2, v22++, v20 + v21);
        v20 = a1[4];
        v21 += 120;
      }
      while (0xEEEEEEEEEEEEEEEFLL * ((a1[5] - v20) >> 3) > v22);
    }
  }
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_190E61678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::build_segment(Espresso::ANERuntimeEngine::compiler *a1, uint64_t a2, uint64_t a3, const Espresso::net_compiler_segment_based::segment_t *a4)
{
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  _BOOL4 is_network_multihead_multiprocedure;
  _BOOL4 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  Espresso *v25;
  const char *v26;
  uint64_t v27;
  std::string::size_type v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Espresso *v35;
  const char *v36;
  NSObject *v37;
  Espresso *v38;
  const char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  Espresso::ANERuntimeEngine::compiler *v57;
  uint64_t qos;
  uint64_t v59;
  Espresso::ANECompilerEngine *v60;
  Espresso *v61;
  char *v62;
  char *v63;
  const std::string *v64;
  std::string::size_type v65;
  int v66;
  std::string::const_reference v67;
  uint64_t v68;
  void *v69;
  Espresso *v70;
  NSError *v71;
  NSError *v72;
  void *v73;
  NSError *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  Espresso *v79;
  const char *v80;
  NSObject *v81;
  Espresso *v82;
  const char *v83;
  uint64_t v84;
  _BYTE *v85;
  NSObject *v86;
  void *v87;
  int v88;
  NSError *v89;
  Espresso *v90;
  const char *v91;
  NSObject *v92;
  _QWORD *v93;
  void *v94;
  NSError *v95;
  void *v96;
  NSString *v97;
  void *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  NSString *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  Espresso *v106;
  const char *v107;
  NSObject *v108;
  uint64_t v109;
  Espresso *v110;
  const char *v111;
  NSObject *v112;
  unint64_t *v113;
  unint64_t v114;
  Espresso *v115;
  const char *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  NSObject *v120;
  Espresso *v121;
  const char *v122;
  Espresso *v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  NSObject *v127;
  void *v128;
  size_t v129;
  _BYTE *v130;
  const void *v131;
  const std::string::value_type *v132;
  std::string::size_type v133;
  std::string *v134;
  __int128 v135;
  std::string *p_buf;
  void *v137;
  void *v138;
  Espresso *v139;
  const char *v140;
  NSObject *v141;
  std::string *v142;
  void *v143;
  id *v144;
  int v145;
  int v146;
  const char *v147;
  NSObject *v148;
  id v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t i;
  void *v158;
  void *v159;
  unsigned int v160;
  id v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t j;
  uint64_t v170;
  void *v171;
  unsigned int v172;
  NSDictionary *v173;
  NSDictionary *v174;
  void *v175;
  _QWORD *v176;
  void *v177;
  BOOL v178;
  Espresso *v179;
  const char *v180;
  void *v181;
  void *v182;
  void *v183;
  Espresso *v184;
  const char *v185;
  NSObject *v186;
  NSObject *v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  void *v191;
  id v192;
  void *v193;
  void *v194;
  void *v195;
  id v196;
  void *v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  std::string *v203;
  __int128 v204;
  std::string *v205;
  void *v206;
  std::string **v207;
  uint64_t **v208;
  void *v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  std::string *v216;
  __int128 v217;
  std::string *v218;
  void *v219;
  std::string **v220;
  uint64_t **v221;
  uint64_t *v222;
  Espresso *v223;
  const char *v224;
  NSObject *v225;
  void *v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  void *v232;
  std::string::size_type v233;
  id v234;
  std::string::size_type v235;
  std::string::size_type v236;
  uint64_t v237;
  id v238;
  std::string::size_type v239;
  void *v240;
  void *v241;
  id v242;
  std::string::size_type v243;
  std::runtime_error *exception;
  std::string *v245;
  void *v246;
  std::runtime_error *v247;
  std::string *v248;
  __int128 v249;
  std::runtime_error *v250;
  void *v251;
  std::runtime_error *v252;
  std::string *v253;
  __int128 v254;
  void *v255;
  std::runtime_error *v256;
  std::string *v257;
  __int128 v258;
  void *v259;
  std::runtime_error *v260;
  char *v261;
  std::string *v262;
  __int128 v263;
  std::string *v264;
  __int128 v265;
  const std::string::value_type *p_str;
  std::string::size_type v267;
  std::string *v268;
  __int128 v269;
  void *v270;
  NSObject *v271;
  Espresso *v272;
  id v273;
  void *v274;
  void *v275;
  id obj;
  Espresso::ANERuntimeEngine::compiler *v277;
  uint64_t v279;
  int v280;
  void *v281;
  void *v282;
  uint64_t v283;
  id v284;
  uint64_t v285;
  void *v286;
  id v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  id v292;
  id v293;
  Espresso *v294;
  id v295;
  id v296;
  Espresso *v297;
  void *v298;
  std::string __p;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  NSError *v310;
  id v311;
  id v312;
  id v313;
  id v314;
  id v315;
  char v316[4];
  int v317;
  uint64_t v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  void *v325[2];
  char v326;
  std::string __s;
  _BYTE v328[32];
  __int128 v329;
  __int128 v330;
  std::string *v331;
  std::string *v332;
  unint64_t v333;
  _BYTE v334[32];
  __int128 v335;
  __int128 v336;
  std::string *__str;
  std::string *v338;
  int64_t v339;
  _BYTE v340[128];
  uint64_t v341;
  void *v342;
  uint64_t v343;
  const __CFString *v344;
  uint64_t v345;
  const __CFString *v346;
  uint64_t v347;
  void *v348;
  _BYTE v349[32];
  __int128 v350;
  __int128 v351;
  std::string buf;
  uint64_t v353;
  uint64_t v354;

  v354 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 24))
  {
    v6 = objc_opt_new();
    v7 = (void *)*((_QWORD *)a1 + 24);
    *((_QWORD *)a1 + 24) = v6;

  }
  v324 = 0;
  v323 = 0;
  v277 = a1;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v8 || (v324 = std::__shared_weak_count::lock(v8)) == 0 || (v323 = *((_QWORD *)a1 + 1)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v316[0] = 1;
  v319 = 0u;
  v320 = 0u;
  v321 = 0u;
  v322 = 0;
  v318 = (int)a3;
  v317 = 723714912;
  kdebug_trace();
  is_network_multihead_multiprocedure = Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(&v323);
  if ((_DWORD)a3)
    v10 = 0;
  else
    v10 = is_network_multihead_multiprocedure;
  if (v10)
  {
    Espresso::run_pass_on_network<Espresso::pass_ane_multi_head>(v323);
    Espresso::net::get_analysis_if_existing<Espresso::analysis_ane_multi_head>(&buf, v323);
    v11 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 50);
    *(_OWORD *)((char *)v277 + 392) = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  v275 = (void *)objc_opt_new();
  v18 = v323;
  v19 = *(_QWORD *)(v323 + 712);
  if (!v19)
  {
    v20 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &off_1E2DBDC08;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 136) = 0u;
    *(_OWORD *)(v20 + 120) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *((_QWORD *)v20 + 12) = v20 + 104;
    *((_QWORD *)v20 + 17) = 0;
    *((_QWORD *)v20 + 16) = 0;
    *((_QWORD *)v20 + 15) = v20 + 128;
    *((_QWORD *)v20 + 21) = 0;
    *((_QWORD *)v20 + 20) = 0;
    *((_QWORD *)v20 + 19) = v20 + 160;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 24);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v18 + 712, (__int128 *)&buf);
    v21 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v19 = *(_QWORD *)(v323 + 712);
  }
  v24 = *(unsigned __int8 *)(*((_QWORD *)v277 + 13) + 139);
  std::string::basic_string[abi:ne180100]<0>(&buf, "ane_direct_path");
  *(_QWORD *)v349 = &buf;
  v25 = (Espresso *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v19 + 128), &buf, (_OWORD **)v349);
  *((_DWORD *)v25 + 14) = v24;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v27 = v323;
  if (*(_BYTE *)(v323 + 1280))
  {
    v28 = *(_QWORD *)(v323 + 1272);
    Espresso::espresso_os_log_subsystem(v25, v26);
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      v93 = (_QWORD *)(v323 + 592);
      if (*(char *)(v323 + 615) < 0)
        v93 = (_QWORD *)*v93;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v28;
      _os_log_debug_impl(&dword_190DAF000, v29, OS_LOG_TYPE_DEBUG, "IntermediateSharing use_ext_intermediate_buffer_handle 3/3 in %s handle=%llu", (uint8_t *)&buf, 0x16u);
    }

    v30 = *(_QWORD *)(v323 + 712);
    if (v30)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "kANEFIntermediateBufferHandleKey");
      *(_QWORD *)v349 = &buf;
      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v30 + 128), &buf, (_OWORD **)v349)+ 14) = v28;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v28);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v275, "setObject:forKeyedSubscript:", v31, *MEMORY[0x1E0CFDFF0]);

    v27 = v323;
  }
  if (*(_BYTE *)(v27 + 1282))
    objc_msgSend(v275, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CFE040]);
  v274 = (void *)objc_opt_new();
  v32 = *((_QWORD *)v277 + 13);
  if (*(_QWORD *)(v32 + 128))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v274, "setObject:forKeyedSubscript:", v33, CFSTR("compute_unit_mask"));

    v32 = *((_QWORD *)v277 + 13);
  }
  if (*(_BYTE *)(v32 + 121))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v274, "setObject:forKeyedSubscript:", v34, CFSTR("is_from_virtual_machine"));

  }
  v35 = (Espresso *)objc_msgSend(v275, "setObject:forKeyedSubscript:", v274, *MEMORY[0x1E0CFE0B8]);
  Espresso::espresso_os_log_subsystem(v35, v36);
  v37 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    v76 = *((_QWORD *)v277 + 13);
    v77 = *(_QWORD *)(v76 + 128);
    LODWORD(v76) = *(unsigned __int8 *)(v76 + 121);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v77;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v76;
    _os_log_debug_impl(&dword_190DAF000, v37, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] compute_unit_mask: %d; is_from_virtual_machine %d",
      (uint8_t *)&buf,
      0xEu);
  }

  LODWORD(buf.__r_.__value_.__l.__data_) = a3;
  v38 = (Espresso *)std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<std::shared_ptr<Espresso::net> const&,Espresso::net_compiler_segment_based::segment_t const&>>((uint64_t *)v277 + 28, a3, &buf, &v323, (uint64_t)a4);
  v297 = v38;
  v40 = *((_QWORD *)a4 + 1);
  v41 = v40 - *(_QWORD *)a4;
  if (v40 <= *(_QWORD *)a4)
  {
LABEL_47:
    Espresso::espresso_os_log_subsystem(v38, v39);
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_190DAF000, v44, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] skip model load", (uint8_t *)&buf, 2u);
    }
    goto LABEL_49;
  }
  v42 = v323;
  v43 = *(_QWORD *)(v323 + 32) + 16 * *(_QWORD *)a4;
  while (*(_BYTE *)(*(_QWORD *)v43 + 152))
  {
    v43 += 16;
    if (!--v41)
      goto LABEL_47;
  }
  v48 = *(_QWORD *)(v323 + 1240);
  if (v48)
  {
    v49 = *(_DWORD **)(v48 + 1048);
    if (v49)
    {
      v50 = *v49 & 1 | (2 * ((*v49 >> 2) & 1)) & 0xFFFFFFFB | (4 * ((*v49 >> 1) & 1));
      v347 = *MEMORY[0x1E0CFE0A0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v348 = v51;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v348, &v347, 1);
      v52 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v275, "addEntriesFromDictionary:", v52);
      v42 = v323;
    }
  }
  if (*(_QWORD *)(v42 + 1360))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v275, "setObject:forKeyedSubscript:", v53, CFSTR("kANEFMemoryPoolIDKey"));

  }
  if (Espresso::use_multiple_procedure_for_segments(&v323))
  {
    Espresso::ANERuntimeEngine::compiler::key_for_multi_procedure_segments((uint64_t)v277, (uint64_t)&v323);
    v44 = objc_claimAutoreleasedReturnValue();
    if ((int)a3 > 0)
      goto LABEL_49;
  }
  else
  {
    Espresso::ANERuntimeEngine::compiler::key_for_segment(v277, a3, a4);
    v44 = objc_claimAutoreleasedReturnValue();
  }
  v54 = (void *)*((_QWORD *)v277 + 22);
  v271 = v44;
  if (!v54)
  {
    v55 = objc_opt_new();
    v56 = (void *)*((_QWORD *)v277 + 22);
    *((_QWORD *)v277 + 22) = v55;

    v54 = (void *)*((_QWORD *)v277 + 22);
  }
  objc_msgSend(v54, "setObject:forKeyedSubscript:", &unk_1E2DEDC40, v44);
  v57 = v277;
  qos = Espresso::ANERuntimeEngine::compiler::get_qos((uint64_t)v277);
  if (!*((_BYTE *)v277 + 200))
  {
    if (!*((_QWORD *)v277 + 17))
    {
      if (*(_BYTE *)(*((_QWORD *)v277 + 13) + 139))
        objc_msgSend(MEMORY[0x1E0CFDF38], "sharedPrivateConnection");
      else
        objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
      v75 = objc_claimAutoreleasedReturnValue();
      v94 = (void *)*((_QWORD *)v277 + 17);
      *((_QWORD *)v277 + 17) = v75;

      v57 = v277;
    }
    v95 = (NSError *)*((id *)v57 + 20);
    v60 = (Espresso::ANECompilerEngine *)*((id *)v57 + 19);
    Espresso::ANECompilerEngine::current_ane_arch(v60);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSError path](v95, "path");
    v97 = (NSString *)objc_claimAutoreleasedReturnValue();
    get_precompiled_path_if_precompiled(a3, v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();

    if (v98)
      goto LABEL_111;
    v308 = v323;
    v309 = v324;
    if (v324)
    {
      v99 = (unint64_t *)&v324->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    get_original_url_if_exists(&v308, v95);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v101, "path");
    v102 = (NSString *)objc_claimAutoreleasedReturnValue();

    v103 = v309;
    if (v309)
    {
      v104 = (unint64_t *)&v309->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    get_precompiled_path_if_precompiled(a3, v102);
    v98 = (void *)objc_claimAutoreleasedReturnValue();

    if (v98)
    {
LABEL_111:
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v98);
      v89 = (NSError *)objc_claimAutoreleasedReturnValue();

      v106 = (Espresso *)objc_msgSend(v275, "setObject:forKeyedSubscript:", *MEMORY[0x1E0CFE068], *MEMORY[0x1E0CFE090]);
      Espresso::espresso_os_log_subsystem(v106, v107);
      v108 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v96;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v98;
        _os_log_debug_impl(&dword_190DAF000, v108, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] pre-compiled arch: %@ path: %@", (uint8_t *)&buf, 0x16u);
      }

      v109 = *(_QWORD *)(v323 + 712);
      std::string::basic_string[abi:ne180100]<0>(&buf, "ane_loaded_precompiled_model");
      *(_QWORD *)v349 = &buf;
      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v109 + 128), &buf, (_OWORD **)v349)+ 14) = 1;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);

    }
    else
    {
      v229 = *(_QWORD *)(v323 + 712);
      std::string::basic_string[abi:ne180100]<0>(&buf, "ane_assert_if_no_precompiled_model_found");
      v230 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v229 + 136), &buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (v230)
      {
        -[NSError path](v95, "path");
        buf.__r_.__value_.__r.__words[0] = objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("ane_assert_if_no_precompiled_model_found path=%s", &buf);
      }
      v89 = v95;
    }

    Espresso::espresso_os_log_subsystem(v110, v111);
    v112 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
    {
      -[NSError absoluteString](v89, "absoluteString");
      v234 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v235 = objc_msgSend(v234, "UTF8String");
      v236 = -[Espresso::ANECompilerEngine UTF8String](objc_retainAutorelease(v60), "UTF8String");
      v237 = -[NSObject UTF8String](objc_retainAutorelease(v271), "UTF8String");
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v235;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v236;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v353 = v237;
      _os_log_debug_impl(&dword_190DAF000, v112, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] url=%s bid=%s key=%s", (uint8_t *)&buf, 0x20u);

    }
    v306 = v323;
    v307 = v324;
    if (v324)
    {
      v113 = (unint64_t *)&v324->__shared_owners_;
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    get_original_url_if_exists(&v306, v89);
    v115 = (Espresso *)objc_claimAutoreleasedReturnValue();
    v294 = v115;
    v117 = v307;
    if (v307)
    {
      v118 = (unint64_t *)&v307->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    Espresso::espresso_os_log_subsystem(v115, v116);
    v120 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
    {
      -[Espresso absoluteString](v294, "absoluteString");
      v238 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v239 = objc_msgSend(v238, "UTF8String");
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v239;
      _os_log_debug_impl(&dword_190DAF000, v120, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Define ANE model url: %s", (uint8_t *)&buf, 0xCu);

    }
    objc_msgSend(MEMORY[0x1E0CFDF68], "modelAtURL:key:", v294, v271);
    v121 = (Espresso *)objc_claimAutoreleasedReturnValue();
    v123 = v121;
    v124 = v323;
    v125 = *(_QWORD *)(v323 + 1240);
    if (v125)
    {
      v126 = *(_BYTE **)(v125 + 1048);
      if (v126)
      {
        if ((*v126 & 2) != 0)
        {
          Espresso::espresso_os_log_subsystem(v121, v122);
          v127 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
          {
            -[NSError absoluteString](v89, "absoluteString");
            v242 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v243 = objc_msgSend(v242, "UTF8String");
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v243;
            _os_log_debug_impl(&dword_190DAF000, v127, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Purge ANE model url: %s", (uint8_t *)&buf, 0xCu);

          }
          objc_msgSend(*((id *)v277 + 17), "purgeCompiledModel:", v123);
          v343 = *MEMORY[0x1E0CFDFD0];
          v344 = CFSTR("compiler_analytics_on.plist");
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v344, &v343, 1);
          v128 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v275, "addEntriesFromDictionary:", v128);

          v124 = v323;
        }
      }
    }
    if (*(char *)(v124 + 1439) < 0)
    {
      if (!*(_QWORD *)(v124 + 1424))
      {
LABEL_167:
        v143 = (void *)*((_QWORD *)v277 + 17);
        if (*(_BYTE *)(*((_QWORD *)v277 + 13) + 139))
        {
          v305 = 0;
          v144 = (id *)&v305;
          v145 = objc_msgSend(v143, "loadRealTimeModel:options:qos:error:", v123, v275, qos, &v305);
        }
        else
        {
          v304 = 0;
          v144 = (id *)&v304;
          v145 = objc_msgSend(v143, "loadModel:options:qos:error:", v123, v275, qos, &v304);
        }
        v146 = v145;
        v70 = (Espresso *)*v144;
        Espresso::espresso_os_log_subsystem(v70, v147);
        v148 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
        {
          -[Espresso modelAttributes](v123, "modelAttributes");
          v240 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v146;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v240;
          _os_log_debug_impl(&dword_190DAF000, v148, OS_LOG_TYPE_DEBUG, "[ane_client loadModel] return=%d ane_model.modelAttributes=%@", (uint8_t *)&buf, 0x12u);

        }
        if ((v146 & 1) == 0)
        {
          get_error_string((NSError *)v70);
          v259 = (void *)objc_claimAutoreleasedReturnValue();
          v260 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          -[Espresso absoluteString](v294, "absoluteString");
          v261 = (char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
          std::string::basic_string[abi:ne180100]<0>(v328, v261);
          v262 = std::string::insert((std::string *)v328, 0, "ANECF error: failed to load ANE model ");
          v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
          *(_QWORD *)&v334[16] = *((_QWORD *)&v262->__r_.__value_.__l + 2);
          *(_OWORD *)v334 = v263;
          v262->__r_.__value_.__l.__size_ = 0;
          v262->__r_.__value_.__r.__words[2] = 0;
          v262->__r_.__value_.__r.__words[0] = 0;
          v264 = std::string::append((std::string *)v334, " Error=");
          v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
          *(_QWORD *)&v349[16] = *((_QWORD *)&v264->__r_.__value_.__l + 2);
          *(_OWORD *)v349 = v265;
          v264->__r_.__value_.__l.__size_ = 0;
          v264->__r_.__value_.__r.__words[2] = 0;
          v264->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(objc_retainAutorelease(v259), "UTF8String"));
          if (v339 >= 0)
            p_str = (const std::string::value_type *)&__str;
          else
            p_str = (const std::string::value_type *)__str;
          if (v339 >= 0)
            v267 = HIBYTE(v339);
          else
            v267 = (std::string::size_type)v338;
          v268 = std::string::append((std::string *)v349, p_str, v267);
          v269 = *(_OWORD *)&v268->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v268->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v269;
          v268->__r_.__value_.__l.__size_ = 0;
          v268->__r_.__value_.__r.__words[2] = 0;
          v268->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v260, &buf);
          __cxa_throw(v260, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v61 = v123;
        v272 = v61;
        goto LABEL_174;
      }
    }
    else if (!*(_BYTE *)(v124 + 1439))
    {
      goto LABEL_167;
    }
    if (*(char *)(v124 + 1439) >= 0)
      v129 = *(unsigned __int8 *)(v124 + 1439);
    else
      v129 = *(_QWORD *)(v124 + 1424);
    v130 = v349;
    std::string::basic_string[abi:ne180100]((uint64_t)v349, v129 + 1);
    if (v349[23] < 0)
      v130 = *(_BYTE **)v349;
    if (v129)
    {
      if (*(char *)(v124 + 1439) >= 0)
        v131 = (const void *)(v124 + 1416);
      else
        v131 = *(const void **)(v124 + 1416);
      memmove(v130, v131, v129);
    }
    *(_WORD *)&v130[v129] = 95;
    std::to_string((std::string *)v334, a3);
    if (v334[23] >= 0)
      v132 = v334;
    else
      v132 = *(const std::string::value_type **)v334;
    if (v334[23] >= 0)
      v133 = v334[23];
    else
      v133 = *(_QWORD *)&v334[8];
    v134 = std::string::append((std::string *)v349, v132, v133);
    v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v135;
    v134->__r_.__value_.__l.__size_ = 0;
    v134->__r_.__value_.__r.__words[2] = 0;
    v134->__r_.__value_.__r.__words[0] = 0;
    if ((v334[23] & 0x80000000) != 0)
      operator delete(*(void **)v334);
    if ((v349[23] & 0x80000000) != 0)
      operator delete(*(void **)v349);
    v341 = *MEMORY[0x1E0CFE020];
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_buf);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    v342 = v137;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v342, &v341, 1);
    v138 = (void *)objc_claimAutoreleasedReturnValue();

    v139 = (Espresso *)objc_msgSend(v275, "addEntriesFromDictionary:", v138);
    Espresso::espresso_os_log_subsystem(v139, v140);
    v141 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v141, OS_LOG_TYPE_INFO))
    {
      v142 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v142 = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)v349 = 136315138;
      *(_QWORD *)&v349[4] = v142;
      _os_log_impl(&dword_190DAF000, v141, OS_LOG_TYPE_INFO, "[Espresso::ANERuntimeEngine::build_segment] Current tracing name: %s", v349, 0xCu);
    }

    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_167;
  }
  v59 = *((_QWORD *)v277 + 16);
  v314 = 0;
  v315 = 0;
  v313 = 0;
  (*(void (**)(uint64_t, NSObject *, uint64_t, id *, id *, id *))(*(_QWORD *)v59 + 152))(v59, v44, 1, &v315, &v314, &v313);
  v60 = (Espresso::ANECompilerEngine *)v315;
  v294 = (Espresso *)v314;
  v61 = (Espresso *)v313;
  v62 = getenv("ESPRESSO_PRIVATE_ANE_DUMP_IN_MEMORY_IR");
  if (v62)
  {
    v63 = v62;
    v64 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&buf, v62);
    v65 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    v66 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v65 = buf.__r_.__value_.__l.__size_;
    if (!v65 || (v67 = std::string::at(v64, 0), v66 = SHIBYTE(buf.__r_.__value_.__r.__words[2]), *v67 != 47))
    {
      if (v66 >= 0)
        v245 = &buf;
      else
        v245 = (std::string *)buf.__r_.__value_.__r.__words[0];
      Espresso::throw_exception_selector<Espresso::io_error,char const*>("Invalid path = %s", (uint64_t)v245);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v68 = *((_QWORD *)v277 + 16);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v63);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, void *, Espresso::ANECompilerEngine *, Espresso *, Espresso *))(*(_QWORD *)v68 + 144))(v68, a3, v69, v60, v294, v61);

  }
  v312 = 0;
  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v60, 100, 0, &v312);
  v70 = (Espresso *)objc_claimAutoreleasedReturnValue();
  v71 = (NSError *)v312;
  v72 = v71;
  if (!v70)
  {
    get_error_string(v71);
    v246 = (void *)objc_claimAutoreleasedReturnValue();
    v247 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(v349, (char *)objc_msgSend(objc_retainAutorelease(v246), "UTF8String"));
    v248 = std::string::insert((std::string *)v349, 0, "Network plist conversion error: ");
    v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v248->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v249;
    v248->__r_.__value_.__l.__size_ = 0;
    v248->__r_.__value_.__r.__words[2] = 0;
    v248->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v247, &buf);
    __cxa_throw(v247, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v61)
  {
    v311 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v61, 100, 0, &v311);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v74 = (NSError *)v311;

    if (!v73)
    {
      get_error_string(v74);
      v255 = (void *)objc_claimAutoreleasedReturnValue();
      v256 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(v349, (char *)objc_msgSend(objc_retainAutorelease(v255), "UTF8String"));
      v257 = std::string::insert((std::string *)v349, 0, "Compiler options plist conversion error: ");
      v258 = *(_OWORD *)&v257->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v257->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v258;
      v257->__r_.__value_.__l.__size_ = 0;
      v257->__r_.__value_.__r.__words[2] = 0;
      v257->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v256, &buf);
      __cxa_throw(v256, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v72 = v74;
  }
  else
  {
    v73 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CFDF60], "modelWithNetworkDescription:weights:optionsPlist:", v70, v294, v73);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v78)
  {
    v250 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v250, "ANECF error: failed to create ANE in-memory model descriptor");
    __cxa_throw(v250, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(MEMORY[0x1E0CFDF58], "inMemoryModelWithDescriptor:", v78);
  v79 = (Espresso *)objc_claimAutoreleasedReturnValue();
  Espresso::espresso_os_log_subsystem(v79, v80);
  v81 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
  {
    -[Espresso hexStringIdentifier](v79, "hexStringIdentifier");
    v231 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v231;
    _os_log_debug_impl(&dword_190DAF000, v81, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Created ANE in-memory model identifier: %@", (uint8_t *)&buf, 0xCu);

  }
  v84 = *(_QWORD *)(v323 + 1240);
  if (v84)
  {
    v85 = *(_BYTE **)(v84 + 1048);
    if (v85)
    {
      if ((*v85 & 2) != 0)
      {
        Espresso::espresso_os_log_subsystem(v82, v83);
        v86 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
        {
          -[Espresso hexStringIdentifier](v79, "hexStringIdentifier");
          v241 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v241;
          _os_log_debug_impl(&dword_190DAF000, v86, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Purge ANE in-memory model identifier: %@", (uint8_t *)&buf, 0xCu);

        }
        -[Espresso purgeCompiledModel](v79, "purgeCompiledModel");
        v345 = *MEMORY[0x1E0CFDFD0];
        v346 = CFSTR("compiler_analytics_on.plist");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v346, &v345, 1);
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v275, "addEntriesFromDictionary:", v87);

      }
    }
  }
  v310 = v72;
  v88 = -[Espresso loadWithQoS:options:error:](v79, "loadWithQoS:options:error:", qos, v275, &v310);
  v89 = v310;

  Espresso::espresso_os_log_subsystem(v90, v91);
  v92 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
  {
    -[Espresso modelAttributes](v79, "modelAttributes");
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v88;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v232;
    _os_log_debug_impl(&dword_190DAF000, v92, OS_LOG_TYPE_DEBUG, "[ane_in_memory_model loadWithQoS] return=%d model_attributes=%@", (uint8_t *)&buf, 0x12u);

  }
  if ((v88 & 1) == 0)
  {
    get_error_string(v89);
    v251 = (void *)objc_claimAutoreleasedReturnValue();
    v252 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(v349, (char *)objc_msgSend(objc_retainAutorelease(v251), "UTF8String"));
    v253 = std::string::insert((std::string *)v349, 0, "ANECF error: failed to load ANE in-memory model. Error=");
    v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v253->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v254;
    v253->__r_.__value_.__l.__size_ = 0;
    v253->__r_.__value_.__r.__words[2] = 0;
    v253->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v252, &buf);
    __cxa_throw(v252, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v272 = v79;

LABEL_174:
  -[Espresso modelAttributes](v272, "modelAttributes");
  v273 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v273, "objectForKeyedSubscript:", CFSTR("NetworkStatusList"));
  v270 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v273, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE010]);
  v295 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v295, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE088]);
  v149 = (id)objc_claimAutoreleasedReturnValue();
  v150 = objc_msgSend(v149, "count");
  v291 = (void *)objc_opt_new();
  if (v150)
  {
    v151 = MEMORY[0x1E0C9AA70];
    v152 = v150;
    do
    {
      objc_msgSend(v291, "addObject:", v151);
      --v152;
    }
    while (v152);
  }
  v350 = 0u;
  v351 = 0u;
  memset(v349, 0, sizeof(v349));
  v153 = v149;
  v154 = objc_msgSend(v153, "countByEnumeratingWithState:objects:count:", v349, &buf, 16);
  if (v154)
  {
    v155 = **(_QWORD **)&v349[16];
    v156 = (_QWORD *)MEMORY[0x1E0CFE070];
    do
    {
      for (i = 0; i != v154; ++i)
      {
        if (**(_QWORD **)&v349[16] != v155)
          objc_enumerationMutation(v153);
        v158 = *(void **)(*(_QWORD *)&v349[8] + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          Espresso::throw_exception_selector<Espresso::generic_error>("element of ANEFModelProcedures was not a dictionary");
        objc_msgSend(v158, "objectForKeyedSubscript:", *v156);
        v159 = (void *)objc_claimAutoreleasedReturnValue();
        v160 = objc_msgSend(v159, "unsignedIntValue");

        if (v150 <= v160)
          Espresso::throw_exception_selector<Espresso::generic_error,unsigned long,unsigned long>(v160, v150);
        objc_msgSend(v291, "setObject:atIndexedSubscript:", v158);
      }
      v154 = objc_msgSend(v153, "countByEnumeratingWithState:objects:count:", v349, &buf, 16);
    }
    while (v154);
  }

  if (*((_QWORD *)v297 + 6) > 1uLL
    || (Espresso::use_multiple_procedure_for_segments(&v323) & 1) != 0
    || *(_QWORD *)(v323 + 792))
  {
    objc_msgSend(v273, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE010]);
    v161 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v161, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE078]);
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    v290 = (void *)objc_opt_new();
    v163 = objc_msgSend(v162, "count");
    v164 = v163;
    if (v163)
    {
      v165 = v163;
      do
      {
        objc_msgSend(v290, "addObject:", &stru_1E2DD80E0);
        --v165;
      }
      while (v165);
    }
    v350 = 0u;
    v351 = 0u;
    memset(v349, 0, sizeof(v349));
    v166 = v162;
    v167 = objc_msgSend(v166, "countByEnumeratingWithState:objects:count:", v349, &buf, 16);
    if (v167)
    {
      v168 = **(_QWORD **)&v349[16];
      do
      {
        for (j = 0; j != v167; ++j)
        {
          if (**(_QWORD **)&v349[16] != v168)
            objc_enumerationMutation(v166);
          v170 = *(_QWORD *)(*(_QWORD *)&v349[8] + 8 * j);
          objc_msgSend(v166, "objectForKeyedSubscript:", v170);
          v171 = (void *)objc_claimAutoreleasedReturnValue();
          v172 = objc_msgSend(v171, "unsignedIntValue");

          if (v164 <= v172)
            Espresso::throw_exception_selector<Espresso::generic_error,unsigned long,unsigned long>(v172, v164);
          objc_msgSend(v290, "setObject:atIndexedSubscript:", v170);
        }
        v167 = objc_msgSend(v166, "countByEnumeratingWithState:objects:count:", v349, &buf, 16);
      }
      while (v167);
    }

    v280 = 1;
  }
  else
  {
    v280 = 0;
    v290 = 0;
  }
  objc_msgSend(v273, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE010]);
  v173 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  all_blob_names_from_ANEF_model_description(v173, (NSString *)*MEMORY[0x1E0CFE030], (NSString *)*MEMORY[0x1E0CFE038]);
  v281 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v273, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE010]);
  v174 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  all_blob_names_from_ANEF_model_description(v174, (NSString *)*MEMORY[0x1E0CFE058], (NSString *)*MEMORY[0x1E0CFE060]);
  v282 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v273, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE010]);
  v175 = (void *)objc_claimAutoreleasedReturnValue();
  v176 = (_QWORD *)MEMORY[0x1E0CFE080];
  objc_msgSend(v175, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE080]);
  v177 = (void *)objc_claimAutoreleasedReturnValue();
  v178 = v177 == 0;

  if (!v178)
  {
    v181 = (void *)*((_QWORD *)v277 + 27);
    objc_msgSend(v273, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE010]);
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v182, "objectForKeyedSubscript:", *v176);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v181, "addEntriesFromDictionary:", v183);

    Espresso::espresso_os_log_subsystem(v184, v185);
    v186 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
    {
      v233 = *((_QWORD *)v277 + 27);
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v233;
      _os_log_debug_impl(&dword_190DAF000, v186, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] ANE model Analytics buffer sizes: %@", (uint8_t *)&buf, 0xCu);
    }

  }
  Espresso::espresso_os_log_subsystem(v179, v180);
  v187 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_190DAF000, v187, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Process network status list", (uint8_t *)&buf, 2u);
  }

  v302 = 0u;
  v303 = 0u;
  v300 = 0u;
  v301 = 0u;
  obj = v270;
  v188 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v300, v340, 16);
  if (v188)
  {
    LODWORD(v283) = 0;
    v189 = (uint64_t)v277 + 432;
    v279 = *(_QWORD *)v301;
    do
    {
      v285 = (int)v283;
      v283 = v188 + (int)v283;
      do
      {
        if (*(_QWORD *)v301 != v279)
          objc_enumerationMutation(obj);
        memset(&__p, 0, sizeof(__p));
        if (v280)
        {
          objc_msgSend(v290, "objectAtIndexedSubscript:", v285);
          v190 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(&buf, (char *)objc_msgSend(v190, "UTF8String"));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = buf;

        }
        else
        {
          Espresso::ANECompilerEngine::compiler::procedure_name_for_segment_and_configuration(&buf, a3, (uint64_t)v277 + 264);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = buf;
        }
        objc_msgSend(v291, "objectAtIndexedSubscript:", v285);
        v288 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v281, "objectAtIndexedSubscript:", v285);
        v286 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v282, "objectAtIndexedSubscript:", v285);
        v191 = (void *)objc_claimAutoreleasedReturnValue();
        v192 = v288;
        v287 = v286;
        v284 = v191;
        v289 = v192;
        objc_msgSend(v192, "objectForKeyedSubscript:", CFSTR("ANEFModelProcedureID"));
        v193 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v191) = objc_msgSend(v193, "intValue");

        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v277 + 60, &__p, (__int128 **)&buf)+ 14) = (_DWORD)v191;
        objc_msgSend(v289, "objectForKeyedSubscript:", CFSTR("ANEFModelInputSymbolIndexArray"));
        v298 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v289, "objectForKeyedSubscript:", CFSTR("ANEFModelOutputSymbolIndexArray"));
        v194 = (void *)objc_claimAutoreleasedReturnValue();
        if (v287)
          v195 = v287;
        else
          v195 = (void *)MEMORY[0x1E0C9AA60];
        v196 = v284;
        if (!v284)
          v196 = (id)MEMORY[0x1E0C9AA60];
        v292 = v196;
        v338 = 0;
        __str = 0;
        v339 = 0;
        v197 = (void *)objc_opt_new();
        v335 = 0u;
        v336 = 0u;
        memset(v334, 0, sizeof(v334));
        v296 = v195;
        v198 = objc_msgSend(v296, "countByEnumeratingWithState:objects:count:", v334, &buf, 16);
        if (v198)
        {
          v199 = 0;
          v200 = **(_QWORD **)&v334[16];
          do
          {
            v201 = 0;
            v202 = v199;
            do
            {
              if (**(_QWORD **)&v334[16] != v200)
                objc_enumerationMutation(v296);
              std::string::basic_string[abi:ne180100]<0>(v328, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*(_QWORD *)&v334[8] + 8 * v201)), "UTF8String"));
              Espresso::ANECompilerEngine::ane_name_translator::espresso_name((std::string *)v349, v189, (uint64_t)v328);
              if ((v328[23] & 0x80000000) != 0)
                operator delete(*(void **)v328);
              v203 = v338;
              if ((unint64_t)v338 >= v339)
              {
                v205 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__str, (uint64_t)v349);
              }
              else
              {
                if ((v349[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(v338, *(const std::string::value_type **)v349, *(std::string::size_type *)&v349[8]);
                }
                else
                {
                  v204 = *(_OWORD *)v349;
                  v338->__r_.__value_.__r.__words[2] = *(_QWORD *)&v349[16];
                  *(_OWORD *)&v203->__r_.__value_.__l.__data_ = v204;
                }
                v205 = v203 + 1;
              }
              v338 = v205;
              objc_msgSend(v298, "objectAtIndexedSubscript:", v202 + v201);
              v206 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v197, "addObject:", v206);

              if ((v349[23] & 0x80000000) != 0)
                operator delete(*(void **)v349);
              ++v201;
            }
            while (v198 != v201);
            v198 = objc_msgSend(v296, "countByEnumeratingWithState:objects:count:", v334, &buf, 16);
            v199 = v202 + v201;
          }
          while (v198);
        }

        *(_QWORD *)v349 = &__p;
        v207 = (std::string **)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v277 + 63, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v349)+ 7);
        if (v207 != &__str)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v207, __str, v338, 0xAAAAAAAAAAAAAAABLL * (((char *)v338 - (char *)__str) >> 3));
        v208 = std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v277 + 69, &__p, (uint64_t)&__p);
        objc_storeStrong((id *)v208 + 7, v197);
        v332 = 0;
        v331 = 0;
        v333 = 0;
        v209 = (void *)objc_opt_new();
        v329 = 0u;
        v330 = 0u;
        memset(v328, 0, sizeof(v328));
        v293 = v292;
        v210 = objc_msgSend(v293, "countByEnumeratingWithState:objects:count:", v328, v349, 16);
        if (v210)
        {
          v211 = 0;
          v212 = **(_QWORD **)&v328[16];
          do
          {
            v213 = 0;
            v214 = v211;
            do
            {
              if (**(_QWORD **)&v328[16] != v212)
                objc_enumerationMutation(v293);
              objc_msgSend(*(id *)(*(_QWORD *)&v328[8] + 8 * v213), "stringByReplacingOccurrencesOfString:withString:", CFSTR("@output"), &stru_1E2DD80E0);
              v215 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              std::string::basic_string[abi:ne180100]<0>(v325, (char *)objc_msgSend(v215, "UTF8String"));
              Espresso::ANECompilerEngine::ane_name_translator::espresso_name(&__s, v189, (uint64_t)v325);
              if (v326 < 0)
                operator delete(v325[0]);
              v216 = v332;
              if ((unint64_t)v332 >= v333)
              {
                v218 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v331, (uint64_t)&__s);
              }
              else
              {
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v332, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                }
                else
                {
                  v217 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                  v332->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v216->__r_.__value_.__l.__data_ = v217;
                }
                v218 = v216 + 1;
              }
              v332 = v218;
              objc_msgSend(v194, "objectAtIndexedSubscript:", v214 + v213);
              v219 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v209, "addObject:", v219);

              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);

              ++v213;
            }
            while (v210 != v213);
            v210 = objc_msgSend(v293, "countByEnumeratingWithState:objects:count:", v328, v349, 16);
            v211 = v214 + v213;
          }
          while (v210);
        }

        v325[0] = &__p;
        v220 = (std::string **)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v277 + 66, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v325)+ 7);
        if (v220 != &v331)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v220, v331, v332, 0xAAAAAAAAAAAAAAABLL * (((char *)v332 - (char *)v331) >> 3));
        v221 = std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v277 + 72, &__p, (uint64_t)&__p);
        v222 = v221[7];
        v221[7] = (uint64_t *)v209;

        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v331;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);

        v331 = (std::string *)&__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);

        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v285;
      }
      while (v285 != v283);
      v188 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v300, v340, 16);
    }
    while (v188);
  }

  Espresso::espresso_os_log_subsystem(v223, v224);
  v225 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_190DAF000, v225, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::built]", (uint8_t *)&buf, 2u);
  }

  *((_BYTE *)v277 + 144) = 1;
  v226 = (void *)*((_QWORD *)v277 + 23);
  if (!v226)
  {
    v227 = objc_opt_new();
    v228 = (void *)*((_QWORD *)v277 + 23);
    *((_QWORD *)v277 + 23) = v227;

    v226 = (void *)*((_QWORD *)v277 + 23);
  }
  objc_msgSend(v226, "setObject:forKeyedSubscript:", v275, v271);
  if (v272)
    objc_msgSend(*((id *)v277 + 24), "setObject:forKeyedSubscript:", v272, v271);

  v44 = v271;
LABEL_49:

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v316);
  v45 = v324;
  if (v324)
  {
    v46 = (unint64_t *)&v324->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_190E639F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;

  if (*(char *)(v72 - 217) < 0)
    operator delete(*(void **)(v72 - 240));
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x257]) < 0)
  {
    operator delete((void *)STACK[0x240]);

    if ((v68 & 1) == 0)
      goto LABEL_14;
  }
  else
  {

    if (!v68)
    {
LABEL_14:

      Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a64);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v66);
  goto LABEL_14;
}

void Espresso::ANECompilerEngine::ane_name_translator::espresso_name(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  uint64_t v10;

  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a2 + 8), (_QWORD *)a3))
  {
    v6 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a2, &v10, (_QWORD *)a3);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    if ((*(char *)(v6 + 79) & 0x80000000) == 0)
    {
      v7 = *(_OWORD *)(v6 + 56);
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v7;
      return;
    }
    v8 = *(const std::string::value_type **)(v6 + 56);
    v9 = *(_QWORD *)(v6 + 64);
    goto LABEL_10;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v8 = *(const std::string::value_type **)a3;
    v9 = *(_QWORD *)(a3 + 8);
LABEL_10:
    std::string::__init_copy_ctor_external(a1, v8, v9);
    return;
  }
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x50uLL);
    v24 = (std::string *)(v23 + 4);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    v23[9] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_190E6457C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x40uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[7] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_190E646BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t Espresso::use_multiple_procedure_for_segments(uint64_t *a1)
{
  uint64_t result;

  if (Espresso::use_multiple_procedure_for_segments(std::shared_ptr<Espresso::net> const&)::onceToken != -1)
    dispatch_once(&Espresso::use_multiple_procedure_for_segments(std::shared_ptr<Espresso::net> const&)::onceToken, &__block_literal_global_280);
  LODWORD(result) = Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(a1);
  if (Espresso::use_multiple_procedure_for_segments(std::shared_ptr<Espresso::net> const&)::ret)
    return 1;
  else
    return result;
}

BOOL Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  unsigned __int8 *v5;
  int v6;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v14;
  void *v15;
  std::__shared_weak_count *v16;
  char v17;
  void **v18;

  v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v15, "multi_head_prune");
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v2 + 480), &v15))
  {
    v7 = 1;
    goto LABEL_12;
  }
  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "multi_head_prune");
  v18 = __p;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v3 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  v5 = (unsigned __int8 *)v4 + 56;
  v6 = *((char *)v4 + 79);
  if ((v6 & 0x80000000) == 0)
  {
    if (v6 != 1)
      goto LABEL_9;
LABEL_8:
    v7 = *v5 != 49;
    goto LABEL_10;
  }
  if (*((_QWORD *)v4 + 8) == 1)
  {
    v5 = *(unsigned __int8 **)v5;
    goto LABEL_8;
  }
LABEL_9:
  v7 = 1;
LABEL_10:
  if (v14 < 0)
    operator delete(__p[0]);
LABEL_12:
  if (v17 < 0)
    operator delete(v15);
  Espresso::net::get_analysis_if_existing<Espresso::analysis_multi_head_program_gen>(&v15, *a1);
  v9 = v15;
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v9 && v7;
}

void sub_190E648F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_multi_head_program_gen>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a2 + 1120), (uint64_t)&v14);
  v4 = v3;
  if (v3)
  {
    v5 = (const void *)v3[3];
    v6 = (std::__shared_weak_count *)v4[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5
    {
      *a1 = v9;
      a1[1] = v6;
      if (!v6)
        return;
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (!v6)
        return;
    }
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_190E64A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

id all_blob_names_from_ANEF_model_description(NSDictionary *a1, NSString *a2, NSString *a3)
{
  NSString *v5;
  NSString *v6;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  NSDictionary *v28;
  void *v29;
  NSString *v30;
  id obj;
  unint64_t v32;
  NSString *v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v28 = a1;
  v5 = a2;
  v6 = a3;
  v33 = v5;
  v30 = v6;
  if (((NSString *)*MEMORY[0x1E0CFE030] != v5 || *MEMORY[0x1E0CFE038] != (_QWORD)v6)
    && ((NSString *)*MEMORY[0x1E0CFE058] != v5 || *MEMORY[0x1E0CFE060] != (_QWORD)v6))
  {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("bad arguments");
  }
  -[NSDictionary objectForKeyedSubscript:](v28, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE088]);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSDictionary objectForKeyedSubscript:](v28, "objectForKeyedSubscript:", v30);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = (id)objc_opt_new();
  v10 = objc_msgSend(v29, "count");
  v11 = v10;
  if (v10)
  {
    v12 = MEMORY[0x1E0C9AA60];
    v13 = v10;
    do
    {
      objc_msgSend(v34, "addObject:", v12);
      --v13;
    }
    while (v13);
  }
  v32 = v11;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = v29;
  v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v40 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
        objc_msgSend(v17, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE070]);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "unsignedIntValue");

        if (v32 <= v19)
          Espresso::throw_exception_selector<Espresso::generic_error,unsigned long,unsigned long>(v19, v32);
        objc_msgSend(v17, "objectForKeyedSubscript:", v33);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = (void *)objc_opt_new();
        objc_msgSend(v34, "setObject:atIndexedSubscript:", v21, v19);
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v22 = v20;
        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
        if (v23)
        {
          v24 = *(_QWORD *)v36;
          do
          {
            for (j = 0; j != v23; ++j)
            {
              if (*(_QWORD *)v36 != v24)
                objc_enumerationMutation(v22);
              objc_msgSend(v9, "objectAtIndexedSubscript:", objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * j), "unsignedIntValue"));
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "addObject:", v26);

            }
            v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
          }
          while (v23);
        }

      }
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
    }
    while (v14);
  }

  return v34;
}

void sub_190E64D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_190E65088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::vector<Espresso::ANERuntimeEngine::surface_and_buffer>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 40 * ((40 * v6 - 40) / 0x28) + 40);
      a1[1] = &v3[40 * ((40 * v6 - 40) / 0x28) + 40];
      return;
    }
    if (a2 > 0x666666666666666)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v9;
    if (v10 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 5 * v10;
    v12 = (char *)operator new(40 * v10);
    v13 = &v12[40 * v5];
    v14 = &v12[8 * v11];
    v15 = 40 * ((40 * v6 - 40) / 0x28) + 40;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v3 - 40);
        v3 -= 40;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v3 + 1) = 0;
        *(_OWORD *)(v13 - 40) = v17;
        v13 -= 40;
        v18 = *((_QWORD *)v3 + 2);
        v13[24] = v3[24];
        *((_QWORD *)v13 + 2) = v18;
        v19 = *((_QWORD *)v3 + 4);
        *((_QWORD *)v3 + 4) = 0;
        *((_QWORD *)v13 + 4) = v19;
      }
      while (v3 != v4);
      v20 = *a1;
      v3 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v3 != v20)
      {
        do
        {
          v3 -= 40;
          std::allocator<Espresso::ANERuntimeEngine::surface_and_buffer>::destroy[abi:ne180100]((id *)v3);
        }
        while (v3 != v20);
        v3 = v20;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v21 = &v4[40 * a2];
    while (v3 != v21)
    {
      v3 -= 40;
      std::allocator<Espresso::ANERuntimeEngine::surface_and_buffer>::destroy[abi:ne180100]((id *)v3);
    }
    a1[1] = v21;
  }
}

uint64_t Espresso::ANERuntimeEngine::compiler::get_qos(uint64_t this)
{
  int v1;

  if (*(_BYTE *)(this + 289))
  {
    v1 = *(_DWORD *)(this + 292);
    this = 33;
    switch(v1)
    {
      case 0:
        return objc_msgSend(MEMORY[0x1E0CFDF88], "aneRealTimeTaskQoS");
      case 1:
        return this;
      case 2:
        this = 25;
        break;
      case 3:
        this = 17;
        break;
      case 4:
        this = 9;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    if (*(_BYTE *)(*(_QWORD *)(this + 104) + 139))
    {
      return objc_msgSend(MEMORY[0x1E0CFDF88], "aneRealTimeTaskQoS");
    }
    else
    {
      proc_pidoriginatorinfo();
      LODWORD(this) = qos_class_self();
      if ((_DWORD)this)
        return this;
      else
        return 21;
    }
  }
  return this;
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[5];
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;

  v40 = a4;
  v23 = 1;
  v25 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v24 = 0;
  v26 = 0;
  v27 = 0x1000100010001;
  v28 = 0;
  v30 = 1;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  v35 = 0;
  v20 = xmmword_191A93300;
  memset(v19, 0, 32);
  v19[4] = 1;
  v29 = xmmword_191A93310;
  v31 = 0;
  v33 = 1;
  v21 = 0xFFFFFFFF00000000;
  v22 = _D0;
  v32 = 0;
  v36 = 0;
  v37 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_190E654D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso8hardware17supports_platformENS_8platformE_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CFDF48], "hasANE");
  Espresso::hardware::supports_platform(Espresso::platform)::has_ane = result;
  return result;
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<FunctionT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  void *exception;
  _QWORD v10[3];
  _BYTE v11[8];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  v13 = 257;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (v3 >= 0x7FFFFFFB)
    sub_19101237C();
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_8;
  if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
LABEL_8:
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v12, v10);
}

void sub_190E6564C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

BOOL Function::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  _BOOL8 result;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _BOOL4 v37;
  uint64_t v38;
  unsigned int *v39;
  char *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BOOL4 v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  _DWORD *v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned int *v60;
  int *v62;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v11 = *a1;
  v12 = *(_DWORD *)(a2 + 40) + 1;
  v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14)
    return 0;
  v15 = (unint64_t)&v3[-v11];
  if ((v15 & 1) != 0)
  {
    result = 0;
    if (v4 || v6 - 2 < v15)
      return result;
  }
  else if (v6 - 2 < v15)
  {
    return 0;
  }
  v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1)
    return 0;
  v8 = v6 >= v16;
  v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v15)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  v20 = *v19;
  if (v20 < 5)
    return 0;
  v21 = v19[2];
  if (!v19[2])
    return 0;
  result = 0;
  v22 = &v3[v21];
  v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v22 && v24)
  {
    v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1)
      return 0;
    v26 = (unint64_t)&v22[v25];
    v27 = v6 - 1;
    if (v6 - 1 < v26)
      return 0;
    result = 0;
    v28 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    v29 = (char *)v28 - v2;
    v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
    v31 = v30;
    if (v7 >= (unint64_t)v29 && v31)
    {
      v32 = *v28;
      if (v32 > 0xFFFFFFE)
        return 0;
      result = 0;
      if (v20 < 7)
        return result;
      v33 = (8 * v32) | 4;
      if (v6 <= v33 || v6 - v33 < (unint64_t)v29)
        return result;
      v62 = a1;
      v34 = v19[3];
      if (!v19[3])
        return 0;
      result = 0;
      v35 = &v3[v34];
      v37 = ((unint64_t)&v3[v34] & 3) == 0 || v4 == 0;
      if (v7 < (unint64_t)v35)
        return result;
      if (!v37)
        return result;
      result = 0;
      v38 = *(unsigned int *)&v35[v2];
      if ((int)v38 < 1 || v27 < (unint64_t)&v35[v38])
        return result;
      result = 0;
      v39 = (unsigned int *)((char *)v62 + v34 + *(unsigned int *)((char *)v62 + v34));
      v40 = (char *)v39 - v2;
      v41 = (((unint64_t)v39 - v2) & 3) == 0 || v4 == 0;
      v42 = v41;
      if (v7 < (unint64_t)v40 || !v42)
        return result;
      v43 = *v39;
      if (v43 > 0xFFFFFFE)
        return 0;
      result = 0;
      v44 = (8 * v43) | 4;
      v14 = v6 > v44;
      v45 = v6 - v44;
      if (!v14 || v45 < (unint64_t)v40)
        return result;
      if (v20 >= 9 && (v46 = v19[4]) != 0)
      {
        result = 0;
        v47 = (unint64_t)&v3[v46];
        v49 = (v47 & 3) == 0 || v4 == 0;
        if (v7 < v47)
          return result;
        if (!v49)
          return result;
        result = 0;
        v50 = *(unsigned int *)(v2 + v47);
        if ((int)v50 < 1 || v27 < v47 + v50)
          return result;
        v51 = (unsigned int *)((char *)v62 + v46 + *(unsigned int *)((char *)v62 + v46));
      }
      else
      {
        v51 = 0;
      }
      result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v51);
      if (result)
      {
        v52 = (unsigned __int16 *)((char *)v62 - *v62);
        if (*v52 >= 9u && (v53 = v52[4]) != 0)
          v54 = (int *)((char *)v62 + v53 + *(unsigned int *)((char *)v62 + v53));
        else
          v54 = 0;
        result = flatbuffers::Verifier::VerifyVectorOfTables<Block>(a2, v54);
        if (result)
        {
          result = flatbuffers::Table::VerifyOffset(v62, a2, 0xAu);
          if (result)
          {
            v55 = (unsigned __int16 *)((char *)v62 - *v62);
            if (*v55 >= 0xBu && (v56 = v55[5]) != 0)
              v57 = (unsigned int *)((char *)v62 + v56 + *(unsigned int *)((char *)v62 + v56));
            else
              v57 = 0;
            result = flatbuffers::Verifier::VerifyString((uint64_t *)a2, v57);
            if (result)
            {
              result = flatbuffers::Table::VerifyOffset(v62, a2, 0xCu);
              if (result)
              {
                v58 = (unsigned __int16 *)((char *)v62 - *v62);
                if (*v58 >= 0xDu && (v59 = v58[6]) != 0)
                  v60 = (unsigned int *)((char *)v62 + v59 + *(unsigned int *)((char *)v62 + v59));
                else
                  v60 = 0;
                result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v60);
                if (result)
                {
                  --*(_DWORD *)(a2 + 40);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyString(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (!a2)
    return 1;
  v2 = *a1;
  v3 = (unint64_t)a2 - *a1;
  if ((v3 & 3) != 0 && *((_BYTE *)a1 + 24))
    return 0;
  v4 = a1[1];
  if (v4 < 5 || v4 - 4 < v3)
    return 0;
  v6 = *a2;
  if (v6 > 0x7FFFFFFE)
    return 0;
  result = 0;
  v8 = v6 + 4;
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = v8 + v3;
    v11 = v4 - 1;
    if (v9 >= v3 && v11 >= v10)
      return *(_BYTE *)(v2 + v10) == 0;
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<Block>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = Block::Verify((int *)((char *)v5 + *v5), a1);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL Block::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  _BOOL8 result;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _BOOL4 v37;
  uint64_t v38;
  unsigned int *v39;
  char *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  _BOOL4 v48;
  uint64_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned int *v52;
  int *v54;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v11 = *a1;
  v12 = *(_DWORD *)(a2 + 40) + 1;
  v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20))
    return 0;
  v15 = (unint64_t)&v3[-v11];
  if ((v15 & 1) != 0)
  {
    result = 0;
    if (v4 || v6 - 2 < v15)
      return result;
  }
  else if (v6 - 2 < v15)
  {
    return 0;
  }
  v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1)
    return 0;
  v8 = v6 >= v16;
  v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v15)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  v20 = *v19;
  if (v20 < 5)
    return 0;
  v21 = v19[2];
  if (!v19[2])
    return 0;
  result = 0;
  v22 = &v3[v21];
  v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v22 && v24)
  {
    v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1)
      return 0;
    v26 = (unint64_t)&v22[v25];
    v27 = v6 - 1;
    if (v6 - 1 < v26)
      return 0;
    result = 0;
    v28 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    v29 = (char *)v28 - v2;
    v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
    v31 = v30;
    if (v7 >= (unint64_t)v29 && v31)
    {
      v32 = *v28;
      if (v32 > 0xFFFFFFE)
        return 0;
      result = 0;
      if (v20 < 7)
        return result;
      v33 = (8 * v32) | 4;
      if (v6 <= v33 || v6 - v33 < (unint64_t)v29)
        return result;
      v54 = a1;
      v34 = v19[3];
      if (!v19[3])
        return 0;
      result = 0;
      v35 = &v3[v34];
      v37 = ((unint64_t)&v3[v34] & 3) == 0 || v4 == 0;
      if (v7 < (unint64_t)v35)
        return result;
      if (!v37)
        return result;
      result = 0;
      v38 = *(unsigned int *)&v35[v2];
      if ((int)v38 < 1 || v27 < (unint64_t)&v35[v38])
        return result;
      result = 0;
      v39 = (unsigned int *)((char *)v54 + v34 + *(unsigned int *)((char *)v54 + v34));
      v40 = (char *)v39 - v2;
      v41 = (((unint64_t)v39 - v2) & 3) == 0 || v4 == 0;
      v42 = v41;
      if (v7 < (unint64_t)v40 || !v42)
        return result;
      v43 = *v39;
      if (v43 > 0xFFFFFFE)
        return 0;
      result = 0;
      if (v20 < 9)
        return result;
      v44 = (8 * v43) | 4;
      if (v6 <= v44 || v6 - v44 < (unint64_t)v40)
        return result;
      v45 = v19[4];
      if (!v19[4])
        return 0;
      result = 0;
      v46 = &v3[v45];
      v48 = ((unint64_t)&v3[v45] & 3) == 0 || v4 == 0;
      if (v7 >= (unint64_t)v46 && v48)
      {
        result = 0;
        v49 = *(unsigned int *)&v46[v2];
        if ((int)v49 >= 1 && v27 >= (unint64_t)&v46[v49])
        {
          result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, (unsigned int *)((char *)v54 + v45 + *(unsigned int *)((char *)v54 + v45)));
          if (result)
          {
            result = flatbuffers::Table::VerifyOffset(v54, a2, 0xAu);
            if (result)
            {
              v50 = (unsigned __int16 *)((char *)v54 - *v54);
              if (*v50 >= 0xBu && (v51 = v50[5]) != 0)
                v52 = (unsigned int *)((char *)v54 + v51 + *(unsigned int *)((char *)v54 + v51));
              else
                v52 = 0;
              result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v52);
              if (result)
              {
                --*(_DWORD *)(a2 + 40);
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL VerifySizePrefixedFunctionBuffer(unsigned int **a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = (unint64_t)a1[1];
  if (v1 >= 5
    && ((v2 = (uint64_t)*a1, v1 >= 0xC) ? (v3 = v1 - 4 == **a1) : (v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return Function::Verify((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

void UnPackSizePrefixedFunction(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int *v3;
  uint64_t v4;

  v3 = (int *)(a1 + 4 + *(unsigned int *)(a1 + 4));
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(v4 + 112) = 0;
  Function::UnPackTo(v3, v4, (__n128)0);
  *a2 = v4;
}

void sub_190E65F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  std::default_delete<FunctionT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

__n128 Function::UnPackTo(int *a1, uint64_t a2, __n128 result)
{
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unsigned int *v40;
  __n128 **v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  size_t v56;
  char *v57;
  __int128 *p_dst;
  uint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 *v76;
  uint64_t v77;
  __n128 v78;
  __n128 *v79;
  __n128 *v80;
  uint64_t v81;
  __n128 v82;
  __n128 *v83;
  __n128 *v84;
  uint64_t v85;
  __n128 v86;
  __int128 __dst;
  uint64_t v88;

  v5 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v5 >= 5u && (v6 = v5[2]) != 0)
  {
    v7 = *(unsigned int *)((char *)a1 + v6);
    v8 = *(unsigned int *)((char *)a1 + v6 + v7);
    v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
    if (v8 <= v9)
    {
      if (v8 < v9)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 8 * v8;
    }
    else
    {
      std::vector<unsigned long long>::__append(a2, v8 - v9);
      LODWORD(v8) = *(int *)((char *)a1 + v6 + v7);
    }
    if ((_DWORD)v8)
    {
      v10 = *(__n128 **)a2;
      v11 = v8;
      if (v8 < 0xA || (unint64_t)((char *)v10 - ((char *)a1 + v6) - v7 - 4) < 0x20)
      {
        v12 = 0;
LABEL_13:
        v13 = (uint64_t *)((char *)&a1[2 * v12 + 1] + v7 + v6);
        v14 = &v10->n128_u64[v12];
        v15 = v11 - v12;
        do
        {
          v16 = *v13++;
          *v14++ = v16;
          --v15;
        }
        while (v15);
        goto LABEL_15;
      }
      v12 = v8 & 0xFFFFFFFC;
      v75 = (__n128 *)((char *)a1 + v7 + v6 + 20);
      v76 = v10 + 1;
      v77 = v11 & 0xFFFFFFFC;
      do
      {
        result = v75[-1];
        v78 = *v75;
        v76[-1] = result;
        *v76 = v78;
        v75 += 2;
        v76 += 2;
        v77 -= 4;
      }
      while (v77);
      if (v12 != v11)
        goto LABEL_13;
    }
  }
  else if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  }
LABEL_15:
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 7u && (v18 = v17[3]) != 0)
  {
    v19 = *(unsigned int *)((char *)a1 + v18);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = *(unsigned int *)((char *)a1 + v18 + v19);
    v22 = (*(_QWORD *)(a2 + 32) - v20) >> 3;
    if (v21 <= v22)
    {
      if (v21 < v22)
        *(_QWORD *)(a2 + 32) = v20 + 8 * v21;
    }
    else
    {
      std::vector<unsigned long long>::__append(a2 + 24, v21 - v22);
      LODWORD(v21) = *(int *)((char *)a1 + v18 + v19);
    }
    if ((_DWORD)v21)
    {
      v24 = *(__n128 **)(a2 + 24);
      v25 = v21;
      if (v21 < 0xA || (unint64_t)((char *)v24 - ((char *)a1 + v18) - v19 - 4) < 0x20)
      {
        v26 = 0;
LABEL_27:
        v27 = (uint64_t *)((char *)&a1[2 * v26 + 1] + v19 + v18);
        v28 = &v24->n128_u64[v26];
        v29 = v25 - v26;
        do
        {
          v30 = *v27++;
          *v28++ = v30;
          --v29;
        }
        while (v29);
        goto LABEL_29;
      }
      v26 = v21 & 0xFFFFFFFC;
      v79 = (__n128 *)((char *)a1 + v19 + v18 + 20);
      v80 = v24 + 1;
      v81 = v25 & 0xFFFFFFFC;
      do
      {
        result = v79[-1];
        v82 = *v79;
        v80[-1] = result;
        *v80 = v82;
        v79 += 2;
        v80 += 2;
        v81 -= 4;
      }
      while (v81);
      if (v26 != v25)
        goto LABEL_27;
    }
  }
  else
  {
    v23 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(a2 + 32) != v23)
      *(_QWORD *)(a2 + 32) = v23;
  }
LABEL_29:
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 >= 9u && (v32 = v31[4]) != 0)
  {
    v33 = (int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32));
    v34 = *v33;
    v35 = *(_QWORD *)(a2 + 48);
    v36 = (_QWORD *)(a2 + 48);
    v37 = (*(_QWORD *)(a2 + 56) - v35) >> 3;
    if (v34 <= v37)
    {
      if (v34 < v37)
        std::vector<std::unique_ptr<BlockT>>::__base_destruct_at_end[abi:ne180100](a2 + 48, (_QWORD *)(v35 + 8 * v34));
    }
    else
    {
      std::vector<std::unique_ptr<BlockT>>::__append((_QWORD *)(a2 + 48), v34 - v37);
    }
    if (*v33)
    {
      v39 = 0;
      v40 = v33 + 1;
      do
      {
        v41 = *(__n128 ***)(*v36 + 8 * v39);
        v42 = *v40;
        v43 = (int *)((char *)v40 + v42);
        if (v41)
        {
          result.n128_u64[0] = Block::UnPackTo((int *)((char *)v40 + v42), v41).n128_u64[0];
        }
        else
        {
          v44 = operator new();
          *(_OWORD *)v44 = 0u;
          *(_OWORD *)(v44 + 16) = 0u;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          result = Block::UnPackTo(v43, (__n128 **)v44);
          v45 = *(_QWORD *)(*v36 + 8 * v39);
          *(_QWORD *)(*v36 + 8 * v39) = v44;
          if (v45)
          {
            v46 = *(void **)(v45 + 72);
            if (v46)
            {
              *(_QWORD *)(v45 + 80) = v46;
              operator delete(v46);
            }
            v47 = *(void **)(v45 + 48);
            if (v47)
            {
              *(_QWORD *)(v45 + 56) = v47;
              operator delete(v47);
            }
            v48 = *(void **)(v45 + 24);
            if (v48)
            {
              *(_QWORD *)(v45 + 32) = v48;
              operator delete(v48);
            }
            v49 = *(void **)v45;
            if (*(_QWORD *)v45)
            {
              *(_QWORD *)(v45 + 8) = v49;
              operator delete(v49);
            }
            MEMORY[0x19401CD90](v45, 0x10C40F9E379B3, result);
          }
        }
        ++v39;
        ++v40;
      }
      while (v39 < *v33);
    }
  }
  else
  {
    v38 = *(_QWORD **)(a2 + 48);
    if (*(_QWORD **)(a2 + 56) != v38)
      std::vector<std::unique_ptr<BlockT>>::__base_destruct_at_end[abi:ne180100](a2 + 48, v38);
  }
  v50 = *a1;
  v51 = -v50;
  v52 = (unsigned __int16 *)((char *)a1 - v50);
  if (*v52 >= 0xBu)
  {
    v53 = v52[5];
    if (v53)
    {
      v54 = (char *)a1 + v53;
      v55 = *(unsigned int *)((char *)a1 + v53);
      v57 = &v54[v55 + 4];
      v56 = *(unsigned int *)&v54[v55];
      if (v56 >= 0x17)
      {
        if ((v56 | 7) == 0x17)
          v67 = (v56 & 0xFFFFFFF8) + 8;
        else
          v67 = v56 | 7;
        p_dst = (__int128 *)operator new(v67 + 1);
        *((_QWORD *)&__dst + 1) = v56;
        v88 = v67 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v88) = *(_DWORD *)&v54[v55];
        p_dst = &__dst;
        if (!(_DWORD)v56)
        {
          *((_BYTE *)&__dst + v56) = 0;
          v59 = a2 + 72;
          if ((*(char *)(a2 + 95) & 0x80000000) == 0)
          {
LABEL_57:
            result.n128_u64[0] = __dst;
            *(_OWORD *)v59 = __dst;
            *(_QWORD *)(v59 + 16) = v88;
            v51 = -(uint64_t)*a1;
            goto LABEL_58;
          }
LABEL_69:
          operator delete(*(void **)v59);
          goto LABEL_57;
        }
      }
      memcpy(p_dst, v57, v56);
      *((_BYTE *)p_dst + v56) = 0;
      v59 = a2 + 72;
      if ((*(char *)(a2 + 95) & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_69;
    }
  }
LABEL_58:
  v60 = (unsigned __int16 *)((char *)a1 + v51);
  if (*v60 >= 0xDu && (v61 = v60[6]) != 0)
  {
    v62 = *(unsigned int *)((char *)a1 + v61);
    v63 = *(_QWORD *)(a2 + 96);
    v64 = *(unsigned int *)((char *)a1 + v61 + v62);
    v65 = (*(_QWORD *)(a2 + 104) - v63) >> 3;
    if (v64 <= v65)
    {
      if (v64 < v65)
        *(_QWORD *)(a2 + 104) = v63 + 8 * v64;
    }
    else
    {
      std::vector<unsigned long long>::__append(a2 + 96, v64 - v65);
      LODWORD(v64) = *(int *)((char *)a1 + v61 + v62);
    }
    if ((_DWORD)v64)
    {
      v68 = *(__n128 **)(a2 + 96);
      v69 = v64;
      if (v64 < 0xA || (unint64_t)((char *)v68 - ((char *)a1 + v61 + v62) - 4) < 0x20)
      {
        v70 = 0;
LABEL_76:
        v71 = (uint64_t *)((char *)&a1[2 * v70 + 1] + v62 + v61);
        v72 = &v68->n128_u64[v70];
        v73 = v69 - v70;
        do
        {
          v74 = *v71++;
          *v72++ = v74;
          --v73;
        }
        while (v73);
        return result;
      }
      v70 = v64 & 0xFFFFFFFC;
      v83 = (__n128 *)((char *)a1 + v62 + v61 + 20);
      v84 = v68 + 1;
      v85 = v69 & 0xFFFFFFFC;
      do
      {
        result = v83[-1];
        v86 = *v83;
        v84[-1] = result;
        *v84 = v86;
        v83 += 2;
        v84 += 2;
        v85 -= 4;
      }
      while (v85);
      if (v70 != v69)
        goto LABEL_76;
    }
  }
  else
  {
    v66 = *(_QWORD *)(a2 + 96);
    if (*(_QWORD *)(a2 + 104) != v66)
      *(_QWORD *)(a2 + 104) = v66;
  }
  return result;
}

void sub_190E66530(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(_QWORD *)(v1 + 80) = v3;
    operator delete(v3);
  }
  sub_191027164(v1);
  MEMORY[0x19401CD90](v1, 0x10C40F9E379B3);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<BlockT>>::__append(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  void *__p;
  int64x2_t v30;
  char *v31;
  _QWORD *v32;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    if ((v4 - v7) >> 2 > v10)
      v10 = (v4 - v7) >> 2;
    if ((unint64_t)(v4 - v7) >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v32 = a1 + 2;
    v28 = v8;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v9];
    v14 = &v12[8 * v11];
    v31 = v14;
    v15 = 8 * a2;
    bzero(v13, v15);
    v16 = &v13[v15];
    v30.i64[1] = (uint64_t)&v13[v15];
    v17 = (char *)(v5 - v7);
    if (v5 == v7)
    {
      v27 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      v18 = v17 - 8;
      if ((unint64_t)(v17 - 8) < 0x78
        || &v5[-((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v13
        && &v12[v28 - ((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_32;
      }
      v19 = ((unint64_t)v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v13 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v12[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v13 - 1) = v26;
          v13 -= 8;
        }
        while (v6 != v7);
      }
      v27 = *(int64x2_t *)a1;
      v4 = (char *)a1[2];
      v16 = (char *)v30.i64[1];
      v14 = v31;
    }
    *a1 = v13;
    a1[1] = v16;
    v30 = v27;
    a1[2] = v14;
    v31 = v4;
    __p = (void *)v27.i64[0];
    std::__split_buffer<std::unique_ptr<BlockT>>::__destruct_at_end[abi:ne180100]((uint64_t)&__p, v27.i64[0]);
    if (__p)
      operator delete(__p);
  }
}

__n128 Block::UnPackTo(int *a1, __n128 **a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  unint64_t v21;
  unint64_t v22;
  __n128 *v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  unint64_t v35;
  unint64_t v36;
  __n128 *v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 *v51;
  __n128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  __n128 *v59;
  __n128 *v60;
  uint64_t v61;
  __n128 v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  __n128 v66;
  __n128 *v67;
  __n128 *v68;
  uint64_t v69;
  __n128 v70;
  __n128 *v71;
  __n128 *v72;
  uint64_t v73;
  __n128 v74;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = *(unsigned int *)((char *)a1 + v5);
    v7 = *(unsigned int *)((char *)a1 + v5 + v6);
    v8 = ((char *)a2[1] - (char *)*a2) >> 3;
    if (v7 <= v8)
    {
      if (v7 < v8)
        a2[1] = (__n128 *)((char *)*a2 + 8 * v7);
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)a2, v7 - v8);
      LODWORD(v7) = *(int *)((char *)a1 + v5 + v6);
    }
    if ((_DWORD)v7)
    {
      v10 = *a2;
      v11 = v7;
      if (v7 < 0xA || (unint64_t)((char *)v10 - ((char *)a1 + v5) - v6 - 4) < 0x20)
      {
        v12 = 0;
LABEL_13:
        v13 = (uint64_t *)((char *)&a1[2 * v12 + 1] + v6 + v5);
        v14 = &v10->n128_u64[v12];
        v15 = v11 - v12;
        do
        {
          v16 = *v13++;
          *v14++ = v16;
          --v15;
        }
        while (v15);
        goto LABEL_15;
      }
      v12 = v7 & 0xFFFFFFFC;
      v59 = (__n128 *)((char *)a1 + v6 + v5 + 20);
      v60 = v10 + 1;
      v61 = v11 & 0xFFFFFFFC;
      do
      {
        result = v59[-1];
        v62 = *v59;
        v60[-1] = result;
        *v60 = v62;
        v59 += 2;
        v60 += 2;
        v61 -= 4;
      }
      while (v61);
      if (v12 != v11)
        goto LABEL_13;
    }
  }
  else if (a2[1] != *a2)
  {
    a2[1] = *a2;
  }
LABEL_15:
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 7u && (v18 = v17[3]) != 0)
  {
    v19 = *(unsigned int *)((char *)a1 + v18);
    v20 = a2[3];
    v21 = *(unsigned int *)((char *)a1 + v18 + v19);
    v22 = ((char *)a2[4] - (char *)v20) >> 3;
    if (v21 <= v22)
    {
      if (v21 < v22)
        a2[4] = (__n128 *)((char *)v20 + 8 * v21);
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 3), v21 - v22);
      LODWORD(v21) = *(int *)((char *)a1 + v18 + v19);
    }
    if ((_DWORD)v21)
    {
      v24 = a2[3];
      v25 = v21;
      if (v21 < 0xA || (unint64_t)((char *)v24 - ((char *)a1 + v18) - v19 - 4) < 0x20)
      {
        v26 = 0;
LABEL_27:
        v27 = (uint64_t *)((char *)&a1[2 * v26 + 1] + v19 + v18);
        v28 = &v24->n128_u64[v26];
        v29 = v25 - v26;
        do
        {
          v30 = *v27++;
          *v28++ = v30;
          --v29;
        }
        while (v29);
        goto LABEL_29;
      }
      v26 = v21 & 0xFFFFFFFC;
      v63 = (__n128 *)((char *)a1 + v19 + v18 + 20);
      v64 = v24 + 1;
      v65 = v25 & 0xFFFFFFFC;
      do
      {
        result = v63[-1];
        v66 = *v63;
        v64[-1] = result;
        *v64 = v66;
        v63 += 2;
        v64 += 2;
        v65 -= 4;
      }
      while (v65);
      if (v26 != v25)
        goto LABEL_27;
    }
  }
  else
  {
    v23 = a2[3];
    if (a2[4] != v23)
      a2[4] = v23;
  }
LABEL_29:
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 >= 9u && (v32 = v31[4]) != 0)
  {
    v33 = *(unsigned int *)((char *)a1 + v32);
    v34 = a2[6];
    v35 = *(unsigned int *)((char *)a1 + v32 + v33);
    v36 = ((char *)a2[7] - (char *)v34) >> 3;
    if (v35 <= v36)
    {
      if (v35 < v36)
        a2[7] = (__n128 *)((char *)v34 + 8 * v35);
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 6), v35 - v36);
      LODWORD(v35) = *(int *)((char *)a1 + v32 + v33);
    }
    if ((_DWORD)v35)
    {
      v38 = a2[6];
      v39 = v35;
      if (v35 < 0xA || (unint64_t)((char *)v38 - ((char *)a1 + v32) - v33 - 4) < 0x20)
      {
        v40 = 0;
LABEL_41:
        v41 = (uint64_t *)((char *)&a1[2 * v40 + 1] + v33 + v32);
        v42 = &v38->n128_u64[v40];
        v43 = v39 - v40;
        do
        {
          v44 = *v41++;
          *v42++ = v44;
          --v43;
        }
        while (v43);
        goto LABEL_43;
      }
      v40 = v35 & 0xFFFFFFFC;
      v67 = (__n128 *)((char *)a1 + v33 + v32 + 20);
      v68 = v38 + 1;
      v69 = v39 & 0xFFFFFFFC;
      do
      {
        result = v67[-1];
        v70 = *v67;
        v68[-1] = result;
        *v68 = v70;
        v67 += 2;
        v68 += 2;
        v69 -= 4;
      }
      while (v69);
      if (v40 != v39)
        goto LABEL_41;
    }
  }
  else
  {
    v37 = a2[6];
    if (a2[7] != v37)
      a2[7] = v37;
  }
LABEL_43:
  v45 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v45 >= 0xBu && (v46 = v45[5]) != 0)
  {
    v47 = *(unsigned int *)((char *)a1 + v46);
    v48 = a2[9];
    v49 = *(unsigned int *)((char *)a1 + v46 + v47);
    v50 = ((char *)a2[10] - (char *)v48) >> 3;
    if (v49 <= v50)
    {
      if (v49 < v50)
        a2[10] = (__n128 *)((char *)v48 + 8 * v49);
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 9), v49 - v50);
      LODWORD(v49) = *(int *)((char *)a1 + v46 + v47);
    }
    if ((_DWORD)v49)
    {
      v52 = a2[9];
      v53 = v49;
      if (v49 < 0xA || (unint64_t)((char *)v52 - ((char *)a1 + v46) - v47 - 4) < 0x20)
      {
        v54 = 0;
LABEL_55:
        v55 = (uint64_t *)((char *)&a1[2 * v54 + 1] + v47 + v46);
        v56 = &v52->n128_u64[v54];
        v57 = v53 - v54;
        do
        {
          v58 = *v55++;
          *v56++ = v58;
          --v57;
        }
        while (v57);
        return result;
      }
      v54 = v49 & 0xFFFFFFFC;
      v71 = (__n128 *)((char *)a1 + v47 + v46 + 20);
      v72 = v52 + 1;
      v73 = v53 & 0xFFFFFFFC;
      do
      {
        result = v71[-1];
        v74 = *v71;
        v72[-1] = result;
        *v72 = v74;
        v71 += 2;
        v72 += 2;
        v73 -= 4;
      }
      while (v73);
      if (v54 != v53)
        goto LABEL_55;
    }
  }
  else
  {
    v51 = a2[9];
    if (a2[10] != v51)
      a2[10] = v51;
  }
  return result;
}

void E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(E5RT::PrecompiledComputeOpCreateOptions *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, E5RT::ExecutionStreamOperationInternal **a5@<X8>)
{
  uint64_t ProgramFunction;
  __int128 *OperationName;
  char IntermediateBuffers;
  uint64_t OverrideComputeGPUDevice;
  uint64_t IOSurfaceMemoryPoolId;
  uint64_t DynamicCallables;
  uint64_t MutableMILWeightPaths;
  char ExperimentalDisableCompileTimeMPSGraphTypeInference;
  char ExperimentalEnableGPUQuantOps;
  uint64_t ExperimentalMPSGraphMaximumNumberOfEncodingThreads;
  uint64_t v16;
  E5RT::PrecompiledComputeOpCreateOptionsPriv *v17;
  E5RT::ExecutionStreamOperationInternal *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void **v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void *exception;
  char LazyPrepareOpForEncode;
  __int128 v34;
  void *__p[2];
  void *v36;
  _QWORD v37[3];
  char v38[8];
  __int128 v39;

  ProgramFunction = E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(a1);
  E5RT::ProgramFunctionPriv::GetE5Function(ProgramFunction, &v39);
  OperationName = (__int128 *)E5RT::PrecompiledComputeOpCreateOptions::GetOperationName(a1);
  IntermediateBuffers = E5RT::PrecompiledComputeOpCreateOptions::GetAllocateIntermediateBuffers(a1);
  LazyPrepareOpForEncode = E5RT::PrecompiledComputeOpCreateOptions::GetLazyPrepareOpForEncode(a1);
  OverrideComputeGPUDevice = E5RT::PrecompiledComputeOpCreateOptions::TryGetOverrideComputeGPUDevice(a1);
  IOSurfaceMemoryPoolId = E5RT::PrecompiledComputeOpCreateOptions::GetIOSurfaceMemoryPoolId(a1);
  DynamicCallables = E5RT::PrecompiledComputeOpCreateOptions::GetDynamicCallables(a1);
  MutableMILWeightPaths = E5RT::PrecompiledComputeOpCreateOptions::GetMutableMILWeightPaths(a1);
  ExperimentalDisableCompileTimeMPSGraphTypeInference = E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(a1);
  ExperimentalEnableGPUQuantOps = E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalEnableGPUQuantOps(a1);
  ExperimentalMPSGraphMaximumNumberOfEncodingThreads = E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalMPSGraphMaximumNumberOfEncodingThreads(a1);
  if ((IntermediateBuffers & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "CreatePreCompiledComputeOp");
    std::string::basic_string[abi:ne180100]<0>(v37, "External intermediate buffers mapping isn't supported yet.");
    E5RT::Status::Status(v38, 1, v37);
    E5RT::E5RTError::E5RTError(exception, __p, v38);
  }
  v16 = ExperimentalMPSGraphMaximumNumberOfEncodingThreads;
  E5RT::PrecompiledComputeOpCreateOptionsPriv::GetMachoToSharedResourceURI(v17, (uint64_t)__p);
  v18 = (E5RT::ExecutionStreamOperationInternal *)operator new();
  v34 = v39;
  v39 = 0uLL;
  E5RT::Ops::PreCompiledComputeOperation::PreCompiledComputeOperation(v18, OperationName, a2, a3, a4, &v34, OverrideComputeGPUDevice, IOSurfaceMemoryPoolId, DynamicCallables, MutableMILWeightPaths, (uint64_t)__p, 0, ExperimentalDisableCompileTimeMPSGraphTypeInference, ExperimentalEnableGPUQuantOps, 0, v16);
  *a5 = v18;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_6;
  v20 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_6:
    if ((LazyPrepareOpForEncode & 1) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if ((LazyPrepareOpForEncode & 1) == 0)
LABEL_7:
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)*a5 + 40))(*a5);
LABEL_8:
  v22 = (void **)v36;
  if (v36)
  {
    do
    {
      v27 = (void **)*v22;
      if (*((char *)v22 + 63) < 0)
      {
        operator delete(v22[5]);
        if (*((char *)v22 + 39) < 0)
LABEL_22:
          operator delete(v22[2]);
      }
      else if (*((char *)v22 + 39) < 0)
      {
        goto LABEL_22;
      }
      operator delete(v22);
      v22 = v27;
    }
    while (v27);
  }
  v23 = __p[0];
  __p[0] = 0;
  if (v23)
    operator delete(v23);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_190E66E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a16);
  *v17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v18 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66F1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_190E66FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 120));
  if (*(char *)(v31 - 121) < 0)
    operator delete(*(void **)(v31 - 144));
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v31 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::PrepareOpForEncode(E5RT::Ops::PreCompiledComputeOperation::Impl **this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  void (**v5)(_QWORD);
  _QWORD v7[5];
  void *__p[2];
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  v10 = 0x2B23820400000000;
  v11 = 0u;
  v12 = 0u;
  kdebug_trace();
  v9 = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = os_signpost_id_generate(v2);

  if (v9 < 0)
    operator delete(__p[0]);
  v9 = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_9;
  }
  if (os_signpost_enabled(v4))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "PreCompiledOpPrepareOpForEncode", (const char *)&unk_191C083FD, (uint8_t *)__p, 2u);
  }
LABEL_9:

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_190F41B9C;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v3;
  v5 = (void (**)(_QWORD))MEMORY[0x19401D648](v7);
  E5RT::Ops::PreCompiledComputeOperation::Impl::PrepareOpForEncode(this[37]);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  v5[2](v5);

  return kdebug_trace();
}

void sub_190E671E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::PrepareOpForEncode(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  _QWORD **v2;
  _QWORD **v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  std::exception_ptr v44;
  std::logic_error *exception;
  std::logic_error *v46;
  void *v47;
  std::__shared_weak_count *v48;
  void *v49;
  std::__shared_weak_count *v50;
  std::exception_ptr v51;
  std::exception_ptr block;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  void *v55;
  void **v56;
  char *v57;
  void *v58[2];
  void *__p[2];
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this))
    return;
  v2 = (_QWORD **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9));
  v3 = (_QWORD **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v2 + 16))(**v2);
  if (*v3 != v3[1] && *(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 56))(**v3) + 8))
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindEventsForOpsParallel(this);
    v4 = (char *)this + 48;
    if (*((_QWORD *)this + 7) - *((_QWORD *)this + 6) < 0x11uLL)
      goto LABEL_5;
LABEL_8:
    v58[0] = 0;
    v58[1] = v58;
    __p[0] = (void *)0x3812000000;
    __p[1] = sub_190F43A38;
    v60 = sub_190F43A48;
    v61 = 0;
    v8 = operator new();
    *(_QWORD *)v8 = 850045863;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    v62 = v8;
    block.__ptr_ = 0;
    std::exception_ptr::operator=((std::exception_ptr *)(*((_QWORD *)v58[1] + 6) + 64), &block);
    std::exception_ptr::~exception_ptr(&block);
    v9 = (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4;
    block.__ptr_ = (void *)MEMORY[0x1E0C809B0];
    v53 = 3221225472;
    v54 = sub_190F43AE8;
    v55 = &unk_1E2DCA8E8;
    v56 = v58;
    v57 = v4;
    dispatch_apply(v9, 0, &block);
    v10 = *((_QWORD *)v58[1] + 6);
    v51.__ptr_ = 0;
    v11 = *(_QWORD *)(v10 + 64);
    std::exception_ptr::~exception_ptr(&v51);
    if (!v11)
    {
      _Block_object_dispose(v58, 8);
      v12 = v62;
      v62 = 0;
      if (v12)
      {
        std::exception_ptr::~exception_ptr((std::exception_ptr *)(v12 + 64));
        std::mutex::~mutex((std::mutex *)v12);
        MEMORY[0x19401CD90]();
      }
      goto LABEL_11;
    }
    std::exception_ptr::exception_ptr(&v51, (const std::exception_ptr *)(*((_QWORD *)v58[1] + 6) + 64));
    v44.__ptr_ = &v51;
    std::rethrow_exception(v44);
    __break(1u);
LABEL_57:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  E5RT::Ops::PreCompiledComputeOperation::Impl::BindEventsForOps(this);
  v4 = (char *)this + 48;
  if (*((_QWORD *)this + 7) - *((_QWORD *)this + 6) >= 0x11uLL)
    goto LABEL_8;
LABEL_5:
  v5 = MEMORY[0x19401D4A4]();
  v6 = (_QWORD *)*((_QWORD *)this + 6);
  if (*((_QWORD **)this + 7) == v6)
    goto LABEL_57;
  v7 = (void *)v5;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
  objc_autoreleasePoolPop(v7);
LABEL_11:
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 13) = **((_QWORD **)this + 6);
  v14 = *(_QWORD *)(v13 - 16);
  *((_QWORD *)this + 14) = v14;
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(v14, v58);
  v15 = *(_OWORD *)v58;
  v58[0] = 0;
  v58[1] = 0;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *(_OWORD *)((char *)this + 88) = v15;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v58[1];
  if (v58[1])
  {
    v20 = (unint64_t *)((char *)v58[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  LOBYTE(v51.__ptr_) = 0;
  *(_OWORD *)v58 = 0u;
  *(_OWORD *)__p = 0u;
  LODWORD(v60) = 1065353216;
  block.__ptr_ = &v51;
  v53 = (uint64_t)v58;
  v22 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9));
  v23 = v22[1] - *v22;
  if (v23)
  {
    v24 = 0;
    v25 = 0xAAAAAAAAAAAAAAABLL * (v23 >> 3);
    do
    {
      if (v24 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22[1] - *v22) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v22 + 8, *v22 + 24 * v24);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v26[5] + 16))(&v49);
      sub_190F40764((uint64_t)&block, (uint64_t)(v26 + 2), &v49);
      v27 = v50;
      if (v50)
      {
        v28 = (unint64_t *)&v50->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v30 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 56))(*((_QWORD *)this + 9));
  v31 = v30[1] - *v30;
  if (v31)
  {
    v32 = 0;
    v33 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
    do
    {
      if (v32 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[1] - *v30) >> 3))
      {
        v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v46, "iterator out of range");
        v46->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v46, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v30 + 8, *v30 + 24 * v32);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v34[5] + 16))(&v47);
      sub_190F40764((uint64_t)&block, (uint64_t)(v34 + 2), &v47);
      v35 = v48;
      if (v48)
      {
        v36 = (unint64_t *)&v48->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      ++v32;
    }
    while (v32 != v33);
  }
  if (LOBYTE(v51.__ptr_))
    E5RT::Ops::PreCompiledComputeOperation::Impl::ReshapeOperationInternal((uint64_t)this, (uint64_t)v58);
  v38 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v39 = (void **)*v38;
        v40 = (std::__shared_weak_count *)v38[6];
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        if (*((char *)v38 + 39) < 0)
          break;
        operator delete(v38);
        v38 = v39;
        if (!v39)
          goto LABEL_51;
      }
      operator delete(v38[2]);
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
LABEL_51:
  v43 = v58[0];
  v58[0] = 0;
  if (v43)
    operator delete(v43);
}

void sub_190E67814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E67828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E6783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E67850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E67864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;

  __cxa_free_exception(v21);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_190E67898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E678AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E678C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_190E678DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E678F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E67904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_190E67920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t *v21;

  std::exception_ptr::~exception_ptr(&a14);
  _Block_object_dispose(&a21, 8);
  std::unique_ptr<std::pair<std::mutex,std::exception_ptr>>::~unique_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190E67D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E67DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOpName(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 192;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5BlockImpl::GetOperations(E5RT::E5BlockImpl *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<CastOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_190E67EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t *E5RT::Ops::CastOperation::CastOperation(uint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  void **v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v27[6];
  uint64_t v28;
  std::__shared_weak_count *v29;

  memset(v27, 0, 32);
  LODWORD(v27[4]) = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v27);
  v7 = (void **)v27[2];
  if (v27[2])
  {
    do
    {
      while (1)
      {
        v8 = (void **)*v7;
        v9 = (std::__shared_weak_count *)v7[6];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (*((char *)v7 + 39) < 0)
          break;
        operator delete(v7);
        v7 = v8;
        if (!v8)
          goto LABEL_11;
      }
      operator delete(v7[2]);
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
LABEL_11:
  v12 = v27[0];
  v27[0] = 0;
  if (v12)
    operator delete(v12);
  *a1 = (uint64_t)&off_1E2D5B358;
  v13 = a1 + 37;
  a1[37] = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  v27[0] = (void *)0x2B23808000000000;
  memset(&v27[1], 0, 32);
  kdebug_trace();
  a1[29] |= 3uLL;
  v14 = operator new();
  v15 = v14;
  v16 = (std::__shared_weak_count *)a3[1];
  v28 = *a3;
  v29 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  E5RT::Ops::CastOperation::Impl::Impl(v14, (uint64_t)a1, (uint64_t)&v28);
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *v13;
  *v13 = v15;
  if (v22)
  {
    v23 = *(std::__shared_weak_count **)(v22 + 16);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    MEMORY[0x19401CD90](v22, 0x60C40A44E5E0CLL);
  }
  if (E5RT::g_trace_analysis_level >= LODWORD(v27[0]))
    kdebug_trace();
  return a1;
}

void sub_190E68190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  E5RT::ExecutionStreamOperationInternal *v15;
  uint64_t *v16;
  uint64_t v17;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x19401CD90](v17, 0x60C40A44E5E0CLL);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a9);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::CastOperation::Impl>>::~propagate_const(v16);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v15);
  _Unwind_Resume(a1);
}

void sub_190E681DC(_Unwind_Exception *a1)
{
  E5RT::ExecutionStreamOperationInternal *v1;
  uint64_t *v2;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::CastOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

void sub_190E68200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((_QWORD *)this + 35);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t E5RT::Ops::CastOperation::PrepareOpForEncode(E5RT::ExecutionStreamOperationInternal ***this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::GetOpState(*this[37]);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190E682B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOpState(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((_BYTE *)this + 248) & 7;
}

uint64_t E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode(uint64_t this)
{
  void *exception;
  _QWORD v2[3];
  _BYTE v3[8];
  _QWORD v4[3];

  if (!*(_DWORD *)(this + 232))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v4, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(v2, "op supported buffer type is empty.");
    E5RT::Status::Status(v3, 1, v2);
    E5RT::E5RTError::E5RTError(exception, v4, v3);
  }
  *(_BYTE *)(this + 248) = *(_BYTE *)(this + 248) & 0xF8 | 1;
  return this;
}

void sub_190E68384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 184);
  *a2 = *(_QWORD *)(this + 176);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::TryGetOverrideComputeGPUDevice(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 72);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetAllocateIntermediateBuffers(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 64);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetLazyPrepareOpForEncode(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 65);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetIOSurfaceMemoryPoolId(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 80);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetDynamicCallables(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *((_QWORD *)this + 1) + 88;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetOperationName(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *((_QWORD *)this + 1) + 16;
}

uint64_t E5RT::IsAVirtualMachine(E5RT *this)
{
  if (qword_1EE2148A0 != -1)
    dispatch_once(&qword_1EE2148A0, &unk_1E2DCDB70);
  return byte_1EE214888;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_190E685A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_190E6872C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<CpuInferenceOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_190E6887C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::Ops::BnnsCpuInferenceOperation::Impl **E5RT::Ops::BnnsCpuInferenceOperation::BnnsCpuInferenceOperation(E5RT::Ops::BnnsCpuInferenceOperation::Impl **a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  void **v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  E5RT::Ops::BnnsCpuInferenceOperation::Impl **v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  E5RT::Ops::BnnsCpuInferenceOperation::Impl *v20;
  void *v22[6];
  __int128 v23;

  memset(v22, 0, 32);
  LODWORD(v22[4]) = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v22);
  v9 = (void **)v22[2];
  if (v22[2])
  {
    do
    {
      while (1)
      {
        v10 = (void **)*v9;
        v11 = (std::__shared_weak_count *)v9[6];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (*((char *)v9 + 39) < 0)
          break;
        operator delete(v9);
        v9 = v10;
        if (!v10)
          goto LABEL_11;
      }
      operator delete(v9[2]);
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
LABEL_11:
  v14 = v22[0];
  v22[0] = 0;
  if (v14)
    operator delete(v14);
  *a1 = (E5RT::Ops::BnnsCpuInferenceOperation::Impl *)&off_1E2D5BB90;
  v15 = a1 + 37;
  a1[37] = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  v22[0] = (void *)0x2B2382C000000000;
  memset(&v22[1], 0, 32);
  kdebug_trace();
  v16 = operator new();
  v23 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  E5RT::Ops::BnnsCpuInferenceOperation::Impl::Impl(v16, (uint64_t)a1, (uint64_t)&v23, a6);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *v15;
  *v15 = (E5RT::Ops::BnnsCpuInferenceOperation::Impl *)v16;
  if (v20)
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(v20);
    MEMORY[0x19401CD90]();
  }
  a1[29] = (E5RT::Ops::BnnsCpuInferenceOperation::Impl *)((unint64_t)a1[29] | 3);
  if (E5RT::g_trace_analysis_level >= LODWORD(v22[0]))
    kdebug_trace();
  return a1;
}

void sub_190E68B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  E5RT::ExecutionStreamOperationInternal *v15;
  E5RT::Ops::BnnsCpuInferenceOperation::Impl **v16;
  uint64_t v17;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x19401CD90](v17, 0x10F0C40D750D88CLL);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a9);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BnnsCpuInferenceOperation::Impl>>::~propagate_const(v16);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v15);
  _Unwind_Resume(a1);
}

void sub_190E68B58(_Unwind_Exception *a1)
{
  E5RT::ExecutionStreamOperationInternal *v1;
  E5RT::Ops::BnnsCpuInferenceOperation::Impl **v2;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BnnsCpuInferenceOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

void sub_190E68B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t InputPorts;
  uint64_t OutputPorts;
  uint64_t i;
  uint64_t j;
  void *exception;
  void *v14;
  void *v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD v20[3];
  _BYTE v21[8];
  __int128 *v22[3];

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  v6 = a1 + 8;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v7 = a1 + 264;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (*(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v20, "InOut ports are not supported by BNNS yet.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (!*(_QWORD *)(OutputPorts + 24))
  {
    v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v20, "No outputs specified.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(v14, v22, v21);
  }
  if (!*(_QWORD *)v6)
  {
    v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v20, "Op params not specified.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(v15, v22, v21);
  }
  for (i = InputPorts + 16; ; sub_190F1A8E8(*(E5RT::IOPortImpl ***)(i + 40)))
  {
    i = *(_QWORD *)i;
    if (!i)
      break;
  }
  for (j = OutputPorts + 16; ; sub_190F1A8E8(*(E5RT::IOPortImpl ***)(j + 40)))
  {
    j = *(_QWORD *)j;
    if (!j)
      break;
  }
  if (a4[3])
  {
    v16 = *(__int128 **)(*(_QWORD *)v6 + 48);
    v17 = *(__int128 **)(*(_QWORD *)v6 + 56);
    while (v16 != v17)
    {
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a4, (uint64_t)v16);
      if (v18)
      {
        v22[0] = v16;
        v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (uint64_t)v16, (uint64_t)&std::piecewise_construct, v22);
        std::string::operator=((std::string *)(v19 + 5), (const std::string *)(v18 + 5));
      }
      v16 = (__int128 *)((char *)v16 + 24);
    }
  }
  return a1;
}

void sub_190E68E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v23 + 304);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v26);
  v29 = *(void **)(v23 + 240);
  if (v29)
  {
    *(_QWORD *)(v23 + 248) = v29;
    operator delete(v29);
    v30 = *(void **)(v23 + 216);
    if (!v30)
    {
LABEL_3:
      v31 = *(void **)(v23 + 192);
      if (!v31)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v30 = *(void **)(v23 + 216);
    if (!v30)
      goto LABEL_3;
  }
  *(_QWORD *)(v23 + 224) = v30;
  operator delete(v30);
  v31 = *(void **)(v23 + 192);
  if (!v31)
  {
LABEL_4:
    v32 = *(void **)(v23 + 168);
    if (!v32)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)(v23 + 200) = v31;
  operator delete(v31);
  v32 = *(void **)(v23 + 168);
  if (!v32)
  {
LABEL_5:
    std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](v25);
    v33 = *(void **)(v23 + 120);
    if (!v33)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v23 + 176) = v32;
  operator delete(v32);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](v25);
  v33 = *(void **)(v23 + 120);
  if (!v33)
  {
LABEL_6:
    v34 = *v27;
    if (!*v27)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  *(_QWORD *)(v23 + 128) = v33;
  operator delete(v33);
  v34 = *v27;
  if (!*v27)
  {
LABEL_8:
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v23 + 56));
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(_QWORD *)(v23 + 104) = v34;
  operator delete(v34);
  goto LABEL_8;
}

void Espresso::BNNSEngine::elementwise_kernel::~elementwise_kernel(Espresso::BNNSEngine::elementwise_kernel *this)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  __int128 v8;

  *(_QWORD *)this = &off_1E2D5DC08;
  v2 = (void **)*((_QWORD *)this + 44);
  v3 = (void **)*((_QWORD *)this + 45);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        BNNSFilterDestroy(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (void **)*((_QWORD *)this + 44);
  }
  *((_QWORD *)this + 45) = v2;
  v8 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 336, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (void *)*((_QWORD *)this + 44);
  if (v7)
  {
    *((_QWORD *)this + 45) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  Espresso::base_kernel::~base_kernel(this);
}

{
  Espresso::BNNSEngine::elementwise_kernel::~elementwise_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t espresso_network_query_blob_dimensions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;

  v8 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v9 = (*(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, a2, a3, a4);
  }
  else
  {
    v9 = 4294967290;
  }
  objc_autoreleasePoolPop(v8);
  return v9;
}

uint64_t EspressoLight::espresso_plan::query_blob_dimensions(EspressoLight::espresso_plan *this, int a2, char *a3, unint64_t *a4)
{
  uint64_t v4;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  std::runtime_error *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string __p;
  __int128 v27;

  v4 = *(_QWORD *)(*((_QWORD *)this + 133) + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 133) + 32) - v4) >> 4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_OWORD *)(v4 + 16 * a2);
  v27 = v6;
  if (*((_QWORD *)&v6 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = v6;
  if (!(_QWORD)v6)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Null network found.");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&__p, *((_QWORD **)this + 133), a2, 0, a3);
  Espresso::net::get_blob_or_global_with_prefix(v9, &__p, &v24);
  v10 = v24;
  if (v24)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)&v13 = (int)v12;
    *((_QWORD *)&v13 + 1) = SHIDWORD(v12);
    *(_OWORD *)a4 = v13;
    v14 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)&v13 = (int)v14;
    *((_QWORD *)&v13 + 1) = SHIDWORD(v14);
    *((_OWORD *)a4 + 1) = v13;
  }
  else
  {
    v11 = 4294967290;
  }
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_190E69338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 32);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::output_raw_ptr(EspressoLight::espresso_plan *this, uint64_t a2, char *a3)
{
  uint64_t v5;
  int v6;
  std::string *p_p;
  std::string __p;

  v5 = *((_QWORD *)this + 133);
  v6 = *(_DWORD *)(v5 + 160);
  if (v6 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v6);
  EspressoLight::espresso_plan::default_blob_name_if_null(&__p, (_QWORD *)v5, a2, (const char *)1, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(EspressoLight::espresso_plan *, uint64_t, std::string *))(*(_QWORD *)this + 96))(this, a2, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_190E69420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_plan::input_raw_ptr(EspressoLight::espresso_plan *this@<X0>, char *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *exception;
  std::runtime_error *v21;
  std::runtime_error *v22;
  char v23[40];
  void *__p;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  std::string v29;

  v6 = *((_QWORD *)this + 133);
  v7 = *(_DWORD *)(v6 + 160);
  if (v7 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
  EspressoLight::espresso_plan::default_blob_name_if_null(&v29, (_QWORD *)v6, a3, 0, a2);
  v9 = *(_QWORD *)(*((_QWORD *)this + 133) + 24);
  if (a3 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 133) + 32) - v9) >> 4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *(_OWORD *)(v9 + 16 * a3);
  v28 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (!(_QWORD)v10)
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Null network found.");
    __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Espresso::net::get_blob_or_global_with_prefix(v10, &v29, &v26);
  v13 = v26;
  if (!v26)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Blob not found.");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  Espresso::abstract_blob_container::shape(v23, v13);
  setup_espresso_buffer_with_shape(a4, (uint64_t)v23);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  *(_QWORD *)a4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
  *(_DWORD *)(a4 + 160) = 65568;
  v14 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_190E69670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  void *v19;
  uint64_t v20;

  __cxa_free_exception(v19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (*(char *)(v20 - 33) < 0)
    operator delete(*(void **)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::blob_container::unsafe_opaque_raw_pointer(id **this)
{
  if ((unint64_t)objc_msgSend(*this[27], "nFrames") >= 2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("unsafe_opaque_raw_pointer not supported with double buffer submit");
  return objc_msgSend(*this[27], "ioSurfaceForMultiBufferFrame:", 0);
}

void EspressoLight::espresso_plan::__copy_inputs(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (***v16)(_QWORD);
  unsigned int v17;
  BOOL v18;
  _BOOL4 v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t v23;
  _BOOL4 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *i;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t **v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t **v58;
  std::string::size_type v59;
  uint64_t **v60;
  char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t *v68;
  const char ***v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  uint64_t *v75;
  _QWORD *v76;
  unint64_t *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::runtime_error *exception;
  std::runtime_error *v90;
  uint64_t **v91;
  __int128 v92;
  std::string v93;
  std::string v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  int v102;
  __int128 *v103;

  v102 = a3;
  v8 = *(const void **)a2;
  if (*(_QWORD *)a2
  {
    v10 = *(std::__shared_weak_count **)(a2 + 8);
    v100 = (uint64_t)v9;
    v101 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v8 = *(const void **)a2;
    }
  }
  else
  {
    v100 = 0;
    v101 = 0;
  }
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v99 = v8;
  *((_QWORD *)&v99 + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a4 + 16) + 8);
  v17 = (**v16)(v16);
  v18 = v17 == 10008 || v17 == 10011;
  v19 = v18 || v17 >> 1 == 5003;
  v20 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 64), a3, &v102);
  v21 = v20[5];
  v22 = v20 + 6;
  if (v21 == (uint64_t *)(v20 + 6))
    goto LABEL_112;
  v91 = v20 + 6;
  do
  {
    Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v21 + 4), &v97);
    v23 = v100;
    if (v100)
      v24 = v19;
    else
      v24 = 0;
    if (v24)
    {
      v25 = *(std::__shared_weak_count **)(v97 + 80);
      v95 = *(_QWORD *)(v97 + 72);
      v96 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      Espresso::switch_engine_batch::switch_to_engine(v23, (uint64_t)&v95, 0, &v94);
      v28 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = 0uLL;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      v99 = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      size = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
      if (v94.__r_.__value_.__l.__size_)
      {
        v33 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v35 = v96;
      if (v96)
      {
        v36 = (unint64_t *)&v96->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    v38 = v102;
    v39 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 112), v102, &v102)[6];
    if (!v39)
    {
LABEL_46:
      v40 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 136), v38, &v102);
      v41 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v40[6], v21 + 4);
      v42 = *a1;
      if (!v41)
      {
        v58 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v42 + 184), v38, &v102);
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v58[6], v21 + 4))
        {
          Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v21 + 4), &v94);
          v59 = v94.__r_.__value_.__r.__words[0];
          v60 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 184), v102, &v102);
          *(_QWORD *)&v92 = v21 + 4;
          v61 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60 + 5, v21 + 4, (__int128 **)&v92);
          (*(void (**)(std::string::size_type, __int128 *, _QWORD))(*(_QWORD *)v59 + 120))(v59, &v99, *((_QWORD *)v61 + 7));
          v62 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
          if (!v94.__r_.__value_.__l.__size_)
            goto LABEL_101;
          v63 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
        }
        else
        {
          if (!*((_BYTE *)v21 + 56))
            goto LABEL_101;
          v71 = *(_QWORD *)(*a1 + 24);
          if (!v71)
            goto LABEL_92;
          v72 = *a1 + 24;
          do
          {
            v73 = *(_DWORD *)(v71 + 32);
            v74 = v73 < v38;
            if (v73 >= v38)
              v75 = (uint64_t *)v71;
            else
              v75 = (uint64_t *)(v71 + 8);
            if (!v74)
              v72 = v71;
            v71 = *v75;
          }
          while (*v75);
          if (v72 == *a1 + 24 || v38 < *(_DWORD *)(v72 + 32))
LABEL_92:
            v72 = *a1 + 24;
          v76 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v72 + 40, v21 + 4);
          Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v21 + 4), &v94);
          (*(void (**)(std::string::size_type, __int128 *, _QWORD *))(*(_QWORD *)v94.__r_.__value_.__l.__data_
                                                                               + 48))(v94.__r_.__value_.__r.__words[0], &v99, v76 + 7);
          v62 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
          if (!v94.__r_.__value_.__l.__size_)
            goto LABEL_101;
          v77 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
          do
            v64 = __ldaxr(v77);
          while (__stlxr(v64 - 1, v77));
        }
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        goto LABEL_101;
      }
      v43 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v42 + 136), v38, &v102);
      v44 = std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43 + 5, v21 + 4, (uint64_t)(v21 + 4));
      for (i = v44[21]; i != v44[22]; i += 2)
      {
        if (*(_OWORD *)i == 0)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &v94);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      *(_OWORD *)&v94.__r_.__value_.__r.__words[1] = 0uLL;
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94.__r_.__value_.__l.__size_;
      Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v21 + 4), &v92);
      v103 = (__int128 *)(v21 + 4);
      v46 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v94, v21 + 4, &v103);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v46 + 7), &v92);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
      if (*((_QWORD *)&v92 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = v44[21];
      v51 = v44[22];
      if (v50 == v51)
      {
LABEL_69:
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy((_QWORD *)v94.__r_.__value_.__l.__size_);
        v22 = v91;
        goto LABEL_101;
      }
      v52 = 0;
      v53 = v44 + 7;
      while (1)
      {
        if (v50[1])
        {
          Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v21 + 4), &v92);
          (*(void (**)(_QWORD, __int128 *, uint64_t *, id, uint64_t **, uint64_t))(*(_QWORD *)v92 + 88))(v92, &v99, v21 + 4, (id)v50[1], v53, v52);
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
          if (*((_QWORD *)&v92 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            goto LABEL_66;
          }
        }
        else
        {
          Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v21 + 4), &v92);
          (*(void (**)(_QWORD, __int128 *, uint64_t *, uint64_t, uint64_t **, uint64_t))(*(_QWORD *)v92 + 80))(v92, &v99, v21 + 4, *v50, v53, v52);
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
          if (*((_QWORD *)&v92 + 1))
          {
            v57 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
            do
              v56 = __ldaxr(v57);
            while (__stlxr(v56 - 1, v57));
LABEL_66:
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        ++v52;
        v50 += 2;
        if (v50 == v51)
          goto LABEL_69;
      }
    }
    while (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21 + 4, v39 + 4))
    {
LABEL_45:
      v39 = (uint64_t *)*v39;
      if (!v39)
        goto LABEL_46;
    }
    if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39 + 4, v21 + 4))
    {
      ++v39;
      goto LABEL_45;
    }
    v65 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 112), v38, &v102);
    v66 = std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v65 + 5, v21 + 4, (uint64_t)(v21 + 4));
    v69 = (const char ***)(v66 + 18);
    v68 = v66[18];
    v70 = *((unsigned int *)v66 + 34);
    while (v68 != v66[19])
    {
      if (!*v68)
      {
        v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v90, &v94);
        __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v68 += 4;
    }
    if (*((char *)v21 + 55) < 0)
      std::string::__init_copy_ctor_external(&v93, (const std::string::value_type *)v21[4], v21[5]);
    else
      v93 = *(std::string *)(v21 + 4);
    Espresso::fill_network_with_images_batch_safe_v2((uint64_t)&v99, a4, v69, v70, v67, (__int128 *)(v69 - 11), (std::string::size_type)&v93);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
LABEL_101:
    v78 = v98;
    if (v98)
    {
      v79 = (unint64_t *)&v98->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = (uint64_t *)v21[1];
    if (v81)
    {
      do
      {
        v82 = v81;
        v81 = (uint64_t *)*v81;
      }
      while (v81);
    }
    else
    {
      do
      {
        v82 = (uint64_t *)v21[2];
        v18 = *v82 == (_QWORD)v21;
        v21 = v82;
      }
      while (!v18);
    }
    v21 = v82;
  }
  while (v82 != (uint64_t *)v22);
LABEL_112:
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v101;
  if (v101)
  {
    v87 = (unint64_t *)&v101->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
}

void sub_190E69F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 120);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void Espresso::blob_cpu::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v20;
  uint64_t v21;
  const float *v22;
  char *v23;
  vDSP_Length v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const float *v28;
  int *v29;
  vDSP_Length v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const float *v34;
  unsigned __int8 *v35;
  vDSP_Length v36;
  uint64_t v37;

  switch(*(_DWORD *)(a1 + 240))
  {
    case 0:
      v3 = *(_QWORD *)(a1 + 160);
      if (v3)
      {
        v4 = 0;
        v5 = *(void **)(v3 + 24);
        v6 = *(int *)(v3 + 8);
        v7 = v3 + 12;
        do
        {
          v6 *= *(int *)(v7 + v4);
          v4 += 4;
        }
        while (v4 != 12);
        memcpy(v5, *(const void **)(*(_QWORD *)a3 + 24), 4 * v6);
      }
      break;
    case 1:
      v8 = *(_QWORD *)(a1 + 176);
      if (v8)
      {
        v9 = 0;
        v10 = *(int **)(*(_QWORD *)a3 + 24);
        v11 = *(_WORD **)(v8 + 24);
        v12 = *(int *)(v8 + 8);
        v13 = v8 + 12;
        do
        {
          v12 *= *(int *)(v13 + v9);
          v9 += 4;
        }
        while (v9 != 12);
        for (; v12; --v12)
        {
          v14 = *v10++;
          _S0 = v14;
          __asm { FCVT            H0, S0 }
          *v11++ = _S0;
        }
      }
      break;
    case 2:
      v20 = *(_QWORD *)(a1 + 192);
      if (v20)
      {
        v21 = 0;
        v22 = *(const float **)(*(_QWORD *)a3 + 24);
        v23 = *(char **)(v20 + 24);
        v24 = *(int *)(v20 + 8);
        v25 = v20 + 12;
        do
        {
          v24 *= *(int *)(v25 + v21);
          v21 += 4;
        }
        while (v21 != 12);
        vDSP_vfix8(v22, 1, v23, 1, v24);
      }
      break;
    case 3:
      v26 = *(_QWORD *)(a1 + 208);
      if (v26)
      {
        v27 = 0;
        v28 = *(const float **)(*(_QWORD *)a3 + 24);
        v29 = *(int **)(v26 + 24);
        v30 = *(int *)(v26 + 8);
        v31 = v26 + 12;
        do
        {
          v30 *= *(int *)(v31 + v27);
          v27 += 4;
        }
        while (v27 != 12);
        vDSP_vfix32(v28, 1, v29, 1, v30);
      }
      break;
    case 4:
      v32 = *(_QWORD *)(a1 + 192);
      if (v32)
      {
        v33 = 0;
        v34 = *(const float **)(*(_QWORD *)a3 + 24);
        v35 = *(unsigned __int8 **)(v32 + 24);
        v36 = *(int *)(v32 + 8);
        v37 = v32 + 12;
        do
        {
          v36 *= *(int *)(v37 + v33);
          v33 += 4;
        }
        while (v33 != 12);
        vDSP_vfixu8(v34, 1, v35, 1, v36);
      }
      break;
    default:
      return;
  }
}

void EspressoLight::espresso_plan::__copy_outputs(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (***v16)(_QWORD);
  unsigned int v17;
  BOOL v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  _BOOL4 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t **v47;
  _QWORD *v48;
  uint64_t **v49;
  char *v50;
  uint64_t **v51;
  _QWORD *v52;
  uint64_t **v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  uint64_t *v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  int v80;

  v80 = a3;
  v8 = *(const void **)a2;
  if (*(_QWORD *)a2
  {
    v10 = *(std::__shared_weak_count **)(a2 + 8);
    v78 = (uint64_t)v9;
    v79 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v8 = *(const void **)a2;
    }
  }
  else
  {
    v78 = 0;
    v79 = 0;
  }
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v77 = v8;
  *((_QWORD *)&v77 + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a4 + 16) + 8);
  v17 = (**v16)(v16);
  v18 = v17 == 10008 || v17 == 10011;
  v19 = v18 || v17 >> 1 == 5003;
  v20 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  if (v20)
  {
    v21 = *(_QWORD *)a1 + 96;
    do
    {
      v22 = *(_DWORD *)(v20 + 32);
      v23 = v22 < a3;
      if (v22 >= a3)
        v24 = (uint64_t *)v20;
      else
        v24 = (uint64_t *)(v20 + 8);
      if (!v23)
        v21 = v20;
      v20 = *v24;
    }
    while (*v24);
    if (v21 != *(_QWORD *)a1 + 96 && *(_DWORD *)(v21 + 32) <= a3)
    {
      v25 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)a1 + 88), a3, &v80)[7];
      v26 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)a1 + 88), a3, &v80);
      v27 = v26[5];
      v28 = v26 + 6;
      if (v27 != (uint64_t *)(v26 + 6))
      {
        do
        {
          Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v27 + 4), &v75);
          v29 = v78;
          if (v78)
            v30 = v19;
          else
            v30 = 0;
          v31 = v80;
          if (v30)
          {
            v33 = (unint64_t)v25 > 1 && (uint64_t *)((char *)v25 - 2) == (uint64_t *)v80;
            v34 = (std::__shared_weak_count *)v75[10];
            v72 = v75[9];
            v73 = v34;
            if (v34)
            {
              v35 = (unint64_t *)&v34->__shared_owners_;
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            Espresso::switch_engine_batch::switch_to_engine(v29, (uint64_t)&v72, v33, &v74);
            v37 = v74;
            v74 = 0uLL;
            v38 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
            v77 = v37;
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
            if (*((_QWORD *)&v74 + 1))
            {
              v42 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v44 = v73;
            if (v73)
            {
              v45 = (unint64_t *)&v73->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            v31 = v80;
          }
          v47 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)a1 + 208), v31, &v80);
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v47[6], v27 + 4))
          {
            v48 = v75;
            v49 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)a1 + 208), v31, &v80);
            *(_QWORD *)&v74 = v27 + 4;
            v50 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49 + 5, v27 + 4, (__int128 **)&v74);
            (*(void (**)(_QWORD *, __int128 *, _QWORD))(*v48 + 112))(v48, &v77, *((_QWORD *)v50 + 7));
          }
          else
          {
            v51 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)a1 + 160), v31, &v80);
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v51[6], v27 + 4))
            {
              v52 = v75;
              v53 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)a1 + 160), v31, &v80);
              v54 = std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v53 + 5, v27 + 4, (uint64_t)(v27 + 4));
              (*(void (**)(_QWORD *, __int128 *, uint64_t *, _QWORD))(*v52 + 96))(v52, &v77, v27 + 4, *v54[21]);
            }
            else if (*((_BYTE *)v27 + 56))
            {
              v55 = *(_QWORD *)(*(_QWORD *)a1 + 48);
              if (!v55)
                goto LABEL_72;
              v56 = *(_QWORD *)a1 + 48;
              do
              {
                v57 = *(_DWORD *)(v55 + 32);
                v58 = v57 < v31;
                if (v57 >= v31)
                  v59 = (uint64_t *)v55;
                else
                  v59 = (uint64_t *)(v55 + 8);
                if (!v58)
                  v56 = v55;
                v55 = *v59;
              }
              while (*v59);
              if (v56 == *(_QWORD *)a1 + 48 || v31 < *(_DWORD *)(v56 + 32))
LABEL_72:
                v56 = *(_QWORD *)a1 + 48;
              v60 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v56 + 40, v27 + 4);
              (*(void (**)(_QWORD *, __int128 *, _QWORD *))(*v75 + 40))(v75, &v77, v60 + 7);
            }
          }
          v61 = v76;
          if (v76)
          {
            v62 = (unint64_t *)&v76->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v64 = (uint64_t *)v27[1];
          if (v64)
          {
            do
            {
              v65 = v64;
              v64 = (uint64_t *)*v64;
            }
            while (v64);
          }
          else
          {
            do
            {
              v65 = (uint64_t *)v27[2];
              v18 = *v65 == (_QWORD)v27;
              v27 = v65;
            }
            while (!v18);
          }
          v27 = v65;
        }
        while (v65 != (uint64_t *)v28);
      }
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v79;
  if (v79)
  {
    v70 = (unint64_t *)&v79->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
}

void sub_190E6A760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::net::get_blob_or_global_with_prefix(uint64_t a1@<X0>, std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  char *size;
  std::string *v7;
  void **v8;
  int64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  int v15;
  std::string *v16;
  char *v17;
  char *v18;
  std::string *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string v24;
  void *__p[2];
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v27 = 0;
  v28 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, Espresso::net::bind_global_prefix[0]);
  size = (char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v7 = a2;
  else
    v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((v26 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v9 = v26;
  else
    v9 = (int64_t)__p[1];
  if (v9)
  {
    if ((char)size < 0)
      size = (char *)a2->__r_.__value_.__l.__size_;
    if ((uint64_t)size >= v9)
    {
      v14 = &size[(_QWORD)v7];
      v15 = *(char *)v8;
      v16 = v7;
      do
      {
        v17 = &size[-v9];
        if (v17 == (char *)-1)
          break;
        v18 = (char *)memchr(v16, v15, (size_t)(v17 + 1));
        if (!v18)
          break;
        v19 = (std::string *)v18;
        if (!memcmp(v18, v8, v9))
        {
          if (v19 == (std::string *)v14 || v19 != v7)
            break;
          goto LABEL_27;
        }
        v16 = (std::string *)((char *)&v19->__r_.__value_.__l.__data_ + 1);
        size = (char *)(v14 - ((char *)&v19->__r_.__value_.__l.__data_ + 1));
      }
      while ((uint64_t)size >= v9);
    }
    v10 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1 + 136), (unsigned __int8 *)a2);
    if (v10)
    {
      v11 = *((_QWORD *)v10 + 6);
      *a3 = *((_QWORD *)v10 + 5);
      a3[1] = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      goto LABEL_36;
    }
LABEL_35:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_36;
  }
LABEL_27:
  std::string::basic_string(&v24, a2, v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
  v20 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1 + 1440), (unsigned __int8 *)&v24);
  if (!v20)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
  v21 = *((_QWORD *)v20 + 6);
  *a3 = *((_QWORD *)v20 + 5);
  a3[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
LABEL_36:
  if ((char)v26 < 0)
    operator delete(__p[0]);
}

void sub_190E6A96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void Espresso::switch_engine_batch::switch_to_engine(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  _DWORD v23[9];
  __int128 v24;
  __int128 v25;
  int v26;

  if (*(_QWORD *)a2)
    v8 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(unsigned int *)(a1 + 136);
  LOBYTE(v23[0]) = *(_BYTE *)(a1 + 40);
  memset(&v23[1], 0, 32);
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  if (LOBYTE(v23[0]))
  {
    *(_QWORD *)&v23[2] = v9;
    *(_QWORD *)&v23[4] = v10;
    *(_QWORD *)&v23[6] = v8;
    v23[1] = 723714144;
    kdebug_trace();
  }
  if (!*(_QWORD *)a2 || v8 != *(_DWORD *)(a1 + 136) || (v11 = *(_QWORD *)(a1 + 120)) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v9, v10);
    if (v8)
      v12 = *(_BYTE *)(a1 + 96) == 0;
    else
      v12 = 1;
    if (v12 || v8 == 100)
      v14 = 1;
    else
      v14 = a3;
    v12 = v14 == 0;
    v15 = 32;
    if (!v12)
      v15 = 24;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + v15))(a1);
    if (*(_QWORD *)a2)
    {
      (***(void (****)(__int128 *__return_ptr))a2)(&v22);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 120, &v22);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), a1);
      *(_DWORD *)(a1 + 136) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
    }
    goto LABEL_30;
  }
  if (v8 >> 1 == 5003 && *(_BYTE *)(a1 + 96))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v9, v10);
LABEL_30:
    v11 = *(_QWORD *)(a1 + 120);
  }
  v19 = *(_QWORD *)(a1 + 128);
  *a4 = v11;
  a4[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v23);
}

void sub_190E6ABB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::blob_container::__copy_to_host(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  __IOSurface *v15;
  size_t BytesPerRowOfPlane;
  vDSP_Length v17;
  float *v18;
  int v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  vImagePixelCount v24;
  int v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  void *v32;
  int v33;
  int v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  const unsigned __int8 *BaseAddress;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  float *v47;
  float **data;
  int v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int i;
  int v61;
  vDSP_Length v62;
  int v63;
  int v64;
  vDSP_Length v65;
  size_t v66;
  int v67;
  int v68;
  int v69;
  float *v70;
  float **v71;
  int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  vDSP_Length v77;
  int v78;
  int v79;
  vImagePixelCount v80;
  int v81;
  int v82;
  size_t v83;
  size_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  void *v88;
  int v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int j;
  std::__shared_weak_count *height;
  unint64_t *v103;
  unint64_t v104;
  std::runtime_error *v105;
  std::runtime_error *exception;
  size_t v107;
  size_t v108;
  uint64_t v109;
  __IOSurface *buffer;
  uint64_t v113;
  id v114;
  vDSP_Length __N;
  int v116;
  unint64_t v117;
  int v118;
  int v119;
  size_t v120;
  int v121;
  size_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  _QWORD v125[9];
  vImage_Buffer dest;
  vImage_Buffer src;

  v4 = *(unsigned __int8 *)(*(_QWORD *)a2 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  v7 = (int)a1[43];
  v6 = (int)a1[44];
  v9 = (int)a1[40];
  v8 = (int)a1[41];
  v10 = (int)a1[42];
  LOBYTE(v125[0]) = v4;
  memset((char *)v125 + 4, 0, 68);
  if (v4)
  {
    v125[1] = v5;
    v125[2] = v6;
    v125[3] = v7;
    v125[4] = v8;
    v125[5] = v5;
    v125[6] = v9;
    v125[7] = v10;
    HIDWORD(v125[0]) = 723714904;
    kdebug_trace();
  }
  if (!*(_QWORD *)a3)
  {
    (*(void (**)(vImage_Buffer *__return_ptr, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(&src, a1, v5, v6, v7, v8);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)&src);
    height = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v103 = (unint64_t *)(src.height + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
  }
  if (*((_QWORD *)a1 + 28) == *((_QWORD *)a1 + 27))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state: empty surfaces");
LABEL_148:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = a1[48];
  if ((v11 - 1) >= 2 && v11 != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_148;
  }
  v109 = a1[45];
  if ((int)v109 >= 1)
  {
    v13 = 0;
    v14 = (int)a1[43] * (uint64_t)(int)a1[44] * (int)a1[42] * (int)a1[41] * (int)a1[40];
    __N = v14;
    v107 = 4 * v14;
    v108 = 2 * v14;
    do
    {
      v114 = *(id *)(*((_QWORD *)a1 + 27) + 8 * v13);
      v15 = (__IOSurface *)objc_msgSend(v114, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
      BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v15, 0);
      v17 = BytesPerRowOfPlane * (int)a1[43];
      v18 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 4 * v13 * __N);
      v19 = a1[49];
      buffer = v15;
      v113 = v13;
      if (v19 == 4 || v19 == 2)
      {
        *(float *)&dest.data = 1.0 / *((float *)a1 + 28);
        IOSurfaceLock(v15, 5u, 0);
        BaseAddress = (const unsigned __int8 *)IOSurfaceGetBaseAddress(v15);
        v40 = a1[48];
        if (v40 == 2 || v40 == 4)
        {
          v41 = (int)a1[42];
          if (a1[47])
          {
            if ((int)v41 >= 1)
            {
              v42 = 0;
              do
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&src, a1[43] * BytesPerRowOfPlane, 1, 1, 1);
                v121 = v42;
                v43 = a1[40];
                if (v43 >= 1)
                {
                  v44 = 0;
                  v45 = a1[41];
                  do
                  {
                    if (v45 >= -2)
                    {
                      v46 = -1;
                      do
                      {
                        v47 = (float *)*((_QWORD *)src.data + 2);
                        if (a1[49] == 4)
                          vDSP_vfltu8(BaseAddress, 1, v47, 1, v17);
                        else
                          vDSP_vflt8((const char *)BaseAddress, 1, v47, 1, v17);
                        data = (float **)src.data;
                        vDSP_vsmul(*((const float **)src.data + 2), 1, (const float *)&dest, *((float **)src.data + 2), 1, v17);
                        deinterleave_float_image(a1[48], data[2], 4 * BytesPerRowOfPlane, v18, a1[44], a1[43], a1[41] == 3);
                        v45 = a1[41];
                        BaseAddress += v17;
                        if (v45 >= 3)
                          v49 = 3;
                        else
                          v49 = a1[41];
                        v18 += a1[43] * a1[44] * v49;
                        v50 = v45 - 1;
                        if (v45 < 1)
                          v50 = v45 + 2;
                        ++v46;
                      }
                      while (v46 < v50 >> 2);
                      v43 = a1[40];
                    }
                    ++v44;
                  }
                  while (v44 < v43);
                }
                v51 = (std::__shared_weak_count *)src.height;
                if (src.height)
                {
                  v52 = (unint64_t *)(src.height + 8);
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v42 = v121 + 1;
              }
              while (v121 + 1 < a1[42]);
            }
          }
          else
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&src, v41 * BytesPerRowOfPlane * a1[43], 1, 1, 1);
            v63 = a1[40];
            if (v63 >= 1)
            {
              v64 = 0;
              v65 = v17 * v41;
              v66 = 4 * BytesPerRowOfPlane;
              v67 = a1[41];
              v68 = a1[48];
              do
              {
                if ((((v67 - 1) / v68) & 0x80000000) == 0)
                {
                  v69 = -1;
                  do
                  {
                    v70 = (float *)*((_QWORD *)src.data + 2);
                    if (a1[49] == 4)
                      vDSP_vfltu8(BaseAddress, 1, v70, 1, v65);
                    else
                      vDSP_vflt8((const char *)BaseAddress, 1, v70, 1, v65);
                    v71 = (float **)src.data;
                    vDSP_vsmul(*((const float **)src.data + 2), 1, (const float *)&dest, *((float **)src.data + 2), 1, v65);
                    deinterleave_float_image(a1[48], v71[2], v66, v18, a1[44], a1[42] * a1[43], a1[41] == 3);
                    v67 = a1[41];
                    BaseAddress += v65;
                    if (v67 >= 3)
                      v72 = 3;
                    else
                      v72 = a1[41];
                    v18 += a1[43] * a1[44] * a1[42] * v72;
                    v68 = a1[48];
                    ++v69;
                  }
                  while (v69 < (v67 - 1) / v68);
                  v63 = a1[40];
                }
                ++v64;
              }
              while (v64 < v63);
            }
            v73 = (std::__shared_weak_count *)src.height;
            if (src.height)
            {
              v74 = (unint64_t *)(src.height + 8);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
          }
        }
        else if ((int)a1[40] >= 1)
        {
          v54 = 0;
          do
          {
            if (BytesPerRowOfPlane == a1[44])
            {
              if (a1[49] == 4)
                vDSP_vfltu8(BaseAddress, 1, v18, 1, __N);
              else
                vDSP_vflt8((const char *)BaseAddress, 1, v18, 1, __N);
              vDSP_vsmul(v18, 1, (const float *)&dest, v18, 1, __N);
            }
            else
            {
              v55 = a1[41];
              if (v55 >= 1)
              {
                v56 = 0;
                v57 = a1[42];
                do
                {
                  if (v57 >= 1)
                  {
                    v58 = 0;
                    v59 = a1[43];
                    do
                    {
                      if (v59 >= 1)
                      {
                        for (i = 0; i < v59; ++i)
                        {
                          v61 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1);
                          v62 = (int)a1[44];
                          if (v61 == 4)
                            vDSP_vfltu8(BaseAddress, 1, v18, 1, v62);
                          else
                            vDSP_vflt8((const char *)BaseAddress, 1, v18, 1, v62);
                          vDSP_vsmul(v18, 1, (const float *)&dest, v18, 1, (int)a1[44]);
                          BaseAddress += BytesPerRowOfPlane;
                          v59 = a1[43];
                          v18 += (int)a1[44];
                        }
                        v57 = a1[42];
                      }
                      ++v58;
                    }
                    while (v58 < v57);
                    v55 = a1[41];
                  }
                  ++v56;
                }
                while (v56 < v55);
              }
            }
            ++v54;
          }
          while (v54 < a1[40]);
        }
      }
      else
      {
        if (v19 != 1)
        {
          v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v105, "Not implemented");
          __cxa_throw(v105, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        IOSurfaceLock(v15, 5u, 0);
        v20 = (char *)IOSurfaceGetBaseAddress(v15);
        v21 = v20;
        v22 = a1[48];
        if (v22 == 4 || v22 == 2)
        {
          v23 = a1[42];
          if (a1[47])
          {
            if (v23 >= 1)
            {
              v116 = 0;
              v117 = (unint64_t)(int)v17 >> 1;
              v24 = v17 >> 1;
              v120 = 2 * BytesPerRowOfPlane;
              v25 = a1[40];
              v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
              v27 = 4 * (v17 >> 1);
              v28 = 2 * (v17 >> 1);
              do
              {
                if (v25 >= 1)
                {
                  v29 = 0;
                  do
                  {
                    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v123, v117, 1, 1, 1);
                    v118 = v29;
                    if ((((a1[41] - 1) / a1[48]) & 0x80000000) == 0)
                    {
                      v30 = -1;
                      do
                      {
                        v31 = v123;
                        v32 = *(void **)(v123 + 16);
                        src.data = v21;
                        src.height = 1;
                        src.width = v24;
                        src.rowBytes = v26;
                        dest.data = v32;
                        dest.height = 1;
                        dest.width = v24;
                        dest.rowBytes = v27;
                        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                        deinterleave_float_image(a1[48], *(float **)(v31 + 16), v120, v18, a1[44], a1[43], a1[41] == 3);
                        v33 = a1[41];
                        v34 = a1[48];
                        if (v33 >= v34)
                          v35 = a1[48];
                        else
                          v35 = a1[41];
                        v18 += a1[43] * a1[44] * v35;
                        ++v30;
                        v21 += v28;
                      }
                      while (v30 < (v33 - 1) / v34);
                    }
                    v36 = v124;
                    if (v124)
                    {
                      p_shared_owners = (unint64_t *)&v124->__shared_owners_;
                      do
                        v38 = __ldaxr(p_shared_owners);
                      while (__stlxr(v38 - 1, p_shared_owners));
                      if (!v38)
                      {
                        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                        std::__shared_weak_count::__release_weak(v36);
                      }
                    }
                    v29 = v118 + 1;
                    v25 = a1[40];
                  }
                  while (v118 + 1 < v25);
                  v23 = a1[42];
                }
                ++v116;
              }
              while (v116 < v23);
            }
          }
          else
          {
            v77 = v17 * v23;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v123, (unint64_t)(int)v77 >> 1, 1, 1, 1);
            v78 = a1[40];
            if (v78 >= 1)
            {
              v79 = 0;
              v80 = v77 >> 1;
              v122 = 2 * BytesPerRowOfPlane;
              v81 = a1[41];
              v82 = a1[48];
              v83 = v77 & 0xFFFFFFFFFFFFFFFELL;
              v84 = 4 * (v77 >> 1);
              v85 = 2 * (v77 >> 1);
              do
              {
                if ((((v81 - 1) / v82) & 0x80000000) == 0)
                {
                  v119 = v79;
                  v86 = -1;
                  do
                  {
                    v87 = v123;
                    v88 = *(void **)(v123 + 16);
                    src.data = v21;
                    src.height = 1;
                    src.width = v80;
                    src.rowBytes = v83;
                    dest.data = v88;
                    dest.height = 1;
                    dest.width = v80;
                    dest.rowBytes = v84;
                    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                    deinterleave_float_image(a1[48], *(float **)(v87 + 16), v122, v18, a1[44], a1[42] * a1[43], a1[41] == 3);
                    v81 = a1[41];
                    v82 = a1[48];
                    if (v81 >= v82)
                      v89 = a1[48];
                    else
                      v89 = a1[41];
                    v18 += a1[43] * a1[44] * a1[42] * v89;
                    ++v86;
                    v21 += v85;
                  }
                  while (v86 < (v81 - 1) / v82);
                  v78 = a1[40];
                  v79 = v119;
                }
                ++v79;
              }
              while (v79 < v78);
            }
            v90 = v124;
            if (v124)
            {
              v91 = (unint64_t *)&v124->__shared_owners_;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
          }
        }
        else
        {
          v76 = (int)a1[44];
          if (BytesPerRowOfPlane == 2 * v76)
          {
            src.data = v20;
            src.height = 1;
            src.width = __N;
            src.rowBytes = v108;
            dest.data = v18;
            dest.height = 1;
            dest.width = __N;
            dest.rowBytes = v107;
            vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          }
          else
          {
            v93 = a1[40];
            if (v93 >= 1)
            {
              v94 = 0;
              v95 = a1[41];
              v96 = BytesPerRowOfPlane & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                if (v95 >= 1)
                {
                  v97 = 0;
                  v98 = a1[42];
                  do
                  {
                    if (v98 >= 1)
                    {
                      v99 = 0;
                      v100 = a1[43];
                      do
                      {
                        if (v100 >= 1)
                        {
                          for (j = 0; j < v100; ++j)
                          {
                            src.data = v21;
                            src.height = 1;
                            src.width = (int)v76;
                            src.rowBytes = 2 * (int)v76;
                            dest.data = v18;
                            dest.height = 1;
                            dest.width = (int)v76;
                            dest.rowBytes = 4 * (int)v76;
                            vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                            v100 = a1[43];
                            v76 = (int)a1[44];
                            v18 += v76;
                            v21 += v96;
                          }
                          v98 = a1[42];
                        }
                        ++v99;
                      }
                      while (v99 < v98);
                      v95 = a1[41];
                    }
                    ++v97;
                  }
                  while (v97 < v95);
                  v93 = a1[40];
                }
                ++v94;
              }
              while (v94 < v93);
            }
          }
        }
      }
      IOSurfaceUnlock(buffer, 5u, 0);

      v13 = v113 + 1;
    }
    while (v113 + 1 != v109);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v125);
}

void sub_190E6B6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  void *v25;

  __cxa_free_exception(v25);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a25);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::create_binding_task(EspressoLight::espresso_plan *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t **v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t **v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  __int128 v33;

  v2 = (char *)operator new(0x118uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_1E2DB59E0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_QWORD *)v2 + 5) = v2 + 48;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_QWORD *)v2 + 7) = 0;
  *((_QWORD *)v2 + 8) = v2 + 72;
  *((_OWORD *)v2 + 6) = 0u;
  *((_QWORD *)v2 + 11) = v2 + 96;
  *(_OWORD *)(v2 + 120) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_QWORD *)v2 + 14) = v2 + 120;
  *((_QWORD *)v2 + 17) = v2 + 144;
  *(_OWORD *)(v2 + 168) = 0u;
  *((_QWORD *)v2 + 20) = v2 + 168;
  *((_OWORD *)v2 + 12) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *((_QWORD *)v2 + 23) = v2 + 192;
  *((_QWORD *)v2 + 26) = v2 + 216;
  *((_OWORD *)v2 + 15) = 0u;
  *((_QWORD *)v2 + 29) = v2 + 240;
  *(_OWORD *)(v2 + 264) = 0u;
  *((_QWORD *)v2 + 32) = v2 + 264;
  *(_QWORD *)&v33 = v2 + 24;
  *((_QWORD *)&v33 + 1) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  v6 = (unint64_t *)(v2 + 16);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  *((_QWORD *)v2 + 3) = v2 + 24;
  *((_QWORD *)v2 + 4) = v2;
  do
    v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  if (!v8)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)this + 133) + 144, &v33);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (_QWORD *)*((_QWORD *)this + 133);
  v13 = (_QWORD *)v12[12];
  v14 = v12 + 13;
  if (v13 != v12 + 13)
  {
    do
    {
      v15 = *((_DWORD *)v13 + 8);
      v32 = v15;
      v16 = (_QWORD *)v13[5];
      if (v16 != v13 + 6)
      {
        do
        {
          v17 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 133) + 144) + 64), v15, &v32);
          *(_QWORD *)&v33 = v16 + 4;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17 + 5, v16 + 4, (__int128 **)&v33)[56] = 0;
          v18 = (_QWORD *)v16[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v16[2];
              v20 = *v19 == (_QWORD)v16;
              v16 = v19;
            }
            while (!v20);
          }
          v16 = v19;
        }
        while (v19 != v13 + 6);
      }
      v21 = (_QWORD *)v13[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v13[2];
          v20 = *v22 == (_QWORD)v13;
          v13 = v22;
        }
        while (!v20);
      }
      v13 = v22;
    }
    while (v22 != v14);
    v12 = (_QWORD *)*((_QWORD *)this + 133);
  }
  v23 = (_QWORD *)v12[15];
  v24 = v12 + 16;
  if (v23 != v12 + 16)
  {
    do
    {
      v25 = *((_DWORD *)v23 + 8);
      v32 = v25;
      v26 = (_QWORD *)v23[5];
      if (v26 != v23 + 6)
      {
        do
        {
          v27 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 133) + 144) + 88), v25, &v32);
          *(_QWORD *)&v33 = v26 + 4;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27 + 5, v26 + 4, (__int128 **)&v33)[56] = 0;
          v28 = (_QWORD *)v26[1];
          if (v28)
          {
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v26[2];
              v20 = *v29 == (_QWORD)v26;
              v26 = v29;
            }
            while (!v20);
          }
          v26 = v29;
        }
        while (v29 != v23 + 6);
      }
      v30 = (_QWORD *)v23[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v23[2];
          v20 = *v31 == (_QWORD)v23;
          v23 = v31;
        }
        while (!v20);
      }
      v23 = v31;
    }
    while (v31 != v24);
  }
}

void Espresso::ANERuntimeEngine::batch::sync_wait(Espresso::ANERuntimeEngine::batch *this)
{
  NSObject *v1;
  uint64_t v3;
  Espresso *v4;
  const char *v5;
  NSObject *v6;
  Espresso *v7;
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Class v13;
  NSObject *v14;
  uint64_t v15;
  objc_class *v16;
  objc_class *v17;
  NSObject *isa;
  Class v19;
  BOOL v20;
  NSObject **v21;
  objc_class *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject **v25;
  BOOL v26;
  uint64_t *v27;
  objc_class *v28;
  NSObject *v29;
  Espresso *v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  std::runtime_error *exception;
  NSObject *v36;
  Espresso *v37;
  const char *v38;
  NSObject *v39;
  const char *v40;
  int v41;
  id v42;
  uint64_t v43;
  const char *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  const char *v48;
  int v49;
  _QWORD *v50;
  objc_class *v51;
  char v52[4];
  int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  std::unique_lock<std::mutex> __lk;
  uint8_t buf[4];
  _QWORD *v61;
  __int16 v62;
  _QWORD v63[4];

  *(_QWORD *)((char *)&v63[2] + 2) = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 15);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  if (*((_BYTE *)this + 96))
  {
    v52[0] = 1;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0;
    v54 = 10007;
    v53 = 723714224;
    kdebug_trace();
    std::mutex::lock((std::mutex *)((char *)this + 200));
    v50 = (_QWORD *)*((_QWORD *)this + 39);
    std::mutex::unlock((std::mutex *)((char *)this + 200));
    if (*((_BYTE *)this + 328))
    {
      Espresso::espresso_os_log_subsystem(v4, v5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v61 = v50;
        _os_log_debug_impl(&dword_190DAF000, v6, OS_LOG_TYPE_DEBUG, "ANE Batch: sync_waiting for completion of request %zu\n", buf, 0xCu);
      }

    }
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 200);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 200));
    if (*((_BYTE *)this + 328))
    {
      Espresso::espresso_os_log_subsystem(v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v61 = v50;
        _os_log_debug_impl(&dword_190DAF000, v9, OS_LOG_TYPE_DEBUG, "ANE Batch: In wait_for_async_request_completion (req %zu) ...\n", buf, 0xCu);
      }

    }
    v10 = *((_QWORD *)this + 19);
    if (*((_QWORD *)this + 20) == v10)
    {
      v51 = 0;
      *((_QWORD *)this + 40) = v50;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v51 = 0;
      v49 = 0;
      v13 = 0;
      v14 = ((char *)this + 184);
      do
      {
        v15 = v10 + 16 * v12;
        v16 = *(objc_class **)v15;
        if (*((_QWORD *)this + 39) - *(_QWORD *)v15 < *((_QWORD *)this + 39) - *((_QWORD *)this + 40))
        {
          if (*(_BYTE *)(v15 + 12))
          {
            if (*((_BYTE *)this + 328))
            {
              Espresso::espresso_os_log_subsystem(v7, v8);
              v1 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
              {
                v17 = *(objc_class **)v15;
                *(_DWORD *)buf = 134218240;
                v61 = v17;
                v62 = 2048;
                v63[0] = v12;
                _os_log_debug_impl(&dword_190DAF000, v1, OS_LOG_TYPE_DEBUG, "ANE Batch: Waiting for completion of async_request %zu at array_index %zu", buf, 0x16u);
              }

              goto LABEL_20;
            }
            do
            {
              if (!*(_BYTE *)(v15 + 12))
                break;
              std::condition_variable::wait((std::condition_variable *)((char *)this + 264), &__lk);
LABEL_20:
              ;
            }
            while (*(objc_class **)v15 == v16);
            if (*((_BYTE *)this + 328))
            {
              Espresso::espresso_os_log_subsystem(v7, v8);
              v1 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
              {
                v28 = *(objc_class **)v15;
                *(_DWORD *)buf = 134218240;
                v61 = v28;
                v62 = 2048;
                v63[0] = v12;
                _os_log_debug_impl(&dword_190DAF000, v1, OS_LOG_TYPE_DEBUG, "ANE Batch: Done waiting for completion of async_request %zu at array_index %zu", buf, 0x16u);
              }

            }
          }
          isa = v14->isa;
          if (v14->isa)
          {
            v1 = ((char *)this + 184);
            do
            {
              v19 = isa[4].isa;
              v20 = v19 >= v16;
              if (v19 >= v16)
                v21 = (NSObject **)isa;
              else
                v21 = (NSObject **)&isa[1];
              if (v20)
                v1 = isa;
              isa = *v21;
            }
            while (*v21);
            if (v1 != v14 && v16 >= v1[4].isa)
            {
              if (!v11)
              {
                v13 = v1[5].isa;
                v49 = (int)v1[6].isa;
                v22 = v1[7].isa;

                v51 = v22;
              }
              v23 = v1[1].isa;
              v24 = v1;
              if (v23)
              {
                do
                {
                  v25 = (NSObject **)v23;
                  v23 = v23->isa;
                }
                while (v23);
              }
              else
              {
                do
                {
                  v25 = (NSObject **)v24[2].isa;
                  v26 = *v25 == v24;
                  v24 = v25;
                }
                while (!v26);
              }
              if (*((NSObject **)this + 22) == v1)
                *((_QWORD *)this + 22) = v25;
              v27 = (uint64_t *)*((_QWORD *)this + 23);
              --*((_QWORD *)this + 24);
              std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v27, (uint64_t *)v1);

              operator delete(v1);
              ++v11;
            }
          }
        }
        ++v12;
        v10 = *((_QWORD *)this + 19);
      }
      while (v12 < (*((_QWORD *)this + 20) - v10) >> 4);
      *((_QWORD *)this + 40) = v50;
      if (v11)
      {
        Espresso::espresso_os_log_subsystem(v7, v8);
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v40 = "";
          if (v11 > 1)
            v40 = "Only the first of these will be surfaced.";
          *(_DWORD *)buf = 134218242;
          v61 = (_QWORD *)v11;
          v62 = 2080;
          v63[0] = v40;
          _os_log_error_impl(&dword_190DAF000, v29, OS_LOG_TYPE_ERROR, "ANE Batch: %zu of the async requests being waited for returned errors. %s", buf, 0x16u);
        }

        Espresso::espresso_os_log_subsystem(v30, v31);
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          v41 = -[objc_class code](v51, "code");
          -[objc_class description](v51, "description");
          v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v43 = objc_msgSend(v42, "UTF8String");
          if (v43)
          {
            -[objc_class description](v51, "description");
            v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v44 = (const char *)-[NSObject UTF8String](v1, "UTF8String");
          }
          else
          {
            v44 = "";
          }
          *(_DWORD *)buf = 134218498;
          v61 = v13;
          v62 = 1024;
          LODWORD(v63[0]) = v41;
          WORD2(v63[0]) = 2080;
          *(_QWORD *)((char *)v63 + 6) = v44;
          _os_log_error_impl(&dword_190DAF000, v32, OS_LOG_TYPE_ERROR, "ANE Batch: Async request %zu returned error: code=%d err=%s", buf, 0x1Cu);
          if (v43)

        }
        if (-[objc_class code](v51, "code") != 5)
        {
          -[objc_class localizedDescription](v51, "localizedDescription");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v47 = (_QWORD *)*v47;
          if (v46)
            v48 = (const char *)objc_msgSend(objc_retainAutorelease(v46), "UTF8String");
          else
            v48 = "";
          Espresso::throw_exception_selector<Espresso::generic_error,char const*,char const*>("ANEF error: %s, %s", (uint64_t)v47, (uint64_t)v48);
        }
        Espresso::espresso_os_log_subsystem((Espresso *)5, v33);
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          v45 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v45 = (_QWORD *)*v45;
          *(_DWORD *)buf = 136315394;
          v61 = v45;
          v62 = 1024;
          LODWORD(v63[0]) = v49;
          _os_log_error_impl(&dword_190DAF000, v34, OS_LOG_TYPE_ERROR, "[Espresso::overflow_error] %s:%d", buf, 0x12u);
        }

        if (*((_BYTE *)this + 329))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
          Espresso::overflow_error::overflow_error(exception);
        }
      }
    }
    if (*((_BYTE *)this + 328))
    {
      Espresso::espresso_os_log_subsystem(v7, v8);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v61 = v50;
        _os_log_debug_impl(&dword_190DAF000, v36, OS_LOG_TYPE_DEBUG, "ANE Batch: wait_for_async_request_completion (req %zu) completed.\n", buf, 0xCu);
      }

    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (*((_BYTE *)this + 328))
    {
      Espresso::espresso_os_log_subsystem(v37, v38);
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v61 = v50;
        _os_log_debug_impl(&dword_190DAF000, v39, OS_LOG_TYPE_DEBUG, "ANE Batch: sync_wait completed for request %zu\n", buf, 0xCu);
      }

    }
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v52);
  }
}

void sub_190E6C250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::mutex *a23,char a24)
{
  void *v24;

  if (a24)
    std::mutex::unlock(a23);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a14);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_batch::copy_parameters_from(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(result + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(result + 40) = *(_BYTE *)(a2 + 40);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  char *v11;
  std::string *v12;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD v21[2];
  char v22;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = (char *)operator new(0xA8uLL);
    v21[0] = v11;
    v21[1] = v6;
    v22 = 0;
    v12 = (std::string *)(v11 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
    }
    *((_QWORD *)v11 + 16) = 0;
    *((_QWORD *)v11 + 17) = 0;
    *((_DWORD *)v11 + 14) = 1065353216;
    *(_QWORD *)(v11 + 76) = 0;
    *(_QWORD *)(v11 + 68) = 0;
    *((_DWORD *)v11 + 21) = 0;
    *(_QWORD *)(v11 + 60) = 0x100000000;
    *((_QWORD *)v11 + 14) = 0;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 11) = 0;
    *((_QWORD *)v11 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((_QWORD *)v11 + 13) = _D0;
    *((_QWORD *)v11 + 19) = 0;
    *((_QWORD *)v11 + 20) = 0;
    *((_QWORD *)v11 + 18) = 0;
    v22 = 1;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v7;
    *v8 = (uint64_t *)v11;
    v18 = (uint64_t *)v11;
    v19 = (uint64_t *)**a1;
    if (v19)
    {
      *a1 = v19;
      v18 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v21[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>>>>::reset[abi:ne180100]((uint64_t)v21);
  }
  return (uint64_t **)v11;
}

void sub_190E6C460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_dtype_get_num_components(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD7E0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E6C510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_dtype_get_component_size(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD8E0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E6C5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCC7E0;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190E6C6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v23 = a4;
  v14 = 0;
  v15 = 0;
  v16 = 0x3F6666663727C5ACLL;
  v17 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 1065353216;
  v21 = 0;
  v22 = 0x200000000;
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E6C808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::batchnorm_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _DWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  void *v96[2];
  char v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *__p[2];
  char v101;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v53 = v99;
    if (v99)
    {
      p_shared_owners = (unint64_t *)&v99->__shared_owners_;
      do
        v55 = __ldaxr(p_shared_owners);
      while (__stlxr(v55 - 1, p_shared_owners));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "naive_backward");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v56 = v99;
    if (v99)
    {
      v57 = (unint64_t *)&v99->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "training");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v59 = v99;
    if (v99)
    {
      v60 = (unint64_t *)&v99->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "training_eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(float *)(a2 + 12) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v98 + 96))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v62 = v99;
    if (v99)
    {
      v63 = (unint64_t *)&v99->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "training_momentum");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(float *)(a2 + 16) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v98 + 96))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v65 = v99;
    if (v99)
    {
      v66 = (unint64_t *)&v99->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "training_instancenorm");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v68 = v99;
    if (v99)
    {
      v69 = (unint64_t *)&v99->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v71 = v99;
    if (v99)
    {
      v72 = (unint64_t *)&v99->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "fused_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v74 = v99;
    if (v99)
    {
      v75 = (unint64_t *)&v99->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "leaky_relu_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(float *)(a2 + 36) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v98 + 96))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v77 = v99;
    if (v99)
    {
      v78 = (unint64_t *)&v99->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "training_subsampling");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)(a2 + 60) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v80 = v99;
    if (v99)
    {
      v81 = (unint64_t *)&v99->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "generate_mean_ivar");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)(a2 + 64) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v83 = v99;
    if (v99)
    {
      v84 = (unint64_t *)&v99->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "regularization_eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(float *)(a2 + 68) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v98 + 96))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v86 = v99;
    if (v99)
    {
      v87 = (unint64_t *)&v99->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "training_mean");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_BYTE *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 88))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v89 = v99;
    if (v99)
    {
      v90 = (unint64_t *)&v99->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "training_std");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_BYTE *)(a2 + 21) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 88))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v92 = v99;
    if (v99)
    {
      v93 = (unint64_t *)&v99->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    std::string::basic_string[abi:ne180100]<0>(v96, "spatial_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v98 + 24))(v98, __p))
      *(_DWORD *)(a2 + 72) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v98 + 40))(v98, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v50 = v99;
    if (!v99)
      goto LABEL_311;
    v95 = (unint64_t *)&v99->__shared_owners_;
    do
      v52 = __ldaxr(v95);
    while (__stlxr(v52 - 1, v95));
    goto LABEL_309;
  }
  std::string::basic_string[abi:ne180100]<0>(v96, "C");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, a2);
  if (v101 < 0)
    operator delete(__p[0]);
  v5 = v99;
  if (v99)
  {
    v6 = (unint64_t *)&v99->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v97 < 0)
    operator delete(v96[0]);
  if (*(_DWORD *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "naive_backward");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, a2 + 32);
    if (v101 < 0)
      operator delete(__p[0]);
    v8 = v99;
    if (v99)
    {
      v9 = (unint64_t *)&v99->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  v11 = (_DWORD *)(a2 + 4);
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "training");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, a2 + 4);
    if (v101 < 0)
      operator delete(__p[0]);
    v12 = v99;
    if (v99)
    {
      v13 = (unint64_t *)&v99->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
    if (*v11)
    {
      std::string::basic_string[abi:ne180100]<0>(v96, "training_eps");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 216))(v98, __p, a2 + 12);
      if (v101 < 0)
        operator delete(__p[0]);
      v15 = v99;
      if (v99)
      {
        v16 = (unint64_t *)&v99->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (v97 < 0)
        operator delete(v96[0]);
      if (*v11)
      {
        std::string::basic_string[abi:ne180100]<0>(v96, "training_momentum");
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
        (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 216))(v98, __p, a2 + 16);
        if (v101 < 0)
          operator delete(__p[0]);
        v18 = v99;
        if (v99)
        {
          v19 = (unint64_t *)&v99->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (v97 < 0)
          operator delete(v96[0]);
        if (*v11)
        {
          std::string::basic_string[abi:ne180100]<0>(v96, "training_instancenorm");
          Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, a2 + 8);
          if (v101 < 0)
            operator delete(__p[0]);
          v21 = v99;
          if (v99)
          {
            v22 = (unint64_t *)&v99->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v97 < 0)
            operator delete(v96[0]);
        }
      }
    }
  }
  if (*(_DWORD *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, a2 + 28);
    if (v101 < 0)
      operator delete(__p[0]);
    v24 = v99;
    if (v99)
    {
      v25 = (unint64_t *)&v99->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  if (*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "fused_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, a2 + 24);
    if (v101 < 0)
      operator delete(__p[0]);
    v27 = v99;
    if (v99)
    {
      v28 = (unint64_t *)&v99->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  if (*(_DWORD *)(a2 + 28) == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "leaky_relu_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 216))(v98, __p, a2 + 36);
    if (v101 < 0)
      operator delete(__p[0]);
    v30 = v99;
    if (v99)
    {
      v31 = (unint64_t *)&v99->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  if (*(_DWORD *)(a2 + 60))
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "training_subsampling");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, a2 + 60);
    if (v101 < 0)
      operator delete(__p[0]);
    v33 = v99;
    if (v99)
    {
      v34 = (unint64_t *)&v99->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  if (*(_DWORD *)(a2 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "generate_mean_ivar");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, a2 + 64);
    if (v101 < 0)
      operator delete(__p[0]);
    v36 = v99;
    if (v99)
    {
      v37 = (unint64_t *)&v99->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  if (*(float *)(a2 + 68) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "regularization_eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 216))(v98, __p, a2 + 68);
    if (v101 < 0)
      operator delete(__p[0]);
    v39 = v99;
    if (v99)
    {
      v40 = (unint64_t *)&v99->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  if (*(_BYTE *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "training_mean");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 208))(v98, __p, a2 + 20);
    if (v101 < 0)
      operator delete(__p[0]);
    v42 = v99;
    if (v99)
    {
      v43 = (unint64_t *)&v99->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  if (*(_BYTE *)(a2 + 21))
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "training_std");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 208))(v98, __p, a2 + 21);
    if (v101 < 0)
      operator delete(__p[0]);
    v45 = v99;
    if (v99)
    {
      v46 = (unint64_t *)&v99->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v97 < 0)
      operator delete(v96[0]);
  }
  v49 = *(_DWORD *)(a2 + 72);
  v48 = a2 + 72;
  if (v49 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "spatial_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v96, &v98);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v98 + 160))(v98, __p, v48);
    if (v101 < 0)
      operator delete(__p[0]);
    v50 = v99;
    if (!v99)
      goto LABEL_311;
    v51 = (unint64_t *)&v99->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
LABEL_309:
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
LABEL_311:
    if (v97 < 0)
      operator delete(v96[0]);
  }
}

void sub_190E6DBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id create_mps_neuron(void *a1, int a2, float a3, float a4)
{
  Espresso *v7;
  const char *v8;
  Espresso *v9;
  void *v10;
  Class *v11;
  Class *v12;
  Class *v13;
  id v14;
  double v15;
  id v16;
  double v17;
  double v18;
  uint64_t v19;
  NSObject *v21;
  uint8_t v22[16];

  v7 = a1;
  v9 = v7;
  v10 = 0;
  v11 = (Class *)0x1E0CC6D60;
  v12 = (Class *)0x1E0CC6D58;
  v13 = (Class *)0x1E0CC6D78;
  switch(a2)
  {
    case 0:
      v14 = objc_alloc(MEMORY[0x1E0CC6D58]);
      a3 = 0.0;
      goto LABEL_8;
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_13;
    case 4:
    case 9:
    case 11:
    case 13:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      break;
    case 5:
      goto LABEL_5;
    case 6:
      v13 = (Class *)0x1E0CC6D50;
      goto LABEL_5;
    case 7:
      v13 = (Class *)0x1E0CC6D48;
LABEL_5:
      v16 = objc_alloc(*v13);
      goto LABEL_11;
    case 8:
      v12 = (Class *)0x1E0CC6D38;
LABEL_7:
      v14 = objc_alloc(*v12);
LABEL_8:
      *(float *)&v15 = a3;
      v19 = objc_msgSend(v14, "initWithDevice:a:", v9, v15);
      goto LABEL_14;
    case 10:
      v13 = (Class *)0x1E0CC6D68;
LABEL_10:
      v16 = objc_alloc(*v13);
      a3 = 1.0;
      a4 = 1.0;
LABEL_11:
      *(float *)&v17 = a3;
      *(float *)&v18 = a4;
      v19 = objc_msgSend(v16, "initWithDevice:a:b:", v9, v17, v18);
      goto LABEL_14;
    case 12:
      v11 = (Class *)0x1E0CC6D70;
LABEL_13:
      v19 = objc_msgSend(objc_alloc(*v11), "initWithDevice:", v7);
LABEL_14:
      v10 = (void *)v19;
      break;
    default:
      Espresso::espresso_os_log_subsystem(v7, v8);
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v22 = 0;
        _os_log_debug_impl(&dword_190DAF000, v21, OS_LOG_TYPE_DEBUG, "activation may be unsupported; attempting fallback in dispatch.",
          v22,
          2u);
      }

      v10 = 0;
      break;
  }

  return v10;
}

void sub_190E6DE64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id Espresso::select_metal_device(Espresso *this)
{
  int v1;
  id v2;
  void *v3;
  std::logic_error *exception;

  v1 = (int)this;
  v2 = MTLCreateSystemDefaultDevice();
  v3 = v2;
  if ((v1 + 3) <= 1 && (objc_msgSend(v2, "supportsFeatureSet:", 6) & 1) == 0)
  {

LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Metal device not found.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!v3)
    goto LABEL_6;
  return v3;
}

void sub_190E6DF10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::context::context<objc_object  {objcproto9MTLDevice}* {__strong}>(uint64_t a1, _QWORD *a2, void *a3)
{
  id v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  __int128 v25;

  v5 = a3;
  Espresso::context_metal::context_metal(a1, a2, v5);
  *(_QWORD *)a1 = &off_1E2DAC780;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v25);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 24, &v25);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  objc_msgSend(*(id *)(a1 + 160), "setKernelPrefix:", CFSTR("TARR_"));
  if ((**(unsigned int (***)(_QWORD))*a2)(*a2) != 50002)
  {
    v21 = 50002;
    Espresso::abstract_engine_factory::shared(&v25);
    Espresso::abstract_engine_factory::engine_for_platform(v25, &v21, &v22);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = operator new(0x110uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_1E2DB99F8;
    v13 = Espresso::MPSEngine::context::context<objc_object  {objcproto9MTLDevice}* {__strong}>(v12 + 3, &v22, v5);
    v12[3] = &off_1E2D72C40;
    *((_WORD *)v12 + 132) = 1;
    *((_BYTE *)v12 + 68) = 1;
    *((_BYTE *)v12 + 80) = 1;
    *(_QWORD *)&v24 = v13;
    *((_QWORD *)&v24 + 1) = v12;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 224, &v24);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 224) + 240) = 0;
  }

  return a1;
}

void sub_190E6E140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  id *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  Espresso::context_metal::~context_metal(v16);

  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::context::context<int>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;

  v6 = Espresso::context_metal::context_metal(a1, a2, a3);
  *(_QWORD *)v6 = &off_1E2DAC780;
  *(_QWORD *)(v6 + 224) = 0;
  v7 = v6 + 224;
  *(_QWORD *)(v6 + 232) = 0;
  *(_BYTE *)(v6 + 44) = 1;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v27);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 24, &v27);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  objc_msgSend(*(id *)(a1 + 160), "setKernelPrefix:", CFSTR("TARR_"));
  if ((**(unsigned int (***)(_QWORD))*a2)(*a2) != 50002)
  {
    v23 = 50002;
    Espresso::abstract_engine_factory::shared(&v27);
    Espresso::abstract_engine_factory::engine_for_platform(v27, &v23, &v24);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = operator new(0x110uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1E2DB99F8;
    v15 = Espresso::MPSEngine::context::context<int>(v14 + 3, &v24, a3);
    v14[3] = &off_1E2D72C40;
    *((_WORD *)v14 + 132) = 1;
    *((_BYTE *)v14 + 68) = 1;
    *((_BYTE *)v14 + 80) = 1;
    *(_QWORD *)&v26 = v15;
    *((_QWORD *)&v26 + 1) = v14;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v7, &v26);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    *(_BYTE *)(*(_QWORD *)v7 + 240) = 0;
  }
  return a1;
}

void sub_190E6E39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  id *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *v19;

  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  Espresso::context_metal::~context_metal(v15);
  _Unwind_Resume(a1);
}

uint64_t Espresso::wisdom_trainer2::wisdom_trainer2(uint64_t a1, const std::string *a2)
{
  char *v4;

  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = 1006834287;
  *(_DWORD *)(a1 + 24) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 32), "");
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  std::string::operator=((std::string *)(a1 + 56), a2);
  *(_QWORD *)a1 = 0x200000002;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 144) = 0;
  v4 = getenv("ESPRESSO_TUNELOG");
  if (v4)
    *(_QWORD *)(a1 + 136) = fopen(v4, "w");
  return a1;
}

void sub_190E6E4C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 120) = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(_QWORD **)(v1 + 96));
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t Espresso::context_metal::context_metal(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  id v6;
  void *v7;

  v5 = Espresso::abstract_context::abstract_context(a1, a2);
  *(_QWORD *)v5 = &off_1E2D60E20;
  *(_QWORD *)(v5 + 144) = 0;
  *(_DWORD *)(v5 + 168) = 1082130432;
  *(_QWORD *)(v5 + 176) = 1;
  *(_DWORD *)(v5 + 188) = 1;
  *(_QWORD *)(v5 + 160) = 0;
  *(_BYTE *)(v5 + 172) = 0;
  *(_BYTE *)(v5 + 184) = 0;
  *(_QWORD *)(v5 + 200) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  *(_QWORD *)(v5 + 192) = 0;
  *(_DWORD *)(v5 + 216) = 0;
  *(_DWORD *)(v5 + 152) = a3;
  *(_DWORD *)(v5 + 156) = 8;
  v6 = MTLCreateSystemDefaultDevice();
  v7 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v6;

  Espresso::context_metal::setup(a1, 0);
  return a1;
}

void sub_190E6E598(_Unwind_Exception *a1)
{
  id *v1;

  Espresso::abstract_context::~abstract_context(v1);
  _Unwind_Resume(a1);
}

void Espresso::context_metal::setup(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  EspressoMetalKernelsCache *v8;
  void *v9;
  std::runtime_error *exception;
  id v11;

  v11 = a2;
  if (!*(_QWORD *)(a1 + 144))
    Espresso::throw_exception_selector<Espresso::device_not_found_error>("Can't find metal device");
  pthread_mutex_lock(&Espresso::g_mutex);
  objc_msgSend(*(id *)(a1 + 144), "name");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = objc_msgSend(v3, "UTF8String");

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 144), "name");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    strncpy(Espresso::context_metal::last_device_name, (const char *)objc_msgSend(v5, "UTF8String"), 0xFFuLL);

    byte_1ECFC44F7 = 0;
  }
  pthread_mutex_unlock(&Espresso::g_mutex);
  if (v11)
    v6 = v11;
  else
    v6 = (id)objc_msgSend(*(id *)(a1 + 144), "newCommandQueueWithMaxCommandBufferCount:", *(int *)(a1 + 156));
  v7 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v6;

  if (!*(_QWORD *)(a1 + 192))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: can't create metal command queue");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_BYTE *)(a1 + 184) = objc_msgSend(*(id *)(a1 + 144), "supportsFeatureSet:", 4) ^ 1;
  v8 = -[EspressoMetalKernelsCache initWithDevice:]([EspressoMetalKernelsCache alloc], "initWithDevice:", *(_QWORD *)(a1 + 144));
  v9 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v8;

}

void sub_190E6E720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  __cxa_free_exception(v10);

  _Unwind_Resume(a1);
}

void sub_190E6E844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Espresso::context_metal::context_metal(uint64_t a1, _QWORD *a2, void *a3)
{
  id v6;

  v6 = a3;
  Espresso::abstract_context::abstract_context(a1, a2);
  *(_QWORD *)a1 = &off_1E2D60E20;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0x800000000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1082130432;
  *(_BYTE *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 176) = 1;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 120) = 1;
  objc_storeStrong((id *)(a1 + 144), a3);
  *(_DWORD *)(a1 + 152) = -1;
  if (!*(_QWORD *)(a1 + 144))
    Espresso::throw_exception_selector<Espresso::device_not_found_error>("Can't find metal device");
  Espresso::context_metal::setup(a1, 0);

  return a1;
}

{
  id v5;
  uint64_t v6;
  void *v7;

  v5 = a3;
  Espresso::abstract_context::abstract_context(a1, a2);
  *(_QWORD *)a1 = &off_1E2D60E20;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0x800000000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1082130432;
  *(_BYTE *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 176) = 1;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 120) = 1;
  objc_msgSend(v5, "device");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v6;

  *(_DWORD *)(a1 + 152) = -1;
  if (!*(_QWORD *)(a1 + 144))
    Espresso::throw_exception_selector<Espresso::device_not_found_error>("Can't find metal device");
  Espresso::context_metal::setup(a1, v5);

  return a1;
}

void sub_190E6E938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_dtype_get_element_size(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCD860;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E6EA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_create_from_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCC6E0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E6EAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, char a9)
{
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *a6;
  v17 = a6[1];
  v42 = *a6;
  v43 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(&v49, a7, a8, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v49);
    size = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
    if (v49.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 2 * *(int *)(*a1 + 8) * (uint64_t)*(int *)(*a1 + 12))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v46, a5);
      v34 = std::string::insert(&v46, 0, "Unexpected size s=");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = std::string::append(&v47, "/blob=");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, 2 * *(int *)(*a1 + 8) * (uint64_t)*(int *)(*a1 + 12));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v45;
      else
        v38 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v39 = v45.__r_.__value_.__l.__size_;
      v40 = std::string::append(&v48, (const std::string::value_type *)v38, v39);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v49);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 16), a4, a5);
    v23 = (std::__shared_weak_count *)v43;
    if (!v43)
      goto LABEL_30;
LABEL_26:
    v29 = (unint64_t *)&v23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_30;
  }
  if (!v16 || (a9 & 1) != 0)
  {
    if (!v16)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v24 = (char *)operator new(0x58uLL);
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = &off_1E2DBEFF0;
  *((_QWORD *)v24 + 3) = &off_1E2DA13D0;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *((_DWORD *)v24 + 8) = a7;
  *((_DWORD *)v24 + 9) = a8;
  *((_QWORD *)v24 + 5) = a4;
  v24[48] = 0;
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 24);
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v49);
  v25 = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
  if (v49.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (_QWORD *)(*a1 + 32);
  v23 = (std::__shared_weak_count *)v43;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v28, v42, v43);
  if (v43)
    goto LABEL_26;
LABEL_30:
  if (a3)
  {
    v31 = (unint64_t *)&a3->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_190E6EE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a18 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v39 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v38);
  goto LABEL_14;
}

uint64_t espresso_buffer_unpack_tensor_shape(int32x4_t *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  int32x4_t v14;
  int v15;
  int v16;
  __int128 v17;
  void *__p[2];
  uint64_t v19;

  if (a1)
  {
    if (a3)
    {
      v5 = a1->u64[1];
      if (v5 <= 0xA)
      {
        v6 = a1[7].i64[0];
        v17 = 0u;
        *(_OWORD *)__p = 0u;
        v19 = 0;
        v14 = vuzp1q_s32(a1[5], a1[6]);
        v15 = v6;
        v16 = v5;
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v13, (const Espresso::layer_shape *)&v14, 0);
        v7 = v16;
        if (a2)
          *a2 = v16;
        if (!(_DWORD)v7)
          goto LABEL_10;
        v8 = (int *)v13;
        v9 = a3;
        v10 = v7;
        do
        {
          v11 = *v8++;
          *v9++ = v11;
          --v10;
        }
        while (v10);
        if (v7 <= 9)
LABEL_10:
          bzero(&a3[v7], 80 - 8 * v7);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_190E6EFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  EspressoLight *v21;
  std::exception *v22;

  if (__p)
    operator delete(__p);
  if (a2 == 1)
  {
    v21 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v21, v22);
    __cxa_end_catch();
    JUMPOUT(0x190E6EFE8);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANERuntimeEngine::compiler::__forward_segment(uint64_t a1, uint64_t *a2, int a3, const Espresso::net_compiler_segment_based::segment_t *a4)
{
  int v4;
  uint64_t v6;
  uint64_t *i;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  char *v27;
  const void *v28;
  _DWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  char *v43;
  void **p_begin;
  Espresso *v45;
  const char *v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t qos;
  uint64_t v86;
  void *v87;
  Espresso *v88;
  const char *v89;
  NSObject *v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  void *v94;
  id *v95;
  int v96;
  void *v97;
  uint64_t v98;
  void *v99;
  int v100;
  id v101;
  void *v102;
  int v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void *v106;
  BOOL v107;
  _QWORD *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  void *v115;
  _BOOL4 v116;
  Espresso *v117;
  const char *v118;
  NSObject *v119;
  const char *v120;
  NSObject *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  BOOL v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  id v133;
  uint64_t v134;
  const char *v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  BOOL v141;
  uint64_t v142;
  uint64_t *v143;
  void *v144;
  void *v145;
  void *v146;
  std::runtime_error *v147;
  void *v148;
  _QWORD *v149;
  const char *v150;
  std::runtime_error *v151;
  std::runtime_error *exception;
  std::runtime_error *v153;
  void ***v154;
  _QWORD **v155;
  uint64_t *v156;
  id v157;
  int v159;
  uint64_t v160;
  int v162;
  int v163;
  id v164;
  std::__shared_weak_count *val;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[4];
  id v170;
  id v171[2];
  void **v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  _QWORD *v179;
  std::__shared_weak_count *v180;
  int v181;
  id location;
  _QWORD *v183;
  std::__shared_weak_count *v184;
  id v185;
  std::__shared_weak_count *v186;
  std::vector<std::string> *v187;
  std::__shared_weak_count *v188;
  std::vector<std::string> __p[2];
  std::vector<std::string> v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  _BYTE buf[48];
  std::vector<std::string> v194;
  uint64_t v195;

  v4 = a3;
  v195 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 392);
  if (!v6)
    goto LABEL_21;
  for (i = *(uint64_t **)(v6 + 16); i; i = (uint64_t *)*i)
  {
    v8 = *((_DWORD *)i + 8);
    if (v8 <= a3)
    {
      if (v8 >= a3)
      {
        v16 = a3;
        goto LABEL_19;
      }
      ++i;
    }
  }
  v11 = *(_QWORD *)(v6 + 40);
  v9 = v6 + 40;
  v10 = v11;
  v16 = a3;
  if (v11)
  {
    v12 = v9;
    do
    {
      v13 = *(_DWORD *)(v10 + 28);
      v14 = v13 < a3;
      if (v13 >= a3)
        v15 = (uint64_t *)v10;
      else
        v15 = (uint64_t *)(v10 + 8);
      if (!v14)
        v12 = v10;
      v10 = *v15;
    }
    while (*v15);
    v16 = a3;
    if (v12 != v9)
    {
      v16 = a3;
      if (*(_DWORD *)(v12 + 28) <= a3)
        v16 = *(_DWORD *)(v12 + 32);
    }
  }
LABEL_19:
  v17 = *(_QWORD *)(*a2 + 64);
  if (!v17
    || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v17 + 48), v16))
  {
LABEL_21:
    v191 = 0;
    v192 = 0;
    v18 = *(std::__shared_weak_count **)(a1 + 16);
    if (v18 && (v192 = std::__shared_weak_count::lock(v18)) != 0)
    {
      v19 = *(_QWORD *)(a1 + 8);
      v191 = v19;
    }
    else
    {
      v19 = 0;
    }
    v160 = v19;
    kdebug_trace();
    if (!v191)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memset(&v190, 0, sizeof(v190));
    memset(__p, 0, sizeof(__p));
    v20 = *(_QWORD *)(a1 + 392);
    v159 = v4;
    if (v20)
    {
      Espresso::analysis_ane_multi_head::get_combo_for_coalesced_segment_given_bound_outputs((Espresso *)buf, v20, *a2, v4, v191);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      __p[0] = *(std::vector<std::string> *)buf;
      memset(buf, 0, 24);
      std::vector<std::string>::__vdeallocate(&__p[1]);
      __p[1] = *(std::vector<std::string> *)&buf[24];
      memset(&buf[24], 0, 24);
      std::vector<std::string>::__vdeallocate(&v190);
      v190 = v194;
      memset(&v194, 0, sizeof(v194));
      v187 = &v194;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
      v187 = (std::vector<std::string> *)&buf[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (__p[0].__begin_ == __p[0].__end_)
        goto LABEL_58;
    }
    v21 = *a2;
    if (*a2
    {
      v23 = a2[1];
      v187 = (std::vector<std::string> *)v22;
      v188 = (std::__shared_weak_count *)v23;
      if (!v23)
      {
LABEL_40:
        v26 = (unsigned __int8 *)*((_QWORD *)a4 + 4);
        if (v26)
        {
          do
          {
            *(_QWORD *)buf = v26 + 16;
            v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v191 + 136, v26 + 16, (__int128 **)buf);
            v28 = (const void *)*((_QWORD *)v27 + 5);
            if (!v28
            {
              v185 = 0;
              v186 = 0;
              v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(v147, (const std::string *)buf);
              __cxa_throw(v147, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v30 = (std::__shared_weak_count *)*((_QWORD *)v27 + 6);
            v185 = v29;
            v186 = v30;
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldxr(p_shared_owners);
              while (__stxr(v32 + 1, p_shared_owners));
              v162 = v29[45];
              do
                v33 = __ldaxr(p_shared_owners);
              while (__stlxr(v33 - 1, p_shared_owners));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            else
            {
              v162 = v29[45];
            }
            v26 = *(unsigned __int8 **)v26;
          }
          while (v26);
          v4 = v159;
          if (v162 < 1)
          {
LABEL_53:
            v34 = v188;
            if (v188)
            {
              v35 = (unint64_t *)&v188->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
LABEL_58:
            *(_QWORD *)buf = &v190;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            *(_QWORD *)buf = &__p[1];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            if (__p[0].__begin_)
            {
              __p[0].__end_ = __p[0].__begin_;
              operator delete(__p[0].__begin_);
            }
            v37 = v192;
            if (v192)
            {
              v38 = (unint64_t *)&v192->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            return;
          }
        }
        else
        {
          v162 = 1;
        }
        v163 = 0;
        v156 = &v177;
        v154 = &v172;
        v155 = &v179;
        while (1)
        {
          v185 = 0;
          v186 = 0;
          if (__p[0].__begin_ == __p[0].__end_)
            v40 = (void *)Espresso::ANERuntimeEngine::compiler::create_ane_request((Espresso::ANERuntimeEngine::compiler *)a1, (uint64_t)a2, &v191, v4, a4, v163);
          else
            v40 = (void *)Espresso::ANERuntimeEngine::compiler::create_ane_request_for_runtime_segment_combination((uint64_t **)a1, (uint64_t)a2, &v191, (int **)__p, v163);
          v42 = v41;
          v185 = v40;
          v186 = v41;
          v164 = v40;
          val = v42;
          v43 = (char *)operator new(0x58uLL);
          *((_QWORD *)v43 + 1) = 0;
          *((_QWORD *)v43 + 2) = 0;
          *(_QWORD *)v43 = &off_1E2DB5900;
          *(_OWORD *)(v43 + 40) = 0u;
          *(_OWORD *)(v43 + 56) = 0u;
          *(_OWORD *)(v43 + 72) = 0u;
          *(_OWORD *)(v43 + 24) = 0u;
          v183 = v43 + 24;
          v184 = (std::__shared_weak_count *)v43;
          std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)&v183, v183, (uint64_t)v183);
          ++*(_QWORD *)(a1 + 304);
          Espresso::ANERuntimeEngine::compiler::set_compiler_analytics_binary_path((_QWORD *)a1, (uint64_t)(v43 + 64));
          objc_initWeak(&location, val);
          p_begin = (void **)&v187->__begin_;
          if (LOBYTE(v187[4].__begin_))
          {
            std::mutex::lock((std::mutex *)&v187[8].__end_);
            v47 = p_begin[19];
            v48 = (uint64_t)p_begin[39] + 1;
            p_begin[39] = (void *)v48;
            v49 = (char *)p_begin[20];
            v50 = (v49 - v47) >> 4;
            if (*((_BYTE *)p_begin + 328))
            {
              Espresso::espresso_os_log_subsystem(v45, v46);
              v51 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134218240;
                *(_QWORD *)&buf[4] = v48;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v50;
                _os_log_debug_impl(&dword_190DAF000, v51, OS_LOG_TYPE_DEBUG, "ANE Batch: Registered new async request id %zu, at array index %zu\n", buf, 0x16u);
              }

              v47 = p_begin[19];
              v49 = (char *)p_begin[20];
              v52 = (v49 - v47) >> 4;
            }
            else
            {
              v52 = (v49 - v47) >> 4;
            }
            v53 = v52 + 1;
            if (v52 + 1 > (unint64_t)(((_BYTE *)p_begin[21] - v47) >> 4))
            {
              std::vector<Espresso::ANERuntimeEngine::async_request_status>::reserve((char **)p_begin + 19, (unint64_t)p_begin[18] + v53);
              v47 = p_begin[19];
              v49 = (char *)p_begin[20];
              v4 = v159;
            }
            v54 = (v49 - v47) >> 4;
            if (v53 <= v54)
            {
              if (v53 < v54)
                p_begin[20] = &v47[16 * v53];
            }
            else
            {
              v55 = v53 - v54;
              v56 = p_begin[21];
              if (v53 - v54 <= (v56 - v49) >> 4)
              {
                bzero(v49, 16 * v55);
                p_begin[20] = &v49[16 * v55];
                v4 = v159;
              }
              else
              {
                if (v53 >> 60)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v57 = v56 - v47;
                v58 = v57 >> 3;
                if (v57 >> 3 <= v53)
                  v58 = v53;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
                  v59 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v59 = v58;
                v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v59);
                v62 = v61;
                v63 = &v60[16 * v54];
                bzero(v63, 16 * v55);
                v65 = (char *)p_begin[19];
                v64 = (char *)p_begin[20];
                v66 = v63;
                if (v64 != v65)
                {
                  do
                  {
                    v67 = *((_QWORD *)v64 - 2);
                    v64 -= 16;
                    v68 = *(_QWORD *)(v64 + 5);
                    *((_QWORD *)v66 - 2) = v67;
                    v66 -= 16;
                    *(_QWORD *)(v66 + 5) = v68;
                  }
                  while (v64 != v65);
                  v64 = (char *)p_begin[19];
                }
                p_begin[19] = v66;
                p_begin[20] = &v63[16 * v55];
                p_begin[21] = &v60[16 * v62];
                v4 = v159;
                if (v64)
                  operator delete(v64);
              }
            }
            v69 = (uint64_t)p_begin[19] + 16 * v50;
            *(_BYTE *)(v69 + 12) = 1;
            *(_QWORD *)v69 = v48;
            std::mutex::unlock((std::mutex *)(p_begin + 25));
            v169[0] = MEMORY[0x1E0C809B0];
            v169[1] = 3321888768;
            v169[2] = ___ZN8Espresso16ANERuntimeEngine8compiler17__forward_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEiRKNS_26net_compiler_segment_based9segment_tE_block_invoke;
            v169[3] = &unk_1E2DC3D18;
            v171[1] = (id)a1;
            v172 = p_begin;
            v173 = v188;
            if (v188)
            {
              v70 = (unint64_t *)&v188->__shared_owners_;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            v181 = v4;
            v174 = v50;
            v175 = a1;
            v176 = v160;
            objc_copyWeak(v171, &location);
            v177 = v191;
            v178 = v192;
            if (v192)
            {
              v72 = (unint64_t *)&v192->__shared_owners_;
              do
                v73 = __ldxr(v72);
              while (__stxr(v73 + 1, v72));
            }
            v179 = v183;
            v180 = v184;
            if (v184)
            {
              v74 = (unint64_t *)&v184->__shared_owners_;
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
            }
            v170 = v164;
            -[std::__shared_weak_count setCompletionHandler:](val, "setCompletionHandler:", v169);

            v76 = v180;
            if (v180)
            {
              v77 = (unint64_t *)&v180->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v79 = v178;
            if (v178)
            {
              v80 = (unint64_t *)&v178->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            objc_destroyWeak(v171);
            v82 = v173;
            if (v173)
            {
              v83 = (unint64_t *)&v173->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
          }
          else
          {
            -[std::__shared_weak_count setCompletionHandler:](val, "setCompletionHandler:", 0, v154, v155, v156);
          }
          if (*(_BYTE *)(a1 + 289))
          {
            if (*(_DWORD *)(a1 + 292))
              goto LABEL_122;
          }
          else if (!*(_BYTE *)(*(_QWORD *)(a1 + 104) + 139))
          {
LABEL_122:
            qos = Espresso::ANERuntimeEngine::compiler::get_qos(a1);
            goto LABEL_125;
          }
          qos = objc_msgSend(MEMORY[0x1E0CFDF88], "aneRealTimeTaskQoS", v154, v155, v156);
LABEL_125:
          v86 = qos;
          objc_msgSend(*(id *)(a1 + 184), "objectForKeyedSubscript:", v164, v154, v155, v156);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          Espresso::ANERuntimeEngine::compiler::add_ane_eval_profiling_options(a1, &v185);
          if (*(_BYTE *)(a1 + 296))
          {
            Espresso::espresso_os_log_subsystem(v88, v89);
            v90 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
            {
              v91 = (_QWORD *)(v191 + 592);
              if (*(char *)(v191 + 615) < 0)
                v91 = (_QWORD *)*v91;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v91;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v86;
              *(_WORD *)&buf[18] = 2112;
              *(_QWORD *)&buf[20] = v87;
              _os_log_impl(&dword_190DAF000, v90, OS_LOG_TYPE_INFO, "[__forward_segment] ane_evaluate: net=%s qos=%d options=%@", buf, 0x1Cu);
            }

          }
          v92 = *(void **)(a1 + 192);
          if (*(_BYTE *)(a1 + 200))
          {
            objc_msgSend(v92, "objectForKeyedSubscript:", v164);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            v94 = v93;
            if (!v93)
            {
              *(_QWORD *)buf = objc_msgSend(objc_retainAutorelease(v164), "UTF8String");
              Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find model for key %s", buf);
            }
            v168 = 0;
            v95 = (id *)&v168;
            v96 = objc_msgSend(v93, "evaluateWithQoS:options:request:error:", v86, v87, val, &v168);
            goto LABEL_140;
          }
          objc_msgSend(v92, "objectForKeyedSubscript:", v164);
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v94)
          {
            *(_QWORD *)buf = objc_msgSend(objc_retainAutorelease(v164), "UTF8String");
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find model for key %s", buf);
          }
          if (*(_BYTE *)(a1 + 289))
          {
            if (!*(_DWORD *)(a1 + 292))
              goto LABEL_139;
          }
          else if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 139))
          {
LABEL_139:
            v99 = *(void **)(a1 + 136);
            v167 = 0;
            v95 = (id *)&v167;
            v96 = objc_msgSend(v99, "evaluateRealTimeWithModel:options:request:error:", v94, v87, val, &v167);
            goto LABEL_140;
          }
          v97 = *(void **)(a1 + 136);
          v98 = Espresso::ANERuntimeEngine::compiler::get_qos(a1);
          v166 = 0;
          v95 = (id *)&v166;
          v96 = objc_msgSend(v97, "evaluateWithModel:options:request:qos:error:", v94, v87, val, v98, &v166);
LABEL_140:
          v100 = v96;
          v101 = *v95;

          -[std::__shared_weak_count completionHandler](val, "completionHandler");
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          if (v102)
            v103 = 0;
          else
            v103 = v100;
          if (v103 == 1 && (v104 = *(_QWORD *)(v191 + 1240)) != 0)
          {
            if (*(_QWORD *)(v104 + 1048))
            {
              v105 = v186;
              -[std::__shared_weak_count perfStats](v186, "perfStats");
              v106 = (void *)objc_claimAutoreleasedReturnValue();
              v107 = v106 == 0;

              if (!v107)
              {
                v108 = *(_QWORD **)(*(_QWORD *)(v191 + 1240) + 1048);
                -[std::__shared_weak_count perfStats](v105, "perfStats");
                v109 = (void *)objc_claimAutoreleasedReturnValue();
                v110 = objc_msgSend(v109, "hwExecutionTime");
                v111 = v110;
                v112 = (uint64_t *)v108[2];
                v113 = v108[3];
                if ((unint64_t)v112 >= v113)
                {
                  v125 = (uint64_t *)v108[1];
                  v126 = v112 - v125;
                  if ((unint64_t)(v126 + 1) >> 61)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v127 = v113 - (_QWORD)v125;
                  v128 = (uint64_t)(v113 - (_QWORD)v125) >> 2;
                  if (v128 <= v126 + 1)
                    v128 = v126 + 1;
                  v129 = v127 >= 0x7FFFFFFFFFFFFFF8;
                  v130 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v129)
                    v130 = v128;
                  if (v130)
                  {
                    v130 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v130);
                    v125 = (uint64_t *)v108[1];
                    v112 = (uint64_t *)v108[2];
                  }
                  else
                  {
                    v131 = 0;
                  }
                  v137 = (uint64_t *)(v130 + 8 * v126);
                  *v137 = v111;
                  v114 = v137 + 1;
                  while (v112 != v125)
                  {
                    v138 = *--v112;
                    *--v137 = v138;
                  }
                  v108[1] = v137;
                  v108[2] = v114;
                  v108[3] = v130 + 8 * v131;
                  if (v125)
                    operator delete(v125);
                }
                else
                {
                  *v112 = v110;
                  v114 = v112 + 1;
                }
                v108[2] = v114;

              }
              -[std::__shared_weak_count perfStatsArray](v105, "perfStatsArray");
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              if (v139)
              {
                -[std::__shared_weak_count perfStatsArray](v105, "perfStatsArray");
                v140 = (void *)objc_claimAutoreleasedReturnValue();
                v141 = objc_msgSend(v140, "count") == 0;

                if (!v141)
                {
                  v142 = *(_QWORD *)(*(_QWORD *)(v191 + 1240) + 1048);
                  std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(objc_retainAutorelease(v164), "UTF8String"));
                  if (*((char *)v183 + 63) < 0)
                  {
                    v143 = v183 + 5;
                    std::string::__init_copy_ctor_external((std::string *)&buf[24], (const std::string::value_type *)v183[5], v183[6]);
                  }
                  else
                  {
                    *(_OWORD *)&buf[24] = *(_OWORD *)(v183 + 5);
                    v143 = v183 + 5;
                    *(_QWORD *)&buf[40] = v183[7];
                  }
                  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::push_back[abi:ne180100]((void **)(v142 + 32), (__int128 *)buf);
                  if ((buf[47] & 0x80000000) != 0)
                    operator delete(*(void **)&buf[24]);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  -[std::__shared_weak_count perfStatsArray](v105, "perfStatsArray");
                  v144 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v144, "objectAtIndexedSubscript:", 0);
                  v145 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v145, "stats");
                  v146 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_QWORD *)buf = objc_msgSend(v146, "ioSurface");
                  Espresso::ANERuntimeEngine::compiler::write_iosurface((IOSurfaceRef *)buf, v143);

                }
              }
            }
          }
          else
          {

          }
          -[std::__shared_weak_count completionHandler](val, "completionHandler");
          v115 = (void *)objc_claimAutoreleasedReturnValue();
          v116 = v115 == 0;

          if (v116)
            v117 = (Espresso *)kdebug_trace();
          if ((v100 & 1) == 0)
          {
            Espresso::espresso_os_log_subsystem(v117, v118);
            v119 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
            {
              v132 = objc_msgSend(v101, "code");
              objc_msgSend(v101, "description");
              v133 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v134 = objc_msgSend(v133, "UTF8String");
              v135 = "";
              if (v134)
              {
                objc_msgSend(v101, "description");
                v157 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v135 = (const char *)objc_msgSend(v157, "UTF8String");
              }
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)&buf[4] = v4;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v132;
              *(_WORD *)&buf[14] = 2080;
              *(_QWORD *)&buf[16] = v135;
              _os_log_error_impl(&dword_190DAF000, v119, OS_LOG_TYPE_ERROR, "[Espresso::ANERuntimeEngine::__forward_segment %d] evaluate[RealTime]WithModel returned 0; code=%d err=%s",
                buf,
                0x18u);
              if (v134)

            }
            if (objc_msgSend(v101, "code") != 5)
            {
              objc_msgSend(v101, "localizedDescription");
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              v149 = (_QWORD *)(v191 + 592);
              if (*(char *)(v191 + 615) < 0)
                v149 = (_QWORD *)*v149;
              if (v148)
                v150 = (const char *)objc_msgSend(objc_retainAutorelease(v148), "UTF8String");
              else
                v150 = "";
              Espresso::throw_exception_selector<Espresso::generic_error,char const*,char const*>("ANEF error: %s, %s", (uint64_t)v149, (uint64_t)v150);
            }
            Espresso::espresso_os_log_subsystem((Espresso *)5, v120);
            v121 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
            {
              v136 = (_QWORD *)(v191 + 592);
              if (*(char *)(v191 + 615) < 0)
                v136 = (_QWORD *)*v136;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v136;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v4;
              _os_log_error_impl(&dword_190DAF000, v121, OS_LOG_TYPE_ERROR, "[Espresso::overflow_error] %s:%d", buf, 0x12u);
            }

            if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 140))
            {
              v151 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
              Espresso::overflow_error::overflow_error(v151);
            }
          }

          objc_destroyWeak(&location);
          v122 = v184;
          if (v184)
          {
            v123 = (unint64_t *)&v184->__shared_owners_;
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }

          if (++v163 == v162)
            goto LABEL_53;
        }
      }
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v21 = *a2;
    }
    else
    {
      v187 = 0;
      v188 = 0;
    }
    if (!v21)
    {
      v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v153, "Invalid batch supplied");
      __cxa_throw(v153, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_40;
  }
}

void sub_190E700D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id location,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,char a61)
{
  uint64_t v61;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  Espresso::analysis_ane_multi_head::runtime_segment_combination_t::~runtime_segment_combination_t((Espresso::analysis_ane_multi_head::runtime_segment_combination_t *)&a61);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v61 - 208);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::set_compiler_analytics_binary_path(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v27 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = a1[1];
      v26 = v7;
      if (!v7)
        goto LABEL_34;
      v8 = *(_QWORD *)(v7 + 1240);
      if (!v8)
        goto LABEL_34;
      v9 = *(_QWORD *)(v8 + 1048);
      if (!v9)
        goto LABEL_34;
      if (*(char *)(v9 + 79) < 0)
      {
        if (!*(_QWORD *)(v9 + 64))
          goto LABEL_34;
      }
      else if (!*(_BYTE *)(v9 + 79))
      {
LABEL_34:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      if (*(char *)(v9 + 79) >= 0)
        v10 = *(unsigned __int8 *)(v9 + 79);
      else
        v10 = *(_QWORD *)(v9 + 64);
      v11 = &v24;
      std::string::basic_string[abi:ne180100]((uint64_t)&v24, v10 + 24);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if (v10)
      {
        if (*(char *)(v9 + 79) >= 0)
          v12 = (const void *)(v9 + 56);
        else
          v12 = *(const void **)(v9 + 56);
        memmove(v11, v12, v10);
      }
      strcpy((char *)v11 + v10, "/compiler_analytics_out_");
      std::to_string(&__p, a1[38]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v15 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = std::string::append(&v25, ".bin");
      v18 = v17->__r_.__value_.__r.__words[0];
      v28[0] = v17->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v20 = v28[0];
      *(_QWORD *)a2 = v18;
      *(_QWORD *)(a2 + 8) = v20;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v28 + 7);
      *(_BYTE *)(a2 + 23) = v19;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      goto LABEL_34;
    }
  }
}

void sub_190E70584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::add_ane_eval_profiling_options(uint64_t a1, id *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  id v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  Espresso *v14;
  const char *v15;
  NSObject *v16;
  void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  int v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3), (v22 = v5) == 0) || (v6 = *(_QWORD *)(a1 + 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v5;
  if (*(_QWORD *)(v6 + 1240))
  {
    v8 = *a2;
    v9 = *(_DWORD **)(*(_QWORD *)(v6 + 1240) + 1048);
    if (v9)
    {
      v10 = *v9 & 1 | (2 * ((*v9 >> 2) & 1)) & 0xFFFFFFFB | (4 * ((*v9 >> 1) & 1));
      v25 = *MEMORY[0x1E0CFE0A0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v10, v6, v22);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 184), "objectForKeyedSubscript:", v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addEntriesFromDictionary:", v12);

      Espresso::espresso_os_log_subsystem(v14, v15);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v20 = **(_DWORD **)(*(_QWORD *)(v6 + 1240) + 1048);
        *(_DWORD *)buf = 67109120;
        v24 = v20;
        _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::add_ane_eval_profiling_options] Add profiler option:%d", buf, 8u);
      }

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 184), "objectForKeyedSubscript:", v8, v6, v22);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "removeObjectForKey:", *MEMORY[0x1E0CFE0A0]);

    }
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_190E70808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::create_ane_request(Espresso::ANERuntimeEngine::compiler *a1, uint64_t a2, _QWORD *a3, int a4, const Espresso::net_compiler_segment_based::segment_t *a5, int a6)
{
  _QWORD *v10;
  uint64_t **v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  const struct __class_type_info *v15;
  const struct __class_type_info *v16;
  uint64_t v17;
  char *v18;
  const void *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  _QWORD *v27;
  const struct __class_type_info *v28;
  const struct __class_type_info *v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *i;
  uint64_t v44;
  char *v45;
  const void *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *j;
  uint64_t v58;
  char *v59;
  const void *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  Espresso::ANERuntimeEngine::compiler *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  signed int v76;
  signed int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  void *v84;
  void *v85;
  EspressoANEIOSurface *v86;
  void *v87;
  __IOSurface *v88;
  _DWORD *BaseAddress;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  std::string::size_type v94;
  uint64_t *v95;
  uint64_t *v96;
  char *v97;
  uint64_t v98;
  const void *v99;
  char *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  __int128 *v114;
  const void *v115;
  uint64_t v116;
  _WORD *v117;
  int v118;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *size;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  void *v139;
  _BYTE *v140;
  std::string *p_p;
  void *v142;
  void *v143;
  BOOL v144;
  NSObject *v145;
  void *v146;
  BOOL v147;
  Espresso *v148;
  const char *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  std::runtime_error *v158;
  std::runtime_error *v159;
  std::runtime_error *exception;
  std::runtime_error *v161;
  std::runtime_error *v162;
  std::runtime_error *v163;
  std::runtime_error *v164;
  std::runtime_error *v165;
  std::string *v166;
  __int128 v167;
  std::runtime_error *v168;
  unsigned int v169;
  uint64_t **v170;
  unsigned int v172;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  void *v177;
  Espresso::ANERuntimeEngine::compiler *v178;
  void *v179;
  void *v180;
  std::string v181;
  std::string __p;
  __int128 *v183;
  std::__shared_weak_count *v184;
  _QWORD v185[2];
  uint64_t v186;
  std::__shared_weak_count *v187;
  char *v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::string v194;
  uint64_t v195;
  std::string buf;
  void *v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v180 = (void *)objc_opt_new();
  v179 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::procedure_name_for_segment_and_configuration(&__p, a4, (uint64_t)a1 + 264);
  LODWORD(buf.__r_.__value_.__l.__data_) = a4;
  v172 = a4;
  v10 = std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<std::shared_ptr<Espresso::net> const&,Espresso::net_compiler_segment_based::segment_t const&>>((uint64_t *)a1 + 28, a4, &buf, a3, (uint64_t)a5);
  v178 = a1;
  if (v10[6] == 1)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v181, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v181 = __p;
  }
  else
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v11 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 63, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
    v12 = (unsigned __int8 *)v11[7];
    v13 = (unsigned __int8 *)v11[8];
    if (v12 == v13)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v175 = (uint64_t)(v10 + 3);
      v174 = a2;
      do
      {
        v17 = *a3 + 136;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, v12, (__int128 **)&buf);
        v19 = (const void *)*((_QWORD *)v18 + 5);
        if (!v19 || (v20 = __dynamic_cast(v19, v15, v16, 0)) == 0)
        {
          v188 = 0;
          v189 = 0;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &buf);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v21 = v20;
        v22 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
        v188 = (char *)v20;
        v189 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        if (v20[17] - v20[16] >= 8uLL)
        {
          v25 = v13;
          v26 = v14;
          v27 = a3;
          v28 = v16;
          v29 = v15;
          v30 = objc_msgSend(*(id *)(v20[27] + 8 * a6), "pixelFormat");
          v31 = v30;
          v33 = (_DWORD *)v21[16];
          v32 = (_DWORD *)v21[17];
          v34 = v33;
          if (v33 != v32)
          {
            while (*v34 != v30)
            {
              if (++v34 == v32)
              {
                v34 = v32;
                break;
              }
            }
          }
          if (v34 == v32)
          {
            v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v194, v31);
            v166 = std::string::insert(&v194, 0, "Unexpected 4cc format: ");
            v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v167;
            v166->__r_.__value_.__l.__size_ = 0;
            v166->__r_.__value_.__r.__words[2] = 0;
            v166->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v165, &buf);
            __cxa_throw(v165, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v35 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(v175, &buf, v12);
          if (!v35)
            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
          v14 = v26 + *(_QWORD *)(v35 + 64) * (v34 - v33);
          v15 = v29;
          v16 = v28;
          a3 = v27;
          v13 = v25;
          a2 = v174;
        }
        if (v22)
        {
          v36 = (unint64_t *)&v22->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v12 += 24;
      }
      while (v12 != v13);
    }
    Espresso::ANECompilerEngine::compiler::procedure_name_with_four_cc_configuration(&v181, (uint64_t)&__p, v14);
    a1 = v178;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v181;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v38 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 60, &__p, (__int128 **)&buf)+ 14);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v39 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 63, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v40 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 66, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
  v41 = (uint64_t)a1 + 432;
  Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_input_symbol_indices_for_procedure(v41, &__p);
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = v40;
  v169 = v38;
  Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_output_symbol_indices_for_procedure(v41, &__p);
  v177 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = (unsigned __int8 *)v39[7];
  for (i = (unsigned __int8 *)v39[8]; v42 != i; v42 += 24)
  {
    v44 = *a3 + 136;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, v42, (__int128 **)&buf);
    v46 = (const void *)*((_QWORD *)v45 + 5);
    if (!v46
    {
      *(_OWORD *)&v194.__r_.__value_.__l.__data_ = 0uLL;
      v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v158, &buf);
      __cxa_throw(v158, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v48 = (std::__shared_weak_count *)*((_QWORD *)v45 + 6);
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    v194.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = v47[27];
    if (a6 >= (unint64_t)((v47[28] - v51) >> 3))
    {
      v162 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v162, &buf);
      __cxa_throw(v162, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v52 = *(void **)(v51 + 8 * a6);
    if (!v52)
    {
      v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v161, &buf);
      __cxa_throw(v161, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v52, "ane_io_surfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v180, "addObject:", v53);

    if (v48)
    {
      v54 = (unint64_t *)&v48->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  v56 = (unsigned __int8 *)v170[7];
  for (j = (unsigned __int8 *)v170[8]; v56 != j; v56 += 24)
  {
    v58 = *a3 + 136;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v58, v56, (__int128 **)&buf);
    v60 = (const void *)*((_QWORD *)v59 + 5);
    if (!v60
    {
      *(_OWORD *)&v194.__r_.__value_.__l.__data_ = 0uLL;
      v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v159, &buf);
      __cxa_throw(v159, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v62 = (std::__shared_weak_count *)*((_QWORD *)v59 + 6);
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    v194.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = v61[27];
    if (a6 >= (unint64_t)((v61[28] - v65) >> 3))
    {
      v164 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v164, &buf);
      __cxa_throw(v164, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v66 = *(void **)(v65 + 8 * a6);
    if (!v66)
    {
      v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v163, &buf);
      __cxa_throw(v163, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v66, "ane_io_surfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v179, "addObject:", v67);

    if (v62)
    {
      v68 = (unint64_t *)&v62->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  v70 = v178;
  v71 = v172;
  if (*((_BYTE *)v178 + 312))
  {
    v192 = 0;
    v193 = 0;
    ANECGetMutableProcedureInfoSize();
    v190 = 0;
    v191 = 0;
    if ((int)v193 >= 1)
      v72 = v193 - 1;
    else
      v72 = v193 + 62;
    ANECGetMutableOperationInfoSize();
    v73 = (int)((v72 & 0xFFFFFFC0) + 64);
    v74 = v191 + v73 + 62;
    if ((int)v191 + (int)v73 - 1 >= 0)
      v74 = v191 + v73 - 1;
    v75 = v74 & 0xFFFFFFC0;
    v76 = (v74 & 0xFFFFFFC0) + 87;
    if (v76 < 0)
      v76 = v75 + 150;
    v77 = (v76 & 0xFFFFFFC0) + 64;
    v78 = *((_QWORD *)v178 + 41);
    v79 = *((_QWORD *)v178 + 40) + v77;
    v80 = (void *)*((_QWORD *)v178 + 48);
    if (!v80)
    {
      v194.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0CBC1E0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v79);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      v82 = *MEMORY[0x1E0CBC008];
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E2DEDC40;
      v83 = *MEMORY[0x1E0CBBF08];
      v194.__r_.__value_.__l.__size_ = v82;
      v194.__r_.__value_.__r.__words[2] = v83;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v79);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      v195 = *MEMORY[0x1E0CBBF00];
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v84;
      v197 = &unk_1E2DEDC40;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &buf, &v194, 4);
      v85 = (void *)objc_claimAutoreleasedReturnValue();

      v86 = -[EspressoANEIOSurface initWithIOSurfaceProperties:andPixelFormats:]([EspressoANEIOSurface alloc], "initWithIOSurfaceProperties:andPixelFormats:", v85, 0);
      v87 = (void *)*((_QWORD *)v178 + 48);
      *((_QWORD *)v178 + 48) = v86;

      objc_msgSend(*((id *)v178 + 48), "doNonLazyAllocation:", 0);
      v80 = (void *)*((_QWORD *)v178 + 48);
    }
    v88 = (__IOSurface *)objc_msgSend(v80, "ioSurfaceForMultiBufferFrame:", 0);
    IOSurfaceLock(v88, 0, 0);
    BaseAddress = IOSurfaceGetBaseAddress(v88);
    v90 = (int)(v75 + 64);
    *(_QWORD *)BaseAddress = 1;
    BaseAddress[2] = 5;
    *((_QWORD *)BaseAddress + 2) = v79;
    BaseAddress[6] = 1;
    *((_QWORD *)BaseAddress + 4) = v73;
    v91 = (_QWORD *)((char *)BaseAddress + v73);
    *v91 = 0x100000000;
    v91[1] = v90;
    v92 = (_QWORD *)((char *)BaseAddress + v90);
    *v92 = 0;
    v92[1] = v77;
    v92[2] = v78;
    *(_OWORD *)&v181.__r_.__value_.__l.__data_ = 0uLL;
    v93 = (std::__shared_weak_count *)*((_QWORD *)v178 + 2);
    if (!v93
      || (v181.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v93)) == 0
      || (v94 = *((_QWORD *)v178 + 1), (v181.__r_.__value_.__r.__words[0] = v94) == 0))
    {
      v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v168, "Inconsistent state");
      __cxa_throw(v168, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v95 = *(uint64_t **)(v94 + 32);
    v96 = *(uint64_t **)(v94 + 40);
    if (v95 != v96)
    {
      v97 = (char *)BaseAddress + v77;
      do
      {
        v98 = *v95;
        v99 = *(const void **)(*v95 + 64);
        if (v99)
        {
          if (v100)
          {
            v101 = *(std::__shared_weak_count **)(v98 + 72);
            v188 = v100;
            v189 = v101;
            if (v101)
            {
              v102 = (unint64_t *)&v101->__shared_owners_;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            if (v100[392])
            {
              v183 = (__int128 *)(v100 + 344);
              v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v181.__r_.__value_.__r.__words[0] + 136, (unsigned __int8 *)v100 + 344, &v183);
              v105 = (std::__shared_weak_count *)*((_QWORD *)v104 + 6);
              v185[0] = *((_QWORD *)v104 + 5);
              v185[1] = v105;
              if (v105)
              {
                v106 = (unint64_t *)&v105->__shared_owners_;
                do
                  v107 = __ldxr(v106);
                while (__stxr(v107 + 1, v106));
              }
              Espresso::sync_copy_to_host(&v186, v185);
              if (v105)
              {
                v108 = (unint64_t *)&v105->__shared_owners_;
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                  std::__shared_weak_count::__release_weak(v105);
                }
              }
              v110 = *((_QWORD *)v188 + 46);
              v111 = v186;
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v183, v186 + 8);
              v112 = 0;
              v113 = *(int **)(v111 + 24);
              v114 = v183;
              v115 = (const void *)*((_QWORD *)v183 + 3);
              v116 = *(int *)(v111 + 8);
              do
              {
                v116 *= *(int *)(v111 + 12 + v112);
                v112 += 4;
              }
              while (v112 != 12);
              if (v116)
              {
                v117 = (_WORD *)*((_QWORD *)v183 + 3);
                do
                {
                  v118 = *v113++;
                  _S0 = v118;
                  __asm { FCVT            H0, S0 }
                  *v117++ = _S0;
                  --v116;
                }
                while (v116);
              }
              v124 = 0;
              v125 = *((int *)v114 + 2);
              v126 = (char *)v114 + 12;
              do
              {
                v125 *= *(int *)&v126[v124];
                v124 += 4;
              }
              while (v124 != 12);
              memcpy(&v97[v110], v115, 2 * v125);
              v127 = v184;
              if (v184)
              {
                v128 = (unint64_t *)&v184->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              v130 = v187;
              if (v187)
              {
                v131 = (unint64_t *)&v187->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              v101 = v189;
            }
            if (v101)
            {
              v133 = (unint64_t *)&v101->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
          }
        }
        v95 += 2;
      }
      while (v95 != v96);
    }
    IOSurfaceUnlock(v88, 0, 0);
    size = (std::__shared_weak_count *)v181.__r_.__value_.__l.__size_;
    v70 = v178;
    v71 = v172;
    if (v181.__r_.__value_.__l.__size_)
    {
      v136 = (unint64_t *)(v181.__r_.__value_.__l.__size_ + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  Espresso::ANERuntimeEngine::compiler::key_for_segment(v70, v71, a5);
  v138 = objc_claimAutoreleasedReturnValue();
  v139 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  v140 = *(_BYTE **)(*(_QWORD *)(*a3 + 1240) + 1048);
  if (v140 && (*v140 & 2) != 0)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v142
      || (objc_msgSend(*((id *)v178 + 26), "objectForKeyedSubscript:", v142),
          v143 = (void *)objc_claimAutoreleasedReturnValue(),
          v144 = v143 == 0,
          v143,
          v144))
    {
      objc_msgSend(*((id *)v178 + 26), "objectForKeyedSubscript:", CFSTR("net"));
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      v147 = v146 == 0;

      if (v147)
      {
        Espresso::espresso_os_log_subsystem(v148, v149);
        v145 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v142;
          _os_log_debug_impl(&dword_190DAF000, v145, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::create_ane_request] Could not find perfStatsArray for segment:\"%@\" ", (uint8_t *)&buf, 0xCu);
        }
      }
      else
      {
        objc_msgSend(*((id *)v178 + 26), "objectForKeyedSubscript:", CFSTR("net"));
        v145 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v139, "addObject:", v145);
      }
    }
    else
    {
      objc_msgSend(*((id *)v178 + 26), "objectForKeyedSubscript:", v142);
      v145 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v139, "addObject:", v145);
    }

  }
  v150 = (void *)MEMORY[0x1E0CFDF90];
  if (*((_BYTE *)v178 + 312))
  {
    v151 = (void *)objc_msgSend(v180, "copy");
    v152 = (void *)objc_msgSend(v176, "copy");
    v153 = (void *)objc_msgSend(v179, "copy");
    v154 = (void *)objc_msgSend(v177, "copy");
    objc_msgSend(*((id *)v178 + 48), "ane_io_surfaceForMultiBufferFrame:", 0);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v169);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v150, "requestWithInputs:inputIndices:outputs:outputIndices:weightsBuffer:perfStats:procedureIndex:", v151, v152, v153, v154, v155, v139, v156);
    objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v151 = (void *)objc_msgSend(v180, "copy");
    v152 = (void *)objc_msgSend(v176, "copy");
    v153 = (void *)objc_msgSend(v179, "copy");
    v154 = (void *)objc_msgSend(v177, "copy");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v169);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v150, "requestWithInputs:inputIndices:outputs:outputIndices:perfStats:procedureIndex:", v151, v152, v153, v154, v139, v155);
    objc_claimAutoreleasedReturnValue();
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v138;
}

void sub_190E71858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (a30 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_190E71B74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<std::shared_ptr<Espresso::net> const&,Espresso::net_compiler_segment_based::segment_t const&>>(uint64_t *a1, int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  void *v38;

  v10 = a2;
  v11 = a1[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v11 <= a2)
        v5 = a2 % v11;
    }
    else
    {
      v5 = (v11 - 1) & a2;
    }
    v13 = *(void ***)(*a1 + 8 * v5);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == a2)
          {
            if (*((_DWORD *)v14 + 4) == a2)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v5)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v10;
  *((_DWORD *)v14 + 4) = *a3;
  Espresso::four_cc_mapping_helper::four_cc_mapping_helper((uint64_t)(v14 + 3), a4, a5);
  v16 = a1 + 2;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = a1[1];
    if (*(_QWORD *)&prime > v11)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v11)
    {
      v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v16;
          if (*v16)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v27) = v16;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v33))
                  {
                    *(_QWORD *)(*a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*a1 + 8 * v33);
                  **(_QWORD **)(*a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_55:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_59;
        }
        v38 = (void *)*a1;
        *a1 = 0;
        if (v38)
          operator delete(v38);
        v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10)
        v5 = v10 % v11;
      else
        v5 = v10;
    }
    else
    {
      v5 = (v11 - 1) & v10;
    }
  }
  v34 = *a1;
  v35 = *(_QWORD **)(*a1 + 8 * v5);
  if (v35)
  {
    *v14 = *v35;
LABEL_72:
    *v35 = v14;
    goto LABEL_73;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v34 + 8 * v5) = v16;
  if (*v14)
  {
    v36 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11)
        v36 %= v11;
    }
    else
    {
      v36 &= v11 - 1;
    }
    v35 = (_QWORD *)(*a1 + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v14;
}

void sub_190E72078(_Unwind_Exception *a1)
{
  char **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

id Espresso::ANERuntimeEngine::compiler::key_for_segment(Espresso::ANERuntimeEngine::compiler *this, uint64_t a2, const Espresso::net_compiler_segment_based::segment_t *a3)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  std::__shared_weak_count *v9;
  id v10;
  char v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  const void *v17;
  unsigned int *v18;
  unsigned int *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  std::string *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  std::string *v35;
  uint64_t i;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  void *v61;
  std::string *v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  NSString *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::runtime_error *exception;
  void *v77;
  void *v78;
  id v79;
  id v80;
  unsigned int v81;
  void *v82;
  void *v84;
  char v85;
  void **v86;
  void *v87;
  void *v88;
  char v89[16];
  int v90;
  unsigned int v91;
  void *__p;
  void *v93;
  char v94[5];
  void *v95;
  void *v96;
  __int128 *v97[5];
  void *v98;
  void *v99;
  std::string v100;
  void *v101;
  void *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::string v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  _OWORD buf[2];
  void *v109;
  void *v110;
  _QWORD v111[5];
  _QWORD v112[2];
  _QWORD v113[2];
  _QWORD v114[5];
  const __CFString *v115;
  void *v116;
  __int128 *v117[2];
  unsigned int v118;
  void *v119;
  _QWORD v120[5];
  _QWORD v121[3];

  v121[1] = *MEMORY[0x1E0C80C00];
  v4 = (void *)*((_QWORD *)this + 21);
  v81 = a2;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = v6;
  }
  else
  {
    v106 = 0;
    v107 = 0;
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v9 || (v107 = std::__shared_weak_count::lock(v9)) == 0 || (v106 = (_QWORD *)*((_QWORD *)this + 1)) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v82 = (void *)objc_opt_new();
    v77 = (void *)objc_opt_new();
    v78 = (void *)objc_opt_new();
    v84 = (void *)objc_opt_new();
    std::unordered_set<std::string>::unordered_set((uint64_t)v117, (uint64_t)a3 + 16);
    v80 = v77;
    v119 = v80;
    std::unordered_set<std::string>::unordered_set((uint64_t)v120, (uint64_t)a3 + 56);
    v10 = v78;
    v11 = 0;
    v12 = 0;
    v79 = v10;
    v121[0] = v10;
    do
    {
      v85 = v11;
      v13 = v117[6 * v12 + 2];
      if (v13)
      {
        v86 = (void **)&v120[6 * v12 - 1];
        do
        {
          if (*((char *)v13 + 39) < 0)
            std::string::__init_copy_ctor_external(&v100, *((const std::string::value_type **)v13 + 2), *((_QWORD *)v13 + 3));
          else
            v100 = *(std::string *)(v13 + 1);
          v14 = (uint64_t)(v106 + 17);
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v106 + 17, (unsigned __int8 *)&v100))
          {
            v97[0] = (__int128 *)&v100;
            v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)&v100, v97);
            v17 = (const void *)*((_QWORD *)v16 + 5);
            if (v17)
            {
              if (v18)
              {
                v19 = v18;
                v20 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
                *(_QWORD *)&buf[0] = v18;
                *((_QWORD *)&buf[0] + 1) = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v22 = __ldxr(p_shared_owners);
                  while (__stxr(v22 + 1, p_shared_owners));
                }
                v115 = CFSTR("shape");
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18[44]);
                v87 = (void *)objc_claimAutoreleasedReturnValue();
                v114[0] = v87;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v19[43]);
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                v114[1] = v23;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v19[42]);
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                v114[2] = v24;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v19[41]);
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                v114[3] = v25;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v19[40]);
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                v114[4] = v26;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v114, 5);
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                v116 = v27;
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v116, &v115, 1);
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                v29 = *v86;
                if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v30 = &v100;
                else
                  v30 = (std::string *)v100.__r_.__value_.__r.__words[0];
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v30);
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v29, "setObject:forKeyedSubscript:", v28, v31);

                if (v20)
                {
                  v32 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 - 1, v32));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
              }
            }
          }
          else
          {
            Espresso::espresso_os_log_subsystem(0, v15);
            v34 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              v35 = &v100;
              if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v35 = (std::string *)v100.__r_.__value_.__r.__words[0];
              LODWORD(buf[0]) = 136315138;
              *(_QWORD *)((char *)buf + 4) = v35;
              _os_log_error_impl(&dword_190DAF000, v34, OS_LOG_TYPE_ERROR, "[key_for_segment] blob not found: %s", (uint8_t *)buf, 0xCu);
            }

          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      v11 = 1;
      v12 = 1;
    }
    while ((v85 & 1) == 0);
    for (i = 0; i != -12; i -= 6)
    {

      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v120[i]);
    }
    v37 = v106;
    v38 = v106[80];
    if (v106[81] == v38)
    {
      v66 = 0x1E0CB3000uLL;
    }
    else
    {
      v39 = 0;
      do
      {
        v40 = (__int128 *)(v38 + 24 * v39);
        if (*((char *)v40 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
        }
        else
        {
          v41 = *v40;
          v105.__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v41;
        }
        v117[0] = (__int128 *)&v105;
        v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v37 + 17), (unsigned __int8 *)&v105, v117);
        v44 = *((_QWORD *)v42 + 5);
        v43 = (std::__shared_weak_count *)*((_QWORD *)v42 + 6);
        v103 = v44;
        v104 = v43;
        if (v43)
        {
          v45 = (unint64_t *)&v43->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        v112[0] = CFSTR("shape");
        v47 = (void *)MEMORY[0x1E0CB37E8];
        Espresso::abstract_blob_container::shape((char *)v117, v44);
        objc_msgSend(v47, "numberWithInt:", v118);
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        v111[0] = v88;
        v48 = (void *)MEMORY[0x1E0CB37E8];
        Espresso::abstract_blob_container::shape((char *)&v100, v44);
        objc_msgSend(v48, "numberWithInt:", HIDWORD(v100.__r_.__value_.__r.__words[1]));
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v111[1] = v49;
        v50 = (void *)MEMORY[0x1E0CB37E8];
        Espresso::abstract_blob_container::shape((char *)buf, v44);
        objc_msgSend(v50, "numberWithInt:", DWORD2(buf[0]));
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v111[2] = v51;
        v52 = (void *)MEMORY[0x1E0CB37E8];
        Espresso::abstract_blob_container::shape((char *)v97, v44);
        objc_msgSend(v52, "numberWithInt:", HIDWORD(v97[0]));
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v111[3] = v53;
        v54 = (void *)MEMORY[0x1E0CB37E8];
        Espresso::abstract_blob_container::shape(v94, v44);
        objc_msgSend(v54, "numberWithInt:", *(unsigned int *)v94);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v111[4] = v55;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v111, 5);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v113[0] = v56;
        v112[1] = CFSTR("rank");
        v57 = (void *)MEMORY[0x1E0CB37E8];
        Espresso::abstract_blob_container::shape(v89, v44);
        if (v90 == 1)
          v58 = 4;
        else
          v58 = 5;
        if (v91 == -1)
          v59 = v58;
        else
          v59 = v91;
        objc_msgSend(v57, "numberWithInt:", v59);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v113[1] = v60;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v113, v112, 2);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v105;
        else
          v62 = (std::string *)v105.__r_.__value_.__r.__words[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v62);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v84, "setObject:forKeyedSubscript:", v61, v63);

        if (__p)
        {
          v93 = __p;
          operator delete(__p);
        }

        if (v95)
        {
          v96 = v95;
          operator delete(v95);
        }

        if (v98)
        {
          v99 = v98;
          operator delete(v98);
        }

        if (v109)
        {
          v110 = v109;
          operator delete(v109);
        }

        if (v101)
        {
          v102 = v101;
          operator delete(v101);
        }

        if (v119)
        {
          v120[0] = v119;
          operator delete(v119);
        }
        if (v43)
        {
          v64 = (unint64_t *)&v43->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        ++v39;
        v37 = v106;
        v38 = v106[80];
        v66 = 0x1E0CB3000;
      }
      while (v39 < 0xAAAAAAAAAAAAAAABLL * ((v106[81] - v38) >> 3));
    }
    if ((Espresso::use_multiple_procedure_for_segments((uint64_t *)&v106) & 1) == 0)
    {
      objc_msgSend(*(id *)(v66 + 2024), "numberWithInt:", v81);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "setObject:forKeyedSubscript:", v67, CFSTR("isegment"));

    }
    objc_msgSend(v82, "setObject:forKeyedSubscript:", v80, CFSTR("inputs"));
    objc_msgSend(v82, "setObject:forKeyedSubscript:", v79, CFSTR("outputs"));
    if ((Espresso::ANECompilerEngine::is_mix(0, v68) & 1) == 0 && *((_BYTE *)this + 24) && !v37[99])
      objc_msgSend(v82, "setObject:forKeyedSubscript:", v84, CFSTR("net_inputs"));
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v82, 0, 0);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v69, 4);
    v71 = (void *)*((_QWORD *)this + 21);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v81);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "setObject:forKeyedSubscript:", v70, v72);

    v7 = v70;
    v73 = v107;
    if (v107)
    {
      v74 = (unint64_t *)&v107->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }

  return v7;
}

void sub_190E729E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  void *v61;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t Espresso::four_cc_mapping_helper::four_cc_mapping_helper(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v4;
  const struct __class_type_info *v6;
  uint64_t v7;
  char *v8;
  const void *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  const struct __class_type_info *v15;
  uint64_t **v16;
  _QWORD *v17;
  uint64_t **v18;
  std::string *v19;
  __int128 v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t *v33;
  __int128 *v34;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = *(uint64_t **)(a3 + 32);
  if (!v4)
    goto LABEL_32;
  v33 = (uint64_t *)(a1 + 8);
  do
  {
    v7 = *a2 + 136;
    v34 = (__int128 *)(v4 + 2);
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)v4 + 16, &v34);
    v9 = (const void *)*((_QWORD *)v8 + 5);
    if (v9)
    {
      if (v10)
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        v14 = v10[17] - v10[16];
        if ((unint64_t)v14 >= 8)
        {
          v15 = v6;
          v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v34, v4 + 2);
          v17 = *v16;
          if (!*v16)
          {
            v18 = v16;
            v17 = operator new(0x48uLL);
            v19 = (std::string *)(v17 + 4);
            if (*((char *)v4 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)v4[2], v4[3]);
            }
            else
            {
              v20 = *((_OWORD *)v4 + 1);
              v17[6] = v4[4];
              *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
            }
            v17[7] = 0;
            v17[8] = 0;
            v21 = v34;
            *v17 = 0;
            v17[1] = 0;
            v17[2] = v21;
            *v18 = v17;
            v22 = **(_QWORD **)a1;
            v23 = v17;
            if (v22)
            {
              *(_QWORD *)a1 = v22;
              v23 = *v18;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v23);
            ++*(_QWORD *)(a1 + 16);
          }
          v17[7] = v14 >> 2;
          v17[8] = 0;
          v6 = v15;
        }
        if (v11)
        {
          v24 = (unint64_t *)&v11->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
    }
    v4 = (uint64_t *)*v4;
  }
  while (v4);
  v26 = *(uint64_t **)a1;
  if (*(uint64_t **)a1 == v33)
  {
LABEL_32:
    v27 = 1;
  }
  else
  {
    v27 = 1;
    do
    {
      v26[8] = v27;
      v28 = (uint64_t *)v26[1];
      v29 = v26;
      if (v28)
      {
        do
        {
          v30 = v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v30 = (uint64_t *)v29[2];
          v31 = *v30 == (_QWORD)v29;
          v29 = v30;
        }
        while (!v31);
      }
      v27 *= v26[7];
      v26 = v30;
    }
    while (v30 != v33);
  }
  *(_QWORD *)(a1 + 24) = v27;
  return a1;
}

void sub_190E72EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, char a10)
{
  void *v10;

  operator delete(v10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*a9);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::procedure_name_for_segment_and_configuration(std::string *a1, int __val, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string v11;
  std::string v12;

  std::to_string(&v11, __val);
  v5 = std::string::append(&v11, "@");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a3;
  else
    v8 = *(const std::string::value_type **)a3;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  v10 = std::string::append(&v12, v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_190E72FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_output_symbol_indices_for_procedure(uint64_t a1, _QWORD *a2)
{
  return std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 144), a2, (uint64_t)a2)[7];
}

_QWORD *E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::ExecuteStreamSync(this[1]);
}

void E5RT::ExecutionStream::ResetStream(E5RT::ExecutionStreamImpl **this)
{
  E5RT::ExecutionStreamImpl::ResetStream(this[1]);
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::BindBuffers(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  int v5;
  void *PortDescriptorRef;
  void *v7;
  E5RT::IOPortImpl **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  E5RT::BufferObject *v16;
  uint64_t DataSpan;
  uint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  __IOSurface *v30;
  __IOSurface *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  E5RT::SurfaceDescriptor *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  unsigned int SurfaceFormat;
  void *v50;
  void *v51;
  void *v52;
  const __CFDictionary *v53;
  CVPixelBufferRef v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  void *v62;
  void *exception;
  void *v64;
  const __CFAllocator *allocator;
  __int128 *v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  E5RT::IOPort *v75;
  std::__shared_weak_count *v76;
  E5RT::MemoryObject *v77;
  std::__shared_weak_count *v78;
  _QWORD v79[3];
  char v80[8];
  _QWORD v81[3];
  CVPixelBufferRef pixelBufferOut;
  __int128 *v83[4];
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a2 + 16);
  if (v3)
  {
    v73 = a3 ^ 1;
    if (a3)
      v5 = 0x10000;
    else
      v5 = 0x20000;
    v70 = v5;
    v71 = (uint64_t)(a1 + 5);
    v72 = a1 + 10;
    v69 = (__int128 *)*MEMORY[0x1E0CA8FF0];
    v68 = (__int128 *)*MEMORY[0x1E0CA9040];
    v67 = (__int128 *)*MEMORY[0x1E0CA90E0];
    v66 = (__int128 *)*MEMORY[0x1E0CA8FD8];
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v3[5]);
      v7 = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      v8 = (E5RT::IOPortImpl **)v3[5];
      if (v7)
        break;
      v21 = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v3[5]);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v21))
      {
        v22 = (std::__shared_weak_count *)v3[6];
        v75 = (E5RT::IOPort *)v3[5];
        v76 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        v26 = (const void *)a1[3];
        v25 = a1[4];
        v27 = std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::find<std::string>(v72, (uint64_t)(v3 + 2));
        if (!v27
          || (v28 = *((_DWORD *)v27 + 10),
              (v29 = std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::find<std::string>(v72, (uint64_t)(v3 + 2))) == 0))
        {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        E5RT::IOPort::GetMemoryObject(v75, &v77);
        if (v77 && E5RT::MemoryObject::TryAsSurface(v77))
        {
          v30 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>();
          v31 = v30;
          switch(v28)
          {
            case 1:
              if (*((_DWORD *)v29 + 20))
                v32 = 0;
              else
                v32 = v29 + 6;
              *v32 = (uint64_t)IOSurfaceGetBaseAddress(v30);
              v32[3] = IOSurfaceGetBytesPerRow(v31);
              if (*((char *)v3 + 39) >= 0)
                v33 = (uint64_t)(v3 + 2);
              else
                v33 = v3[2];
              v34 = *((_OWORD *)v32 + 1);
              v84 = *(_OWORD *)v32;
              v85 = v34;
              v35 = espresso_network_bind_input_vimagebuffer_planar8(v26, v25, v33, 0, (uint64_t)&v84, 0);
              break;
            case 2:
              if (*((_DWORD *)v29 + 20))
                v56 = 0;
              else
                v56 = v29 + 6;
              *v56 = (uint64_t)IOSurfaceGetBaseAddress(v30);
              v56[3] = IOSurfaceGetBytesPerRow(v31);
              if (*((char *)v3 + 39) >= 0)
                v57 = (uint64_t)(v3 + 2);
              else
                v57 = v3[2];
              v58 = *((_OWORD *)v56 + 1);
              v84 = *(_OWORD *)v56;
              v85 = v58;
              v35 = espresso_network_bind_input_vimagebuffer_bgra8(v26, v25, v57, 0, (uint64_t)&v84, 0);
              break;
            case 3:
              if (*((_DWORD *)v29 + 20))
                v41 = 0;
              else
                v41 = v29 + 6;
              *v41 = (uint64_t)IOSurfaceGetBaseAddress(v30);
              v41[3] = IOSurfaceGetBytesPerRow(v31);
              if (*((char *)v3 + 39) >= 0)
                v42 = (uint64_t)(v3 + 2);
              else
                v42 = v3[2];
              v43 = *((_OWORD *)v41 + 1);
              v84 = *(_OWORD *)v41;
              v85 = v43;
              v35 = espresso_network_bind_input_vimagebuffer_rgba8(v26, v25, v42, 0, (uint64_t)&v84, 0);
              break;
            case 7:
              if (*((_DWORD *)v29 + 20) != 1)
                std::__throw_bad_variant_access[abi:ne180100]();
              pixelBufferOut = (CVPixelBufferRef)v29[6];
              E5RT::IOPort::GetPortDescriptor(v75, &v84);
              v44 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor((E5RT::OperandDescriptor *)v84);
              v45 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
              if (*((_QWORD *)&v84 + 1))
              {
                v46 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              *(_QWORD *)&v84 = MEMORY[0x1E0C9AA70];
              v83[0] = v69;
              v83[1] = v68;
              v48 = (void *)MEMORY[0x1E0CB37E8];
              SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v44);
              objc_msgSend(v48, "numberWithUnsignedInt:", E5RT::SurfaceFormatToCVPB4cc(SurfaceFormat));
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              *((_QWORD *)&v84 + 1) = v50;
              v83[2] = v67;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", E5RT::SurfaceDescriptor::GetSurfaceHeight(v44));
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              *(_QWORD *)&v85 = v51;
              v83[3] = v66;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", E5RT::SurfaceDescriptor::GetSurfaceWidth(v44));
              v52 = (void *)objc_claimAutoreleasedReturnValue();
              *((_QWORD *)&v85 + 1) = v52;
              objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v84, v83, 4);
              v53 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

              if (CVPixelBufferCreateWithIOSurface(allocator, v31, v53, &pixelBufferOut))
              {
                exception = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v81, "operator()");
                std::string::basic_string[abi:ne180100]<0>(v79, "Failed to create a CVPixelBuffer using the input IOSurface.");
                E5RT::Status::Status(v80, 6, v79);
                E5RT::E5RTError::E5RTError(exception, v81, v80);
              }
              v54 = pixelBufferOut;

              if (*((char *)v3 + 39) >= 0)
                v55 = (uint64_t)(v3 + 2);
              else
                v55 = v3[2];
              v35 = espresso_network_bind_cvpixelbuffer(v26, v25, v55, 0, (uint64_t)v54);
              break;
            default:
              v64 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&v84, "BindSurfaceBuffer");
              std::string::basic_string[abi:ne180100]<0>(v83, "Unsupported surface format requested to EIR operation.");
              E5RT::Status::Status(v81, 6, v83);
              E5RT::E5RTError::E5RTError(v64, &v84, v81);
          }
          v19 = v35;
          v40 = v78;
          if (v78)
          {
LABEL_79:
            v59 = (unint64_t *)&v40->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (v60)
              goto LABEL_82;
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            v9 = v76;
            if (!v76)
            {
LABEL_6:
              if (v19)
              {
                v62 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(&v84, "BindBuffers");
                std::string::basic_string[abi:ne180100]<0>(v83, "Unable to bind buffer to network.");
                E5RT::Status::Status(v81, 2, v83);
                E5RT::E5RTError::E5RTError(v62, &v84, v81);
              }
              goto LABEL_7;
            }
LABEL_83:
            v61 = (unint64_t *)&v9->__shared_owners_;
            do
              v39 = __ldaxr(v61);
            while (__stlxr(v39 - 1, v61));
LABEL_85:
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
            goto LABEL_6;
          }
        }
        else
        {
          v19 = -4;
          v40 = v78;
          if (v78)
            goto LABEL_79;
        }
LABEL_82:
        v9 = v76;
        if (!v76)
          goto LABEL_6;
        goto LABEL_83;
      }
LABEL_7:
      v3 = (uint64_t *)*v3;
      if (!v3)
        return;
    }
    v9 = (std::__shared_weak_count *)v3[6];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (const void *)a1[3];
    v13 = a1[4];
    v14 = E5RT::IOPort::IsDynamic(v8) & v73;
    if (a3 && E5RT::IOPort::IsDynamic(v8))
    {
      if (((E5RT::IOPort::HasKnownShape(v8) ^ 1 | v14) & 1) == 0)
      {
LABEL_15:
        E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v8, &v84);
        if ((_QWORD)v84
          && (v83[0] = (__int128 *)(v3 + 2),
              v15 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v71, (uint64_t)(v3 + 2), (uint64_t)&std::piecewise_construct, v83), v16 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)v84), DataSpan = E5RT::BufferObject::GetDataSpan(v16), (v15[5] = DataSpan) != 0))
        {
          if (*((char *)v3 + 39) >= 0)
            v18 = (uint64_t)(v3 + 2);
          else
            v18 = v3[2];
          v19 = espresso_network_bind_buffer(v12, v13, v18, (uint64_t)(v15 + 5), v70, 0x20000, 0x10000);
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
          if (!*((_QWORD *)&v84 + 1))
          {
LABEL_45:
            if (!v9)
              goto LABEL_6;
LABEL_46:
            v38 = (unint64_t *)&v9->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            goto LABEL_85;
          }
        }
        else
        {
          v19 = -4;
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
          if (!*((_QWORD *)&v84 + 1))
            goto LABEL_45;
        }
        v36 = (unint64_t *)&v20->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          if (!v9)
            goto LABEL_6;
          goto LABEL_46;
        }
        goto LABEL_45;
      }
    }
    else if ((v14 & 1) == 0)
    {
      goto LABEL_15;
    }
    v19 = 0;
    if (!v9)
      goto LABEL_6;
    goto LABEL_46;
  }
}

void sub_190E737B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  E5RT::Status::~Status((E5RT::Status *)&a32);
  if (*(char *)(v39 - 137) < 0)
    operator delete(*(void **)(v39 - 160));
  if (*(char *)(v39 - 105) < 0)
  {
    operator delete(*(void **)(v39 - 128));
    if ((v38 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_190E739A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)&a29);
  if (*(char *)(v31 - 137) < 0)
    operator delete(*(void **)(v31 - 160));
  if (*(char *)(v31 - 105) < 0)
  {
    operator delete(*(void **)(v31 - 128));
    if ((v30 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v29);
      _Unwind_Resume(a1);
    }
  }
  else if (v30)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_network_bind_buffer(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  void *v14;
  std::runtime_error *v15;
  uint64_t v16;
  std::runtime_error *v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::runtime_error *exception;
  std::runtime_error *v26;
  std::runtime_error *v27;
  std::runtime_error *v28;
  std::runtime_error *v29;
  _OWORD v30[10];
  uint64_t v31;

  v14 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    if (a4)
    {
      switch(a6)
      {
        case 0x40000:
          if (a7 == 0x10000)
          {
            if ((_DWORD)a5 != 0x20000)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(v30, "mode_flags");
              std::runtime_error::runtime_error(exception, (const std::string *)v30);
              exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
              LODWORD(exception[1].__vftable) = -6;
            }
            (*(void (**)(_OWORD *__return_ptr, const void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(v30, a1, a2, a3);
            goto LABEL_39;
          }
          break;
        case 0x20000:
          switch(a7)
          {
            case 0x10000:
              if ((_DWORD)a5 == 0x10000)
              {
                v18 = 10;
              }
              else
              {
                if ((_DWORD)a5 != 0x20000)
                {
                  v27 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                  std::string::basic_string[abi:ne180100]<0>(v30, "mode_flags");
                  std::runtime_error::runtime_error(v27, (const std::string *)v30);
                  v27->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
                  LODWORD(v27[1].__vftable) = -6;
                }
                v18 = 11;
              }
              break;
            case 0x80000:
              if ((_DWORD)a5 == 0x10000)
              {
                v18 = 14;
              }
              else
              {
                if ((_DWORD)a5 != 0x20000)
                {
                  v26 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                  std::string::basic_string[abi:ne180100]<0>(v30, "mode_flags");
                  std::runtime_error::runtime_error(v26, (const std::string *)v30);
                  v26->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
                  LODWORD(v26[1].__vftable) = -6;
                }
                v18 = 15;
              }
              break;
            case 0x20000:
              v17 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(v30, "format_flags ESPRESSO_BIND_FORMAT_NCHW_INTERNAL_STORAGE");
              std::runtime_error::runtime_error(v17, (const std::string *)v30);
              v17->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
              LODWORD(v17[1].__vftable) = -9;
            default:
              goto LABEL_35;
          }
          (*(void (**)(const void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8 * v18))(a1, a2, a3, a4);
          break;
        case 0x10000:
          switch(a7)
          {
            case 0x10000:
              if ((_DWORD)a5 == 0x20000)
              {
                (*(void (**)(_OWORD *__return_ptr, const void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(v30, a1, a2, a3);
              }
              else
              {
                if ((_DWORD)a5 != 0x10000)
                {
                  v29 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                  std::string::basic_string[abi:ne180100]<0>(v30, "mode_flags");
                  std::runtime_error::runtime_error(v29, (const std::string *)v30);
                  v29->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
                  LODWORD(v29[1].__vftable) = -6;
                }
                (*(void (**)(_OWORD *__return_ptr, const void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(v30, a1, a2, a3);
              }
              break;
            case 0x80000:
              if ((_DWORD)a5 == 0x20000)
              {
                (*(void (**)(_OWORD *__return_ptr, const void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(v30, a1, a2, a3);
              }
              else
              {
                if ((_DWORD)a5 != 0x10000)
                {
                  v28 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                  std::string::basic_string[abi:ne180100]<0>(v30, "mode_flags");
                  std::runtime_error::runtime_error(v28, (const std::string *)v30);
                  v28->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
                  LODWORD(v28[1].__vftable) = -6;
                }
                (*(void (**)(_OWORD *__return_ptr, const void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(v30, a1, a2, a3);
              }
              break;
            case 0x20000:
              v15 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(v30, "format_flags ESPRESSO_BIND_FORMAT_NCHW_INTERNAL_STORAGE");
              std::runtime_error::runtime_error(v15, (const std::string *)v30);
              v15->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
              LODWORD(v15[1].__vftable) = -9;
            default:
              goto LABEL_35;
          }
LABEL_39:
          v16 = 0;
          *(_QWORD *)(a4 + 160) = v31;
          v20 = v30[9];
          *(_OWORD *)(a4 + 128) = v30[8];
          *(_OWORD *)(a4 + 144) = v20;
          v21 = v30[5];
          *(_OWORD *)(a4 + 64) = v30[4];
          *(_OWORD *)(a4 + 80) = v21;
          v22 = v30[7];
          *(_OWORD *)(a4 + 96) = v30[6];
          *(_OWORD *)(a4 + 112) = v22;
          v23 = v30[1];
          *(_OWORD *)a4 = v30[0];
          *(_OWORD *)(a4 + 16) = v23;
          v24 = v30[3];
          *(_OWORD *)(a4 + 32) = v30[2];
          *(_OWORD *)(a4 + 48) = v24;
          goto LABEL_36;
      }
    }
    else
    {
      (*(void (**)(const void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, a3, a5);
    }
LABEL_35:
    v16 = 0;
    goto LABEL_36;
  }
  v16 = 4294967290;
LABEL_36:
  objc_autoreleasePoolPop(v14);
  return v16;
}

void sub_190E73F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  char *v15;
  void *v16;
  int v17;
  std::exception *v20;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v17)
  {
LABEL_6:
    if (a2 == 1)
    {
      v20 = (std::exception *)__cxa_begin_catch(exception_object);
      handle_ex_plan(v15, v20);
      __cxa_end_catch();
      JUMPOUT(0x190E73CB4);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void EspressoLight::espresso_plan::bind_output(EspressoLight::espresso_plan *this@<X0>, char *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  _QWORD *v9;
  size_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  std::string *v22;
  int64_t v23;
  int64_t v24;
  int64_t v25;
  std::string *v26;
  std::string *v27;
  int v28;
  int64_t v29;
  std::string *v30;
  std::string *v31;
  std::runtime_error *v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t **v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t **v52;
  char *v53;
  __int128 v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t **v59;
  int *v60;
  __int128 *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::runtime_error *v74;
  std::runtime_error *exception;
  const char *v76;
  std::string *__s;
  _OWORD v78[2];
  std::__shared_weak_count *v79;
  void *__p;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void *v85;
  void *v86;
  _BYTE v87[32];
  std::__shared_weak_count *v88;
  __int128 v89;
  uint64_t v90;
  void *v91;
  void *v92;
  std::string *v93;
  std::__shared_weak_count *v94;
  _DWORD v95[13];
  __int128 v96;
  int v97;
  __int128 v98;
  std::string v99;
  int v100[5];

  v100[0] = a3;
  v5 = *((_QWORD *)this + 133);
  v6 = *(_DWORD *)(v5 + 160);
  if (v6 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v6);
  v9 = (_QWORD *)((char *)this + 1072);
  v10 = strlen((const char *)EspressoLight::abstract_espresso_plan::main_function_name);
  if (*((char *)this + 1095) < 0)
  {
    if (v10 != *((_QWORD *)this + 135))
      goto LABEL_97;
    if (v10 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v9 = (_QWORD *)*v9;
  }
  else if (v10 != *((unsigned __int8 *)this + 1095))
  {
LABEL_97:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_output on subnetwork");
  }
  if (memcmp(v9, (const void *)EspressoLight::abstract_espresso_plan::main_function_name, v10))
    goto LABEL_97;
  if (atomic_load((unint64_t *)(v5 + 408)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v87, "Binding buffers cannot be done while a plan is being executed.");
    std::runtime_error::runtime_error(exception, (const std::string *)v87);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -1;
  }
  v12 = v100[0];
  EspressoLight::espresso_plan::default_blob_name_if_null(&v99, *((_QWORD **)this + 133), v100[0], (const char *)1, a2);
  v13 = *(_QWORD *)(*((_QWORD *)this + 133) + 144);
  v14 = *(_QWORD *)(v13 + 96);
  if (!v14)
    goto LABEL_96;
  v15 = v13 + 96;
  do
  {
    v16 = *(_DWORD *)(v14 + 32);
    v17 = v16 < v12;
    if (v16 >= v12)
      v18 = (uint64_t *)v14;
    else
      v18 = (uint64_t *)(v14 + 8);
    if (!v17)
      v15 = v14;
    v14 = *v18;
  }
  while (*v18);
  if (v15 == v13 + 96 || v12 < *(_DWORD *)(v15 + 32))
  {
LABEL_96:
    v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v74, "Output not declared");
    __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19 = v15 + 40;
  v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v15 + 40, &v99);
  if ((_QWORD *)(v15 + 48) == v20)
  {
    v21 = Espresso::net::bind_global_prefix[0];
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v99;
    else
      v22 = (std::string *)v99.__r_.__value_.__r.__words[0];
    v76 = a2;
    __s = v22;
    v23 = strlen(Espresso::net::bind_global_prefix[0]);
    if (v23)
    {
      v24 = v23;
      v25 = (v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v99.__r_.__value_.__r.__words[2])
          : v99.__r_.__value_.__l.__size_;
      if (v25 < v23)
        goto LABEL_34;
      v26 = __s;
      v27 = (std::string *)((char *)__s + v25);
      v28 = *Espresso::net::bind_global_prefix[0];
      while (1)
      {
        v29 = v25 - v24;
        if (v29 == -1)
          goto LABEL_34;
        v30 = (std::string *)memchr(v26, v28, v29 + 1);
        if (!v30)
          goto LABEL_34;
        v31 = v30;
        if (!memcmp(v30, v21, v24))
          break;
        v26 = (std::string *)((char *)&v31->__r_.__value_.__l.__data_ + 1);
        v25 = (char *)v27 - ((char *)&v31->__r_.__value_.__l.__data_ + 1);
        if (v25 < v24)
          goto LABEL_34;
      }
      if (v31 == v27 || v31 != __s)
      {
LABEL_34:
        v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v32, (const std::string *)v87);
        __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    v33 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 88), v12, v100);
    *(_QWORD *)v87 = &v99;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33 + 5, &v99, (__int128 **)v87)[56] = 1;
    v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v19, &v99);
    v13 = *(_QWORD *)(*((_QWORD *)this + 133) + 144);
    a2 = (char *)v76;
  }
  v34 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 40), v12, v100);
  v35 = v34 + 5;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v34 + 5), &v99);
  if (v34 + 6 == v36)
  {
    v45 = v100[0];
    v46 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 133) + 24) + 16 * v100[0]);
    v98 = v46;
    if (*((_QWORD *)&v46 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    LOBYTE(v95[0]) = *(_BYTE *)(v46 + 1352);
    memset(&v95[1], 0, 48);
    v96 = 0u;
    v97 = 0;
    if (LOBYTE(v95[0]))
    {
      *(_QWORD *)&v95[2] = v46;
      memset(&v95[4], 0, 24);
      *(_QWORD *)&v95[10] = v46;
      v95[1] = 723714248;
      kdebug_trace();
    }
    v49 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 72), v45, v100);
    v50 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v49 + 5), &v99);
    if (std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 72), v45, v100)+ 6 == v50)
    {
      v51 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 133) + 24) + 16 * v45);
      std::string::basic_string[abi:ne180100]<0>(v87, a2);
      Espresso::net::get_blob_or_global_with_prefix(v51, (std::string *)v87, &v83);
      if ((v87[23] & 0x80000000) != 0)
        operator delete(*(void **)v87);
      Espresso::abstract_blob_container::shape(v87, v83);
      v52 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 72), v45, v100);
      v93 = &v99;
      v53 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v52 + 5, &v99, (__int128 **)&v93);
      v54 = *(_OWORD *)&v87[16];
      *(_OWORD *)(v53 + 56) = *(_OWORD *)v87;
      *(_OWORD *)(v53 + 72) = v54;
      *((_QWORD *)v53 + 11) = v88;
      v55 = (void *)*((_QWORD *)v53 + 12);
      if (v55)
      {
        *((_QWORD *)v53 + 13) = v55;
        operator delete(v55);
        *((_QWORD *)v53 + 12) = 0;
        *((_QWORD *)v53 + 13) = 0;
        *((_QWORD *)v53 + 14) = 0;
      }
      *((_OWORD *)v53 + 6) = v89;
      *((_QWORD *)v53 + 14) = v90;
      v56 = v84;
      if (v84)
      {
        p_shared_owners = (unint64_t *)&v84->__shared_owners_;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v45 = v100[0];
    }
    v59 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 72), v45, v100);
    *(_QWORD *)v87 = &v99;
    v60 = (int *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59 + 5, &v99, (__int128 **)v87);
    v61 = (__int128 *)(v60 + 14);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v93, v60[14], v60[15], v60[16], v60[18] * v60[17]);
    std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>::pair[abi:ne180100]<std::shared_ptr<Espresso::blob<float,4>>&,Espresso::layer_shape const&,0>((uint64_t)&v83, (uint64_t)v93, (uint64_t)v94, v61);
    std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>::pair[abi:ne180100]<std::string&,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>,0>((std::string *)v87, (__int128 *)&v99, (uint64_t)&v83);
    v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>(v35, v87, (uint64_t)v87);
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    v62 = v88;
    if (v88)
    {
      v63 = (unint64_t *)&v88->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if ((v87[23] & 0x80000000) != 0)
      operator delete(*(void **)v87);
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }
    v65 = v84;
    if (v84)
    {
      v66 = (unint64_t *)&v84->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = v94;
    if (v94)
    {
      v69 = (unint64_t *)&v94->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v95);
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    if (*((_QWORD *)&v98 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  v38 = (uint64_t)v36[7];
  v37 = (std::__shared_weak_count *)v36[8];
  v83 = v38;
  v84 = v37;
  if (v37)
  {
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *(_OWORD *)(v36 + 11);
  *(_OWORD *)v87 = *(_OWORD *)(v36 + 9);
  *(_OWORD *)&v87[16] = v41;
  v42 = v36[14];
  v88 = (std::__shared_weak_count *)v36[13];
  v89 = 0uLL;
  v90 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v89, v42, (uint64_t)v36[15], ((char *)v36[15] - (char *)v42) >> 2);
  *((_BYTE *)v20 + 56) = 1;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_QWORD *)(a4 + 160) = 0;
  v78[0] = *(_OWORD *)v87;
  v78[1] = *(_OWORD *)&v87[16];
  v79 = v88;
  __p = 0;
  v81 = 0;
  v82 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, (const void *)v89, *((uint64_t *)&v89 + 1), (uint64_t)(*((_QWORD *)&v89 + 1) - v89) >> 2);
  setup_espresso_buffer_with_shape(a4, (uint64_t)v78);
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
  *(_QWORD *)a4 = *(_QWORD *)(v38 + 24);
  if ((_QWORD)v89)
  {
    *((_QWORD *)&v89 + 1) = v89;
    operator delete((void *)v89);
  }
  if (v37)
  {
    v43 = (unint64_t *)&v37->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
}

void sub_190E747F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v38;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)(v38 - 216));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 144);
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::default_blob_name_if_null(std::string *this, _QWORD *a2, int a3, const char *a4, char *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  std::runtime_error *exception;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;

  if (a3 < 0 || (uint64_t)(a2[4] - a2[3]) >> 4 <= (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network index");
    goto LABEL_32;
  }
  if (a5)
  {
    std::string::basic_string[abi:ne180100]<0>(this, a5);
    return;
  }
  if (!(_DWORD)a4)
  {
    v15 = a2[13];
    v13 = a2 + 13;
    v14 = v15;
    if (v15)
    {
      v8 = v13;
      do
      {
        v16 = *(_DWORD *)(v14 + 32);
        v17 = v16 < a3;
        if (v16 >= a3)
          v18 = (uint64_t *)v14;
        else
          v18 = (uint64_t *)(v14 + 8);
        if (!v17)
          v8 = (_QWORD *)v14;
        v14 = *v18;
      }
      while (*v18);
      if (v8 != v13 && *((_DWORD *)v8 + 8) <= a3)
        goto LABEL_27;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No inputs declared");
LABEL_32:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = a2[16];
  v5 = a2 + 16;
  v6 = v7;
  if (!v7)
    goto LABEL_16;
  v8 = v5;
  do
  {
    v9 = *(_DWORD *)(v6 + 32);
    v10 = v9 < a3;
    if (v9 >= a3)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (!v10)
      v8 = (_QWORD *)v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 == v5 || *((_DWORD *)v8 + 8) > a3)
  {
LABEL_16:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No outputs declared");
    goto LABEL_32;
  }
LABEL_27:
  v19 = v8[5];
  if (*(char *)(v19 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v19 + 32), *(_QWORD *)(v19 + 40));
  }
  else
  {
    v20 = *(_OWORD *)(v19 + 32);
    this->__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 48);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v20;
  }
}

void sub_190E74AC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void setup_espresso_buffer_with_shape(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  const void *v4;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v3;
  v4 = *(const void **)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 32);
  __p = 0;
  v5 = *(_QWORD *)(a2 + 48);
  v9 = 0;
  v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v4, v5, (v5 - (uint64_t)v4) >> 2);
  setup_espresso_buffer_with_shape(a1, (int *)v6);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

uint64_t setup_espresso_buffer_with_shape(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = v4;
  v6 = a2[5];
  v7 = a2[4];
  if ((int)v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  v9 = v8 * v5;
  *(_DWORD *)(result + 160) = 65568;
  *(_QWORD *)(result + 40) = v9;
  *(_QWORD *)(result + 48) = 4 * v2;
  v10 = 4 * v2 * v3;
  *(_QWORD *)(result + 56) = v10;
  *(_QWORD *)(result + 64) = v10 * v4;
  *(_QWORD *)(result + 72) = v10 * v4 * v9;
  *(_QWORD *)(result + 80) = v2;
  *(_QWORD *)(result + 88) = v3;
  *(_QWORD *)(result + 96) = v4;
  *(_QWORD *)(result + 104) = v5;
  *(_QWORD *)(result + 112) = v7;
  *(_QWORD *)(result + 120) = 1;
  *(_QWORD *)(result + 128) = v2;
  v11 = (int)v3 * (uint64_t)(int)v2;
  v12 = v11 * v4;
  *(_QWORD *)(result + 136) = v11;
  *(_QWORD *)(result + 144) = v12;
  *(_QWORD *)(result + 152) = v12 * v5;
  if ((_DWORD)v7 == 1)
    v13 = 4;
  else
    v13 = 5;
  if (v6 != -1)
    v13 = v6;
  *(_QWORD *)(result + 8) = v13;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t **std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x88uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *((_QWORD *)v6 + 13) = *(_QWORD *)(a3 + 72);
    v6[7] = *(_OWORD *)(a3 + 80);
    *((_QWORD *)v6 + 16) = *(_QWORD *)(a3 + 96);
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
  return v6;
}

uint64_t E5RT::IOBufferObject::GetDataSpan(E5RT::IOBufferObject *this)
{
  if (*((_QWORD *)this + 1))
    return *((_QWORD *)this + 5);
  else
    return 0;
}

{
  if (*((_QWORD *)this + 1))
    return *((_QWORD *)this + 5);
  else
    return 0;
}

uint64_t E5RT::BufferObject::GetDataSpan(E5RT::BufferObject *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

void EspressoLight::espresso_plan::bind_dyn_output(EspressoLight::espresso_plan *this@<X0>, char *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  std::runtime_error *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  std::runtime_error *v36;
  char v37[40];
  void *__p;
  void *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::runtime_error v46;
  __int128 v47;
  std::string v48;

  v6 = *((_QWORD *)this + 133);
  v7 = *(_DWORD *)(v6 + 160);
  if (v7 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
  if (atomic_load((unint64_t *)(v6 + 408)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v48, "Binding buffers cannot be done while a plan is being executed.");
    std::runtime_error::runtime_error(exception, &v48);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -1;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v48, *((_QWORD **)this + 133), a3, (const char *)1, a2);
  v10 = *(_QWORD *)(*((_QWORD *)this + 133) + 24);
  if (a3 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 133) + 32) - v10) >> 4))
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Invalid network_index.");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = *(_OWORD *)(v10 + 16 * a3);
  v47 = v11;
  if (*((_QWORD *)&v11 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!(_QWORD)v11)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Null network found.");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v11 + 136), (unsigned __int8 *)&v48);
  if (!v14)
  {
    v15 = std::runtime_error::runtime_error(&v46, "Blob not found.");
    std::runtime_error::~runtime_error(v15);
  }
  v16 = *((_QWORD *)v14 + 5);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v44 = v16;
  v45 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v41 = v17;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  else
  {
    v41 = 0;
  }
  v40 = v16;
  Espresso::sync_copy_to_host(&v42, &v40);
  v21 = v41;
  if (v41)
  {
    v22 = (unint64_t *)&v41->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v42;
  *(_BYTE *)(v42 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_QWORD *)(a4 + 160) = 0;
  Espresso::abstract_blob_container::shape(v37, v44);
  setup_espresso_buffer_with_shape(a4, (uint64_t)v37);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  *(_QWORD *)a4 = *(_QWORD *)(v24 + 24);
  v25 = v43;
  if (v43)
  {
    v26 = (unint64_t *)&v43->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v45;
  if (v45)
  {
    v29 = (unint64_t *)&v45->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
}

void sub_190E75110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 80);
  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  _Unwind_Resume(a1);
}

void Espresso::sync_copy_to_host(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  void (***v6)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(__n128 *, __n128 *);
  uint64_t (*v24)(uint64_t);
  const char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v20 = 0;
  v21 = &v20;
  v22 = 0x4012000000;
  v23 = __Block_byref_object_copy__131;
  v24 = __Block_byref_object_dispose__132;
  v25 = "";
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 56))(&v26);
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v6 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a2 + 72);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3321888768;
  v18[2] = ___ZN8Espresso17sync_copy_to_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke;
  v18[3] = &unk_1E2DC3FF0;
  v18[5] = v5;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v18[4] = &v20;
  Espresso::abstract_context::compute_batch_sync(v6, v18);
  v9 = v21[7];
  *a1 = v21[6];
  a1[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Block_object_dispose(&v20, 8);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

{
  std::__shared_weak_count *v4;
  uint64_t v5;
  void (***v6)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[5];
  std::__shared_weak_count *v16;
  _QWORD *v17;
  __int128 v18;

  if (!*a2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 56))(&v18);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a2, &v18);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v6 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a1 + 72);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3321888768;
  v15[2] = ___ZN8Espresso17sync_copy_to_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEERNS1_INS_4blobIfLi4EEEEE_block_invoke;
  v15[3] = &__block_descriptor_56_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE_e10_v16__0r_v8l;
  v15[4] = v5;
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v17 = a2;
  Espresso::abstract_context::compute_batch_sync(v6, v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_190E75354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10);
  _Block_object_dispose(va, 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void Espresso::abstract_context::compute_batch_sync(void (***a1)(uint64_t *__return_ptr, _QWORD), void *a2)
{
  void (**v3)(id, _QWORD *);
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v3 = a2;
  v4 = (void *)MEMORY[0x19401D4A4]();
  (**a1)(&v8, a1);
  if (v3)
    v3[2](v3, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  objc_autoreleasePoolPop(v4);

}

void sub_190E75444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *Espresso::context_cpu::begin_batch@<X0>(char *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char *v4;
  unint64_t *v5;
  unint64_t v6;

  if (this[125] && (v3 = *((_QWORD *)this + 19)) != 0 && !*(_QWORD *)(v3 + 8))
  {
    v5 = (unint64_t *)(v3 + 8);
    *a2 = (char *)*((_QWORD *)this + 18);
    a2[1] = (char *)v3;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  else
  {
    v4 = (char *)operator new(0x90uLL);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &off_1E2DC25C0;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    v4[64] = 1;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *((_WORD *)v4 + 60) = 256;
    *((_QWORD *)v4 + 16) = 0;
    *((_QWORD *)v4 + 17) = 0;
    a2[1] = v4;
    *((_QWORD *)v4 + 3) = &off_1E2DAC840;
    this = v4 + 24;
    *a2 = this;
  }
  return this;
}

void Espresso::blob_cpu::__copy_to_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  vImagePixelCount v9;
  uint64_t v10;
  std::__shared_weak_count *height;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  vDSP_Length v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const int *v30;
  vDSP_Length v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const unsigned __int8 *v35;
  vDSP_Length v36;
  uint64_t v37;
  vImage_Buffer v38;
  vImage_Buffer src;

  if (!*(_QWORD *)a3)
  {
    (*(void (**)(vImage_Buffer *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&src, a1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)&src);
    height = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v12 = (unint64_t *)(src.height + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
  }
  switch(*(_DWORD *)(a1 + 240))
  {
    case 1:
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 176);
      v7 = *(void **)(v6 + 24);
      v8 = *(void **)(*(_QWORD *)a3 + 24);
      v9 = *(int *)(v6 + 8);
      v10 = v6 + 12;
      do
      {
        v9 *= *(int *)(v10 + v5);
        v5 += 4;
      }
      while (v5 != 12);
      src.data = v7;
      src.height = 1;
      src.width = v9;
      src.rowBytes = 2 * v9;
      v38.data = v8;
      v38.height = 1;
      v38.width = v9;
      v38.rowBytes = 4 * v9;
      vImageConvert_Planar16FtoPlanarF(&src, &v38, 0);
      break;
    case 2:
      v23 = 0;
      v24 = *(_QWORD *)(a1 + 192);
      v25 = *(const char **)(v24 + 24);
      v26 = *(int *)(v24 + 8);
      v27 = v24 + 12;
      do
      {
        v26 *= *(int *)(v27 + v23);
        v23 += 4;
      }
      while (v23 != 12);
      vDSP_vflt8(v25, 1, *(float **)(*(_QWORD *)a3 + 24), 1, v26);
      break;
    case 3:
      v28 = 0;
      v29 = *(_QWORD *)(a1 + 208);
      v30 = *(const int **)(v29 + 24);
      v31 = *(int *)(v29 + 8);
      v32 = v29 + 12;
      do
      {
        v31 *= *(int *)(v32 + v28);
        v28 += 4;
      }
      while (v28 != 12);
      vDSP_vflt32(v30, 1, *(float **)(*(_QWORD *)a3 + 24), 1, v31);
      break;
    case 4:
      v33 = 0;
      v34 = *(_QWORD *)(a1 + 192);
      v35 = *(const unsigned __int8 **)(v34 + 24);
      v36 = *(int *)(v34 + 8);
      v37 = v34 + 12;
      do
      {
        v36 *= *(int *)(v37 + v33);
        v33 += 4;
      }
      while (v33 != 12);
      vDSP_vfltu8(v35, 1, *(float **)(*(_QWORD *)a3 + 24), 1, v36);
      break;
    default:
      v14 = *(_QWORD *)(a1 + 160);
      if (v14)
      {
        v15 = 0;
        v16 = *(int *)(v14 + 8);
        v17 = v16;
        do
        {
          v17 *= *(int *)(v14 + 12 + v15);
          v15 += 4;
        }
        while (v15 != 12);
        v18 = 0;
        v19 = *(int *)(*(_QWORD *)a3 + 8);
        do
        {
          v19 *= *(int *)(*(_QWORD *)a3 + 12 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        if (4 * v17 > (unint64_t)(4 * v19))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Host blob has insufficient space. Was the blob shape changed after binding? Consider binding with ESPRESSO_BIND_PTR_DYNAMIC_OUTPUT after execution.");
        v20 = 0;
        v21 = *(const void **)(v14 + 24);
        v22 = v14 + 12;
        do
        {
          v16 *= *(int *)(v22 + v20);
          v20 += 4;
        }
        while (v20 != 12);
        memcpy(*(void **)(*(_QWORD *)a3 + 24), v21, 4 * v16);
      }
      break;
  }
}

uint64_t ___ZN8Espresso17sync_copy_to_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
}

void Espresso::abstract_blob_container::create_host_blob(Espresso::abstract_blob_container *this@<X0>, _QWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6) * *((_DWORD *)this + 5));
}

void EspressoLight::espresso_plan::prepare(EspressoLight::espresso_plan *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t **v47;
  char *v48;
  __int128 v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t **v65;
  char *v66;
  __int128 v67;
  void *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  unsigned __int8 *v81;
  int v82;
  _BOOL4 v83;
  std::runtime_error *exception;
  void *__p[2];
  char v86;
  void *v87[2];
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  void **v93;

  v2 = *((_QWORD *)this + 133);
  v3 = *(_DWORD *)(v2 + 160);
  if (v3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v3);
  v5 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 == v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Empty espresso_plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_QWORD *)(v2 + 112))
  {
    v6 = 1;
  }
  else
  {
    v7 = 0;
    v8 = *(_QWORD *)(v2 + 136);
    do
    {
      v9 = *(_QWORD **)(*(_QWORD *)v5 + 232);
      v10 = *(_QWORD *)v5 + 240;
      if (v9 != (_QWORD *)v10)
      {
        do
        {
          v11 = (char *)(v9 + 4);
          if (*((char *)v9 + 55) < 0)
            v11 = *(char **)v11;
          EspressoLight::espresso_plan::declare_input(this, v7, v11);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v9[2];
              v14 = *v13 == (_QWORD)v9;
              v9 = v13;
            }
            while (!v14);
          }
          v9 = v13;
        }
        while (v13 != (_QWORD *)v10);
      }
      ++v7;
      v5 += 16;
    }
    while (v5 != v4);
    v6 = v8 != 0;
    v2 = *((_QWORD *)this + 133);
  }
  if (!*(_QWORD *)(v2 + 136))
  {
    v15 = *(_QWORD *)(v2 + 24);
    v16 = *(_QWORD *)(v2 + 32);
    if (v15 != v16)
    {
      v17 = 0;
      do
      {
        v18 = *(_QWORD **)(*(_QWORD *)v15 + 256);
        v19 = *(_QWORD *)v15 + 264;
        if (v18 != (_QWORD *)v19)
        {
          do
          {
            v20 = (char *)(v18 + 4);
            if (*((char *)v18 + 55) < 0)
              v20 = *(char **)v20;
            EspressoLight::espresso_plan::declare_output(this, v17, v20);
            v21 = (_QWORD *)v18[1];
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = (_QWORD *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v18[2];
                v14 = *v22 == (_QWORD)v18;
                v18 = v22;
              }
              while (!v14);
            }
            v18 = v22;
          }
          while (v22 != (_QWORD *)v19);
        }
        ++v17;
        v15 += 16;
      }
      while (v15 != v16);
      v2 = *((_QWORD *)this + 133);
    }
  }
  if (v6)
  {
    v23 = *(_QWORD *)(v2 + 24);
    v24 = *(_QWORD *)(v2 + 32);
    if (v23 != v24)
    {
      while (1)
      {
        v26 = *(_QWORD **)v23;
        v25 = *(std::__shared_weak_count **)(v23 + 8);
        v87[0] = *(void **)v23;
        v87[1] = v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
        }
        if (Espresso::net::fast_reshape_enabled((Espresso::net *)v26))
        {
          v29 = (_QWORD *)v26[35];
          if (v29 == v26 + 36)
          {
LABEL_46:
            v33 = (_QWORD *)v26[38];
            if (v33 == v26 + 39)
              goto LABEL_57;
            v34 = (_QWORD *)v26[33];
            while (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v34, v33 + 4))
            {
              v35 = (_QWORD *)v33[1];
              if (v35)
              {
                do
                {
                  v36 = v35;
                  v35 = (_QWORD *)*v35;
                }
                while (v35);
              }
              else
              {
                do
                {
                  v36 = (_QWORD *)v33[2];
                  v14 = *v36 == (_QWORD)v33;
                  v33 = v36;
                }
                while (!v14);
              }
              v33 = v36;
              if (v36 == v26 + 39)
                goto LABEL_57;
            }
          }
          else
          {
            v30 = (_QWORD *)v26[30];
            while (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v30, v29 + 4))
            {
              v31 = (_QWORD *)v29[1];
              if (v31)
              {
                do
                {
                  v32 = v31;
                  v31 = (_QWORD *)*v31;
                }
                while (v31);
              }
              else
              {
                do
                {
                  v32 = (_QWORD *)v29[2];
                  v14 = *v32 == (_QWORD)v29;
                  v29 = v32;
                }
                while (!v14);
              }
              v29 = v32;
              if (v32 == v26 + 36)
                goto LABEL_46;
            }
          }
        }
        *((_BYTE *)v26 + 180) = 0;
        Espresso::shape_network_recursive((Espresso *)v26, (Espresso::net *)(v26 + 23), 0, 0);
LABEL_57:
        if (v25)
        {
          v37 = (unint64_t *)&v25->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 += 16;
        if (v23 == v24)
        {
          v2 = *((_QWORD *)this + 133);
          break;
        }
      }
    }
  }
  v39 = *(_QWORD **)(v2 + 96);
  v40 = (_QWORD *)(v2 + 104);
  if (v39 != (_QWORD *)(v2 + 104))
  {
    do
    {
      v92 = *((_DWORD *)v39 + 8);
      v41 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 133) + 24) + 16 * v92);
      *(_OWORD *)__p = v41;
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = (_QWORD *)v39[5];
      if (v45 != v39 + 6)
      {
        do
        {
          v93 = (void **)(v45 + 4);
          v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p[0] + 136, (unsigned __int8 *)v45 + 32, (__int128 **)&v93);
          Espresso::abstract_blob_container::shape((char *)v87, *((_QWORD *)v46 + 5));
          v47 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 48), v92, &v92);
          v93 = (void **)(v45 + 4);
          v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47 + 5, v45 + 4, (__int128 **)&v93);
          v49 = v88;
          *(_OWORD *)(v48 + 56) = *(_OWORD *)v87;
          *(_OWORD *)(v48 + 72) = v49;
          *((_QWORD *)v48 + 11) = v89;
          v50 = (void *)*((_QWORD *)v48 + 12);
          if (v50)
          {
            *((_QWORD *)v48 + 13) = v50;
            operator delete(v50);
            *((_QWORD *)v48 + 12) = 0;
            *((_QWORD *)v48 + 13) = 0;
            *((_QWORD *)v48 + 14) = 0;
          }
          *((_OWORD *)v48 + 6) = v90;
          *((_QWORD *)v48 + 14) = v91;
          v51 = (_QWORD *)v45[1];
          if (v51)
          {
            do
            {
              v52 = v51;
              v51 = (_QWORD *)*v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              v52 = (_QWORD *)v45[2];
              v14 = *v52 == (_QWORD)v45;
              v45 = v52;
            }
            while (!v14);
          }
          v45 = v52;
        }
        while (v52 != v39 + 6);
        v42 = (std::__shared_weak_count *)__p[1];
      }
      if (v42)
      {
        v53 = (unint64_t *)&v42->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v55 = (_QWORD *)v39[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD *)v39[2];
          v14 = *v56 == (_QWORD)v39;
          v39 = v56;
        }
        while (!v14);
      }
      v39 = v56;
    }
    while (v56 != v40);
    v2 = *((_QWORD *)this + 133);
  }
  v57 = *(_QWORD **)(v2 + 120);
  v58 = (_QWORD *)(v2 + 128);
  if (v57 != (_QWORD *)(v2 + 128))
  {
    do
    {
      v92 = *((_DWORD *)v57 + 8);
      v59 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 133) + 24) + 16 * v92);
      *(_OWORD *)__p = v59;
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (*((_QWORD *)&v59 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v63 = (_QWORD *)v57[5];
      if (v63 != v57 + 6)
      {
        do
        {
          v93 = (void **)(v63 + 4);
          v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p[0] + 136, (unsigned __int8 *)v63 + 32, (__int128 **)&v93);
          Espresso::abstract_blob_container::shape((char *)v87, *((_QWORD *)v64 + 5));
          v65 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 72), v92, &v92);
          v93 = (void **)(v63 + 4);
          v66 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v65 + 5, v63 + 4, (__int128 **)&v93);
          v67 = v88;
          *(_OWORD *)(v66 + 56) = *(_OWORD *)v87;
          *(_OWORD *)(v66 + 72) = v67;
          *((_QWORD *)v66 + 11) = v89;
          v68 = (void *)*((_QWORD *)v66 + 12);
          if (v68)
          {
            *((_QWORD *)v66 + 13) = v68;
            operator delete(v68);
            *((_QWORD *)v66 + 12) = 0;
            *((_QWORD *)v66 + 13) = 0;
            *((_QWORD *)v66 + 14) = 0;
          }
          *((_OWORD *)v66 + 6) = v90;
          *((_QWORD *)v66 + 14) = v91;
          v69 = (_QWORD *)v63[1];
          if (v69)
          {
            do
            {
              v70 = v69;
              v69 = (_QWORD *)*v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              v70 = (_QWORD *)v63[2];
              v14 = *v70 == (_QWORD)v63;
              v63 = v70;
            }
            while (!v14);
          }
          v63 = v70;
        }
        while (v70 != v57 + 6);
        v60 = (std::__shared_weak_count *)__p[1];
      }
      if (v60)
      {
        v71 = (unint64_t *)&v60->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v73 = (_QWORD *)v57[1];
      if (v73)
      {
        do
        {
          v74 = v73;
          v73 = (_QWORD *)*v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          v74 = (_QWORD *)v57[2];
          v14 = *v74 == (_QWORD)v57;
          v57 = v74;
        }
        while (!v14);
      }
      v57 = v74;
    }
    while (v74 != v58);
  }
  EspressoLight::espresso_plan::create_binding_task(this);
  v75 = *((_QWORD *)this + 133);
  v76 = *(uint64_t **)(v75 + 24);
  v77 = *(uint64_t **)(v75 + 32);
  while (v76 != v77)
  {
    v78 = *v76;
    std::string::basic_string[abi:ne180100]<0>(v87, "multi_head_prune");
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v78 + 480), v87))
    {
      v83 = 0;
      goto LABEL_127;
    }
    v79 = *v76;
    std::string::basic_string[abi:ne180100]<0>(__p, "multi_head_prune");
    v93 = __p;
    v80 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v79 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v93);
    v81 = (unsigned __int8 *)v80 + 56;
    v82 = *((char *)v80 + 79);
    if (v82 < 0)
    {
      if (*((_QWORD *)v80 + 8) == 1)
      {
        v81 = *(unsigned __int8 **)v81;
LABEL_123:
        v83 = *v81 == 49;
        goto LABEL_125;
      }
    }
    else if (v82 == 1)
    {
      goto LABEL_123;
    }
    v83 = 0;
LABEL_125:
    if (v86 < 0)
      operator delete(__p[0]);
LABEL_127:
    if (SBYTE7(v88) < 0)
    {
      operator delete(v87[0]);
      if (!v83)
        goto LABEL_130;
LABEL_129:
      Espresso::run_pass_on_network<Espresso::pass_multi_head_prune_undeclared>(*v76);
      goto LABEL_130;
    }
    if (v83)
      goto LABEL_129;
LABEL_130:
    v76 += 2;
  }
  EspressoLight::espresso_plan::prepare_compiler_if_needed(this);
  *(_DWORD *)(*((_QWORD *)this + 133) + 160) = 1;
}

void sub_190E75F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;

  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::declare_output(EspressoLight::espresso_plan *this, int a2, char *__s)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v17;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string v22;
  void *__p[2];
  char v24;
  __int128 v25;
  int v26;

  v26 = a2;
  v4 = *((_QWORD *)this + 133);
  v5 = *(_DWORD *)(v4 + 160);
  if (v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v5);
  v7 = v4 + 24;
  v6 = *(_QWORD *)(v4 + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(v7 + 8) - v6) >> 4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *(_OWORD *)(v6 + 16 * a2);
  v25 = v8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = v8;
  if (!(_QWORD)v8)
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Null network found.");
    __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v12 + 136), (unsigned __int8 *)__p))
  {
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v19 = std::string::append(&v21, "' not found.");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v18, &v22);
    __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v12 + 304), __p, (__int128 **)&v22)[56] = 1;
  v13 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 120), v26, &v26);
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13 + 5, __p, (__int128 **)&v22)[56] = 0;
  if (v24 < 0)
    operator delete(__p[0]);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_190E761B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 64);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t espresso_network_declare_input(EspressoLight::espresso_plan *a1, int a2, char *a3)
{
  void *v6;
  uint64_t v7;

  v6 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    EspressoLight::espresso_plan::declare_input(a1, a2, a3);
    v7 = 0;
  }
  else
  {
    v7 = 4294967290;
  }
  objc_autoreleasePoolPop(v6);
  return v7;
}

void EspressoLight::espresso_plan::declare_input(EspressoLight::espresso_plan *this, int a2, char *__s)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v17;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string v22;
  void *__p[2];
  char v24;
  __int128 v25;
  int v26;

  v26 = a2;
  v4 = *((_QWORD *)this + 133);
  v5 = *(_DWORD *)(v4 + 160);
  if (v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v5);
  v7 = v4 + 24;
  v6 = *(_QWORD *)(v4 + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(v7 + 8) - v6) >> 4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *(_OWORD *)(v6 + 16 * a2);
  v25 = v8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = v8;
  if (!(_QWORD)v8)
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Null network found.");
    __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v12 + 136), (unsigned __int8 *)__p))
  {
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v19 = std::string::append(&v21, "' not found.");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v18, &v22);
    __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v12 + 280), __p, (__int128 **)&v22)[56] = 1;
  v13 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 96), v26, &v26);
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13 + 5, __p, (__int128 **)&v22)[56] = 0;
  if (v24 < 0)
    operator delete(__p[0]);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_190E76530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 64);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void EspressoLight::espresso_plan::prepare_compiler_if_needed(EspressoLight::espresso_plan *this)
{
  _QWORD *v1;
  void (***v2)(uint64_t *__return_ptr, _QWORD);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const void *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  BOOL v35;
  uint64_t k;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  int v45;
  int v46;
  void *v47;
  int v48;
  void *v49;
  int v50;
  void *v51;
  int v52;
  void *v53;
  int v54;
  void *v55;
  int v56;
  void *v57;
  int v58;
  void *v59;
  int v60;
  void *v61;
  int v62;
  void *v63;
  int v64;
  void *v65;
  int v66;
  void *v67;
  int v68;
  void *v69;
  int v70;
  void *v71;
  int v72;
  _OWORD *v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count **v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  Espresso *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  _BYTE *v99;
  unint64_t *v100;
  unint64_t v101;
  EspressoLight::espresso_plan *v102;
  EspressoLight::espresso_plan *v103;
  unsigned int (***v104)(_QWORD);
  void *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t (***v112)(_QWORD);
  int v113;
  uint64_t v114;
  void (***v115)(uint64_t *__return_ptr, _QWORD);
  uint64_t v116;
  void (***v117)(uint64_t *__return_ptr, _QWORD);
  uint64_t v118;
  unsigned int (***v119)(_QWORD);
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  int v140;
  char v141;
  uint64_t v142;
  char v143;
  _BYTE *v144;
  uint64_t i;
  void *v146;
  void *v147;
  std::__shared_weak_count *v148;
  unint64_t *p_shared_owners;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  Espresso *v153;
  _QWORD *v154;
  uint64_t v155;
  void *v156;
  void *v157;
  BOOL v158;
  void *v159;
  void *v160;
  uint64_t v161;
  uint64_t j;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  uint64_t v170;
  void *v171;
  int v172;
  int v173;
  unsigned int v174;
  void *v175;
  unsigned int v176;
  void *v177;
  unsigned int v178;
  void *v179;
  int v180;
  void *v181;
  unsigned int v182;
  void *v183;
  unsigned int v184;
  void *v185;
  int v186;
  unsigned int v187;
  void *v188;
  unsigned int v189;
  void *v190;
  unsigned int v191;
  void *v192;
  unsigned int v193;
  void *v194;
  unsigned int v195;
  void *v196;
  unsigned int v197;
  _OWORD *v198;
  void *v199;
  __int128 v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  Espresso *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t *v225;
  _BYTE *v226;
  uint64_t v227;
  unsigned int v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t *v231;
  std::__shared_weak_count *v232;
  _BYTE *v233;
  unint64_t *v234;
  unint64_t v235;
  EspressoLight::espresso_plan *v236;
  EspressoLight::espresso_plan *v237;
  unsigned int (***v238)(_QWORD);
  void *v239;
  void *v240;
  unint64_t *v241;
  unint64_t v242;
  void *v243;
  void *v244;
  unint64_t *v245;
  unint64_t v246;
  int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t (***v256)(_QWORD);
  int v257;
  Espresso *v258;
  void (***v259)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  char *v265;
  unsigned int (***v266)(_QWORD);
  void *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t *v285;
  NSObject *v286;
  dispatch_queue_t v287;
  uint64_t v288;
  void *v289;
  void *v290;
  void *v291;
  id v292;
  id v293;
  Espresso *v294;
  _QWORD *v295;
  uint64_t v296;
  void (****v297)(uint64_t *__return_ptr, _QWORD);
  unsigned int v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t *v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  void *v306;
  void *v307;
  id obj;
  id obja;
  id objb;
  id v311;
  id v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  void *v317;
  void *v318;
  _QWORD v319[5];
  _QWORD v320[5];
  uint64_t v321;
  std::__shared_weak_count *v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  uint64_t v325[2];
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  id v330;
  void *__p[2];
  void (*v332)(uint64_t, uint64_t);
  void *v333;
  Espresso *v334;
  Espresso *v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338;
  std::__shared_weak_count *v339;
  _BYTE *v340;
  std::__shared_weak_count *v341;
  void *lpsrc;
  std::__shared_weak_count *v343;
  void *v344[2];
  char v345;
  _BYTE v346[32];
  char *v347;
  __int128 v348;
  uint64_t v349;
  _OWORD *v350[3];
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  char **v355;
  char *v356[2];
  id v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  const void *v360;
  std::__shared_weak_count *v361;
  Espresso *v362[2];
  _BYTE v363[128];
  __int128 v364;
  __int128 v365;
  char *v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;

  v369 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)*((_QWORD *)this + 133);
  v2 = (void (***)(uint64_t *__return_ptr, _QWORD))*v1;
  if (*(_BYTE *)(*v1 + 124))
  {
    v3 = v1[3];
    if (v1[4] != v3)
    {
      v4 = 0;
      v295 = (_QWORD *)*((_QWORD *)this + 133);
      v5 = v295;
      while (1)
      {
        v300 = v4;
        v296 = v3;
        v302 = (uint64_t *)(v3 + 16 * v4);
        v6 = *(_QWORD *)(*v302 + 16);
        if (*(_BYTE *)(v6 + 124))
        {
          v7 = *(_QWORD *)(*v302 + 1256);
          if (v7)
          {
            if (*(_BYTE *)(v7 + 124))
            {
              v8 = *(_OWORD *)v302;
              *(_OWORD *)v362 = v8;
              v9 = (char *)*((_QWORD *)&v8 + 1);
              if (*((_QWORD *)&v8 + 1))
              {
                v10 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
                do
                  v11 = __ldxr(v10);
                while (__stxr(v11 + 1, v10));
              }
              v12 = (_QWORD *)v8;
              v13 = *(_QWORD *)(v8 + 16);
              if (!*(_BYTE *)(v13 + 124))
                goto LABEL_385;
              v14 = *(_QWORD *)(v8 + 1256);
              if (!v14 || !*(_BYTE *)(v14 + 124))
                goto LABEL_385;
              v297 = (void (****)(uint64_t *__return_ptr, _QWORD))v5;
              v303 = (***(uint64_t (****)(_QWORD))(v13 + 8))(*(_QWORD *)(v13 + 8));
              v15 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v12 + 66, v303);
              if (v15)
              {
                v16 = (const void *)v15[3];
                v17 = v15[4];
                v360 = v16;
                v361 = (std::__shared_weak_count *)v17;
                if (v17)
                {
                  v18 = (unint64_t *)(v17 + 8);
                  do
                    v19 = __ldxr(v18);
                  while (__stxr(v19 + 1, v18));
                }
              }
              else
              {
                v17 = 0;
                v16 = 0;
                v361 = 0;
                v360 = 0;
              }
              v299 = (***(uint64_t (****)(_QWORD))(v12[157] + 8))(*(_QWORD *)(v12[157] + 8));
              v131 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v12 + 66, v299);
              if (v131)
              {
                v132 = v131[3];
                v133 = v131[4];
                v358 = v132;
                v359 = (std::__shared_weak_count *)v133;
                if (v133)
                {
                  v134 = (unint64_t *)(v133 + 8);
                  do
                    v135 = __ldxr(v134);
                  while (__stxr(v135 + 1, v134));
                }
              }
              else
              {
                v133 = 0;
                v132 = 0;
                v359 = 0;
                v358 = 0;
              }
              *(_QWORD *)&v364 = v16;
              *((_QWORD *)&v364 + 1) = v17;
              if (v17)
              {
                v136 = (unint64_t *)(v17 + 8);
                do
                  v137 = __ldxr(v136);
                while (__stxr(v137 + 1, v136));
              }
              *(_QWORD *)&v365 = v132;
              *((_QWORD *)&v365 + 1) = v133;
              if (v133)
              {
                v138 = (unint64_t *)(v133 + 8);
                do
                  v139 = __ldxr(v138);
                while (__stxr(v139 + 1, v138));
              }
              v140 = 0;
              v141 = 0;
              v142 = 0;
              do
              {
                v143 = v141;
                v144 = (_BYTE *)*((_QWORD *)&v364 + 2 * v142);
                if (v144)
                {
                  v144[24] = *((_BYTE *)this + 1096);
                  v140 |= (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v144 + 64))(v144) ^ 1;
                }
                else
                {
                  v140 = 1;
                }
                v141 = 1;
                v142 = 1;
              }
              while ((v143 & 1) == 0);
              for (i = 16; i != -16; i -= 16)
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v364 + i);
              if ((v140 & 1) == 0)
                goto LABEL_374;
              if (v16
              {
                v147 = v146;
                v148 = v361;
                *(_QWORD *)&v364 = v146;
                *((_QWORD *)&v364 + 1) = v361;
                if (v361)
                {
                  p_shared_owners = (unint64_t *)&v361->__shared_owners_;
                  do
                    v150 = __ldxr(p_shared_owners);
                  while (__stxr(v150 + 1, p_shared_owners));
                }
                if (!v12[99] && (*(unsigned int (**)(void *))(*(_QWORD *)v146 + 128))(v146))
                  (*(void (**)(void *))(*(_QWORD *)v147 + 136))(v147);
                if (v148)
                {
                  v151 = (unint64_t *)&v148->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                    std::__shared_weak_count::__release_weak(v148);
                  }
                }
              }
              else
              {
                v364 = 0uLL;
              }
              v153 = v362[0];
              v154 = (_QWORD *)((char *)v362[0] + 728);
              if (*((char *)v362[0] + 751) < 0)
              {
                if (*((_QWORD *)v362[0] + 92) && !*((_QWORD *)v362[0] + 99))
                {
                  v154 = (_QWORD *)*v154;
                  goto LABEL_209;
                }
              }
              else if (*((_BYTE *)v362[0] + 751) && !*((_QWORD *)v362[0] + 99))
              {
LABEL_209:
                v294 = v362[0];
                objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v154);
                v155 = objc_claimAutoreleasedReturnValue();
                v357 = 0;
                v290 = (void *)v155;
                objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:");
                v156 = (void *)objc_claimAutoreleasedReturnValue();
                v292 = v357;
                if (v156)
                {
                  v318 = v156;
                  objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("net_inputs"));
                  v157 = (void *)objc_claimAutoreleasedReturnValue();
                  v158 = v157 == 0;

                  if (!v158)
                  {
                    v356[0] = 0;
                    v356[1] = 0;
                    v355 = v356;
                    v351 = 0u;
                    v352 = 0u;
                    v353 = 0u;
                    v354 = 0u;
                    v159 = v318;
                    objc_msgSend(v318, "objectForKeyedSubscript:", CFSTR("net_inputs"));
                    v160 = (void *)objc_claimAutoreleasedReturnValue();
                    v312 = v160;
                    v161 = objc_msgSend(v160, "countByEnumeratingWithState:objects:count:", &v351, &v364, 16);
                    if (v161)
                    {
                      v314 = *(_QWORD *)v352;
                      do
                      {
                        v316 = v161;
                        for (j = 0; j != v316; ++j)
                        {
                          if (*(_QWORD *)v352 != v314)
                            objc_enumerationMutation(v312);
                          v163 = *(void **)(*((_QWORD *)&v351 + 1) + 8 * j);
                          objc_msgSend(v159, "objectForKeyedSubscript:", CFSTR("net_inputs"));
                          v164 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v164, "objectForKeyedSubscript:", v163);
                          v165 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v165, "objectForKeyedSubscript:", CFSTR("shape"));
                          v166 = (void *)objc_claimAutoreleasedReturnValue();

                          objc_opt_class();
                          if ((objc_opt_isKindOfClass() & 1) == 0)
                            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to retrieve shape in key.");
                          objc_msgSend(v318, "objectForKeyedSubscript:", CFSTR("net_inputs"));
                          v167 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v167, "objectForKeyedSubscript:", v163);
                          v168 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v168, "objectForKey:", CFSTR("rank"));
                          v169 = (void *)objc_claimAutoreleasedReturnValue();
                          v170 = objc_msgSend(v169, "integerValue");

                          memset(v350, 0, sizeof(v350));
                          switch(v170)
                          {
                            case 1:
                              objc_msgSend(v166, "objectAtIndex:", 4);
                              v171 = (void *)objc_claimAutoreleasedReturnValue();
                              v172 = objc_msgSend(v171, "integerValue");

                              LODWORD(v350[0]) = v172;
                              v173 = 1;
                              *(_OWORD *)((char *)v350 + 4) = 0uLL;
                              goto LABEL_223;
                            case 2:
                              objc_msgSend(v166, "objectAtIndex:", 3);
                              v194 = (void *)objc_claimAutoreleasedReturnValue();
                              v195 = objc_msgSend(v194, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 4);
                              v196 = (void *)objc_claimAutoreleasedReturnValue();
                              v197 = objc_msgSend(v196, "integerValue");

                              v350[0] = (_OWORD *)__PAIR64__(v197, v195);
                              v350[1] = 0;
                              v173 = 2;
                              LODWORD(v350[2]) = 0;
                              goto LABEL_223;
                            case 3:
                              objc_msgSend(v166, "objectAtIndex:", 2);
                              v181 = (void *)objc_claimAutoreleasedReturnValue();
                              v182 = objc_msgSend(v181, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 3);
                              v183 = (void *)objc_claimAutoreleasedReturnValue();
                              v184 = objc_msgSend(v183, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 4);
                              v185 = (void *)objc_claimAutoreleasedReturnValue();
                              v186 = objc_msgSend(v185, "integerValue");

                              v350[0] = (_OWORD *)__PAIR64__(v184, v182);
                              LODWORD(v350[1]) = v186;
                              v173 = 3;
                              *(_OWORD **)((char *)&v350[1] + 4) = 0;
                              goto LABEL_223;
                            case 4:
                              objc_msgSend(v166, "objectAtIndex:", 1);
                              objb = (id)objc_claimAutoreleasedReturnValue();
                              v187 = objc_msgSend(objb, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 2);
                              v188 = (void *)objc_claimAutoreleasedReturnValue();
                              v189 = objc_msgSend(v188, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 3);
                              v190 = (void *)objc_claimAutoreleasedReturnValue();
                              v191 = objc_msgSend(v190, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 4);
                              v192 = (void *)objc_claimAutoreleasedReturnValue();
                              v193 = objc_msgSend(v192, "integerValue");

                              v350[0] = (_OWORD *)__PAIR64__(v189, v187);
                              v350[1] = (_OWORD *)__PAIR64__(v193, v191);
                              v173 = 4;
                              LODWORD(v350[2]) = 0;
                              goto LABEL_223;
                            case 5:
                              objc_msgSend(v166, "objectAtIndex:", 0);
                              obja = (id)objc_claimAutoreleasedReturnValue();
                              v305 = objc_msgSend(obja, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 1);
                              v307 = (void *)objc_claimAutoreleasedReturnValue();
                              v174 = objc_msgSend(v307, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 2);
                              v175 = (void *)objc_claimAutoreleasedReturnValue();
                              v176 = objc_msgSend(v175, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 3);
                              v177 = (void *)objc_claimAutoreleasedReturnValue();
                              v178 = objc_msgSend(v177, "integerValue");
                              objc_msgSend(v166, "objectAtIndex:", 4);
                              v179 = (void *)objc_claimAutoreleasedReturnValue();
                              v180 = objc_msgSend(v179, "integerValue");

                              v350[0] = (_OWORD *)__PAIR64__(v174, v305);
                              v350[1] = (_OWORD *)__PAIR64__(v178, v176);
                              v173 = 5;
                              LODWORD(v350[2]) = v180;
LABEL_223:
                              HIDWORD(v350[2]) = v173;
                              break;
                            default:
                              break;
                          }
                          Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v350, 0, (uint64_t)v346);
                          std::string::basic_string[abi:ne180100]<0>(v344, (char *)objc_msgSend(objc_retainAutorelease(v163), "UTF8String"));
                          lpsrc = v344;
                          v198 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v355, v344, (_OWORD **)&lpsrc);
                          v199 = (void *)*((_QWORD *)v198 + 12);
                          v200 = *(_OWORD *)&v346[16];
                          *(_OWORD *)((char *)v198 + 56) = *(_OWORD *)v346;
                          *(_OWORD *)((char *)v198 + 72) = v200;
                          *((_QWORD *)v198 + 11) = v347;
                          if (v199)
                          {
                            *((_QWORD *)v198 + 13) = v199;
                            operator delete(v199);
                            *((_QWORD *)v198 + 12) = 0;
                            *((_QWORD *)v198 + 13) = 0;
                            *((_QWORD *)v198 + 14) = 0;
                          }
                          v198[6] = v348;
                          *((_QWORD *)v198 + 14) = v349;
                          v349 = 0;
                          v348 = 0uLL;
                          if (v345 < 0)
                          {
                            operator delete(v344[0]);
                            if ((_QWORD)v348)
                            {
                              *((_QWORD *)&v348 + 1) = v348;
                              operator delete((void *)v348);
                            }
                          }

                          v159 = v318;
                        }
                        v160 = v312;
                        v161 = objc_msgSend(v312, "countByEnumeratingWithState:objects:count:", &v351, &v364, 16);
                      }
                      while (v161);
                    }

                    v201 = (std::__shared_weak_count *)v362[1];
                    v350[0] = v294;
                    v350[1] = (_OWORD *)v362[1];
                    if (v362[1])
                    {
                      v202 = (unint64_t *)((char *)v362[1] + 8);
                      do
                        v203 = __ldxr(v202);
                      while (__stxr(v203 + 1, v202));
                    }
                    Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)v350, (uint64_t)&v355, (uint64_t)v346);
                    if (v201)
                    {
                      v204 = (unint64_t *)&v201->__shared_owners_;
                      do
                        v205 = __ldaxr(v204);
                      while (__stlxr(v205 - 1, v204));
                      if (!v205)
                      {
                        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                        std::__shared_weak_count::__release_weak(v201);
                      }
                    }
                    v206 = v362[0];
                    v207 = (std::__shared_weak_count *)v362[1];
                    v344[0] = v362[0];
                    v344[1] = v362[1];
                    if (v362[1])
                    {
                      v208 = (unint64_t *)((char *)v362[1] + 8);
                      do
                        v209 = __ldxr(v208);
                      while (__stxr(v209 + 1, v208));
                    }
                    Espresso::shape_network_recursive(v206, (Espresso::net *)v346, 0, 0);
                    if (v207)
                    {
                      v210 = (unint64_t *)&v207->__shared_owners_;
                      do
                        v211 = __ldaxr(v210);
                      while (__stlxr(v211 - 1, v210));
                      if (!v211)
                      {
                        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                        std::__shared_weak_count::__release_weak(v207);
                      }
                    }
                    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v346[24], v347);
                    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v346, *(char **)&v346[8]);
                    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v355, v356[0]);
                    v294 = v362[0];
                  }
                  v156 = v318;
                }

                v153 = v294;
              }
              v212 = *((_QWORD *)v153 + 2);
              *(_QWORD *)v346 = v153;
              *(Espresso **)&v346[8] = v362[1];
              if (v362[1])
              {
                v213 = (unint64_t *)((char *)v362[1] + 8);
                do
                  v214 = __ldxr(v213);
                while (__stxr(v214 + 1, v213));
              }
              (*(void (**)(uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v212 + 88))(v212, v346, v154);
              v215 = *(std::__shared_weak_count **)&v346[8];
              if (*(_QWORD *)&v346[8])
              {
                v216 = (unint64_t *)(*(_QWORD *)&v346[8] + 8);
                do
                  v217 = __ldaxr(v216);
                while (__stlxr(v217 - 1, v216));
                if (!v217)
                {
                  ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                  std::__shared_weak_count::__release_weak(v215);
                }
              }
              v218 = *((_QWORD *)v362[0] + 157);
              v355 = (char **)v362[0];
              v356[0] = (char *)v362[1];
              if (v362[1])
              {
                v219 = (unint64_t *)((char *)v362[1] + 8);
                do
                  v220 = __ldxr(v219);
                while (__stxr(v220 + 1, v219));
              }
              (*(void (**)(uint64_t, char ***))(*(_QWORD *)v218 + 88))(v218, &v355);
              v221 = (std::__shared_weak_count *)v356[0];
              if (v356[0])
              {
                v222 = (unint64_t *)(v356[0] + 8);
                do
                  v223 = __ldaxr(v222);
                while (__stlxr(v223 - 1, v222));
                if (!v223)
                {
                  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                  std::__shared_weak_count::__release_weak(v221);
                }
              }
              v224 = (_QWORD *)((char *)v362[0] + 528);
              v225 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)v362[0] + 66, v303);
              if (v225)
              {
                v226 = (_BYTE *)v225[3];
                v227 = v225[4];
                lpsrc = v226;
                v343 = (std::__shared_weak_count *)v227;
                v228 = v299;
                if (v227)
                {
                  v229 = (unint64_t *)(v227 + 8);
                  do
                    v230 = __ldxr(v229);
                  while (__stxr(v230 + 1, v229));
                }
              }
              else
              {
                v227 = 0;
                v226 = 0;
                v343 = 0;
                lpsrc = 0;
                v228 = v299;
              }
              v231 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v224, v228);
              if (v231)
              {
                v233 = (_BYTE *)v231[3];
                v232 = (std::__shared_weak_count *)v231[4];
                v340 = v233;
                v341 = v232;
                if (v232)
                {
                  v234 = (unint64_t *)&v232->__shared_owners_;
                  do
                    v235 = __ldxr(v234);
                  while (__stxr(v235 + 1, v234));
                }
              }
              else
              {
                v232 = 0;
                v233 = 0;
                v341 = 0;
                v340 = 0;
              }
              v236 = this;
              if (v226)
                v226[24] = *((_BYTE *)this + 1096);
              if (v233)
                v233[24] = *((_BYTE *)this + 1096);
              if (EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken != -1)
              {
                dispatch_once(&EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken, &__block_literal_global_231);
                v236 = this;
              }
              v237 = v236;
              EspressoLight::intermediate_buffer_sharing_singleton::setup_sharing_if_needed(EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret, (uint64_t *)v362, (uint64_t)v236);
              v238 = *(unsigned int (****)(_QWORD))(**((_QWORD **)v237 + 133) + 8);
              if ((**v238)(v238) >> 1 != 5003)
                goto LABEL_333;
              if (v226
              {
                v240 = v239;
                v338 = v239;
                v339 = (std::__shared_weak_count *)v227;
                if (v227)
                {
                  v241 = (unint64_t *)(v227 + 8);
                  do
                    v242 = __ldxr(v241);
                  while (__stxr(v242 + 1, v241));
                }
              }
              else
              {
                v240 = 0;
                v338 = 0;
                v339 = 0;
              }
              if (!v233
              {
                v336 = 0;
                v337 = 0;
LABEL_401:
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to recreate both compilers for ANE, MPSGraph");
              }
              v244 = v243;
              v336 = v243;
              v337 = v232;
              if (v232)
              {
                v245 = (unint64_t *)&v232->__shared_owners_;
                do
                  v246 = __ldxr(v245);
                while (__stxr(v246 + 1, v245));
              }
              if (!v240)
                goto LABEL_401;
              v247 = *(_DWORD *)(*((_QWORD *)this + 133) + 164);
              if (v247 <= 16382)
              {
                if (v247)
                {
                  if (v247 == 1)
                  {
                    v248 = 0;
                  }
                  else
                  {
                    if (v247 == 0x2000)
                    {
                      v248 = 1;
                      goto LABEL_310;
                    }
LABEL_305:
                    v248 = 4;
                  }
                  goto LABEL_310;
                }
                (*(void (**)(void *))(*(_QWORD *)v240 + 112))(v240);
                (*(void (**)(void *))(*(_QWORD *)v244 + 112))(v244);
LABEL_322:
                if (v232)
                {
                  v251 = (unint64_t *)&v232->__shared_owners_;
                  do
                    v252 = __ldaxr(v251);
                  while (__stlxr(v252 - 1, v251));
                  if (!v252)
                  {
                    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                    std::__shared_weak_count::__release_weak(v232);
                  }
                }
                v253 = v339;
                if (v339)
                {
                  v254 = (unint64_t *)&v339->__shared_owners_;
                  do
                    v255 = __ldaxr(v254);
                  while (__stlxr(v255 - 1, v254));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                    std::__shared_weak_count::__release_weak(v253);
                  }
                }
                v237 = this;
LABEL_333:
                v256 = *(uint64_t (****)(_QWORD))(**((_QWORD **)v237 + 133) + 8);
                v257 = (**v256)(v256);
                v258 = v362[0];
                if (v257 == 10008)
                {
                  if (*((char *)v362[0] + 471) < 0)
                  {
                    if (!*((_QWORD *)v362[0] + 57))
                      goto LABEL_348;
                  }
                  else if (!*((_BYTE *)v362[0] + 471))
                  {
                    goto LABEL_348;
                  }
                }
                v259 = *v297;
                __p[0] = (void *)MEMORY[0x1E0C809B0];
                __p[1] = (void *)3321888768;
                v332 = ___ZN13EspressoLight13espresso_plan29prepare_network_two_compilersEm_block_invoke;
                v333 = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
                v334 = v362[0];
                v335 = v362[1];
                if (v362[1])
                {
                  v260 = (unint64_t *)((char *)v362[1] + 8);
                  do
                    v261 = __ldxr(v260);
                  while (__stxr(v261 + 1, v260));
                }
                Espresso::abstract_context::compute_batch_sync(v259, __p);
                if (lpsrc)
                  (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 32))(lpsrc, (uint64_t)v258 + 448);
                v262 = (std::__shared_weak_count *)v335;
                if (v335)
                {
                  v263 = (unint64_t *)((char *)v335 + 8);
                  do
                    v264 = __ldaxr(v263);
                  while (__stlxr(v264 - 1, v263));
                  if (!v264)
                  {
                    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                    std::__shared_weak_count::__release_weak(v262);
                  }
                }
LABEL_348:
                if (*((char *)v362[0] + 1239) < 0)
                {
                  if (!*((_QWORD *)v362[0] + 153))
                    goto LABEL_355;
                }
                else if (!*((_BYTE *)v362[0] + 1239))
                {
                  goto LABEL_355;
                }
                v265 = (char *)v362[0] + 1216;
                if (lpsrc)
                  (*(void (**)(void *, char *))(*(_QWORD *)lpsrc + 56))(lpsrc, (char *)v362[0] + 1216);
                MEMORY[0x19401C808](v265, "");
LABEL_355:
                v266 = *(unsigned int (****)(_QWORD))(**((_QWORD **)this + 133) + 8);
                if ((**v266)(v266) >> 1 == 5003)
                {
                  v268 = v343;
                  v338 = v267;
                  v339 = v343;
                  if (v343)
                  {
                    v269 = (unint64_t *)&v343->__shared_owners_;
                    do
                      v270 = __ldxr(v269);
                    while (__stxr(v270 + 1, v269));
                  }
                  *(_QWORD *)(*((_QWORD *)this + 133) + 400) = (*(uint64_t (**)(void *))(*(_QWORD *)v267 + 96))(v267);
                  if (v268)
                  {
                    v271 = (unint64_t *)&v268->__shared_owners_;
                    do
                      v272 = __ldaxr(v271);
                    while (__stlxr(v272 - 1, v271));
                    if (!v272)
                    {
                      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                      std::__shared_weak_count::__release_weak(v268);
                    }
                  }
                }
                v273 = v341;
                if (v341)
                {
                  v274 = (unint64_t *)&v341->__shared_owners_;
                  do
                    v275 = __ldaxr(v274);
                  while (__stlxr(v275 - 1, v274));
                  if (!v275)
                  {
                    ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                    std::__shared_weak_count::__release_weak(v273);
                  }
                }
                v276 = v343;
                if (v343)
                {
                  v277 = (unint64_t *)&v343->__shared_owners_;
                  do
                    v278 = __ldaxr(v277);
                  while (__stlxr(v278 - 1, v277));
                  if (!v278)
                  {
                    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                    std::__shared_weak_count::__release_weak(v276);
                  }
                }
LABEL_374:
                v279 = v359;
                if (v359)
                {
                  v280 = (unint64_t *)&v359->__shared_owners_;
                  do
                    v281 = __ldaxr(v280);
                  while (__stlxr(v281 - 1, v280));
                  if (!v281)
                  {
                    ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                    std::__shared_weak_count::__release_weak(v279);
                  }
                }
                v282 = v361;
                if (v361)
                {
                  v283 = (unint64_t *)&v361->__shared_owners_;
                  do
                    v284 = __ldaxr(v283);
                  while (__stlxr(v284 - 1, v283));
                  if (!v284)
                  {
                    ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                    std::__shared_weak_count::__release_weak(v282);
                  }
                }
                v9 = (char *)v362[1];
LABEL_385:
                if (v9)
                {
                  v285 = (unint64_t *)(v9 + 8);
                  do
                    v130 = __ldaxr(v285);
                  while (__stlxr(v130 - 1, v285));
                  goto LABEL_388;
                }
                goto LABEL_390;
              }
              if (v247 == 0x3FFF)
              {
                v248 = 2;
              }
              else
              {
                if (v247 != 24574)
                  goto LABEL_305;
                v248 = 3;
              }
LABEL_310:
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v240 + 104))(v240, v248);
              v249 = *(_DWORD *)(*((_QWORD *)this + 133) + 164);
              if (v249 <= 16382)
              {
                if (v249 == 1)
                {
                  v250 = 0;
                }
                else
                {
                  if (v249 != 0x2000)
                    goto LABEL_317;
                  v250 = 1;
                }
              }
              else if (v249 == 0x3FFF)
              {
                v250 = 2;
              }
              else if (v249 == 24574)
              {
                v250 = 3;
              }
              else
              {
LABEL_317:
                v250 = 4;
              }
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v244 + 104))(v244, v250);
              goto LABEL_322;
            }
          }
        }
        v298 = (***(uint64_t (****)(_QWORD))(v6 + 8))(*(_QWORD *)(v6 + 8));
        v20 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(*v302 + 528), v298);
        if (v20)
        {
          v21 = v20[3];
          v9 = (char *)v20[4];
          v355 = (char **)v21;
          v356[0] = v9;
          if (v9)
          {
            v22 = (unint64_t *)(v9 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          if (v21)
          {
            *(_BYTE *)(v21 + 24) = *((_BYTE *)this + 1096);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21) & 1) != 0)
              goto LABEL_163;
            if (v24)
            {
              v25 = v24;
              *(_QWORD *)&v364 = v24;
              *((_QWORD *)&v364 + 1) = v9;
              if (v9)
              {
                v26 = (unint64_t *)(v9 + 8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 1, v26));
              }
              if (!*(_QWORD *)(*v302 + 792) && (*(unsigned int (**)(void *))(*(_QWORD *)v24 + 128))(v24))
                (*(void (**)(void *))(*(_QWORD *)v25 + 136))(v25);
              if (v9)
              {
                v28 = (unint64_t *)(v9 + 8);
                do
                  v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  (*(void (**)(char *))(*(_QWORD *)v9 + 16))(v9);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
                }
              }
            }
          }
        }
        else
        {
          v356[0] = 0;
          v355 = 0;
        }
        v30 = *v302;
        v31 = (_QWORD *)(*v302 + 728);
        if (*(char *)(*v302 + 751) < 0)
        {
          if (!*(_QWORD *)(v30 + 736) || *(_QWORD *)(v30 + 792))
            goto LABEL_84;
          v31 = (_QWORD *)*v31;
        }
        else if (!*(_BYTE *)(*v302 + 751) || *(_QWORD *)(v30 + 792))
        {
          goto LABEL_84;
        }
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v31);
        v32 = objc_claimAutoreleasedReturnValue();
        v330 = 0;
        v291 = (void *)v32;
        objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v293 = v330;
        if (v33)
        {
          v315 = v33;
          objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("net_inputs"));
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = v34 == 0;

          if (!v35)
          {
            *((_QWORD *)&v351 + 1) = 0;
            *(_QWORD *)&v352 = 0;
            *(_QWORD *)&v351 = (char *)&v351 + 8;
            v326 = 0u;
            v327 = 0u;
            v328 = 0u;
            v329 = 0u;
            objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("net_inputs"));
            obj = (id)objc_claimAutoreleasedReturnValue();
            v313 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v326, v363, 16);
            if (v313)
            {
              v311 = *(id *)v327;
              do
              {
                for (k = 0; k != v313; ++k)
                {
                  if (*(id *)v327 != v311)
                    objc_enumerationMutation(obj);
                  v37 = *(void **)(*((_QWORD *)&v326 + 1) + 8 * k);
                  objc_msgSend(v315, "objectForKeyedSubscript:", CFSTR("net_inputs"));
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v38, "objectForKeyedSubscript:", v37);
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("shape"));
                  v317 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0)
                    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to retrieve shape in key.");
                  objc_msgSend(v315, "objectForKeyedSubscript:", CFSTR("net_inputs"));
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v40, "objectForKeyedSubscript:", v37);
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v41, "objectForKey:", CFSTR("rank"));
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  v43 = objc_msgSend(v42, "integerValue");

                  memset(v346, 0, 24);
                  switch(v43)
                  {
                    case 1:
                      objc_msgSend(v317, "objectAtIndex:", 4);
                      v44 = (void *)objc_claimAutoreleasedReturnValue();
                      v45 = objc_msgSend(v44, "integerValue");

                      *(_DWORD *)v346 = v45;
                      v46 = 1;
                      *(_OWORD *)&v346[4] = 0uLL;
                      goto LABEL_58;
                    case 2:
                      objc_msgSend(v317, "objectAtIndex:", 3);
                      v69 = (void *)objc_claimAutoreleasedReturnValue();
                      v70 = objc_msgSend(v69, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 4);
                      v71 = (void *)objc_claimAutoreleasedReturnValue();
                      v72 = objc_msgSend(v71, "integerValue");

                      *(_DWORD *)v346 = v70;
                      *(_DWORD *)&v346[4] = v72;
                      *(_QWORD *)&v346[8] = 0;
                      v46 = 2;
                      *(_DWORD *)&v346[16] = 0;
                      goto LABEL_58;
                    case 3:
                      objc_msgSend(v317, "objectAtIndex:", 2);
                      v55 = (void *)objc_claimAutoreleasedReturnValue();
                      v56 = objc_msgSend(v55, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 3);
                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                      v58 = objc_msgSend(v57, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 4);
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      v60 = objc_msgSend(v59, "integerValue");

                      *(_DWORD *)v346 = v56;
                      *(_DWORD *)&v346[4] = v58;
                      *(_DWORD *)&v346[8] = v60;
                      v46 = 3;
                      *(_QWORD *)&v346[12] = 0;
                      goto LABEL_58;
                    case 4:
                      objc_msgSend(v317, "objectAtIndex:", 1);
                      v61 = (void *)objc_claimAutoreleasedReturnValue();
                      v62 = objc_msgSend(v61, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 2);
                      v63 = (void *)objc_claimAutoreleasedReturnValue();
                      v64 = objc_msgSend(v63, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 3);
                      v65 = (void *)objc_claimAutoreleasedReturnValue();
                      v66 = objc_msgSend(v65, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 4);
                      v67 = (void *)objc_claimAutoreleasedReturnValue();
                      v68 = objc_msgSend(v67, "integerValue");

                      *(_DWORD *)v346 = v62;
                      *(_DWORD *)&v346[4] = v64;
                      *(_DWORD *)&v346[8] = v66;
                      *(_DWORD *)&v346[12] = v68;
                      v46 = 4;
                      *(_DWORD *)&v346[16] = 0;
                      goto LABEL_58;
                    case 5:
                      objc_msgSend(v317, "objectAtIndex:", 0);
                      v306 = (void *)objc_claimAutoreleasedReturnValue();
                      v304 = objc_msgSend(v306, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 1);
                      v47 = (void *)objc_claimAutoreleasedReturnValue();
                      v48 = objc_msgSend(v47, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 2);
                      v49 = (void *)objc_claimAutoreleasedReturnValue();
                      v50 = objc_msgSend(v49, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 3);
                      v51 = (void *)objc_claimAutoreleasedReturnValue();
                      v52 = objc_msgSend(v51, "integerValue");
                      objc_msgSend(v317, "objectAtIndex:", 4);
                      v53 = (void *)objc_claimAutoreleasedReturnValue();
                      v54 = objc_msgSend(v53, "integerValue");

                      *(_DWORD *)v346 = v304;
                      *(_DWORD *)&v346[4] = v48;
                      *(_DWORD *)&v346[8] = v50;
                      *(_DWORD *)&v346[12] = v52;
                      v46 = 5;
                      *(_DWORD *)&v346[16] = v54;
LABEL_58:
                      *(_DWORD *)&v346[20] = v46;
                      break;
                    default:
                      break;
                  }
                  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v346, 0, (uint64_t)&v364);
                  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v37), "UTF8String"));
                  v350[0] = __p;
                  v73 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v351, __p, v350);
                  v74 = (void *)*((_QWORD *)v73 + 12);
                  v75 = v365;
                  *(_OWORD *)((char *)v73 + 56) = v364;
                  *(_OWORD *)((char *)v73 + 72) = v75;
                  *((_QWORD *)v73 + 11) = v366;
                  if (v74)
                  {
                    *((_QWORD *)v73 + 13) = v74;
                    operator delete(v74);
                    *((_QWORD *)v73 + 12) = 0;
                    *((_QWORD *)v73 + 13) = 0;
                    *((_QWORD *)v73 + 14) = 0;
                  }
                  v73[6] = v367;
                  *((_QWORD *)v73 + 14) = v368;
                  v368 = 0;
                  v367 = 0uLL;
                  if (SHIBYTE(v332) < 0)
                  {
                    operator delete(__p[0]);
                    if ((_QWORD)v367)
                    {
                      *((_QWORD *)&v367 + 1) = v367;
                      operator delete((void *)v367);
                    }
                  }

                }
                v313 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v326, v363, 16);
              }
              while (v313);
            }

            v325[0] = *v302;
            v76 = v296 + 16 * v300;
            v79 = *(_QWORD *)(v76 + 8);
            v78 = (std::__shared_weak_count **)(v76 + 8);
            v77 = (std::__shared_weak_count *)v79;
            v325[1] = v79;
            if (v79)
            {
              v80 = (unint64_t *)&v77->__shared_owners_;
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
            }
            Espresso::compute_network_shape_starting_from_data_shapes(v325, (uint64_t)&v351, (uint64_t)&v364);
            if (v77)
            {
              v82 = (unint64_t *)&v77->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            v84 = (Espresso *)*v302;
            v323 = *v302;
            v85 = *v78;
            v324 = v85;
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldxr(v86);
              while (__stxr(v87 + 1, v86));
            }
            Espresso::shape_network_recursive(v84, (Espresso::net *)&v364, 0, 0);
            if (v85)
            {
              v88 = (unint64_t *)&v85->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v365 + 8, v366);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v364, *((char **)&v364 + 1));
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v351, *((char **)&v351 + 1));
            v33 = v315;
          }
        }

        v30 = *v302;
LABEL_84:
        v90 = *v295;
        v321 = v30;
        v91 = *(std::__shared_weak_count **)(v296 + 16 * v300 + 8);
        v322 = v91;
        if (v91)
        {
          v92 = (unint64_t *)&v91->__shared_owners_;
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
        (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v90 + 88))(v90, &v321, v31);
        v94 = v322;
        if (v322)
        {
          v95 = (unint64_t *)&v322->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v97 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(*v302 + 528), v298);
        if (v97)
        {
          v99 = (_BYTE *)v97[3];
          v98 = (std::__shared_weak_count *)v97[4];
          *(_QWORD *)&v364 = v99;
          *((_QWORD *)&v364 + 1) = v98;
          if (v98)
          {
            v100 = (unint64_t *)&v98->__shared_owners_;
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
          }
          if (v99)
          {
            v102 = this;
            v99[24] = *((_BYTE *)this + 1096);
            goto LABEL_100;
          }
        }
        else
        {
          v98 = 0;
          v99 = 0;
          v364 = 0uLL;
        }
        v102 = this;
LABEL_100:
        if (EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken != -1)
        {
          dispatch_once(&EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken, &__block_literal_global_231);
          v102 = this;
        }
        v103 = v102;
        EspressoLight::intermediate_buffer_sharing_singleton::setup_sharing_if_needed(EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret, v302, (uint64_t)v102);
        v104 = *(unsigned int (****)(_QWORD))(**((_QWORD **)v103 + 133) + 8);
        if ((**v104)(v104) >> 1 == 5003)
        {
          if (!v99
          {
            v351 = 0uLL;
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("compiler must exist for network executing on ANE");
          }
          *(_QWORD *)&v351 = v105;
          *((_QWORD *)&v351 + 1) = v98;
          if (v98)
          {
            v106 = (unint64_t *)&v98->__shared_owners_;
            do
              v107 = __ldxr(v106);
            while (__stxr(v107 + 1, v106));
          }
          v108 = *(_DWORD *)(*((_QWORD *)this + 133) + 164);
          if (v108 > 16382)
          {
            if (v108 == 0x3FFF)
            {
              v109 = 2;
            }
            else
            {
              if (v108 != 24574)
                goto LABEL_115;
              v109 = 3;
            }
LABEL_120:
            (*(void (**)(void *, uint64_t))(*(_QWORD *)v105 + 104))(v105, v109);
          }
          else
          {
            if (v108)
            {
              if (v108 == 1)
              {
                v109 = 0;
              }
              else
              {
                if (v108 == 0x2000)
                {
                  v109 = 1;
                  goto LABEL_120;
                }
LABEL_115:
                v109 = 4;
              }
              goto LABEL_120;
            }
            (*(void (**)(void *))(*(_QWORD *)v105 + 112))(v105);
          }
          if (v98)
          {
            v110 = (unint64_t *)&v98->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
        }
        v112 = *(uint64_t (****)(_QWORD))(**((_QWORD **)this + 133) + 8);
        v113 = (**v112)(v112);
        if (v113 == 50005)
        {
          v114 = *v302;
          if (*(char *)(*v302 + 471) < 0)
          {
            if (!*(_QWORD *)(v114 + 456))
            {
LABEL_140:
              v117 = (void (***)(uint64_t *__return_ptr, _QWORD))*v295;
              v320[0] = MEMORY[0x1E0C809B0];
              v320[1] = 3221225472;
              v320[2] = ___ZN13EspressoLight13espresso_plan26prepare_compiler_if_neededEv_block_invoke;
              v320[3] = &__block_descriptor_40_e10_v16__0r_v8l;
              v320[4] = v302;
              Espresso::abstract_context::compute_batch_sync(v117, v320);
              goto LABEL_141;
            }
          }
          else if (!*(_BYTE *)(*v302 + 471))
          {
            goto LABEL_140;
          }
          v116 = v364;
          if ((_QWORD)v364)
            goto LABEL_139;
          goto LABEL_140;
        }
        if (v113 != 10008)
          goto LABEL_135;
        if (*(char *)(*v302 + 471) < 0)
        {
          if (!*(_QWORD *)(*v302 + 456))
            goto LABEL_141;
LABEL_135:
          v115 = (void (***)(uint64_t *__return_ptr, _QWORD))*v295;
          v319[0] = MEMORY[0x1E0C809B0];
          v319[1] = 3221225472;
          v319[2] = ___ZN13EspressoLight13espresso_plan26prepare_compiler_if_neededEv_block_invoke_2;
          v319[3] = &__block_descriptor_40_e10_v16__0r_v8l;
          v319[4] = v302;
          Espresso::abstract_context::compute_batch_sync(v115, v319);
          v116 = v364;
          if (!(_QWORD)v364)
            goto LABEL_141;
          v114 = *v302;
LABEL_139:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 32))(v116, v114 + 448);
          goto LABEL_141;
        }
        if (*(_BYTE *)(*v302 + 471))
          goto LABEL_135;
LABEL_141:
        v118 = *v302;
        if (*(char *)(*v302 + 1239) < 0)
        {
          if (*(_QWORD *)(v118 + 1224))
          {
LABEL_145:
            if ((_QWORD)v364)
            {
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v364 + 56))(v364, v118 + 1216);
              v118 = *v302;
            }
            MEMORY[0x19401C808](v118 + 1216, "");
          }
        }
        else if (*(_BYTE *)(*v302 + 1239))
        {
          goto LABEL_145;
        }
        v119 = *(unsigned int (****)(_QWORD))(**((_QWORD **)this + 133) + 8);
        if ((**v119)(v119) >> 1 == 5003)
        {
          v121 = (std::__shared_weak_count *)*((_QWORD *)&v364 + 1);
          *(_QWORD *)&v351 = v120;
          *((_QWORD *)&v351 + 1) = *((_QWORD *)&v364 + 1);
          if (*((_QWORD *)&v364 + 1))
          {
            v122 = (unint64_t *)(*((_QWORD *)&v364 + 1) + 8);
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          *(_QWORD *)(*((_QWORD *)this + 133) + 400) = (*(uint64_t (**)(void *))(*(_QWORD *)v120 + 96))(v120);
          if (v121)
          {
            v124 = (unint64_t *)&v121->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
        }
        v126 = (std::__shared_weak_count *)*((_QWORD *)&v364 + 1);
        if (*((_QWORD *)&v364 + 1))
        {
          v127 = (unint64_t *)(*((_QWORD *)&v364 + 1) + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        v9 = v356[0];
LABEL_163:
        if (v9)
        {
          v129 = (unint64_t *)(v9 + 8);
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
LABEL_388:
          if (!v130)
          {
            (*(void (**)(char *))(*(_QWORD *)v9 + 16))(v9);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
          }
        }
LABEL_390:
        v4 = v300 + 1;
        v5 = (_QWORD *)*((_QWORD *)this + 133);
        v3 = v5[3];
        if (v300 + 1 >= (unint64_t)((v5[4] - v3) >> 4))
        {
          v2 = (void (***)(uint64_t *__return_ptr, _QWORD))*v5;
          break;
        }
      }
    }
    if ((*(unsigned int (**)(void (**)(uint64_t *__return_ptr, _QWORD)))*v2[1])(v2[1]) >> 1 == 5003)
    {
      v286 = *(id *)(*((_QWORD *)this + 133) + 168);
      if (v286)
      {
        v287 = dispatch_queue_create_with_target_V2("com.apple.espresso.execution", 0, v286);
        v288 = *((_QWORD *)this + 133);
        v289 = *(void **)(v288 + 176);
        *(_QWORD *)(v288 + 176) = v287;

      }
    }
  }
}

void sub_190E78488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  Espresso::network_shape::~network_shape((char **)&STACK[0x238]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x2D0], (char *)STACK[0x2D8]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::bind_external_input(uint64_t a1, int a2, char *a3, uint64_t *a4)
{
  EspressoLight::espresso_plan::generic_bind_external(a1, a2, a3, a4, 0);
}

void ___ZN13EspressoLight13espresso_plan26prepare_compiler_if_neededEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(**(_QWORD **)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

uint64_t Espresso::ANERuntimeEngine::compiler::get_intermediate_buffer_handle(Espresso::ANERuntimeEngine::compiler *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v13;
  _OWORD v14[4];
  uint64_t v15;
  std::__shared_weak_count *v16;
  void **v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 288))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("ANE network should have been built");
  v15 = 0;
  v16 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v16 = v3;
    if (v3)
    {
      v4 = *((_QWORD *)this + 1);
      v15 = v4;
      goto LABEL_7;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = 0;
LABEL_7:
  memset(v14, 0, sizeof(v14));
  v5 = *((id *)this + 24);
  if (objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", v14, v18, 16))
  {
    objc_msgSend(*((id *)this + 24), "objectForKeyedSubscript:", **((_QWORD **)&v14[0] + 1));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "intermediateBufferHandle");

    v8 = *(_QWORD *)(v4 + 712);
    if (v8)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "SharedIntermediateBufferHandle");
      v17 = __p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v8 + 128), __p, (_OWORD **)&v17)+ 14) = v7;
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v7 = 0;
  }

  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v7;
}

void sub_190E78B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void Espresso::net::__build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[9];
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = a4;
  if ((a4 & 0x80000000) != 0)
    v4 = (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4;
  v8 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  v9 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(a1 + 528), v8);
  if (v9)
  {
    v11 = v9[3];
    v10 = (std::__shared_weak_count *)v9[4];
    v18 = v11;
    v19 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v18 = 0;
    v19 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 124) && (v14 = *(_QWORD *)(a1 + 1256)) != 0 && *(_BYTE *)(v14 + 124))
  {
    Espresso::net::__build_network_two_compilers(a1, a2, a3, v4);
  }
  else if (v11)
  {
    LOBYTE(v17[0]) = *(_BYTE *)(a1 + 1352);
    memset((char *)v17 + 4, 0, 68);
    if (LOBYTE(v17[0]))
    {
      v17[1] = a1;
      memset(&v17[2], 0, 24);
      v17[5] = a1;
      memset(&v17[6], 0, 24);
      HIDWORD(v17[0]) = 723714104;
      kdebug_trace();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2, a3, v4);
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v17);
  }
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_190E78D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void EspressoLight::intermediate_buffer_sharing_singleton::setup_sharing_if_needed(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  uint64_t *v8;
  std::string *v9;
  int64_t size;
  std::string *v11;
  int v12;
  char *v13;
  int64_t v14;
  int v15;
  int64_t v16;
  std::string *v17;
  int64_t v18;
  std::string *v19;
  std::string *v20;
  unsigned __int8 *v21;
  std::string::size_type v22;
  int v23;
  char v24;
  Espresso *v25;
  const char *v26;
  NSObject *v27;
  uint64_t v28;
  std::string *v29;
  uint64_t v30;
  std::string v31;
  std::string __p;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "espressobar_id");
  Espresso::map_const_get<std::map<std::string,std::string>>(v6 + 472, (uint64_t)&__p, *a2 + 592, &v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::lock((std::mutex *)a1);
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v31.__r_.__value_.__l.__size_)
      goto LABEL_36;
    v7 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v31.__r_.__value_.__s + 23))
      goto LABEL_36;
    v7 = &v31;
  }
  if (v7->__r_.__value_.__s.__data_[0] != 47)
  {
LABEL_36:
    v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(a1 + 64), (unsigned __int8 *)&v31);
    if (v21)
    {
      v22 = *((_QWORD *)v21 + 5);
      v23 = *((_DWORD *)v21 + 12);
      std::string::operator=(&__p, (const std::string *)(v21 + 16));
      v24 = 0;
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  v8 = *(uint64_t **)(a1 + 80);
  if (!v8)
  {
LABEL_38:
    v22 = 0;
    v23 = 0;
    v24 = 1;
    goto LABEL_40;
  }
  v30 = a3;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v31;
  else
    v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  v11 = (std::string *)((char *)v9 + size);
  while (1)
  {
    v12 = *((char *)v8 + 39);
    v13 = v12 >= 0 ? (char *)(v8 + 2) : (char *)v8[2];
    v14 = v12 >= 0 ? *((unsigned __int8 *)v8 + 39) : v8[3];
    if (!v14)
      break;
    if (size >= v14)
    {
      v15 = *v13;
      v16 = size;
      v17 = v9;
      do
      {
        v18 = v16 - v14;
        if (v18 == -1)
          break;
        v19 = (std::string *)memchr(v17, v15, v18 + 1);
        if (!v19)
          break;
        v20 = v19;
        if (!memcmp(v19, v13, v14))
        {
          if (v20 == v11 || v20 != v9)
            break;
          goto LABEL_35;
        }
        v17 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
        v16 = (char *)v11 - ((char *)&v20->__r_.__value_.__l.__data_ + 1);
      }
      while (v16 >= v14);
    }
    v8 = (uint64_t *)*v8;
    if (!v8)
    {
      v22 = 0;
      v23 = 0;
      v24 = 1;
      goto LABEL_39;
    }
  }
LABEL_35:
  v22 = v8[5];
  v23 = *((_DWORD *)v8 + 12);
  std::string::operator=(&__p, (const std::string *)(v8 + 2));
  v24 = 0;
LABEL_39:
  a3 = v30;
LABEL_40:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock((std::mutex *)a1);
  if ((v24 & 1) == 0)
  {
    Espresso::espresso_os_log_subsystem(v25, v26);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      v29 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v29 = (std::string *)v31.__r_.__value_.__r.__words[0];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v22;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
      v33 = v23;
      _os_log_debug_impl(&dword_190DAF000, v27, OS_LOG_TYPE_DEBUG, "IntermediateSharing setup (2/3) key=%s handle=%llu priority=%d", (uint8_t *)&__p, 0x1Cu);
    }

    v28 = *a2;
    *(_QWORD *)(v28 + 1272) = v22;
    *(_DWORD *)(*(_QWORD *)(a3 + 1064) + 164) = v23;
    *(_BYTE *)(v28 + 1280) = 1;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_190E79028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::mutex *v23;

  if (a23 < 0)
    operator delete(__p);
  std::mutex::unlock(v23);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::bind_external_output(uint64_t a1, int a2, char *a3, uint64_t *a4)
{
  EspressoLight::espresso_plan::generic_bind_external(a1, a2, a3, a4, (char *)1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::set_priority(uint64_t result, int a2)
{
  *(_BYTE *)(result + 289) = 1;
  *(_DWORD *)(result + 292) = a2;
  return result;
}

void EspressoLight::espresso_plan::bind_input(EspressoLight::espresso_plan *this@<X0>, char *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v8;
  _QWORD *v9;
  size_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  char *v14;
  std::string *v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  std::string *v19;
  int v20;
  std::string *v21;
  int64_t v22;
  std::string *v23;
  std::string *v24;
  std::runtime_error *v25;
  uint64_t **v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  std::string::size_type v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t **v39;
  char *v40;
  __int128 v41;
  void *v42;
  std::__shared_weak_count *size;
  unint64_t *v44;
  unint64_t v45;
  uint64_t **v46;
  int *v47;
  __int128 *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::runtime_error *exception;
  std::string *v59;
  __int128 v60;
  const char *v61;
  _OWORD v62[2];
  std::__shared_weak_count *v63;
  void *__p;
  void *v65;
  uint64_t v66;
  std::string v67;
  void *v68;
  void *v69;
  _BYTE v70[32];
  std::__shared_weak_count *v71;
  void *v72[2];
  uint64_t v73;
  void *v74;
  void *v75;
  std::string *v76;
  std::__shared_weak_count *v77;
  std::string v78;
  _DWORD v79[3];

  v79[0] = a3;
  v6 = *((_QWORD *)this + 133);
  if (*(_DWORD *)(v6 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v67, *(_DWORD *)(*((_QWORD *)this + 133) + 160));
    v59 = std::string::insert(&v67, 0, "Inconsistent phase of espresso_plan: ");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    *(_QWORD *)&v70[16] = *((_QWORD *)&v59->__r_.__value_.__l + 2);
    *(_OWORD *)v70 = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v70);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = a3;
  v9 = (_QWORD *)((char *)this + 1072);
  v10 = strlen((const char *)EspressoLight::abstract_espresso_plan::main_function_name);
  if (*((char *)this + 1095) < 0)
  {
    if (v10 != *((_QWORD *)this + 135))
      goto LABEL_75;
    if (v10 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v9 = (_QWORD *)*v9;
  }
  else if (v10 != *((unsigned __int8 *)this + 1095))
  {
LABEL_75:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_input on subnetwork");
  }
  if (memcmp(v9, (const void *)EspressoLight::abstract_espresso_plan::main_function_name, v10))
    goto LABEL_75;
  EspressoLight::espresso_plan::default_blob_name_if_null(&v78, (_QWORD *)v6, v8, 0, a2);
  v11 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 133) + 144) + 64), v8, v79);
  v12 = v11 + 5;
  v13 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v11 + 5), &v78);
  if (v11 + 6 == v13)
  {
    v61 = a2;
    v14 = Espresso::net::bind_global_prefix[0];
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v78;
    else
      v15 = (std::string *)v78.__r_.__value_.__r.__words[0];
    v16 = strlen(Espresso::net::bind_global_prefix[0]);
    if (v16)
    {
      v17 = v16;
      v18 = (v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v78.__r_.__value_.__r.__words[2])
          : v78.__r_.__value_.__l.__size_;
      if (v18 < v16)
        goto LABEL_23;
      v19 = (std::string *)((char *)v15 + v18);
      v20 = *Espresso::net::bind_global_prefix[0];
      v21 = v15;
      while (1)
      {
        v22 = v18 - v17;
        if (v22 == -1)
          goto LABEL_23;
        v23 = (std::string *)memchr(v21, v20, v22 + 1);
        if (!v23)
          goto LABEL_23;
        v24 = v23;
        if (!memcmp(v23, v14, v17))
          break;
        v21 = (std::string *)((char *)&v24->__r_.__value_.__l.__data_ + 1);
        v18 = (char *)v19 - ((char *)&v24->__r_.__value_.__l.__data_ + 1);
        if (v18 < v17)
          goto LABEL_23;
      }
      if (v24 == v19 || v24 != v15)
      {
LABEL_23:
        v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v25, (const std::string *)v70);
        __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    *(_QWORD *)v70 = &v78;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, &v78, (__int128 **)v70)[56] = 1;
    v13 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v12, &v78);
    a2 = (char *)v61;
  }
  v26 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 133) + 144) + 16), v8, v79);
  v27 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v26 + 5), &v78);
  if (v26 + 6 == v27)
  {
    v36 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 48), v8, v79);
    v37 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v36 + 5), &v78);
    if (std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 48), v8, v79)+ 6 == v37)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 133) + 24) + 16 * v8);
      std::string::basic_string[abi:ne180100]<0>(v70, a2);
      Espresso::net::get_blob_or_global_with_prefix(v38, (std::string *)v70, &v67);
      if ((v70[23] & 0x80000000) != 0)
        operator delete(*(void **)v70);
      Espresso::abstract_blob_container::shape(v70, (uint64_t)v67.__r_.__value_.__l.__data_);
      v39 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 48), v8, v79);
      v76 = &v78;
      v40 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39 + 5, &v78, (__int128 **)&v76);
      v41 = *(_OWORD *)&v70[16];
      *(_OWORD *)(v40 + 56) = *(_OWORD *)v70;
      *(_OWORD *)(v40 + 72) = v41;
      *((_QWORD *)v40 + 11) = v71;
      v42 = (void *)*((_QWORD *)v40 + 12);
      if (v42)
      {
        *((_QWORD *)v40 + 13) = v42;
        operator delete(v42);
        *((_QWORD *)v40 + 12) = 0;
        *((_QWORD *)v40 + 13) = 0;
        *((_QWORD *)v40 + 14) = 0;
      }
      *((_OWORD *)v40 + 6) = *(_OWORD *)v72;
      *((_QWORD *)v40 + 14) = v73;
      size = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
      if (v67.__r_.__value_.__l.__size_)
      {
        v44 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v8 = v79[0];
    }
    v46 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 133) + 48), v8, v79);
    *(_QWORD *)v70 = &v78;
    v47 = (int *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46 + 5, &v78, (__int128 **)v70);
    v48 = (__int128 *)(v47 + 14);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v76, v47[14], v47[15], v47[16], v47[18] * v47[17]);
    std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>::pair[abi:ne180100]<std::shared_ptr<Espresso::blob<float,4>>&,Espresso::layer_shape const&,0>((uint64_t)&v67, (uint64_t)v76, (uint64_t)v77, v48);
    std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>::pair[abi:ne180100]<std::string&,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>,0>((std::string *)v70, (__int128 *)&v78, (uint64_t)&v67);
    v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>(v26 + 5, v70, (uint64_t)v70);
    if (v74)
    {
      v75 = v74;
      operator delete(v74);
    }
    v49 = v71;
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v51 = __ldaxr(p_shared_owners);
      while (__stlxr(v51 - 1, p_shared_owners));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if ((v70[23] & 0x80000000) != 0)
      operator delete(*(void **)v70);
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    v52 = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
    if (v67.__r_.__value_.__l.__size_)
    {
      v53 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v77;
    if (v77)
    {
      v56 = (unint64_t *)&v77->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  v29 = (std::string::size_type)v27[7];
  v28 = (std::__shared_weak_count *)v27[8];
  v67.__r_.__value_.__r.__words[0] = v29;
  v67.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(_OWORD *)(v27 + 11);
  *(_OWORD *)v70 = *(_OWORD *)(v27 + 9);
  *(_OWORD *)&v70[16] = v32;
  v33 = v27[14];
  v71 = (std::__shared_weak_count *)v27[13];
  v72[0] = 0;
  v72[1] = 0;
  v73 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v72, v33, (uint64_t)v27[15], ((char *)v27[15] - (char *)v33) >> 2);
  *((_BYTE *)v13 + 56) = 1;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_QWORD *)(a4 + 160) = 0;
  v62[0] = *(_OWORD *)v70;
  v62[1] = *(_OWORD *)&v70[16];
  v63 = v71;
  __p = 0;
  v65 = 0;
  v66 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v72[0], (uint64_t)v72[1], ((char *)v72[1] - (char *)v72[0]) >> 2);
  setup_espresso_buffer_with_shape(a4, (uint64_t)v62);
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  *(_QWORD *)a4 = *(_QWORD *)(v29 + 24);
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  if (v28)
  {
    v34 = (unint64_t *)&v28->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
}

void sub_190E79748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  uint64_t v41;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (*(char *)(v41 - 97) < 0)
    operator delete(*(void **)(v41 - 120));
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::clear_priority(uint64_t this)
{
  *(_BYTE *)(this + 289) = 0;
  return this;
}

void Espresso::ANERuntimeEngine::compiler::set_configuration(uint64_t a1, const std::string *a2)
{
  _QWORD *v3;
  std::string *v4;
  const char *v5;
  NSObject *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 264);
  v4 = std::string::operator=((std::string *)(a1 + 264), a2);
  Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 287) < 0)
      v3 = (_QWORD *)*v3;
    v7 = 136315138;
    v8 = v3;
    _os_log_debug_impl(&dword_190DAF000, v6, OS_LOG_TYPE_DEBUG, "set_configuration current conf %s\n", (uint8_t *)&v7, 0xCu);
  }

}

void E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<std::string>(uint64_t a1@<X0>, std::string *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  int v6;
  std::string *v7;
  uint64_t v8;
  std::string v9;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v11;
  std::__fs::filesystem::path v12;

  memset(&v11, 0, sizeof(v11));
  v6 = *(char *)(a1 + 55);
  if (v6 >= 0)
    v7 = (std::string *)(a1 + 32);
  else
    v7 = *(std::string **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 55);
  std::string::append[abi:ne180100]<char const*,0>(&v11.__pn_, v7, (std::string *)((char *)v7 + v8));
  std::__fs::filesystem::operator/[abi:ne180100](&v11, a1 + 8, &v12);
  E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(a2, 0, &v9);
  __p.__pn_ = v9;
  memset(&v9, 0, sizeof(v9));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v12, a3);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v9.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_13:
  operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_190E79AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 33) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((*(char *)(v28 - 33) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(*(void **)(v28 - 56));
  if ((a28 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_190E79B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((a22 & 0x80000000) == 0)
    JUMPOUT(0x190E79AD4);
  JUMPOUT(0x190E79ACCLL);
}

std::string *E5RT::SharedResourceFactory::GetE5Program@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  E5RT::E5ProgramImpl *v4;
  char *v5;
  std::string *result;
  char *v7;
  _BYTE v8[16];
  char v9;
  E5RT::E5ProgramImpl *v10;

  v8[0] = 0;
  v9 = 0;
  E5RT::E5Program::LoadProgram(a1, (uint64_t)v8, &v10);
  if (v9)
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v8);
  v4 = v10;
  v10 = 0;
  v5 = (char *)operator new(0x48uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E2DB6000;
  result = (std::string *)(v5 + 32);
  *((_QWORD *)v5 + 3) = off_1E2D5AFA0;
  v7 = v5 + 24;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(result, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    result = (std::string *)v10;
    *((_QWORD *)v5 + 7) = v4;
    *((_DWORD *)v5 + 16) = 3;
    *a2 = v7;
    a2[1] = v5;
    v10 = 0;
    if (result)
      return (std::string *)(*(uint64_t (**)(std::string *))(result->__r_.__value_.__r.__words[0] + 8))(result);
  }
  else
  {
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    *((_QWORD *)v5 + 6) = *(_QWORD *)(a1 + 16);
    *((_QWORD *)v5 + 7) = v4;
    *((_DWORD *)v5 + 16) = 3;
    *a2 = v7;
    a2[1] = v5;
  }
  return result;
}

void sub_190E79C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  std::__shared_weak_count *v12;
  void *v14;

  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void E5RT::E5Program::LoadProgram(uint64_t a1@<X0>, uint64_t a2@<X1>, E5RT::E5ProgramImpl **a3@<X8>)
{
  uint64_t v6;
  char v7;
  std::string *p_p;
  void *v9;
  id v10;
  const char *v11;
  size_t v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  E5RT::E5ProgramImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *PublicFunctions;
  uint64_t v21;
  uint64_t v22;
  _QWORD *PrivateFunctions;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *exception;
  _QWORD v28[3];
  E5RT::E5ProgramImpl *v29;
  void *__dst[2];
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  std::string __p;
  uint64_t v36;
  __int128 v37;
  __int128 v38;

  v36 = 0x2B23400000000000;
  v37 = 0u;
  v38 = 0u;
  kdebug_trace();
  LOBYTE(v33) = 0;
  v34 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v33 = *(_OWORD *)a2;
    v34 = 1;
  }
  E5RT::GetE5PathFromCompositeBundle(a1, &v33, &__p);
  if (v34)
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v33);
  if (*(_BYTE *)(a2 + 16))
  {
    v6 = *(_QWORD *)a2;
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  E5RT::ComputeProgram::LoadProgram((uint64_t)&__p, v6, v7, &v32);
  if (!v32)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "LoadProgram");
    std::string::basic_string[abi:ne180100]<0>(v28, "Compute Program load failed.");
    E5RT::Status::Status(&v29, 8, v28);
    E5RT::E5RTError::E5RTError(exception, __dst, &v29);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringByDeletingLastPathComponent");
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v11 = (const char *)objc_msgSend(v10, "UTF8String");
  v12 = strlen(v11);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    v31 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_18;
  }
  HIBYTE(v31) = v12;
  v14 = __dst;
  if (v12)
LABEL_18:
    memmove(v14, v11, (size_t)v13);
  *((_BYTE *)v13 + (_QWORD)v14) = 0;

  v17 = (E5RT::E5ProgramImpl *)operator new();
  v18 = v32;
  v32 = 0;
  v28[0] = v18;
  E5RT::E5ProgramImpl::E5ProgramImpl(v17, v28, __dst);
  v29 = v17;
  v19 = v28[0];
  v28[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  PublicFunctions = (uint64_t *)E5RT::E5ProgramImpl::GetPublicFunctions(v17);
  v22 = *PublicFunctions;
  v21 = PublicFunctions[1];
  PrivateFunctions = (_QWORD *)E5RT::E5ProgramImpl::GetPrivateFunctions(v17);
  v24 = (v21 - v22) >> 4;
  v25 = (uint64_t)(PrivateFunctions[1] - *PrivateFunctions) >> 4;
  *(_QWORD *)&v37 = v24;
  *((_QWORD *)&v37 + 1) = v25;
  *a3 = v17;
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  v26 = v32;
  v32 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (E5RT::g_trace_analysis_level >= v36)
    kdebug_trace();
}

void sub_190E79F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, E5RT::E5ProgramImpl *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v34;

  std::unique_ptr<E5RT::E5ProgramImpl>::~unique_ptr[abi:ne180100](&a15);
  if (a21 < 0)
    operator delete(__p);
  v34 = a22;
  a22 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (a32 < 0)
    operator delete(a27);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v32 - 104));
  _Unwind_Resume(a1);
}

void E5RT::GetE5PathFromCompositeBundle(uint64_t a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  _BOOL4 HasExtension;
  _BOOL4 v6;
  _BOOL8 v7;
  BOOL v8;
  std::string::size_type v9;
  uint64_t v10;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v13;
  E5Common::E5PlatformManager *CurrentPlatform;
  E5Common::E5PlatformManager *v15;
  void **v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;
  void *v20;
  uint64_t v21;
  char *v22;
  std::vector<std::string>::const_iterator v23;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  __int128 v26;
  void *v27;
  std::string *v28;
  std::vector<std::string>::pointer v29;
  std::vector<std::string>::pointer v30;
  __int128 v31;
  void *exception;
  void *v33;
  std::string *v34;
  __int128 v35;
  void *v36;
  void *v37;
  std::string *v38;
  __int128 v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::vector<std::string>::pointer v42;
  std::vector<std::string>::pointer j;
  void *v44;
  void *v45;
  unint64_t v46;
  std::string::size_type v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string *p_dst;
  uint64_t v60;
  uint64_t v61;
  std::string *p_x;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  std::string *v69;
  std::string::size_type v70;
  char v71;
  std::string *v72;
  __int128 v73;
  void *v74;
  std::string __dst;
  std::string v76;
  __int128 v77;
  std::string v78;
  std::string v79;
  std::vector<std::string> v80;
  void *__p[2];
  __int128 v82;
  _QWORD v83[2];
  std::string v84;
  std::string __x;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  E5RT::PathWrapper::PathWrapper(&v78, a1);
  BYTE7(v82) = 3;
  LODWORD(__p[0]) = 3499310;
  HasExtension = E5RT::PathWrapper::HasExtension((const std::__fs::filesystem::path *)&v78, (uint64_t)__p);
  v6 = HasExtension;
  if (SBYTE7(v82) < 0)
  {
    operator delete(__p[0]);
    if (v6)
    {
LABEL_3:
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(a3, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
      else
        *a3 = v78;
      goto LABEL_76;
    }
  }
  else if (HasExtension)
  {
    goto LABEL_3;
  }
  BYTE7(v82) = 7;
  strcpy((char *)__p, ".bundle");
  v7 = E5RT::PathWrapper::HasExtension((const std::__fs::filesystem::path *)&v78, (uint64_t)__p);
  v8 = v7;
  if (SBYTE7(v82) < 0)
    operator delete(__p[0]);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "GetE5PathFromCompositeBundle");
    std::string::basic_string[abi:ne180100]<0>(&__x, "Invalid E5 path specified.");
    E5RT::Status::Status(&v80, 8, &__x);
    E5RT::E5RTError::E5RTError(exception, __p, &v80);
  }
  if (*((_BYTE *)a2 + 16))
  {
    v77 = *a2;
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *a2;
    if (LODWORD(v84.__r_.__value_.__r.__words[1]))
    {
      if (LODWORD(v84.__r_.__value_.__r.__words[1]) != 1311977521)
      {
        v33 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "GetBundleNamesForPlatformIdentifierOverride");
        std::string::basic_string[abi:ne180100]<0>(&__x, "Unexpected input platform identifier with specialization.");
        E5RT::Status::Status(&v80, 1, &__x);
        E5RT::E5RTError::E5RTError(v33, __p, &v80);
      }
      E5RT::GetDeviceBundleNamesCompatibleWithPlatform((uint64_t)v84.__r_.__value_.__l.__data_, __p);
      if (__p[1] == __p[0])
      {
        std::to_string((std::string *)&v80, v84.__r_.__value_.__r.__words[0]);
        v72 = std::string::insert((std::string *)&v80, 0, "N301 specialization provided for incompatible BasePlatform = ");
        v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        __x.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v80.__end_cap_.__value_) < 0)
          operator delete(v80.__begin_);
        v74 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v80, "GetBundleNamesForPlatformIdentifierOverride");
        E5RT::Status::Status(&__dst, 1, &__x);
        E5RT::E5RTError::E5RTError(v74, &v80, &__dst);
      }
      if (*((char *)__p[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__x, *(const std::string::value_type **)__p[0], *((_QWORD *)__p[0] + 1));
      }
      else
      {
        v31 = *(_OWORD *)__p[0];
        __x.__r_.__value_.__r.__words[2] = *((_QWORD *)__p[0] + 2);
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v31;
      }
      std::vector<std::string>::vector[abi:ne180100](&v79, (uint64_t)&__x, 1uLL);
      if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__x.__r_.__value_.__l.__data_);
      std::vector<std::string>::~vector[abi:ne180100](__p);
    }
    else
    {
      v9 = v84.__r_.__value_.__r.__words[0];
      v10 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v7);
      (*(void (**)(void **__return_ptr, uint64_t, std::string::size_type))(*(_QWORD *)v10 + 136))(__p, v10, v9);
      if (__p[1] == __p[0])
      {
        std::to_string((std::string *)&v80, v9);
        v34 = std::string::insert((std::string *)&v80, 0, "No bundles found for platform = ");
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        __x.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v80.__end_cap_.__value_) < 0)
          operator delete(v80.__begin_);
        v36 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v80, "GetBundleNamesForPlatformIdentifierOverride");
        E5RT::Status::Status(&__dst, 8, &__x);
        E5RT::E5RTError::E5RTError(v36, &v80, &__dst);
      }
      std::vector<std::string>::vector<std::__wrap_iter<std::string_view *>,0>(&v79, (uint64_t)__p[0], (uint64_t)__p[1]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v84);
    size = v79.__r_.__value_.__l.__size_;
    for (i = v79.__r_.__value_.__r.__words[0]; ; i += 24)
    {
      if (i == size)
      {
        v37 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "GetE5PathFromCompositeBundleForPlatformIdentifierOverride");
        std::string::basic_string[abi:ne180100]<0>(&__x, "Unable to find requested override platform in provided E5 bundle.");
        E5RT::Status::Status(&v80, 8, &__x);
        E5RT::E5RTError::E5RTError(v37, __p, &v80);
      }
      E5RT::PathWrapper::Append((uint64_t)&v78, (std::string *)i, (std::string *)__p);
      if (E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)__p))
        break;
      if (SBYTE7(v82) < 0)
        operator delete(__p[0]);
    }
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__x, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v13 = *(_OWORD *)i;
      __x.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v13;
    }
    sub_191024FE8(a3, (uint64_t)__p, (uint64_t)&__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__x.__r_.__value_.__l.__data_);
      if ((SBYTE7(v82) & 0x80000000) == 0)
      {
LABEL_30:
        v18 = v79.__r_.__value_.__r.__words[0];
        if (!v79.__r_.__value_.__r.__words[0])
          goto LABEL_41;
        goto LABEL_34;
      }
    }
    else if ((SBYTE7(v82) & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(__p[0]);
    v18 = v79.__r_.__value_.__r.__words[0];
    if (!v79.__r_.__value_.__r.__words[0])
    {
LABEL_41:
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v77);
      goto LABEL_76;
    }
LABEL_34:
    v19 = v79.__r_.__value_.__l.__size_;
    v20 = (void *)v18;
    if (v79.__r_.__value_.__l.__size_ != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)v79.__r_.__value_.__r.__words[0];
    }
    v79.__r_.__value_.__l.__size_ = v18;
    operator delete(v20);
    goto LABEL_41;
  }
  CurrentPlatform = E5RT::GetCurrentPlatform((E5RT *)v7);
  v15 = CurrentPlatform;
  *(_OWORD *)__p = xmmword_191A82BE8;
  v82 = unk_191A82BF8;
  v16 = (void **)v83;
  if ((uint64_t)CurrentPlatform > 33039)
  {
    if (CurrentPlatform == (E5Common::E5PlatformManager *)33040)
    {
      v17 = 0;
      goto LABEL_47;
    }
    if (CurrentPlatform == (E5Common::E5PlatformManager *)33042)
    {
      v17 = 1;
      goto LABEL_47;
    }
  }
  else
  {
    if (CurrentPlatform == (E5Common::E5PlatformManager *)24608)
    {
      v17 = 2;
      goto LABEL_47;
    }
    if (CurrentPlatform == (E5Common::E5PlatformManager *)24609)
    {
      v17 = 3;
LABEL_47:
      v16 = &__p[v17];
    }
  }
  if ((char *)v16 - (char *)__p == 32)
  {
    memset(&v80, 0, sizeof(v80));
  }
  else
  {
    *((_BYTE *)&__x.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__x, "H14G.N301.bundle");
    CurrentPlatform = (E5Common::E5PlatformManager *)std::vector<std::string>::vector[abi:ne180100](&v80, (uint64_t)&__x, 1uLL);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
  }
  v21 = E5Common::E5PlatformManager::Instance(CurrentPlatform);
  (*(void (**)(void **__return_ptr, uint64_t, E5Common::E5PlatformManager *))(*(_QWORD *)v21 + 136))(__p, v21, v15);
  v22 = std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string_view *>,std::__wrap_iter<std::string_view *>>(&v80, (uint64_t)v80.__end_, (const void **)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
  if (E5RT::IsAVirtualMachine((E5RT *)v22))
  {
    v23.__i_ = v80.__begin_;
    *((_BYTE *)&__x.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&__x, "jit.bundle");
    std::vector<std::string>::insert(&v80, v23, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
  }
  begin = v80.__begin_;
  end = v80.__end_;
  while (1)
  {
    if (begin == end)
    {
      if (!E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&v78))
      {
        v45 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__x, "GetE5PathFromCompositeBundle");
        std::operator+<char>();
        E5RT::Status::Status(&v84, 8, &v79);
        E5RT::E5RTError::E5RTError(v45, &__x, &v84);
      }
      std::operator+<char>();
      v38 = std::string::append(&v79, ". Found bundles : { ");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      __x.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v84, ".bundle");
      E5RT::PathWrapper::FindFilesWithExtension((uint64_t)&v78, (uint64_t)&v84, 1, (uint64_t)&v79);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      v41 = v79.__r_.__value_.__l.__size_;
      v40 = v79.__r_.__value_.__r.__words[0];
      if (v79.__r_.__value_.__r.__words[0] == v79.__r_.__value_.__l.__size_)
      {
LABEL_102:
        std::vector<std::string>::~vector[abi:ne180100]((void **)&v79.__r_.__value_.__l.__data_);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("}. Expected : { ", (const void **)&__x.__r_.__value_.__l.__data_, &v79);
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__x.__r_.__value_.__l.__data_);
        __x = v79;
        v42 = v80.__begin_;
        for (j = v80.__end_; v42 != j; ++v42)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__x.__r_.__value_.__l.__data_, (const void **)&v42->__r_.__value_.__l.__data_, (uint64_t)&v79);
          v69 = std::string::append(&v79, " ");
          v70 = v69->__r_.__value_.__r.__words[0];
          v84.__r_.__value_.__r.__words[0] = v69->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v69->__r_.__value_.__r.__words[1] + 7);
          v71 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__x.__r_.__value_.__l.__data_);
          __x.__r_.__value_.__r.__words[0] = v70;
          __x.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&__x.__r_.__value_.__s + 23) = v71;
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v79.__r_.__value_.__l.__data_);
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("}.", (const void **)&__x.__r_.__value_.__l.__data_, &v79);
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__x.__r_.__value_.__l.__data_);
        __x = v79;
        v44 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v79, "GetE5PathFromCompositeBundle");
        E5RT::Status::Status(&v84, 8, &__x);
        E5RT::E5RTError::E5RTError(v44, &v79, &v84);
      }
      while (1)
      {
        v46 = *(unsigned __int8 *)(v40 + 23);
        if (*(char *)(v40 + 23) < 0)
        {
          v47 = *(_QWORD *)v40;
          v48 = *(_QWORD *)(v40 + 8);
        }
        else
        {
          v47 = v40;
          v48 = *(unsigned __int8 *)(v40 + 23);
        }
        v49 = (unsigned __int8 *)(v47 + v48);
        if (v48)
        {
          v50 = (unsigned __int8 *)v47;
          v51 = (unsigned __int8 *)(v47 + v48);
          do
          {
            v52 = v50;
            v53 = v50;
            while (1)
            {
              v54 = *v53++;
              if (v54 == 47)
                break;
              v52 = v53;
              if (v53 == v49)
              {
                v52 = v51;
                goto LABEL_124;
              }
            }
            v50 = v52 + 1;
            v51 = v52;
          }
          while (v53 != v49);
        }
        else
        {
          v52 = (unsigned __int8 *)v47;
        }
LABEL_124:
        v55 = &v52[-v47];
        if (v52 == v49)
          v56 = 0;
        else
          v56 = v55 + 1;
        if ((v46 & 0x80) != 0)
        {
          v46 = *(_QWORD *)(v40 + 8);
          if (v46 < (unint64_t)v56)
LABEL_158:
            std::string::__throw_out_of_range[abi:ne180100]();
          v57 = *(_QWORD *)v40;
        }
        else
        {
          v57 = v40;
          if ((unint64_t)v56 > v46)
            goto LABEL_158;
        }
        v58 = v46 - (_QWORD)v56;
        if (v46 - (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v58 >= 0x17)
        {
          v60 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v58 | 7) != 0x17)
            v60 = v58 | 7;
          v61 = v60 + 1;
          p_dst = (std::string *)operator new(v60 + 1);
          __dst.__r_.__value_.__l.__size_ = v58;
          __dst.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v46 - (_BYTE)v56;
          p_dst = &__dst;
          if ((unsigned __int8 *)v46 == v56)
            goto LABEL_140;
        }
        memmove(p_dst, &v56[v57], v58);
LABEL_140:
        p_dst->__r_.__value_.__s.__data_[v58] = 0;
        if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_x = &__x;
        else
          p_x = (std::string *)__x.__r_.__value_.__r.__words[0];
        if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
        else
          v63 = __x.__r_.__value_.__l.__size_;
        v64 = std::string::insert(&__dst, 0, (const std::string::value_type *)p_x, v63);
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        v66 = std::string::append(&v84, " ");
        v67 = v66->__r_.__value_.__r.__words[0];
        v83[0] = v66->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v83 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
        v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__x.__r_.__value_.__l.__data_);
        __x.__r_.__value_.__r.__words[0] = v67;
        __x.__r_.__value_.__l.__size_ = v83[0];
        *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v83 + 7);
        *((_BYTE *)&__x.__r_.__value_.__s + 23) = v68;
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v84.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_111;
LABEL_150:
          operator delete(__dst.__r_.__value_.__l.__data_);
          v40 += 24;
          if (v40 == v41)
            goto LABEL_102;
        }
        else
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_150;
LABEL_111:
          v40 += 24;
          if (v40 == v41)
            goto LABEL_102;
        }
      }
    }
    E5RT::PathWrapper::Append((uint64_t)&v78, begin, &__x);
    if (E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&__x))
      break;
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    ++begin;
  }
  if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v76, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
  }
  else
  {
    v26 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v26;
  }
  sub_191024FE8(a3, (uint64_t)&__x, (uint64_t)&v76);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__x.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_66;
LABEL_80:
    operator delete(__x.__r_.__value_.__l.__data_);
    v27 = __p[0];
    if (!__p[0])
      goto LABEL_68;
LABEL_67:
    __p[1] = v27;
    operator delete(v27);
    goto LABEL_68;
  }
  operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_80;
LABEL_66:
  v27 = __p[0];
  if (__p[0])
    goto LABEL_67;
LABEL_68:
  v28 = v80.__begin_;
  if (v80.__begin_)
  {
    v29 = v80.__end_;
    v30 = v80.__begin_;
    if (v80.__end_ != v80.__begin_)
    {
      do
      {
        if (SHIBYTE(v29[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29[-1].__r_.__value_.__l.__data_);
        --v29;
      }
      while (v29 != v28);
      v30 = v80.__begin_;
    }
    v80.__end_ = v28;
    operator delete(v30);
  }
LABEL_76:
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
}

